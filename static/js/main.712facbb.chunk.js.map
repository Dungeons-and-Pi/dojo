{"version":3,"sources":["resources/images/down-arrow-black.svg","resources/images/down-arrow.svg","resources/images/close-black.svg","resources/images/warning.svg","resources/images/ellipsis.svg","resources/images/minus.svg","resources/images/plus.svg","resources/images/settings.svg","utils/utils.ts","utils/factory.ts","models/monster-group.ts","utils/frankenstein.ts","models/combat.ts","components/controls/checkbox.tsx","components/controls/confirm-button.tsx","components/controls/control-row.tsx","components/controls/dropdown.tsx","components/controls/expander.tsx","components/controls/radial.tsx","components/controls/selector.tsx","components/controls/spin.tsx","components/panels/ability-score-panel.tsx","components/panels/conditions-panel.tsx","components/panels/note.tsx","components/panels/traits-panel.tsx","components/cards/info-card.tsx","components/cards/monster-card.tsx","components/cards/pc-card.tsx","components/panels/hit-point-gauge.tsx","components/panels/map-panel.tsx","components/list-items/combat-list-item.tsx","components/panels/card-group.tsx","components/screens/combat-manager-screen.tsx","components/cards/filter-card.tsx","components/cards/wave-card.tsx","components/list-items/encounter-list-item.tsx","components/panels/difficulty-chart-panel.tsx","components/screens/encounter-builder-screen.tsx","components/panels/readaloud.tsx","components/screens/home-screen.tsx","components/cards/map-card.tsx","components/list-items/map-folio-list-item.tsx","components/screens/map-folios-screen.tsx","components/list-items/monster-group-list-item.tsx","components/screens/monster-library-screen.tsx","components/list-items/party-list-item.tsx","components/screens/parties-screen.tsx","components/dm-modules/die-roller-module.tsx","utils/speech.ts","utils/text-generation.ts","components/dm-modules/language-module.tsx","components/dm-modules/name-module.tsx","components/dm-modules/reference-module.tsx","components/modals/about-modal.tsx","components/modals/add-combatants-modal.tsx","components/modals/combat-start-modal.tsx","models/condition.ts","components/controls/radio-group.tsx","components/modals/condition-modal.tsx","components/modals/demographics-modal.tsx","models/map-folio.ts","components/cards/map-tile-card.tsx","components/modals/map-editor-modal.tsx","components/modals/monster-editor-modal.tsx","components/modals/pc-editor-modal.tsx","components/modals/random-monster-modal.tsx","components/panels/navbar.tsx","components/panels/titlebar.tsx","components/dojo.tsx","index.js"],"names":["module","exports","__webpack_require__","p","Utils","monster","library","group","this","monsterIdToGroup","id","grp","find","g","monsters","includes","filter","text","result","toLowerCase","split","forEach","token","indexOf","s4","Math","floor","random","toString","substring","collection","sorts","arguments","length","undefined","field","dir","sort","a","b","order","fn","score","mod","modifierValue","str","sides","size","cr","parseInt","push","ac","hpMin","hpMax","attack","dmgMin","dmgMax","save","count","level","difficulty","type","plural","value","delta","condition","name","combat","duration","saveDuration","saveType","toUpperCase","saves","saveDC","combatantDuration","point","c","combatants","cmb","combatantID","displayName","roundsDuration","rounds","encounter","monsterNames","slots","slot","names","monsterName","n","tag","Factory","guid","pcs","active","player","race","classes","languages","passiveInsight","passiveInvestigation","passivePerception","initiative","url","category","alignment","challenge","abilityScores","dex","con","int","wis","cha","hpTemp","hitDice","damage","resist","vulnerable","immune","savingThrows","speed","skills","senses","equipment","traits","conditionImmunities","usage","uses","waves","monsterGroupName","maps","items","x","y","width","height","terrain","style","partyID","encounterID","waveID","folioID","mapID","encounterInitMode","map","round","notifications","issues","timestamp","data","combatant","SIZE_TYPES","CATEGORY_TYPES","TRAIT_TYPES","Frankenstein","target","source","tokens","newValue","nudgeChallenge","changeValue","hpPerDie","hitDieType","hp","trait","_this","createMonster","subtype","parseChallenge","challenge_rating","armor_class","hit_points","index","hit_dice","strength","dexterity","constitution","intelligence","wisdom","charisma","damage_resistances","damage_vulnerabilities","damage_immunities","condition_immunities","skill","special_abilities","rawTrait","buildTrait","actions","legendary_actions","openBracket","closeBracket","desc","replace","copy","JSON","parse","stringify","createTrait","traitType","splice","t1","t2","index1","index2","_this2","setRandomValue","m","t","distinct","current","d","addedIDs","copyTrait","findIndex","avg","COMBAT_TAGS","Checkbox","e","stopPropagation","props","checked","display","disabled","toggle","react_default","createElement","className","onClick","click","label","ex","console","error","React","Component","defaultProps","ConfirmButton","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","pressed","setState","callback","content","src","warning","alt","details","perform","ControlRow","controls","Dropdown","open","optionID","select","options","selectedText","selectedID","option","o","placeholder","key","title","ellipsis","dropdown_DropdownOption","selected","toggleOpen","DropdownOption","_this3","Expander","expanded","arrow","Radial","dir2","direction","showOut","showIn","showDiag","transform","padding","Selector","tabs","itemsPerRow","rowCount","ceil","rowContents","rowIndex","selector_SelectorOption","rowSections","row","SelectorOption","Spin","nudgeValue","preventDefault","minusBtns","plusBtns","factors","factor","onTouchEnd","touchEnd","reverse","minus","plus","infoWidth","AbilityScorePanel","showAbilityScores","edit","spin_Spin","toggleAbilityScores","modifier","ConditionsPanel","conditions","conditions_panel_ConditionPanel","nudgeConditionValue","editCondition","removeCondition","conditionID","addCondition","ConditionPanel","conditionDurationText","description","conditionText","expander_Expander","Note","white","showdown","Showdown","Converter","TraitsPanel","prevTrait","nextTrait","traits_panel_TraitPanel","mode","action","removeTrait","swapTraits","traitsByType","showInfo","info","note_Note","match","list","createTraitPanel","addTrait","createSection","TraitPanel","maxUses","heading","used","startsWith","found","markdown","dangerouslySetInnerHTML","__html","makeHtml","onChange","event","confirm_button_ConfirmButton","InfoCard","MonsterCard","showDetails","cloneName","damageOrHealing","max","min","changeHP","temp","val","sizeAndType","align","wave","_this4","some","s","die","conMod","conModStr","_this5","editMonster","setCloneName","cloneMonster","groupOptions","dropdown_Dropdown","moveToGroup","removeMonster","removeEncounterSlot","canAdd","monsterIsInWave","addEncounterSlot","info_card_InfoCard","selectMonster","deselectMonster","radial_Radial","mapMove","auraDetails","aura","selector_Selector","color","mapRemove","mapAdd","pending","defeated","removeCombatant","endTurn","makeDefeated","makeCurrent","makeActive","control_row_ControlRow","checkbox_Checkbox","tags","toggleTag","stats","slotSection","getHP","ability_score_panel_AbilityScorePanel","traits_panel_TraitsPanel","nudgeDamage","heal","setDamage","conditions_panel_ConditionsPanel","imageStyle","toggleDetails","PCCard","editPC","removePC","href","rel","HitPointGauge","hpCurrent","hpBloodied","hpWidth","hpTempBar","hpTempWidth","MapPanel","border","dimensions","i","minX","maxX","minY","maxY","mi","sizeInSquares","miniSize","mapDimensions","sideLength","getSideLength","left","top","getMapDimensions","grid","gridStyle","getStyle","map_panel_GridSquare","setSelectedItemID","tiles","tileStyle","map_panel_MapTile","tile","selectable","selectedItemID","thumbnail","auras","dim","auraStyle","backgroundColor","mt","tokenStyle","map_panel_MapToken","simple","dragOverlay","showOverlay","yOver","xOver","overlayStyle","overlay","posX","posY","gridSquareClicked","GridSquare","onDoubleClick","doubleClick","MapTile","MapToken","initials","hpGauge","altitudeBadge","conditionsBadge","hit_point_gauge_HitPointGauge","altitude","CombatListItem","map_panel_MapPanel","setSelection","CardGroup","showCards","hidden","closeBtn","close","showToggle","toggleCards","cards","CombatManagerScreen","selectedTokenID","addingToMapID","pc_card_PCCard","setAddingToMapID","monster_card_MonsterCard","createCard","combat_manager_screen_PendingCombatantRow","setSelectedTokenID","combat_manager_screen_PCRow","combat_manager_screen_MonsterRow","pendingHelp","concat","activeHelp","notificationSection","combat_manager_screen_NotificationPanel","notification","mapSection","addCombatantToMap","special","legendary","lair","selectedCombatant","card_group_CardGroup","listItems","combats","showCombat","combat_list_item_CombatListItem","resumeEncounter","createCombat","combat_manager_screen_HelpCard","HelpCard","NotificationPanel","success","PendingCombatantRow","_this6","getInformationText","PCRow","_this7","notes","getTagDescription","MonsterRow","_this8","gauge","FilterCard","showAll","sizeOptions","catOptions","cat","resetFilter","summary","challengeMin","challengeMax","toggleAll","WaveCard","removeWave","EncounterListItem","DifficultyChartPanel","monsterCount","monsterXp","getMonster","experience","xpThresholds","diffSection","adjustedXp","experienceFactor","party","xpEasy","xpMedium","xpHard","xpDeadly","pc","pcExperience","adjustedDifficulty","small","getLeft","xp","getRight","right","EncounterBuilderScreen","changeFilterValue","selection","libraryCards","filter_card_FilterCard","nudgeFilterValue","matchMonster","enc","encounterName","leftColumn","encounter_builder_screen_EncounterInfo","parties","addWave","removeEncounter","selectEncounter","encounters","showEncounter","encounter_list_item_EncounterListItem","addEncounter","watermark","encounterCards","getMonsterCards","card","w","waveCards","wave_card_WaveCard","encounter_builder_screen_HelpCard","getLibrarySection","EncounterInfo","partyOptions","selectParty","difficulty_chart_panel_DifficultyChartPanel","Readaloud","HomeScreen","addOpenGameContent","readaloud_Readaloud","MapCard","editMap","removeMap","MapFolioListItem","matchFolio","mapFolio","MapFoliosScreen","folio","map_folios_screen_MapFolioInfo","addMap","removeMapFolio","selectMapFolio","mapFolios","f","showMapFolio","map_folio_list_item_MapFolioListItem","addMapFolio","folioCards","map_card_MapCard","map_folios_screen_HelpCard","MapFolioInfo","MonsterGroupListItem","matchGroup","MonsterLibraryScreen","monster_library_screen_MonsterInfo","addMonster","generateMonster","sortMonsters","removeMonsterGroup","selectMonsterGroup","showMonsterGroup","monster_group_list_item_MonsterGroupListItem","addMonsterGroup","groupID","monster_library_screen_HelpCard","MonsterInfo","PartyListItem","matchParty","PartiesScreen","parties_screen_PartyInfo","addPC","sortPCs","removeParty","showParty","party_list_item_PartyListItem","addParty","activeCards","inactiveCards","activePCs","activePC","inactivePC","parties_screen_HelpCard","PartyInfo","insightSummary","investigationSummary","perceptionSummary","join","reduce","array","localeCompare","insight","invest","percep","DieRollerModule","dice","rolls","dieRoll","roll","rollsSection","resultSection","setDice","nudgeCount","Speech","window","speechSynthesis","cancel","utterance","SpeechSynthesisUtterance","chooseVoice","voice","rate","randomValue","pitch","speak","getVoices","voices","langCodes","lang","getLanguageCode","candidates","v","substr","default","Promise","resolve","onvoiceschanged","language","TextGenerator","sources","model","maxLength","line","addLineToModel","String","fromCharCode","_loop","prev","char","item","freq","requiredResults","lines","failures","extractLine","l","fit","_loop2","repeat","_ret","values","_loop3","ch","mc","maxCount","sum","LanguageModule","output","fetch","response","presetName","preset","getPresets","addLanguage","getLanguages","keys","initModel","generate","presetOptions","selectedPreset","selectedLanguages","isSelected","removeLanguage","allowGenerate","allowReset","language_module_GeneratedText","usePreset","reset","GeneratedText","navigator","clipboard","writeText","say","NameModule","male","female","surname","input","setOption","ReferenceModule","view","fetchData","setView","AboutModal","reference_module_ReferenceModule","language_module_LanguageModule","name_module_NameModule","die_roller_module_DieRollerModule","moduleID","setModule","pkg","version","resetAll","getTools","getAbout","AddCombatantsModal","allCombatants","selectedCombatants","CombatStartModal","combatSetup","notify","getMonsterNames","slotID","partyContent","selectedParty","pcSections","setParty","encounterOptions","encounterContent","selectedEncounter","monsterSections","waveMonsters","setEncounter","folios","folioOptions","selectMapSection","thumbnailSection","mapOptions","setMapID","setFolioID","waveOptions","waveContent","selectedWave","setWave","_this9","_this10","slotsContainer","slotNames","inputs","combat_start_modal_MonsterName","changeName","setEncounterInitMode","leftSection","rightSection","getPartySection","getEncounterSection","getMapSection","getDifficultySection","getMonsterSection","getWaveSection","margin","MonsterName","_this11","CONDITION_TYPES","RadioGroup","radio_group_RadioGroupItem","itemID","RadioGroupItem","ConditionModal","conditionName","durationType","createConditionDurationSaves","createConditionDurationCombatant","createConditionDurationRounds","object","saveOptions","pointOptions","combatantOptions","durations","radio_group_RadioGroup","setCondition","setDuration","DemographicsModal","chart","demographics","allMonsters","buckets","maxBucketSize","bucket","bars","set","selectChart","TERRAIN_TYPES","MapTileCard","terrainOptions","styleOptions","moveMapItem","resizeMapItem","cloneMapItem","removeMapItem","MapEditorModal","selectedTileID","addingTile","createMapItem","smallMapItem","bigMapItem","addBtn","toggleAddingTile","tools","map_tile_card_MapTileCard","mapItem","setSelectedTileID","addMapTile","MonsterEditorModal","page","showFilter","helpSection","sidebar","similarFilter","scratchpadFilter","scratchpadList","sections","getHelpOptionsForPage","section","spliceMonsters","addRandomTrait","getValueSection","getActionsSection","dataType","valueSections","rows","monsterCards","showSidebar","getMonsters","changeTrait","help","selector","setHelpSection","getHelpSection","sidebarContent","toggleMatch","searchResults","slice","resultsRows","addToScratchpadList","removeSection","deleteRows","removeFromScratchpadList","transition","setPage","PCEditorModal","RandomMonsterModal","selectedMonsters","selectedMonstersInfo","selectAll","Navbar","partiesStyle","libraryStyle","encounterStyle","mapStyle","combatStyle","encountersEnabled","combatEnabled","blur","Titlebar","openHome","cog","openAbout","Dojo","modal","selectedPartyID","selectedMonsterGroupID","selectedEncounterID","selectedMapFolioID","selectedCombatID","json","localStorage","getItem","setItem","createParty","createPC","original","createMonsterGroup","sourceGroup","clone","_this12","then","createFromJSON","groupName","createEncounter","_this13","_this14","createEncounterSlot","sortEncounterSlots","_this15","slotContainer","aName","bName","_this16","createEncounterWave","_this17","createMapFolio","_this18","_this19","createMap","_this20","_this21","setup","createCombatSetup","_this22","partyName","addPCToCombat","groupInitRoll","addMonsterToCombat","sortCombatants","initMode","_this23","_this24","_this25","_this26","Date","toLocaleString","_this27","newRound","_this28","actor","_this29","_this30","init","groupRoll","singleRoll","issue","_this31","_this32","_this33","_this34","_this35","saveNotification","createNotification","endNotification","_this36","createCondition","_this37","_this38","_this39","conditionIndex","_this40","obj","_this41","openDemographics","openWaveModal","addToEncounter","pauseCombat","endCombat","_this42","home_screen_HomeScreen","parties_screen_PartiesScreen","monster_library_screen_MonsterLibraryScreen","encounter_builder_screen_EncounterBuilderScreen","addWaveToEncounter","map_folios_screen_MapFoliosScreen","combat_manager_screen_CombatManagerScreen","pausedCombat","resumeCombat","closeNotification","_this43","modalSidebar","modalTitle","modalContent","modalAllowScroll","modalButtons","closeModal","about_modal_AboutModal","demographics_modal_DemographicsModal","pc_editor_modal_PCEditorModal","savePC","monster_editor_modal_MonsterEditorModal","toggleShowSidebar","saveMonster","random_monster_modal_RandomMonsterModal","map_editor_modal_MapEditorModal","saveMap","combat_start_modal_CombatStartModal","startCombat","addWaveToCombat","add_combatants_modal_AddCombatantsModal","addCombatantsFromModal","condition_modal_ConditionModal","addConditionFromModal","editConditionFromModal","_this44","getContent","getActions","getModal","titlebar_Titlebar","navbar_Navbar","ReactDOM","render","dojo_Dojo","document","getElementById"],"mappings":"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","file":"static/js/main.712facbb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/down-arrow-black.a2fc7a1f.svg\";","module.exports = __webpack_public_path__ + \"static/media/down-arrow.697dc1af.svg\";","module.exports = __webpack_public_path__ + \"static/media/close-black.7645a5b9.svg\";","module.exports = __webpack_public_path__ + \"static/media/warning.67a11a95.svg\";","module.exports = __webpack_public_path__ + \"static/media/ellipsis.9650a20f.svg\";","module.exports = __webpack_public_path__ + \"static/media/minus.7003cf50.svg\";","module.exports = __webpack_public_path__ + \"static/media/plus.b60accff.svg\";","module.exports = __webpack_public_path__ + \"static/media/settings.042bb1c2.svg\";","import { Combat } from '../models/combat';\r\nimport { Condition, ConditionDurationCombatant, ConditionDurationRounds, ConditionDurationSaves } from '../models/condition';\r\nimport { Encounter, EncounterWave } from '../models/encounter';\r\nimport { Monster, MonsterGroup } from '../models/monster-group';\r\n\r\nexport default class Utils {\r\n\r\n    // This is an internal dictionary to speed up lookup\r\n    private static monsterIdToGroup: { [id: string]: MonsterGroup } = {};\r\n\r\n    public static getMonsterGroup(monster: Monster, library: MonsterGroup[]): MonsterGroup {\r\n        let group = this.monsterIdToGroup[monster.id];\r\n\r\n        if (!group) {\r\n            const grp = library.find(g => g.monsters.includes(monster));\r\n            if (grp) {\r\n                group = grp;\r\n                this.monsterIdToGroup[monster.id] = group;\r\n            }\r\n        }\r\n\r\n        return group;\r\n    }\r\n\r\n    public static match(filter: string, text: string): boolean {\r\n        if (!filter) {\r\n            return true;\r\n        }\r\n\r\n        let result = true;\r\n\r\n        const tokens = filter.toLowerCase().split(' ');\r\n        tokens.forEach(token => {\r\n            if (text.toLowerCase().indexOf(token) === -1) {\r\n                result = false;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    public static guid(): string {\r\n        const s4 = () => Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\r\n        return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\r\n    }\r\n\r\n    public static sort(collection: any[], sorts: { field: string, dir: 'asc' | 'desc' }[] = []): any[] {\r\n        if (sorts.length === 0) {\r\n            sorts = [{ field: 'name', dir: 'asc' }];\r\n        }\r\n\r\n        const fn = (a: any, b: any, field: string): number => {\r\n            if ((a[field] !== undefined) && (b[field] !== undefined)) {\r\n                if (a[field] < b[field]) { return -1; }\r\n                if (a[field] > b[field]) { return 1; }\r\n            }\r\n            return 0;\r\n        };\r\n\r\n        collection.sort((a, b) => {\r\n            let order = 0;\r\n            sorts.forEach(sort => {\r\n                if (order === 0) {\r\n                    order = fn(a, b, sort.field) * (sort.dir === 'asc' ? 1 : -1);\r\n                }\r\n            });\r\n            return order;\r\n        });\r\n\r\n        return collection;\r\n    }\r\n\r\n    public static modifierValue(score: number): number {\r\n        return Math.floor((score - 10) / 2);\r\n    }\r\n\r\n    public static modifier(score: number): string {\r\n        const mod = this.modifierValue(score);\r\n        let str = mod.toString();\r\n        if (mod >= 0) {\r\n            str = '+' + str;\r\n        }\r\n        return str;\r\n    }\r\n\r\n    public static dieRoll(sides: number = 20): number {\r\n        return Math.floor(Math.random() * sides) + 1;\r\n    }\r\n\r\n    public static miniSize(size: string): number {\r\n        switch (size) {\r\n            case 'tiny': return 1;\r\n            case 'small': return 1;\r\n            case 'medium': return 1;\r\n            case 'large': return 2;\r\n            case 'huge': return 3;\r\n            case 'gargantuan': return 4;\r\n            default: return 1;\r\n        }\r\n    }\r\n\r\n    public static hitDieType(size: string) {\r\n        switch (size) {\r\n            case 'tiny': return 4;\r\n            case 'small': return 6;\r\n            case 'medium': return 8;\r\n            case 'large': return 10;\r\n            case 'huge': return 12;\r\n            case 'gargantuan': return 20;\r\n            default: return 8;\r\n        }\r\n    }\r\n\r\n    public static challenge(cr: number): string {\r\n        switch (cr) {\r\n            case 0.125: return '1/8';\r\n            case 0.25: return '1/4';\r\n            case 0.5: return '1/2';\r\n            default: return cr.toString();\r\n        }\r\n    }\r\n\r\n    public static parseChallenge(cr: string): number {\r\n        switch (cr) {\r\n            case '1/8': return 0.125;\r\n            case '1/4': return 0.25;\r\n            case '1/2': return 0.5;\r\n            default: return parseInt(cr, 10);\r\n        }\r\n    }\r\n\r\n    public static challengeDetails(): any[] {\r\n        const result: any[] = [];\r\n\r\n        result.push({ cr: 0,        ac: 13,       hpMin: 1, hpMax: 6,       attack: 3,  dmgMin: 0,   dmgMax: 1,   save: 13 });\r\n        result.push({ cr: 0.125,    ac: 13,       hpMin: 7, hpMax: 35,      attack: 3,  dmgMin: 2,   dmgMax: 3,   save: 13 });\r\n        result.push({ cr: 0.25,     ac: 13,       hpMin: 36, hpMax: 49,     attack: 3,  dmgMin: 4,   dmgMax: 5,   save: 13 });\r\n        result.push({ cr: 0.5,      ac: 13,       hpMin: 50, hpMax: 70,     attack: 3,  dmgMin: 6,   dmgMax: 8,   save: 13 });\r\n        result.push({ cr: 1,        ac: 13,       hpMin: 71, hpMax: 85,     attack: 3,  dmgMin: 9,   dmgMax: 14,  save: 13 });\r\n        result.push({ cr: 2,        ac: 13,       hpMin: 86, hpMax: 100,    attack: 3,  dmgMin: 15,  dmgMax: 20,  save: 13 });\r\n        result.push({ cr: 3,        ac: 13,       hpMin: 101, hpMax: 115,   attack: 4,  dmgMin: 21,  dmgMax: 26,  save: 13 });\r\n        result.push({ cr: 4,        ac: 14,       hpMin: 116, hpMax: 130,   attack: 5,  dmgMin: 27,  dmgMax: 32,  save: 14 });\r\n        result.push({ cr: 5,        ac: 15,       hpMin: 131, hpMax: 145,   attack: 6,  dmgMin: 33,  dmgMax: 38,  save: 15 });\r\n        result.push({ cr: 6,        ac: 15,       hpMin: 146, hpMax: 160,   attack: 6,  dmgMin: 39,  dmgMax: 44,  save: 15 });\r\n        result.push({ cr: 7,        ac: 15,       hpMin: 161, hpMax: 175,   attack: 6,  dmgMin: 45,  dmgMax: 50,  save: 15 });\r\n        result.push({ cr: 8,        ac: 16,       hpMin: 176, hpMax: 190,   attack: 7,  dmgMin: 51,  dmgMax: 56,  save: 16 });\r\n        result.push({ cr: 9,        ac: 16,       hpMin: 191, hpMax: 205,   attack: 7,  dmgMin: 57,  dmgMax: 62,  save: 16 });\r\n        result.push({ cr: 10,       ac: 17,       hpMin: 206, hpMax: 220,   attack: 7,  dmgMin: 63,  dmgMax: 68,  save: 16 });\r\n        result.push({ cr: 11,       ac: 17,       hpMin: 221, hpMax: 235,   attack: 8,  dmgMin: 69,  dmgMax: 74,  save: 17 });\r\n        result.push({ cr: 12,       ac: 17,       hpMin: 236, hpMax: 250,   attack: 8,  dmgMin: 75,  dmgMax: 80,  save: 17 });\r\n        result.push({ cr: 13,       ac: 18,       hpMin: 251, hpMax: 265,   attack: 8,  dmgMin: 81,  dmgMax: 86,  save: 18 });\r\n        result.push({ cr: 14,       ac: 18,       hpMin: 266, hpMax: 280,   attack: 8,  dmgMin: 87,  dmgMax: 92,  save: 18 });\r\n        result.push({ cr: 15,       ac: 18,       hpMin: 281, hpMax: 295,   attack: 8,  dmgMin: 93,  dmgMax: 98,  save: 18 });\r\n        result.push({ cr: 16,       ac: 18,       hpMin: 296, hpMax: 310,   attack: 9,  dmgMin: 99,  dmgMax: 104, save: 18 });\r\n        result.push({ cr: 17,       ac: 19,       hpMin: 311, hpMax: 325,   attack: 10, dmgMin: 105, dmgMax: 110, save: 19 });\r\n        result.push({ cr: 18,       ac: 19,       hpMin: 326, hpMax: 340,   attack: 10, dmgMin: 111, dmgMax: 116, save: 19 });\r\n        result.push({ cr: 19,       ac: 19,       hpMin: 341, hpMax: 355,   attack: 10, dmgMin: 117, dmgMax: 122, save: 19 });\r\n        result.push({ cr: 20,       ac: 19,       hpMin: 356, hpMax: 400,   attack: 10, dmgMin: 123, dmgMax: 140, save: 19 });\r\n        result.push({ cr: 21,       ac: 19,       hpMin: 401, hpMax: 445,   attack: 11, dmgMin: 141, dmgMax: 158, save: 20 });\r\n        result.push({ cr: 22,       ac: 19,       hpMin: 446, hpMax: 490,   attack: 11, dmgMin: 159, dmgMax: 176, save: 20 });\r\n        result.push({ cr: 23,       ac: 19,       hpMin: 491, hpMax: 535,   attack: 11, dmgMin: 177, dmgMax: 194, save: 20 });\r\n        result.push({ cr: 24,       ac: 19,       hpMin: 536, hpMax: 580,   attack: 12, dmgMin: 195, dmgMax: 212, save: 21 });\r\n        result.push({ cr: 25,       ac: 19,       hpMin: 581, hpMax: 625,   attack: 12, dmgMin: 213, dmgMax: 230, save: 21 });\r\n        result.push({ cr: 26,       ac: 19,       hpMin: 626, hpMax: 670,   attack: 12, dmgMin: 231, dmgMax: 248, save: 21 });\r\n        result.push({ cr: 27,       ac: 19,       hpMin: 671, hpMax: 715,   attack: 13, dmgMin: 249, dmgMax: 266, save: 22 });\r\n        result.push({ cr: 28,       ac: 19,       hpMin: 716, hpMax: 760,   attack: 13, dmgMin: 267, dmgMax: 284, save: 22 });\r\n        result.push({ cr: 29,       ac: 19,       hpMin: 761, hpMax: 805,   attack: 13, dmgMin: 285, dmgMax: 302, save: 22 });\r\n        result.push({ cr: 30,       ac: 19,       hpMin: 806, hpMax: 850,   attack: 14, dmgMin: 303, dmgMax: 320, save: 23 });\r\n\r\n        return result;\r\n    }\r\n\r\n    public static experience(cr: number): number {\r\n        switch (cr) {\r\n            case 0: return 10;\r\n            case 0.125: return 25;\r\n            case 0.25: return 50;\r\n            case 0.5: return 100;\r\n            case 1: return 200;\r\n            case 2: return 450;\r\n            case 3: return 700;\r\n            case 4: return 1100;\r\n            case 5: return 1800;\r\n            case 6: return 2300;\r\n            case 7: return 2900;\r\n            case 8: return 3900;\r\n            case 9: return 5000;\r\n            case 10: return 5900;\r\n            case 11: return 7200;\r\n            case 12: return 8400;\r\n            case 13: return 10000;\r\n            case 14: return 11500;\r\n            case 15: return 13000;\r\n            case 16: return 15000;\r\n            case 17: return 18000;\r\n            case 18: return 20000;\r\n            case 19: return 22000;\r\n            case 20: return 25000;\r\n            case 21: return 33000;\r\n            case 22: return 41000;\r\n            case 23: return 50000;\r\n            case 24: return 62000;\r\n            case 30: return 155000;\r\n            default: return 0;\r\n        }\r\n    }\r\n\r\n    public static experienceFactor(count: number): number {\r\n        switch (count) {\r\n            case 0:\r\n                return 0;\r\n            case 1:\r\n                return 1;\r\n            case 2:\r\n                return 1.5;\r\n            case 3:\r\n            case 4:\r\n            case 5:\r\n            case 6:\r\n                return 2;\r\n            case 7:\r\n            case 8:\r\n            case 9:\r\n            case 10:\r\n                return 2.5;\r\n            case 11:\r\n            case 12:\r\n            case 13:\r\n            case 14:\r\n                return 3;\r\n            default:\r\n                return 4;\r\n        }\r\n    }\r\n\r\n    public static pcExperience(level: number, difficulty: string): number {\r\n        switch (difficulty) {\r\n            case 'easy':\r\n                switch (level) {\r\n                    case 1: return 25;\r\n                    case 2: return 50;\r\n                    case 3: return 75;\r\n                    case 4: return 125;\r\n                    case 5: return 250;\r\n                    case 6: return 300;\r\n                    case 7: return 350;\r\n                    case 8: return 450;\r\n                    case 9: return 550;\r\n                    case 10: return 600;\r\n                    case 11: return 800;\r\n                    case 12: return 1000;\r\n                    case 13: return 1100;\r\n                    case 14: return 1250;\r\n                    case 15: return 1400;\r\n                    case 16: return 1600;\r\n                    case 17: return 2000;\r\n                    case 18: return 2100;\r\n                    case 19: return 2400;\r\n                    case 20: return 2800;\r\n                    default: return 0;\r\n                }\r\n            case 'medium':\r\n                switch (level) {\r\n                    case 1: return 50;\r\n                    case 2: return 100;\r\n                    case 3: return 150;\r\n                    case 4: return 250;\r\n                    case 5: return 500;\r\n                    case 6: return 600;\r\n                    case 7: return 750;\r\n                    case 8: return 900;\r\n                    case 9: return 1100;\r\n                    case 10: return 1200;\r\n                    case 11: return 1600;\r\n                    case 12: return 2000;\r\n                    case 13: return 2200;\r\n                    case 14: return 2500;\r\n                    case 15: return 2800;\r\n                    case 16: return 3200;\r\n                    case 17: return 3900;\r\n                    case 18: return 4200;\r\n                    case 19: return 4900;\r\n                    case 20: return 5700;\r\n                    default: return 0;\r\n                }\r\n            case 'hard':\r\n                switch (level) {\r\n                    case 1: return 75;\r\n                    case 2: return 150;\r\n                    case 3: return 225;\r\n                    case 4: return 375;\r\n                    case 5: return 750;\r\n                    case 6: return 900;\r\n                    case 7: return 1100;\r\n                    case 8: return 1400;\r\n                    case 9: return 1600;\r\n                    case 10: return 1900;\r\n                    case 11: return 2400;\r\n                    case 12: return 3000;\r\n                    case 13: return 3400;\r\n                    case 14: return 3800;\r\n                    case 15: return 4300;\r\n                    case 16: return 4800;\r\n                    case 17: return 5900;\r\n                    case 18: return 6300;\r\n                    case 19: return 7300;\r\n                    case 20: return 8500;\r\n                    default: return 0;\r\n                }\r\n            case 'deadly':\r\n                switch (level) {\r\n                    case 1: return 100;\r\n                    case 2: return 200;\r\n                    case 3: return 400;\r\n                    case 4: return 500;\r\n                    case 5: return 1100;\r\n                    case 6: return 1400;\r\n                    case 7: return 1700;\r\n                    case 8: return 2100;\r\n                    case 9: return 2400;\r\n                    case 10: return 2800;\r\n                    case 11: return 3600;\r\n                    case 12: return 4500;\r\n                    case 13: return 5100;\r\n                    case 14: return 5700;\r\n                    case 15: return 6400;\r\n                    case 16: return 7200;\r\n                    case 17: return 8800;\r\n                    case 18: return 9500;\r\n                    case 19: return 10900;\r\n                    case 20: return 12700;\r\n                    default: return 0;\r\n                }\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n\r\n    public static traitType(type: string, plural: boolean): string {\r\n        let str = '';\r\n        switch (type) {\r\n            case 'trait':\r\n                str = 'trait';\r\n                break;\r\n            case 'action':\r\n                str = 'action';\r\n                break;\r\n            case 'legendary':\r\n                str = 'legendary action';\r\n                break;\r\n            case 'lair':\r\n                str = 'lair action';\r\n                break;\r\n        }\r\n\r\n        if (plural) {\r\n            str += 's';\r\n        }\r\n\r\n        return str;\r\n    }\r\n\r\n    public static nudgeChallenge(value: number, delta: number): number {\r\n        let result = 0;\r\n\r\n        switch (value) {\r\n            case 0:\r\n                if (delta === -1) {\r\n                    result = 0;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 0.125;\r\n                }\r\n                break;\r\n            case 0.125:\r\n                if (delta === -1) {\r\n                    result = 0;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 0.25;\r\n                }\r\n                break;\r\n            case 0.25:\r\n                if (delta === -1) {\r\n                    result = 0.125;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 0.5;\r\n                }\r\n                break;\r\n            case 0.5:\r\n                if (delta === -1) {\r\n                    result = 0.25;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 1;\r\n                }\r\n                break;\r\n            case 1:\r\n                if (delta === -1) {\r\n                    result = 0.5;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 2;\r\n                }\r\n                break;\r\n            default:\r\n                result = value + delta;\r\n                break;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public static conditionText(condition: Condition): string[] {\r\n        switch (condition.name) {\r\n            case 'blinded':\r\n                return [\r\n                    'a blinded creature can’t see and automatically fails any ability check that requires sight',\r\n                    'attack rolls against the creature have advantage, and the creature’s attack rolls have disadvantage'\r\n                ];\r\n            case 'charmed':\r\n                return [\r\n                    'a charmed creature can’t attack the charmer or target the charmer with harmful abilities or magical effects',\r\n                    'the charmer has advantage on any ability check to interact socially with the creature'\r\n                ];\r\n            case 'deafened':\r\n                return [\r\n                    'a deafened creature can’t hear and automatically fails any ability check that requires hearing.'\r\n                ];\r\n            case 'exhaustion': {\r\n                switch (condition.level) {\r\n                case 1:\r\n                    return [\r\n                        'disadvantage on ability checks'\r\n                    ];\r\n                case 2:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved'\r\n                    ];\r\n                case 3:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved',\r\n                        'disadvantage on attack rolls and saving throws'\r\n                    ];\r\n                case 4:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved',\r\n                        'disadvantage on attack rolls and saving throws',\r\n                        'hit point maximum halved'\r\n                    ];\r\n                case 5:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved',\r\n                        'disadvantage on attack rolls and saving throws',\r\n                        'hit point maximum halved',\r\n                        'speed reduced to 0'\r\n                    ];\r\n                case 6:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved',\r\n                        'disadvantage on attack rolls and saving throws',\r\n                        'hit point maximum halved',\r\n                        'speed reduced to 0',\r\n                        'death'\r\n                    ];\r\n                default:\r\n                    return [];\r\n                }\r\n            }\r\n            case 'frightened':\r\n                return [\r\n                    'a frightened creature has disadvantage on ability checks and attack rolls while the source of its fear is within line of sight',\r\n                    'the creature can’t willingly move closer to the source of its fear'\r\n                ];\r\n            case 'grappled':\r\n                return [\r\n                    'a grappled creature’s speed becomes 0, and it can’t benefit from any bonus to its speed',\r\n                    'the condition ends if the grappler is incapacitated',\r\n                    'the condition also ends if an effect removes the grappled creature from the reach of the grappler or grappling effect'\r\n                ];\r\n            case 'incapacitated':\r\n                return [\r\n                    'an incapacitated creature can’t take actions or reactions'\r\n                ];\r\n            case 'invisible':\r\n                return [\r\n                    'an invisible creature is impossible to see without the aid of magic or a special sense',\r\n                    'for the purpose of hiding, the creature is heavily obscured',\r\n                    'the creature’s location can be detected by any noise it makes or any tracks it leaves',\r\n                    'attack rolls against the creature have disadvantage, and the creature’s attack rolls have advantage'\r\n                ];\r\n            case 'paralyzed':\r\n                return [\r\n                    'a paralyzed creature is incapacitated (can’t take actions or reactions) and can’t move or speak',\r\n                    'the creature automatically fails strength and dexterity saving throws',\r\n                    'attack rolls against the creature have advantage',\r\n                    'any attack that hits the creature is a critical hit if the attacker is within 5 feet of the creature'\r\n                ];\r\n            case 'petrified':\r\n                return [\r\n                    /* tslint:disable-next-line:max-line-length */\r\n                    'a petrified creature is transformed, along with any nonmagical objects it is wearing or carrying, into a solid inanimate substance (usually stone)',\r\n                    'its weight increases by a factor of ten, and it ceases aging',\r\n                    'the creature is incapacitated (can’t take actions or reactions), can’t move or speak, and is unaware of its surroundings',\r\n                    'attack rolls against the creature have advantage',\r\n                    'the creature automatically fails strength and dexterity saving throws',\r\n                    'the creature has resistance to all damage',\r\n                    'the creature is immune to poison and disease, although a poison or disease already in its system is suspended, not neutralized'\r\n                ];\r\n            case 'poisoned':\r\n                return [\r\n                    'a poisoned creature has disadvantage on attack rolls and ability checks'\r\n                ];\r\n            case 'prone':\r\n                return [\r\n                    'a prone creature’s only movement option is to crawl, unless it stands up and thereby ends the condition',\r\n                    'the creature has disadvantage on attack rolls',\r\n                    /* tslint:disable-next-line:max-line-length */\r\n                    'an attack roll against the creature has advantage if the attacker is Within 5 feet of the creature; otherwise, the attack roll has disadvantage'\r\n                ];\r\n            case 'restrained':\r\n                return [\r\n                    'a restrained creature’s speed becomes 0, and it can’t benefit from any bonus to its speed',\r\n                    'attack rolls against the creature have advantage, and the creature’s attack rolls have disadvantage',\r\n                    'the creature has disadvantage on dexterity saving throws'\r\n                ];\r\n            case 'stunned':\r\n                return [\r\n                    'a stunned creature is incapacitated (can’t take actions or reactions), can’t move, and can speak only falteringly',\r\n                    'the creature automatically fails strength and dexterity saving throws',\r\n                    'attack rolls against the creature have advantage'\r\n                ];\r\n            case 'unconscious':\r\n                return [\r\n                    'an unconscious creature is incapacitated (can’t take actions or reactions), can’t move or speak, and is unaware of its surroundings',\r\n                    'the creature drops whatever its holding and falls prone',\r\n                    'the creature automatically fails strength and dexterity saving throws',\r\n                    'attack rolls against the creature have advantage',\r\n                    'any attack that hits the creature is a critical hit if the attacker is within 5 feet of the creature'\r\n                ];\r\n            case 'custom':\r\n                return [];\r\n            default:\r\n                return [];\r\n        }\r\n    }\r\n\r\n    public static conditionDurationText(condition: Condition, combat: Combat) {\r\n        if (condition.duration !== null) {\r\n            switch (condition.duration.type) {\r\n                case 'saves':\r\n                    const saveDuration = condition.duration as ConditionDurationSaves;\r\n                    let saveType = saveDuration.saveType.toString();\r\n                    if (saveType !== 'death') {\r\n                        saveType = saveType.toUpperCase();\r\n                    }\r\n                    const saves = saveDuration.count > 1 ? 'saves' : 'save';\r\n                    return 'until you make ' + saveDuration.count + ' ' + saveType + ' ' + saves + ' at dc ' + saveDuration.saveDC;\r\n                case 'combatant':\r\n                    const combatantDuration = condition.duration as ConditionDurationCombatant;\r\n                    const point = combatantDuration.point;\r\n                    const c = combat.combatants.find(cmb => cmb.id === combatantDuration.combatantID);\r\n                    const combatant = c ? (c.displayName || c.name || 'unnamed monster') + '\\'s' : 'someone\\'s';\r\n                    return 'until the ' + point + ' of ' + combatant + ' next turn';\r\n                case 'rounds':\r\n                    const roundsDuration = condition.duration as ConditionDurationRounds;\r\n                    const rounds = roundsDuration.count > 1 ? 'rounds' : 'round';\r\n                    return 'for ' + roundsDuration.count + ' ' + rounds;\r\n                default:\r\n                    return null;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public static getMonsterNames(encounter: Encounter | EncounterWave): { id: string, names: string[] }[] {\r\n        const monsterNames: any[] = [];\r\n        if (encounter) {\r\n            encounter.slots.forEach(slot => {\r\n                const names: any[] = [];\r\n                if (slot.count === 1) {\r\n                    names.push(slot.monsterName);\r\n                } else {\r\n                    for (let n = 0; n !== slot.count; ++n) {\r\n                        names.push(slot.monsterName + ' ' + (n + 1));\r\n                    }\r\n                }\r\n\r\n                monsterNames.push({\r\n                    id: slot.id,\r\n                    names: names\r\n                });\r\n            });\r\n        }\r\n\r\n        return monsterNames;\r\n    }\r\n\r\n    public static getTagDescription(tag: string) {\r\n        switch (tag) {\r\n            case 'conc':\r\n                return 'concentrating';\r\n            case 'bane':\r\n                return 'baned (subtract d4 from attack rolls and saving throws)';\r\n            case 'bless':\r\n                return 'blessed (add d4 to attack rolls and saving throws)';\r\n            case 'hex':\r\n                return 'hexed (disadvantage on one saving throw; take additional damage on hit)';\r\n            default:\r\n                return tag;\r\n        }\r\n    }\r\n}\r\n","import Utils from './utils';\r\n\r\nimport { Combat, CombatSetup, Notification } from '../models/combat';\r\nimport { Condition, ConditionDurationCombatant, ConditionDurationRounds, ConditionDurationSaves } from '../models/condition';\r\nimport { Encounter, EncounterSlot, EncounterWave } from '../models/encounter';\r\nimport { Map, MapFolio, MapItem } from '../models/map-folio';\r\nimport { Monster, MonsterGroup, Trait } from '../models/monster-group';\r\nimport { Party, PC } from '../models/party';\r\n\r\nexport default class Factory {\r\n\r\n    public static createParty(): Party {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            pcs: []\r\n        };\r\n    }\r\n\r\n    public static createPC(): PC {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'pc',\r\n            active: true,\r\n            player: '',\r\n            name: '',\r\n            race: '',\r\n            classes: '',\r\n            level: 1,\r\n            languages: 'Common',\r\n            passiveInsight: 10,\r\n            passiveInvestigation: 10,\r\n            passivePerception: 10,\r\n            initiative: 10,\r\n            url: ''\r\n        };\r\n    }\r\n\r\n    public static createMonsterGroup(): MonsterGroup {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            monsters: []\r\n        };\r\n    }\r\n\r\n    public static createMonster(): Monster {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'monster',\r\n            name: '',\r\n            size: 'medium',\r\n            category: 'humanoid',\r\n            tag: '',\r\n            alignment: '',\r\n            challenge: 1,\r\n            abilityScores: {\r\n                str: 10,\r\n                dex: 10,\r\n                con: 10,\r\n                int: 10,\r\n                wis: 10,\r\n                cha: 10\r\n            },\r\n            ac: 10,\r\n            hpMax: 4,\r\n            hpTemp: 0,\r\n            hitDice: 1,\r\n            damage: {\r\n                resist: '',\r\n                vulnerable: '',\r\n                immune: ''\r\n            },\r\n            savingThrows: '',\r\n            speed: '',\r\n            skills: '',\r\n            senses: '',\r\n            languages: '',\r\n            equipment: '',\r\n            traits: [],\r\n            conditionImmunities: ''\r\n        };\r\n    }\r\n\r\n    public static createTrait(): Trait {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            usage: '',\r\n            type: 'action',\r\n            text: '',\r\n            uses: 0\r\n        };\r\n    }\r\n\r\n    public static createEncounter(): Encounter {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            slots: [],\r\n            waves: []\r\n        };\r\n    }\r\n\r\n    public static createEncounterSlot(): EncounterSlot {\r\n        return {\r\n            id: Utils.guid(),\r\n            monsterGroupName: '',\r\n            monsterName: '',\r\n            count: 1\r\n        };\r\n    }\r\n\r\n    public static createEncounterWave(): EncounterWave {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            slots: []\r\n        };\r\n    }\r\n\r\n    public static createMapFolio(): MapFolio {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            maps: []\r\n        };\r\n    }\r\n\r\n    public static createMap(): Map {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            items: []\r\n        };\r\n    }\r\n\r\n    public static createMapItem(): MapItem {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'tile',\r\n            x: 0,\r\n            y: 0,\r\n            width: 4,\r\n            height: 4,\r\n            terrain: null,\r\n            style: null\r\n        };\r\n    }\r\n\r\n    public static createCombatSetup(): CombatSetup {\r\n        return {\r\n            partyID: null,\r\n            encounterID: null,\r\n            waveID: null,\r\n            folioID: null,\r\n            mapID: null,\r\n            monsterNames: [],\r\n            encounterInitMode: 'group'\r\n        };\r\n    }\r\n\r\n    public static createCombat(): Combat {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            encounterID: null,\r\n            combatants: [],\r\n            map: null,\r\n            round: 1,\r\n            notifications: [],\r\n            issues: [],\r\n            timestamp: null\r\n        };\r\n    }\r\n\r\n    public static createNotification(): Notification {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'condition-save',\r\n            data: null,\r\n            combatant: null\r\n        };\r\n    }\r\n\r\n    public static createCondition(): Condition {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            level: 1,\r\n            text: null,\r\n            duration: null\r\n        };\r\n    }\r\n\r\n    public static createConditionDurationSaves(): ConditionDurationSaves {\r\n        return {\r\n            type: 'saves',\r\n            count: 1,\r\n            saveType: 'str',\r\n            saveDC: 10,\r\n            point: 'start'\r\n        };\r\n    }\r\n\r\n    public static createConditionDurationCombatant(): ConditionDurationCombatant {\r\n        return {\r\n            type: 'combatant',\r\n            point: 'start',\r\n            combatantID: null\r\n        };\r\n    }\r\n\r\n    public static createConditionDurationRounds(): ConditionDurationRounds {\r\n        return {\r\n            type: 'rounds',\r\n            count: 1\r\n        };\r\n    }\r\n}\r\n","export interface MonsterGroup {\r\n    id: string;\r\n    name: string;\r\n    monsters: Monster[];\r\n}\r\n\r\nexport interface Monster {\r\n    id: string;\r\n    type: string;\r\n    name: string;\r\n    size: string;\r\n    category: string;\r\n    tag: string;\r\n    alignment: string;\r\n    challenge: number;\r\n    abilityScores: {\r\n        str: number;\r\n        dex: number;\r\n        con: number;\r\n        int: number;\r\n        wis: number;\r\n        cha: number;\r\n    };\r\n    ac: number;\r\n    hpMax: number;\r\n    hpTemp: number;\r\n    hitDice: number;\r\n    damage: {\r\n        resist: string;\r\n        vulnerable: string;\r\n        immune: string;\r\n    };\r\n    savingThrows: string;\r\n    speed: string;\r\n    skills: string;\r\n    senses: string;\r\n    languages: string;\r\n    equipment: string;\r\n    traits: Trait[];\r\n    conditionImmunities: string;\r\n}\r\n\r\nexport interface Trait {\r\n    id: string;\r\n    name: string;\r\n    usage: string;\r\n    type: 'trait' | 'action' | 'legendary' | 'lair';\r\n    text: string;\r\n    uses: number;\r\n}\r\n\r\nexport const SIZE_TYPES = [\r\n    'tiny',\r\n    'small',\r\n    'medium',\r\n    'large',\r\n    'huge',\r\n    'gargantuan'\r\n];\r\n\r\nexport const CATEGORY_TYPES = [\r\n    'aberration',\r\n    'beast',\r\n    'celestial',\r\n    'construct',\r\n    'dragon',\r\n    'elemental',\r\n    'fey',\r\n    'fiend',\r\n    'giant',\r\n    'humanoid',\r\n    'monstrosity',\r\n    'ooze',\r\n    'plant',\r\n    'undead'\r\n];\r\n\r\nexport const TRAIT_TYPES = [\r\n    'trait',\r\n    'action',\r\n    'legendary',\r\n    'lair'\r\n];\r\n","import Factory from './factory';\r\nimport Utils from './utils';\r\n\r\nimport { Monster, Trait, TRAIT_TYPES } from '../models/monster-group';\r\n\r\nexport default class Frankenstein {\r\n    public static nudgeValue(target: Monster, field: string, delta: number) {\r\n        let source: any = target;\r\n        let value: any = null;\r\n        const tokens = field.split('.');\r\n        tokens.forEach(token => {\r\n            if (token === tokens[tokens.length - 1]) {\r\n                value = source[token];\r\n            } else {\r\n                source = source[token];\r\n            }\r\n        });\r\n\r\n        const newValue = (field === 'challenge') ? Utils.nudgeChallenge(value, delta) : (value ? value : 0) + delta;\r\n        Frankenstein.changeValue(target, field, newValue);\r\n    }\r\n\r\n    public static changeValue(target: Monster, field: string, value: any) {\r\n        let source: any = target;\r\n        const tokens = field.split('.');\r\n        tokens.forEach(token => {\r\n            if (token === tokens[tokens.length - 1]) {\r\n                source[token] = value;\r\n\r\n                if ((field === 'abilityScores.con') || (field === 'size') || (field === 'hitDice')) {\r\n                    const sides = Utils.hitDieType(target.size);\r\n                    const conMod = Math.floor((target.abilityScores.con - 10) / 2);\r\n                    const hpPerDie = ((sides + 1) / 2) + conMod;\r\n                    const hp = Math.floor(target.hitDice * hpPerDie);\r\n                    target.hpMax = hp;\r\n                }\r\n            } else {\r\n                source = source[token];\r\n            }\r\n        });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Monster creation\r\n\r\n    public static clone(monster: Monster, name: string): Monster {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'monster',\r\n            name: name || (monster.name + ' copy'),\r\n            size: monster.size,\r\n            category: monster.category,\r\n            tag: monster.tag,\r\n            alignment: monster.alignment,\r\n            challenge: monster.challenge,\r\n            abilityScores: {\r\n                str: monster.abilityScores.str,\r\n                dex: monster.abilityScores.dex,\r\n                con: monster.abilityScores.con,\r\n                int: monster.abilityScores.int,\r\n                wis: monster.abilityScores.wis,\r\n                cha: monster.abilityScores.cha\r\n            },\r\n            ac: monster.ac,\r\n            hpMax: monster.hpMax,\r\n            hpTemp: monster.hpTemp,\r\n            hitDice: monster.hitDice,\r\n            damage: {\r\n                resist: monster.damage.resist,\r\n                vulnerable: monster.damage.vulnerable,\r\n                immune: monster.damage.immune\r\n            },\r\n            savingThrows: monster.savingThrows,\r\n            speed: monster.speed,\r\n            skills: monster.skills,\r\n            senses: monster.senses,\r\n            languages: monster.languages,\r\n            equipment: monster.equipment,\r\n            traits: monster.traits.map(trait => {\r\n                return {\r\n                    id: Utils.guid(),\r\n                    name: trait.name,\r\n                    usage: trait.usage,\r\n                    type: trait.type,\r\n                    text: trait.text,\r\n                    uses: 0\r\n                };\r\n            }),\r\n            conditionImmunities: monster.conditionImmunities\r\n        };\r\n    }\r\n\r\n    public static createFromJSON(data: any): Monster {\r\n        const monster = Factory.createMonster();\r\n\r\n        monster.type = 'monster';\r\n        monster.name = data.name;\r\n        monster.size = data.size.toLowerCase();\r\n        monster.category = data.type;\r\n        monster.tag = data.subtype;\r\n        monster.alignment = data.alignment;\r\n        monster.challenge = Utils.parseChallenge(data.challenge_rating);\r\n        monster.ac = data.armor_class;\r\n        monster.hpMax = data.hit_points;\r\n        monster.speed = data.speed;\r\n        monster.senses = data.senses;\r\n        monster.languages = data.languages;\r\n\r\n        const index = data.hit_dice.indexOf('d');\r\n        monster.hitDice = parseInt(data.hit_dice.substring(0, index), 10);\r\n\r\n        monster.abilityScores.str = data.strength;\r\n        monster.abilityScores.dex = data.dexterity;\r\n        monster.abilityScores.con = data.constitution;\r\n        monster.abilityScores.int = data.intelligence;\r\n        monster.abilityScores.wis = data.wisdom;\r\n        monster.abilityScores.cha = data.charisma;\r\n\r\n        monster.damage.resist = data.damage_resistances;\r\n        monster.damage.vulnerable = data.damage_vulnerabilities;\r\n        monster.damage.immune = data.damage_immunities;\r\n        monster.conditionImmunities = data.condition_immunities;\r\n\r\n        const saves = [\r\n            {\r\n                field: 'strength_save',\r\n                text: 'Strength'\r\n            },\r\n            {\r\n                field: 'dexterity_save',\r\n                text: 'Dexterity'\r\n            },\r\n            {\r\n                field: 'constitution_save',\r\n                text: 'Constitution'\r\n            },\r\n            {\r\n                field: 'intelligence_save',\r\n                text: 'Intelligence'\r\n            },\r\n            {\r\n                field: 'wisdom_save',\r\n                text: 'Wisdom'\r\n            },\r\n            {\r\n                field: 'charisma_save',\r\n                text: 'Charisma'\r\n            }\r\n        ];\r\n        saves.forEach(save => {\r\n            if (data[save.field]) {\r\n                const str = save.text + ' ' + data[save.field];\r\n                monster.savingThrows += monster.savingThrows === '' ? str : ', ' + str;\r\n            }\r\n        });\r\n\r\n        const skills = [\r\n            {\r\n                field: 'acrobatics',\r\n                text: 'Acrobatics'\r\n            },\r\n            {\r\n                field: 'animal_handling',\r\n                text: 'Animal handling'\r\n            },\r\n            {\r\n                field: 'arcana',\r\n                text: 'Arcana'\r\n            },\r\n            {\r\n                field: 'athletics',\r\n                text: 'Athletics'\r\n            },\r\n            {\r\n                field: 'deception',\r\n                text: 'Deception'\r\n            },\r\n            {\r\n                field: 'history',\r\n                text: 'History'\r\n            },\r\n            {\r\n                field: 'insight',\r\n                text: 'Insight'\r\n            },\r\n            {\r\n                field: 'intimidation',\r\n                text: 'Intimidation'\r\n            },\r\n            {\r\n                field: 'investigation',\r\n                text: 'Investigation'\r\n            },\r\n            {\r\n                field: 'medicine',\r\n                text: 'Medicine'\r\n            },\r\n            {\r\n                field: 'nature',\r\n                text: 'Nature'\r\n            },\r\n            {\r\n                field: 'perception',\r\n                text: 'Perception'\r\n            },\r\n            {\r\n                field: 'performance',\r\n                text: 'Performance'\r\n            },\r\n            {\r\n                field: 'persuasion',\r\n                text: 'Persuasion'\r\n            },\r\n            {\r\n                field: 'religion',\r\n                text: 'Religion'\r\n            },\r\n            {\r\n                field: 'sleight_of_hand',\r\n                text: 'Sleight of hand'\r\n            },\r\n            {\r\n                field: 'stealth',\r\n                text: 'Stealth'\r\n            },\r\n            {\r\n                field: 'survival',\r\n                text: 'Survival'\r\n            }\r\n        ];\r\n        skills.forEach(skill => {\r\n            if (data[skill.field]) {\r\n                const str = skill.text + ' ' + data[skill.field];\r\n                monster.skills += monster.skills === '' ? str : ', ' + str;\r\n            }\r\n        });\r\n\r\n        if (data.special_abilities) {\r\n            data.special_abilities.forEach((rawTrait: any) => {\r\n                const trait = this.buildTrait(rawTrait, 'trait');\r\n                monster.traits.push(trait);\r\n            });\r\n        }\r\n        if (data.actions) {\r\n            data.actions.forEach((rawTrait: any) => {\r\n                const trait = this.buildTrait(rawTrait, 'action');\r\n                monster.traits.push(trait);\r\n            });\r\n        }\r\n        if (data.legendary_actions) {\r\n            data.legendary_actions.forEach((rawTrait: any) => {\r\n                const trait = this.buildTrait(rawTrait, 'legendary');\r\n                monster.traits.push(trait);\r\n            });\r\n        }\r\n\r\n        return monster;\r\n    }\r\n\r\n    private static buildTrait(rawTrait: any, type: 'trait' | 'action' | 'legendary' | 'lair'): Trait {\r\n        let name = '';\r\n        let usage = '';\r\n\r\n        const openBracket = rawTrait.name.indexOf('(');\r\n        if (openBracket === -1) {\r\n            name = rawTrait.name;\r\n        } else {\r\n            const closeBracket = rawTrait.name.indexOf(')');\r\n            name = rawTrait.name.substring(0, openBracket - 1);\r\n            usage = rawTrait.name.substring(openBracket + 1, closeBracket).toLowerCase();\r\n        }\r\n\r\n        const text = rawTrait.desc.replace(/•/g, '*');\r\n\r\n        return {\r\n            id: Utils.guid(),\r\n            type: (name === 'Lair Actions') ? 'lair' : type,\r\n            name: name,\r\n            usage: usage,\r\n            text: text,\r\n            uses: 0\r\n        };\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Traits\r\n\r\n    public static copyTrait(target: Monster, trait: Trait) {\r\n        const copy = JSON.parse(JSON.stringify(trait));\r\n        copy.id = Utils.guid();\r\n        target.traits.push(copy);\r\n    }\r\n\r\n    public static addTrait(target: Monster, type: 'trait' | 'action' | 'legendary' | 'lair') {\r\n        const trait = Factory.createTrait();\r\n        trait.type = type;\r\n        trait.name = 'New ' + Utils.traitType(type, false).toLowerCase();\r\n        target.traits.push(trait);\r\n    }\r\n\r\n    public static removeTrait(target: Monster, trait: Trait) {\r\n        const index = target.traits.indexOf(trait);\r\n        target.traits.splice(index, 1);\r\n    }\r\n\r\n    public static swapTraits(target: Monster, t1: Trait, t2: Trait) {\r\n        const index1 = target.traits.indexOf(t1);\r\n        const index2 = target.traits.indexOf(t2);\r\n        target.traits[index2] = t1;\r\n        target.traits[index1] = t2;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Randomisation\r\n\r\n    public static spliceMonsters(target: Monster, monsters: Monster[]) {\r\n        const fields = [\r\n            'size',\r\n            'category',\r\n            'tag',\r\n            'alignment',\r\n            'challenge',\r\n            'speed',\r\n            'senses',\r\n            'languages',\r\n            'equipment',\r\n            'abilityScores.str',\r\n            'abilityScores.dex',\r\n            'abilityScores.con',\r\n            'abilityScores.int',\r\n            'abilityScores.wis',\r\n            'abilityScores.cha',\r\n            'savingThrows',\r\n            'skills',\r\n            'ac',\r\n            'hitDice',\r\n            'damage.resist',\r\n            'damage.vulnerable',\r\n            'damage.immune',\r\n            'conditionImmunities'\r\n        ];\r\n        fields.forEach(field => {\r\n            this.setRandomValue(target, field, monsters);\r\n        });\r\n\r\n        target.traits = [];\r\n\r\n        TRAIT_TYPES.forEach(type => {\r\n            // Get all traits of this type\r\n            const traits: Trait[] = [];\r\n            monsters.forEach(m => {\r\n                m.traits.filter(t => t.type === type)\r\n                    .forEach(t => traits.push(t));\r\n            });\r\n\r\n            // Collate by name\r\n            const distinct: { trait: Trait, count: number }[] = [];\r\n            traits.forEach(t => {\r\n                const current = distinct.find(d => d.trait.name === t.name);\r\n                if (current) {\r\n                    current.count += 1;\r\n                } else {\r\n                    distinct.push({\r\n                        trait: t,\r\n                        count: 1\r\n                    });\r\n                }\r\n            });\r\n\r\n            // If any are common to all monsters, copy them and remove from the candidates\r\n            const addedIDs: string[] = [];\r\n            distinct.filter(d => d.count === monsters.length)\r\n                .forEach(d => {\r\n                    this.copyTrait(target, d.trait);\r\n                    addedIDs.push(d.trait.id);\r\n                });\r\n            addedIDs.forEach(id => {\r\n                const index = distinct.findIndex(d => d.trait.id === id);\r\n                distinct.splice(index, 1);\r\n            });\r\n\r\n            const avg = traits.length / monsters.length;\r\n            while (target.traits.filter(t => t.type === type).length < avg) {\r\n                const index = Math.floor(Math.random() * distinct.length);\r\n                const t = distinct[index].trait;\r\n                this.copyTrait(target, t);\r\n                distinct.splice(index, 1);\r\n            }\r\n        });\r\n    }\r\n\r\n    public static setRandomValue(target: Monster, field: string, monsters: Monster[]) {\r\n        const index = Math.floor(Math.random() * monsters.length);\r\n        const m = monsters[index];\r\n\r\n        let source: any = m;\r\n        let value = null;\r\n        const tokens = field.split('.');\r\n        tokens.forEach(token => {\r\n            if (token === tokens[tokens.length - 1]) {\r\n                value = source[token];\r\n            } else {\r\n                source = source[token];\r\n            }\r\n        });\r\n\r\n        this.changeValue(target, field, value);\r\n    }\r\n\r\n    public static addRandomTrait(target: Monster, type: string, monsters: Monster[]) {\r\n        const traits: Trait[] = [];\r\n        monsters.forEach(m => {\r\n            m.traits.filter(t => t.type === type)\r\n                .forEach(t => {\r\n                    traits.push(t);\r\n                });\r\n        });\r\n\r\n        const index = Math.floor(Math.random() * traits.length);\r\n        const trait = traits[index];\r\n\r\n        this.copyTrait(target, trait);\r\n    }\r\n}\r\n","import { Condition } from './condition';\r\nimport { Map } from './map-folio';\r\nimport { Monster, Trait } from './monster-group';\r\nimport { PC } from './party';\r\n\r\nexport interface CombatSetup {\r\n    partyID: string | null;\r\n    encounterID: string | null;\r\n    waveID: string | null;\r\n    folioID: string | null;\r\n    mapID: string | null;\r\n    monsterNames: { id: string, names: string[] }[];\r\n    encounterInitMode: 'manual' | 'individual' | 'group';\r\n}\r\n\r\nexport interface Combat {\r\n    id: string;\r\n    name: string;\r\n    encounterID: string | null;\r\n    combatants: ((Combatant & PC) | (Combatant & Monster))[];\r\n    map: Map | null;\r\n    round: number;\r\n    notifications: Notification[];\r\n    issues: string[];\r\n    timestamp: string | null;\r\n}\r\n\r\nexport interface Combatant {\r\n    id: string;\r\n    displayName: string;\r\n    current: boolean;\r\n    pending: boolean;\r\n    active: boolean;\r\n    defeated: boolean;\r\n    initiative: number | null;\r\n    hp: number | null;\r\n    conditions: Condition[];\r\n    tags: string[];\r\n    altitude: number;\r\n    aura: {\r\n        size: number;\r\n        style: 'square' | 'rounded' | 'circle';\r\n        color: string;\r\n    };\r\n}\r\n\r\nexport interface Notification {\r\n    id: string;\r\n    type: 'condition-save' | 'condition-end' | 'trait-recharge';\r\n    data: Condition | Trait | null;\r\n    combatant: (Combatant & Monster) | null;\r\n}\r\n\r\nexport const COMBAT_TAGS = [\r\n    'conc',\r\n    'bane',\r\n    'bless',\r\n    'hex',\r\n    'prone'\r\n];\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    label: string;\r\n    display: 'switch' | 'button';\r\n    checked: boolean;\r\n    changeValue: (value: boolean) => void;\r\n    disabled: boolean;\r\n}\r\n\r\nexport default class Checkbox extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        display: 'switch',\r\n        disabled: false\r\n    };\r\n\r\n    private click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        this.props.changeValue(!this.props.checked);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'checkbox ' + this.props.display;\r\n            if (this.props.checked) {\r\n                style += ' checked';\r\n            }\r\n            if (this.props.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            let toggle = null;\r\n            if (this.props.display === 'switch') {\r\n                toggle = (\r\n                    <div className='toggle-container'>\r\n                        <div className='toggle'/>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={style} onClick={e => this.click(e)}>\r\n                    <div className='checkbox-label'>{this.props.label}</div>\r\n                    {toggle}\r\n                </div>\r\n            );\r\n\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport warning from '../../resources/images/warning.svg';\r\n\r\ninterface Props {\r\n    text: string;\r\n    callback: () => void;\r\n    details: string;\r\n    disabled: boolean;\r\n}\r\n\r\ninterface State {\r\n    pressed: boolean;\r\n}\r\n\r\nexport default class ConfirmButton extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        details: null,\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            pressed: false\r\n        };\r\n    }\r\n\r\n    private toggle() {\r\n        this.setState({\r\n            pressed: !this.state.pressed\r\n        });\r\n    }\r\n\r\n    private perform() {\r\n        this.toggle();\r\n        this.props.callback();\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let content = null;\r\n            if (this.state.pressed) {\r\n                content = (\r\n                    <div>\r\n                        <div className='title'>{this.props.text} - are you sure?</div>\r\n                        <img className='image' src={warning} alt='warning' />\r\n                        {this.props.details ? <div className='details'>{this.props.details}</div> : null}\r\n                        <div className='confirmation'>\r\n                            <div className='destructive' onClick={() => this.perform()}>yes</div>\r\n                            <div className='non-destructive' onClick={() => this.toggle()}>no</div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                content = (\r\n                    <div>\r\n                        <div className='title'>{this.props.text}</div>\r\n                        <img className='image' src={warning} alt='warning' />\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <button className={this.props.disabled ? 'disabled' : ''} onClick={() => this.toggle()}>\r\n                    {content}\r\n                </button>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    controls: JSX.Element[];\r\n    disabled: boolean;\r\n}\r\n\r\nexport default class ControlRow extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        disabled: false\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'control-row';\r\n            if (this.props.disabled) {\r\n                style += ' disabled';\r\n            }\r\n            switch (this.props.controls.length) {\r\n                case 1:\r\n                    style += ' one';\r\n                    break;\r\n                case 2:\r\n                    style += ' two';\r\n                    break;\r\n                case 3:\r\n                    style += ' three';\r\n                    break;\r\n                case 4:\r\n                    style += ' four';\r\n                    break;\r\n                case 5:\r\n                    style += ' five';\r\n                    break;\r\n            }\r\n\r\n            return (\r\n                <div className={style}>\r\n                    {this.props.controls}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport ellipsis from '../../resources/images/ellipsis.svg';\r\n\r\ninterface Props {\r\n    options: { id: string; text: string; disabled?: boolean }[];\r\n    select: (optionID: string) => void;\r\n    selectedID: string;\r\n    placeholder: string;\r\n    disabled: boolean;\r\n}\r\n\r\ninterface State {\r\n    open: boolean;\r\n}\r\n\r\nexport default class Dropdown extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        selectedID: null,\r\n        placeholder: 'select...',\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            open: false\r\n        };\r\n    }\r\n\r\n    private toggleOpen(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        this.setState({\r\n            open: !this.state.open\r\n        });\r\n    }\r\n\r\n    private select(optionID: string) {\r\n        this.setState({\r\n            open: false\r\n        });\r\n        this.props.select(optionID);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            if (this.props.options.length === 0) {\r\n                return null;\r\n            }\r\n\r\n            let style = this.props.disabled ? 'dropdown disabled' : 'dropdown';\r\n            const content = [];\r\n\r\n            let selectedText;\r\n            if (this.props.selectedID) {\r\n                const option: { id: string; text: string; disabled?: boolean } | undefined = this.props.options.find(o => o.id === this.props.selectedID);\r\n                if (option) {\r\n                    selectedText = option.text;\r\n                }\r\n            } else {\r\n                selectedText = /*this.props.text ||*/ this.props.placeholder;\r\n            }\r\n\r\n            content.push(\r\n                <div key='selection' className='dropdown-top' title={selectedText}>\r\n                    <div className='item-text'>{selectedText}</div>\r\n                    <img className='arrow' src={ellipsis} alt='arrow' />\r\n                </div>\r\n            );\r\n\r\n            if (this.state.open) {\r\n                style += ' open';\r\n\r\n                const items = this.props.options.map(option => {\r\n                    if (option.text === null) {\r\n                        return <div key={option.id} className='divider' />;\r\n                    } else {\r\n                        return (\r\n                            <DropdownOption\r\n                                key={option.id}\r\n                                option={option}\r\n                                selected={option.id === this.props.selectedID}\r\n                                select={optionID => this.select(optionID)}\r\n                            />\r\n                        );\r\n                    }\r\n                });\r\n\r\n                content.push(\r\n                    <div key='options' className='dropdown-options'>\r\n                        {items}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={style} onClick={e => this.toggleOpen(e)}>\r\n                    {content}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface DropdownOptionProps {\r\n    option: { id: string; text: string; disabled?: boolean };\r\n    selected: boolean;\r\n    select: (optionID: string) => void;\r\n}\r\n\r\nclass DropdownOption extends React.Component<DropdownOptionProps> {\r\n    private click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (!this.props.option.disabled) {\r\n            this.props.select(this.props.option.id);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'dropdown-option';\r\n            if (this.props.selected) {\r\n                style += ' selected';\r\n            }\r\n            if (this.props.option.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            return (\r\n                <div className={style} title={this.props.option.text} onClick={e => this.click(e)}>\r\n                    {this.props.option.text}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport arrow from '../../resources/images/down-arrow-black.svg';\r\n\r\ninterface Props {\r\n    text: string;\r\n    content: string | JSX.Element;\r\n    disabled: boolean;\r\n}\r\n\r\ninterface State {\r\n    expanded: boolean;\r\n}\r\n\r\nexport default class Expander extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            expanded: false\r\n        };\r\n    }\r\n\r\n    private toggle() {\r\n        this.setState({\r\n            expanded: !this.state.expanded\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = this.props.disabled ? 'expander disabled' : 'expander';\r\n            if (this.state.expanded) {\r\n                style += ' expanded';\r\n            }\r\n\r\n            let content = null;\r\n            if (this.state.expanded) {\r\n                content = (\r\n                    <div className='expander-content'>\r\n                        {this.props.content}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={style}>\r\n                    <div className='expander-header' onClick={() => this.toggle()}>\r\n                        <div className='expander-text'>{this.props.text}</div>\r\n                        <img className='expander-button' src={arrow} alt='arrow' />\r\n                    </div>\r\n                    {content}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport arrow from '../../resources/images/down-arrow-black.svg';\r\n\r\ninterface Props {\r\n    click: (dir: string, dir2: 'in' | 'out' | null) => void;\r\n    direction: 'out' | 'in' | 'both' | 'eight';\r\n    disabled: boolean;\r\n}\r\n\r\nexport default class Radial extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        direction: 'out',\r\n        disabled: false\r\n    };\r\n\r\n    private click(e: React.MouseEvent, dir: string, dir2: 'in' | 'out' | null = null) {\r\n        e.stopPropagation();\r\n        this.props.click(dir, dir2);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'radial ' + (this.props.direction || 'out');\r\n            if (this.props.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            const showOut = (this.props.direction === 'out') || (this.props.direction === 'both') || (this.props.direction === 'eight');\r\n            const showIn = (this.props.direction === 'in') || (this.props.direction === 'both');\r\n            const showDiag = (this.props.direction === 'eight');\r\n\r\n            return (\r\n                <div className={style}>\r\n                    <div className='empty' style={{ display: showDiag ? 'none' : 'inline-block' }} />\r\n                    <div className='btn diag' style={{ display: showDiag ? 'inline-block' : 'none' }}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(135deg)' }}\r\n                            alt='nw'\r\n                            onClick={e => this.click(e, 'NW')}\r\n                        />\r\n                    </div>\r\n                    <div className='btn'>\r\n                        <div>\r\n                            <img\r\n                                src={arrow}\r\n                                style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(180deg)' }}\r\n                                alt='n'\r\n                                onClick={e => this.click(e, 'N', 'out')}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <img\r\n                                src={arrow}\r\n                                style={{ display: showIn ? 'inline-block' : 'none' }}\r\n                                alt='n'\r\n                                onClick={e => this.click(e, 'N', 'in')}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className='empty' style={{ display: showDiag ? 'none' : 'inline-block' }} />\r\n                    <div className='btn diag' style={{ display: showDiag ? 'inline-block' : 'none' }}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(-135deg)' }}\r\n                            alt='ne'\r\n                            onClick={e => this.click(e, 'NE')}\r\n                        />\r\n                    </div>\r\n                    <div className='btn' style={{ padding: (showIn && showOut) ? '10px 0' : '0'}}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(90deg)' }}\r\n                            alt='w'\r\n                            onClick={e => this.click(e, 'W', 'out')}\r\n                        />\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showIn ? 'inline-block' : 'none', transform: 'rotate(-90deg)' }}\r\n                            alt='w'\r\n                            onClick={e => this.click(e, 'W', 'in')}\r\n                        />\r\n                    </div>\r\n                    <div className='empty' />\r\n                    <div className='btn' style={{ padding: (showIn && showOut) ? '10px 0' : '0'}}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showIn ? 'inline-block' : 'none', transform: 'rotate(90deg)' }}\r\n                            alt='e'\r\n                            onClick={e => this.click(e, 'E', 'in')}\r\n                        />\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(-90deg)' }}\r\n                            alt='e'\r\n                            onClick={e => this.click(e, 'E', 'out')}\r\n                        />\r\n                    </div>\r\n                    <div className='empty' style={{ display: showDiag ? 'none' : 'inline-block' }} />\r\n                    <div className='btn diag' style={{ display: showDiag ? 'inline-block' : 'none' }}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(45deg)' }}\r\n                            alt='sw'\r\n                            onClick={e => this.click(e, 'SW')}\r\n                        />\r\n                    </div>\r\n                    <div className='btn'>\r\n                        <div>\r\n                            <img\r\n                                src={arrow}\r\n                                style={{ display: showIn ? 'inline-block' : 'none', transform: 'rotate(180deg)' }}\r\n                                alt='s'\r\n                                onClick={e => this.click(e, 'S', 'in')}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <img\r\n                                src={arrow}\r\n                                style={{ display: showOut ? 'inline-block' : 'none' }}\r\n                                alt='s'\r\n                                onClick={e => this.click(e, 'S', 'out')}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className='empty' style={{ display: showDiag ? 'none' : 'inline-block' }} />\r\n                    <div className='btn diag' style={{ display: showDiag ? 'inline-block' : 'none' }}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(-45deg)' }}\r\n                            alt='se'\r\n                            onClick={e => this.click(e, 'SE')}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    options: { id: string; text: string; disabled?: boolean }[];\r\n    selectedID: string | null;\r\n    select: (optionID: string) => void;\r\n    tabs: boolean;\r\n    disabled: boolean;\r\n    itemsPerRow: number;\r\n}\r\n\r\nexport default class Selector extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        tabs: false,\r\n        disabled: false,\r\n        itemsPerRow: null\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            let style = this.props.tabs ? 'selector tabs' : 'selector radio';\r\n            if (this.props.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            const itemsPerRow = this.props.itemsPerRow ? this.props.itemsPerRow : this.props.options.length;\r\n            const rowCount = Math.ceil(this.props.options.length / itemsPerRow);\r\n            const rowContents: JSX.Element[][] = [];\r\n            for (let n = 0; n !== rowCount; ++n) {\r\n                rowContents.push([]);\r\n            }\r\n\r\n            this.props.options.forEach(option => {\r\n                const index = this.props.options.indexOf(option);\r\n                const rowIndex = Math.floor(index / itemsPerRow);\r\n                const row = rowContents[rowIndex];\r\n                row.push(\r\n                    <SelectorOption\r\n                        key={option.id}\r\n                        option={option}\r\n                        selected={option.id === this.props.selectedID}\r\n                        count={itemsPerRow}\r\n                        select={(optionID: string) => this.props.select(optionID)}\r\n                    />\r\n                );\r\n            });\r\n\r\n            const rowSections = rowContents.map(row => {\r\n                const index = rowContents.indexOf(row);\r\n                return <div key={index}>{row}</div>;\r\n            });\r\n\r\n            return (\r\n                <div className={style}>\r\n                    {rowSections}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface SelectorOptionInterface {\r\n    option: { id: string; text: string; disabled?: boolean };\r\n    selected: boolean;\r\n    count: number;\r\n    select: (optionID: string) => void;\r\n}\r\n\r\nclass SelectorOption extends React.Component<SelectorOptionInterface> {\r\n    private click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (!this.props.option.disabled) {\r\n            this.props.select(this.props.option.id);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const width = 'calc(((100% - 1px) / ' + this.props.count + ') - 2px )';\r\n\r\n            let style = 'option';\r\n            if (this.props.selected) {\r\n                style += ' selected';\r\n            }\r\n            if (this.props.option.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            return (\r\n                <div key={this.props.option.id} className={style} style={{ width: width }} title={this.props.option.text} onClick={e => this.click(e)}>\r\n                    {this.props.option.text}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport minus from '../../resources/images/minus.svg';\r\nimport plus from '../../resources/images/plus.svg';\r\n\r\ninterface Props {\r\n    source: any;\r\n    name: string;\r\n    nudgeValue: (delta: number) => void;\r\n    label: string;\r\n    disabled: boolean;\r\n    factors: number[];\r\n    display: ((value: number) => string) | null;\r\n}\r\n\r\nexport default class Spin extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        label: null,\r\n        disabled: false,\r\n        factors: null,\r\n        display: null\r\n    };\r\n\r\n    private click(e: React.MouseEvent, delta: number) {\r\n        e.stopPropagation();\r\n        this.props.nudgeValue(delta);\r\n    }\r\n\r\n    private touchEnd(e: React.TouchEvent, delta: number) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        this.props.nudgeValue(delta);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'info-value';\r\n            let value = this.props.source[this.props.name];\r\n            if (value === 0) {\r\n                style += ' dimmed';\r\n            }\r\n\r\n            if (this.props.display) {\r\n                value = this.props.display(value);\r\n            }\r\n\r\n            const minusBtns: JSX.Element[] = [];\r\n            const plusBtns: JSX.Element[] = [];\r\n\r\n            if (this.props.factors) {\r\n                this.props.factors.forEach(factor => {\r\n                    minusBtns.push(\r\n                        <div\r\n                            key={'minus' + factor}\r\n                            className='spin-button factor'\r\n                            onTouchEnd={e => this.touchEnd(e, -1 * factor)}\r\n                            onClick={e => this.click(e, -1 * factor)}\r\n                        >\r\n                            {'-' + factor}\r\n                        </div>\r\n                    );\r\n\r\n                    plusBtns.push(\r\n                        <div\r\n                            key={'plus' + factor}\r\n                            className='spin-button factor'\r\n                            onTouchEnd={e => this.touchEnd(e, +1 * factor)}\r\n                            onClick={e => this.click(e, +1 * factor)}\r\n                        >\r\n                            {'+' + factor}\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                minusBtns.reverse();\r\n            } else {\r\n                minusBtns.push(\r\n                    <div key='minus1' className='spin-button' onTouchEnd={e => this.touchEnd(e, -1)} onClick={e => this.click(e, -1)}>\r\n                        <img className='image' src={minus} alt='minus' />\r\n                    </div>\r\n                );\r\n\r\n                plusBtns.push(\r\n                    <div key='plus1' className='spin-button' onTouchEnd={e => this.touchEnd(e, +1)} onClick={e => this.click(e, +1)}>\r\n                        <img className='image' src={plus} alt='plus' />\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            const infoWidth = 80 * (this.props.factors ? this.props.factors.length : 1);\r\n\r\n            return (\r\n                <div className={this.props.disabled ? 'spin disabled' : 'spin'}>\r\n                    <div className='minus'>\r\n                        {minusBtns}\r\n                    </div>\r\n                    <div className='info' style={{ width: 'calc(100% - ' + infoWidth + 'px)' }}>\r\n                        <div className='info-label'>{this.props.label}</div>\r\n                        <div className={style}>{value}</div>\r\n                    </div>\r\n                    <div className='plus'>\r\n                        {plusBtns}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Monster } from '../../models/monster-group';\r\n\r\nimport Spin from '../controls/spin';\r\n\r\ninterface Props {\r\n    combatant: Monster;\r\n    edit: boolean;\r\n    nudgeValue: (combatant: Monster, field: string, delta: number) => void;\r\n}\r\n\r\ninterface State {\r\n    showAbilityScores: boolean;\r\n}\r\n\r\nexport default class AbilityScorePanel extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        edit: null,\r\n        nudgeValue: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showAbilityScores: false\r\n        };\r\n    }\r\n\r\n    private toggleAbilityScores() {\r\n        this.setState({\r\n            showAbilityScores: !this.state.showAbilityScores\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let result = null;\r\n\r\n            if (this.props.edit) {\r\n                result = (\r\n                    <div>\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='str'\r\n                            label='strength'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.str', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='dex'\r\n                            label='dexterity'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.dex', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='con'\r\n                            label='constitution'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.con', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='int'\r\n                            label='intelligence'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.int', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='wis'\r\n                            label='wisdom'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.wis', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='cha'\r\n                            label='charisma'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.cha', delta)}\r\n                        />\r\n                    </div>\r\n                );\r\n            } else {\r\n                result = (\r\n                    <div className='ability-scores' onClick={() => this.toggleAbilityScores()}>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>str</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.str\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.str)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>dex</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.dex\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.dex)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>con</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.con\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.con)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>int</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.int\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.int)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>wis</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.wis\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.wis)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>cha</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.cha\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.cha)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return result;\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combat, Combatant } from '../../models/combat';\r\nimport { Condition } from '../../models/condition';\r\n\r\nimport Expander from '../controls/expander';\r\nimport Spin from '../controls/spin';\r\n\r\ninterface Props {\r\n    combatant: Combatant;\r\n    combat: Combat;\r\n    nudgeConditionValue: (condition: Condition, field: string, delta: number) => void;\r\n    addCondition: () => void;\r\n    editCondition: (condition: Condition) => void;\r\n    removeCondition: (conditionID: string) => void;\r\n}\r\n\r\nexport default class ConditionsPanel extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const conditions = [];\r\n            if (this.props.combatant.conditions) {\r\n                for (let n = 0; n !== this.props.combatant.conditions.length; ++n) {\r\n                    const c = this.props.combatant.conditions[n];\r\n                    conditions.push(\r\n                        <ConditionPanel\r\n                            key={n}\r\n                            condition={c}\r\n                            combat={this.props.combat}\r\n                            nudgeConditionValue={(condition, type, delta) => this.props.nudgeConditionValue(condition, type, delta)}\r\n                            editCondition={condition => this.props.editCondition(condition)}\r\n                            removeCondition={conditionID => this.props.removeCondition(conditionID)}\r\n                        />\r\n                    );\r\n                }\r\n            }\r\n\r\n            return (\r\n                <div className='section'>\r\n                    {conditions}\r\n                    <button onClick={() => this.props.addCondition()}>add a condition</button>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface ConditionPanelProps {\r\n    condition: Condition;\r\n    combat: Combat;\r\n    nudgeConditionValue: (condition: Condition, field: string, delta: number) => void;\r\n    editCondition: (condition: Condition) => void;\r\n    removeCondition: (conditionID: string) => void;\r\n}\r\n\r\nclass ConditionPanel extends React.Component<ConditionPanelProps> {\r\n    public render() {\r\n        try {\r\n            let name: string = this.props.condition.name || 'condition';\r\n            if (this.props.condition.name === 'exhaustion') {\r\n                name += ' (' + this.props.condition.level + ')';\r\n            }\r\n            if ((this.props.condition.name === 'custom') && (this.props.condition.text !== null)) {\r\n                name = this.props.condition.text;\r\n            }\r\n\r\n            if (this.props.condition.duration !== null) {\r\n                name += ' ' + Utils.conditionDurationText(this.props.condition, this.props.combat);\r\n            }\r\n\r\n            const description = [];\r\n            if (this.props.condition.name === 'exhaustion') {\r\n                description.push(\r\n                    <div key='level' className='section'>\r\n                        <Spin\r\n                            source={this.props.condition}\r\n                            name='level'\r\n                            label='level'\r\n                            nudgeValue={delta => this.props.nudgeConditionValue(this.props.condition, 'level', delta)}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n            const text = Utils.conditionText(this.props.condition);\r\n            for (let n = 0; n !== text.length; ++n) {\r\n                description.push(<div key={n} className='section'>{text[n]}</div>);\r\n            }\r\n\r\n            return (\r\n                <Expander\r\n                    text={name}\r\n                    content={(\r\n                        <div>\r\n                            {description}\r\n                            <div className='divider' />\r\n                            <button onClick={() => this.props.editCondition(this.props.condition)}>edit</button>\r\n                            <button onClick={() => this.props.removeCondition(this.props.condition.id)}>remove</button>\r\n                        </div>\r\n                    )}\r\n                />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    content: string | JSX.Element | JSX.Element[];\r\n    white: boolean;\r\n}\r\n\r\nexport default class Note extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        white: false\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'descriptive';\r\n            if (this.props.white) {\r\n                style += ' white';\r\n            }\r\n\r\n            return (\r\n                <div className={style}>\r\n                    {this.props.content}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Showdown from 'showdown';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combatant } from '../../models/combat';\r\nimport { Monster, Trait, TRAIT_TYPES } from '../../models/monster-group';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport Expander from '../controls/expander';\r\nimport Note from '../panels/note';\r\n\r\nimport arrow from '../../resources/images/down-arrow-black.svg';\r\n\r\nconst showdown = new Showdown.Converter();\r\n\r\ninterface Props {\r\n    combatant: Monster | (Combatant & Monster);\r\n    mode: 'view' | 'edit' | 'template' | 'combat' | 'combat-special';\r\n    filter: string;\r\n    addTrait: (traitType: 'trait' | 'action' | 'legendary' | 'lair') => void;\r\n    copyTrait: (trait: Trait) => void;\r\n    removeTrait: (trait: Trait) => void;\r\n    changeValue: (trait: Trait, field: string, value: any) => void;\r\n    swapTraits: (t1: Trait, t2: Trait) => void;\r\n}\r\n\r\nexport default class TraitsPanel extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        mode: 'view',\r\n        filter: '',\r\n        addTrait: null,\r\n        copyTrait: null,\r\n        removeTrait: null,\r\n        changeValue: null,\r\n        swapTraits: null\r\n    };\r\n\r\n    private createTraitPanel(trait: Trait, prevTrait: Trait | null, nextTrait: Trait | null) {\r\n        return (\r\n            <TraitPanel\r\n                key={trait.id}\r\n                trait={trait}\r\n                mode={this.props.mode}\r\n                prevTrait={prevTrait}\r\n                nextTrait={nextTrait}\r\n                changeValue={(action, type, value) => this.props.changeValue(action, type, value)}\r\n                removeTrait={action => this.props.removeTrait(action)}\r\n                copyTrait={action => this.props.copyTrait(action)}\r\n                swapTraits={(t1, t2) => this.props.swapTraits(t1, t2)}\r\n            />\r\n        );\r\n    }\r\n\r\n    private createSection(traitsByType: { [id: string]: JSX.Element[] }, type: string, showInfo: boolean = false) {\r\n        const traits = traitsByType[type];\r\n        if (traits.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        let info: JSX.Element | null = null;\r\n        if (showInfo) {\r\n            switch (type) {\r\n                case 'legendary':\r\n                    /* tslint:disable:max-line-length */\r\n                    info = (\r\n                        <Note\r\n                            content={'one legendary action can be used at the end of each other combatant\\'s turn; spent actions are refreshed at the start of the creature\\'s turn'}\r\n                            white={true}\r\n                        />\r\n                    );\r\n                    /* tslint:enable:max-line-length */\r\n                    break;\r\n                case 'lair':\r\n                    info = (\r\n                        <Note\r\n                            content={'one lair action can be taken each round on initiative 20'}\r\n                            white={true}\r\n                        />\r\n                    );\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='section subheading'>{Utils.traitType(type, true)}</div>\r\n                {info}\r\n                {traits}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const traitsByType: { [id: string]: JSX.Element[] } = {};\r\n\r\n            TRAIT_TYPES.forEach(type => {\r\n                const traits = this.props.combatant.traits\r\n                    .filter(t => t.type === type)\r\n                    .filter(t => Utils.match(this.props.filter, t.name));\r\n\r\n                const list: JSX.Element[] = [];\r\n                for (let n = 0; n !== traits.length; ++n) {\r\n                    const trait = traits[n];\r\n                    const prevTrait = n !== 0 ? traits[n - 1] : null;\r\n                    const nextTrait = n !== traits.length - 1 ? traits[n + 1] : null;\r\n                    list.push(this.createTraitPanel(trait, prevTrait, nextTrait));\r\n                }\r\n\r\n                if (this.props.mode === 'edit') {\r\n                    list.push(\r\n                        <button key='add' onClick={() => this.props.addTrait(type as 'trait' | 'action' | 'legendary' | 'lair')}>\r\n                            add a new {Utils.traitType(type, false)}\r\n                        </button>\r\n                    );\r\n                }\r\n\r\n                traitsByType[type] = list;\r\n            });\r\n\r\n            if (this.props.mode === 'edit') {\r\n                return (\r\n                    <div className='row collapse'>\r\n                        <div className='columns small-4 medium-4 large-4 wide-column'>\r\n                            {this.createSection(traitsByType, 'trait')}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 wide-column'>\r\n                            {this.createSection(traitsByType, 'action')}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 wide-column'>\r\n                            {this.createSection(traitsByType, 'legendary')}\r\n                            <div className='divider' />\r\n                            {this.createSection(traitsByType, 'lair')}\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            if (this.props.combatant.traits.length === 0) {\r\n                return (\r\n                    <div><i>no traits or actions</i></div>\r\n                );\r\n            }\r\n\r\n            if (this.props.mode === 'combat') {\r\n                return (\r\n                    <div>\r\n                        {this.createSection(traitsByType, 'trait')}\r\n                        {this.createSection(traitsByType, 'action')}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            if (this.props.mode === 'combat-special') {\r\n                return (\r\n                    <div>\r\n                        {this.createSection(traitsByType, 'legendary', true)}\r\n                        {this.createSection(traitsByType, 'lair', true)}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div>\r\n                    {this.createSection(traitsByType, 'trait')}\r\n                    {this.createSection(traitsByType, 'action')}\r\n                    {this.createSection(traitsByType, 'legendary')}\r\n                    {this.createSection(traitsByType, 'lair')}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface TraitPanelProps {\r\n    trait: Trait;\r\n    mode: 'view' | 'edit' | 'template' | 'combat' | 'combat-special';\r\n    prevTrait: Trait | null;\r\n    nextTrait: Trait | null;\r\n    changeValue: (trait: Trait, field: string, value: any) => void;\r\n    copyTrait: (trait: Trait) => void;\r\n    removeTrait: (trait: Trait) => void;\r\n    swapTraits: (t1: Trait, t2: Trait) => void;\r\n}\r\n\r\nclass TraitPanel extends React.Component<TraitPanelProps> {\r\n    public render() {\r\n        try {\r\n            let maxUses = 0;\r\n            let heading = this.props.trait.name || 'unnamed ' + Utils.traitType(this.props.trait.type, false);\r\n\r\n            if (this.props.trait.usage) {\r\n                let used = '';\r\n                if (this.props.trait.usage.toLowerCase().startsWith('recharge ')) {\r\n                    maxUses = 1;\r\n                    if (this.props.trait.uses > 0) {\r\n                        used = '; used';\r\n                    }\r\n                }\r\n                const found = this.props.trait.usage.toLowerCase().match(/(\\d+)\\s*\\/\\s*day/);\r\n                if (found) {\r\n                    maxUses = parseInt(found[1], 10);\r\n                    if (this.props.trait.uses > 0) {\r\n                        used = '; used ' + this.props.trait.uses;\r\n                    }\r\n                }\r\n                heading += ' *(' + this.props.trait.usage + used + ')*';\r\n            }\r\n            if (this.props.trait.type === 'legendary') {\r\n                maxUses = 1;\r\n                if (this.props.trait.uses > 0) {\r\n                    heading += ' *(used)*';\r\n                }\r\n            }\r\n            const markdown = '**' + heading + '** ' + this.props.trait.text;\r\n\r\n            switch (this.props.mode) {\r\n                case 'view':\r\n                    return (\r\n                        <div key={this.props.trait.id} className='section trait'>\r\n                            <div dangerouslySetInnerHTML={{ __html: showdown.makeHtml(markdown) }} />\r\n                        </div>\r\n                    );\r\n                case 'edit':\r\n                    const details = (\r\n                        <div className='section'>\r\n                            <div className='row collapse'>\r\n                                <div className='columns small-6 medium-8 large-9'>\r\n                                    <input\r\n                                        type='text'\r\n                                        placeholder='name'\r\n                                        value={this.props.trait.name}\r\n                                        onChange={event => this.props.changeValue(this.props.trait, 'name', event.target.value)}\r\n                                    />\r\n                                    <input\r\n                                        type='text'\r\n                                        placeholder='usage'\r\n                                        value={this.props.trait.usage}\r\n                                        onChange={event => this.props.changeValue(this.props.trait, 'usage', event.target.value)}\r\n                                    />\r\n                                </div>\r\n                                <div className='columns small-6 medium-4 large-3'>\r\n                                    <div className='trait-ordering'>\r\n                                        <div className='vertical-center-outer'>\r\n                                            <div className='vertical-center-middle'>\r\n                                                <img\r\n                                                    className={this.props.prevTrait ? 'rotate' : 'rotate disabled'}\r\n                                                    src={arrow}\r\n                                                    alt='move up'\r\n                                                    onClick={() => this.props.swapTraits(this.props.trait, this.props.prevTrait as Trait)}\r\n                                                />\r\n                                                <img\r\n                                                    className={this.props.nextTrait ? '' : 'disabled'}\r\n                                                    src={arrow}\r\n                                                    alt='move down'\r\n                                                    onClick={() => this.props.swapTraits(this.props.trait, this.props.nextTrait as Trait)}\r\n                                                />\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <textarea\r\n                                placeholder='details'\r\n                                value={this.props.trait.text}\r\n                                onChange={event => this.props.changeValue(this.props.trait, 'text', event.target.value)}\r\n                            />\r\n                            <div className='divider' />\r\n                            <ConfirmButton text='delete' callback={() => this.props.removeTrait(this.props.trait)} />\r\n                        </div>\r\n                    );\r\n\r\n                    return (\r\n                        <Expander\r\n                            text={this.props.trait.name || 'unnamed ' + Utils.traitType(this.props.trait.type, false)}\r\n                            content={details}\r\n                        />\r\n                    );\r\n                case 'template':\r\n                    return (\r\n                        <div key={this.props.trait.id} className='section trait'>\r\n                            <div dangerouslySetInnerHTML={{ __html: showdown.makeHtml(markdown) }} />\r\n                            <button onClick={() => this.props.copyTrait(this.props.trait)}>copy</button>\r\n                        </div>\r\n                    );\r\n                case 'combat':\r\n                case 'combat-special':\r\n                    let style = '';\r\n                    let usage = null;\r\n                    if (maxUses > 0) {\r\n                        const isTapped = this.props.trait.uses >= maxUses;\r\n                        if (isTapped) {\r\n                            style = 'strikethrough';\r\n                            usage = <button onClick={() => this.props.changeValue(this.props.trait, 'uses', 0)}>recharge</button>;\r\n                        } else {\r\n                            usage = <button onClick={() => this.props.changeValue(this.props.trait, 'uses', this.props.trait.uses + 1)}>use</button>;\r\n                        }\r\n                    }\r\n                    return (\r\n                        <div key={this.props.trait.id} className='section trait'>\r\n                            <div className={style} dangerouslySetInnerHTML={{ __html: showdown.makeHtml(markdown) }} />\r\n                            {usage}\r\n                        </div>\r\n                    );\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    heading: string | JSX.Element | JSX.Element[] | null;\r\n    content: string | JSX.Element | JSX.Element[] | null;\r\n}\r\n\r\nexport default class InfoCard extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        heading: null,\r\n        content: null\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div className='card'>\r\n                    {this.props.heading}\r\n                    <div className='card-content'>\r\n                        {this.props.content}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combat, COMBAT_TAGS, Combatant } from '../../models/combat';\r\nimport { Condition } from '../../models/condition';\r\nimport { Encounter, EncounterSlot, EncounterWave } from '../../models/encounter';\r\nimport { Monster, MonsterGroup, Trait } from '../../models/monster-group';\r\n\r\nimport Checkbox from '../controls/checkbox';\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport ControlRow from '../controls/control-row';\r\nimport Dropdown from '../controls/dropdown';\r\nimport Expander from '../controls/expander';\r\nimport Radial from '../controls/radial';\r\nimport Selector from '../controls/selector';\r\nimport Spin from '../controls/spin';\r\nimport AbilityScorePanel from '../panels/ability-score-panel';\r\nimport ConditionsPanel from '../panels/conditions-panel';\r\nimport TraitsPanel from '../panels/traits-panel';\r\nimport InfoCard from './info-card';\r\n\r\nimport arrow from '../../resources/images/down-arrow.svg';\r\n\r\ninterface Props {\r\n    combatant: Monster | (Monster & Combatant);\r\n    mode: string;\r\n    library: MonsterGroup[];\r\n    changeValue: (monster: any, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, delta: number) => void;\r\n    // Library\r\n    filter: string;\r\n    editMonster: (monster: Monster) => void;\r\n    removeMonster: (monster: Monster) => void;\r\n    cloneMonster: (monster: Monster, name: string) => void;\r\n    moveToGroup: (monster: Monster, group: string) => void;\r\n    copyTrait: (trait: Trait) => void;\r\n    selectMonster: (monster: Monster) => void;\r\n    deselectMonster: (monster: Monster) => void;\r\n    // Encounter builder\r\n    encounter: Encounter;\r\n    slot: EncounterSlot;\r\n    addEncounterSlot: (monster: Monster, waveID: string | null) => void;\r\n    removeEncounterSlot: (slot: EncounterSlot) => void;\r\n    // Combat\r\n    combat: Combat;\r\n    makeCurrent: (combatant: Combatant) => void;\r\n    makeActive: (combatant: Combatant) => void;\r\n    makeDefeated: (combatant: Combatant) => void;\r\n    endTurn: (combatant: Combatant) => void;\r\n    mapAdd: (combatant: Combatant) => void;\r\n    mapMove: (combatant: Combatant, dir: string) => void;\r\n    mapRemove: (combatant: Combatant) => void;\r\n    removeCombatant: (combatant: Combatant) => void;\r\n    changeHP: (combatant: Combatant, hp: number, tempHP: number) => void;\r\n    addCondition: (combatant: Combatant) => void;\r\n    editCondition: (combatant: Combatant, condition: Condition) => void;\r\n    removeCondition: (combatant: Combatant, conditionID: string) => void;\r\n    nudgeConditionValue: (condition: Condition, field: string, delta: number) => void;\r\n    toggleTag: (combatant: Combatant, tag: string) => void;\r\n}\r\n\r\ninterface State {\r\n    showDetails: boolean;\r\n    cloneName: string;\r\n    damageOrHealing: number;\r\n}\r\n\r\nexport default class MonsterCard extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        library: null,\r\n        changeValue: null,\r\n        nudgeValue: null,\r\n        filter: '',\r\n        editMonster: null,\r\n        removeMonster: null,\r\n        cloneMonster: null,\r\n        moveToGroup: null,\r\n        copyTrait: null,\r\n        selectMonster: null,\r\n        deselectMonster: null,\r\n        encounter: null,\r\n        slot: null,\r\n        addEncounterSlot: null,\r\n        removeEncounterSlot: null,\r\n        combat: null,\r\n        makeCurrent: null,\r\n        makeActive: null,\r\n        makeDefeated: null,\r\n        endTurn: null,\r\n        mapAdd: null,\r\n        mapMove: null,\r\n        mapRemove: null,\r\n        removeCombatant: null,\r\n        changeHP: null,\r\n        addCondition: null,\r\n        editCondition: null,\r\n        removeCondition: null,\r\n        nudgeConditionValue: null,\r\n        toggleTag: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showDetails: false,\r\n            cloneName: props.combatant.name + ' copy',\r\n            damageOrHealing: 0\r\n        };\r\n    }\r\n\r\n    private setCloneName(cloneName: string) {\r\n        this.setState({\r\n            cloneName: cloneName\r\n        });\r\n    }\r\n\r\n    private toggleDetails() {\r\n        this.setState({\r\n            showDetails: !this.state.showDetails\r\n        });\r\n    }\r\n\r\n    private setDamage(value: number) {\r\n        this.setState({\r\n            damageOrHealing: value\r\n        });\r\n    }\r\n\r\n    private nudgeDamage(delta: number) {\r\n        this.setState({\r\n            damageOrHealing: Math.max(this.state.damageOrHealing + delta, 0)\r\n        });\r\n    }\r\n\r\n    private heal() {\r\n        const combatant = this.props.combatant as Combatant;\r\n\r\n        let hp = (combatant.hp ? combatant.hp : 0) + this.state.damageOrHealing;\r\n        hp = Math.min(hp, this.props.combatant.hpMax);\r\n\r\n        this.setState({\r\n            damageOrHealing: 0\r\n        }, () => {\r\n            this.props.changeHP(combatant, hp, this.props.combatant.hpTemp);\r\n        });\r\n    }\r\n\r\n    private damage() {\r\n        const combatant = this.props.combatant as Combatant;\r\n\r\n        let hp = (combatant.hp ? combatant.hp : 0);\r\n        let temp = this.props.combatant.hpTemp;\r\n\r\n        let damage = this.state.damageOrHealing;\r\n\r\n        // Take damage off temp HP first\r\n        const val = Math.min(damage, temp);\r\n        damage -= val;\r\n        temp -= val;\r\n\r\n        // Take the rest off HP\r\n        hp -= damage;\r\n        hp = Math.max(hp, 0);\r\n\r\n        this.setState({\r\n            damageOrHealing: 0\r\n        }, () => {\r\n            this.props.changeHP(combatant, hp, temp);\r\n        });\r\n    }\r\n\r\n    private description() {\r\n        let sizeAndType = (this.props.combatant.size + ' ' + this.props.combatant.category).toLowerCase();\r\n        if (this.props.combatant.tag) {\r\n            sizeAndType += ' (' + this.props.combatant.tag.toLowerCase() + ')';\r\n        }\r\n        sizeAndType += ', ';\r\n\r\n        let align = '';\r\n        if (this.props.combatant.alignment) {\r\n            align = this.props.combatant.alignment.toLowerCase() + ', ';\r\n        }\r\n\r\n        const cr = 'cr ' + Utils.challenge(this.props.combatant.challenge);\r\n\r\n        return sizeAndType + align + cr;\r\n    }\r\n\r\n    private monsterIsInWave(wave: EncounterWave) {\r\n        return wave.slots.some(s => {\r\n            const group = this.props.library.find(g => g.monsters.includes(this.props.combatant));\r\n            return !!group && (s.monsterGroupName === group.name) && (s.monsterName === this.props.combatant.name);\r\n        });\r\n    }\r\n\r\n    private getHP() {\r\n        if (this.props.combatant.hitDice === 0) {\r\n            return this.props.combatant.hpMax;\r\n        }\r\n\r\n        const die = Utils.hitDieType(this.props.combatant.size);\r\n        const conMod = Utils.modifierValue(this.props.combatant.abilityScores.con) * this.props.combatant.hitDice;\r\n        let conModStr = '';\r\n        if (conMod > 0) {\r\n            conModStr = ' +' + conMod;\r\n        }\r\n        if (conMod < 0) {\r\n            conModStr = ' ' + conMod;\r\n        }\r\n        return this.props.combatant.hpMax + ' (' + this.props.combatant.hitDice + 'd' + die + conModStr + ')';\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const options = [];\r\n            if (this.props.mode.indexOf('no-buttons') === -1) {\r\n                if (this.props.mode.indexOf('view') !== -1) {\r\n                    if (this.props.mode.indexOf('editable') !== -1) {\r\n                        options.push(\r\n                            <button key='edit' onClick={() => this.props.editMonster(this.props.combatant)}>edit monster</button>\r\n                        );\r\n\r\n                        options.push(\r\n                            <Expander\r\n                                key='clone'\r\n                                text='clone monster'\r\n                                content={\r\n                                    <div>\r\n                                        <input\r\n                                            type='text'\r\n                                            placeholder='monster name'\r\n                                            value={this.state.cloneName}\r\n                                            onChange={event => this.setCloneName(event.target.value)}\r\n                                        />\r\n                                        <button onClick={() => this.props.cloneMonster(this.props.combatant, this.state.cloneName)}>create copy</button>\r\n                                    </div>\r\n                                }\r\n                            />\r\n                        );\r\n\r\n                        const groupOptions: { id: string, text: string }[] = [];\r\n                        this.props.library.forEach(group => {\r\n                            if (group.monsters.indexOf(this.props.combatant) === -1) {\r\n                                groupOptions.push({\r\n                                    id: group.id,\r\n                                    text: group.name\r\n                                });\r\n                            }\r\n                        });\r\n                        options.push(\r\n                            <Dropdown\r\n                                key='move'\r\n                                options={groupOptions}\r\n                                placeholder='move to group...'\r\n                                select={optionID => this.props.moveToGroup(this.props.combatant, optionID)}\r\n                            />\r\n                        );\r\n\r\n                        options.push(<ConfirmButton key='remove' text='delete monster' callback={() => this.props.removeMonster(this.props.combatant)} />);\r\n                    }\r\n                    if (this.props.mode.indexOf('encounter') !== -1) {\r\n                        if (this.props.slot) {\r\n                            // This card is in an encounter or a wave\r\n                            options.push(\r\n                                <button key='remove' onClick={() => this.props.removeEncounterSlot(this.props.slot)}>\r\n                                    remove from encounter\r\n                                </button>\r\n                            );\r\n                        } else {\r\n                            let canAdd = false;\r\n                            // This card is in the library list\r\n                            if (!this.monsterIsInWave(this.props.encounter)) {\r\n                                options.push(\r\n                                    <button key='add encounter' onClick={() => this.props.addEncounterSlot(this.props.combatant, null)}>\r\n                                        add to encounter\r\n                                    </button>\r\n                                );\r\n                                canAdd = true;\r\n                            }\r\n                            this.props.encounter.waves.forEach(wave => {\r\n                                if (!this.monsterIsInWave(wave)) {\r\n                                    options.push(\r\n                                        <button key={'add ' + wave.id} onClick={() => this.props.addEncounterSlot(this.props.combatant, wave.id)}>\r\n                                            add to {wave.name}\r\n                                        </button>\r\n                                    );\r\n                                    canAdd = true;\r\n                                }\r\n                            });\r\n                            // If we can't add it anywhere, don't show it\r\n                            if (!canAdd) {\r\n                                return (\r\n                                    <InfoCard\r\n                                        heading={\r\n                                            (\r\n                                                <div className='heading'>\r\n                                                    <div className='title'>{this.props.combatant.name}</div>\r\n                                                </div>\r\n                                            )\r\n                                        }\r\n                                        content={\r\n                                            (\r\n                                                <div className='section centered'>\r\n                                                    <i>this monster is already part of this encounter</i>\r\n                                                </div>\r\n                                            )\r\n                                        }\r\n                                    />\r\n                                );\r\n                            }\r\n                        }\r\n                    }\r\n                    if (this.props.mode.indexOf('candidate') !== -1) {\r\n                        if (this.props.mode.indexOf('selected') === -1) {\r\n                            options.push(\r\n                                <button key='select' onClick={() => this.props.selectMonster(this.props.combatant)}>select monster</button>\r\n                            );\r\n                        } else {\r\n                            options.push(\r\n                                <button key='deselect' onClick={() => this.props.deselectMonster(this.props.combatant)}>deselect monster</button>\r\n                            );\r\n                        }\r\n                    }\r\n                }\r\n                if (this.props.mode.indexOf('combat') !== -1) {\r\n                    const combatant = this.props.combatant as Combatant;\r\n\r\n                    if (this.props.mode.indexOf('tactical') !== -1) {\r\n                        if (this.props.mode.indexOf('on-map') !== -1) {\r\n                            options.push(\r\n                                <div key='mapMove' className='section centered'>\r\n                                    <Radial\r\n                                        direction='eight'\r\n                                        click={dir => this.props.mapMove(combatant, dir)}\r\n                                    />\r\n                                </div>\r\n                            );\r\n                            options.push(\r\n                                <Spin\r\n                                    key='altitude'\r\n                                    source={combatant}\r\n                                    name='altitude'\r\n                                    label='altitude'\r\n                                    display={value => value + ' ft.'}\r\n                                    nudgeValue={delta => this.props.nudgeValue(combatant, 'altitude', delta * 5)}\r\n                                />\r\n                            );\r\n                            let auraDetails = null;\r\n                            if (combatant.aura.size > 0) {\r\n                                const auraStyleOptions = [\r\n                                    {\r\n                                        id: 'square',\r\n                                        text: 'square'\r\n                                    },\r\n                                    {\r\n                                        id: 'rounded',\r\n                                        text: 'rounded'\r\n                                    },\r\n                                    {\r\n                                        id: 'circle',\r\n                                        text: 'circle'\r\n                                    }\r\n                                ];\r\n                                auraDetails = (\r\n                                    <div>\r\n                                        <Selector\r\n                                            options={auraStyleOptions}\r\n                                            selectedID={combatant.aura.style}\r\n                                            select={optionID => this.props.changeValue(combatant.aura, 'style', optionID)}\r\n                                        />\r\n                                        <input\r\n                                            type='color'\r\n                                            value={combatant.aura.color}\r\n                                            onChange={event => this.props.changeValue(combatant.aura, 'color', event.target.value)}\r\n                                        />\r\n                                    </div>\r\n                                );\r\n                            }\r\n                            options.push(\r\n                                <Expander\r\n                                    key='aura'\r\n                                    text='aura'\r\n                                    content={(\r\n                                        <div>\r\n                                            <Spin\r\n                                                source={combatant.aura}\r\n                                                name='size'\r\n                                                label='size'\r\n                                                display={value => value + ' ft.'}\r\n                                                nudgeValue={delta => this.props.nudgeValue(combatant.aura, 'size', delta * 5)}\r\n                                            />\r\n                                            {auraDetails}\r\n                                        </div>\r\n                                    )}\r\n                                />\r\n                            );\r\n                            options.push(<button key='mapRemove' onClick={() => this.props.mapRemove(combatant)}>remove from map</button>);\r\n                        }\r\n                        if (this.props.mode.indexOf('off-map') !== -1) {\r\n                            options.push(<button key='mapAdd' onClick={() => this.props.mapAdd(combatant)}>add to map</button>);\r\n                        }\r\n                        options.push(<div key='tactical-div' className='divider' />);\r\n                    }\r\n                    if (combatant.pending && !combatant.active && !combatant.defeated) {\r\n                        options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                    }\r\n                    if (!combatant.pending && combatant.active && !combatant.defeated) {\r\n                        if (combatant.current) {\r\n                            options.push(<button key='endTurn' onClick={() => this.props.endTurn(combatant)}>end turn</button>);\r\n                            options.push(<button key='makeDefeated' onClick={() => this.props.makeDefeated(combatant)}>mark as defeated and end turn</button>);\r\n                        } else {\r\n                            options.push(<button key='makeCurrent' onClick={() => this.props.makeCurrent(combatant)}>start turn</button>);\r\n                            options.push(<button key='makeDefeated' onClick={() => this.props.makeDefeated(combatant)}>mark as defeated</button>);\r\n                            options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                        }\r\n                    }\r\n                    if (!combatant.pending && !combatant.active && combatant.defeated) {\r\n                        options.push(<button key='makeActive' onClick={() => this.props.makeActive(combatant)}>mark as active</button>);\r\n                        options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                    }\r\n                    options.push(\r\n                        <ControlRow\r\n                            key='tags'\r\n                            controls={COMBAT_TAGS.map(tag =>\r\n                                <Checkbox\r\n                                    key={tag}\r\n                                    label={tag}\r\n                                    display='button'\r\n                                    checked={combatant.tags.includes(tag)}\r\n                                    changeValue={value => this.props.toggleTag(combatant, tag)}\r\n                                />\r\n                            )}\r\n                        />\r\n                    );\r\n                    options.push(\r\n                        <Expander\r\n                            key='rename'\r\n                            text='change name'\r\n                            content={(\r\n                                <div>\r\n                                    <input\r\n                                        type='text'\r\n                                        value={combatant.displayName}\r\n                                        onChange={event => this.props.changeValue(this.props.combatant, 'displayName', event.target.value)}\r\n                                    />\r\n                                </div>\r\n                            )}\r\n                        />\r\n                    );\r\n                    options.push(\r\n                        <Expander\r\n                            key='init'\r\n                            text='change initiative score'\r\n                            content={(\r\n                                <div>\r\n                                    <Spin\r\n                                        source={this.props.combatant}\r\n                                        name='initiative'\r\n                                        label='initiative'\r\n                                        nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'initiative', delta)}\r\n                                    />\r\n                                </div>\r\n                            )}\r\n                        />\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf('template') !== -1) {\r\n                    // None\r\n                }\r\n            }\r\n\r\n            let stats = null;\r\n            if (this.props.mode.indexOf('view') !== -1) {\r\n                let slotSection = null;\r\n                if (this.props.slot) {\r\n                    slotSection = (\r\n                        <div>\r\n                            <div className='divider' />\r\n                            <Spin\r\n                                source={this.props.slot}\r\n                                name='count'\r\n                                label='count'\r\n                                nudgeValue={delta => this.props.nudgeValue(this.props.slot, 'count', delta)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                let details = null;\r\n                if (this.state.showDetails || (this.props.mode.indexOf('generated') !== -1)) {\r\n                    details = (\r\n                        <div>\r\n                            <div className='divider' />\r\n                            <div className='section'>\r\n                                <b>ac</b> {this.props.combatant.ac}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.hpMax !== 0 ? '' : 'none' }}>\r\n                                <b>hp</b> {this.getHP()}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.speed !== '' ? '' : 'none' }}>\r\n                                <b>speed</b> {this.props.combatant.speed}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <AbilityScorePanel combatant={this.props.combatant} />\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.savingThrows !== '' ? '' : 'none' }}>\r\n                                <b>saving throws</b> {this.props.combatant.savingThrows}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.skills !== '' ? '' : 'none' }}>\r\n                                <b>skills</b> {this.props.combatant.skills}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.damage.resist !== '' ? '' : 'none' }}>\r\n                                <b>damage resistances</b> {this.props.combatant.damage.resist}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.damage.vulnerable !== '' ? '' : 'none' }}>\r\n                                <b>damage vulnerabilities</b> {this.props.combatant.damage.vulnerable}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.damage.immune !== '' ? '' : 'none' }}>\r\n                                <b>damage immunities</b> {this.props.combatant.damage.immune}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.conditionImmunities !== '' ? '' : 'none' }}>\r\n                                <b>condition immunities</b> {this.props.combatant.conditionImmunities}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.senses !== '' ? '' : 'none' }}>\r\n                                <b>senses</b> {this.props.combatant.senses}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.languages !== '' ? '' : 'none' }}>\r\n                                <b>languages</b> {this.props.combatant.languages}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.equipment !== '' ? '' : 'none' }}>\r\n                                <b>equipment</b> {this.props.combatant.equipment}\r\n                            </div>\r\n                            <div className='divider' />\r\n                            <TraitsPanel combatant={this.props.combatant} />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                stats = (\r\n                    <div className='stats'>\r\n                        <div className='section centered'>\r\n                            <i>{this.description()}</i>\r\n                        </div>\r\n                        {slotSection}\r\n                        {details}\r\n                    </div>\r\n                );\r\n            }\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                stats = (\r\n                    <div className='stats'>\r\n                        <div className='section centered'>\r\n                            <i>{this.description()}</i>\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <Spin\r\n                            source={this.props.combatant}\r\n                            name='hp'\r\n                            label='hit points'\r\n                            factors={[1, 10]}\r\n                            nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'hp', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant}\r\n                            name='hpTemp'\r\n                            label='temp hp'\r\n                            factors={[1, 10]}\r\n                            nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'hpTemp', delta)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <Spin\r\n                            source={this.state}\r\n                            name='damageOrHealing'\r\n                            factors={[1, 10]}\r\n                            nudgeValue={delta => this.nudgeDamage(delta)}\r\n                        />\r\n                        <ControlRow\r\n                            controls={[\r\n                                <button key='heal' onClick={() => this.heal()}>heal</button>,\r\n                                <button key='reset' onClick={() => this.setDamage(0)}>reset</button>,\r\n                                <button key='damage' onClick={() => this.damage()}>damage</button>\r\n                            ]}\r\n                            disabled={this.state.damageOrHealing === 0}\r\n                        />\r\n                        <div className='section' style={{ display: this.props.combatant.damage.resist !== '' ? '' : 'none' }}>\r\n                            <b>damage resistances</b> {this.props.combatant.damage.resist}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.damage.vulnerable !== '' ? '' : 'none' }}>\r\n                            <b>damage vulnerabilities</b> {this.props.combatant.damage.vulnerable}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.damage.immune !== '' ? '' : 'none' }}>\r\n                            <b>damage immunities</b> {this.props.combatant.damage.immune}\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='section'>\r\n                            <AbilityScorePanel combatant={this.props.combatant} />\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.ac !== 0 ? '' : 'none' }}>\r\n                            <b>ac</b> {this.props.combatant.ac}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.savingThrows !== '' ? '' : 'none' }}>\r\n                            <b>saving throws</b> {this.props.combatant.savingThrows}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.skills !== '' ? '' : 'none' }}>\r\n                            <b>skills</b> {this.props.combatant.skills}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.speed !== '' ? '' : 'none' }}>\r\n                            <b>speed</b> {this.props.combatant.speed}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.senses !== '' ? '' : 'none' }}>\r\n                            <b>senses</b> {this.props.combatant.senses}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.languages !== '' ? '' : 'none' }}>\r\n                            <b>languages</b> {this.props.combatant.languages}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.equipment !== '' ? '' : 'none' }}>\r\n                            <b>equipment</b> {this.props.combatant.equipment}\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <TraitsPanel\r\n                            combatant={this.props.combatant}\r\n                            mode='combat'\r\n                            changeValue={(trait, field, value) => this.props.changeValue(trait, field, value)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <div className='section subheading'>\r\n                            conditions\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.conditionImmunities !== '' ? '' : 'none' }}>\r\n                            <b>condition immunities</b> {this.props.combatant.conditionImmunities}\r\n                        </div>\r\n                        <ConditionsPanel\r\n                            combatant={this.props.combatant as Combatant}\r\n                            combat={this.props.combat}\r\n                            addCondition={() => this.props.addCondition(this.props.combatant as Combatant)}\r\n                            editCondition={condition => this.props.editCondition(this.props.combatant as Combatant, condition)}\r\n                            removeCondition={conditionID => this.props.removeCondition(this.props.combatant as Combatant, conditionID)}\r\n                            nudgeConditionValue={(condition, type, delta) => this.props.nudgeConditionValue(condition, type, delta)}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n            if (this.props.mode.indexOf('template') !== -1) {\r\n                if (this.props.mode.indexOf('overview') !== -1) {\r\n                    stats = (\r\n                        <div>\r\n                            <div className='section centered'>\r\n                                <i>{this.description()}</i>\r\n                            </div>\r\n                            <div className='divider' />\r\n                            <div className='section'>\r\n                                <b>speed</b> {this.props.combatant.speed || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>senses</b> {this.props.combatant.senses || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>languages</b> {this.props.combatant.languages || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>equipment</b> {this.props.combatant.equipment || '-'}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf('abilities') !== -1) {\r\n                    stats = (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <AbilityScorePanel combatant={this.props.combatant} />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>saving throws</b> {this.props.combatant.savingThrows || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>skills</b> {this.props.combatant.skills || '-'}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf('cbt-stats') !== -1) {\r\n                    stats = (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <b>ac</b> {this.props.combatant.ac}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>hp</b> {this.getHP()}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>damage immunity</b> {this.props.combatant.damage.immune || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>damage resistance</b> {this.props.combatant.damage.resist || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>damage vulnerability</b> {this.props.combatant.damage.vulnerable || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>condition immunities</b> {this.props.combatant.conditionImmunities || '-'}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf('actions') !== -1) {\r\n                    stats = (\r\n                        <TraitsPanel\r\n                            combatant={this.props.combatant}\r\n                            mode='template'\r\n                            filter={this.props.filter}\r\n                            copyTrait={trait => this.props.copyTrait(trait)}\r\n                        />\r\n                    );\r\n                }\r\n            }\r\n\r\n            let toggle = null;\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                // Don't show toggle button for combatant\r\n            } else if (this.props.mode.indexOf('template') !== -1) {\r\n                // Don't show toggle button for template\r\n            } else if (this.props.mode.indexOf('view generated') !== -1) {\r\n                // Don't show toggle button for generated monster\r\n            } else {\r\n                const imageStyle = this.state.showDetails ? 'image rotate' : 'image';\r\n                toggle = (\r\n                    <img className={imageStyle} src={arrow} alt='arrow' onClick={() => this.toggleDetails()} />\r\n                );\r\n            }\r\n\r\n            const name = (this.props.combatant as Combatant ? (this.props.combatant as Combatant).displayName : null)\r\n                || this.props.combatant.name\r\n                || 'unnamed monster';\r\n\r\n            return (\r\n                <div className='card monster'>\r\n                    <div className='heading'>\r\n                        <div className='title'>{name}</div>\r\n                        {toggle}\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        {stats}\r\n                        <div style={{ display: options.length > 0 ? '' : 'none' }}>\r\n                            <div className='divider' />\r\n                            <div className='section'>{options}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { COMBAT_TAGS, Combatant } from '../../models/combat';\r\nimport { PC } from '../../models/party';\r\n\r\nimport Checkbox from '../controls/checkbox';\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport ControlRow from '../controls/control-row';\r\nimport Expander from '../controls/expander';\r\nimport Radial from '../controls/radial';\r\nimport Selector from '../controls/selector';\r\nimport Spin from '../controls/spin';\r\n\r\ninterface Props {\r\n    combatant: PC | (PC & Combatant);\r\n    mode: string;\r\n    changeValue: (pc: any, field: string, value: any) => void;\r\n    nudgeValue: (pc: any, field: string, delta: number) => void;\r\n    removePC: (pc: PC) => void;\r\n    editPC: (pc: PC) => void;\r\n    // Combat\r\n    makeCurrent: (combatant: Combatant) => void;\r\n    makeActive: (combatant: Combatant) => void;\r\n    makeDefeated: (combatant: Combatant) => void;\r\n    endTurn: (combatant: Combatant) => void;\r\n    mapAdd: (combatant: Combatant) => void;\r\n    mapMove: (combatant: Combatant, dir: string) => void;\r\n    mapRemove: (combatant: Combatant) => void;\r\n    removeCombatant: (combatant: Combatant) => void;\r\n    toggleTag: (combatant: Combatant, tag: string) => void;\r\n}\r\n\r\nexport default class PCCard extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        removePC: null,\r\n        editPC: null,\r\n        makeCurrent: null,\r\n        makeActive: null,\r\n        makeDefeated: null,\r\n        endTurn: null,\r\n        mapAdd: null,\r\n        mapMove: null,\r\n        mapRemove: null,\r\n        removeCombatant: null,\r\n        toggleTag: null\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            const options = [];\r\n            if (this.props.mode.indexOf('edit') !== -1) {\r\n                options.push(<button key='edit' onClick={() => this.props.editPC(this.props.combatant)}>edit pc</button>);\r\n                if (this.props.combatant.active) {\r\n                    options.push(\r\n                        <button key='toggle-active' onClick={() => this.props.changeValue(this.props.combatant, 'active', false)}>\r\n                            mark pc as inactive\r\n                        </button>\r\n                    );\r\n                } else {\r\n                    options.push(\r\n                        <button key='toggle-active' onClick={() => this.props.changeValue(this.props.combatant, 'active', true)}>\r\n                            mark pc as active\r\n                        </button>\r\n                    );\r\n                }\r\n                options.push(<ConfirmButton key='remove' text='delete pc' callback={() => this.props.removePC(this.props.combatant)} />);\r\n            }\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                const combatant = this.props.combatant as Combatant;\r\n\r\n                if (this.props.mode.indexOf('tactical') !== -1) {\r\n                    if (this.props.mode.indexOf('on-map') !== -1) {\r\n                        options.push(\r\n                            <div key='mapMove' className='section centered'>\r\n                                <Radial\r\n                                    direction='eight'\r\n                                    click={dir => this.props.mapMove(combatant, dir)}\r\n                                />\r\n                            </div>\r\n                        );\r\n                        options.push(\r\n                            <Spin\r\n                                key='altitude'\r\n                                source={this.props.combatant}\r\n                                name='altitude'\r\n                                label='altitude'\r\n                                display={value => value + ' ft.'}\r\n                                nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'altitude', delta * 5)}\r\n                            />\r\n                        );\r\n                        let auraDetails = null;\r\n                        if (combatant.aura.size > 0) {\r\n                            const auraStyleOptions = [\r\n                                {\r\n                                    id: 'square',\r\n                                    text: 'square'\r\n                                },\r\n                                {\r\n                                    id: 'rounded',\r\n                                    text: 'rounded'\r\n                                },\r\n                                {\r\n                                    id: 'circle',\r\n                                    text: 'circle'\r\n                                }\r\n                            ];\r\n                            auraDetails = (\r\n                                <div>\r\n                                    <Selector\r\n                                        options={auraStyleOptions}\r\n                                        selectedID={combatant.aura.style}\r\n                                        select={optionID => this.props.changeValue(combatant.aura, 'style', optionID)}\r\n                                    />\r\n                                    <input\r\n                                        type='color'\r\n                                        value={combatant.aura.color}\r\n                                        onChange={event => this.props.changeValue(combatant.aura, 'color', event.target.value)}\r\n                                    />\r\n                                </div>\r\n                            );\r\n                        }\r\n                        options.push(\r\n                            <Expander\r\n                                key='aura'\r\n                                text='aura'\r\n                                content={(\r\n                                    <div>\r\n                                        <Spin\r\n                                            source={combatant.aura}\r\n                                            name='size'\r\n                                            label='size'\r\n                                            display={value => value + ' ft.'}\r\n                                            nudgeValue={delta => this.props.nudgeValue(combatant.aura, 'size', delta * 5)}\r\n                                        />\r\n                                        {auraDetails}\r\n                                    </div>\r\n                                )}\r\n                            />\r\n                        );\r\n                        options.push(<button key='mapRemove' onClick={() => this.props.mapRemove(combatant)}>remove from map</button>);\r\n                    }\r\n                    if (this.props.mode.indexOf('off-map') !== -1) {\r\n                        options.push(<button key='mapAdd' onClick={() => this.props.mapAdd(combatant)}>add to map</button>);\r\n                    }\r\n                    options.push(<div key='tactical-div' className='divider' />);\r\n                }\r\n                if (combatant.pending && !combatant.active && !combatant.defeated) {\r\n                    options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                }\r\n                if (!combatant.pending && combatant.active && !combatant.defeated) {\r\n                    if (combatant.current) {\r\n                        options.push(<button key='endTurn' onClick={() => this.props.endTurn(combatant)}>end turn</button>);\r\n                        options.push(<button key='makeDefeated' onClick={() => this.props.makeDefeated(combatant)}>mark as defeated and end turn</button>);\r\n                    } else {\r\n                        options.push(<button key='makeCurrent' onClick={() => this.props.makeCurrent(combatant)}>start turn</button>);\r\n                        options.push(<button key='makeDefeated' onClick={() => this.props.makeDefeated(combatant)}>mark as defeated</button>);\r\n                        options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                    }\r\n                    options.push(\r\n                        <Expander\r\n                            key='init'\r\n                            text='change initiative score'\r\n                            content={(\r\n                                <div>\r\n                                    <Spin\r\n                                        source={this.props.combatant}\r\n                                        name='initiative'\r\n                                        label='initiative'\r\n                                        nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'initiative', delta)}\r\n                                    />\r\n                                </div>\r\n                            )}\r\n                        />\r\n                    );\r\n                }\r\n                if (!combatant.pending && !combatant.active && combatant.defeated) {\r\n                    options.push(<button key='makeActive' onClick={() => this.props.makeActive(combatant)}>mark as active</button>);\r\n                    options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                }\r\n                options.push(\r\n                    <ControlRow\r\n                        key='tags'\r\n                        controls={COMBAT_TAGS.map(tag =>\r\n                            <Checkbox\r\n                                key={tag}\r\n                                label={tag}\r\n                                display='button'\r\n                                checked={combatant.tags.includes(tag)}\r\n                                changeValue={value => this.props.toggleTag(combatant, tag)}\r\n                            />\r\n                        )}\r\n                    />\r\n                );\r\n            }\r\n\r\n            const desc = (this.props.combatant.race || 'unknown race')\r\n                + ' ' + (this.props.combatant.classes || 'unknown class')\r\n                + ', level ' + this.props.combatant.level;\r\n\r\n            const name = (this.props.combatant as Combatant ? (this.props.combatant as Combatant).displayName : null)\r\n                || this.props.combatant.name\r\n                || 'unnamed pc';\r\n\r\n            return (\r\n                <div className='card pc'>\r\n                    <div className='heading'>\r\n                        <div className='title'>{name}</div>\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        <div className='stats'>\r\n                            <div className='section centered lowercase'>\r\n                                <i>{desc}</i>\r\n                                <div style={{ display: this.props.combatant.url ? '' : 'none' }}>\r\n                                    <a href={this.props.combatant.url} target='_blank' rel='noopener noreferrer'>d&d beyond sheet</a>\r\n                                </div>\r\n                            </div>\r\n                            <div className='divider' />\r\n                            <div className='section subheading'>languages</div>\r\n                            <div className='section'>\r\n                                {this.props.combatant.languages || '-'}\r\n                            </div>\r\n                            <div className='section subheading'>passive skills</div>\r\n                            <div className='section'>\r\n                                <div><b>insight</b> {this.props.combatant.passiveInsight}</div>\r\n                                <div><b>investigation</b> {this.props.combatant.passiveInvestigation}</div>\r\n                                <div><b>perception</b> {this.props.combatant.passivePerception}</div>\r\n                            </div>\r\n                        </div>\r\n                        <div style={{ display: options.length > 0 ? '' : 'none' }}>\r\n                            <div className='divider' />\r\n                            <div className='section'>\r\n                                {options}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Combatant } from '../../models/combat';\r\nimport { Monster } from '../../models/monster-group';\r\n\r\ninterface Props {\r\n    combatant: Combatant & Monster;\r\n}\r\n\r\nexport default class HitPointGauge extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const hpCurrent = this.props.combatant.hp || 0;\r\n            const hpMax = this.props.combatant.hpMax + this.props.combatant.hpTemp;\r\n            const hpBloodied = this.props.combatant.hpMax / 2;\r\n            const hpWidth = 100 * Math.max(hpCurrent, 0) / hpMax;\r\n\r\n            let style = '';\r\n            if (hpCurrent >= this.props.combatant.hpMax) {\r\n                style = 'bar unhurt';\r\n            } else if (hpCurrent <= hpBloodied) {\r\n                style = 'bar bloodied';\r\n            } else {\r\n                style = 'bar injured';\r\n            }\r\n\r\n            let hpTempBar = null;\r\n            if (this.props.combatant.hpTemp > 0) {\r\n                const hpTempWidth = 100 * Math.max(this.props.combatant.hpTemp, 0) / hpMax;\r\n                hpTempBar = <div className='bar temp' style={{ width: hpTempWidth + '%' }} />;\r\n            }\r\n\r\n            return (\r\n                <div className='hp-gauge'>\r\n                    <div className={style} style={{ width: hpWidth + '%' }} />\r\n                    {hpTempBar}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combatant } from '../../models/combat';\r\nimport { Map, MapItem } from '../../models/map-folio';\r\nimport { Monster } from '../../models/monster-group';\r\nimport { PC } from '../../models/party';\r\n\r\nimport HitPointGauge from './hit-point-gauge';\r\n\r\ninterface Props {\r\n    map: Map;\r\n    mode: 'edit' | 'thumbnail' | 'combat';\r\n    combatants: ((Combatant & PC) | (Combatant & Monster))[];\r\n    showOverlay: boolean;\r\n    selectedItemID: string;\r\n    setSelectedItemID: (itemID: string | null) => void;\r\n    gridSquareClicked: (x: number, y: number) => void;\r\n}\r\n\r\ninterface MapDimensions {\r\n    minX: number;\r\n    maxX: number;\r\n    minY: number;\r\n    maxY: number;\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\ninterface StyleData {\r\n    left: string;\r\n    top: string;\r\n    width: string;\r\n    height: string;\r\n    backgroundColor?: string;\r\n}\r\n\r\nexport default class MapPanel extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        combatants: null,\r\n        showOverlay: false,\r\n        selectedItemID: null,\r\n        setSelectedItemID: null,\r\n        gridSquareClicked: null\r\n    };\r\n\r\n    private getMapDimensions(border: number): MapDimensions | null {\r\n        let dimensions: MapDimensions | null = null;\r\n\r\n        this.props.map.items.filter(i => {\r\n            if (this.props.mode === 'edit') {\r\n                return i.type === 'tile';\r\n            }\r\n            return true;\r\n        }).forEach(i => {\r\n            if (!dimensions) {\r\n                dimensions = {\r\n                    minX: i.x,\r\n                    maxX: i.x + i.width - 1,\r\n                    minY: i.y,\r\n                    maxY: i.y + i.height - 1,\r\n                    width: 0,\r\n                    height: 0\r\n                };\r\n            } else {\r\n                dimensions.minX = Math.min(dimensions.minX, i.x);\r\n                dimensions.maxX = Math.max(dimensions.maxX, i.x + i.width - 1);\r\n                dimensions.minY = Math.min(dimensions.minY, i.y);\r\n                dimensions.maxY = Math.max(dimensions.maxY, i.y + i.height - 1);\r\n            }\r\n        });\r\n\r\n        if (this.props.combatants) {\r\n            this.props.combatants.filter(c => c.aura.size > 0).forEach(c => {\r\n                const mi = this.props.map.items.find(i => i.id === c.id);\r\n                if (mi) {\r\n                    const sizeInSquares = c.aura.size / 5;\r\n                    let miniSize = 1;\r\n                    const m = c as Monster;\r\n                    if (m) {\r\n                        miniSize = Utils.miniSize(m.size);\r\n                    }\r\n                    const minX = mi.x - sizeInSquares;\r\n                    const maxX = mi.x + (miniSize - 1) + sizeInSquares;\r\n                    const minY = mi.y - sizeInSquares;\r\n                    const maxY = mi.y + (miniSize - 1) + sizeInSquares;\r\n\r\n                    if (dimensions) {\r\n                        dimensions.minX = Math.min(dimensions.minX, minX);\r\n                        dimensions.maxX = Math.max(dimensions.maxX, maxX);\r\n                        dimensions.minY = Math.min(dimensions.minY, minY);\r\n                        dimensions.maxY = Math.max(dimensions.maxY, maxY);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        if (!dimensions) {\r\n            // The map is blank\r\n            if (this.props.mode === 'thumbnail') {\r\n                return null;\r\n            }\r\n\r\n            dimensions = {\r\n                minX: 0,\r\n                maxX: 0,\r\n                minY: 0,\r\n                maxY: 0,\r\n                width: 0,\r\n                height: 0\r\n            };\r\n        }\r\n\r\n        // Apply the border\r\n        dimensions.minX -= border;\r\n        dimensions.maxX += border;\r\n        dimensions.minY -= border;\r\n        dimensions.maxY += border;\r\n\r\n        // Set width and height\r\n        dimensions.width = 1 + dimensions.maxX - dimensions.minX;\r\n        dimensions.height = 1 + dimensions.maxY - dimensions.minY;\r\n\r\n        return dimensions;\r\n    }\r\n\r\n    private getSideLength(): number {\r\n        switch (this.props.mode) {\r\n            case 'thumbnail':\r\n                return 5;\r\n            case 'edit':\r\n            case 'combat':\r\n                return 25;\r\n            default:\r\n                return 5;\r\n        }\r\n    }\r\n\r\n    private getStyle(x: number, y: number, width: number, height: number, mapDimensions: MapDimensions): StyleData {\r\n        const sideLength = this.getSideLength();\r\n\r\n        return {\r\n            left: 'calc(' + sideLength + 'px * ' + (x - mapDimensions.minX) + ')',\r\n            top: 'calc(' + sideLength + 'px * ' + (y - mapDimensions.minY) + ')',\r\n            width: 'calc((' + sideLength + 'px * ' + width + ') + 1px)',\r\n            height: 'calc((' + sideLength + 'px * ' + height + ') + 1px)'\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const border = (this.props.mode === 'edit') ? 2 : 0;\r\n            const mapDimensions = this.getMapDimensions(border);\r\n            if (!mapDimensions) {\r\n                return (\r\n                    <div>(blank map)</div>\r\n                );\r\n            }\r\n\r\n            // Draw the grid squares\r\n            const grid = [];\r\n            if (this.props.mode === 'edit') {\r\n                for (let y = mapDimensions.minY; y !== mapDimensions.maxY + 1; ++y) {\r\n                    for (let x = mapDimensions.minX; x !== mapDimensions.maxX + 1; ++x) {\r\n                        const gridStyle = this.getStyle(x, y, 1, 1, mapDimensions);\r\n                        grid.push(\r\n                            <GridSquare\r\n                                key={x + ',' + y}\r\n                                x={x}\r\n                                y={y}\r\n                                style={gridStyle}\r\n                                onClick={() => this.props.setSelectedItemID(null)}\r\n                            />\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Draw the map tiles\r\n            const tiles = this.props.map.items\r\n                .filter(i => i.type === 'tile')\r\n                .map(i => {\r\n                    const tileStyle = this.getStyle(i.x, i.y, i.width, i.height, mapDimensions as MapDimensions);\r\n                    return (\r\n                        <MapTile\r\n                            key={i.id}\r\n                            tile={i}\r\n                            style={tileStyle}\r\n                            selectable={this.props.mode === 'edit'}\r\n                            selected={this.props.selectedItemID === i.id}\r\n                            thumbnail={this.props.mode === 'thumbnail'}\r\n                            select={id => this.props.mode === 'edit' ? this.props.setSelectedItemID(id) : null}\r\n                        />\r\n                    );\r\n                });\r\n\r\n            // Draw token auras\r\n            let auras: JSX.Element[] = [];\r\n            if ((this.props.mode !== 'edit') && (this.props.mode !== 'thumbnail')) {\r\n                auras = this.props.combatants\r\n                    .filter(c => c.aura.size > 0)\r\n                    .map(c => {\r\n                        const mi = this.props.map.items.find(i => i.id === c.id);\r\n                        if (mi) {\r\n                            const sizeInSquares = c.aura.size / 5;\r\n                            let miniSize = 1;\r\n                            const m = c as Monster;\r\n                            if (m) {\r\n                                miniSize = Utils.miniSize(m.size);\r\n                            }\r\n                            const dim = (sizeInSquares * 2) + miniSize;\r\n                            const auraStyle = this.getStyle(mi.x - sizeInSquares, mi.y - sizeInSquares, dim, dim, mapDimensions as MapDimensions);\r\n                            auraStyle.backgroundColor = c.aura.color;\r\n                            return (\r\n                                <div\r\n                                    key={c.id + ' aura'}\r\n                                    className={'aura ' + c.aura.style}\r\n                                    style={auraStyle}\r\n                                />\r\n                            );\r\n                        }\r\n                        return null;\r\n                    })\r\n                    .filter(mt => mt !== null) as JSX.Element[];\r\n            }\r\n\r\n            // Draw the tokens\r\n            let tokens: JSX.Element[] = [];\r\n            if (this.props.mode !== 'edit') {\r\n                tokens = this.props.map.items\r\n                    .filter(i => (i.type === 'monster') || (i.type === 'pc'))\r\n                    .map(i => {\r\n                        const tokenStyle = this.getStyle(i.x, i.y, i.width, i.height, mapDimensions as MapDimensions);\r\n                        const combatant = this.props.combatants.find(c => c.id === i.id);\r\n                        if (combatant) {\r\n                            return (\r\n                                <MapToken\r\n                                    key={i.id}\r\n                                    token={i}\r\n                                    combatant={combatant}\r\n                                    style={tokenStyle}\r\n                                    simple={this.props.mode === 'thumbnail'}\r\n                                    selectable={this.props.mode === 'combat'}\r\n                                    selected={this.props.selectedItemID ===  i.id}\r\n                                    select={id => this.props.setSelectedItemID(id)}\r\n                                />\r\n                            );\r\n                        }\r\n\r\n                        return null;\r\n                    })\r\n                    .filter(mt => mt !== null) as JSX.Element[];\r\n            }\r\n\r\n            // Draw the drag overlay\r\n            const dragOverlay = [];\r\n            if (this.props.showOverlay) {\r\n                for (let yOver = mapDimensions.minY; yOver !== mapDimensions.maxY + 1; ++yOver) {\r\n                    for (let xOver = mapDimensions.minX; xOver !== mapDimensions.maxX + 1; ++xOver) {\r\n                        const overlayStyle = this.getStyle(xOver, yOver, 1, 1, mapDimensions);\r\n                        dragOverlay.push(\r\n                            <GridSquare\r\n                                key={xOver + ',' + yOver}\r\n                                x={xOver}\r\n                                y={yOver}\r\n                                style={overlayStyle}\r\n                                overlay={true}\r\n                                onClick={(posX, posY) => this.props.gridSquareClicked(posX, posY)}\r\n                            />\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n\r\n            const style = 'map-panel ' + this.props.mode;\r\n            return (\r\n                <div className={style} onClick={() => this.props.setSelectedItemID(null)}>\r\n                    <div className='grid' style={{ height: ((this.getSideLength() * mapDimensions.height) + 1) + 'px' }}>\r\n                        {grid}\r\n                        {tiles}\r\n                        {auras}\r\n                        {tokens}\r\n                        {dragOverlay}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface GridSquareProps {\r\n    x: number;\r\n    y: number;\r\n    style: StyleData;\r\n    overlay: boolean;\r\n    onClick: (x: number, y: number) => void;\r\n    onDoubleClick: (x: number, y: number) => void;\r\n}\r\n\r\nclass GridSquare extends React.Component<GridSquareProps> {\r\n    public static defaultProps = {\r\n        overlay: false,\r\n        onDoubleClick: null\r\n    };\r\n\r\n    private click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (this.props.onClick) {\r\n            this.props.onClick(this.props.x, this.props.y);\r\n        }\r\n    }\r\n\r\n    private doubleClick(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (this.props.onDoubleClick) {\r\n            this.props.onDoubleClick(this.props.x, this.props.y);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'grid-square';\r\n        if (this.props.overlay) {\r\n            style += ' grid-overlay';\r\n        }\r\n\r\n        return (\r\n            <div\r\n                className={style}\r\n                style={this.props.style}\r\n                onClick={e => this.click(e)}\r\n                onDoubleClick={e => this.doubleClick(e)}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\ninterface MapTileProps {\r\n    tile: MapItem;\r\n    style: StyleData;\r\n    thumbnail: boolean;\r\n    selectable: boolean;\r\n    selected: boolean;\r\n    select: (tileID: string) => void;\r\n}\r\n\r\nclass MapTile extends React.Component<MapTileProps> {\r\n    private select(e: React.MouseEvent) {\r\n        if (this.props.selectable) {\r\n            e.stopPropagation();\r\n            this.props.select(this.props.tile.id);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'tile ' + this.props.tile.terrain + ' ' + this.props.tile.style;\r\n        if (this.props.selected) {\r\n            style += ' selected';\r\n        }\r\n        if (this.props.thumbnail) {\r\n            style += ' thumbnail';\r\n        }\r\n\r\n        return (\r\n            <div\r\n                className={style}\r\n                style={this.props.style}\r\n                onClick={e => this.select(e)}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\ninterface MapTokenProps {\r\n    token: MapItem;\r\n    combatant: (Combatant & PC) | (Combatant & Monster);\r\n    style: StyleData;\r\n    simple: boolean;\r\n    selectable: boolean;\r\n    selected: boolean;\r\n    select: (tokenID: string) => void;\r\n}\r\n\r\nclass MapToken extends React.Component<MapTokenProps> {\r\n    private select(e: React.MouseEvent) {\r\n        if (this.props.selectable) {\r\n            e.stopPropagation();\r\n            this.props.select(this.props.token.id);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'token ' + this.props.token.type;\r\n        if (this.props.selected) {\r\n            style += ' selected';\r\n        }\r\n        if (this.props.combatant.current) {\r\n            style += ' current';\r\n        }\r\n\r\n        let initials = null;\r\n        let hpGauge = null;\r\n        let altitudeBadge = null;\r\n        let conditionsBadge = null;\r\n        if (!this.props.simple) {\r\n            const name = this.props.combatant.displayName || this.props.combatant.name || 'combatant';\r\n            initials = (\r\n                <div className='initials'>{name.split(' ').map(s => s[0])}</div>\r\n            );\r\n\r\n            if (this.props.combatant.type === 'monster') {\r\n                hpGauge = (\r\n                    <HitPointGauge combatant={this.props.combatant as Combatant & Monster} />\r\n                );\r\n            }\r\n\r\n            if (this.props.combatant.altitude > 0) {\r\n                altitudeBadge = (\r\n                    <div className='badge altitude'>&#9206;</div>\r\n                );\r\n            }\r\n\r\n            if (this.props.combatant.altitude < 0) {\r\n                altitudeBadge = (\r\n                    <div className='badge altitude'>&#9207;</div>\r\n                );\r\n            }\r\n\r\n            if ((this.props.combatant.conditions) && (this.props.combatant.conditions.length > 0)) {\r\n                conditionsBadge = (\r\n                    <div className='badge'>&#9670;</div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div\r\n                title={this.props.combatant.displayName || this.props.combatant.name}\r\n                className={style}\r\n                style={this.props.style}\r\n                onClick={e => this.select(e)}\r\n            >\r\n                {initials}\r\n                {hpGauge}\r\n                {altitudeBadge}\r\n                {conditionsBadge}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Combat } from '../../models/combat';\r\n\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    combat: Combat;\r\n    selected: boolean;\r\n    setSelection: (combat: Combat) => void;\r\n}\r\n\r\nexport default class CombatListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            let map = null;\r\n            if (this.props.combat.map) {\r\n                map = (\r\n                    <MapPanel\r\n                        map={this.props.combat.map}\r\n                        mode='thumbnail'\r\n                        combatants={this.props.combat.combatants}\r\n                    />\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.combat)}>\r\n                    <div className='heading'>{this.props.combat.name || 'unnamed combat'}</div>\r\n                    <div className='text'>paused at {this.props.combat.timestamp}</div>\r\n                    {map}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport close from '../../resources/images/close-black.svg';\r\nimport arrow from '../../resources/images/down-arrow-black.svg';\r\n\r\ninterface Props {\r\n    content: any[];\r\n    heading: string;\r\n    hidden: boolean;\r\n    showToggle: boolean;\r\n    close: () => void;\r\n}\r\n\r\ninterface State {\r\n    showCards: boolean;\r\n}\r\n\r\nexport default class CardGroup extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        heading: null,\r\n        hidden: false,\r\n        showToggle: false,\r\n        close: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showCards: true\r\n        };\r\n    }\r\n\r\n    private toggleCards() {\r\n        this.setState({\r\n            showCards: !this.state.showCards\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            if (this.props.hidden) {\r\n                return null;\r\n            }\r\n\r\n            let heading = null;\r\n            if (this.props.heading) {\r\n                let closeBtn = null;\r\n                if (this.props.close) {\r\n                    closeBtn = (\r\n                        <img className='image' src={close} alt='close' onClick={() => this.props.close()} />\r\n                    );\r\n                }\r\n\r\n                let toggle = null;\r\n                if (this.props.showToggle) {\r\n                    const style = this.state.showCards ? 'image rotate' : 'image';\r\n                    toggle = (\r\n                        <img className={style} src={arrow} alt='arrow' onClick={() => this.toggleCards()} />\r\n                    );\r\n                }\r\n\r\n                heading = (\r\n                    <div className='heading'>\r\n                        <div className='title'>{this.props.heading}</div>\r\n                        {toggle}\r\n                        {closeBtn}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            let cards = [];\r\n            if ((this.props.content.length > 0) && this.state.showCards) {\r\n                cards = this.props.content;\r\n            }\r\n\r\n            return (\r\n                <div className='card-group'>\r\n                    {heading}\r\n                    <div className='row small-up-1 medium-up-2 large-up-3 collapse'>\r\n                        {cards}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combat, Combatant, Notification } from '../../models/combat';\r\nimport { Condition, ConditionDurationSaves } from '../../models/condition';\r\nimport { Monster, Trait } from '../../models/monster-group';\r\nimport { PC } from '../../models/party';\r\n\r\nimport MonsterCard from '../cards/monster-card';\r\nimport PCCard from '../cards/pc-card';\r\nimport ControlRow from '../controls/control-row';\r\nimport Spin from '../controls/spin';\r\nimport CombatListItem from '../list-items/combat-list-item';\r\nimport CardGroup from '../panels/card-group';\r\nimport HitPointGauge from '../panels/hit-point-gauge';\r\nimport MapPanel from '../panels/map-panel';\r\nimport Note from '../panels/note';\r\nimport TraitsPanel from '../panels/traits-panel';\r\n\r\ninterface Props {\r\n    combats: Combat[];\r\n    combat: Combat | null;\r\n    filter: string;\r\n    createCombat: () => void;\r\n    resumeEncounter: (combat: Combat) => void;\r\n    close: (notification: Notification, removeCondition: boolean) => void;\r\n    mapAdd: (combatant: (Combatant & PC) | (Combatant & Monster), x: number, y: number) => void;\r\n    makeCurrent: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    makeActive: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    makeDefeated: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    removeCombatant: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    addCondition: (combatant: Combatant & Monster) => void;\r\n    editCondition: (combatant: Combatant & Monster, condition: Condition) => void;\r\n    removeCondition: (combatant: Combatant & Monster, conditionID: string) => void;\r\n    mapMove: (combatant: (Combatant & PC) | (Combatant & Monster), dir: string) => void;\r\n    mapRemove: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    endTurn: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    changeHP: (combatant: Combatant & Monster, hp: number, temp: number) => void;\r\n    changeValue: (source: {}, type: string, value: any) => void;\r\n    nudgeValue: (source: {}, type: string, delta: number) => void;\r\n    toggleTag: (combatant: Combatant, tag: string) => void;\r\n}\r\n\r\ninterface State {\r\n    selectedTokenID: string | null;\r\n    addingToMapID: string | null;\r\n}\r\n\r\nexport default class CombatManagerScreen extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            selectedTokenID: null,  // The ID of the combatant that's selected\r\n            addingToMapID: null     // The ID of the combatant we're adding to the map\r\n        };\r\n    }\r\n\r\n    private setSelectedTokenID(id: string | null) {\r\n        this.setState({\r\n            selectedTokenID: id\r\n        });\r\n    }\r\n\r\n    private setAddingToMapID(id: string | null) {\r\n        this.setState({\r\n            addingToMapID: id\r\n        });\r\n    }\r\n\r\n    private createCard(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        let mode = 'combat';\r\n        if (this.props.combat && this.props.combat.map) {\r\n            mode += ' tactical';\r\n            const onMap = this.props.combat.map.items.find(i => i.id === combatant.id);\r\n            mode += onMap ? ' on-map' : ' off-map';\r\n        }\r\n\r\n        switch (combatant.type) {\r\n            case 'pc':\r\n                return (\r\n                    <PCCard\r\n                        key='selected'\r\n                        combatant={combatant as Combatant & PC}\r\n                        mode={mode}\r\n                        changeValue={(source, type, value) => this.props.changeValue(source, type, value)}\r\n                        nudgeValue={(source, type, delta) => this.props.nudgeValue(source, type, delta)}\r\n                        makeCurrent={c => this.props.makeCurrent(c as Combatant & PC)}\r\n                        makeActive={c => this.props.makeActive(c as Combatant & PC)}\r\n                        makeDefeated={c => this.props.makeDefeated(c as Combatant & PC)}\r\n                        removeCombatant={c => this.props.removeCombatant(c as Combatant & PC)}\r\n                        mapAdd={c => this.setAddingToMapID(c.id)}\r\n                        mapMove={(c, dir) => this.props.mapMove(c as Combatant & PC, dir)}\r\n                        mapRemove={c => this.props.mapRemove(c as Combatant & PC)}\r\n                        endTurn={c => this.props.endTurn(c as Combatant & PC)}\r\n                        toggleTag={(c, tag) => this.props.toggleTag(c, tag)}\r\n                    />\r\n                );\r\n            case 'monster':\r\n                return (\r\n                    <MonsterCard\r\n                        key='selected'\r\n                        combatant={combatant as Combatant & Monster}\r\n                        mode={mode}\r\n                        combat={this.props.combat as Combat}\r\n                        changeValue={(c, type, value) => this.props.changeValue(c, type, value)}\r\n                        nudgeValue={(c, type, delta) => this.props.nudgeValue(c, type, delta)}\r\n                        makeCurrent={c => this.props.makeCurrent(c as Combatant & Monster)}\r\n                        makeActive={c => this.props.makeActive(c as Combatant & Monster)}\r\n                        makeDefeated={c => this.props.makeDefeated(c as Combatant & Monster)}\r\n                        removeCombatant={c => this.props.removeCombatant(c as Combatant & Monster)}\r\n                        addCondition={c => this.props.addCondition(c as Combatant & Monster)}\r\n                        editCondition={(c, condition) => this.props.editCondition(c as Combatant & Monster, condition)}\r\n                        removeCondition={(c, conditionID) => this.props.removeCondition(c as Combatant & Monster, conditionID)}\r\n                        nudgeConditionValue={(c, type, delta) => this.props.nudgeValue(c, type, delta)}\r\n                        mapAdd={c => this.setAddingToMapID(c.id)}\r\n                        mapMove={(c, dir) => this.props.mapMove(c as Combatant & Monster, dir)}\r\n                        mapRemove={c => this.props.mapRemove(c as Combatant & Monster)}\r\n                        endTurn={(c) => this.props.endTurn(c as Combatant & Monster)}\r\n                        changeHP={(c, hp, temp) => this.props.changeHP(c as Combatant & Monster, hp, temp)}\r\n                        toggleTag={(c, tag) => this.props.toggleTag(c, tag)}\r\n                    />\r\n                );\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    private addCombatantToMap(x: number, y: number) {\r\n        if (this.props.combat) {\r\n            const combatant = this.props.combat.combatants.find(c => c.id === this.state.addingToMapID);\r\n            if (combatant) {\r\n                this.props.mapAdd(combatant, x, y);\r\n            }\r\n            this.setAddingToMapID(null);\r\n        }\r\n    }\r\n\r\n    private showCombat(combat: Combat) {\r\n        return Utils.match(this.props.filter, combat.name);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            if (this.props.combat) {\r\n                const current: JSX.Element[] = [];\r\n                let pending: JSX.Element[] = [];\r\n                let active: JSX.Element[] = [];\r\n                const defeated: JSX.Element[] = [];\r\n\r\n                this.props.combat.combatants.forEach(combatant => {\r\n                    if (combatant.current) {\r\n                        current.push(\r\n                            <div key={combatant.id}>\r\n                                {this.createCard(combatant)}\r\n                            </div>\r\n                        );\r\n                    }\r\n                    if (combatant.pending && !combatant.active && !combatant.defeated) {\r\n                        pending.push(\r\n                            <PendingCombatantRow\r\n                                key={combatant.id}\r\n                                combatant={combatant}\r\n                                select={c => this.setSelectedTokenID(c.id)}\r\n                                selected={combatant.id === this.state.selectedTokenID}\r\n                                nudgeValue={(c, type, delta) => this.props.nudgeValue(c, type, delta)}\r\n                                makeActive={c => this.props.makeActive(c)}\r\n                            />\r\n                        );\r\n                    }\r\n                    if (!combatant.pending && combatant.active && !combatant.defeated) {\r\n                        switch (combatant.type) {\r\n                            case 'pc':\r\n                                active.push(\r\n                                    <PCRow\r\n                                        key={combatant.id}\r\n                                        combatant={combatant as Combatant & PC}\r\n                                        combat={this.props.combat as Combat}\r\n                                        select={c => this.setSelectedTokenID(c.id)}\r\n                                        selected={combatant.id === this.state.selectedTokenID}\r\n                                    />\r\n                                );\r\n                                break;\r\n                            case 'monster':\r\n                                active.push(\r\n                                    <MonsterRow\r\n                                        key={combatant.id}\r\n                                        combatant={combatant as Combatant & Monster}\r\n                                        combat={this.props.combat as Combat}\r\n                                        select={c => this.setSelectedTokenID(c.id)}\r\n                                        selected={combatant.id === this.state.selectedTokenID}\r\n                                    />\r\n                                );\r\n                                break;\r\n                        }\r\n                    }\r\n                    if (!combatant.pending && !combatant.active && combatant.defeated) {\r\n                        switch (combatant.type) {\r\n                            case 'pc':\r\n                                defeated.push(\r\n                                    <PCRow\r\n                                        key={combatant.id}\r\n                                        combatant={combatant as Combatant & PC}\r\n                                        combat={this.props.combat as Combat}\r\n                                        select={c => this.setSelectedTokenID(c.id)}\r\n                                        selected={combatant.id === this.state.selectedTokenID}\r\n                                    />\r\n                                );\r\n                                break;\r\n                            case 'monster':\r\n                                defeated.push(\r\n                                    <MonsterRow\r\n                                        key={combatant.id}\r\n                                        combatant={combatant as Combatant & Monster}\r\n                                        combat={this.props.combat as Combat}\r\n                                        select={c => this.setSelectedTokenID(c.id)}\r\n                                        selected={combatant.id === this.state.selectedTokenID}\r\n                                    />\r\n                                );\r\n                                break;\r\n                        }\r\n                    }\r\n                });\r\n\r\n                if (pending.length !== 0) {\r\n                    const pendingHelp = (\r\n                        <div key='pending-help'>\r\n                            <Note\r\n                                content={\r\n                                    <div>\r\n                                        <div className='section'>these combatants are not yet part of the encounter</div>\r\n                                        <div className='section'>set initiative on each of them, then add them to the encounter</div>\r\n                                    </div>\r\n                                }\r\n                            />\r\n                        </div>\r\n                    );\r\n                    pending = [pendingHelp].concat(pending);\r\n                }\r\n\r\n                if (current.length === 0) {\r\n                    const activeHelp = (\r\n                        /* tslint:disable:max-line-length */\r\n                        <div key='active-help'>\r\n                            <Note\r\n                                content={\r\n                                    <div>\r\n                                        <div className='section'>these are the combatants taking part in this encounter; you can select them to see their stat blocks (on the right)</div>\r\n                                        <div className='section'>they are listed in initiative order (with the highest initiative score at the top of the list, and the lowest at the bottom)</div>\r\n                                        <div className='section'>to begin the encounter, select the first combatant and press the <b>start turn</b> button on their stat block</div>\r\n                                    </div>\r\n                                }\r\n                            />\r\n                        </div>\r\n                        /* tslint:enable:max-line-length */\r\n                    );\r\n                    active = [activeHelp].concat(active);\r\n                }\r\n\r\n                if (current.length === 0) {\r\n                    current.push(\r\n                        <Note\r\n                            key='current'\r\n                            content={\r\n                                <div className='section'>\r\n                                    the current initiative holder will be displayed here\r\n                                </div>\r\n                            }\r\n                        />\r\n                    );\r\n                }\r\n\r\n                let notificationSection = null;\r\n                if (this.props.combat.notifications.length > 0) {\r\n                    const notifications = this.props.combat.notifications.map(n => (\r\n                        <NotificationPanel\r\n                            key={n.id}\r\n                            notification={n}\r\n                            close={(notification, removeCondition) => this.props.close(notification, removeCondition)}\r\n                        />\r\n                    ));\r\n                    notificationSection = (\r\n                        <div className='notifications'>\r\n                            {notifications}\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                let mapSection = null;\r\n                if (this.props.combat.map) {\r\n                    mapSection = (\r\n                        <MapPanel\r\n                            map={this.props.combat.map}\r\n                            mode='combat'\r\n                            showOverlay={this.state.addingToMapID !== null}\r\n                            combatants={this.props.combat.combatants}\r\n                            selectedItemID={this.state.selectedTokenID ? this.state.selectedTokenID : undefined}\r\n                            setSelectedItemID={id => {\r\n                                if (id) {\r\n                                    this.setSelectedTokenID(id);\r\n                                }\r\n                            }}\r\n                            gridSquareClicked={(x, y) => this.addCombatantToMap(x, y)}\r\n                        />\r\n                    );\r\n                }\r\n\r\n                const special: JSX.Element[] = [];\r\n                this.props.combat.combatants.forEach(c => {\r\n                    const monster = c as (Combatant & Monster);\r\n                    const legendary = monster && monster.traits && monster.traits.some(t => t.type === 'legendary') && !monster.current;\r\n                    const lair = monster && monster.traits && monster.traits.some(t => t.type === 'lair');\r\n                    if (legendary || lair) {\r\n                        special.push(\r\n                            <div className='card monster' key={monster.id}>\r\n                                <div className='heading'><div className='title'>{monster.name}</div></div>\r\n                                <div className='card-content'>\r\n                                    <TraitsPanel\r\n                                        combatant={monster}\r\n                                        mode='combat-special'\r\n                                        changeValue={(source, type, value) => this.props.changeValue(source, type, value)}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    }\r\n                });\r\n\r\n                let selectedCombatant = null;\r\n                if (this.state.selectedTokenID) {\r\n                    const combatant = this.props.combat.combatants.find(c => c.id === this.state.selectedTokenID);\r\n                    if (combatant && !combatant.current) {\r\n                        selectedCombatant = this.createCard(combatant);\r\n                    }\r\n                }\r\n                if (!selectedCombatant) {\r\n                    selectedCombatant = (\r\n                        <Note\r\n                            key='selected'\r\n                            content={\r\n                                <div className='section'>\r\n                                    select a pc or monster from the <b>initiative order</b> list to see its details here\r\n                                </div>\r\n                            }\r\n                        />\r\n                    );\r\n                }\r\n\r\n                return (\r\n                    <div className='combat-manager row collapse'>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable'>\r\n                            <CardGroup\r\n                                heading='initiative holder'\r\n                                content={current}\r\n                            />\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable'>\r\n                            {notificationSection}\r\n                            <CardGroup\r\n                                heading='waiting for intiative to be entered'\r\n                                content={pending}\r\n                                hidden={pending.length === 0}\r\n                                showToggle={true}\r\n                            />\r\n                            {mapSection}\r\n                            <CardGroup\r\n                                heading='initiative order'\r\n                                content={active}\r\n                                hidden={active.length === 0}\r\n                            />\r\n                            <CardGroup\r\n                                heading='defeated'\r\n                                content={defeated}\r\n                                hidden={defeated.length === 0}\r\n                                showToggle={true}\r\n                            />\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable'>\r\n                            <CardGroup\r\n                                heading={'don\\'t forget'}\r\n                                content={special}\r\n                                hidden={special.length === 0}\r\n                                showToggle={true}\r\n                            />\r\n                            <CardGroup\r\n                                heading='selected combatant'\r\n                                content={[selectedCombatant]}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                let listItems = this.props.combats.filter(c => this.showCombat(c)).map(c => {\r\n                    return (\r\n                        <CombatListItem\r\n                            key={c.id}\r\n                            combat={c}\r\n                            selected={false}\r\n                            setSelection={combat => this.props.resumeEncounter(combat)}\r\n                        />\r\n                    );\r\n                });\r\n                if (listItems.length === 0) {\r\n                    listItems = [(\r\n                        <Note\r\n                            key='empty'\r\n                            content={'you have no in-progress encounters'}\r\n                        />\r\n                    )];\r\n                }\r\n\r\n                return (\r\n                    <div className='combat-manager row collapse'>\r\n                        <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                            <button onClick={() => this.props.createCombat()}>start a new combat</button>\r\n                            <div className='divider' />\r\n                            {listItems}\r\n                        </div>\r\n                        <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                            <div className='vertical-center-outer'>\r\n                                <div className='vertical-center-middle'>\r\n                                    <div className='vertical-center-inner'>\r\n                                        <HelpCard combats={this.props.combats} />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface HelpCardProps {\r\n    combats: Combat[];\r\n}\r\n\r\nclass HelpCard extends React.Component<HelpCardProps> {\r\n    public render() {\r\n        let action: JSX.Element | null = null;\r\n        if (this.props.combats.length === 0) {\r\n            action = (\r\n                <div className='section'>to start a combat encounter, press the <b>start a new combat</b> button</div>\r\n            );\r\n        } else {\r\n            action = (\r\n                <div>\r\n                    <div className='section'>on the left you will see a list of encounters that you have paused</div>\r\n                    <div className='section'>you can resume a paused combat by selecting it</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Note\r\n                content={\r\n                    <div>\r\n                        <div className='section'>here you can run a combat encounter by specifying a party and an encounter</div>\r\n                        <div className='divider' />\r\n                        {action}\r\n                    </div>\r\n                }\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\ninterface NotificationProps {\r\n    notification: Notification;\r\n    close: (notification: Notification, removeCondition: boolean) => void;\r\n}\r\n\r\nclass NotificationPanel extends React.Component<NotificationProps> {\r\n    private success() {\r\n        switch (this.props.notification.type) {\r\n            case 'condition-save':\r\n            case 'condition-end':\r\n                const condition = this.props.notification.data as Condition;\r\n                if (condition.duration) {\r\n                    // Reduce save by 1\r\n                    if ((condition.duration.type === 'saves') || (condition.duration.type === 'rounds')) {\r\n                        condition.duration.count -= 1;\r\n                        if (condition.duration.count === 0) {\r\n                            // Remove the condition\r\n                            this.close(true);\r\n                        } else {\r\n                            this.close();\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            case 'trait-recharge':\r\n                // Mark trait as recharged\r\n                const trait = this.props.notification.data as Trait;\r\n                trait.uses = 0;\r\n                this.close();\r\n                break;\r\n        }\r\n    }\r\n\r\n    private close(removeCondition = false) {\r\n        this.props.close(this.props.notification, removeCondition);\r\n    }\r\n\r\n    public render() {\r\n        const combatant = this.props.notification.combatant as (Combatant & Monster);\r\n        const condition = this.props.notification.data as Condition;\r\n        const trait = this.props.notification.data as Trait;\r\n\r\n        const name = combatant.displayName || combatant.name || 'unnamed monster';\r\n        switch (this.props.notification.type) {\r\n            case 'condition-save':\r\n                const duration = condition.duration as ConditionDurationSaves;\r\n                let saveType = duration.saveType.toString();\r\n                if (saveType !== 'death') {\r\n                    saveType = saveType.toUpperCase();\r\n                }\r\n                return (\r\n                    <div key={this.props.notification.id} className='descriptive'>\r\n                        <div className='text'>\r\n                            {name} must make a {saveType} save against dc {duration.saveDC}\r\n                        </div>\r\n                        <ControlRow\r\n                            controls={[\r\n                                <button key='success' onClick={() => this.success()}>success</button>,\r\n                                <button key='close' onClick={() => this.close()}>close</button>\r\n                            ]}\r\n                        />\r\n                    </div>\r\n                );\r\n            case 'condition-end':\r\n                return (\r\n                    <div key={this.props.notification.id} className='descriptive'>\r\n                        <div className='text'>\r\n                            {name} is no longer affected by condition {condition.name}\r\n                        </div>\r\n                        <ControlRow\r\n                            controls={[\r\n                                <button key='close' onClick={() => this.close()}>close</button>\r\n                            ]}\r\n                        />\r\n                    </div>\r\n                );\r\n            case 'trait-recharge':\r\n                return (\r\n                    <div key={this.props.notification.id} className='descriptive'>\r\n                        <div className='text'>\r\n                            {name} can attempt to recharge {trait.name} ({trait.usage})\r\n                        </div>\r\n                        <ControlRow\r\n                            controls={[\r\n                                <button key='recharge' onClick={() => this.success()}>recharge</button>,\r\n                                <button key='close' onClick={() => this.close()}>close</button>\r\n                            ]}\r\n                        />\r\n                    </div>\r\n                );\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface PendingCombatantRowProps {\r\n    combatant: (Combatant & PC) | (Combatant & Monster);\r\n    selected: boolean;\r\n    select: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    nudgeValue: (combatant: (Combatant & PC) | (Combatant & Monster), field: string, delta: number) => void;\r\n    makeActive: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n}\r\n\r\nclass PendingCombatantRow extends React.Component<PendingCombatantRowProps> {\r\n    private getInformationText() {\r\n        if (this.props.selected) {\r\n            return 'selected';\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private onClick(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (this.props.select) {\r\n            this.props.select(this.props.combatant);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'combatant-row ' + this.props.combatant.type;\r\n        if (this.props.combatant.current || this.props.selected) {\r\n            style += ' highlight';\r\n        }\r\n\r\n        return (\r\n            <div className={style} onClick={e => this.onClick(e)}>\r\n                <div className='name'>\r\n                    {this.props.combatant.displayName || this.props.combatant.name || 'combatant'}\r\n                    <span className='info'>{this.getInformationText()}</span>\r\n                </div>\r\n                <div className='content'>\r\n                    <Spin\r\n                        source={this.props.combatant}\r\n                        name='initiative'\r\n                        label='initiative'\r\n                        nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'initiative', delta)}\r\n                    />\r\n                    <button onClick={e => { e.stopPropagation(); this.props.makeActive(this.props.combatant); }}>add to encounter</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface PCRowProps {\r\n    combatant: Combatant & PC;\r\n    combat: Combat;\r\n    selected: boolean;\r\n    select: (combatant: Combatant & PC) => void;\r\n}\r\n\r\nclass PCRow extends React.Component<PCRowProps> {\r\n    private getInformationText() {\r\n        if (this.props.combatant.current) {\r\n            return 'current turn';\r\n        }\r\n\r\n        if (this.props.selected) {\r\n            return 'selected';\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private onClick(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (!this.props.combatant.current && !this.props.selected && this.props.select) {\r\n            this.props.select(this.props.combatant);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'combatant-row ' + this.props.combatant.type;\r\n        if (this.props.combatant.current || this.props.selected) {\r\n            style += ' highlight';\r\n        }\r\n\r\n        const desc = (this.props.combatant.race || 'unknown race')\r\n                + ' ' + (this.props.combatant.classes || 'unknown class')\r\n                + ', level ' + this.props.combatant.level;\r\n\r\n        const notes = [];\r\n        if (this.props.combat.map) {\r\n            if (!this.props.combatant.pending && !this.props.combat.map.items.find(i => i.id === this.props.combatant.id)) {\r\n                notes.push(\r\n                    <Note key='not-on-map' white={true} content='not on the map' />\r\n                );\r\n            }\r\n        }\r\n        this.props.combatant.tags.forEach(tag => {\r\n            notes.push(\r\n                <Note key={tag} white={true} content={Utils.getTagDescription(tag)} />\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div className={style} onClick={e => this.onClick(e)}>\r\n                <div className='name'>\r\n                    {this.props.combatant.displayName || this.props.combatant.name || 'combatant'}\r\n                    {this.props.combatant.player ? ' | ' + this.props.combatant.player : ''}\r\n                    <span className='info'>{this.getInformationText()}</span>\r\n                </div>\r\n                <div className='content'>\r\n                    <div className='section lowercase'>\r\n                        {desc}\r\n                    </div>\r\n                    {notes}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface MonsterRowProps {\r\n    combatant: Combatant & Monster;\r\n    combat: Combat;\r\n    selected: boolean;\r\n    select: (combatant: Combatant & Monster) => void;\r\n}\r\n\r\nclass MonsterRow extends React.Component<MonsterRowProps> {\r\n    private getInformationText() {\r\n        if (this.props.combatant.current) {\r\n            return 'current turn';\r\n        }\r\n\r\n        if (this.props.selected) {\r\n            return 'selected';\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private onClick(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (!this.props.combatant.current && !this.props.selected && this.props.select) {\r\n            this.props.select(this.props.combatant);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'combatant-row ' + this.props.combatant.type;\r\n        if (this.props.combatant.current || this.props.selected) {\r\n            style += ' highlight';\r\n        }\r\n\r\n        let hp = (this.props.combatant.hp ? this.props.combatant.hp : 0).toString();\r\n        if (this.props.combatant.hpTemp > 0) {\r\n            hp += '+' + this.props.combatant.hpTemp;\r\n        }\r\n\r\n        let gauge = null;\r\n        if (!this.props.combatant.pending) {\r\n            gauge = (\r\n                <HitPointGauge combatant={this.props.combatant} />\r\n            );\r\n        }\r\n\r\n        let conditions = null;\r\n        if (this.props.combatant.conditions) {\r\n            conditions = this.props.combatant.conditions.map(c => {\r\n                let name = c.name;\r\n                if (c.name === 'exhaustion') {\r\n                    name += ' (' + c.level + ')';\r\n                }\r\n                if ((c.name === 'custom') && (c.text)) {\r\n                    name = c.text;\r\n                }\r\n                if (c.duration) {\r\n                    name += ' ' + Utils.conditionDurationText(c, this.props.combat);\r\n                }\r\n                const description = [];\r\n                const text = Utils.conditionText(c);\r\n                for (let n = 0; n !== text.length; ++n) {\r\n                    description.push(<li key={n} className='condition-text'>{text[n]}</li>);\r\n                }\r\n                return (\r\n                    <Note\r\n                        key={c.id}\r\n                        white={true}\r\n                        content={\r\n                            <div className='condition'>\r\n                                <div className='condition-name'>{name}</div>\r\n                                <ul>\r\n                                    {description}\r\n                                </ul>\r\n                            </div>\r\n                        }\r\n                    />\r\n                );\r\n            });\r\n        }\r\n\r\n        const notes = [];\r\n        if (this.props.combat.map) {\r\n            if (!this.props.combatant.pending && !this.props.combat.map.items.find(i => i.id === this.props.combatant.id)) {\r\n                notes.push(\r\n                    <Note key='not-on-map' white={true} content='not on the map' />\r\n                );\r\n            }\r\n        }\r\n        this.props.combatant.tags.forEach(tag => {\r\n            notes.push(\r\n                <Note key={tag} white={true} content={Utils.getTagDescription(tag)} />\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div className={style} onClick={e => this.onClick(e)}>\r\n                <div className='name'>\r\n                    {this.props.combatant.displayName || this.props.combatant.name || 'combatant'}\r\n                    <span className='info'>{this.getInformationText()}</span>\r\n                </div>\r\n                <div className='content'>\r\n                    <div className='section key-stats'>\r\n                        <div className='key-stat'>\r\n                            <div className='stat-label'>ac</div>\r\n                            <div className='stat-value'>{this.props.combatant.ac}</div>\r\n                        </div>\r\n                        <div className='key-stat'>\r\n                            <div className='stat-value'>{hp}</div>\r\n                            <div className='stat-label'>hp</div>\r\n                        </div>\r\n                    </div>\r\n                    {gauge}\r\n                    {conditions}\r\n                    {notes}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { CATEGORY_TYPES, SIZE_TYPES } from '../../models/monster-group';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport Spin from '../controls/spin';\r\n\r\nimport arrow from '../../resources/images/down-arrow.svg';\r\n\r\ninterface Props {\r\n    filter: {\r\n        name: string,\r\n        challengeMin: number;\r\n        challengeMax: number;\r\n        category: string;\r\n        size: string;\r\n    };\r\n    changeValue: (type: 'name' | 'challengeMin' | 'challengeMax' | 'category' | 'size', value: any) => void;\r\n    nudgeValue: (type: 'challengeMin' | 'challengeMax', delta: number) => void;\r\n    resetFilter: () => void;\r\n}\r\n\r\ninterface State {\r\n    showAll: boolean;\r\n}\r\n\r\nexport default class FilterCard extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showAll: false\r\n        };\r\n    }\r\n\r\n    private toggleAll() {\r\n        this.setState({\r\n            showAll: !this.state.showAll\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const sizes = ['all sizes'].concat(SIZE_TYPES);\r\n            const sizeOptions = sizes.map(size => ({ id: size, text: size }));\r\n\r\n            const categories = ['all types'].concat(CATEGORY_TYPES);\r\n            const catOptions = categories.map(cat => ({ id: cat, text: cat }));\r\n\r\n            let content = null;\r\n            if (this.state.showAll) {\r\n                content = (\r\n                    <div>\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='name'\r\n                                value={this.props.filter.name}\r\n                                onChange={event => this.props.changeValue('name', event.target.value)}\r\n                            />\r\n                        </div>\r\n                        <Spin\r\n                            source={this.props.filter}\r\n                            name='challengeMin'\r\n                            label='min cr'\r\n                            display={value => Utils.challenge(value)}\r\n                            nudgeValue={delta => this.props.nudgeValue('challengeMin', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.filter}\r\n                            name='challengeMax'\r\n                            label='max cr'\r\n                            display={value => Utils.challenge(value)}\r\n                            nudgeValue={delta => this.props.nudgeValue('challengeMax', delta)}\r\n                        />\r\n                        <Dropdown\r\n                            options={sizeOptions}\r\n                            placeholder='filter by size...'\r\n                            selectedID={this.props.filter.size}\r\n                            select={optionID => this.props.changeValue('size', optionID)}\r\n                        />\r\n                        <Dropdown\r\n                            options={catOptions}\r\n                            placeholder='filter by type...'\r\n                            selectedID={this.props.filter.category}\r\n                            select={optionID => this.props.changeValue('category', optionID)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <div className='section'>\r\n                            <button onClick={() => this.props.resetFilter()}>clear filter</button>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                let summary = '';\r\n                if (this.props.filter.size !== 'all sizes') {\r\n                    summary += summary ? ' ' + this.props.filter.size : this.props.filter.size;\r\n                }\r\n                if (this.props.filter.category !== 'all types') {\r\n                    summary += summary ? ' ' + this.props.filter.category : this.props.filter.category;\r\n                }\r\n                summary += ' monsters of cr ' + Utils.challenge(this.props.filter.challengeMin) + ' to ' + Utils.challenge(this.props.filter.challengeMax);\r\n\r\n                content = (\r\n                    <div>\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='name'\r\n                                value={this.props.filter.name}\r\n                                onChange={event => this.props.changeValue('name', event.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div className='section'>showing {summary}</div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='card'>\r\n                    <div className='heading'>\r\n                        <div className='title'>filter</div>\r\n                        <img className={this.state.showAll ? 'image rotate' : 'image'} src={arrow} alt='arrow' onClick={() => this.toggleAll()} />\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        {content}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { EncounterWave } from '../../models/encounter';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport InfoCard from './info-card';\r\n\r\ninterface Props {\r\n    wave: EncounterWave;\r\n    changeValue: (wave: EncounterWave, field: string, value: string) => void;\r\n    removeWave: (wave: EncounterWave) => void;\r\n}\r\n\r\nexport default class WaveCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const heading = (\r\n                <div className='heading'>\r\n                    <div className='title'>wave</div>\r\n                </div>\r\n            );\r\n\r\n            const content = (\r\n                <div>\r\n                    <div className='section'>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='wave name'\r\n                            value={this.props.wave.name}\r\n                            onChange={event => this.props.changeValue(this.props.wave, 'name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <ConfirmButton text='delete wave' callback={() => this.props.removeWave(this.props.wave)} />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            return (\r\n                <InfoCard heading={heading} content={content} />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Encounter } from '../../models/encounter';\r\n\r\ninterface Props {\r\n    encounter: Encounter;\r\n    selected: boolean;\r\n    setSelection: (encounter: Encounter) => void;\r\n}\r\n\r\nexport default class EncounterListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const slots = [];\r\n\r\n            this.props.encounter.slots.forEach(slot => {\r\n                let text = slot.monsterName || 'unnamed monster';\r\n                if (slot.count > 1) {\r\n                    text += ' x' + slot.count;\r\n                }\r\n                slots.push(<div key={slot.id} className='text'>{text}</div>);\r\n            });\r\n\r\n            if (slots.length === 0) {\r\n                slots.push(<div key='empty' className='text'>no monsters</div>);\r\n            }\r\n\r\n            this.props.encounter.waves.forEach(wave => {\r\n                slots.push(<div key={'name ' + wave.id} className='text subheading'>{wave.name || 'unnamed wave'}</div>);\r\n                wave.slots.forEach(slot => {\r\n                    let text = slot.monsterName || 'unnamed monster';\r\n                    if (slot.count > 1) {\r\n                        text += ' x' + slot.count;\r\n                    }\r\n                    slots.push(<div key={slot.id} className='text'>{text}</div>);\r\n                });\r\n                if (slots.length === 0) {\r\n                    slots.push(<div key={'empty ' + wave.id} className='text'>no monsters</div>);\r\n                }\r\n            });\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.encounter)}>\r\n                    <div className='heading'>{this.props.encounter.name || 'unnamed encounter'}</div>\r\n                    {slots}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Encounter, EncounterSlot } from '../../models/encounter';\r\nimport { Monster } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\ninterface Props {\r\n    encounter: Encounter;\r\n    party: Party | null;\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n}\r\n\r\nexport default class DifficultyChartPanel extends React.Component<Props> {\r\n    public render() {\r\n        let monsterCount = 0;\r\n        let monsterXp = 0;\r\n        let slots: EncounterSlot[] = [];\r\n        slots = slots.concat(this.props.encounter.slots);\r\n        this.props.encounter.waves.forEach(wave => {\r\n            slots = slots.concat(wave.slots);\r\n        });\r\n        slots.forEach(slot => {\r\n            monsterCount += slot.count;\r\n            const monster = this.props.getMonster(slot.monsterName, slot.monsterGroupName);\r\n            if (monster) {\r\n                monsterXp += Utils.experience(monster.challenge) * slot.count;\r\n            }\r\n        });\r\n\r\n        const adjustedXp = monsterXp * Utils.experienceFactor(monsterCount);\r\n\r\n        let xpThresholds;\r\n        let diffSection;\r\n        if (this.props.party) {\r\n            let xpEasy = 0;\r\n            let xpMedium = 0;\r\n            let xpHard = 0;\r\n            let xpDeadly = 0;\r\n\r\n            const pcs = this.props.party.pcs.filter(pc => pc.active);\r\n            pcs.forEach(pc => {\r\n                xpEasy += Utils.pcExperience(pc.level, 'easy');\r\n                xpMedium += Utils.pcExperience(pc.level, 'medium');\r\n                xpHard += Utils.pcExperience(pc.level, 'hard');\r\n                xpDeadly += Utils.pcExperience(pc.level, 'deadly');\r\n            });\r\n\r\n            let difficulty = null;\r\n            let adjustedDifficulty = null;\r\n            if (adjustedXp > 0) {\r\n                difficulty = 'trivial';\r\n                if (adjustedXp >= xpEasy) {\r\n                    difficulty = 'easy';\r\n                }\r\n                if (adjustedXp >= xpMedium) {\r\n                    difficulty = 'medium';\r\n                }\r\n                if (adjustedXp >= xpHard) {\r\n                    difficulty = 'hard';\r\n                }\r\n                if (adjustedXp >= xpDeadly) {\r\n                    difficulty = 'deadly';\r\n                }\r\n                adjustedDifficulty = difficulty;\r\n\r\n                if ((pcs.length < 3) || (pcs.length > 5)) {\r\n                    const small = pcs.length < 3;\r\n                    switch (difficulty) {\r\n                        case 'trivial':\r\n                            adjustedDifficulty = small ? 'easy' : 'trivial';\r\n                            break;\r\n                        case 'easy':\r\n                            adjustedDifficulty = small ? 'medium' : 'trivial';\r\n                            break;\r\n                        case 'medium':\r\n                            adjustedDifficulty = small ? 'hard' : 'easy';\r\n                            break;\r\n                        case 'hard':\r\n                            adjustedDifficulty = small ? 'deadly' : 'medium';\r\n                            break;\r\n                        case 'deadly':\r\n                            adjustedDifficulty = small ? 'deadly' : 'hard';\r\n                            break;\r\n                        default:\r\n                            adjustedDifficulty = '';\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            xpThresholds = (\r\n                <div className='table'>\r\n                    <div>\r\n                        <div className='cell four'><b>easy</b></div>\r\n                        <div className='cell four'><b>medium</b></div>\r\n                        <div className='cell four'><b>hard</b></div>\r\n                        <div className='cell four'><b>deadly</b></div>\r\n                    </div>\r\n                    <div>\r\n                        <div className='cell four'>{xpEasy} xp</div>\r\n                        <div className='cell four'>{xpMedium} xp</div>\r\n                        <div className='cell four'>{xpHard} xp</div>\r\n                        <div className='cell four'>{xpDeadly} xp</div>\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            const getLeft = (xp: number) => {\r\n                const max = Math.max(adjustedXp, (xpDeadly * 1.2));\r\n                return (100 * xp) / max;\r\n            };\r\n\r\n            const getRight = (xp: number) => {\r\n                return 100 - getLeft(xp);\r\n            };\r\n\r\n            diffSection = (\r\n                <div>\r\n                    <div className='difficulty-gauge'>\r\n                        <div className='bar-container'>\r\n                            <div className='bar trivial' style={{ left: '0', right: getRight(xpEasy) + '%' }} />\r\n                        </div>\r\n                        <div className='bar-container'>\r\n                            <div className='bar easy' style={{ left: getLeft(xpEasy) + '%', right: getRight(xpMedium) + '%' }} />\r\n                        </div>\r\n                        <div className='bar-container'>\r\n                            <div className='bar medium' style={{ left: getLeft(xpMedium) + '%', right: getRight(xpHard) + '%' }} />\r\n                        </div>\r\n                        <div className='bar-container'>\r\n                            <div className='bar hard' style={{ left: getLeft(xpHard) + '%', right: getRight(xpDeadly) + '%' }} />\r\n                        </div>\r\n                        <div className='bar-container'>\r\n                            <div className='bar deadly' style={{ left: getLeft(xpDeadly) + '%', right: '0' }} />\r\n                        </div>\r\n                        <div className='encounter-container'>\r\n                            <div className='encounter' style={{ left: (getLeft(adjustedXp) - 0.5) + '%' }} />\r\n                        </div>\r\n                    </div>\r\n                    <div className='subheading'>difficulty</div>\r\n                    <div className='section'>\r\n                        difficulty for this party\r\n                        <div className='right'>{difficulty}</div>\r\n                    </div>\r\n                    <div className='section' style={{ display: (adjustedDifficulty === difficulty) ? 'none' : ''}}>\r\n                        effective difficulty for {pcs.length} pc(s)\r\n                        <div className='right'><b>{adjustedDifficulty}</b></div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='subheading'>xp value</div>\r\n                <div className='section'>\r\n                    xp for this encounter\r\n                    <div className='right'>{monsterXp} xp</div>\r\n                </div>\r\n                <div className='section' style={{ display: (adjustedXp === monsterXp) ? 'none' : ''}}>\r\n                    effective xp for {monsterCount} monster(s)\r\n                    <div className='right'>{adjustedXp} xp</div>\r\n                </div>\r\n                {xpThresholds}\r\n                {diffSection}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Encounter, EncounterSlot, EncounterWave } from '../../models/encounter';\r\nimport { Monster, MonsterGroup } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\nimport FilterCard from '../cards/filter-card';\r\nimport MonsterCard from '../cards/monster-card';\r\nimport WaveCard from '../cards/wave-card';\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport Dropdown from '../controls/dropdown';\r\nimport EncounterListItem from '../list-items/encounter-list-item';\r\nimport CardGroup from '../panels/card-group';\r\nimport DifficultyChartPanel from '../panels/difficulty-chart-panel';\r\nimport Note from '../panels/note';\r\n\r\ninterface Props {\r\n    encounters: Encounter[];\r\n    selection: Encounter | null;\r\n    parties: Party[];\r\n    library: MonsterGroup[];\r\n    filter: string;\r\n    selectEncounter: (encounter: Encounter | null) => void;\r\n    addEncounter: () => void;\r\n    removeEncounter: () => void;\r\n    addEncounterSlot: (monster: Monster, waveID: string | null) => void;\r\n    removeEncounterSlot: (encounterSlot: EncounterSlot, waveID: string | null) => void;\r\n    addWave: () => void;\r\n    removeWave: (wave: EncounterWave) => void;\r\n    changeValue: (source: any, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, value: number) => void;\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n}\r\n\r\ninterface State {\r\n    filter: {\r\n        name: string,\r\n        challengeMin: number;\r\n        challengeMax: number;\r\n        category: string;\r\n        size: string;\r\n    };\r\n}\r\n\r\nexport default class EncounterBuilderScreen extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            filter: {\r\n                name: '',\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: 'all types',\r\n                size: 'all sizes'\r\n            }\r\n        };\r\n    }\r\n\r\n    private matchMonster(monster: Monster) {\r\n        if (monster.challenge < this.state.filter.challengeMin) {\r\n            return false;\r\n        }\r\n\r\n        if (monster.challenge > this.state.filter.challengeMax) {\r\n            return false;\r\n        }\r\n\r\n        if (this.state.filter.name !== '') {\r\n            if (!Utils.match(this.state.filter.name, monster.name)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.filter.category !== 'all types') {\r\n            if (monster.category !== this.state.filter.category) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.filter.size !== 'all sizes') {\r\n            if (monster.size !== this.state.filter.size) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private changeFilterValue(type: 'name' | 'challengeMin' | 'challengeMax' | 'category' | 'size', value: any) {\r\n        // eslint-disable-next-line\r\n        this.state.filter[type] = value;\r\n        this.setState({\r\n            filter: this.state.filter\r\n        });\r\n    }\r\n\r\n    private nudgeFilterValue(type: 'challengeMin' | 'challengeMax', delta: number) {\r\n        const value = Utils.nudgeChallenge(this.state.filter[type], delta);\r\n        this.changeFilterValue(type, value);\r\n    }\r\n\r\n    private resetFilter() {\r\n        this.setState({\r\n            filter: {\r\n                name: '',\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: 'all types',\r\n                size: 'all sizes'\r\n            }\r\n        });\r\n    }\r\n\r\n    private getMonsterCards(slots: EncounterSlot[], waveID: string | null) {\r\n        const cards = [];\r\n\r\n        slots.forEach(slot => {\r\n            const monster = this.props.getMonster(slot.monsterName, slot.monsterGroupName);\r\n            if (monster) {\r\n                cards.push(\r\n                    <div className='column' key={monster.id}>\r\n                        <MonsterCard\r\n                            combatant={monster}\r\n                            slot={slot}\r\n                            encounter={this.props.selection as Encounter}\r\n                            mode={'view encounter'}\r\n                            nudgeValue={(source, type, delta) => this.props.nudgeValue(source, type, delta)}\r\n                            removeEncounterSlot={source => this.props.removeEncounterSlot(source, waveID)}\r\n                        />\r\n                    </div>\r\n                );\r\n            } else {\r\n                const index = slots.indexOf(slot);\r\n                const error = 'unknown monster: ' + slot.monsterName + ' in group ' + slot.monsterGroupName;\r\n                cards.push(\r\n                    <div className='column' key={index}>\r\n                        <div className='card error'>\r\n                            <div className='card-content'>\r\n                                <div className='section'>\r\n                                    {error}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n        });\r\n\r\n        if (slots.length === 0) {\r\n            cards.push(\r\n                <div className='column' key='empty'>\r\n                    <Note content={<div className='section'>there are no monsters in this {waveID ? 'wave' : 'encounter'}</div>} />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return cards;\r\n    }\r\n\r\n    private getLibrarySection() {\r\n        if (!this.props.selection) {\r\n            return null;\r\n        }\r\n\r\n        const libraryCards = [];\r\n        libraryCards.push(\r\n            <div className='column' key='filter'>\r\n                <FilterCard\r\n                    filter={this.state.filter}\r\n                    changeValue={(type, value) => this.changeFilterValue(type, value)}\r\n                    nudgeValue={(type, delta) => this.nudgeFilterValue(type, delta)}\r\n                    resetFilter={() => this.resetFilter()}\r\n                />\r\n            </div>\r\n        );\r\n\r\n        const monsters: Monster[] = [];\r\n        if (this.props.selection) {\r\n            this.props.library.forEach(group => {\r\n                group.monsters.forEach(monster => {\r\n                    if (this.matchMonster(monster)) {\r\n                        monsters.push(monster);\r\n                    }\r\n                });\r\n            });\r\n            monsters.sort((a, b) => {\r\n                if (a.name < b.name) { return -1; }\r\n                if (a.name > b.name) { return 1; }\r\n                return 0;\r\n            });\r\n        }\r\n        monsters.forEach(monster => {\r\n            libraryCards.push(\r\n                <div className='column' key={monster.id}>\r\n                    <MonsterCard\r\n                        key={monster.id}\r\n                        combatant={monster}\r\n                        encounter={this.props.selection as Encounter}\r\n                        library={this.props.library}\r\n                        mode={'view encounter'}\r\n                        addEncounterSlot={(combatant, waveID) => this.props.addEncounterSlot(combatant, waveID)}\r\n                    />\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <CardGroup\r\n                heading='monster library'\r\n                content={libraryCards}\r\n                showToggle={true}\r\n            />\r\n        );\r\n    }\r\n\r\n    private showEncounter(enc: Encounter) {\r\n        return Utils.match(this.props.filter, enc.name);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let leftColumn = null;\r\n            if (this.props.selection) {\r\n                leftColumn = (\r\n                    <div>\r\n                        <EncounterInfo\r\n                            selection={this.props.selection}\r\n                            parties={this.props.parties}\r\n                            filter={this.props.filter}\r\n                            changeValue={(type, value) => this.props.changeValue(this.props.selection, type, value)}\r\n                            addWave={() => this.props.addWave()}\r\n                            removeEncounter={() => this.props.removeEncounter()}\r\n                            getMonster={(monsterName, monsterGroupName) => this.props.getMonster(monsterName, monsterGroupName)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <button onClick={() => this.props.selectEncounter(null)}>&larr; back to list</button>\r\n                    </div>\r\n                );\r\n            } else {\r\n                let listItems = this.props.encounters.filter(e => this.showEncounter(e)).map(e => {\r\n                    return (\r\n                        <EncounterListItem\r\n                            key={e.id}\r\n                            encounter={e}\r\n                            selected={e === this.props.selection}\r\n                            setSelection={encounter => this.props.selectEncounter(encounter)}\r\n                        />\r\n                    );\r\n                });\r\n                if (listItems.length === 0) {\r\n                    listItems = [(\r\n                        <Note\r\n                            key='empty'\r\n                            content={'you have not defined any encounters yet'}\r\n                        />\r\n                    )];\r\n                }\r\n\r\n                leftColumn = (\r\n                    <div>\r\n                        <button onClick={() => this.props.addEncounter()}>add a new encounter</button>\r\n                        <div className='divider' />\r\n                        {listItems}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            let encounterName;\r\n            const encounterCards: JSX.Element[] = [];\r\n            let waves: JSX.Element[] = [];\r\n\r\n            if (this.props.selection) {\r\n                encounterName = this.props.selection.name || 'unnamed encounter';\r\n\r\n                this.getMonsterCards(this.props.selection.slots, null)\r\n                    .forEach(card => encounterCards.push(card));\r\n\r\n                waves = this.props.selection.waves.map(w => {\r\n                    const waveCards = [];\r\n                    waveCards.push(\r\n                        <div className='column' key='info'>\r\n                            <WaveCard\r\n                                wave={w}\r\n                                removeWave={wave => this.props.removeWave(wave)}\r\n                                changeValue={(source, field, value) => this.props.changeValue(source, field, value)}\r\n                            />\r\n                        </div>\r\n                    );\r\n\r\n                    this.getMonsterCards(w.slots, w.id)\r\n                        .forEach(card => waveCards.push(card));\r\n\r\n                    return (\r\n                        <CardGroup\r\n                            key={w.id}\r\n                            heading={w.name || 'unnamed wave'}\r\n                            content={waveCards}\r\n                            showToggle={true}\r\n                        />\r\n                    );\r\n                });\r\n            }\r\n\r\n            let watermark;\r\n            if (!this.props.selection) {\r\n                watermark = (\r\n                    <div className='vertical-center-outer'>\r\n                        <div className='vertical-center-middle'>\r\n                            <div className='vertical-center-inner'>\r\n                                <HelpCard encounters={this.props.encounters} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='encounter-builder row collapse'>\r\n                    <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                        {leftColumn}\r\n                    </div>\r\n                    <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                        <CardGroup\r\n                            content={encounterCards}\r\n                            heading={encounterName}\r\n                            hidden={!this.props.selection}\r\n                        />\r\n                        {waves}\r\n                        {this.getLibrarySection()}\r\n                        {watermark}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface HelpCardProps {\r\n    encounters: Encounter[];\r\n}\r\n\r\nclass HelpCard extends React.Component<HelpCardProps> {\r\n    public render() {\r\n        try {\r\n            let action: JSX.Element | null = null;\r\n            if (this.props.encounters.length === 0) {\r\n                action = (\r\n                    <div className='section'>to start building an encounter, press the <b>add a new encounter</b> button</div>\r\n                );\r\n            } else {\r\n                action = (\r\n                    <div>\r\n                        <div className='section'>on the left you will see a list of encounters that you have created</div>\r\n                        <div className='section'>select an encounter from the list to add monsters to it</div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <Note\r\n                    content={\r\n                        <div>\r\n                            <div className='section'>on this page you can set up encounters</div>\r\n                            <div className='section'>\r\n                                when you have created an encounter you can add monsters to it, then gauge its difficulty for a party of pcs\r\n                            </div>\r\n                            <div className='divider'/>\r\n                            {action}\r\n                        </div>\r\n                    }\r\n                />\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n\r\ninterface EncounterInfoProps {\r\n    selection: Encounter;\r\n    parties: Party[];\r\n    filter: string;\r\n    changeValue: (field: string, value: string) => void;\r\n    addWave: () => void;\r\n    removeEncounter: () => void;\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n}\r\n\r\ninterface EncounterInfoState {\r\n    party: Party | null;\r\n}\r\n\r\nclass EncounterInfo extends React.Component<EncounterInfoProps, EncounterInfoState> {\r\n    constructor(props: EncounterInfoProps) {\r\n        super(props);\r\n        this.state = {\r\n            party: null\r\n        };\r\n    }\r\n\r\n    private selectParty(partyID: string) {\r\n        const party = this.props.parties.find(p => p.id === partyID);\r\n        this.setState({\r\n            party: party as Party\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const partyOptions = [];\r\n            if (this.props.parties) {\r\n                for (let n = 0; n !== this.props.parties.length; ++n) {\r\n                    const party = this.props.parties[n];\r\n                    partyOptions.push({\r\n                        id: party.id,\r\n                        text: party.name\r\n                    });\r\n                }\r\n            }\r\n\r\n            return (\r\n                <div>\r\n                    <div className='section'>\r\n                        <div className='subheading'>encounter name</div>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='encounter name'\r\n                            value={this.props.selection.name}\r\n                            disabled={!!this.props.filter}\r\n                            onChange={event => this.props.changeValue('name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <Dropdown\r\n                        options={partyOptions}\r\n                        placeholder='select party...'\r\n                        selectedID={this.state.party ? this.state.party.id : undefined}\r\n                        select={optionID => this.selectParty(optionID)}\r\n                    />\r\n                    <DifficultyChartPanel\r\n                        encounter={this.props.selection}\r\n                        party={this.state.party}\r\n                        getMonster={(monsterName, monsterGroupName) => this.props.getMonster(monsterName, monsterGroupName)}\r\n                    />\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.addWave()}>add a new wave</button>\r\n                        <ConfirmButton text='delete encounter' callback={() => this.props.removeEncounter()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    content: string | JSX.Element | JSX.Element[];\r\n}\r\n\r\nexport default class Readaloud extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div className='readaloud'>\r\n                    {this.props.content}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { MonsterGroup } from '../../models/monster-group';\r\n\r\nimport Readaloud from '../panels/readaloud';\r\n\r\ninterface Props {\r\n    library: MonsterGroup[];\r\n    addOpenGameContent: () => void;\r\n}\r\n\r\nexport default class HomeScreen extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            let monsters = null;\r\n            if (this.props.library.length === 0) {\r\n                monsters = (\r\n                    <div>\r\n                        <div className='divider' />\r\n                        <div className='text'>\r\n                            since your collection of monsters is empty, you might want to start by pressing the button below to add monsters from the&nbsp;\r\n                            <a href='http://dnd.wizards.com/articles/features/systems-reference-document-srd' target='_blank' rel='noopener noreferrer'>\r\n                                system reference document\r\n                            </a>\r\n                        </div>\r\n                        <div className='text'>\r\n                            <button onClick={() => this.props.addOpenGameContent()}>add monsters</button>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            const content = (\r\n                <Readaloud\r\n                    content={(\r\n                        <div>\r\n                            <div className='heading'>welcome to <b>dojo</b></div>\r\n                            <div className='divider' />\r\n                            <div className='section'>\r\n                                <b>dojo</b> is an app for dms of dungeons and dragons fifth edition\r\n                            </div>\r\n                            <div className='section'>\r\n                                with <b>dojo</b> you can:\r\n                                <ul>\r\n                                    <li>build unique, challenging monsters</li>\r\n                                    <li>create encounters of just the right difficulty for your players</li>\r\n                                    <li>design intricate tactical maps</li>\r\n                                    <li>run combat without the book-keeping</li>\r\n                                </ul>\r\n                            </div>\r\n                            {monsters}\r\n                            <div className='divider' />\r\n                            <div className='section'>\r\n                                use the buttons at the bottom of the screen to access the app's features\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                />\r\n            );\r\n\r\n            return (\r\n                <div className='home scrollable'>\r\n                    <div className='vertical-center-outer'>\r\n                        <div className='vertical-center-middle'>\r\n                            <div className='vertical-center-inner'>\r\n                                {content}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Map } from '../../models/map-folio';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    map: Map;\r\n    changeValue: (map: Map, field: string, value: string) => void;\r\n    editMap: (map: Map) => void;\r\n    removeMap: (map: Map) => void;\r\n}\r\n\r\nexport default class MapCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div className='card map'>\r\n                    <div className='heading'>\r\n                        <div className='title'>{this.props.map.name || 'unnamed map'}</div>\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='map name'\r\n                                value={this.props.map.name}\r\n                                onChange={event => this.props.changeValue(this.props.map, 'name', event.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='section centered'>\r\n                            <MapPanel\r\n                                map={this.props.map}\r\n                                mode='thumbnail'\r\n                            />\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='section'>\r\n                            <button onClick={() => this.props.editMap(this.props.map)}>edit map</button>\r\n                            <ConfirmButton text='delete map' callback={() => this.props.removeMap(this.props.map)} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { MapFolio } from '../../models/map-folio';\r\n\r\ninterface Props {\r\n    mapFolio: MapFolio;\r\n    selected: boolean;\r\n    filter: string;\r\n    setSelection: (mapFolio: MapFolio) => void;\r\n}\r\n\r\nexport default class MapFolioListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const matchFolio = Utils.match(this.props.filter, this.props.mapFolio.name);\r\n\r\n            const maps = [];\r\n            for (let n = 0; n !== this.props.mapFolio.maps.length; ++n) {\r\n                const map = this.props.mapFolio.maps[n];\r\n                const name = map.name || 'unnamed map';\r\n                if (matchFolio || Utils.match(this.props.filter, name)) {\r\n                    maps.push(<div key={map.id} className='text'>{name}</div>);\r\n                }\r\n            }\r\n            if (maps.length === 0) {\r\n                maps.push(<div key='empty' className='text'>no maps</div>);\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.mapFolio)}>\r\n                    <div className='heading'>{this.props.mapFolio.name || 'unnamed folio'}</div>\r\n                    {maps}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Map, MapFolio } from '../../models/map-folio';\r\n\r\nimport MapCard from '../cards/map-card';\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport MapFolioListItem from '../list-items/map-folio-list-item';\r\nimport CardGroup from '../panels/card-group';\r\nimport Note from '../panels/note';\r\n\r\ninterface Props {\r\n    mapFolios: MapFolio[];\r\n    selection: MapFolio | null;\r\n    filter: string;\r\n    selectMapFolio: (mapFolio: MapFolio | null) => void;\r\n    addMapFolio: () => void;\r\n    removeMapFolio: () => void;\r\n    addMap: () => void;\r\n    editMap: (map: Map) => void;\r\n    removeMap: (map: Map) => void;\r\n    changeValue: (source: {}, field: string, value: any) => void;\r\n}\r\n\r\nexport default class MapFoliosScreen extends React.Component<Props> {\r\n    private showMapFolio(folio: MapFolio) {\r\n        let result = Utils.match(this.props.filter, folio.name);\r\n\r\n        if (!result) {\r\n            folio.maps.forEach(map => {\r\n                result = Utils.match(this.props.filter, map.name) || result;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let leftColumn = null;\r\n            if (this.props.selection) {\r\n                leftColumn = (\r\n                    <div>\r\n                        <MapFolioInfo\r\n                            selection={this.props.selection}\r\n                            filter={this.props.filter}\r\n                            addMap={() => this.props.addMap()}\r\n                            removeMapFolio={() => this.props.removeMapFolio()}\r\n                            changeValue={(source, field, value) => this.props.changeValue(source, field, value)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <button onClick={() => this.props.selectMapFolio(null)}>&larr; back to list</button>\r\n                    </div>\r\n                );\r\n            } else {\r\n                let listItems = this.props.mapFolios.filter(f => this.showMapFolio(f)).map(mapFolio => {\r\n                    return (\r\n                        <MapFolioListItem\r\n                            key={mapFolio.id}\r\n                            mapFolio={mapFolio}\r\n                            filter={this.props.filter}\r\n                            selected={mapFolio === this.props.selection}\r\n                            setSelection={f => this.props.selectMapFolio(f)}\r\n                        />\r\n                    );\r\n                });\r\n                if (listItems.length === 0) {\r\n                    listItems = [(\r\n                        <Note\r\n                            key='empty'\r\n                            content={'you have not set up any tactical maps yet'}\r\n                        />\r\n                    )];\r\n                }\r\n\r\n                leftColumn = (\r\n                    <div>\r\n                        <button onClick={() => this.props.addMapFolio()}>add a new map folio</button>\r\n                        <div className='divider' />\r\n                        {listItems}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            let folio = null;\r\n            if (this.props.selection) {\r\n                const folioCards = [];\r\n\r\n                this.props.selection.maps.filter(m => Utils.match(this.props.filter, m.name)).forEach(m => {\r\n                    folioCards.push(\r\n                        <div className='column' key={m.id}>\r\n                            <MapCard\r\n                                map={m}\r\n                                editMap={map => this.props.editMap(map)}\r\n                                removeMap={map => this.props.removeMap(map)}\r\n                                changeValue={(source, type, value) => this.props.changeValue(source, type, value)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                if (folioCards.length === 0) {\r\n                    folioCards.push(\r\n                        <div className='column' key='empty'>\r\n                            <Note content={<div className='section'>there are no maps in this folio</div>} />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                folio = (\r\n                    <CardGroup\r\n                        content={folioCards}\r\n                        heading={this.props.selection.name || 'unnamed folio'}\r\n                    />\r\n                );\r\n            }\r\n\r\n            let watermark;\r\n            if (!this.props.selection) {\r\n                watermark = (\r\n                    <div className='vertical-center-outer'>\r\n                        <div className='vertical-center-middle'>\r\n                            <div className='vertical-center-inner'>\r\n                                <HelpCard mapFolios={this.props.mapFolios} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='map-builder row collapse'>\r\n                    <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                        {leftColumn}\r\n                    </div>\r\n                    <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                        {folio}\r\n                        {watermark}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface HelpCardProps {\r\n    mapFolios: MapFolio[];\r\n}\r\n\r\nclass HelpCard extends React.Component<HelpCardProps> {\r\n    public render() {\r\n        try {\r\n            let action: JSX.Element | null = null;\r\n            if (this.props.mapFolios.length === 0) {\r\n                action = (\r\n                    <div className='section'>to start a new folio, press the <b>add a new map folio</b> button</div>\r\n                );\r\n            } else {\r\n                action = (\r\n                    <div>\r\n                        <div className='section'>on the left you will see a list of map folios</div>\r\n                        <div className='section'>select a folio from the list to see the maps it contains</div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <Note\r\n                    content={\r\n                        <div>\r\n                            <div className='section'>on this page you can set up folios containing tactical maps</div>\r\n                            <div className='section'>when you have created a map you can use it in encounters</div>\r\n                            <div className='divider'/>\r\n                            {action}\r\n                        </div>\r\n                    }\r\n                />\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n\r\ninterface MapFolioInfoProps {\r\n    selection: MapFolio;\r\n    filter: string | null;\r\n    changeValue: (source: MapFolio, field: string, value: string) => void;\r\n    addMap: () => void;\r\n    removeMapFolio: () => void;\r\n}\r\n\r\nclass MapFolioInfo extends React.Component<MapFolioInfoProps> {\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div>\r\n                    <div className='section'>\r\n                        <div className='subheading'>map folio name</div>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='map folio name'\r\n                            value={this.props.selection.name}\r\n                            disabled={!!this.props.filter}\r\n                            onChange={event => this.props.changeValue(this.props.selection, 'name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.addMap()}>add a new map</button>\r\n                        <ConfirmButton text='delete folio' callback={() => this.props.removeMapFolio()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { MonsterGroup } from '../../models/monster-group';\r\n\r\ninterface Props {\r\n    group: MonsterGroup;\r\n    selected: boolean;\r\n    filter: string;\r\n    setSelection: (group: MonsterGroup) => void;\r\n}\r\n\r\nexport default class MonsterGroupListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const matchGroup = Utils.match(this.props.filter, this.props.group.name);\r\n\r\n            const monsters = [];\r\n            for (let n = 0; n !== this.props.group.monsters.length; ++n) {\r\n                const monster = this.props.group.monsters[n];\r\n                const name = monster.name || 'unnamed monster';\r\n                if (matchGroup || Utils.match(this.props.filter, name)) {\r\n                    monsters.push(<div key={monster.id} className='text'>{name}</div>);\r\n                }\r\n            }\r\n            if (monsters.length === 0) {\r\n                monsters.push(<div key='empty' className='text'>no monsters</div>);\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.group)}>\r\n                    <div className='heading'>{this.props.group.name || 'unnamed group'}</div>\r\n                    {monsters}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Monster, MonsterGroup } from '../../models/monster-group';\r\n\r\nimport MonsterCard from '../cards/monster-card';\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport MonsterGroupListItem from '../list-items/monster-group-list-item';\r\nimport CardGroup from '../panels/card-group';\r\nimport Note from '../panels/note';\r\n\r\ninterface Props {\r\n    library: MonsterGroup[];\r\n    selection: MonsterGroup | null;\r\n    filter: string;\r\n    selectMonsterGroup: (group: MonsterGroup | null) => void;\r\n    addMonsterGroup: () => void;\r\n    removeMonsterGroup: () => void;\r\n    addMonster: () => void;\r\n    generateMonster: () => void;\r\n    removeMonster: (monster: Monster) => void;\r\n    editMonster: (monster: Monster) => void;\r\n    cloneMonster: (monster: Monster, name: string) => void;\r\n    sortMonsters: () => void;\r\n    moveToGroup: (monster: Monster, groupID: string) => void;\r\n    changeValue: (source: any, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, value: number) => void;\r\n}\r\n\r\nexport default class MonsterLibraryScreen extends React.Component<Props> {\r\n    private showMonsterGroup(group: MonsterGroup) {\r\n        let result = Utils.match(this.props.filter, group.name);\r\n\r\n        if (!result) {\r\n            group.monsters.forEach(monster => {\r\n                result = Utils.match(this.props.filter, monster.name) || result;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let leftColumn = null;\r\n            if (this.props.selection) {\r\n                leftColumn = (\r\n                    <div>\r\n                        <MonsterInfo\r\n                            selection={this.props.selection}\r\n                            filter={this.props.filter}\r\n                            addMonster={() => this.props.addMonster()}\r\n                            generateMonster={() => this.props.generateMonster()}\r\n                            sortMonsters={() => this.props.sortMonsters()}\r\n                            changeValue={(type, value) => this.props.changeValue(this.props.selection, type, value)}\r\n                            removeMonsterGroup={() => this.props.removeMonsterGroup()}\r\n                        />\r\n                        <div className='divider' />\r\n                        <button onClick={() => this.props.selectMonsterGroup(null)}>&larr; back to list</button>\r\n                    </div>\r\n                );\r\n            } else {\r\n                let listItems = this.props.library.filter(group => this.showMonsterGroup(group)).map(group => {\r\n                    return (\r\n                        <MonsterGroupListItem\r\n                            key={group.id}\r\n                            group={group}\r\n                            filter={this.props.filter}\r\n                            selected={group === this.props.selection}\r\n                            setSelection={grp => this.props.selectMonsterGroup(grp)}\r\n                        />\r\n                    );\r\n                });\r\n                if (listItems.length === 0) {\r\n                    listItems = [(\r\n                        <Note\r\n                            key='empty'\r\n                            content={'you do not have any monsters in your library'}\r\n                        />\r\n                    )];\r\n                }\r\n\r\n                leftColumn = (\r\n                    <div>\r\n                        <button onClick={() => this.props.addMonsterGroup()}>add a new monster group</button>\r\n                        <div className='divider' />\r\n                        {listItems}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            const cards: JSX.Element[] = [];\r\n\r\n            if (this.props.selection) {\r\n                const monsters = this.props.selection.monsters.filter(monster => {\r\n                    return Utils.match(this.props.filter, monster.name);\r\n                });\r\n\r\n                if (monsters.length !== 0) {\r\n                    monsters.forEach(m => {\r\n                        cards.push(\r\n                            <div className='column' key={m.id}>\r\n                                <MonsterCard\r\n                                    combatant={m}\r\n                                    mode={'view editable'}\r\n                                    library={this.props.library}\r\n                                    changeValue={(source, type, value) => this.props.changeValue(source, type, value)}\r\n                                    nudgeValue={(source, type, delta) => this.props.nudgeValue(source, type, delta)}\r\n                                    moveToGroup={(monster, groupID) => this.props.moveToGroup(monster, groupID)}\r\n                                    removeMonster={monster => this.props.removeMonster(monster)}\r\n                                    editMonster={monster => this.props.editMonster(monster)}\r\n                                    cloneMonster={(monster, monsterName) => this.props.cloneMonster(monster, monsterName)}\r\n                                />\r\n                            </div>\r\n                        );\r\n                    });\r\n                } else {\r\n                    cards.push(\r\n                        <div className='column' key='empty'>\r\n                            <Note content={<div className='section'>there are no monsters in this group</div>} />\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n\r\n            let name;\r\n            if (this.props.selection) {\r\n                name = this.props.selection.name;\r\n                if (!name) {\r\n                    name = 'unnamed group';\r\n                }\r\n            }\r\n\r\n            let watermark;\r\n            if (!this.props.selection) {\r\n                watermark = (\r\n                    <div className='vertical-center-outer'>\r\n                        <div className='vertical-center-middle'>\r\n                            <div className='vertical-center-inner'>\r\n                                <HelpCard library={this.props.library} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='monster-library row collapse'>\r\n                    <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                        {leftColumn}\r\n                    </div>\r\n                    <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                        <CardGroup\r\n                            content={cards}\r\n                            heading={name}\r\n                            hidden={!this.props.selection}\r\n                        />\r\n                        {watermark}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface HelpCardProps {\r\n    library: MonsterGroup[];\r\n}\r\n\r\nclass HelpCard extends React.Component<HelpCardProps> {\r\n    public render() {\r\n        let action: JSX.Element | null = null;\r\n        if (this.props.library.length === 0) {\r\n            action = (\r\n                <div className='section'>to start adding monsters, press the <b>add a new monster group</b> button</div>\r\n            );\r\n        } else {\r\n            action = (\r\n                <div>\r\n                    <div className='section'>on the left you will see a list of monster groups</div>\r\n                    <div className='section'>select a monster group from the list to see stat blocks for monsters in that group</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Note\r\n                content={\r\n                    <div>\r\n                        <div className='section'>you can maintain your menagerie of monsters here</div>\r\n                        <div className='divider'/>\r\n                        {action}\r\n                    </div>\r\n                }\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\ninterface MonsterInfoProps {\r\n    selection: MonsterGroup;\r\n    filter: string | null;\r\n    changeValue: (field: string, value: string) => void;\r\n    addMonster: () => void;\r\n    generateMonster: () => void;\r\n    sortMonsters: () => void;\r\n    removeMonsterGroup: () => void;\r\n}\r\n\r\nclass MonsterInfo extends React.Component<MonsterInfoProps> {\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div>\r\n                    <div className='section'>\r\n                        <div className='subheading'>monster group name</div>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='monster group name'\r\n                            value={this.props.selection.name}\r\n                            disabled={!!this.props.filter}\r\n                            onChange={event => this.props.changeValue('name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.addMonster()}>add a new blank monster</button>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.generateMonster()}>generate a random monster</button>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.sortMonsters()}>sort monsters</button>\r\n                        <ConfirmButton text='delete group' callback={() => this.props.removeMonsterGroup()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Party } from '../../models/party';\r\n\r\ninterface Props {\r\n    party: Party;\r\n    selected: boolean;\r\n    filter: string;\r\n    setSelection: (party: Party) => void;\r\n}\r\n\r\nexport default class PartyListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const matchParty = Utils.match(this.props.filter, this.props.party.name);\r\n\r\n            const pcs = [];\r\n            for (let n = 0; n !== this.props.party.pcs.length; ++n) {\r\n                const pc = this.props.party.pcs[n];\r\n                let name = pc.name || 'unnamed pc';\r\n                if (pc.player) {\r\n                    name += ' (' + pc.player + ')';\r\n                }\r\n                if (matchParty || Utils.match(this.props.filter, name)) {\r\n                    pcs.push(<div key={pc.id} className='text'>{name}</div>);\r\n                }\r\n            }\r\n            if (pcs.length === 0) {\r\n                pcs.push(<div key='empty' className='text'>no pcs</div>);\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.party)}>\r\n                    <div className='heading'>{this.props.party.name || 'unnamed party'}</div>\r\n                    {pcs}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Party, PC } from '../../models/party';\r\n\r\nimport PCCard from '../cards/pc-card';\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport PartyListItem from '../list-items/party-list-item';\r\nimport CardGroup from '../panels/card-group';\r\nimport Note from '../panels/note';\r\n\r\ninterface Props {\r\n    parties: Party[];\r\n    selection: Party | null;\r\n    filter: string;\r\n    selectParty: (party: Party | null) => void;\r\n    addParty: () => void;\r\n    removeParty: () => void;\r\n    addPC: () => void;\r\n    editPC: (pc: PC) => void;\r\n    removePC: (pc: PC) => void;\r\n    sortPCs: () => void;\r\n    changeValue: (source: any, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, value: number) => void;\r\n}\r\n\r\nexport default class PartiesScreen extends React.Component<Props> {\r\n    private showParty(party: Party) {\r\n        let result = Utils.match(this.props.filter, party.name);\r\n\r\n        if (!result) {\r\n            party.pcs.forEach(pc => {\r\n                result = Utils.match(this.props.filter, pc.name) || result;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let leftColumn = null;\r\n            if (this.props.selection) {\r\n                leftColumn = (\r\n                    <div>\r\n                        <PartyInfo\r\n                            selection={this.props.selection}\r\n                            filter={this.props.filter}\r\n                            addPC={() => this.props.addPC()}\r\n                            sortPCs={() => this.props.sortPCs()}\r\n                            changeValue={(type, value) => this.props.changeValue(this.props.selection, type, value)}\r\n                            removeParty={() => this.props.removeParty()}\r\n                        />\r\n                        <div className='divider' />\r\n                        <button onClick={() => this.props.selectParty(null)}>&larr; back to list</button>\r\n                    </div>\r\n                );\r\n            } else {\r\n                let listItems = this.props.parties.filter(p => this.showParty(p)).map(p => {\r\n                    return (\r\n                        <PartyListItem\r\n                            key={p.id}\r\n                            party={p}\r\n                            filter={this.props.filter}\r\n                            selected={p === this.props.selection}\r\n                            setSelection={party => this.props.selectParty(party)}\r\n                        />\r\n                    );\r\n                });\r\n                if (listItems.length === 0) {\r\n                    listItems = [(\r\n                        <Note\r\n                            key='empty'\r\n                            content={'you have not set up any parties yet'}\r\n                        />\r\n                    )];\r\n                }\r\n\r\n                leftColumn = (\r\n                    <div>\r\n                        <button onClick={() => this.props.addParty()}>add a new party</button>\r\n                        <div className='divider' />\r\n                        {listItems}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            const activeCards: JSX.Element[] = [];\r\n            const inactiveCards: JSX.Element[] = [];\r\n\r\n            if (this.props.selection) {\r\n                const pcs = this.props.selection.pcs.filter(pc => {\r\n                    return Utils.match(this.props.filter, pc.name);\r\n                });\r\n\r\n                const activePCs = pcs.filter(pc => pc.active);\r\n                activePCs.forEach(activePC => {\r\n                    activeCards.push(\r\n                        <div className='column' key={activePC.id}>\r\n                            <PCCard\r\n                                combatant={activePC}\r\n                                mode={'edit'}\r\n                                changeValue={(pc, type, value) => this.props.changeValue(pc, type, value)}\r\n                                nudgeValue={(pc, type, delta) => this.props.nudgeValue(pc, type, delta)}\r\n                                editPC={pc => this.props.editPC(pc)}\r\n                                removePC={pc => this.props.removePC(pc)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                const inactivePCs = pcs.filter(pc => !pc.active);\r\n                inactivePCs.forEach(inactivePC => {\r\n                    inactiveCards.push(\r\n                        <div className='column' key={inactivePC.id}>\r\n                            <PCCard\r\n                                combatant={inactivePC}\r\n                                mode={'edit'}\r\n                                changeValue={(pc, type, value) => this.props.changeValue(pc, type, value)}\r\n                                nudgeValue={(pc, type, delta) => this.props.nudgeValue(pc, type, delta)}\r\n                                editPC={pc => this.props.editPC(pc)}\r\n                                removePC={pc => this.props.removePC(pc)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                if (activePCs.length === 0) {\r\n                    activeCards.push(\r\n                        <div className='column' key='empty'>\r\n                            <Note content={<div className='section'>there are no pcs in this party</div>} />\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n\r\n            let name;\r\n            if (this.props.selection) {\r\n                name = this.props.selection.name || 'unnamed party';\r\n            }\r\n\r\n            let watermark;\r\n            if (!this.props.selection) {\r\n                watermark = (\r\n                    <div className='vertical-center-outer'>\r\n                        <div className='vertical-center-middle'>\r\n                            <div className='vertical-center-inner'>\r\n                                <HelpCard parties={this.props.parties} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='parties row collapse'>\r\n                    <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                        {leftColumn}\r\n                    </div>\r\n                    <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                        <CardGroup\r\n                            content={activeCards}\r\n                            heading={name}\r\n                            hidden={!this.props.selection}\r\n                        />\r\n                        <CardGroup\r\n                            content={inactiveCards}\r\n                            heading='inactive pcs'\r\n                            hidden={inactiveCards.length === 0}\r\n                        />\r\n                        {watermark}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface HelpCardProps {\r\n    parties: Party[];\r\n}\r\n\r\nclass HelpCard extends React.Component<HelpCardProps> {\r\n    public render() {\r\n        try {\r\n            let action: JSX.Element | null = null;\r\n            if (this.props.parties.length === 0) {\r\n                action = (\r\n                    <div className='section'>to start adding a party, press the <b>add a new party</b> button</div>\r\n                );\r\n            } else {\r\n                action = (\r\n                    <div>\r\n                        <div className='section'>on the left you will see a list of parties that you have created</div>\r\n                        <div className='section'>select a party from the list to see pc details</div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <Note\r\n                    content={\r\n                        <div>\r\n                            <div className='section'>this page is where you can tell dojo all about your pcs</div>\r\n                            <div className='section'>you can add a party for each of your gaming groups</div>\r\n                            <div className='divider'/>\r\n                            {action}\r\n                        </div>\r\n                    }\r\n                />\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n\r\ninterface PartyInfoProps {\r\n    selection: Party;\r\n    filter: string | null;\r\n    changeValue: (field: string, value: string) => void;\r\n    addPC: () => void;\r\n    sortPCs: () => void;\r\n    removeParty: () => void;\r\n}\r\n\r\nclass PartyInfo extends React.Component<PartyInfoProps> {\r\n    public render() {\r\n        try {\r\n            const activePCs = this.props.selection.pcs.filter(pc => pc.active);\r\n\r\n            let summary = null;\r\n\r\n            if (activePCs.length !== 0) {\r\n\r\n                let languages = '';\r\n                let insightSummary = '-';\r\n                let investigationSummary = '-';\r\n                let perceptionSummary = '-';\r\n\r\n                languages = activePCs\r\n                    .map(pc => pc.languages)\r\n                    .join(', ')\r\n                    .split(/[ ,;]+/)\r\n                    .reduce((array: string[], value) => {\r\n                        if (array.indexOf(value) === -1) {\r\n                            array.push(value);\r\n                        }\r\n                        return array;\r\n                    }, [])\r\n                    .sort((a, b) => {\r\n                        if (a === 'Common') {\r\n                            return -1;\r\n                        }\r\n                        if (b === 'Common') {\r\n                            return 1;\r\n                        }\r\n                        return a.localeCompare(b);\r\n                    })\r\n                    .join(', ');\r\n\r\n                const insight: { min: number | null, max: number | null } = { min: null, max: null };\r\n                const invest: { min: number | null, max: number | null } = { min: null, max: null };\r\n                const percep: { min: number | null, max: number | null } = { min: null, max: null };\r\n\r\n                activePCs.forEach(pc => {\r\n                    insight.min = insight.min === null ? pc.passiveInsight : Math.min(insight.min, pc.passiveInsight);\r\n                    insight.max = insight.max === null ? pc.passiveInsight : Math.max(insight.max, pc.passiveInsight);\r\n                    invest.min = invest.min === null ? pc.passiveInvestigation : Math.min(invest.min, pc.passiveInvestigation);\r\n                    invest.max = invest.max === null ? pc.passiveInvestigation : Math.max(invest.max, pc.passiveInvestigation);\r\n                    percep.min = percep.min === null ? pc.passivePerception : Math.min(percep.min, pc.passivePerception);\r\n                    percep.max = percep.max === null ? pc.passivePerception : Math.max(percep.max, pc.passivePerception);\r\n                });\r\n\r\n                insightSummary = insight.min === insight.max ? (insight.min as number).toString() : insight.min + ' - ' + insight.max;\r\n                investigationSummary = invest.min === invest.max ? (invest.min as number).toString() : invest.min + ' - ' + invest.max;\r\n                perceptionSummary = percep.min === percep.max ? (percep.min as number).toString() : percep.min + ' - ' + percep.max;\r\n\r\n                summary = (\r\n                    <div>\r\n                        <div className='section' style={{ display: languages !== '' ? 'block' : 'none' }}>\r\n                            <div className='subheading'>party known languages</div>\r\n                        </div>\r\n                        <div className='section'>\r\n                            {languages}\r\n                        </div>\r\n                        <div className='section'>\r\n                            <div className='subheading'>party passive skills</div>\r\n                        </div>\r\n                        <div className='table'>\r\n                            <div>\r\n                                <div className='cell three'><b>insight</b></div>\r\n                                <div className='cell three'><b>invest.</b></div>\r\n                                <div className='cell three'><b>percep.</b></div>\r\n                            </div>\r\n                            <div>\r\n                                <div className='cell three'>{insightSummary}</div>\r\n                                <div className='cell three'>{investigationSummary}</div>\r\n                                <div className='cell three'>{perceptionSummary}</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div>\r\n                    <div className='section'>\r\n                        <div className='subheading'>party name</div>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='party name'\r\n                            value={this.props.selection.name}\r\n                            disabled={!!this.props.filter}\r\n                            onChange={event => this.props.changeValue('name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    {summary}\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.addPC()}>add a new pc</button>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.sortPCs()}>sort pcs</button>\r\n                        <ConfirmButton text='delete party' callback={() => this.props.removeParty()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport Selector from '../controls/selector';\r\nimport Spin from '../controls/spin';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    //\r\n}\r\n\r\ninterface State {\r\n    dice: string;\r\n    count: number;\r\n    rolls: number[] | null;\r\n    result: number | null;\r\n}\r\n\r\nexport default class DieRollerModule extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            dice: '20',\r\n            count: 1,\r\n            rolls: null,\r\n            result: null\r\n        };\r\n    }\r\n\r\n    private setDice(dice: string) {\r\n        this.setState({\r\n            dice: dice\r\n        });\r\n    }\r\n\r\n    private nudgeCount(delta: number) {\r\n        this.setState({\r\n            count: Math.max(1, this.state.count + delta)\r\n        });\r\n    }\r\n\r\n    private roll() {\r\n        const sides = parseInt(this.state.dice, 10);\r\n\r\n        const rolls: number[] = [];\r\n        for (let n = 0; n !== this.state.count; ++n) {\r\n            rolls.push(Utils.dieRoll(sides));\r\n        }\r\n        rolls.sort((a, b) => a - b);\r\n\r\n        let result = 0;\r\n        rolls.forEach(roll => result += roll);\r\n\r\n        this.setState({\r\n            rolls: rolls,\r\n            result: result\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        const options = [\r\n            {\r\n                id: '4',\r\n                text: 'd4'\r\n            },\r\n            {\r\n                id: '6',\r\n                text: 'd6'\r\n            },\r\n            {\r\n                id: '8',\r\n                text: 'd8'\r\n            },\r\n            {\r\n                id: '10',\r\n                text: 'd10'\r\n            },\r\n            {\r\n                id: '12',\r\n                text: 'd12'\r\n            },\r\n            {\r\n                id: '20',\r\n                text: 'd20'\r\n            },\r\n            {\r\n                id: '100',\r\n                text: 'd100'\r\n            }\r\n        ];\r\n\r\n        let rollsSection = null;\r\n        if (this.state.rolls !== null) {\r\n            rollsSection = (\r\n                <div className='section die-rolls'>{this.state.rolls.join(', ')}</div>\r\n            );\r\n        }\r\n\r\n        let resultSection = null;\r\n        if (this.state.result !== null) {\r\n            resultSection = (\r\n                <div className='section die-result'>{this.state.result}</div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className='die-roller'>\r\n                <div className='subheading'>die type</div>\r\n                <Selector\r\n                    options={options}\r\n                    selectedID={this.state.dice}\r\n                    select={optionID => this.setDice(optionID)}\r\n                />\r\n                <div className='subheading'>number to roll</div>\r\n                <Spin\r\n                    source={this.state}\r\n                    name='count'\r\n                    display={count => count + 'd' + this.state.dice}\r\n                    nudgeValue={delta => this.nudgeCount(delta)}\r\n                />\r\n                <div className='divider' />\r\n                <button onClick={() => this.roll()}>roll dice</button>\r\n                {rollsSection}\r\n                {resultSection}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","export default class Speech {\r\n    public static async say(text: string, languages: string[]) {\r\n        // If we're  already saying something, stop it\r\n        window.speechSynthesis.cancel();\r\n\r\n        const utterance = new SpeechSynthesisUtterance(text);\r\n        utterance.voice = await Speech.chooseVoice(languages);\r\n        utterance.rate = Speech.randomValue(0.5, 1.5);\r\n        utterance.pitch = Speech.randomValue(0.5, 1.5);\r\n\r\n        window.speechSynthesis.speak(utterance);\r\n    }\r\n\r\n    private static async chooseVoice(languages: string[]) {\r\n        const voices = await Speech.getVoices();\r\n\r\n        // Get language codes for the selected languages\r\n        const langCodes = languages.map(lang => Speech.getLanguageCode(lang));\r\n\r\n        // Filter voice list by these language codes\r\n        let candidates = voices.filter(v => langCodes.includes(v.lang.substr(0, 2)));\r\n        if (candidates.length === 0) {\r\n            candidates = voices.filter(v => v.default);\r\n        }\r\n        if (candidates.length === 0) {\r\n            candidates = voices;\r\n        }\r\n\r\n        const index = Math.floor(Math.random() * candidates.length);\r\n        return candidates[index];\r\n    }\r\n\r\n    private static getVoices() {\r\n        return new Promise<SpeechSynthesisVoice[]>(resolve => {\r\n            let list = window.speechSynthesis.getVoices();\r\n            if (list.length > 0) {\r\n                resolve(list);\r\n                return;\r\n            }\r\n            speechSynthesis.onvoiceschanged = () => {\r\n                list = window.speechSynthesis.getVoices();\r\n                resolve(list);\r\n            };\r\n        });\r\n    }\r\n\r\n    private static getLanguageCode(language: string) {\r\n        switch (language) {\r\n            case 'armenian':\r\n                return 'hy';\r\n            case 'basque':\r\n                return 'eu';\r\n            case 'bulgarian':\r\n                return 'bg';\r\n            case 'chichewa':\r\n                return 'ny';\r\n            case 'chinese':\r\n                return 'zh';\r\n            case 'croatian':\r\n                return 'hr';\r\n            case 'czech':\r\n                return 'cs';\r\n            case 'dutch':\r\n                return 'nl';\r\n            case 'german':\r\n                return 'de';\r\n            case 'greek':\r\n                return 'el';\r\n            case 'icelandic':\r\n                return 'is';\r\n            case 'irish':\r\n                return 'ga';\r\n            case 'kannada':\r\n                return 'kn';\r\n            case 'kazakh':\r\n                return 'kk';\r\n            case 'latvian':\r\n                return 'lv';\r\n            case 'lithuanian':\r\n                return 'lt';\r\n            case 'macedonian':\r\n                return 'mk';\r\n            case 'malay':\r\n                return 'ms';\r\n            case 'maltese':\r\n                return 'mt';\r\n            case 'maori':\r\n                return 'mi';\r\n            case 'polish':\r\n                return 'pl';\r\n            case 'portuguese':\r\n                return 'pt';\r\n            case 'punjabi':\r\n                return 'pa';\r\n            case 'samoan':\r\n                return 'sm';\r\n            case 'serbian':\r\n                return 'sr';\r\n            case 'shona':\r\n                return 'sn';\r\n            case 'spanish':\r\n                return 'es';\r\n            case 'swedish':\r\n                return 'sv';\r\n            case 'turkish':\r\n                return 'tr';\r\n            case 'welsh':\r\n                return 'cy';\r\n            default:\r\n                return language.substr(0, 2);\r\n        }\r\n    }\r\n\r\n    private static randomValue(min: number, max: number) {\r\n        const x = (Math.random() + Math.random() + Math.random()) / 3;\r\n        const range = max - min;\r\n        return min + (x * range);\r\n    }\r\n}\r\n","import Utils from './utils';\r\n\r\ninterface ModelLine {\r\n    prev: string;\r\n    freq: ModelChar[];\r\n}\r\n\r\ninterface ModelChar {\r\n    char: string;\r\n    count: number;\r\n}\r\n\r\nexport default class TextGenerator {\r\n\r\n    private static model: ModelLine[] = [];\r\n    private static maxLength: number = 0;\r\n\r\n    public static initModel(sources: string[]) {\r\n        const model: ModelLine[] = [];\r\n        let maxLength: number = 0;\r\n\r\n        sources.forEach(source => {\r\n            const lines = source.split(/\\r?\\n/);\r\n            lines.forEach(line => {\r\n                if (line) {\r\n                    TextGenerator.addLineToModel(line, model);\r\n                    maxLength = Math.max(maxLength, line.length);\r\n                }\r\n            });\r\n        });\r\n\r\n        TextGenerator.model = model;\r\n        TextGenerator.maxLength = maxLength;\r\n    }\r\n\r\n    private static addLineToModel(line: string, model: ModelLine[]) {\r\n        line = String.fromCharCode(0, 1) + line + String.fromCharCode(2);\r\n\r\n        for (let index = 2; index !== line.length; ++index) {\r\n            const prev = line.substr(index - 2, 2);\r\n            const char = line.substr(index, 1);\r\n\r\n            let item = model.find(x => x.prev === prev);\r\n            if (!item) {\r\n                item = {\r\n                    prev: prev,\r\n                    freq: []\r\n                };\r\n                model.push(item);\r\n            }\r\n\r\n            let freq = item.freq.find(x => x.char === char);\r\n            if (!freq) {\r\n                freq = {\r\n                    char: char,\r\n                    count: 0\r\n                };\r\n                item.freq.push(freq);\r\n            }\r\n\r\n            freq.count += 1;\r\n        }\r\n    }\r\n\r\n    public static generate(requiredResults: number): { line: string, fit: number }[] {\r\n        const lines: { line: string, fit: number }[] = [];\r\n        const allowedFailures = 100;\r\n        let failures = 0;\r\n\r\n        while ((lines.length < requiredResults) && (failures < allowedFailures)) {\r\n            const line = TextGenerator.extractLine();\r\n            if (line && !lines.map(l => l.line).includes(line) && line.length <= TextGenerator.maxLength) {\r\n                const fit = TextGenerator.fit(line);\r\n                lines.push({ line, fit });\r\n            } else {\r\n                failures += 1;\r\n            }\r\n        }\r\n\r\n        return lines;\r\n    }\r\n\r\n    private static extractLine() {\r\n        let line = String.fromCharCode(0, 1);\r\n\r\n        while (true) {\r\n            const prev = line.substr(line.length - 2, 2);\r\n\r\n            const item = TextGenerator.model.find(x => x.prev === prev);\r\n            if (item) {\r\n                let candidates = '';\r\n                item.freq.forEach(freq => {\r\n                    candidates += freq.char.repeat(freq.count);\r\n                });\r\n\r\n                const index = Math.floor(Math.random() * candidates.length);\r\n                let char = candidates[index];\r\n                if (char === String.fromCharCode(2)) {\r\n                    line = line.substr(2);\r\n                    return line;\r\n                } else {\r\n                    if (Utils.dieRoll() === 1) {\r\n                        // TODO: Mutate choice\r\n                        const groups = ['bdg', 'ptk', 'sz', 'aeiouy', 'lr', 'ckq', 'vf'];\r\n                        groups.forEach(g => {\r\n                            if (g.includes(char)) {\r\n                                const n = Math.floor(Math.random() * g.length);\r\n                                char = g[n];\r\n                            }\r\n                        });\r\n                    }\r\n                    line += char;\r\n                }\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n\r\n    private static fit(text: string): number {\r\n        text = String.fromCharCode(0, 1) + text + String.fromCharCode(2);\r\n\r\n        const values: number[] = [];\r\n        for (let n = 2; n !== text.length; ++n) {\r\n            const prev = text.substr(n - 2, 2);\r\n            const ch = text[n];\r\n\r\n            const line = TextGenerator.model.find(m => m.prev === prev);\r\n            if (line) {\r\n                const mc = line.freq.find(f => f.char === ch);\r\n                if (mc) {\r\n                    const maxCount = line.freq.reduce((max, value) => Math.max(max, value.count), 0);\r\n                    const fit = mc.count / maxCount;\r\n                    values.push(fit);\r\n                } else {\r\n                    values.push(0);\r\n                }\r\n            }\r\n        }\r\n\r\n        return values.reduce((sum, value) => sum + value, 0) / values.length;\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Speech from '../../utils/speech';\r\nimport TextGenerator from '../../utils/text-generation';\r\n\r\nimport Checkbox from '../controls/checkbox';\r\nimport ControlRow from '../controls/control-row';\r\nimport Expander from '../controls/expander';\r\nimport Selector from '../controls/selector';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    //\r\n}\r\n\r\ninterface State {\r\n    sources: { [id: string]: string; };\r\n    output: string[];\r\n}\r\n\r\ninterface Preset {\r\n    name: string;\r\n    languages: string[];\r\n}\r\n\r\nexport default class LanguageModule extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            sources: {},\r\n            output: []\r\n        };\r\n    }\r\n\r\n    private getLanguages(): string[] {\r\n        // Note: When adding a language to this list, also check the Speech.getLanguageCode() method\r\n        return [\r\n            'afrikaans',\r\n            'amharic',\r\n            'armenian',\r\n            'basque',\r\n            'belarusian',\r\n            'bulgarian',\r\n            'chichewa',\r\n            'chinese',\r\n            'croatian',\r\n            'czech',\r\n            'danish',\r\n            'dutch',\r\n            'english',\r\n            'finnish',\r\n            'french',\r\n            'german',\r\n            'greek',\r\n            'hawaiian',\r\n            'hindi',\r\n            'hungarian',\r\n            'icelandic',\r\n            'irish',\r\n            'italian',\r\n            'japanese',\r\n            'kannada',\r\n            'kazakh',\r\n            'korean',\r\n            'kyrgyz',\r\n            'latvian',\r\n            'lithuanian',\r\n            'macedonian',\r\n            'malay',\r\n            'maltese',\r\n            'maori',\r\n            'myanmar',\r\n            'nepali',\r\n            'norwegian',\r\n            'polish',\r\n            'portuguese',\r\n            'punjabi',\r\n            'romanian',\r\n            'russian',\r\n            'samoan',\r\n            'serbian',\r\n            'shona',\r\n            'somali',\r\n            'spanish',\r\n            'swahili',\r\n            'swedish',\r\n            'thai',\r\n            'turkish',\r\n            'welsh',\r\n            'yiddish',\r\n            'zulu'\r\n        ];\r\n    }\r\n\r\n    private getPresets(): Preset[] {\r\n        return [\r\n            {\r\n                name: 'draconic',\r\n                languages: ['armenian', 'irish', 'maltese']\r\n            },\r\n            {\r\n                name: 'dwarvish',\r\n                languages: ['czech', 'german', 'yiddish']\r\n            },\r\n            {\r\n                name: 'elvish',\r\n                languages: ['finnish', 'spanish', 'welsh']\r\n            },\r\n            {\r\n                name: 'goblin',\r\n                languages: ['hawaiian', 'kyrgyz', 'somali']\r\n            },\r\n            {\r\n                name: 'orc',\r\n                languages: ['macedonian', 'russian', 'turkish']\r\n            }\r\n        ];\r\n    }\r\n\r\n    private async addLanguage(language: string) {\r\n        const response = await fetch('./data/langs/' + language + '.txt');\r\n        this.state.sources[language] = await response.text();\r\n        this.setState({\r\n            sources: this.state.sources\r\n        });\r\n    }\r\n\r\n    private removeLanguage(language: string) {\r\n        delete this.state.sources[language];\r\n        this.setState({\r\n            sources: this.state.sources\r\n        });\r\n    }\r\n\r\n    private usePreset(presetName: string) {\r\n        const preset = this.getPresets().find(p => p.name === presetName);\r\n        if (preset) {\r\n            this.setState({\r\n                sources: {},\r\n                output: []\r\n            }, () => {\r\n                preset.languages.forEach(lang => {\r\n                    this.addLanguage(lang);\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    private random() {\r\n        const languages = this.getLanguages();\r\n\r\n        const selection: string[] = [];\r\n        while (selection.length !== 3) {\r\n            const n = Math.floor(Math.random() * languages.length);\r\n            const lang = languages[n];\r\n            if (!selection.includes(lang)) {\r\n                selection.push(lang);\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            sources: {},\r\n            output: []\r\n        }, () => {\r\n            selection.forEach(lang => {\r\n                this.addLanguage(lang);\r\n            });\r\n        });\r\n    }\r\n\r\n    private generate() {\r\n        const sources: string[] = [];\r\n        Object.keys(this.state.sources).forEach(key => {\r\n            const src = this.state.sources[key];\r\n            sources.push(src);\r\n        });\r\n        TextGenerator.initModel(sources);\r\n        this.setState({\r\n            output: TextGenerator.generate(5).map(l => l.line)\r\n        });\r\n    }\r\n\r\n    private reset() {\r\n        this.setState({\r\n            sources: {},\r\n            output: []\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        const presetOptions = this.getPresets().map(p => {\r\n            return {\r\n                id: p.name,\r\n                text: p.name\r\n            };\r\n        });\r\n\r\n        let selectedPreset = '';\r\n        this.getPresets().forEach(p => {\r\n            const selected = Object.keys(this.state.sources).sort().join(', ');\r\n            const setting = p.languages.sort().join(', ');\r\n            if (selected === setting) {\r\n                selectedPreset = p.name;\r\n            }\r\n        });\r\n\r\n        let selectedLanguages = Object.keys(this.state.sources).sort().join(', ');\r\n        if (selectedLanguages === '') {\r\n            selectedLanguages = 'none';\r\n        }\r\n\r\n        const languages = this.getLanguages()\r\n            .map(lang => {\r\n                const isSelected = Object.keys(this.state.sources).includes(lang);\r\n                return (\r\n                    <div className='column' key={lang}>\r\n                        <Checkbox\r\n                            label={lang}\r\n                            display='button'\r\n                            checked={isSelected}\r\n                            changeValue={value => value ? this.addLanguage(lang) : this.removeLanguage(lang)}\r\n                        />\r\n                    </div>\r\n                );\r\n            });\r\n\r\n        const allowGenerate = Object.keys(this.state.sources).length > 0;\r\n        const allowReset = allowGenerate || this.state.output.length > 0;\r\n\r\n        const output = [];\r\n        if (this.state.output.length > 0) {\r\n            output.push(\r\n                <div key='div' className='divider' />\r\n            );\r\n        }\r\n        for (let n = 0; n !== this.state.output.length; ++n) {\r\n            output.push(\r\n                <GeneratedText\r\n                    key={n}\r\n                    text={this.state.output[n]}\r\n                    languages={Object.keys(this.state.sources)}\r\n                />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className='language'>\r\n                <div className='heading'>presets</div>\r\n                <Selector\r\n                    options={presetOptions}\r\n                    selectedID={selectedPreset}\r\n                    select={optionID => this.usePreset(optionID)}\r\n                />\r\n                <div className='divider' />\r\n                <Expander\r\n                    text={'selected languages: ' + selectedLanguages}\r\n                    content={\r\n                        <div className='row collapse small-up-1 medium-up-2 large-up-3 language-options'>\r\n                            {languages}\r\n                        </div>\r\n                    }\r\n                />\r\n                <div className='divider' />\r\n                <ControlRow\r\n                    controls={[\r\n                        <button key='generate' className={allowGenerate ? '' : 'disabled'} onClick={() => this.generate()}>generate text</button>,\r\n                        <button key='reset' className={allowReset ? '' : 'disabled'} onClick={() => this.reset()}>reset</button>,\r\n                        <button key='random' onClick={() => this.random()}>random sources</button>\r\n                    ]}\r\n                />\r\n                <div className='language-output'>\r\n                    {output}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface GeneratedTextProps {\r\n    text: string;\r\n    languages: string[];\r\n}\r\n\r\nclass GeneratedText extends React.Component<GeneratedTextProps> {\r\n    private copy(e: React.MouseEvent) {\r\n        e.preventDefault();\r\n        navigator.clipboard.writeText(this.props.text);\r\n    }\r\n\r\n    private say(e: React.MouseEvent) {\r\n        e.preventDefault();\r\n        Speech.say(this.props.text, this.props.languages);\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <Expander\r\n                text={this.props.text.toLowerCase()}\r\n                content={\r\n                    <div>\r\n                        <button onClick={e => this.copy(e)}>copy to clipboard</button>\r\n                        <button onClick={e => this.say(e)}>say</button>\r\n                        <div className='section'>\r\n                            <b>note:</b> speech may not work consistently on all platforms\r\n                        </div>\r\n                    </div>\r\n                }\r\n            />\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport TextGenerator from '../../utils/text-generation';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    //\r\n}\r\n\r\ninterface State {\r\n    output: {\r\n        male: string[],\r\n        female: string[],\r\n        surname: string[]\r\n    };\r\n}\r\n\r\nexport default class NameModule extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            output: {\r\n                male: [],\r\n                female: [],\r\n                surname: []\r\n            }\r\n        };\r\n    }\r\n\r\n    private async generate(type: 'male' | 'female' | 'surname') {\r\n        const response = await fetch('./data/names/' + type + '.txt');\r\n        const input = await response.text();\r\n\r\n        TextGenerator.initModel([input]);\r\n        const names = TextGenerator.generate(10).map(n => n.line).sort();\r\n\r\n        this.state.output[type] = names;\r\n        this.setState({\r\n            output: this.state.output\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        const male = [];\r\n        for (let n = 0; n !== this.state.output.male.length; ++n) {\r\n            male.push(\r\n                <div key={n} className='section'>\r\n                    {this.state.output.male[n].toLowerCase()}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        const female = [];\r\n        for (let n = 0; n !== this.state.output.female.length; ++n) {\r\n            female.push(\r\n                <div key={n} className='section'>\r\n                    {this.state.output.female[n].toLowerCase()}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        const surname = [];\r\n        for (let n = 0; n !== this.state.output.surname.length; ++n) {\r\n            surname.push(\r\n                <div key={n} className='section'>\r\n                    {this.state.output.surname[n].toLowerCase()}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className='name'>\r\n                <div className='name-output'>\r\n                    <div className='row'>\r\n                        <div className='columns small-4 medium-4 large-4'>\r\n                            <div className='heading'>male names</div>\r\n                            <button onClick={() => this.generate('male')}>generate</button>\r\n                            {male}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4'>\r\n                            <div className='heading'>female names</div>\r\n                            <button onClick={() => this.generate('female')}>generate</button>\r\n                            {female}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4'>\r\n                            <div className='heading'>surnames</div>\r\n                            <button onClick={() => this.generate('surname')}>generate</button>\r\n                            {surname}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Showdown from 'showdown';\r\n\r\nimport Selector from '../controls/selector';\r\n\r\nconst showdown = new Showdown.Converter();\r\nshowdown.setOption('tables', true);\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    //\r\n}\r\n\r\ninterface State {\r\n    view: string;\r\n    source: string | null;\r\n}\r\n\r\nexport default class ReferenceModule extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            view: 'skills',\r\n            source: null\r\n        };\r\n    }\r\n\r\n    private setView(view: string) {\r\n        this.setState({\r\n            view: view,\r\n            source: null\r\n        });\r\n    }\r\n\r\n    private async fetchData() {\r\n        const response = await fetch('./data/' + this.state.view + '.md');\r\n        const text = await response.text();\r\n        this.setState({\r\n            source: text\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        if (this.state.view && !this.state.source) {\r\n            this.fetchData();\r\n        }\r\n\r\n        const options = [\r\n            {\r\n                id: 'skills',\r\n                text: 'skills'\r\n            },\r\n            {\r\n                id: 'conditions',\r\n                text: 'conditions'\r\n            },\r\n            {\r\n                id: 'actions',\r\n                text: 'actions'\r\n            }\r\n        ];\r\n\r\n        return (\r\n            <div className='reference'>\r\n                <Selector\r\n                    options={options}\r\n                    selectedID={this.state.view}\r\n                    select={optionID => this.setView(optionID)}\r\n                />\r\n                <div dangerouslySetInnerHTML={{ __html: showdown.makeHtml(this.state.source || '') }} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport Selector from '../controls/selector';\r\nimport DieRollerModule from '../dm-modules/die-roller-module';\r\nimport LanguageModule from '../dm-modules/language-module';\r\nimport NameModule from '../dm-modules/name-module';\r\nimport ReferenceModule from '../dm-modules/reference-module';\r\nimport Note from '../panels/note';\r\n\r\nimport pkg from '../../../package.json';\r\n\r\ninterface Props {\r\n    resetAll: () => void;\r\n    changeValue: (source: {}, field: string, value: any) => void;\r\n}\r\n\r\ninterface State {\r\n    view: string;\r\n    module: string | null;\r\n}\r\n\r\nexport default class AboutModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            view: 'dm',\r\n            module: 'reference'\r\n        };\r\n    }\r\n\r\n    private setView(view: string) {\r\n        this.setState({\r\n            view: view\r\n        });\r\n    }\r\n\r\n    private setModule(module: string) {\r\n        this.setState({\r\n            module: module\r\n        });\r\n    }\r\n\r\n    private getTools() {\r\n        if (this.state.view !== 'dm') {\r\n            return null;\r\n        }\r\n\r\n        const modules = [\r\n            {\r\n                id: 'reference',\r\n                text: 'd&d reference'\r\n            },\r\n            {\r\n                id: 'names',\r\n                text: 'name generator'\r\n            },\r\n            {\r\n                id: 'language',\r\n                text: 'language generator'\r\n            },\r\n            {\r\n                id: 'die-roller',\r\n                text: 'die roller'\r\n            }\r\n        ];\r\n\r\n        let module = (\r\n            <Note\r\n                content={(\r\n                    <div className='section'>\r\n                        <b>dojo</b> includes several dm tools; select one of them above\r\n                    </div>\r\n                )}\r\n            />\r\n        );\r\n\r\n        switch (this.state.module) {\r\n            case 'reference':\r\n                module = (\r\n                    <ReferenceModule />\r\n                );\r\n                break;\r\n            case 'language':\r\n                module = (\r\n                    <LanguageModule />\r\n                );\r\n                break;\r\n            case 'names':\r\n                module = (\r\n                    <NameModule />\r\n                );\r\n                break;\r\n            case 'die-roller':\r\n                module = (\r\n                    <DieRollerModule />\r\n                );\r\n                break;\r\n        }\r\n\r\n        return (\r\n            <div className='dm-screen'>\r\n                <Selector\r\n                    options={modules}\r\n                    selectedID={this.state.module}\r\n                    select={moduleID => this.setModule(moduleID)}\r\n                />\r\n                <div className='divider' />\r\n                <div className='dm-module'>\r\n                    {module}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getAbout() {\r\n        if (this.state.view !== 'about') {\r\n            return null;\r\n        }\r\n\r\n        /* tslint:disable:max-line-length */\r\n        return (\r\n            <div>\r\n                <div className='section'>dojo by <a href='mailto:andy.aiken@live.co.uk'>andy aiken</a></div>\r\n                <div className='section'>version <b>{pkg.version}</b></div>\r\n                <div className='section'>if you would like to contribut to this project, you can do so <a href='https://github.com/andyaiken/dojo' target='_blank' rel='noopener noreferrer'>here</a></div>\r\n                <div className='section'>dungeons and dragons copyright wizards of the coast</div>\r\n                <div className='heading'>options</div>\r\n                <ConfirmButton text='clear all data' callback={() => this.props.resetAll()} />\r\n                <div className='heading'>open game license</div>\r\n                <div className='section'>The following text is the property of Wizards of the Coast, Inc. and is Copyright 2000 Wizards of the Coast, Inc ('Wizards'). All Rights Reserved.</div>\r\n                <ol>\r\n                    <li>Definitions: (a)'Contributors' means the copyright and/or trademark owners who have contributed Open Game Content; (b)'Derivative Material' means copyrighted material including derivative works and translations (including into other computer languages), potation, modification, correction, addition, extension, upgrade, improvement, compilation, abridgment or other form in which an existing work may be recast, transformed or adapted; (c) 'Distribute' means to reproduce, license, rent, lease, sell, broadcast, publicly display, transmit or otherwise distribute; (d)'Open Game Content' means the game mechanic and includes the methods, procedures, processes and routines to the extent such content does not embody the Product Identity and is an enhancement over the prior art and any additional content clearly identified as Open Game Content by the Contributor, and means any work covered by this License, including translations and derivative works under copyright law, but specifically excludes Product Identity. (e) 'Product Identity' means product and product line names, logos and identifying marks including trade dress; artifacts; creatures characters; stories, storylines, plots, thematic elements, dialogue, incidents, language, artwork, symbols, designs, depictions, likenesses, formats, poses, concepts, themes and graphic, photographic and other visual or audio representations; names and descriptions of characters, spells, enchantments, personalities, teams, personas, likenesses and special abilities; places, locations, environments, creatures, equipment, magical or supernatural abilities or effects, logos, symbols, or graphic designs; and any other trademark or registered trademark clearly identified as Product identity by the owner of the Product Identity, and which specifically excludes the Open Game Content; (f) 'Trademark' means the logos, names, mark, sign, motto, designs that are used by a Contributor to identify itself or its products or the associated products contributed to the Open Game License by the Contributor (g) 'Use', 'Used' or 'Using' means to use, Distribute, copy, edit, format, modify, translate and otherwise create Derivative Material of Open Game Content. (h) 'You' or 'Your' means the licensee in terms of this agreement.</li>\r\n                    <li>The License: This License applies to any Open Game Content that contains a notice indicating that the Open Game Content may only be Used under and in terms of this License. You must affix such a notice to any Open Game Content that you Use. No terms may be added to or subtracted from this License except as described by the License itself. No other terms or conditions may be applied to any Open Game Content distributed using this License.</li>\r\n                    <li>Offer and Acceptance: By Using the Open Game Content You indicate Your acceptance of the terms of this License.</li>\r\n                    <li>Grant and Consideration: In consideration for agreeing to use this License, the Contributors grant You a perpetual, worldwide, royalty-free, non-exclusive license with the exact terms of this License to Use, the Open Game Content.</li>\r\n                    <li>Representation of Authority to Contribute: If You are contributing original material as Open Game Content, You represent that Your Contributions are Your original creation and/or You have sufficient rights to grant the rights conveyed by this License.</li>\r\n                    <li>Notice of License Copyright: You must update the COPYRIGHT NOTICE portion of this License to include the exact text of the COPYRIGHT NOTICE of any Open Game Content You are copying, modifying or distributing, and You must add the title, the copyright date, and the copyright holder's name to the COPYRIGHT NOTICE of any original Open Game Content you Distribute.</li>\r\n                    <li>Use of Product Identity: You agree not to Use any Product Identity, including as an indication as to compatibility, except as expressly licensed in another, independent Agreement with the owner of each element of that Product Identity. You agree not to indicate compatibility or co-adaptability with any Trademark or Registered Trademark in conjunction with a work containing Open Game Content except as expressly licensed in another, independent Agreement with the owner of such Trademark or Registered Trademark. The use of any Product Identity in Open Game Content does not constitute a challenge to the ownership of that Product Identity. The owner of any Product Identity used in Open Game Content shall retain all rights, title and interest in and to that Product Identity.</li>\r\n                    <li>Identification: If you distribute Open Game Content You must clearly indicate which portions of the work that you are distributing are Open Game Content.</li>\r\n                    <li>Updating the License: Wizards or its designated Agents may publish updated versions of this License. You may use any authorized version of this License to copy, modify and distribute any Open Game Content originally distributed under any version of this License.</li>\r\n                    <li>Copy of this License: You MUST include a copy of this License with every copy of the Open Game Content You Distribute.</li>\r\n                    <li>Use of Contributor Credits: You may not market or advertise the Open Game Content using the name of any Contributor unless You have written permission from the Contributor to do so.</li>\r\n                    <li>Inability to Comply: If it is impossible for You to comply with any of the terms of this License with respect to some or all of the Open Game Content due to statute, judicial order, or governmental regulation then You may not Use any Open Game Material so affected.</li>\r\n                    <li>Termination: This License will terminate automatically if You fail to comply with all terms herein and fail to cure such breach within 30 days of becoming aware of the breach. All sublicenses shall survive the termination of this License.</li>\r\n                    <li>Reformation: If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable.</li>\r\n                    <li>COPYRIGHT NOTICE Open Game License v 1.0 Copyright 2000, Wizards of the Coast, Inc.</li>\r\n                </ol>\r\n            </div>\r\n        );\r\n        /* tslint:enable:max-line-length */\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const viewOptions = [\r\n                {\r\n                    id: 'dm',\r\n                    text: 'dm tools'\r\n                },\r\n                {\r\n                    id: 'about',\r\n                    text: 'about'\r\n                }\r\n            ];\r\n\r\n            return (\r\n                <div className='about'>\r\n                    <Selector\r\n                        tabs={true}\r\n                        options={viewOptions}\r\n                        selectedID={this.state.view}\r\n                        select={optionID => this.setView(optionID)}\r\n                    />\r\n                    {this.getTools()}\r\n                    {this.getAbout()}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Monster, MonsterGroup } from '../../models/monster-group';\r\n\r\nimport FilterCard from '../cards/filter-card';\r\nimport MonsterCard from '../cards/monster-card';\r\nimport Note from '../panels/note';\r\n\r\ninterface Props {\r\n    combatants: Monster[];\r\n    library: MonsterGroup[];\r\n}\r\n\r\ninterface State {\r\n    combatants: Monster[];\r\n    filter: {\r\n        name: string,\r\n        challengeMin: number;\r\n        challengeMax: number;\r\n        category: string;\r\n        size: string;\r\n    };\r\n}\r\n\r\nexport default class AddCombatantsModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            combatants: props.combatants,\r\n            filter: {\r\n                name: '',\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: 'all types',\r\n                size: 'all sizes'\r\n            }\r\n        };\r\n    }\r\n\r\n    private changeFilterValue(type: 'name' | 'challengeMin' | 'challengeMax' | 'category' | 'size', value: any) {\r\n        // eslint-disable-next-line\r\n        this.state.filter[type] = value;\r\n        this.setState({\r\n            filter: this.state.filter\r\n        });\r\n    }\r\n\r\n    private nudgeFilterValue(type: 'challengeMin' | 'challengeMax', delta: number) {\r\n        const value = Utils.nudgeChallenge(this.state.filter[type], delta);\r\n        this.changeFilterValue(type, value);\r\n    }\r\n\r\n    private resetFilter() {\r\n        this.setState({\r\n            filter: {\r\n                name: '',\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: 'all types',\r\n                size: 'all sizes'\r\n            }\r\n        });\r\n    }\r\n    private matchMonster(monster: Monster) {\r\n        if (monster.challenge < this.state.filter.challengeMin) {\r\n            return false;\r\n        }\r\n\r\n        if (monster.challenge > this.state.filter.challengeMax) {\r\n            return false;\r\n        }\r\n\r\n        if (this.state.filter.name !== '') {\r\n            if (!Utils.match(this.state.filter.name, monster.name)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.filter.category !== 'all types') {\r\n            if (monster.category !== this.state.filter.category) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.filter.size !== 'all sizes') {\r\n            if (monster.size !== this.state.filter.size) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private selectMonster(monster: Monster) {\r\n        this.state.combatants.push(monster);\r\n        this.state.combatants.sort((a, b) => {\r\n            if (a.name < b.name) { return -1; }\r\n            if (a.name > b.name) { return 1; }\r\n            return 0;\r\n        });\r\n        this.setState({\r\n            combatants: this.state.combatants\r\n        });\r\n    }\r\n\r\n    private deselectMonster(monster: Monster) {\r\n        const index = this.state.combatants.indexOf(monster);\r\n        this.state.combatants.splice(index, 1);\r\n        this.setState({\r\n            combatants: this.state.combatants\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const monsters: Monster[] = [];\r\n            this.props.library.forEach(group => {\r\n                group.monsters.forEach(monster => {\r\n                    if (this.matchMonster(monster)) {\r\n                        monsters.push(monster);\r\n                    }\r\n                });\r\n            });\r\n            monsters.sort((a, b) => {\r\n                if (a.name < b.name) { return -1; }\r\n                if (a.name > b.name) { return 1; }\r\n                return 0;\r\n            });\r\n            let allCombatants: JSX.Element | JSX.Element[] = monsters.filter(m => !this.state.combatants.includes(m)).map(m => {\r\n                return (\r\n                    <MonsterCard key={m.id} combatant={m} mode='view candidate' selectMonster={monster => this.selectMonster(monster)} />\r\n                );\r\n            });\r\n            if (allCombatants.length === 0) {\r\n                allCombatants = (\r\n                    <Note\r\n                        content={(\r\n                            <div className='section'>\r\n                                there are no monsters that match the above criteria (or you have already selected them all)\r\n                            </div>\r\n                        )}\r\n                    />\r\n                );\r\n            }\r\n\r\n            const selectedCombatants: JSX.Element | JSX.Element[] = this.state.combatants.map(c => {\r\n                return (\r\n                    <MonsterCard key={c.id} combatant={c} mode='view candidate selected' deselectMonster={monster => this.deselectMonster(monster)} />\r\n                );\r\n            });\r\n\r\n            return (\r\n                <div className='add-combatants-modal'>\r\n                    <div className='row' style={{ height: '100%' }}>\r\n                        <div className='columns small-6 medium-6 large-6 scrollable'>\r\n                            <div className='heading'>all combatants</div>\r\n                            <FilterCard\r\n                                filter={this.state.filter}\r\n                                changeValue={(type, value) => this.changeFilterValue(type, value)}\r\n                                nudgeValue={(type, delta) => this.nudgeFilterValue(type, delta)}\r\n                                resetFilter={() => this.resetFilter()}\r\n                            />\r\n                            <div className='divider' />\r\n                            {allCombatants}\r\n                        </div>\r\n                        <div className='columns small-6 medium-6 large-6 scrollable'>\r\n                            <div className='heading'>selected combatants</div>\r\n                            {selectedCombatants}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { CombatSetup } from '../../models/combat';\r\nimport { Encounter, EncounterSlot } from '../../models/encounter';\r\nimport { MapFolio } from '../../models/map-folio';\r\nimport { Monster } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport Selector from '../controls/selector';\r\nimport DifficultyChartPanel from '../panels/difficulty-chart-panel';\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    combatSetup: CombatSetup;\r\n    parties: Party[];\r\n    encounters: Encounter[];\r\n    mapFolios: MapFolio[];\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n    notify: () => void;\r\n}\r\n\r\ninterface State {\r\n    combatSetup: CombatSetup;\r\n}\r\n\r\nexport default class CombatStartModal extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        parties: null,\r\n        mapFolios: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            combatSetup: props.combatSetup\r\n        };\r\n    }\r\n\r\n    private setParty(partyID: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.partyID = partyID;\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        }, () => this.props.notify());\r\n    }\r\n\r\n    private setEncounter(encounterID: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.encounterID = encounterID;\r\n        const enc = this.props.encounters.find(e => e.id === encounterID);\r\n        if (enc) {\r\n            // eslint-disable-next-line\r\n            this.state.combatSetup.monsterNames = Utils.getMonsterNames(enc);\r\n        }\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        }, () => this.props.notify());\r\n    }\r\n\r\n    private setFolioID(id: string) {\r\n        if (id && (id !== '')) {\r\n            const folio = this.props.mapFolios.find(f => f.id === id);\r\n            if (folio) {\r\n                // eslint-disable-next-line\r\n                this.state.combatSetup.folioID = folio.id;\r\n                // eslint-disable-next-line\r\n                this.state.combatSetup.mapID = folio.maps.length === 1 ? folio.maps[0].id : null;\r\n            }\r\n        } else {\r\n            // eslint-disable-next-line\r\n            this.state.combatSetup.folioID = null;\r\n            // eslint-disable-next-line\r\n            this.state.combatSetup.mapID = null;\r\n        }\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        });\r\n    }\r\n\r\n    private setMapID(id: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.mapID = id;\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        });\r\n    }\r\n\r\n    private setWave(waveID: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.waveID = waveID;\r\n        const enc = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n        if (enc) {\r\n            const wave = enc.waves.find(w => w.id === waveID);\r\n            if (wave) {\r\n                // eslint-disable-next-line\r\n                this.state.combatSetup.monsterNames = Utils.getMonsterNames(wave);\r\n            }\r\n        }\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        }, () => this.props.notify());\r\n    }\r\n\r\n    private setEncounterInitMode(mode: 'manual' | 'individual' | 'group') {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.encounterInitMode = mode;\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        });\r\n    }\r\n\r\n    private changeName(slotID: string, index: number, name: string) {\r\n        const slot = this.state.combatSetup.monsterNames.find(s => s.id === slotID);\r\n        if (slot) {\r\n            slot.names[index] = name;\r\n            this.setState({\r\n                combatSetup: this.state.combatSetup\r\n            });\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    private getPartySection() {\r\n        if (this.props.parties.length === 0) {\r\n            return (\r\n                <div className='section'>you have not defined any parties</div>\r\n            );\r\n        }\r\n\r\n        const partyOptions = this.props.parties.map(party => {\r\n            return {\r\n                id: party.id,\r\n                text: party.name || 'unnamed party'\r\n            };\r\n        });\r\n\r\n        let partyContent = null;\r\n        if (this.state.combatSetup.partyID) {\r\n            const selectedParty = this.props.parties.find(p => p.id === this.state.combatSetup.partyID);\r\n            if (selectedParty) {\r\n                const pcs = selectedParty.pcs.filter(pc => pc.active);\r\n\r\n                const pcSections = pcs.map(pc =>\r\n                    (\r\n                        <li key={pc.id}>\r\n                            {pc.name || 'unnamed pc'} (level {pc.level})\r\n                        </li>\r\n                    )\r\n                );\r\n\r\n                if (pcSections.length === 0) {\r\n                    pcSections.push(\r\n                        <li key={'empty'}>no pcs</li>\r\n                    );\r\n                }\r\n\r\n                partyContent = (\r\n                    <div>\r\n                        <div className='subheading'>pcs</div>\r\n                        <ul>{pcSections}</ul>\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='heading'>party</div>\r\n                <Dropdown\r\n                    options={partyOptions}\r\n                    placeholder='select party...'\r\n                    selectedID={this.state.combatSetup.partyID ? this.state.combatSetup.partyID : undefined}\r\n                    select={optionID => this.setParty(optionID)}\r\n                />\r\n                {partyContent}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getEncounterSection() {\r\n        if (this.props.encounters.length === 0) {\r\n            return (\r\n                <div className='section'>you have not built any encounters</div>\r\n            );\r\n        }\r\n\r\n        const encounterOptions = this.props.encounters.map(encounter => {\r\n            return {\r\n                id: encounter.id,\r\n                text: encounter.name || 'unnamed encounter'\r\n            };\r\n        });\r\n\r\n        let encounterContent = null;\r\n        if (this.state.combatSetup.encounterID) {\r\n            const selectedEncounter = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n            if (selectedEncounter) {\r\n                const monsterSections = selectedEncounter.slots.map(slot => {\r\n                    let name = slot.monsterName || 'unnamed monster';\r\n                    if (slot.count > 1) {\r\n                        name += ' (x' + slot.count + ')';\r\n                    }\r\n                    return (\r\n                        <li key={slot.id}>{name}</li>\r\n                    );\r\n                });\r\n\r\n                if (monsterSections.length === 0) {\r\n                    monsterSections.push(\r\n                        <li key={'empty'}>no monsters</li>\r\n                    );\r\n                }\r\n\r\n                const waves = selectedEncounter.waves.map(wave => {\r\n                    if (wave.slots.length === 0) {\r\n                        return null;\r\n                    }\r\n\r\n                    const waveMonsters = wave.slots.map(slot => {\r\n                        let name = slot.monsterName || 'unnamed monster';\r\n                        if (slot.count > 1) {\r\n                            name += ' x' + slot.count;\r\n                        }\r\n                        return (\r\n                            <li key={slot.id}>{name}</li>\r\n                        );\r\n                    });\r\n\r\n                    return (\r\n                        <div key={wave.id}>\r\n                            <div className='subheading'>{wave.name || 'unnamed wave'}</div>\r\n                            <ul>{waveMonsters}</ul>\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                encounterContent = (\r\n                    <div>\r\n                        <div className='subheading'>monsters</div>\r\n                        <ul>{monsterSections}</ul>\r\n                        {waves}\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='heading'>encounter</div>\r\n                <Dropdown\r\n                    options={encounterOptions}\r\n                    placeholder='select encounter...'\r\n                    selectedID={this.state.combatSetup.encounterID ? this.state.combatSetup.encounterID : undefined}\r\n                    select={optionID => this.setEncounter(optionID)}\r\n                />\r\n                {encounterContent}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getMapSection() {\r\n        const folios = this.props.mapFolios.filter(folio => folio.maps.length > 0);\r\n        if (folios.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        const folioOptions = [{\r\n            id: '',\r\n            text: 'none'\r\n        }].concat(folios.map(folio => {\r\n            return {\r\n                id: folio.id,\r\n                text: folio.name || 'unnamed folio'\r\n            };\r\n        }));\r\n\r\n        let selectMapSection = null;\r\n        let thumbnailSection = null;\r\n\r\n        if (this.state.combatSetup.folioID) {\r\n            const folio = this.props.mapFolios.find(f => f.id === this.state.combatSetup.folioID);\r\n            if (folio) {\r\n                const mapOptions = folio.maps.map(m => {\r\n                    return {\r\n                        id: m.id,\r\n                        text: m.name || 'unnamed map'\r\n                    };\r\n                });\r\n\r\n                if (mapOptions.length !== 1) {\r\n                    selectMapSection = (\r\n                        <Selector\r\n                            options={mapOptions}\r\n                            selectedID={this.state.combatSetup.mapID}\r\n                            select={optionID => this.setMapID(optionID)}\r\n                        />\r\n                    );\r\n                }\r\n\r\n                if (this.state.combatSetup.mapID) {\r\n                    const map = folio.maps.find(m => m.id === this.state.combatSetup.mapID);\r\n                    if (map) {\r\n                        thumbnailSection = (\r\n                            <MapPanel\r\n                                map={map}\r\n                                mode='thumbnail'\r\n                            />\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='heading'>map</div>\r\n                <Dropdown\r\n                    options={folioOptions}\r\n                    placeholder='select map folio...'\r\n                    selectedID={this.state.combatSetup.folioID ? this.state.combatSetup.folioID : undefined}\r\n                    select={optionID => this.setFolioID(optionID)}\r\n                />\r\n                {selectMapSection}\r\n                {thumbnailSection}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getWaveSection() {\r\n        if (this.state.combatSetup.encounterID === null) {\r\n            return (\r\n                <div className='section'>you have not selected an encounter</div>\r\n            );\r\n        }\r\n\r\n        const selectedEncounter = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n        if (selectedEncounter) {\r\n            if (selectedEncounter.waves.length === 0) {\r\n                return (\r\n                    <div className='section'>you have not defined any waves</div>\r\n                );\r\n            }\r\n\r\n            const waveOptions = selectedEncounter.waves.map(wave => {\r\n                return {\r\n                    id: wave.id,\r\n                    text: wave.name || 'unnamed wave'\r\n                };\r\n            });\r\n\r\n            let waveContent = null;\r\n            if (this.state.combatSetup.waveID) {\r\n                const selectedWave = selectedEncounter.waves.find(w => w.id === this.state.combatSetup.waveID);\r\n                if (selectedWave) {\r\n                    const monsterSections = selectedWave.slots.map(slot => {\r\n                        let name = slot.monsterName || 'unnamed monster';\r\n                        if (slot.count > 1) {\r\n                            name += ' (x' + slot.count + ')';\r\n                        }\r\n                        return (\r\n                            <li key={slot.id}>{name}</li>\r\n                        );\r\n                    });\r\n\r\n                    if (monsterSections.length === 0) {\r\n                        monsterSections.push(\r\n                            <li key={'empty'}>no monsters</li>\r\n                        );\r\n                    }\r\n\r\n                    waveContent = (\r\n                        <div>\r\n                            <div className='subheading'>monsters</div>\r\n                            <ul>{monsterSections}</ul>\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n\r\n            return (\r\n                <div>\r\n                    <div className='heading'>wave</div>\r\n                    <Dropdown\r\n                        options={waveOptions}\r\n                        placeholder='select wave...'\r\n                        selectedID={this.state.combatSetup.waveID ? this.state.combatSetup.waveID : undefined}\r\n                        select={optionID => this.setWave(optionID)}\r\n                    />\r\n                    {waveContent}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private getDifficultySection() {\r\n        const party = this.props.parties.find(p => p.id === this.state.combatSetup.partyID);\r\n        const encounter = this.props.encounters.find(enc => enc.id === this.state.combatSetup.encounterID);\r\n\r\n        if (party && encounter) {\r\n            return (\r\n                <div>\r\n                    <div className='heading'>encounter difficulty</div>\r\n                    <DifficultyChartPanel\r\n                        party={party}\r\n                        encounter={encounter}\r\n                        getMonster={(monsterName, monsterGroupName) => this.props.getMonster(monsterName, monsterGroupName)}\r\n                    />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='heading'>encounter difficulty</div>\r\n                <div className='section'>select a party and an encounter on the left to see difficulty information.</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getMonsterSection() {\r\n        if (this.state.combatSetup.encounterID === null) {\r\n            return (\r\n                <div>\r\n                    <div className='heading'>monsters</div>\r\n                    <div className='section'>select an encounter to see monster options here.</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (!this.props.parties && this.state.combatSetup.waveID === null) {\r\n            return (\r\n                <div>\r\n                    <div className='heading'>monsters</div>\r\n                    <div className='section'>select a wave to see monster options here.</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        const selectedEncounter = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n        if (selectedEncounter) {\r\n            let slotsContainer: { slots: EncounterSlot[] } = selectedEncounter;\r\n            if (this.state.combatSetup.waveID) {\r\n                const selectedWave = selectedEncounter.waves.find(w => w.id === this.state.combatSetup.waveID);\r\n                if (selectedWave) {\r\n                    slotsContainer = selectedWave;\r\n                }\r\n            }\r\n\r\n            if (slotsContainer.slots.length === 0) {\r\n                return null;\r\n            }\r\n\r\n            const initOptions = [\r\n                {\r\n                    id: 'manual',\r\n                    text: 'enter manually'\r\n                },\r\n                {\r\n                    id: 'individual',\r\n                    text: 'roll individually'\r\n                },\r\n                {\r\n                    id: 'group',\r\n                    text: 'roll in groups'\r\n                }\r\n            ];\r\n\r\n            const names = this.state.combatSetup.monsterNames.map(slotNames => {\r\n                const slot = slotsContainer.slots.find(s => s.id === slotNames.id);\r\n                if (slot) {\r\n                    const inputs = [];\r\n                    for (let n = 0; n !== slotNames.names.length; ++n) {\r\n                        inputs.push(\r\n                            <div key={n}>\r\n                                <MonsterName\r\n                                    value={slotNames.names[n]}\r\n                                    slotID={slot.id}\r\n                                    index={n}\r\n                                    changeName={(slotID, index, value) => this.changeName(slotID, index, value)}\r\n                                />\r\n                            </div>\r\n                        );\r\n                    }\r\n                    return (\r\n                        <div key={slotNames.id} className='name-row'>\r\n                            <div className='name-label'>\r\n                                {slot.monsterName}\r\n                            </div>\r\n                            <div className='name-inputs'>\r\n                                {inputs}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n                return null;\r\n            });\r\n\r\n            return (\r\n                <div>\r\n                    <div className='heading'>monsters</div>\r\n                    <div className='subheading'>initiative</div>\r\n                    <Selector\r\n                        options={initOptions}\r\n                        selectedID={this.state.combatSetup.encounterInitMode}\r\n                        select={optionID => this.setEncounterInitMode(optionID as 'manual' | 'individual' | 'group')}\r\n                    />\r\n                    <div className='subheading'>names</div>\r\n                    <div>{names}</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    public render() {\r\n        try {\r\n            let leftSection = null;\r\n            let rightSection = null;\r\n\r\n            if (this.props.parties) {\r\n                leftSection = (\r\n                    <div>\r\n                        {this.getPartySection()}\r\n                        {this.getEncounterSection()}\r\n                        {this.getMapSection()}\r\n                    </div>\r\n                );\r\n\r\n                rightSection = (\r\n                    <div>\r\n                        {this.getDifficultySection()}\r\n                        {this.getMonsterSection()}\r\n                    </div>\r\n                );\r\n            } else {\r\n                leftSection = (\r\n                    <div>\r\n                        {this.getWaveSection()}\r\n                    </div>\r\n                );\r\n\r\n                rightSection = (\r\n                    <div>\r\n                        {this.getMonsterSection()}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='row' style={{ height: '100%', margin: '0 -15px' }}>\r\n                    <div className='column small-6 medium-6 large-6 scrollable'>\r\n                        {leftSection}\r\n                    </div>\r\n                    <div className='column small-6 medium-6 large-6 scrollable'>\r\n                        {rightSection}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface MonsterNameProps {\r\n    slotID: string;\r\n    index: number;\r\n    value: string;\r\n    changeName: (slotID: string, index: number, value: string) => void;\r\n}\r\n\r\nclass MonsterName extends React.Component<MonsterNameProps> {\r\n    public render() {\r\n        return (\r\n            <input type='text' value={this.props.value} onChange={event => this.props.changeName(this.props.slotID, this.props.index, event.target.value)} />\r\n        );\r\n    }\r\n}\r\n","export interface Condition {\r\n    id: string;\r\n    name: string;\r\n    level: number;\r\n    text: string | null;\r\n    duration: ConditionDurationSaves | ConditionDurationCombatant | ConditionDurationRounds | null;\r\n}\r\n\r\nexport interface ConditionDurationSaves {\r\n    type: 'saves';\r\n    count: number;\r\n    saveType: 'str' | 'dex' | 'con' | 'int' | 'wis' | 'cha' | 'death';\r\n    saveDC: number;\r\n    point: 'start' | 'end';\r\n}\r\n\r\nexport interface ConditionDurationCombatant {\r\n    type: 'combatant';\r\n    point: 'start' | 'end';\r\n    combatantID: string | null;\r\n}\r\n\r\nexport interface ConditionDurationRounds {\r\n    type: 'rounds';\r\n    count: number;\r\n}\r\n\r\nexport const CONDITION_TYPES = [\r\n    'blinded',\r\n    'charmed',\r\n    'deafened',\r\n    'exhaustion',\r\n    'frightened',\r\n    'grappled',\r\n    'incapacitated',\r\n    'invisible',\r\n    'paralyzed',\r\n    'petrified',\r\n    'poisoned',\r\n    'prone',\r\n    'restrained',\r\n    'stunned',\r\n    'unconscious',\r\n    'custom'\r\n];\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    items: { id: string; text: string; details: JSX.Element | string; disabled?: boolean }[];\r\n    selectedItemID: string | null;\r\n    select: (itemID: string) => void;\r\n}\r\n\r\nexport default class RadioGroup extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        // No default property values\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            const content = this.props.items.map(item => {\r\n                return (\r\n                    <RadioGroupItem\r\n                        key={item.id}\r\n                        item={item}\r\n                        selected={this.props.selectedItemID === item.id}\r\n                        select={(itemID: string) => this.props.select(itemID)}\r\n                    />\r\n                );\r\n            });\r\n\r\n            return (\r\n                <div className='radio-group'>\r\n                    {content}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface RadioGroupItemProps {\r\n    item: { id: string; text: string; details: JSX.Element | string; disabled?: boolean };\r\n    selected: boolean;\r\n    select: (itemID: string) => void;\r\n}\r\n\r\nclass RadioGroupItem extends React.Component<RadioGroupItemProps> {\r\n    public render() {\r\n        let style = 'radio-item';\r\n        let details = null;\r\n\r\n        if (this.props.selected) {\r\n            style += ' selected';\r\n            details = (\r\n                <div className='radio-item-details'>\r\n                    {this.props.item.details}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (this.props.item.disabled) {\r\n            style += ' disabled';\r\n        }\r\n\r\n        return (\r\n            <div className={style} onClick={() => this.props.select(this.props.item.id)}>\r\n                <div className='radio-item-text'>{this.props.item.text}</div>\r\n                {details}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Factory from '../../utils/factory';\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combat, Combatant } from '../../models/combat';\r\nimport { Condition, CONDITION_TYPES, ConditionDurationCombatant, ConditionDurationSaves } from '../../models/condition';\r\nimport { Monster } from '../../models/monster-group';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport RadioGroup from '../controls/radio-group';\r\nimport Selector from '../controls/selector';\r\nimport Spin from '../controls/spin';\r\n\r\ninterface Props {\r\n    condition: Condition;\r\n    combatant: Combatant & Monster;\r\n    combat: Combat;\r\n}\r\n\r\ninterface State {\r\n    condition: Condition;\r\n}\r\n\r\nexport default class ConditionModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            condition: props.condition\r\n        };\r\n    }\r\n\r\n    private setCondition(conditionName: string) {\r\n        // eslint-disable-next-line\r\n        this.state.condition.name = conditionName;\r\n        // eslint-disable-next-line\r\n        this.state.condition.level = 1;\r\n        // eslint-disable-next-line\r\n        this.state.condition.text = conditionName === 'custom' ? 'custom condition' : null;\r\n\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    private setDuration(durationType: 'saves' | 'combatant' | 'rounds') {\r\n        let duration = null;\r\n\r\n        switch (durationType) {\r\n            case 'saves':\r\n                duration = Factory.createConditionDurationSaves();\r\n                break;\r\n            case 'combatant':\r\n                duration = Factory.createConditionDurationCombatant();\r\n                duration.combatantID = this.props.combatant.id;\r\n                break;\r\n            case 'rounds':\r\n                duration = Factory.createConditionDurationRounds();\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        // eslint-disable-next-line\r\n        this.state.condition.duration = duration;\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    private changeValue(object: any, field: string, value: any) {\r\n        object[field] = value;\r\n\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    private nudgeValue(object: any, field: string, delta: number) {\r\n        let value = object[field] + delta;\r\n        if (field === 'level') {\r\n            value = Math.max(value, 1);\r\n            value = Math.min(value, 6);\r\n        }\r\n        if (field === 'count') {\r\n            value = Math.max(value, 1);\r\n        }\r\n        if (field === 'saveDC') {\r\n            value = Math.max(value, 0);\r\n        }\r\n        object[field] = value;\r\n\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const conditions = CONDITION_TYPES.map(condition => {\r\n                const controls = [];\r\n                const description = [];\r\n                if (condition === this.state.condition.name) {\r\n                    if (condition === 'custom') {\r\n                        controls.push(\r\n                            <input\r\n                                type='text'\r\n                                placeholder='custom condition'\r\n                                value={this.state.condition.text ? this.state.condition.text : ''}\r\n                                onChange={event => this.changeValue(this.state.condition, 'text', event.target.value)}\r\n                            />\r\n                        );\r\n                    }\r\n                    if (condition === 'exhaustion') {\r\n                        controls.push(\r\n                            <Spin\r\n                                key='exhaustion-spin'\r\n                                source={this.props.condition}\r\n                                name='level'\r\n                                label='exhaustion'\r\n                                nudgeValue={delta => this.nudgeValue(this.props.condition, 'level', delta)}\r\n                            />\r\n                        );\r\n                    }\r\n                    const text = Utils.conditionText(this.state.condition);\r\n                    for (let n = 0; n !== text.length; ++n) {\r\n                        description.push(<li key={n} className='section'>{text[n]}</li>);\r\n                    }\r\n                }\r\n\r\n                return {\r\n                    id: condition,\r\n                    text: condition,\r\n                    details: (\r\n                        <div key={condition}>\r\n                            {controls}\r\n                            <ul>\r\n                                {description}\r\n                            </ul>\r\n                        </div>\r\n                    ),\r\n                    disabled: this.props.combatant.conditionImmunities ? this.props.combatant.conditionImmunities.indexOf(condition) !== -1 : false\r\n                };\r\n            });\r\n\r\n            const saveOptions = ['str', 'dex', 'con', 'int', 'wis', 'cha', 'death'].map(c => ({ id: c, text: c }));\r\n            const pointOptions = [\r\n                {\r\n                    id: 'start',\r\n                    text: 'start of turn'\r\n                },\r\n                {\r\n                    id: 'end',\r\n                    text: 'end of turn'\r\n                }\r\n            ];\r\n            const combatantOptions = this.props.combat.combatants.map(c => ({ id: c.id, text: (c.displayName || c.name || 'unnamed monster') }));\r\n\r\n            const durations = [\r\n                {\r\n                    id: 'none',\r\n                    text: 'until removed (default)',\r\n                    details: (\r\n                        <div className='section'>\r\n                            <div>the condition persists until it is manually removed</div>\r\n                        </div>\r\n                    )\r\n                },\r\n                {\r\n                    id: 'saves',\r\n                    text: 'until a successful save',\r\n                    details: (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>number of saves required</div>\r\n                                <Spin\r\n                                    source={this.props.condition.duration}\r\n                                    name='count'\r\n                                    nudgeValue={delta => this.nudgeValue(this.props.condition.duration, 'count', delta)}\r\n                                />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>save dc</div>\r\n                                <Spin\r\n                                    source={this.props.condition.duration}\r\n                                    name='saveDC'\r\n                                    nudgeValue={delta => this.nudgeValue(this.props.condition.duration, 'saveDC', delta)}\r\n                                />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>type of save</div>\r\n                                <Selector\r\n                                    options={saveOptions}\r\n                                    selectedID={\r\n                                        (this.props.condition.duration as ConditionDurationSaves)\r\n                                        ? (this.props.condition.duration as ConditionDurationSaves).saveType\r\n                                        : null\r\n                                    }\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, 'saveType', optionID)}\r\n                                />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>make the save at the start or end of the turn</div>\r\n                                <Selector\r\n                                    options={pointOptions}\r\n                                    selectedID={\r\n                                        (this.props.condition.duration as ConditionDurationSaves)\r\n                                        ? (this.props.condition.duration as ConditionDurationSaves).point\r\n                                        : null\r\n                                    }\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, 'point', optionID)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                },\r\n                {\r\n                    id: 'combatant',\r\n                    text: 'until someone\\'s next turn',\r\n                    details: (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>combatant</div>\r\n                                <Dropdown\r\n                                    options={combatantOptions}\r\n                                    selectedID={\r\n                                        (this.props.condition.duration as ConditionDurationCombatant)\r\n                                        ? (this.props.condition.duration as ConditionDurationCombatant).combatantID || undefined\r\n                                        : undefined\r\n                                    }\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, 'combatantID', optionID)}\r\n                                />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>start or end of the turn</div>\r\n                                <Selector\r\n                                    options={pointOptions}\r\n                                    selectedID={\r\n                                        (this.props.condition.duration as ConditionDurationCombatant)\r\n                                        ? (this.props.condition.duration as ConditionDurationCombatant).point\r\n                                        : null\r\n                                    }\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, 'point', optionID)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                },\r\n                {\r\n                    id: 'rounds',\r\n                    text: 'for a number of rounds',\r\n                    details: (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>number of rounds</div>\r\n                                <Spin\r\n                                    source={this.props.condition.duration}\r\n                                    name='count'\r\n                                    nudgeValue={delta => this.nudgeValue(this.props.condition.duration, 'count', delta)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }\r\n            ];\r\n\r\n            return (\r\n                <div className='condition-modal'>\r\n                    <div className='row' style={{ height: '100%' }}>\r\n                        <div className='columns small-6 medium-6 large-6 scrollable'>\r\n                            <div className='heading'>condition</div>\r\n                            <RadioGroup\r\n                                items={conditions}\r\n                                selectedItemID={this.state.condition.name}\r\n                                select={itemID => this.setCondition(itemID)}\r\n                            />\r\n                        </div>\r\n                        <div className='columns small-6 medium-6 large-6 scrollable'>\r\n                            <div className='heading'>duration</div>\r\n                            <RadioGroup\r\n                                items={durations}\r\n                                selectedItemID={this.state.condition.duration ? this.state.condition.duration.type : 'none'}\r\n                                select={itemID => this.setDuration(itemID as 'saves' | 'combatant' | 'rounds')}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { CATEGORY_TYPES, Monster, MonsterGroup, SIZE_TYPES } from '../../models/monster-group';\r\n\r\nimport Selector from '../controls/selector';\r\n\r\ninterface Props {\r\n    library: MonsterGroup[];\r\n}\r\n\r\ninterface State {\r\n    chart: string;\r\n}\r\n\r\nexport default class DemographicsModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            chart: 'challenge'\r\n        };\r\n    }\r\n\r\n    private selectChart(chart: string) {\r\n        this.setState({\r\n            chart: chart\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let demographics = null;\r\n\r\n            const allMonsters: Monster[] = [];\r\n            this.props.library.forEach(group => group.monsters.forEach(monster => allMonsters.push(monster)));\r\n            if (allMonsters.length !== 0) {\r\n                const buckets: { value: any, title: string }[] = [];\r\n                let maxBucketSize = 0;\r\n                const monsters: { [key: string]: Monster[] } = {};\r\n\r\n                switch (this.state.chart) {\r\n                    case 'challenge':\r\n                        const challenges = [\r\n                            0, 0.125, 0.25, 0.5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30\r\n                        ];\r\n                        challenges.forEach(cr => {\r\n                            buckets.push({\r\n                                value: cr,\r\n                                title: 'challenge ' + Utils.challenge(cr)\r\n                            });\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const cr = bucket.value;\r\n                            monsters[cr.toString()] = allMonsters.filter(monster => monster.challenge === cr);\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const cr = bucket.value;\r\n                            maxBucketSize = Math.max(monsters[cr].length, maxBucketSize);\r\n                        });\r\n                        break;\r\n                    case 'size':\r\n                        SIZE_TYPES.forEach(size => {\r\n                            buckets.push({\r\n                                value: size,\r\n                                title: size\r\n                            });\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const size = bucket.value;\r\n                            monsters[size.toString()] = allMonsters.filter(monster => monster.size === size);\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const size = bucket.value;\r\n                            maxBucketSize = Math.max(monsters[size].length, maxBucketSize);\r\n                        });\r\n                        break;\r\n                    case 'type':\r\n                        CATEGORY_TYPES.forEach(type => {\r\n                            buckets.push({\r\n                                value: type,\r\n                                title: type\r\n                            });\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const type = bucket.value;\r\n                            monsters[type.toString()] = allMonsters.filter(monster => monster.category === type);\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const type = bucket.value;\r\n                            maxBucketSize = Math.max(monsters[type].length, maxBucketSize);\r\n                        });\r\n                        break;\r\n                    default:\r\n                        // Do nothing\r\n                        break;\r\n                }\r\n\r\n                const bars = [];\r\n                for (let index = 0; index !== buckets.length; ++index) {\r\n                    const bucket = buckets[index];\r\n                    const set = monsters[bucket.value];\r\n                    const count = set ? set.length : 0;\r\n                    bars.push(\r\n                        <div\r\n                            key={bucket.title}\r\n                            className='bar-container'\r\n                            title={bucket.title + ': ' + set.length + ' monsters'}\r\n                        >\r\n                            <div\r\n                                className='bar'\r\n                                style={{\r\n                                    width: 'calc((100% - 1px) * ' + count + ' / ' + maxBucketSize + ')'\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                const chartOptions = [\r\n                    {\r\n                        id: 'challenge',\r\n                        text: 'challenge rating'\r\n                    },\r\n                    {\r\n                        id: 'size',\r\n                        text: 'size'\r\n                    },\r\n                    {\r\n                        id: 'type',\r\n                        text: 'type'\r\n                    }\r\n                ];\r\n\r\n                demographics = (\r\n                    <div>\r\n                        <div className='heading'>monster demographics</div>\r\n                        <Selector\r\n                            options={chartOptions}\r\n                            selectedID={this.state.chart}\r\n                            select={optionID => this.selectChart(optionID)}\r\n                        />\r\n                        <div className='chart'>\r\n                            <div className='plot'>{bars}</div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return demographics;\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","export interface MapFolio {\r\n    id: string;\r\n    name: string;\r\n    maps: Map[];\r\n}\r\n\r\nexport interface Map {\r\n    id: string;\r\n    name: string;\r\n    items: MapItem[];\r\n}\r\n\r\nexport interface MapItem {\r\n    id: string;\r\n    type: 'tile' | 'pc' | 'monster';\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n    terrain: string | null;\r\n    style: 'square' | 'rounded' | 'circle' | null;\r\n}\r\n\r\nexport const TERRAIN_TYPES = [\r\n    'cavern',\r\n    'dirt',\r\n    'flagstone',\r\n    'floorboard',\r\n    'grassland',\r\n    'pit',\r\n    'sand',\r\n    'snow',\r\n    'water'\r\n];\r\n","import React from 'react';\r\n\r\nimport { MapItem, TERRAIN_TYPES } from '../../models/map-folio';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport Radial from '../controls/radial';\r\nimport Selector from '../controls/selector';\r\n\r\ninterface Props {\r\n    tile: MapItem;\r\n    changeValue: (tile: MapItem, field: string, value: string) => void;\r\n    moveMapItem: (tile: MapItem, dir: string) => void;\r\n    resizeMapItem: (tile: MapItem, dir: string, dir2: 'in' | 'out' | null) => void;\r\n    cloneMapItem: (tile: MapItem) => void;\r\n    removeMapItem: (tile: MapItem) => void;\r\n}\r\n\r\nexport default class MapTileCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const terrainOptions = TERRAIN_TYPES.map(t => {\r\n                return { id: t, text: t };\r\n            });\r\n\r\n            const styleOptions = ['square', 'rounded', 'circle'].map(t => {\r\n                return { id: t, text: t };\r\n            });\r\n\r\n            return (\r\n                <div className='card map-tile'>\r\n                    <div className='heading'>\r\n                        <div className='title'>map tile</div>\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        <div className='subheading'>size</div>\r\n                        <div className='section'>{this.props.tile.width} sq x {this.props.tile.height} sq</div>\r\n                        <div className='section'>{this.props.tile.width * 5} ft x {this.props.tile.height * 5} ft</div>\r\n                        <div className='divider' />\r\n                        <div className='subheading'>terrain</div>\r\n                        <Dropdown\r\n                            options={terrainOptions}\r\n                            placeholder='select terrain'\r\n                            selectedID={this.props.tile.terrain ? this.props.tile.terrain : undefined}\r\n                            select={optionID => this.props.changeValue(this.props.tile, 'terrain', optionID)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <div className='subheading'>style</div>\r\n                        <Selector\r\n                            options={styleOptions}\r\n                            selectedID={this.props.tile.style}\r\n                            select={optionID => this.props.changeValue(this.props.tile, 'style', optionID)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <div className='subheading'>move</div>\r\n                        <div className='section centered'>\r\n                            <Radial direction='out' click={dir => this.props.moveMapItem(this.props.tile, dir)} />\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='subheading'>resize</div>\r\n                        <div className='section centered'>\r\n                            <Radial direction='both' click={(dir, dir2) => this.props.resizeMapItem(this.props.tile, dir, dir2)} />\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='section'>\r\n                            <button onClick={() => this.props.cloneMapItem(this.props.tile)}>clone tile</button>\r\n                            <button onClick={() => this.props.removeMapItem(this.props.tile)}>remove tile</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Factory from '../../utils/factory';\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Map, MapItem } from '../../models/map-folio';\r\n\r\nimport MapTileCard from '../cards/map-tile-card';\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    map: Map;\r\n}\r\n\r\ninterface State {\r\n    map: Map;\r\n    selectedTileID: string | null;\r\n    addingTile: boolean;\r\n}\r\n\r\nexport default class MapEditorModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            map: props.map,\r\n            selectedTileID: null,\r\n            addingTile: false\r\n        };\r\n    }\r\n\r\n    private setSelectedTileID(id: string | null) {\r\n        this.setState({\r\n            selectedTileID: id\r\n        });\r\n    }\r\n\r\n    private toggleAddingTile() {\r\n        this.setState({\r\n            addingTile: !this.state.addingTile\r\n        });\r\n    }\r\n\r\n    private addMapTile(x: number, y: number) {\r\n        const tile = Factory.createMapItem();\r\n        tile.x = x;\r\n        tile.y = y;\r\n        tile.terrain = 'flagstone';\r\n        this.state.map.items.push(tile);\r\n\r\n        this.setState({\r\n            map: this.state.map,\r\n            selectedTileID: tile.id,\r\n            addingTile: false\r\n        });\r\n    }\r\n\r\n    private moveMapItem(item: MapItem, dir: string) {\r\n        switch (dir) {\r\n            case 'N':\r\n                item.y -= 1;\r\n                break;\r\n            case 'E':\r\n                item.x += 1;\r\n                break;\r\n            case 'S':\r\n                item.y += 1;\r\n                break;\r\n            case 'W':\r\n                item.x -= 1;\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    private bigMapItem(item: MapItem, dir: string) {\r\n        switch (dir) {\r\n            case 'N':\r\n                item.y -= 1;\r\n                item.height += 1;\r\n                break;\r\n            case 'E':\r\n                item.width += 1;\r\n                break;\r\n            case 'S':\r\n                item.height += 1;\r\n                break;\r\n            case 'W':\r\n                item.x -= 1;\r\n                item.width += 1;\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    private smallMapItem(item: MapItem, dir: string) {\r\n        switch (dir) {\r\n            case 'N':\r\n                if (item.height > 1) {\r\n                    item.y += 1;\r\n                    item.height -= 1;\r\n                }\r\n                break;\r\n            case 'E':\r\n                if (item.width > 1) {\r\n                    item.width -= 1;\r\n                }\r\n                break;\r\n            case 'S':\r\n                if (item.height > 1) {\r\n                    item.height -= 1;\r\n                }\r\n                break;\r\n            case 'W':\r\n                if (item.width > 1) {\r\n                    item.x += 1;\r\n                    item.width -= 1;\r\n                }\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    private resizeMapItem(item: MapItem, dir: string, dir2: 'in' | 'out') {\r\n        switch (dir2) {\r\n            case 'in':\r\n                this.smallMapItem(item, dir);\r\n                break;\r\n            case 'out':\r\n                this.bigMapItem(item, dir);\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n    }\r\n\r\n    private cloneMapItem(item: MapItem) {\r\n        const copy = JSON.parse(JSON.stringify(item));\r\n        copy.id = Utils.guid();\r\n        copy.x += 1;\r\n        copy.y += 1;\r\n        this.state.map.items.push(copy);\r\n\r\n        this.setState({\r\n            map: this.state.map,\r\n            selectedTileID: copy.id\r\n        });\r\n    }\r\n\r\n    private removeMapItem(item: MapItem) {\r\n        const index = this.state.map.items.indexOf(item);\r\n        this.state.map.items.splice(index, 1);\r\n\r\n        this.setState({\r\n            map: this.state.map,\r\n            selectedTileID: null\r\n        });\r\n    }\r\n\r\n    private changeValue(source: any, field: string, value: any) {\r\n        source[field] = value;\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const addBtn = (\r\n                <button onClick={() => this.toggleAddingTile()}>\r\n                    {this.state.addingTile ? 'click somewhere on the map to add your new tile, or click here to cancel' : 'add a new tile'}\r\n                </button>\r\n            );\r\n            let tools = null;\r\n            if (this.state.selectedTileID) {\r\n                const item = this.state.map.items.find(i => i.id === this.state.selectedTileID);\r\n                if (item) {\r\n                    tools = (\r\n                        <div className='tools'>\r\n                            <MapTileCard\r\n                                tile={item}\r\n                                moveMapItem={(mapItem, dir) => this.moveMapItem(mapItem, dir)}\r\n                                resizeMapItem={(mapItem, dir, dir2) => this.resizeMapItem(mapItem, dir, dir2 as 'in' | 'out')}\r\n                                cloneMapItem={mapItem => this.cloneMapItem(mapItem)}\r\n                                removeMapItem={mapItem => this.removeMapItem(mapItem)}\r\n                                changeValue={(source, field, value) => this.changeValue(source, field, value)}\r\n                            />\r\n                            {addBtn}\r\n                        </div>\r\n                    );\r\n                }\r\n            } else {\r\n                tools = (\r\n                    <div className='tools'>\r\n                        <p>to add a new tile to the map, click on the button below</p>\r\n                        <p>to edit an existing tile, click on it once to select it</p>\r\n                        <div className='divider' />\r\n                        {addBtn}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='map-editor'>\r\n                    {tools}\r\n                    <MapPanel\r\n                        map={this.state.map}\r\n                        mode='edit'\r\n                        selectedItemID={this.state.selectedTileID ? this.state.selectedTileID : undefined}\r\n                        showOverlay={this.state.addingTile}\r\n                        setSelectedItemID={id => this.setSelectedTileID(id)}\r\n                        gridSquareClicked={(x, y) => this.addMapTile(x, y)}\r\n                    />\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Frankenstein from '../../utils/frankenstein';\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { CATEGORY_TYPES, Monster, MonsterGroup, SIZE_TYPES, Trait, TRAIT_TYPES } from '../../models/monster-group';\r\n\r\nimport FilterCard from '../cards/filter-card';\r\nimport MonsterCard from '../cards/monster-card';\r\nimport Checkbox from '../controls/checkbox';\r\nimport Dropdown from '../controls/dropdown';\r\nimport Expander from '../controls/expander';\r\nimport Selector from '../controls/selector';\r\nimport Spin from '../controls/spin';\r\nimport AbilityScorePanel from '../panels/ability-score-panel';\r\nimport TraitsPanel from '../panels/traits-panel';\r\n\r\nimport Note from '../panels/note';\r\n\r\ninterface Props {\r\n    monster: Monster;\r\n    library: MonsterGroup[];\r\n    showSidebar: boolean;\r\n}\r\n\r\ninterface State {\r\n    monster: Monster;\r\n    page: 'overview' | 'abilities' | 'cbt-stats' | 'actions';\r\n    showFilter: boolean;\r\n    helpSection: string;\r\n    sidebar: 'similar' | 'scratchpad';\r\n    similarFilter: {\r\n        size: boolean,\r\n        type: boolean,\r\n        subtype: boolean,\r\n        alignment: boolean,\r\n        challenge: boolean,\r\n        text: string\r\n    };\r\n    scratchpadFilter: {\r\n        name: string,\r\n        challengeMin: number;\r\n        challengeMax: number;\r\n        category: string;\r\n        size: string;\r\n    };\r\n    scratchpadList: Monster[];\r\n}\r\n\r\nexport default class MonsterEditorModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            monster: props.monster,\r\n            page: 'overview',\r\n            showFilter: false,\r\n            helpSection: 'speed',\r\n            sidebar: 'similar',\r\n            similarFilter: {\r\n                size: true,\r\n                type: true,\r\n                subtype: false,\r\n                alignment: false,\r\n                challenge: true,\r\n                text: ''\r\n            },\r\n            scratchpadFilter: {\r\n                name: '',\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: 'all types',\r\n                size: 'all sizes'\r\n            },\r\n            scratchpadList: []\r\n        };\r\n    }\r\n\r\n    private setPage(page: 'overview' | 'abilities' | 'cbt-stats' | 'actions') {\r\n        const sections = this.getHelpOptionsForPage(page);\r\n        this.setState({\r\n            page: page,\r\n            helpSection: sections[0]\r\n        });\r\n    }\r\n\r\n    private toggleFilter() {\r\n        this.setState({\r\n            showFilter: !this.state.showFilter\r\n        });\r\n    }\r\n\r\n    private setHelpSection(section: string) {\r\n        this.setState({\r\n            helpSection: section\r\n        });\r\n    }\r\n\r\n    private toggleMatch(type: 'size' | 'type' | 'subtype' | 'alignment' | 'challenge') {\r\n        // eslint-disable-next-line\r\n        this.state.similarFilter[type] = !this.state.similarFilter[type];\r\n        this.setState({\r\n            similarFilter: this.state.similarFilter\r\n        });\r\n    }\r\n\r\n    private setFilterText(value: string) {\r\n        // eslint-disable-next-line\r\n        this.state.similarFilter.text = value;\r\n        this.setState({\r\n            similarFilter: this.state.similarFilter\r\n        });\r\n    }\r\n\r\n    private addToScratchpadList(monster: Monster) {\r\n        // eslint-disable-next-line\r\n        this.state.scratchpadList.push(monster);\r\n        // eslint-disable-next-line\r\n        Utils.sort(this.state.scratchpadList);\r\n        this.setState({\r\n            scratchpadList: this.state.scratchpadList\r\n        });\r\n    }\r\n\r\n    private removeFromScratchpadList(monster: Monster) {\r\n        const index = this.state.scratchpadList.indexOf(monster);\r\n        this.state.scratchpadList.splice(index, 1);\r\n        this.setState({\r\n            scratchpadList: this.state.scratchpadList\r\n        });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Helper methods\r\n\r\n    private getHelpOptionsForPage(page: 'overview' | 'abilities' | 'cbt-stats' | 'actions') {\r\n        switch (page) {\r\n            case 'overview':\r\n                return ['speed', 'senses', 'languages', 'equipment'];\r\n            case 'abilities':\r\n                return ['str', 'dex', 'con', 'int', 'wis', 'cha', 'saves', 'skills'];\r\n            case 'cbt-stats':\r\n                return ['armor class', 'hit dice', 'resistances', 'vulnerabilities', 'immunities', 'conditions'];\r\n            case 'actions':\r\n                return ['actions'];\r\n            default:\r\n                return [];\r\n        }\r\n    }\r\n\r\n    private getMonsters() {\r\n        const monsters: Monster[] = [];\r\n        this.props.library.forEach(group => {\r\n            group.monsters.forEach(monster => {\r\n                let match = true;\r\n\r\n                if (this.state.monster.id === monster.id) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.similarFilter.size && (this.state.monster.size !== monster.size)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.similarFilter.type && (this.state.monster.category !== monster.category)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.similarFilter.subtype && (this.state.monster.tag !== monster.tag)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.similarFilter.alignment && (this.state.monster.alignment !== monster.alignment)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.similarFilter.challenge && (this.state.monster.challenge !== monster.challenge)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (match) {\r\n                    monsters.push(monster);\r\n                }\r\n            });\r\n        });\r\n\r\n        return monsters;\r\n    }\r\n\r\n    private setRandomValue(field: string, monsters: Monster[]) {\r\n        Frankenstein.setRandomValue(this.state.monster, field, monsters);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private spliceMonsters(monsters: Monster[]) {\r\n        Frankenstein.spliceMonsters(this.state.monster, monsters);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private addTrait(type: 'trait' | 'action' | 'legendary' | 'lair') {\r\n        Frankenstein.addTrait(this.state.monster, type);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private addRandomTrait(type: string, monsters: Monster[]) {\r\n        Frankenstein.addRandomTrait(this.state.monster, type, monsters);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private removeTrait(trait: Trait) {\r\n        Frankenstein.removeTrait(this.state.monster, trait);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private swapTraits(t1: Trait, t2: Trait) {\r\n        Frankenstein.swapTraits(this.state.monster, t1, t2);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private copyTrait(trait: Trait) {\r\n        Frankenstein.copyTrait(this.state.monster, trait);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private changeTrait(trait: Trait, field: string, value: any) {\r\n        (trait as any)[field] = value;\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private nudgeValue(field: string, delta: number) {\r\n        Frankenstein.nudgeValue(this.state.monster, field, delta);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private changeValue(field: string, value: any) {\r\n        Frankenstein.changeValue(this.state.monster, field, value);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private changeFilterValue(type: 'name' | 'challengeMin' | 'challengeMax' | 'category' | 'size', value: any) {\r\n        // eslint-disable-next-line\r\n        this.state.scratchpadFilter[type] = value;\r\n        this.setState({\r\n            scratchpadFilter: this.state.scratchpadFilter\r\n        });\r\n    }\r\n\r\n    private nudgeFilterValue(type: 'challengeMin' | 'challengeMax', delta: number) {\r\n        const value = Utils.nudgeChallenge(this.state.scratchpadFilter[type], delta);\r\n        this.changeFilterValue(type, value);\r\n    }\r\n\r\n    private resetFilter() {\r\n        this.setState({\r\n            scratchpadFilter: {\r\n                name: '',\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: 'all types',\r\n                size: 'all sizes'\r\n            }\r\n        });\r\n    }\r\n\r\n    private matchMonster(monster: Monster) {\r\n        if (monster.challenge < this.state.scratchpadFilter.challengeMin) {\r\n            return false;\r\n        }\r\n\r\n        if (monster.challenge > this.state.scratchpadFilter.challengeMax) {\r\n            return false;\r\n        }\r\n\r\n        if (this.state.scratchpadFilter.name !== '') {\r\n            if (!Utils.match(this.state.scratchpadFilter.name, monster.name)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.scratchpadFilter.category !== 'all types') {\r\n            if (monster.category !== this.state.scratchpadFilter.category) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.scratchpadFilter.size !== 'all sizes') {\r\n            if (monster.size !== this.state.scratchpadFilter.size) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // HTML render methods\r\n\r\n    private getHelpSection(monsters: Monster[]) {\r\n        switch (this.state.helpSection) {\r\n            case 'speed':\r\n                return this.getValueSection('speed', 'text', monsters);\r\n            case 'senses':\r\n                return this.getValueSection('senses', 'text', monsters);\r\n            case 'languages':\r\n                return this.getValueSection('languages', 'text', monsters);\r\n            case 'equipment':\r\n                return this.getValueSection('equipment', 'text', monsters);\r\n            case 'str':\r\n                return this.getValueSection('abilityScores.str', 'number', monsters);\r\n            case 'dex':\r\n                return this.getValueSection('abilityScores.dex', 'number', monsters);\r\n            case 'con':\r\n                return this.getValueSection('abilityScores.con', 'number', monsters);\r\n            case 'int':\r\n                return this.getValueSection('abilityScores.int', 'number', monsters);\r\n            case 'wis':\r\n                return this.getValueSection('abilityScores.wis', 'number', monsters);\r\n            case 'cha':\r\n                return this.getValueSection('abilityScores.cha', 'number', monsters);\r\n            case 'saves':\r\n                return this.getValueSection('savingThrows', 'text', monsters);\r\n            case 'skills':\r\n                return this.getValueSection('skills', 'text', monsters);\r\n            case 'armor class':\r\n                return this.getValueSection('ac', 'number', monsters);\r\n            case 'hit dice':\r\n                return this.getValueSection('hitDice', 'number', monsters);\r\n            case 'resistances':\r\n                return this.getValueSection('damage.resist', 'text', monsters);\r\n            case 'vulnerabilities':\r\n                return this.getValueSection('damage.vulnerable', 'text', monsters);\r\n            case 'immunities':\r\n                return this.getValueSection('damage.immune', 'text', monsters);\r\n            case 'conditions':\r\n                return this.getValueSection('conditionImmunities', 'text', monsters);\r\n            case 'actions':\r\n                return this.getActionsSection(monsters);\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    private getValueSection(field: string, dataType: 'text' | 'number', monsters: Monster[]) {\r\n        const values: any[] = monsters\r\n            .map(m => {\r\n                const tokens = field.split('.');\r\n                let source: any = m;\r\n                let value = null;\r\n                tokens.forEach(token => {\r\n                    if (token === tokens[tokens.length - 1]) {\r\n                        value = source[token];\r\n                    } else {\r\n                        source = source[token];\r\n                    }\r\n                });\r\n                if ((dataType === 'text') && (value === '')) {\r\n                    value = null;\r\n                }\r\n                return value;\r\n            })\r\n            .filter(v => v !== null);\r\n\r\n        const distinct: { value: any, count: number }[] = [];\r\n        if (dataType === 'number') {\r\n            let min: number | null = null;\r\n            let max: number | null = null;\r\n            values.forEach(v => {\r\n                if ((min === null) || (v < min)) {\r\n                    min = v;\r\n                }\r\n                if ((max === null) || (v > max)) {\r\n                    max = v;\r\n                }\r\n            });\r\n            if ((min !== null) && (max !== null)) {\r\n                for (let n = min; n <= max; ++n) {\r\n                    distinct.push({\r\n                        value: n,\r\n                        count: 0\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        values.forEach(v => {\r\n            const current = distinct.find(d => d.value === v);\r\n            if (current) {\r\n                current.count += 1;\r\n            } else {\r\n                distinct.push({\r\n                    value: v,\r\n                    count: 1\r\n                });\r\n            }\r\n        });\r\n\r\n        switch (dataType) {\r\n            case 'number':\r\n                Utils.sort(distinct, [{ field: 'value', dir: 'asc' }]);\r\n                break;\r\n            case 'text':\r\n                Utils.sort(distinct, [{ field: 'count', dir: 'desc' }, { field: 'value', dir: 'asc' }]);\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        if (dataType === 'text') {\r\n            const count = monsters.length - values.length;\r\n            if (count !== 0) {\r\n                distinct.push({\r\n                    value: '',\r\n                    count: monsters.length - values.length\r\n                });\r\n            }\r\n        }\r\n\r\n        const valueSections = distinct.map(d => {\r\n            const width = 100 * d.count / monsters.length;\r\n            return (\r\n                <div className='row small-up-3 medium-up-3 large-up-3 value-list' key={distinct.indexOf(d)}>\r\n                    <div className='column'>\r\n                        <div className='text-container'>\r\n                            {d.value || '(none specified)'}\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <div className='bar-container'>\r\n                            <div className='bar' style={{ width: width + '%' }} />\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <button onClick={() => this.changeValue(field, d.value)}>use this value</button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                {valueSections}\r\n                <button onClick={() => this.setRandomValue(field, monsters)}>select random value</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getActionsSection(monsters: Monster[]) {\r\n        const rows = [];\r\n        rows.push(\r\n            <div className='row small-up-4 medium-up-4 large-up-4 value-list' key='header'>\r\n                <div className='column'>\r\n                    <div className='text-container'>\r\n                        <b>type</b>\r\n                    </div>\r\n                </div>\r\n                <div className='column'>\r\n                    <div className='text-container number'>\r\n                        <b>average number</b>\r\n                    </div>\r\n                </div>\r\n                <div className='column'>\r\n                    <div className='text-container number'>\r\n                        <b>min - max</b>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        TRAIT_TYPES.forEach(type => {\r\n            let min: number | null = null;\r\n            let max: number | null = null;\r\n            let count = 0;\r\n            monsters.forEach(m => {\r\n                const n = m.traits.filter(t => t.type === type).length;\r\n                if ((min === null) || (n < min)) {\r\n                    min = n;\r\n                }\r\n                if ((max === null) || (n > max)) {\r\n                    max = n;\r\n                }\r\n                count += n;\r\n            });\r\n            const avg = Math.round(count / monsters.length);\r\n\r\n            rows.push(\r\n                <div className='row small-up-4 medium-up-4 large-up-4 value-list' key={type}>\r\n                    <div className='column'>\r\n                        <div className={count === 0 ? 'text-container disabled' : 'text-container'}>\r\n                            {Utils.traitType(type, true)}\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <div className={count === 0 ? 'text-container number disabled' : 'text-container number'}>\r\n                            {avg}\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <div className={count === 0 ? 'text-container number disabled' : 'text-container number'}>\r\n                            {min} - {max}\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <button className={count === 0 ? 'disabled' : ''} onClick={() => this.addRandomTrait(type, monsters)}>add random</button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                {rows}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getMonsterCards(monsters: Monster[]) {\r\n        const sorted = Utils.sort(monsters);\r\n        const monsterCards = sorted.map(m => {\r\n            const showMonster = m.traits.some((t: Trait) => Utils.match(this.state.similarFilter.text, t.name));\r\n            if (showMonster) {\r\n                return (\r\n                    <div className='section' key={m.id}>\r\n                        <MonsterCard\r\n                            combatant={m}\r\n                            mode={'template ' + this.state.page}\r\n                            filter={this.state.similarFilter.text}\r\n                            copyTrait={trait => this.copyTrait(trait)}\r\n                        />\r\n                    </div>\r\n                );\r\n            } else {\r\n                return null;\r\n            }\r\n        }).filter(m => !!m);\r\n\r\n        if (monsterCards.length === 0) {\r\n            let info = '';\r\n            switch (this.state.sidebar) {\r\n                case 'similar':\r\n                    info = 'there are no monsters in your library which match the above criteria.';\r\n                    break;\r\n                case 'scratchpad':\r\n                    info = 'your scratchpad list is empty; you can add monsters to it to see their stats here.';\r\n                    break;\r\n            }\r\n\r\n            return (\r\n                <Note content={info} />\r\n            );\r\n        }\r\n\r\n        return monsterCards;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    public render() {\r\n        try {\r\n            const pages = [\r\n                {\r\n                    id: 'overview',\r\n                    text: 'overview'\r\n                },\r\n                {\r\n                    id: 'abilities',\r\n                    text: 'abilities'\r\n                },\r\n                {\r\n                    id: 'cbt-stats',\r\n                    text: 'combat'\r\n                },\r\n                {\r\n                    id: 'actions',\r\n                    text: 'actions'\r\n                }\r\n            ];\r\n\r\n            let monsters: Monster[] = [];\r\n            if (this.props.showSidebar) {\r\n                switch (this.state.sidebar) {\r\n                    case 'similar':\r\n                        monsters = this.getMonsters();\r\n                        break;\r\n                    case 'scratchpad':\r\n                        monsters = this.state.scratchpadList;\r\n                        break;\r\n                }\r\n            }\r\n\r\n            let content = null;\r\n            switch (this.state.page) {\r\n                case 'overview':\r\n                    const catOptions = CATEGORY_TYPES.map(cat => ({ id: cat, text: cat }));\r\n                    const sizeOptions = SIZE_TYPES.map(size => ({ id: size, text: size }));\r\n\r\n                    content = (\r\n                        <div className='row'>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>name</div>\r\n                                <input type='text' value={this.state.monster.name} onChange={event => this.changeValue('name', event.target.value)} />\r\n                                <div className='subheading'>size</div>\r\n                                <Dropdown\r\n                                    options={sizeOptions}\r\n                                    selectedID={this.state.monster.size}\r\n                                    select={optionID => this.changeValue('size', optionID)}\r\n                                />\r\n                                <div className='subheading'>type</div>\r\n                                <Dropdown\r\n                                    options={catOptions}\r\n                                    selectedID={this.state.monster.category}\r\n                                    select={optionID => this.changeValue('category', optionID)}\r\n                                />\r\n                                <div className='subheading'>subtype</div>\r\n                                <input type='text' value={this.state.monster.tag} onChange={event => this.changeValue('tag', event.target.value)} />\r\n                                <div className='subheading'>alignment</div>\r\n                                <input type='text' value={this.state.monster.alignment} onChange={event => this.changeValue('alignment', event.target.value)} />\r\n                            </div>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>challenge rating</div>\r\n                                <Spin\r\n                                    source={this.state.monster}\r\n                                    name='challenge'\r\n                                    display={value => Utils.challenge(value)}\r\n                                    nudgeValue={delta => this.nudgeValue('challenge', delta)}\r\n                                />\r\n                                <div className='subheading'>speed</div>\r\n                                <input type='text' value={this.state.monster.speed} onChange={event => this.changeValue('speed', event.target.value)} />\r\n                                <div className='subheading'>senses</div>\r\n                                <input type='text' value={this.state.monster.senses} onChange={event => this.changeValue('senses', event.target.value)} />\r\n                                <div className='subheading'>languages</div>\r\n                                <input type='text' value={this.state.monster.languages} onChange={event => this.changeValue('languages', event.target.value)} />\r\n                                <div className='subheading'>equipment</div>\r\n                                <input type='text' value={this.state.monster.equipment} onChange={event => this.changeValue('equipment', event.target.value)} />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                    break;\r\n                case 'abilities':\r\n                    content = (\r\n                        <div className='row'>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>ability scores</div>\r\n                                <AbilityScorePanel\r\n                                    edit={true}\r\n                                    combatant={this.state.monster}\r\n                                    nudgeValue={(source, type, delta) => this.nudgeValue(type, delta)}\r\n                                />\r\n                            </div>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>saving throws</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.savingThrows}\r\n                                    onChange={event => this.changeValue('savingThrows', event.target.value)}\r\n                                />\r\n                                <div className='subheading'>skills</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.skills}\r\n                                    onChange={event => this.changeValue('skills', event.target.value)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                    break;\r\n                case 'cbt-stats':\r\n                    content = (\r\n                        <div className='row'>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>armor class</div>\r\n                                <Spin\r\n                                    source={this.state.monster}\r\n                                    name='ac'\r\n                                    nudgeValue={delta => this.nudgeValue('ac', delta)}\r\n                                />\r\n                                <div className='subheading'>hit dice</div>\r\n                                <Spin\r\n                                    source={this.state.monster}\r\n                                    name='hitDice'\r\n                                    display={value => value + 'd' + Utils.hitDieType(this.state.monster.size)}\r\n                                    nudgeValue={delta => this.nudgeValue('hitDice', delta)}\r\n                                />\r\n                                <div className='subheading'>hit points</div>\r\n                                <div className='hp-value'>{this.state.monster.hpMax} hp</div>\r\n                            </div>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>damage resistances</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.damage.resist}\r\n                                    onChange={event => this.changeValue('damage.resist', event.target.value)}\r\n                                />\r\n                                <div className='subheading'>damage vulnerabilities</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.damage.vulnerable}\r\n                                    onChange={event => this.changeValue('damage.vulnerable', event.target.value)}\r\n                                />\r\n                                <div className='subheading'>damage immunities</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.damage.immune}\r\n                                    onChange={event => this.changeValue('damage.immune', event.target.value)}\r\n                                />\r\n                                <div className='subheading'>condition immunities</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.conditionImmunities}\r\n                                    onChange={event => this.changeValue('conditionImmunities', event.target.value)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                    break;\r\n                case 'actions':\r\n                    content = (\r\n                        <TraitsPanel\r\n                            combatant={this.state.monster}\r\n                            mode='edit'\r\n                            addTrait={type => this.addTrait(type)}\r\n                            removeTrait={trait => this.removeTrait(trait)}\r\n                            swapTraits={(t1, t2) => this.swapTraits(t1, t2)}\r\n                            changeValue={(trait, type, value) => this.changeTrait(trait, type, value)}\r\n                        />\r\n                    );\r\n                    break;\r\n                default:\r\n                    // Do nothing\r\n                    break;\r\n            }\r\n\r\n            let help = null;\r\n            if (this.props.showSidebar && (monsters.length > 1)) {\r\n                let selector = null;\r\n                if (this.getHelpOptionsForPage(this.state.page).length > 1) {\r\n                    const options = this.getHelpOptionsForPage(this.state.page).map(s => {\r\n                        return {\r\n                            id: s,\r\n                            text: s\r\n                        };\r\n                    });\r\n                    selector = (\r\n                        <Selector\r\n                            tabs={false}\r\n                            options={options}\r\n                            selectedID={this.state.helpSection}\r\n                            select={optionID => this.setHelpSection(optionID)}\r\n                        />\r\n                    );\r\n                }\r\n\r\n                help = (\r\n                    <div className='monster-help'>\r\n                        <div className='divider' />\r\n                        <div className='heading'>information from sidebar monsters</div>\r\n                        {selector}\r\n                        {this.getHelpSection(monsters)}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            let sidebar = null;\r\n            if (this.props.showSidebar) {\r\n                let sidebarContent = null;\r\n                switch (this.state.sidebar) {\r\n                    case 'similar':\r\n                        sidebarContent = (\r\n                            <Expander\r\n                                text='similarity criteria'\r\n                                content={\r\n                                    <div>\r\n                                        <Checkbox\r\n                                            label={'size ' + this.state.monster.size}\r\n                                            checked={this.state.similarFilter.size}\r\n                                            changeValue={value => this.toggleMatch('size')}\r\n                                        />\r\n                                        <Checkbox\r\n                                            label={'type ' + this.state.monster.category}\r\n                                            checked={this.state.similarFilter.type}\r\n                                            changeValue={value => this.toggleMatch('type')}\r\n                                        />\r\n                                        <Checkbox\r\n                                            label={this.state.monster.tag ? 'subtype ' + this.state.monster.tag : 'subtype'}\r\n                                            checked={this.state.similarFilter.subtype}\r\n                                            disabled={!this.state.monster.tag}\r\n                                            changeValue={value => this.toggleMatch('subtype')}\r\n                                        />\r\n                                        <Checkbox\r\n                                            label={this.state.monster.alignment ? 'alignment ' + this.state.monster.alignment : 'alignment'}\r\n                                            checked={this.state.similarFilter.alignment}\r\n                                            disabled={!this.state.monster.alignment}\r\n                                            changeValue={value => this.toggleMatch('alignment')}\r\n                                        />\r\n                                        <Checkbox\r\n                                            label={'challenge rating ' + Utils.challenge(this.state.monster.challenge)}\r\n                                            checked={this.state.similarFilter.challenge}\r\n                                            changeValue={value => this.toggleMatch('challenge')}\r\n                                        />\r\n                                    </div>\r\n                                }\r\n                            />\r\n                        );\r\n                        break;\r\n                    case 'scratchpad':\r\n                        {\r\n                            let searchResults: Monster[] = [];\r\n                            this.props.library.forEach(group => {\r\n                                group.monsters.forEach(m => {\r\n                                    if (!monsters.includes(m) && this.matchMonster(m)) {\r\n                                        searchResults.push(m);\r\n                                    }\r\n                                });\r\n                            });\r\n                            Utils.sort(searchResults);\r\n                            if (searchResults.length > 10) {\r\n                                searchResults = searchResults.slice(0, 10);\r\n                            }\r\n                            let resultsRows = searchResults.map(m =>\r\n                                <button key={m.id} onClick={() => this.addToScratchpadList(m)}>{m.name}</button>\r\n                            );\r\n                            if (searchResults.length === 0) {\r\n                                resultsRows = [(\r\n                                    <Note key='none' content='no monsters found' />\r\n                                )];\r\n                            }\r\n                            let removeSection = null;\r\n                            if (monsters.length > 0) {\r\n                                const deleteRows = monsters.map(m =>\r\n                                    <button key={m.id} onClick={() => this.removeFromScratchpadList(m)}>{m.name}</button>\r\n                                );\r\n                                removeSection = (\r\n                                    <Expander\r\n                                        text='remove monsters from the list'\r\n                                        content={\r\n                                            <div>\r\n                                                {deleteRows}\r\n                                            </div>\r\n                                        }\r\n                                    />\r\n                                );\r\n                            }\r\n                            sidebarContent = (\r\n                                <div>\r\n                                    <Expander\r\n                                        text='add monsters to the list'\r\n                                        content={\r\n                                            <div>\r\n                                                <FilterCard\r\n                                                    filter={this.state.scratchpadFilter}\r\n                                                    changeValue={(type, value) => this.changeFilterValue(type, value)}\r\n                                                    nudgeValue={(type, delta) => this.nudgeFilterValue(type, delta)}\r\n                                                    resetFilter={() => this.resetFilter()}\r\n                                                />\r\n                                                {resultsRows}\r\n                                            </div>\r\n                                        }\r\n                                    />\r\n                                    {removeSection}\r\n                                </div>\r\n                            );\r\n                        }\r\n                        break;\r\n                }\r\n                const sidebarOptions = [\r\n                    {\r\n                        id: 'similar',\r\n                        text: 'similar'\r\n                    },\r\n                    {\r\n                        id: 'scratchpad',\r\n                        text: 'scratchpad'\r\n                    }\r\n                ];\r\n                sidebar = (\r\n                    <div className='columns small-4 medium-4 large-4 scrollable wide-column'>\r\n                        <Selector\r\n                            tabs={true}\r\n                            options={sidebarOptions}\r\n                            selectedID={this.state.sidebar}\r\n                            select={optionID => this.setState({sidebar: optionID as 'similar' | 'scratchpad'})}\r\n                        />\r\n                        {sidebarContent}\r\n                        <button className={monsters.length < 2 ? 'disabled' : ''} onClick={() => this.spliceMonsters(monsters)}>\r\n                            build random monster\r\n                        </button>\r\n                        <div className='divider'/>\r\n                        {this.getMonsterCards(monsters)}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='row' style={{ height: '100%', margin: '0 -5px' }}>\r\n                    <div\r\n                        className={\r\n                            this.props.showSidebar\r\n                            ? 'columns small-8 medium-8 large-8 scrollable wide-column'\r\n                            : 'columns small-12 medium-12 large-12 scrollable wide-column'\r\n                        }\r\n                        style={{ transition: 'none' }}\r\n                    >\r\n                        <div className='section'>\r\n                            <Selector\r\n                                tabs={true}\r\n                                options={pages}\r\n                                selectedID={this.state.page}\r\n                                select={optionID => this.setPage(optionID as 'overview' | 'abilities' | 'cbt-stats' | 'actions')}\r\n                            />\r\n                            {content}\r\n                            {help}\r\n                        </div>\r\n                    </div>\r\n                    {sidebar}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { PC } from '../../models/party';\r\n\r\nimport Spin from '../controls/spin';\r\n\r\ninterface Props {\r\n    pc: PC;\r\n}\r\n\r\ninterface State {\r\n    pc: PC;\r\n}\r\n\r\nexport default class PCEditorModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            pc: props.pc\r\n        };\r\n    }\r\n\r\n    private changeValue(source: any, field: string, value: any) {\r\n        source[field] = value;\r\n\r\n        this.setState({\r\n            pc: this.state.pc\r\n        });\r\n    }\r\n\r\n    private nudgeValue(source: any, field: string, delta: number) {\r\n        const value = source[field] + delta;\r\n        this.changeValue(source, field, value);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div className='pc-editor'>\r\n                    <div className='row section'>\r\n                        <div className='columns small-12 medium-6 large-6'>\r\n                            <div className='subheading'>character name:</div>\r\n                            <input\r\n                                type='text'\r\n                                value={this.state.pc.name}\r\n                                onChange={event => this.changeValue(this.state.pc, 'name', event.target.value)}\r\n                            />\r\n                            <div className='subheading'>player name:</div>\r\n                            <input\r\n                                type='text'\r\n                                value={this.state.pc.player}\r\n                                onChange={event => this.changeValue(this.state.pc, 'player', event.target.value)}\r\n                            />\r\n                            <div className='subheading'>race:</div>\r\n                            <input\r\n                                type='text'\r\n                                value={this.state.pc.race}\r\n                                onChange={event => this.changeValue(this.state.pc, 'race', event.target.value)}\r\n                            />\r\n                            <div className='subheading'>class:</div>\r\n                            <input\r\n                                type='text'\r\n                                value={this.state.pc.classes}\r\n                                onChange={event => this.changeValue(this.state.pc, 'classes', event.target.value)}\r\n                            />\r\n                            <div className='subheading'>level:</div>\r\n                            <Spin\r\n                                source={this.state.pc}\r\n                                name='level'\r\n                                nudgeValue={delta => this.nudgeValue(this.state.pc, 'level', delta)}\r\n                            />\r\n                        </div>\r\n                        <div className='columns small-12 medium-6 large-6'>\r\n                            <div className='subheading'>languages:</div>\r\n                            <input\r\n                                type='text'\r\n                                value={this.state.pc.languages}\r\n                                onChange={event => this.changeValue(this.state.pc, 'languages', event.target.value)}\r\n                            />\r\n                            <div className='subheading'>d&d beyond link:</div>\r\n                            <input\r\n                                type='text'\r\n                                value={this.state.pc.url}\r\n                                placeholder='https://ddb.ac/characters/...'\r\n                                onChange={event => this.changeValue(this.state.pc, 'url', event.target.value)}\r\n                            />\r\n                            <div className='subheading'>passive skills</div>\r\n                            <Spin\r\n                                source={this.state.pc}\r\n                                name='passiveInsight'\r\n                                label='insight'\r\n                                nudgeValue={delta => this.nudgeValue(this.state.pc, 'passiveInsight', delta)}\r\n                            />\r\n                            <Spin\r\n                                source={this.state.pc}\r\n                                name='passiveInvestigation'\r\n                                label='investigation'\r\n                                nudgeValue={delta => this.nudgeValue(this.state.pc, 'passiveInvestigation', delta)}\r\n                            />\r\n                            <Spin\r\n                                source={this.state.pc}\r\n                                name='passivePerception'\r\n                                label='perception'\r\n                                nudgeValue={delta => this.nudgeValue(this.state.pc, 'passivePerception', delta)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Frankenstein from '../../utils/frankenstein';\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Monster, MonsterGroup } from '../../models/monster-group';\r\n\r\nimport FilterCard from '../cards/filter-card';\r\nimport MonsterCard from '../cards/monster-card';\r\nimport Note from '../panels/note';\r\n\r\ninterface Props {\r\n    monster: Monster;\r\n    library: MonsterGroup[];\r\n}\r\n\r\ninterface State {\r\n    monster: Monster;\r\n    filter: {\r\n        name: string,\r\n        challengeMin: number;\r\n        challengeMax: number;\r\n        category: string;\r\n        size: string;\r\n    };\r\n    selectedMonsters: Monster[];\r\n}\r\n\r\nexport default class RandomMonsterModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            monster: this.props.monster,\r\n            filter: {\r\n                name: '',\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: 'all types',\r\n                size: 'all sizes'\r\n            },\r\n            selectedMonsters: []\r\n        };\r\n    }\r\n\r\n    private generateMonster() {\r\n        Frankenstein.spliceMonsters(this.state.monster, this.state.selectedMonsters);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private changeFilterValue(type: 'name' | 'challengeMin' | 'challengeMax' | 'category' | 'size', value: any) {\r\n        // eslint-disable-next-line\r\n        this.state.filter[type] = value;\r\n        this.setState({\r\n            filter: this.state.filter\r\n        });\r\n    }\r\n\r\n    private nudgeFilterValue(type: 'challengeMin' | 'challengeMax', delta: number) {\r\n        const value = Utils.nudgeChallenge(this.state.filter[type], delta);\r\n        this.changeFilterValue(type, value);\r\n    }\r\n\r\n    private resetFilter() {\r\n        this.setState({\r\n            filter: {\r\n                name: '',\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: 'all types',\r\n                size: 'all sizes'\r\n            }\r\n        });\r\n    }\r\n\r\n    private matchMonster(monster: Monster) {\r\n        if (monster.challenge < this.state.filter.challengeMin) {\r\n            return false;\r\n        }\r\n\r\n        if (monster.challenge > this.state.filter.challengeMax) {\r\n            return false;\r\n        }\r\n\r\n        if (this.state.filter.name !== '') {\r\n            if (!Utils.match(this.state.filter.name, monster.name)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.filter.category !== 'all types') {\r\n            if (monster.category !== this.state.filter.category) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.filter.size !== 'all sizes') {\r\n            if (monster.size !== this.state.filter.size) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private selectMonster(monster: Monster) {\r\n        this.state.selectedMonsters.push(monster);\r\n        this.state.selectedMonsters.sort((a, b) => {\r\n            if (a.name < b.name) { return -1; }\r\n            if (a.name > b.name) { return 1; }\r\n            return 0;\r\n        });\r\n        this.setState({\r\n            selectedMonsters: this.state.selectedMonsters\r\n        });\r\n    }\r\n\r\n    private deselectMonster(monster: Monster) {\r\n        const index = this.state.selectedMonsters.indexOf(monster);\r\n        this.state.selectedMonsters.splice(index, 1);\r\n        this.setState({\r\n            selectedMonsters: this.state.selectedMonsters\r\n        });\r\n    }\r\n\r\n    private selectAll() {\r\n        this.props.library.forEach(group => {\r\n            group.monsters.forEach(monster => {\r\n                if (this.matchMonster(monster)) {\r\n                    this.state.selectedMonsters.push(monster);\r\n                }\r\n            });\r\n        });\r\n        this.state.selectedMonsters.sort((a, b) => {\r\n            if (a.name < b.name) { return -1; }\r\n            if (a.name > b.name) { return 1; }\r\n            return 0;\r\n        });\r\n        this.setState({\r\n            selectedMonsters: this.state.selectedMonsters\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const monsters: Monster[] = [];\r\n            this.props.library.forEach(group => {\r\n                group.monsters.forEach(monster => {\r\n                    if (this.matchMonster(monster)) {\r\n                        monsters.push(monster);\r\n                    }\r\n                });\r\n            });\r\n            monsters.sort((a, b) => {\r\n                if (a.name < b.name) { return -1; }\r\n                if (a.name > b.name) { return 1; }\r\n                return 0;\r\n            });\r\n            let allMonsters: JSX.Element | JSX.Element[] = monsters.filter(m => !this.state.selectedMonsters.includes(m)).map(m => {\r\n                return (\r\n                    <MonsterCard key={m.id} combatant={m} mode='view candidate' selectMonster={monster => this.selectMonster(monster)} />\r\n                );\r\n            });\r\n            if (allMonsters.length === 0) {\r\n                allMonsters = (\r\n                    <Note\r\n                        content={(\r\n                            <div className='section'>\r\n                                there are no monsters that match the above criteria (or you have already selected them all)\r\n                            </div>\r\n                        )}\r\n                    />\r\n                );\r\n            }\r\n\r\n            const selectedMonsters: JSX.Element | JSX.Element[] = this.state.selectedMonsters.map(m => {\r\n                return (\r\n                    <MonsterCard key={m.id} combatant={m} mode='view candidate selected' deselectMonster={monster => this.deselectMonster(monster)} />\r\n                );\r\n            });\r\n            let selectedMonstersInfo = null;\r\n            if (selectedMonsters.length < 2) {\r\n                selectedMonstersInfo = (\r\n                    <Note\r\n                        content={(\r\n                            <div>\r\n                                <div className='section'>\r\n                                    in order to generate a random monster, select at least two source monsters from the list on the left\r\n                                </div>\r\n                                <button onClick={() => this.selectAll()}>select all monsters</button>\r\n                            </div>\r\n                        )}\r\n                    />\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='random-monster-modal'>\r\n                    <div className='row' style={{ height: '100%' }}>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable'>\r\n                            <div className='heading'>all monsters</div>\r\n                            <FilterCard\r\n                                filter={this.state.filter}\r\n                                changeValue={(type, value) => this.changeFilterValue(type, value)}\r\n                                nudgeValue={(type, delta) => this.nudgeFilterValue(type, delta)}\r\n                                resetFilter={() => this.resetFilter()}\r\n                            />\r\n                            <div className='divider' />\r\n                            {allMonsters}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable'>\r\n                            <div className='heading'>selected monsters</div>\r\n                            <button\r\n                                className={this.state.selectedMonsters.length < 2 ? 'disabled' : ''}\r\n                                onClick={() => this.generateMonster()}\r\n                            >\r\n                                randomly generate monster\r\n                            </button>\r\n                            <div className='divider' />\r\n                            {selectedMonstersInfo}\r\n                            {selectedMonsters}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable'>\r\n                            <div className='heading'>output</div>\r\n                            <MonsterCard\r\n                                combatant={this.state.monster}\r\n                                mode='view generated'\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Encounter } from '../../models/encounter';\r\nimport { MonsterGroup } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\ninterface Props {\r\n    view: string;\r\n    blur: boolean;\r\n    library: MonsterGroup[];\r\n    parties: Party[];\r\n    encounters: Encounter[];\r\n    setView: (view: string) => void;\r\n}\r\n\r\nexport default class Navbar extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const partiesStyle = this.props.view === 'parties' ? 'navigator-item selected' : 'navigator-item';\r\n            const libraryStyle = this.props.view === 'library' ? 'navigator-item selected' : 'navigator-item';\r\n            let encounterStyle = this.props.view === 'encounter' ? 'navigator-item selected' : 'navigator-item';\r\n            const mapStyle = this.props.view === 'maps' ? 'navigator-item selected' : 'navigator-item';\r\n            let combatStyle = this.props.view === 'combat' ? 'navigator-item selected' : 'navigator-item';\r\n\r\n            const encountersEnabled = this.props.library.length !== 0;\r\n            const combatEnabled = (this.props.parties.length !== 0) && (this.props.encounters.length !== 0);\r\n            if (!encountersEnabled) {\r\n                encounterStyle += ' disabled';\r\n            }\r\n            if (!combatEnabled) {\r\n                combatStyle += ' disabled';\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.blur ? 'navbar blur' : 'navbar'}>\r\n                    <div className={partiesStyle} onClick={() => this.props.setView('parties')}>player characters</div>\r\n                    <div className={libraryStyle} onClick={() => this.props.setView('library')}>monster library</div>\r\n                    <div className={encounterStyle} onClick={() => encountersEnabled ? this.props.setView('encounter') : null}>encounter builder</div>\r\n                    <div className={mapStyle} onClick={() => this.props.setView('maps')}>map folios</div>\r\n                    <div className={combatStyle} onClick={() => combatEnabled ? this.props.setView('combat') : null}>combat manager</div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport cog from '../../resources/images/settings.svg';\r\n\r\ninterface Props {\r\n    actions: JSX.Element | null;\r\n    blur: boolean;\r\n    openHome: () => void;\r\n    openAbout: () => void;\r\n}\r\n\r\nexport default class Titlebar extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div className={this.props.blur ? 'titlebar blur' : 'titlebar'}>\r\n                    <div className='app-name' onClick={() => this.props.openHome()}>dojo</div>\r\n                    {this.props.actions}\r\n                    <img className='settings-icon' src={cog} title='about' alt='about' onClick={() => this.props.openAbout()} />\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Factory from '../utils/factory';\r\nimport Frankenstein from '../utils/frankenstein';\r\nimport Utils from '../utils/utils';\r\n\r\nimport { Combat, Combatant, CombatSetup, Notification } from '../models/combat';\r\nimport { Condition } from '../models/condition';\r\nimport { Encounter, EncounterSlot, EncounterWave } from '../models/encounter';\r\nimport { Map, MapFolio } from '../models/map-folio';\r\nimport { Monster, MonsterGroup } from '../models/monster-group';\r\nimport { Party, PC } from '../models/party';\r\n\r\nimport CombatManagerScreen from './screens/combat-manager-screen';\r\nimport EncounterBuilderScreen from './screens/encounter-builder-screen';\r\nimport HomeScreen from './screens/home-screen';\r\nimport MapFoliosScreen from './screens/map-folios-screen';\r\nimport MonsterLibraryScreen from './screens/monster-library-screen';\r\nimport PartiesScreen from './screens/parties-screen';\r\n\r\nimport AboutModal from './modals/about-modal';\r\nimport AddCombatantsModal from './modals/add-combatants-modal';\r\nimport CombatStartModal from './modals/combat-start-modal';\r\nimport ConditionModal from './modals/condition-modal';\r\nimport DemographicsModal from './modals/demographics-modal';\r\nimport MapEditorModal from './modals/map-editor-modal';\r\nimport MonsterEditorModal from './modals/monster-editor-modal';\r\nimport PCEditorModal from './modals/pc-editor-modal';\r\nimport RandomMonsterModal from './modals/random-monster-modal';\r\n\r\nimport Navbar from './panels/navbar';\r\nimport Titlebar from './panels/titlebar';\r\n\r\nimport Checkbox from './controls/checkbox';\r\n\r\nimport close from '../resources/images/close-black.svg';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    // No props; this is the root component\r\n}\r\n\r\ninterface State {\r\n    view: string;\r\n    modal: any;\r\n    filter: string;\r\n\r\n    parties: Party[];\r\n    library: MonsterGroup[];\r\n    encounters: Encounter[];\r\n    mapFolios: MapFolio[];\r\n    combats: Combat[];\r\n\r\n    selectedPartyID: string | null;\r\n    selectedMonsterGroupID: string | null;\r\n    selectedEncounterID: string | null;\r\n    selectedMapFolioID: string | null;\r\n    selectedCombatID: string | null;\r\n}\r\n\r\nexport default class Dojo extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            view: 'home',\r\n            modal: null,\r\n            filter: '',\r\n            parties: [],\r\n            library: [],\r\n            encounters: [],\r\n            mapFolios: [],\r\n            combats: [],\r\n            selectedPartyID: null,\r\n            selectedMonsterGroupID: null,\r\n            selectedEncounterID: null,\r\n            selectedMapFolioID: null,\r\n            selectedCombatID: null\r\n        };\r\n\r\n        try {\r\n            let data: State | null = null;\r\n\r\n            try {\r\n                const json = window.localStorage.getItem('data');\r\n                if (json) {\r\n                    data = JSON.parse(json);\r\n                }\r\n            } catch (ex) {\r\n                console.error('Could not parse JSON: ', ex);\r\n                data = null;\r\n            }\r\n\r\n            if (data !== null) {\r\n                data.library.forEach(g => {\r\n                    g.monsters.forEach(m => {\r\n                        m.traits.forEach(t => {\r\n                            t.uses = 0;\r\n                        });\r\n                    });\r\n                });\r\n\r\n                data.encounters.forEach(enc => {\r\n                    if (!enc.waves) {\r\n                        enc.waves = [];\r\n                    }\r\n                });\r\n\r\n                if (!data.mapFolios) {\r\n                    data.mapFolios = [];\r\n                    data.selectedMapFolioID = null;\r\n                }\r\n\r\n                data.mapFolios.forEach(folio => {\r\n                    folio.maps.forEach(map => {\r\n                        map.items.forEach(item => {\r\n                            if (item.style === undefined) {\r\n                                item.style = null;\r\n                            }\r\n                        });\r\n                    });\r\n                });\r\n\r\n                data.combats.forEach(combat => {\r\n                    if (!combat.notifications) {\r\n                        combat.notifications = [];\r\n                    }\r\n                    combat.combatants.forEach(c => {\r\n                        if (c.altitude === undefined) {\r\n                            c.altitude = 0;\r\n                        }\r\n\r\n                        if (c.tags === undefined) {\r\n                            c.tags = [];\r\n                        }\r\n\r\n                        if (c.aura === undefined) {\r\n                            c.aura = { size: 0, style: 'rounded', color: '#005080' };\r\n                        }\r\n\r\n                        if (c.type === 'monster') {\r\n                            const m = c as Combatant & Monster;\r\n                            m.traits.forEach(t => {\r\n                                if (t.uses === undefined) {\r\n                                    t.uses = 0;\r\n                                }\r\n                            });\r\n                        }\r\n                    });\r\n                });\r\n\r\n                data.view = 'home';\r\n                data.modal = null;\r\n                data.filter = '';\r\n\r\n                this.state = data;\r\n            }\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n\r\n    public componentDidUpdate() {\r\n        let json = null;\r\n        try {\r\n            json = JSON.stringify(this.state);\r\n        } catch (ex) {\r\n            console.error('Could not stringify data: ', ex);\r\n            json = null;\r\n        }\r\n\r\n        if (json !== null) {\r\n            window.localStorage.setItem('data', json);\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Party screen\r\n\r\n    private addParty() {\r\n        const party = Factory.createParty();\r\n        party.name = 'new party';\r\n        const parties: Party[] = ([] as Party[]).concat(this.state.parties, [party]);\r\n        Utils.sort(parties);\r\n        this.setState({\r\n            parties: parties,\r\n            selectedPartyID: party.id\r\n        });\r\n    }\r\n\r\n    private removeParty() {\r\n        const party = this.state.parties.find(p => p.id === this.state.selectedPartyID);\r\n        if (party) {\r\n            const index = this.state.parties.indexOf(party);\r\n            this.state.parties.splice(index, 1);\r\n            this.setState({\r\n                parties: this.state.parties,\r\n                selectedPartyID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private addPC() {\r\n        const party = this.state.parties.find(p => p.id === this.state.selectedPartyID);\r\n        if (party) {\r\n            const pc = Factory.createPC();\r\n            pc.name = 'new pc';\r\n            party.pcs.push(pc);\r\n            this.setState({\r\n                parties: this.state.parties\r\n            });\r\n        }\r\n    }\r\n\r\n    private removePC(pc: PC) {\r\n        const party = this.state.parties.find(p => p.id === this.state.selectedPartyID);\r\n        if (party) {\r\n            const index = party.pcs.indexOf(pc);\r\n            party.pcs.splice(index, 1);\r\n            this.setState({\r\n                parties: this.state.parties\r\n            });\r\n        }\r\n    }\r\n\r\n    private sortPCs() {\r\n        const party = this.state.parties.find(p => p.id === this.state.selectedPartyID);\r\n        if (party) {\r\n            Utils.sort(party.pcs);\r\n            this.setState({\r\n                parties: this.state.parties\r\n            });\r\n        }\r\n    }\r\n\r\n    private editPC(pc: PC) {\r\n        const copy = JSON.parse(JSON.stringify(pc));\r\n        this.setState({\r\n            modal: {\r\n                type: 'pc',\r\n                pc: copy\r\n            }\r\n        });\r\n    }\r\n\r\n    private savePC() {\r\n        const party = this.state.parties.find(p => p.id === this.state.selectedPartyID);\r\n        if (party) {\r\n            const original = party.pcs.find(pc => pc.id === this.state.modal.pc.id);\r\n            if (original) {\r\n                const index = party.pcs.indexOf(original);\r\n                party.pcs[index] = this.state.modal.pc;\r\n                this.setState({\r\n                    library: this.state.library,\r\n                    modal: null\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Library screen\r\n\r\n    private addMonsterGroup() {\r\n        const group = Factory.createMonsterGroup();\r\n        group.name = 'new group';\r\n        const library = ([] as MonsterGroup[]).concat(this.state.library, [group]);\r\n        Utils.sort(library);\r\n        this.setState({\r\n            library: library,\r\n            selectedMonsterGroupID: group.id\r\n        });\r\n    }\r\n\r\n    private removeMonsterGroup() {\r\n        const group = this.state.library.find(g => g.id === this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            const index = this.state.library.indexOf(group);\r\n            this.state.library.splice(index, 1);\r\n            this.setState({\r\n                library: this.state.library,\r\n                selectedMonsterGroupID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private addMonster() {\r\n        const monster = Factory.createMonster();\r\n        monster.name = 'new monster';\r\n        const group = this.state.library.find(g => g.id === this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            group.monsters.push(monster);\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    private generateMonster() {\r\n        const monster = Factory.createMonster();\r\n        monster.name = 'generated monster';\r\n        this.setState({\r\n            modal: {\r\n                type: 'random-monster',\r\n                monster: monster\r\n            }\r\n        });\r\n    }\r\n\r\n    private removeMonster(monster: Monster) {\r\n        const group = this.state.library.find(g => g.id === this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            const index = group.monsters.indexOf(monster);\r\n            group.monsters.splice(index, 1);\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    private sortMonsters() {\r\n        const group = this.state.library.find(g => g.id === this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            Utils.sort(group.monsters);\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    private moveToGroup(monster: Monster, groupID: string) {\r\n        const sourceGroup = this.state.library.find(group => group.monsters.includes(monster));\r\n        if (sourceGroup) {\r\n            const index = sourceGroup.monsters.indexOf(monster);\r\n            sourceGroup.monsters.splice(index, 1);\r\n\r\n            const group = this.state.library.find(g => g.id === groupID);\r\n            if (group) {\r\n                group.monsters.push(monster);\r\n                Utils.sort(group.monsters);\r\n\r\n                this.setState({\r\n                    library: this.state.library\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private editMonster(monster: Monster) {\r\n        const copy = JSON.parse(JSON.stringify(monster));\r\n        this.setState({\r\n            modal: {\r\n                type: 'monster',\r\n                monster: copy,\r\n                showSidebar: false\r\n            }\r\n        });\r\n    }\r\n\r\n    private saveMonster() {\r\n        const group = this.state.library.find(g => g.id === this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            const original = group.monsters.find(m => m.id === this.state.modal.monster.id);\r\n            if (original) {\r\n                // We are editing a monster\r\n                const index = group.monsters.indexOf(original);\r\n                group.monsters[index] = this.state.modal.monster;\r\n                this.setState({\r\n                    library: this.state.library,\r\n                    modal: null\r\n                });\r\n            } else {\r\n                // We are adding a new monster\r\n                group.monsters.push(this.state.modal.monster);\r\n                this.setState({\r\n                    library: this.state.library,\r\n                    modal: null\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private toggleShowSidebar() {\r\n        // eslint-disable-next-line\r\n        this.state.modal.showSidebar = !this.state.modal.showSidebar;\r\n        this.setState({\r\n            modal: this.state.modal\r\n        });\r\n    }\r\n\r\n    private openDemographics() {\r\n        this.setState({\r\n            modal: {\r\n                type: 'demographics'\r\n            }\r\n        });\r\n    }\r\n\r\n    private cloneMonster(monster: Monster, name: string) {\r\n        const group = this.state.library.find(g => g.monsters.includes(monster));\r\n        if (group) {\r\n            const clone = Frankenstein.clone(monster, name);\r\n            group.monsters.push(clone);\r\n            Utils.sort(group.monsters);\r\n\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    private addOpenGameContent() {\r\n        fetch('./data/monsters.json')\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                json.forEach((data: any) => {\r\n                    try {\r\n                        if (data.name) {\r\n                            const monster = Frankenstein.createFromJSON(data);\r\n\r\n                            let groupName = monster.tag || monster.category;\r\n                            if (groupName.indexOf('swarm') === 0) {\r\n                                groupName = 'swarm';\r\n                            }\r\n                            if (groupName === 'any race') {\r\n                                groupName = 'npc';\r\n                            }\r\n\r\n                            let group = this.state.library.find(p => p.name === groupName);\r\n                            if (!group) {\r\n                                group = {\r\n                                    id: Utils.guid(),\r\n                                    name: groupName,\r\n                                    monsters: []\r\n                                };\r\n                                this.state.library.push(group);\r\n                            }\r\n                            group.monsters.push(monster);\r\n                        }\r\n                    } catch (e) {\r\n                        console.error(e);\r\n                    }\r\n                });\r\n\r\n                Utils.sort(this.state.library);\r\n\r\n                this.setState({\r\n                    view: 'library',\r\n                    library: this.state.library\r\n                });\r\n            });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Encounter screen\r\n\r\n    private addEncounter() {\r\n        const encounter = Factory.createEncounter();\r\n        encounter.name = 'new encounter';\r\n        const encounters = ([] as Encounter[]).concat(this.state.encounters, [encounter]);\r\n        Utils.sort(encounters);\r\n\r\n        this.setState({\r\n            encounters: encounters,\r\n            selectedEncounterID: encounter.id\r\n        });\r\n    }\r\n\r\n    private removeEncounter() {\r\n        const encounter = this.state.encounters.find(e => e.id === this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            const index = this.state.encounters.indexOf(encounter);\r\n            this.state.encounters.splice(index, 1);\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters,\r\n                selectedEncounterID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private addEncounterSlot(monster: Monster, waveID: string | null) {\r\n        const group = this.state.library.find(g => g.monsters.includes(monster));\r\n        if (group) {\r\n            const slot = Factory.createEncounterSlot();\r\n            slot.monsterGroupName = group.name;\r\n            slot.monsterName = monster.name;\r\n            const encounter = this.state.encounters.find(e => e.id === this.state.selectedEncounterID);\r\n            if (encounter) {\r\n                if (waveID !== null) {\r\n                    const wave = encounter.waves.find(w => w.id === waveID);\r\n                    if (wave) {\r\n                        wave.slots.push(slot);\r\n                        this.sortEncounterSlots(wave);\r\n                    }\r\n                } else {\r\n                    encounter.slots.push(slot);\r\n                    this.sortEncounterSlots(encounter);\r\n                }\r\n\r\n                this.setState({\r\n                    encounters: this.state.encounters\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeEncounterSlot(slot: EncounterSlot, waveID: string | null) {\r\n        const encounter = this.state.encounters.find(e => e.id === this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            if (waveID) {\r\n                const wave = encounter.waves.find(w => w.id === waveID);\r\n                if (wave) {\r\n                    const index = wave.slots.indexOf(slot);\r\n                    wave.slots.splice(index, 1);\r\n                }\r\n            } else {\r\n                const n = encounter.slots.indexOf(slot);\r\n                encounter.slots.splice(n, 1);\r\n            }\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters\r\n            });\r\n        }\r\n    }\r\n\r\n    private sortEncounterSlots(slotContainer: { slots: EncounterSlot[] }) {\r\n        slotContainer.slots.sort((a, b) => {\r\n            const aName = a.monsterName.toLowerCase();\r\n            const bName = b.monsterName.toLowerCase();\r\n            if (aName < bName) { return -1; }\r\n            if (aName > bName) { return 1; }\r\n            return 0;\r\n        });\r\n    }\r\n\r\n    private addWaveToEncounter() {\r\n        const encounter = this.state.encounters.find(e => e.id === this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            const wave = Factory.createEncounterWave();\r\n            wave.name = 'wave ' + (encounter.waves.length + 2);\r\n            encounter.waves.push(wave);\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters\r\n            });\r\n        }\r\n    }\r\n\r\n    private removeWave(wave: EncounterWave) {\r\n        const encounter = this.state.encounters.find(e => e.id === this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            const index = encounter.waves.indexOf(wave);\r\n            encounter.waves.splice(index, 1);\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters\r\n            });\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Map screen\r\n\r\n    private addMapFolio() {\r\n        const folio = Factory.createMapFolio();\r\n        folio.name = 'new folio';\r\n        const folios = ([] as MapFolio[]).concat(this.state.mapFolios, [folio]);\r\n        Utils.sort(folios);\r\n\r\n        this.setState({\r\n            mapFolios: folios,\r\n            selectedMapFolioID: folio.id\r\n        });\r\n    }\r\n\r\n    private removeMapFolio() {\r\n        const folio = this.state.mapFolios.find(f => f.id === this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            const index = this.state.mapFolios.indexOf(folio);\r\n            this.state.mapFolios.splice(index, 1);\r\n\r\n            this.setState({\r\n                mapFolios: this.state.mapFolios,\r\n                selectedMapFolioID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private addMap() {\r\n        const folio = this.state.mapFolios.find(f => f.id === this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            const map = Factory.createMap();\r\n            map.name = 'new map';\r\n            folio.maps.push(map);\r\n\r\n            this.setState({\r\n                mapFolios: this.state.mapFolios\r\n            });\r\n        }\r\n    }\r\n\r\n    private editMap(map: Map) {\r\n        const copy = JSON.parse(JSON.stringify(map));\r\n        this.setState({\r\n            modal: {\r\n                type: 'map',\r\n                map: copy\r\n            }\r\n        });\r\n    }\r\n\r\n    private saveMap() {\r\n        const folio = this.state.mapFolios.find(f => f.id === this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            const original = folio.maps.find(m => m.id === this.state.modal.map.id);\r\n            if (original) {\r\n                const index = folio.maps.indexOf(original);\r\n                folio.maps[index] = this.state.modal.map;\r\n                this.setState({\r\n                    mapFolios: this.state.mapFolios,\r\n                    modal: null\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeMap(map: Map) {\r\n        const folio = this.state.mapFolios.find(f => f.id === this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            const index = folio.maps.indexOf(map);\r\n            folio.maps.splice(index, 1);\r\n            this.setState({\r\n                mapFolios: this.state.mapFolios\r\n            });\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Combat screen\r\n\r\n    private createCombat() {\r\n        const party = this.state.parties.length === 1 ? this.state.parties[0] : null;\r\n        const encounter = this.state.encounters.length === 1 ? this.state.encounters[0] : null;\r\n\r\n        const setup = Factory.createCombatSetup();\r\n        setup.partyID = party ? party.id : null;\r\n        setup.encounterID = encounter ? encounter.id : null;\r\n        if (encounter) {\r\n            setup.monsterNames = Utils.getMonsterNames(encounter);\r\n        }\r\n\r\n        this.setState({\r\n            modal: {\r\n                type: 'combat-start',\r\n                combatSetup: setup\r\n            }\r\n        });\r\n    }\r\n\r\n    private startCombat() {\r\n        const combatSetup: CombatSetup = this.state.modal.combatSetup;\r\n        const party = this.state.parties.find(p => p.id === combatSetup.partyID);\r\n        const encounter = this.state.encounters.find(e => e.id === combatSetup.encounterID);\r\n        if (party && encounter) {\r\n            const partyName = party.name || 'unnamed party';\r\n            const encounterName = encounter.name || 'unnamed encounter';\r\n\r\n            const combat = Factory.createCombat();\r\n            combat.name = partyName + ' vs ' + encounterName;\r\n            combat.encounterID = encounter.id;\r\n\r\n            // Add a copy of each PC to the encounter\r\n            party.pcs.filter(pc => pc.active).forEach(pc => {\r\n                this.addPCToCombat(pc, combat);\r\n            });\r\n\r\n            encounter.slots.forEach(slot => {\r\n                const monster = this.getMonster(slot.monsterName, slot.monsterGroupName);\r\n                if (monster) {\r\n                    const groupInitRoll = Utils.dieRoll();\r\n\r\n                    for (let n = 0; n !== slot.count; ++n) {\r\n                        let displayName = null;\r\n                        if (combatSetup.monsterNames) {\r\n                            const slotNames = combatSetup.monsterNames.find(names => names.id === slot.id);\r\n                            if (slotNames) {\r\n                                displayName = slotNames.names[n];\r\n                            }\r\n                        }\r\n\r\n                        this.addMonsterToCombat(monster, combat, displayName, combatSetup.encounterInitMode, groupInitRoll);\r\n                    }\r\n                } else {\r\n                    combat.issues.push('unknown monster: ' + slot.monsterName + ' in group ' + slot.monsterGroupName);\r\n                }\r\n            });\r\n\r\n            this.sortCombatants(combat);\r\n\r\n            if (combatSetup.folioID && combatSetup.mapID) {\r\n                const folio = this.state.mapFolios.find(f => f.id === combatSetup.folioID);\r\n                if (folio) {\r\n                    const map = folio.maps.find(m => m.id === combatSetup.mapID);\r\n                    if (map) {\r\n                        combat.map = JSON.parse(JSON.stringify(map));\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.setState({\r\n                combats: ([] as Combat[]).concat(this.state.combats, [combat]),\r\n                selectedCombatID: combat.id,\r\n                modal: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private addPCToCombat(pc: PC, combat: Combat) {\r\n        const combatant = JSON.parse(JSON.stringify(pc));\r\n\r\n        combatant.current = false;\r\n        combatant.pending = true;\r\n        combatant.active = false;\r\n        combatant.defeated = false;\r\n\r\n        combatant.displayName = pc.name;\r\n        combatant.initiative = 10;\r\n        combatant.hp = null;\r\n        combatant.conditions = [];\r\n        combatant.tags = [];\r\n        combatant.altitude = 0;\r\n        combatant.aura = { size: 0, style: 'rounded', color: '#005080' };\r\n\r\n        combat.combatants.push(combatant);\r\n    }\r\n\r\n    private addMonsterToCombat(\r\n        monster: Monster,\r\n        combat: Combat, displayName: string | null = null,\r\n        initMode: 'manual' | 'individual' | 'group' = 'individual',\r\n        groupInitRoll: number = 0) {\r\n\r\n        const combatant = JSON.parse(JSON.stringify(monster));\r\n        combatant.id = Utils.guid();\r\n\r\n        switch (initMode) {\r\n            case 'group':\r\n                combatant.initiative = Utils.modifierValue(monster.abilityScores.dex) + groupInitRoll;\r\n                break;\r\n            case 'individual':\r\n                combatant.initiative = Utils.modifierValue(monster.abilityScores.dex) + Utils.dieRoll();\r\n                break;\r\n            default:\r\n                combatant.initiative = 10;\r\n                break;\r\n        }\r\n\r\n        combatant.current = false;\r\n        combatant.pending = (initMode === 'manual');\r\n        combatant.active = (initMode !== 'manual');\r\n        combatant.defeated = false;\r\n\r\n        combatant.displayName = displayName;\r\n        combatant.hp = combatant.hpMax;\r\n        combatant.conditions = [];\r\n        combatant.tags = [];\r\n        combatant.altitude = 0;\r\n        combatant.aura = { size: 0, style: 'rounded', color: '#005080' };\r\n\r\n        combat.combatants.push(combatant);\r\n    }\r\n\r\n    private openWaveModal() {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            const encounter = this.state.encounters.find(e => e.id === combat.encounterID);\r\n            if (encounter) {\r\n                const setup = Factory.createCombatSetup();\r\n                setup.encounterID = combat.encounterID;\r\n                setup.monsterNames = Utils.getMonsterNames(encounter);\r\n\r\n                this.setState({\r\n                    modal: {\r\n                        type: 'combat-wave',\r\n                        combatSetup: setup\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private addToEncounter() {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            this.setState({\r\n                modal: {\r\n                    type: 'combat-add-combatants',\r\n                    combatants: [],\r\n                    combat: combat\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private addCombatantsFromModal() {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            this.state.modal.combatants.forEach((m: Monster) => {\r\n                this.addMonsterToCombat(m, combat);\r\n            });\r\n\r\n            this.setState({\r\n                combats: this.state.combats,\r\n                modal: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private pauseCombat() {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            combat.timestamp = new Date().toLocaleString();\r\n            this.setState({\r\n                combats: this.state.combats,\r\n                selectedCombatID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private resumeCombat(combat: Combat) {\r\n        this.setState({\r\n            selectedCombatID: combat.id\r\n        });\r\n    }\r\n\r\n    private endCombat() {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            const index = this.state.combats.indexOf(combat);\r\n            this.state.combats.splice(index, 1);\r\n            this.setState({\r\n                combats: this.state.combats,\r\n                selectedCombatID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private makeCurrent(combatant: (Combatant & PC) | (Combatant & Monster) | null, newRound: boolean) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            // Handle start-of-turn conditions\r\n            combat.combatants.filter(actor => actor.conditions).forEach(actor => {\r\n                actor.conditions.forEach(c => {\r\n                    if (c.duration) {\r\n                        switch (c.duration.type) {\r\n                            case 'saves':\r\n                                // If it's my condition, and point is START, notify the user\r\n                                if (combat && combatant && (actor.id === combatant.id) && (c.duration.point === 'start')) {\r\n                                    combat.notifications.push({\r\n                                        id: Utils.guid(),\r\n                                        type: 'condition-save',\r\n                                        data: c,\r\n                                        combatant: combatant as Combatant & Monster\r\n                                    });\r\n                                }\r\n                                break;\r\n                            case 'combatant':\r\n                                // If this refers to me, and point is START, remove it\r\n                                if (combat && combatant && (c.duration.combatantID === combatant.id) && (c.duration.point === 'start')) {\r\n                                    const index = actor.conditions.indexOf(c);\r\n                                    actor.conditions.splice(index, 1);\r\n                                    // Notify the user\r\n                                    combat.notifications.push({\r\n                                        id: Utils.guid(),\r\n                                        type: 'condition-end',\r\n                                        data: c,\r\n                                        combatant: combatant as Combatant & Monster\r\n                                    });\r\n                                }\r\n                                break;\r\n                            case 'rounds':\r\n                                // If it's my condition, decrement the condition\r\n                                if (combatant && (actor.id === combatant.id)) {\r\n                                    c.duration.count -= 1;\r\n                                }\r\n                                // If it's now at 0, remove it\r\n                                if (c.duration.count === 0) {\r\n                                    const n = actor.conditions.indexOf(c);\r\n                                    actor.conditions.splice(n, 1);\r\n                                    if (combat) {\r\n                                        // Notify the user\r\n                                        combat.notifications.push({\r\n                                            id: Utils.guid(),\r\n                                            type: 'condition-end',\r\n                                            data: c,\r\n                                            combatant: combatant as Combatant & Monster\r\n                                        });\r\n                                    }\r\n                                }\r\n                                break;\r\n                            default:\r\n                                // Do nothing\r\n                                break;\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n\r\n            // Handle recharging traits\r\n            if (combatant && (combatant.type === 'monster')) {\r\n                (combatant as Monster).traits\r\n                    .filter(t => (t.uses > 0) && t.usage.toLowerCase().startsWith('recharge '))\r\n                    .forEach(t => {\r\n                        combat.notifications.push({\r\n                            id: Utils.guid(),\r\n                            type: 'trait-recharge',\r\n                            data: t,\r\n                            combatant: combatant as Combatant & Monster\r\n                        });\r\n                    });\r\n                (combatant as Monster).traits\r\n                    .filter(t => t.type === 'legendary')\r\n                    .forEach(t => {\r\n                        t.uses = 0;\r\n                    });\r\n            }\r\n\r\n            combat.combatants.forEach(c => {\r\n                c.current = false;\r\n            });\r\n            if (combatant) {\r\n                combatant.current = true;\r\n            }\r\n\r\n            if (newRound) {\r\n                combat.round += 1;\r\n            }\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private makeActive(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            combatant.pending = false;\r\n            combatant.active = true;\r\n            combatant.defeated = false;\r\n\r\n            this.sortCombatants(combat);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private makeDefeated(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        combatant.pending = false;\r\n        combatant.active = false;\r\n        combatant.defeated = true;\r\n\r\n        if (combatant.current) {\r\n            this.endTurn(combatant);\r\n        } else {\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private addWaveToCombat() {\r\n        const combatSetup: CombatSetup = this.state.modal.combatSetup;\r\n        const encounter = this.state.encounters.find(e => e.id === combatSetup.encounterID);\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combatSetup && encounter && combat) {\r\n            const wave = encounter.waves.find(w => w.id === combatSetup.waveID);\r\n            if (wave) {\r\n                wave.slots.forEach(slot => {\r\n                    const monster = this.getMonster(slot.monsterName, slot.monsterGroupName);\r\n                    if (monster) {\r\n                        const init = parseInt(Utils.modifier(monster.abilityScores.dex), 10);\r\n                        const groupRoll = Utils.dieRoll();\r\n\r\n                        for (let n = 0; n !== slot.count; ++n) {\r\n                            const singleRoll = Utils.dieRoll();\r\n\r\n                            const combatant = JSON.parse(JSON.stringify(monster));\r\n                            combatant.id = Utils.guid();\r\n\r\n                            combatant.displayName = null;\r\n                            if (combatSetup.monsterNames) {\r\n                                const slotNames = combatSetup.monsterNames.find(names => names.id === slot.id);\r\n                                if (slotNames) {\r\n                                    combatant.displayName = slotNames.names[n];\r\n                                }\r\n                            }\r\n\r\n                            switch (combatSetup.encounterInitMode) {\r\n                                case 'manual':\r\n                                    combatant.initiative = 10;\r\n                                    break;\r\n                                case 'group':\r\n                                    combatant.initiative = init + groupRoll;\r\n                                    break;\r\n                                case 'individual':\r\n                                    combatant.initiative = init + singleRoll;\r\n                                    break;\r\n                                default:\r\n                                    // Do nothing\r\n                                    break;\r\n                            }\r\n\r\n                            combatant.current = false;\r\n                            combatant.pending = (this.state.modal.combatSetup.encounterInitMode === 'manual');\r\n                            combatant.active = (this.state.modal.combatSetup.encounterInitMode !== 'manual');\r\n                            combatant.defeated = false;\r\n\r\n                            combatant.hp = combatant.hpMax;\r\n                            combatant.conditions = [];\r\n                            combatant.tags = [];\r\n                            combatant.altitude = 0;\r\n                            combatant.aura = { size: 0, style: 'rounded', color: '#005080' };\r\n\r\n                            if (combat) {\r\n                                combat.combatants.push(combatant);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (combat) {\r\n                            const issue = 'unknown monster: ' + slot.monsterName + ' in group ' + slot.monsterGroupName;\r\n                            combat.issues.push(issue);\r\n                        }\r\n                    }\r\n                });\r\n\r\n                this.sortCombatants(combat);\r\n\r\n                this.setState({\r\n                    combats: this.state.combats,\r\n                    modal: null\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeCombatant(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            const index = combat.combatants.indexOf(combatant);\r\n            combat.combatants.splice(index, 1);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private mapAdd(combatant: ((Combatant & PC) | (Combatant & Monster)), x: number, y: number) {\r\n        const item = Factory.createMapItem();\r\n        item.id = combatant.id;\r\n        item.type = combatant.type as 'pc' | 'monster';\r\n        item.x = x;\r\n        item.y = y;\r\n        let size = 1;\r\n        if (combatant.type === 'monster') {\r\n            size = Utils.miniSize((combatant as Monster).size);\r\n        }\r\n        item.height = size;\r\n        item.width = size;\r\n\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat && combat.map) {\r\n            combat.map.items.push(item);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private mapMove(combatant: (Combatant & PC) | (Combatant & Monster), dir: string) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat && combat.map) {\r\n            const item = combat.map.items.find(i => i.id === combatant.id);\r\n            if (item) {\r\n                switch (dir) {\r\n                    case 'N':\r\n                        item.y -= 1;\r\n                        break;\r\n                    case 'NE':\r\n                        item.x += 1;\r\n                        item.y -= 1;\r\n                        break;\r\n                    case 'E':\r\n                        item.x += 1;\r\n                        break;\r\n                    case 'SE':\r\n                        item.x += 1;\r\n                        item.y += 1;\r\n                        break;\r\n                    case 'S':\r\n                        item.y += 1;\r\n                        break;\r\n                    case 'SW':\r\n                        item.x -= 1;\r\n                        item.y += 1;\r\n                        break;\r\n                    case 'W':\r\n                        item.x -= 1;\r\n                        break;\r\n                    case 'NW':\r\n                        item.x -= 1;\r\n                        item.y -= 1;\r\n                        break;\r\n                    default:\r\n                        // Do nothing\r\n                        break;\r\n                }\r\n\r\n                this.setState({\r\n                    combats: this.state.combats\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private mapRemove(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat && combat.map) {\r\n            const item = combat.map.items.find(i => i.id === combatant.id);\r\n            if (item) {\r\n                const index = combat.map.items.indexOf(item);\r\n                combat.map.items.splice(index, 1);\r\n\r\n                this.setState({\r\n                    combats: this.state.combats\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private endTurn(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            // Handle end-of-turn conditions\r\n            combat.combatants.filter(actor => actor.conditions).forEach(actor => {\r\n                actor.conditions.forEach(c => {\r\n                    if (c.duration) {\r\n                        switch (c.duration.type) {\r\n                            case 'saves':\r\n                                // If it's my condition, and point is END, notify the user\r\n                                if (combat && (actor.id === combatant.id) && (c.duration.point === 'end')) {\r\n                                    const saveNotification = Factory.createNotification();\r\n                                    saveNotification.type = 'condition-save';\r\n                                    saveNotification.data = c;\r\n                                    saveNotification.combatant = combatant as Combatant & Monster;\r\n                                    combat.notifications.push(saveNotification);\r\n                                }\r\n                                break;\r\n                            case 'combatant':\r\n                                // If this refers to me, and point is END, remove it\r\n                                if (combat && (c.duration.combatantID === combatant.id) && (c.duration.point === 'end')) {\r\n                                    const n = actor.conditions.indexOf(c);\r\n                                    actor.conditions.splice(n, 1);\r\n                                    // Notify the user\r\n                                    const endNotification = Factory.createNotification();\r\n                                    endNotification.type = 'condition-end';\r\n                                    endNotification.data = c;\r\n                                    endNotification.combatant = combatant as Combatant & Monster;\r\n                                    combat.notifications.push(endNotification);\r\n                                }\r\n                                break;\r\n                            case 'rounds':\r\n                                // We check this at the beginning of each turn, not at the end\r\n                                break;\r\n                            default:\r\n                                // Do nothing\r\n                                break;\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n\r\n            const active = combat.combatants.filter(c => {\r\n                return c.current || (!c.pending && c.active && !c.defeated);\r\n            });\r\n            if (active.length === 0) {\r\n                // There's no-one left in the fight\r\n                this.makeCurrent(null, false);\r\n            } else if ((active.length === 1) && (active[0].defeated)) {\r\n                // The only person in the fight is me, and I'm defeated\r\n                this.makeCurrent(null, false);\r\n            } else {\r\n                let index = active.indexOf(combatant) + 1;\r\n                let newRound = false;\r\n                if (index >= active.length) {\r\n                    index = 0;\r\n                    newRound = true;\r\n                }\r\n                this.makeCurrent(active[index], newRound);\r\n            }\r\n        }\r\n    }\r\n\r\n    private changeHP(combatant: Combatant & Monster, hp: number, temp: number) {\r\n        combatant.hp = hp;\r\n        combatant.hpTemp = temp;\r\n\r\n        this.setState({\r\n            combats: this.state.combats\r\n        });\r\n    }\r\n\r\n    private addCondition(combatant: Combatant & Monster) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            const condition = Factory.createCondition();\r\n            condition.name = 'blinded';\r\n\r\n            this.setState({\r\n                modal: {\r\n                    type: 'condition-add',\r\n                    condition: condition,\r\n                    combatant: combatant,\r\n                    combat: combat\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private addConditionFromModal() {\r\n        this.state.modal.combatant.conditions.push(this.state.modal.condition);\r\n\r\n        this.setState({\r\n            combats: this.state.combats,\r\n            modal: null\r\n        });\r\n    }\r\n\r\n    private editCondition(combatant: Combatant & Monster, condition: Condition) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            this.setState({\r\n                modal: {\r\n                    type: 'condition-edit',\r\n                    condition: condition,\r\n                    combatant: combatant,\r\n                    combat: combat\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private editConditionFromModal() {\r\n        const conditions: Condition[] = this.state.modal.combatant.conditions;\r\n        const original = conditions.find(c => c.id === this.state.modal.condition.id);\r\n        if (original) {\r\n            const index = conditions.indexOf(original);\r\n            // eslint-disable-next-line\r\n            conditions[index] = this.state.modal.condition;\r\n\r\n            this.setState({\r\n                combats: this.state.combats,\r\n                modal: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private removeCondition(combatant: Combatant & Monster, conditionID: string) {\r\n        const condition = combatant.conditions.find(c => c.id === conditionID);\r\n        if (condition) {\r\n            const index = combatant.conditions.indexOf(condition);\r\n            combatant.conditions.splice(index, 1);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private sortCombatants(combat: Combat) {\r\n        combat.combatants.sort((a, b) => {\r\n            // First sort by initiative, descending\r\n            if (a.initiative && b.initiative && (a.initiative < b.initiative)) { return 1; }\r\n            if (a.initiative && b.initiative && (a.initiative > b.initiative)) { return -1; }\r\n            // Then sort by name, ascending\r\n            if (a.name < b.name) { return -1; }\r\n            if (a.name > b.name) { return 1; }\r\n            return 0;\r\n        });\r\n    }\r\n\r\n    private closeNotification(notification: Notification, removeCondition: boolean) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            const index = combat.notifications.indexOf(notification);\r\n            combat.notifications.splice(index, 1);\r\n\r\n            if (removeCondition && notification.combatant && notification.data) {\r\n                const conditionIndex = notification.combatant.conditions.indexOf(notification.data as Condition);\r\n                notification.combatant.conditions.splice(conditionIndex, 1);\r\n            }\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private toggleTag(combatant: Combatant, tag: string) {\r\n        if (combatant.tags.includes(tag)) {\r\n            combatant.tags = combatant.tags.filter(t => t !== tag);\r\n        } else {\r\n            combatant.tags.push(tag);\r\n        }\r\n\r\n        this.setState({\r\n            combats: this.state.combats\r\n        });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    private setView(view: string) {\r\n        this.setState({\r\n            view: view\r\n        });\r\n    }\r\n\r\n    private openAbout() {\r\n        this.setState({\r\n            modal: {\r\n                type: 'about'\r\n            }\r\n        });\r\n    }\r\n\r\n    private closeModal() {\r\n        this.setState({\r\n            modal: null\r\n        });\r\n    }\r\n\r\n    private selectParty(party: Party | null) {\r\n        this.setState({\r\n            selectedPartyID: party ? party.id : null\r\n        });\r\n    }\r\n\r\n    private selectMonsterGroup(group: MonsterGroup | null) {\r\n        this.setState({\r\n            selectedMonsterGroupID: group ? group.id : null\r\n        });\r\n    }\r\n\r\n    private selectEncounter(encounter: Encounter | null) {\r\n        this.setState({\r\n            selectedEncounterID: encounter ? encounter.id : null\r\n        });\r\n    }\r\n\r\n    private selectMapFolio(mapFolio: MapFolio | null) {\r\n        this.setState({\r\n            selectedMapFolioID: mapFolio ? mapFolio.id : null\r\n        });\r\n    }\r\n\r\n    private resetAll() {\r\n        this.setState({\r\n            parties: [],\r\n            selectedPartyID: null,\r\n            library: [],\r\n            selectedMonsterGroupID: null,\r\n            encounters: [],\r\n            selectedEncounterID: null,\r\n            mapFolios: [],\r\n            selectedMapFolioID: null,\r\n            combats: [],\r\n            selectedCombatID: null\r\n        });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    private getMonster(monsterName: string, groupName: string) {\r\n        const group = this.state.library.find(p => p.name === groupName);\r\n        if (group) {\r\n            return group.monsters.find(monster => monster.name === monsterName);\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    private changeValue(combatant: any, type: string, value: any) {\r\n        switch (type) {\r\n            case 'hp':\r\n                value = Math.min(value, combatant.hpMax);\r\n                value = Math.max(value, 0);\r\n                break;\r\n            case 'hpTemp':\r\n                value = Math.max(value, 0);\r\n                break;\r\n            case 'level':\r\n                value = Math.max(value, 1);\r\n                value = (combatant.player !== undefined) ? Math.min(value, 20) : Math.min(value, 6);\r\n                break;\r\n            case 'count':\r\n                value = Math.max(value, 1);\r\n                break;\r\n            case 'hitDice':\r\n                value = Math.max(value, 1);\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        const tokens = type.split('.');\r\n        let obj = combatant;\r\n        for (let n = 0; n !== tokens.length; ++n) {\r\n            const token = tokens[n];\r\n            if (n === tokens.length - 1) {\r\n                obj[token] = value;\r\n            } else {\r\n                obj = obj[token];\r\n            }\r\n        }\r\n\r\n        Utils.sort(this.state.parties);\r\n        Utils.sort(this.state.library);\r\n        Utils.sort(this.state.encounters);\r\n\r\n        if (type === 'initiative') {\r\n            if (!(combatant as Combatant).pending) {\r\n                const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n                this.sortCombatants(combat as Combat);\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            parties: this.state.parties,\r\n            library: this.state.library,\r\n            encounters: this.state.encounters,\r\n            combats: this.state.combats,\r\n            selectedPartyID: this.state.selectedPartyID,\r\n            selectedMonsterGroupID: this.state.selectedMonsterGroupID,\r\n            selectedEncounterID: this.state.selectedEncounterID,\r\n            selectedCombatID: this.state.selectedCombatID,\r\n            modal: this.state.modal\r\n        });\r\n    }\r\n\r\n    private nudgeValue(combatant: any, type: string, delta: number) {\r\n        const tokens = type.split('.');\r\n        let obj = combatant;\r\n        for (let n = 0; n !== tokens.length; ++n) {\r\n            const token = tokens[n];\r\n            if (n === tokens.length - 1) {\r\n                let value = null;\r\n                value = (token === 'challenge') ? Utils.nudgeChallenge(obj.challenge, delta) : obj[token] + delta;\r\n                this.changeValue(combatant, type, value);\r\n            } else {\r\n                obj = obj[token];\r\n            }\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    private getActions() {\r\n        switch (this.state.view) {\r\n            case 'parties':\r\n            case 'encounter':\r\n            case 'maps':\r\n                return (\r\n                    <div className='actions'>\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='search'\r\n                                value={this.state.filter}\r\n                                onChange={event => this.changeValue(this.state, 'filter', event.target.value)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                );\r\n            case 'library':\r\n                return (\r\n                    <div className='actions'>\r\n                        <div className='section'>\r\n                            <button onClick={() => this.openDemographics()}>demographics</button>\r\n                        </div>\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='search'\r\n                                value={this.state.filter}\r\n                                onChange={event => this.changeValue(this.state, 'filter', event.target.value)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                );\r\n            case 'combat':\r\n                const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n                if (combat) {\r\n                    const encounter = this.state.encounters.find(e => e.id === combat.encounterID);\r\n                    if (encounter) {\r\n                        let xp = 0;\r\n                        combat.combatants.filter(c => c.type === 'monster')\r\n                            .forEach(combatant => {\r\n                                xp += Utils.experience((combatant as Combatant & Monster).challenge);\r\n                            });\r\n                        return (\r\n                            <div className='actions'>\r\n                                <div className='section'>\r\n                                    <div className='text'>round: {combat.round}</div>\r\n                                </div>\r\n                                <div className='section'>\r\n                                    <div className='text'>xp: {xp}</div>\r\n                                </div>\r\n                                <div className='section' style={{ display: encounter.waves.length === 0 ? 'none' : ''}}>\r\n                                    <button onClick={() => this.openWaveModal()}>add wave</button>\r\n                                </div>\r\n                                <div className='section'>\r\n                                    <button onClick={() => this.addToEncounter()}>add combatants</button>\r\n                                </div>\r\n                                <div className='section'>\r\n                                    <button onClick={() => this.pauseCombat()}>pause encounter</button>\r\n                                </div>\r\n                                <div className='section'>\r\n                                    <button onClick={() => this.endCombat()}>end encounter</button>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    }\r\n                } else {\r\n                    return (\r\n                        <div className='actions'>\r\n                            <div className='section'>\r\n                                <input\r\n                                    type='text'\r\n                                    placeholder='search'\r\n                                    value={this.state.filter}\r\n                                    onChange={event => this.changeValue(this.state, 'filter', event.target.value)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private getContent() {\r\n        switch (this.state.view) {\r\n            case 'home':\r\n                return (\r\n                    <HomeScreen\r\n                        library={this.state.library}\r\n                        addOpenGameContent={() => this.addOpenGameContent()}\r\n                    />\r\n                );\r\n            case 'parties':\r\n                return (\r\n                    <PartiesScreen\r\n                        parties={this.state.parties}\r\n                        selection={this.state.parties.find(p => p.id === this.state.selectedPartyID) || null}\r\n                        filter={this.state.filter}\r\n                        selectParty={party => this.selectParty(party)}\r\n                        addParty={() => this.addParty()}\r\n                        removeParty={() => this.removeParty()}\r\n                        addPC={() => this.addPC()}\r\n                        editPC={pc => this.editPC(pc)}\r\n                        removePC={pc => this.removePC(pc)}\r\n                        sortPCs={() => this.sortPCs()}\r\n                        changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                        nudgeValue={(combatant, type, delta) => this.nudgeValue(combatant, type, delta)}\r\n                    />\r\n                );\r\n            case 'library':\r\n                return (\r\n                    <MonsterLibraryScreen\r\n                        library={this.state.library}\r\n                        selection={this.state.library.find(g => g.id === this.state.selectedMonsterGroupID) || null}\r\n                        filter={this.state.filter}\r\n                        selectMonsterGroup={group => this.selectMonsterGroup(group)}\r\n                        addMonsterGroup={() => this.addMonsterGroup()}\r\n                        removeMonsterGroup={() => this.removeMonsterGroup()}\r\n                        addMonster={() => this.addMonster()}\r\n                        generateMonster={() => this.generateMonster()}\r\n                        removeMonster={monster => this.removeMonster(monster)}\r\n                        sortMonsters={() => this.sortMonsters()}\r\n                        changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                        nudgeValue={(combatant, type, delta) => this.nudgeValue(combatant, type, delta)}\r\n                        editMonster={combatant => this.editMonster(combatant)}\r\n                        cloneMonster={(combatant, name) => this.cloneMonster(combatant, name)}\r\n                        moveToGroup={(combatant, groupID) => this.moveToGroup(combatant, groupID)}\r\n                    />\r\n                );\r\n            case 'encounter':\r\n                return (\r\n                    <EncounterBuilderScreen\r\n                        encounters={this.state.encounters}\r\n                        selection={this.state.encounters.find(e => e.id === this.state.selectedEncounterID) || null}\r\n                        filter={this.state.filter}\r\n                        parties={this.state.parties}\r\n                        library={this.state.library}\r\n                        selectEncounter={encounter => this.selectEncounter(encounter)}\r\n                        addEncounter={() => this.addEncounter()}\r\n                        removeEncounter={() => this.removeEncounter()}\r\n                        addWave={() => this.addWaveToEncounter()}\r\n                        removeWave={wave => this.removeWave(wave)}\r\n                        getMonster={(monsterName, groupName) => this.getMonster(monsterName, groupName) || null}\r\n                        addEncounterSlot={(monster, waveID) => this.addEncounterSlot(monster, waveID)}\r\n                        removeEncounterSlot={(slot, waveID) => this.removeEncounterSlot(slot, waveID)}\r\n                        nudgeValue={(slot, type, delta) => this.nudgeValue(slot, type, delta)}\r\n                        changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                    />\r\n                );\r\n            case 'maps':\r\n                return (\r\n                    <MapFoliosScreen\r\n                        mapFolios={this.state.mapFolios}\r\n                        selection={this.state.mapFolios.find(f => f.id === this.state.selectedMapFolioID) || null}\r\n                        filter={this.state.filter}\r\n                        selectMapFolio={folio => this.selectMapFolio(folio)}\r\n                        addMapFolio={() => this.addMapFolio()}\r\n                        removeMapFolio={() => this.removeMapFolio()}\r\n                        addMap={() => this.addMap()}\r\n                        editMap={map => this.editMap(map)}\r\n                        removeMap={map => this.removeMap(map)}\r\n                        changeValue={(source, type, value) => this.changeValue(source, type, value)}\r\n                    />\r\n                );\r\n            case 'combat':\r\n                return (\r\n                    <CombatManagerScreen\r\n                        combats={this.state.combats}\r\n                        combat={this.state.combats.find(c => c.id === this.state.selectedCombatID) || null}\r\n                        filter={this.state.filter}\r\n                        createCombat={() => this.createCombat()}\r\n                        resumeEncounter={pausedCombat => this.resumeCombat(pausedCombat)}\r\n                        nudgeValue={(combatant, type, delta) => this.nudgeValue(combatant, type, delta)}\r\n                        changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                        makeCurrent={(combatant) => this.makeCurrent(combatant, false)}\r\n                        makeActive={(combatant) => this.makeActive(combatant)}\r\n                        makeDefeated={(combatant) => this.makeDefeated(combatant)}\r\n                        removeCombatant={(combatant) => this.removeCombatant(combatant)}\r\n                        addCondition={(combatant) => this.addCondition(combatant)}\r\n                        editCondition={(combatant, condition) => this.editCondition(combatant, condition)}\r\n                        removeCondition={(combatant, conditionID) => this.removeCondition(combatant, conditionID)}\r\n                        mapAdd={(combatant, x, y) => this.mapAdd(combatant, x, y)}\r\n                        mapMove={(combatant, dir) => this.mapMove(combatant, dir)}\r\n                        mapRemove={combatant => this.mapRemove(combatant)}\r\n                        endTurn={(combatant) => this.endTurn(combatant)}\r\n                        changeHP={(combatant, hp, temp) => this.changeHP(combatant, hp, temp)}\r\n                        close={(notification, removeCondition) => this.closeNotification(notification, removeCondition)}\r\n                        toggleTag={(combatant, tag) => this.toggleTag(combatant, tag)}\r\n                    />\r\n                );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private getModal() {\r\n        if (this.state.modal) {\r\n            let modalSidebar = false;\r\n            let modalTitle = null;\r\n            let modalContent = null;\r\n            let modalAllowScroll = true;\r\n\r\n            const modalButtons = {\r\n                left: [] as JSX.Element[],\r\n                right: [\r\n                    <button key='close' onClick={() => this.closeModal()}>close</button>\r\n                ] as JSX.Element[]\r\n            };\r\n\r\n            switch (this.state.modal.type) {\r\n                case 'about':\r\n                    modalSidebar = true;\r\n                    modalContent = (\r\n                        <AboutModal\r\n                            resetAll={() => this.resetAll()}\r\n                            changeValue={(source, type, value) => this.changeValue(source, type, value)}\r\n                        />\r\n                    );\r\n                    modalButtons.right = [];\r\n                    break;\r\n                case 'demographics':\r\n                    modalSidebar = true;\r\n                    modalContent = (\r\n                        <DemographicsModal\r\n                            library={this.state.library}\r\n                        />\r\n                    );\r\n                    modalButtons.right = [];\r\n                    break;\r\n                case 'pc':\r\n                        modalTitle = 'pc editor';\r\n                        modalContent = (\r\n                            <PCEditorModal\r\n                                pc={this.state.modal.pc}\r\n                            />\r\n                        );\r\n                        modalButtons.right = [\r\n                            <button key='save' onClick={() => this.savePC()}>save</button>,\r\n                            <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                        ];\r\n                        break;\r\n                case 'monster':\r\n                    modalTitle = 'monster editor';\r\n                    modalContent = (\r\n                        <MonsterEditorModal\r\n                            monster={this.state.modal.monster}\r\n                            library={this.state.library}\r\n                            showSidebar={this.state.modal.showSidebar}\r\n                        />\r\n                    );\r\n                    modalAllowScroll = false;\r\n                    modalButtons.left = [\r\n                        (\r\n                            <Checkbox\r\n                                key='sidebar'\r\n                                label='advanced tools'\r\n                                checked={this.state.modal.showSidebar}\r\n                                changeValue={() => this.toggleShowSidebar()}\r\n                            />\r\n                        )\r\n                    ];\r\n                    modalButtons.right = [\r\n                        <button key='save' onClick={() => this.saveMonster()}>save</button>,\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                case 'random-monster':\r\n                    modalTitle = 'random monster generator';\r\n                    modalContent = (\r\n                        <RandomMonsterModal\r\n                            monster={this.state.modal.monster}\r\n                            library={this.state.library}\r\n                        />\r\n                    );\r\n                    modalAllowScroll = false;\r\n                    modalButtons.right = [\r\n                        <button key='save' onClick={() => this.saveMonster()}>save</button>,\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                case 'map':\r\n                    modalTitle = 'map editor';\r\n                    modalContent = (\r\n                        <MapEditorModal\r\n                            map={this.state.modal.map}\r\n                        />\r\n                    );\r\n                    modalAllowScroll = false;\r\n                    modalButtons.right = [\r\n                        <button key='save' onClick={() => this.saveMap()}>save</button>,\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                case 'combat-start':\r\n                    modalTitle = 'start a new encounter';\r\n                    modalContent = (\r\n                        <CombatStartModal\r\n                            combatSetup={this.state.modal.combatSetup}\r\n                            parties={this.state.parties}\r\n                            encounters={this.state.encounters}\r\n                            mapFolios={this.state.mapFolios}\r\n                            getMonster={(monsterName, groupName) => this.getMonster(monsterName, groupName) || null}\r\n                            notify={() => this.setState({modal: this.state.modal})}\r\n                        />\r\n                    );\r\n                    modalAllowScroll = false;\r\n                    modalButtons.right = [\r\n                        (\r\n                            <button\r\n                                key='start encounter'\r\n                                className={this.state.modal.combatSetup.partyID && this.state.modal.combatSetup.encounterID ? '' : 'disabled'}\r\n                                onClick={() => this.startCombat()}\r\n                            >\r\n                                start encounter\r\n                            </button>\r\n                        ),\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                case 'combat-wave':\r\n                    modalTitle = 'encounter waves';\r\n                    modalContent = (\r\n                        <CombatStartModal\r\n                            combatSetup={this.state.modal.combatSetup}\r\n                            encounters={this.state.encounters}\r\n                            getMonster={(monsterName, groupName) => this.getMonster(monsterName, groupName) || null}\r\n                            notify={() => this.setState({modal: this.state.modal})}\r\n                        />\r\n                    );\r\n                    modalAllowScroll = false;\r\n                    modalButtons.right = [\r\n                        (\r\n                            <button\r\n                                key='add wave'\r\n                                className={this.state.modal.combatSetup.waveID !== null ? '' : 'disabled'}\r\n                                onClick={() => this.addWaveToCombat()}\r\n                            >\r\n                                add wave\r\n                            </button>\r\n                        ),\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                case 'combat-add-combatants':\r\n                        modalTitle = 'add combatants';\r\n                        modalContent = (\r\n                            <AddCombatantsModal\r\n                                combatants={this.state.modal.combatants}\r\n                                library={this.state.library}\r\n                            />\r\n                        );\r\n                        modalAllowScroll = false;\r\n                        modalButtons.right = [\r\n                            (\r\n                                <button\r\n                                    key='add combatants'\r\n                                    onClick={() => this.addCombatantsFromModal()}\r\n                                >\r\n                                    add combatants\r\n                                </button>\r\n                            ),\r\n                            <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                        ];\r\n                        break;\r\n                case 'condition-add':\r\n                    modalTitle = 'add a condition';\r\n                    modalContent = (\r\n                        <ConditionModal\r\n                            condition={this.state.modal.condition}\r\n                            combatant={this.state.modal.combatant}\r\n                            combat={this.state.modal.combat}\r\n                        />\r\n                    );\r\n                    modalAllowScroll = false;\r\n                    modalButtons.right = [\r\n                        <button key='add' onClick={() => this.addConditionFromModal()}>add</button>,\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                case 'condition-edit':\r\n                    modalTitle = 'edit condition';\r\n                    modalContent = (\r\n                        <ConditionModal\r\n                            condition={this.state.modal.condition}\r\n                            combatant={this.state.modal.combatant}\r\n                            combat={this.state.modal.combat}\r\n                        />\r\n                    );\r\n                    modalButtons.right = [\r\n                        <button key='save' onClick={() => this.editConditionFromModal()}>save</button>,\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                default:\r\n                    // Do nothing\r\n                    break;\r\n            }\r\n\r\n            return (\r\n                <div className='overlay' onClick={() => modalSidebar ? this.closeModal() : null}>\r\n                    <div className={modalSidebar ? 'modal sidebar' : 'modal'} onClick={e => e.stopPropagation()}>\r\n                        <div className='modal-header'>\r\n                            <div className='title'>{modalTitle}</div>\r\n                            {modalSidebar ? <img className='image' src={close} alt='close' onClick={() => this.closeModal()} /> : null}\r\n                        </div>\r\n                        <div className={modalAllowScroll ? 'modal-content scrollable' : 'modal-content'}>\r\n                            {modalContent}\r\n                        </div>\r\n                        <div className='modal-footer'>\r\n                            <div className='left'>{modalButtons.left}</div>\r\n                            <div className='right'>{modalButtons.right}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const content = this.getContent();\r\n            const actions = this.getActions();\r\n            const modal = this.getModal();\r\n\r\n            return (\r\n                <div className='dojo'>\r\n                    <Titlebar\r\n                        actions={actions}\r\n                        blur={modal !== null}\r\n                        openHome={() => this.setView('home')}\r\n                        openAbout={() => this.openAbout()}\r\n                    />\r\n                    <div className={(modal === null) ? 'page-content' : 'page-content blur'}>\r\n                        {content}\r\n                    </div>\r\n                    <Navbar\r\n                        view={this.state.view}\r\n                        parties={this.state.parties}\r\n                        library={this.state.library}\r\n                        encounters={this.state.encounters}\r\n                        blur={modal !== null}\r\n                        setView={view => this.setView(view)}\r\n                    />\r\n                    {modal}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './style/css/foundation.css';\r\nimport './style/scss/app.scss';\r\nimport './style/scss/controls.scss';\r\n\r\nimport Dojo from './components/dojo';\r\n\r\nReactDOM.render(<Dojo />, document.getElementById('root'));\r\n"],"sourceRoot":""}