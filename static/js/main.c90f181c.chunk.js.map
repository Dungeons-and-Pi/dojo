{"version":3,"sources":["resources/images/down-arrow-black.svg","resources/images/down-arrow.svg","resources/images/close-black.svg","resources/images/warning.svg","resources/images/plus.svg","resources/images/minus.svg","resources/images/ellipsis.svg","resources/images/checked.svg","resources/images/unchecked.svg","resources/images/settings.svg","utils.ts","factory.ts","components/screens/home-screen.tsx","components/cards/info-card.tsx","components/cards/information/parties-card.tsx","components/list-items/party-list-item.tsx","components/controls/confirm-button.tsx","components/cards/party-card.tsx","components/controls/radial.tsx","components/controls/spin.tsx","components/cards/pc-card.tsx","components/panels/card-group.tsx","components/screens/parties-screen.tsx","components/cards/information/monster-library-card.tsx","components/list-items/monster-group-list-item.tsx","components/cards/monster-group-card.tsx","components/controls/expander.tsx","components/controls/dropdown.tsx","components/panels/ability-score-panel.tsx","components/panels/traits-panel.tsx","components/panels/conditions-panel.tsx","components/cards/monster-card.tsx","components/screens/monster-library-screen.tsx","components/cards/error-card.tsx","models/models.ts","components/cards/filter-card.tsx","components/cards/wave-card.tsx","components/cards/information/encounter-builder-card.tsx","components/panels/difficulty-chart-panel.tsx","components/cards/encounter-card.tsx","components/list-items/encounter-list-item.tsx","components/screens/encounter-builder-screen.tsx","components/cards/information/map-folios-card.tsx","components/list-items/map-folio-list-item.tsx","components/cards/map-folio-card.tsx","components/panels/hit-point-gauge.tsx","components/panels/map-panel.tsx","components/cards/map-card.tsx","components/screens/map-folios-screen.tsx","components/cards/information/combat-manager-card.tsx","components/list-items/combat-list-item.tsx","components/screens/combat-manager-screen.tsx","components/controls/checkbox.tsx","components/modals/about-modal.tsx","components/controls/selector.tsx","components/modals/demographics-modal.tsx","components/modals/monster-editor-modal.tsx","components/cards/map-tile-card.tsx","components/modals/map-editor-modal.tsx","components/modals/combat-start-modal.tsx","components/controls/radio-group.tsx","components/modals/condition-modal.tsx","components/panels/titlebar.tsx","components/panels/navbar.tsx","components/dojo.tsx","index.js"],"names":["module","exports","__webpack_require__","p","Utils","monster","library","group","this","monsterIdToGroup","id","g","find","monsters","includes","filter","text","result","toLowerCase","split","forEach","token","indexOf","ex","console","log","s4","Math","floor","random","toString","substring","collection","sort","a","b","aName","name","bName","value","count","aValue","bValue","score","mod","str","size","cr","parseInt","push","ac","hpMin","hpMax","attack","dmgMin","dmgMax","save","level","difficulty","type","delta","condition","combat","duration","saveDuration","saveType","toUpperCase","saves","saveDC","combatantDuration","point","c","combatants","combatantID","displayName","roundsDuration","rounds","encounter","monsterNames","slots","slot","names","monsterName","n","Factory","guid","pcs","active","player","race","classes","background","languages","passiveInsight","passiveInvestigation","passivePerception","initiative","url","category","tag","alignment","challenge","abilityScores","dex","con","int","wis","cha","hpTemp","hitDice","damage","resist","vulnerable","immune","savingThrows","speed","skills","senses","equipment","traits","conditionImmunities","usage","waves","monsterGroupName","maps","items","x","y","width","height","terrain","partyID","encounterID","waveID","folioID","mapID","encounterInitMode","map","round","notifications","issues","timestamp","combatant","HomeScreen","_this","props","length","react_default","createElement","className","href","target","rel","onClick","addOpenGameContent","e","error","React","Component","InfoCard","heading","getHeading","content","getContent","defaultProps","PartiesCard","action","parties","info_card_InfoCard","PartyListItem","party","pc","key","selected","setSelection","ConfirmButton","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","pressed","setState","toggle","callback","_this2","src","warning","alt","details","perform","disabled","PartyCard","activePCs","selection","join","reduce","array","localeCompare","insightSummary","investigationSummary","perceptionSummary","insight","min","max","investigation","perception","placeholder","onChange","event","changeValue","addPC","sortPCs","confirm_button_ConfirmButton","removeParty","Radial","dir","dir2","arguments","undefined","stopPropagation","click","style","direction","showOut","showIn","showDiag","display","arrow","transform","padding","Spin","nudgeValue","preventDefault","source","minusBtns","plusBtns","factors","factor","onTouchEnd","touchEnd","reverse","minus","plus","infoWidth","label","PCCard","showDetails","options","mode","removePC","radial_Radial","mapMove","spin_Spin","mapRemove","mapAdd","pending","defeated","removeCombatant","current","endTurn","makeDefeated","makeCurrent","makeActive","commonStatBlock","stats","imageStyle","toggleDetails","CardGroup","showCards","hidden","closeBtn","showClose","close","showToggle","toggleCards","cards","PartiesScreen","help","showHelp","parties_card_PartiesCard","party_list_item_PartyListItem","selectParty","activeCards","inactiveCards","party_card_PartyCard","pc_card_PCCard","addParty","card_group_CardGroup","MonsterLibraryCard","MonsterGroupListItem","matchGroup","match","matchMonster","MonsterGroupCard","addMonster","sortMonsters","removeMonsterGroup","Expander","expanded","Dropdown","open","optionID","select","selectedText","selectedID","option","o","title","ellipsis","dropdown_DropdownOption","toggleOpen","DropdownOption","_this3","AbilityScorePanel","showAbilityScores","edit","toggleAbilityScores","modifier","TraitsPanel","actions","legendaryActions","lairActions","regionalEffects","item","traits_panel_TraitPanel","trait","changeTrait","removeTrait","copyTrait","addTrait","TraitPanel","traitType","expander_Expander","ConditionsPanel","conditions","conditions_panel_ConditionPanel","nudgeConditionValue","editCondition","removeCondition","conditionID","addCondition","ConditionPanel","conditionDurationText","description","conditionText","MonsterCard","cloneName","damageOrHealing","hp","changeHP","temp","val","sizeAndType","align","wave","_this4","some","s","_this5","editMonster","setCloneName","cloneMonster","groupOptions","dropdown_Dropdown","moveToGroup","removeMonster","removeEncounterSlot","canAdd","monsterIsInWave","addEncounterSlot","slotSection","hitDieType","ability_score_panel_AbilityScorePanel","traits_panel_TraitsPanel","nudgeDamage","heal","setDamage","conditions_panel_ConditionsPanel","MonsterLibraryScreen","monster_library_card_MonsterLibraryCard","listItems","showMonsterGroup","monster_group_list_item_MonsterGroupListItem","selectMonsterGroup","monster_group_card_MonsterGroupCard","monster_card_MonsterCard","groupID","addMonsterGroup","ErrorCard","SIZE_TYPES","CATEGORY_TYPES","TRAIT_TYPES","CONDITION_TYPES","TERRAIN_TYPES","FilterCard","showAll","sizeOptions","concat","catOptions","cat","resetFilter","summary","challengeMin","challengeMax","toggleAll","WaveCard","removeWave","EncounterBuilderCard","encounters","DifficultyChartPanel","monsterCount","monsterXp","getMonster","experience","xpThresholds","diffSection","adjustedXp","experienceFactor","xpEasy","xpMedium","xpHard","xpDeadly","pcExperience","adjustedDifficulty","small","getLeft","xp","getRight","left","right","EncounterCard","partyOptions","difficultySection","difficulty_chart_panel_DifficultyChartPanel","addWave","removeEncounter","EncounterListItem","EncounterBuilderScreen","getMonsterGroup","nudgeChallenge","changeFilterValue","index","error_card_ErrorCard","libraryCards","filter_card_FilterCard","nudgeFilterValue","encounter_builder_card_EncounterBuilderCard","encounter_list_item_EncounterListItem","selectEncounter","encounterName","encounterCards","encounter_card_EncounterCard","getMonsterCards","card","waveCards","wave_card_WaveCard","field","addEncounter","getLibrarySection","MapFoliosCard","mapFolios","MapFolioListItem","mapFolio","MapFolioCard","addMap","removeMapFolio","HitPointGauge","hpCurrent","hpBloodied","hpWidth","hpTempBar","hpTempWidth","MapPanel","border","dimensions","i","minX","maxX","minY","maxY","mapDimensions","sideLength","getSideLength","top","getMapDimensions","grid","pos","getPosition","map_panel_GridSquare","position","setSelectedItemID","onDoubleClick","addMapTile","tiles","map_panel_MapTile","tile","selectable","selectedItemID","thumbnail","tokens","map_panel_MapToken","simple","mt","dragOverlay","showOverlay","yOver","xOver","posOver","overlay","gridSquareClicked","GridSquare","doubleClick","MapTile","MapToken","initials","hpGauge","altitudeBadge","conditionsBadge","hit_point_gauge_HitPointGauge","altitude","MapCard","map_panel_MapPanel","editMap","removeMap","MapFoliosScreen","map_folios_card_MapFoliosCard","folios","map_folio_list_item_MapFolioListItem","selectMapFolio","folio","folioCards","map_folio_card_MapFolioCard","map_card_MapCard","addMapFolio","CombatManagerCard","CombatListItem","CombatManagerScreen","selectedTokenID","addingToMapID","setAddingToMapID","leftPaneContent","centrePaneContent","rightPaneContent","createCard","combat_manager_screen_PendingCombatantRow","setSelectedTokenID","combat_manager_screen_CombatantRow","pendingHelp","activeHelp","combat_manager_screen_NotificationPanel","notification","mapSection","addCombatantToMap","selectedCombatant","combat_manager_card_CombatManagerCard","combats","combat_list_item_CombatListItem","resumeEncounter","createCombat","NotificationPanel","saveSuccess","PendingCombatantRow","_this6","getInformationText","CombatantRow","notes","_this7","gauge","_this8","getContentPC","getContentMonster","Checkbox","checked","unchecked","AboutModal","resetAll","checkbox_Checkbox","Selector","tabs","itemsPerRow","rowCount","ceil","rowContents","rowIndex","selector_SelectorOption","rowSections","row","SelectorOption","DemographicsModal","chart","demographics","allMonsters","buckets","maxBucketSize","bucket","bars","set","selector_Selector","selectChart","MonsterEditorModal","page","showFilter","helpSection","subtype","sections","getHelpOptionsForPage","section","notify","setRandomValue","t","findIndex","splice","m","distinct","d","addedIDs","avg","createTrait","getActionTypeName","plural","copy","JSON","parse","stringify","newValue","hpPerDie","getValueSection","getActionsSection","dataType","values","v","sortByValue","sortByCount","valueSections","rows","addRandomTrait","similar","filterContent","toggleMatch","geneSplice","toggleFilter","_this9","showMonsters","getMonsters","selector","setHelpSection","getHelpSection","monsterList","getFilterCard","margin","transition","setPage","MapTileCard","terrainOptions","moveMapItem","resizeMapItem","cloneMapItem","removeMapItem","MapEditorModal","selectedTileID","createMapItem","smallMapItem","bigMapItem","tools","map_tile_card_MapTileCard","setSelectedTileID","CombatStartModal","combatSetup","enc","getMonsterNames","f","w","slotID","partyContent","selectedParty","pcSections","setParty","encounterOptions","encounterContent","selectedEncounter","monsterSections","waveMonsters","setEncounter","folioOptions","selectMapSection","thumbnailSection","mapOptions","setMapID","setFolioID","waveOptions","waveContent","selectedWave","setWave","_this10","slotsContainer","slotNames","inputs","combat_start_modal_MonsterName","changeName","setEncounterInitMode","leftSection","rightSection","getPartySection","getEncounterSection","getMapSection","getDifficultySection","getMonsterSection","getWaveSection","MonsterName","_this11","RadioGroup","radio_group_RadioGroupItem","itemID","RadioGroupItem","ConditionModal","conditionName","durationType","createConditionDurationSaves","createConditionDurationCombatant","createConditionDurationRounds","object","controls","saveOptions","pointOptions","combatantOptions","durations","radio_group_RadioGroup","setCondition","setDuration","Titlebar","blur","openHome","cog","openAbout","Navbar","partiesStyle","view","libraryStyle","encounterStyle","mapStyle","combatStyle","encountersEnabled","combatEnabled","setView","Dojo","selectedPartyID","selectedMonsterGroupID","selectedEncounterID","selectedMapFolioID","selectedCombatID","modal","libraryFilter","data","json","window","localStorage","getItem","setItem","createParty","getParty","createPC","createMonsterGroup","createMonster","sourceGroup","findMonster","original","clone","parseChallenge","challenge_rating","armor_class","hit_points","hit_dice","strength","dexterity","constitution","intelligence","wisdom","charisma","damage_resistances","damage_vulnerabilities","damage_immunities","condition_immunities","skill","special_abilities","rawTrait","buildTrait","legendary_actions","groupName","getMonsterGroupByName","openBracket","closeBracket","desc","createEncounter","getEncounter","createEncounterSlot","sortEncounterSlots","slotContainer","createEncounterWave","createMapFolio","getMapFolio","createMap","setup","createCombatSetup","partyName","init","groupRoll","dieRoll","singleRoll","sortCombatants","getCombat","Date","toLocaleString","newRound","actor","issue","miniSize","saveNotification","createNotification","endNotification","createCondition","conditionIndex","obj","home_screen_HomeScreen","parties_screen_PartiesScreen","monster_library_screen_MonsterLibraryScreen","openDemographics","encounter_builder_screen_EncounterBuilderScreen","addWaveToEncounter","map_folios_screen_MapFoliosScreen","combat_manager_screen_CombatManagerScreen","resumeCombat","closeNotification","openWaveModal","pauseCombat","endCombat","modalTitle","modalContent","modalAllowClose","modalAllowScroll","modalButtons","about_modal_AboutModal","demographics_modal_DemographicsModal","monster_editor_modal_MonsterEditorModal","toggleShowSimilarMonsters","saveMonster","closeModal","map_editor_modal_MapEditorModal","saveMap","combat_start_modal_CombatStartModal","startCombat","addWaveToCombat","condition_modal_ConditionModal","addConditionFromModal","editConditionFromModal","titlebar_Titlebar","navbar_Navbar","ReactDOM","render","dojo_Dojo","document","getElementById"],"mappings":"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","file":"static/js/main.c90f181c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/down-arrow-black.a2fc7a1f.svg\";","module.exports = __webpack_public_path__ + \"static/media/down-arrow.697dc1af.svg\";","module.exports = __webpack_public_path__ + \"static/media/close-black.7645a5b9.svg\";","module.exports = __webpack_public_path__ + \"static/media/warning.67a11a95.svg\";","module.exports = __webpack_public_path__ + \"static/media/plus.b60accff.svg\";","module.exports = __webpack_public_path__ + \"static/media/minus.7003cf50.svg\";","module.exports = __webpack_public_path__ + \"static/media/ellipsis.9650a20f.svg\";","module.exports = __webpack_public_path__ + \"static/media/checked.5cbd1005.svg\";","module.exports = __webpack_public_path__ + \"static/media/unchecked.3d4ae2dd.svg\";","module.exports = __webpack_public_path__ + \"static/media/settings.042bb1c2.svg\";","import {\r\n    MonsterGroup, Monster,\r\n    Encounter, EncounterWave,\r\n    Combat,\r\n    Condition, ConditionDurationSaves, ConditionDurationCombatant, ConditionDurationRounds\r\n} from \"./models/models\";\r\n\r\nexport default class Utils {\r\n\r\n    // This is an internal dictionary to speed up lookup\r\n    private static monsterIdToGroup: { [id: string]: MonsterGroup } = {}\r\n\r\n    public static getMonsterGroup(monster: Monster, library: MonsterGroup[]): MonsterGroup {\r\n        var group = this.monsterIdToGroup[monster.id];\r\n\r\n        if (!group) {\r\n            var g = library.find(g => g.monsters.includes(monster));\r\n            if (g) {\r\n                group = g;\r\n                this.monsterIdToGroup[monster.id] = group;\r\n            }\r\n        }\r\n\r\n        return group;\r\n    }\r\n\r\n    public static match(filter: string, text: string): boolean {\r\n        if (!filter) {\r\n            return true;\r\n        }\r\n\r\n        var result = true;\r\n\r\n        try {\r\n            var tokens = filter.toLowerCase().split(' ');\r\n            tokens.forEach(token => {\r\n                if (text.toLowerCase().indexOf(token) === -1) {\r\n                    result = false;\r\n                }\r\n            });\r\n        } catch (ex) {\r\n            console.log(ex);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public static guid(): string {\r\n        var s4 = () => {\r\n            return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\r\n        };\r\n        return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\r\n    }\r\n\r\n    public static sort(collection: any[]): any[] {\r\n        collection.sort((a, b) => {\r\n            var aName = a.name.toLowerCase();\r\n            var bName = b.name.toLowerCase();\r\n            if (aName < bName) return -1;\r\n            if (aName > bName) return 1;\r\n            return 0;\r\n        });\r\n        return collection;\r\n    }\r\n\r\n    public static sortByValue(collection: any[]): any[] {\r\n        collection.sort((a, b) => {\r\n            if (a.value < b.value) return -1;\r\n            if (a.value > b.value) return 1;\r\n            return 0;\r\n        });\r\n        return collection;\r\n    }\r\n\r\n    public static sortByCount(collection: any[]): any[] {\r\n        collection.sort((a, b) => {\r\n            if (a.count < b.count) return 1;\r\n            if (a.count > b.count) return -1;\r\n\r\n            var aValue = a.value.toLowerCase();\r\n            var bValue = b.value.toLowerCase();\r\n            if (aValue < bValue) return -1;\r\n            if (aValue > bValue) return 1;\r\n\r\n            return 0;\r\n        });\r\n        return collection;\r\n    }\r\n\r\n    public static modifier(score: number): string {\r\n        var mod = Math.floor((score - 10) / 2);\r\n        var str = mod.toString();\r\n        if (mod >= 0) {\r\n            str = '+' + str;\r\n        }\r\n        return str;\r\n    }\r\n\r\n    public static dieRoll(): number {\r\n        return Math.floor(Math.random() * 20) + 1;\r\n    }\r\n\r\n    public static miniSize(size: string): number {\r\n        switch (size) {\r\n            case 'tiny': return 1;\r\n            case 'small': return 1;\r\n            case 'medium': return 1;\r\n            case 'large': return 2;\r\n            case 'huge': return 3;\r\n            case 'gargantuan': return 4;\r\n            default: return 1;\r\n        }\r\n    }\r\n\r\n    public static hitDieType(size: string) {\r\n        switch (size) {\r\n            case 'tiny': return 4;\r\n            case 'small': return 6;\r\n            case 'medium': return 8;\r\n            case 'large': return 10;\r\n            case 'huge': return 12;\r\n            case 'gargantuan': return 20;\r\n            default: return 8;\r\n        }\r\n    }\r\n\r\n    public static challenge(cr: number): string {\r\n        switch (cr) {\r\n            case 0.125: return '1/8';\r\n            case 0.25: return '1/4';\r\n            case 0.5: return '1/2';\r\n            default: return cr.toString();\r\n        }\r\n    }\r\n\r\n    public static parseChallenge(cr: string): number {\r\n        switch (cr) {\r\n            case '1/8': return 0.125;\r\n            case '1/4': return 0.25;\r\n            case '1/2': return 0.5;\r\n            default: return parseInt(cr);\r\n        }\r\n    }\r\n\r\n    public static challengeDetails(): any[] {\r\n        var result: any[] = [];\r\n\r\n        result.push({ cr: 0,        ac: 13,       hpMin: 1, hpMax: 6,       attack: 3,  dmgMin: 0,   dmgMax: 1,   save: 13 });\r\n        result.push({ cr: 0.125,    ac: 13,       hpMin: 7, hpMax: 35,      attack: 3,  dmgMin: 2,   dmgMax: 3,   save: 13 });\r\n        result.push({ cr: 0.25,     ac: 13,       hpMin: 36, hpMax: 49,     attack: 3,  dmgMin: 4,   dmgMax: 5,   save: 13 });\r\n        result.push({ cr: 0.5,      ac: 13,       hpMin: 50, hpMax: 70,     attack: 3,  dmgMin: 6,   dmgMax: 8,   save: 13 });\r\n        result.push({ cr: 1,        ac: 13,       hpMin: 71, hpMax: 85,     attack: 3,  dmgMin: 9,   dmgMax: 14,  save: 13 });\r\n        result.push({ cr: 2,        ac: 13,       hpMin: 86, hpMax: 100,    attack: 3,  dmgMin: 15,  dmgMax: 20,  save: 13 });\r\n        result.push({ cr: 3,        ac: 13,       hpMin: 101, hpMax: 115,   attack: 4,  dmgMin: 21,  dmgMax: 26,  save: 13 });\r\n        result.push({ cr: 4,        ac: 14,       hpMin: 116, hpMax: 130,   attack: 5,  dmgMin: 27,  dmgMax: 32,  save: 14 });\r\n        result.push({ cr: 5,        ac: 15,       hpMin: 131, hpMax: 145,   attack: 6,  dmgMin: 33,  dmgMax: 38,  save: 15 });\r\n        result.push({ cr: 6,        ac: 15,       hpMin: 146, hpMax: 160,   attack: 6,  dmgMin: 39,  dmgMax: 44,  save: 15 });\r\n        result.push({ cr: 7,        ac: 15,       hpMin: 161, hpMax: 175,   attack: 6,  dmgMin: 45,  dmgMax: 50,  save: 15 });\r\n        result.push({ cr: 8,        ac: 16,       hpMin: 176, hpMax: 190,   attack: 7,  dmgMin: 51,  dmgMax: 56,  save: 16 });\r\n        result.push({ cr: 9,        ac: 16,       hpMin: 191, hpMax: 205,   attack: 7,  dmgMin: 57,  dmgMax: 62,  save: 16 });\r\n        result.push({ cr: 10,       ac: 17,       hpMin: 206, hpMax: 220,   attack: 7,  dmgMin: 63,  dmgMax: 68,  save: 16 });\r\n        result.push({ cr: 11,       ac: 17,       hpMin: 221, hpMax: 235,   attack: 8,  dmgMin: 69,  dmgMax: 74,  save: 17 });\r\n        result.push({ cr: 12,       ac: 17,       hpMin: 236, hpMax: 250,   attack: 8,  dmgMin: 75,  dmgMax: 80,  save: 17 });\r\n        result.push({ cr: 13,       ac: 18,       hpMin: 251, hpMax: 265,   attack: 8,  dmgMin: 81,  dmgMax: 86,  save: 18 });\r\n        result.push({ cr: 14,       ac: 18,       hpMin: 266, hpMax: 280,   attack: 8,  dmgMin: 87,  dmgMax: 92,  save: 18 });\r\n        result.push({ cr: 15,       ac: 18,       hpMin: 281, hpMax: 295,   attack: 8,  dmgMin: 93,  dmgMax: 98,  save: 18 });\r\n        result.push({ cr: 16,       ac: 18,       hpMin: 296, hpMax: 310,   attack: 9,  dmgMin: 99,  dmgMax: 104, save: 18 });\r\n        result.push({ cr: 17,       ac: 19,       hpMin: 311, hpMax: 325,   attack: 10, dmgMin: 105, dmgMax: 110, save: 19 });\r\n        result.push({ cr: 18,       ac: 19,       hpMin: 326, hpMax: 340,   attack: 10, dmgMin: 111, dmgMax: 116, save: 19 });\r\n        result.push({ cr: 19,       ac: 19,       hpMin: 341, hpMax: 355,   attack: 10, dmgMin: 117, dmgMax: 122, save: 19 });\r\n        result.push({ cr: 20,       ac: 19,       hpMin: 356, hpMax: 400,   attack: 10, dmgMin: 123, dmgMax: 140, save: 19 });\r\n        result.push({ cr: 21,       ac: 19,       hpMin: 401, hpMax: 445,   attack: 11, dmgMin: 141, dmgMax: 158, save: 20 });\r\n        result.push({ cr: 22,       ac: 19,       hpMin: 446, hpMax: 490,   attack: 11, dmgMin: 159, dmgMax: 176, save: 20 });\r\n        result.push({ cr: 23,       ac: 19,       hpMin: 491, hpMax: 535,   attack: 11, dmgMin: 177, dmgMax: 194, save: 20 });\r\n        result.push({ cr: 24,       ac: 19,       hpMin: 536, hpMax: 580,   attack: 12, dmgMin: 195, dmgMax: 212, save: 21 });\r\n        result.push({ cr: 25,       ac: 19,       hpMin: 581, hpMax: 625,   attack: 12, dmgMin: 213, dmgMax: 230, save: 21 });\r\n        result.push({ cr: 26,       ac: 19,       hpMin: 626, hpMax: 670,   attack: 12, dmgMin: 231, dmgMax: 248, save: 21 });\r\n        result.push({ cr: 27,       ac: 19,       hpMin: 671, hpMax: 715,   attack: 13, dmgMin: 249, dmgMax: 266, save: 22 });\r\n        result.push({ cr: 28,       ac: 19,       hpMin: 716, hpMax: 760,   attack: 13, dmgMin: 267, dmgMax: 284, save: 22 });\r\n        result.push({ cr: 29,       ac: 19,       hpMin: 761, hpMax: 805,   attack: 13, dmgMin: 285, dmgMax: 302, save: 22 });\r\n        result.push({ cr: 30,       ac: 19,       hpMin: 806, hpMax: 850,   attack: 14, dmgMin: 303, dmgMax: 320, save: 23 });\r\n\r\n        return result;\r\n    }\r\n\r\n    public static experience(cr: number): number {\r\n        switch (cr) {\r\n            case 0: return 10;\r\n            case 0.125: return 25;\r\n            case 0.25: return 50;\r\n            case 0.5: return 100;\r\n            case 1: return 200;\r\n            case 2: return 450;\r\n            case 3: return 700;\r\n            case 4: return 1100;\r\n            case 5: return 1800;\r\n            case 6: return 2300;\r\n            case 7: return 2900;\r\n            case 8: return 3900;\r\n            case 9: return 5000;\r\n            case 10: return 5900;\r\n            case 11: return 7200;\r\n            case 12: return 8400;\r\n            case 13: return 10000;\r\n            case 14: return 11500;\r\n            case 15: return 13000;\r\n            case 16: return 15000;\r\n            case 17: return 18000;\r\n            case 18: return 20000;\r\n            case 19: return 22000;\r\n            case 20: return 25000;\r\n            case 21: return 33000;\r\n            case 22: return 41000;\r\n            case 23: return 50000;\r\n            case 24: return 62000;\r\n            case 30: return 155000;\r\n            default: return 0;\r\n        }\r\n    }\r\n\r\n    public static experienceFactor(count: number): number {\r\n        switch (count) {\r\n            case 0:\r\n                return 0;\r\n            case 1:\r\n                return 1;\r\n            case 2:\r\n                return 1.5;\r\n            case 3:\r\n            case 4:\r\n            case 5:\r\n            case 6:\r\n                return 2;\r\n            case 7:\r\n            case 8:\r\n            case 9:\r\n            case 10:\r\n                return 2.5;\r\n            case 11:\r\n            case 12:\r\n            case 13:\r\n            case 14:\r\n                return 3;\r\n            default:\r\n                return 4;\r\n        }\r\n    }\r\n\r\n    public static pcExperience(level: number, difficulty: string): number {\r\n        switch (difficulty) {\r\n            case 'easy':\r\n                switch (level) {\r\n                    case 1: return 25;\r\n                    case 2: return 50;\r\n                    case 3: return 75;\r\n                    case 4: return 125;\r\n                    case 5: return 250;\r\n                    case 6: return 300;\r\n                    case 7: return 350;\r\n                    case 8: return 450;\r\n                    case 9: return 550;\r\n                    case 10: return 600;\r\n                    case 11: return 800;\r\n                    case 12: return 1000;\r\n                    case 13: return 1100;\r\n                    case 14: return 1250;\r\n                    case 15: return 1400;\r\n                    case 16: return 1600;\r\n                    case 17: return 2000;\r\n                    case 18: return 2100;\r\n                    case 19: return 2400;\r\n                    case 20: return 2800;\r\n                    default: return 0;\r\n                }\r\n            case 'medium':\r\n                switch (level) {\r\n                    case 1: return 50;\r\n                    case 2: return 100;\r\n                    case 3: return 150;\r\n                    case 4: return 250;\r\n                    case 5: return 500;\r\n                    case 6: return 600;\r\n                    case 7: return 750;\r\n                    case 8: return 900;\r\n                    case 9: return 1100;\r\n                    case 10: return 1200;\r\n                    case 11: return 1600;\r\n                    case 12: return 2000;\r\n                    case 13: return 2200;\r\n                    case 14: return 2500;\r\n                    case 15: return 2800;\r\n                    case 16: return 3200;\r\n                    case 17: return 3900;\r\n                    case 18: return 4200;\r\n                    case 19: return 4900;\r\n                    case 20: return 5700;\r\n                    default: return 0;\r\n                }\r\n            case 'hard':\r\n                switch (level) {\r\n                    case 1: return 75;\r\n                    case 2: return 150;\r\n                    case 3: return 225;\r\n                    case 4: return 375;\r\n                    case 5: return 750;\r\n                    case 6: return 900;\r\n                    case 7: return 1100;\r\n                    case 8: return 1400;\r\n                    case 9: return 1600;\r\n                    case 10: return 1900;\r\n                    case 11: return 2400;\r\n                    case 12: return 3000;\r\n                    case 13: return 3400;\r\n                    case 14: return 3800;\r\n                    case 15: return 4300;\r\n                    case 16: return 4800;\r\n                    case 17: return 5900;\r\n                    case 18: return 6300;\r\n                    case 19: return 7300;\r\n                    case 20: return 8500;\r\n                    default: return 0;\r\n                }\r\n            case 'deadly':\r\n                switch (level) {\r\n                    case 1: return 100;\r\n                    case 2: return 200;\r\n                    case 3: return 400;\r\n                    case 4: return 500;\r\n                    case 5: return 1100;\r\n                    case 6: return 1400;\r\n                    case 7: return 1700;\r\n                    case 8: return 2100;\r\n                    case 9: return 2400;\r\n                    case 10: return 2800;\r\n                    case 11: return 3600;\r\n                    case 12: return 4500;\r\n                    case 13: return 5100;\r\n                    case 14: return 5700;\r\n                    case 15: return 6400;\r\n                    case 16: return 7200;\r\n                    case 17: return 8800;\r\n                    case 18: return 9500;\r\n                    case 19: return 10900;\r\n                    case 20: return 12700;\r\n                    default: return 0;\r\n                }\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n\r\n    public static traitType(type: string): string {\r\n        switch (type) {\r\n            case 'trait':\r\n                return 'trait';\r\n            case 'action':\r\n                return 'action';\r\n            case 'legendary':\r\n                return 'legendary action';\r\n            case 'lair':\r\n                return 'lair action';\r\n            case 'regional':\r\n                return 'regional effect';\r\n            default:\r\n                return type;\r\n        }\r\n    }\r\n\r\n    public static nudgeChallenge(value: number, delta: number): number {\r\n        var result = 0;\r\n\r\n        switch (value) {\r\n            case 0:\r\n                if (delta === -1) {\r\n                    result = 0;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 0.125;\r\n                }\r\n                break;\r\n            case 0.125:\r\n                if (delta === -1) {\r\n                    result = 0;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 0.25;\r\n                }\r\n                break;\r\n            case 0.25:\r\n                if (delta === -1) {\r\n                    result = 0.125;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 0.5;\r\n                }\r\n                break;\r\n            case 0.5:\r\n                if (delta === -1) {\r\n                    result = 0.25;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 1;\r\n                }\r\n                break;\r\n            case 1:\r\n                if (delta === -1) {\r\n                    result = 0.5;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 2;\r\n                }\r\n                break;\r\n            default:\r\n                result = value + delta;\r\n                break;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public static conditionText(condition: Condition): string[] {\r\n        switch (condition.name) {\r\n            case 'blinded':\r\n                return [\r\n                    'a blinded creature can’t see and automatically fails any ability check that requires sight',\r\n                    'attack rolls against the creature have advantage, and the creature’s attack rolls have disadvantage'\r\n                ];\r\n            case 'charmed':\r\n                return [\r\n                    'a charmed creature can’t attack the charmer or target the charmer with harmful abilities or magical effects',\r\n                    'the charmer has advantage on any ability check to interact socially with the creature'\r\n                ];\r\n            case 'deafened':\r\n                return [\r\n                    'a deafened creature can’t hear and automatically fails any ability check that requires hearing.'\r\n                ];\r\n            case 'exhaustion': {\r\n                switch (condition.level) {\r\n                case 1:\r\n                    return [\r\n                        'disadvantage on ability checks'\r\n                    ];\r\n                case 2:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved'\r\n                    ];\r\n                case 3:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved',\r\n                        'disadvantage on attack rolls and saving throws'\r\n                    ];\r\n                case 4:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved',\r\n                        'disadvantage on attack rolls and saving throws',\r\n                        'hit point maximum halved'\r\n                    ];\r\n                case 5:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved',\r\n                        'disadvantage on attack rolls and saving throws',\r\n                        'hit point maximum halved',\r\n                        'speed reduced to 0'\r\n                    ];\r\n                case 6:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved',\r\n                        'disadvantage on attack rolls and saving throws',\r\n                        'hit point maximum halved',\r\n                        'speed reduced to 0',\r\n                        'death'\r\n                    ];\r\n                default:\r\n                    return [];\r\n                }\r\n            }\r\n            case 'frightened':\r\n                return [\r\n                    'a frightened creature has disadvantage on ability checks and attack rolls while the source of its fear is within line of sight',\r\n                    'the creature can’t willingly move closer to the source of its fear'\r\n                ];\r\n            case 'grappled':\r\n                return [\r\n                    'a grappled creature’s speed becomes 0, and it can’t benefit from any bonus to its speed',\r\n                    'the condition ends if the grappler is incapacitated',\r\n                    'the condition also ends if an effect removes the grappled creature from the reach of the grappler or grappling effect'\r\n                ];\r\n            case 'incapacitated':\r\n                return [\r\n                    'an incapacitated creature can’t take actions or reactions'\r\n                ];\r\n            case 'invisible':\r\n                return [\r\n                    'an invisible creature is impossible to see without the aid of magic or a special sense',\r\n                    'for the purpose of hiding, the creature is heavily obscured',\r\n                    'the creature’s location can be detected by any noise it makes or any tracks it leaves',\r\n                    'attack rolls against the creature have disadvantage, and the creature’s attack rolls have advantage'\r\n                ];\r\n            case 'paralyzed':\r\n                return [\r\n                    'a paralyzed creature is incapacitated (can’t take actions or reactions) and can’t move or speak',\r\n                    'the creature automatically fails strength and dexterity saving throws',\r\n                    'attack rolls against the creature have advantage',\r\n                    'any attack that hits the creature is a critical hit if the attacker is within 5 feet of the creature'\r\n                ];\r\n            case 'petrified':\r\n                return [\r\n                    'a petrified creature is transformed, along with any nonmagical object it is wearing or carrying, into a solid inanimate substance (usually stone)',\r\n                    'its weight increases by a factor of ten, and it ceases aging',\r\n                    'the creature is incapacitated (can’t take actions or reactions), can’t move or speak, and is unaware of its surroundings',\r\n                    'attack rolls against the creature have advantage',\r\n                    'the creature automatically fails strength and dexterity saving throws',\r\n                    'the creature has resistance to all damage',\r\n                    'the creature is immune to poison and disease, although a poison or disease already in its system is suspended, not neutralized'\r\n                ];\r\n            case 'poisoned':\r\n                return [\r\n                    'a poisoned creature has disadvantage on attack rolls and ability checks'\r\n                ];\r\n            case 'prone':\r\n                return [\r\n                    'a prone creature’s only movement option is to crawl, unless it stands up and thereby ends the condition',\r\n                    'the creature has disadvantage on attack rolls',\r\n                    'an attack roll against the creature has advantage if the attacker is Within 5 feet of the creature; otherwise, the attack roll has disadvantage'\r\n                ];\r\n            case 'restrained':\r\n                return [\r\n                    'a restrained creature’s speed becomes 0, and it can’t benefit from any bonus to its speed',\r\n                    'attack rolls against the creature have advantage, and the creature’s attack rolls have disadvantage',\r\n                    'the creature has disadvantage on dexterity saving throws'\r\n                ];\r\n            case 'stunned':\r\n                return [\r\n                    'a stunned creature is incapacitated (can’t take actions or reactions), can’t move, and can speak only falteringly',\r\n                    'the creature automatically fails strength and dexterity saving throws',\r\n                    'attack rolls against the creature have advantage'\r\n                ];\r\n            case 'unconscious':\r\n                return [\r\n                    'an unconscious creature is incapacitated (can’t take actions or reactions), can’t move or speak, and is unaware of its surroundings',\r\n                    'the creature drops whatever its holding and falls prone',\r\n                    'the creature automatically fails strength and dexterity saving throws',\r\n                    'attack rolls against the creature have advantage',\r\n                    'any attack that hits the creature is a critical hit if the attacker is within 5 feet of the creature'\r\n                ];\r\n            case \"custom\":\r\n                return [];\r\n            default:\r\n                return [];\r\n        }\r\n    }\r\n\r\n    public static conditionDurationText(condition: Condition, combat: Combat) {\r\n        if (condition.duration !== null) {\r\n            switch (condition.duration.type) {\r\n                case \"saves\":\r\n                    var saveDuration = condition.duration as ConditionDurationSaves;\r\n                    var saveType = saveDuration.saveType;\r\n                    if (saveType !== \"death\") {\r\n                        saveType = saveType.toUpperCase();\r\n                    }\r\n                    var saves = saveDuration.count > 1 ? \"saves\" : \"save\";\r\n                    return \"until you make \" + saveDuration.count + \" \" + saveType + \" \" + saves + \" at dc \" + saveDuration.saveDC;\r\n                case \"combatant\":\r\n                    var combatantDuration = condition.duration as ConditionDurationCombatant;\r\n                    var point = combatantDuration.point;\r\n                    var c = combat.combatants.find(c => c.id == combatantDuration.combatantID);\r\n                    var combatant = c ? (c.displayName || c.name || \"unnamed monster\") + \"'s\" : \"someone's\";\r\n                    return \"until the \" + point + \" of \" + combatant + \" next turn\";\r\n                case \"rounds\":\r\n                    var roundsDuration = condition.duration as ConditionDurationRounds;\r\n                    var rounds = roundsDuration.count > 1 ? \"rounds\" : \"round\";\r\n                    return \"for \" + roundsDuration.count + \" \" + rounds;\r\n                default:\r\n                    return null;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public static getMonsterNames(encounter: Encounter | EncounterWave): { id: string, names: string[] }[] {\r\n        var monsterNames: any[] = [];\r\n        if (encounter) {\r\n            encounter.slots.forEach(slot => {\r\n                var names: any[] = [];\r\n                if (slot.count === 1) {\r\n                    names.push(slot.monsterName);\r\n                } else {\r\n                    for (var n = 0; n !== slot.count; ++n) {\r\n                        names.push(slot.monsterName + \" \" + (n + 1));\r\n                    }\r\n                }\r\n\r\n                monsterNames.push({\r\n                    id: slot.id,\r\n                    names: names\r\n                });\r\n            });\r\n        }\r\n\r\n        return monsterNames;\r\n    }\r\n}","import Utils from './utils';\r\n\r\nimport {\r\n    Party, PC,\r\n    MonsterGroup, Monster, Trait,\r\n    Encounter, EncounterSlot, EncounterWave,\r\n    MapFolio, Map, MapItem,\r\n    CombatSetup, Combat, Notification, Condition, ConditionDurationSaves, ConditionDurationCombatant, ConditionDurationRounds\r\n} from './models/models';\r\n\r\nexport default class Factory {\r\n\r\n    public static createParty(): Party {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: \"\",\r\n            pcs: []\r\n        };\r\n    }\r\n\r\n    public static createPC(): PC {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: \"pc\",\r\n            active: true,\r\n            player: \"\",\r\n            name: \"\",\r\n            race: \"\",\r\n            classes: \"\",\r\n            background: \"\",\r\n            level: 1,\r\n            languages: \"Common\",\r\n            passiveInsight: 10,\r\n            passiveInvestigation: 10,\r\n            passivePerception: 10,\r\n            initiative: 10,\r\n            url: \"\"\r\n        };\r\n    }\r\n\r\n    public static createMonsterGroup(): MonsterGroup {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: \"\",\r\n            monsters: []\r\n        };\r\n    }\r\n\r\n    public static createMonster(): Monster {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: \"monster\",\r\n            name: \"\",\r\n            size: \"medium\",\r\n            category: \"humanoid\",\r\n            tag: \"\",\r\n            alignment: \"\",\r\n            challenge: 1,\r\n            abilityScores: {\r\n                str: 10,\r\n                dex: 10,\r\n                con: 10,\r\n                int: 10,\r\n                wis: 10,\r\n                cha: 10\r\n            },\r\n            ac: 10,\r\n            hpMax: 4,\r\n            hpTemp: 0,\r\n            hitDice: 1,\r\n            damage: {\r\n                resist: \"\",\r\n                vulnerable: \"\",\r\n                immune: \"\"\r\n            },\r\n            savingThrows: \"\",\r\n            speed: \"\",\r\n            skills: \"\",\r\n            senses: \"\",\r\n            languages: \"\",\r\n            equipment: \"\",\r\n            traits: [],\r\n            conditionImmunities: \"\"\r\n        };\r\n    }\r\n\r\n    public static createTrait(): Trait {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: \"\",\r\n            usage: \"\",\r\n            type: \"action\",\r\n            text: \"\"\r\n        };\r\n    }\r\n\r\n    public static createEncounter(): Encounter {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: \"\",\r\n            slots: [],\r\n            waves: []\r\n        };\r\n    }\r\n\r\n    public static createEncounterSlot(): EncounterSlot {\r\n        return {\r\n            id: Utils.guid(),\r\n            monsterGroupName: \"\",\r\n            monsterName: \"\",\r\n            count: 1\r\n        };\r\n    }\r\n\r\n    public static createEncounterWave(): EncounterWave {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: \"\",\r\n            slots: []\r\n        };\r\n    }\r\n\r\n    public static createMapFolio(): MapFolio {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: \"\",\r\n            maps: []\r\n        };\r\n    }\r\n\r\n    public static createMap(): Map {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: \"\",\r\n            items: []\r\n        };\r\n    }\r\n\r\n    public static createMapItem(): MapItem {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: \"tile\",\r\n            x: 0,\r\n            y: 0,\r\n            width: 4,\r\n            height: 4,\r\n            terrain: null\r\n        };\r\n    }\r\n\r\n    public static createCombatSetup(): CombatSetup {\r\n        return {\r\n            partyID: null,\r\n            encounterID: null,\r\n            waveID: null,\r\n            folioID: null,\r\n            mapID: null,\r\n            monsterNames: [],\r\n            encounterInitMode: 'group'\r\n        };\r\n    }\r\n\r\n    public static createCombat(): Combat {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: \"\",\r\n            encounterID: null,\r\n            combatants: [],\r\n            map: null,\r\n            round: 1,\r\n            notifications: [],\r\n            issues: [],\r\n            timestamp: null\r\n        };\r\n    }\r\n\r\n    public static createNotification(): Notification {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'condition-save',\r\n            condition: null,\r\n            combatant: null\r\n        };\r\n    }\r\n\r\n    public static createCondition(): Condition {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: \"\",\r\n            level: 1,\r\n            text: null,\r\n            duration: null\r\n        };\r\n    }\r\n\r\n    public static createConditionDurationSaves(): ConditionDurationSaves {\r\n        return {\r\n            type: 'saves',\r\n            count: 1,\r\n            saveType: 'str',\r\n            saveDC: 10,\r\n            point: 'start'\r\n        };\r\n    }\r\n\r\n    public static createConditionDurationCombatant(): ConditionDurationCombatant {\r\n        return {\r\n            type: 'combatant',\r\n            point: 'start',\r\n            combatantID: null\r\n        };\r\n    }\r\n\r\n    public static createConditionDurationRounds(): ConditionDurationRounds {\r\n        return {\r\n            type: 'rounds',\r\n            count: 1\r\n        };\r\n    }\r\n}","import React from 'react';\r\n\r\nimport { MonsterGroup } from '../../models/models';\r\n\r\ninterface Props {\r\n    library: MonsterGroup[];\r\n    addOpenGameContent: () => void;\r\n}\r\n\r\nexport default class HomeScreen extends React.Component<Props> {\r\n    render() {\r\n        try {\r\n            var monsters = null;\r\n            if (this.props.library.length === 0) {\r\n                monsters = (\r\n                    <div>\r\n                        <div className=\"divider\"></div>\r\n                        <div className=\"text\">\r\n                            <div>since your collection of monsters is empty, you might want to start by pressing the button below to add monsters from the <a href=\"http://dnd.wizards.com/articles/features/systems-reference-document-srd\" target=\"_blank\" rel=\"noopener noreferrer\">system reference document</a></div>\r\n                        </div>\r\n                        <div className=\"text\">\r\n                            <button onClick={() => this.props.addOpenGameContent()}>add monsters</button>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className=\"home scrollable\">\r\n                <div className=\"vertical-center-outer\">\r\n                    <div className=\"vertical-center-middle\">\r\n                        <div className=\"vertical-center-inner\">\r\n                            <div className=\"welcome-panel\">\r\n                                <div className=\"heading\">welcome to <b>dojo</b></div>\r\n                                <div className=\"text\">\r\n                                    <div><b>dojo</b> is an app for dms of dungeons and dragons fifth edition</div>\r\n                                </div>\r\n                                <div className=\"text\">\r\n                                    <div>\r\n                                        with <b>dojo</b> you can:\r\n                                        <ul>\r\n                                            <li>build unique, challenging monsters</li>\r\n                                            <li>create encounters of just the right difficulty for your players</li>\r\n                                            <li>design intricate tactical maps</li>\r\n                                            <li>run combat without the book-keeping</li>\r\n                                        </ul>\r\n                                    </div>\r\n                                </div>\r\n                                {monsters}\r\n                                <div className=\"divider\"></div>\r\n                                <div className=\"text\">\r\n                                    <div>use the buttons at the bottom of the screen to access the app's features</div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    };\r\n}","import React from 'react';\r\n\r\ninterface Props {\r\n    getHeading: () => (string | JSX.Element);\r\n    getContent: () => (string | JSX.Element);\r\n}\r\n\r\nexport default class InfoCard extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        getHeading: null,\r\n        getContent: null\r\n    };\r\n\r\n    render() {\r\n        try {\r\n            var heading = null;\r\n            if (this.props.getHeading) {\r\n                heading = this.props.getHeading();\r\n            }\r\n\r\n            var content = null;\r\n            if (this.props.getContent) {\r\n                content = this.props.getContent();\r\n            }\r\n            if (!content) {\r\n                return null;\r\n            }\r\n\r\n            return (\r\n                <div className=\"card\">\r\n                    {heading}\r\n                    <div className=\"card-content\">\r\n                        {content}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport { Party } from '../../../models/models';\r\n\r\nimport InfoCard from '../info-card';\r\n\r\ninterface Props {\r\n    parties: Party[];\r\n}\r\n\r\nexport default class PartiesCard extends React.Component<Props> {\r\n    render() {\r\n        try {\r\n            var action: JSX.Element | null = null;\r\n            if (this.props.parties.length === 0) {\r\n                action = (\r\n                    <div className=\"section\">to start adding a party, press the button below</div>\r\n                );\r\n            } else {\r\n                action = (\r\n                    <div className=\"section\">select a party from the list to see pc details</div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <InfoCard\r\n                    getContent={() => (\r\n                        <div>\r\n                            <div className=\"section\">\r\n                                <div>this page is where you can tell dojo all about your pcs</div>\r\n                            </div>\r\n                            <div className=\"section\">\r\n                                <div>you can add a party for each of your gaming groups</div>\r\n                            </div>\r\n                            <div className=\"divider\"></div>\r\n                            {action}\r\n                        </div>\r\n                    )}\r\n                />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    };\r\n}","import React from 'react';\r\n\r\nimport { Party } from '../../models/models';\r\n\r\ninterface Props {\r\n    party: Party;\r\n    selected: boolean;\r\n    setSelection: (party: Party) => void;\r\n}\r\n\r\nexport default class PartyListItem extends React.Component<Props> {\r\n    render() {\r\n        try {\r\n            var pcs = [];\r\n            for (var n = 0; n !== this.props.party.pcs.length; ++n) {\r\n                var pc = this.props.party.pcs[n];\r\n                var name = pc.name;\r\n                if (pc.player) {\r\n                    name += \" (\" + pc.player + \")\";\r\n                }\r\n                if (!name) {\r\n                    name = \"unnamed pc\";\r\n                }\r\n                pcs.push(<div key={pc.id} className=\"text\">{name}</div>);\r\n            }\r\n            if (pcs.length === 0) {\r\n                pcs.push(<div key=\"empty\" className=\"text\">no pcs</div>);\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? \"list-item selected\" : \"list-item\"} onClick={() => this.props.setSelection(this.props.party)}>\r\n                    <div className=\"heading\">{this.props.party.name || \"unnamed party\"}</div>\r\n                    {pcs}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport warning from \"../../resources/images/warning.svg\";\r\n\r\ninterface Props {\r\n    text: string;\r\n    callback: () => void;\r\n    details: string;\r\n    disabled: boolean;\r\n}\r\n\r\ninterface State {\r\n    pressed: boolean;\r\n}\r\n\r\nexport default class ConfirmButton extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        details: null,\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            pressed: false\r\n        };\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({\r\n            pressed: !this.state.pressed\r\n        });\r\n    }\r\n\r\n    perform() {\r\n        this.toggle();\r\n        this.props.callback();\r\n    }\r\n\r\n    render() {\r\n        try {\r\n            var content = null;\r\n            if (this.state.pressed) {\r\n                content = (\r\n                    <div>\r\n                        <div className=\"title\">{this.props.text} - are you sure?</div>\r\n                        <img className=\"image\" src={warning} alt=\"warning\" />\r\n                        {this.props.details ? <div className=\"details\">{this.props.details}</div> : null}\r\n                        <div className=\"confirmation\">\r\n                            <div className=\"destructive\" onClick={() => this.perform()}>yes</div>\r\n                            <div className=\"non-destructive\" onClick={() => this.toggle()}>no</div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                content = (\r\n                    <div>\r\n                        <div className=\"title\">{this.props.text}</div>\r\n                        <img className=\"image\" src={warning} alt=\"warning\" />\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <button className={this.props.disabled ? \"disabled\" : \"\"} onClick={() => this.toggle()}>\r\n                    {content}\r\n                </button>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport { Party } from '../../models/models';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport InfoCard from './info-card';\r\n\r\ninterface Props {\r\n    selection: Party;\r\n    changeValue: (field: string, value: string) => void;\r\n    addPC: () => void;\r\n    sortPCs: () => void;\r\n    removeParty: () => void;\r\n}\r\n\r\nexport default class PartyCard extends React.Component<Props> {\r\n    render() {\r\n        try {\r\n            var activePCs = this.props.selection.pcs.filter(pc => pc.active);\r\n\r\n            var languages = activePCs\r\n                .map(pc => pc.languages)\r\n                .join(\", \")\r\n                .split(/[ ,;]+/)\r\n                .reduce((array: string[], value) => {\r\n                    if (array.indexOf(value) === -1) {\r\n                        array.push(value);\r\n                    }\r\n                    return array;\r\n                }, [])\r\n                .sort((a, b) => {\r\n                    if (a === \"Common\") {\r\n                        return -1;\r\n                    }\r\n                    if (b === \"Common\") {\r\n                        return 1;\r\n                    }\r\n                    return a.localeCompare(b);\r\n                })\r\n                .join(\", \");\r\n\r\n            var insightSummary = \"-\";\r\n            var investigationSummary = \"-\";\r\n            var perceptionSummary = \"-\";\r\n\r\n            if (activePCs.length !== 0) {\r\n                var insight: { min: number | null, max: number | null } = { min: null, max: null };\r\n                var investigation: { min: number | null, max: number | null } = { min: null, max: null };\r\n                var perception: { min: number | null, max: number | null } = { min: null, max: null };\r\n\r\n                activePCs.forEach(pc => {\r\n                    insight.min = insight.min === null ? pc.passiveInsight : Math.min(insight.min, pc.passiveInsight);\r\n                    insight.max = insight.max === null ? pc.passiveInsight : Math.max(insight.max, pc.passiveInsight);\r\n                    investigation.min = investigation.min === null ? pc.passiveInvestigation : Math.min(investigation.min, pc.passiveInvestigation);\r\n                    investigation.max = investigation.max === null ? pc.passiveInvestigation : Math.max(investigation.max, pc.passiveInvestigation);\r\n                    perception.min = perception.min === null ? pc.passivePerception : Math.min(perception.min, pc.passivePerception);\r\n                    perception.max = perception.max === null ? pc.passivePerception : Math.max(perception.max, pc.passivePerception);\r\n                });\r\n\r\n                insightSummary = insight.min === insight.max ? (insight.min as number).toString() : insight.min + \" - \" + insight.max;\r\n                investigationSummary = investigation.min === investigation.max ? (investigation.min as number).toString() : investigation.min + \" - \" + investigation.max;\r\n                perceptionSummary = perception.min === perception.max ? (perception.min as number).toString() : perception.min + \" - \" + perception.max;\r\n            }\r\n\r\n            var heading = (\r\n                <div className=\"heading\">\r\n                    <div className=\"title\">party</div>\r\n                </div>\r\n            );\r\n\r\n            var content = (\r\n                <div>\r\n                    <div className=\"section\">\r\n                        <input type=\"text\" placeholder=\"party name\" value={this.props.selection.name} onChange={event => this.props.changeValue(\"name\", event.target.value)} />\r\n                    </div>\r\n                    <div className=\"divider\"></div>\r\n                    <div className=\"section\">\r\n                        <div className=\"subheading\">languages</div>\r\n                    </div>\r\n                    <div className=\"section\">\r\n                        {languages}\r\n                    </div>\r\n                    <div className=\"section\">\r\n                        <div className=\"subheading\">passive skills</div>\r\n                    </div>\r\n                    <div className=\"table\">\r\n                        <div>\r\n                            <div className=\"cell three\"><b>insight</b></div>\r\n                            <div className=\"cell three\"><b>invest.</b></div>\r\n                            <div className=\"cell three\"><b>percep.</b></div>\r\n                        </div>\r\n                        <div>\r\n                            <div className=\"cell three\">{insightSummary}</div>\r\n                            <div className=\"cell three\">{investigationSummary}</div>\r\n                            <div className=\"cell three\">{perceptionSummary}</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"divider\"></div>\r\n                    <div className=\"section\">\r\n                    <button onClick={() => this.props.addPC()}>add a new pc</button>\r\n                        <button onClick={() => this.props.sortPCs()}>sort pcs</button>\r\n                        <ConfirmButton text=\"delete party\" callback={() => this.props.removeParty()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            return (\r\n                <InfoCard getHeading={() => heading} getContent={() => content} />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    };\r\n}","import React from 'react';\r\n\r\nimport arrow from \"../../resources/images/down-arrow-black.svg\";\r\n\r\ninterface Props {\r\n    click: (dir: string, dir2: 'in' | 'out' | null) => void;\r\n    direction: 'out' | 'in' | 'both' | 'eight';\r\n    disabled: boolean;\r\n}\r\n\r\nexport default class Radial extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        direction: 'out',\r\n        disabled: false\r\n    };\r\n\r\n    click(e: React.MouseEvent, dir: string, dir2: 'in' | 'out' | null = null) {\r\n        e.stopPropagation();\r\n        this.props.click(dir, dir2);\r\n    }\r\n\r\n    render() {\r\n        try {\r\n            var style = \"radial \"+ (this.props.direction || \"out\");\r\n            if (this.props.disabled) {\r\n                style += \" disabled\";\r\n            }\r\n\r\n            var showOut = (this.props.direction === \"out\") || (this.props.direction === \"both\") || (this.props.direction === \"eight\");\r\n            var showIn = (this.props.direction === \"in\") || (this.props.direction === \"both\");\r\n            var showDiag = (this.props.direction === \"eight\");\r\n\r\n            return (\r\n                <div className={style}>\r\n                    <div className=\"empty\" style={{ display: showDiag ? \"none\" : \"inline-block\" }}></div>\r\n                    <div className=\"btn diag\" style={{ display: showDiag ? \"inline-block\" : \"none\" }}>\r\n                        <img src={arrow} style={{ display: showOut ? \"inline-block\" : \"none\", transform: \"rotate(135deg)\" }} alt=\"nw\" onClick={e => this.click(e, \"NW\")}/>\r\n                    </div>\r\n                    <div className=\"btn\">\r\n                        <div>\r\n                            <img src={arrow} style={{ display: showOut ? \"inline-block\" : \"none\", transform: \"rotate(180deg)\" }} alt=\"n\" onClick={e => this.click(e, \"N\", \"out\")}/>\r\n                        </div>\r\n                        <div>\r\n                            <img src={arrow} style={{ display: showIn ? \"inline-block\" : \"none\" }} alt=\"n\" onClick={e => this.click(e, \"N\", \"in\")}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"empty\" style={{ display: showDiag ? \"none\" : \"inline-block\" }}></div>\r\n                    <div className=\"btn diag\" style={{ display: showDiag ? \"inline-block\" : \"none\" }}>\r\n                        <img src={arrow} style={{ display: showOut ? \"inline-block\" : \"none\", transform: \"rotate(-135deg)\" }} alt=\"ne\" onClick={e => this.click(e, \"NE\")}/>\r\n                    </div>\r\n                    <div className=\"btn\" style={{ padding: (showIn && showOut) ? \"10px 0\" : \"0\"}}>\r\n                        <img src={arrow} style={{ display: showOut ? \"inline-block\" : \"none\", transform: \"rotate(90deg)\" }} alt=\"w\" onClick={e => this.click(e, \"W\", \"out\")}/>\r\n                        <img src={arrow} style={{ display: showIn ? \"inline-block\" : \"none\", transform: \"rotate(-90deg)\" }} alt=\"w\" onClick={e => this.click(e, \"W\", \"in\")}/>\r\n                    </div>\r\n                    <div className=\"empty\"></div>\r\n                    <div className=\"btn\" style={{ padding: (showIn && showOut) ? \"10px 0\" : \"0\"}}>\r\n                        <img src={arrow} style={{ display: showIn ? \"inline-block\" : \"none\", transform: \"rotate(90deg)\" }} alt=\"e\" onClick={e => this.click(e, \"E\", \"in\")}/>\r\n                        <img src={arrow} style={{ display: showOut ? \"inline-block\" : \"none\", transform: \"rotate(-90deg)\" }} alt=\"e\" onClick={e => this.click(e, \"E\", \"out\")}/>\r\n                    </div>\r\n                    <div className=\"empty\" style={{ display: showDiag ? \"none\" : \"inline-block\" }}></div>\r\n                    <div className=\"btn diag\" style={{ display: showDiag ? \"inline-block\" : \"none\" }}>\r\n                        <img src={arrow} style={{ display: showOut ? \"inline-block\" : \"none\", transform: \"rotate(45deg)\" }} alt=\"sw\" onClick={e => this.click(e, \"SW\")}/>\r\n                    </div>\r\n                    <div className=\"btn\">\r\n                        <div>\r\n                            <img src={arrow} style={{ display: showIn ? \"inline-block\" : \"none\", transform: \"rotate(180deg)\" }} alt=\"s\" onClick={e => this.click(e, \"S\", \"in\")}/>\r\n                        </div>\r\n                        <div>\r\n                            <img src={arrow} style={{ display: showOut ? \"inline-block\" : \"none\" }} alt=\"s\" onClick={e => this.click(e, \"S\", \"out\")}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"empty\" style={{ display: showDiag ? \"none\" : \"inline-block\" }}></div>\r\n                    <div className=\"btn diag\" style={{ display: showDiag ? \"inline-block\" : \"none\" }}>\r\n                        <img src={arrow} style={{ display: showOut ? \"inline-block\" : \"none\", transform: \"rotate(-45deg)\" }} alt=\"se\" onClick={e => this.click(e, \"SE\")}/>\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport plus from \"../../resources/images/plus.svg\";\r\nimport minus from \"../../resources/images/minus.svg\";\r\n\r\ninterface Props {\r\n    source: any;\r\n    name: string;\r\n    nudgeValue: (delta: number) => void;\r\n    label: string;\r\n    disabled: boolean;\r\n    factors: number[];\r\n    display: ((value: number) => string) | null;\r\n}\r\n\r\nexport default class Spin extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        label: null,\r\n        disabled: false,\r\n        factors: null,\r\n        display: null\r\n    };\r\n\r\n    click(e: React.MouseEvent, delta: number) {\r\n        e.stopPropagation();\r\n        this.props.nudgeValue(delta);\r\n    }\r\n\r\n    touchEnd(e: React.TouchEvent, delta: number) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        this.props.nudgeValue(delta);\r\n    }\r\n\r\n    render() {\r\n        try {\r\n            var style = \"info-value\";\r\n            var value = this.props.source[this.props.name];\r\n            if (value === 0) {\r\n                style += \" dimmed\";\r\n            }\r\n\r\n            if (this.props.display) {\r\n                value = this.props.display(value);\r\n            }\r\n\r\n            var minusBtns: JSX.Element[] = [];\r\n            var plusBtns: JSX.Element[] = [];\r\n\r\n            if (this.props.factors) {\r\n                this.props.factors.forEach(factor => {\r\n                    minusBtns.push(\r\n                        <div key={\"minus\" + factor} className=\"spin-button factor\" onTouchEnd={e => this.touchEnd(e, -1 * factor)} onClick={e => this.click(e, -1 * factor)}>\r\n                            {\"-\" + factor}\r\n                        </div>\r\n                    );\r\n        \r\n                    plusBtns.push(\r\n                        <div key={\"plus\" + factor} className=\"spin-button factor\" onTouchEnd={e => this.touchEnd(e, +1 * factor)} onClick={e => this.click(e, +1 * factor)}>\r\n                            {\"+\" + factor}\r\n                        </div>\r\n                    );        \r\n                });\r\n\r\n                minusBtns.reverse();\r\n            } else {\r\n                minusBtns.push(\r\n                    <div key=\"minus1\" className=\"spin-button\" onTouchEnd={e => this.touchEnd(e, -1)} onClick={e => this.click(e, -1)}>\r\n                        <img className=\"image\" src={minus} alt=\"minus\" />\r\n                    </div>\r\n                );\r\n    \r\n                plusBtns.push(\r\n                    <div key=\"plus1\" className=\"spin-button\" onTouchEnd={e => this.touchEnd(e, +1)} onClick={e => this.click(e, +1)}>\r\n                        <img className=\"image\" src={plus} alt=\"plus\" />\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            var infoWidth = 80 * (this.props.factors? this.props.factors.length : 1);\r\n\r\n            return (\r\n                <div className={this.props.disabled ? \"spin disabled\" : \"spin\"}>\r\n                    <div className=\"minus\">\r\n                        {minusBtns}\r\n                    </div>\r\n                    <div className=\"info\" style={{ width: \"calc(100% - \" + infoWidth + \"px)\" }}>\r\n                        <div className=\"info-label\">{this.props.label}</div>\r\n                        <div className={style}>{value}</div>\r\n                    </div>\r\n                    <div className=\"plus\">\r\n                        {plusBtns}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport { PC, Combatant } from '../../models/models';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport Radial from '../controls/radial';\r\nimport Spin from '../controls/spin';\r\n\r\nimport arrow from \"../../resources/images/down-arrow.svg\";\r\n\r\ninterface Props {\r\n    combatant: PC | (PC & Combatant);\r\n    mode: string;\r\n    changeValue: (pc: PC, field: string, value: any) => void;\r\n    nudgeValue: (pc: PC, field: string, delta: number) => void;\r\n    removePC: (pc: PC) => void;\r\n    // Combat\r\n    makeCurrent: (combatant: Combatant) => void;\r\n    makeActive: (combatant: Combatant) => void;\r\n    makeDefeated: (combatant: Combatant) => void;\r\n    endTurn: (combatant: Combatant) => void;\r\n    mapAdd: (combatant: Combatant) => void;\r\n    mapMove: (combatant: Combatant, dir: string) => void;\r\n    mapRemove: (combatant: Combatant) => void;\r\n    removeCombatant: (combatant: Combatant) => void;\r\n}\r\n\r\ninterface State {\r\n    showDetails: boolean;\r\n}\r\n\r\nexport default class PCCard extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        removePC: null,\r\n        makeCurrent: null,\r\n        makeActive: null,\r\n        makeDefeated: null,\r\n        endTurn: null,\r\n        mapAdd: null,\r\n        mapMove: null,\r\n        mapRemove: null,\r\n        removeCombatant: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showDetails: false\r\n        };\r\n    }\r\n\r\n    toggleDetails() {\r\n        this.setState({\r\n            showDetails: !this.state.showDetails\r\n        })\r\n    }\r\n\r\n    render() {\r\n        try {\r\n            var options = [];\r\n            if (this.props.mode.indexOf(\"edit\") !== -1) {\r\n                if (this.props.combatant.active) {\r\n                    options.push(<button key=\"toggle-active\" onClick={() => this.props.changeValue(this.props.combatant, \"active\", false)}>mark inactive</button>);\r\n                } else {\r\n                    options.push(<button key=\"toggle-active\" onClick={() => this.props.changeValue(this.props.combatant, \"active\", true)}>mark active</button>);\r\n                }\r\n                options.push(<ConfirmButton key=\"remove\" text=\"delete pc\" callback={() => this.props.removePC(this.props.combatant)} />);\r\n            }\r\n            if (this.props.mode.indexOf(\"combat\") !== -1) {\r\n                var combatant = this.props.combatant as Combatant;\r\n\r\n                if (this.props.mode.indexOf(\"tactical\") !== -1) {\r\n                    if (this.props.mode.indexOf(\"on-map\") !== -1) {\r\n                        options.push(\r\n                            <div key=\"mapMove\" className=\"section centered\">\r\n                                <Radial\r\n                                    direction=\"eight\"\r\n                                    click={dir => this.props.mapMove(combatant, dir)}\r\n                                />\r\n                            </div>\r\n                        );\r\n                        options.push(\r\n                            <Spin\r\n                                key=\"altitude\"\r\n                                source={this.props.combatant}\r\n                                name=\"altitude\"\r\n                                label=\"altitude\"\r\n                                display={value => value + \" ft.\"}\r\n                                nudgeValue={delta => this.props.nudgeValue(this.props.combatant, \"altitude\", delta * 5)}\r\n                            />\r\n                        );\r\n                        options.push(<button key=\"mapRemove\" onClick={() => this.props.mapRemove(combatant)}>remove from map</button>);\r\n                    }\r\n                    if (this.props.mode.indexOf(\"off-map\") !== -1) {\r\n                        options.push(<button key=\"mapAdd\" onClick={() => this.props.mapAdd(combatant)}>add to map</button>);\r\n                    }\r\n                    options.push(<div key=\"tactical-div\" className=\"divider\"></div>);\r\n                }\r\n                if (combatant.pending && !combatant.active && !combatant.defeated) {\r\n                    options.push(<ConfirmButton key=\"remove\" text=\"remove from encounter\" callback={() => this.props.removeCombatant(combatant)} />);\r\n                }\r\n                if (!combatant.pending && combatant.active && !combatant.defeated) {\r\n                    if (combatant.current) {\r\n                        options.push(<button key=\"endTurn\" onClick={() => this.props.endTurn(combatant)}>end turn</button>);\r\n                        options.push(<button key=\"makeDefeated\" onClick={() => this.props.makeDefeated(combatant)}>mark as defeated and end turn</button>);\r\n                    } else {\r\n                        options.push(<button key=\"makeCurrent\" onClick={() => this.props.makeCurrent(combatant)}>start turn</button>);\r\n                        options.push(<button key=\"makeDefeated\" onClick={() => this.props.makeDefeated(combatant)}>mark as defeated</button>);\r\n                        options.push(<ConfirmButton key=\"remove\" text=\"remove from encounter\" callback={() => this.props.removeCombatant(combatant)} />);\r\n                    }\r\n                }\r\n                if (!combatant.pending && !combatant.active && combatant.defeated) {\r\n                    options.push(<button key=\"makeActive\" onClick={() => this.props.makeActive(combatant)}>mark as active</button>);\r\n                    options.push(<ConfirmButton key=\"remove\" text=\"remove from encounter\" callback={() => this.props.removeCombatant(combatant)} />);\r\n                }\r\n            }\r\n\r\n            var commonStatBlock = (\r\n                <div className=\"stats\">\r\n                    <div className=\"section centered\">\r\n                        <div className=\"lowercase\">\r\n                            <i>\r\n                                <span>{this.props.combatant.race || 'race'} {this.props.combatant.classes || 'class'}</span>,\r\n                                <span>level {this.props.combatant.level}</span>\r\n                            </i>\r\n                        </div>\r\n                        <div style={{ display: this.props.combatant.url ? \"\" : \"none\" }}>\r\n                            <a href={this.props.combatant.url} target=\"_blank\" rel=\"noopener noreferrer\">d&d beyond sheet</a>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"divider\"></div>\r\n                    <div className=\"section subheading\">languages</div>\r\n                    <div className=\"section\">\r\n                        {this.props.combatant.languages || \"-\"}\r\n                    </div>\r\n                    <div className=\"section subheading\">passive skills</div>\r\n                    <div className=\"table\">\r\n                        <div>\r\n                            <div className=\"cell three\"><b>insight</b></div>\r\n                            <div className=\"cell three\"><b>invest.</b></div>\r\n                            <div className=\"cell three\"><b>percep.</b></div>\r\n                        </div>\r\n                        <div>\r\n                            <div className=\"cell three\">{this.props.combatant.passiveInsight}</div>\r\n                            <div className=\"cell three\">{this.props.combatant.passiveInvestigation}</div>\r\n                            <div className=\"cell three\">{this.props.combatant.passivePerception}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            var stats = null;\r\n            if (this.props.mode.indexOf(\"edit\") !== -1) {\r\n                if (this.state.showDetails) {\r\n                    stats = (\r\n                        <div className=\"edit\">\r\n                            <div className=\"section\">\r\n                                <div className=\"input-label\" style={{ display: this.state.showDetails ? \"\" : \"none\" }}>character name:</div>\r\n                                <input type=\"text\" value={this.props.combatant.name} onChange={event => this.props.changeValue(this.props.combatant, \"name\", event.target.value)} />\r\n                                <div className=\"input-label\" style={{ display: this.state.showDetails ? \"\" : \"none\" }}>player name:</div>\r\n                                <input type=\"text\" value={this.props.combatant.player} onChange={event => this.props.changeValue(this.props.combatant, \"player\", event.target.value)} />\r\n                                <div className=\"input-label\">race:</div>\r\n                                <input type=\"text\" value={this.props.combatant.race} onChange={event => this.props.changeValue(this.props.combatant, \"race\", event.target.value)} />\r\n                                <div className=\"input-label\">class:</div>\r\n                                <input type=\"text\" value={this.props.combatant.classes} onChange={event => this.props.changeValue(this.props.combatant, \"classes\", event.target.value)} />\r\n                                <div className=\"input-label\">level:</div>\r\n                                <Spin\r\n                                    source={this.props.combatant}\r\n                                    name=\"level\"\r\n                                    nudgeValue={delta => this.props.nudgeValue(this.props.combatant, \"level\", delta)}\r\n                                />\r\n                                <div className=\"input-label\">languages:</div>\r\n                                <input type=\"text\" value={this.props.combatant.languages} onChange={event => this.props.changeValue(this.props.combatant, \"languages\", event.target.value)} />\r\n                                <div className=\"input-label\">d&d beyond link:</div>\r\n                                <input type=\"text\" value={this.props.combatant.url} onChange={event => this.props.changeValue(this.props.combatant, \"url\", event.target.value)} />\r\n                            </div>\r\n                            <div className=\"divider\"></div>\r\n                            <div className=\"section subheading\">passive skills</div>\r\n                            <Spin\r\n                                source={this.props.combatant}\r\n                                name=\"passiveInsight\"\r\n                                label=\"insight\"\r\n                                nudgeValue={delta => this.props.nudgeValue(this.props.combatant, \"passiveInsight\", delta)}\r\n                            />\r\n                            <Spin\r\n                                source={this.props.combatant}\r\n                                name=\"passiveInvestigation\"\r\n                                label=\"investigation\"\r\n                                nudgeValue={delta => this.props.nudgeValue(this.props.combatant, \"passiveInvestigation\", delta)}\r\n                            />\r\n                            <Spin\r\n                                source={this.props.combatant}\r\n                                name=\"passivePerception\"\r\n                                label=\"perception\"\r\n                                nudgeValue={delta => this.props.nudgeValue(this.props.combatant, \"passivePerception\", delta)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                } else {\r\n                    stats = commonStatBlock;\r\n                }\r\n            }\r\n            if (this.props.mode.indexOf(\"combat\") !== -1) {\r\n                stats = commonStatBlock;\r\n            }\r\n\r\n            var toggle = null;\r\n            if (this.props.mode.indexOf(\"combat\") !== -1) {\r\n                // Don't show toggle button for combatant\r\n            } else {\r\n                var imageStyle = this.state.showDetails ? \"image rotate\" : \"image\";\r\n                toggle = <img className={imageStyle} src={arrow} alt=\"arrow\" onClick={() => this.toggleDetails()} />\r\n            }\r\n\r\n            return (\r\n                <div className=\"card pc\">\r\n                    <div className=\"heading\">\r\n                        <div className=\"title\">{(this.props.combatant as Combatant ? (this.props.combatant as Combatant).displayName : null) || this.props.combatant.name || \"unnamed pc\"}</div>\r\n                        {toggle}\r\n                    </div>\r\n                    <div className=\"card-content\">\r\n                        {stats}\r\n                        <div style={{ display: options.length > 0 ? \"\" : \"none\" }}>\r\n                            <div className=\"divider\"></div>\r\n                            <div className=\"section\">\r\n                                {options}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport arrow from \"../../resources/images/down-arrow-black.svg\";\r\nimport close from \"../../resources/images/close-black.svg\";\r\n\r\ninterface Props {\r\n    content: any[];\r\n    heading: string;\r\n    hidden: boolean;\r\n    showClose: boolean;\r\n    showToggle: boolean;\r\n    close: () => void;\r\n}\r\n\r\ninterface State {\r\n    showCards: boolean;\r\n}\r\n\r\nexport default class CardGroup extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        heading: null,\r\n        hidden: false,\r\n        showClose: false,\r\n        showToggle: false,\r\n        close: null\r\n    }\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showCards: true\r\n        }\r\n    }\r\n\r\n    toggleCards() {\r\n        this.setState({\r\n            showCards: !this.state.showCards\r\n        });\r\n    }\r\n\r\n    render() {\r\n        try {\r\n            if (this.props.hidden) {\r\n                return null;\r\n            }\r\n\r\n            var heading = null;\r\n            if (this.props.heading) {\r\n                var closeBtn = null;\r\n                if (this.props.showClose) {\r\n                    closeBtn = (\r\n                        <img className=\"image\" src={close} alt=\"close\" onClick={() => this.props.close()} />\r\n                    );\r\n                }\r\n\r\n                var toggle = null;\r\n                if (this.props.showToggle) {\r\n                    var style = this.state.showCards ? \"image rotate\" : \"image\";\r\n                    toggle = (\r\n                        <img className={style} src={arrow} alt=\"arrow\" onClick={() => this.toggleCards()} />\r\n                    );\r\n                }\r\n\r\n                heading = (\r\n                    <div className=\"heading\">\r\n                        <div className=\"title\">{this.props.heading}</div>\r\n                        {toggle}\r\n                        {closeBtn}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            var cards = [];\r\n            if ((this.props.content.length > 0) && this.state.showCards) {\r\n                cards = this.props.content;\r\n            }\r\n\r\n            return (\r\n                <div className=\"card-group\">\r\n                    {heading}\r\n                    <div className=\"row small-up-1 medium-up-2 large-up-4 collapse\">\r\n                        {cards}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport { Party, PC } from '../../models/models';\r\n\r\nimport PartiesCard from '../cards/information/parties-card';\r\nimport PartyListItem from '../list-items/party-list-item';\r\nimport PartyCard from '../cards/party-card';\r\nimport PCCard from '../cards/pc-card';\r\nimport InfoCard from '../cards/info-card';\r\nimport CardGroup from '../panels/card-group';\r\n\r\ninterface Props {\r\n    parties: Party[];\r\n    selection: Party | null;\r\n    showHelp: boolean;\r\n    selectParty: (party: Party | null) => void;\r\n    addParty: () => void;\r\n    removeParty: () => void;\r\n    addPC: () => void;\r\n    removePC: (pc: PC) => void;\r\n    sortPCs: () => void;\r\n    changeValue: (source: any, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, value: number) => void;\r\n}\r\n\r\nexport default class PartiesScreen extends React.Component<Props> {\r\n    render() {\r\n        try {\r\n            var help = null;\r\n            if (this.props.showHelp) {\r\n                help = (\r\n                    <PartiesCard parties={this.props.parties}/>\r\n                );\r\n            }\r\n\r\n            var parties = [];\r\n            for (var n = 0; n !== this.props.parties.length; ++n) {\r\n                var party = this.props.parties[n];\r\n                parties.push(\r\n                    <PartyListItem\r\n                        key={party.id}\r\n                        party={party}\r\n                        selected={party === this.props.selection}\r\n                        setSelection={party => this.props.selectParty(party)}\r\n                    />\r\n                );\r\n            };\r\n\r\n            var activeCards: JSX.Element[] = [];\r\n            var inactiveCards: JSX.Element[] = [];\r\n\r\n            if (this.props.selection) {\r\n                activeCards.push(\r\n                    <div className=\"column\" key=\"info\">\r\n                        <PartyCard\r\n                            selection={this.props.selection}\r\n                            addPC={() => this.props.addPC()}\r\n                            sortPCs={() => this.props.sortPCs()}\r\n                            changeValue={(type, value) => this.props.changeValue(this.props.selection, type, value)}\r\n                            removeParty={() => this.props.removeParty()}\r\n                        />\r\n                    </div>\r\n                );\r\n\r\n                var activePCs = this.props.selection.pcs.filter(pc => pc.active);\r\n                activePCs.forEach(pc => {\r\n                    activeCards.push(\r\n                        <div className=\"column\" key={pc.id}>\r\n                            <PCCard\r\n                                combatant={pc}\r\n                                mode={\"edit\"}\r\n                                changeValue={(pc, type, value) => this.props.changeValue(pc, type, value)}\r\n                                nudgeValue={(pc, type, delta) => this.props.nudgeValue(pc, type, delta)}\r\n                                removePC={pc => this.props.removePC(pc)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                var inactivePCs = this.props.selection.pcs.filter(pc => !pc.active);\r\n                inactivePCs.forEach(pc => {\r\n                    inactiveCards.push(\r\n                        <div className=\"column\" key={pc.id}>\r\n                            <PCCard\r\n                                combatant={pc}\r\n                                mode={\"edit\"}\r\n                                changeValue={(pc, type, value) => this.props.changeValue(pc, type, value)}\r\n                                nudgeValue={(pc, type, delta) => this.props.nudgeValue(pc, type, delta)}\r\n                                removePC={pc => this.props.removePC(pc)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                if (activePCs.length === 0) {\r\n                    activeCards.push(\r\n                        <div className=\"column\" key=\"empty\">\r\n                            <InfoCard getContent={() => <div className=\"section\">no pcs</div>} />\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n\r\n            var name = undefined;\r\n            if (this.props.selection) {\r\n                name = this.props.selection.name || \"unnamed party\";\r\n            }\r\n\r\n            return (\r\n                <div className=\"parties row collapse\">\r\n                    <div className=\"columns small-4 medium-4 large-3 scrollable list-column\">\r\n                        {help}\r\n                        <button onClick={() => this.props.addParty()}>add a new party</button>\r\n                        {parties}\r\n                    </div>\r\n                    <div className=\"columns small-8 medium-8 large-9 scrollable\">\r\n                        <CardGroup\r\n                            content={activeCards}\r\n                            heading={name}\r\n                            showClose={this.props.selection !== null}\r\n                            close={() => this.props.selectParty(null)}\r\n                            hidden={!this.props.selection}\r\n                        />\r\n                        <CardGroup\r\n                            content={inactiveCards}\r\n                            heading=\"inactive pcs\"\r\n                            showClose={false}\r\n                            hidden={inactiveCards.length === 0}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport InfoCard from '../info-card';\r\n\r\nexport default class MonsterLibraryCard extends React.Component {\r\n    render() {\r\n        return (\r\n            <InfoCard\r\n                getContent={() => (\r\n                    <div>\r\n                        <div className=\"section\">you can maintain your menagerie of monsters here</div>\r\n                        <div className=\"divider\"></div>\r\n                        <div className=\"section\">select a monster group from the list to see stat blocks for monsters in that group</div>\r\n                        <div className=\"section\">to quickly find a monster, type its name into the filter box</div>\r\n                    </div>\r\n                )}\r\n            />\r\n        );\r\n    };\r\n}","import React from 'react';\r\n\r\nimport Utils from '../../utils';\r\n\r\nimport { MonsterGroup } from '../../models/models';\r\n\r\ninterface Props {\r\n    group: MonsterGroup;\r\n    selected: boolean;\r\n    filter: string;\r\n    setSelection: (group: MonsterGroup) => void;\r\n}\r\n\r\nexport default class MonsterGroupListItem extends React.Component<Props> {\r\n    render() {\r\n        try {\r\n            var matchGroup = Utils.match(this.props.filter, this.props.group.name);\r\n\r\n            var monsters = [];\r\n            for (var n = 0; n !== this.props.group.monsters.length; ++n) {\r\n                var monster = this.props.group.monsters[n];\r\n                var matchMonster = Utils.match(this.props.filter, monster.name);\r\n                if (matchGroup || matchMonster) {\r\n                    var name = monster.name;\r\n                    if (!name) {\r\n                        name = \"unnamed monster\";\r\n                    }\r\n                    monsters.push(<div key={monster.id} className=\"text\">{name}</div>);\r\n                }\r\n            }\r\n            if (monsters.length === 0) {\r\n                monsters.push(<div key=\"empty\" className=\"text\">no monsters</div>);\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? \"list-item selected\" : \"list-item\"} onClick={() => this.props.setSelection(this.props.group)}>\r\n                    <div className=\"heading\">{this.props.group.name || \"unnamed group\"}</div>\r\n                    {monsters}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport { MonsterGroup } from '../../models/models';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport InfoCard from './info-card';\r\n\r\ninterface Props {\r\n    selection: MonsterGroup;\r\n    filter: string | null;\r\n    changeValue: (field: string, value: string) => void;\r\n    addMonster: () => void;\r\n    sortMonsters: () => void;\r\n    removeMonsterGroup: () => void;\r\n}\r\n\r\nexport default class MonsterGroupCard extends React.Component<Props> {\r\n    render() {\r\n        try {\r\n            var heading = (\r\n                <div className=\"heading\">\r\n                    <div className=\"title\">monster group</div>\r\n                </div>\r\n            );\r\n\r\n            var content = (\r\n                <div>\r\n                    <div className=\"section\">\r\n                        <input type=\"text\" placeholder=\"group name\" value={this.props.selection.name} disabled={!!this.props.filter} onChange={event => this.props.changeValue(\"name\", event.target.value)} />\r\n                    </div>\r\n                    <div className=\"divider\"></div>\r\n                    <div className=\"section\">\r\n                        <button className={this.props.filter ? \"disabled\" : \"\"} onClick={() => this.props.addMonster()}>add a new monster</button>\r\n                        <button className={this.props.filter ? \"disabled\" : \"\"} onClick={() => this.props.sortMonsters()}>sort monsters</button>\r\n                        <ConfirmButton text=\"delete group\" callback={() => this.props.removeMonsterGroup()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            return (\r\n                <InfoCard getHeading={() => heading} getContent={() => content} />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    };\r\n}","import React from 'react';\r\n\r\nimport arrow from \"../../resources/images/down-arrow-black.svg\";\r\n\r\ninterface Props {\r\n    text: string;\r\n    content: string | JSX.Element;\r\n    disabled: boolean;\r\n}\r\n\r\ninterface State {\r\n    expanded: boolean;\r\n}\r\n\r\nexport default class Expander extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            expanded: false\r\n        }\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({\r\n            expanded: !this.state.expanded\r\n        });\r\n    }\r\n\r\n    render() {\r\n        try {\r\n            var style = this.props.disabled ? \"expander disabled\" : \"expander\";\r\n            if (this.state.expanded) {\r\n                style += \" expanded\";\r\n            }\r\n\r\n            var content = null;\r\n            if (this.state.expanded) {\r\n                content = (\r\n                    <div className=\"expander-content\">\r\n                        {this.props.content}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={style}>\r\n                    <div className=\"expander-header\" onClick={() => this.toggle()}>\r\n                        <div className=\"expander-text\">{this.props.text}</div>\r\n                        <img className=\"expander-button\" src={arrow} alt=\"arrow\" />\r\n                    </div>\r\n                    {content}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport ellipsis from \"../../resources/images/ellipsis.svg\";\r\n\r\ninterface Props {\r\n    options: { id: string; text: string; disabled?: boolean }[];\r\n    select: (optionID: string) => void;\r\n    selectedID: string;\r\n    placeholder: string;\r\n    disabled: boolean;\r\n}\r\n\r\ninterface State {\r\n    open: boolean;\r\n}\r\n\r\nexport default class Dropdown extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        selectedID: null,\r\n        placeholder: \"select...\",\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            open: false\r\n        };\r\n    }\r\n\r\n    toggleOpen(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        this.setState({\r\n            open: !this.state.open\r\n        });\r\n    }\r\n\r\n    select(optionID: string) {\r\n        this.setState({\r\n            open: false\r\n        });\r\n        this.props.select(optionID);\r\n    }\r\n\r\n    render() {\r\n        try {\r\n            if (this.props.options.length === 0) {\r\n                return null;\r\n            }\r\n\r\n            var style = this.props.disabled ? \"dropdown disabled\" : \"dropdown\";\r\n            var content = [];\r\n\r\n            var selectedText = undefined;\r\n            if (this.props.selectedID) {\r\n                var option: { id: string; text: string; disabled?: boolean } | undefined = this.props.options.find(o => o.id === this.props.selectedID);\r\n                if (option) {\r\n                    selectedText = option.text;\r\n                }\r\n            } else {\r\n                selectedText = /*this.props.text ||*/ this.props.placeholder;\r\n            }\r\n\r\n            content.push(\r\n                <div key=\"selection\" className=\"dropdown-top\" title={selectedText}>\r\n                    <div className=\"item-text\">{selectedText}</div>\r\n                    <img className=\"arrow\" src={ellipsis} alt=\"arrow\" />\r\n                </div>\r\n            );\r\n\r\n            if (this.state.open) {\r\n                style += \" open\";\r\n\r\n                var items = this.props.options.map(option => {\r\n                    if (option.text === null) {\r\n                        return <div key={option.id} className=\"divider\"></div>\r\n                    } else {\r\n                        return (\r\n                            <DropdownOption\r\n                                key={option.id}\r\n                                option={option}\r\n                                selected={option.id === this.props.selectedID}\r\n                                select={optionID => this.select(optionID)}\r\n                            />\r\n                        );\r\n                    }\r\n                });\r\n\r\n                content.push(\r\n                    <div key=\"options\" className=\"dropdown-options\">\r\n                        {items}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={style} onClick={e => this.toggleOpen(e)}>\r\n                    {content}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface DropdownOptionProps {\r\n    option: { id: string; text: string; disabled?: boolean };\r\n    selected: boolean;\r\n    select: (optionID: string) => void;\r\n}\r\n\r\nclass DropdownOption extends React.Component<DropdownOptionProps> {\r\n    click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (!this.props.option.disabled) {\r\n            this.props.select(this.props.option.id);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        try {\r\n            var style = \"dropdown-option\";\r\n            if (this.props.selected) {\r\n                style += \" selected\";\r\n            }\r\n            if (this.props.option.disabled) {\r\n                style += \" disabled\";\r\n            }\r\n\r\n            return (\r\n                <div className={style} title={this.props.option.text} onClick={e => this.click(e)}>\r\n                    {this.props.option.text}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport Utils from '../../utils';\r\n\r\nimport { Monster } from '../../models/models';\r\n\r\nimport Spin from '../controls/spin';\r\n\r\ninterface Props {\r\n    combatant: Monster;\r\n    edit: boolean;\r\n    nudgeValue: (combatant: Monster, field: string, delta: number) => void;\r\n}\r\n\r\ninterface State {\r\n    showAbilityScores: boolean;\r\n}\r\n\r\nexport default class AbilityScorePanel extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        edit: null,\r\n        nudgeValue: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showAbilityScores: false\r\n        };\r\n    }\r\n\r\n    toggleAbilityScores() {\r\n        this.setState({\r\n            showAbilityScores: !this.state.showAbilityScores\r\n        });\r\n    }\r\n\r\n    render() {\r\n        try {\r\n            var result = null;\r\n\r\n            if (this.props.edit) {\r\n                result = (\r\n                    <div>\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name=\"str\"\r\n                            label=\"strength\"\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, \"abilityScores.str\", delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name=\"dex\"\r\n                            label=\"dexterity\"\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, \"abilityScores.dex\", delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name=\"con\"\r\n                            label=\"constitution\"\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, \"abilityScores.con\", delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name=\"int\"\r\n                            label=\"intelligence\"\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, \"abilityScores.int\", delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name=\"wis\"\r\n                            label=\"wisdom\"\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, \"abilityScores.wis\", delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name=\"cha\"\r\n                            label=\"charisma\"\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, \"abilityScores.cha\", delta)}\r\n                        />\r\n                    </div>\r\n                );\r\n            } else {\r\n                result = (\r\n                    <div className=\"ability-scores\" onClick={() => this.toggleAbilityScores()}>\r\n                        <div className=\"ability-score\">\r\n                            <div className=\"ability-heading\">str</div>\r\n                            <div className=\"ability-value\">{this.state.showAbilityScores ? this.props.combatant.abilityScores.str : Utils.modifier(this.props.combatant.abilityScores.str)}</div>\r\n                        </div>\r\n                        <div className=\"ability-score\">\r\n                            <div className=\"ability-heading\">dex</div>\r\n                            <div className=\"ability-value\">{this.state.showAbilityScores ? this.props.combatant.abilityScores.dex : Utils.modifier(this.props.combatant.abilityScores.dex)}</div>\r\n                        </div>\r\n                        <div className=\"ability-score\">\r\n                            <div className=\"ability-heading\">con</div>\r\n                            <div className=\"ability-value\">{this.state.showAbilityScores ? this.props.combatant.abilityScores.con : Utils.modifier(this.props.combatant.abilityScores.con)}</div>\r\n                        </div>\r\n                        <div className=\"ability-score\">\r\n                            <div className=\"ability-heading\">int</div>\r\n                            <div className=\"ability-value\">{this.state.showAbilityScores ? this.props.combatant.abilityScores.int : Utils.modifier(this.props.combatant.abilityScores.int)}</div>\r\n                        </div>\r\n                        <div className=\"ability-score\">\r\n                            <div className=\"ability-heading\">wis</div>\r\n                            <div className=\"ability-value\">{this.state.showAbilityScores ? this.props.combatant.abilityScores.wis : Utils.modifier(this.props.combatant.abilityScores.wis)}</div>\r\n                        </div>\r\n                        <div className=\"ability-score\">\r\n                            <div className=\"ability-heading\">cha</div>\r\n                            <div className=\"ability-value\">{this.state.showAbilityScores ? this.props.combatant.abilityScores.cha : Utils.modifier(this.props.combatant.abilityScores.cha)}</div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return result;\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    };\r\n}","import React from 'react';\r\n\r\nimport Utils from '../../utils';\r\n\r\nimport { Trait, Monster } from '../../models/models';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport Expander from '../controls/expander';\r\n\r\ninterface Props {\r\n    combatant: Monster;\r\n    mode: 'view' | 'edit' | 'template';\r\n    addTrait: (traitType: 'trait' | 'action' | 'legendary' | 'lair' | 'regional') => void;\r\n    copyTrait: (trait: Trait) => void;\r\n    removeTrait: (trait: Trait) => void;\r\n    changeTrait: (trait: Trait, field: 'name' | 'usage' | 'text', value: string) => void;\r\n}\r\n\r\nexport default class TraitsPanel extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        mode: 'view',\r\n        addTrait: null,\r\n        copyTrait: null,\r\n        removeTrait: null,\r\n        changeTrait: null\r\n    };\r\n\r\n    render() {\r\n        try {\r\n            var traits = [];\r\n            var actions = [];\r\n            var legendaryActions = [];\r\n            var lairActions = [];\r\n            var regionalEffects = [];\r\n\r\n            for (var n = 0; n !== this.props.combatant.traits.length; ++n) {\r\n                var action = this.props.combatant.traits[n];\r\n                var item = (\r\n                    <TraitPanel\r\n                        key={action.id}\r\n                        trait={action}\r\n                        mode={this.props.mode}\r\n                        changeTrait={(action, type, value) => this.props.changeTrait(action, type, value)}\r\n                        removeTrait={action => this.props.removeTrait(action)}\r\n                        copyTrait={action => this.props.copyTrait(action)}\r\n                    />\r\n                );\r\n\r\n                switch (action.type) {\r\n                    case \"trait\":\r\n                        traits.push(item);\r\n                        break;\r\n                    case \"action\":\r\n                        actions.push(item);\r\n                        break;\r\n                    case \"legendary\":\r\n                        legendaryActions.push(item);\r\n                        break;\r\n                    case \"lair\":\r\n                        lairActions.push(item);\r\n                        break;\r\n                    case \"regional\":\r\n                        regionalEffects.push(item);\r\n                        break;\r\n                    default:\r\n                        // Do nothing\r\n                        break;\r\n                }\r\n            }\r\n\r\n            if (this.props.mode === 'edit') {\r\n                traits.push(\r\n                    <button key=\"add\" onClick={() => this.props.addTrait(\"trait\")}>add a new trait</button>\r\n                );\r\n                actions.push(\r\n                    <button key=\"add\" onClick={() => this.props.addTrait(\"action\")}>add a new action</button>\r\n                );\r\n                legendaryActions.push(\r\n                    <button key=\"add\" onClick={() => this.props.addTrait(\"legendary\")}>add a new legendary action</button>\r\n                );\r\n                lairActions.push(\r\n                    <button key=\"add\" onClick={() => this.props.addTrait(\"lair\")}>add a new lair action</button>\r\n                );\r\n                regionalEffects.push(\r\n                    <button key=\"add\" onClick={() => this.props.addTrait(\"regional\")}>add a new regional effect</button>\r\n                );\r\n\r\n                return (\r\n                    <div className=\"row collapse\">\r\n                        <div className=\"columns small-4 medium-4 large-4 list-column\">\r\n                            <div className=\"section subheading\">traits</div>\r\n                            {traits}\r\n                        </div>\r\n                        <div className=\"columns small-4 medium-4 large-4 list-column\">\r\n                            <div className=\"section subheading\">actions</div>\r\n                            {actions}\r\n                        </div>\r\n                        <div className=\"columns small-4 medium-4 large-4 list-column\">\r\n                            <div className=\"section subheading\">legendary actions</div>\r\n                            {legendaryActions}\r\n                            <div className=\"section subheading\">lair actions</div>\r\n                            {lairActions}\r\n                            <div className=\"section subheading\">regional effects</div>\r\n                            {regionalEffects}\r\n                        </div>\r\n                    </div>\r\n                );    \r\n            }\r\n\r\n            return (\r\n                <div>\r\n                    <div style={{ display: traits.length > 0 ? \"\" : \"none\" }}>\r\n                        <div className=\"section subheading\">traits</div>\r\n                        {traits}\r\n                    </div>\r\n                    <div style={{ display: actions.length > 0 ? \"\" : \"none\" }}>\r\n                        <div className=\"section subheading\">actions</div>\r\n                        {actions}\r\n                    </div>\r\n                    <div style={{ display: legendaryActions.length > 0 ? \"\" : \"none\" }}>\r\n                        <div className=\"section subheading\">legendary actions</div>\r\n                        {legendaryActions}\r\n                    </div>\r\n                    <div style={{ display: lairActions.length > 0 ? \"\" : \"none\" }}>\r\n                        <div className=\"section subheading\">lair actions</div>\r\n                        {lairActions}\r\n                    </div>\r\n                    <div style={{ display: regionalEffects.length > 0 ? \"\" : \"none\" }}>\r\n                        <div className=\"section subheading\">regional effects</div>\r\n                        {regionalEffects}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    };\r\n}\r\n\r\ninterface TraitPanelProps {\r\n    trait: Trait;\r\n    mode: 'view' | 'edit' | 'template';\r\n    changeTrait: (trait: Trait, field: 'name' | 'usage' | 'text', value: string) => void;\r\n    copyTrait: (trait: Trait) => void;\r\n    removeTrait: (trait: Trait) => void;\r\n}\r\n\r\nclass TraitPanel extends React.Component<TraitPanelProps> {\r\n    render() {\r\n        try {\r\n            var heading = this.props.trait.name || \"unnamed \" + Utils.traitType(this.props.trait.type);\r\n            if (this.props.trait.usage) {\r\n                heading += \" (\" + this.props.trait.usage + \")\";\r\n            }\r\n\r\n            switch (this.props.mode) {\r\n                case 'view':\r\n                    return (\r\n                        <div key={this.props.trait.id} className=\"section trait\">\r\n                            <b>{heading}</b> {this.props.trait.text}\r\n                        </div>\r\n                    );\r\n                case 'edit':\r\n                    var details = (\r\n                        <div className=\"section\">\r\n                            <input type=\"text\" placeholder=\"name\" value={this.props.trait.name} onChange={event => this.props.changeTrait(this.props.trait, \"name\", event.target.value)} />\r\n                            <input type=\"text\" placeholder=\"usage\" value={this.props.trait.usage} onChange={event => this.props.changeTrait(this.props.trait, \"usage\", event.target.value)} />\r\n                            <textarea placeholder=\"details\" value={this.props.trait.text} onChange={event => this.props.changeTrait(this.props.trait, \"text\", event.target.value)} />\r\n                            <div className=\"divider\"></div>\r\n                            <ConfirmButton text=\"delete\" callback={() => this.props.removeTrait(this.props.trait)} />\r\n                        </div>\r\n                    );\r\n        \r\n                    return (\r\n                        <Expander\r\n                            text={this.props.trait.name || \"unnamed \" + Utils.traitType(this.props.trait.type)}\r\n                            content={details}\r\n                        />\r\n                    );\r\n                case 'template':\r\n                    return (\r\n                        <div key={this.props.trait.id} className=\"section trait\">\r\n                            <b>{heading}</b> {this.props.trait.text}\r\n                            <button onClick={() => this.props.copyTrait(this.props.trait)}>copy</button>\r\n                        </div>\r\n                    );\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport Utils from '../../utils';\r\n\r\nimport { Combatant, Condition, Combat } from '../../models/models';\r\n\r\nimport Spin from '../controls/spin';\r\nimport Expander from '../controls/expander';\r\n\r\ninterface Props {\r\n    combatant: Combatant;\r\n    combat: Combat;\r\n    nudgeConditionValue: (condition: Condition, field: string, delta: number) => void;\r\n    addCondition: () => void;\r\n    editCondition: (condition: Condition) => void;\r\n    removeCondition: (conditionID: string) => void;\r\n}\r\n\r\nexport default class ConditionsPanel extends React.Component<Props> {\r\n    render() {\r\n        try {\r\n            var conditions = [];\r\n            if (this.props.combatant.conditions) {\r\n                for (var n = 0; n !== this.props.combatant.conditions.length; ++n) {\r\n                    var condition = this.props.combatant.conditions[n];\r\n                    conditions.push(\r\n                        <ConditionPanel\r\n                            key={n}\r\n                            condition={condition}\r\n                            combat={this.props.combat}\r\n                            nudgeConditionValue={(condition, type, delta) => this.props.nudgeConditionValue(condition, type, delta)}\r\n                            editCondition={condition => this.props.editCondition(condition)}\r\n                            removeCondition={conditionID => this.props.removeCondition(conditionID)}\r\n                        />\r\n                    );\r\n                }\r\n            }\r\n\r\n            return (\r\n                <div className=\"section\">\r\n                    {conditions}\r\n                    <button onClick={() => this.props.addCondition()}>add a condition</button>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    };\r\n}\r\n\r\ninterface ConditionPanelProps {\r\n    condition: Condition;\r\n    combat: Combat;\r\n    nudgeConditionValue: (condition: Condition, field: string, delta: number) => void;\r\n    editCondition: (condition: Condition) => void;\r\n    removeCondition: (conditionID: string) => void;\r\n}\r\n\r\nclass ConditionPanel extends React.Component<ConditionPanelProps> {\r\n    render() {\r\n        try {\r\n            var name: string = this.props.condition.name || \"condition\";\r\n            if (this.props.condition.name === \"exhaustion\") {\r\n                name += \" (\" + this.props.condition.level + \")\";\r\n            }\r\n            if ((this.props.condition.name === \"custom\") && (this.props.condition.text !== null)) {\r\n                name = this.props.condition.text;\r\n            }\r\n\r\n            if (this.props.condition.duration !== null) {\r\n                name += \" \" + Utils.conditionDurationText(this.props.condition, this.props.combat);\r\n            }\r\n\r\n            var description = [];\r\n            if (this.props.condition.name === \"exhaustion\") {\r\n                description.push(\r\n                    <div key=\"level\" className=\"section\">\r\n                        <Spin\r\n                            source={this.props.condition}\r\n                            name=\"level\"\r\n                            label=\"level\"\r\n                            nudgeValue={delta => this.props.nudgeConditionValue(this.props.condition, \"level\", delta)}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n            var text = Utils.conditionText(this.props.condition);\r\n            for (var n = 0; n !== text.length; ++n) {\r\n                description.push(<div key={n} className=\"section\">{text[n]}</div>);\r\n            }\r\n\r\n            return (\r\n                <Expander\r\n                    text={name}\r\n                    content={(\r\n                        <div>\r\n                            {description}\r\n                            <div className=\"divider\"></div>\r\n                            <button onClick={() => this.props.editCondition(this.props.condition)}>edit</button>\r\n                            <button onClick={() => this.props.removeCondition(this.props.condition.id)}>remove</button>\r\n                        </div>\r\n                    )}\r\n                />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport Utils from '../../utils';\r\n\r\nimport { Monster, Combatant, EncounterSlot, Combat, Trait, EncounterWave, MonsterGroup, Condition, Encounter } from '../../models/models';\r\n\r\nimport Expander from '../controls/expander';\r\nimport Dropdown from '../controls/dropdown';\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport Radial from '../controls/radial';\r\nimport Spin from '../controls/spin';\r\nimport InfoCard from './info-card';\r\nimport AbilityScorePanel from '../panels/ability-score-panel';\r\nimport TraitsPanel from '../panels/traits-panel';\r\nimport ConditionsPanel from '../panels/conditions-panel';\r\n\r\nimport arrow from \"../../resources/images/down-arrow.svg\";\r\n\r\ninterface Props {\r\n    combatant: Monster | (Monster & Combatant);\r\n    mode: string;\r\n    library: MonsterGroup[];\r\n    changeValue: (monster: Monster, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, delta: number) => void;\r\n    // Library\r\n    editMonster: (monster: Monster) => void;\r\n    removeMonster: (monster: Monster) => void;\r\n    cloneMonster: (monster: Monster, name: string) => void;\r\n    moveToGroup: (monster: Monster, group: string) => void;\r\n    copyTrait: (trait: Trait) => void;\r\n    // Encounter builder\r\n    encounter: Encounter;\r\n    slot: EncounterSlot;\r\n    addEncounterSlot: (monster: Monster, waveID: string | null) => void;\r\n    removeEncounterSlot: (slot: EncounterSlot) => void;\r\n    // Combat\r\n    combat: Combat;\r\n    makeCurrent: (combatant: Combatant) => void;\r\n    makeActive: (combatant: Combatant) => void;\r\n    makeDefeated: (combatant: Combatant) => void;\r\n    endTurn: (combatant: Combatant) => void;\r\n    mapAdd: (combatant: Combatant) => void;\r\n    mapMove: (combatant: Combatant, dir: string) => void;\r\n    mapRemove: (combatant: Combatant) => void;\r\n    removeCombatant: (combatant: Combatant) => void;\r\n    changeHP: (combatant: Combatant, hp: number, tempHP: number) => void;\r\n    addCondition: (combatant: Combatant) => void;\r\n    editCondition: (combatant: Combatant, condition: Condition) => void;\r\n    removeCondition: (combatant: Combatant, conditionID: string) => void;\r\n    nudgeConditionValue: (condition: Condition, field: string, delta: number) => void;\r\n}\r\n\r\ninterface State {\r\n    showDetails: boolean;\r\n    cloneName: string;\r\n    damageOrHealing: number;\r\n}\r\n\r\nexport default class MonsterCard extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        library: null,\r\n        changeValue: null,\r\n        nudgeValue: null,\r\n        editMonster: null,\r\n        removeMonster: null,\r\n        cloneMonster: null,\r\n        moveToGroup: null,\r\n        copyTrait: null,\r\n        encounter: null,\r\n        slot: null,\r\n        addEncounterSlot: null,\r\n        removeEncounterSlot: null,\r\n        combat: null,\r\n        makeCurrent: null,\r\n        makeActive: null,\r\n        makeDefeated: null,\r\n        endTurn: null,\r\n        mapAdd: null,\r\n        mapMove: null,\r\n        mapRemove: null,\r\n        removeCombatant: null,\r\n        changeHP: null,\r\n        addCondition: null,\r\n        editCondition: null,\r\n        removeCondition: null,\r\n        nudgeConditionValue: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showDetails: false,\r\n            cloneName: props.combatant.name + \" copy\",\r\n            damageOrHealing: 0\r\n        };\r\n    }\r\n\r\n    setCloneName(cloneName: string) {\r\n        this.setState({\r\n            cloneName: cloneName\r\n        });\r\n    }\r\n\r\n    toggleDetails() {\r\n        this.setState({\r\n            showDetails: !this.state.showDetails\r\n        })\r\n    }\r\n\r\n    setDamage(value: number) {\r\n        this.setState({\r\n            damageOrHealing: value\r\n        });\r\n    }\r\n\r\n    nudgeDamage(delta: number) {\r\n        this.setState({\r\n            damageOrHealing: Math.max(this.state.damageOrHealing + delta, 0)\r\n        });\r\n    }\r\n\r\n    heal() {\r\n        var combatant = this.props.combatant as Combatant;\r\n\r\n        var hp = (combatant.hp ? combatant.hp : 0) + this.state.damageOrHealing;\r\n        hp = Math.min(hp, this.props.combatant.hpMax);\r\n\r\n        this.setState({\r\n            damageOrHealing: 0\r\n        }, () => {\r\n            this.props.changeHP(combatant, hp, this.props.combatant.hpTemp);\r\n        });\r\n    }\r\n\r\n    damage() {\r\n        var combatant = this.props.combatant as Combatant;\r\n\r\n        var hp = (combatant.hp ? combatant.hp : 0);\r\n        var temp = this.props.combatant.hpTemp;\r\n\r\n        var damage = this.state.damageOrHealing;\r\n\r\n        // Take damage off temp HP first\r\n        var val = Math.min(damage, temp);\r\n        damage -= val;\r\n        temp -= val;\r\n\r\n        // Take the rest off HP\r\n        hp -= damage;\r\n        hp = Math.max(hp, 0);\r\n\r\n        this.setState({\r\n            damageOrHealing: 0\r\n        }, () => {\r\n            this.props.changeHP(combatant, hp, temp);\r\n        });\r\n    }\r\n\r\n    description() {\r\n        var sizeAndType = (this.props.combatant.size + \" \" + this.props.combatant.category).toLowerCase();\r\n        if (this.props.combatant.tag) {\r\n            sizeAndType += \" (\" + this.props.combatant.tag.toLowerCase() + \")\";\r\n        }\r\n        sizeAndType += \", \";\r\n\r\n        var align = \"\";\r\n        if (this.props.combatant.alignment) {\r\n            align = this.props.combatant.alignment.toLowerCase() + \", \";\r\n        }\r\n\r\n        var cr = \"cr \" + Utils.challenge(this.props.combatant.challenge);\r\n\r\n        return sizeAndType + align + cr;\r\n    }\r\n\r\n    monsterIsInWave(wave: EncounterWave) {\r\n        return wave.slots.some(s => {\r\n            var group = this.props.library.find(g => g.monsters.includes(this.props.combatant));\r\n            return !!group && (s.monsterGroupName === group.name) && (s.monsterName === this.props.combatant.name)\r\n        });\r\n    }\r\n\r\n    render() {\r\n        try {\r\n            var options = [];\r\n            if (this.props.mode.indexOf(\"no-buttons\") === -1) {\r\n                if (this.props.mode.indexOf(\"view\") !== -1) {\r\n                    if (this.props.mode.indexOf(\"editable\") !== -1) {\r\n                        options.push(\r\n                            <button key=\"edit\" onClick={() => this.props.editMonster(this.props.combatant)}>edit monster</button>\r\n                        );\r\n\r\n                        options.push(\r\n                            <Expander\r\n                                key=\"clone\"\r\n                                text=\"clone monster\"\r\n                                content={\r\n                                    <div>\r\n                                        <input type=\"text\" placeholder=\"monster name\" value={this.state.cloneName} onChange={event => this.setCloneName(event.target.value)} />\r\n                                        <button onClick={() => this.props.cloneMonster(this.props.combatant, this.state.cloneName)}>create copy</button>\r\n                                    </div>\r\n                                }\r\n                            />\r\n                        );\r\n\r\n                        var groupOptions: { id: string, text: string }[] = [];\r\n                        this.props.library.forEach(group => {\r\n                            if (group.monsters.indexOf(this.props.combatant) === -1) {\r\n                                groupOptions.push({\r\n                                    id: group.id,\r\n                                    text: group.name\r\n                                });\r\n                            }\r\n                        });\r\n                        options.push(\r\n                            <Dropdown\r\n                                key=\"move\"\r\n                                options={groupOptions}\r\n                                placeholder=\"move to group...\"\r\n                                select={optionID => this.props.moveToGroup(this.props.combatant, optionID)}\r\n                            />\r\n                        );\r\n\r\n                        options.push(<ConfirmButton key=\"remove\" text=\"delete monster\" callback={() => this.props.removeMonster(this.props.combatant)} />);\r\n                    }\r\n                    if (this.props.mode.indexOf(\"encounter\") !== -1) {\r\n                        if (this.props.slot) {\r\n                            // This card is in an encounter or a wave\r\n                            options.push(<button key=\"remove\" onClick={() => this.props.removeEncounterSlot(this.props.slot)}>remove from encounter</button>);\r\n                        } else {\r\n                            var canAdd = false;\r\n                            // This card is in the library list\r\n                            if (!this.monsterIsInWave(this.props.encounter)) {\r\n                                options.push(<button key=\"add encounter\" onClick={() => this.props.addEncounterSlot(this.props.combatant, null)}>add to encounter</button>);\r\n                                canAdd = true;\r\n                            }\r\n                            this.props.encounter.waves.forEach(wave => {\r\n                                if (!this.monsterIsInWave(wave)) {\r\n                                    options.push(<button key={\"add \" + wave.id} onClick={() => this.props.addEncounterSlot(this.props.combatant, wave.id)}>add to {wave.name}</button>);\r\n                                    canAdd = true;\r\n                                }\r\n                            });\r\n                            // If we can't add it anywhere, don't show it\r\n                            if (!canAdd) {\r\n                                return (\r\n                                    <InfoCard\r\n                                        getHeading={() => {\r\n                                            return (\r\n                                                <div className=\"heading\">\r\n                                                    <div className=\"title\">{this.props.combatant.name}</div>\r\n                                                </div>\r\n                                            );\r\n                                        }}\r\n                                        getContent={() => {\r\n                                            return (\r\n                                                <div className=\"section centered\">\r\n                                                    <i>this monster is already part of this encounter</i>\r\n                                                </div>\r\n                                            );\r\n                                        }}\r\n                                    />\r\n                                );\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (this.props.mode.indexOf(\"combat\") !== -1) {\r\n                    var combatant = this.props.combatant as Combatant;\r\n\r\n                    if (this.props.mode.indexOf(\"tactical\") !== -1) {\r\n                        if (this.props.mode.indexOf(\"on-map\") !== -1) {\r\n                            options.push(\r\n                                <div key=\"mapMove\" className=\"section centered\">\r\n                                    <Radial\r\n                                        direction=\"eight\"\r\n                                        click={dir => this.props.mapMove(combatant, dir)}\r\n                                    />\r\n                                </div>\r\n                            );\r\n                            options.push(\r\n                                <Spin\r\n                                    key=\"altitude\"\r\n                                    source={this.props.combatant}\r\n                                    name=\"altitude\"\r\n                                    label=\"altitude\"\r\n                                    display={value => value + \" ft.\"}\r\n                                    nudgeValue={delta => this.props.nudgeValue(this.props.combatant, \"altitude\", delta * 5)}\r\n                                />\r\n                            );\r\n                            options.push(<button key=\"mapRemove\" onClick={() => this.props.mapRemove(combatant)}>remove from map</button>);\r\n                        }\r\n                        if (this.props.mode.indexOf(\"off-map\") !== -1) {\r\n                            options.push(<button key=\"mapAdd\" onClick={() => this.props.mapAdd(combatant)}>add to map</button>);\r\n                        }\r\n                        options.push(<div key=\"tactical-div\" className=\"divider\"></div>);\r\n                    }\r\n                    if (combatant.pending && !combatant.active && !combatant.defeated) {\r\n                        options.push(<ConfirmButton key=\"remove\" text=\"remove from encounter\" callback={() => this.props.removeCombatant(combatant)} />);\r\n                    }\r\n                    if (!combatant.pending && combatant.active && !combatant.defeated) {\r\n                        if (combatant.current) {\r\n                            options.push(<button key=\"endTurn\" onClick={() => this.props.endTurn(combatant)}>end turn</button>);\r\n                            options.push(<button key=\"makeDefeated\" onClick={() => this.props.makeDefeated(combatant)}>mark as defeated and end turn</button>);\r\n                        } else {\r\n                            options.push(<button key=\"makeCurrent\" onClick={() => this.props.makeCurrent(combatant)}>start turn</button>);\r\n                            options.push(<button key=\"makeDefeated\" onClick={() => this.props.makeDefeated(combatant)}>mark as defeated</button>);\r\n                            options.push(<ConfirmButton key=\"remove\" text=\"remove from encounter\" callback={() => this.props.removeCombatant(combatant)} />);\r\n                        }\r\n                    }\r\n                    if (!combatant.pending && !combatant.active && combatant.defeated) {\r\n                        options.push(<button key=\"makeActive\" onClick={() => this.props.makeActive(combatant)}>mark as active</button>);\r\n                        options.push(<ConfirmButton key=\"remove\" text=\"remove from encounter\" callback={() => this.props.removeCombatant(combatant)} />);\r\n                    }\r\n                    options.push(\r\n                        <Expander\r\n                            key=\"rename\"\r\n                            text=\"change name\"\r\n                            content={(\r\n                                <div>\r\n                                    <input type=\"text\" value={combatant.displayName} onChange={event => this.props.changeValue(this.props.combatant, \"displayName\", event.target.value)} />\r\n                                </div>\r\n                            )}\r\n                        />\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf(\"template\") !== -1) {\r\n                    // None\r\n                }\r\n            }\r\n\r\n            var stats = null;\r\n            if (this.props.mode.indexOf(\"view\") !== -1) {\r\n                var slotSection = null;\r\n                if (this.props.slot) {\r\n                    slotSection = (\r\n                        <div>\r\n                            <div className=\"divider\"></div>\r\n                            <Spin\r\n                                source={this.props.slot}\r\n                                name=\"count\"\r\n                                label=\"count\"\r\n                                nudgeValue={delta => this.props.nudgeValue(this.props.slot, \"count\", delta)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                var details = null;\r\n                if (this.state.showDetails) {\r\n                    details = (\r\n                        <div>\r\n                            <div className=\"divider\"></div>\r\n                            <div className=\"section\">\r\n                                <b>ac</b> {this.props.combatant.ac}\r\n                            </div>\r\n                            <div className=\"section\" style={{ display: this.props.combatant.hpMax !== 0 ? \"\" : \"none\" }}>\r\n                                <b>hp</b> {this.props.combatant.hitDice !== 0 ? this.props.combatant.hpMax + \" (\" + this.props.combatant.hitDice + \"d\" + Utils.hitDieType(this.props.combatant.size) + \")\" : this.props.combatant.hpMax}\r\n                            </div>\r\n                            <div className=\"section\" style={{ display: this.props.combatant.speed !== \"\" ? \"\" : \"none\" }}>\r\n                                <b>speed</b> {this.props.combatant.speed}\r\n                            </div>\r\n                            <div className=\"section\">\r\n                                <AbilityScorePanel combatant={this.props.combatant} />\r\n                            </div>\r\n                            <div className=\"section\" style={{ display: this.props.combatant.savingThrows !== \"\" ? \"\" : \"none\" }}>\r\n                                <b>saving throws</b> {this.props.combatant.savingThrows}\r\n                            </div>\r\n                            <div className=\"section\" style={{ display: this.props.combatant.skills !== \"\" ? \"\" : \"none\" }}>\r\n                                <b>skills</b> {this.props.combatant.skills}\r\n                            </div>\r\n                            <div className=\"section\" style={{ display: this.props.combatant.damage.resist !== \"\" ? \"\" : \"none\" }}>\r\n                                <b>damage resistances</b> {this.props.combatant.damage.resist}\r\n                            </div>\r\n                            <div className=\"section\" style={{ display: this.props.combatant.damage.vulnerable !== \"\" ? \"\" : \"none\" }}>\r\n                                <b>damage vulnerabilities</b> {this.props.combatant.damage.vulnerable}\r\n                            </div>\r\n                            <div className=\"section\" style={{ display: this.props.combatant.damage.immune !== \"\" ? \"\" : \"none\" }}>\r\n                                <b>damage immunities</b> {this.props.combatant.damage.immune}\r\n                            </div>\r\n                            <div className=\"section\" style={{ display: this.props.combatant.conditionImmunities !== \"\" ? \"\" : \"none\" }}>\r\n                                <b>condition immunities</b> {this.props.combatant.conditionImmunities}\r\n                            </div>\r\n                            <div className=\"section\" style={{ display: this.props.combatant.senses !== \"\" ? \"\" : \"none\" }}>\r\n                                <b>senses</b> {this.props.combatant.senses}\r\n                            </div>\r\n                            <div className=\"section\" style={{ display: this.props.combatant.languages !== \"\" ? \"\" : \"none\" }}>\r\n                                <b>languages</b> {this.props.combatant.languages}\r\n                            </div>\r\n                            <div className=\"section\" style={{ display: this.props.combatant.equipment !== \"\" ? \"\" : \"none\" }}>\r\n                                <b>equipment</b> {this.props.combatant.equipment}\r\n                            </div>\r\n                            <div className=\"divider\"></div>\r\n                            <TraitsPanel combatant={this.props.combatant} />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                stats = (\r\n                    <div className=\"stats\">\r\n                        <div className=\"section centered\">\r\n                            <i>{this.description()}</i>\r\n                        </div>\r\n                        {slotSection}\r\n                        {details}\r\n                    </div>\r\n                );\r\n            }\r\n            if (this.props.mode.indexOf(\"combat\") !== -1) {\r\n                stats = (\r\n                    <div className=\"stats\">\r\n                        <div className=\"section centered\">\r\n                            <i>{this.description()}</i>\r\n                        </div>\r\n                        <div className=\"divider\"></div>\r\n                        <Spin\r\n                            source={this.props.combatant}\r\n                            name=\"hp\"\r\n                            label=\"hit points\"\r\n                            factors={[1, 10]}\r\n                            nudgeValue={delta => this.props.nudgeValue(this.props.combatant, \"hp\", delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant}\r\n                            name=\"hpTemp\"\r\n                            label=\"temp hp\"\r\n                            factors={[1, 10]}\r\n                            nudgeValue={delta => this.props.nudgeValue(this.props.combatant, \"hpTemp\", delta)}\r\n                        />\r\n                        <div className=\"divider\"></div>\r\n                        <Spin\r\n                            source={this.state}\r\n                            name=\"damage\"\r\n                            factors={[1, 10]}\r\n                            nudgeValue={delta => this.nudgeDamage(delta)}\r\n                        />\r\n                        <div className={this.state.damageOrHealing > 0 ? \"\" : \"disabled\"}>\r\n                            <button className=\"damage-btn\" onClick={() => this.heal()}>heal</button>\r\n                            <button className=\"damage-btn\" onClick={() => this.setDamage(0)}>reset</button>\r\n                            <button className=\"damage-btn\" onClick={() => this.damage()}>damage</button>\r\n                        </div>\r\n                        <div className=\"section\" style={{ display: this.props.combatant.damage.resist !== \"\" ? \"\" : \"none\" }}>\r\n                            <b>damage resistances</b> {this.props.combatant.damage.resist}\r\n                        </div>\r\n                        <div className=\"section\" style={{ display: this.props.combatant.damage.vulnerable !== \"\" ? \"\" : \"none\" }}>\r\n                            <b>damage vulnerabilities</b> {this.props.combatant.damage.vulnerable}\r\n                        </div>\r\n                        <div className=\"section\" style={{ display: this.props.combatant.damage.immune !== \"\" ? \"\" : \"none\" }}>\r\n                            <b>damage immunities</b> {this.props.combatant.damage.immune}\r\n                        </div>\r\n                        <div className=\"divider\"></div>\r\n                        <div className=\"section\">\r\n                            <AbilityScorePanel combatant={this.props.combatant} />\r\n                        </div>\r\n                        <div className=\"section\" style={{ display: this.props.combatant.ac !== 0 ? \"\" : \"none\" }}>\r\n                            <b>ac</b> {this.props.combatant.ac}\r\n                        </div>\r\n                        <div className=\"section\" style={{ display: this.props.combatant.savingThrows !== \"\" ? \"\" : \"none\" }}>\r\n                            <b>saving throws</b> {this.props.combatant.savingThrows}\r\n                        </div>\r\n                        <div className=\"section\" style={{ display: this.props.combatant.skills !== \"\" ? \"\" : \"none\" }}>\r\n                            <b>skills</b> {this.props.combatant.skills}\r\n                        </div>\r\n                        <div className=\"section\" style={{ display: this.props.combatant.speed !== \"\" ? \"\" : \"none\" }}>\r\n                            <b>speed</b> {this.props.combatant.speed}\r\n                        </div>\r\n                        <div className=\"section\" style={{ display: this.props.combatant.senses !== \"\" ? \"\" : \"none\" }}>\r\n                            <b>senses</b> {this.props.combatant.senses}\r\n                        </div>\r\n                        <div className=\"section\" style={{ display: this.props.combatant.languages !== \"\" ? \"\" : \"none\" }}>\r\n                            <b>languages</b> {this.props.combatant.languages}\r\n                        </div>\r\n                        <div className=\"section\" style={{ display: this.props.combatant.equipment !== \"\" ? \"\" : \"none\" }}>\r\n                            <b>equipment</b> {this.props.combatant.equipment}\r\n                        </div>\r\n                        <div className=\"divider\"></div>\r\n                        <TraitsPanel combatant={this.props.combatant} />\r\n                        <div className=\"divider\"></div>\r\n                        <div className=\"section subheading\">\r\n                            conditions\r\n                        </div>\r\n                        <div className=\"section\" style={{ display: this.props.combatant.conditionImmunities !== \"\" ? \"\" : \"none\" }}>\r\n                            <b>condition immunities</b> {this.props.combatant.conditionImmunities}\r\n                        </div>\r\n                        <ConditionsPanel\r\n                            combatant={this.props.combatant as Combatant}\r\n                            combat={this.props.combat}\r\n                            addCondition={() => this.props.addCondition(this.props.combatant as Combatant)}\r\n                            editCondition={condition => this.props.editCondition(this.props.combatant as Combatant, condition)}\r\n                            removeCondition={conditionID => this.props.removeCondition(this.props.combatant as Combatant, conditionID)}\r\n                            nudgeConditionValue={(condition, type, delta) => this.props.nudgeConditionValue(condition, type, delta)}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n            if (this.props.mode.indexOf(\"template\") !== -1) {\r\n                if (this.props.mode.indexOf(\"overview\") !== -1) {\r\n                    stats = (\r\n                        <div>\r\n                            <div className=\"section centered\">\r\n                                <i>{this.description()}</i>\r\n                            </div>\r\n                            <div className=\"divider\"></div>\r\n                            <div className=\"section\">\r\n                                <b>speed</b> {this.props.combatant.speed || \"-\"}\r\n                            </div>\r\n                            <div className=\"section\">\r\n                                <b>senses</b> {this.props.combatant.senses || \"-\"}\r\n                            </div>\r\n                            <div className=\"section\">\r\n                                <b>languages</b> {this.props.combatant.languages || \"-\"}\r\n                            </div>\r\n                            <div className=\"section\">\r\n                                <b>equipment</b> {this.props.combatant.equipment || \"-\"}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf(\"abilities\") !== -1) {\r\n                    stats = (\r\n                        <div>\r\n                            <div className=\"section\">\r\n                                <AbilityScorePanel combatant={this.props.combatant} />\r\n                            </div>\r\n                            <div className=\"section\">\r\n                                <b>saving throws</b> {this.props.combatant.savingThrows || \"-\"}\r\n                            </div>\r\n                            <div className=\"section\">\r\n                                <b>skills</b> {this.props.combatant.skills || \"-\"}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf(\"combat\") !== -1) {\r\n                    stats = (\r\n                        <div>\r\n                            <div className=\"section\">\r\n                                <b>ac</b> {this.props.combatant.ac}\r\n                            </div>\r\n                            <div className=\"section\">\r\n                                <b>hp</b> {this.props.combatant.hitDice !== 0 ? this.props.combatant.hpMax + \" (\" + this.props.combatant.hitDice + \"d\" + Utils.hitDieType(this.props.combatant.size) + \")\" : this.props.combatant.hpMax}\r\n                            </div>\r\n                            <div className=\"section\">\r\n                                <b>damage immunity</b> {this.props.combatant.damage.immune || \"-\"}\r\n                            </div>\r\n                            <div className=\"section\">\r\n                                <b>damage resistance</b> {this.props.combatant.damage.resist || \"-\"}\r\n                            </div>\r\n                            <div className=\"section\">\r\n                                <b>damage vulnerability</b> {this.props.combatant.damage.vulnerable || \"-\"}\r\n                            </div>\r\n                            <div className=\"section\">\r\n                                <b>condition immunities</b> {this.props.combatant.conditionImmunities || \"-\"}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf(\"actions\") !== -1) {\r\n                    stats = (\r\n                        <TraitsPanel\r\n                            combatant={this.props.combatant}\r\n                            mode='template'\r\n                            copyTrait={trait => this.props.copyTrait(trait)}\r\n                        />\r\n                    );\r\n                }\r\n            }\r\n\r\n            var toggle = null;\r\n            if (this.props.mode.indexOf(\"combat\") !== -1) {\r\n                // Don't show toggle button for combatant\r\n            } else if (this.props.mode.indexOf(\"template\") !== -1) {\r\n                // Don't show toggle button for template\r\n            } else {\r\n                var imageStyle = this.state.showDetails ? \"image rotate\" : \"image\";\r\n                toggle = <img className={imageStyle} src={arrow} alt=\"arrow\" onClick={() => this.toggleDetails()} />\r\n            }\r\n\r\n            return (\r\n                <div className=\"card monster\">\r\n                    <div className=\"heading\">\r\n                        <div className=\"title\">{(this.props.combatant as Combatant ? (this.props.combatant as Combatant).displayName : null) || this.props.combatant.name || \"unnamed monster\"}</div>\r\n                        {toggle}\r\n                    </div>\r\n                    <div className=\"card-content\">\r\n                        {stats}\r\n                        <div style={{ display: options.length > 0 ? \"\" : \"none\" }}>\r\n                            <div className=\"divider\"></div>\r\n                            <div className=\"section\">{options}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport Utils from '../../utils';\r\n\r\nimport { MonsterGroup, Monster } from '../../models/models';\r\n\r\nimport MonsterLibraryCard from '../cards/information/monster-library-card';\r\nimport MonsterGroupListItem from '../list-items/monster-group-list-item';\r\nimport MonsterGroupCard from '../cards/monster-group-card';\r\nimport MonsterCard from '../cards/monster-card';\r\nimport InfoCard from '../cards/info-card';\r\nimport CardGroup from '../panels/card-group';\r\n\r\ninterface Props {\r\n    library: MonsterGroup[];\r\n    selection: MonsterGroup | null;\r\n    showHelp: boolean;\r\n    filter: string;\r\n    selectMonsterGroup: (group: MonsterGroup | null) => void;\r\n    addMonsterGroup: () => void;\r\n    removeMonsterGroup: () => void;\r\n    addMonster: () => void;\r\n    removeMonster: (monster: Monster) => void;\r\n    editMonster: (monster: Monster) => void;\r\n    cloneMonster: (monster: Monster, name: string) => void;\r\n    sortMonsters: () => void;\r\n    moveToGroup: (monster: Monster, groupID: string) => void;\r\n    changeValue: (source: any, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, value: number) => void;\r\n}\r\n\r\nexport default class MonsterLibraryScreen extends React.Component<Props> {\r\n    showMonsterGroup(group: MonsterGroup) {\r\n        var result = Utils.match(this.props.filter, group.name);\r\n\r\n        if (!result) {\r\n            group.monsters.forEach(monster => {\r\n                result = Utils.match(this.props.filter, monster.name) || result;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    render() {\r\n        try {\r\n            var help = null;\r\n            if (this.props.showHelp) {\r\n                help = (\r\n                    <MonsterLibraryCard />\r\n                );\r\n            }\r\n            \r\n            var listItems = [];\r\n            for (var n = 0; n !== this.props.library.length; ++n) {\r\n                var group = this.props.library[n];\r\n                if (this.showMonsterGroup(group)) {\r\n                    listItems.push(\r\n                        <MonsterGroupListItem\r\n                            key={group.id}\r\n                            group={group}\r\n                            filter={this.props.filter}\r\n                            selected={group === this.props.selection}\r\n                            setSelection={group => this.props.selectMonsterGroup(group)}\r\n                        />\r\n                    );\r\n                }\r\n            };\r\n\r\n            var cards = [];\r\n\r\n            if (this.props.selection) {\r\n                cards.push(\r\n                    <div className=\"column\" key=\"info\">\r\n                        <MonsterGroupCard\r\n                            selection={this.props.selection}\r\n                            filter={this.props.filter}\r\n                            addMonster={() => this.props.addMonster()}\r\n                            sortMonsters={() => this.props.sortMonsters()}\r\n                            changeValue={(type, value) => this.props.changeValue(this.props.selection, type, value)}\r\n                            removeMonsterGroup={() => this.props.removeMonsterGroup()}\r\n                        />\r\n                    </div>\r\n                );\r\n\r\n                var monsters = this.props.selection.monsters.filter(monster => {\r\n                    return Utils.match(this.props.filter, monster.name);\r\n                });\r\n\r\n                if (monsters.length !== 0) {\r\n                    monsters.forEach(monster => {\r\n                        cards.push(\r\n                            <div className=\"column\" key={monster.id}>\r\n                                <MonsterCard\r\n                                    combatant={monster}\r\n                                    mode={\"view editable\"}\r\n                                    library={this.props.library}\r\n                                    changeValue={(monster, type, value) => this.props.changeValue(monster, type, value)}\r\n                                    nudgeValue={(monster, type, delta) => this.props.nudgeValue(monster, type, delta)}\r\n                                    moveToGroup={(monster, groupID) => this.props.moveToGroup(monster, groupID)}\r\n                                    removeMonster={monster => this.props.removeMonster(monster)}\r\n                                    editMonster={monster => this.props.editMonster(monster)}\r\n                                    cloneMonster={(monster, name) => this.props.cloneMonster(monster, name)}\r\n                                />\r\n                            </div>\r\n                        );\r\n                    });\r\n                } else {\r\n                    cards.push(\r\n                        <div className=\"column\" key=\"empty\">\r\n                            <InfoCard getContent={() => <div className=\"section\">no monsters</div>} />\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n\r\n            var name = undefined;\r\n            if (this.props.selection) {\r\n                name = this.props.selection.name;\r\n                if (!name) {\r\n                    name = \"unnamed group\";\r\n                }\r\n            }\r\n\r\n            return (\r\n                <div className=\"monster-library row collapse\">\r\n                    <div className=\"columns small-4 medium-4 large-3 scrollable list-column\">\r\n                        {help}\r\n                        <button onClick={() => this.props.addMonsterGroup()}>add a new monster group</button>\r\n                        {listItems}\r\n                    </div>\r\n                    <div className=\"columns small-8 medium-8 large-9 scrollable\">\r\n                        <CardGroup\r\n                            content={cards}\r\n                            heading={name}\r\n                            showClose={this.props.selection !== null}\r\n                            close={() => this.props.selectMonsterGroup(null)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\ninterface Props {\r\n    title: string;\r\n    getContent: () => (string | JSX.Element);\r\n}\r\n\r\nexport default class ErrorCard extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        title: null\r\n    };\r\n\r\n    render() {\r\n        try {\r\n            var heading = null;\r\n            if (this.props.title) {\r\n                heading = <div className=\"heading\"><div className=\"title\">{this.props.title}</div></div>;\r\n            }\r\n\r\n            var content = this.props.getContent();\r\n\r\n            return (\r\n                <div className=\"card error\">\r\n                    {heading}\r\n                    <div className=\"card-content\">\r\n                        {content}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}","export interface Party {\r\n    id: string;\r\n    name: string;\r\n    pcs: PC[];\r\n}\r\n\r\nexport interface PC {\r\n    id: string;\r\n    type: string;\r\n    active: boolean;\r\n    player: string;\r\n    name: string;\r\n    race: string;\r\n    classes: string;\r\n    background: string;\r\n    level: number;\r\n    languages: string;\r\n    passiveInsight: number;\r\n    passiveInvestigation: number;\r\n    passivePerception: number;\r\n    initiative: number;\r\n    url: string;\r\n}\r\n\r\nexport interface MonsterGroup {\r\n    id: string;\r\n    name: string;\r\n    monsters: Monster[];\r\n}\r\n\r\nexport interface Monster {\r\n    id: string;\r\n    type: string;\r\n    name: string;\r\n    size: string;\r\n    category: string;\r\n    tag: string;\r\n    alignment: string;\r\n    challenge: number;\r\n    abilityScores: {\r\n        str: number;\r\n        dex: number;\r\n        con: number;\r\n        int: number;\r\n        wis: number;\r\n        cha: number;\r\n    };\r\n    ac: number;\r\n    hpMax: number;\r\n    hpTemp: number;\r\n    hitDice: number;\r\n    damage: {\r\n        resist: string;\r\n        vulnerable: string;\r\n        immune: string;\r\n    };\r\n    savingThrows: string;\r\n    speed: string;\r\n    skills: string;\r\n    senses: string;\r\n    languages: string;\r\n    equipment: string;\r\n    traits: Trait[];\r\n    conditionImmunities: string;\r\n}\r\n\r\nexport interface Trait {\r\n    id: string;\r\n    name: string;\r\n    usage: string;\r\n    type: 'trait' | 'action' | 'legendary' | 'lair' | 'regional';\r\n    text: string;\r\n}\r\n\r\nexport interface Encounter {\r\n    id: string;\r\n    name: string;\r\n    slots: EncounterSlot[];\r\n    waves: EncounterWave[];\r\n}\r\n\r\nexport interface EncounterSlot {\r\n    id: string;\r\n    monsterGroupName: string;\r\n    monsterName: string;\r\n    count: number;\r\n}\r\n\r\nexport interface EncounterWave {\r\n    id: string;\r\n    name: string;\r\n    slots: EncounterSlot[];\r\n}\r\n\r\nexport interface MapFolio {\r\n    id: string;\r\n    name: string;\r\n    maps: Map[];\r\n}\r\n\r\nexport interface Map {\r\n    id: string;\r\n    name: string;\r\n    items: MapItem[];\r\n}\r\n\r\nexport interface MapItem {\r\n    id: string;\r\n    type: \"tile\" | \"pc\" | \"monster\";\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n    terrain: string | null;\r\n}\r\n\r\nexport interface CombatSetup {\r\n    partyID: string | null;\r\n    encounterID: string | null;\r\n    waveID: string | null;\r\n    folioID: string | null;\r\n    mapID: string | null;\r\n    monsterNames: { id: string, names: string[] }[];\r\n    encounterInitMode: 'manual' | 'individual' | 'group';\r\n}\r\n\r\nexport interface Combat {\r\n    id: string;\r\n    name: string;\r\n    encounterID: string | null;\r\n    combatants: ((Combatant & PC) | (Combatant & Monster))[];\r\n    map: Map | null;\r\n    round: number;\r\n    notifications: Notification[];\r\n    issues: string[];\r\n    timestamp: string | null;\r\n}\r\n\r\nexport interface Combatant {\r\n    id: string;\r\n    displayName: string;\r\n    current: boolean;\r\n    pending: boolean;\r\n    active: boolean;\r\n    defeated: boolean;\r\n    initiative: number | null;\r\n    hp: number | null;\r\n    conditions: Condition[];\r\n    altitude: number;\r\n}\r\n\r\nexport interface Notification {\r\n    id: string;\r\n    type: 'condition-save' | 'condition-end';\r\n    condition: Condition | null;\r\n    combatant: (Combatant & Monster) | null;\r\n}\r\n\r\nexport interface Condition {\r\n    id: string;\r\n    name: string;\r\n    level: number;\r\n    text: string | null;\r\n    duration: ConditionDurationSaves | ConditionDurationCombatant | ConditionDurationRounds | null;\r\n}\r\n\r\nexport interface ConditionDurationSaves {\r\n    type: 'saves';\r\n    count: number;\r\n    saveType: string; // TODO\r\n    saveDC: number;\r\n    point: 'start' | 'end';\r\n}\r\n\r\nexport interface ConditionDurationCombatant {\r\n    type: 'combatant';\r\n    point: 'start' | 'end';\r\n    combatantID: string | null;\r\n}\r\n\r\nexport interface ConditionDurationRounds {\r\n    type: 'rounds';\r\n    count: number;\r\n}\r\n\r\nexport const SIZE_TYPES = [\r\n    \"tiny\",\r\n    \"small\",\r\n    \"medium\",\r\n    \"large\",\r\n    \"huge\",\r\n    \"gargantuan\"\r\n];\r\n\r\nexport const CATEGORY_TYPES = [\r\n    \"aberration\",\r\n    \"beast\",\r\n    \"celestial\",\r\n    \"construct\",\r\n    \"dragon\",\r\n    \"elemental\",\r\n    \"fey\",\r\n    \"fiend\",\r\n    \"giant\",\r\n    \"humanoid\",\r\n    \"monstrosity\",\r\n    \"ooze\",\r\n    \"plant\",\r\n    \"undead\"\r\n];\r\n\r\nexport const TRAIT_TYPES = [\r\n    \"trait\",\r\n    \"action\",\r\n    \"legendary\",\r\n    \"lair\",\r\n    \"regional\"\r\n];\r\n\r\nexport const CONDITION_TYPES = [\r\n    \"blinded\",\r\n    \"charmed\",\r\n    \"deafened\",\r\n    \"exhaustion\",\r\n    \"frightened\",\r\n    \"grappled\",\r\n    \"incapacitated\",\r\n    \"invisible\",\r\n    \"paralyzed\",\r\n    \"petrified\",\r\n    \"poisoned\",\r\n    \"prone\",\r\n    \"restrained\",\r\n    \"stunned\",\r\n    \"unconscious\",\r\n    \"custom\"\r\n];\r\n\r\nexport const TERRAIN_TYPES = [\r\n    \"cavern\",\r\n    \"dirt\",\r\n    \"flagstone\",\r\n    \"floorboard\",\r\n    \"grassland\",\r\n    \"pit\",\r\n    \"sand\",\r\n    \"snow\",\r\n    \"water\"\r\n];","import React from 'react';\r\n\r\nimport Utils from '../../utils';\r\n\r\nimport { CATEGORY_TYPES, SIZE_TYPES } from '../../models/models';\r\n\r\nimport Spin from '../controls/spin';\r\nimport Dropdown from '../controls/dropdown';\r\n\r\nimport arrow from \"../../resources/images/down-arrow.svg\";\r\n\r\ninterface Props {\r\n    filter: {\r\n        name: string,\r\n        challengeMin: number;\r\n        challengeMax: number;\r\n        category: string;\r\n        size: string;\r\n    };\r\n    changeValue: (type: 'name' | 'challengeMin' | 'challengeMax' | 'category' | 'size', value: any) => void;\r\n    nudgeValue: (type: 'challengeMin' | 'challengeMax', delta: number) => void;\r\n    resetFilter: () => void;\r\n}\r\n\r\ninterface State {\r\n    showAll: boolean;\r\n}\r\n\r\nexport default class FilterCard extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showAll: false\r\n        };\r\n    }\r\n\r\n    toggleAll() {\r\n        this.setState({\r\n            showAll: !this.state.showAll\r\n        });\r\n    }\r\n\r\n    render() {\r\n        try {\r\n            var sizes = [\"all sizes\"].concat(SIZE_TYPES);\r\n            var sizeOptions = sizes.map(size => { return { id: size, text: size }; });\r\n            \r\n            var categories = [\"all types\"].concat(CATEGORY_TYPES);\r\n            var catOptions = categories.map(cat => { return { id: cat, text: cat }; });\r\n\r\n            var content = null;\r\n            if (this.state.showAll) {\r\n                content = (\r\n                    <div>\r\n                        <div className=\"section\">\r\n                            <input type=\"text\" placeholder=\"name\" value={this.props.filter.name} onChange={event => this.props.changeValue(\"name\", event.target.value)} />\r\n                        </div>\r\n                        <Spin\r\n                            source={this.props.filter}\r\n                            name=\"challengeMin\"\r\n                            label=\"min cr\"\r\n                            display={value => Utils.challenge(value)}\r\n                            nudgeValue={delta => this.props.nudgeValue(\"challengeMin\", delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.filter}\r\n                            name=\"challengeMax\"\r\n                            label=\"max cr\"\r\n                            display={value => Utils.challenge(value)}\r\n                            nudgeValue={delta => this.props.nudgeValue(\"challengeMax\", delta)}\r\n                        />\r\n                        <Dropdown\r\n                            options={sizeOptions}\r\n                            placeholder=\"filter by size...\"\r\n                            selectedID={this.props.filter.size}\r\n                            select={optionID => this.props.changeValue(\"size\", optionID)}\r\n                        />\r\n                        <Dropdown\r\n                            options={catOptions}\r\n                            placeholder=\"filter by type...\"\r\n                            selectedID={this.props.filter.category}\r\n                            select={optionID => this.props.changeValue(\"category\", optionID)}\r\n                        />\r\n                        <div className=\"divider\"></div>\r\n                        <div className=\"section\">\r\n                            <button onClick={() => this.props.resetFilter()}>clear filter</button>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                var summary = \"\";\r\n                if (this.props.filter.size !== \"all sizes\") {\r\n                    summary += summary ? \" \" + this.props.filter.size : this.props.filter.size;\r\n                }\r\n                if (this.props.filter.category !== \"all types\") {\r\n                    summary += summary ? \" \" + this.props.filter.category : this.props.filter.category;\r\n                }\r\n                summary += \" monsters of cr \" + Utils.challenge(this.props.filter.challengeMin) + \" to \" + Utils.challenge(this.props.filter.challengeMax);\r\n\r\n                content = (\r\n                    <div>\r\n                        <div className=\"section\">\r\n                            <input type=\"text\" placeholder=\"name\" value={this.props.filter.name} onChange={event => this.props.changeValue(\"name\", event.target.value)} />\r\n                        </div>\r\n                        <div className=\"section\">showing {summary}</div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className=\"card\">\r\n                    <div className=\"heading\">\r\n                        <div className=\"title\">filter</div>\r\n                        <img className={this.state.showAll ? \"image rotate\" : \"image\"} src={arrow} alt=\"arrow\" onClick={() => this.toggleAll()} />\r\n                    </div>\r\n                    <div className=\"card-content\">\r\n                        {content}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport InfoCard from './info-card';\r\nimport { EncounterWave } from '../../models/models';\r\n\r\ninterface Props {\r\n    wave: EncounterWave;\r\n    changeValue: (wave: EncounterWave, field: string, value: string) => void;\r\n    removeWave: (wave: EncounterWave) => void;\r\n}\r\n\r\nexport default class WaveCard extends React.Component<Props> {\r\n    render() {\r\n        try {\r\n            var heading = (\r\n                <div className=\"heading\">\r\n                    <div className=\"title\">wave</div>\r\n                </div>\r\n            );\r\n\r\n            var content = (\r\n                <div>\r\n                    <div className=\"section\">\r\n                        <input type=\"text\" placeholder=\"wave name\" value={this.props.wave.name} onChange={event => this.props.changeValue(this.props.wave, \"name\", event.target.value)} />\r\n                    </div>\r\n                    <div className=\"divider\"></div>\r\n                    <div className=\"section\">\r\n                        <ConfirmButton text=\"delete wave\" callback={() => this.props.removeWave(this.props.wave)} />\r\n                    </div>\r\n                </div>\r\n            )\r\n\r\n            return (\r\n                <InfoCard getHeading={() => heading} getContent={() => content} />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    };\r\n}","import React from 'react';\r\n\r\nimport { Encounter } from '../../../models/models';\r\n\r\nimport InfoCard from '../info-card';\r\n\r\ninterface Props {\r\n    encounters: Encounter[];\r\n}\r\n\r\nexport default class EncounterBuilderCard extends React.Component<Props> {\r\n    render() {\r\n        try {\r\n            var action: JSX.Element | null = null;\r\n            if (this.props.encounters.length === 0) {\r\n                action = (\r\n                    <div className=\"section\">to start building an encounter, press the button below</div>\r\n                );\r\n            } else {\r\n                action = (\r\n                    <div className=\"section\">select an encounter from the list to add monsters to it</div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <InfoCard\r\n                    getContent={() => (\r\n                        <div>\r\n                            <div className=\"section\">on this page you can set up encounters</div>\r\n                            <div className=\"section\">when you have created an encounter you can add monsters to it, then gauge its difficulty for a party of pcs</div>\r\n                            <div className=\"divider\"></div>\r\n                            {action}\r\n                        </div>\r\n                    )}\r\n                />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    };\r\n}","import React from 'react';\r\n\r\nimport Utils from '../../utils';\r\n\r\nimport { Party, Monster, Encounter, EncounterSlot } from '../../models/models';\r\n\r\ninterface Props {\r\n    encounter: Encounter;\r\n    party: Party | null;\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null\r\n}\r\n\r\nexport default class DifficultyChartPanel extends React.Component<Props> {\r\n    render() {\r\n        var monsterCount = 0;\r\n        var monsterXp = 0;\r\n        var slots: EncounterSlot[] = [];\r\n        slots = slots.concat(this.props.encounter.slots);\r\n        this.props.encounter.waves.forEach(wave => {\r\n            slots = slots.concat(wave.slots);\r\n        })\r\n        slots.forEach(slot => {\r\n            monsterCount += slot.count;\r\n            var monster = this.props.getMonster(slot.monsterName, slot.monsterGroupName);\r\n            if (monster) {\r\n                monsterXp += Utils.experience(monster.challenge) * slot.count;\r\n            }\r\n        });\r\n\r\n        var adjustedXp = monsterXp * Utils.experienceFactor(monsterCount);\r\n\r\n        var xpThresholds;\r\n        var diffSection;\r\n        if (this.props.party) {\r\n            var xpEasy = 0;\r\n            var xpMedium = 0;\r\n            var xpHard = 0;\r\n            var xpDeadly = 0;\r\n    \r\n            var pcs = this.props.party.pcs.filter(pc => pc.active);\r\n            pcs.forEach(pc => {\r\n                xpEasy += Utils.pcExperience(pc.level, \"easy\");\r\n                xpMedium += Utils.pcExperience(pc.level, \"medium\");\r\n                xpHard += Utils.pcExperience(pc.level, \"hard\");\r\n                xpDeadly += Utils.pcExperience(pc.level, \"deadly\");\r\n            });\r\n        \r\n            var difficulty = null;\r\n            var adjustedDifficulty = null;\r\n            if (adjustedXp > 0) {\r\n                difficulty = \"trivial\";\r\n                if (adjustedXp >= xpEasy) {\r\n                    difficulty = \"easy\";\r\n                }\r\n                if (adjustedXp >= xpMedium) {\r\n                    difficulty = \"medium\";\r\n                }\r\n                if (adjustedXp >= xpHard) {\r\n                    difficulty = \"hard\";\r\n                }\r\n                if (adjustedXp >= xpDeadly) {\r\n                    difficulty = \"deadly\";\r\n                }\r\n                adjustedDifficulty = difficulty;\r\n\r\n                if ((pcs.length < 3) || (pcs.length > 5)) {\r\n                    var small = pcs.length < 3;\r\n                    switch (difficulty) {\r\n                        case \"trivial\":\r\n                            adjustedDifficulty = small ? \"easy\" : \"trivial\";\r\n                            break;\r\n                        case \"easy\":\r\n                            adjustedDifficulty = small ? \"medium\" : \"trivial\";\r\n                            break;\r\n                        case \"medium\":\r\n                            adjustedDifficulty = small ? \"hard\" : \"easy\";\r\n                            break;\r\n                        case \"hard\":\r\n                            adjustedDifficulty = small ? \"deadly\" : \"medium\";\r\n                            break;\r\n                        case \"deadly\":\r\n                            adjustedDifficulty = small ? \"deadly\" : \"hard\";\r\n                            break;\r\n                        default:\r\n                            adjustedDifficulty = \"\";\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            xpThresholds = (\r\n                <div className=\"table\">\r\n                    <div>\r\n                        <div className=\"cell four\"><b>easy</b></div>\r\n                        <div className=\"cell four\"><b>medium</b></div>\r\n                        <div className=\"cell four\"><b>hard</b></div>\r\n                        <div className=\"cell four\"><b>deadly</b></div>\r\n                    </div>\r\n                    <div>\r\n                        <div className=\"cell four\">{xpEasy} xp</div>\r\n                        <div className=\"cell four\">{xpMedium} xp</div>\r\n                        <div className=\"cell four\">{xpHard} xp</div>\r\n                        <div className=\"cell four\">{xpDeadly} xp</div>\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            var getLeft = (xp: number) => {\r\n                var max = Math.max(adjustedXp, (xpDeadly * 1.2));\r\n                return (100 * xp) / max;\r\n            };\r\n\r\n            var getRight = (xp: number) => {\r\n                return 100 - getLeft(xp);\r\n            };\r\n\r\n            diffSection = (\r\n                <div>\r\n                    <div className=\"difficulty-gauge\">\r\n                        <div className=\"bar-container\">\r\n                            <div className=\"bar trivial\" style={{ left: \"0\", right: getRight(xpEasy) + \"%\" }}></div>\r\n                        </div>\r\n                        <div className=\"bar-container\">\r\n                            <div className=\"bar easy\" style={{ left: getLeft(xpEasy) + \"%\", right: getRight(xpMedium) + \"%\" }}></div>\r\n                        </div>\r\n                        <div className=\"bar-container\">\r\n                            <div className=\"bar medium\" style={{ left: getLeft(xpMedium) + \"%\", right: getRight(xpHard) + \"%\" }}></div>\r\n                        </div>\r\n                        <div className=\"bar-container\">\r\n                            <div className=\"bar hard\" style={{ left: getLeft(xpHard) + \"%\", right: getRight(xpDeadly) + \"%\" }}></div>\r\n                        </div>\r\n                        <div className=\"bar-container\">\r\n                            <div className=\"bar deadly\" style={{ left: getLeft(xpDeadly) + \"%\", right: \"0\" }}></div>\r\n                        </div>\r\n                        <div className=\"encounter-container\">\r\n                            <div className=\"encounter\" style={{ left: (getLeft(adjustedXp) - 0.5) + \"%\" }}></div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"subheading\">difficulty</div>\r\n                    <div className=\"section\">\r\n                        difficulty for this party\r\n                        <div className=\"right\">{difficulty}</div>\r\n                    </div>\r\n                    <div className=\"section\" style={{ display: (adjustedDifficulty === difficulty) ? \"none\" : \"\"}}>\r\n                        effective difficulty for {pcs.length} pc(s)\r\n                        <div className=\"right\"><b>{adjustedDifficulty}</b></div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"subheading\">xp value</div>\r\n                <div className=\"section\">\r\n                    xp for this encounter\r\n                    <div className=\"right\">{monsterXp} xp</div>\r\n                </div>\r\n                <div className=\"section\" style={{ display: (adjustedXp === monsterXp) ? \"none\" : \"\"}}>\r\n                    effective xp for {monsterCount} monster(s)\r\n                    <div className=\"right\">{adjustedXp} xp</div>\r\n                </div>\r\n                {xpThresholds}\r\n                {diffSection}\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nimport { Encounter, Party, Monster } from '../../models/models';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport DifficultyChartPanel from '../panels/difficulty-chart-panel';\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport InfoCard from './info-card';\r\n\r\nimport arrow from \"../../resources/images/down-arrow.svg\";\r\n\r\ninterface Props {\r\n    selection: Encounter;\r\n    parties: Party[];\r\n    changeValue: (field: string, value: string) => void;\r\n    addWave: () => void;\r\n    removeEncounter: () => void;\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n}\r\n\r\ninterface State {\r\n    showDetails: boolean;\r\n    party: Party | null;\r\n}\r\n\r\nexport default class EncounterCard extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showDetails: false,\r\n            party: null\r\n        };\r\n    }\r\n\r\n    toggleDetails() {\r\n        this.setState({\r\n            showDetails: !this.state.showDetails\r\n        })\r\n    }\r\n\r\n    selectParty(partyID: string) {\r\n        var party = this.props.parties.find(p => p.id === partyID);\r\n        this.setState({\r\n            party: party as Party\r\n        });\r\n    }\r\n\r\n    render() {\r\n        try {\r\n            var partyOptions = [];\r\n            if (this.props.parties) {\r\n                for (var n = 0; n !== this.props.parties.length; ++n) {\r\n                    var party = this.props.parties[n];\r\n                    partyOptions.push({\r\n                        id: party.id,\r\n                        text: party.name\r\n                    });\r\n                }\r\n            }\r\n\r\n            var difficultySection = (\r\n                <div>\r\n                    <Dropdown\r\n                        options={partyOptions}\r\n                        placeholder=\"select party...\"\r\n                        selectedID={this.state.party ? this.state.party.id : undefined}\r\n                        select={optionID => this.selectParty(optionID)}\r\n                    />\r\n                    <DifficultyChartPanel\r\n                        encounter={this.props.selection}\r\n                        party={this.state.party}\r\n                        getMonster={(monsterName, monsterGroupName) => this.props.getMonster(monsterName, monsterGroupName)}\r\n                    />\r\n                </div>\r\n            );\r\n\r\n            var imageStyle = this.state.showDetails ? \"image rotate\" : \"image\";\r\n\r\n            var heading = (\r\n                <div className=\"heading\">\r\n                    <div className=\"title\">encounter</div>\r\n                    <img className={imageStyle} src={arrow} alt=\"arrow\" onClick={() => this.toggleDetails()} />\r\n                </div>\r\n            );\r\n\r\n            var content = (\r\n                <div>\r\n                    <div className=\"section\">\r\n                        <input type=\"text\" placeholder=\"encounter name\" value={this.props.selection.name} onChange={event => this.props.changeValue(\"name\", event.target.value)} />\r\n                    </div>\r\n                    <div style={{ display: this.state.showDetails ? \"\" : \"none\" }}>\r\n                        <div className=\"divider\"></div>\r\n                        {difficultySection}\r\n                    </div>\r\n                    <div className=\"divider\"></div>\r\n                    <div className=\"section\">\r\n                        <button onClick={() => this.props.addWave()}>add a new wave</button>\r\n                        <ConfirmButton text=\"delete encounter\" callback={() => this.props.removeEncounter()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            return (\r\n                <InfoCard getHeading={() => heading} getContent={() => content} />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    };\r\n}","import React from 'react';\r\n\r\nimport { Encounter } from '../../models/models';\r\n\r\ninterface Props {\r\n    encounter: Encounter;\r\n    selected: boolean;\r\n    setSelection: (encounter: Encounter) => void;\r\n}\r\n\r\nexport default class EncounterListItem extends React.Component<Props> {\r\n    render() {\r\n        try {\r\n            var slots = [];\r\n\r\n            this.props.encounter.slots.forEach(slot => {\r\n                var text = slot.monsterName || \"unnamed monster\";\r\n                if (slot.count > 1) {\r\n                    text += \" x\" + slot.count;\r\n                }\r\n                slots.push(<div key={slot.id} className=\"text\">{text}</div>);\r\n            });\r\n\r\n            if (slots.length === 0) {\r\n                slots.push(<div key=\"empty\" className=\"text\">no monsters</div>);\r\n            }\r\n\r\n            this.props.encounter.waves.forEach(wave => {\r\n                slots.push(<div key={\"name \" + wave.id} className=\"text subheading\">{wave.name || \"unnamed wave\"}</div>);\r\n                wave.slots.forEach(slot => {\r\n                    var text = slot.monsterName || \"unnamed monster\";\r\n                    if (slot.count > 1) {\r\n                        text += \" x\" + slot.count;\r\n                    }\r\n                    slots.push(<div key={slot.id} className=\"text\">{text}</div>);\r\n                });\r\n                if (slots.length === 0) {\r\n                    slots.push(<div key={\"empty \" + wave.id} className=\"text\">no monsters</div>);\r\n                }\r\n            });\r\n\r\n            return (\r\n                <div className={this.props.selected ? \"list-item selected\" : \"list-item\"} onClick={() => this.props.setSelection(this.props.encounter)}>\r\n                    <div className=\"heading\">{this.props.encounter.name || \"unnamed encounter\"}</div>\r\n                    {slots}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport Utils from '../../utils';\r\n\r\nimport { Encounter, EncounterSlot, MonsterGroup, Monster, Party, EncounterWave } from '../../models/models';\r\n\r\nimport MonsterCard from '../cards/monster-card';\r\nimport ErrorCard from '../cards/error-card';\r\nimport InfoCard from '../cards/info-card';\r\nimport FilterCard from '../cards/filter-card';\r\nimport WaveCard from '../cards/wave-card';\r\nimport CardGroup from '../panels/card-group';\r\nimport EncounterBuilderCard from '../cards/information/encounter-builder-card';\r\nimport EncounterCard from '../cards/encounter-card';\r\nimport EncounterListItem from '../list-items/encounter-list-item';\r\n\r\ninterface Props {\r\n    encounters: Encounter[];\r\n    selection: Encounter | null;\r\n    parties: Party[];\r\n    library: MonsterGroup[];\r\n    showHelp: boolean;\r\n    selectEncounter: (encounter: Encounter | null) => void;\r\n    addEncounter: () => void;\r\n    removeEncounter: () => void;\r\n    addEncounterSlot: (monster: Monster, waveID: string | null) => void;\r\n    removeEncounterSlot: (encounterSlot: EncounterSlot, waveID: string | null) => void;\r\n    addWave: () => void;\r\n    removeWave: (wave: EncounterWave) => void;\r\n    changeValue: (source: any, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, value: number) => void;\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n}\r\n\r\ninterface State {\r\n    filter: {\r\n        name: string,\r\n        challengeMin: number;\r\n        challengeMax: number;\r\n        category: string;\r\n        size: string;\r\n    };\r\n}\r\n\r\nexport default class EncounterBuilderScreen extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            filter: {\r\n                name: \"\",\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: \"all types\",\r\n                size: \"all sizes\"\r\n            }\r\n        };\r\n    }\r\n\r\n    inEncounter(monster: Monster) {\r\n        var result = false;\r\n\r\n        if (this.props.selection) {\r\n            var group = Utils.getMonsterGroup(monster, this.props.library);\r\n\r\n            this.props.selection.slots.forEach(slot => {\r\n                if ((slot.monsterGroupName === group.name) && (slot.monsterName === monster.name)) {\r\n                    result = true;\r\n                }\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    matchMonster(monster: Monster) {\r\n        if (monster.challenge < this.state.filter.challengeMin) {\r\n            return false;\r\n        }\r\n\r\n        if (monster.challenge > this.state.filter.challengeMax) {\r\n            return false;\r\n        }\r\n\r\n        if (this.state.filter.name !== \"\") {\r\n            if (!Utils.match(this.state.filter.name, monster.name)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.filter.category !== \"all types\") {\r\n            if (monster.category !== this.state.filter.category) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.filter.size !== \"all sizes\") {\r\n            if (monster.size !== this.state.filter.size) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    changeFilterValue(type: 'name' | 'challengeMin' | 'challengeMax' | 'category' | 'size', value: any) {\r\n        // eslint-disable-next-line\r\n        this.state.filter[type] = value;\r\n        this.setState({\r\n            filter: this.state.filter\r\n        });\r\n    }\r\n\r\n    nudgeFilterValue(type: 'challengeMin' | 'challengeMax', delta: number) {\r\n        var value = Utils.nudgeChallenge(this.state.filter[type], delta);\r\n        this.changeFilterValue(type, value);\r\n    }\r\n\r\n    resetFilter() {\r\n        this.setState({\r\n            filter: {\r\n                name: \"\",\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: \"all types\",\r\n                size: \"all sizes\"\r\n            }\r\n        });\r\n    }\r\n\r\n    getMonsterCards(slots: EncounterSlot[], waveID: string | null) {\r\n        var cards = [];\r\n\r\n        slots.forEach(slot => {\r\n            var monster = this.props.getMonster(slot.monsterName, slot.monsterGroupName);\r\n            if (monster) {\r\n                cards.push(\r\n                    <div className=\"column\" key={monster.id}>\r\n                        <MonsterCard\r\n                            combatant={monster}\r\n                            slot={slot}\r\n                            encounter={this.props.selection as Encounter}\r\n                            mode={\"view encounter\"}\r\n                            nudgeValue={(slot, type, delta) => this.props.nudgeValue(slot, type, delta)}\r\n                            removeEncounterSlot={slot => this.props.removeEncounterSlot(slot, waveID)}\r\n                        />\r\n                    </div>\r\n                );\r\n            } else {\r\n                var index = slots.indexOf(slot);\r\n                var error = \"unknown monster: \" + slot.monsterName + \" in group \" + slot.monsterGroupName;\r\n                cards.push(\r\n                    <div className=\"column\" key={index}>\r\n                        <ErrorCard\r\n                            getContent={() => <div className=\"section\">{error}</div>}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n        });\r\n\r\n        if (slots.length === 0) {\r\n            cards.push(\r\n                <div className=\"column\" key=\"empty\">\r\n                    <InfoCard getContent={() => <div className=\"section\">no monsters</div>} />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return cards;\r\n    }\r\n\r\n    getLibrarySection() {\r\n        if (!this.props.selection) {\r\n            return null;\r\n        }\r\n\r\n        var libraryCards = [];\r\n        libraryCards.push(\r\n            <div className=\"column\" key=\"filter\">\r\n                <FilterCard\r\n                    filter={this.state.filter}\r\n                    changeValue={(type, value) => this.changeFilterValue(type, value)}\r\n                    nudgeValue={(type, delta) => this.nudgeFilterValue(type, delta)}\r\n                    resetFilter={() => this.resetFilter()}\r\n                />\r\n            </div>\r\n        );\r\n\r\n        var monsters: Monster[] = [];\r\n        if (this.props.selection) {\r\n            this.props.library.forEach(group => {\r\n                group.monsters.forEach(monster => {\r\n                    if (this.matchMonster(monster)) {\r\n                        monsters.push(monster);\r\n                    }\r\n                });\r\n            });\r\n            monsters.sort((a, b) => {\r\n                if (a.name < b.name) return -1;\r\n                if (a.name > b.name) return 1;\r\n                return 0;\r\n            });\r\n        }\r\n        monsters.forEach(monster => {\r\n            libraryCards.push(\r\n                <div className=\"column\" key={monster.id}>\r\n                    <MonsterCard\r\n                        key={monster.id}\r\n                        combatant={monster}\r\n                        encounter={this.props.selection as Encounter}\r\n                        library={this.props.library}\r\n                        mode={\"view encounter\"}\r\n                        addEncounterSlot={(combatant, waveID) => this.props.addEncounterSlot(combatant, waveID)}\r\n                    />\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <CardGroup\r\n                heading=\"monster library\"\r\n                content={libraryCards}\r\n                showToggle={true}\r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        try {\r\n            var help = null;\r\n            if (this.props.showHelp) {\r\n                help = (\r\n                    <EncounterBuilderCard encounters={this.props.encounters} />\r\n                );\r\n            }\r\n\r\n            var encounters = [];\r\n            for (var n = 0; n !== this.props.encounters.length; ++n) {\r\n                var encounter = this.props.encounters[n];\r\n                encounters.push(\r\n                    <EncounterListItem\r\n                        key={encounter.id}\r\n                        encounter={encounter}\r\n                        selected={encounter === this.props.selection}\r\n                        setSelection={encounter => this.props.selectEncounter(encounter)}\r\n                    />\r\n                );\r\n            };\r\n\r\n            var encounterName = undefined;\r\n            var encounterCards = [];\r\n            var waves: JSX.Element[] = [];\r\n\r\n            if (this.props.selection) {\r\n                encounterName = this.props.selection.name || \"unnamed encounter\";\r\n\r\n                encounterCards.push(\r\n                    <div className=\"column\" key=\"info\">\r\n                        <EncounterCard\r\n                            selection={this.props.selection}\r\n                            parties={this.props.parties}\r\n                            changeValue={(type, value) => this.props.changeValue(this.props.selection, type, value)}\r\n                            addWave={() => this.props.addWave()}\r\n                            removeEncounter={() => this.props.removeEncounter()}\r\n                            getMonster={(monsterName, monsterGroupName) => this.props.getMonster(monsterName, monsterGroupName)}\r\n                        />\r\n                    </div>\r\n                );\r\n\r\n                this.getMonsterCards(this.props.selection.slots, null)\r\n                    .forEach(card => encounterCards.push(card));\r\n                    \r\n                waves = this.props.selection.waves.map(wave => {\r\n                    var waveCards = [];\r\n                    waveCards.push(\r\n                        <div className=\"column\" key=\"info\">\r\n                            <WaveCard\r\n                                wave={wave}\r\n                                removeWave={wave => this.props.removeWave(wave)}\r\n                                changeValue={(wave, field, value) => this.props.changeValue(wave, field, value)}\r\n                            />\r\n                        </div>\r\n                    );\r\n\r\n                    this.getMonsterCards(wave.slots, wave.id)\r\n                        .forEach(card => waveCards.push(card));\r\n\r\n                    return (\r\n                        <CardGroup\r\n                            key={wave.id}\r\n                            heading={wave.name || \"unnamed wave\"}\r\n                            content={waveCards}\r\n                            showToggle={true}\r\n                        />\r\n                    );\r\n                });\r\n            }\r\n\r\n            return (\r\n                <div className=\"encounter-builder row collapse\">\r\n                    <div className=\"columns small-4 medium-4 large-3 scrollable list-column\">\r\n                        {help}\r\n                        <button onClick={() => this.props.addEncounter()}>add a new encounter</button>\r\n                        {encounters}\r\n                    </div>\r\n                    <div className=\"columns small-8 medium-8 large-9 scrollable\">\r\n                        <CardGroup\r\n                            content={encounterCards}\r\n                            heading={encounterName}\r\n                            showClose={this.props.selection !== null}\r\n                            close={() => this.props.selectEncounter(null)}\r\n                        />\r\n                        {waves}\r\n                        {this.getLibrarySection()}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport { MapFolio } from '../../../models/models';\r\n\r\nimport InfoCard from '../info-card';\r\n\r\ninterface Props {\r\n    mapFolios: MapFolio[];\r\n}\r\n\r\nexport default class MapFoliosCard extends React.Component<Props> {\r\n    render() {\r\n        try {\r\n            var action: JSX.Element | null = null;\r\n            if (this.props.mapFolios.length === 0) {\r\n                action = (\r\n                    <div className=\"section\">to start a new folio, press the button below</div>\r\n                );\r\n            } else {\r\n                action = (\r\n                    <div className=\"section\">select a map folio from the list to see the maps it contains</div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <InfoCard\r\n                    getContent={() => (\r\n                        <div>\r\n                            <div className=\"section\">on this page you can set up folios containing tactical maps</div>\r\n                            <div className=\"section\">when you have created a map you can use it in encounters</div>\r\n                            <div className=\"divider\"></div>\r\n                            {action}\r\n                        </div>\r\n                    )}\r\n                />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    };\r\n}","import React from 'react';\r\n\r\nimport { MapFolio } from '../../models/models';\r\n\r\ninterface Props {\r\n    mapFolio: MapFolio;\r\n    selected: boolean;\r\n    setSelection: (mapFolio: MapFolio) => void;\r\n}\r\n\r\nexport default class MapFolioListItem extends React.Component<Props> {\r\n    render() {\r\n        try {\r\n            var maps = [];\r\n            for (var n = 0; n !== this.props.mapFolio.maps.length; ++n) {\r\n                var map = this.props.mapFolio.maps[n];\r\n                var name = map.name || \"unnamed map\";\r\n                maps.push(<div key={map.id} className=\"text\">{name}</div>);\r\n            }\r\n            if (maps.length === 0) {\r\n                maps.push(<div key=\"empty\" className=\"text\">no maps</div>);\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? \"list-item selected\" : \"list-item\"} onClick={() => this.props.setSelection(this.props.mapFolio)}>\r\n                    <div className=\"heading\">{this.props.mapFolio.name || \"unnamed folio\"}</div>\r\n                    {maps}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport { MapFolio } from '../../models/models';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport InfoCard from './info-card';\r\n\r\ninterface Props {\r\n    selection: MapFolio;\r\n    changeValue: (source: MapFolio, field: string, value: string) => void;\r\n    addMap: () => void;\r\n    removeMapFolio: () => void;\r\n}\r\n\r\nexport default class MapFolioCard extends React.Component<Props> {\r\n    render() {\r\n        try {\r\n            var heading = (\r\n                <div className=\"heading\">\r\n                    <div className=\"title\">map folio</div>\r\n                </div>\r\n            );\r\n\r\n            var content = (\r\n                <div>\r\n                    <div className=\"section\">\r\n                        <input type=\"text\" placeholder=\"folio name\" value={this.props.selection.name} onChange={event => this.props.changeValue(this.props.selection, \"name\", event.target.value)} />\r\n                    </div>\r\n                    <div className=\"divider\"></div>\r\n                    <div className=\"section\">\r\n                        <button onClick={() => this.props.addMap()}>add a new map</button>\r\n                        <ConfirmButton text=\"delete folio\" callback={() => this.props.removeMapFolio()} />\r\n                    </div>\r\n                </div>\r\n            )\r\n\r\n            return (\r\n                <InfoCard getHeading={() => heading} getContent={() => content} />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    };\r\n}","import React from 'react';\r\n\r\nimport { Combatant, Monster } from '../../models/models';\r\n\r\ninterface Props {\r\n    combatant: Combatant & Monster;\r\n}\r\n\r\nexport default class HitPointGauge extends React.Component<Props> {\r\n    render() {\r\n        try {\r\n            var hpCurrent = this.props.combatant.hp || 0;\r\n            var hpMax = this.props.combatant.hpMax + this.props.combatant.hpTemp;\r\n            var hpBloodied = this.props.combatant.hpMax / 2;\r\n            var hpWidth = 100 * Math.max(hpCurrent, 0) / hpMax;\r\n\r\n            var style = \"\";\r\n            if (hpCurrent >= this.props.combatant.hpMax) {\r\n                style = \"bar unhurt\";\r\n            } else if (hpCurrent <= hpBloodied) {\r\n                style = \"bar bloodied\";\r\n            } else {\r\n                style = \"bar injured\";\r\n            }\r\n\r\n            var hpTempBar = null;\r\n            if (this.props.combatant.hpTemp > 0) {\r\n                var hpTempWidth = 100 * Math.max(this.props.combatant.hpTemp, 0) / hpMax;\r\n                hpTempBar = <div className=\"bar temp\" style={{ width: hpTempWidth + \"%\" }}></div>\r\n            }\r\n\r\n            return (\r\n                <div className=\"hp-gauge\">\r\n                    <div className={style} style={{ width: hpWidth + \"%\" }}></div>\r\n                    {hpTempBar}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    };\r\n}","import React from 'react';\r\n\r\nimport HitPointGauge from './hit-point-gauge';\r\nimport { Combatant, MapItem, PC, Monster, Map } from '../../models/models';\r\n\r\ninterface Props {\r\n    map: Map;\r\n    mode: 'edit' | 'thumbnail' | 'combat';\r\n    combatants: ((Combatant & PC) | (Combatant & Monster))[];\r\n    showOverlay: boolean;\r\n    selectedItemID: string;\r\n    setSelectedItemID: (itemID: string | null) => void;\r\n    addMapTile: (x: number, y: number) => void;\r\n    gridSquareClicked: (x: number, y: number) => void;\r\n}\r\n\r\ninterface MapDimensions {\r\n    minX: number;\r\n    maxX: number;\r\n    minY: number;\r\n    maxY: number;\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\nexport default class MapPanel extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        combatants: null,\r\n        showOverlay: false,\r\n        selectedItemID: null,\r\n        setSelectedItemID: null,\r\n        addMapTile: null,\r\n        gridSquareClicked: null\r\n    };\r\n\r\n    getMapDimensions(border: number): MapDimensions | null {\r\n        var dimensions: MapDimensions | null = null;\r\n\r\n        this.props.map.items.filter(i => {\r\n            if (this.props.mode === \"edit\") {\r\n                return i.type === \"tile\";\r\n            }\r\n            return true;\r\n        }).forEach(i => {\r\n            if (!dimensions) {\r\n                dimensions = {\r\n                    minX: i.x,\r\n                    maxX: i.x + i.width - 1,\r\n                    minY: i.y,\r\n                    maxY: i.y + i.height - 1,\r\n                    width: 0,\r\n                    height: 0\r\n                };\r\n            } else {\r\n                dimensions.minX = Math.min(dimensions.minX, i.x);\r\n                dimensions.maxX = Math.max(dimensions.maxX, i.x + i.width - 1);\r\n                dimensions.minY = Math.min(dimensions.minY, i.y);\r\n                dimensions.maxY = Math.max(dimensions.maxY, i.y + i.height - 1);\r\n            }\r\n        });\r\n\r\n        if (!dimensions) {\r\n            // The map is blank\r\n            if (this.props.mode === 'thumbnail') {\r\n                return null;\r\n            }\r\n\r\n            dimensions = {\r\n                minX: 0,\r\n                maxX: 0,\r\n                minY: 0,\r\n                maxY: 0,\r\n                width: 0,\r\n                height: 0\r\n            };\r\n        }\r\n\r\n        // Apply the border\r\n        dimensions.minX -= border;\r\n        dimensions.maxX += border;\r\n        dimensions.minY -= border;\r\n        dimensions.maxY += border;\r\n\r\n        // Set width and height\r\n        dimensions.width = 1 + dimensions.maxX - dimensions.minX;\r\n        dimensions.height = 1 + dimensions.maxY - dimensions.minY;\r\n\r\n        return dimensions;\r\n    }\r\n\r\n    getSideLength(): number {\r\n        switch (this.props.mode) {\r\n            case \"thumbnail\":\r\n                return 5;\r\n            case \"edit\":\r\n            case \"combat\":\r\n                return 25;\r\n            default:\r\n                return 5;\r\n        }\r\n    }\r\n\r\n    getPosition(x: number, y: number, width: number, height: number, mapDimensions: MapDimensions): { left: string; top: string; width: string; height: string } {\r\n        var sideLength = this.getSideLength();\r\n\r\n        return {\r\n            left: \"calc(\" + sideLength + \"px * \" + (x - mapDimensions.minX) + \")\",\r\n            top: \"calc(\" + sideLength + \"px * \" + (y - mapDimensions.minY) + \")\",\r\n            width: \"calc((\" + sideLength + \"px * \" + width + \") + 1px)\",\r\n            height: \"calc((\" + sideLength + \"px * \" + height + \") + 1px)\"\r\n        };\r\n    }\r\n\r\n    render() {\r\n        try {\r\n            var border = (this.props.mode === \"edit\") ? 2 : 0;\r\n            var mapDimensions = this.getMapDimensions(border);\r\n            if (!mapDimensions) {\r\n                return (\r\n                    <div>(blank map)</div>\r\n                );\r\n            }\r\n\r\n            // Draw the grid squares\r\n            var grid = [];\r\n            if (this.props.mode === \"edit\") {\r\n                for (var y = mapDimensions.minY; y !== mapDimensions.maxY + 1; ++y) {\r\n                    for (var x = mapDimensions.minX; x !== mapDimensions.maxX + 1; ++x) {\r\n                        var pos = this.getPosition(x, y, 1, 1, mapDimensions);\r\n                        grid.push(\r\n                            <GridSquare\r\n                                key={x + \",\" + y}\r\n                                x={x}\r\n                                y={y}\r\n                                position={pos}\r\n                                onClick={() => this.props.setSelectedItemID(null)}\r\n                                onDoubleClick={(x, y) => this.props.addMapTile(x, y)}\r\n                            />\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Draw the map tiles\r\n            var tiles = this.props.map.items\r\n                .filter(i => i.type === \"tile\")\r\n                .map(i => {\r\n                    var pos = this.getPosition(i.x, i.y, i.width, i.height, mapDimensions as MapDimensions);\r\n                    return (\r\n                        <MapTile\r\n                            key={i.id}\r\n                            tile={i}\r\n                            position={pos}\r\n                            selectable={this.props.mode === \"edit\"}\r\n                            selected={this.props.selectedItemID === i.id}\r\n                            thumbnail={this.props.mode === \"thumbnail\"}\r\n                            select={id => this.props.mode === \"edit\" ? this.props.setSelectedItemID(id) : null}\r\n                        />\r\n                    );\r\n                });\r\n\r\n            // Draw the tokens\r\n            var tokens: JSX.Element[] = [];\r\n            if (this.props.mode !== \"edit\") {\r\n                tokens = this.props.map.items\r\n                    .filter(i => (i.type === \"monster\") || (i.type === \"pc\"))\r\n                    .map(i => {\r\n                        var pos = this.getPosition(i.x, i.y, i.width, i.height, mapDimensions as MapDimensions);\r\n                        var combatant = this.props.combatants.find(c => c.id === i.id);\r\n                        if (combatant) {\r\n                            return (\r\n                                <MapToken\r\n                                    key={i.id}\r\n                                    token={i}\r\n                                    combatant={combatant}\r\n                                    position={pos}\r\n                                    simple={this.props.mode === \"thumbnail\"}\r\n                                    selectable={this.props.mode === \"combat\"}\r\n                                    selected={this.props.selectedItemID ===  i.id}\r\n                                    select={id => this.props.setSelectedItemID(id)}\r\n                                />\r\n                            );\r\n                        }\r\n\r\n                        return null;\r\n                    })\r\n                    .filter(mt => mt !== null) as JSX.Element[];\r\n            }\r\n\r\n            // Draw the drag overlay\r\n            var dragOverlay = [];\r\n            if (this.props.showOverlay) {\r\n                for (var yOver = mapDimensions.minY; yOver !== mapDimensions.maxY + 1; ++yOver) {\r\n                    for (var xOver = mapDimensions.minX; xOver !== mapDimensions.maxX + 1; ++xOver) {\r\n                        var posOver = this.getPosition(xOver, yOver, 1, 1, mapDimensions);\r\n                        dragOverlay.push(\r\n                            <GridSquare\r\n                                key={xOver + \",\" + yOver}\r\n                                x={xOver}\r\n                                y={yOver}\r\n                                position={posOver}\r\n                                overlay={true}\r\n                                onClick={(x, y) => this.props.gridSquareClicked(x, y)}\r\n                            />\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n\r\n            var style = \"map-panel \" + this.props.mode;\r\n            return (\r\n                <div className={style} onClick={() => this.props.setSelectedItemID(null)}>\r\n                    <div className=\"grid\" style={{ height: ((this.getSideLength() * mapDimensions.height) + 1) + \"px\" }}>\r\n                        {grid}\r\n                        {tiles}\r\n                        {tokens}\r\n                        {dragOverlay}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface GridSquareProps {\r\n    x: number;\r\n    y: number;\r\n    position: { left: string; top: string; width: string; height: string };\r\n    overlay: boolean;\r\n    onClick: (x: number, y: number) => void;\r\n    onDoubleClick: (x: number, y: number) => void;\r\n}\r\n\r\nclass GridSquare extends React.Component<GridSquareProps> {\r\n    public static defaultProps = {\r\n        overlay: false,\r\n        onDoubleClick: null\r\n    };\r\n\r\n    click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (this.props.onClick) {\r\n            this.props.onClick(this.props.x, this.props.y);\r\n        }\r\n    }\r\n\r\n    doubleClick(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (this.props.onDoubleClick) {\r\n            this.props.onDoubleClick(this.props.x, this.props.y);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        var style = \"grid-square\";\r\n        if (this.props.overlay) {\r\n            style += \" grid-overlay\";\r\n        }\r\n\r\n        return (\r\n            <div\r\n                className={style}\r\n                style={this.props.position}\r\n                onClick={e => this.click(e)}\r\n                onDoubleClick={e => this.doubleClick(e)}\r\n            >\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface MapTileProps {\r\n    tile: MapItem;\r\n    position: { left: string; top: string; width: string; height: string };\r\n    thumbnail: boolean;\r\n    selectable: boolean;\r\n    selected: boolean;\r\n    select: (tileID: string) => void;\r\n}\r\n\r\nclass MapTile extends React.Component<MapTileProps> {\r\n    select(e: React.MouseEvent) {\r\n        if (this.props.selectable) {\r\n            e.stopPropagation();\r\n            this.props.select(this.props.tile.id);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        var style = \"tile \" + this.props.tile.terrain;\r\n        if (this.props.selected) {\r\n            style += \" selected\";\r\n        }\r\n        if (this.props.thumbnail) {\r\n            style += \" thumbnail\";\r\n        }\r\n\r\n        return (\r\n            <div\r\n                className={style}\r\n                style={this.props.position}\r\n                onClick={e => this.select(e)}>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface MapTokenProps {\r\n    token: MapItem;\r\n    combatant: (Combatant & PC) | (Combatant & Monster);\r\n    position: { left: string; top: string; width: string; height: string };\r\n    simple: boolean;\r\n    selectable: boolean;\r\n    selected: boolean;\r\n    select: (tokenID: string) => void;\r\n}\r\n\r\nclass MapToken extends React.Component<MapTokenProps> {\r\n    select(e: React.MouseEvent) {\r\n        if (this.props.selectable) {\r\n            e.stopPropagation();\r\n            this.props.select(this.props.token.id);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        var style = \"token \" + this.props.token.type;\r\n        if (this.props.selected) {\r\n            style += \" selected\";\r\n        }\r\n        if (this.props.combatant.current) {\r\n            style += \" current\";\r\n        }\r\n\r\n        var initials = null;\r\n        var hpGauge = null;\r\n        var altitudeBadge = null;\r\n        var conditionsBadge = null;\r\n        if (!this.props.simple) {\r\n            var name = this.props.combatant.displayName || this.props.combatant.name;\r\n            initials = (\r\n                <div className=\"initials\">{name.split(' ').map(s => s[0])}</div>\r\n            );\r\n\r\n            if (this.props.combatant.type === \"monster\") {\r\n                hpGauge = (\r\n                    <HitPointGauge combatant={this.props.combatant as Combatant & Monster} />\r\n                );\r\n            }\r\n\r\n            if (this.props.combatant.altitude > 0) {\r\n                altitudeBadge = (\r\n                    <div className=\"badge altitude\">&#9206;</div>\r\n                );\r\n            }\r\n\r\n            if (this.props.combatant.altitude < 0) {\r\n                altitudeBadge = (\r\n                    <div className=\"badge altitude\">&#9207;</div>\r\n                );\r\n            }\r\n\r\n            if ((this.props.combatant.conditions) && (this.props.combatant.conditions.length > 0)) {\r\n                conditionsBadge = (\r\n                    <div className=\"badge\">&#9670;</div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div\r\n                title={this.props.combatant.displayName || this.props.combatant.name}\r\n                className={style}\r\n                style={this.props.position}\r\n                onClick={e => this.select(e)}\r\n            >\r\n                {initials}\r\n                {hpGauge}\r\n                {altitudeBadge}\r\n                {conditionsBadge}\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nimport MapPanel from '../panels/map-panel';\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport { Map } from '../../models/models';\r\n\r\ninterface Props {\r\n    map: Map;\r\n    changeValue: (map: Map, field: string, value: string) => void,\r\n    editMap: (map: Map) => void;\r\n    removeMap: (map: Map) => void;\r\n}\r\n\r\nexport default class MapCard extends React.Component<Props> {\r\n    render() {\r\n        try {\r\n            return (\r\n                <div className=\"card map\">\r\n                    <div className=\"heading\">\r\n                        <div className=\"title\">{this.props.map.name || \"unnamed map\"}</div>\r\n                    </div>\r\n                    <div className=\"card-content\">\r\n                        <div className=\"section\">\r\n                            <input type=\"text\" placeholder=\"map name\" value={this.props.map.name} onChange={event => this.props.changeValue(this.props.map, \"name\", event.target.value)} />\r\n                        </div>\r\n                        <div className=\"divider\"></div>\r\n                        <div className=\"section centered\">\r\n                            <MapPanel\r\n                                map={this.props.map}\r\n                                mode=\"thumbnail\"\r\n                            />\r\n                        </div>\r\n                        <div className=\"divider\"></div>\r\n                        <div className=\"section\">\r\n                            <button onClick={() => this.props.editMap(this.props.map)}>edit map</button>\r\n                            <ConfirmButton text=\"delete map\" callback={() => this.props.removeMap(this.props.map)} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    };\r\n}","import React from 'react';\r\n\r\nimport { MapFolio, Map } from '../../models/models';\r\n\r\nimport MapFoliosCard from '../cards/information/map-folios-card';\r\nimport MapFolioListItem from '../list-items/map-folio-list-item';\r\nimport MapFolioCard from '../cards/map-folio-card';\r\nimport MapCard from '../cards/map-card';\r\nimport InfoCard from '../cards/info-card';\r\nimport CardGroup from '../panels/card-group';\r\n\r\ninterface Props {\r\n    mapFolios: MapFolio[];\r\n    selection: MapFolio | null;\r\n    showHelp: boolean;\r\n    selectMapFolio: (mapFolio: MapFolio | null) => void;\r\n    addMapFolio: () => void;\r\n    removeMapFolio: () => void;\r\n    addMap: () => void;\r\n    editMap: (map: Map) => void;\r\n    removeMap: (map: Map) => void;\r\n    changeValue: (source: {}, field: string, value: any) => void;\r\n}\r\n\r\nexport default class MapFoliosScreen extends React.Component<Props> {\r\n    render() {\r\n        try {\r\n            var help = null;\r\n            if (this.props.showHelp) {\r\n                help = (\r\n                    <MapFoliosCard mapFolios={this.props.mapFolios} />\r\n                );\r\n            }\r\n\r\n            var folios = [];\r\n            for (var n = 0; n !== this.props.mapFolios.length; ++n) {\r\n                var mapFolio = this.props.mapFolios[n];\r\n                folios.push(\r\n                    <MapFolioListItem\r\n                        key={mapFolio.id}\r\n                        mapFolio={mapFolio}\r\n                        selected={mapFolio === this.props.selection}\r\n                        setSelection={mapFolio => this.props.selectMapFolio(mapFolio)}\r\n                    />\r\n                );\r\n            };\r\n\r\n            var folio = null;\r\n            if (this.props.selection) {\r\n                var folioCards = [];\r\n\r\n                folioCards.push(\r\n                    <div className=\"column\" key=\"info\">\r\n                        <MapFolioCard\r\n                            selection={this.props.selection}\r\n                            addMap={() => this.props.addMap()}\r\n                            removeMapFolio={() => this.props.removeMapFolio()}\r\n                            changeValue={(source, field, value) => this.props.changeValue(source, field, value)}\r\n                        />\r\n                    </div>\r\n                );\r\n\r\n                this.props.selection.maps.forEach(map => {\r\n                    folioCards.push(\r\n                        <div className=\"column\" key={map.id}>\r\n                            <MapCard\r\n                                map={map}\r\n                                editMap={map => this.props.editMap(map)}\r\n                                removeMap={map => this.props.removeMap(map)}\r\n                                changeValue={(source, type, value) => this.props.changeValue(source, type, value)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                if (this.props.selection.maps.length === 0) {\r\n                    folioCards.push(\r\n                        <div className=\"column\" key=\"empty\">\r\n                            <InfoCard getContent={() => <div className=\"section\">no maps</div>} />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                folio = (\r\n                    <div>\r\n                        <CardGroup\r\n                            content={folioCards}\r\n                            heading={this.props.selection.name || \"unnamed folio\"}\r\n                            showClose={this.props.selection !== null}\r\n                            close={() => this.props.selectMapFolio(null)}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className=\"map-builder row collapse\">\r\n                    <div className=\"columns small-4 medium-4 large-3 scrollable list-column\">\r\n                        {help}\r\n                        <button onClick={() => this.props.addMapFolio()}>add a new map folio</button>\r\n                        {folios}\r\n                    </div>\r\n                    <div className=\"columns small-8 medium-8 large-9 scrollable\">\r\n                        {folio}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport InfoCard from '../info-card';\r\n\r\nexport default class CombatManagerCard extends React.Component {\r\n    render() {\r\n        return (\r\n            <InfoCard\r\n                getContent={() => (\r\n                    <div>\r\n                        <div className=\"section\">here you can run a combat encounter by specifying a party and an encounter</div>\r\n                        <div className=\"divider\"></div>\r\n                        <div className=\"section\">below you will see a list of encounters that you have paused</div>\r\n                        <div className=\"section\">you can resume a paused combat by selecting it</div>\r\n                    </div>\r\n                )}\r\n            />\r\n        );\r\n    };\r\n}","import React from 'react';\r\n\r\nimport { Combat } from '../../models/models';\r\n\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    combat: Combat;\r\n    selected: boolean;\r\n    setSelection: (combat: Combat) => void;\r\n}\r\n\r\nexport default class CombatListItem extends React.Component<Props> {\r\n    render() {\r\n        try {\r\n            var map = null;\r\n            if (this.props.combat.map) {\r\n                map = (\r\n                    <MapPanel\r\n                        map={this.props.combat.map}\r\n                        mode=\"thumbnail\"\r\n                        combatants={this.props.combat.combatants}\r\n                    />\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? \"list-item selected\" : \"list-item\"} onClick={() => this.props.setSelection(this.props.combat)}>\r\n                    <div className=\"heading\">{this.props.combat.name || \"unnamed combat\"}</div>\r\n                    <div className=\"text\">paused at {this.props.combat.timestamp}</div>\r\n                    {map}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport Utils from '../../utils';\r\n\r\nimport { Combat, Combatant, Monster, PC, Notification, Condition, ConditionDurationSaves } from '../../models/models';\r\n\r\nimport PCCard from '../cards/pc-card';\r\nimport MonsterCard from '../cards/monster-card';\r\nimport InfoCard from '../cards/info-card';\r\nimport MapPanel from '../panels/map-panel';\r\nimport CardGroup from '../panels/card-group';\r\nimport CombatManagerCard from '../cards/information/combat-manager-card';\r\nimport CombatListItem from '../list-items/combat-list-item';\r\nimport Spin from '../controls/spin';\r\nimport HitPointGauge from '../panels/hit-point-gauge';\r\n\r\ninterface Props {\r\n    combats: Combat[];\r\n    combat: Combat | null;\r\n    showHelp: boolean;\r\n    createCombat: () => void;\r\n    resumeEncounter: (combat: Combat) => void;\r\n    close: (notification: Notification, removeCondition: boolean) => void;\r\n    mapAdd: (combatant: (Combatant & PC) | (Combatant & Monster), x: number, y: number) => void;\r\n    makeCurrent: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    makeActive: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    makeDefeated: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    removeCombatant: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    addCondition: (combatant: Combatant & Monster) => void;\r\n    editCondition: (combatant: Combatant & Monster, condition: Condition) => void;\r\n    removeCondition: (combatant: Combatant & Monster, conditionID: string) => void;\r\n    mapMove: (combatant: (Combatant & PC) | (Combatant & Monster), dir: string) => void;\r\n    mapRemove: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    endTurn: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    changeHP: (combatant: Combatant & Monster, hp: number, temp: number) => void;\r\n    changeValue: (source: {}, type: string, value: any) => void;\r\n    nudgeValue: (source: {}, type: string, delta: number) => void;\r\n}\r\n\r\ninterface State {\r\n    selectedTokenID: string | null;\r\n    addingToMapID: string | null;\r\n}\r\n\r\nexport default class CombatManagerScreen extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            selectedTokenID: null,  // The ID of the combatant that's selected\r\n            addingToMapID: null     // The ID of the combatant we're adding to the map\r\n        };\r\n    }\r\n\r\n    setSelectedTokenID(id: string | null) {\r\n        this.setState({\r\n            selectedTokenID: id\r\n        });\r\n    }\r\n\r\n    setAddingToMapID(id: string | null) {\r\n        this.setState({\r\n            addingToMapID: id\r\n        });\r\n    }\r\n\r\n    createCard(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        var mode = \"combat\";\r\n        if (this.props.combat && this.props.combat.map) {\r\n            mode += \" tactical\";\r\n            var onMap = this.props.combat.map.items.find(i => i.id === combatant.id);\r\n            mode += onMap ? \" on-map\" : \" off-map\";\r\n        }\r\n\r\n        switch (combatant.type) {\r\n            case \"pc\":\r\n                return (\r\n                    <PCCard\r\n                        key=\"selected\"\r\n                        combatant={combatant as Combatant & PC}\r\n                        mode={mode}\r\n                        changeValue={(combatant, type, value) => this.props.changeValue(combatant, type, value)}\r\n                        nudgeValue={(combatant, type, delta) => this.props.nudgeValue(combatant, type, delta)}\r\n                        makeCurrent={combatant => this.props.makeCurrent(combatant as Combatant & PC)}\r\n                        makeActive={combatant => this.props.makeActive(combatant as Combatant & PC)}\r\n                        makeDefeated={combatant => this.props.makeDefeated(combatant as Combatant & PC)}\r\n                        removeCombatant={combatant => this.props.removeCombatant(combatant as Combatant & PC)}\r\n                        mapAdd={combatant => this.setAddingToMapID(combatant.id)}\r\n                        mapMove={(combatant, dir) => this.props.mapMove(combatant as Combatant & PC, dir)}\r\n                        mapRemove={combatant => this.props.mapRemove(combatant as Combatant & PC)}\r\n                        endTurn={combatant => this.props.endTurn(combatant as Combatant & PC)}\r\n                    />\r\n                );\r\n            case \"monster\":\r\n                return (\r\n                    <MonsterCard\r\n                        key=\"selected\"\r\n                        combatant={combatant as Combatant & Monster}\r\n                        mode={mode}\r\n                        combat={this.props.combat as Combat}\r\n                        changeValue={(combatant, type, value) => this.props.changeValue(combatant, type, value)}\r\n                        nudgeValue={(combatant, type, delta) => this.props.nudgeValue(combatant, type, delta)}\r\n                        makeCurrent={combatant => this.props.makeCurrent(combatant as Combatant & Monster)}\r\n                        makeActive={combatant => this.props.makeActive(combatant as Combatant & Monster)}\r\n                        makeDefeated={combatant => this.props.makeDefeated(combatant as Combatant & Monster)}\r\n                        removeCombatant={combatant => this.props.removeCombatant(combatant as Combatant & Monster)}\r\n                        addCondition={(combatant) => this.props.addCondition(combatant as Combatant & Monster)}\r\n                        editCondition={(combatant, condition) => this.props.editCondition(combatant as Combatant & Monster, condition)}\r\n                        removeCondition={(combatant, conditionID) => this.props.removeCondition(combatant as Combatant & Monster, conditionID)}\r\n                        nudgeConditionValue={(condition, type, delta) => this.props.nudgeValue(condition, type, delta)}\r\n                        mapAdd={combatant => this.setAddingToMapID(combatant.id)}\r\n                        mapMove={(combatant, dir) => this.props.mapMove(combatant as Combatant & Monster, dir)}\r\n                        mapRemove={combatant => this.props.mapRemove(combatant as Combatant & Monster)}\r\n                        endTurn={(combatant) => this.props.endTurn(combatant as Combatant & Monster)}\r\n                        changeHP={(combatant, hp, temp) => this.props.changeHP(combatant as Combatant & Monster, hp, temp)}\r\n                    />\r\n                );\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    addCombatantToMap(x: number, y: number) {\r\n        if (this.props.combat) {\r\n            var combatant = this.props.combat.combatants.find(c => c.id === this.state.addingToMapID);\r\n            if (combatant) {\r\n                this.props.mapAdd(combatant, x, y);\r\n            }\r\n            this.setAddingToMapID(null);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        try {\r\n            var leftPaneContent = null;\r\n            var centrePaneContent = null;\r\n            var rightPaneContent = null;\r\n\r\n            if (this.props.combat) {\r\n                var current: JSX.Element[] = [];\r\n                var pending: JSX.Element[] = [];\r\n                var active: JSX.Element[] = [];\r\n                var defeated: JSX.Element[] = [];\r\n\r\n                this.props.combat.combatants.forEach(combatant => {\r\n                    if (combatant.current) {\r\n                        current.push(\r\n                            <div key={combatant.id}>\r\n                                {this.createCard(combatant)}\r\n                            </div>\r\n                        );\r\n                    }\r\n                    if (combatant.pending && !combatant.active && !combatant.defeated) {\r\n                        pending.push(\r\n                            <PendingCombatantRow\r\n                                key={combatant.id}\r\n                                combatant={combatant}\r\n                                select={combatant => this.setSelectedTokenID(combatant.id)}\r\n                                selected={combatant.id === this.state.selectedTokenID}\r\n                                nudgeValue={(combatant, type, delta) => this.props.nudgeValue(combatant, type, delta)}\r\n                                makeActive={combatant => this.props.makeActive(combatant)}\r\n                            />\r\n                        );\r\n                    }\r\n                    if (!combatant.pending && combatant.active && !combatant.defeated) {\r\n                        active.push(\r\n                            <CombatantRow\r\n                                key={combatant.id}\r\n                                combatant={combatant}\r\n                                combat={this.props.combat as Combat}\r\n                                select={combatant => this.setSelectedTokenID(combatant.id)}\r\n                                selected={combatant.id === this.state.selectedTokenID}\r\n                            />\r\n                        );\r\n                    }\r\n                    if (!combatant.pending && !combatant.active && combatant.defeated) {\r\n                        defeated.push(\r\n                            <CombatantRow\r\n                                key={combatant.id}\r\n                                combatant={combatant}\r\n                                combat={this.props.combat as Combat}\r\n                                select={combatant => this.setSelectedTokenID(combatant.id)}\r\n                                selected={combatant.id === this.state.selectedTokenID}\r\n                            />\r\n                        );\r\n                    }\r\n                });\r\n\r\n                if (this.props.showHelp && (pending.length !== 0)) {\r\n                    var pendingHelp = (\r\n                        <div key=\"pending-help\">\r\n                            <InfoCard\r\n                                getContent={() =>\r\n                                    <div>\r\n                                        <div className=\"section\">these combatants are not yet part of the encounter</div>\r\n                                        <div className=\"section\">set initiative on each of them, then add them to the encounter</div>\r\n                                    </div>\r\n                                }\r\n                            />\r\n                        </div>\r\n                    );\r\n                    pending = [pendingHelp].concat(pending);\r\n                }\r\n\r\n                if (this.props.showHelp && (current.length === 0)) {\r\n                    var activeHelp = (\r\n                        <div key=\"active-help\">\r\n                            <InfoCard\r\n                                getContent={() =>\r\n                                    <div>\r\n                                        <div className=\"section\">these are the combatants taking part in this encounter; you can select them to see their stat blocks (on the right)</div>\r\n                                        <div className=\"section\">to begin the encounter, select the first combatant and press the <b>start turn</b> button on their stat block</div>\r\n                                    </div>\r\n                                }\r\n                            />\r\n                        </div>\r\n                    );\r\n                    active = [activeHelp].concat(active);\r\n                }\r\n\r\n                if (current.length === 0) {\r\n                    current.push(\r\n                        <InfoCard\r\n                            key=\"current\"\r\n                            getContent={() =>\r\n                                <div className=\"section\">the current initiative holder will be displayed here</div>\r\n                            }\r\n                        />\r\n                    );\r\n                }\r\n\r\n                var notifications = this.props.combat.notifications.map(n =>\r\n                    <NotificationPanel\r\n                        key={n.id}\r\n                        notification={n}\r\n                        close={(notification, removeCondition) => this.props.close(notification, removeCondition)}\r\n                    />\r\n                );\r\n\r\n                var mapSection = null;\r\n                if (this.props.combat.map) {\r\n                    mapSection = (\r\n                        <MapPanel\r\n                            map={this.props.combat.map}\r\n                            mode=\"combat\"\r\n                            showOverlay={this.state.addingToMapID !== null}\r\n                            combatants={this.props.combat.combatants}\r\n                            selectedItemID={this.state.selectedTokenID ? this.state.selectedTokenID : undefined}\r\n                            setSelectedItemID={id => {\r\n                                if (id) {\r\n                                    this.setSelectedTokenID(id);\r\n                                }\r\n                            }}\r\n                            gridSquareClicked={(x, y) => this.addCombatantToMap(x, y)}\r\n                        />\r\n                    );\r\n                }\r\n\r\n                var selectedCombatant = null;\r\n                if (this.state.selectedTokenID) {\r\n                    var combatant = this.props.combat.combatants.find(c => c.id === this.state.selectedTokenID);\r\n                    if (combatant && !combatant.current) {\r\n                        selectedCombatant = this.createCard(combatant);\r\n                    }\r\n                }\r\n                if (!selectedCombatant) {\r\n                    selectedCombatant = (\r\n                        <InfoCard\r\n                            key=\"selected\"\r\n                            getContent={() =>\r\n                                <div className=\"section\">select a pc or monster to see its details here</div>\r\n                            }\r\n                        />\r\n                    );\r\n                }\r\n\r\n                leftPaneContent = (\r\n                    <div className=\"combat-left\">\r\n                        <CardGroup\r\n                            heading=\"initiative holder\"\r\n                            content={current}\r\n                        />\r\n                    </div>\r\n                );\r\n\r\n                centrePaneContent = (\r\n                    <div className=\"combat-centre\">\r\n                        {notifications}\r\n                        <CardGroup\r\n                            heading=\"waiting for intiative to be entered\"\r\n                            content={pending}\r\n                            hidden={pending.length === 0}\r\n                            showToggle={true}\r\n                        />\r\n                        {mapSection}\r\n                        <CardGroup\r\n                            heading=\"combatants in the encounter\"\r\n                            content={active}\r\n                            hidden={active.length === 0}\r\n                        />\r\n                        <CardGroup\r\n                            heading=\"defeated\"\r\n                            content={defeated}\r\n                            hidden={defeated.length === 0}\r\n                            showToggle={true}\r\n                        />\r\n                    </div>\r\n                );\r\n\r\n                rightPaneContent = (\r\n                    <div className=\"combat-right\">\r\n                        <CardGroup\r\n                            heading=\"selected combatant\"\r\n                            content={[selectedCombatant]}\r\n                        />\r\n                    </div>\r\n                );\r\n            } else {\r\n                var help = null;\r\n                if (this.props.showHelp) {\r\n                    help = (\r\n                        <CombatManagerCard />\r\n                    );\r\n                }\r\n\r\n                var combats: JSX.Element[] = [];\r\n                this.props.combats.forEach(combat => {\r\n                    combats.push(\r\n                        <CombatListItem\r\n                            key={combat.id}\r\n                            combat={combat}\r\n                            selected={false}\r\n                            setSelection={combat => this.props.resumeEncounter(combat)}\r\n                        />\r\n                    );\r\n                });\r\n\r\n                leftPaneContent = (\r\n                    <div className=\"combat-left\">\r\n                        {help}\r\n                        <button onClick={() => this.props.createCombat()}>start a new combat</button>\r\n                        {combats}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className=\"combat-manager row collapse\">\r\n                    <div className=\"columns small-4 medium-4 large-3 scrollable list-column\">\r\n                        {leftPaneContent}\r\n                    </div>\r\n                    <div className=\"columns small-4 medium-4 large-6 scrollable list-column\">\r\n                        {centrePaneContent}\r\n                    </div>\r\n                    <div className=\"columns small-4 medium-4 large-3 scrollable list-column\">\r\n                        {rightPaneContent}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface NotificationProps {\r\n    notification: Notification;\r\n    close: (notification: Notification, removeCondition: boolean) => void;\r\n}\r\n\r\nclass NotificationPanel extends React.Component<NotificationProps> {\r\n    saveSuccess(notification: Notification) {\r\n        // Reduce save by 1\r\n        var condition = this.props.notification.condition as Condition;\r\n        if (condition && condition.duration) {\r\n            if ((condition.duration.type === 'saves') || (condition.duration.type === 'rounds')) {\r\n                condition.duration.count -= 1;\r\n                if (condition.duration.count === 0) {\r\n                    // Remove the condition\r\n                    this.close(notification, true);\r\n                } else {\r\n                    this.close(notification);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    close(notification: Notification, removeCondition = false) {\r\n        this.props.close(notification, removeCondition);\r\n    }\r\n\r\n    render() {\r\n        var combatant = this.props.notification.combatant as (Combatant & Monster);\r\n        var condition = this.props.notification.condition as Condition;\r\n\r\n        var name = combatant.displayName || combatant.name || \"unnamed monster\";\r\n        switch (this.props.notification.type) {\r\n            case \"condition-save\":\r\n                var duration = condition.duration as ConditionDurationSaves;\r\n                return (\r\n                    <div key={this.props.notification.id} className=\"notification\">\r\n                        <div className=\"text\">\r\n                            {name} must make a {duration.saveType} save against dc {duration.saveDC}\r\n                        </div>\r\n                        <div className=\"buttons\">\r\n                            <button onClick={() => this.saveSuccess(this.props.notification)}>success</button>\r\n                            <button onClick={() => this.close(this.props.notification)}>ok</button>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            case \"condition-end\":\r\n                return (\r\n                    <div key={this.props.notification.id} className=\"notification\">\r\n                        <div className=\"text\">\r\n                            {name} is no longer affected by condition {condition.name}\r\n                        </div>\r\n                        <div className=\"buttons\">\r\n                            <button onClick={() => this.close(this.props.notification)}>ok</button>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface PendingCombatantRowProps {\r\n    combatant: (Combatant & PC) | (Combatant & Monster);\r\n    selected: boolean;\r\n    select: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    nudgeValue: (combatant: (Combatant & PC) | (Combatant & Monster), field: string, delta: number) => void;\r\n    makeActive: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n}\r\n\r\nclass PendingCombatantRow extends React.Component<PendingCombatantRowProps> {\r\n    getInformationText() {\r\n        if (this.props.selected) {\r\n            return \"selected\";\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    onClick(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (this.props.select) {\r\n            this.props.select(this.props.combatant);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        var style = \"combatant-row \" + this.props.combatant.type;\r\n        if (this.props.combatant.current || this.props.selected) {\r\n            style += \" highlight\";\r\n        }\r\n\r\n        return (\r\n            <div className={style} onClick={e => this.onClick(e)}>\r\n                <div className=\"name\">\r\n                    {this.props.combatant.displayName || this.props.combatant.name || \"combatant\"}\r\n                    <span className=\"info\">{this.getInformationText()}</span>\r\n                </div>\r\n                <div className=\"content\">\r\n                    <Spin\r\n                        source={this.props.combatant}\r\n                        name=\"initiative\"\r\n                        label=\"initiative\"\r\n                        nudgeValue={delta => this.props.nudgeValue(this.props.combatant, \"initiative\", delta)}\r\n                    />\r\n                    <button onClick={e => { e.stopPropagation(); this.props.makeActive(this.props.combatant); }}>add to encounter</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface CombatantRowProps {\r\n    combatant: (Combatant & PC) | (Combatant & Monster);\r\n    combat: Combat;\r\n    selected: boolean;\r\n    select: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n}\r\n\r\nclass CombatantRow extends React.Component<CombatantRowProps> {\r\n    getInformationText() {\r\n        if (this.props.combatant.current) {\r\n            return \"current turn\";\r\n        }\r\n\r\n        if (this.props.selected) {\r\n            return \"selected\";\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    onClick(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (this.props.select) {\r\n            this.props.select(this.props.combatant);\r\n        }\r\n    }\r\n\r\n    getContentPC(pc: Combatant & PC, notes: JSX.Element[]) {\r\n        return (\r\n            <div className=\"content\">\r\n                <div className=\"section key-stats\">\r\n                    <div className=\"key-stat\">\r\n                        <div className=\"stat-value\">{pc.initiative}</div>\r\n                        <div className=\"stat-label\">init</div>\r\n                    </div>\r\n                    <div className=\"key-stat wide\">\r\n                        <div className=\"stat-value\">{pc.player ? pc.player : \"-\"}</div>\r\n                    </div>\r\n                </div>\r\n                {notes}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    getContentMonster(monster: Combatant & Monster, notes: JSX.Element[]) {\r\n        var hp = (monster.hp ? monster.hp : 0).toString();\r\n        if (monster.hpTemp > 0) {\r\n            hp += \"+\" + monster.hpTemp;\r\n        }\r\n        var gauge = null;\r\n        if (!monster.pending) {\r\n            gauge = (\r\n                <HitPointGauge combatant={monster} />\r\n            );\r\n        }\r\n\r\n        var conditions = null;\r\n        if (this.props.combatant.conditions) {\r\n            conditions = this.props.combatant.conditions.map(c => {\r\n                var name = c.name;\r\n                if (c.name === \"exhaustion\") {\r\n                    name += \" (\" + c.level + \")\";\r\n                }\r\n                if ((c.name === \"custom\") && (c.text)) {\r\n                    name = c.text;\r\n                }\r\n                if (c.duration) {\r\n                    name += \" \" + Utils.conditionDurationText(c, this.props.combat);\r\n                }\r\n                var description = [];\r\n                var text = Utils.conditionText(c);\r\n                for (var n = 0; n !== text.length; ++n) {\r\n                    description.push(<li key={n} className=\"condition-text\">{text[n]}</li>);\r\n                }\r\n                return (\r\n                    <div key={c.id} className=\"condition\">\r\n                        <div className=\"condition-name\">{name}</div>\r\n                        <ul>\r\n                            {description}\r\n                        </ul>\r\n                    </div>\r\n                );\r\n            });\r\n        }\r\n\r\n        return (\r\n            <div className=\"content\">\r\n                <div className=\"section key-stats\">\r\n                    <div className=\"key-stat\">\r\n                        <div className=\"stat-value\">{monster.initiative}</div>\r\n                        <div className=\"stat-label\">init</div>\r\n                    </div>\r\n                    <div className=\"key-stat\">\r\n                        <div className=\"stat-value\">{monster.ac}</div>\r\n                        <div className=\"stat-label\">ac</div>\r\n                    </div>\r\n                    <div className=\"key-stat\">\r\n                        <div className=\"stat-value\">{hp}</div>\r\n                        <div className=\"stat-label\">hp</div>\r\n                    </div>\r\n                </div>\r\n                {gauge}\r\n                {conditions}\r\n                {notes}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        var notes = [];\r\n        if (this.props.combat.map) {\r\n            if (!this.props.combatant.pending && !this.props.combat.map.items.find(i => i.id === this.props.combatant.id)) {\r\n                notes.push(\r\n                    <div key=\"not-on-map\" className=\"note\">not on the map</div>\r\n                );\r\n            }\r\n        }\r\n\r\n        var content = null;\r\n\r\n        switch (this.props.combatant.type) {\r\n            case \"pc\":\r\n                content = this.getContentPC(this.props.combatant as Combatant & PC, notes);\r\n                break;\r\n            case \"monster\":\r\n                content = this.getContentMonster(this.props.combatant as Combatant & Monster, notes);\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        var style = \"combatant-row \" + this.props.combatant.type;\r\n        if (this.props.combatant.current || this.props.selected) {\r\n            style += \" highlight\";\r\n        }\r\n\r\n        return (\r\n            <div className={style} onClick={e => this.onClick(e)}>\r\n                <div className=\"name\">\r\n                    {this.props.combatant.displayName || this.props.combatant.name || \"combatant\"}\r\n                    <span className=\"info\">{this.getInformationText()}</span>\r\n                </div>\r\n                {content}\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nimport checked from \"../../resources/images/checked.svg\";\r\nimport unchecked from \"../../resources/images/unchecked.svg\";\r\n\r\ninterface Props {\r\n    label: string;\r\n    checked: boolean;\r\n    changeValue: (value: boolean) => void;\r\n    disabled: boolean;\r\n}\r\n\r\nexport default class Checkbox extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        disabled: false\r\n    };\r\n\r\n    click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        this.props.changeValue(!this.props.checked);\r\n    }\r\n\r\n    render() {\r\n        try {\r\n            return (\r\n                <div className={this.props.disabled ? \"checkbox disabled\" : \"checkbox\"} onClick={e => this.click(e)}>\r\n                    <img className=\"image\" src={this.props.checked ? checked : unchecked} alt=\"check\" />\r\n                    <div className=\"checkbox-label\">{this.props.label}</div>\r\n                </div>\r\n            );\r\n\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport Checkbox from '../controls/checkbox';\r\n\r\ninterface Props {\r\n    options: {\r\n        showHelp: boolean;\r\n    };\r\n    resetAll: () => void;\r\n    changeValue: (source: {}, field: string, value: any) => void;\r\n}\r\n\r\nexport default class AboutModal extends React.Component<Props> {\r\n    render() {\r\n        try {\r\n            return (\r\n                <div className=\"about\">\r\n                    <div className=\"row\">\r\n                        <div className=\"columns small-6 medium-6 large-6 list-column\">\r\n                            <div className=\"heading\">about</div>\r\n                            <div className=\"section\">dojo by <a href=\"mailto:andy.aiken@live.co.uk\">andy aiken</a></div>\r\n                            <div className=\"section\">if you would like to contribut to this project, you can do so <a href=\"https://github.com/andyaiken/dojo\" target=\"_blank\" rel=\"noopener noreferrer\">here</a></div>\r\n                            <div className=\"section\">dungeons and dragons copyright wizards of the coast</div>\r\n                        </div>\r\n                        <div className=\"columns small-6 medium-6 large-6 list-column\">\r\n                            <div className=\"heading\">options</div>\r\n                            <ConfirmButton text=\"clear all data\" callback={() => this.props.resetAll()} />\r\n                            <Checkbox\r\n                                label=\"show help cards\"\r\n                                checked={this.props.options.showHelp}\r\n                                changeValue={value => this.props.changeValue(this.props.options, \"showHelp\", value)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"columns small-12 medium-12 large-12 list-column\">\r\n                            <div className=\"heading\">open game license</div>\r\n                            <div className=\"section\">The following text is the property of Wizards of the Coast, Inc. and is Copyright 2000 Wizards of the Coast, Inc (\"Wizards\"). All Rights Reserved.</div>\r\n                            <ol>\r\n                                <li>Definitions: (a)\"Contributors\" means the copyright and/or trademark owners who have contributed Open Game Content; (b)\"Derivative Material\" means copyrighted material including derivative works and translations (including into other computer languages), potation, modification, correction, addition, extension, upgrade, improvement, compilation, abridgment or other form in which an existing work may be recast, transformed or adapted; (c) \"Distribute\" means to reproduce, license, rent, lease, sell, broadcast, publicly display, transmit or otherwise distribute; (d)\"Open Game Content\" means the game mechanic and includes the methods, procedures, processes and routines to the extent such content does not embody the Product Identity and is an enhancement over the prior art and any additional content clearly identified as Open Game Content by the Contributor, and means any work covered by this License, including translations and derivative works under copyright law, but specifically excludes Product Identity. (e) \"Product Identity\" means product and product line names, logos and identifying marks including trade dress; artifacts; creatures characters; stories, storylines, plots, thematic elements, dialogue, incidents, language, artwork, symbols, designs, depictions, likenesses, formats, poses, concepts, themes and graphic, photographic and other visual or audio representations; names and descriptions of characters, spells, enchantments, personalities, teams, personas, likenesses and special abilities; places, locations, environments, creatures, equipment, magical or supernatural abilities or effects, logos, symbols, or graphic designs; and any other trademark or registered trademark clearly identified as Product identity by the owner of the Product Identity, and which specifically excludes the Open Game Content; (f) \"Trademark\" means the logos, names, mark, sign, motto, designs that are used by a Contributor to identify itself or its products or the associated products contributed to the Open Game License by the Contributor (g) \"Use\", \"Used\" or \"Using\" means to use, Distribute, copy, edit, format, modify, translate and otherwise create Derivative Material of Open Game Content. (h) \"You\" or \"Your\" means the licensee in terms of this agreement.</li>\r\n                                <li>The License: This License applies to any Open Game Content that contains a notice indicating that the Open Game Content may only be Used under and in terms of this License. You must affix such a notice to any Open Game Content that you Use. No terms may be added to or subtracted from this License except as described by the License itself. No other terms or conditions may be applied to any Open Game Content distributed using this License.</li>\r\n                                <li>Offer and Acceptance: By Using the Open Game Content You indicate Your acceptance of the terms of this License.</li>\r\n                                <li>Grant and Consideration: In consideration for agreeing to use this License, the Contributors grant You a perpetual, worldwide, royalty-free, non-exclusive license with the exact terms of this License to Use, the Open Game Content.</li>\r\n                                <li>Representation of Authority to Contribute: If You are contributing original material as Open Game Content, You represent that Your Contributions are Your original creation and/or You have sufficient rights to grant the rights conveyed by this License.</li>\r\n                                <li>Notice of License Copyright: You must update the COPYRIGHT NOTICE portion of this License to include the exact text of the COPYRIGHT NOTICE of any Open Game Content You are copying, modifying or distributing, and You must add the title, the copyright date, and the copyright holder's name to the COPYRIGHT NOTICE of any original Open Game Content you Distribute.</li>\r\n                                <li>Use of Product Identity: You agree not to Use any Product Identity, including as an indication as to compatibility, except as expressly licensed in another, independent Agreement with the owner of each element of that Product Identity. You agree not to indicate compatibility or co-adaptability with any Trademark or Registered Trademark in conjunction with a work containing Open Game Content except as expressly licensed in another, independent Agreement with the owner of such Trademark or Registered Trademark. The use of any Product Identity in Open Game Content does not constitute a challenge to the ownership of that Product Identity. The owner of any Product Identity used in Open Game Content shall retain all rights, title and interest in and to that Product Identity.</li>\r\n                                <li>Identification: If you distribute Open Game Content You must clearly indicate which portions of the work that you are distributing are Open Game Content.</li>\r\n                                <li>Updating the License: Wizards or its designated Agents may publish updated versions of this License. You may use any authorized version of this License to copy, modify and distribute any Open Game Content originally distributed under any version of this License.</li>\r\n                                <li>Copy of this License: You MUST include a copy of this License with every copy of the Open Game Content You Distribute.</li>\r\n                                <li>Use of Contributor Credits: You may not market or advertise the Open Game Content using the name of any Contributor unless You have written permission from the Contributor to do so.</li>\r\n                                <li>Inability to Comply: If it is impossible for You to comply with any of the terms of this License with respect to some or all of the Open Game Content due to statute, judicial order, or governmental regulation then You may not Use any Open Game Material so affected.</li>\r\n                                <li>Termination: This License will terminate automatically if You fail to comply with all terms herein and fail to cure such breach within 30 days of becoming aware of the breach. All sublicenses shall survive the termination of this License.</li>\r\n                                <li>Reformation: If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable.</li>\r\n                                <li>COPYRIGHT NOTICE Open Game License v 1.0 Copyright 2000, Wizards of the Coast, Inc.</li>\r\n                            </ol>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\ninterface Props {\r\n    options: { id: string; text: string; disabled?: boolean }[];\r\n    selectedID: string | null;\r\n    select: (optionID: string) => void;\r\n    tabs: boolean;\r\n    disabled: boolean;\r\n    itemsPerRow: number;\r\n}\r\n\r\nexport default class Selector extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        tabs: false,\r\n        disabled: false,\r\n        itemsPerRow: null\r\n    };\r\n\r\n    render() {\r\n        try {\r\n            var style = this.props.tabs ? \"selector tabs\" : \"selector radio\";\r\n            if (this.props.disabled) {\r\n                style += \" disabled\";\r\n            }\r\n\r\n            var itemsPerRow = this.props.itemsPerRow ? this.props.itemsPerRow : this.props.options.length;\r\n            var rowCount = Math.ceil(this.props.options.length / itemsPerRow);\r\n            var rowContents: JSX.Element[][] = [];\r\n            for (var n = 0; n !== rowCount; ++n) {\r\n                rowContents.push([]);\r\n            }\r\n\r\n            this.props.options.forEach(option => {\r\n                var index = this.props.options.indexOf(option);\r\n                var rowIndex = Math.floor(index / itemsPerRow);\r\n                var row = rowContents[rowIndex];\r\n                row.push(\r\n                    <SelectorOption\r\n                        key={option.id}\r\n                        option={option}\r\n                        selected={option.id === this.props.selectedID}\r\n                        count={itemsPerRow}\r\n                        select={(optionID: string) => this.props.select(optionID)}\r\n                    />\r\n                );\r\n            });\r\n\r\n            var rowSections = rowContents.map(row => {\r\n                var index = rowContents.indexOf(row);\r\n                return <div key={index}>{row}</div>;\r\n            });\r\n\r\n            return (\r\n                <div className={style}>\r\n                    {rowSections}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface SelectorOptionInterface {\r\n    option: { id: string; text: string; disabled?: boolean };\r\n    selected: boolean;\r\n    count: number;\r\n    select: (optionID: string) => void;\r\n}\r\n\r\nclass SelectorOption extends React.Component<SelectorOptionInterface> {\r\n    click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (!this.props.option.disabled) {\r\n            this.props.select(this.props.option.id);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        try {\r\n            var width = \"calc(((100% - 1px) / \" + this.props.count + \") - 2px )\";\r\n\r\n            var style = \"option\";\r\n            if (this.props.selected) {\r\n                style += \" selected\";\r\n            }\r\n            if (this.props.option.disabled) {\r\n                style += \" disabled\";\r\n            }\r\n\r\n            return (\r\n                <div key={this.props.option.id} className={style} style={{ width: width }} title={this.props.option.text} onClick={e => this.click(e)}>\r\n                    {this.props.option.text}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport Utils from '../../utils';\r\n\r\nimport { CATEGORY_TYPES, SIZE_TYPES, MonsterGroup, Monster } from '../../models/models';\r\n\r\nimport Selector from '../controls/selector';\r\n\r\ninterface Props {\r\n    library: MonsterGroup[];\r\n}\r\n\r\ninterface State {\r\n    chart: string;\r\n}\r\n\r\nexport default class DemographicsModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            chart: \"challenge\"\r\n        };\r\n    }\r\n\r\n    selectChart(chart: string) {\r\n        this.setState({\r\n            chart: chart\r\n        });\r\n    }\r\n\r\n    render() {\r\n        try {\r\n            var demographics = null;\r\n\r\n            var allMonsters: Monster[] = [];\r\n            this.props.library.forEach(group => group.monsters.forEach(monster => allMonsters.push(monster)));\r\n            if (allMonsters.length !== 0) {\r\n                var buckets: { value: any, title: string }[] = [];\r\n                var maxBucketSize = 0;\r\n                var monsters: { [key: string]: Monster[] } = {};\r\n\r\n                switch (this.state.chart) {\r\n                    case \"challenge\":\r\n                        var challenges = [0, 0.125, 0.25, 0.5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30];\r\n                        challenges.forEach(cr => {\r\n                            buckets.push({\r\n                                value: cr,\r\n                                title: \"challenge \" + Utils.challenge(cr)\r\n                            })\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            var cr = bucket.value;\r\n                            monsters[cr.toString()] = allMonsters.filter(monster => monster.challenge === cr);\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            var cr = bucket.value;\r\n                            maxBucketSize = Math.max(monsters[cr].length, maxBucketSize);\r\n                        });\r\n                        break;\r\n                    case \"size\":\r\n                        SIZE_TYPES.forEach(size => {\r\n                            buckets.push({\r\n                                value: size,\r\n                                title: size\r\n                            })\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            var size = bucket.value;\r\n                            monsters[size.toString()] = allMonsters.filter(monster => monster.size === size);\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            var size = bucket.value;\r\n                            maxBucketSize = Math.max(monsters[size].length, maxBucketSize);\r\n                        });\r\n                        break;\r\n                    case \"type\":\r\n                        CATEGORY_TYPES.forEach(type => {\r\n                            buckets.push({\r\n                                value: type,\r\n                                title: type\r\n                            })\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            var type = bucket.value;\r\n                            monsters[type.toString()] = allMonsters.filter(monster => monster.category === type);\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            var type = bucket.value;\r\n                            maxBucketSize = Math.max(monsters[type].length, maxBucketSize);\r\n                        });\r\n                        break;\r\n                    default:\r\n                        // Do nothing\r\n                        break;\r\n                }\r\n\r\n                var bars = [];\r\n                for (var index = 0; index !== buckets.length; ++index) {\r\n                    var bucket = buckets[index];\r\n                    var set = monsters[bucket.value];\r\n                    var count = set ? set.length : 0;\r\n                    bars.push(\r\n                        <div\r\n                            key={bucket.title}\r\n                            className=\"bar-container\"\r\n                            style={{\r\n                                width: \"calc((100% - 1px) / \" + buckets.length + \")\",\r\n                                left: \"calc((100% - 1px) * \" + index + \" / \" + buckets.length + \")\"\r\n                            }}\r\n                            title={bucket.title + \": \" + set.length + \" monsters\"}>\r\n                            <div\r\n                                className=\"bar-space\"\r\n                                style={{\r\n                                    height: \"calc((100% - 1px) * \" + (maxBucketSize - count) + \" / \" + maxBucketSize + \")\"\r\n                                }}>\r\n                            </div>\r\n                            <div\r\n                                className=\"bar\"\r\n                                style={{\r\n                                    height: \"calc((100% - 1px) * \" + count + \" / \" + maxBucketSize + \")\"\r\n                                }}>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                };\r\n\r\n                var chartOptions = [\r\n                    {\r\n                        id: \"challenge\",\r\n                        text: \"challenge rating\"\r\n                    },\r\n                    {\r\n                        id: \"size\",\r\n                        text: \"size\"\r\n                    },\r\n                    {\r\n                        id: \"type\",\r\n                        text: \"type\"\r\n                    }\r\n                ]\r\n\r\n                demographics = (\r\n                    <div>\r\n                        <Selector\r\n                            options={chartOptions}\r\n                            selectedID={this.state.chart}\r\n                            select={optionID => this.selectChart(optionID)}\r\n                        />\r\n                        <div className=\"chart\">\r\n                            <div className=\"plot\">{bars}</div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return demographics;\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    };\r\n}","import React from 'react';\r\n\r\nimport Utils from '../../utils';\r\nimport Factory from '../../factory';\r\n\r\nimport { TRAIT_TYPES, CATEGORY_TYPES, SIZE_TYPES, Monster, MonsterGroup, Trait } from '../../models/models';\r\n\r\nimport Checkbox from '../controls/checkbox';\r\nimport Dropdown from '../controls/dropdown';\r\nimport MonsterCard from '../cards/monster-card';\r\nimport Spin from '../controls/spin';\r\nimport AbilityScorePanel from '../panels/ability-score-panel';\r\nimport TraitsPanel from '../panels/traits-panel';\r\nimport Selector from '../controls/selector';\r\n\r\nimport arrow from \"../../resources/images/down-arrow.svg\";\r\n\r\ninterface Props {\r\n    monster: Monster;\r\n    library: MonsterGroup[];\r\n    showMonsters: boolean;\r\n}\r\n\r\ninterface State {\r\n    monster: Monster;\r\n    page: 'overview' | 'abilities' | 'combat' | 'actions';\r\n    showFilter: boolean;\r\n    helpSection: string;\r\n    filter: {\r\n        size: boolean,\r\n        type: boolean,\r\n        subtype: boolean,\r\n        alignment: boolean,\r\n        challenge: boolean\r\n    };\r\n}\r\n\r\nexport default class MonsterEditorModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            monster: props.monster,\r\n            page: \"overview\",\r\n            showFilter: false,\r\n            helpSection: \"speed\",\r\n            filter: {\r\n                size: true,\r\n                type: true,\r\n                subtype: false,\r\n                alignment: false,\r\n                challenge: true,\r\n            }\r\n        };\r\n    }\r\n\r\n    setPage(page: 'overview' | 'abilities' | 'combat' | 'actions') {\r\n        var sections = this.getHelpOptionsForPage(page);\r\n        this.setState({\r\n            page: page,\r\n            helpSection: sections[0]\r\n        });\r\n    }\r\n\r\n    toggleFilter() {\r\n        this.setState({\r\n            showFilter: !this.state.showFilter\r\n        });\r\n    }\r\n\r\n    setHelpSection(section: string) {\r\n        this.setState({\r\n            helpSection: section\r\n        });\r\n    }\r\n\r\n    toggleMatch(type: 'size' | 'type' | 'subtype' | 'alignment' | 'challenge') {\r\n        // eslint-disable-next-line\r\n        this.state.filter[type] = !this.state.filter[type];\r\n        this.setState({\r\n            filter: this.state.filter\r\n        });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Helper methods\r\n\r\n    getHelpOptionsForPage(page: 'overview' | 'abilities' | 'combat' | 'actions') {\r\n        switch (page) {\r\n            case \"overview\":\r\n                return [\"speed\", \"senses\", \"languages\", \"equipment\"];\r\n            case \"abilities\":\r\n                return [\"str\", \"dex\", \"con\", \"int\", \"wis\", \"cha\", \"saves\", \"skills\"];\r\n            case \"combat\":\r\n                return [\"armor class\", \"hit dice\", \"resistances\", \"vulnerabilities\", \"immunities\", \"conditions\"];\r\n            case \"actions\":\r\n                return [\"actions\"];\r\n            default:\r\n                return [];\r\n        }\r\n    }\r\n\r\n    getMonsters() {\r\n        var monsters: Monster[] = [];\r\n        this.props.library.forEach(group => {\r\n            group.monsters.forEach(monster => {\r\n                var match = true;\r\n\r\n                if (this.state.monster.id === monster.id) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.filter.size && (this.state.monster.size !== monster.size)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.filter.type && (this.state.monster.category !== monster.category)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.filter.subtype && (this.state.monster.tag !== monster.tag)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.filter.alignment && (this.state.monster.alignment !== monster.alignment)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.filter.challenge && (this.state.monster.challenge !== monster.challenge)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (match) {\r\n                    monsters.push(monster);\r\n                }\r\n            })\r\n        });\r\n\r\n        return monsters;\r\n    }\r\n\r\n    setRandomValue(field: string, monsters: Monster[], notify: boolean) {\r\n        var index = Math.floor(Math.random() * monsters.length);\r\n        var m = monsters[index];\r\n\r\n        var source: any = m;\r\n        var value = null;\r\n        var tokens = field.split(\".\");\r\n        tokens.forEach(token => {\r\n            if (token === tokens[tokens.length - 1]) {\r\n                value = source[token];\r\n            } else {\r\n                source = source[token];\r\n            }\r\n        });\r\n\r\n        this.changeValue(field, value, notify);\r\n    }\r\n\r\n    geneSplice(monsters: Monster[]) {\r\n        [\r\n            \"speed\",\r\n            \"senses\",\r\n            \"languages\",\r\n            \"equipment\",\r\n            \"abilityScores.str\",\r\n            \"abilityScores.dex\",\r\n            \"abilityScores.con\",\r\n            \"abilityScores.int\",\r\n            \"abilityScores.wis\",\r\n            \"abilityScores.cha\",\r\n            \"savingThrows\",\r\n            \"skills\",\r\n            \"ac\",\r\n            \"hitDice\",\r\n            \"damage.resist\",\r\n            \"damage.vulnerable\",\r\n            \"damage.immune\",\r\n            \"conditionImmunities\"\r\n        ].forEach(field => {\r\n            this.setRandomValue(field, monsters, false);\r\n        });\r\n\r\n        TRAIT_TYPES.forEach(type => {\r\n            // Clear current traits of this type\r\n            var current = this.state.monster.traits.filter(t => t.type === type);\r\n            current.forEach(c => {\r\n                var index = this.state.monster.traits.findIndex(t => t === c);\r\n                this.state.monster.traits.splice(index, 1);\r\n            })\r\n\r\n            // Get all traits of this type\r\n            var traits: Trait[] = [];\r\n            monsters.forEach(m => {\r\n                m.traits.filter(t => t.type === type)\r\n                    .forEach(t => traits.push(t));\r\n            });\r\n\r\n            // Collate by name\r\n            var distinct: { trait: Trait, count: number }[] = [];\r\n            traits.forEach(t => {\r\n                var current = distinct.find(d => d.trait.name === t.name);\r\n                if (current) {\r\n                    current.count += 1;\r\n                } else {\r\n                    distinct.push({\r\n                        trait: t,\r\n                        count: 1\r\n                    });\r\n                }\r\n            });\r\n\r\n            // If any are common to all monsters, copy them and remove from the candidates\r\n            var addedIDs: string[] = [];\r\n            distinct.filter(d => d.count === monsters.length)\r\n                .forEach(d => {\r\n                    this.copyTrait(d.trait);\r\n                    addedIDs.push(d.trait.id);\r\n                });\r\n            addedIDs.forEach(id => {\r\n                var index = distinct.findIndex(d => d.trait.id === id);\r\n                distinct.splice(index, 1);\r\n            });\r\n\r\n            var avg = traits.length / monsters.length;\r\n            while (this.state.monster.traits.filter(t => t.type === type).length < avg) {\r\n                var index = Math.floor(Math.random() * distinct.length);\r\n                var t = distinct[index].trait;\r\n                this.copyTrait(t);\r\n                distinct.splice(index, 1);\r\n            }\r\n        });\r\n\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    addTrait(type: 'trait' | 'action' | 'legendary' | 'lair' | 'regional') {\r\n        var trait = Factory.createTrait();\r\n        trait.type = type;\r\n        trait.name = \"New \" + this.getActionTypeName(type, false).toLowerCase();\r\n        this.state.monster.traits.push(trait);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    addRandomTrait(type: string, monsters: Monster[]) {\r\n        var traits: Trait[] = [];\r\n        monsters.forEach(m => {\r\n            m.traits.filter(t => t.type === type)\r\n                .forEach(t => {\r\n                    traits.push(t);\r\n                });\r\n        });\r\n\r\n        var index = Math.floor(Math.random() * traits.length);\r\n        var trait = traits[index];\r\n\r\n        this.copyTrait(trait);\r\n    }\r\n\r\n    removeTrait(trait: Trait) {\r\n        var index = this.state.monster.traits.indexOf(trait);\r\n        this.state.monster.traits.splice(index, 1);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    getActionTypeName(type: string, plural: boolean) {\r\n        var name = Utils.traitType(type);\r\n        if (plural) {\r\n            name += \"s\";\r\n        }\r\n        return name;\r\n    }\r\n\r\n    copyTrait(trait: Trait) {\r\n        var copy = JSON.parse(JSON.stringify(trait));\r\n        copy.id = Utils.guid();\r\n        this.state.monster.traits.push(copy);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    changeTrait(trait: Trait, field: 'name' | 'usage' | 'type' | 'text', value: string) {\r\n        trait[field] = value;\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    nudgeValue(field: string, delta: number) {\r\n        var source: any = this.state.monster;\r\n        var value: any = null;\r\n        var tokens = field.split(\".\");\r\n        tokens.forEach(token => {\r\n            if (token === tokens[tokens.length - 1]) {\r\n                value = source[token];\r\n            } else {\r\n                source = source[token];\r\n            }\r\n        });\r\n\r\n        var newValue = null;\r\n        if (field === \"challenge\") {\r\n            newValue = Utils.nudgeChallenge(value, delta);\r\n        } else {\r\n            newValue = (value ? value : 0) + delta;\r\n        }\r\n\r\n        this.changeValue(field, newValue);\r\n    }\r\n\r\n    changeValue(field: string, value: any, notify = true) {\r\n        var source: any = this.state.monster;\r\n        var tokens = field.split(\".\");\r\n        tokens.forEach(token => {\r\n            if (token === tokens[tokens.length - 1]) {\r\n                source[token] = value;\r\n\r\n                if ((field === \"abilityScores.con\") || (field === \"size\") || (field === \"hitDice\")) {\r\n                    var sides = Utils.hitDieType(this.state.monster.size);\r\n                    var conMod = Math.floor((this.state.monster.abilityScores.con - 10) / 2)\r\n                    var hpPerDie = ((sides + 1) / 2) + conMod;\r\n                    var hp = Math.floor(this.state.monster.hitDice * hpPerDie);\r\n                    // eslint-disable-next-line\r\n                    this.state.monster.hpMax = hp;\r\n                }  \r\n\r\n                if (notify) {\r\n                    this.setState({\r\n                        monster: this.state.monster\r\n                    });\r\n                }\r\n            } else {\r\n                source = source[token];\r\n            }\r\n        });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // HTML render methods\r\n\r\n    getHelpSection(monsters: Monster[]) {\r\n        switch (this.state.helpSection) {\r\n            case \"speed\":\r\n                return this.getValueSection(\"speed\", \"text\", monsters);\r\n            case \"senses\":\r\n                return this.getValueSection(\"senses\", \"text\", monsters);\r\n            case \"languages\":\r\n                return this.getValueSection(\"languages\", \"text\", monsters);\r\n            case \"equipment\":\r\n                return this.getValueSection(\"equipment\", \"text\", monsters);\r\n            case \"str\":\r\n                return this.getValueSection(\"abilityScores.str\", \"number\", monsters);\r\n            case \"dex\":\r\n                return this.getValueSection(\"abilityScores.dex\", \"number\", monsters);\r\n            case \"con\":\r\n                return this.getValueSection(\"abilityScores.con\", \"number\", monsters);\r\n            case \"int\":\r\n                return this.getValueSection(\"abilityScores.int\", \"number\", monsters);\r\n            case \"wis\":\r\n                return this.getValueSection(\"abilityScores.wis\", \"number\", monsters);\r\n            case \"cha\":\r\n                return this.getValueSection(\"abilityScores.cha\", \"number\", monsters);\r\n            case \"saves\":\r\n                return this.getValueSection(\"savingThrows\", \"text\", monsters);\r\n            case \"skills\":\r\n                return this.getValueSection(\"skills\", \"text\", monsters);\r\n            case \"armor class\":\r\n                return this.getValueSection(\"ac\", \"number\", monsters);\r\n            case \"hit dice\":\r\n                return this.getValueSection(\"hitDice\", \"number\", monsters);\r\n            case \"resistances\":\r\n                return this.getValueSection(\"damage.resist\", \"text\", monsters);\r\n            case \"vulnerabilities\":\r\n                return this.getValueSection(\"damage.vulnerable\", \"text\", monsters);\r\n            case \"immunities\":\r\n                return this.getValueSection(\"damage.immune\", \"text\", monsters);\r\n            case \"conditions\":\r\n                return this.getValueSection(\"conditionImmunities\", \"text\", monsters);\r\n            case \"actions\":\r\n                return this.getActionsSection(monsters);\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    getValueSection(field: string, dataType: 'text' | 'number', monsters: Monster[]) {\r\n        var values: any[] = monsters\r\n            .map(m => {\r\n                var tokens = field.split(\".\");\r\n                var source: any = m;\r\n                var value = null;\r\n                tokens.forEach(token => {\r\n                    if (token === tokens[tokens.length - 1]) {\r\n                        value = source[token];\r\n                    } else {\r\n                        source = source[token];\r\n                    }\r\n                });\r\n                if ((dataType === \"text\") && (value === \"\")) {\r\n                    value = null;\r\n                }\r\n                return value;\r\n            })\r\n            .filter(v => v !== null);\r\n\r\n        var distinct: { value: any, count: number }[] = [];\r\n        if (dataType === \"number\") {\r\n            var min: number | null = null;\r\n            var max: number | null = null;\r\n            values.forEach(v => {\r\n                if ((min === null) || (v < min)) {\r\n                    min = v;\r\n                }\r\n                if ((max === null) || (v > max)) {\r\n                    max = v;\r\n                }\r\n            });\r\n            if ((min !== null) && (max !== null)) {\r\n                for (var n = min; n <= max; ++n) {\r\n                    distinct.push({\r\n                        value: n,\r\n                        count: 0\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        values.forEach(v => {\r\n            var current = distinct.find(d => d.value === v);\r\n            if (current) {\r\n                current.count += 1;\r\n            } else {\r\n                distinct.push({\r\n                    value: v,\r\n                    count: 1\r\n                });\r\n            }\r\n        });\r\n\r\n        switch (dataType) {\r\n            case \"number\":\r\n                Utils.sortByValue(distinct);\r\n                break;\r\n            case \"text\":\r\n                Utils.sortByCount(distinct);\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        if (dataType === \"text\") {\r\n            var count = monsters.length - values.length;\r\n            if (count !== 0) {\r\n                distinct.push({\r\n                    value: \"\",\r\n                    count: monsters.length - values.length\r\n                });\r\n            }\r\n        }\r\n\r\n        var valueSections = distinct.map(d => {\r\n            var width = 100 * d.count / monsters.length;\r\n            return (\r\n                <div className=\"row small-up-3 medium-up-3 large-up-3 value-list\" key={distinct.indexOf(d)}>\r\n                    <div className=\"column\">\r\n                        <div className=\"text-container\">\r\n                            {d.value || \"(none specified)\"}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"column\">\r\n                        <div className=\"bar-container\">\r\n                            <div className=\"bar\" style={{ width: width + \"%\" }}></div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"column\">\r\n                        <button onClick={() => this.changeValue(field, d.value)}>use this value</button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                {valueSections}\r\n                <button onClick={() => this.setRandomValue(field, monsters, true)}>select random value</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    getActionsSection(monsters: Monster[]) {\r\n        var rows = [];\r\n        rows.push(\r\n            <div className=\"row small-up-3 medium-up-3 large-up-3 value-list\" key=\"header\">\r\n                <div className=\"column\">\r\n                    <div className=\"text-container\">\r\n                        <b>type</b>\r\n                    </div>\r\n                </div>\r\n                <div className=\"column\">\r\n                    <div className=\"text-container number\">\r\n                        <b>average number</b>\r\n                    </div>\r\n                </div>\r\n                <div className=\"column\">\r\n                    <div className=\"text-container number\">\r\n                        <b>min - max</b>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        TRAIT_TYPES.forEach(type => {\r\n            var min: number | null = null;\r\n            var max: number | null = null;\r\n            var count = 0;\r\n            monsters.forEach(m => {\r\n                var n = m.traits.filter(t => t.type === type).length;\r\n                if ((min === null) || (n < min)) {\r\n                    min = n;\r\n                }\r\n                if ((max === null) || (n > max)) {\r\n                    max = n;\r\n                }\r\n                count += n;\r\n            });\r\n            var avg = Math.round(count / monsters.length);    \r\n\r\n            rows.push(\r\n                <div className=\"row small-up-4 medium-up-4 large-up-4 value-list\" key={type}>\r\n                    <div className=\"column\">\r\n                        <div className={count === 0 ? \"text-container disabled\" : \"text-container\"}>\r\n                            {this.getActionTypeName(type, true)}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"column\">\r\n                        <div className={count === 0 ? \"text-container number disabled\" : \"text-container number\"}>\r\n                            {avg}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"column\">\r\n                        <div className={count === 0 ? \"text-container number disabled\" : \"text-container number\"}>\r\n                            {min} - {max}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"column\">\r\n                        <button className={count === 0 ? \"disabled\" : \"\"} onClick={() => this.addRandomTrait(type, monsters)}>add random</button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                {rows}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    getFilterCard(monsters: Monster[]) {\r\n        var similar = (\r\n            <div className=\"section\">\r\n                {monsters.length} similar monsters\r\n            </div>\r\n        );\r\n\r\n        var filterContent = null;\r\n        if (this.state.showFilter) {\r\n            filterContent = (\r\n                <div>\r\n                    <Checkbox\r\n                        label={\"size \" + this.state.monster.size}\r\n                        checked={this.state.filter.size}\r\n                        changeValue={value => this.toggleMatch(\"size\")}\r\n                    />\r\n                    <Checkbox\r\n                        label={\"type \" + this.state.monster.category}\r\n                        checked={this.state.filter.type}\r\n                        changeValue={value => this.toggleMatch(\"type\")}\r\n                    />\r\n                    <Checkbox\r\n                        label={this.state.monster.tag ? \"subtype \" + this.state.monster.tag : \"subtype\"}\r\n                        checked={this.state.filter.subtype}\r\n                        disabled={!this.state.monster.tag}\r\n                        changeValue={value => this.toggleMatch(\"subtype\")}\r\n                    />\r\n                    <Checkbox\r\n                        label={this.state.monster.alignment ? \"alignment \" + this.state.monster.alignment : \"alignment\"}\r\n                        checked={this.state.filter.alignment}\r\n                        disabled={!this.state.monster.alignment}\r\n                        changeValue={value => this.toggleMatch(\"alignment\")}\r\n                    />\r\n                    <Checkbox\r\n                        label={\"challenge rating \" + Utils.challenge(this.state.monster.challenge)}\r\n                        checked={this.state.filter.challenge}\r\n                        changeValue={value => this.toggleMatch(\"challenge\")}\r\n                    />\r\n                    <div className=\"divider\"></div>\r\n                    <button className={monsters.length < 2 ? \"disabled\" : \"\"} onClick={() => this.geneSplice(monsters)}>build random monster</button>\r\n                    <div className=\"divider\"></div>\r\n                    {similar}\r\n                </div>\r\n            );\r\n        } else {\r\n            filterContent = (\r\n                <div>\r\n                    {similar}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className=\"section\">\r\n                <div className=\"card\">\r\n                    <div className=\"heading\">\r\n                        <div className=\"title\">similar monsters</div>\r\n                        <img className={this.state.showFilter ? \"image rotate\" : \"image\"} src={arrow} alt=\"arrow\" onClick={() => this.toggleFilter()} />\r\n                    </div>\r\n                    <div className=\"card-content\">\r\n                        {filterContent}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    getMonsterCards(monsters: Monster[]) {\r\n        var sorted = Utils.sort(monsters);\r\n        var monsterCards = sorted.map(m => (\r\n            <div className=\"section\" key={m.id}>\r\n                <MonsterCard\r\n                    combatant={m}\r\n                    mode={\"template \" + this.state.page}\r\n                    copyTrait={trait => this.copyTrait(trait)}\r\n                />\r\n            </div>\r\n        ));\r\n\r\n        return monsterCards;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    render() {\r\n        try {\r\n            var pages = [\r\n                {\r\n                    id: 'overview',\r\n                    text: 'overview'\r\n                },\r\n                {\r\n                    id: 'abilities',\r\n                    text: 'abilities'\r\n                },\r\n                {\r\n                    id: 'combat',\r\n                    text: 'combat'\r\n                },\r\n                {\r\n                    id: 'actions',\r\n                    text: 'actions'\r\n                },\r\n            ];\r\n\r\n            var monsters: Monster[] = [];\r\n            if (this.props.showMonsters) {\r\n                monsters = this.getMonsters();\r\n            }\r\n\r\n            var content = null;\r\n            switch (this.state.page) {\r\n                case 'overview':\r\n                    var catOptions = CATEGORY_TYPES.map(cat => { return { id: cat, text: cat }; });\r\n                    var sizeOptions = SIZE_TYPES.map(size => { return { id: size, text: size }; });\r\n\r\n                    content = (\r\n                        <div className=\"row\">\r\n                            <div className=\"columns small-6 medium-6 large-6\">\r\n                                <div className=\"subheading\">name</div>\r\n                                <input type=\"text\" value={this.state.monster.name} onChange={event => this.changeValue(\"name\", event.target.value)} />\r\n                                <div className=\"subheading\">size</div>\r\n                                <Dropdown\r\n                                    options={sizeOptions}\r\n                                    selectedID={this.state.monster.size}\r\n                                    select={optionID => this.changeValue(\"size\", optionID)}\r\n                                />\r\n                                <div className=\"subheading\">type</div>\r\n                                <Dropdown\r\n                                    options={catOptions}\r\n                                    selectedID={this.state.monster.category}\r\n                                    select={optionID => this.changeValue(\"category\", optionID)}\r\n                                />\r\n                                <div className=\"subheading\">subtype</div>\r\n                                <input type=\"text\" value={this.state.monster.tag} onChange={event => this.changeValue(\"tag\", event.target.value)} />\r\n                                <div className=\"subheading\">alignment</div>\r\n                                <input type=\"text\" value={this.state.monster.alignment} onChange={event => this.changeValue(\"alignment\", event.target.value)} />\r\n                            </div>\r\n                            <div className=\"columns small-6 medium-6 large-6\">\r\n                                <div className=\"subheading\">challenge rating</div>\r\n                                <Spin\r\n                                    source={this.state.monster}\r\n                                    name=\"challenge\"\r\n                                    display={value => Utils.challenge(value)}\r\n                                    nudgeValue={delta => this.nudgeValue(\"challenge\", delta)}\r\n                                />\r\n                                <div className=\"subheading\">speed</div>\r\n                                <input type=\"text\" value={this.state.monster.speed} onChange={event => this.changeValue(\"speed\", event.target.value)} />\r\n                                <div className=\"subheading\">senses</div>\r\n                                <input type=\"text\" value={this.state.monster.senses} onChange={event => this.changeValue(\"senses\", event.target.value)} />\r\n                                <div className=\"subheading\">languages</div>\r\n                                <input type=\"text\" value={this.state.monster.languages} onChange={event => this.changeValue(\"languages\", event.target.value)} />\r\n                                <div className=\"subheading\">equipment</div>\r\n                                <input type=\"text\" value={this.state.monster.equipment} onChange={event => this.changeValue(\"equipment\", event.target.value)} />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                    break;\r\n                case 'abilities':\r\n                    content = (\r\n                        <div className=\"row\">\r\n                            <div className=\"columns small-6 medium-6 large-6\">\r\n                                <div className=\"subheading\">ability scores</div>\r\n                                <AbilityScorePanel\r\n                                    edit={true}\r\n                                    combatant={this.state.monster}\r\n                                    nudgeValue={(source, type, delta) => this.nudgeValue(type, delta)}\r\n                                />\r\n                            </div>\r\n                            <div className=\"columns small-6 medium-6 large-6\">\r\n                                <div className=\"subheading\">saving throws</div>\r\n                                <input type=\"text\" value={this.state.monster.savingThrows} onChange={event => this.changeValue(\"savingThrows\", event.target.value)} />\r\n                                <div className=\"subheading\">skills</div>\r\n                                <input type=\"text\" value={this.state.monster.skills} onChange={event => this.changeValue(\"skills\", event.target.value)} />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                    break;\r\n                case 'combat':\r\n                    content = (\r\n                        <div className=\"row\">\r\n                            <div className=\"columns small-6 medium-6 large-6\">\r\n                                <div className=\"subheading\">armor class</div>\r\n                                <Spin\r\n                                    source={this.state.monster}\r\n                                    name=\"ac\"\r\n                                    nudgeValue={delta => this.nudgeValue(\"ac\", delta)}\r\n                                />\r\n                                <div className=\"subheading\">hit dice</div>\r\n                                <Spin\r\n                                    source={this.state.monster}\r\n                                    name=\"hitDice\"\r\n                                    display={value => value + \"d\" + Utils.hitDieType(this.state.monster.size)}\r\n                                    nudgeValue={delta => this.nudgeValue(\"hitDice\", delta)}\r\n                                />\r\n                                <div className=\"subheading\">hit points</div>\r\n                                <div className=\"hp-value\">{this.state.monster.hpMax} hp</div>\r\n                            </div>\r\n                            <div className=\"columns small-6 medium-6 large-6\">\r\n                                <div className=\"subheading\">damage resistances</div>\r\n                                <input type=\"text\" value={this.state.monster.damage.resist} onChange={event => this.changeValue(\"damage.resist\", event.target.value)} />\r\n                                <div className=\"subheading\">damage vulnerabilities</div>\r\n                                <input type=\"text\" value={this.state.monster.damage.vulnerable} onChange={event => this.changeValue(\"damage.vulnerable\", event.target.value)} />\r\n                                <div className=\"subheading\">damage immunities</div>\r\n                                <input type=\"text\" value={this.state.monster.damage.immune} onChange={event => this.changeValue(\"damage.immune\", event.target.value)} />\r\n                                <div className=\"subheading\">condition immunities</div>\r\n                                <input type=\"text\" value={this.state.monster.conditionImmunities} onChange={event => this.changeValue(\"conditionImmunities\", event.target.value)} />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                    break;\r\n                case 'actions':\r\n                    content = (\r\n                        <TraitsPanel\r\n                            combatant={this.state.monster}\r\n                            mode='edit'\r\n                            addTrait={type => this.addTrait(type)}\r\n                            removeTrait={trait => this.removeTrait(trait)}\r\n                            changeTrait={(trait, type, value) => this.changeTrait(trait, type, value)}\r\n                        />\r\n                    );\r\n                    break;\r\n                default:\r\n                    // Do nothing\r\n                    break;\r\n            }\r\n\r\n            var help = null;\r\n            if (this.props.showMonsters && (monsters.length > 1)) {\r\n                var selector = null;\r\n                if (this.getHelpOptionsForPage(this.state.page).length > 1) {\r\n                    var options = this.getHelpOptionsForPage(this.state.page).map(s => {\r\n                        return {\r\n                            id: s,\r\n                            text: s\r\n                        };\r\n                    });\r\n                    selector = (\r\n                        <Selector\r\n                            tabs={false}\r\n                            options={options}\r\n                            selectedID={this.state.helpSection}\r\n                            select={optionID => this.setHelpSection(optionID)}\r\n                        />\r\n                    );\r\n                }\r\n\r\n                help = (\r\n                    <div className=\"monster-help\">\r\n                        <div className=\"subheading\">information from similar monsters</div>\r\n                        {selector}\r\n                        {this.getHelpSection(monsters)}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            var monsterList = null;\r\n            if (this.props.showMonsters) {\r\n                monsterList = (\r\n                    <div className=\"columns small-4 medium-4 large-4 scrollable\">\r\n                        {this.getFilterCard(monsters)}\r\n                        {this.getMonsterCards(monsters)}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className=\"row\" style={{ height: \"100%\", margin: \"0 -15px\" }}>\r\n                    <div className={this.props.showMonsters ? \"columns small-8 medium-8 large-8 scrollable\" : \"columns small-12 medium-12 large-12 scrollable\"} style={{ transition: \"none\" }}>\r\n                        <div className=\"section\">\r\n                            <Selector\r\n                                tabs={true}\r\n                                options={pages}\r\n                                selectedID={this.state.page}\r\n                                select={optionID => this.setPage(optionID as 'overview' | 'abilities' | 'combat' | 'actions')}\r\n                            />\r\n                            {content}\r\n                            {help}\r\n                        </div>\r\n                    </div>\r\n                    {monsterList}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport { TERRAIN_TYPES, MapItem } from '../../models/models';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport Radial from '../controls/radial';\r\n\r\ninterface Props {\r\n    tile: MapItem;\r\n    changeValue: (tile: MapItem, field: string, value: string) => void;\r\n    moveMapItem: (tile: MapItem, dir: string) => void;\r\n    resizeMapItem: (tile: MapItem, dir: string, dir2: 'in' | 'out' | null) => void;\r\n    cloneMapItem: (tile: MapItem) => void;\r\n    removeMapItem: (tile: MapItem) => void;\r\n}\r\n\r\nexport default class MapTileCard extends React.Component<Props> {\r\n    render() {\r\n        try {\r\n            var terrainOptions = TERRAIN_TYPES.map(function (t) {\r\n                return { id: t, text: t };\r\n            });\r\n\r\n            return (\r\n                <div className=\"card map-tile\">\r\n                    <div className=\"heading\">\r\n                        <div className=\"title\">map tile</div>\r\n                    </div>\r\n                    <div className=\"card-content\">\r\n                        <div className=\"subheading\">size</div>\r\n                        <div className=\"section\">{this.props.tile.width} sq x {this.props.tile.height} sq</div>\r\n                        <div className=\"section\">{this.props.tile.width * 5} ft x {this.props.tile.height * 5} ft</div>\r\n                        <div className=\"divider\"></div>\r\n                        <div className=\"subheading\">terrain</div>\r\n                        <Dropdown\r\n                            options={terrainOptions}\r\n                            placeholder=\"select terrain\"\r\n                            selectedID={this.props.tile.terrain ? this.props.tile.terrain : undefined}\r\n                            select={optionID => this.props.changeValue(this.props.tile, \"terrain\", optionID)}\r\n                        />\r\n                        <div className=\"divider\"></div>\r\n                        <div className=\"subheading\">move</div>\r\n                        <div className=\"section centered\">\r\n                            <Radial direction=\"out\" click={dir => this.props.moveMapItem(this.props.tile, dir)} />\r\n                        </div>\r\n                        <div className=\"divider\"></div>\r\n                        <div className=\"subheading\">resize</div>\r\n                        <div className=\"section centered\">\r\n                            <Radial direction=\"both\" click={(dir, dir2) => this.props.resizeMapItem(this.props.tile, dir, dir2)} />\r\n                        </div>\r\n                        <div className=\"divider\"></div>\r\n                        <div className=\"section\">\r\n                            <button onClick={() => this.props.cloneMapItem(this.props.tile)}>clone tile</button>\r\n                            <button onClick={() => this.props.removeMapItem(this.props.tile)}>remove tile</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    };\r\n}","import React from 'react';\r\n\r\nimport Utils from '../../utils';\r\nimport Factory from '../../factory';\r\n\r\nimport { Map, MapItem } from '../../models/models';\r\n\r\nimport MapTileCard from '../cards/map-tile-card';\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    map: Map;\r\n}\r\n\r\ninterface State {\r\n    map: Map;\r\n    selectedTileID: string | null;\r\n}\r\n\r\nexport default class MapEditorModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            map: props.map,\r\n            selectedTileID: null\r\n        };\r\n    }\r\n\r\n    setSelectedTileID(id: string | null) {\r\n        this.setState({\r\n            selectedTileID: id\r\n        });\r\n    }\r\n\r\n    addMapTile(x: number, y: number) {\r\n        var tile = Factory.createMapItem();\r\n        tile.x = x;\r\n        tile.y = y;\r\n        tile.terrain = \"flagstone\";\r\n        this.state.map.items.push(tile);\r\n\r\n        this.setState({\r\n            map: this.state.map,\r\n            selectedTileID: tile.id\r\n        });\r\n    }\r\n\r\n    moveMapItem(item: MapItem, dir: string) {\r\n        switch (dir) {\r\n            case \"N\":\r\n                item.y -= 1;\r\n                break;\r\n            case \"E\":\r\n                item.x += 1;\r\n                break;\r\n            case \"S\":\r\n                item.y += 1;\r\n                break;\r\n            case \"W\":\r\n                item.x -= 1;\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    bigMapItem(item: MapItem, dir: string) {\r\n        switch (dir) {\r\n            case \"N\":\r\n                item.y -= 1;\r\n                item.height += 1;\r\n                break;\r\n            case \"E\":\r\n                item.width += 1;\r\n                break;\r\n            case \"S\":\r\n                item.height += 1;\r\n                break;\r\n            case \"W\":\r\n                item.x -= 1;\r\n                item.width += 1;\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    smallMapItem(item: MapItem, dir: string) {\r\n        switch (dir) {\r\n            case \"N\":\r\n                if (item.height > 1) {\r\n                    item.y += 1;\r\n                    item.height -= 1;\r\n                }\r\n                break;\r\n            case \"E\":\r\n                if (item.width > 1) {\r\n                    item.width -= 1;\r\n                }\r\n                break;\r\n            case \"S\":\r\n                if (item.height > 1) {\r\n                    item.height -= 1;\r\n                }\r\n                break;\r\n            case \"W\":\r\n                if (item.width > 1) {\r\n                    item.x += 1;\r\n                    item.width -= 1;\r\n                }\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    resizeMapItem(item: MapItem, dir: string, dir2: 'in' | 'out') {\r\n        switch (dir2) {\r\n            case \"in\":\r\n                this.smallMapItem(item, dir);\r\n                break;\r\n            case \"out\":\r\n                this.bigMapItem(item, dir);\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n    }\r\n\r\n    cloneMapItem(item: MapItem) {\r\n        var copy = JSON.parse(JSON.stringify(item));\r\n        copy.id = Utils.guid();\r\n        copy.x += 1;\r\n        copy.y += 1;\r\n        this.state.map.items.push(copy);\r\n\r\n        this.setState({\r\n            map: this.state.map,\r\n            selectedTileID: copy.id\r\n        });\r\n    }\r\n\r\n    removeMapItem(item: MapItem) {\r\n        var index = this.state.map.items.indexOf(item);\r\n        this.state.map.items.splice(index, 1);\r\n\r\n        this.setState({\r\n            map: this.state.map,\r\n            selectedTileID: null\r\n        });\r\n    }\r\n\r\n    changeValue(source: any, field: string, value: any) {\r\n        source[field] = value;\r\n        \r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    render() {\r\n        try {\r\n            var tools = null;\r\n            if (this.state.selectedTileID) {\r\n                var item = this.state.map.items.find(i => i.id === this.state.selectedTileID);\r\n                if (item) {\r\n                    tools = (\r\n                        <div className=\"tools\">\r\n                            <MapTileCard\r\n                                tile={item}\r\n                                moveMapItem={(item, dir) => this.moveMapItem(item, dir)}\r\n                                resizeMapItem={(item, dir, dir2) => this.resizeMapItem(item, dir, dir2 as 'in' | 'out')}\r\n                                cloneMapItem={item => this.cloneMapItem(item)}\r\n                                removeMapItem={item => this.removeMapItem(item)}\r\n                                changeValue={(source, field, value) => this.changeValue(source, field, value)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                }\r\n            } else {\r\n                tools = (\r\n                    <div className=\"tools\">\r\n                        <p>to add a new tile to the map, double-click on an empty grid square</p>\r\n                        <p>to edit an existing tile, click on it once to select it</p>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className=\"map-editor\">\r\n                    {tools}\r\n                    <MapPanel\r\n                        map={this.state.map}\r\n                        mode=\"edit\"\r\n                        selectedItemID={this.state.selectedTileID ? this.state.selectedTileID : undefined}\r\n                        setSelectedItemID={id => this.setSelectedTileID(id)}\r\n                        addMapTile={(x, y) => this.addMapTile(x, y)}\r\n                    />\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport Utils from '../../utils';\r\n\r\nimport { CombatSetup, Encounter, Party, MapFolio, Monster, EncounterWave, EncounterSlot } from '../../models/models';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport Selector from '../controls/selector';\r\nimport MapPanel from '../panels/map-panel';\r\nimport DifficultyChartPanel from '../panels/difficulty-chart-panel';\r\n\r\ninterface Props {\r\n    combatSetup: CombatSetup;\r\n    parties: Party[];\r\n    encounters: Encounter[];\r\n    mapFolios: MapFolio[];\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n    notify: () => void;\r\n}\r\n\r\ninterface State {\r\n    combatSetup: CombatSetup;\r\n}\r\n\r\nexport default class CombatStartModal extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        parties: null,\r\n        mapFolios: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            combatSetup: props.combatSetup\r\n        }\r\n    }\r\n\r\n    setParty(partyID: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.partyID = partyID;\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        }, () => this.props.notify());\r\n    }\r\n\r\n    setEncounter(encounterID: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.encounterID = encounterID;\r\n        var enc = this.props.encounters.find(enc => enc.id === encounterID);\r\n        if (enc) {\r\n            // eslint-disable-next-line\r\n            this.state.combatSetup.monsterNames = Utils.getMonsterNames(enc);\r\n        }\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        }, () => this.props.notify());\r\n    }\r\n\r\n    setFolioID(id: string) {\r\n        if (id && (id !== '')) {\r\n            var folio = this.props.mapFolios.find(f => f.id === id);\r\n            if (folio) {\r\n                // eslint-disable-next-line\r\n                this.state.combatSetup.folioID = folio.id;\r\n                // eslint-disable-next-line\r\n                this.state.combatSetup.mapID = folio.maps.length === 1 ? folio.maps[0].id : null;\r\n            }\r\n        } else {\r\n            // eslint-disable-next-line\r\n            this.state.combatSetup.folioID = null;\r\n            // eslint-disable-next-line\r\n            this.state.combatSetup.mapID = null;    \r\n        }\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        });\r\n    }\r\n\r\n    setMapID(id: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.mapID = id;\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        });\r\n    }\r\n\r\n    setWave(waveID: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.waveID = waveID;\r\n        var enc = this.props.encounters.find(enc => enc.id === this.state.combatSetup.encounterID);\r\n        if (enc) {\r\n            var wave = enc.waves.find(w => w.id === waveID);\r\n            if (wave) {\r\n                // eslint-disable-next-line\r\n                this.state.combatSetup.monsterNames = Utils.getMonsterNames(wave);\r\n            }\r\n        }\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        }, () => this.props.notify());\r\n    }\r\n\r\n    setEncounterInitMode(mode: 'manual' | 'individual' | 'group') {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.encounterInitMode = mode;\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        });\r\n    }\r\n\r\n    changeName(slotID: string, index: number, name: string) {\r\n        var slot = this.state.combatSetup.monsterNames.find(s => s.id === slotID);\r\n        if (slot) {\r\n            slot.names[index] = name;\r\n            this.setState({\r\n                combatSetup: this.state.combatSetup\r\n            });\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    getPartySection() {\r\n        if (this.props.parties.length === 0) {\r\n            return (\r\n                <div className=\"section\">you have not defined any parties</div>\r\n            );\r\n        }\r\n\r\n        var partyOptions = this.props.parties.map(party => {\r\n            return {\r\n                id: party.id,\r\n                text: party.name || \"unnamed party\"\r\n            };\r\n        });\r\n\r\n        var partyContent = null;\r\n        if (this.state.combatSetup.partyID) {\r\n            var selectedParty = this.props.parties.find(p => p.id === this.state.combatSetup.partyID);\r\n            if (selectedParty) {\r\n                var pcs = selectedParty.pcs.filter(pc => pc.active);\r\n\r\n                var pcSections = pcs.map(pc => \r\n                    <li key={pc.id}>\r\n                        {pc.name || \"unnamed pc\"} (level {pc.level})\r\n                    </li>\r\n                );\r\n\r\n                if (pcSections.length === 0) {\r\n                    pcSections.push(\r\n                        <li key={\"empty\"}>no pcs</li>\r\n                    );\r\n                }\r\n        \r\n                partyContent = (\r\n                    <div>\r\n                        <div className=\"subheading\">pcs</div>\r\n                        <ul>{pcSections}</ul>\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"heading\">party</div>\r\n                <Dropdown\r\n                    options={partyOptions}\r\n                    placeholder=\"select party...\"\r\n                    selectedID={this.state.combatSetup.partyID ? this.state.combatSetup.partyID : undefined}\r\n                    select={optionID => this.setParty(optionID)}\r\n                />\r\n                {partyContent}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    getEncounterSection() {\r\n        if (this.props.encounters.length === 0) {\r\n            return (\r\n                <div className=\"section\">you have not built any encounters</div>\r\n            );\r\n        }\r\n\r\n        var encounterOptions = this.props.encounters.map(encounter => {\r\n            return {\r\n                id: encounter.id,\r\n                text: encounter.name || \"unnamed encounter\"\r\n            }\r\n        });\r\n\r\n        var encounterContent = null;\r\n        if (this.state.combatSetup.encounterID) {\r\n            var selectedEncounter = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n            if (selectedEncounter) {\r\n                var monsterSections = selectedEncounter.slots.map(slot => {\r\n                    var name = slot.monsterName || \"unnamed monster\";\r\n                    if (slot.count > 1) {\r\n                        name += \" (x\" + slot.count + \")\";\r\n                    }\r\n                    return (\r\n                        <li key={slot.id}>{name}</li>\r\n                    );\r\n                });\r\n\r\n                if (monsterSections.length === 0) {\r\n                    monsterSections.push(\r\n                        <li key={\"empty\"}>no monsters</li>\r\n                    );\r\n                }\r\n\r\n                var waves = selectedEncounter.waves.map(wave => {\r\n                    if (wave.slots.length === 0) {\r\n                        return null;\r\n                    }\r\n\r\n                    var waveMonsters = wave.slots.map(slot => {\r\n                        var name = slot.monsterName || \"unnamed monster\";\r\n                        if (slot.count > 1) {\r\n                            name += \" x\" + slot.count;\r\n                        }\r\n                        return (\r\n                            <li key={slot.id}>{name}</li>\r\n                        );\r\n                    });\r\n        \r\n                    return (\r\n                        <div key={wave.id}>\r\n                            <div className=\"subheading\">{wave.name || \"unnamed wave\"}</div>\r\n                            <ul>{waveMonsters}</ul>\r\n                        </div>\r\n                    );\r\n                });\r\n        \r\n                encounterContent = (\r\n                    <div>\r\n                        <div className=\"subheading\">monsters</div>\r\n                        <ul>{monsterSections}</ul>\r\n                        {waves}\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"heading\">encounter</div>\r\n                <Dropdown\r\n                    options={encounterOptions}\r\n                    placeholder=\"select encounter...\"\r\n                    selectedID={this.state.combatSetup.encounterID ? this.state.combatSetup.encounterID : undefined}\r\n                    select={optionID => this.setEncounter(optionID)}\r\n                />\r\n                {encounterContent}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    getMapSection() {\r\n        var folios = this.props.mapFolios.filter(folio => folio.maps.length > 0);\r\n        if (folios.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        var folioOptions = [{\r\n            id: '',\r\n            text: \"none\"\r\n        }].concat(folios.map(folio => {\r\n            return {\r\n                id: folio.id,\r\n                text:folio.name || \"unnamed folio\"\r\n            };\r\n        }));\r\n\r\n        var selectMapSection = null;\r\n        var thumbnailSection = null;\r\n\r\n        if (this.state.combatSetup.folioID) {\r\n            var folio = this.props.mapFolios.find(f => f.id === this.state.combatSetup.folioID);\r\n            if (folio) {\r\n                var mapOptions = folio.maps.map(m => {\r\n                    return {\r\n                        id: m.id,\r\n                        text: m.name || \"unnamed map\"\r\n                    };\r\n                });            \r\n\r\n                if (mapOptions.length !== 1) {\r\n                    selectMapSection = (\r\n                        <Selector\r\n                            options={mapOptions}\r\n                            selectedID={this.state.combatSetup.mapID}\r\n                            select={optionID => this.setMapID(optionID)}\r\n                        />\r\n                    );\r\n                }\r\n\r\n                if (this.state.combatSetup.mapID) {\r\n                    var map = folio.maps.find(m => m.id === this.state.combatSetup.mapID);\r\n                    if (map) {\r\n                        thumbnailSection = (\r\n                            <MapPanel\r\n                                map={map}\r\n                                mode=\"thumbnail\"\r\n                            />\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"heading\">map</div>\r\n                <Dropdown\r\n                    options={folioOptions}\r\n                    placeholder=\"select map folio...\"\r\n                    selectedID={this.state.combatSetup.folioID ? this.state.combatSetup.folioID : undefined}\r\n                    select={optionID => this.setFolioID(optionID)}\r\n                />\r\n                {selectMapSection}\r\n                {thumbnailSection}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    getWaveSection() {\r\n        if (this.state.combatSetup.encounterID === null) {\r\n            return (\r\n                <div className=\"section\">you have not selected an encounter</div>\r\n            );\r\n        }\r\n\r\n        var selectedEncounter = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n        if (selectedEncounter) {\r\n            if (selectedEncounter.waves.length === 0) {\r\n                return (\r\n                    <div className=\"section\">you have not defined any waves</div>\r\n                );\r\n            }\r\n\r\n            var waveOptions = selectedEncounter.waves.map(wave => {\r\n                return {\r\n                    id: wave.id,\r\n                    text: wave.name || \"unnamed wave\"\r\n                };\r\n            });\r\n\r\n            var waveContent = null;\r\n            if (this.state.combatSetup.waveID) {\r\n                var selectedWave = selectedEncounter.waves.find(w => w.id === this.state.combatSetup.waveID);\r\n                if (selectedWave) {\r\n                    var monsterSections = selectedWave.slots.map(slot => {\r\n                        var name = slot.monsterName || \"unnamed monster\";\r\n                        if (slot.count > 1) {\r\n                            name += \" (x\" + slot.count + \")\";\r\n                        }\r\n                        return (\r\n                            <li key={slot.id}>{name}</li>\r\n                        );\r\n                    });\r\n\r\n                    if (monsterSections.length === 0) {\r\n                        monsterSections.push(\r\n                            <li key={\"empty\"}>no monsters</li>\r\n                        );\r\n                    }\r\n            \r\n                    waveContent = (\r\n                        <div>\r\n                            <div className=\"subheading\">monsters</div>\r\n                            <ul>{monsterSections}</ul>\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n\r\n            return (\r\n                <div>\r\n                    <div className=\"heading\">wave</div>\r\n                    <Dropdown\r\n                        options={waveOptions}\r\n                        placeholder=\"select wave...\"\r\n                        selectedID={this.state.combatSetup.waveID ? this.state.combatSetup.waveID : undefined}\r\n                        select={optionID => this.setWave(optionID)}\r\n                    />\r\n                    {waveContent}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    getDifficultySection() {\r\n        var party = this.props.parties.find(p => p.id === this.state.combatSetup.partyID);\r\n        var encounter = this.props.encounters.find(enc => enc.id === this.state.combatSetup.encounterID);\r\n\r\n        if (party && encounter) {\r\n            return (\r\n                <div>\r\n                    <div className=\"heading\">encounter difficulty</div>\r\n                    <DifficultyChartPanel\r\n                        party={party}\r\n                        encounter={encounter}\r\n                        getMonster={(monsterName, monsterGroupName) => this.props.getMonster(monsterName, monsterGroupName)}\r\n                    />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"heading\">encounter difficulty</div>\r\n                <div className=\"section\">select a party and an encounter on the left to see difficulty information.</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    getMonsterSection() {\r\n        if (this.state.combatSetup.encounterID === null) {\r\n            return (\r\n                <div>\r\n                    <div className=\"heading\">monsters</div>\r\n                    <div className=\"section\">select an encounter to see monster options here.</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (!this.props.parties && this.state.combatSetup.waveID === null) {\r\n            return (\r\n                <div>\r\n                    <div className=\"heading\">monsters</div>\r\n                    <div className=\"section\">select a wave to see monster options here.</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        var selectedEncounter = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n        if (selectedEncounter) {\r\n            var slotsContainer: { slots: EncounterSlot[] } = selectedEncounter;\r\n            if (this.state.combatSetup.waveID) {\r\n                var selectedWave = selectedEncounter.waves.find(w => w.id === this.state.combatSetup.waveID);\r\n                if (selectedWave) {\r\n                    slotsContainer = selectedWave;\r\n                }\r\n            }\r\n\r\n            if (slotsContainer.slots.length === 0) {\r\n                return null;\r\n            }\r\n\r\n            var initOptions = [\r\n                {\r\n                    id: \"manual\",\r\n                    text: \"enter manually\"\r\n                },\r\n                {\r\n                    id: \"individual\",\r\n                    text: \"roll individually\"\r\n                },\r\n                {\r\n                    id: \"group\",\r\n                    text: \"roll in groups\"\r\n                }\r\n            ];\r\n\r\n            var names = this.state.combatSetup.monsterNames.map(slotNames => {\r\n                var slot = slotsContainer.slots.find(s => s.id === slotNames.id);\r\n                if (slot) {\r\n                    var inputs = [];\r\n                    for (var n = 0; n !== slotNames.names.length; ++n) {\r\n                        inputs.push(\r\n                            <div key={n}>\r\n                                <MonsterName\r\n                                    value={slotNames.names[n]}\r\n                                    slotID={slot.id}\r\n                                    index={n}\r\n                                    changeName={(slotID, index, value) => this.changeName(slotID, index, value)}\r\n                                />\r\n                            </div>\r\n                        );\r\n                    }\r\n                    return (\r\n                        <div key={slotNames.id} className=\"name-row\">\r\n                            <div className=\"name-label\">\r\n                                {slot.monsterName}\r\n                            </div>\r\n                            <div className=\"name-inputs\">\r\n                                {inputs}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n            });\r\n\r\n            return (\r\n                <div>\r\n                    <div className=\"heading\">monsters</div>\r\n                    <div className=\"subheading\">initiative</div>\r\n                    <Selector\r\n                        options={initOptions}\r\n                        selectedID={this.state.combatSetup.encounterInitMode}\r\n                        select={optionID => this.setEncounterInitMode(optionID as 'manual' | 'individual' | 'group')}\r\n                    />\r\n                    <div className=\"subheading\">names</div>\r\n                    <div>{names}</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    render() {\r\n        try {\r\n            var leftSection = null;\r\n            var rightSection = null;\r\n\r\n            if (this.props.parties) {\r\n                leftSection = (\r\n                    <div>\r\n                        {this.getPartySection()}\r\n                        {this.getEncounterSection()}\r\n                        {this.getMapSection()}\r\n                    </div>\r\n                );\r\n    \r\n                rightSection = (\r\n                    <div>\r\n                        {this.getDifficultySection()}\r\n                        {this.getMonsterSection()}\r\n                    </div>\r\n                );\r\n            } else {\r\n                leftSection = (\r\n                    <div>\r\n                        {this.getWaveSection()}\r\n                    </div>\r\n                );\r\n    \r\n                rightSection = (\r\n                    <div>\r\n                        {this.getMonsterSection()}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className=\"row\" style={{ height: \"100%\", margin: \"0 -15px\" }}>\r\n                    <div className=\"column small-6 medium-6 large-6 scrollable\">\r\n                        {leftSection}\r\n                    </div>\r\n                    <div className=\"column small-6 medium-6 large-6 scrollable\">\r\n                        {rightSection}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface MonsterNameProps {\r\n    slotID: string;\r\n    index: number;\r\n    value: string;\r\n    changeName: (slotID: string, index: number, value: string) => void;\r\n}\r\n\r\nclass MonsterName extends React.Component<MonsterNameProps> {\r\n    render() {\r\n        return (\r\n            <input type=\"text\" value={this.props.value} onChange={event => this.props.changeName(this.props.slotID, this.props.index, event.target.value)} />\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\ninterface Props {\r\n    items: { id: string; text: string; details: JSX.Element | string; disabled?: boolean }[];\r\n    selectedItemID: string | null;\r\n    select: (itemID: string) => void;\r\n}\r\n\r\nexport default class RadioGroup extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        // No default property values\r\n    };\r\n\r\n    render() {\r\n        try {\r\n            var content = this.props.items.map(item => {\r\n                return (\r\n                    <RadioGroupItem\r\n                        key={item.id}\r\n                        item={item}\r\n                        selected={this.props.selectedItemID === item.id}\r\n                        select={(itemID: string) => this.props.select(itemID)}\r\n                    />\r\n                );\r\n            });\r\n\r\n            return (\r\n                <div className=\"radio-group\">\r\n                    {content}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface RadioGroupItemProps {\r\n    item: { id: string; text: string; details: JSX.Element | string; disabled?: boolean };\r\n    selected: boolean;\r\n    select: (itemID: string) => void;\r\n}\r\n\r\nclass RadioGroupItem extends React.Component<RadioGroupItemProps> {\r\n    render() {\r\n        var style = \"radio-item\";\r\n        var details = null;\r\n\r\n        if (this.props.selected) {\r\n            style += \" selected\";\r\n            details = (\r\n                <div className=\"radio-item-details\">\r\n                    {this.props.item.details}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (this.props.item.disabled) {\r\n            style += \" disabled\";\r\n        }\r\n\r\n        return (\r\n            <div className={style} onClick={() => this.props.select(this.props.item.id)}>\r\n                <div className=\"radio-item-text\">{this.props.item.text}</div>\r\n                {details}\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nimport Utils from '../../utils';\r\nimport Factory from '../../factory';\r\n\r\nimport { CONDITION_TYPES, Condition, Monster, Combatant, Combat, ConditionDurationSaves, ConditionDurationCombatant } from '../../models/models';\r\n\r\nimport Spin from '../controls/spin';\r\nimport Selector from '../controls/selector';\r\nimport Dropdown from '../controls/dropdown';\r\nimport RadioGroup from '../controls/radio-group';\r\n\r\ninterface Props {\r\n    condition: Condition;\r\n    combatant: Combatant & Monster;\r\n    combat: Combat;\r\n}\r\n\r\ninterface State {\r\n    condition: Condition;\r\n}\r\n\r\nexport default class ConditionModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            condition: props.condition,\r\n        };\r\n    }\r\n\r\n    setCondition(conditionName: string) {\r\n        // eslint-disable-next-line\r\n        this.state.condition.name = conditionName;\r\n        // eslint-disable-next-line\r\n        this.state.condition.level = 1;\r\n        // eslint-disable-next-line\r\n        this.state.condition.text = conditionName === \"custom\" ? \"custom condition\" : null;\r\n\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    setDuration(durationType: 'saves' | 'combatant' | 'rounds') {\r\n        var duration = null;\r\n\r\n        switch (durationType) {\r\n            case \"saves\":\r\n                duration = Factory.createConditionDurationSaves();\r\n                break;\r\n            case \"combatant\":\r\n                duration = Factory.createConditionDurationCombatant();\r\n                break;\r\n            case \"rounds\":\r\n                duration = Factory.createConditionDurationRounds();\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        // eslint-disable-next-line\r\n        this.state.condition.duration = duration;\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    changeValue(object: any, field: string, value: any) {\r\n        object[field] = value;\r\n\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    nudgeValue(object: any, field: string, delta: number) {\r\n        var value = object[field] + delta;\r\n        if (field === \"level\") {\r\n            value = Math.max(value, 1);\r\n            value = Math.min(value, 6);\r\n        }\r\n        if (field === \"count\") {\r\n            value = Math.max(value, 1);\r\n        }\r\n        if (field === \"saveDC\") {\r\n            value = Math.max(value, 0);\r\n        }\r\n        object[field] = value;\r\n\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    render() {\r\n        try {\r\n            var conditions = CONDITION_TYPES.map(condition => {\r\n                var controls = [];\r\n                var description = [];\r\n                if (condition === this.state.condition.name) {\r\n                    if (condition === \"custom\") {\r\n                        controls.push(\r\n                            <input type=\"text\" placeholder=\"custom condition\" value={this.state.condition.text ? this.state.condition.text : ''} onChange={event => this.changeValue(this.state.condition, \"text\", event.target.value)} />\r\n                        );\r\n                    }\r\n                    if (condition === \"exhaustion\") {\r\n                        controls.push(\r\n                            <Spin\r\n                                key=\"exhaustion-spin\"\r\n                                source={this.props.condition}\r\n                                name=\"level\"\r\n                                label=\"exhaustion\"\r\n                                nudgeValue={delta => this.nudgeValue(this.props.condition, \"level\", delta)}\r\n                            />\r\n                        );\r\n                    }\r\n                    var text = Utils.conditionText(this.state.condition);\r\n                    for (var n = 0; n !== text.length; ++n) {\r\n                        description.push(<li key={n} className=\"section\">{text[n]}</li>);\r\n                    }\r\n                }\r\n\r\n                return {\r\n                    id: condition,\r\n                    text: condition,\r\n                    details: (\r\n                        <div key={condition}>\r\n                            {controls}\r\n                            <ul>\r\n                                {description}\r\n                            </ul>\r\n                        </div>\r\n                    ),\r\n                    disabled: this.props.combatant.conditionImmunities ? this.props.combatant.conditionImmunities.indexOf(condition) !== -1 : false\r\n                };\r\n            });\r\n\r\n            var saveOptions = [\"str\", \"dex\", \"con\", \"int\", \"wis\", \"cha\", \"death\"].map(c => { return { id: c, text: c }; });\r\n            var pointOptions = [\r\n                {\r\n                    id: \"start\",\r\n                    text: \"start of turn\"\r\n                },\r\n                {\r\n                    id: \"end\",\r\n                    text: \"end of turn\"\r\n                }\r\n            ]\r\n            var combatantOptions = this.props.combat.combatants.map(c => { return { id: c.id, text: (c.displayName || c.name || \"unnamed monster\") }; });\r\n\r\n            var durations = [\r\n                {\r\n                    id: \"none\",\r\n                    text: \"until removed (default)\",\r\n                    details: (\r\n                        <div className=\"section\">\r\n                            <div>the condition persists until it is manually removed</div>\r\n                        </div>\r\n                    )\r\n                },\r\n                {\r\n                    id: \"saves\",\r\n                    text: \"until a successful save\",\r\n                    details: (\r\n                        <div>\r\n                            <div className=\"section\">\r\n                                <div className=\"subheading\">number of saves required</div>\r\n                                <Spin\r\n                                    source={this.props.condition.duration}\r\n                                    name=\"count\"\r\n                                    nudgeValue={delta => this.nudgeValue(this.props.condition.duration, \"count\", delta)}\r\n                                />\r\n                            </div>\r\n                            <div className=\"section\">\r\n                                <div className=\"subheading\">save dc</div>\r\n                                <Spin\r\n                                    source={this.props.condition.duration}\r\n                                    name=\"saveDC\"\r\n                                    nudgeValue={delta => this.nudgeValue(this.props.condition.duration, \"saveDC\", delta)}\r\n                                />\r\n                            </div>\r\n                            <div className=\"section\">\r\n                                <div className=\"subheading\">type of save</div>\r\n                                <Selector\r\n                                    options={saveOptions}\r\n                                    selectedID={(this.props.condition.duration as ConditionDurationSaves) ? (this.props.condition.duration as ConditionDurationSaves).saveType : null}\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, \"saveType\", optionID)}\r\n                                />\r\n                            </div>\r\n                            <div className=\"section\">\r\n                                <div className=\"subheading\">make the save at the start or end of the turn</div>\r\n                                <Selector\r\n                                    options={pointOptions}\r\n                                    selectedID={(this.props.condition.duration as ConditionDurationSaves) ? (this.props.condition.duration as ConditionDurationSaves).point : null}\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, \"point\", optionID)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                },\r\n                {\r\n                    id: \"combatant\",\r\n                    text: \"until someone's next turn\",\r\n                    details: (\r\n                        <div>\r\n                            <div className=\"section\">\r\n                                <div className=\"subheading\">combatant</div>\r\n                                <Dropdown\r\n                                    options={combatantOptions}\r\n                                    selectedID={(this.props.condition.duration as ConditionDurationCombatant) ? (this.props.condition.duration as ConditionDurationCombatant).combatantID || undefined : undefined}\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, \"combatantID\", optionID)}\r\n                                />\r\n                            </div>\r\n                            <div className=\"section\">\r\n                                <div className=\"subheading\">start or end of the turn</div>\r\n                                <Selector\r\n                                    options={pointOptions}\r\n                                    selectedID={(this.props.condition.duration as ConditionDurationCombatant) ? (this.props.condition.duration as ConditionDurationCombatant).point : null}\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, \"point\", optionID)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                },\r\n                {\r\n                    id: \"rounds\",\r\n                    text: \"for a number of rounds\",\r\n                    details: (\r\n                        <div>\r\n                            <div className=\"section\">\r\n                                <div className=\"subheading\">number of rounds</div>\r\n                                <Spin\r\n                                    source={this.props.condition.duration}\r\n                                    name=\"count\"\r\n                                    nudgeValue={delta => this.nudgeValue(this.props.condition.duration, \"count\", delta)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }\r\n            ];\r\n\r\n            return (\r\n                <div className=\"condition-modal\">\r\n                    <div className=\"row\" style={{ height: \"100%\" }}>\r\n                        <div className=\"columns small-6 medium-6 large-6 scrollable\">\r\n                            <div className=\"heading\">condition</div>\r\n                            <RadioGroup\r\n                                items={conditions}\r\n                                selectedItemID={this.state.condition.name}\r\n                                select={itemID => this.setCondition(itemID)}\r\n                            />\r\n                        </div>\r\n                        <div className=\"columns small-6 medium-6 large-6 scrollable\">\r\n                            <div className=\"heading\">duration</div>\r\n                            <RadioGroup\r\n                                items={durations}\r\n                                selectedItemID={this.state.condition.duration ? this.state.condition.duration.type : \"none\"}\r\n                                select={itemID => this.setDuration(itemID as 'saves' | 'combatant' | 'rounds')}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport cog from '../../resources/images/settings.svg';\r\n\r\ninterface Props {\r\n    actions: JSX.Element | null;\r\n    blur: boolean;\r\n    openHome: () => void;\r\n    openAbout: () => void;\r\n}\r\n\r\nexport default class Titlebar extends React.Component<Props> {\r\n    render() {\r\n        try {\r\n            return (\r\n                <div className={this.props.blur ? \"titlebar blur\" : \"titlebar\"}>\r\n                    <div className=\"app-name\" onClick={() => this.props.openHome()}>dojo</div>\r\n                    {this.props.actions}\r\n                    <img className=\"settings-icon\" src={cog} title=\"about\" alt=\"about\" onClick={() => this.props.openAbout()} />\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    };\r\n}","import React from 'react';\r\nimport { Party, MonsterGroup, Encounter } from '../../models/models';\r\n\r\ninterface Props {\r\n    view: string;\r\n    blur: boolean;\r\n    library: MonsterGroup[];\r\n    parties: Party[];\r\n    encounters: Encounter[];\r\n    setView: (view: string) => void;\r\n}\r\n\r\nexport default class Navbar extends React.Component<Props> {\r\n    render() {\r\n        try {\r\n            var partiesStyle = this.props.view === \"parties\" ? \"navigator-item selected\" : \"navigator-item\";\r\n            var libraryStyle = this.props.view === \"library\" ? \"navigator-item selected\" : \"navigator-item\";\r\n            var encounterStyle = this.props.view === \"encounter\" ? \"navigator-item selected\" : \"navigator-item\";\r\n            var mapStyle = this.props.view === \"maps\" ? \"navigator-item selected\" : \"navigator-item\";\r\n            var combatStyle = this.props.view === \"combat\" ? \"navigator-item selected\" : \"navigator-item\";\r\n\r\n            var encountersEnabled = this.props.library.length !== 0;\r\n            var combatEnabled = (this.props.parties.length !== 0) && (this.props.encounters.length !== 0);\r\n            if (!encountersEnabled) {\r\n                encounterStyle += \" disabled\";\r\n            }\r\n            if (!combatEnabled) {\r\n                combatStyle += \" disabled\";\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.blur ? \"navbar blur\" : \"navbar\"}>\r\n                    <div className={partiesStyle} onClick={() => this.props.setView(\"parties\")}>player characters</div>\r\n                    <div className={libraryStyle} onClick={() => this.props.setView(\"library\")}>monster library</div>\r\n                    <div className={encounterStyle} onClick={() => encountersEnabled ? this.props.setView(\"encounter\") : null}>encounter builder</div>\r\n                    <div className={mapStyle} onClick={() => this.props.setView(\"maps\")}>map folios</div>\r\n                    <div className={combatStyle} onClick={() => combatEnabled ? this.props.setView(\"combat\") : null}>combat manager</div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    };\r\n}","import React from 'react';\r\n\r\nimport Utils from '../utils';\r\nimport Factory from '../factory';\r\n\r\nimport {\r\n    Party, PC,\r\n    MonsterGroup, Monster, Trait,\r\n    Encounter, EncounterSlot, EncounterWave,\r\n    MapFolio, Map,\r\n    CombatSetup, Combat, Combatant, Notification, Condition\r\n} from '../models/models';\r\n\r\nimport HomeScreen from './screens/home-screen';\r\nimport PartiesScreen from './screens/parties-screen';\r\nimport MonsterLibraryScreen from './screens/monster-library-screen';\r\nimport EncounterBuilderScreen from './screens/encounter-builder-screen';\r\nimport MapFoliosScreen from './screens/map-folios-screen';\r\nimport CombatManagerScreen from './screens/combat-manager-screen';\r\n\r\nimport AboutModal from './modals/about-modal';\r\nimport DemographicsModal from './modals/demographics-modal';\r\nimport MonsterEditorModal from './modals/monster-editor-modal';\r\nimport MapEditorModal from './modals/map-editor-modal';\r\nimport CombatStartModal from './modals/combat-start-modal';\r\nimport ConditionModal from './modals/condition-modal';\r\n\r\nimport Titlebar from './panels/titlebar';\r\nimport Navbar from './panels/navbar';\r\n\r\nimport Checkbox from './controls/checkbox';\r\n\r\nimport close from \"../resources/images/close-black.svg\";\r\nimport monsters from '../resources/data/monsters.json';\r\n\r\ninterface Props {\r\n    // No props; this is the root component\r\n}\r\n\r\ninterface State {\r\n    view: string;\r\n    options: {\r\n        showHelp: boolean;\r\n    };\r\n\r\n    parties: Party[];\r\n    library: MonsterGroup[];\r\n    encounters: Encounter[];\r\n    mapFolios: MapFolio[];\r\n    combats: Combat[];\r\n\r\n    selectedPartyID: string | null;\r\n    selectedMonsterGroupID: string | null;\r\n    selectedEncounterID: string | null;\r\n    selectedMapFolioID: string | null;\r\n    selectedCombatID: string | null;\r\n\r\n    modal: any;\r\n\r\n    libraryFilter: string;\r\n}\r\n\r\nexport default class Dojo extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            view: \"home\",\r\n            options: {\r\n                showHelp: true\r\n            },\r\n            parties: [],\r\n            library: [],\r\n            encounters: [],\r\n            mapFolios: [],\r\n            combats: [],\r\n            selectedPartyID: null,\r\n            selectedMonsterGroupID: null,\r\n            selectedEncounterID: null,\r\n            selectedMapFolioID: null,\r\n            selectedCombatID: null,\r\n            modal: null,\r\n            libraryFilter: ''\r\n        };\r\n\r\n        try {\r\n            var data: State | null = null;\r\n\r\n            try {\r\n                var json = window.localStorage.getItem('data');\r\n                if (json) {\r\n                    data = JSON.parse(json);\r\n                }\r\n            } catch (ex) {\r\n                console.error(\"Could not parse JSON: \", ex);\r\n                data = null;\r\n            }\r\n\r\n            if (data !== null) {\r\n                if (!data.mapFolios) {\r\n                    data.mapFolios = [];\r\n                    data.selectedMapFolioID = null;\r\n                }\r\n\r\n                data.encounters.forEach(enc => {\r\n                    if (!enc.waves) {\r\n                        enc.waves = [];\r\n                    }\r\n                });\r\n\r\n                data.combats.forEach(c => {\r\n                    if (!c.notifications) {\r\n                        c.notifications = [];\r\n                    }\r\n                    c.combatants.forEach(c => {\r\n                        if (c.altitude === undefined) {\r\n                            c.altitude = 0;\r\n                        }\r\n                    });\r\n                });\r\n\r\n                data.view = 'home';\r\n                data.modal = null;\r\n                data.libraryFilter = '';\r\n\r\n                this.state = data;\r\n            }\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            /*\r\n            this.state.parties = [];\r\n            this.state.library = [];\r\n            this.state.encounters = [];\r\n            this.state.mapFolios = [];\r\n            this.state.combats = [];\r\n            this.state.selectedPartyID = null;\r\n            this.state.selectedMonsterGroupID = null;\r\n            this.state.selectedEncounterID = null;\r\n            this.state.selectedMapFolioID = null;\r\n            this.state.selectedCombatID = null;\r\n            */\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        var json = null;\r\n        try {\r\n            json = JSON.stringify(this.state);\r\n        } catch (ex) {\r\n            console.error(\"Could not stringify data: \", ex);\r\n            json = null;\r\n        }\r\n\r\n        if (json !== null) {\r\n            window.localStorage.setItem('data', json);\r\n        }\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////////\r\n    // Party screen\r\n\r\n    addParty() {\r\n        var party = Factory.createParty();\r\n        party.name = 'new party';\r\n        var parties: Party[] = ([] as Party[]).concat(this.state.parties, [party]);\r\n        Utils.sort(parties);\r\n        this.setState({\r\n            parties: parties,\r\n            selectedPartyID: party.id\r\n        });\r\n    }\r\n\r\n    removeParty() {\r\n        var party = this.getParty(this.state.selectedPartyID);\r\n        if (party) {\r\n            var index = this.state.parties.indexOf(party);\r\n            this.state.parties.splice(index, 1);\r\n            this.setState({\r\n                parties: this.state.parties,\r\n                selectedPartyID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    addPC() {\r\n        var party = this.getParty(this.state.selectedPartyID);\r\n        if (party) {\r\n            var pc = Factory.createPC();\r\n            pc.name = 'new pc';\r\n            party.pcs.push(pc);\r\n            this.setState({\r\n                parties: this.state.parties\r\n            });\r\n        }\r\n    }\r\n\r\n    removePC(pc: PC) {\r\n        var party = this.getParty(this.state.selectedPartyID);\r\n        if (party) {\r\n            var index = party.pcs.indexOf(pc);\r\n            party.pcs.splice(index, 1);\r\n            this.setState({\r\n                parties: this.state.parties\r\n            });\r\n        }\r\n    }\r\n\r\n    sortPCs() {\r\n        var party = this.getParty(this.state.selectedPartyID);\r\n        if (party) {\r\n            Utils.sort(party.pcs);\r\n            this.setState({\r\n                parties: this.state.parties\r\n            });\r\n        }\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////////\r\n    // Library screen\r\n\r\n    addMonsterGroup() {\r\n        var group = Factory.createMonsterGroup();\r\n        group.name = 'new group';\r\n        var library = ([] as MonsterGroup[]).concat(this.state.library, [group]);\r\n        Utils.sort(library);\r\n        this.setState({\r\n            library: library,\r\n            selectedMonsterGroupID: group.id\r\n        });\r\n    }\r\n\r\n    removeMonsterGroup() {\r\n        var group = this.getMonsterGroup(this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            var index = this.state.library.indexOf(group);\r\n            this.state.library.splice(index, 1);\r\n            this.setState({\r\n                library: this.state.library,\r\n                selectedMonsterGroupID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    addMonster() {\r\n        var monster = Factory.createMonster();\r\n        monster.name = 'new monster';\r\n        var group = this.getMonsterGroup(this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            group.monsters.push(monster);\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    removeMonster(monster: Monster) {\r\n        var group = this.getMonsterGroup(this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            var index = group.monsters.indexOf(monster);\r\n            group.monsters.splice(index, 1);\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    sortMonsters() {\r\n        var group = this.getMonsterGroup(this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            Utils.sort(group.monsters);\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    moveToGroup(monster: Monster, groupID: string) {\r\n        var sourceGroup = this.findMonster(monster);\r\n        if (sourceGroup) {\r\n            var index = sourceGroup.monsters.indexOf(monster);\r\n\r\n            sourceGroup.monsters.splice(index, 1);\r\n            var group = this.getMonsterGroup(groupID);\r\n            if (group) {\r\n                group.monsters.push(monster);\r\n                Utils.sort(group.monsters);\r\n\r\n                this.setState({\r\n                    library: this.state.library\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    editMonster(monster: Monster) {\r\n        var copy = JSON.parse(JSON.stringify(monster));\r\n        this.setState({\r\n            modal: {\r\n                type: \"monster\",\r\n                monster: copy,\r\n                showMonsters: false\r\n            }\r\n        });\r\n    }\r\n\r\n    saveMonster() {\r\n        var group = this.getMonsterGroup(this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            var original = group.monsters.find(m => m.id === this.state.modal.monster.id);\r\n            if (original) {\r\n                var index = group.monsters.indexOf(original);\r\n                group.monsters[index] = this.state.modal.monster;\r\n                this.setState({\r\n                    library: this.state.library,\r\n                    modal: null\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    toggleShowSimilarMonsters() {\r\n        // eslint-disable-next-line\r\n        this.state.modal.showMonsters = !this.state.modal.showMonsters;\r\n        this.setState({\r\n            modal: this.state.modal\r\n        });\r\n    }\r\n\r\n    openDemographics() {\r\n        this.setState({\r\n            modal: {\r\n                type: \"demographics\"\r\n            }\r\n        });\r\n    }\r\n\r\n    cloneMonster(monster: Monster, name: string) {\r\n        var group = this.findMonster(monster);\r\n        if (group) {\r\n            var clone = {\r\n                id: Utils.guid(),\r\n                type: \"monster\",\r\n                name: name || monster.name + \" copy\",\r\n                size: monster.size,\r\n                category: monster.category,\r\n                tag: monster.tag,\r\n                alignment: monster.alignment,\r\n                challenge: monster.challenge,\r\n                abilityScores: {\r\n                    str: monster.abilityScores.str,\r\n                    dex: monster.abilityScores.dex,\r\n                    con: monster.abilityScores.con,\r\n                    int: monster.abilityScores.int,\r\n                    wis: monster.abilityScores.wis,\r\n                    cha: monster.abilityScores.cha\r\n                },\r\n                ac: monster.ac,\r\n                hpMax: monster.hpMax,\r\n                hpTemp: monster.hpTemp,\r\n                hitDice: monster.hitDice,\r\n                damage: {\r\n                    resist: monster.damage.resist,\r\n                    vulnerable: monster.damage.vulnerable,\r\n                    immune: monster.damage.immune\r\n                },\r\n                savingThrows: monster.savingThrows,\r\n                speed: monster.speed,\r\n                skills: monster.skills,\r\n                senses: monster.senses,\r\n                languages: monster.languages,\r\n                equipment: monster.equipment,\r\n                traits: monster.traits.map(trait => {\r\n                    return {\r\n                        id: Utils.guid(),\r\n                        name: trait.name,\r\n                        usage: trait.usage,\r\n                        type: trait.type,\r\n                        text: trait.text\r\n                    };\r\n                }),\r\n                conditionImmunities: monster.conditionImmunities\r\n            };\r\n\r\n            group.monsters.push(clone);\r\n            Utils.sort(group.monsters);\r\n\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    addOpenGameContent() {\r\n        monsters.forEach((data: any) => {\r\n            try {\r\n                if (data.name) {\r\n                    var monster = Factory.createMonster();\r\n\r\n                    monster.type = \"monster\";\r\n                    monster.name = data.name;\r\n                    monster.size = data.size.toLowerCase();\r\n                    monster.category = data.type;\r\n                    monster.tag = data.subtype;\r\n                    monster.alignment = data.alignment;\r\n                    monster.challenge = Utils.parseChallenge(data.challenge_rating);\r\n                    monster.ac = data.armor_class;\r\n                    monster.hpMax = data.hit_points;\r\n                    monster.speed = data.speed;\r\n                    monster.senses = data.senses;\r\n                    monster.languages = data.languages;\r\n\r\n                    var index = data.hit_dice.indexOf(\"d\");\r\n                    monster.hitDice = parseInt(data.hit_dice.substring(0, index));\r\n\r\n                    monster.abilityScores.str = data.strength;\r\n                    monster.abilityScores.dex = data.dexterity;\r\n                    monster.abilityScores.con = data.constitution;\r\n                    monster.abilityScores.int = data.intelligence;\r\n                    monster.abilityScores.wis = data.wisdom;\r\n                    monster.abilityScores.cha = data.charisma;\r\n\r\n                    monster.damage.resist = data.damage_resistances;\r\n                    monster.damage.vulnerable = data.damage_vulnerabilities;\r\n                    monster.damage.immune = data.damage_immunities;\r\n                    monster.conditionImmunities = data.condition_immunities;\r\n\r\n                    var saves = [\r\n                        {\r\n                            field: \"strength_save\",\r\n                            text: \"Strength\"\r\n                        },\r\n                        {\r\n                            field: \"dexterity_save\",\r\n                            text: \"Dexterity\"\r\n                        },\r\n                        {\r\n                            field: \"constitution_save\",\r\n                            text: \"Constitution\"\r\n                        },\r\n                        {\r\n                            field: \"intelligence_save\",\r\n                            text: \"Intelligence\"\r\n                        },\r\n                        {\r\n                            field: \"wisdom_save\",\r\n                            text: \"Wisdom\"\r\n                        },\r\n                        {\r\n                            field: \"charisma_save\",\r\n                            text: \"Charisma\"\r\n                        }\r\n                    ];\r\n                    saves.forEach(save => {\r\n                        if (data[save.field]) {\r\n                            var str = save.text + \" \" + data[save.field];\r\n                            monster.savingThrows += monster.savingThrows === \"\" ? str : \", \" + str;\r\n                        }\r\n                    });\r\n\r\n                    var skills = [\r\n                        {\r\n                            field: \"acrobatics\",\r\n                            text: \"Acrobatics\"\r\n                        },\r\n                        {\r\n                            field: \"animal_handling\",\r\n                            text: \"Animal handling\"\r\n                        },\r\n                        {\r\n                            field: \"arcana\",\r\n                            text: \"Arcana\"\r\n                        },\r\n                        {\r\n                            field: \"athletics\",\r\n                            text: \"Athletics\"\r\n                        },\r\n                        {\r\n                            field: \"deception\",\r\n                            text: \"Deception\"\r\n                        },\r\n                        {\r\n                            field: \"history\",\r\n                            text: \"History\"\r\n                        },\r\n                        {\r\n                            field: \"insight\",\r\n                            text: \"Insight\"\r\n                        },\r\n                        {\r\n                            field: \"intimidation\",\r\n                            text: \"Intimidation\"\r\n                        },\r\n                        {\r\n                            field: \"investigation\",\r\n                            text: \"Investigation\"\r\n                        },\r\n                        {\r\n                            field: \"medicine\",\r\n                            text: \"Medicine\"\r\n                        },\r\n                        {\r\n                            field: \"nature\",\r\n                            text: \"Nature\"\r\n                        },\r\n                        {\r\n                            field: \"perception\",\r\n                            text: \"Perception\"\r\n                        },\r\n                        {\r\n                            field: \"performance\",\r\n                            text: \"Performance\"\r\n                        },\r\n                        {\r\n                            field: \"persuasion\",\r\n                            text: \"Persuasion\"\r\n                        },\r\n                        {\r\n                            field: \"religion\",\r\n                            text: \"Religion\"\r\n                        },\r\n                        {\r\n                            field: \"sleight_of_hand\",\r\n                            text: \"Sleight of hand\"\r\n                        },\r\n                        {\r\n                            field: \"stealth\",\r\n                            text: \"Stealth\"\r\n                        },\r\n                        {\r\n                            field: \"survival\",\r\n                            text: \"Survival\"\r\n                        }\r\n                    ];\r\n                    skills.forEach(skill => {\r\n                        if (data[skill.field]) {\r\n                            var str = skill.text + \" \" + data[skill.field];\r\n                            monster.skills += monster.skills === \"\" ? str : \", \" + str;\r\n                        }\r\n                    });\r\n\r\n                    if (data.special_abilities) {\r\n                        data.special_abilities.forEach((rawTrait: any) => {\r\n                            var trait = this.buildTrait(rawTrait, \"trait\");\r\n                            monster.traits.push(trait);\r\n                        });\r\n                    }\r\n                    if (data.actions) {\r\n                        data.actions.forEach((rawTrait: any) => {\r\n                            var trait = this.buildTrait(rawTrait, \"action\");\r\n                            monster.traits.push(trait);\r\n                        });\r\n                    }\r\n                    if (data.legendary_actions) {\r\n                        data.legendary_actions.forEach((rawTrait: any) => {\r\n                            var trait = this.buildTrait(rawTrait, \"legendary\");\r\n                            monster.traits.push(trait);\r\n                        });\r\n                    }\r\n\r\n                    var groupName = monster.tag;\r\n                    if (groupName === \"\") {\r\n                        groupName = monster.category;\r\n                    }\r\n                    if (groupName.indexOf(\"swarm\") === 0) {\r\n                        groupName = \"swarm\";\r\n                    }\r\n                    if (groupName === \"any race\") {\r\n                        groupName = \"npc\";\r\n                    }\r\n\r\n                    var group = this.getMonsterGroupByName(groupName);\r\n                    if (!group) {\r\n                        group = {\r\n                            id: Utils.guid(),\r\n                            name: groupName,\r\n                            monsters: []\r\n                        };\r\n                        this.state.library.push(group);\r\n                    }\r\n                    group.monsters.push(monster);\r\n                }\r\n            } catch (e) {\r\n                console.log(e);\r\n            }\r\n        });\r\n\r\n        Utils.sort(this.state.library);\r\n\r\n        this.setState({\r\n            view: \"library\",\r\n            library: this.state.library\r\n        });\r\n    }\r\n\r\n    buildTrait(rawTrait: any, type: 'trait' | 'action' | 'legendary' | 'lair' | 'regional'): Trait {\r\n        var name = \"\";\r\n        var usage = \"\";\r\n\r\n        var openBracket = rawTrait.name.indexOf(\"(\");\r\n        if (openBracket === -1) {\r\n            name = rawTrait.name;\r\n        } else {\r\n            var closeBracket = rawTrait.name.indexOf(\")\");\r\n            name = rawTrait.name.substring(0, openBracket - 1);\r\n            usage = rawTrait.name.substring(openBracket + 1, closeBracket);\r\n        }\r\n\r\n        return {\r\n            id: Utils.guid(),\r\n            type: type,\r\n            name: name,\r\n            usage: usage,\r\n            text: rawTrait.desc\r\n        };\r\n    };\r\n\r\n    /////////////////////////////////////////////////////////////////////////////\r\n    // Encounter screen\r\n\r\n    addEncounter() {\r\n        var encounter = Factory.createEncounter();\r\n        encounter.name = 'new encounter';\r\n        var encounters = ([] as Encounter[]).concat(this.state.encounters, [encounter]);\r\n        Utils.sort(encounters);\r\n\r\n        this.setState({\r\n            encounters: encounters,\r\n            selectedEncounterID: encounter.id\r\n        });\r\n    }\r\n\r\n    removeEncounter() {\r\n        var encounter = this.getEncounter(this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            var index = this.state.encounters.indexOf(encounter);\r\n            this.state.encounters.splice(index, 1);\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters,\r\n                selectedEncounterID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    addEncounterSlot(monster: Monster, waveID: string | null) {\r\n        var group = this.findMonster(monster);\r\n        if (group) {\r\n            var slot = Factory.createEncounterSlot();\r\n            slot.monsterGroupName = group.name;\r\n            slot.monsterName = monster.name;\r\n            var encounter = this.getEncounter(this.state.selectedEncounterID);\r\n            if (encounter) {\r\n                if (waveID !== null) {\r\n                    var wave = encounter.waves.find(w => w.id === waveID);\r\n                    if (wave) {\r\n                        wave.slots.push(slot);\r\n                        this.sortEncounterSlots(wave);\r\n                    }\r\n                } else {\r\n                    encounter.slots.push(slot);\r\n                    this.sortEncounterSlots(encounter);\r\n                }\r\n\r\n                this.setState({\r\n                    encounters: this.state.encounters\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    removeEncounterSlot(slot: EncounterSlot, waveID: string | null) {\r\n        var encounter = this.getEncounter(this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            if (waveID) {\r\n                var wave = encounter.waves.find(w => w.id === waveID);\r\n                if (wave) {\r\n                    var index = wave.slots.indexOf(slot);\r\n                    wave.slots.splice(index, 1);\r\n                }\r\n            } else {\r\n                var n = encounter.slots.indexOf(slot);\r\n                encounter.slots.splice(n, 1);\r\n            }\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters\r\n            });\r\n        }\r\n    }\r\n\r\n    sortEncounterSlots(slotContainer: { slots: EncounterSlot[] }) {\r\n        slotContainer.slots.sort((a, b) => {\r\n            var aName = a.monsterName.toLowerCase();\r\n            var bName = b.monsterName.toLowerCase();\r\n            if (aName < bName) return -1;\r\n            if (aName > bName) return 1;\r\n            return 0;\r\n        });\r\n    }\r\n\r\n    addWaveToEncounter() {\r\n        var encounter = this.getEncounter(this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            var wave = Factory.createEncounterWave();\r\n            wave.name = \"wave \" + (encounter.waves.length + 2);\r\n            encounter.waves.push(wave);\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters\r\n            });\r\n        }\r\n    }\r\n\r\n    removeWave(wave: EncounterWave) {\r\n        var encounter = this.getEncounter(this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            var index = encounter.waves.indexOf(wave);\r\n            encounter.waves.splice(index, 1);\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters\r\n            });\r\n        }\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////////\r\n    // Map screen\r\n\r\n    addMapFolio() {\r\n        var folio = Factory.createMapFolio();\r\n        folio.name = 'new folio';\r\n        var folios = ([] as MapFolio[]).concat(this.state.mapFolios, [folio]);\r\n        Utils.sort(folios);\r\n\r\n        this.setState({\r\n            mapFolios: folios,\r\n            selectedMapFolioID: folio.id\r\n        });\r\n    }\r\n\r\n    removeMapFolio() {\r\n        var folio = this.getMapFolio(this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            var index = this.state.mapFolios.indexOf(folio);\r\n            this.state.mapFolios.splice(index, 1);\r\n\r\n            this.setState({\r\n                mapFolios: this.state.mapFolios,\r\n                selectedMapFolioID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    addMap() {\r\n        var folio = this.getMapFolio(this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            var map = Factory.createMap();\r\n            map.name = 'new map';\r\n            folio.maps.push(map);\r\n\r\n            this.setState({\r\n                mapFolios: this.state.mapFolios\r\n            });\r\n        }\r\n    }\r\n\r\n    editMap(map: Map) {\r\n        var copy = JSON.parse(JSON.stringify(map));\r\n        this.setState({\r\n            modal: {\r\n                type: \"map\",\r\n                map: copy\r\n            }\r\n        });\r\n    }\r\n\r\n    saveMap() {\r\n        var folio = this.getMapFolio(this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            var original = folio.maps.find(m => m.id === this.state.modal.map.id);\r\n            if (original) {\r\n                var index = folio.maps.indexOf(original);\r\n                folio.maps[index] = this.state.modal.map;\r\n                this.setState({\r\n                    mapFolios: this.state.mapFolios,\r\n                    modal: null\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    removeMap(map: Map) {\r\n        var folio = this.getMapFolio(this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            var index = folio.maps.indexOf(map);\r\n            folio.maps.splice(index, 1);\r\n            this.setState({\r\n                mapFolios: this.state.mapFolios\r\n            });\r\n        }\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////////\r\n    // Combat screen\r\n\r\n    createCombat() {\r\n        var party = this.state.parties.length === 1 ? this.state.parties[0] : null;\r\n        var encounter = this.state.encounters.length === 1 ? this.state.encounters[0] : null;\r\n\r\n        var setup = Factory.createCombatSetup();\r\n        setup.partyID = party ? party.id : null;\r\n        setup.encounterID = encounter ? encounter.id : null;\r\n        if (encounter) {\r\n            setup.monsterNames = Utils.getMonsterNames(encounter);\r\n        }\r\n\r\n        this.setState({\r\n            modal: {\r\n                type: \"combat-start\",\r\n                combatSetup: setup\r\n            }\r\n        });\r\n    }\r\n\r\n    startCombat() {\r\n        var combatSetup: CombatSetup = this.state.modal.combatSetup;\r\n        var party = this.getParty(combatSetup.partyID);\r\n        var encounter = this.getEncounter(combatSetup.encounterID);\r\n        if (party && encounter) {\r\n            var partyName = party.name || \"unnamed party\";\r\n            var encounterName = encounter.name || \"unnamed encounter\";\r\n\r\n            var combat = Factory.createCombat();\r\n            combat.name = partyName + \" vs \" + encounterName;\r\n            combat.encounterID = encounter.id;\r\n\r\n            // Add a copy of each PC to the encounter\r\n            party.pcs.filter(pc => pc.active).forEach(pc => {\r\n                var combatant = JSON.parse(JSON.stringify(pc));\r\n\r\n                combatant.current = false;\r\n                combatant.pending = true;\r\n                combatant.active = false;\r\n                combatant.defeated = false;\r\n\r\n                combatant.displayName = pc.name;\r\n                combatant.initiative = null;\r\n                combatant.hp = null;\r\n                combatant.conditions = [];\r\n                combatant.altitude = 0;\r\n\r\n                combat.combatants.push(combatant);\r\n            });\r\n\r\n            encounter.slots.forEach(slot => {\r\n                var monster = this.getMonster(slot.monsterName, slot.monsterGroupName);\r\n                if (monster) {\r\n                    var init = parseInt(Utils.modifier(monster.abilityScores.dex));\r\n                    var groupRoll = Utils.dieRoll();\r\n\r\n                    for (var n = 0; n !== slot.count; ++n) {\r\n                        var singleRoll = Utils.dieRoll();\r\n\r\n                        var combatant = JSON.parse(JSON.stringify(monster));\r\n                        combatant.id = Utils.guid();\r\n\r\n                        combatant.displayName = null;\r\n                        if (combatSetup.monsterNames) {\r\n                            var slotNames = combatSetup.monsterNames.find(names => names.id === slot.id);\r\n                            if (slotNames) {\r\n                                combatant.displayName = slotNames.names[n];\r\n                            }\r\n                        }\r\n\r\n                        switch (combatSetup.encounterInitMode) {\r\n                            case \"manual\":\r\n                                combatant.initiative = 10;\r\n                                break;\r\n                            case \"group\":\r\n                                combatant.initiative = init + groupRoll;\r\n                                break;\r\n                            case \"individual\":\r\n                                combatant.initiative = init + singleRoll;\r\n                                break;\r\n                            default:\r\n                                // Do nothing\r\n                                break;\r\n                        }\r\n\r\n                        combatant.current = false;\r\n                        combatant.pending = (combatSetup.encounterInitMode === \"manual\");\r\n                        combatant.active = (combatSetup.encounterInitMode !== \"manual\");\r\n                        combatant.defeated = false;\r\n            \r\n                        combatant.hp = combatant.hpMax;\r\n                        combatant.conditions = [];\r\n                        combatant.altitude = 0;\r\n\r\n                        combat.combatants.push(combatant);\r\n                    }\r\n                } else {\r\n                    combat.issues.push(\"unknown monster: \" + slot.monsterName + \" in group \" + slot.monsterGroupName);\r\n                }\r\n            });\r\n\r\n            combat.combatants.forEach(c => c.altitude = 0);\r\n\r\n            this.sortCombatants(combat);\r\n\r\n            if (combatSetup.folioID && combatSetup.mapID) {\r\n                var folio = this.getMapFolio(combatSetup.folioID);\r\n                if (folio) {\r\n                    var map = folio.maps.find(m => m.id === combatSetup.mapID);\r\n                    if (map) {\r\n                        combat.map = JSON.parse(JSON.stringify(map));\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.setState({\r\n                combats: ([] as Combat[]).concat(this.state.combats, [combat]),\r\n                selectedCombatID: combat.id,\r\n                modal: null\r\n            });\r\n        }\r\n    }\r\n\r\n    openWaveModal() {\r\n        var combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat) {\r\n            var encounter = this.getEncounter(combat.encounterID);\r\n            if (encounter) {\r\n                var setup = Factory.createCombatSetup();\r\n                setup.encounterID = combat.encounterID;\r\n                setup.monsterNames = Utils.getMonsterNames(encounter);\r\n\r\n                this.setState({\r\n                    modal: {\r\n                        type: \"combat-wave\",\r\n                        combatSetup: setup\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    pauseCombat() {\r\n        var combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat) {\r\n            combat.timestamp = new Date().toLocaleString();\r\n            this.setState({\r\n                combats: this.state.combats,\r\n                selectedCombatID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    resumeCombat(combat: Combat) {\r\n        this.setState({\r\n            selectedCombatID: combat.id\r\n        });\r\n    }\r\n\r\n    endCombat() {\r\n        var combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat) {\r\n            var index = this.state.combats.indexOf(combat);\r\n            this.state.combats.splice(index, 1);\r\n            this.setState({\r\n                combats: this.state.combats,\r\n                selectedCombatID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    makeCurrent(combatant: (Combatant & PC) | (Combatant & Monster) | null, newRound: boolean) {\r\n        var combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat) {\r\n            // Handle start-of-turn conditions\r\n            combat.combatants.filter(actor => actor.conditions).forEach(actor => {\r\n                actor.conditions.forEach(c => {\r\n                    if (c.duration) {\r\n                        switch (c.duration.type) {\r\n                            case \"saves\":\r\n                                // If it's my condition, and point is START, notify the user\r\n                                if (combat && combatant && (actor.id === combatant.id) && (c.duration.point === \"start\")) {\r\n                                    combat.notifications.push({\r\n                                        id: Utils.guid(),\r\n                                        type: \"condition-save\",\r\n                                        condition: c,\r\n                                        combatant: combatant as Combatant & Monster\r\n                                    });\r\n                                }\r\n                                break;\r\n                            case \"combatant\":\r\n                                // If this refers to me, and point is START, remove it\r\n                                if (combat && combatant && (c.duration.combatantID === combatant.id) && (c.duration.point === \"start\")) {\r\n                                    var index = actor.conditions.indexOf(c);\r\n                                    actor.conditions.splice(index, 1);\r\n                                    // Notify the user\r\n                                    combat.notifications.push({\r\n                                        id: Utils.guid(),\r\n                                        type: \"condition-end\",\r\n                                        condition: c,\r\n                                        combatant: combatant as Combatant & Monster\r\n                                    });\r\n                                }\r\n                                break;\r\n                            case \"rounds\":\r\n                                // If it's my condition, decrement the condition\r\n                                if (combatant && (actor.id === combatant.id)) {\r\n                                    c.duration.count -= 1;\r\n                                }\r\n                                // If it's now at 0, remove it\r\n                                if (c.duration.count === 0) {\r\n                                    var n = actor.conditions.indexOf(c);\r\n                                    actor.conditions.splice(n, 1);\r\n                                    if (combat) {\r\n                                        // Notify the user\r\n                                        combat.notifications.push({\r\n                                            id: Utils.guid(),\r\n                                            type: \"condition-end\",\r\n                                            condition: c,\r\n                                            combatant: combatant as Combatant & Monster\r\n                                        });\r\n                                    }\r\n                                }\r\n                                break;\r\n                            default:\r\n                                // Do nothing\r\n                                break;\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n\r\n            combat.combatants.forEach(combatant => {\r\n                combatant.current = false;\r\n            });\r\n            if (combatant) {\r\n                combatant.current = true;\r\n            }\r\n\r\n            if (newRound) {\r\n                combat.round += 1;\r\n            }\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    makeActive(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        var combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat) {\r\n            combatant.pending = false;\r\n            combatant.active = true;\r\n            combatant.defeated = false;\r\n\r\n            this.sortCombatants(combat);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    makeDefeated(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        combatant.pending = false;\r\n        combatant.active = false;\r\n        combatant.defeated = true;\r\n\r\n        if (combatant.current) {\r\n            this.endTurn(combatant);\r\n        } else {\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    addWaveToCombat() {\r\n        var combatSetup: CombatSetup = this.state.modal.combat;\r\n        var encounter = this.getEncounter(combatSetup.encounterID);\r\n        var combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combatSetup && encounter && combat) {\r\n            var wave = encounter.waves.find(w => w.id === combatSetup.waveID);\r\n            if (wave) {\r\n                wave.slots.forEach(slot => {\r\n                    var monster = this.getMonster(slot.monsterName, slot.monsterGroupName);\r\n                    if (monster) {\r\n                        var init = parseInt(Utils.modifier(monster.abilityScores.dex));\r\n                        var groupRoll = Utils.dieRoll();\r\n\r\n                        for (var n = 0; n !== slot.count; ++n) {\r\n                            var singleRoll = Utils.dieRoll();\r\n\r\n                            var combatant = JSON.parse(JSON.stringify(monster));\r\n                            combatant.id = Utils.guid();\r\n\r\n                            combatant.displayName = null;\r\n                            if (combatSetup.monsterNames) {\r\n                                var slotNames = combatSetup.monsterNames.find(names => names.id === slot.id);\r\n                                if (slotNames) {\r\n                                    combatant.displayName = slotNames.names[n];\r\n                                }\r\n                            }\r\n\r\n                            switch (combatSetup.encounterInitMode) {\r\n                                case \"manual\":\r\n                                    combatant.initiative = 10;\r\n                                    break;\r\n                                case \"group\":\r\n                                    combatant.initiative = init + groupRoll;\r\n                                    break;\r\n                                case \"individual\":\r\n                                    combatant.initiative = init + singleRoll;\r\n                                    break;\r\n                                default:\r\n                                    // Do nothing\r\n                                    break;\r\n                            }\r\n\r\n                            combatant.current = false;\r\n                            combatant.pending = (this.state.modal.combat.encounterInitMode === \"manual\");\r\n                            combatant.active = (this.state.modal.combat.encounterInitMode !== \"manual\");\r\n                            combatant.defeated = false;\r\n                \r\n                            combatant.hp = combatant.hpMax;\r\n                            combatant.conditions = [];\r\n\r\n                            if (combat) {\r\n                                combat.combatants.push(combatant);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (combat) {\r\n                            var issue = \"unknown monster: \" + slot.monsterName + \" in group \" + slot.monsterGroupName;\r\n                            combat.issues.push(issue);\r\n                        }\r\n                    }\r\n                });\r\n\r\n                this.sortCombatants(combat);\r\n\r\n                this.setState({\r\n                    combats: this.state.combats,\r\n                    modal: null\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    removeCombatant(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        var combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat) {\r\n            var index = combat.combatants.indexOf(combatant);\r\n            combat.combatants.splice(index, 1);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    mapAdd(combatant: ((Combatant & PC) | (Combatant & Monster)), x: number, y: number) {\r\n        var item = Factory.createMapItem();\r\n        item.id = combatant.id;\r\n        item.type = combatant.type as 'pc' | 'monster';\r\n        item.x = x;\r\n        item.y = y;\r\n        var size = 1;\r\n        if (combatant.type === 'monster') {\r\n            size = Utils.miniSize((combatant as Monster).size);\r\n        }\r\n        item.height = size;\r\n        item.width = size;\r\n\r\n        var combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat && combat.map) {\r\n            combat.map.items.push(item);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    mapMove(combatant: (Combatant & PC) | (Combatant & Monster), dir: string) {\r\n        var combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat && combat.map) {\r\n            var item = combat.map.items.find(i => i.id === combatant.id);\r\n            if (item) {\r\n                switch (dir) {\r\n                    case 'N':\r\n                        item.y -= 1;\r\n                        break;\r\n                    case 'NE':\r\n                        item.x += 1;\r\n                        item.y -= 1;\r\n                        break;\r\n                    case 'E':\r\n                        item.x += 1;\r\n                        break;\r\n                    case 'SE':\r\n                        item.x += 1;\r\n                        item.y += 1;\r\n                        break;\r\n                    case 'S':\r\n                        item.y += 1;\r\n                        break;\r\n                    case 'SW':\r\n                        item.x -= 1;\r\n                        item.y += 1;\r\n                        break;\r\n                    case 'W':\r\n                        item.x -= 1;\r\n                        break;\r\n                    case 'NW':\r\n                        item.x -= 1;\r\n                        item.y -= 1;\r\n                        break;\r\n                    default:\r\n                        // Do nothing\r\n                        break;\r\n                }\r\n\r\n                this.setState({\r\n                    combats: this.state.combats\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    mapRemove(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        var combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat && combat.map) {\r\n            var item = combat.map.items.find(i => i.id === combatant.id);\r\n            if (item) {\r\n                var index = combat.map.items.indexOf(item);\r\n                combat.map.items.splice(index, 1);\r\n\r\n                this.setState({\r\n                    combats: this.state.combats\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    endTurn(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        var combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat) {\r\n            // Handle end-of-turn conditions\r\n            combat.combatants.filter(actor => actor.conditions).forEach(actor => {\r\n                actor.conditions.forEach(c => {\r\n                    if (c.duration) {\r\n                        switch (c.duration.type) {\r\n                            case \"saves\":\r\n                                // If it's my condition, and point is END, notify the user\r\n                                if (combat && (actor.id === combatant.id) && (c.duration.point === \"end\")) {\r\n                                    var saveNotification = Factory.createNotification();\r\n                                    saveNotification.type = \"condition-save\";\r\n                                    saveNotification.condition = c;\r\n                                    saveNotification.combatant = combatant as Combatant & Monster;\r\n                                    combat.notifications.push(saveNotification);\r\n                                }\r\n                                break;\r\n                            case \"combatant\":\r\n                                // If this refers to me, and point is END, remove it\r\n                                if (combat && (c.duration.combatantID === combatant.id) && (c.duration.point === \"end\")) {\r\n                                    var index = actor.conditions.indexOf(c);\r\n                                    actor.conditions.splice(index, 1);\r\n                                    // Notify the user\r\n                                    var endNotification = Factory.createNotification();\r\n                                    endNotification.type = \"condition-end\";\r\n                                    endNotification.condition = c;\r\n                                    endNotification.combatant = combatant as Combatant & Monster;\r\n                                    combat.notifications.push(endNotification);\r\n                                }\r\n                                break;\r\n                            case \"rounds\":\r\n                                // We check this at the beginning of each turn, not at the end\r\n                                break;\r\n                            default:\r\n                                // Do nothing\r\n                                break;\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n\r\n            var active = combat.combatants.filter(combatant => {\r\n                return combatant.current || (!combatant.pending && combatant.active && !combatant.defeated);\r\n            });\r\n            if (active.length === 0) {\r\n                // There's no-one left in the fight\r\n                this.makeCurrent(null, false);\r\n            } else if ((active.length === 1) && (active[0].defeated)) {\r\n                // The only person in the fight is me, and I'm defeated\r\n                this.makeCurrent(null, false);\r\n            } else {\r\n                var index = active.indexOf(combatant) + 1;\r\n                var newRound = false;\r\n                if (index >= active.length) {\r\n                    index = 0;\r\n                    newRound = true;\r\n                }\r\n                this.makeCurrent(active[index], newRound);\r\n            }\r\n        }\r\n    }\r\n\r\n    changeHP(combatant: Combatant & Monster, hp: number, temp: number) {\r\n        combatant.hp = hp;\r\n        combatant.hpTemp = temp;\r\n\r\n        this.setState({\r\n            combats: this.state.combats\r\n        });\r\n    }\r\n\r\n    addCondition(combatant: Combatant & Monster) {\r\n        var combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat) {\r\n            var condition = Factory.createCondition();\r\n            condition.name = \"blinded\";\r\n\r\n            this.setState({\r\n                modal: {\r\n                    type: \"condition-add\",\r\n                    condition: condition,\r\n                    combatant: combatant,\r\n                    combat: combat\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    addConditionFromModal() {\r\n        this.state.modal.combatant.conditions.push(this.state.modal.condition);\r\n\r\n        this.setState({\r\n            combats: this.state.combats,\r\n            modal: null\r\n        });\r\n    }\r\n\r\n    editCondition(combatant: Combatant & Monster, condition: Condition) {\r\n        var combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat) {\r\n            this.setState({\r\n                modal: {\r\n                    type: \"condition-edit\",\r\n                    condition: condition,\r\n                    combatant: combatant,\r\n                    combat: combat\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    editConditionFromModal() {\r\n        var conditions: Condition[] = this.state.modal.combatant.conditions;\r\n        var original = conditions.find(c => c.id === this.state.modal.condition.id);\r\n        if (original) {\r\n            var index = conditions.indexOf(original);\r\n            // eslint-disable-next-line\r\n            conditions[index] = this.state.modal.condition;\r\n\r\n            this.setState({\r\n                combats: this.state.combats,\r\n                modal: null\r\n            });\r\n        }\r\n    }\r\n\r\n    removeCondition(combatant: Combatant & Monster, conditionID: string) {\r\n        var condition = combatant.conditions.find(c => c.id === conditionID);\r\n        if (condition) {\r\n            var index = combatant.conditions.indexOf(condition);\r\n            combatant.conditions.splice(index, 1);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    sortCombatants(combat: Combat) {\r\n        combat.combatants.sort((a, b) => {\r\n            // First sort by initiative, descending\r\n            if (a.initiative && b.initiative && (a.initiative < b.initiative)) return 1;\r\n            if (a.initiative && b.initiative && (a.initiative > b.initiative)) return -1;\r\n            // Then sort by name, ascending\r\n            if (a.name < b.name) return -1;\r\n            if (a.name > b.name) return 1;\r\n            return 0;\r\n        });\r\n    }\r\n\r\n    closeNotification(notification: Notification, removeCondition: boolean) {\r\n        var combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat) {\r\n            var index = combat.notifications.indexOf(notification);\r\n            combat.notifications.splice(index, 1);\r\n\r\n            if (removeCondition && notification.combatant && notification.condition) {\r\n                var conditionIndex = notification.combatant.conditions.indexOf(notification.condition);\r\n                notification.combatant.conditions.splice(conditionIndex, 1);\r\n            }\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////////\r\n\r\n    setView(view: string) {\r\n        this.setState({\r\n            view: view\r\n        });\r\n    }\r\n\r\n    openAbout() {\r\n        this.setState({\r\n            modal: {\r\n                type: \"about\"\r\n            }\r\n        });\r\n    }\r\n\r\n    closeModal() {\r\n        this.setState({\r\n            modal: null\r\n        });\r\n    }\r\n\r\n    selectParty(party: Party | null) {\r\n        this.setState({\r\n            selectedPartyID: party ? party.id : null\r\n        });\r\n    }\r\n\r\n    selectMonsterGroup(group: MonsterGroup | null) {\r\n        this.setState({\r\n            selectedMonsterGroupID: group ? group.id : null\r\n        });\r\n    }\r\n\r\n    selectEncounter(encounter: Encounter | null) {\r\n        this.setState({\r\n            selectedEncounterID: encounter ? encounter.id : null\r\n        });\r\n    }\r\n\r\n    selectMapFolio(mapFolio: MapFolio | null) {\r\n        this.setState({\r\n            selectedMapFolioID: mapFolio ? mapFolio.id : null\r\n        });\r\n    }\r\n\r\n    getParty(id: string | null) {\r\n        return this.state.parties.find(p => p.id === id);\r\n    }\r\n\r\n    getMonsterGroup(id: string | null) {\r\n        return this.state.library.find(g => g.id === id);\r\n    }\r\n\r\n    getEncounter(id: string | null) {\r\n        return this.state.encounters.find(e => e.id === id);\r\n    }\r\n\r\n    getMapFolio(id: string | null) {\r\n        return this.state.mapFolios.find(f => f.id === id);\r\n    }\r\n\r\n    getCombat(id: string | null) {\r\n        return this.state.combats.find(c => c.id === id);\r\n    }\r\n\r\n    getMonster(monsterName: string, groupName: string) {\r\n        var group = this.getMonsterGroupByName(groupName);\r\n        if (group) {\r\n            return group.monsters.find(monster => monster.name === monsterName);\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    getMonsterGroupByName(groupName: string) {\r\n        return this.state.library.find(p => p.name === groupName);\r\n    }\r\n\r\n    /*\r\n    getMonster(monsterName: string, monsterGroup: MonsterGroup): Monster | undefined {\r\n        return monsterGroup.monsters.find(monster => monster.name === monsterName);\r\n    }\r\n    */\r\n\r\n    findMonster(monster: Monster) {\r\n        return this.state.library.find(group => group.monsters.includes(monster));\r\n    }\r\n\r\n    resetAll() {\r\n        this.setState({\r\n            parties: [],\r\n            selectedPartyID: null,\r\n            library: [],\r\n            selectedMonsterGroupID: null,\r\n            encounters: [],\r\n            selectedEncounterID: null,\r\n            mapFolios: [],\r\n            selectedMapFolioID: null,\r\n            combats: [],\r\n            selectedCombatID: null\r\n        });\r\n    }\r\n\r\n    changeValue(combatant: any, type: string, value: any) {\r\n        switch (type) {\r\n            case \"hp\":\r\n                value = Math.min(value, combatant.hpMax);\r\n                value = Math.max(value, 0);\r\n                break;\r\n            case \"hpTemp\":\r\n                value = Math.max(value, 0);\r\n                break;\r\n            case \"level\":\r\n                value = Math.max(value, 1);\r\n                if (combatant.player !== undefined) {\r\n                    value = Math.min(value, 20)\r\n                } else {\r\n                    value = Math.min(value, 6);\r\n                }\r\n                break;\r\n            case \"count\":\r\n                value = Math.max(value, 1);\r\n                break;\r\n            case \"hitDice\":\r\n                value = Math.max(value, 1);\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        var tokens = type.split(\".\");\r\n        var obj = combatant;\r\n        for (var n = 0; n !== tokens.length; ++n) {\r\n            var token = tokens[n];\r\n            if (n === tokens.length - 1) {\r\n                obj[token] = value;\r\n            } else {\r\n                obj = obj[token];\r\n            }\r\n        }\r\n\r\n        Utils.sort(this.state.parties);\r\n        Utils.sort(this.state.library);\r\n        Utils.sort(this.state.encounters);\r\n\r\n        this.setState({\r\n            parties: this.state.parties,\r\n            library: this.state.library,\r\n            encounters: this.state.encounters,\r\n            combats: this.state.combats,\r\n            selectedPartyID: this.state.selectedPartyID,\r\n            selectedMonsterGroupID: this.state.selectedMonsterGroupID,\r\n            selectedEncounterID: this.state.selectedEncounterID,\r\n            selectedCombatID: this.state.selectedCombatID,\r\n            options: this.state.options,\r\n            modal: this.state.modal\r\n        });\r\n    }\r\n\r\n    nudgeValue(combatant: any, type: string, delta: number) {\r\n        var tokens = type.split(\".\");\r\n        var obj = combatant;\r\n        for (var n = 0; n !== tokens.length; ++n) {\r\n            var token = tokens[n];\r\n            if (n === tokens.length - 1) {\r\n                var value = null;\r\n                if (token === \"challenge\") {\r\n                    value = Utils.nudgeChallenge(obj.challenge, delta);\r\n                } else {\r\n                    value = obj[token] + delta;\r\n                }\r\n                this.changeValue(combatant, type, value);\r\n            } else {\r\n                obj = obj[token];\r\n            }\r\n        }\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////////\r\n\r\n    render() {\r\n        try {\r\n            var content: JSX.Element | null = null;\r\n            var actions: JSX.Element | null = null;\r\n            switch (this.state.view) {\r\n                case \"home\":\r\n                    content = (\r\n                        <HomeScreen\r\n                            library={this.state.library}\r\n                            addOpenGameContent={() => this.addOpenGameContent()}\r\n                        />\r\n                    );\r\n                    break;\r\n                case \"parties\":\r\n                    content = (\r\n                        <PartiesScreen\r\n                            parties={this.state.parties}\r\n                            selection={this.getParty(this.state.selectedPartyID) || null}\r\n                            showHelp={this.state.options.showHelp}\r\n                            selectParty={party => this.selectParty(party)}\r\n                            addParty={() => this.addParty()}\r\n                            removeParty={() => this.removeParty()}\r\n                            addPC={() => this.addPC()}\r\n                            removePC={pc => this.removePC(pc)}\r\n                            sortPCs={() => this.sortPCs()}\r\n                            changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                            nudgeValue={(combatant, type, delta) => this.nudgeValue(combatant, type, delta)}\r\n                        />\r\n                    );\r\n                    break;\r\n                case \"library\":\r\n                    content = (\r\n                        <MonsterLibraryScreen\r\n                            library={this.state.library}\r\n                            selection={this.getMonsterGroup(this.state.selectedMonsterGroupID) || null}\r\n                            filter={this.state.libraryFilter}\r\n                            showHelp={this.state.options.showHelp}\r\n                            selectMonsterGroup={group => this.selectMonsterGroup(group)}\r\n                            addMonsterGroup={() => this.addMonsterGroup()}\r\n                            removeMonsterGroup={() => this.removeMonsterGroup()}\r\n                            addMonster={() => this.addMonster()}\r\n                            removeMonster={monster => this.removeMonster(monster)}\r\n                            sortMonsters={() => this.sortMonsters()}\r\n                            changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                            nudgeValue={(combatant, type, delta) => this.nudgeValue(combatant, type, delta)}\r\n                            editMonster={combatant => this.editMonster(combatant)}\r\n                            cloneMonster={(combatant, name) => this.cloneMonster(combatant, name)}\r\n                            moveToGroup={(combatant, groupID) => this.moveToGroup(combatant, groupID)}\r\n                        />\r\n                    );\r\n                    var count = 0;\r\n                    this.state.library.forEach(group => {\r\n                        count += group.monsters.length;\r\n                    });\r\n                    if (count > 0) {\r\n                        actions = (\r\n                            <div className=\"actions\">\r\n                                <div className=\"section\">\r\n                                    <input type=\"text\" placeholder=\"filter\" value={this.state.libraryFilter} onChange={event => this.changeValue(this.state, \"libraryFilter\", event.target.value)} />\r\n                                </div>\r\n                                <div className=\"section\">\r\n                                    <button onClick={() => this.openDemographics()}>demographics</button>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    }\r\n                    break;\r\n                case \"encounter\":\r\n                    content = (\r\n                        <EncounterBuilderScreen\r\n                            encounters={this.state.encounters}\r\n                            selection={this.getEncounter(this.state.selectedEncounterID) || null}\r\n                            parties={this.state.parties}\r\n                            library={this.state.library}\r\n                            showHelp={this.state.options.showHelp}\r\n                            selectEncounter={encounter => this.selectEncounter(encounter)}\r\n                            addEncounter={() => this.addEncounter()}\r\n                            removeEncounter={() => this.removeEncounter()}\r\n                            addWave={() => this.addWaveToEncounter()}\r\n                            removeWave={wave => this.removeWave(wave)}\r\n                            getMonster={(monsterName, groupName) => this.getMonster(monsterName, groupName) || null}\r\n                            addEncounterSlot={(monster, waveID) => this.addEncounterSlot(monster, waveID)}\r\n                            removeEncounterSlot={(slot, waveID) => this.removeEncounterSlot(slot, waveID)}\r\n                            nudgeValue={(slot, type, delta) => this.nudgeValue(slot, type, delta)}\r\n                            changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                        />\r\n                    );\r\n                    break;\r\n                case \"maps\":\r\n                    content = (\r\n                        <MapFoliosScreen\r\n                            mapFolios={this.state.mapFolios}\r\n                            selection={this.getMapFolio(this.state.selectedMapFolioID) || null}\r\n                            showHelp={this.state.options.showHelp}\r\n                            selectMapFolio={folio => this.selectMapFolio(folio)}\r\n                            addMapFolio={() => this.addMapFolio()}\r\n                            removeMapFolio={() => this.removeMapFolio()}\r\n                            addMap={() => this.addMap()}\r\n                            editMap={map => this.editMap(map)}\r\n                            removeMap={map => this.removeMap(map)}\r\n                            changeValue={(source, type, value) => this.changeValue(source, type, value)}\r\n                        />\r\n                    );\r\n                    break;\r\n                case \"combat\":\r\n                    var combat = this.getCombat(this.state.selectedCombatID);\r\n                    content = (\r\n                        <CombatManagerScreen\r\n                            combats={this.state.combats}\r\n                            combat={combat || null}\r\n                            showHelp={this.state.options.showHelp}\r\n                            createCombat={() => this.createCombat()}\r\n                            resumeEncounter={combat => this.resumeCombat(combat)}\r\n                            nudgeValue={(combatant, type, delta) => this.nudgeValue(combatant, type, delta)}\r\n                            changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                            makeCurrent={(combatant) => this.makeCurrent(combatant, false)}\r\n                            makeActive={(combatant) => this.makeActive(combatant)}\r\n                            makeDefeated={(combatant) => this.makeDefeated(combatant)}\r\n                            removeCombatant={(combatant) => this.removeCombatant(combatant)}\r\n                            addCondition={(combatant) => this.addCondition(combatant)}\r\n                            editCondition={(combatant, condition) => this.editCondition(combatant, condition)}\r\n                            removeCondition={(combatant, conditionID) => this.removeCondition(combatant, conditionID)}\r\n                            mapAdd={(combatant, x, y) => this.mapAdd(combatant, x, y)}\r\n                            mapMove={(combatant, dir) => this.mapMove(combatant, dir)}\r\n                            mapRemove={combatant => this.mapRemove(combatant)}\r\n                            endTurn={(combatant) => this.endTurn(combatant)}\r\n                            changeHP={(combatant, hp, temp) => this.changeHP(combatant, hp, temp)}\r\n                            close={(notification, removeCondition) => this.closeNotification(notification, removeCondition)}\r\n                        />\r\n                    );\r\n                    if (combat) {\r\n                        var encounter = this.getEncounter(combat.encounterID);\r\n                        if (encounter) {\r\n                            var xp = 0;\r\n                            combat.combatants.filter(c => c.type === \"monster\")\r\n                                .forEach(combatant => {\r\n                                    xp += Utils.experience((combatant as Combatant & Monster).challenge);\r\n                                });\r\n\r\n                            actions = (\r\n                                <div className=\"actions\">\r\n                                    <div className=\"section\">\r\n                                        <div className=\"text\">round: {combat.round}</div>\r\n                                    </div>\r\n                                    <div className=\"section\">\r\n                                        <div className=\"text\">xp: {xp}</div>\r\n                                    </div>\r\n                                    <div className=\"section\" style={{ display: encounter.waves.length === 0 ? \"none\" : \"\"}}>\r\n                                        <button onClick={() => this.openWaveModal()}>add wave</button>\r\n                                    </div>\r\n                                    <div className=\"section\">\r\n                                        <button onClick={() => this.pauseCombat()}>pause encounter</button>\r\n                                    </div>\r\n                                    <div className=\"section\">\r\n                                        <button onClick={() => this.endCombat()}>end encounter</button>\r\n                                    </div>\r\n                                </div>\r\n                            );\r\n                        }\r\n                    }\r\n                    break;\r\n                default:\r\n                    // Do nothing\r\n                    break;\r\n            }\r\n\r\n            var modal = null;\r\n            if (this.state.modal) {\r\n                var modalTitle = null;\r\n                var modalContent = null;\r\n                var modalAllowClose = true;\r\n                var modalAllowScroll = true;\r\n                var modalButtons = {\r\n                    left: [] as JSX.Element[],\r\n                    right: [] as JSX.Element[]\r\n                };\r\n\r\n                switch (this.state.modal.type) {\r\n                    case \"about\":\r\n                        modalContent = (\r\n                            <AboutModal\r\n                                options={this.state.options}\r\n                                resetAll={() => this.resetAll()}\r\n                                changeValue={(source, type, value) => this.changeValue(source, type, value)}\r\n                            />\r\n                        );\r\n                        break;\r\n                    case \"demographics\":\r\n                        modalTitle = \"demographics\";\r\n                        modalContent = (\r\n                            <DemographicsModal\r\n                                library={this.state.library}\r\n                            />\r\n                        );\r\n                        break;\r\n                    case \"monster\":\r\n                        modalTitle = \"monster editor\";\r\n                        modalContent = (\r\n                            <MonsterEditorModal\r\n                                monster={this.state.modal.monster}\r\n                                library={this.state.library}\r\n                                showMonsters={this.state.modal.showMonsters}\r\n                            />\r\n                        );\r\n                        modalAllowClose = false;\r\n                        modalAllowScroll = false;\r\n                        modalButtons.left = [\r\n                            <Checkbox\r\n                                key=\"similar\"\r\n                                label=\"similar monsters\"\r\n                                checked={this.state.modal.showMonsters}\r\n                                changeValue={() => this.toggleShowSimilarMonsters()}\r\n                            /> \r\n                        ];\r\n                        modalButtons.right = [\r\n                            <button key=\"save\" onClick={() => this.saveMonster()}>save</button>,\r\n                            <button key=\"cancel\" onClick={() => this.closeModal()}>cancel</button>\r\n                        ];\r\n                        break;\r\n                    case \"map\":\r\n                        modalTitle = \"map editor\";\r\n                        modalContent = (\r\n                            <MapEditorModal\r\n                                map={this.state.modal.map}\r\n                            />\r\n                        );\r\n                        modalAllowClose = false;\r\n                        modalAllowScroll = false;\r\n                        modalButtons.right = [\r\n                            <button key=\"save\" onClick={() => this.saveMap()}>save</button>,\r\n                            <button key=\"cancel\" onClick={() => this.closeModal()}>cancel</button>\r\n                        ];\r\n                        break;\r\n                    case \"combat-start\":\r\n                        modalTitle = \"start a new encounter\";\r\n                        modalContent = (\r\n                            <CombatStartModal\r\n                                combatSetup={this.state.modal.combatSetup}\r\n                                parties={this.state.parties}\r\n                                encounters={this.state.encounters}\r\n                                mapFolios={this.state.mapFolios}\r\n                                getMonster={(monsterName, groupName) => this.getMonster(monsterName, groupName) || null}\r\n                                notify={() => this.setState({modal: this.state.modal})}\r\n                            />\r\n                        );\r\n                        modalAllowClose = false;\r\n                        modalAllowScroll = false;\r\n                        modalButtons.right = [\r\n                            <button key=\"start encounter\" className={this.state.modal.combatSetup.partyID && this.state.modal.combatSetup.encounterID ? \"\" : \"disabled\"} onClick={() => this.startCombat()}>start encounter</button>,\r\n                            <button key=\"cancel\" onClick={() => this.closeModal()}>cancel</button>\r\n                        ];\r\n                        break;\r\n                    case \"combat-wave\":\r\n                        modalTitle = \"encounter waves\";\r\n                        modalContent = (\r\n                            <CombatStartModal\r\n                                combatSetup={this.state.modal.combatSetup}\r\n                                encounters={this.state.encounters}\r\n                                getMonster={(monsterName, groupName) => this.getMonster(monsterName, groupName) || null}\r\n                                notify={() => this.setState({modal: this.state.modal})}\r\n                            />\r\n                        );\r\n                        modalAllowClose = false;\r\n                        modalAllowScroll = false;\r\n                        modalButtons.right = [\r\n                            <button key=\"add wave\" className={this.state.modal.combatSetup.waveID !== null ? \"\" : \"disabled\"} onClick={() => this.addWaveToCombat()}>add wave</button>,\r\n                            <button key=\"cancel\" onClick={() => this.closeModal()}>cancel</button>\r\n                        ];\r\n                        break;\r\n                    case \"condition-add\":\r\n                        modalTitle = \"add a condition\";\r\n                        modalContent = (\r\n                            <ConditionModal\r\n                                condition={this.state.modal.condition}\r\n                                combatant={this.state.modal.combatant}\r\n                                combat={this.state.modal.combat}\r\n                            />\r\n                        );\r\n                        modalAllowClose = false;\r\n                        modalAllowScroll = false;\r\n                        modalButtons.right = [\r\n                            <button key=\"add\" onClick={() => this.addConditionFromModal()}>add</button>,\r\n                            <button key=\"cancel\" onClick={() => this.closeModal()}>cancel</button>\r\n                        ];\r\n                        break;\r\n                    case \"condition-edit\":\r\n                        modalTitle = \"edit condition\";\r\n                        modalContent = (\r\n                            <ConditionModal\r\n                                condition={this.state.modal.condition}\r\n                                combatant={this.state.modal.combatant}\r\n                                combat={this.state.modal.combat}\r\n                            />\r\n                        );\r\n                        modalAllowClose = false;\r\n                        modalButtons.right = [\r\n                            <button key=\"save\" onClick={() => this.editConditionFromModal()}>save</button>,\r\n                            <button key=\"cancel\" onClick={() => this.closeModal()}>cancel</button>\r\n                        ];\r\n                        break;\r\n                    default:\r\n                        // Do nothing\r\n                        break;\r\n                }\r\n\r\n                modal = (\r\n                    <div className=\"overlay\">\r\n                        <div className=\"modal\">\r\n                            <div className=\"modal-header\">\r\n                                <div className=\"title\">{modalTitle}</div>\r\n                                {modalAllowClose ? <img className=\"image\" src={close} alt=\"close\" onClick={() => this.closeModal()} /> : null}\r\n                            </div>\r\n                            <div className={modalAllowScroll ? \"modal-content scrollable\" : \"modal-content\"}>\r\n                                {modalContent}\r\n                            </div>\r\n                            <div className=\"modal-footer\">\r\n                                <div className=\"left\">{modalButtons.left}</div>\r\n                                <div className=\"right\">{modalButtons.right}</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className=\"dojo\">\r\n                    <Titlebar\r\n                        actions={actions}\r\n                        blur={modal !== null}\r\n                        openHome={() => this.setView(\"home\")}\r\n                        openAbout={() => this.openAbout()}\r\n                    />\r\n                    <div className={(modal === null) ? \"page-content\" : \"page-content blur\"}>\r\n                        {content}\r\n                    </div>\r\n                    <Navbar\r\n                        view={this.state.view}\r\n                        parties={this.state.parties}\r\n                        library={this.state.library}\r\n                        encounters={this.state.encounters}\r\n                        blur={modal !== null}\r\n                        setView={view => this.setView(view)}\r\n                    />\r\n                    {modal}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './style/css/foundation.css';\r\nimport './style/scss/app.scss';\r\nimport './style/scss/controls.scss';\r\n\r\nimport Dojo from './components/dojo';\r\n\r\nReactDOM.render(<Dojo />, document.getElementById('root'));\r\n"],"sourceRoot":""}