{"version":3,"sources":["resources/icons/down-arrow-black.svg","resources/icons/ellipsis.svg","resources/icons/x.svg","resources/icons/warning.svg","resources/icons/down-arrow.svg","resources/icons/settings.svg","utils/utils.ts","utils/factory.ts","models/monster-group.ts","utils/frankenstein.ts","utils/mercator.ts","utils/napoleon.ts","models/combat.ts","components/controls/checkbox.tsx","components/controls/confirm-button.tsx","components/controls/control-row.tsx","components/controls/dropdown.tsx","components/controls/expander.tsx","components/controls/radial.tsx","components/controls/selector.tsx","components/controls/spin.tsx","components/panels/ability-score-panel.tsx","components/panels/conditions-panel.tsx","components/panels/note.tsx","components/panels/traits-panel.tsx","components/cards/info-card.tsx","components/cards/monster-card.tsx","components/cards/pc-card.tsx","components/panels/hit-point-gauge.tsx","components/panels/map-panel.tsx","components/list-items/combat-list-item.tsx","components/panels/card-group.tsx","components/portals/popout.tsx","components/screens/combat-manager-screen.tsx","components/list-items/encounter-list-item.tsx","components/panels/difficulty-chart-panel.tsx","components/panels/filter-panel.tsx","components/screens/encounter-builder-screen.tsx","components/panels/readaloud.tsx","components/screens/home-screen.tsx","components/cards/map-card.tsx","components/list-items/map-folio-list-item.tsx","components/screens/map-folios-screen.tsx","components/list-items/monster-group-list-item.tsx","components/screens/monster-library-screen.tsx","components/list-items/party-list-item.tsx","components/screens/parties-screen.tsx","components/modals/add-combatants-modal.tsx","components/modals/combat-start-modal.tsx","models/condition.ts","components/controls/radio-group.tsx","components/modals/condition-modal.tsx","components/modals/demographics-sidebar.tsx","models/map-folio.ts","components/cards/map-tile-card.tsx","components/modals/map-editor-modal.tsx","components/modals/monster-editor-modal.tsx","components/modals/pc-editor-modal.tsx","components/tools/about/about-module.tsx","components/tools/about/ogl-module.tsx","components/tools/about/options-module.tsx","components/tools/about-tool.tsx","components/tools/dm/die-roller-module.tsx","utils/shakespeare.ts","utils/ustinov.ts","components/tools/dm/language-module.tsx","components/tools/dm/name-module.tsx","components/tools/dm-tool.tsx","components/controls/loading-wrapper.tsx","components/tools/reference/actions-module.tsx","components/tools/reference/conditions-module.tsx","components/tools/reference/skills-module.tsx","components/tools/reference-tool.tsx","components/modals/tools-sidebar.tsx","components/panels/navbar.tsx","components/panels/titlebar.tsx","components/controls/menu.tsx","components/dojo.tsx","index.js"],"names":["module","exports","Utils","monster","library","group","this","monsterIdToGroup","id","grp","find","g","monsters","includes","filter","text","result","toLowerCase","split","forEach","token","indexOf","s4","Math","floor","random","toString","substring","collection","sorts","length","field","dir","fn","a","b","undefined","sort","order","score","mod","modifierValue","str","sides","size","cr","parseInt","push","ac","hpMin","hpMax","attack","dmgMin","dmgMax","save","count","level","difficulty","type","plural","value","delta","sizes","index","condition","name","combat","duration","saveDuration","saveType","toUpperCase","saves","saveDC","combatantDuration","point","c","combatants","cmb","combatantID","displayName","roundsDuration","rounds","encounter","monsterNames","slots","slot","names","monsterName","n","tag","Factory","guid","pcs","active","player","race","classes","languages","passiveInsight","passiveInvestigation","passivePerception","initiative","url","companions","category","alignment","challenge","abilityScores","dex","con","int","wis","cha","hpTemp","hitDice","damage","resist","vulnerable","immune","savingThrows","speed","skills","senses","equipment","traits","conditionImmunities","usage","uses","waves","monsterGroupName","challengeMin","challengeMax","maps","items","x","y","width","height","terrain","customBackground","style","partyID","encounterID","waveID","folioID","mapID","encounterInitMode","map","round","notifications","issues","timestamp","data","combatant","SIZE_TYPES","CATEGORY_TYPES","TRAIT_TYPES","Frankenstein","target","newValue","source","tokens","nudgeChallenge","nudgeSize","changeValue","hpPerDie","hitDieType","hp","trait","createMonster","subtype","parseChallenge","challenge_rating","armor_class","hit_points","hit_dice","strength","dexterity","constitution","intelligence","wisdom","charisma","damage_resistances","damage_vulnerabilities","damage_immunities","condition_immunities","skill","special_abilities","rawTrait","buildTrait","actions","reactions","legendary_actions","openBracket","closeBracket","desc","replace","finalType","copy","JSON","parse","stringify","createTrait","traitType","splice","t1","t2","index1","index2","setRandomValue","m","t","distinct","current","d","addedIDs","copyTrait","findIndex","avg","Mercator","item","dimensions","mapDimensions","candidateSquares","minX","maxX","minY","maxY","canAddMonsterHere","square","miniSize","displaySize","createMapItem","tiles","tile","min","max","coveredSquares","right","bottom","x1","y1","occupants","itemsAt","canOccupy","every","left","top","Napoleon","concat","wave","getMonster","xp","experience","experienceFactor","summary","groups","getAdjustedEncounterXP","groupName","dieRoll","candidates","matchMonster","createEncounterSlot","s","createEncounterWave","match","COMBAT_TAGS","Checkbox","e","stopPropagation","props","checked","display","disabled","toggle","className","onClick","click","label","ex","console","error","React","Component","defaultProps","ConfirmButton","state","pressed","setState","callback","content","src","warning","alt","details","perform","ControlRow","controls","Dropdown","open","optionID","select","clear","options","option","selectedID","o","key","title","placeholder","ellipsis","selected","toggleOpen","DropdownOption","Expander","expanded","arrow","Radial","dir2","direction","showOut","showIn","showDiag","Selector","tabs","itemsPerRow","rowCount","ceil","rowContents","rowIndex","rowSections","row","SelectorOption","Spin","nudgeValue","preventDefault","minusBtns","plusBtns","factors","factor","onTouchEnd","touchEnd","reverse","AbilityScorePanel","showAbilityScores","edit","toggleAbilityScores","modifier","ConditionsPanel","conditions","nudgeConditionValue","editCondition","removeCondition","conditionID","addCondition","ConditionPanel","conditionDurationText","description","conditionText","Note","white","showdown","Showdown","Converter","TraitsPanel","prevTrait","nextTrait","mode","action","removeTrait","swapTraits","traitsByType","showInfo","info","list","createTraitPanel","addTrait","createSection","TraitPanel","maxUses","heading","used","startsWith","found","markdown","dangerouslySetInnerHTML","__html","makeHtml","onChange","event","InfoCard","MonsterCard","showDetails","cloneName","combatMode","damageOrHealing","changeHP","temp","val","sizeAndType","align","some","die","conMod","conModStr","combatModes","setCombatMode","pending","defeated","endTurn","makeDefeated","makeCurrent","makeActive","showOnMap","tags","toggleTag","nudgeDamage","heal","setDamage","mapMove","auraDetails","aura","radius","color","mapRemove","mapAdd","removeCombatant","editMonster","setCloneName","cloneMonster","groupOptions","moveToGroup","removeMonster","removeEncounterSlot","canAdd","monsterIsInWave","addEncounterSlot","selectMonster","deselectMonster","getCombatControls","stats","slotSection","getHP","imageStyle","toggleDetails","PCCard","editPC","removePC","companion","href","rel","HitPointGauge","hpCurrent","hpBloodied","hpWidth","hpTempBar","hpTempWidth","MapPanel","zoom","border","i","mi","sizeInSquares","dim","offsetX","offsetY","borderRadius","backgroundSize","getMapDimensions","grid","gridStyle","getStyle","setSelectedItemID","tileStyle","selectable","selectedItemID","auras","auraStyle","backgroundColor","mt","tokenStyle","simple","showGauge","showHidden","dragOverlay","showOverlay","yOver","xOver","overlayStyle","overlay","posX","posY","gridSquareClicked","setZoom","mapHeight","GridSquare","onDoubleClick","doubleClick","MapTile","MapToken","initials","hpGauge","altitudeBadge","conditionsBadge","altitude","CombatListItem","setSelection","CardGroup","showCards","hidden","closeBtn","close","showToggle","toggleCards","cards","Popout","externalWindow","containerElement","window","document","createElement","body","appendChild","Array","from","styleSheets","stylesheet","css","newStyleElement","head","cssRules","rule","createTextNode","cssText","addEventListener","closeWindow","ReactDOM","createPortal","children","CombatManagerScreen","selectedTokenID","addingToMapID","playerView","showControls","setPlayerViewOpen","show","init","minimal","setSelectedTokenID","selection","defeatCombatant","setAddingToMapID","createCard","pendingHelp","activeHelp","notificationSection","notification","mapSection","addCombatantToMap","scatterMonsters","playerViewSection","setPlayerViewShowControls","special","legendary","lair","selectedCombatant","getPlayerView","listItems","combats","showCombat","resumeEncounter","createCombat","HelpCard","NotificationPanel","success","PendingCombatantRow","getInformationText","PCRow","cls","notes","getTagDescription","join","MonsterRow","gauge","dmInfo","EncounterListItem","DifficultyChartPanel","selectedPartyID","party","xpThresholds","diffSection","monsterCount","getMonsterCount","monsterXP","getEncounterXP","adjustedXP","parties","p","xpEasy","xpMedium","xpHard","xpDeadly","pc","pcExperience","adjustedDifficulty","small","getLeft","getRight","partySelection","partyOptions","selectParty","FilterPanel","sizeOptions","catOptions","cat","resetFilter","getFilterDescription","EncounterBuilderScreen","createMonsterFilter","changeFilterValue","libraryCards","enc","encounterName","leftColumn","monsterFilter","addWave","removeWave","clearEncounter","removeEncounter","buildEncounter","nudgeFilterValue","selectEncounter","encounters","showEncounter","addEncounter","watermark","encounterCards","getMonsterCards","card","w","getLibrarySection","EncounterInfo","randomEncounterXP","randomEncounterStep","setRandomEncounterXP","setRandomEncounterStep","Number","Readaloud","HomeScreen","addOpenGameContent","MapCard","editMap","removeMap","MapFolioListItem","matchFolio","mapFolio","MapFoliosScreen","folio","addMap","removeMapFolio","selectMapFolio","mapFolios","f","showMapFolio","addMapFolio","folioCards","MapFolioInfo","MonsterGroupListItem","matchGroup","MonsterLibraryScreen","addMonster","sortMonsters","removeMonsterGroup","selectMonsterGroup","showMonsterGroup","addMonsterGroup","groupID","MonsterInfo","PartyListItem","matchParty","PartiesScreen","addPC","sortPCs","removeParty","showParty","addParty","activeCards","inactiveCards","activePCs","activePC","inactivePC","PartyInfo","insightSummary","investigationSummary","perceptionSummary","reduce","array","localeCompare","insight","invest","percep","getSummary","AddCombatantsModal","combatantSlots","getMonsterGroup","currentIDs","allCombatants","selectedCombatants","nudgeMonsterCount","CombatStartModal","combatSetup","notify","getMonsterNames","slotID","partyContent","selectedParty","pcSections","setParty","encounterOptions","encounterContent","selectedEncounter","monsterSections","waveMonsters","setEncounter","folios","folioOptions","selectMapSection","thumbnailSection","mapOptions","setMapID","setFolioID","waveOptions","waveContent","selectedWave","setWave","slotsContainer","slotNames","inputs","changeName","setEncounterInitMode","leftSection","rightSection","getPartySection","getEncounterSection","getMapSection","getDifficultySection","getMonsterSection","getWaveSection","margin","MonsterName","CONDITION_TYPES","RadioGroup","itemID","RadioGroupItem","ConditionModal","conditionName","durationType","createConditionDurationSaves","createConditionDurationCombatant","createConditionDurationRounds","object","saveOptions","pointOptions","combatantOptions","durations","setCondition","setDuration","DemographicsSidebar","chart","demographics","allMonsters","buckets","maxBucketSize","bucket","bars","set","selectChart","TERRAIN_TYPES","MapTileCard","terrainOptions","styleOptions","customSection","getElementById","accept","files","reader","FileReader","onload","readerEvent","readAsDataURL","moveMapItem","resizeMapItem","cloneMapItem","removeMapItem","MapEditorModal","selectedTileID","addingTile","smallMapItem","bigMapItem","newX","newY","newWidth","newHeight","tools","mapItem","toggleAddingTile","rotateMap","clearMap","setSelectedTileID","addMapTile","MonsterEditorModal","page","showFilter","helpSection","sidebar","similarFilter","scratchpadFilter","scratchpadList","sections","getHelpOptionsForPage","section","spliceMonsters","addRandomTrait","getValueSection","getActionsSection","dataType","values","v","valueSections","rows","monsterCards","showSidebar","getMonsters","changeTrait","help","selector","setHelpSection","getHelpSection","sidebarContent","toggleMatch","searchResults","resultsRows","addToScratchpadList","removeSection","deleteRows","removeFromScratchpadList","transition","setPage","PCEditorModal","createCompanion","comp","removeCompanion","addCompanion","AboutModule","pkg","version","OGLModule","OptionsModule","resetAll","AboutTool","view","setView","DieRollerModule","dice","rolls","roll","optionsSection","toggleOption","rollsSection","resultSection","setDice","nudgeCount","Shakespeare","sources","model","maxLength","line","addLineToModel","String","fromCharCode","prev","substr","char","freq","requiredResults","lines","failures","extractLine","l","fit","repeat","ch","mc","maxCount","sum","Ustinov","speechSynthesis","cancel","utterance","SpeechSynthesisUtterance","chooseVoice","voice","rate","randomValue","pitch","speak","getVoices","voices","langCodes","lang","getLanguageCode","default","Promise","resolve","onvoiceschanged","language","LanguageModule","output","fetch","response","presetName","preset","getPresets","addLanguage","getLanguages","Object","keys","initModel","generate","presetOptions","selectedPreset","selectedLanguages","isSelected","removeLanguage","allowGenerate","allowReset","usePreset","reset","GeneratedText","navigator","clipboard","writeText","say","NameModule","male","female","surname","input","DMTool","LoadingWrapper","loaded","setOption","ActionsModule","fetchData","ConditionsModule","SkillsModule","ReferenceTool","ToolsSidebar","Navbar","partiesStyle","libraryStyle","encounterStyle","mapStyle","combatStyle","encountersEnabled","combatEnabled","blur","Titlebar","openHome","cog","openTools","Menu","Dojo","modal","selectedMonsterGroupID","selectedEncounterID","selectedMapFolioID","selectedCombatID","json","localStorage","getItem","setItem","createParty","createPC","original","createMonsterGroup","sourceGroup","clone","then","createFromJSON","createEncounter","sortEncounterSlots","slotContainer","aName","bName","createMapFolio","createMap","setup","createCombatSetup","partyName","addPCToCombat","groupInitRoll","addMonsterToCombat","sortCombatants","initMode","Date","toLocaleString","newRound","actor","groupRoll","singleRoll","issue","saveNotification","createNotification","endNotification","createCondition","conditionIndex","scatterCombatants","obj","openDemographics","allowWave","addToEncounter","openWaveModal","pauseCombat","endCombat","addWaveToEncounter","pausedCombat","resumeCombat","closeNotification","modalSidebar","modalTitle","modalContent","modalAllowScroll","modalButtons","closeModal","savePC","toggleShowSidebar","saveMonster","saveMap","startCombat","addWaveToCombat","addCombatantsFromModal","addConditionFromModal","editConditionFromModal","getContent","getActions","getModal","openToolsSidebar","render"],"mappings":"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","file":"static/js/main.eadd598c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/down-arrow-black.a2fc7a1f.svg\";","module.exports = __webpack_public_path__ + \"static/media/ellipsis.9650a20f.svg\";","module.exports = __webpack_public_path__ + \"static/media/x.7645a5b9.svg\";","module.exports = __webpack_public_path__ + \"static/media/warning.67a11a95.svg\";","module.exports = __webpack_public_path__ + \"static/media/down-arrow.697dc1af.svg\";","module.exports = __webpack_public_path__ + \"static/media/settings.042bb1c2.svg\";","import { Combat } from '../models/combat';\r\nimport { Condition, ConditionDurationCombatant, ConditionDurationRounds, ConditionDurationSaves } from '../models/condition';\r\nimport { Encounter, EncounterWave } from '../models/encounter';\r\nimport { Monster, MonsterGroup } from '../models/monster-group';\r\n\r\nexport default class Utils {\r\n\r\n    // This is an internal dictionary to speed up lookup\r\n    private static monsterIdToGroup: { [id: string]: MonsterGroup } = {};\r\n\r\n    public static getMonsterGroup(monster: Monster, library: MonsterGroup[]): MonsterGroup {\r\n        let group = this.monsterIdToGroup[monster.id];\r\n\r\n        if (!group) {\r\n            const grp = library.find(g => g.monsters.includes(monster));\r\n            if (grp) {\r\n                group = grp;\r\n                this.monsterIdToGroup[monster.id] = group;\r\n            }\r\n        }\r\n\r\n        return group;\r\n    }\r\n\r\n    public static match(filter: string, text: string): boolean {\r\n        if (!filter) {\r\n            return true;\r\n        }\r\n\r\n        let result = true;\r\n\r\n        const tokens = filter.toLowerCase().split(' ');\r\n        tokens.forEach(token => {\r\n            if (text.toLowerCase().indexOf(token) === -1) {\r\n                result = false;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    public static guid(): string {\r\n        const s4 = () => Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\r\n        return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\r\n    }\r\n\r\n    public static sort(collection: any[], sorts: { field: string, dir: 'asc' | 'desc' }[] = []): any[] {\r\n        if (sorts.length === 0) {\r\n            sorts = [{ field: 'name', dir: 'asc' }];\r\n        }\r\n\r\n        const fn = (a: any, b: any, field: string): number => {\r\n            if ((a[field] !== undefined) && (b[field] !== undefined)) {\r\n                if (a[field] < b[field]) { return -1; }\r\n                if (a[field] > b[field]) { return 1; }\r\n            }\r\n            return 0;\r\n        };\r\n\r\n        collection.sort((a, b) => {\r\n            let order = 0;\r\n            sorts.forEach(sort => {\r\n                if (order === 0) {\r\n                    order = fn(a, b, sort.field) * (sort.dir === 'asc' ? 1 : -1);\r\n                }\r\n            });\r\n            return order;\r\n        });\r\n\r\n        return collection;\r\n    }\r\n\r\n    public static modifierValue(score: number): number {\r\n        return Math.floor((score - 10) / 2);\r\n    }\r\n\r\n    public static modifier(score: number): string {\r\n        const mod = this.modifierValue(score);\r\n        let str = mod.toString();\r\n        if (mod >= 0) {\r\n            str = '+' + str;\r\n        }\r\n        return str;\r\n    }\r\n\r\n    public static dieRoll(sides: number = 20): number {\r\n        return Math.floor(Math.random() * sides) + 1;\r\n    }\r\n\r\n    public static miniSize(size: string): number {\r\n        switch (size) {\r\n            case 'tiny': return 0.4;\r\n            case 'small': return 0.6;\r\n            case 'medium': return 1;\r\n            case 'large': return 2;\r\n            case 'huge': return 3;\r\n            case 'gargantuan': return 4;\r\n            default: return 1;\r\n        }\r\n    }\r\n\r\n    public static hitDieType(size: string) {\r\n        switch (size) {\r\n            case 'tiny': return 4;\r\n            case 'small': return 6;\r\n            case 'medium': return 8;\r\n            case 'large': return 10;\r\n            case 'huge': return 12;\r\n            case 'gargantuan': return 20;\r\n            default: return 8;\r\n        }\r\n    }\r\n\r\n    public static challenge(cr: number): string {\r\n        switch (cr) {\r\n            case 0.125: return '1/8';\r\n            case 0.25: return '1/4';\r\n            case 0.5: return '1/2';\r\n            default: return cr.toString();\r\n        }\r\n    }\r\n\r\n    public static parseChallenge(cr: string): number {\r\n        switch (cr) {\r\n            case '1/8': return 0.125;\r\n            case '1/4': return 0.25;\r\n            case '1/2': return 0.5;\r\n            default: return parseInt(cr, 10);\r\n        }\r\n    }\r\n\r\n    public static challengeDetails(): any[] {\r\n        const result: any[] = [];\r\n\r\n        result.push({ cr: 0,        ac: 13,       hpMin: 1, hpMax: 6,       attack: 3,  dmgMin: 0,   dmgMax: 1,   save: 13 });\r\n        result.push({ cr: 0.125,    ac: 13,       hpMin: 7, hpMax: 35,      attack: 3,  dmgMin: 2,   dmgMax: 3,   save: 13 });\r\n        result.push({ cr: 0.25,     ac: 13,       hpMin: 36, hpMax: 49,     attack: 3,  dmgMin: 4,   dmgMax: 5,   save: 13 });\r\n        result.push({ cr: 0.5,      ac: 13,       hpMin: 50, hpMax: 70,     attack: 3,  dmgMin: 6,   dmgMax: 8,   save: 13 });\r\n        result.push({ cr: 1,        ac: 13,       hpMin: 71, hpMax: 85,     attack: 3,  dmgMin: 9,   dmgMax: 14,  save: 13 });\r\n        result.push({ cr: 2,        ac: 13,       hpMin: 86, hpMax: 100,    attack: 3,  dmgMin: 15,  dmgMax: 20,  save: 13 });\r\n        result.push({ cr: 3,        ac: 13,       hpMin: 101, hpMax: 115,   attack: 4,  dmgMin: 21,  dmgMax: 26,  save: 13 });\r\n        result.push({ cr: 4,        ac: 14,       hpMin: 116, hpMax: 130,   attack: 5,  dmgMin: 27,  dmgMax: 32,  save: 14 });\r\n        result.push({ cr: 5,        ac: 15,       hpMin: 131, hpMax: 145,   attack: 6,  dmgMin: 33,  dmgMax: 38,  save: 15 });\r\n        result.push({ cr: 6,        ac: 15,       hpMin: 146, hpMax: 160,   attack: 6,  dmgMin: 39,  dmgMax: 44,  save: 15 });\r\n        result.push({ cr: 7,        ac: 15,       hpMin: 161, hpMax: 175,   attack: 6,  dmgMin: 45,  dmgMax: 50,  save: 15 });\r\n        result.push({ cr: 8,        ac: 16,       hpMin: 176, hpMax: 190,   attack: 7,  dmgMin: 51,  dmgMax: 56,  save: 16 });\r\n        result.push({ cr: 9,        ac: 16,       hpMin: 191, hpMax: 205,   attack: 7,  dmgMin: 57,  dmgMax: 62,  save: 16 });\r\n        result.push({ cr: 10,       ac: 17,       hpMin: 206, hpMax: 220,   attack: 7,  dmgMin: 63,  dmgMax: 68,  save: 16 });\r\n        result.push({ cr: 11,       ac: 17,       hpMin: 221, hpMax: 235,   attack: 8,  dmgMin: 69,  dmgMax: 74,  save: 17 });\r\n        result.push({ cr: 12,       ac: 17,       hpMin: 236, hpMax: 250,   attack: 8,  dmgMin: 75,  dmgMax: 80,  save: 17 });\r\n        result.push({ cr: 13,       ac: 18,       hpMin: 251, hpMax: 265,   attack: 8,  dmgMin: 81,  dmgMax: 86,  save: 18 });\r\n        result.push({ cr: 14,       ac: 18,       hpMin: 266, hpMax: 280,   attack: 8,  dmgMin: 87,  dmgMax: 92,  save: 18 });\r\n        result.push({ cr: 15,       ac: 18,       hpMin: 281, hpMax: 295,   attack: 8,  dmgMin: 93,  dmgMax: 98,  save: 18 });\r\n        result.push({ cr: 16,       ac: 18,       hpMin: 296, hpMax: 310,   attack: 9,  dmgMin: 99,  dmgMax: 104, save: 18 });\r\n        result.push({ cr: 17,       ac: 19,       hpMin: 311, hpMax: 325,   attack: 10, dmgMin: 105, dmgMax: 110, save: 19 });\r\n        result.push({ cr: 18,       ac: 19,       hpMin: 326, hpMax: 340,   attack: 10, dmgMin: 111, dmgMax: 116, save: 19 });\r\n        result.push({ cr: 19,       ac: 19,       hpMin: 341, hpMax: 355,   attack: 10, dmgMin: 117, dmgMax: 122, save: 19 });\r\n        result.push({ cr: 20,       ac: 19,       hpMin: 356, hpMax: 400,   attack: 10, dmgMin: 123, dmgMax: 140, save: 19 });\r\n        result.push({ cr: 21,       ac: 19,       hpMin: 401, hpMax: 445,   attack: 11, dmgMin: 141, dmgMax: 158, save: 20 });\r\n        result.push({ cr: 22,       ac: 19,       hpMin: 446, hpMax: 490,   attack: 11, dmgMin: 159, dmgMax: 176, save: 20 });\r\n        result.push({ cr: 23,       ac: 19,       hpMin: 491, hpMax: 535,   attack: 11, dmgMin: 177, dmgMax: 194, save: 20 });\r\n        result.push({ cr: 24,       ac: 19,       hpMin: 536, hpMax: 580,   attack: 12, dmgMin: 195, dmgMax: 212, save: 21 });\r\n        result.push({ cr: 25,       ac: 19,       hpMin: 581, hpMax: 625,   attack: 12, dmgMin: 213, dmgMax: 230, save: 21 });\r\n        result.push({ cr: 26,       ac: 19,       hpMin: 626, hpMax: 670,   attack: 12, dmgMin: 231, dmgMax: 248, save: 21 });\r\n        result.push({ cr: 27,       ac: 19,       hpMin: 671, hpMax: 715,   attack: 13, dmgMin: 249, dmgMax: 266, save: 22 });\r\n        result.push({ cr: 28,       ac: 19,       hpMin: 716, hpMax: 760,   attack: 13, dmgMin: 267, dmgMax: 284, save: 22 });\r\n        result.push({ cr: 29,       ac: 19,       hpMin: 761, hpMax: 805,   attack: 13, dmgMin: 285, dmgMax: 302, save: 22 });\r\n        result.push({ cr: 30,       ac: 19,       hpMin: 806, hpMax: 850,   attack: 14, dmgMin: 303, dmgMax: 320, save: 23 });\r\n\r\n        return result;\r\n    }\r\n\r\n    public static experience(cr: number): number {\r\n        switch (cr) {\r\n            case 0: return 10;\r\n            case 0.125: return 25;\r\n            case 0.25: return 50;\r\n            case 0.5: return 100;\r\n            case 1: return 200;\r\n            case 2: return 450;\r\n            case 3: return 700;\r\n            case 4: return 1100;\r\n            case 5: return 1800;\r\n            case 6: return 2300;\r\n            case 7: return 2900;\r\n            case 8: return 3900;\r\n            case 9: return 5000;\r\n            case 10: return 5900;\r\n            case 11: return 7200;\r\n            case 12: return 8400;\r\n            case 13: return 10000;\r\n            case 14: return 11500;\r\n            case 15: return 13000;\r\n            case 16: return 15000;\r\n            case 17: return 18000;\r\n            case 18: return 20000;\r\n            case 19: return 22000;\r\n            case 20: return 25000;\r\n            case 21: return 33000;\r\n            case 22: return 41000;\r\n            case 23: return 50000;\r\n            case 24: return 62000;\r\n            case 30: return 155000;\r\n            default: return 0;\r\n        }\r\n    }\r\n\r\n    public static experienceFactor(count: number): number {\r\n        switch (count) {\r\n            case 0:\r\n                return 0;\r\n            case 1:\r\n                return 1;\r\n            case 2:\r\n                return 1.5;\r\n            case 3:\r\n            case 4:\r\n            case 5:\r\n            case 6:\r\n                return 2;\r\n            case 7:\r\n            case 8:\r\n            case 9:\r\n            case 10:\r\n                return 2.5;\r\n            case 11:\r\n            case 12:\r\n            case 13:\r\n            case 14:\r\n                return 3;\r\n            default:\r\n                return 4;\r\n        }\r\n    }\r\n\r\n    public static pcExperience(level: number, difficulty: string): number {\r\n        switch (difficulty) {\r\n            case 'easy':\r\n                switch (level) {\r\n                    case 1: return 25;\r\n                    case 2: return 50;\r\n                    case 3: return 75;\r\n                    case 4: return 125;\r\n                    case 5: return 250;\r\n                    case 6: return 300;\r\n                    case 7: return 350;\r\n                    case 8: return 450;\r\n                    case 9: return 550;\r\n                    case 10: return 600;\r\n                    case 11: return 800;\r\n                    case 12: return 1000;\r\n                    case 13: return 1100;\r\n                    case 14: return 1250;\r\n                    case 15: return 1400;\r\n                    case 16: return 1600;\r\n                    case 17: return 2000;\r\n                    case 18: return 2100;\r\n                    case 19: return 2400;\r\n                    case 20: return 2800;\r\n                    default: return 0;\r\n                }\r\n            case 'medium':\r\n                switch (level) {\r\n                    case 1: return 50;\r\n                    case 2: return 100;\r\n                    case 3: return 150;\r\n                    case 4: return 250;\r\n                    case 5: return 500;\r\n                    case 6: return 600;\r\n                    case 7: return 750;\r\n                    case 8: return 900;\r\n                    case 9: return 1100;\r\n                    case 10: return 1200;\r\n                    case 11: return 1600;\r\n                    case 12: return 2000;\r\n                    case 13: return 2200;\r\n                    case 14: return 2500;\r\n                    case 15: return 2800;\r\n                    case 16: return 3200;\r\n                    case 17: return 3900;\r\n                    case 18: return 4200;\r\n                    case 19: return 4900;\r\n                    case 20: return 5700;\r\n                    default: return 0;\r\n                }\r\n            case 'hard':\r\n                switch (level) {\r\n                    case 1: return 75;\r\n                    case 2: return 150;\r\n                    case 3: return 225;\r\n                    case 4: return 375;\r\n                    case 5: return 750;\r\n                    case 6: return 900;\r\n                    case 7: return 1100;\r\n                    case 8: return 1400;\r\n                    case 9: return 1600;\r\n                    case 10: return 1900;\r\n                    case 11: return 2400;\r\n                    case 12: return 3000;\r\n                    case 13: return 3400;\r\n                    case 14: return 3800;\r\n                    case 15: return 4300;\r\n                    case 16: return 4800;\r\n                    case 17: return 5900;\r\n                    case 18: return 6300;\r\n                    case 19: return 7300;\r\n                    case 20: return 8500;\r\n                    default: return 0;\r\n                }\r\n            case 'deadly':\r\n                switch (level) {\r\n                    case 1: return 100;\r\n                    case 2: return 200;\r\n                    case 3: return 400;\r\n                    case 4: return 500;\r\n                    case 5: return 1100;\r\n                    case 6: return 1400;\r\n                    case 7: return 1700;\r\n                    case 8: return 2100;\r\n                    case 9: return 2400;\r\n                    case 10: return 2800;\r\n                    case 11: return 3600;\r\n                    case 12: return 4500;\r\n                    case 13: return 5100;\r\n                    case 14: return 5700;\r\n                    case 15: return 6400;\r\n                    case 16: return 7200;\r\n                    case 17: return 8800;\r\n                    case 18: return 9500;\r\n                    case 19: return 10900;\r\n                    case 20: return 12700;\r\n                    default: return 0;\r\n                }\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n\r\n    public static traitType(type: string, plural: boolean): string {\r\n        let str = '';\r\n        switch (type) {\r\n            case 'trait':\r\n                str = 'trait';\r\n                break;\r\n            case 'action':\r\n                str = 'action';\r\n                break;\r\n            case 'bonus':\r\n                str = 'bonus action';\r\n                break;\r\n            case 'reaction':\r\n                str = 'reaction';\r\n                break;\r\n            case 'legendary':\r\n                str = 'legendary action';\r\n                break;\r\n            case 'lair':\r\n                str = 'lair action';\r\n                break;\r\n        }\r\n\r\n        if (plural) {\r\n            str += 's';\r\n        }\r\n\r\n        return str;\r\n    }\r\n\r\n    public static nudgeChallenge(value: number, delta: number): number {\r\n        let result = 0;\r\n\r\n        switch (value) {\r\n            case 0:\r\n                if (delta === -1) {\r\n                    result = 0;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 0.125;\r\n                }\r\n                break;\r\n            case 0.125:\r\n                if (delta === -1) {\r\n                    result = 0;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 0.25;\r\n                }\r\n                break;\r\n            case 0.25:\r\n                if (delta === -1) {\r\n                    result = 0.125;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 0.5;\r\n                }\r\n                break;\r\n            case 0.5:\r\n                if (delta === -1) {\r\n                    result = 0.25;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 1;\r\n                }\r\n                break;\r\n            case 1:\r\n                if (delta === -1) {\r\n                    result = 0.5;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 2;\r\n                }\r\n                break;\r\n            default:\r\n                result = value + delta;\r\n                break;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public static nudgeSize(value: string, delta: number): string {\r\n        const sizes = ['tiny', 'small', 'medium', 'large', 'huge', 'gargantuan'];\r\n        let index = sizes.indexOf(value) + delta;\r\n        if (index < 0) {\r\n            index = 0;\r\n        }\r\n        if (index >= sizes.length) {\r\n            index = sizes.length - 1;\r\n        }\r\n        return sizes[index];\r\n    }\r\n\r\n    public static conditionText(condition: Condition): string[] {\r\n        switch (condition.name) {\r\n            case 'blinded':\r\n                return [\r\n                    'a blinded creature can’t see and automatically fails any ability check that requires sight',\r\n                    'attack rolls against the creature have advantage, and the creature’s attack rolls have disadvantage'\r\n                ];\r\n            case 'charmed':\r\n                return [\r\n                    'a charmed creature can’t attack the charmer or target the charmer with harmful abilities or magical effects',\r\n                    'the charmer has advantage on any ability check to interact socially with the creature'\r\n                ];\r\n            case 'deafened':\r\n                return [\r\n                    'a deafened creature can’t hear and automatically fails any ability check that requires hearing.'\r\n                ];\r\n            case 'exhaustion': {\r\n                switch (condition.level) {\r\n                case 1:\r\n                    return [\r\n                        'disadvantage on ability checks'\r\n                    ];\r\n                case 2:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved'\r\n                    ];\r\n                case 3:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved',\r\n                        'disadvantage on attack rolls and saving throws'\r\n                    ];\r\n                case 4:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved',\r\n                        'disadvantage on attack rolls and saving throws',\r\n                        'hit point maximum halved'\r\n                    ];\r\n                case 5:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved',\r\n                        'disadvantage on attack rolls and saving throws',\r\n                        'hit point maximum halved',\r\n                        'speed reduced to 0'\r\n                    ];\r\n                case 6:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved',\r\n                        'disadvantage on attack rolls and saving throws',\r\n                        'hit point maximum halved',\r\n                        'speed reduced to 0',\r\n                        'death'\r\n                    ];\r\n                default:\r\n                    return [];\r\n                }\r\n            }\r\n            case 'frightened':\r\n                return [\r\n                    'a frightened creature has disadvantage on ability checks and attack rolls while the source of its fear is within line of sight',\r\n                    'the creature can’t willingly move closer to the source of its fear'\r\n                ];\r\n            case 'grappled':\r\n                return [\r\n                    'a grappled creature’s speed becomes 0, and it can’t benefit from any bonus to its speed',\r\n                    'the condition ends if the grappler is incapacitated',\r\n                    'the condition also ends if an effect removes the grappled creature from the reach of the grappler or grappling effect'\r\n                ];\r\n            case 'incapacitated':\r\n                return [\r\n                    'an incapacitated creature can’t take actions or reactions',\r\n                    'being incapacitated breaks concentration'\r\n                ];\r\n            case 'invisible':\r\n                return [\r\n                    'an invisible creature is impossible to see without the aid of magic or a special sense',\r\n                    'for the purpose of hiding, the creature is heavily obscured',\r\n                    'the creature’s location can be detected by any noise it makes or any tracks it leaves',\r\n                    'attack rolls against the creature have disadvantage, and the creature’s attack rolls have advantage'\r\n                ];\r\n            case 'paralyzed':\r\n                return [\r\n                    'a paralyzed creature is incapacitated (can’t take actions or reactions) and can’t move or speak',\r\n                    'the creature automatically fails strength and dexterity saving throws',\r\n                    'attack rolls against the creature have advantage',\r\n                    'any attack that hits the creature is a critical hit if the attacker is within 5 feet of the creature'\r\n                ];\r\n            case 'petrified':\r\n                return [\r\n                    /* tslint:disable-next-line:max-line-length */\r\n                    'a petrified creature is transformed, along with any nonmagical objects it is wearing or carrying, into a solid inanimate substance (usually stone)',\r\n                    'its weight increases by a factor of ten, and it ceases aging',\r\n                    'the creature is incapacitated (can’t take actions or reactions), can’t move or speak, and is unaware of its surroundings',\r\n                    'attack rolls against the creature have advantage',\r\n                    'the creature automatically fails strength and dexterity saving throws',\r\n                    'the creature has resistance to all damage',\r\n                    'the creature is immune to poison and disease, although a poison or disease already in its system is suspended, not neutralized'\r\n                ];\r\n            case 'poisoned':\r\n                return [\r\n                    'a poisoned creature has disadvantage on attack rolls and ability checks'\r\n                ];\r\n            case 'prone':\r\n                return [\r\n                    'a prone creature’s only movement option is to crawl, unless it stands up and thereby ends the condition',\r\n                    'the creature has disadvantage on attack rolls',\r\n                    /* tslint:disable-next-line:max-line-length */\r\n                    'an attack roll against the creature has advantage if the attacker is Within 5 feet of the creature; otherwise, the attack roll has disadvantage'\r\n                ];\r\n            case 'restrained':\r\n                return [\r\n                    'a restrained creature’s speed becomes 0, and it can’t benefit from any bonus to its speed',\r\n                    'attack rolls against the creature have advantage, and the creature’s attack rolls have disadvantage',\r\n                    'the creature has disadvantage on dexterity saving throws'\r\n                ];\r\n            case 'stunned':\r\n                return [\r\n                    'a stunned creature is incapacitated (can’t take actions or reactions), can’t move, and can speak only falteringly',\r\n                    'the creature automatically fails strength and dexterity saving throws',\r\n                    'attack rolls against the creature have advantage'\r\n                ];\r\n            case 'unconscious':\r\n                return [\r\n                    'an unconscious creature is incapacitated (can’t take actions or reactions), can’t move or speak, and is unaware of its surroundings',\r\n                    'the creature drops whatever its holding and falls prone',\r\n                    'the creature automatically fails strength and dexterity saving throws',\r\n                    'attack rolls against the creature have advantage',\r\n                    'any attack that hits the creature is a critical hit if the attacker is within 5 feet of the creature'\r\n                ];\r\n            case 'custom':\r\n                return [];\r\n            default:\r\n                return [];\r\n        }\r\n    }\r\n\r\n    public static conditionDurationText(condition: Condition, combat: Combat) {\r\n        if (condition.duration !== null) {\r\n            switch (condition.duration.type) {\r\n                case 'saves':\r\n                    const saveDuration = condition.duration as ConditionDurationSaves;\r\n                    let saveType = saveDuration.saveType.toString();\r\n                    if (saveType !== 'death') {\r\n                        saveType = saveType.toUpperCase();\r\n                    }\r\n                    const saves = saveDuration.count > 1 ? 'saves' : 'save';\r\n                    return 'until you make ' + saveDuration.count + ' ' + saveType + ' ' + saves + ' at dc ' + saveDuration.saveDC;\r\n                case 'combatant':\r\n                    const combatantDuration = condition.duration as ConditionDurationCombatant;\r\n                    const point = combatantDuration.point;\r\n                    const c = combat.combatants.find(cmb => cmb.id === combatantDuration.combatantID);\r\n                    const combatant = c ? (c.displayName || c.name || 'unnamed monster') + '\\'s' : 'someone\\'s';\r\n                    return 'until the ' + point + ' of ' + combatant + ' next turn';\r\n                case 'rounds':\r\n                    const roundsDuration = condition.duration as ConditionDurationRounds;\r\n                    const rounds = roundsDuration.count > 1 ? 'rounds' : 'round';\r\n                    return 'for ' + roundsDuration.count + ' ' + rounds;\r\n                default:\r\n                    return null;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public static getMonsterNames(encounter: Encounter | EncounterWave): { id: string, names: string[] }[] {\r\n        const monsterNames: any[] = [];\r\n        if (encounter) {\r\n            encounter.slots.forEach(slot => {\r\n                const names: any[] = [];\r\n                if (slot.count === 1) {\r\n                    names.push(slot.monsterName);\r\n                } else {\r\n                    for (let n = 0; n !== slot.count; ++n) {\r\n                        names.push(slot.monsterName + ' ' + (n + 1));\r\n                    }\r\n                }\r\n\r\n                monsterNames.push({\r\n                    id: slot.id,\r\n                    names: names\r\n                });\r\n            });\r\n        }\r\n\r\n        return monsterNames;\r\n    }\r\n\r\n    public static getTagDescription(tag: string) {\r\n        switch (tag) {\r\n            case 'conc':\r\n                return 'concentrating';\r\n            case 'bane':\r\n                return 'baned (subtract d4 from attack rolls and saving throws)';\r\n            case 'bless':\r\n                return 'blessed (add d4 to attack rolls and saving throws)';\r\n            case 'hex':\r\n                return 'hexed (disadvantage on one saving throw; take additional damage on hit)';\r\n            default:\r\n                return tag;\r\n        }\r\n    }\r\n}\r\n","import Utils from './utils';\r\n\r\nimport { Combat, CombatSetup, Notification } from '../models/combat';\r\nimport { Condition, ConditionDurationCombatant, ConditionDurationRounds, ConditionDurationSaves } from '../models/condition';\r\nimport { Encounter, EncounterSlot, EncounterWave, MonsterFilter } from '../models/encounter';\r\nimport { Map, MapFolio, MapItem } from '../models/map-folio';\r\nimport { Monster, MonsterGroup, Trait } from '../models/monster-group';\r\nimport { Companion, Party, PC } from '../models/party';\r\n\r\nexport default class Factory {\r\n\r\n    public static createParty(): Party {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            pcs: []\r\n        };\r\n    }\r\n\r\n    public static createPC(): PC {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'pc',\r\n            active: true,\r\n            player: '',\r\n            name: '',\r\n            race: '',\r\n            classes: '',\r\n            level: 1,\r\n            languages: 'Common',\r\n            passiveInsight: 10,\r\n            passiveInvestigation: 10,\r\n            passivePerception: 10,\r\n            initiative: 10,\r\n            url: '',\r\n            companions: []\r\n        };\r\n    }\r\n\r\n    public static createCompanion(): Companion {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: ''\r\n        };\r\n    }\r\n\r\n    public static createMonsterGroup(): MonsterGroup {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            monsters: []\r\n        };\r\n    }\r\n\r\n    public static createMonster(): Monster {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'monster',\r\n            name: '',\r\n            size: 'medium',\r\n            category: 'humanoid',\r\n            tag: '',\r\n            alignment: '',\r\n            challenge: 1,\r\n            abilityScores: {\r\n                str: 10,\r\n                dex: 10,\r\n                con: 10,\r\n                int: 10,\r\n                wis: 10,\r\n                cha: 10\r\n            },\r\n            ac: 10,\r\n            hpMax: 4,\r\n            hpTemp: 0,\r\n            hitDice: 1,\r\n            damage: {\r\n                resist: '',\r\n                vulnerable: '',\r\n                immune: ''\r\n            },\r\n            savingThrows: '',\r\n            speed: '',\r\n            skills: '',\r\n            senses: '',\r\n            languages: '',\r\n            equipment: '',\r\n            traits: [],\r\n            conditionImmunities: ''\r\n        };\r\n    }\r\n\r\n    public static createTrait(): Trait {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            usage: '',\r\n            type: 'action',\r\n            text: '',\r\n            uses: 0\r\n        };\r\n    }\r\n\r\n    public static createEncounter(): Encounter {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            slots: [],\r\n            waves: []\r\n        };\r\n    }\r\n\r\n    public static createEncounterSlot(): EncounterSlot {\r\n        return {\r\n            id: Utils.guid(),\r\n            monsterGroupName: '',\r\n            monsterName: '',\r\n            count: 1\r\n        };\r\n    }\r\n\r\n    public static createEncounterWave(): EncounterWave {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            slots: []\r\n        };\r\n    }\r\n\r\n    public static createMonsterFilter(): MonsterFilter {\r\n        return {\r\n            name: '',\r\n            challengeMin: 0,\r\n            challengeMax: 5,\r\n            category: 'all types',\r\n            size: 'all sizes'\r\n        };\r\n    }\r\n\r\n    public static createMapFolio(): MapFolio {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            maps: []\r\n        };\r\n    }\r\n\r\n    public static createMap(): Map {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            items: []\r\n        };\r\n    }\r\n\r\n    public static createMapItem(): MapItem {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'tile',\r\n            x: 0,\r\n            y: 0,\r\n            width: 4,\r\n            height: 4,\r\n            terrain: null,\r\n            customBackground: null,\r\n            style: null\r\n        };\r\n    }\r\n\r\n    public static createCombatSetup(): CombatSetup {\r\n        return {\r\n            partyID: null,\r\n            encounterID: null,\r\n            waveID: null,\r\n            folioID: null,\r\n            mapID: null,\r\n            monsterNames: [],\r\n            encounterInitMode: 'group'\r\n        };\r\n    }\r\n\r\n    public static createCombat(): Combat {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            encounterID: null,\r\n            combatants: [],\r\n            map: null,\r\n            round: 1,\r\n            notifications: [],\r\n            issues: [],\r\n            timestamp: null\r\n        };\r\n    }\r\n\r\n    public static createNotification(): Notification {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'condition-save',\r\n            data: null,\r\n            combatant: null\r\n        };\r\n    }\r\n\r\n    public static createCondition(): Condition {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            level: 1,\r\n            text: null,\r\n            duration: null\r\n        };\r\n    }\r\n\r\n    public static createConditionDurationSaves(): ConditionDurationSaves {\r\n        return {\r\n            type: 'saves',\r\n            count: 1,\r\n            saveType: 'str',\r\n            saveDC: 10,\r\n            point: 'start'\r\n        };\r\n    }\r\n\r\n    public static createConditionDurationCombatant(): ConditionDurationCombatant {\r\n        return {\r\n            type: 'combatant',\r\n            point: 'start',\r\n            combatantID: null\r\n        };\r\n    }\r\n\r\n    public static createConditionDurationRounds(): ConditionDurationRounds {\r\n        return {\r\n            type: 'rounds',\r\n            count: 1\r\n        };\r\n    }\r\n}\r\n","export interface MonsterGroup {\r\n    id: string;\r\n    name: string;\r\n    monsters: Monster[];\r\n}\r\n\r\nexport interface Monster {\r\n    id: string;\r\n    type: string;\r\n    name: string;\r\n    size: string;\r\n    category: string;\r\n    tag: string;\r\n    alignment: string;\r\n    challenge: number;\r\n    abilityScores: {\r\n        str: number;\r\n        dex: number;\r\n        con: number;\r\n        int: number;\r\n        wis: number;\r\n        cha: number;\r\n    };\r\n    ac: number;\r\n    hpMax: number;\r\n    hpTemp: number;\r\n    hitDice: number;\r\n    damage: {\r\n        resist: string;\r\n        vulnerable: string;\r\n        immune: string;\r\n    };\r\n    savingThrows: string;\r\n    speed: string;\r\n    skills: string;\r\n    senses: string;\r\n    languages: string;\r\n    equipment: string;\r\n    traits: Trait[];\r\n    conditionImmunities: string;\r\n}\r\n\r\nexport interface Trait {\r\n    id: string;\r\n    name: string;\r\n    usage: string;\r\n    type: 'trait' | 'action' | 'bonus' | 'reaction' | 'legendary' | 'lair';\r\n    text: string;\r\n    uses: number;\r\n}\r\n\r\nexport const SIZE_TYPES = [\r\n    'tiny',\r\n    'small',\r\n    'medium',\r\n    'large',\r\n    'huge',\r\n    'gargantuan'\r\n];\r\n\r\nexport const CATEGORY_TYPES = [\r\n    'aberration',\r\n    'beast',\r\n    'celestial',\r\n    'construct',\r\n    'dragon',\r\n    'elemental',\r\n    'fey',\r\n    'fiend',\r\n    'giant',\r\n    'humanoid',\r\n    'monstrosity',\r\n    'ooze',\r\n    'plant',\r\n    'undead'\r\n];\r\n\r\nexport const TRAIT_TYPES = [\r\n    'trait',\r\n    'action',\r\n    'bonus',\r\n    'reaction',\r\n    'legendary',\r\n    'lair'\r\n];\r\n","import Factory from './factory';\r\nimport Utils from './utils';\r\n\r\nimport { Monster, Trait, TRAIT_TYPES } from '../models/monster-group';\r\n\r\nexport default class Frankenstein {\r\n    public static nudgeValue(target: Monster, field: string, delta: number) {\r\n        let source: any = target;\r\n        let value: any = null;\r\n        const tokens = field.split('.');\r\n        tokens.forEach(token => {\r\n            if (token === tokens[tokens.length - 1]) {\r\n                value = source[token];\r\n            } else {\r\n                source = source[token];\r\n            }\r\n        });\r\n\r\n        let newValue;\r\n        switch (field) {\r\n            case 'challenge':\r\n                newValue = Utils.nudgeChallenge(value, delta);\r\n                break;\r\n            case 'size':\r\n                newValue = Utils.nudgeSize(value, delta);\r\n                break;\r\n            default:\r\n                newValue = (value ? value : 0) + delta;\r\n                break;\r\n        }\r\n        Frankenstein.changeValue(target, field, newValue);\r\n    }\r\n\r\n    public static changeValue(target: Monster, field: string, value: any) {\r\n        let source: any = target;\r\n        const tokens = field.split('.');\r\n        tokens.forEach(token => {\r\n            if (token === tokens[tokens.length - 1]) {\r\n                source[token] = value;\r\n\r\n                if ((field === 'abilityScores.con') || (field === 'size') || (field === 'hitDice')) {\r\n                    const sides = Utils.hitDieType(target.size);\r\n                    const conMod = Math.floor((target.abilityScores.con - 10) / 2);\r\n                    const hpPerDie = ((sides + 1) / 2) + conMod;\r\n                    const hp = Math.floor(target.hitDice * hpPerDie);\r\n                    target.hpMax = hp;\r\n                }\r\n            } else {\r\n                source = source[token];\r\n            }\r\n        });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Monster creation\r\n\r\n    public static clone(monster: Monster, name: string): Monster {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'monster',\r\n            name: name || (monster.name + ' copy'),\r\n            size: monster.size,\r\n            category: monster.category,\r\n            tag: monster.tag,\r\n            alignment: monster.alignment,\r\n            challenge: monster.challenge,\r\n            abilityScores: {\r\n                str: monster.abilityScores.str,\r\n                dex: monster.abilityScores.dex,\r\n                con: monster.abilityScores.con,\r\n                int: monster.abilityScores.int,\r\n                wis: monster.abilityScores.wis,\r\n                cha: monster.abilityScores.cha\r\n            },\r\n            ac: monster.ac,\r\n            hpMax: monster.hpMax,\r\n            hpTemp: monster.hpTemp,\r\n            hitDice: monster.hitDice,\r\n            damage: {\r\n                resist: monster.damage.resist,\r\n                vulnerable: monster.damage.vulnerable,\r\n                immune: monster.damage.immune\r\n            },\r\n            savingThrows: monster.savingThrows,\r\n            speed: monster.speed,\r\n            skills: monster.skills,\r\n            senses: monster.senses,\r\n            languages: monster.languages,\r\n            equipment: monster.equipment,\r\n            traits: monster.traits.map(trait => {\r\n                return {\r\n                    id: Utils.guid(),\r\n                    name: trait.name,\r\n                    usage: trait.usage,\r\n                    type: trait.type,\r\n                    text: trait.text,\r\n                    uses: 0\r\n                };\r\n            }),\r\n            conditionImmunities: monster.conditionImmunities\r\n        };\r\n    }\r\n\r\n    public static createFromJSON(data: any): Monster {\r\n        const monster = Factory.createMonster();\r\n\r\n        monster.type = 'monster';\r\n        monster.name = data.name;\r\n        monster.size = data.size.toLowerCase();\r\n        monster.category = data.type;\r\n        monster.tag = data.subtype;\r\n        monster.alignment = data.alignment;\r\n        monster.challenge = Utils.parseChallenge(data.challenge_rating);\r\n        monster.ac = data.armor_class;\r\n        monster.hpMax = data.hit_points;\r\n        monster.speed = data.speed;\r\n        monster.senses = data.senses;\r\n        monster.languages = data.languages;\r\n\r\n        const index = data.hit_dice.indexOf('d');\r\n        monster.hitDice = parseInt(data.hit_dice.substring(0, index), 10);\r\n\r\n        monster.abilityScores.str = data.strength;\r\n        monster.abilityScores.dex = data.dexterity;\r\n        monster.abilityScores.con = data.constitution;\r\n        monster.abilityScores.int = data.intelligence;\r\n        monster.abilityScores.wis = data.wisdom;\r\n        monster.abilityScores.cha = data.charisma;\r\n\r\n        monster.damage.resist = data.damage_resistances;\r\n        monster.damage.vulnerable = data.damage_vulnerabilities;\r\n        monster.damage.immune = data.damage_immunities;\r\n        monster.conditionImmunities = data.condition_immunities;\r\n\r\n        const saves = [\r\n            {\r\n                field: 'strength_save',\r\n                text: 'Strength'\r\n            },\r\n            {\r\n                field: 'dexterity_save',\r\n                text: 'Dexterity'\r\n            },\r\n            {\r\n                field: 'constitution_save',\r\n                text: 'Constitution'\r\n            },\r\n            {\r\n                field: 'intelligence_save',\r\n                text: 'Intelligence'\r\n            },\r\n            {\r\n                field: 'wisdom_save',\r\n                text: 'Wisdom'\r\n            },\r\n            {\r\n                field: 'charisma_save',\r\n                text: 'Charisma'\r\n            }\r\n        ];\r\n        saves.forEach(save => {\r\n            if (data[save.field]) {\r\n                const str = save.text + ' ' + data[save.field];\r\n                monster.savingThrows += monster.savingThrows === '' ? str : ', ' + str;\r\n            }\r\n        });\r\n\r\n        const skills = [\r\n            {\r\n                field: 'acrobatics',\r\n                text: 'Acrobatics'\r\n            },\r\n            {\r\n                field: 'animal_handling',\r\n                text: 'Animal handling'\r\n            },\r\n            {\r\n                field: 'arcana',\r\n                text: 'Arcana'\r\n            },\r\n            {\r\n                field: 'athletics',\r\n                text: 'Athletics'\r\n            },\r\n            {\r\n                field: 'deception',\r\n                text: 'Deception'\r\n            },\r\n            {\r\n                field: 'history',\r\n                text: 'History'\r\n            },\r\n            {\r\n                field: 'insight',\r\n                text: 'Insight'\r\n            },\r\n            {\r\n                field: 'intimidation',\r\n                text: 'Intimidation'\r\n            },\r\n            {\r\n                field: 'investigation',\r\n                text: 'Investigation'\r\n            },\r\n            {\r\n                field: 'medicine',\r\n                text: 'Medicine'\r\n            },\r\n            {\r\n                field: 'nature',\r\n                text: 'Nature'\r\n            },\r\n            {\r\n                field: 'perception',\r\n                text: 'Perception'\r\n            },\r\n            {\r\n                field: 'performance',\r\n                text: 'Performance'\r\n            },\r\n            {\r\n                field: 'persuasion',\r\n                text: 'Persuasion'\r\n            },\r\n            {\r\n                field: 'religion',\r\n                text: 'Religion'\r\n            },\r\n            {\r\n                field: 'sleight_of_hand',\r\n                text: 'Sleight of hand'\r\n            },\r\n            {\r\n                field: 'stealth',\r\n                text: 'Stealth'\r\n            },\r\n            {\r\n                field: 'survival',\r\n                text: 'Survival'\r\n            }\r\n        ];\r\n        skills.forEach(skill => {\r\n            if (data[skill.field]) {\r\n                const str = skill.text + ' ' + data[skill.field];\r\n                monster.skills += monster.skills === '' ? str : ', ' + str;\r\n            }\r\n        });\r\n\r\n        if (data.special_abilities) {\r\n            data.special_abilities.forEach((rawTrait: any) => {\r\n                const trait = this.buildTrait(rawTrait, 'trait');\r\n                monster.traits.push(trait);\r\n            });\r\n        }\r\n        if (data.actions) {\r\n            data.actions.forEach((rawTrait: any) => {\r\n                const trait = this.buildTrait(rawTrait, 'action');\r\n                monster.traits.push(trait);\r\n            });\r\n        }\r\n        if (data.reactions) {\r\n            data.reactions.forEach((rawTrait: any) => {\r\n                const trait = this.buildTrait(rawTrait, 'reaction');\r\n                monster.traits.push(trait);\r\n            });\r\n        }\r\n        if (data.legendary_actions) {\r\n            data.legendary_actions.forEach((rawTrait: any) => {\r\n                const trait = this.buildTrait(rawTrait, 'legendary');\r\n                monster.traits.push(trait);\r\n            });\r\n        }\r\n\r\n        return monster;\r\n    }\r\n\r\n    private static buildTrait(rawTrait: any, type: 'trait' | 'action' | 'bonus' | 'reaction' | 'legendary' | 'lair'): Trait {\r\n        let name = '';\r\n        let usage = '';\r\n\r\n        const openBracket = rawTrait.name.indexOf('(');\r\n        if (openBracket === -1) {\r\n            name = rawTrait.name;\r\n        } else {\r\n            const closeBracket = rawTrait.name.indexOf(')');\r\n            name = rawTrait.name.substring(0, openBracket - 1);\r\n            usage = rawTrait.name.substring(openBracket + 1, closeBracket).toLowerCase();\r\n        }\r\n\r\n        const text: string = rawTrait.desc.replace(/•/g, '*');\r\n\r\n        let finalType = type;\r\n        if (name === 'Lair Actions') {\r\n            finalType = 'lair';\r\n        }\r\n        if (text.indexOf('As a bonus action') === 0) {\r\n            finalType = 'bonus';\r\n        }\r\n\r\n        return {\r\n            id: Utils.guid(),\r\n            type: finalType,\r\n            name: name,\r\n            usage: usage,\r\n            text: text,\r\n            uses: 0\r\n        };\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Traits\r\n\r\n    public static copyTrait(target: Monster, trait: Trait) {\r\n        const copy = JSON.parse(JSON.stringify(trait));\r\n        copy.id = Utils.guid();\r\n        target.traits.push(copy);\r\n    }\r\n\r\n    public static addTrait(target: Monster, type: 'trait' | 'action' | 'bonus' | 'reaction' | 'legendary' | 'lair') {\r\n        const trait = Factory.createTrait();\r\n        trait.type = type;\r\n        trait.name = 'New ' + Utils.traitType(type, false).toLowerCase();\r\n        target.traits.push(trait);\r\n    }\r\n\r\n    public static removeTrait(target: Monster, trait: Trait) {\r\n        const index = target.traits.indexOf(trait);\r\n        target.traits.splice(index, 1);\r\n    }\r\n\r\n    public static swapTraits(target: Monster, t1: Trait, t2: Trait) {\r\n        const index1 = target.traits.indexOf(t1);\r\n        const index2 = target.traits.indexOf(t2);\r\n        target.traits[index2] = t1;\r\n        target.traits[index1] = t2;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Randomisation\r\n\r\n    public static spliceMonsters(target: Monster, monsters: Monster[]) {\r\n        const fields = [\r\n            'size',\r\n            'category',\r\n            'tag',\r\n            'alignment',\r\n            'challenge',\r\n            'speed',\r\n            'senses',\r\n            'languages',\r\n            'equipment',\r\n            'abilityScores.str',\r\n            'abilityScores.dex',\r\n            'abilityScores.con',\r\n            'abilityScores.int',\r\n            'abilityScores.wis',\r\n            'abilityScores.cha',\r\n            'savingThrows',\r\n            'skills',\r\n            'ac',\r\n            'hitDice',\r\n            'damage.resist',\r\n            'damage.vulnerable',\r\n            'damage.immune',\r\n            'conditionImmunities'\r\n        ];\r\n        fields.forEach(field => {\r\n            this.setRandomValue(target, field, monsters);\r\n        });\r\n\r\n        target.traits = [];\r\n\r\n        TRAIT_TYPES.forEach(type => {\r\n            // Get all traits of this type\r\n            const traits: Trait[] = [];\r\n            monsters.forEach(m => {\r\n                m.traits.filter(t => t.type === type)\r\n                    .forEach(t => traits.push(t));\r\n            });\r\n\r\n            // Collate by name\r\n            const distinct: { trait: Trait, count: number }[] = [];\r\n            traits.forEach(t => {\r\n                const current = distinct.find(d => d.trait.name === t.name);\r\n                if (current) {\r\n                    current.count += 1;\r\n                } else {\r\n                    distinct.push({\r\n                        trait: t,\r\n                        count: 1\r\n                    });\r\n                }\r\n            });\r\n\r\n            // If any are common to all monsters, copy them and remove from the candidates\r\n            const addedIDs: string[] = [];\r\n            distinct.filter(d => d.count === monsters.length)\r\n                .forEach(d => {\r\n                    this.copyTrait(target, d.trait);\r\n                    addedIDs.push(d.trait.id);\r\n                });\r\n            addedIDs.forEach(id => {\r\n                const index = distinct.findIndex(d => d.trait.id === id);\r\n                distinct.splice(index, 1);\r\n            });\r\n\r\n            const avg = traits.length / monsters.length;\r\n            while (target.traits.filter(t => t.type === type).length < avg) {\r\n                const index = Math.floor(Math.random() * distinct.length);\r\n                const t = distinct[index].trait;\r\n                this.copyTrait(target, t);\r\n                distinct.splice(index, 1);\r\n            }\r\n        });\r\n    }\r\n\r\n    public static setRandomValue(target: Monster, field: string, monsters: Monster[]) {\r\n        const index = Math.floor(Math.random() * monsters.length);\r\n        const m = monsters[index];\r\n\r\n        let source: any = m;\r\n        let value = null;\r\n        const tokens = field.split('.');\r\n        tokens.forEach(token => {\r\n            if (token === tokens[tokens.length - 1]) {\r\n                value = source[token];\r\n            } else {\r\n                source = source[token];\r\n            }\r\n        });\r\n\r\n        this.changeValue(target, field, value);\r\n    }\r\n\r\n    public static addRandomTrait(target: Monster, type: string, monsters: Monster[]) {\r\n        const traits: Trait[] = [];\r\n        monsters.forEach(m => {\r\n            m.traits.filter(t => t.type === type)\r\n                .forEach(t => {\r\n                    traits.push(t);\r\n                });\r\n        });\r\n\r\n        const index = Math.floor(Math.random() * traits.length);\r\n        const trait = traits[index];\r\n\r\n        this.copyTrait(target, trait);\r\n    }\r\n}\r\n","import Factory from './factory';\r\nimport Utils from './utils';\r\n\r\nimport { Combat, Combatant } from '../models/combat';\r\nimport { Map } from '../models/map-folio';\r\n\r\nexport default class Mercator {\r\n    public static scatterCombatants(combat: Combat) {\r\n        if (!combat.map) {\r\n            return;\r\n        }\r\n\r\n        // Remove all monsters from the map\r\n        combat.map.items = combat.map.items.filter(item => item.type !== 'monster');\r\n\r\n        // Find map dimensions\r\n        const tiles = combat.map.items.filter(item => item.type === 'tile');\r\n        if (tiles.length > 0) {\r\n            const dimensions = Mercator.mapDimensions(combat.map);\r\n            if (dimensions) {\r\n                const monsters = combat.combatants.filter(combatant => combatant.type === 'monster');\r\n                monsters.forEach(combatant => {\r\n                    const candidateSquares: {x: number, y: number}[] = [];\r\n\r\n                    // Find all squares that we could add this monster to\r\n                    for (let x = dimensions.minX; x <= dimensions.maxX; ++x) {\r\n                        for (let y = dimensions.minY; y <= dimensions.maxY; ++y) {\r\n                            // Could we add this monster to this square?\r\n                            const canAddHere = Mercator.canAddMonsterHere(combat.map as Map, combatant, x, y);\r\n                            if (canAddHere) {\r\n                                candidateSquares.push({x: x, y: y});\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if ((candidateSquares.length > 0) && combat.map) {\r\n                        const index = Math.floor(Math.random() * candidateSquares.length);\r\n                        const square = candidateSquares[index];\r\n                        const size = Utils.miniSize(combatant.displaySize);\r\n\r\n                        const item = Factory.createMapItem();\r\n                        item.id = combatant.id;\r\n                        item.type = 'monster';\r\n                        item.x = square.x;\r\n                        item.y = square.y;\r\n                        item.height = size;\r\n                        item.width = size;\r\n                        combat.map.items.push(item);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private static mapDimensions(map: Map) {\r\n        const tiles = map.items.filter(item => item.type === 'tile');\r\n        if (tiles.length > 0) {\r\n            let minX: number = tiles[0].x;\r\n            let minY: number = tiles[0].y;\r\n            let maxX: number = tiles[0].x + tiles[0].width - 1;\r\n            let maxY: number = tiles[0].y + tiles[0].height - 1;\r\n            tiles.forEach(tile => {\r\n                minX = Math.min(minX, tile.x);\r\n                minY = Math.min(minY, tile.y);\r\n                maxX = Math.max(maxX, tile.x + tile.width - 1);\r\n                maxY = Math.max(maxY, tile.y + tile.height - 1);\r\n            });\r\n\r\n            return {\r\n                minX: minX,\r\n                minY: minY,\r\n                maxX: maxX,\r\n                maxY: maxY\r\n            };\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private static canAddMonsterHere(map: Map, combatant: Combatant, x: number, y: number) {\r\n        const coveredSquares: boolean[] = [];\r\n\r\n        const size = Utils.miniSize(combatant.displaySize);\r\n        const right = x + Math.max(1, size) - 1;\r\n        const bottom = y + Math.max(1, size) - 1;\r\n        for (let x1 = x; x1 <= right; ++x1) {\r\n            for (let y1 = y; y1 <= bottom; ++y1) {\r\n                // Is this square on an empty tile?\r\n                const occupants = Mercator.itemsAt(map as Map, x1, y1);\r\n                const canOccupy = (occupants.length > 0) && occupants.every(item => item.type === 'tile');\r\n                coveredSquares.push(canOccupy);\r\n            }\r\n        }\r\n\r\n        return coveredSquares.every(square => square);\r\n    }\r\n\r\n    private static itemsAt(map: Map, x: number, y: number) {\r\n        return map.items.filter(item => {\r\n            const left = item.x;\r\n            const right = item.x + item.width - 1;\r\n            const top = item.y;\r\n            const bottom = item.y + item.height - 1;\r\n            return (x >= left) && (x <= right) && (y >= top) && (y <= bottom);\r\n        });\r\n    }\r\n}\r\n","import Factory from './factory';\r\nimport Utils from './utils';\r\n\r\nimport { Encounter, EncounterSlot, MonsterFilter } from '../models/encounter';\r\nimport { Monster, MonsterGroup } from '../models/monster-group';\r\n\r\nexport default class Napoleon {\r\n    public static getMonsterCount(encounter: Encounter) {\r\n        let count = 0;\r\n\r\n        let slots: EncounterSlot[] = [];\r\n        slots = slots.concat(encounter.slots);\r\n        encounter.waves.forEach(wave => {\r\n            slots = slots.concat(wave.slots);\r\n        });\r\n\r\n        slots.forEach(slot => {\r\n            count += slot.count;\r\n        });\r\n\r\n        return count;\r\n    }\r\n\r\n    public static getEncounterXP(encounter: Encounter, getMonster: (monsterName: string, groupName: string) => Monster | null) {\r\n        let xp = 0;\r\n\r\n        let slots: EncounterSlot[] = [];\r\n        slots = slots.concat(encounter.slots);\r\n        encounter.waves.forEach(wave => {\r\n            slots = slots.concat(wave.slots);\r\n        });\r\n\r\n        slots.forEach(slot => {\r\n            const monster = getMonster(slot.monsterName, slot.monsterGroupName);\r\n            if (monster) {\r\n                xp += Utils.experience(monster.challenge) * slot.count;\r\n            }\r\n        });\r\n\r\n        return xp;\r\n    }\r\n\r\n    public static getAdjustedEncounterXP(encounter: Encounter, getMonster: (monsterName: string, groupName: string) => Monster | null) {\r\n        let count = 0;\r\n        let xp = 0;\r\n\r\n        let slots: EncounterSlot[] = [];\r\n        slots = slots.concat(encounter.slots);\r\n        encounter.waves.forEach(wave => {\r\n            slots = slots.concat(wave.slots);\r\n        });\r\n\r\n        slots.forEach(slot => {\r\n            count += slot.count;\r\n            const monster = getMonster(slot.monsterName, slot.monsterGroupName);\r\n            if (monster) {\r\n                xp += Utils.experience(monster.challenge) * slot.count;\r\n            }\r\n        });\r\n\r\n        return xp * Utils.experienceFactor(count);\r\n    }\r\n\r\n    public static getFilterDescription(filter: MonsterFilter) {\r\n        let summary = '';\r\n        if (filter.size !== 'all sizes') {\r\n            summary += summary ? ' ' + filter.size : filter.size;\r\n        }\r\n        if (filter.category !== 'all types') {\r\n            summary += summary ? ' ' + filter.category : filter.category;\r\n        }\r\n        const min = Utils.challenge(filter.challengeMin);\r\n        const max = Utils.challenge(filter.challengeMax);\r\n        const cr =  (filter.challengeMin === filter.challengeMax) ? min : min + ' to ' + max;\r\n        summary += ' monsters of cr ' + cr;\r\n        return summary;\r\n    }\r\n\r\n    public static buildEncounter(\r\n        encounter: Encounter, xp: number, filter: MonsterFilter, groups: MonsterGroup[],\r\n        getMonster: (monsterName: string, groupName: string) => Monster | null) {\r\n\r\n        while (Napoleon.getAdjustedEncounterXP(encounter, (monsterName, groupName) => getMonster(monsterName, groupName)) <= xp) {\r\n            if ((encounter.slots.length > 0) && (Utils.dieRoll(3) > 1)) {\r\n                // Increment a slot\r\n                const index = Math.floor(Math.random() * encounter.slots.length);\r\n                const slot = encounter.slots[index];\r\n                slot.count += 1;\r\n            } else {\r\n                // Pick a new monster\r\n                const candidates: { groupName: string, monsterName: string }[] = [];\r\n                groups.forEach(group => {\r\n                    group.monsters\r\n                        .filter(monster => Napoleon.matchMonster(monster, filter))\r\n                        .filter(monster => !encounter.slots.find(slot => (slot.monsterGroupName === group.name) && (slot.monsterName === monster.name)))\r\n                        .forEach(monster => candidates.push({groupName: group.name, monsterName: monster.name}));\r\n                });\r\n                if (candidates.length > 0) {\r\n                    const index = Math.floor(Math.random() * candidates.length);\r\n                    const slot = Factory.createEncounterSlot();\r\n                    slot.monsterGroupName = candidates[index].groupName;\r\n                    slot.monsterName = candidates[index].monsterName;\r\n                    encounter.slots.push(slot);\r\n                } else {\r\n                    if (encounter.slots.length === 0) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Split into waves\r\n        while ((encounter.slots.length > 1) && (Utils.dieRoll(10) === 10)) {\r\n            const index = Math.floor(Math.random() * encounter.slots.length);\r\n            const slot = encounter.slots[index];\r\n            encounter.slots = encounter.slots.filter(s => s.id !== slot.id);\r\n            const wave = Factory.createEncounterWave();\r\n            wave.name = 'wave ' + (encounter.waves.length + 2);\r\n            wave.slots.push(slot);\r\n            encounter.waves.push(wave);\r\n        }\r\n    }\r\n\r\n    public static matchMonster(monster: Monster, filter: MonsterFilter) {\r\n        if (monster.challenge < filter.challengeMin) {\r\n            return false;\r\n        }\r\n\r\n        if (monster.challenge > filter.challengeMax) {\r\n            return false;\r\n        }\r\n\r\n        if (filter.name !== '') {\r\n            if (!Utils.match(filter.name, monster.name)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (filter.category !== 'all types') {\r\n            if (monster.category !== filter.category) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (filter.size !== 'all sizes') {\r\n            if (monster.size !== filter.size) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n","import { Condition } from './condition';\r\nimport { Map } from './map-folio';\r\nimport { Monster, Trait } from './monster-group';\r\nimport { PC } from './party';\r\n\r\nexport interface CombatSetup {\r\n    partyID: string | null;\r\n    encounterID: string | null;\r\n    waveID: string | null;\r\n    folioID: string | null;\r\n    mapID: string | null;\r\n    monsterNames: { id: string, names: string[] }[];\r\n    encounterInitMode: 'manual' | 'individual' | 'group';\r\n}\r\n\r\nexport interface Combat {\r\n    id: string;\r\n    name: string;\r\n    encounterID: string | null;\r\n    combatants: ((Combatant & PC) | (Combatant & Monster))[];\r\n    map: Map | null;\r\n    round: number;\r\n    notifications: Notification[];\r\n    issues: string[];\r\n    timestamp: string | null;\r\n}\r\n\r\nexport interface Combatant {\r\n    id: string;\r\n    displayName: string;\r\n    displaySize: string;\r\n    showOnMap: boolean;\r\n    current: boolean;\r\n    pending: boolean;\r\n    active: boolean;\r\n    defeated: boolean;\r\n    initiative: number | null;\r\n    hp: number | null;\r\n    conditions: Condition[];\r\n    tags: string[];\r\n    altitude: number;\r\n    aura: {\r\n        radius: number;\r\n        style: 'square' | 'rounded' | 'circle';\r\n        color: string;\r\n    };\r\n}\r\n\r\nexport interface Notification {\r\n    id: string;\r\n    type: 'condition-save' | 'condition-end' | 'trait-recharge';\r\n    data: Condition | Trait | null;\r\n    combatant: (Combatant & Monster) | null;\r\n}\r\n\r\nexport const COMBAT_TAGS = [\r\n    'conc',\r\n    'bane',\r\n    'bless',\r\n    'hex'\r\n];\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    label: string;\r\n    display: 'switch' | 'button';\r\n    checked: boolean;\r\n    changeValue: (value: boolean) => void;\r\n    disabled: boolean;\r\n}\r\n\r\nexport default class Checkbox extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        display: 'switch',\r\n        disabled: false\r\n    };\r\n\r\n    private click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        this.props.changeValue(!this.props.checked);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'checkbox ' + this.props.display;\r\n            if (this.props.checked) {\r\n                style += ' checked';\r\n            }\r\n            if (this.props.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            let toggle = null;\r\n            if (this.props.display === 'switch') {\r\n                toggle = (\r\n                    <div className='toggle-container'>\r\n                        <div className='toggle'/>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={style} onClick={e => this.click(e)}>\r\n                    <div className='checkbox-label'>{this.props.label}</div>\r\n                    {toggle}\r\n                </div>\r\n            );\r\n\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport warning from '../../resources/icons/warning.svg';\r\n\r\ninterface Props {\r\n    text: string;\r\n    callback: () => void;\r\n    details: string;\r\n    disabled: boolean;\r\n}\r\n\r\ninterface State {\r\n    pressed: boolean;\r\n}\r\n\r\nexport default class ConfirmButton extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        details: null,\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            pressed: false\r\n        };\r\n    }\r\n\r\n    private toggle() {\r\n        this.setState({\r\n            pressed: !this.state.pressed\r\n        });\r\n    }\r\n\r\n    private perform() {\r\n        this.toggle();\r\n        this.props.callback();\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let content = null;\r\n            if (this.state.pressed) {\r\n                content = (\r\n                    <div>\r\n                        <div className='title'>{this.props.text} - are you sure?</div>\r\n                        <img className='image' src={warning} alt='warning' />\r\n                        {this.props.details ? <div className='details'>{this.props.details}</div> : null}\r\n                        <div className='confirmation'>\r\n                            <div className='destructive' onClick={() => this.perform()}>yes</div>\r\n                            <div className='non-destructive' onClick={() => this.toggle()}>no</div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                content = (\r\n                    <div>\r\n                        <div className='title'>{this.props.text}</div>\r\n                        <img className='image' src={warning} alt='warning' />\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <button className={this.props.disabled ? 'disabled' : ''} onClick={() => this.toggle()}>\r\n                    {content}\r\n                </button>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    controls: JSX.Element[];\r\n    disabled: boolean;\r\n}\r\n\r\nexport default class ControlRow extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        disabled: false\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'control-row';\r\n            if (this.props.disabled) {\r\n                style += ' disabled';\r\n            }\r\n            switch (this.props.controls.length) {\r\n                case 1:\r\n                    style += ' one';\r\n                    break;\r\n                case 2:\r\n                    style += ' two';\r\n                    break;\r\n                case 3:\r\n                    style += ' three';\r\n                    break;\r\n                case 4:\r\n                    style += ' four';\r\n                    break;\r\n                case 5:\r\n                    style += ' five';\r\n                    break;\r\n            }\r\n\r\n            return (\r\n                <div className={style}>\r\n                    {this.props.controls}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport ellipsis from '../../resources/icons/ellipsis.svg';\r\nimport clear from '../../resources/icons/x.svg';\r\n\r\ninterface Props {\r\n    options: { id: string; text: string; disabled?: boolean }[];\r\n    select: (optionID: string) => void;\r\n    clear: () => void;\r\n    selectedID: string;\r\n    placeholder: string;\r\n    disabled: boolean;\r\n}\r\n\r\ninterface State {\r\n    open: boolean;\r\n}\r\n\r\nexport default class Dropdown extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        selectedID: null,\r\n        placeholder: 'select...',\r\n        disabled: false,\r\n        clear: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            open: false\r\n        };\r\n    }\r\n\r\n    private toggleOpen(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        this.setState({\r\n            open: !this.state.open\r\n        });\r\n    }\r\n\r\n    private select(optionID: string) {\r\n        this.setState({\r\n            open: false\r\n        });\r\n        this.props.select(optionID);\r\n    }\r\n\r\n    private clear(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        this.props.clear();\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            if (this.props.options.length === 0) {\r\n                return null;\r\n            }\r\n\r\n            let style = this.props.disabled ? 'dropdown disabled' : 'dropdown';\r\n            const content = [];\r\n\r\n            let option: { id: string; text: string; disabled?: boolean } | undefined;\r\n            if (this.props.selectedID) {\r\n                option = this.props.options.find(o => o.id === this.props.selectedID);\r\n            }\r\n\r\n            content.push(\r\n                <div key='selection' className='dropdown-top' title={option ? option.text : this.props.placeholder}>\r\n                    <div className='item-text'>{option ? option.text : this.props.placeholder}</div>\r\n                    <img\r\n                        className={option && this.props.clear ? 'clear' : 'arrow'}\r\n                        alt={option && this.props.clear ? 'clear' : 'arrow'}\r\n                        src={option && this.props.clear ? clear : ellipsis}\r\n                        onClick={e => option && this.props.clear ? this.clear(e) : null}\r\n                    />\r\n                </div>\r\n            );\r\n\r\n            if (this.state.open) {\r\n                style += ' open';\r\n\r\n                const items = this.props.options.map(o => {\r\n                    if (o.text === null) {\r\n                        return <div key={o.id} className='divider' />;\r\n                    } else {\r\n                        return (\r\n                            <DropdownOption\r\n                                key={o.id}\r\n                                option={o}\r\n                                selected={o.id === this.props.selectedID}\r\n                                select={optionID => this.select(optionID)}\r\n                            />\r\n                        );\r\n                    }\r\n                });\r\n\r\n                content.push(\r\n                    <div key='options' className='dropdown-options'>\r\n                        {items}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={style} onClick={e => this.toggleOpen(e)}>\r\n                    {content}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface DropdownOptionProps {\r\n    option: { id: string; text: string; disabled?: boolean };\r\n    selected: boolean;\r\n    select: (optionID: string) => void;\r\n}\r\n\r\nclass DropdownOption extends React.Component<DropdownOptionProps> {\r\n    private click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (!this.props.option.disabled) {\r\n            this.props.select(this.props.option.id);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'dropdown-option';\r\n            if (this.props.selected) {\r\n                style += ' selected';\r\n            }\r\n            if (this.props.option.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            return (\r\n                <div className={style} title={this.props.option.text} onClick={e => this.click(e)}>\r\n                    {this.props.option.text}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport arrow from '../../resources/icons/down-arrow-black.svg';\r\n\r\ninterface Props {\r\n    text: string;\r\n    content: string | JSX.Element;\r\n    disabled: boolean;\r\n}\r\n\r\ninterface State {\r\n    expanded: boolean;\r\n}\r\n\r\nexport default class Expander extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            expanded: false\r\n        };\r\n    }\r\n\r\n    private toggle() {\r\n        this.setState({\r\n            expanded: !this.state.expanded\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = this.props.disabled ? 'expander disabled' : 'expander';\r\n            if (this.state.expanded) {\r\n                style += ' expanded';\r\n            }\r\n\r\n            let content = null;\r\n            if (this.state.expanded) {\r\n                content = (\r\n                    <div className='expander-content'>\r\n                        {this.props.content}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={style}>\r\n                    <div className='expander-header' onClick={() => this.toggle()}>\r\n                        <div className='expander-text'>{this.props.text}</div>\r\n                        <img className='expander-button' src={arrow} alt='arrow' />\r\n                    </div>\r\n                    {content}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    click: (dir: string, dir2: 'in' | 'out' | null) => void;\r\n    direction: 'out' | 'in' | 'both' | 'eight';\r\n    disabled: boolean;\r\n}\r\n\r\nexport default class Radial extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        direction: 'out',\r\n        disabled: false\r\n    };\r\n\r\n    private click(e: React.MouseEvent, dir: string, dir2: 'in' | 'out' | null = null) {\r\n        e.stopPropagation();\r\n        this.props.click(dir, dir2);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'radial ' + (this.props.direction || 'out');\r\n            if (this.props.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            const showOut = (this.props.direction === 'out') || (this.props.direction === 'both') || (this.props.direction === 'eight');\r\n            const showIn = (this.props.direction === 'in') || (this.props.direction === 'both');\r\n            const showDiag = (this.props.direction === 'eight');\r\n\r\n            return (\r\n                <div className={style}>\r\n                    <div className='cell' style={{ display: showDiag ? 'none' : 'inline-block' }} />\r\n                    <div className='cell' style={{ display: showDiag ? 'inline-block' : 'none' }}>\r\n                        <div className='arrow diag' style={{ display: showOut ? 'block' : 'none' }} onClick={e => this.click(e, 'NW')}>\r\n                            &#8598;\r\n                        </div>\r\n                    </div>\r\n                    <div className='cell'>\r\n                        <div className='arrow vertical' style={{ display: showOut ? 'block' : 'none' }} onClick={e => this.click(e, 'N', 'out')}>\r\n                            &#8593;\r\n                        </div>\r\n                        <div className='arrow vertical' style={{ display: showIn ? 'block' : 'none' }} onClick={e => this.click(e, 'N', 'in')}>\r\n                            &#8595;\r\n                        </div>\r\n                    </div>\r\n                    <div className='cell' style={{ display: showDiag ? 'none' : 'inline-block' }} />\r\n                    <div className='cell' style={{ display: showDiag ? 'inline-block' : 'none' }}>\r\n                        <div className='arrow diag' style={{ display: showOut ? 'block' : 'none' }} onClick={e => this.click(e, 'NE')}>\r\n                            &#8599;\r\n                        </div>\r\n                    </div>\r\n                    <div className='cell'>\r\n                        <div className='arrow horizontal' style={{ display: showOut ? 'inline-block' : 'none' }} onClick={e => this.click(e, 'W', 'out')}>\r\n                            &#8592;\r\n                        </div>\r\n                        <div className='arrow horizontal' style={{ display: showIn ? 'inline-block' : 'none' }} onClick={e => this.click(e, 'W', 'in')}>\r\n                            &#8594;\r\n                        </div>\r\n                    </div>\r\n                    <div className='cell' />\r\n                    <div className='cell'>\r\n                        <div className='arrow horizontal' style={{ display: showIn ? 'inline-block' : 'none' }} onClick={e => this.click(e, 'E', 'in')}>\r\n                            &#8592;\r\n                        </div>\r\n                        <div className='arrow horizontal' style={{ display: showOut ? 'inline-block' : 'none' }} onClick={e => this.click(e, 'E', 'out')}>\r\n                            &#8594;\r\n                        </div>\r\n                    </div>\r\n                    <div className='cell' style={{ display: showDiag ? 'none' : 'inline-block' }} />\r\n                    <div className='cell' style={{ display: showDiag ? 'inline-block' : 'none' }}>\r\n                        <div className='arrow diag' style={{ display: showOut ? 'block' : 'none' }} onClick={e => this.click(e, 'SW')}>\r\n                            &#8601;\r\n                        </div>\r\n                    </div>\r\n                    <div className='cell'>\r\n                        <div className='arrow vertical' style={{ display: showIn ? 'block' : 'none' }} onClick={e => this.click(e, 'S', 'in')}>\r\n                            &#8593;\r\n                        </div>\r\n                        <div className='arrow vertical' style={{ display: showOut ? 'block' : 'none' }} onClick={e => this.click(e, 'S', 'out')}>\r\n                            &#8595;\r\n                        </div>\r\n                    </div>\r\n                    <div className='cell' style={{ display: showDiag ? 'none' : 'inline-block' }} />\r\n                    <div className='cell' style={{ display: showDiag ? 'inline-block' : 'none' }}>\r\n                        <div className='arrow diag' style={{ display: showOut ? 'block' : 'none' }} onClick={e => this.click(e, 'SE', 'out')}>\r\n                            &#8600;\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    options: { id: string; text: string; disabled?: boolean }[];\r\n    selectedID: string | null;\r\n    select: (optionID: string) => void;\r\n    tabs: boolean;\r\n    disabled: boolean;\r\n    itemsPerRow: number;\r\n}\r\n\r\nexport default class Selector extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        tabs: false,\r\n        disabled: false,\r\n        itemsPerRow: null\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            let style = this.props.tabs ? 'selector tabs' : 'selector radio';\r\n            if (this.props.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            const itemsPerRow = this.props.itemsPerRow ? this.props.itemsPerRow : this.props.options.length;\r\n            const rowCount = Math.ceil(this.props.options.length / itemsPerRow);\r\n            const rowContents: JSX.Element[][] = [];\r\n            for (let n = 0; n !== rowCount; ++n) {\r\n                rowContents.push([]);\r\n            }\r\n\r\n            this.props.options.forEach(option => {\r\n                const index = this.props.options.indexOf(option);\r\n                const rowIndex = Math.floor(index / itemsPerRow);\r\n                const row = rowContents[rowIndex];\r\n                row.push(\r\n                    <SelectorOption\r\n                        key={option.id}\r\n                        option={option}\r\n                        selected={option.id === this.props.selectedID}\r\n                        count={itemsPerRow}\r\n                        select={(optionID: string) => this.props.select(optionID)}\r\n                    />\r\n                );\r\n            });\r\n\r\n            const rowSections = rowContents.map(row => {\r\n                const index = rowContents.indexOf(row);\r\n                return <div key={index}>{row}</div>;\r\n            });\r\n\r\n            return (\r\n                <div className={style}>\r\n                    {rowSections}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface SelectorOptionInterface {\r\n    option: { id: string; text: string; disabled?: boolean };\r\n    selected: boolean;\r\n    count: number;\r\n    select: (optionID: string) => void;\r\n}\r\n\r\nclass SelectorOption extends React.Component<SelectorOptionInterface> {\r\n    private click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (!this.props.option.disabled) {\r\n            this.props.select(this.props.option.id);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const width = 'calc(((100% - 1px) / ' + this.props.count + ') - 2px )';\r\n\r\n            let style = 'option';\r\n            if (this.props.selected) {\r\n                style += ' selected';\r\n            }\r\n            if (this.props.option.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            return (\r\n                <div key={this.props.option.id} className={style} style={{ width: width }} title={this.props.option.text} onClick={e => this.click(e)}>\r\n                    {this.props.option.text}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    source: any;\r\n    name: string;\r\n    nudgeValue: (delta: number) => void;\r\n    label: string;\r\n    disabled: boolean;\r\n    factors: number[];\r\n    display: ((value: number) => string) | null;\r\n}\r\n\r\nexport default class Spin extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        label: null,\r\n        disabled: false,\r\n        factors: null,\r\n        display: null\r\n    };\r\n\r\n    private click(e: React.MouseEvent, delta: number) {\r\n        e.stopPropagation();\r\n        this.props.nudgeValue(delta);\r\n    }\r\n\r\n    private touchEnd(e: React.TouchEvent, delta: number) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        this.props.nudgeValue(delta);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'info-value';\r\n            let value = this.props.source[this.props.name];\r\n            if (value === 0) {\r\n                style += ' dimmed';\r\n            }\r\n\r\n            if (this.props.display) {\r\n                value = this.props.display(value);\r\n            }\r\n\r\n            const minusBtns: JSX.Element[] = [];\r\n            const plusBtns: JSX.Element[] = [];\r\n\r\n            const factors = this.props.factors || [1];\r\n            factors.forEach(factor => {\r\n                minusBtns.push(\r\n                    <div\r\n                        key={'minus' + factor}\r\n                        className={factors.length > 1 ? 'spin-button factor' : 'spin-button factor single'}\r\n                        onTouchEnd={e => this.touchEnd(e, -1 * factor)}\r\n                        onClick={e => this.click(e, -1 * factor)}\r\n                    >\r\n                        {factors.length > 1 ? '-' + factor : '-'}\r\n                    </div>\r\n                );\r\n\r\n                plusBtns.push(\r\n                    <div\r\n                        key={'plus' + factor}\r\n                        className={factors.length > 1 ? 'spin-button factor' : 'spin-button factor single'}\r\n                        onTouchEnd={e => this.touchEnd(e, +1 * factor)}\r\n                        onClick={e => this.click(e, +1 * factor)}\r\n                    >\r\n                        {factors.length > 1 ? '+' + factor : '+'}\r\n                    </div>\r\n                );\r\n            });\r\n\r\n            minusBtns.reverse();\r\n\r\n            return (\r\n                <div className={this.props.disabled ? 'spin disabled' : 'spin'}>\r\n                    <div className='minus'>\r\n                        {minusBtns}\r\n                    </div>\r\n                    <div className='info' style={{ width: 'calc(100% - ' + (80 * factors.length) + 'px)' }}>\r\n                        <div className='info-label'>{this.props.label}</div>\r\n                        <div className={style}>{value}</div>\r\n                    </div>\r\n                    <div className='plus'>\r\n                        {plusBtns}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Monster } from '../../models/monster-group';\r\n\r\nimport Spin from '../controls/spin';\r\n\r\ninterface Props {\r\n    combatant: Monster;\r\n    edit: boolean;\r\n    nudgeValue: (combatant: Monster, field: string, delta: number) => void;\r\n}\r\n\r\ninterface State {\r\n    showAbilityScores: boolean;\r\n}\r\n\r\nexport default class AbilityScorePanel extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        edit: null,\r\n        nudgeValue: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showAbilityScores: false\r\n        };\r\n    }\r\n\r\n    private toggleAbilityScores() {\r\n        this.setState({\r\n            showAbilityScores: !this.state.showAbilityScores\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let result = null;\r\n\r\n            if (this.props.edit) {\r\n                result = (\r\n                    <div>\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='str'\r\n                            label='strength'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.str', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='dex'\r\n                            label='dexterity'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.dex', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='con'\r\n                            label='constitution'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.con', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='int'\r\n                            label='intelligence'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.int', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='wis'\r\n                            label='wisdom'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.wis', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='cha'\r\n                            label='charisma'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.cha', delta)}\r\n                        />\r\n                    </div>\r\n                );\r\n            } else {\r\n                result = (\r\n                    <div className='ability-scores' onClick={() => this.toggleAbilityScores()}>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>str</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.str\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.str)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>dex</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.dex\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.dex)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>con</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.con\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.con)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>int</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.int\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.int)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>wis</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.wis\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.wis)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>cha</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.cha\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.cha)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return result;\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combat, Combatant } from '../../models/combat';\r\nimport { Condition } from '../../models/condition';\r\n\r\nimport Expander from '../controls/expander';\r\nimport Spin from '../controls/spin';\r\n\r\ninterface Props {\r\n    combatant: Combatant;\r\n    combat: Combat;\r\n    nudgeConditionValue: (condition: Condition, field: string, delta: number) => void;\r\n    addCondition: () => void;\r\n    editCondition: (condition: Condition) => void;\r\n    removeCondition: (conditionID: string) => void;\r\n}\r\n\r\nexport default class ConditionsPanel extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const conditions = [];\r\n            if (this.props.combatant.conditions) {\r\n                for (let n = 0; n !== this.props.combatant.conditions.length; ++n) {\r\n                    const c = this.props.combatant.conditions[n];\r\n                    conditions.push(\r\n                        <ConditionPanel\r\n                            key={n}\r\n                            condition={c}\r\n                            combat={this.props.combat}\r\n                            nudgeConditionValue={(condition, type, delta) => this.props.nudgeConditionValue(condition, type, delta)}\r\n                            editCondition={condition => this.props.editCondition(condition)}\r\n                            removeCondition={conditionID => this.props.removeCondition(conditionID)}\r\n                        />\r\n                    );\r\n                }\r\n            }\r\n\r\n            return (\r\n                <div className='section'>\r\n                    {conditions}\r\n                    <button onClick={() => this.props.addCondition()}>add a condition</button>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface ConditionPanelProps {\r\n    condition: Condition;\r\n    combat: Combat;\r\n    nudgeConditionValue: (condition: Condition, field: string, delta: number) => void;\r\n    editCondition: (condition: Condition) => void;\r\n    removeCondition: (conditionID: string) => void;\r\n}\r\n\r\nclass ConditionPanel extends React.Component<ConditionPanelProps> {\r\n    public render() {\r\n        try {\r\n            let name: string = this.props.condition.name || 'condition';\r\n            if (this.props.condition.name === 'exhaustion') {\r\n                name += ' (' + this.props.condition.level + ')';\r\n            }\r\n            if ((this.props.condition.name === 'custom') && (this.props.condition.text !== null)) {\r\n                name = this.props.condition.text;\r\n            }\r\n\r\n            if (this.props.condition.duration !== null) {\r\n                name += ' ' + Utils.conditionDurationText(this.props.condition, this.props.combat);\r\n            }\r\n\r\n            const description = [];\r\n            if (this.props.condition.name === 'exhaustion') {\r\n                description.push(\r\n                    <div key='level' className='section'>\r\n                        <Spin\r\n                            source={this.props.condition}\r\n                            name='level'\r\n                            label='level'\r\n                            nudgeValue={delta => this.props.nudgeConditionValue(this.props.condition, 'level', delta)}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n            const text = Utils.conditionText(this.props.condition);\r\n            for (let n = 0; n !== text.length; ++n) {\r\n                description.push(<div key={n} className='section'>{text[n]}</div>);\r\n            }\r\n\r\n            return (\r\n                <Expander\r\n                    text={name}\r\n                    content={(\r\n                        <div>\r\n                            {description}\r\n                            <div className='divider' />\r\n                            <button onClick={() => this.props.editCondition(this.props.condition)}>edit</button>\r\n                            <button onClick={() => this.props.removeCondition(this.props.condition.id)}>remove</button>\r\n                        </div>\r\n                    )}\r\n                />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    content: string | JSX.Element | JSX.Element[];\r\n    white: boolean;\r\n}\r\n\r\nexport default class Note extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        white: false\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'descriptive';\r\n            if (this.props.white) {\r\n                style += ' white';\r\n            }\r\n\r\n            return (\r\n                <div className={style}>\r\n                    {this.props.content}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Showdown from 'showdown';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combatant } from '../../models/combat';\r\nimport { Monster, Trait, TRAIT_TYPES } from '../../models/monster-group';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport Expander from '../controls/expander';\r\nimport Note from '../panels/note';\r\n\r\nimport arrow from '../../resources/icons/down-arrow-black.svg';\r\n\r\nconst showdown = new Showdown.Converter();\r\n\r\ninterface Props {\r\n    combatant: Monster | (Combatant & Monster);\r\n    mode: 'view' | 'edit' | 'template' | 'combat' | 'combat-special';\r\n    filter: string;\r\n    addTrait: (traitType: 'trait' | 'action' | 'bonus' | 'reaction' | 'legendary' | 'lair') => void;\r\n    copyTrait: (trait: Trait) => void;\r\n    removeTrait: (trait: Trait) => void;\r\n    changeValue: (trait: Trait, field: string, value: any) => void;\r\n    swapTraits: (t1: Trait, t2: Trait) => void;\r\n}\r\n\r\nexport default class TraitsPanel extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        mode: 'view',\r\n        filter: '',\r\n        addTrait: null,\r\n        copyTrait: null,\r\n        removeTrait: null,\r\n        changeValue: null,\r\n        swapTraits: null\r\n    };\r\n\r\n    private createTraitPanel(trait: Trait, prevTrait: Trait | null, nextTrait: Trait | null) {\r\n        return (\r\n            <TraitPanel\r\n                key={trait.id}\r\n                trait={trait}\r\n                mode={this.props.mode}\r\n                prevTrait={prevTrait}\r\n                nextTrait={nextTrait}\r\n                changeValue={(action, type, value) => this.props.changeValue(action, type, value)}\r\n                removeTrait={action => this.props.removeTrait(action)}\r\n                copyTrait={action => this.props.copyTrait(action)}\r\n                swapTraits={(t1, t2) => this.props.swapTraits(t1, t2)}\r\n            />\r\n        );\r\n    }\r\n\r\n    private createSection(traitsByType: { [id: string]: JSX.Element[] }, type: string, showInfo: boolean = false) {\r\n        const traits = traitsByType[type];\r\n        if (traits.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        let info: JSX.Element | null = null;\r\n        if (showInfo) {\r\n            switch (type) {\r\n                case 'legendary':\r\n                    /* tslint:disable:max-line-length */\r\n                    info = (\r\n                        <Note\r\n                            content={'one legendary action can be used at the end of each other combatant\\'s turn; spent actions are refreshed at the start of the monster\\'s turn'}\r\n                            white={true}\r\n                        />\r\n                    );\r\n                    /* tslint:enable:max-line-length */\r\n                    break;\r\n                case 'lair':\r\n                    info = (\r\n                        <Note\r\n                            content={'one lair action can be taken each round on initiative 20'}\r\n                            white={true}\r\n                        />\r\n                    );\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='section subheading'>{Utils.traitType(type, true)}</div>\r\n                {info}\r\n                {traits}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const traitsByType: { [id: string]: JSX.Element[] } = {};\r\n\r\n            TRAIT_TYPES.forEach(type => {\r\n                const traits = this.props.combatant.traits\r\n                    .filter(t => t.type === type)\r\n                    .filter(t => Utils.match(this.props.filter, t.name));\r\n\r\n                const list: JSX.Element[] = [];\r\n                for (let n = 0; n !== traits.length; ++n) {\r\n                    const trait = traits[n];\r\n                    const prevTrait = n !== 0 ? traits[n - 1] : null;\r\n                    const nextTrait = n !== traits.length - 1 ? traits[n + 1] : null;\r\n                    list.push(this.createTraitPanel(trait, prevTrait, nextTrait));\r\n                }\r\n\r\n                if (this.props.mode === 'edit') {\r\n                    list.push(\r\n                        <button key='add' onClick={() => this.props.addTrait(type as 'trait' | 'action' | 'bonus' | 'reaction' | 'legendary' | 'lair')}>\r\n                            add a new {Utils.traitType(type, false)}\r\n                        </button>\r\n                    );\r\n                }\r\n\r\n                traitsByType[type] = list;\r\n            });\r\n\r\n            if (this.props.mode === 'edit') {\r\n                return (\r\n                    <div className='row collapse'>\r\n                        <div className='columns small-4 medium-4 large-4 wide-column'>\r\n                            {this.createSection(traitsByType, 'trait')}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 wide-column'>\r\n                            {this.createSection(traitsByType, 'action')}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 wide-column'>\r\n                            {this.createSection(traitsByType, 'bonus')}\r\n                            {this.createSection(traitsByType, 'reaction')}\r\n                            {this.createSection(traitsByType, 'legendary')}\r\n                            {this.createSection(traitsByType, 'lair')}\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            if (this.props.combatant.traits.length === 0) {\r\n                return (\r\n                    <div><i>no traits or actions</i></div>\r\n                );\r\n            }\r\n\r\n            if (this.props.mode === 'combat') {\r\n                return (\r\n                    <div>\r\n                        {this.createSection(traitsByType, 'trait')}\r\n                        {this.createSection(traitsByType, 'action')}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            if (this.props.mode === 'combat-special') {\r\n                return (\r\n                    <div>\r\n                        {this.createSection(traitsByType, 'legendary', true)}\r\n                        {this.createSection(traitsByType, 'lair', true)}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div>\r\n                    {this.createSection(traitsByType, 'trait')}\r\n                    {this.createSection(traitsByType, 'action')}\r\n                    {this.createSection(traitsByType, 'bonus')}\r\n                    {this.createSection(traitsByType, 'reaction')}\r\n                    {this.createSection(traitsByType, 'legendary')}\r\n                    {this.createSection(traitsByType, 'lair')}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface TraitPanelProps {\r\n    trait: Trait;\r\n    mode: 'view' | 'edit' | 'template' | 'combat' | 'combat-special';\r\n    prevTrait: Trait | null;\r\n    nextTrait: Trait | null;\r\n    changeValue: (trait: Trait, field: string, value: any) => void;\r\n    copyTrait: (trait: Trait) => void;\r\n    removeTrait: (trait: Trait) => void;\r\n    swapTraits: (t1: Trait, t2: Trait) => void;\r\n}\r\n\r\nclass TraitPanel extends React.Component<TraitPanelProps> {\r\n    public render() {\r\n        try {\r\n            let maxUses = 0;\r\n            let heading = this.props.trait.name || 'unnamed ' + Utils.traitType(this.props.trait.type, false);\r\n\r\n            if (this.props.trait.usage) {\r\n                let used = '';\r\n                if (this.props.trait.usage.toLowerCase().startsWith('recharge ')) {\r\n                    maxUses = 1;\r\n                    if (this.props.trait.uses > 0) {\r\n                        used = '; used';\r\n                    }\r\n                }\r\n                const found = this.props.trait.usage.toLowerCase().match(/(\\d+)\\s*\\/\\s*day/);\r\n                if (found) {\r\n                    maxUses = parseInt(found[1], 10);\r\n                    if (this.props.trait.uses > 0) {\r\n                        used = '; used ' + this.props.trait.uses;\r\n                    }\r\n                }\r\n                heading += ' *(' + this.props.trait.usage + used + ')*';\r\n            }\r\n            if (this.props.trait.type === 'legendary') {\r\n                maxUses = 1;\r\n                if (this.props.trait.uses > 0) {\r\n                    heading += ' *(used)*';\r\n                }\r\n            }\r\n            const markdown = '**' + heading + '** ' + this.props.trait.text;\r\n\r\n            switch (this.props.mode) {\r\n                case 'view':\r\n                    return (\r\n                        <div key={this.props.trait.id} className='section trait'>\r\n                            <div dangerouslySetInnerHTML={{ __html: showdown.makeHtml(markdown) }} />\r\n                        </div>\r\n                    );\r\n                case 'edit':\r\n                    const details = (\r\n                        <div className='section'>\r\n                            <div className='row collapse'>\r\n                                <div className='columns small-6 medium-8 large-9'>\r\n                                    <input\r\n                                        type='text'\r\n                                        placeholder='name'\r\n                                        value={this.props.trait.name}\r\n                                        onChange={event => this.props.changeValue(this.props.trait, 'name', event.target.value)}\r\n                                    />\r\n                                    <input\r\n                                        type='text'\r\n                                        placeholder='usage'\r\n                                        value={this.props.trait.usage}\r\n                                        onChange={event => this.props.changeValue(this.props.trait, 'usage', event.target.value)}\r\n                                    />\r\n                                </div>\r\n                                <div className='columns small-6 medium-4 large-3'>\r\n                                    <div className='trait-ordering'>\r\n                                        <div className='vertical-center-outer'>\r\n                                            <div className='vertical-center-middle'>\r\n                                                <div>\r\n                                                    <img\r\n                                                        className={this.props.prevTrait ? 'rotate' : 'rotate disabled'}\r\n                                                        src={arrow}\r\n                                                        alt='move up'\r\n                                                        onClick={() => this.props.swapTraits(this.props.trait, this.props.prevTrait as Trait)}\r\n                                                    />\r\n                                                </div>\r\n                                                <div>\r\n                                                    <img\r\n                                                        className={this.props.nextTrait ? '' : 'disabled'}\r\n                                                        src={arrow}\r\n                                                        alt='move down'\r\n                                                        onClick={() => this.props.swapTraits(this.props.trait, this.props.nextTrait as Trait)}\r\n                                                    />\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <textarea\r\n                                placeholder='details'\r\n                                value={this.props.trait.text}\r\n                                onChange={event => this.props.changeValue(this.props.trait, 'text', event.target.value)}\r\n                            />\r\n                            <div className='divider' />\r\n                            <ConfirmButton text='delete' callback={() => this.props.removeTrait(this.props.trait)} />\r\n                        </div>\r\n                    );\r\n\r\n                    let name = this.props.trait.name || 'unnamed ' + Utils.traitType(this.props.trait.type, false);\r\n                    if (this.props.trait.usage) {\r\n                        name += ' (' + this.props.trait.usage + ')';\r\n                    }\r\n                    return (\r\n                        <Expander\r\n                            text={name}\r\n                            content={details}\r\n                        />\r\n                    );\r\n                case 'template':\r\n                    return (\r\n                        <div key={this.props.trait.id} className='section trait'>\r\n                            <div dangerouslySetInnerHTML={{ __html: showdown.makeHtml(markdown) }} />\r\n                            <button onClick={() => this.props.copyTrait(this.props.trait)}>copy</button>\r\n                        </div>\r\n                    );\r\n                case 'combat':\r\n                case 'combat-special':\r\n                    let style = '';\r\n                    let usage = null;\r\n                    if (maxUses > 0) {\r\n                        const isTapped = this.props.trait.uses >= maxUses;\r\n                        if (isTapped) {\r\n                            style = 'strikethrough';\r\n                            usage = <button onClick={() => this.props.changeValue(this.props.trait, 'uses', 0)}>recharge</button>;\r\n                        } else {\r\n                            usage = <button onClick={() => this.props.changeValue(this.props.trait, 'uses', this.props.trait.uses + 1)}>use</button>;\r\n                        }\r\n                    }\r\n                    return (\r\n                        <div key={this.props.trait.id} className='section trait'>\r\n                            <div className={style} dangerouslySetInnerHTML={{ __html: showdown.makeHtml(markdown) }} />\r\n                            {usage}\r\n                        </div>\r\n                    );\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    heading: string | JSX.Element | JSX.Element[] | null;\r\n    content: string | JSX.Element | JSX.Element[] | null;\r\n}\r\n\r\nexport default class InfoCard extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        heading: null,\r\n        content: null\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div className='card'>\r\n                    {this.props.heading}\r\n                    <div className='card-content'>\r\n                        {this.props.content}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combat, COMBAT_TAGS, Combatant } from '../../models/combat';\r\nimport { Condition } from '../../models/condition';\r\nimport { Encounter, EncounterSlot, EncounterWave } from '../../models/encounter';\r\nimport { Monster, MonsterGroup, Trait } from '../../models/monster-group';\r\n\r\nimport Checkbox from '../controls/checkbox';\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport ControlRow from '../controls/control-row';\r\nimport Dropdown from '../controls/dropdown';\r\nimport Expander from '../controls/expander';\r\nimport Radial from '../controls/radial';\r\nimport Selector from '../controls/selector';\r\nimport Spin from '../controls/spin';\r\nimport AbilityScorePanel from '../panels/ability-score-panel';\r\nimport ConditionsPanel from '../panels/conditions-panel';\r\nimport TraitsPanel from '../panels/traits-panel';\r\nimport InfoCard from './info-card';\r\n\r\nimport arrow from '../../resources/icons/down-arrow.svg';\r\n\r\ninterface Props {\r\n    combatant: Monster | (Monster & Combatant);\r\n    mode: string;\r\n    library: MonsterGroup[];\r\n    changeValue: (monster: any, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, delta: number) => void;\r\n    // Library\r\n    filter: string;\r\n    editMonster: (monster: Monster) => void;\r\n    removeMonster: (monster: Monster) => void;\r\n    cloneMonster: (monster: Monster, name: string) => void;\r\n    moveToGroup: (monster: Monster, group: string) => void;\r\n    copyTrait: (trait: Trait) => void;\r\n    selectMonster: (monster: Monster) => void;\r\n    deselectMonster: (monster: Monster) => void;\r\n    // Encounter builder\r\n    encounter: Encounter;\r\n    slot: EncounterSlot;\r\n    addEncounterSlot: (monster: Monster, waveID: string | null) => void;\r\n    removeEncounterSlot: (slot: EncounterSlot) => void;\r\n    // Combat\r\n    combat: Combat;\r\n    makeCurrent: (combatant: Combatant) => void;\r\n    makeActive: (combatant: Combatant) => void;\r\n    makeDefeated: (combatant: Combatant) => void;\r\n    endTurn: (combatant: Combatant) => void;\r\n    mapAdd: (combatant: Combatant) => void;\r\n    mapMove: (combatant: Combatant, dir: string) => void;\r\n    mapRemove: (combatant: Combatant) => void;\r\n    removeCombatant: (combatant: Combatant) => void;\r\n    changeHP: (combatant: Combatant, hp: number, tempHP: number) => void;\r\n    addCondition: (combatant: Combatant) => void;\r\n    editCondition: (combatant: Combatant, condition: Condition) => void;\r\n    removeCondition: (combatant: Combatant, conditionID: string) => void;\r\n    nudgeConditionValue: (condition: Condition, field: string, delta: number) => void;\r\n    toggleTag: (combatant: Combatant, tag: string) => void;\r\n}\r\n\r\ninterface State {\r\n    showDetails: boolean;\r\n    cloneName: string;\r\n    combatMode: string;\r\n    damageOrHealing: number;\r\n}\r\n\r\nexport default class MonsterCard extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        library: null,\r\n        changeValue: null,\r\n        nudgeValue: null,\r\n        filter: '',\r\n        editMonster: null,\r\n        removeMonster: null,\r\n        cloneMonster: null,\r\n        moveToGroup: null,\r\n        copyTrait: null,\r\n        selectMonster: null,\r\n        deselectMonster: null,\r\n        encounter: null,\r\n        slot: null,\r\n        addEncounterSlot: null,\r\n        removeEncounterSlot: null,\r\n        combat: null,\r\n        makeCurrent: null,\r\n        makeActive: null,\r\n        makeDefeated: null,\r\n        endTurn: null,\r\n        mapAdd: null,\r\n        mapMove: null,\r\n        mapRemove: null,\r\n        removeCombatant: null,\r\n        changeHP: null,\r\n        addCondition: null,\r\n        editCondition: null,\r\n        removeCondition: null,\r\n        nudgeConditionValue: null,\r\n        toggleTag: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showDetails: false,\r\n            cloneName: props.combatant.name + ' copy',\r\n            combatMode: 'main',\r\n            damageOrHealing: 0\r\n        };\r\n    }\r\n\r\n    private setCloneName(cloneName: string) {\r\n        this.setState({\r\n            cloneName: cloneName\r\n        });\r\n    }\r\n\r\n    private toggleDetails() {\r\n        this.setState({\r\n            showDetails: !this.state.showDetails\r\n        });\r\n    }\r\n\r\n    private setDamage(value: number) {\r\n        this.setState({\r\n            damageOrHealing: value\r\n        });\r\n    }\r\n\r\n    private nudgeDamage(delta: number) {\r\n        this.setState({\r\n            damageOrHealing: Math.max(this.state.damageOrHealing + delta, 0)\r\n        });\r\n    }\r\n\r\n    private setCombatMode(mode: string) {\r\n        this.setState({\r\n            combatMode: mode\r\n        });\r\n    }\r\n\r\n    private heal() {\r\n        const combatant = this.props.combatant as Combatant;\r\n\r\n        let hp = (combatant.hp ? combatant.hp : 0) + this.state.damageOrHealing;\r\n        hp = Math.min(hp, this.props.combatant.hpMax);\r\n\r\n        this.setState({\r\n            damageOrHealing: 0\r\n        }, () => {\r\n            this.props.changeHP(combatant, hp, this.props.combatant.hpTemp);\r\n        });\r\n    }\r\n\r\n    private damage() {\r\n        const combatant = this.props.combatant as Combatant;\r\n\r\n        let hp = (combatant.hp ? combatant.hp : 0);\r\n        let temp = this.props.combatant.hpTemp;\r\n\r\n        let damage = this.state.damageOrHealing;\r\n\r\n        // Take damage off temp HP first\r\n        const val = Math.min(damage, temp);\r\n        damage -= val;\r\n        temp -= val;\r\n\r\n        // Take the rest off HP\r\n        hp -= damage;\r\n        hp = Math.max(hp, 0);\r\n\r\n        this.setState({\r\n            damageOrHealing: 0\r\n        }, () => {\r\n            this.props.changeHP(combatant, hp, temp);\r\n        });\r\n    }\r\n\r\n    private description() {\r\n        let size = this.props.combatant.size;\r\n        const combatant = this.props.combatant as (Monster & Combatant);\r\n        if (combatant) {\r\n            size = combatant.displaySize || size;\r\n        }\r\n        let sizeAndType = (size + ' ' + this.props.combatant.category).toLowerCase();\r\n        if (this.props.combatant.tag) {\r\n            sizeAndType += ' (' + this.props.combatant.tag.toLowerCase() + ')';\r\n        }\r\n        sizeAndType += ', ';\r\n\r\n        let align = '';\r\n        if (this.props.combatant.alignment) {\r\n            align = this.props.combatant.alignment.toLowerCase() + ', ';\r\n        }\r\n\r\n        const cr = 'cr ' + Utils.challenge(this.props.combatant.challenge);\r\n\r\n        return sizeAndType + align + cr;\r\n    }\r\n\r\n    private monsterIsInWave(wave: EncounterWave) {\r\n        return wave.slots.some(s => {\r\n            const group = this.props.library.find(g => g.monsters.includes(this.props.combatant));\r\n            return !!group && (s.monsterGroupName === group.name) && (s.monsterName === this.props.combatant.name);\r\n        });\r\n    }\r\n\r\n    private getHP() {\r\n        if (this.props.combatant.hitDice === 0) {\r\n            return this.props.combatant.hpMax;\r\n        }\r\n\r\n        const die = Utils.hitDieType(this.props.combatant.size);\r\n        const conMod = Utils.modifierValue(this.props.combatant.abilityScores.con) * this.props.combatant.hitDice;\r\n        let conModStr = '';\r\n        if (conMod > 0) {\r\n            conModStr = ' +' + conMod;\r\n        }\r\n        if (conMod < 0) {\r\n            conModStr = ' ' + conMod;\r\n        }\r\n        return this.props.combatant.hpMax + ' (' + this.props.combatant.hitDice + 'd' + die + conModStr + ')';\r\n    }\r\n\r\n    private getCombatControls() {\r\n        const combatant = this.props.combatant as Combatant;\r\n\r\n        const options = [];\r\n\r\n        const combatModes = ['main', 'hp', 'cond', 'map', 'adv'].map(m => {\r\n            return {\r\n                id: m,\r\n                text: m\r\n            };\r\n        });\r\n        if (this.props.mode.indexOf('tactical') === -1) {\r\n            // No combat map, so remove the map option\r\n            combatModes.splice(3, 1);\r\n        }\r\n        options.push(\r\n            <Selector\r\n                key='selector'\r\n                options={combatModes}\r\n                selectedID={this.state.combatMode}\r\n                select={option => this.setCombatMode(option)}\r\n            />\r\n        );\r\n        options.push(<div key='selector-sep' className='divider' />);\r\n\r\n        switch (this.state.combatMode) {\r\n            case 'main':\r\n                if (!combatant.pending && combatant.active && !combatant.defeated) {\r\n                    if (combatant.current) {\r\n                        options.push(<button key='endTurn' onClick={() => this.props.endTurn(combatant)}>end turn</button>);\r\n                        options.push(<button key='makeDefeated' onClick={() => this.props.makeDefeated(combatant)}>mark as defeated and end turn</button>);\r\n                    } else {\r\n                        options.push(<button key='makeCurrent' onClick={() => this.props.makeCurrent(combatant)}>start turn</button>);\r\n                        options.push(<button key='makeDefeated' onClick={() => this.props.makeDefeated(combatant)}>mark as defeated</button>);\r\n                    }\r\n                }\r\n                if (!combatant.pending && !combatant.active && combatant.defeated) {\r\n                    options.push(<button key='makeActive' onClick={() => this.props.makeActive(combatant)}>mark as active</button>);\r\n                }\r\n                options.push(<div key='tag-sep' className='divider' />);\r\n                if (this.props.mode.indexOf('tactical') !== -1) {\r\n                    options.push(\r\n                        <Checkbox\r\n                            key='hidden'\r\n                            label='hidden'\r\n                            display='switch'\r\n                            checked={!combatant.showOnMap}\r\n                            changeValue={value => this.props.changeValue(combatant, 'showOnMap', !value)}\r\n                        />\r\n                    );\r\n                }\r\n                options.push(\r\n                    <ControlRow\r\n                        key='tags'\r\n                        controls={COMBAT_TAGS.map(tag =>\r\n                            <Checkbox\r\n                                key={tag}\r\n                                label={tag}\r\n                                display='button'\r\n                                checked={combatant.tags.includes(tag)}\r\n                                changeValue={value => this.props.toggleTag(combatant, tag)}\r\n                            />\r\n                        )}\r\n                    />\r\n                );\r\n                break;\r\n            case 'hp':\r\n                options.push(\r\n                    <div key='hp'>\r\n                        <Spin\r\n                            source={this.props.combatant}\r\n                            name='hp'\r\n                            label='hit points'\r\n                            factors={[1, 10]}\r\n                            nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'hp', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant}\r\n                            name='hpTemp'\r\n                            label='temp hp'\r\n                            factors={[1, 10]}\r\n                            nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'hpTemp', delta)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <div className='section' style={{ display: this.props.combatant.damage.resist !== '' ? '' : 'none' }}>\r\n                            <b>damage resistances</b> {this.props.combatant.damage.resist}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.damage.vulnerable !== '' ? '' : 'none' }}>\r\n                            <b>damage vulnerabilities</b> {this.props.combatant.damage.vulnerable}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.damage.immune !== '' ? '' : 'none' }}>\r\n                            <b>damage immunities</b> {this.props.combatant.damage.immune}\r\n                        </div>\r\n                        <Spin\r\n                            source={this.state}\r\n                            name='damageOrHealing'\r\n                            factors={[1, 10]}\r\n                            nudgeValue={delta => this.nudgeDamage(delta)}\r\n                        />\r\n                        <ControlRow\r\n                            controls={[\r\n                                <button key='heal' onClick={() => this.heal()}>heal</button>,\r\n                                <button key='reset' onClick={() => this.setDamage(0)}>reset</button>,\r\n                                <button key='damage' onClick={() => this.damage()}>damage</button>\r\n                            ]}\r\n                            disabled={this.state.damageOrHealing === 0}\r\n                        />\r\n                    </div>\r\n                );\r\n                break;\r\n            case 'cond':\r\n                options.push(\r\n                    <div key='conditions'>\r\n                        <div className='section' style={{ display: this.props.combatant.conditionImmunities !== '' ? '' : 'none' }}>\r\n                            <b>condition immunities</b> {this.props.combatant.conditionImmunities}\r\n                        </div>\r\n                        <ConditionsPanel\r\n                            combatant={this.props.combatant as Combatant}\r\n                            combat={this.props.combat}\r\n                            addCondition={() => this.props.addCondition(this.props.combatant as Combatant)}\r\n                            editCondition={condition => this.props.editCondition(this.props.combatant as Combatant, condition)}\r\n                            removeCondition={conditionID => this.props.removeCondition(this.props.combatant as Combatant, conditionID)}\r\n                            nudgeConditionValue={(condition, type, delta) => this.props.nudgeConditionValue(condition, type, delta)}\r\n                        />\r\n                    </div>\r\n                );\r\n                break;\r\n            case 'map':\r\n                if (this.props.mode.indexOf('on-map') !== -1) {\r\n                    options.push(\r\n                        <div key='mapMove' className='section centered'>\r\n                            <Radial\r\n                                direction='eight'\r\n                                click={dir => this.props.mapMove(combatant, dir)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                    options.push(<div key='move-sep' className='divider' />);\r\n                    options.push(\r\n                        <Spin\r\n                            key='altitude'\r\n                            source={combatant}\r\n                            name='altitude'\r\n                            label='altitude'\r\n                            display={value => value + ' ft.'}\r\n                            nudgeValue={delta => this.props.nudgeValue(combatant, 'altitude', delta * 5)}\r\n                        />\r\n                    );\r\n                    let auraDetails = null;\r\n                    if (combatant.aura.radius > 0) {\r\n                        const auraStyleOptions = [\r\n                            {\r\n                                id: 'square',\r\n                                text: 'square'\r\n                            },\r\n                            {\r\n                                id: 'rounded',\r\n                                text: 'rounded'\r\n                            },\r\n                            {\r\n                                id: 'circle',\r\n                                text: 'circle'\r\n                            }\r\n                        ];\r\n                        auraDetails = (\r\n                            <div>\r\n                                <Selector\r\n                                    options={auraStyleOptions}\r\n                                    selectedID={combatant.aura.style}\r\n                                    select={optionID => this.props.changeValue(combatant.aura, 'style', optionID)}\r\n                                />\r\n                                <input\r\n                                    type='color'\r\n                                    value={combatant.aura.color}\r\n                                    onChange={event => this.props.changeValue(combatant.aura, 'color', event.target.value)}\r\n                                />\r\n                            </div>\r\n                        );\r\n                    }\r\n                    options.push(\r\n                        <Expander\r\n                            key='aura'\r\n                            text='aura'\r\n                            content={(\r\n                                <div>\r\n                                    <Spin\r\n                                        source={combatant.aura}\r\n                                        name='radius'\r\n                                        label='size'\r\n                                        display={value => value + ' ft.'}\r\n                                        nudgeValue={delta => this.props.nudgeValue(combatant.aura, 'radius', delta * 5)}\r\n                                    />\r\n                                    {auraDetails}\r\n                                </div>\r\n                            )}\r\n                        />\r\n                    );\r\n                    options.push(<button key='mapRemove' onClick={() => this.props.mapRemove(combatant)}>remove from map</button>);\r\n                }\r\n                if (this.props.mode.indexOf('off-map') !== -1) {\r\n                    options.push(<button key='mapAdd' onClick={() => this.props.mapAdd(combatant)}>add to map</button>);\r\n                }\r\n                break;\r\n            case 'adv':\r\n                if (!combatant.current) {\r\n                    options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                }\r\n                if (!combatant.pending) {\r\n                    options.push(\r\n                        <Expander\r\n                            key='init'\r\n                            text='change initiative score'\r\n                            content={(\r\n                                <div>\r\n                                    <Spin\r\n                                        source={this.props.combatant}\r\n                                        name='initiative'\r\n                                        label='initiative'\r\n                                        nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'initiative', delta)}\r\n                                    />\r\n                                </div>\r\n                            )}\r\n                        />\r\n                    );\r\n                }\r\n                options.push(\r\n                    <Expander\r\n                        key='size'\r\n                        text='change size'\r\n                        content={(\r\n                            <div>\r\n                                <Spin\r\n                                    source={this.props.combatant}\r\n                                    name='displaySize'\r\n                                    label='size'\r\n                                    nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'displaySize', delta)}\r\n                                />\r\n                            </div>\r\n                        )}\r\n                    />\r\n                );\r\n                options.push(\r\n                    <Expander\r\n                        key='rename'\r\n                        text='change name'\r\n                        content={(\r\n                            <div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={combatant.displayName}\r\n                                    onChange={event => this.props.changeValue(this.props.combatant, 'displayName', event.target.value)}\r\n                                />\r\n                            </div>\r\n                        )}\r\n                    />\r\n                );\r\n                break;\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='combat-options-panel'>\r\n                    {options}\r\n                </div>\r\n                <div className='divider' />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const options = [];\r\n            if (this.props.mode.indexOf('no-buttons') === -1) {\r\n                if (this.props.mode.indexOf('view') !== -1) {\r\n                    if (this.props.mode.indexOf('editable') !== -1) {\r\n                        options.push(\r\n                            <button key='edit' onClick={() => this.props.editMonster(this.props.combatant)}>edit monster</button>\r\n                        );\r\n\r\n                        options.push(\r\n                            <Expander\r\n                                key='clone'\r\n                                text='clone monster'\r\n                                content={\r\n                                    <div>\r\n                                        <input\r\n                                            type='text'\r\n                                            placeholder='monster name'\r\n                                            value={this.state.cloneName}\r\n                                            onChange={event => this.setCloneName(event.target.value)}\r\n                                        />\r\n                                        <button onClick={() => this.props.cloneMonster(this.props.combatant, this.state.cloneName)}>create copy</button>\r\n                                    </div>\r\n                                }\r\n                            />\r\n                        );\r\n\r\n                        const groupOptions: { id: string, text: string }[] = [];\r\n                        this.props.library.forEach(group => {\r\n                            if (group.monsters.indexOf(this.props.combatant) === -1) {\r\n                                groupOptions.push({\r\n                                    id: group.id,\r\n                                    text: group.name\r\n                                });\r\n                            }\r\n                        });\r\n                        options.push(\r\n                            <Dropdown\r\n                                key='move'\r\n                                options={groupOptions}\r\n                                placeholder='move to group...'\r\n                                select={optionID => this.props.moveToGroup(this.props.combatant, optionID)}\r\n                            />\r\n                        );\r\n\r\n                        options.push(<ConfirmButton key='remove' text='delete monster' callback={() => this.props.removeMonster(this.props.combatant)} />);\r\n                    }\r\n                    if (this.props.mode.indexOf('encounter') !== -1) {\r\n                        if (this.props.slot) {\r\n                            // This card is in an encounter or a wave\r\n                            options.push(\r\n                                <button key='remove' onClick={() => this.props.removeEncounterSlot(this.props.slot)}>\r\n                                    remove from encounter\r\n                                </button>\r\n                            );\r\n                        } else {\r\n                            let canAdd = false;\r\n                            // This card is in the library list\r\n                            if (!this.monsterIsInWave(this.props.encounter)) {\r\n                                options.push(\r\n                                    <button key='add encounter' onClick={() => this.props.addEncounterSlot(this.props.combatant, null)}>\r\n                                        add to encounter\r\n                                    </button>\r\n                                );\r\n                                canAdd = true;\r\n                            }\r\n                            this.props.encounter.waves.forEach(wave => {\r\n                                if (!this.monsterIsInWave(wave)) {\r\n                                    options.push(\r\n                                        <button key={'add ' + wave.id} onClick={() => this.props.addEncounterSlot(this.props.combatant, wave.id)}>\r\n                                            add to {wave.name}\r\n                                        </button>\r\n                                    );\r\n                                    canAdd = true;\r\n                                }\r\n                            });\r\n                            // If we can't add it anywhere, don't show it\r\n                            if (!canAdd) {\r\n                                return (\r\n                                    <InfoCard\r\n                                        heading={\r\n                                            (\r\n                                                <div className='heading'>\r\n                                                    <div className='title'>{this.props.combatant.name}</div>\r\n                                                </div>\r\n                                            )\r\n                                        }\r\n                                        content={\r\n                                            (\r\n                                                <div className='section centered'>\r\n                                                    <i>this monster is already part of this encounter</i>\r\n                                                </div>\r\n                                            )\r\n                                        }\r\n                                    />\r\n                                );\r\n                            }\r\n                        }\r\n                    }\r\n                    if (this.props.mode.indexOf('candidate') !== -1) {\r\n                        if (this.props.mode.indexOf('selected') === -1) {\r\n                            options.push(\r\n                                <button key='select' onClick={() => this.props.selectMonster(this.props.combatant)}>select monster</button>\r\n                            );\r\n                        } else {\r\n                            options.push(\r\n                                <button key='deselect' onClick={() => this.props.deselectMonster(this.props.combatant)}>deselect monster</button>\r\n                            );\r\n                        }\r\n                    }\r\n                }\r\n                if (this.props.mode.indexOf('template') !== -1) {\r\n                    // None\r\n                }\r\n            }\r\n\r\n            let combat = null;\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                combat = this.getCombatControls();\r\n            }\r\n\r\n            let stats = null;\r\n            if (this.props.mode.indexOf('view') !== -1) {\r\n                let slotSection = null;\r\n                if (this.props.slot) {\r\n                    slotSection = (\r\n                        <div>\r\n                            <div className='divider' />\r\n                            <Spin\r\n                                source={this.props.slot}\r\n                                name='count'\r\n                                label='count'\r\n                                nudgeValue={delta => this.props.nudgeValue(this.props.slot, 'count', delta)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                let details = null;\r\n                if (this.state.showDetails || (this.props.mode.indexOf('generated') !== -1)) {\r\n                    details = (\r\n                        <div>\r\n                            <div className='divider' />\r\n                            <div className='section'>\r\n                                <b>ac</b> {this.props.combatant.ac}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.hpMax !== 0 ? '' : 'none' }}>\r\n                                <b>hp</b> {this.getHP()}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.speed !== '' ? '' : 'none' }}>\r\n                                <b>speed</b> {this.props.combatant.speed}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <AbilityScorePanel combatant={this.props.combatant} />\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.savingThrows !== '' ? '' : 'none' }}>\r\n                                <b>saving throws</b> {this.props.combatant.savingThrows}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.skills !== '' ? '' : 'none' }}>\r\n                                <b>skills</b> {this.props.combatant.skills}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.damage.resist !== '' ? '' : 'none' }}>\r\n                                <b>damage resistances</b> {this.props.combatant.damage.resist}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.damage.vulnerable !== '' ? '' : 'none' }}>\r\n                                <b>damage vulnerabilities</b> {this.props.combatant.damage.vulnerable}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.damage.immune !== '' ? '' : 'none' }}>\r\n                                <b>damage immunities</b> {this.props.combatant.damage.immune}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.conditionImmunities !== '' ? '' : 'none' }}>\r\n                                <b>condition immunities</b> {this.props.combatant.conditionImmunities}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.senses !== '' ? '' : 'none' }}>\r\n                                <b>senses</b> {this.props.combatant.senses}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.languages !== '' ? '' : 'none' }}>\r\n                                <b>languages</b> {this.props.combatant.languages}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.equipment !== '' ? '' : 'none' }}>\r\n                                <b>equipment</b> {this.props.combatant.equipment}\r\n                            </div>\r\n                            <div className='divider' />\r\n                            <TraitsPanel combatant={this.props.combatant} />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                stats = (\r\n                    <div className='stats'>\r\n                        <div className='section centered'>\r\n                            <i>{this.description()}</i>\r\n                        </div>\r\n                        {slotSection}\r\n                        {details}\r\n                    </div>\r\n                );\r\n            }\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                stats = (\r\n                    <div className='stats'>\r\n                        <div className='section centered'>\r\n                            <i>{this.description()}</i>\r\n                        </div>\r\n                        <div className='divider' />\r\n                        {combat}\r\n                        <div className='section'>\r\n                            <AbilityScorePanel combatant={this.props.combatant} />\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.ac !== 0 ? '' : 'none' }}>\r\n                            <b>ac</b> {this.props.combatant.ac}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.savingThrows !== '' ? '' : 'none' }}>\r\n                            <b>saving throws</b> {this.props.combatant.savingThrows}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.skills !== '' ? '' : 'none' }}>\r\n                            <b>skills</b> {this.props.combatant.skills}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.speed !== '' ? '' : 'none' }}>\r\n                            <b>speed</b> {this.props.combatant.speed}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.senses !== '' ? '' : 'none' }}>\r\n                            <b>senses</b> {this.props.combatant.senses}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.damage.resist !== '' ? '' : 'none' }}>\r\n                            <b>damage resistances</b> {this.props.combatant.damage.resist}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.damage.vulnerable !== '' ? '' : 'none' }}>\r\n                            <b>damage vulnerabilities</b> {this.props.combatant.damage.vulnerable}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.damage.immune !== '' ? '' : 'none' }}>\r\n                            <b>damage immunities</b> {this.props.combatant.damage.immune}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.conditionImmunities !== '' ? '' : 'none' }}>\r\n                            <b>condition immunities</b> {this.props.combatant.conditionImmunities}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.languages !== '' ? '' : 'none' }}>\r\n                            <b>languages</b> {this.props.combatant.languages}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.equipment !== '' ? '' : 'none' }}>\r\n                            <b>equipment</b> {this.props.combatant.equipment}\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <TraitsPanel\r\n                            combatant={this.props.combatant}\r\n                            mode='combat'\r\n                            changeValue={(trait, field, value) => this.props.changeValue(trait, field, value)}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n            if (this.props.mode.indexOf('template') !== -1) {\r\n                if (this.props.mode.indexOf('overview') !== -1) {\r\n                    stats = (\r\n                        <div>\r\n                            <div className='section centered'>\r\n                                <i>{this.description()}</i>\r\n                            </div>\r\n                            <div className='divider' />\r\n                            <div className='section'>\r\n                                <b>speed</b> {this.props.combatant.speed || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>senses</b> {this.props.combatant.senses || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>languages</b> {this.props.combatant.languages || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>equipment</b> {this.props.combatant.equipment || '-'}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf('abilities') !== -1) {\r\n                    stats = (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <AbilityScorePanel combatant={this.props.combatant} />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>saving throws</b> {this.props.combatant.savingThrows || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>skills</b> {this.props.combatant.skills || '-'}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf('cbt-stats') !== -1) {\r\n                    stats = (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <b>ac</b> {this.props.combatant.ac}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>hp</b> {this.getHP()}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>damage immunity</b> {this.props.combatant.damage.immune || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>damage resistance</b> {this.props.combatant.damage.resist || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>damage vulnerability</b> {this.props.combatant.damage.vulnerable || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>condition immunities</b> {this.props.combatant.conditionImmunities || '-'}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf('actions') !== -1) {\r\n                    stats = (\r\n                        <TraitsPanel\r\n                            combatant={this.props.combatant}\r\n                            mode='template'\r\n                            filter={this.props.filter}\r\n                            copyTrait={trait => this.props.copyTrait(trait)}\r\n                        />\r\n                    );\r\n                }\r\n            }\r\n\r\n            let toggle = null;\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                // Don't show toggle button for combatant\r\n            } else if (this.props.mode.indexOf('template') !== -1) {\r\n                // Don't show toggle button for template\r\n            } else if (this.props.mode.indexOf('view generated') !== -1) {\r\n                // Don't show toggle button for generated monster\r\n            } else {\r\n                const imageStyle = this.state.showDetails ? 'image rotate' : 'image';\r\n                toggle = (\r\n                    <img className={imageStyle} src={arrow} alt='arrow' onClick={() => this.toggleDetails()} />\r\n                );\r\n            }\r\n\r\n            const name = (this.props.combatant as Combatant ? (this.props.combatant as Combatant).displayName : null)\r\n                || this.props.combatant.name\r\n                || 'unnamed monster';\r\n\r\n            return (\r\n                <div className='card monster'>\r\n                    <div className='heading'>\r\n                        <div className='title'>{name}</div>\r\n                        {toggle}\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        {stats}\r\n                        <div style={{ display: options.length > 0 ? '' : 'none' }}>\r\n                            <div className='divider' />\r\n                            <div className='section'>{options}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Combat, COMBAT_TAGS, Combatant } from '../../models/combat';\r\nimport { Condition } from '../../models/condition';\r\nimport { PC } from '../../models/party';\r\n\r\nimport Checkbox from '../controls/checkbox';\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport ControlRow from '../controls/control-row';\r\nimport Expander from '../controls/expander';\r\nimport Radial from '../controls/radial';\r\nimport Selector from '../controls/selector';\r\nimport Spin from '../controls/spin';\r\nimport ConditionsPanel from '../panels/conditions-panel';\r\n\r\ninterface Props {\r\n    combatant: PC | (PC & Combatant);\r\n    mode: string;\r\n    changeValue: (pc: any, field: string, value: any) => void;\r\n    nudgeValue: (pc: any, field: string, delta: number) => void;\r\n    removePC: (pc: PC) => void;\r\n    editPC: (pc: PC) => void;\r\n    // Combat\r\n    combat: Combat;\r\n    makeCurrent: (combatant: Combatant) => void;\r\n    makeActive: (combatant: Combatant) => void;\r\n    makeDefeated: (combatant: Combatant) => void;\r\n    endTurn: (combatant: Combatant) => void;\r\n    mapAdd: (combatant: Combatant) => void;\r\n    mapMove: (combatant: Combatant, dir: string) => void;\r\n    mapRemove: (combatant: Combatant) => void;\r\n    removeCombatant: (combatant: Combatant) => void;\r\n    addCondition: (combatant: Combatant) => void;\r\n    editCondition: (combatant: Combatant, condition: Condition) => void;\r\n    removeCondition: (combatant: Combatant, conditionID: string) => void;\r\n    nudgeConditionValue: (condition: Condition, field: string, delta: number) => void;\r\n    toggleTag: (combatant: Combatant, tag: string) => void;\r\n}\r\n\r\ninterface State {\r\n    combatMode: string;\r\n}\r\n\r\nexport default class PCCard extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        removePC: null,\r\n        editPC: null,\r\n        combat: null,\r\n        makeCurrent: null,\r\n        makeActive: null,\r\n        makeDefeated: null,\r\n        endTurn: null,\r\n        mapAdd: null,\r\n        mapMove: null,\r\n        mapRemove: null,\r\n        removeCombatant: null,\r\n        addCondition: null,\r\n        editCondition: null,\r\n        removeCondition: null,\r\n        nudgeConditionValue: null,\r\n        toggleTag: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            combatMode: 'main'\r\n        };\r\n    }\r\n\r\n    private setCombatMode(mode: string) {\r\n        this.setState({\r\n            combatMode: mode\r\n        });\r\n    }\r\n\r\n    private getCombatControls() {\r\n        const combatant = this.props.combatant as Combatant;\r\n\r\n        const options = [];\r\n\r\n        const combatModes = ['main', 'cond', 'map', 'adv'].map(m => {\r\n            return {\r\n                id: m,\r\n                text: m\r\n            };\r\n        });\r\n        if (this.props.mode.indexOf('tactical') === -1) {\r\n            // No combat map, so remove the map option\r\n            combatModes.splice(1, 1);\r\n        }\r\n        options.push(\r\n            <Selector\r\n                key='selector'\r\n                options={combatModes}\r\n                selectedID={this.state.combatMode}\r\n                select={option => this.setCombatMode(option)}\r\n            />\r\n        );\r\n        options.push(<div key='selector-sep' className='divider' />);\r\n\r\n        switch (this.state.combatMode) {\r\n            case 'main':\r\n                if (combatant.pending && !combatant.active && !combatant.defeated) {\r\n                    options.push(<div key='pending' className='section'>pending initiative entry</div>);\r\n                }\r\n                if (!combatant.pending && combatant.active && !combatant.defeated) {\r\n                    if (combatant.current) {\r\n                        options.push(<button key='endTurn' onClick={() => this.props.endTurn(combatant)}>end turn</button>);\r\n                        options.push(<button key='makeDefeated' onClick={() => this.props.makeDefeated(combatant)}>mark as defeated and end turn</button>);\r\n                    } else {\r\n                        options.push(<button key='makeCurrent' onClick={() => this.props.makeCurrent(combatant)}>start turn</button>);\r\n                        options.push(<button key='makeDefeated' onClick={() => this.props.makeDefeated(combatant)}>mark as defeated</button>);\r\n                    }\r\n                }\r\n                if (!combatant.pending && !combatant.active && combatant.defeated) {\r\n                    options.push(<button key='makeActive' onClick={() => this.props.makeActive(combatant)}>mark as active</button>);\r\n                }\r\n                if (!combatant.pending && combatant.active && !combatant.defeated) {\r\n                    options.push(<div key='tag-sep' className='divider' />);\r\n                    options.push(\r\n                        <ControlRow\r\n                            key='tags'\r\n                            controls={COMBAT_TAGS.map(tag =>\r\n                                <Checkbox\r\n                                    key={tag}\r\n                                    label={tag}\r\n                                    display='button'\r\n                                    checked={combatant.tags.includes(tag)}\r\n                                    changeValue={value => this.props.toggleTag(combatant, tag)}\r\n                                />\r\n                            )}\r\n                        />\r\n                    );\r\n                }\r\n                break;\r\n            case 'cond':\r\n                options.push(\r\n                    <div key='conditions'>\r\n                        <ConditionsPanel\r\n                            combatant={this.props.combatant as Combatant}\r\n                            combat={this.props.combat}\r\n                            addCondition={() => this.props.addCondition(this.props.combatant as Combatant)}\r\n                            editCondition={condition => this.props.editCondition(this.props.combatant as Combatant, condition)}\r\n                            removeCondition={conditionID => this.props.removeCondition(this.props.combatant as Combatant, conditionID)}\r\n                            nudgeConditionValue={(condition, type, delta) => this.props.nudgeConditionValue(condition, type, delta)}\r\n                        />\r\n                    </div>\r\n                );\r\n                break;\r\n            case 'map':\r\n                if (this.props.mode.indexOf('on-map') !== -1) {\r\n                    options.push(\r\n                        <div key='mapMove' className='section centered'>\r\n                            <Radial\r\n                                direction='eight'\r\n                                click={dir => this.props.mapMove(combatant, dir)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                    options.push(<div key='move-sep' className='divider' />);\r\n                    options.push(\r\n                        <Spin\r\n                            key='altitude'\r\n                            source={this.props.combatant}\r\n                            name='altitude'\r\n                            label='altitude'\r\n                            display={value => value + ' ft.'}\r\n                            nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'altitude', delta * 5)}\r\n                        />\r\n                    );\r\n                    let auraDetails = null;\r\n                    if (combatant.aura.radius > 0) {\r\n                        const auraStyleOptions = [\r\n                            {\r\n                                id: 'square',\r\n                                text: 'square'\r\n                            },\r\n                            {\r\n                                id: 'rounded',\r\n                                text: 'rounded'\r\n                            },\r\n                            {\r\n                                id: 'circle',\r\n                                text: 'circle'\r\n                            }\r\n                        ];\r\n                        auraDetails = (\r\n                            <div>\r\n                                <Selector\r\n                                    options={auraStyleOptions}\r\n                                    selectedID={combatant.aura.style}\r\n                                    select={optionID => this.props.changeValue(combatant.aura, 'style', optionID)}\r\n                                />\r\n                                <input\r\n                                    type='color'\r\n                                    value={combatant.aura.color}\r\n                                    onChange={event => this.props.changeValue(combatant.aura, 'color', event.target.value)}\r\n                                />\r\n                            </div>\r\n                        );\r\n                    }\r\n                    options.push(\r\n                        <Expander\r\n                            key='aura'\r\n                            text='aura'\r\n                            content={(\r\n                                <div>\r\n                                    <Spin\r\n                                        source={combatant.aura}\r\n                                        name='radius'\r\n                                        label='size'\r\n                                        display={value => value + ' ft.'}\r\n                                        nudgeValue={delta => this.props.nudgeValue(combatant.aura, 'radius', delta * 5)}\r\n                                    />\r\n                                    {auraDetails}\r\n                                </div>\r\n                            )}\r\n                        />\r\n                    );\r\n                    options.push(<button key='mapRemove' onClick={() => this.props.mapRemove(combatant)}>remove from map</button>);\r\n                }\r\n                if (this.props.mode.indexOf('off-map') !== -1) {\r\n                    options.push(<button key='mapAdd' onClick={() => this.props.mapAdd(combatant)}>add to map</button>);\r\n                }\r\n                break;\r\n            case 'adv':\r\n                if (!combatant.current) {\r\n                    options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                }\r\n                if (!combatant.pending) {\r\n                    options.push(\r\n                        <Expander\r\n                            key='init'\r\n                            text='change initiative score'\r\n                            content={(\r\n                                <div>\r\n                                    <Spin\r\n                                        source={this.props.combatant}\r\n                                        name='initiative'\r\n                                        label='initiative'\r\n                                        nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'initiative', delta)}\r\n                                    />\r\n                                </div>\r\n                            )}\r\n                        />\r\n                    );\r\n                }\r\n                options.push(\r\n                    <Expander\r\n                        key='size'\r\n                        text='change size'\r\n                        content={(\r\n                            <div>\r\n                                <Spin\r\n                                    source={this.props.combatant}\r\n                                    name='displaySize'\r\n                                    label='size'\r\n                                    nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'displaySize', delta)}\r\n                                />\r\n                            </div>\r\n                        )}\r\n                    />\r\n                );\r\n                break;\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='combat-options-panel'>\r\n                    {options}\r\n                </div>\r\n                <div className='divider' />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const options = [];\r\n            if (this.props.mode.indexOf('edit') !== -1) {\r\n                options.push(<button key='edit' onClick={() => this.props.editPC(this.props.combatant)}>edit pc</button>);\r\n                if (this.props.combatant.active) {\r\n                    options.push(\r\n                        <button key='toggle-active' onClick={() => this.props.changeValue(this.props.combatant, 'active', false)}>\r\n                            mark pc as inactive\r\n                        </button>\r\n                    );\r\n                } else {\r\n                    options.push(\r\n                        <button key='toggle-active' onClick={() => this.props.changeValue(this.props.combatant, 'active', true)}>\r\n                            mark pc as active\r\n                        </button>\r\n                    );\r\n                }\r\n                options.push(<ConfirmButton key='remove' text='delete pc' callback={() => this.props.removePC(this.props.combatant)} />);\r\n            }\r\n\r\n            let combat = null;\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                combat = this.getCombatControls();\r\n            }\r\n\r\n            const desc = (this.props.combatant.race || 'unknown race')\r\n                + ' ' + (this.props.combatant.classes || 'unknown class')\r\n                + ', level ' + this.props.combatant.level;\r\n\r\n            let companions = null;\r\n            if (this.props.combatant.companions.length > 0) {\r\n                companions = this.props.combatant.companions.map(companion => (\r\n                    <div key={companion.id}>{companion.name}</div>\r\n                ));\r\n            }\r\n\r\n            const name = (this.props.combatant as Combatant ? (this.props.combatant as Combatant).displayName : null)\r\n                || this.props.combatant.name\r\n                || 'unnamed pc';\r\n\r\n            return (\r\n                <div className='card pc'>\r\n                    <div className='heading'>\r\n                        <div className='title'>{name}</div>\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        <div className='stats'>\r\n                            <div className='section centered lowercase'>\r\n                                <i>{desc}</i>\r\n                                <div style={{ display: this.props.combatant.url ? '' : 'none' }}>\r\n                                    <a href={this.props.combatant.url} target='_blank' rel='noopener noreferrer'>d&d beyond sheet</a>\r\n                                </div>\r\n                            </div>\r\n                            <div className='divider' />\r\n                            {combat}\r\n                            <div className='section subheading'>languages</div>\r\n                            <div className='section'>\r\n                                {this.props.combatant.languages || '-'}\r\n                            </div>\r\n                            <div className='section subheading'>passive skills</div>\r\n                            <div className='section'>\r\n                                <div><b>insight</b> {this.props.combatant.passiveInsight}</div>\r\n                                <div><b>investigation</b> {this.props.combatant.passiveInvestigation}</div>\r\n                                <div><b>perception</b> {this.props.combatant.passivePerception}</div>\r\n                            </div>\r\n                        </div>\r\n                        <div style={{ display: this.props.combatant.companions.length > 0 ? '' : 'none' }}>\r\n                            <div className='section subheading'>companions</div>\r\n                            <div className='section'>\r\n                                {companions}\r\n                            </div>\r\n                        </div>\r\n                        <div style={{ display: options.length > 0 ? '' : 'none' }}>\r\n                            <div className='divider' />\r\n                            <div className='section'>\r\n                                {options}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Combatant } from '../../models/combat';\r\nimport { Monster } from '../../models/monster-group';\r\n\r\ninterface Props {\r\n    combatant: Combatant & Monster;\r\n}\r\n\r\nexport default class HitPointGauge extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const hpCurrent = this.props.combatant.hp || 0;\r\n            const hpMax = this.props.combatant.hpMax + this.props.combatant.hpTemp;\r\n            const hpBloodied = this.props.combatant.hpMax / 2;\r\n            const hpWidth = 100 * Math.max(hpCurrent, 0) / hpMax;\r\n\r\n            let style = '';\r\n            if (hpCurrent >= this.props.combatant.hpMax) {\r\n                style = 'bar unhurt';\r\n            } else if (hpCurrent <= hpBloodied) {\r\n                style = 'bar bloodied';\r\n            } else {\r\n                style = 'bar injured';\r\n            }\r\n\r\n            let hpTempBar = null;\r\n            if (this.props.combatant.hpTemp > 0) {\r\n                const hpTempWidth = 100 * Math.max(this.props.combatant.hpTemp, 0) / hpMax;\r\n                hpTempBar = <div className='bar temp' style={{ width: hpTempWidth + '%' }} />;\r\n            }\r\n\r\n            return (\r\n                <div className='hp-gauge'>\r\n                    <div className={style} style={{ width: hpWidth + '%' }} />\r\n                    {hpTempBar}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combatant } from '../../models/combat';\r\nimport { Map, MapItem } from '../../models/map-folio';\r\nimport { Monster } from '../../models/monster-group';\r\nimport { PC } from '../../models/party';\r\n\r\nimport Spin from '../controls/spin';\r\nimport HitPointGauge from './hit-point-gauge';\r\n\r\ninterface Props {\r\n    map: Map;\r\n    mode: 'edit' | 'thumbnail' | 'combat' | 'combat-player';\r\n    combatants: ((Combatant & PC) | (Combatant & Monster))[];\r\n    showOverlay: boolean;\r\n    selectedItemID: string;\r\n    setSelectedItemID: (itemID: string | null) => void;\r\n    gridSquareClicked: (x: number, y: number) => void;\r\n}\r\n\r\ninterface State {\r\n    zoom: number;\r\n}\r\n\r\ninterface MapDimensions {\r\n    minX: number;\r\n    maxX: number;\r\n    minY: number;\r\n    maxY: number;\r\n}\r\n\r\ninterface MapItemStyle {\r\n    left: string;\r\n    top: string;\r\n    width: string;\r\n    height: string;\r\n    borderRadius: string;\r\n    backgroundSize: string;\r\n    backgroundColor?: string;\r\n}\r\n\r\nexport default class MapPanel extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            zoom: props.mode !== 'thumbnail' ? 25 : 10\r\n        };\r\n    }\r\n\r\n    public static defaultProps = {\r\n        combatants: null,\r\n        showOverlay: false,\r\n        selectedItemID: null,\r\n        setSelectedItemID: null,\r\n        gridSquareClicked: null\r\n    };\r\n\r\n    private setZoom(value: number) {\r\n        this.setState({\r\n            zoom: Math.max(5, value)\r\n        });\r\n    }\r\n\r\n    private getMapDimensions(border: number): MapDimensions | null {\r\n        let dimensions: MapDimensions | null = null;\r\n\r\n        this.props.map.items.filter(i => {\r\n            if (this.props.mode === 'edit') {\r\n                return i.type === 'tile';\r\n            }\r\n            return true;\r\n        }).forEach(i => {\r\n            if (!dimensions) {\r\n                dimensions = {\r\n                    minX: i.x,\r\n                    maxX: i.x + i.width - 1,\r\n                    minY: i.y,\r\n                    maxY: i.y + i.height - 1\r\n                };\r\n            } else {\r\n                dimensions.minX = Math.min(dimensions.minX, i.x);\r\n                dimensions.maxX = Math.max(dimensions.maxX, i.x + i.width - 1);\r\n                dimensions.minY = Math.min(dimensions.minY, i.y);\r\n                dimensions.maxY = Math.max(dimensions.maxY, i.y + i.height - 1);\r\n            }\r\n        });\r\n\r\n        if (this.props.combatants) {\r\n            this.props.combatants.filter(c => c.aura.radius > 0).forEach(c => {\r\n                const mi = this.props.map.items.find(i => i.id === c.id);\r\n                if (mi) {\r\n                    const sizeInSquares = c.aura.radius / 5;\r\n                    let miniSize = 1;\r\n                    const m = c as Monster;\r\n                    if (m) {\r\n                        miniSize = Utils.miniSize(m.size);\r\n                    }\r\n                    const minX = mi.x - sizeInSquares;\r\n                    const maxX = mi.x + (miniSize - 1) + sizeInSquares;\r\n                    const minY = mi.y - sizeInSquares;\r\n                    const maxY = mi.y + (miniSize - 1) + sizeInSquares;\r\n\r\n                    if (dimensions) {\r\n                        dimensions.minX = Math.min(dimensions.minX, minX);\r\n                        dimensions.maxX = Math.max(dimensions.maxX, maxX);\r\n                        dimensions.minY = Math.min(dimensions.minY, minY);\r\n                        dimensions.maxY = Math.max(dimensions.maxY, maxY);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        if (!dimensions) {\r\n            // The map is blank\r\n            if (this.props.mode === 'thumbnail') {\r\n                return null;\r\n            }\r\n\r\n            dimensions = {\r\n                minX: 0,\r\n                maxX: 0,\r\n                minY: 0,\r\n                maxY: 0\r\n            };\r\n        }\r\n\r\n        // Apply the border\r\n        dimensions.minX -= border;\r\n        dimensions.maxX += border;\r\n        dimensions.minY -= border;\r\n        dimensions.maxY += border;\r\n\r\n        return dimensions;\r\n    }\r\n\r\n    private getStyle(x: number, y: number, width: number, height: number, style: 'square' | 'rounded' | 'circle' | null, dim: MapDimensions): MapItemStyle {\r\n        let offsetX = 0;\r\n        let offsetY = 0;\r\n        if (width < 1) {\r\n            offsetX = (1 - width) / 2;\r\n        }\r\n        if (height < 1) {\r\n            offsetY = (1 - height) / 2;\r\n        }\r\n\r\n        let radius = '0';\r\n        switch (style) {\r\n            case 'rounded':\r\n                radius = this.state.zoom + 'px';\r\n                break;\r\n            case 'circle':\r\n                radius = '50%';\r\n                break;\r\n        }\r\n\r\n        return {\r\n            left: 'calc(' + this.state.zoom + 'px * ' + (x + offsetX - dim.minX) + ')',\r\n            top: 'calc(' + this.state.zoom + 'px * ' + (y + offsetY - dim.minY) + ')',\r\n            width: 'calc((' + this.state.zoom + 'px * ' + width + ') + 1px)',\r\n            height: 'calc((' + this.state.zoom + 'px * ' + height + ') + 1px)',\r\n            borderRadius: radius,\r\n            backgroundSize: this.state.zoom + 'px'\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const border = (this.props.mode === 'edit') ? 2 : 0;\r\n            const mapDimensions = this.getMapDimensions(border);\r\n            if (!mapDimensions) {\r\n                return (\r\n                    <div>(blank map)</div>\r\n                );\r\n            }\r\n\r\n            // Draw the grid squares\r\n            const grid = [];\r\n            if (this.props.mode === 'edit') {\r\n                for (let y = mapDimensions.minY; y !== mapDimensions.maxY + 1; ++y) {\r\n                    for (let x = mapDimensions.minX; x !== mapDimensions.maxX + 1; ++x) {\r\n                        const gridStyle = this.getStyle(x, y, 1, 1, 'square', mapDimensions);\r\n                        grid.push(\r\n                            <GridSquare\r\n                                key={x + ',' + y}\r\n                                x={x}\r\n                                y={y}\r\n                                style={gridStyle}\r\n                                onClick={() => this.props.setSelectedItemID(null)}\r\n                            />\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Draw the map tiles\r\n            const tiles = this.props.map.items\r\n                .filter(i => i.type === 'tile')\r\n                .map(i => {\r\n                    const tileStyle = this.getStyle(i.x, i.y, i.width, i.height, i.style, mapDimensions);\r\n                    return (\r\n                        <MapTile\r\n                            key={i.id}\r\n                            tile={i}\r\n                            style={tileStyle}\r\n                            selectable={this.props.mode === 'edit'}\r\n                            selected={this.props.selectedItemID === i.id}\r\n                            select={id => this.props.mode === 'edit' ? this.props.setSelectedItemID(id) : null}\r\n                        />\r\n                    );\r\n                });\r\n\r\n            // Draw token auras\r\n            let auras: JSX.Element[] = [];\r\n            if ((this.props.mode !== 'edit') && (this.props.mode !== 'thumbnail')) {\r\n                auras = this.props.combatants\r\n                    .filter(c => c.aura.radius > 0)\r\n                    .filter(c => c.showOnMap || (this.props.mode !== 'combat-player'))\r\n                    .map(c => {\r\n                        const mi = this.props.map.items.find(i => i.id === c.id);\r\n                        if (mi) {\r\n                            const sizeInSquares = c.aura.radius / 5;\r\n                            const miniSize = Utils.miniSize(c.displaySize);\r\n                            const dim = (sizeInSquares * 2) + miniSize;\r\n                            const auraStyle = this.getStyle(mi.x - sizeInSquares, mi.y - sizeInSquares, dim, dim, c.aura.style, mapDimensions);\r\n                            auraStyle.backgroundColor = c.aura.color;\r\n                            return (\r\n                                <div\r\n                                    key={c.id + ' aura'}\r\n                                    className={'aura'}\r\n                                    style={auraStyle}\r\n                                />\r\n                            );\r\n                        }\r\n                        return null;\r\n                    })\r\n                    .filter(mt => mt !== null) as JSX.Element[];\r\n            }\r\n\r\n            // Draw the tokens\r\n            let tokens: JSX.Element[] = [];\r\n            if (this.props.mode !== 'edit') {\r\n                tokens = this.props.map.items\r\n                    .filter(i => (i.type === 'monster') || (i.type === 'pc'))\r\n                    .map(i => {\r\n                        const combatant = this.props.combatants.find(c => c.id === i.id);\r\n                        if (combatant) {\r\n                            const miniSize = Utils.miniSize(combatant.displaySize);\r\n                            const tokenStyle = this.getStyle(i.x, i.y, miniSize, miniSize, 'circle', mapDimensions);\r\n                            return (\r\n                                <MapToken\r\n                                    key={i.id}\r\n                                    token={i}\r\n                                    combatant={combatant}\r\n                                    style={tokenStyle}\r\n                                    simple={this.props.mode === 'thumbnail'}\r\n                                    showGauge={this.props.mode === 'combat'}\r\n                                    showHidden={this.props.mode === 'combat'}\r\n                                    selectable={(this.props.mode === 'combat') || (this.props.mode === 'combat-player')}\r\n                                    selected={this.props.selectedItemID ===  i.id}\r\n                                    select={id => this.props.setSelectedItemID(id)}\r\n                                />\r\n                            );\r\n                        }\r\n\r\n                        return null;\r\n                    })\r\n                    .filter(mt => mt !== null) as JSX.Element[];\r\n            }\r\n\r\n            // Draw the drag overlay\r\n            const dragOverlay = [];\r\n            if (this.props.showOverlay) {\r\n                for (let yOver = mapDimensions.minY; yOver !== mapDimensions.maxY + 1; ++yOver) {\r\n                    for (let xOver = mapDimensions.minX; xOver !== mapDimensions.maxX + 1; ++xOver) {\r\n                        const overlayStyle = this.getStyle(xOver, yOver, 1, 1, 'square', mapDimensions);\r\n                        dragOverlay.push(\r\n                            <GridSquare\r\n                                key={xOver + ',' + yOver}\r\n                                x={xOver}\r\n                                y={yOver}\r\n                                style={overlayStyle}\r\n                                overlay={true}\r\n                                onClick={(posX, posY) => this.props.gridSquareClicked(posX, posY)}\r\n                            />\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n\r\n            let zoom = null;\r\n            if (this.props.mode !== 'thumbnail') {\r\n                zoom = (\r\n                    <div className='zoom'>\r\n                        <Spin\r\n                            source={this.state}\r\n                            name={'zoom'}\r\n                            display={value => ''}\r\n                            nudgeValue={delta => this.setZoom(this.state.zoom + (delta * 5))}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            const style = 'map-panel ' + this.props.mode;\r\n            const mapHeight = 1 + mapDimensions.maxY - mapDimensions.minY;\r\n            return (\r\n                <div className={style} onClick={() => this.props.setSelectedItemID(null)}>\r\n                    <div className='grid' style={{ height: ((this.state.zoom * mapHeight) + 1) + 'px' }}>\r\n                        {grid}\r\n                        {tiles}\r\n                        {auras}\r\n                        {tokens}\r\n                        {dragOverlay}\r\n                    </div>\r\n                    {zoom}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface GridSquareProps {\r\n    x: number;\r\n    y: number;\r\n    style: MapItemStyle;\r\n    overlay: boolean;\r\n    onClick: (x: number, y: number) => void;\r\n    onDoubleClick: (x: number, y: number) => void;\r\n}\r\n\r\nclass GridSquare extends React.Component<GridSquareProps> {\r\n    public static defaultProps = {\r\n        overlay: false,\r\n        onDoubleClick: null\r\n    };\r\n\r\n    private click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (this.props.onClick) {\r\n            this.props.onClick(this.props.x, this.props.y);\r\n        }\r\n    }\r\n\r\n    private doubleClick(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (this.props.onDoubleClick) {\r\n            this.props.onDoubleClick(this.props.x, this.props.y);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'grid-square';\r\n        if (this.props.overlay) {\r\n            style += ' grid-overlay';\r\n        }\r\n\r\n        return (\r\n            <div\r\n                className={style}\r\n                style={this.props.style}\r\n                onClick={e => this.click(e)}\r\n                onDoubleClick={e => this.doubleClick(e)}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\ninterface MapTileProps {\r\n    tile: MapItem;\r\n    style: MapItemStyle;\r\n    selectable: boolean;\r\n    selected: boolean;\r\n    select: (tileID: string) => void;\r\n}\r\n\r\nclass MapTile extends React.Component<MapTileProps> {\r\n    private select(e: React.MouseEvent) {\r\n        if (this.props.selectable) {\r\n            e.stopPropagation();\r\n            this.props.select(this.props.tile.id);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'tile ' + this.props.tile.terrain;\r\n        if (this.props.selected) {\r\n            style += ' selected';\r\n        }\r\n\r\n        let content = null;\r\n        if ((this.props.tile.terrain === 'custom image') && (this.props.tile.customBackground !== null)) {\r\n            content = (\r\n                <img src={this.props.tile.customBackground} alt='map tile' style={{ width: '100%', height: '100%' }} />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div\r\n                className={style}\r\n                style={this.props.style}\r\n                onClick={e => this.select(e)}\r\n            >\r\n                {content}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface MapTokenProps {\r\n    token: MapItem;\r\n    combatant: (Combatant & PC) | (Combatant & Monster);\r\n    style: MapItemStyle;\r\n    simple: boolean;\r\n    showGauge: boolean;\r\n    showHidden: boolean;\r\n    selectable: boolean;\r\n    selected: boolean;\r\n    select: (tokenID: string) => void;\r\n}\r\n\r\nclass MapToken extends React.Component<MapTokenProps> {\r\n    private select(e: React.MouseEvent) {\r\n        if (this.props.selectable) {\r\n            e.stopPropagation();\r\n            this.props.select(this.props.token.id);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'token ' + this.props.token.type;\r\n        if (this.props.selected) {\r\n            style += ' selected';\r\n        }\r\n        if (this.props.combatant.current) {\r\n            style += ' current';\r\n        }\r\n        if (!this.props.combatant.showOnMap) {\r\n            if (this.props.showHidden) {\r\n                style += ' hidden';\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n\r\n        let initials = null;\r\n        let hpGauge = null;\r\n        let altitudeBadge = null;\r\n        let conditionsBadge = null;\r\n        if (!this.props.simple) {\r\n            const name = this.props.combatant.displayName || this.props.combatant.name || 'combatant';\r\n            initials = (\r\n                <div className='initials'>{name.split(' ').map(s => s[0])}</div>\r\n            );\r\n\r\n            if (this.props.combatant.type === 'monster' && this.props.showGauge) {\r\n                hpGauge = (\r\n                    <HitPointGauge combatant={this.props.combatant as Combatant & Monster} />\r\n                );\r\n            }\r\n\r\n            if (this.props.combatant.altitude > 0) {\r\n                altitudeBadge = (\r\n                    <div className='badge altitude' title='above the map'>&#9206;</div>\r\n                );\r\n            }\r\n\r\n            if (this.props.combatant.altitude < 0) {\r\n                altitudeBadge = (\r\n                    <div className='badge altitude' title='below the map'>&#9207;</div>\r\n                );\r\n            }\r\n\r\n            if ((this.props.combatant.conditions) && (this.props.combatant.conditions.length > 0)) {\r\n                conditionsBadge = (\r\n                    <div className='badge' title='affected by conditions'>&#9670;</div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div\r\n                title={this.props.combatant.displayName || this.props.combatant.name}\r\n                className={style}\r\n                style={this.props.style}\r\n                onClick={e => this.select(e)}\r\n            >\r\n                {initials}\r\n                {hpGauge}\r\n                {altitudeBadge}\r\n                {conditionsBadge}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Combat } from '../../models/combat';\r\n\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    combat: Combat;\r\n    selected: boolean;\r\n    setSelection: (combat: Combat) => void;\r\n}\r\n\r\nexport default class CombatListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            let map = null;\r\n            if (this.props.combat.map) {\r\n                map = (\r\n                    <MapPanel\r\n                        map={this.props.combat.map}\r\n                        mode='thumbnail'\r\n                        combatants={this.props.combat.combatants}\r\n                    />\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.combat)}>\r\n                    <div className='heading'>{this.props.combat.name || 'unnamed combat'}</div>\r\n                    <div className='section'>paused at {this.props.combat.timestamp}</div>\r\n                    {map}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport arrow from '../../resources/icons/down-arrow-black.svg';\r\nimport close from '../../resources/icons/x.svg';\r\n\r\ninterface Props {\r\n    content: any[];\r\n    heading: string;\r\n    hidden: boolean;\r\n    showToggle: boolean;\r\n    close: () => void;\r\n}\r\n\r\ninterface State {\r\n    showCards: boolean;\r\n}\r\n\r\nexport default class CardGroup extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        heading: null,\r\n        hidden: false,\r\n        showToggle: false,\r\n        close: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showCards: true\r\n        };\r\n    }\r\n\r\n    private toggleCards() {\r\n        this.setState({\r\n            showCards: !this.state.showCards\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            if (this.props.hidden) {\r\n                return null;\r\n            }\r\n\r\n            let heading = null;\r\n            if (this.props.heading) {\r\n                let closeBtn = null;\r\n                if (this.props.close) {\r\n                    closeBtn = (\r\n                        <img className='image' src={close} alt='close' onClick={() => this.props.close()} />\r\n                    );\r\n                }\r\n\r\n                let toggle = null;\r\n                if (this.props.showToggle) {\r\n                    const style = this.state.showCards ? 'image rotate' : 'image';\r\n                    toggle = (\r\n                        <img className={style} src={arrow} alt='arrow' onClick={() => this.toggleCards()} />\r\n                    );\r\n                }\r\n\r\n                heading = (\r\n                    <div className='heading'>\r\n                        <div className='title'>{this.props.heading}</div>\r\n                        {toggle}\r\n                        {closeBtn}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            let cards = [];\r\n            if ((this.props.content.length > 0) && this.state.showCards) {\r\n                cards = this.props.content;\r\n            }\r\n\r\n            return (\r\n                <div className='card-group'>\r\n                    {heading}\r\n                    <div className='row small-up-1 medium-up-2 large-up-3 collapse'>\r\n                        {cards}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\ninterface Props {\r\n    title: string;\r\n    closeWindow: () => void;\r\n}\r\n\r\ninterface State {\r\n    externalWindow: Window | null;\r\n    containerElement: HTMLElement | null;\r\n}\r\n\r\nexport default class Popout extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            externalWindow: null,\r\n            containerElement: null\r\n        };\r\n    }\r\n\r\n    public componentDidMount() {\r\n        const externalWindow = window.open('', '', 'width=800, height=500, left=200, top=200');\r\n\r\n        let containerElement = null;\r\n        if (externalWindow) {\r\n            containerElement = externalWindow.document.createElement('div');\r\n            containerElement.className = 'dojo popout';\r\n            externalWindow.document.body.appendChild(containerElement);\r\n\r\n            const stylesheets = Array.from(document.styleSheets);\r\n            stylesheets.forEach(stylesheet => {\r\n                const css = stylesheet as CSSStyleSheet;\r\n\r\n                if (stylesheet.href) {\r\n                    const newStyleElement = document.createElement('link');\r\n                    newStyleElement.rel = 'stylesheet';\r\n                    newStyleElement.href = stylesheet.href;\r\n                    externalWindow.document.head.appendChild(newStyleElement);\r\n                } else if (css && css.cssRules && css.cssRules.length > 0) {\r\n                    const newStyleElement = document.createElement('style');\r\n                    Array.from(css.cssRules).forEach(rule => {\r\n                        newStyleElement.appendChild(document.createTextNode(rule.cssText));\r\n                    });\r\n                    externalWindow.document.head.appendChild(newStyleElement);\r\n                }\r\n            });\r\n\r\n            externalWindow.document.title = this.props.title;\r\n            externalWindow.addEventListener('beforeunload', () => {\r\n                this.props.closeWindow();\r\n            });\r\n        }\r\n\r\n        this.setState({\r\n            externalWindow: externalWindow,\r\n            containerElement: containerElement\r\n        });\r\n    }\r\n\r\n    public componentWillUnmount() {\r\n        if (this.state.externalWindow) {\r\n            this.state.externalWindow.close();\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        if (!this.state.containerElement) {\r\n            return null;\r\n        }\r\n\r\n        return ReactDOM.createPortal(this.props.children, this.state.containerElement);\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combat, COMBAT_TAGS, Combatant, Notification } from '../../models/combat';\r\nimport { Condition, ConditionDurationSaves } from '../../models/condition';\r\nimport { Monster, Trait } from '../../models/monster-group';\r\nimport { PC } from '../../models/party';\r\n\r\nimport MonsterCard from '../cards/monster-card';\r\nimport PCCard from '../cards/pc-card';\r\nimport Checkbox from '../controls/checkbox';\r\nimport ControlRow from '../controls/control-row';\r\nimport Radial from '../controls/radial';\r\nimport Spin from '../controls/spin';\r\nimport CombatListItem from '../list-items/combat-list-item';\r\nimport CardGroup from '../panels/card-group';\r\nimport HitPointGauge from '../panels/hit-point-gauge';\r\nimport MapPanel from '../panels/map-panel';\r\nimport Note from '../panels/note';\r\nimport TraitsPanel from '../panels/traits-panel';\r\nimport Popout from '../portals/popout';\r\n\r\ninterface Props {\r\n    combats: Combat[];\r\n    combat: Combat | null;\r\n    filter: string;\r\n    createCombat: () => void;\r\n    resumeEncounter: (combat: Combat) => void;\r\n    close: (notification: Notification, removeCondition: boolean) => void;\r\n    mapAdd: (combatant: (Combatant & PC) | (Combatant & Monster), x: number, y: number) => void;\r\n    makeCurrent: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    makeActive: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    makeDefeated: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    removeCombatant: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    addCondition: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    editCondition: (combatant: (Combatant & PC) | (Combatant & Monster), condition: Condition) => void;\r\n    removeCondition: (combatant: (Combatant & PC) | (Combatant & Monster), conditionID: string) => void;\r\n    mapMove: (combatant: (Combatant & PC) | (Combatant & Monster), dir: string) => void;\r\n    mapRemove: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    endTurn: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    changeHP: (combatant: Combatant & Monster, hp: number, temp: number) => void;\r\n    changeValue: (source: {}, type: string, value: any) => void;\r\n    nudgeValue: (source: {}, type: string, delta: number) => void;\r\n    toggleTag: (combatant: Combatant, tag: string) => void;\r\n    scatterMonsters: () => void;\r\n}\r\n\r\ninterface State {\r\n    selectedTokenID: string | null;\r\n    addingToMapID: string | null;\r\n    playerView: {\r\n        open: boolean;\r\n        showControls: boolean;\r\n    };\r\n}\r\n\r\nexport default class CombatManagerScreen extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            selectedTokenID: null,  // The ID of the combatant that's selected\r\n            addingToMapID: null,    // The ID of the combatant we're adding to the map\r\n            playerView: {\r\n                open: false,\r\n                showControls: true\r\n            }\r\n        };\r\n    }\r\n\r\n    public componentDidMount() {\r\n        window.addEventListener('beforeunload', () => {\r\n            this.setPlayerViewOpen(false);\r\n        });\r\n    }\r\n\r\n    private setSelectedTokenID(id: string | null) {\r\n        this.setState({\r\n            selectedTokenID: id\r\n        });\r\n    }\r\n\r\n    private setAddingToMapID(id: string | null) {\r\n        this.setState({\r\n            addingToMapID: id\r\n        });\r\n    }\r\n\r\n    private setPlayerViewOpen(show: boolean) {\r\n        // eslint-disable-next-line\r\n        this.state.playerView.open = show;\r\n        this.setState({\r\n            playerView: this.state.playerView\r\n        });\r\n    }\r\n\r\n    private setPlayerViewShowControls(show: boolean) {\r\n        // eslint-disable-next-line\r\n        this.state.playerView.showControls = show;\r\n        this.setState({\r\n            playerView: this.state.playerView\r\n        });\r\n    }\r\n\r\n    private getPlayerView(combat: Combat) {\r\n        if (!this.state.playerView.open) {\r\n            return null;\r\n        }\r\n\r\n        const init = combat.combatants\r\n            .filter(c => c.showOnMap)\r\n            .filter(combatant => !combatant.pending && combatant.active && !combatant.defeated)\r\n            .map(combatant => {\r\n                switch (combatant.type) {\r\n                    case 'pc':\r\n                        return (\r\n                            <PCRow\r\n                                key={combatant.id}\r\n                                combatant={combatant as Combatant & PC}\r\n                                minimal={true}\r\n                                combat={this.props.combat as Combat}\r\n                                select={c => this.setSelectedTokenID(c.id)}\r\n                                selected={combatant.id === this.state.selectedTokenID}\r\n                            />\r\n                        );\r\n                    case 'monster':\r\n                        return (\r\n                            <MonsterRow\r\n                                key={combatant.id}\r\n                                combatant={combatant as Combatant & Monster}\r\n                                minimal={true}\r\n                                combat={this.props.combat as Combat}\r\n                                select={c => this.setSelectedTokenID(c.id)}\r\n                                selected={combatant.id === this.state.selectedTokenID}\r\n                            />\r\n                        );\r\n                    default:\r\n                        return null;\r\n                }\r\n            });\r\n\r\n        if (combat.map) {\r\n            let controls = null;\r\n            if (combat.map && this.state.playerView.showControls) {\r\n                let selection = combat.combatants\r\n                    .filter(c => combat.map !== null ? combat.map.items.find(item => item.id === c.id) : false)\r\n                    .filter(c => c.showOnMap)\r\n                    .find(c => c.id === this.state.selectedTokenID);\r\n                if (!selection) {\r\n                    selection = combat.combatants\r\n                        .filter(c => combat.map !== null ? combat.map.items.find(item => item.id === c.id) : false)\r\n                        .filter(c => c.showOnMap)\r\n                        .find(c => c.current);\r\n                }\r\n\r\n                if (selection) {\r\n                    const token = selection as ((Combatant & PC) | (Combatant & Monster));\r\n                    controls = (\r\n                        <div>\r\n                            <div className='heading lowercase'>{token.displayName}</div>\r\n                            <div className='section centered'>\r\n                                <Radial\r\n                                    direction='eight'\r\n                                    click={dir => this.props.mapMove(token, dir)}\r\n                                />\r\n                            </div>\r\n                            <div className='divider' />\r\n                            <Spin\r\n                                key='altitude'\r\n                                source={token}\r\n                                name='altitude'\r\n                                label='altitude'\r\n                                display={value => value + ' ft.'}\r\n                                nudgeValue={delta => this.props.nudgeValue(token, 'altitude', delta * 5)}\r\n                            />\r\n                            <ControlRow\r\n                                key='tags'\r\n                                controls={COMBAT_TAGS.map(tag =>\r\n                                    <Checkbox\r\n                                        key={tag}\r\n                                        label={tag}\r\n                                        display='button'\r\n                                        checked={token.tags.includes(tag)}\r\n                                        changeValue={value => this.props.toggleTag(token, tag)}\r\n                                    />\r\n                                )}\r\n                            />\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n\r\n            return (\r\n                <Popout title='Encounter' closeWindow={() => this.setPlayerViewOpen(false)}>\r\n                    <div className='row'>\r\n                        <div className='columns small-12 medium-6 large-8 scrollable scrollable-both'>\r\n                            <MapPanel\r\n                                key='map'\r\n                                map={combat.map}\r\n                                mode='combat-player'\r\n                                combatants={combat.combatants}\r\n                                selectedItemID={this.state.selectedTokenID ? this.state.selectedTokenID : undefined}\r\n                                setSelectedItemID={id => this.setSelectedTokenID(id)}\r\n                            />\r\n                        </div>\r\n                        <div className='columns small-12 medium-6 large-4 scrollable'>\r\n                            {controls}\r\n                            <div className='heading'>initiative order</div>\r\n                            {init}\r\n                        </div>\r\n                    </div>\r\n                </Popout>\r\n            );\r\n        } else {\r\n            return (\r\n                <Popout title='Encounter' closeWindow={() => this.setPlayerViewOpen(false)}>\r\n                    <div className='row'>\r\n                        <div className='columns small-12 medium-12 large-12 scrollable'>\r\n                            <div className='heading'>initiative order</div>\r\n                            {init}\r\n                        </div>\r\n                    </div>\r\n                </Popout>\r\n            );\r\n        }\r\n    }\r\n\r\n    private createCard(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        let mode = 'combat';\r\n        if (this.props.combat && this.props.combat.map) {\r\n            mode += ' tactical';\r\n            const onMap = this.props.combat.map.items.find(i => i.id === combatant.id);\r\n            mode += onMap ? ' on-map' : ' off-map';\r\n        }\r\n\r\n        switch (combatant.type) {\r\n            case 'pc':\r\n                return (\r\n                    <PCCard\r\n                        key='selected'\r\n                        combatant={combatant as Combatant & PC}\r\n                        mode={mode}\r\n                        combat={this.props.combat as Combat}\r\n                        changeValue={(source, type, value) => this.props.changeValue(source, type, value)}\r\n                        nudgeValue={(source, type, delta) => this.props.nudgeValue(source, type, delta)}\r\n                        makeCurrent={c => this.props.makeCurrent(c as Combatant & PC)}\r\n                        makeActive={c => this.props.makeActive(c as Combatant & PC)}\r\n                        makeDefeated={c => this.defeatCombatant(c as Combatant & PC)}\r\n                        removeCombatant={c => this.props.removeCombatant(c as Combatant & PC)}\r\n                        addCondition={c => this.props.addCondition(c as Combatant & Monster)}\r\n                        editCondition={(c, condition) => this.props.editCondition(c as Combatant & Monster, condition)}\r\n                        removeCondition={(c, conditionID) => this.props.removeCondition(c as Combatant & Monster, conditionID)}\r\n                        nudgeConditionValue={(c, type, delta) => this.props.nudgeValue(c, type, delta)}\r\n                        mapAdd={c => this.setAddingToMapID(this.state.addingToMapID ? null : c.id)}\r\n                        mapMove={(c, dir) => this.props.mapMove(c as Combatant & PC, dir)}\r\n                        mapRemove={c => this.props.mapRemove(c as Combatant & PC)}\r\n                        endTurn={c => this.props.endTurn(c as Combatant & PC)}\r\n                        toggleTag={(c, tag) => this.props.toggleTag(c, tag)}\r\n                    />\r\n                );\r\n            case 'monster':\r\n                return (\r\n                    <MonsterCard\r\n                        key='selected'\r\n                        combatant={combatant as Combatant & Monster}\r\n                        mode={mode}\r\n                        combat={this.props.combat as Combat}\r\n                        changeValue={(c, type, value) => this.props.changeValue(c, type, value)}\r\n                        nudgeValue={(c, type, delta) => this.props.nudgeValue(c, type, delta)}\r\n                        makeCurrent={c => this.props.makeCurrent(c as Combatant & Monster)}\r\n                        makeActive={c => this.props.makeActive(c as Combatant & Monster)}\r\n                        makeDefeated={c => this.defeatCombatant(c as Combatant & Monster)}\r\n                        removeCombatant={c => this.props.removeCombatant(c as Combatant & Monster)}\r\n                        addCondition={c => this.props.addCondition(c as Combatant & Monster)}\r\n                        editCondition={(c, condition) => this.props.editCondition(c as Combatant & Monster, condition)}\r\n                        removeCondition={(c, conditionID) => this.props.removeCondition(c as Combatant & Monster, conditionID)}\r\n                        nudgeConditionValue={(c, type, delta) => this.props.nudgeValue(c, type, delta)}\r\n                        mapAdd={c => this.setAddingToMapID(this.state.addingToMapID ? null : c.id)}\r\n                        mapMove={(c, dir) => this.props.mapMove(c as Combatant & Monster, dir)}\r\n                        mapRemove={c => this.props.mapRemove(c as Combatant & Monster)}\r\n                        endTurn={(c) => this.props.endTurn(c as Combatant & Monster)}\r\n                        changeHP={(c, hp, temp) => this.props.changeHP(c as Combatant & Monster, hp, temp)}\r\n                        toggleTag={(c, tag) => this.props.toggleTag(c, tag)}\r\n                    />\r\n                );\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    private defeatCombatant(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        if (this.state.selectedTokenID === combatant.id) {\r\n            this.setState({\r\n                selectedTokenID: null\r\n            });\r\n        }\r\n\r\n        this.props.makeDefeated(combatant);\r\n    }\r\n\r\n    private addCombatantToMap(x: number, y: number) {\r\n        if (this.props.combat) {\r\n            const combatant = this.props.combat.combatants.find(c => c.id === this.state.addingToMapID);\r\n            if (combatant) {\r\n                this.props.mapAdd(combatant, x, y);\r\n            }\r\n            this.setAddingToMapID(null);\r\n        }\r\n    }\r\n\r\n    private showCombat(combat: Combat) {\r\n        return Utils.match(this.props.filter, combat.name);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            if (this.props.combat) {\r\n                const current: JSX.Element[] = [];\r\n                let pending: JSX.Element[] = [];\r\n                let active: JSX.Element[] = [];\r\n                const defeated: JSX.Element[] = [];\r\n\r\n                this.props.combat.combatants.forEach(combatant => {\r\n                    if (combatant.current) {\r\n                        current.push(\r\n                            <div key={combatant.id}>\r\n                                {this.createCard(combatant)}\r\n                            </div>\r\n                        );\r\n                    }\r\n                    if (combatant.pending && !combatant.active && !combatant.defeated) {\r\n                        pending.push(\r\n                            <PendingCombatantRow\r\n                                key={combatant.id}\r\n                                combatant={combatant}\r\n                                select={c => this.setSelectedTokenID(c.id)}\r\n                                selected={combatant.id === this.state.selectedTokenID}\r\n                                nudgeValue={(c, type, delta) => this.props.nudgeValue(c, type, delta)}\r\n                                makeActive={c => this.props.makeActive(c)}\r\n                            />\r\n                        );\r\n                    }\r\n                    if (!combatant.pending && combatant.active && !combatant.defeated) {\r\n                        switch (combatant.type) {\r\n                            case 'pc':\r\n                                active.push(\r\n                                    <PCRow\r\n                                        key={combatant.id}\r\n                                        combatant={combatant as Combatant & PC}\r\n                                        combat={this.props.combat as Combat}\r\n                                        select={c => this.setSelectedTokenID(c.id)}\r\n                                        selected={combatant.id === this.state.selectedTokenID}\r\n                                    />\r\n                                );\r\n                                break;\r\n                            case 'monster':\r\n                                active.push(\r\n                                    <MonsterRow\r\n                                        key={combatant.id}\r\n                                        combatant={combatant as Combatant & Monster}\r\n                                        combat={this.props.combat as Combat}\r\n                                        select={c => this.setSelectedTokenID(c.id)}\r\n                                        selected={combatant.id === this.state.selectedTokenID}\r\n                                    />\r\n                                );\r\n                                break;\r\n                        }\r\n                    }\r\n                    if (!combatant.pending && !combatant.active && combatant.defeated) {\r\n                        switch (combatant.type) {\r\n                            case 'pc':\r\n                                defeated.push(\r\n                                    <PCRow\r\n                                        key={combatant.id}\r\n                                        combatant={combatant as Combatant & PC}\r\n                                        combat={this.props.combat as Combat}\r\n                                        select={c => this.setSelectedTokenID(c.id)}\r\n                                        selected={combatant.id === this.state.selectedTokenID}\r\n                                    />\r\n                                );\r\n                                break;\r\n                            case 'monster':\r\n                                defeated.push(\r\n                                    <MonsterRow\r\n                                        key={combatant.id}\r\n                                        combatant={combatant as Combatant & Monster}\r\n                                        combat={this.props.combat as Combat}\r\n                                        select={c => this.setSelectedTokenID(c.id)}\r\n                                        selected={combatant.id === this.state.selectedTokenID}\r\n                                    />\r\n                                );\r\n                                break;\r\n                        }\r\n                    }\r\n                });\r\n\r\n                if (pending.length !== 0) {\r\n                    const pendingHelp = (\r\n                        <div key='pending-help'>\r\n                            <Note\r\n                                content={\r\n                                    <div>\r\n                                        <div className='section'>these combatants are not yet part of the encounter</div>\r\n                                        <div className='section'>set initiative on each of them, then add them to the encounter</div>\r\n                                    </div>\r\n                                }\r\n                            />\r\n                        </div>\r\n                    );\r\n                    pending = [pendingHelp].concat(pending);\r\n                }\r\n\r\n                if (current.length === 0) {\r\n                    const activeHelp = (\r\n                        /* tslint:disable:max-line-length */\r\n                        <div key='active-help'>\r\n                            <Note\r\n                                content={\r\n                                    <div>\r\n                                        <div className='section'>these are the combatants taking part in this encounter; you can select them to see their stat blocks (on the right)</div>\r\n                                        <div className='section'>they are listed in initiative order (with the highest initiative score at the top of the list, and the lowest at the bottom)</div>\r\n                                        <div className='section'>when you're ready to begin the encounter, select the first combatant and press the <b>start turn</b> button on their stat block</div>\r\n                                    </div>\r\n                                }\r\n                            />\r\n                        </div>\r\n                        /* tslint:enable:max-line-length */\r\n                    );\r\n                    active = [activeHelp].concat(active);\r\n                }\r\n\r\n                if (current.length === 0) {\r\n                    current.push(\r\n                        <Note\r\n                            key='current'\r\n                            content={\r\n                                <div className='section'>\r\n                                    the current initiative holder will be displayed here\r\n                                </div>\r\n                            }\r\n                        />\r\n                    );\r\n                }\r\n\r\n                let notificationSection = null;\r\n                if (this.props.combat.notifications.length > 0) {\r\n                    const notifications = this.props.combat.notifications.map(n => (\r\n                        <NotificationPanel\r\n                            key={n.id}\r\n                            notification={n}\r\n                            close={(notification, removeCondition) => this.props.close(notification, removeCondition)}\r\n                        />\r\n                    ));\r\n                    notificationSection = (\r\n                        <div className='notifications'>\r\n                            {notifications}\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                let mapSection = null;\r\n                if (this.props.combat.map) {\r\n                    mapSection = (\r\n                        <div key='map'>\r\n                            <MapPanel\r\n                                map={this.props.combat.map}\r\n                                mode='combat'\r\n                                showOverlay={this.state.addingToMapID !== null}\r\n                                combatants={this.props.combat.combatants}\r\n                                selectedItemID={this.state.selectedTokenID ? this.state.selectedTokenID : undefined}\r\n                                setSelectedItemID={id => this.setSelectedTokenID(id)}\r\n                                gridSquareClicked={(x, y) => this.addCombatantToMap(x, y)}\r\n                            />\r\n                            <button onClick={() => this.props.scatterMonsters()}>scatter monsters</button>\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                const playerViewSection = (\r\n                    <CardGroup\r\n                        heading='player view'\r\n                        content={[\r\n                            <Checkbox\r\n                                key='show'\r\n                                label='show player view'\r\n                                checked={this.state.playerView.open}\r\n                                changeValue={value => this.setPlayerViewOpen(value)}\r\n                            />,\r\n                            <Checkbox\r\n                                key='controls'\r\n                                label='show map controls'\r\n                                checked={this.state.playerView.showControls}\r\n                                disabled={!this.props.combat.map}\r\n                                changeValue={value => this.setPlayerViewShowControls(value)}\r\n                            />\r\n                        ]}\r\n                        showToggle={true}\r\n                    />\r\n                );\r\n\r\n                const special: JSX.Element[] = [];\r\n                this.props.combat.combatants.forEach(c => {\r\n                    const monster = c as (Combatant & Monster);\r\n                    const legendary = monster && monster.traits && monster.traits.some(t => t.type === 'legendary') && !monster.current;\r\n                    const lair = monster && monster.traits && monster.traits.some(t => t.type === 'lair');\r\n                    if (legendary || lair) {\r\n                        special.push(\r\n                            <div className='card monster' key={monster.id}>\r\n                                <div className='heading'><div className='title'>{monster.name}</div></div>\r\n                                <div className='card-content'>\r\n                                    <TraitsPanel\r\n                                        combatant={monster}\r\n                                        mode='combat-special'\r\n                                        changeValue={(source, type, value) => this.props.changeValue(source, type, value)}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    }\r\n                });\r\n\r\n                let selectedCombatant = null;\r\n                if (this.state.selectedTokenID) {\r\n                    const combatant = this.props.combat.combatants.find(c => c.id === this.state.selectedTokenID);\r\n                    if (combatant && !combatant.current) {\r\n                        selectedCombatant = this.createCard(combatant);\r\n                    }\r\n                }\r\n                if (!selectedCombatant) {\r\n                    selectedCombatant = (\r\n                        <Note\r\n                            key='selected'\r\n                            content={\r\n                                <div className='section'>\r\n                                    select a pc or monster from the <b>initiative order</b> list to see its details here\r\n                                </div>\r\n                            }\r\n                        />\r\n                    );\r\n                }\r\n\r\n                return (\r\n                    <div className='combat-manager row collapse'>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable'>\r\n                            <CardGroup\r\n                                heading='initiative holder'\r\n                                content={current}\r\n                            />\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable'>\r\n                            {notificationSection}\r\n                            <CardGroup\r\n                                heading='waiting for intiative to be entered'\r\n                                content={pending}\r\n                                hidden={pending.length === 0}\r\n                                showToggle={true}\r\n                            />\r\n                            <CardGroup\r\n                                heading='encounter map'\r\n                                content={[mapSection]}\r\n                                hidden={mapSection === null}\r\n                                showToggle={true}\r\n                            />\r\n                            <CardGroup\r\n                                heading='initiative order'\r\n                                content={active}\r\n                                hidden={active.length === 0}\r\n                                showToggle={true}\r\n                            />\r\n                            <CardGroup\r\n                                heading='defeated'\r\n                                content={defeated}\r\n                                hidden={defeated.length === 0}\r\n                                showToggle={true}\r\n                            />\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable'>\r\n                            {playerViewSection}\r\n                            {this.getPlayerView(this.props.combat)}\r\n                            <CardGroup\r\n                                heading={'don\\'t forget'}\r\n                                content={special}\r\n                                hidden={special.length === 0}\r\n                                showToggle={true}\r\n                            />\r\n                            <CardGroup\r\n                                heading='selected combatant'\r\n                                content={[selectedCombatant]}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                let listItems = this.props.combats.filter(c => this.showCombat(c)).map(c => {\r\n                    return (\r\n                        <CombatListItem\r\n                            key={c.id}\r\n                            combat={c}\r\n                            selected={false}\r\n                            setSelection={combat => this.props.resumeEncounter(combat)}\r\n                        />\r\n                    );\r\n                });\r\n                if (listItems.length === 0) {\r\n                    listItems = [(\r\n                        <Note\r\n                            key='empty'\r\n                            content={'you have no in-progress encounters'}\r\n                        />\r\n                    )];\r\n                }\r\n\r\n                return (\r\n                    <div className='combat-manager row collapse'>\r\n                        <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                            <button onClick={() => this.props.createCombat()}>start a new combat</button>\r\n                            <div className='divider' />\r\n                            {listItems}\r\n                        </div>\r\n                        <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                            <div className='vertical-center-outer'>\r\n                                <div className='vertical-center-middle'>\r\n                                    <div className='vertical-center-inner'>\r\n                                        <HelpCard combats={this.props.combats} />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface HelpCardProps {\r\n    combats: Combat[];\r\n}\r\n\r\nclass HelpCard extends React.Component<HelpCardProps> {\r\n    public render() {\r\n        let action: JSX.Element | null = null;\r\n        if (this.props.combats.length === 0) {\r\n            action = (\r\n                <div className='section'>to start a combat encounter, press the <b>start a new combat</b> button</div>\r\n            );\r\n        } else {\r\n            action = (\r\n                <div>\r\n                    <div className='section'>on the left you will see a list of encounters that you have paused</div>\r\n                    <div className='section'>you can resume a paused combat by selecting it</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Note\r\n                content={\r\n                    <div>\r\n                        <div className='section'>here you can run a combat encounter by specifying a party and an encounter, and optionally a map</div>\r\n                        <div className='divider' />\r\n                        {action}\r\n                    </div>\r\n                }\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\ninterface NotificationProps {\r\n    notification: Notification;\r\n    close: (notification: Notification, removeCondition: boolean) => void;\r\n}\r\n\r\nclass NotificationPanel extends React.Component<NotificationProps> {\r\n    private success() {\r\n        switch (this.props.notification.type) {\r\n            case 'condition-save':\r\n            case 'condition-end':\r\n                const condition = this.props.notification.data as Condition;\r\n                if (condition.duration) {\r\n                    // Reduce save by 1\r\n                    if ((condition.duration.type === 'saves') || (condition.duration.type === 'rounds')) {\r\n                        condition.duration.count -= 1;\r\n                        if (condition.duration.count === 0) {\r\n                            // Remove the condition\r\n                            this.close(true);\r\n                        } else {\r\n                            this.close();\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            case 'trait-recharge':\r\n                // Mark trait as recharged\r\n                const trait = this.props.notification.data as Trait;\r\n                trait.uses = 0;\r\n                this.close();\r\n                break;\r\n        }\r\n    }\r\n\r\n    private close(removeCondition = false) {\r\n        this.props.close(this.props.notification, removeCondition);\r\n    }\r\n\r\n    public render() {\r\n        const combatant = this.props.notification.combatant as (Combatant & Monster);\r\n        const condition = this.props.notification.data as Condition;\r\n        const trait = this.props.notification.data as Trait;\r\n\r\n        const name = combatant.displayName || combatant.name || 'unnamed monster';\r\n        switch (this.props.notification.type) {\r\n            case 'condition-save':\r\n                const duration = condition.duration as ConditionDurationSaves;\r\n                let saveType = duration.saveType.toString();\r\n                if (saveType !== 'death') {\r\n                    saveType = saveType.toUpperCase();\r\n                }\r\n                return (\r\n                    <div key={this.props.notification.id} className='descriptive'>\r\n                        <div className='text'>\r\n                            {name} must make a {saveType} save against dc {duration.saveDC}\r\n                        </div>\r\n                        <ControlRow\r\n                            controls={[\r\n                                <button key='success' onClick={() => this.success()}>success</button>,\r\n                                <button key='close' onClick={() => this.close()}>close</button>\r\n                            ]}\r\n                        />\r\n                    </div>\r\n                );\r\n            case 'condition-end':\r\n                return (\r\n                    <div key={this.props.notification.id} className='descriptive'>\r\n                        <div className='text'>\r\n                            {name} is no longer affected by condition {condition.name}\r\n                        </div>\r\n                        <ControlRow\r\n                            controls={[\r\n                                <button key='close' onClick={() => this.close()}>close</button>\r\n                            ]}\r\n                        />\r\n                    </div>\r\n                );\r\n            case 'trait-recharge':\r\n                return (\r\n                    <div key={this.props.notification.id} className='descriptive'>\r\n                        <div className='text'>\r\n                            {name} can attempt to recharge {trait.name} ({trait.usage})\r\n                        </div>\r\n                        <ControlRow\r\n                            controls={[\r\n                                <button key='recharge' onClick={() => this.success()}>recharge</button>,\r\n                                <button key='close' onClick={() => this.close()}>close</button>\r\n                            ]}\r\n                        />\r\n                    </div>\r\n                );\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface PendingCombatantRowProps {\r\n    combatant: (Combatant & PC) | (Combatant & Monster);\r\n    selected: boolean;\r\n    select: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    nudgeValue: (combatant: (Combatant & PC) | (Combatant & Monster), field: string, delta: number) => void;\r\n    makeActive: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n}\r\n\r\nclass PendingCombatantRow extends React.Component<PendingCombatantRowProps> {\r\n    private getInformationText() {\r\n        if (this.props.selected) {\r\n            return 'selected';\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private onClick(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (this.props.select) {\r\n            this.props.select(this.props.combatant);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'combatant-row ' + this.props.combatant.type;\r\n        if (this.props.combatant.current || this.props.selected) {\r\n            style += ' highlight';\r\n        }\r\n\r\n        return (\r\n            <div className={style} onClick={e => this.onClick(e)}>\r\n                <div className='name'>\r\n                    {this.props.combatant.displayName || this.props.combatant.name || 'combatant'}\r\n                    <span className='info'>{this.getInformationText()}</span>\r\n                </div>\r\n                <div className='content'>\r\n                    <Spin\r\n                        source={this.props.combatant}\r\n                        name='initiative'\r\n                        label='initiative'\r\n                        nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'initiative', delta)}\r\n                    />\r\n                    <button onClick={e => { e.stopPropagation(); this.props.makeActive(this.props.combatant); }}>add to encounter</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface PCRowProps {\r\n    combatant: Combatant & PC;\r\n    minimal: boolean;\r\n    combat: Combat;\r\n    selected: boolean;\r\n    select: (combatant: Combatant & PC) => void;\r\n}\r\n\r\nclass PCRow extends React.Component<PCRowProps> {\r\n    public static defaultProps = {\r\n        minimal: false\r\n    };\r\n\r\n    private getInformationText() {\r\n        if (this.props.combatant.current) {\r\n            return 'current turn';\r\n        }\r\n\r\n        if (this.props.selected) {\r\n            return 'selected';\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private onClick(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (!this.props.selected && this.props.select) {\r\n            this.props.select(this.props.combatant);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'combatant-row ' + this.props.combatant.type;\r\n        if (this.props.selected) {\r\n            style += ' highlight';\r\n        }\r\n\r\n        let desc = null;\r\n        if (!this.props.minimal) {\r\n            const race = this.props.combatant.race || 'unknown race';\r\n            const cls = this.props.combatant.classes || 'unknown class';\r\n            desc = (\r\n                <div className='section lowercase'>\r\n                    {race + ' ' + cls + ', level ' + this.props.combatant.level}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        let conditions = null;\r\n        if (this.props.combatant.conditions) {\r\n            conditions = this.props.combatant.conditions.map(c => {\r\n                let name = c.name;\r\n                if (c.name === 'exhaustion') {\r\n                    name += ' (' + c.level + ')';\r\n                }\r\n                if ((c.name === 'custom') && (c.text)) {\r\n                    name = c.text;\r\n                }\r\n                if (c.duration) {\r\n                    name += ' ' + Utils.conditionDurationText(c, this.props.combat);\r\n                }\r\n                const description = [];\r\n                const text = Utils.conditionText(c);\r\n                for (let n = 0; n !== text.length; ++n) {\r\n                    description.push(<li key={n} className='condition-text'>{text[n]}</li>);\r\n                }\r\n                return (\r\n                    <Note\r\n                        key={c.id}\r\n                        white={true}\r\n                        content={\r\n                            <div className='condition'>\r\n                                <div className='condition-name'>{name}</div>\r\n                                <ul>\r\n                                    {description}\r\n                                </ul>\r\n                            </div>\r\n                        }\r\n                    />\r\n                );\r\n            });\r\n        }\r\n\r\n        const notes = [];\r\n        if (this.props.combat.map) {\r\n            if (!this.props.combatant.pending && !this.props.combat.map.items.find(i => i.id === this.props.combatant.id)) {\r\n                notes.push(\r\n                    <Note key='not-on-map' white={true} content='not on the map' />\r\n                );\r\n            }\r\n        }\r\n        this.props.combatant.tags.forEach(tag => {\r\n            notes.push(\r\n                <Note key={tag} white={true} content={Utils.getTagDescription(tag)} />\r\n            );\r\n        });\r\n\r\n        let companions = null;\r\n        if (this.props.combatant.companions.length > 0) {\r\n            companions = (\r\n                <div className='section'>\r\n                    <b>companions:</b> {this.props.combatant.companions.map(companion => companion.name).join(', ')}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className={style} onClick={e => this.onClick(e)}>\r\n                <div className='name'>\r\n                    {this.props.combatant.displayName || this.props.combatant.name || 'combatant'}\r\n                    {this.props.combatant.player ? ' | ' + this.props.combatant.player : ''}\r\n                    <span className='info'>{this.getInformationText()}</span>\r\n                </div>\r\n                <div className='content'>\r\n                    {desc}\r\n                    {conditions}\r\n                    {notes}\r\n                    {companions}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface MonsterRowProps {\r\n    combatant: Combatant & Monster;\r\n    minimal: boolean;\r\n    combat: Combat;\r\n    selected: boolean;\r\n    select: (combatant: Combatant & Monster) => void;\r\n}\r\n\r\nclass MonsterRow extends React.Component<MonsterRowProps> {\r\n    public static defaultProps = {\r\n        minimal: false\r\n    };\r\n\r\n    private getInformationText() {\r\n        if (this.props.combatant.current) {\r\n            return 'current turn';\r\n        }\r\n\r\n        if (this.props.selected) {\r\n            return 'selected';\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private onClick(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (!this.props.selected && this.props.select) {\r\n            this.props.select(this.props.combatant);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'combatant-row ' + this.props.combatant.type;\r\n        if (this.props.selected) {\r\n            style += ' highlight';\r\n        }\r\n\r\n        let hp = (this.props.combatant.hp ? this.props.combatant.hp : 0).toString();\r\n        if (this.props.combatant.hpTemp > 0) {\r\n            hp += '+' + this.props.combatant.hpTemp;\r\n        }\r\n\r\n        let gauge = null;\r\n        if (!this.props.combatant.pending) {\r\n            gauge = (\r\n                <HitPointGauge combatant={this.props.combatant} />\r\n            );\r\n        }\r\n\r\n        let conditions = null;\r\n        if (this.props.combatant.conditions) {\r\n            conditions = this.props.combatant.conditions.map(c => {\r\n                let name = c.name;\r\n                if (c.name === 'exhaustion') {\r\n                    name += ' (' + c.level + ')';\r\n                }\r\n                if ((c.name === 'custom') && (c.text)) {\r\n                    name = c.text;\r\n                }\r\n                if (c.duration) {\r\n                    name += ' ' + Utils.conditionDurationText(c, this.props.combat);\r\n                }\r\n                const description = [];\r\n                const text = Utils.conditionText(c);\r\n                for (let n = 0; n !== text.length; ++n) {\r\n                    description.push(<li key={n} className='condition-text'>{text[n]}</li>);\r\n                }\r\n                return (\r\n                    <Note\r\n                        key={c.id}\r\n                        white={true}\r\n                        content={\r\n                            <div className='condition'>\r\n                                <div className='condition-name'>{name}</div>\r\n                                <ul>\r\n                                    {description}\r\n                                </ul>\r\n                            </div>\r\n                        }\r\n                    />\r\n                );\r\n            });\r\n        }\r\n\r\n        const notes = [];\r\n        if (this.props.combat.map) {\r\n            if (!this.props.combatant.pending && !this.props.combat.map.items.find(i => i.id === this.props.combatant.id)) {\r\n                notes.push(\r\n                    <Note key='not-on-map' white={true} content='not on the map' />\r\n                );\r\n            }\r\n        }\r\n        this.props.combatant.tags.forEach(tag => {\r\n            notes.push(\r\n                <Note key={tag} white={true} content={Utils.getTagDescription(tag)} />\r\n            );\r\n        });\r\n\r\n        let dmInfo = null;\r\n        if (!this.props.minimal) {\r\n            dmInfo = (\r\n                <div>\r\n                    <div className='section key-stats'>\r\n                        <div className='key-stat'>\r\n                            <div className='stat-label'>ac</div>\r\n                            <div className='stat-value'>{this.props.combatant.ac}</div>\r\n                        </div>\r\n                        <div className='key-stat'>\r\n                            <div className='stat-value'>{hp}</div>\r\n                            <div className='stat-label'>hp</div>\r\n                        </div>\r\n                    </div>\r\n                    {gauge}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className={style} onClick={e => this.onClick(e)}>\r\n                <div className='name'>\r\n                    {this.props.combatant.displayName || this.props.combatant.name || 'combatant'}\r\n                    <span className='info'>{this.getInformationText()}</span>\r\n                </div>\r\n                <div className='content'>\r\n                    {dmInfo}\r\n                    {conditions}\r\n                    {notes}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Encounter } from '../../models/encounter';\r\n\r\ninterface Props {\r\n    encounter: Encounter;\r\n    selected: boolean;\r\n    setSelection: (encounter: Encounter) => void;\r\n}\r\n\r\nexport default class EncounterListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const slots = [];\r\n\r\n            this.props.encounter.slots.forEach(slot => {\r\n                let text = slot.monsterName || 'unnamed monster';\r\n                if (slot.count > 1) {\r\n                    text += ' x' + slot.count;\r\n                }\r\n                slots.push(<div key={slot.id} className='section'>{text}</div>);\r\n            });\r\n\r\n            if (slots.length === 0) {\r\n                slots.push(<div key='empty' className='section'>no monsters</div>);\r\n            }\r\n\r\n            this.props.encounter.waves.forEach(wave => {\r\n                slots.push(<div key={'name ' + wave.id} className='section subheading'>{wave.name || 'unnamed wave'}</div>);\r\n                wave.slots.forEach(slot => {\r\n                    let text = slot.monsterName || 'unnamed monster';\r\n                    if (slot.count > 1) {\r\n                        text += ' x' + slot.count;\r\n                    }\r\n                    slots.push(<div key={slot.id} className='section'>{text}</div>);\r\n                });\r\n                if (slots.length === 0) {\r\n                    slots.push(<div key={'empty ' + wave.id} className='section'>no monsters</div>);\r\n                }\r\n            });\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.encounter)}>\r\n                    <div className='heading'>{this.props.encounter.name || 'unnamed encounter'}</div>\r\n                    {slots}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Napoleon from '../../utils/napoleon';\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Encounter } from '../../models/encounter';\r\nimport { Monster } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\n\r\ninterface Props {\r\n    encounter: Encounter;\r\n    parties: Party[];\r\n    party: Party | null;\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n}\r\n\r\ninterface State {\r\n    selectedPartyID: string | null;\r\n}\r\n\r\nexport default class DifficultyChartPanel extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        party: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            selectedPartyID: props.party ? props.party.id : null\r\n        };\r\n    }\r\n\r\n    private selectParty(partyID: string | null) {\r\n        this.setState({\r\n            selectedPartyID: partyID\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        const monsterCount = Napoleon.getMonsterCount(this.props.encounter);\r\n        const monsterXP = Napoleon.getEncounterXP(this.props.encounter, this.props.getMonster);\r\n        const adjustedXP = Napoleon.getAdjustedEncounterXP(this.props.encounter, this.props.getMonster);\r\n\r\n        let xpThresholds;\r\n        let diffSection;\r\n        const party = this.props.parties.find(p => p.id === this.state.selectedPartyID);\r\n        if (party) {\r\n            let xpEasy = 0;\r\n            let xpMedium = 0;\r\n            let xpHard = 0;\r\n            let xpDeadly = 0;\r\n\r\n            const pcs = party.pcs.filter(pc => pc.active);\r\n            pcs.forEach(pc => {\r\n                xpEasy += Utils.pcExperience(pc.level, 'easy');\r\n                xpMedium += Utils.pcExperience(pc.level, 'medium');\r\n                xpHard += Utils.pcExperience(pc.level, 'hard');\r\n                xpDeadly += Utils.pcExperience(pc.level, 'deadly');\r\n            });\r\n\r\n            let difficulty = 'trivial';\r\n            let adjustedDifficulty = 'trivial';\r\n            if (adjustedXP > 0) {\r\n                if (adjustedXP >= xpEasy) {\r\n                    difficulty = 'easy';\r\n                    adjustedDifficulty = 'easy';\r\n                }\r\n                if (adjustedXP >= xpMedium) {\r\n                    difficulty = 'medium';\r\n                    adjustedDifficulty = 'medium';\r\n                }\r\n                if (adjustedXP >= xpHard) {\r\n                    difficulty = 'hard';\r\n                    adjustedDifficulty = 'hard';\r\n                }\r\n                if (adjustedXP >= xpDeadly) {\r\n                    difficulty = 'deadly';\r\n                    adjustedDifficulty = 'deadly';\r\n                }\r\n\r\n                if ((pcs.length < 3) || (pcs.length > 5)) {\r\n                    const small = pcs.length < 3;\r\n                    switch (difficulty) {\r\n                        case 'trivial':\r\n                            adjustedDifficulty = small ? 'easy' : 'trivial';\r\n                            break;\r\n                        case 'easy':\r\n                            adjustedDifficulty = small ? 'medium' : 'trivial';\r\n                            break;\r\n                        case 'medium':\r\n                            adjustedDifficulty = small ? 'hard' : 'easy';\r\n                            break;\r\n                        case 'hard':\r\n                            adjustedDifficulty = small ? 'deadly' : 'medium';\r\n                            break;\r\n                        case 'deadly':\r\n                            adjustedDifficulty = small ? 'deadly' : 'hard';\r\n                            break;\r\n                        default:\r\n                            adjustedDifficulty = '';\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            xpThresholds = (\r\n                <div className='table'>\r\n                    <div>\r\n                        <div className='cell four easy'><b>easy</b></div>\r\n                        <div className='cell four medium'><b>medium</b></div>\r\n                        <div className='cell four hard'><b>hard</b></div>\r\n                        <div className='cell four deadly'><b>deadly</b></div>\r\n                    </div>\r\n                    <div>\r\n                        <div className='cell four'>{xpEasy} xp</div>\r\n                        <div className='cell four'>{xpMedium} xp</div>\r\n                        <div className='cell four'>{xpHard} xp</div>\r\n                        <div className='cell four'>{xpDeadly} xp</div>\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            const getLeft = (xp: number) => {\r\n                const max = Math.max(adjustedXP, (xpDeadly * 1.2));\r\n                return (100 * xp) / max;\r\n            };\r\n\r\n            const getRight = (xp: number) => {\r\n                return 100 - getLeft(xp);\r\n            };\r\n\r\n            diffSection = (\r\n                <div>\r\n                    <div className='difficulty-gauge'>\r\n                        <div className='bar-container'>\r\n                            <div className='bar trivial' style={{ left: '0', right: getRight(xpEasy) + '%' }} />\r\n                        </div>\r\n                        <div className='bar-container'>\r\n                            <div className='bar easy' style={{ left: getLeft(xpEasy) + '%', right: getRight(xpMedium) + '%' }} />\r\n                        </div>\r\n                        <div className='bar-container'>\r\n                            <div className='bar medium' style={{ left: getLeft(xpMedium) + '%', right: getRight(xpHard) + '%' }} />\r\n                        </div>\r\n                        <div className='bar-container'>\r\n                            <div className='bar hard' style={{ left: getLeft(xpHard) + '%', right: getRight(xpDeadly) + '%' }} />\r\n                        </div>\r\n                        <div className='bar-container'>\r\n                            <div className='bar deadly' style={{ left: getLeft(xpDeadly) + '%', right: '0' }} />\r\n                        </div>\r\n                        <div className='encounter-container'>\r\n                            <div className='encounter' style={{ left: (getLeft(adjustedXP) - 0.5) + '%' }} />\r\n                        </div>\r\n                    </div>\r\n                    <div className='section'>\r\n                        difficulty for this party\r\n                        <div className='right'>{difficulty}</div>\r\n                    </div>\r\n                    <div className='section' style={{ display: (adjustedDifficulty === difficulty) ? 'none' : ''}}>\r\n                        effective difficulty for {pcs.length} pc(s)\r\n                        <div className='right'><b>{adjustedDifficulty}</b></div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        let partySelection = null;\r\n        if (!this.props.party) {\r\n            const partyOptions = [];\r\n            if (this.props.parties) {\r\n                for (let n = 0; n !== this.props.parties.length; ++n) {\r\n                    const p = this.props.parties[n];\r\n                    partyOptions.push({\r\n                        id: p.id,\r\n                        text: p.name\r\n                    });\r\n                }\r\n            }\r\n\r\n            partySelection = (\r\n                <Dropdown\r\n                    options={partyOptions}\r\n                    placeholder='select party...'\r\n                    selectedID={this.state.selectedPartyID ? this.state.selectedPartyID : undefined}\r\n                    select={optionID => this.selectParty(optionID)}\r\n                    clear={() => this.selectParty(null)}\r\n                />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className='list-item non-clickable'>\r\n                <div className='subheading'>xp value</div>\r\n                <div className='section'>\r\n                    xp for this encounter\r\n                    <div className='right'>{monsterXP} xp</div>\r\n                </div>\r\n                <div className='section' style={{ display: (adjustedXP === monsterXP) ? 'none' : ''}}>\r\n                    effective xp for {monsterCount} monster(s)\r\n                    <div className='right'>{adjustedXP} xp</div>\r\n                </div>\r\n                <div className='subheading'>difficulty</div>\r\n                {partySelection}\r\n                {xpThresholds}\r\n                {diffSection}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Napoleon from '../../utils/napoleon';\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { MonsterFilter } from '../../models/encounter';\r\nimport { CATEGORY_TYPES, SIZE_TYPES } from '../../models/monster-group';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport Expander from '../controls/expander';\r\nimport Spin from '../controls/spin';\r\n\r\ninterface Props {\r\n    filter: MonsterFilter;\r\n    changeValue: (type: 'name' | 'challengeMin' | 'challengeMax' | 'category' | 'size', value: any) => void;\r\n    nudgeValue: (type: 'challengeMin' | 'challengeMax', delta: number) => void;\r\n    resetFilter: () => void;\r\n}\r\n\r\nexport default class FilterPanel extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const sizes = ['all sizes'].concat(SIZE_TYPES);\r\n            const sizeOptions = sizes.map(size => ({ id: size, text: size }));\r\n\r\n            const categories = ['all types'].concat(CATEGORY_TYPES);\r\n            const catOptions = categories.map(cat => ({ id: cat, text: cat }));\r\n\r\n            const content = (\r\n                <div>\r\n                    <input\r\n                        type='text'\r\n                        placeholder='name'\r\n                        value={this.props.filter.name}\r\n                        onChange={event => this.props.changeValue('name', event.target.value)}\r\n                    />\r\n                    <Spin\r\n                        source={this.props.filter}\r\n                        name='challengeMin'\r\n                        label='min cr'\r\n                        display={value => Utils.challenge(value)}\r\n                        nudgeValue={delta => this.props.nudgeValue('challengeMin', delta)}\r\n                    />\r\n                    <Spin\r\n                        source={this.props.filter}\r\n                        name='challengeMax'\r\n                        label='max cr'\r\n                        display={value => Utils.challenge(value)}\r\n                        nudgeValue={delta => this.props.nudgeValue('challengeMax', delta)}\r\n                    />\r\n                    <Dropdown\r\n                        options={sizeOptions}\r\n                        placeholder='filter by size...'\r\n                        selectedID={this.props.filter.size}\r\n                        select={optionID => this.props.changeValue('size', optionID)}\r\n                    />\r\n                    <Dropdown\r\n                        options={catOptions}\r\n                        placeholder='filter by type...'\r\n                        selectedID={this.props.filter.category}\r\n                        select={optionID => this.props.changeValue('category', optionID)}\r\n                    />\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <button onClick={() => this.props.resetFilter()}>clear filter</button>\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            const summary = 'showing ' + Napoleon.getFilterDescription(this.props.filter);\r\n\r\n            return (\r\n                <Expander\r\n                    text={summary}\r\n                    content={content}\r\n                />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Factory from '../../utils/factory';\r\nimport Napoleon from '../../utils/napoleon';\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Encounter, EncounterSlot, EncounterWave, MonsterFilter } from '../../models/encounter';\r\nimport { Monster, MonsterGroup } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\nimport MonsterCard from '../cards/monster-card';\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport Expander from '../controls/expander';\r\nimport Selector from '../controls/selector';\r\nimport Spin from '../controls/spin';\r\nimport EncounterListItem from '../list-items/encounter-list-item';\r\nimport CardGroup from '../panels/card-group';\r\nimport DifficultyChartPanel from '../panels/difficulty-chart-panel';\r\nimport FilterPanel from '../panels/filter-panel';\r\nimport Note from '../panels/note';\r\n\r\ninterface Props {\r\n    encounters: Encounter[];\r\n    selection: Encounter | null;\r\n    parties: Party[];\r\n    library: MonsterGroup[];\r\n    filter: string;\r\n    selectEncounter: (encounter: Encounter | null) => void;\r\n    addEncounter: () => void;\r\n    clearEncounter: () => void;\r\n    removeEncounter: () => void;\r\n    buildEncounter: (xp: number, filter: MonsterFilter) => void;\r\n    addEncounterSlot: (monster: Monster, waveID: string | null) => void;\r\n    removeEncounterSlot: (encounterSlot: EncounterSlot, waveID: string | null) => void;\r\n    addWave: () => void;\r\n    removeWave: (wave: EncounterWave) => void;\r\n    changeValue: (source: any, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, value: number) => void;\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n}\r\n\r\ninterface State {\r\n    filter: MonsterFilter;\r\n}\r\n\r\nexport default class EncounterBuilderScreen extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            filter: Factory.createMonsterFilter()\r\n        };\r\n    }\r\n\r\n    private matchMonster(monster: Monster) {\r\n        return Napoleon.matchMonster(monster, this.state.filter);\r\n    }\r\n\r\n    private changeFilterValue(type: 'name' | 'challengeMin' | 'challengeMax' | 'category' | 'size', value: any) {\r\n        // eslint-disable-next-line\r\n        this.state.filter[type] = value as never;\r\n        this.setState({\r\n            filter: this.state.filter\r\n        });\r\n    }\r\n\r\n    private nudgeFilterValue(type: 'challengeMin' | 'challengeMax', delta: number) {\r\n        const value = Utils.nudgeChallenge(this.state.filter[type], delta);\r\n        this.changeFilterValue(type, value);\r\n    }\r\n\r\n    private resetFilter() {\r\n        this.setState({\r\n            filter: Factory.createMonsterFilter()\r\n        });\r\n    }\r\n\r\n    private getMonsterCards(slots: EncounterSlot[], waveID: string | null) {\r\n        const cards = [];\r\n\r\n        slots.forEach(slot => {\r\n            const monster = this.props.getMonster(slot.monsterName, slot.monsterGroupName);\r\n            if (monster) {\r\n                cards.push(\r\n                    <div className='column' key={monster.id}>\r\n                        <MonsterCard\r\n                            combatant={monster}\r\n                            slot={slot}\r\n                            encounter={this.props.selection as Encounter}\r\n                            mode={'view encounter'}\r\n                            nudgeValue={(source, type, delta) => this.props.nudgeValue(source, type, delta)}\r\n                            removeEncounterSlot={source => this.props.removeEncounterSlot(source, waveID)}\r\n                        />\r\n                    </div>\r\n                );\r\n            } else {\r\n                const index = slots.indexOf(slot);\r\n                const error = 'unknown monster: ' + slot.monsterName + ' in group ' + slot.monsterGroupName;\r\n                cards.push(\r\n                    <div className='column' key={index}>\r\n                        <div className='card error'>\r\n                            <div className='card-content'>\r\n                                <div className='section'>\r\n                                    {error}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n        });\r\n\r\n        if (slots.length === 0) {\r\n            if (waveID) {\r\n                cards.push(\r\n                    <div className='column' key='empty'>\r\n                        <Note\r\n                            content={\r\n                                <div>\r\n                                    <p>there are no monsters in this wave</p>\r\n                                </div>\r\n                            }\r\n                        />\r\n                    </div>\r\n                );\r\n            } else {\r\n                cards.push(\r\n                    <div className='column' key='empty'>\r\n                        <Note\r\n                            content={\r\n                                <div>\r\n                                    <p>there are no monsters in this encounter</p>\r\n                                    <p>you can add monsters from the list below, or try 'build a random encounter'</p>\r\n                                </div>\r\n                            }\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return cards;\r\n    }\r\n\r\n    private getLibrarySection() {\r\n        if (!this.props.selection) {\r\n            return null;\r\n        }\r\n\r\n        const monsters: Monster[] = [];\r\n        if (this.props.selection) {\r\n            this.props.library.forEach(group => {\r\n                group.monsters.forEach(monster => {\r\n                    if (this.matchMonster(monster)) {\r\n                        monsters.push(monster);\r\n                    }\r\n                });\r\n            });\r\n            monsters.sort((a, b) => {\r\n                if (a.name < b.name) { return -1; }\r\n                if (a.name > b.name) { return 1; }\r\n                return 0;\r\n            });\r\n        }\r\n\r\n        const libraryCards = monsters.map(monster => {\r\n            return (\r\n                <div className='column' key={monster.id}>\r\n                    <MonsterCard\r\n                        key={monster.id}\r\n                        combatant={monster}\r\n                        encounter={this.props.selection as Encounter}\r\n                        library={this.props.library}\r\n                        mode={'view encounter'}\r\n                        addEncounterSlot={(combatant, waveID) => this.props.addEncounterSlot(combatant, waveID)}\r\n                    />\r\n                </div>\r\n            );\r\n        });\r\n\r\n        if (libraryCards.length === 0) {\r\n            libraryCards.push(\r\n                <div className='column' key='empty'>\r\n                    <Note\r\n                        content={\r\n                            <div>\r\n                                <p>there are no monsters that meet the criteria <i>{Napoleon.getFilterDescription(this.state.filter)}</i></p>\r\n                            </div>\r\n                        }\r\n                    />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <CardGroup\r\n                heading='monster library'\r\n                content={libraryCards}\r\n                showToggle={true}\r\n            />\r\n        );\r\n    }\r\n\r\n    private showEncounter(enc: Encounter) {\r\n        return Utils.match(this.props.filter, enc.name);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let leftColumn = null;\r\n            if (this.props.selection) {\r\n                leftColumn = (\r\n                    <div>\r\n                        <EncounterInfo\r\n                            selection={this.props.selection}\r\n                            parties={this.props.parties}\r\n                            filter={this.props.filter}\r\n                            monsterFilter={this.state.filter}\r\n                            changeValue={(source, type, value) => this.props.changeValue(source, type, value)}\r\n                            addWave={() => this.props.addWave()}\r\n                            removeWave={wave => this.props.removeWave(wave)}\r\n                            clearEncounter={() => this.props.clearEncounter()}\r\n                            removeEncounter={() => this.props.removeEncounter()}\r\n                            buildEncounter={xp => this.props.buildEncounter(xp, this.state.filter)}\r\n                            getMonster={(monsterName, monsterGroupName) => this.props.getMonster(monsterName, monsterGroupName)}\r\n                            changeFilterValue={(type, value) => this.changeFilterValue(type, value)}\r\n                            nudgeFilterValue={(type, delta) => this.nudgeFilterValue(type, delta)}\r\n                            resetFilter={() => this.resetFilter()}\r\n                        />\r\n                        <div className='divider' />\r\n                        <button onClick={() => this.props.selectEncounter(null)}>&larr; back to list</button>\r\n                    </div>\r\n                );\r\n            } else {\r\n                let listItems = this.props.encounters.filter(e => this.showEncounter(e)).map(e => {\r\n                    return (\r\n                        <EncounterListItem\r\n                            key={e.id}\r\n                            encounter={e}\r\n                            selected={e === this.props.selection}\r\n                            setSelection={encounter => this.props.selectEncounter(encounter)}\r\n                        />\r\n                    );\r\n                });\r\n                if (listItems.length === 0) {\r\n                    listItems = [(\r\n                        <Note\r\n                            key='empty'\r\n                            content={'you have not defined any encounters yet'}\r\n                        />\r\n                    )];\r\n                }\r\n\r\n                leftColumn = (\r\n                    <div>\r\n                        <button onClick={() => this.props.addEncounter()}>add a new encounter</button>\r\n                        <div className='divider' />\r\n                        {listItems}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            let encounterName;\r\n            const encounterCards: JSX.Element[] = [];\r\n            let waves: JSX.Element[] = [];\r\n\r\n            if (this.props.selection) {\r\n                encounterName = this.props.selection.name || 'unnamed encounter';\r\n\r\n                this.getMonsterCards(this.props.selection.slots, null)\r\n                    .forEach(card => encounterCards.push(card));\r\n\r\n                waves = this.props.selection.waves.map(w => {\r\n                    return (\r\n                        <CardGroup\r\n                            key={w.id}\r\n                            heading={w.name || 'unnamed wave'}\r\n                            content={this.getMonsterCards(w.slots, w.id)}\r\n                            showToggle={true}\r\n                        />\r\n                    );\r\n                });\r\n            }\r\n\r\n            let watermark;\r\n            if (!this.props.selection) {\r\n                watermark = (\r\n                    <div className='vertical-center-outer'>\r\n                        <div className='vertical-center-middle'>\r\n                            <div className='vertical-center-inner'>\r\n                                <HelpCard encounters={this.props.encounters} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='encounter-builder row collapse'>\r\n                    <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                        {leftColumn}\r\n                    </div>\r\n                    <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                        <CardGroup\r\n                            content={encounterCards}\r\n                            heading={encounterName}\r\n                            hidden={!this.props.selection}\r\n                        />\r\n                        {waves}\r\n                        {this.getLibrarySection()}\r\n                        {watermark}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface HelpCardProps {\r\n    encounters: Encounter[];\r\n}\r\n\r\nclass HelpCard extends React.Component<HelpCardProps> {\r\n    public render() {\r\n        try {\r\n            let action: JSX.Element | null = null;\r\n            if (this.props.encounters.length === 0) {\r\n                action = (\r\n                    <div className='section'>to start building an encounter, press the <b>add a new encounter</b> button</div>\r\n                );\r\n            } else {\r\n                action = (\r\n                    <div>\r\n                        <div className='section'>on the left you will see a list of encounters that you have created</div>\r\n                        <div className='section'>select an encounter from the list to add monsters to it</div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <Note\r\n                    content={\r\n                        <div>\r\n                            <div className='section'>on this page you can set up encounters</div>\r\n                            <div className='section'>\r\n                                when you have created an encounter you can add monsters to it, then gauge its difficulty for a party of pcs\r\n                            </div>\r\n                            <div className='section'>when you have set up a party and an encounter you can run the encounter in the combat manager</div>\r\n                            <div className='divider'/>\r\n                            {action}\r\n                        </div>\r\n                    }\r\n                />\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n\r\ninterface EncounterInfoProps {\r\n    selection: Encounter;\r\n    parties: Party[];\r\n    filter: string;\r\n    monsterFilter: MonsterFilter;\r\n    changeValue: (source: any, field: string, value: any) => void;\r\n    addWave: () => void;\r\n    removeWave: (wave: EncounterWave) => void;\r\n    clearEncounter: () => void;\r\n    removeEncounter: () => void;\r\n    buildEncounter: (xp: number) => void;\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n    changeFilterValue: (type: 'name' | 'challengeMin' | 'challengeMax' | 'category' | 'size', value: any) => void;\r\n    nudgeFilterValue: (type: 'challengeMin' | 'challengeMax', delta: number) => void;\r\n    resetFilter: () => void;\r\n}\r\n\r\ninterface EncounterInfoState {\r\n    randomEncounterXP: number;\r\n    randomEncounterStep: number;\r\n}\r\n\r\nclass EncounterInfo extends React.Component<EncounterInfoProps, EncounterInfoState> {\r\n    constructor(props: EncounterInfoProps) {\r\n        super(props);\r\n        this.state = {\r\n            randomEncounterXP: 100,\r\n            randomEncounterStep: 100\r\n        };\r\n    }\r\n\r\n    private setRandomEncounterXP(value: number) {\r\n        this.setState({\r\n            randomEncounterXP: Math.max(0, value)\r\n        });\r\n    }\r\n\r\n    private setRandomEncounterStep(value: number) {\r\n        this.setState({\r\n            randomEncounterStep: value\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const waves = this.props.selection.waves.map(wave => (\r\n                <div key={wave.id} className='list-item non-clickable'>\r\n                    <input\r\n                        type='text'\r\n                        placeholder='wave name'\r\n                        value={wave.name}\r\n                        onChange={event => this.props.changeValue(wave, 'name', event.target.value)}\r\n                    />\r\n                    <ConfirmButton text='delete wave' callback={() => this.props.removeWave(wave)} />\r\n                </div>\r\n            ));\r\n\r\n            return (\r\n                <div>\r\n                    <div className='section'>\r\n                        <div className='subheading'>encounter name</div>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='encounter name'\r\n                            value={this.props.selection.name}\r\n                            disabled={!!this.props.filter}\r\n                            onChange={event => this.props.changeValue(this.props.selection, 'name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div className='section'>\r\n                        <div className='subheading'>waves</div>\r\n                        {waves}\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.addWave()}>add a new wave</button>\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <DifficultyChartPanel\r\n                        encounter={this.props.selection}\r\n                        parties={this.props.parties}\r\n                        getMonster={(monsterName, monsterGroupName) => this.props.getMonster(monsterName, monsterGroupName)}\r\n                    />\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <FilterPanel\r\n                            filter={this.props.monsterFilter}\r\n                            changeValue={(type, value) => this.props.changeFilterValue(type, value)}\r\n                            nudgeValue={(type, delta) => this.props.nudgeFilterValue(type, delta)}\r\n                            resetFilter={() => this.props.resetFilter()}\r\n                        />\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <Expander\r\n                            text='build a random encounter'\r\n                            content={(\r\n                                <div>\r\n                                    <p>add random monsters to this encounter until its adjusted xp value is at least the following value</p>\r\n                                    <Spin\r\n                                        source={this.state}\r\n                                        name='randomEncounterXP'\r\n                                        label='xp'\r\n                                        nudgeValue={delta => this.setRandomEncounterXP(this.state.randomEncounterXP + (delta * this.state.randomEncounterStep))}\r\n                                    />\r\n                                    <Selector\r\n                                        options={['10', '100', '1000'].map(t => {\r\n                                            return { id: t, text: t };\r\n                                        })}\r\n                                        selectedID={this.state.randomEncounterStep.toString()}\r\n                                        select={optionID => this.setRandomEncounterStep(Number.parseInt(optionID, 10))}\r\n                                    />\r\n                                    <button onClick={() => this.props.buildEncounter(this.state.randomEncounterXP)}>build encounter</button>\r\n                                </div>\r\n                            )}\r\n                        />\r\n                        <ConfirmButton text='clear encounter' callback={() => this.props.clearEncounter()} />\r\n                        <ConfirmButton text='delete encounter' callback={() => this.props.removeEncounter()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    content: string | JSX.Element | JSX.Element[];\r\n}\r\n\r\nexport default class Readaloud extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div className='readaloud'>\r\n                    {this.props.content}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { MonsterGroup } from '../../models/monster-group';\r\n\r\nimport Readaloud from '../panels/readaloud';\r\n\r\ninterface Props {\r\n    library: MonsterGroup[];\r\n    addOpenGameContent: () => void;\r\n}\r\n\r\nexport default class HomeScreen extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            let monsters = null;\r\n            if (this.props.library.length === 0) {\r\n                monsters = (\r\n                    <div>\r\n                        <div className='divider' />\r\n                        <div className='section'>\r\n                            since your collection of monsters is empty, you might want to start by pressing the button below to add monsters from the&nbsp;\r\n                            <a href='http://dnd.wizards.com/articles/features/systems-reference-document-srd' target='_blank' rel='noopener noreferrer'>\r\n                                system reference document\r\n                            </a>\r\n                        </div>\r\n                        <div className='section'>\r\n                            <button onClick={() => this.props.addOpenGameContent()}>add monsters</button>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            const content = (\r\n                <Readaloud\r\n                    content={(\r\n                        <div>\r\n                            <div className='heading'>welcome to <b>dojo</b></div>\r\n                            <div className='divider' />\r\n                            <div className='section'>\r\n                                <b>dojo</b> is an app for dms of dungeons and dragons fifth edition\r\n                            </div>\r\n                            <div className='section'>\r\n                                with <b>dojo</b> you can:\r\n                                <ul>\r\n                                    <li>build unique, challenging monsters</li>\r\n                                    <li>create encounters of just the right difficulty for your players</li>\r\n                                    <li>design intricate tactical maps</li>\r\n                                    <li>run combat without the book-keeping</li>\r\n                                </ul>\r\n                            </div>\r\n                            {monsters}\r\n                            <div className='divider' />\r\n                            <div className='section'>\r\n                                use the buttons at the bottom of the screen to explore the app's main features,\r\n                                or press the tools button at the top right for additional dm tools\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                />\r\n            );\r\n\r\n            return (\r\n                <div className='home scrollable'>\r\n                    <div className='vertical-center-outer'>\r\n                        <div className='vertical-center-middle'>\r\n                            <div className='vertical-center-inner'>\r\n                                {content}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Map } from '../../models/map-folio';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    map: Map;\r\n    changeValue: (map: Map, field: string, value: string) => void;\r\n    editMap: (map: Map) => void;\r\n    removeMap: (map: Map) => void;\r\n}\r\n\r\nexport default class MapCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div className='card map'>\r\n                    <div className='heading'>\r\n                        <div className='title'>{this.props.map.name || 'unnamed map'}</div>\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        <div className='section'>\r\n                            <MapPanel\r\n                                map={this.props.map}\r\n                                mode='thumbnail'\r\n                            />\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <button onClick={() => this.props.editMap(this.props.map)}>edit map</button>\r\n                        <ConfirmButton text='delete map' callback={() => this.props.removeMap(this.props.map)} />\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { MapFolio } from '../../models/map-folio';\r\n\r\ninterface Props {\r\n    mapFolio: MapFolio;\r\n    selected: boolean;\r\n    filter: string;\r\n    setSelection: (mapFolio: MapFolio) => void;\r\n}\r\n\r\nexport default class MapFolioListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const matchFolio = Utils.match(this.props.filter, this.props.mapFolio.name);\r\n\r\n            const maps = [];\r\n            for (let n = 0; n !== this.props.mapFolio.maps.length; ++n) {\r\n                const map = this.props.mapFolio.maps[n];\r\n                const name = map.name || 'unnamed map';\r\n                if (matchFolio || Utils.match(this.props.filter, name)) {\r\n                    maps.push(<div key={map.id} className='section'>{name}</div>);\r\n                }\r\n            }\r\n            if (maps.length === 0) {\r\n                maps.push(<div key='empty' className='section'>no maps</div>);\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.mapFolio)}>\r\n                    <div className='heading'>{this.props.mapFolio.name || 'unnamed folio'}</div>\r\n                    {maps}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Map, MapFolio } from '../../models/map-folio';\r\n\r\nimport MapCard from '../cards/map-card';\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport MapFolioListItem from '../list-items/map-folio-list-item';\r\nimport CardGroup from '../panels/card-group';\r\nimport Note from '../panels/note';\r\n\r\ninterface Props {\r\n    mapFolios: MapFolio[];\r\n    selection: MapFolio | null;\r\n    filter: string;\r\n    selectMapFolio: (mapFolio: MapFolio | null) => void;\r\n    addMapFolio: () => void;\r\n    removeMapFolio: () => void;\r\n    addMap: () => void;\r\n    editMap: (map: Map) => void;\r\n    removeMap: (map: Map) => void;\r\n    changeValue: (source: {}, field: string, value: any) => void;\r\n}\r\n\r\nexport default class MapFoliosScreen extends React.Component<Props> {\r\n    private showMapFolio(folio: MapFolio) {\r\n        let result = Utils.match(this.props.filter, folio.name);\r\n\r\n        if (!result) {\r\n            folio.maps.forEach(map => {\r\n                result = Utils.match(this.props.filter, map.name) || result;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let leftColumn = null;\r\n            if (this.props.selection) {\r\n                leftColumn = (\r\n                    <div>\r\n                        <MapFolioInfo\r\n                            selection={this.props.selection}\r\n                            filter={this.props.filter}\r\n                            addMap={() => this.props.addMap()}\r\n                            removeMapFolio={() => this.props.removeMapFolio()}\r\n                            changeValue={(source, field, value) => this.props.changeValue(source, field, value)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <button onClick={() => this.props.selectMapFolio(null)}>&larr; back to list</button>\r\n                    </div>\r\n                );\r\n            } else {\r\n                let listItems = this.props.mapFolios.filter(f => this.showMapFolio(f)).map(mapFolio => {\r\n                    return (\r\n                        <MapFolioListItem\r\n                            key={mapFolio.id}\r\n                            mapFolio={mapFolio}\r\n                            filter={this.props.filter}\r\n                            selected={mapFolio === this.props.selection}\r\n                            setSelection={f => this.props.selectMapFolio(f)}\r\n                        />\r\n                    );\r\n                });\r\n                if (listItems.length === 0) {\r\n                    listItems = [(\r\n                        <Note\r\n                            key='empty'\r\n                            content={'you have not set up any tactical maps yet'}\r\n                        />\r\n                    )];\r\n                }\r\n\r\n                leftColumn = (\r\n                    <div>\r\n                        <button onClick={() => this.props.addMapFolio()}>add a new map folio</button>\r\n                        <div className='divider' />\r\n                        {listItems}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            let folio = null;\r\n            if (this.props.selection) {\r\n                const folioCards = [];\r\n\r\n                this.props.selection.maps.filter(m => Utils.match(this.props.filter, m.name)).forEach(m => {\r\n                    folioCards.push(\r\n                        <div className='column' key={m.id}>\r\n                            <MapCard\r\n                                map={m}\r\n                                editMap={map => this.props.editMap(map)}\r\n                                removeMap={map => this.props.removeMap(map)}\r\n                                changeValue={(source, type, value) => this.props.changeValue(source, type, value)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                if (folioCards.length === 0) {\r\n                    folioCards.push(\r\n                        <div className='column' key='empty'>\r\n                            <Note content={<div className='section'>there are no maps in this folio</div>} />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                folio = (\r\n                    <CardGroup\r\n                        content={folioCards}\r\n                        heading={this.props.selection.name || 'unnamed folio'}\r\n                    />\r\n                );\r\n            }\r\n\r\n            let watermark;\r\n            if (!this.props.selection) {\r\n                watermark = (\r\n                    <div className='vertical-center-outer'>\r\n                        <div className='vertical-center-middle'>\r\n                            <div className='vertical-center-inner'>\r\n                                <HelpCard mapFolios={this.props.mapFolios} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='map-builder row collapse'>\r\n                    <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                        {leftColumn}\r\n                    </div>\r\n                    <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                        {folio}\r\n                        {watermark}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface HelpCardProps {\r\n    mapFolios: MapFolio[];\r\n}\r\n\r\nclass HelpCard extends React.Component<HelpCardProps> {\r\n    public render() {\r\n        try {\r\n            let action: JSX.Element | null = null;\r\n            if (this.props.mapFolios.length === 0) {\r\n                action = (\r\n                    <div className='section'>to start a new folio, press the <b>add a new map folio</b> button</div>\r\n                );\r\n            } else {\r\n                action = (\r\n                    <div>\r\n                        <div className='section'>on the left you will see a list of map folios</div>\r\n                        <div className='section'>select a folio from the list to see the maps it contains</div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <Note\r\n                    content={\r\n                        <div>\r\n                            <div className='section'>on this page you can set up folios containing tactical maps</div>\r\n                            <div className='section'>when you have created a map you can use it in the combat manager</div>\r\n                            <div className='divider'/>\r\n                            {action}\r\n                        </div>\r\n                    }\r\n                />\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n\r\ninterface MapFolioInfoProps {\r\n    selection: MapFolio;\r\n    filter: string | null;\r\n    changeValue: (source: MapFolio, field: string, value: string) => void;\r\n    addMap: () => void;\r\n    removeMapFolio: () => void;\r\n}\r\n\r\nclass MapFolioInfo extends React.Component<MapFolioInfoProps> {\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div>\r\n                    <div className='section'>\r\n                        <div className='subheading'>map folio name</div>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='map folio name'\r\n                            value={this.props.selection.name}\r\n                            disabled={!!this.props.filter}\r\n                            onChange={event => this.props.changeValue(this.props.selection, 'name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.addMap()}>add a new map</button>\r\n                        <ConfirmButton text='delete folio' callback={() => this.props.removeMapFolio()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { MonsterGroup } from '../../models/monster-group';\r\n\r\ninterface Props {\r\n    group: MonsterGroup;\r\n    selected: boolean;\r\n    filter: string;\r\n    setSelection: (group: MonsterGroup) => void;\r\n}\r\n\r\nexport default class MonsterGroupListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const matchGroup = Utils.match(this.props.filter, this.props.group.name);\r\n\r\n            const monsters = [];\r\n            for (let n = 0; n !== this.props.group.monsters.length; ++n) {\r\n                const monster = this.props.group.monsters[n];\r\n                const name = monster.name || 'unnamed monster';\r\n                if (matchGroup || Utils.match(this.props.filter, name)) {\r\n                    monsters.push(<div key={monster.id} className='section'>{name}</div>);\r\n                }\r\n            }\r\n            if (monsters.length === 0) {\r\n                monsters.push(<div key='empty' className='section'>no monsters</div>);\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.group)}>\r\n                    <div className='heading'>{this.props.group.name || 'unnamed group'}</div>\r\n                    {monsters}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Monster, MonsterGroup } from '../../models/monster-group';\r\n\r\nimport MonsterCard from '../cards/monster-card';\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport MonsterGroupListItem from '../list-items/monster-group-list-item';\r\nimport CardGroup from '../panels/card-group';\r\nimport Note from '../panels/note';\r\n\r\ninterface Props {\r\n    library: MonsterGroup[];\r\n    selection: MonsterGroup | null;\r\n    filter: string;\r\n    selectMonsterGroup: (group: MonsterGroup | null) => void;\r\n    addMonsterGroup: () => void;\r\n    removeMonsterGroup: () => void;\r\n    addMonster: () => void;\r\n    removeMonster: (monster: Monster) => void;\r\n    editMonster: (monster: Monster) => void;\r\n    cloneMonster: (monster: Monster, name: string) => void;\r\n    sortMonsters: () => void;\r\n    moveToGroup: (monster: Monster, groupID: string) => void;\r\n    changeValue: (source: any, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, value: number) => void;\r\n}\r\n\r\nexport default class MonsterLibraryScreen extends React.Component<Props> {\r\n    private showMonsterGroup(group: MonsterGroup) {\r\n        let result = Utils.match(this.props.filter, group.name);\r\n\r\n        if (!result) {\r\n            group.monsters.forEach(monster => {\r\n                result = Utils.match(this.props.filter, monster.name) || result;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let leftColumn = null;\r\n            if (this.props.selection) {\r\n                leftColumn = (\r\n                    <div>\r\n                        <MonsterInfo\r\n                            selection={this.props.selection}\r\n                            filter={this.props.filter}\r\n                            addMonster={() => this.props.addMonster()}\r\n                            sortMonsters={() => this.props.sortMonsters()}\r\n                            changeValue={(type, value) => this.props.changeValue(this.props.selection, type, value)}\r\n                            removeMonsterGroup={() => this.props.removeMonsterGroup()}\r\n                        />\r\n                        <div className='divider' />\r\n                        <button onClick={() => this.props.selectMonsterGroup(null)}>&larr; back to list</button>\r\n                    </div>\r\n                );\r\n            } else {\r\n                let listItems = this.props.library.filter(group => this.showMonsterGroup(group)).map(group => {\r\n                    return (\r\n                        <MonsterGroupListItem\r\n                            key={group.id}\r\n                            group={group}\r\n                            filter={this.props.filter}\r\n                            selected={group === this.props.selection}\r\n                            setSelection={grp => this.props.selectMonsterGroup(grp)}\r\n                        />\r\n                    );\r\n                });\r\n                if (listItems.length === 0) {\r\n                    listItems = [(\r\n                        <Note\r\n                            key='empty'\r\n                            content={'you do not have any monsters in your library'}\r\n                        />\r\n                    )];\r\n                }\r\n\r\n                leftColumn = (\r\n                    <div>\r\n                        <button onClick={() => this.props.addMonsterGroup()}>add a new monster group</button>\r\n                        <div className='divider' />\r\n                        {listItems}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            const cards: JSX.Element[] = [];\r\n\r\n            if (this.props.selection) {\r\n                const monsters = this.props.selection.monsters.filter(monster => {\r\n                    return Utils.match(this.props.filter, monster.name);\r\n                });\r\n\r\n                if (monsters.length !== 0) {\r\n                    monsters.forEach(m => {\r\n                        cards.push(\r\n                            <div className='column' key={m.id}>\r\n                                <MonsterCard\r\n                                    combatant={m}\r\n                                    mode={'view editable'}\r\n                                    library={this.props.library}\r\n                                    changeValue={(source, type, value) => this.props.changeValue(source, type, value)}\r\n                                    nudgeValue={(source, type, delta) => this.props.nudgeValue(source, type, delta)}\r\n                                    moveToGroup={(monster, groupID) => this.props.moveToGroup(monster, groupID)}\r\n                                    removeMonster={monster => this.props.removeMonster(monster)}\r\n                                    editMonster={monster => this.props.editMonster(monster)}\r\n                                    cloneMonster={(monster, monsterName) => this.props.cloneMonster(monster, monsterName)}\r\n                                />\r\n                            </div>\r\n                        );\r\n                    });\r\n                } else {\r\n                    cards.push(\r\n                        <div className='column' key='empty'>\r\n                            <Note content={<div className='section'>there are no monsters in this group</div>} />\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n\r\n            let name;\r\n            if (this.props.selection) {\r\n                name = this.props.selection.name;\r\n                if (!name) {\r\n                    name = 'unnamed group';\r\n                }\r\n            }\r\n\r\n            let watermark;\r\n            if (!this.props.selection) {\r\n                watermark = (\r\n                    <div className='vertical-center-outer'>\r\n                        <div className='vertical-center-middle'>\r\n                            <div className='vertical-center-inner'>\r\n                                <HelpCard library={this.props.library} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='monster-library row collapse'>\r\n                    <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                        {leftColumn}\r\n                    </div>\r\n                    <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                        <CardGroup\r\n                            content={cards}\r\n                            heading={name}\r\n                            hidden={!this.props.selection}\r\n                        />\r\n                        {watermark}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface HelpCardProps {\r\n    library: MonsterGroup[];\r\n}\r\n\r\nclass HelpCard extends React.Component<HelpCardProps> {\r\n    public render() {\r\n        let action: JSX.Element | null = null;\r\n        if (this.props.library.length === 0) {\r\n            action = (\r\n                <div className='section'>to start adding monsters, press the <b>add a new monster group</b> button</div>\r\n            );\r\n        } else {\r\n            action = (\r\n                <div>\r\n                    <div className='section'>on the left you will see a list of monster groups</div>\r\n                    <div className='section'>select a monster group from the list to see stat blocks for monsters in that group</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Note\r\n                content={\r\n                    <div>\r\n                        <div className='section'>you can maintain your menagerie of monsters here</div>\r\n                        <div className='section'>you can then use these monsters to design combat encounters in the encounter builder</div>\r\n                        <div className='divider'/>\r\n                        {action}\r\n                    </div>\r\n                }\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\ninterface MonsterInfoProps {\r\n    selection: MonsterGroup;\r\n    filter: string | null;\r\n    changeValue: (field: string, value: string) => void;\r\n    addMonster: () => void;\r\n    sortMonsters: () => void;\r\n    removeMonsterGroup: () => void;\r\n}\r\n\r\nclass MonsterInfo extends React.Component<MonsterInfoProps> {\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div>\r\n                    <div className='section'>\r\n                        <div className='subheading'>monster group name</div>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='monster group name'\r\n                            value={this.props.selection.name}\r\n                            disabled={!!this.props.filter}\r\n                            onChange={event => this.props.changeValue('name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.addMonster()}>add a new monster</button>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.sortMonsters()}>sort monsters</button>\r\n                        <ConfirmButton text='delete group' callback={() => this.props.removeMonsterGroup()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Party } from '../../models/party';\r\n\r\ninterface Props {\r\n    party: Party;\r\n    selected: boolean;\r\n    filter: string;\r\n    setSelection: (party: Party) => void;\r\n}\r\n\r\nexport default class PartyListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const matchParty = Utils.match(this.props.filter, this.props.party.name);\r\n\r\n            const pcs = [];\r\n            for (let n = 0; n !== this.props.party.pcs.length; ++n) {\r\n                const pc = this.props.party.pcs[n];\r\n                let name = pc.name || 'unnamed pc';\r\n                if (pc.player) {\r\n                    name += ' (' + pc.player + ')';\r\n                }\r\n                if (matchParty || Utils.match(this.props.filter, name)) {\r\n                    pcs.push(<div key={pc.id} className='section'>{name}</div>);\r\n                }\r\n            }\r\n            if (pcs.length === 0) {\r\n                pcs.push(<div key='empty' className='section'>no pcs</div>);\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.party)}>\r\n                    <div className='heading'>{this.props.party.name || 'unnamed party'}</div>\r\n                    {pcs}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Party, PC } from '../../models/party';\r\n\r\nimport PCCard from '../cards/pc-card';\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport PartyListItem from '../list-items/party-list-item';\r\nimport CardGroup from '../panels/card-group';\r\nimport Note from '../panels/note';\r\n\r\ninterface Props {\r\n    parties: Party[];\r\n    selection: Party | null;\r\n    filter: string;\r\n    selectParty: (party: Party | null) => void;\r\n    addParty: () => void;\r\n    removeParty: () => void;\r\n    addPC: () => void;\r\n    editPC: (pc: PC) => void;\r\n    removePC: (pc: PC) => void;\r\n    sortPCs: () => void;\r\n    changeValue: (source: any, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, value: number) => void;\r\n}\r\n\r\nexport default class PartiesScreen extends React.Component<Props> {\r\n    private showParty(party: Party) {\r\n        let result = Utils.match(this.props.filter, party.name);\r\n\r\n        if (!result) {\r\n            party.pcs.forEach(pc => {\r\n                result = Utils.match(this.props.filter, pc.name) || result;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let leftColumn = null;\r\n            if (this.props.selection) {\r\n                leftColumn = (\r\n                    <div>\r\n                        <PartyInfo\r\n                            selection={this.props.selection}\r\n                            filter={this.props.filter}\r\n                            addPC={() => this.props.addPC()}\r\n                            sortPCs={() => this.props.sortPCs()}\r\n                            changeValue={(type, value) => this.props.changeValue(this.props.selection, type, value)}\r\n                            removeParty={() => this.props.removeParty()}\r\n                        />\r\n                        <div className='divider' />\r\n                        <button onClick={() => this.props.selectParty(null)}>&larr; back to list</button>\r\n                    </div>\r\n                );\r\n            } else {\r\n                let listItems = this.props.parties.filter(p => this.showParty(p)).map(p => {\r\n                    return (\r\n                        <PartyListItem\r\n                            key={p.id}\r\n                            party={p}\r\n                            filter={this.props.filter}\r\n                            selected={p === this.props.selection}\r\n                            setSelection={party => this.props.selectParty(party)}\r\n                        />\r\n                    );\r\n                });\r\n                if (listItems.length === 0) {\r\n                    listItems = [(\r\n                        <Note\r\n                            key='empty'\r\n                            content={'you have not set up any parties yet'}\r\n                        />\r\n                    )];\r\n                }\r\n\r\n                leftColumn = (\r\n                    <div>\r\n                        <button onClick={() => this.props.addParty()}>add a new party</button>\r\n                        <div className='divider' />\r\n                        {listItems}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            const activeCards: JSX.Element[] = [];\r\n            const inactiveCards: JSX.Element[] = [];\r\n\r\n            if (this.props.selection) {\r\n                const pcs = this.props.selection.pcs.filter(pc => {\r\n                    return Utils.match(this.props.filter, pc.name);\r\n                });\r\n\r\n                const activePCs = pcs.filter(pc => pc.active);\r\n                activePCs.forEach(activePC => {\r\n                    activeCards.push(\r\n                        <div className='column' key={activePC.id}>\r\n                            <PCCard\r\n                                combatant={activePC}\r\n                                mode={'edit'}\r\n                                changeValue={(pc, type, value) => this.props.changeValue(pc, type, value)}\r\n                                nudgeValue={(pc, type, delta) => this.props.nudgeValue(pc, type, delta)}\r\n                                editPC={pc => this.props.editPC(pc)}\r\n                                removePC={pc => this.props.removePC(pc)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                const inactivePCs = pcs.filter(pc => !pc.active);\r\n                inactivePCs.forEach(inactivePC => {\r\n                    inactiveCards.push(\r\n                        <div className='column' key={inactivePC.id}>\r\n                            <PCCard\r\n                                combatant={inactivePC}\r\n                                mode={'edit'}\r\n                                changeValue={(pc, type, value) => this.props.changeValue(pc, type, value)}\r\n                                nudgeValue={(pc, type, delta) => this.props.nudgeValue(pc, type, delta)}\r\n                                editPC={pc => this.props.editPC(pc)}\r\n                                removePC={pc => this.props.removePC(pc)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                if (activePCs.length === 0) {\r\n                    activeCards.push(\r\n                        <div className='column' key='empty'>\r\n                            <Note content={<div className='section'>there are no pcs in this party</div>} />\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n\r\n            let name;\r\n            if (this.props.selection) {\r\n                name = this.props.selection.name || 'unnamed party';\r\n            }\r\n\r\n            let watermark;\r\n            if (!this.props.selection) {\r\n                watermark = (\r\n                    <div className='vertical-center-outer'>\r\n                        <div className='vertical-center-middle'>\r\n                            <div className='vertical-center-inner'>\r\n                                <HelpCard parties={this.props.parties} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='parties row collapse'>\r\n                    <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                        {leftColumn}\r\n                    </div>\r\n                    <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                        <CardGroup\r\n                            content={activeCards}\r\n                            heading={name}\r\n                            hidden={!this.props.selection}\r\n                        />\r\n                        <CardGroup\r\n                            content={inactiveCards}\r\n                            heading='inactive pcs'\r\n                            hidden={inactiveCards.length === 0}\r\n                        />\r\n                        {watermark}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface HelpCardProps {\r\n    parties: Party[];\r\n}\r\n\r\nclass HelpCard extends React.Component<HelpCardProps> {\r\n    public render() {\r\n        try {\r\n            let action: JSX.Element | null = null;\r\n            if (this.props.parties.length === 0) {\r\n                action = (\r\n                    <div className='section'>to start adding a party, press the <b>add a new party</b> button</div>\r\n                );\r\n            } else {\r\n                action = (\r\n                    <div>\r\n                        <div className='section'>on the left you will see a list of parties that you have created</div>\r\n                        <div className='section'>select a party from the list to see pc details</div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <Note\r\n                    content={\r\n                        <div>\r\n                            <div className='section'>this page is where you can tell dojo all about your pcs</div>\r\n                            <div className='section'>you can add a party for each of your gaming groups</div>\r\n                            <div className='section'>when you have set up a party and an encounter you can run the encounter in the combat manager</div>\r\n                            <div className='divider'/>\r\n                            {action}\r\n                        </div>\r\n                    }\r\n                />\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n\r\ninterface PartyInfoProps {\r\n    selection: Party;\r\n    filter: string | null;\r\n    changeValue: (field: string, value: string) => void;\r\n    addPC: () => void;\r\n    sortPCs: () => void;\r\n    removeParty: () => void;\r\n}\r\n\r\nclass PartyInfo extends React.Component<PartyInfoProps> {\r\n    private getSummary() {\r\n        const activePCs = this.props.selection.pcs.filter(pc => pc.active);\r\n        if (activePCs.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        let languages = '';\r\n        let insightSummary = '-';\r\n        let investigationSummary = '-';\r\n        let perceptionSummary = '-';\r\n\r\n        languages = activePCs\r\n            .map(pc => pc.languages)\r\n            .join(', ')\r\n            .split(/[ ,;]+/)\r\n            .reduce((array: string[], value) => {\r\n                if (array.indexOf(value) === -1) {\r\n                    array.push(value);\r\n                }\r\n                return array;\r\n            }, [])\r\n            .sort((a, b) => {\r\n                if (a === 'Common') {\r\n                    return -1;\r\n                }\r\n                if (b === 'Common') {\r\n                    return 1;\r\n                }\r\n                return a.localeCompare(b);\r\n            })\r\n            .join(', ');\r\n\r\n        const insight: { min: number | null, max: number | null } = { min: null, max: null };\r\n        const invest: { min: number | null, max: number | null } = { min: null, max: null };\r\n        const percep: { min: number | null, max: number | null } = { min: null, max: null };\r\n\r\n        activePCs.forEach(pc => {\r\n            insight.min = insight.min === null ? pc.passiveInsight : Math.min(insight.min, pc.passiveInsight);\r\n            insight.max = insight.max === null ? pc.passiveInsight : Math.max(insight.max, pc.passiveInsight);\r\n            invest.min = invest.min === null ? pc.passiveInvestigation : Math.min(invest.min, pc.passiveInvestigation);\r\n            invest.max = invest.max === null ? pc.passiveInvestigation : Math.max(invest.max, pc.passiveInvestigation);\r\n            percep.min = percep.min === null ? pc.passivePerception : Math.min(percep.min, pc.passivePerception);\r\n            percep.max = percep.max === null ? pc.passivePerception : Math.max(percep.max, pc.passivePerception);\r\n        });\r\n\r\n        insightSummary = insight.min === insight.max ? (insight.min as number).toString() : insight.min + ' - ' + insight.max;\r\n        investigationSummary = invest.min === invest.max ? (invest.min as number).toString() : invest.min + ' - ' + invest.max;\r\n        perceptionSummary = percep.min === percep.max ? (percep.min as number).toString() : percep.min + ' - ' + percep.max;\r\n\r\n        return (\r\n            <div className='list-item non-clickable'>\r\n                <div className='section' style={{ display: languages !== '' ? 'block' : 'none' }}>\r\n                    <div className='subheading'>party languages</div>\r\n                </div>\r\n                <div className='section'>\r\n                    {languages}\r\n                </div>\r\n                <div className='section'>\r\n                    <div className='subheading'>party passive skills</div>\r\n                </div>\r\n                <div className='table'>\r\n                    <div>\r\n                        <div className='cell three'><b>insight</b></div>\r\n                        <div className='cell three'><b>invest.</b></div>\r\n                        <div className='cell three'><b>percep.</b></div>\r\n                    </div>\r\n                    <div>\r\n                        <div className='cell three'>{insightSummary}</div>\r\n                        <div className='cell three'>{investigationSummary}</div>\r\n                        <div className='cell three'>{perceptionSummary}</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div>\r\n                    <div className='section'>\r\n                        <div className='subheading'>party name</div>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='party name'\r\n                            value={this.props.selection.name}\r\n                            disabled={!!this.props.filter}\r\n                            onChange={event => this.props.changeValue('name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    {this.getSummary()}\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.addPC()}>add a new pc</button>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.sortPCs()}>sort pcs</button>\r\n                        <ConfirmButton text='delete party' callback={() => this.props.removeParty()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Napoleon from '../../utils/napoleon';\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { EncounterSlot, MonsterFilter } from '../../models/encounter';\r\nimport { Monster, MonsterGroup } from '../../models/monster-group';\r\n\r\nimport Factory from '../../utils/factory';\r\nimport MonsterCard from '../cards/monster-card';\r\nimport FilterPanel from '../panels/filter-panel';\r\nimport Note from '../panels/note';\r\n\r\ninterface Props {\r\n    combatantSlots: EncounterSlot[];\r\n    library: MonsterGroup[];\r\n}\r\n\r\ninterface State {\r\n    combatantSlots: EncounterSlot[];\r\n    filter: MonsterFilter;\r\n}\r\n\r\nexport default class AddCombatantsModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            combatantSlots: props.combatantSlots,\r\n            filter: Factory.createMonsterFilter()\r\n        };\r\n    }\r\n\r\n    private changeFilterValue(type: 'name' | 'challengeMin' | 'challengeMax' | 'category' | 'size', value: any) {\r\n        // eslint-disable-next-line\r\n        this.state.filter[type] = value as never;\r\n        this.setState({\r\n            filter: this.state.filter\r\n        });\r\n    }\r\n\r\n    private nudgeFilterValue(type: 'challengeMin' | 'challengeMax', delta: number) {\r\n        const value = Utils.nudgeChallenge(this.state.filter[type], delta);\r\n        this.changeFilterValue(type, value);\r\n    }\r\n\r\n    private resetFilter() {\r\n        this.setState({\r\n            filter: Factory.createMonsterFilter()\r\n        });\r\n    }\r\n\r\n    private matchMonster(monster: Monster) {\r\n        return Napoleon.matchMonster(monster, this.state.filter);\r\n    }\r\n\r\n    private selectMonster(monster: Monster) {\r\n        const slot = Factory.createEncounterSlot();\r\n        slot.monsterGroupName = Utils.getMonsterGroup(monster, this.props.library).name;\r\n        slot.monsterName = monster.name;\r\n        this.state.combatantSlots.push(slot);\r\n        this.state.combatantSlots.sort((a, b) => {\r\n            if (a.monsterName < b.monsterName) { return -1; }\r\n            if (a.monsterName > b.monsterName) { return 1; }\r\n            return 0;\r\n        });\r\n        this.setState({\r\n            combatantSlots: this.state.combatantSlots\r\n        });\r\n    }\r\n\r\n    private deselectMonster(monster: Monster) {\r\n        const group = Utils.getMonsterGroup(monster, this.props.library);\r\n        const slot = this.state.combatantSlots.find(s => (s.monsterGroupName === group.name) && (s.monsterName === monster.name));\r\n        if (slot) {\r\n            const index = this.state.combatantSlots.indexOf(slot);\r\n            this.state.combatantSlots.splice(index, 1);\r\n            this.setState({\r\n                combatantSlots: this.state.combatantSlots\r\n            });\r\n        }\r\n    }\r\n\r\n    private nudgeMonsterCount(slot: EncounterSlot, delta: number) {\r\n        slot.count += delta;\r\n        if (slot.count === 0) {\r\n            const group = this.props.library.find(g => g.name === slot.monsterGroupName);\r\n            if (group) {\r\n                const monster = group.monsters.find(m => m.name === slot.monsterName);\r\n                if (monster) {\r\n                    this.deselectMonster(monster);\r\n                }\r\n            }\r\n        } else {\r\n            this.setState({\r\n                combatantSlots: this.state.combatantSlots\r\n            });\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const monsters: Monster[] = [];\r\n            this.props.library.forEach(group => {\r\n                group.monsters.forEach(monster => {\r\n                    if (this.matchMonster(monster)) {\r\n                        monsters.push(monster);\r\n                    }\r\n                });\r\n            });\r\n            monsters.sort((a, b) => {\r\n                if (a.name < b.name) { return -1; }\r\n                if (a.name > b.name) { return 1; }\r\n                return 0;\r\n            });\r\n            const currentIDs = this.state.combatantSlots.map(slot => {\r\n                const group = this.props.library.find(g => g.name === slot.monsterGroupName);\r\n                if (group) {\r\n                    const monster = group.monsters.find(m => m.name === slot.monsterName);\r\n                    if (monster) {\r\n                        return monster.id;\r\n                    }\r\n                }\r\n                return null;\r\n            }).filter(id => !!id);\r\n            let allCombatants: JSX.Element | JSX.Element[] = monsters.filter(m => !currentIDs.includes(m.id)).map(m => {\r\n                return (\r\n                    <MonsterCard key={m.id} combatant={m} mode='view candidate' selectMonster={monster => this.selectMonster(monster)} />\r\n                );\r\n            });\r\n            if (allCombatants.length === 0) {\r\n                allCombatants = (\r\n                    <Note\r\n                        content={(\r\n                            <div className='section'>\r\n                                there are no monsters that match the above criteria (or you have already selected them all)\r\n                            </div>\r\n                        )}\r\n                    />\r\n                );\r\n            }\r\n\r\n            const selectedCombatants: (JSX.Element | null)[] = this.state.combatantSlots.map(slot => {\r\n                const group = this.props.library.find(g => g.name === slot.monsterGroupName);\r\n                if (group) {\r\n                    const monster = group.monsters.find(m => m.name === slot.monsterName);\r\n                    if (monster) {\r\n                        return (\r\n                            <MonsterCard\r\n                                key={monster.id}\r\n                                combatant={monster}\r\n                                slot={slot}\r\n                                mode='view candidate selected'\r\n                                deselectMonster={m => this.deselectMonster(m)}\r\n                                nudgeValue={(source, field, delta) => this.nudgeMonsterCount(slot, delta)}\r\n                            />\r\n                        );\r\n                    }\r\n                }\r\n                return null;\r\n            });\r\n\r\n            return (\r\n                <div className='add-combatants-modal'>\r\n                    <div className='row' style={{ height: '100%' }}>\r\n                        <div className='columns small-6 medium-6 large-6 scrollable'>\r\n                            <div className='heading'>all combatants</div>\r\n                            <FilterPanel\r\n                                filter={this.state.filter}\r\n                                changeValue={(type, value) => this.changeFilterValue(type, value)}\r\n                                nudgeValue={(type, delta) => this.nudgeFilterValue(type, delta)}\r\n                                resetFilter={() => this.resetFilter()}\r\n                            />\r\n                            <div className='divider' />\r\n                            {allCombatants}\r\n                        </div>\r\n                        <div className='columns small-6 medium-6 large-6 scrollable'>\r\n                            <div className='heading'>selected combatants</div>\r\n                            {selectedCombatants}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { CombatSetup } from '../../models/combat';\r\nimport { Encounter, EncounterSlot } from '../../models/encounter';\r\nimport { MapFolio } from '../../models/map-folio';\r\nimport { Monster } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport Selector from '../controls/selector';\r\nimport DifficultyChartPanel from '../panels/difficulty-chart-panel';\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    combatSetup: CombatSetup;\r\n    parties: Party[];\r\n    encounters: Encounter[];\r\n    mapFolios: MapFolio[];\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n    notify: () => void;\r\n}\r\n\r\ninterface State {\r\n    combatSetup: CombatSetup;\r\n}\r\n\r\nexport default class CombatStartModal extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        parties: null,\r\n        mapFolios: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            combatSetup: props.combatSetup\r\n        };\r\n    }\r\n\r\n    private setParty(partyID: string | null) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.partyID = partyID;\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        }, () => this.props.notify());\r\n    }\r\n\r\n    private setEncounter(encounterID: string | null) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.encounterID = encounterID;\r\n        const enc = this.props.encounters.find(e => e.id === encounterID);\r\n        if (enc) {\r\n            // eslint-disable-next-line\r\n            this.state.combatSetup.monsterNames = Utils.getMonsterNames(enc);\r\n        }\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        }, () => this.props.notify());\r\n    }\r\n\r\n    private setFolioID(id: string | null) {\r\n        if (id && (id !== '')) {\r\n            const folio = this.props.mapFolios.find(f => f.id === id);\r\n            if (folio) {\r\n                // eslint-disable-next-line\r\n                this.state.combatSetup.folioID = folio.id;\r\n                // eslint-disable-next-line\r\n                this.state.combatSetup.mapID = folio.maps.length === 1 ? folio.maps[0].id : null;\r\n            }\r\n        } else {\r\n            // eslint-disable-next-line\r\n            this.state.combatSetup.folioID = null;\r\n            // eslint-disable-next-line\r\n            this.state.combatSetup.mapID = null;\r\n        }\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        });\r\n    }\r\n\r\n    private setMapID(id: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.mapID = id;\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        });\r\n    }\r\n\r\n    private setWave(waveID: string | null) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.waveID = waveID;\r\n        const enc = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n        if (enc) {\r\n            const wave = enc.waves.find(w => w.id === waveID);\r\n            if (wave) {\r\n                // eslint-disable-next-line\r\n                this.state.combatSetup.monsterNames = Utils.getMonsterNames(wave);\r\n            }\r\n        }\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        }, () => this.props.notify());\r\n    }\r\n\r\n    private setEncounterInitMode(mode: 'manual' | 'individual' | 'group') {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.encounterInitMode = mode;\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        });\r\n    }\r\n\r\n    private changeName(slotID: string, index: number, name: string) {\r\n        const slot = this.state.combatSetup.monsterNames.find(s => s.id === slotID);\r\n        if (slot) {\r\n            slot.names[index] = name;\r\n            this.setState({\r\n                combatSetup: this.state.combatSetup\r\n            });\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    private getPartySection() {\r\n        if (this.props.parties.length === 0) {\r\n            return (\r\n                <div className='section'>you have not defined any parties</div>\r\n            );\r\n        }\r\n\r\n        const partyOptions = this.props.parties.map(party => {\r\n            return {\r\n                id: party.id,\r\n                text: party.name || 'unnamed party'\r\n            };\r\n        });\r\n\r\n        let partyContent = null;\r\n        if (this.state.combatSetup.partyID) {\r\n            const selectedParty = this.props.parties.find(p => p.id === this.state.combatSetup.partyID);\r\n            if (selectedParty) {\r\n                const pcs = selectedParty.pcs.filter(pc => pc.active);\r\n\r\n                const pcSections = pcs.map(pc =>\r\n                    (\r\n                        <li key={pc.id}>\r\n                            {pc.name || 'unnamed pc'} (level {pc.level})\r\n                        </li>\r\n                    )\r\n                );\r\n\r\n                if (pcSections.length === 0) {\r\n                    pcSections.push(\r\n                        <li key={'empty'}>no pcs</li>\r\n                    );\r\n                }\r\n\r\n                partyContent = (\r\n                    <div>\r\n                        <div className='subheading'>pcs</div>\r\n                        <ul>{pcSections}</ul>\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='heading'>party</div>\r\n                <Dropdown\r\n                    options={partyOptions}\r\n                    placeholder='select party...'\r\n                    selectedID={this.state.combatSetup.partyID ? this.state.combatSetup.partyID : undefined}\r\n                    select={optionID => this.setParty(optionID)}\r\n                    clear={() => this.setParty(null)}\r\n                />\r\n                {partyContent}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getEncounterSection() {\r\n        if (this.props.encounters.length === 0) {\r\n            return (\r\n                <div className='section'>you have not built any encounters</div>\r\n            );\r\n        }\r\n\r\n        const encounterOptions = this.props.encounters.map(encounter => {\r\n            return {\r\n                id: encounter.id,\r\n                text: encounter.name || 'unnamed encounter'\r\n            };\r\n        });\r\n\r\n        let encounterContent = null;\r\n        if (this.state.combatSetup.encounterID) {\r\n            const selectedEncounter = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n            if (selectedEncounter) {\r\n                const monsterSections = selectedEncounter.slots.map(slot => {\r\n                    let name = slot.monsterName || 'unnamed monster';\r\n                    if (slot.count > 1) {\r\n                        name += ' (x' + slot.count + ')';\r\n                    }\r\n                    return (\r\n                        <li key={slot.id}>{name}</li>\r\n                    );\r\n                });\r\n\r\n                if (monsterSections.length === 0) {\r\n                    monsterSections.push(\r\n                        <li key={'empty'}>no monsters</li>\r\n                    );\r\n                }\r\n\r\n                const waves = selectedEncounter.waves.map(wave => {\r\n                    if (wave.slots.length === 0) {\r\n                        return null;\r\n                    }\r\n\r\n                    const waveMonsters = wave.slots.map(slot => {\r\n                        let name = slot.monsterName || 'unnamed monster';\r\n                        if (slot.count > 1) {\r\n                            name += ' x' + slot.count;\r\n                        }\r\n                        return (\r\n                            <li key={slot.id}>{name}</li>\r\n                        );\r\n                    });\r\n\r\n                    return (\r\n                        <div key={wave.id}>\r\n                            <div className='subheading'>{wave.name || 'unnamed wave'}</div>\r\n                            <ul>{waveMonsters}</ul>\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                encounterContent = (\r\n                    <div>\r\n                        <div className='subheading'>monsters</div>\r\n                        <ul>{monsterSections}</ul>\r\n                        {waves}\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='heading'>encounter</div>\r\n                <Dropdown\r\n                    options={encounterOptions}\r\n                    placeholder='select encounter...'\r\n                    selectedID={this.state.combatSetup.encounterID ? this.state.combatSetup.encounterID : undefined}\r\n                    select={optionID => this.setEncounter(optionID)}\r\n                    clear={() => this.setEncounter(null)}\r\n                />\r\n                {encounterContent}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getMapSection() {\r\n        const folios = this.props.mapFolios.filter(folio => folio.maps.length > 0);\r\n        if (folios.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        const folioOptions = [{\r\n            id: '',\r\n            text: 'none'\r\n        }].concat(folios.map(folio => {\r\n            return {\r\n                id: folio.id,\r\n                text: folio.name || 'unnamed folio'\r\n            };\r\n        }));\r\n\r\n        let selectMapSection = null;\r\n        let thumbnailSection = null;\r\n\r\n        if (this.state.combatSetup.folioID) {\r\n            const folio = this.props.mapFolios.find(f => f.id === this.state.combatSetup.folioID);\r\n            if (folio) {\r\n                const mapOptions = folio.maps.map(m => {\r\n                    return {\r\n                        id: m.id,\r\n                        text: m.name || 'unnamed map'\r\n                    };\r\n                });\r\n\r\n                if (mapOptions.length !== 1) {\r\n                    selectMapSection = (\r\n                        <Selector\r\n                            options={mapOptions}\r\n                            selectedID={this.state.combatSetup.mapID}\r\n                            select={optionID => this.setMapID(optionID)}\r\n                        />\r\n                    );\r\n                }\r\n\r\n                if (this.state.combatSetup.mapID) {\r\n                    const map = folio.maps.find(m => m.id === this.state.combatSetup.mapID);\r\n                    if (map) {\r\n                        thumbnailSection = (\r\n                            <MapPanel\r\n                                map={map}\r\n                                mode='thumbnail'\r\n                            />\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='heading'>map</div>\r\n                <Dropdown\r\n                    options={folioOptions}\r\n                    placeholder='select map folio...'\r\n                    selectedID={this.state.combatSetup.folioID ? this.state.combatSetup.folioID : undefined}\r\n                    select={optionID => this.setFolioID(optionID)}\r\n                    clear={() => this.setFolioID(null)}\r\n                />\r\n                {selectMapSection}\r\n                {thumbnailSection}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getWaveSection() {\r\n        if (this.state.combatSetup.encounterID === null) {\r\n            return (\r\n                <div className='section'>you have not selected an encounter</div>\r\n            );\r\n        }\r\n\r\n        const selectedEncounter = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n        if (selectedEncounter) {\r\n            if (selectedEncounter.waves.length === 0) {\r\n                return (\r\n                    <div className='section'>you have not defined any waves</div>\r\n                );\r\n            }\r\n\r\n            const waveOptions = selectedEncounter.waves.map(wave => {\r\n                return {\r\n                    id: wave.id,\r\n                    text: wave.name || 'unnamed wave'\r\n                };\r\n            });\r\n\r\n            let waveContent = null;\r\n            if (this.state.combatSetup.waveID) {\r\n                const selectedWave = selectedEncounter.waves.find(w => w.id === this.state.combatSetup.waveID);\r\n                if (selectedWave) {\r\n                    const monsterSections = selectedWave.slots.map(slot => {\r\n                        let name = slot.monsterName || 'unnamed monster';\r\n                        if (slot.count > 1) {\r\n                            name += ' (x' + slot.count + ')';\r\n                        }\r\n                        return (\r\n                            <li key={slot.id}>{name}</li>\r\n                        );\r\n                    });\r\n\r\n                    if (monsterSections.length === 0) {\r\n                        monsterSections.push(\r\n                            <li key={'empty'}>no monsters</li>\r\n                        );\r\n                    }\r\n\r\n                    waveContent = (\r\n                        <div>\r\n                            <div className='subheading'>monsters</div>\r\n                            <ul>{monsterSections}</ul>\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n\r\n            return (\r\n                <div>\r\n                    <div className='heading'>wave</div>\r\n                    <Dropdown\r\n                        options={waveOptions}\r\n                        placeholder='select wave...'\r\n                        selectedID={this.state.combatSetup.waveID ? this.state.combatSetup.waveID : undefined}\r\n                        select={optionID => this.setWave(optionID)}\r\n                        clear={() => this.setWave(null)}\r\n                    />\r\n                    {waveContent}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private getDifficultySection() {\r\n        const party = this.props.parties.find(p => p.id === this.state.combatSetup.partyID);\r\n        const encounter = this.props.encounters.find(enc => enc.id === this.state.combatSetup.encounterID);\r\n\r\n        if (party && encounter) {\r\n            return (\r\n                <div>\r\n                    <div className='heading'>encounter difficulty</div>\r\n                    <DifficultyChartPanel\r\n                        parties={this.props.parties}\r\n                        party={party}\r\n                        encounter={encounter}\r\n                        getMonster={(monsterName, monsterGroupName) => this.props.getMonster(monsterName, monsterGroupName)}\r\n                    />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='heading'>encounter difficulty</div>\r\n                <div className='section'>select a party and an encounter on the left to see difficulty information.</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getMonsterSection() {\r\n        if (this.state.combatSetup.encounterID === null) {\r\n            return (\r\n                <div>\r\n                    <div className='heading'>monsters</div>\r\n                    <div className='section'>select an encounter to see monster options here.</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (!this.props.parties && this.state.combatSetup.waveID === null) {\r\n            return (\r\n                <div>\r\n                    <div className='heading'>monsters</div>\r\n                    <div className='section'>select a wave to see monster options here.</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        const selectedEncounter = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n        if (selectedEncounter) {\r\n            let slotsContainer: { slots: EncounterSlot[] } = selectedEncounter;\r\n            if (this.state.combatSetup.waveID) {\r\n                const selectedWave = selectedEncounter.waves.find(w => w.id === this.state.combatSetup.waveID);\r\n                if (selectedWave) {\r\n                    slotsContainer = selectedWave;\r\n                }\r\n            }\r\n\r\n            if (slotsContainer.slots.length === 0) {\r\n                return null;\r\n            }\r\n\r\n            const initOptions = [\r\n                {\r\n                    id: 'manual',\r\n                    text: 'enter manually'\r\n                },\r\n                {\r\n                    id: 'individual',\r\n                    text: 'roll individually'\r\n                },\r\n                {\r\n                    id: 'group',\r\n                    text: 'roll in groups'\r\n                }\r\n            ];\r\n\r\n            const names = this.state.combatSetup.monsterNames.map(slotNames => {\r\n                const slot = slotsContainer.slots.find(s => s.id === slotNames.id);\r\n                if (slot) {\r\n                    const inputs = [];\r\n                    for (let n = 0; n !== slotNames.names.length; ++n) {\r\n                        inputs.push(\r\n                            <div key={n}>\r\n                                <MonsterName\r\n                                    value={slotNames.names[n]}\r\n                                    slotID={slot.id}\r\n                                    index={n}\r\n                                    changeName={(slotID, index, value) => this.changeName(slotID, index, value)}\r\n                                />\r\n                            </div>\r\n                        );\r\n                    }\r\n                    return (\r\n                        <div key={slotNames.id} className='name-row'>\r\n                            <div className='name-label'>\r\n                                {slot.monsterName}\r\n                            </div>\r\n                            <div className='name-inputs'>\r\n                                {inputs}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n                return null;\r\n            });\r\n\r\n            return (\r\n                <div>\r\n                    <div className='heading'>monsters</div>\r\n                    <div className='subheading'>initiative</div>\r\n                    <Selector\r\n                        options={initOptions}\r\n                        selectedID={this.state.combatSetup.encounterInitMode}\r\n                        select={optionID => this.setEncounterInitMode(optionID as 'manual' | 'individual' | 'group')}\r\n                    />\r\n                    <div className='subheading'>names</div>\r\n                    <div>{names}</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    public render() {\r\n        try {\r\n            let leftSection = null;\r\n            let rightSection = null;\r\n\r\n            if (this.props.parties) {\r\n                leftSection = (\r\n                    <div>\r\n                        {this.getPartySection()}\r\n                        {this.getEncounterSection()}\r\n                        {this.getMapSection()}\r\n                    </div>\r\n                );\r\n\r\n                rightSection = (\r\n                    <div>\r\n                        {this.getDifficultySection()}\r\n                        {this.getMonsterSection()}\r\n                    </div>\r\n                );\r\n            } else {\r\n                leftSection = (\r\n                    <div>\r\n                        {this.getWaveSection()}\r\n                    </div>\r\n                );\r\n\r\n                rightSection = (\r\n                    <div>\r\n                        {this.getMonsterSection()}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='row' style={{ height: '100%', margin: '0 -15px' }}>\r\n                    <div className='column small-6 medium-6 large-6 scrollable'>\r\n                        {leftSection}\r\n                    </div>\r\n                    <div className='column small-6 medium-6 large-6 scrollable'>\r\n                        {rightSection}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface MonsterNameProps {\r\n    slotID: string;\r\n    index: number;\r\n    value: string;\r\n    changeName: (slotID: string, index: number, value: string) => void;\r\n}\r\n\r\nclass MonsterName extends React.Component<MonsterNameProps> {\r\n    public render() {\r\n        return (\r\n            <input type='text' value={this.props.value} onChange={event => this.props.changeName(this.props.slotID, this.props.index, event.target.value)} />\r\n        );\r\n    }\r\n}\r\n","export interface Condition {\r\n    id: string;\r\n    name: string;\r\n    level: number;\r\n    text: string | null;\r\n    duration: ConditionDurationSaves | ConditionDurationCombatant | ConditionDurationRounds | null;\r\n}\r\n\r\nexport interface ConditionDurationSaves {\r\n    type: 'saves';\r\n    count: number;\r\n    saveType: 'str' | 'dex' | 'con' | 'int' | 'wis' | 'cha' | 'death';\r\n    saveDC: number;\r\n    point: 'start' | 'end';\r\n}\r\n\r\nexport interface ConditionDurationCombatant {\r\n    type: 'combatant';\r\n    point: 'start' | 'end';\r\n    combatantID: string | null;\r\n}\r\n\r\nexport interface ConditionDurationRounds {\r\n    type: 'rounds';\r\n    count: number;\r\n}\r\n\r\nexport const CONDITION_TYPES = [\r\n    'blinded',\r\n    'charmed',\r\n    'deafened',\r\n    'exhaustion',\r\n    'frightened',\r\n    'grappled',\r\n    'incapacitated',\r\n    'invisible',\r\n    'paralyzed',\r\n    'petrified',\r\n    'poisoned',\r\n    'prone',\r\n    'restrained',\r\n    'stunned',\r\n    'unconscious',\r\n    'custom'\r\n];\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    items: { id: string; text: string; details: JSX.Element | string; disabled?: boolean }[];\r\n    selectedItemID: string | null;\r\n    select: (itemID: string) => void;\r\n}\r\n\r\nexport default class RadioGroup extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        // No default property values\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            const content = this.props.items.map(item => {\r\n                return (\r\n                    <RadioGroupItem\r\n                        key={item.id}\r\n                        item={item}\r\n                        selected={this.props.selectedItemID === item.id}\r\n                        select={(itemID: string) => this.props.select(itemID)}\r\n                    />\r\n                );\r\n            });\r\n\r\n            return (\r\n                <div className='radio-group'>\r\n                    {content}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface RadioGroupItemProps {\r\n    item: { id: string; text: string; details: JSX.Element | string; disabled?: boolean };\r\n    selected: boolean;\r\n    select: (itemID: string) => void;\r\n}\r\n\r\nclass RadioGroupItem extends React.Component<RadioGroupItemProps> {\r\n    public render() {\r\n        let style = 'radio-item';\r\n        let details = null;\r\n\r\n        if (this.props.selected) {\r\n            style += ' selected';\r\n            details = (\r\n                <div className='radio-item-details'>\r\n                    {this.props.item.details}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (this.props.item.disabled) {\r\n            style += ' disabled';\r\n        }\r\n\r\n        return (\r\n            <div className={style} onClick={() => this.props.select(this.props.item.id)}>\r\n                <div className='radio-item-text'>{this.props.item.text}</div>\r\n                {details}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Factory from '../../utils/factory';\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combat, Combatant } from '../../models/combat';\r\nimport { Condition, CONDITION_TYPES, ConditionDurationCombatant, ConditionDurationSaves } from '../../models/condition';\r\nimport { Monster } from '../../models/monster-group';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport RadioGroup from '../controls/radio-group';\r\nimport Selector from '../controls/selector';\r\nimport Spin from '../controls/spin';\r\n\r\ninterface Props {\r\n    condition: Condition;\r\n    combatant: Combatant & Monster;\r\n    combat: Combat;\r\n}\r\n\r\ninterface State {\r\n    condition: Condition;\r\n}\r\n\r\nexport default class ConditionModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            condition: props.condition\r\n        };\r\n    }\r\n\r\n    private setCondition(conditionName: string) {\r\n        // eslint-disable-next-line\r\n        this.state.condition.name = conditionName;\r\n        // eslint-disable-next-line\r\n        this.state.condition.level = 1;\r\n        // eslint-disable-next-line\r\n        this.state.condition.text = conditionName === 'custom' ? 'custom condition' : null;\r\n\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    private setDuration(durationType: 'saves' | 'combatant' | 'rounds') {\r\n        let duration = null;\r\n\r\n        switch (durationType) {\r\n            case 'saves':\r\n                duration = Factory.createConditionDurationSaves();\r\n                break;\r\n            case 'combatant':\r\n                duration = Factory.createConditionDurationCombatant();\r\n                duration.combatantID = this.props.combatant.id;\r\n                break;\r\n            case 'rounds':\r\n                duration = Factory.createConditionDurationRounds();\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        // eslint-disable-next-line\r\n        this.state.condition.duration = duration;\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    private changeValue(object: any, field: string, value: any) {\r\n        object[field] = value;\r\n\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    private nudgeValue(object: any, field: string, delta: number) {\r\n        let value = object[field] + delta;\r\n        if (field === 'level') {\r\n            value = Math.max(value, 1);\r\n            value = Math.min(value, 6);\r\n        }\r\n        if (field === 'count') {\r\n            value = Math.max(value, 1);\r\n        }\r\n        if (field === 'saveDC') {\r\n            value = Math.max(value, 0);\r\n        }\r\n        object[field] = value;\r\n\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const conditions = CONDITION_TYPES.map(condition => {\r\n                const controls = [];\r\n                const description = [];\r\n                if (condition === this.state.condition.name) {\r\n                    if (condition === 'custom') {\r\n                        controls.push(\r\n                            <input\r\n                                type='text'\r\n                                placeholder='custom condition'\r\n                                value={this.state.condition.text ? this.state.condition.text : ''}\r\n                                onChange={event => this.changeValue(this.state.condition, 'text', event.target.value)}\r\n                            />\r\n                        );\r\n                    }\r\n                    if (condition === 'exhaustion') {\r\n                        controls.push(\r\n                            <Spin\r\n                                key='exhaustion-spin'\r\n                                source={this.props.condition}\r\n                                name='level'\r\n                                label='exhaustion'\r\n                                nudgeValue={delta => this.nudgeValue(this.props.condition, 'level', delta)}\r\n                            />\r\n                        );\r\n                    }\r\n                    const text = Utils.conditionText(this.state.condition);\r\n                    for (let n = 0; n !== text.length; ++n) {\r\n                        description.push(<li key={n} className='section'>{text[n]}</li>);\r\n                    }\r\n                }\r\n\r\n                return {\r\n                    id: condition,\r\n                    text: condition,\r\n                    details: (\r\n                        <div key={condition}>\r\n                            {controls}\r\n                            <ul>\r\n                                {description}\r\n                            </ul>\r\n                        </div>\r\n                    ),\r\n                    disabled: this.props.combatant.conditionImmunities ? this.props.combatant.conditionImmunities.indexOf(condition) !== -1 : false\r\n                };\r\n            });\r\n\r\n            const saveOptions = ['str', 'dex', 'con', 'int', 'wis', 'cha', 'death'].map(c => ({ id: c, text: c }));\r\n            const pointOptions = [\r\n                {\r\n                    id: 'start',\r\n                    text: 'start of turn'\r\n                },\r\n                {\r\n                    id: 'end',\r\n                    text: 'end of turn'\r\n                }\r\n            ];\r\n            const combatantOptions = this.props.combat.combatants.map(c => ({ id: c.id, text: (c.displayName || c.name || 'unnamed monster') }));\r\n\r\n            const durations = [\r\n                {\r\n                    id: 'none',\r\n                    text: 'until removed (default)',\r\n                    details: (\r\n                        <div className='section'>\r\n                            <div>the condition persists until it is manually removed</div>\r\n                        </div>\r\n                    )\r\n                },\r\n                {\r\n                    id: 'saves',\r\n                    text: 'until a successful save',\r\n                    details: (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>number of saves required</div>\r\n                                <Spin\r\n                                    source={this.props.condition.duration}\r\n                                    name='count'\r\n                                    nudgeValue={delta => this.nudgeValue(this.props.condition.duration, 'count', delta)}\r\n                                />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>save dc</div>\r\n                                <Spin\r\n                                    source={this.props.condition.duration}\r\n                                    name='saveDC'\r\n                                    nudgeValue={delta => this.nudgeValue(this.props.condition.duration, 'saveDC', delta)}\r\n                                />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>type of save</div>\r\n                                <Selector\r\n                                    options={saveOptions}\r\n                                    selectedID={\r\n                                        (this.props.condition.duration as ConditionDurationSaves)\r\n                                        ? (this.props.condition.duration as ConditionDurationSaves).saveType\r\n                                        : null\r\n                                    }\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, 'saveType', optionID)}\r\n                                />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>make the save at the start or end of the turn</div>\r\n                                <Selector\r\n                                    options={pointOptions}\r\n                                    selectedID={\r\n                                        (this.props.condition.duration as ConditionDurationSaves)\r\n                                        ? (this.props.condition.duration as ConditionDurationSaves).point\r\n                                        : null\r\n                                    }\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, 'point', optionID)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                },\r\n                {\r\n                    id: 'combatant',\r\n                    text: 'until someone\\'s next turn',\r\n                    details: (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>combatant</div>\r\n                                <Dropdown\r\n                                    options={combatantOptions}\r\n                                    selectedID={\r\n                                        (this.props.condition.duration as ConditionDurationCombatant)\r\n                                        ? (this.props.condition.duration as ConditionDurationCombatant).combatantID || undefined\r\n                                        : undefined\r\n                                    }\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, 'combatantID', optionID)}\r\n                                />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>start or end of the turn</div>\r\n                                <Selector\r\n                                    options={pointOptions}\r\n                                    selectedID={\r\n                                        (this.props.condition.duration as ConditionDurationCombatant)\r\n                                        ? (this.props.condition.duration as ConditionDurationCombatant).point\r\n                                        : null\r\n                                    }\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, 'point', optionID)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                },\r\n                {\r\n                    id: 'rounds',\r\n                    text: 'for a number of rounds',\r\n                    details: (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>number of rounds</div>\r\n                                <Spin\r\n                                    source={this.props.condition.duration}\r\n                                    name='count'\r\n                                    nudgeValue={delta => this.nudgeValue(this.props.condition.duration, 'count', delta)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }\r\n            ];\r\n\r\n            return (\r\n                <div className='condition-modal'>\r\n                    <div className='row' style={{ height: '100%' }}>\r\n                        <div className='columns small-6 medium-6 large-6 scrollable'>\r\n                            <div className='heading'>condition</div>\r\n                            <RadioGroup\r\n                                items={conditions}\r\n                                selectedItemID={this.state.condition.name}\r\n                                select={itemID => this.setCondition(itemID)}\r\n                            />\r\n                        </div>\r\n                        <div className='columns small-6 medium-6 large-6 scrollable'>\r\n                            <div className='heading'>duration</div>\r\n                            <RadioGroup\r\n                                items={durations}\r\n                                selectedItemID={this.state.condition.duration ? this.state.condition.duration.type : 'none'}\r\n                                select={itemID => this.setDuration(itemID as 'saves' | 'combatant' | 'rounds')}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { CATEGORY_TYPES, Monster, MonsterGroup, SIZE_TYPES } from '../../models/monster-group';\r\n\r\nimport Selector from '../controls/selector';\r\n\r\ninterface Props {\r\n    library: MonsterGroup[];\r\n}\r\n\r\ninterface State {\r\n    chart: string;\r\n}\r\n\r\nexport default class DemographicsSidebar extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            chart: 'challenge'\r\n        };\r\n    }\r\n\r\n    private selectChart(chart: string) {\r\n        this.setState({\r\n            chart: chart\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let demographics = null;\r\n\r\n            const allMonsters: Monster[] = [];\r\n            this.props.library.forEach(group => group.monsters.forEach(monster => allMonsters.push(monster)));\r\n            if (allMonsters.length !== 0) {\r\n                const buckets: { value: any, title: string }[] = [];\r\n                let maxBucketSize = 0;\r\n                const monsters: { [key: string]: Monster[] } = {};\r\n\r\n                switch (this.state.chart) {\r\n                    case 'challenge':\r\n                        const challenges = [\r\n                            0, 0.125, 0.25, 0.5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30\r\n                        ];\r\n                        challenges.forEach(cr => {\r\n                            buckets.push({\r\n                                value: cr,\r\n                                title: 'challenge ' + Utils.challenge(cr)\r\n                            });\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const cr = bucket.value;\r\n                            monsters[cr.toString()] = allMonsters.filter(monster => monster.challenge === cr);\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const cr = bucket.value;\r\n                            maxBucketSize = Math.max(monsters[cr].length, maxBucketSize);\r\n                        });\r\n                        break;\r\n                    case 'size':\r\n                        SIZE_TYPES.forEach(size => {\r\n                            buckets.push({\r\n                                value: size,\r\n                                title: size\r\n                            });\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const size = bucket.value;\r\n                            monsters[size.toString()] = allMonsters.filter(monster => monster.size === size);\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const size = bucket.value;\r\n                            maxBucketSize = Math.max(monsters[size].length, maxBucketSize);\r\n                        });\r\n                        break;\r\n                    case 'type':\r\n                        CATEGORY_TYPES.forEach(type => {\r\n                            buckets.push({\r\n                                value: type,\r\n                                title: type\r\n                            });\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const type = bucket.value;\r\n                            monsters[type.toString()] = allMonsters.filter(monster => monster.category === type);\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const type = bucket.value;\r\n                            maxBucketSize = Math.max(monsters[type].length, maxBucketSize);\r\n                        });\r\n                        break;\r\n                    default:\r\n                        // Do nothing\r\n                        break;\r\n                }\r\n\r\n                const bars = [];\r\n                for (let index = 0; index !== buckets.length; ++index) {\r\n                    const bucket = buckets[index];\r\n                    const set = monsters[bucket.value];\r\n                    const count = set ? set.length : 0;\r\n                    bars.push(\r\n                        <div\r\n                            key={bucket.title}\r\n                            className='bar-container'\r\n                            title={bucket.title + ': ' + set.length + ' monsters'}\r\n                        >\r\n                            <div\r\n                                className='bar'\r\n                                style={{\r\n                                    width: 'calc((100% - 1px) * ' + count + ' / ' + maxBucketSize + ')'\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                const chartOptions = [\r\n                    {\r\n                        id: 'challenge',\r\n                        text: 'challenge rating'\r\n                    },\r\n                    {\r\n                        id: 'size',\r\n                        text: 'size'\r\n                    },\r\n                    {\r\n                        id: 'type',\r\n                        text: 'type'\r\n                    }\r\n                ];\r\n\r\n                demographics = (\r\n                    <div>\r\n                        <div className='heading'>monster demographics</div>\r\n                        <Selector\r\n                            options={chartOptions}\r\n                            selectedID={this.state.chart}\r\n                            select={optionID => this.selectChart(optionID)}\r\n                        />\r\n                        <div className='chart'>\r\n                            <div className='plot'>{bars}</div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return demographics;\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","export interface MapFolio {\r\n    id: string;\r\n    name: string;\r\n    maps: Map[];\r\n}\r\n\r\nexport interface Map {\r\n    id: string;\r\n    name: string;\r\n    items: MapItem[];\r\n}\r\n\r\nexport interface MapItem {\r\n    id: string;\r\n    type: 'tile' | 'pc' | 'monster';\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n    terrain: string | null;\r\n    customBackground: string | null;\r\n    style: 'square' | 'rounded' | 'circle' | null;\r\n}\r\n\r\nexport const TERRAIN_TYPES = [\r\n    'cavern',\r\n    'dirt',\r\n    'flagstone',\r\n    'floorboard',\r\n    'grassland',\r\n    'pit',\r\n    'sand',\r\n    'snow',\r\n    'water',\r\n    'custom image'\r\n];\r\n","import React from 'react';\r\n\r\nimport { MapItem, TERRAIN_TYPES } from '../../models/map-folio';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport Radial from '../controls/radial';\r\nimport Selector from '../controls/selector';\r\n\r\ninterface Props {\r\n    tile: MapItem;\r\n    changeValue: (tile: MapItem, field: string, value: any) => void;\r\n    moveMapItem: (tile: MapItem, dir: string) => void;\r\n    resizeMapItem: (tile: MapItem, dir: string, dir2: 'in' | 'out' | null) => void;\r\n    cloneMapItem: (tile: MapItem) => void;\r\n    removeMapItem: (tile: MapItem) => void;\r\n}\r\n\r\nexport default class MapTileCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const terrainOptions = TERRAIN_TYPES.map(t => {\r\n                return { id: t, text: t };\r\n            });\r\n\r\n            const styleOptions = ['square', 'rounded', 'circle'].map(t => {\r\n                return { id: t, text: t };\r\n            });\r\n\r\n            let customSection = null;\r\n            if (this.props.tile.terrain === 'custom image') {\r\n                const clear = (\r\n                    <button onClick={() => this.props.changeValue(this.props.tile, 'customBackground', null)}>clear image</button>\r\n                );\r\n                customSection = (\r\n                    <div>\r\n                        <div className='subheading'>custom image</div>\r\n                        <button onClick={() => (document.getElementById('file-upload') as HTMLElement).click()}>select image</button>\r\n                        <input\r\n                            type='file'\r\n                            id='file-upload'\r\n                            accept='image/*'\r\n                            style={{ display: 'none' }}\r\n                            onChange={e => {\r\n                                if (e.target.files) {\r\n                                    const reader = new FileReader();\r\n                                    reader.onload = readerEvent => {\r\n                                        if (readerEvent.target) {\r\n                                            const content = readerEvent.target.result as string;\r\n                                            this.props.changeValue(this.props.tile, 'customBackground', content);\r\n                                        }\r\n                                    };\r\n                                    reader.readAsDataURL(e.target.files[0]);\r\n                                }\r\n                            }}\r\n                        />\r\n                        {clear}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='card map-tile'>\r\n                    <div className='heading'>\r\n                        <div className='title'>map tile</div>\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        <div className='subheading'>size</div>\r\n                        <div className='section'>{this.props.tile.width} sq x {this.props.tile.height} sq</div>\r\n                        <div className='section'>{this.props.tile.width * 5} ft x {this.props.tile.height * 5} ft</div>\r\n                        <div className='divider' />\r\n                        <div className='subheading'>terrain</div>\r\n                        <Dropdown\r\n                            options={terrainOptions}\r\n                            placeholder='select terrain'\r\n                            selectedID={this.props.tile.terrain ? this.props.tile.terrain : undefined}\r\n                            select={optionID => this.props.changeValue(this.props.tile, 'terrain', optionID)}\r\n                        />\r\n                        {customSection}\r\n                        <div className='divider' />\r\n                        <div className='subheading'>style</div>\r\n                        <Selector\r\n                            options={styleOptions}\r\n                            selectedID={this.props.tile.style}\r\n                            select={optionID => this.props.changeValue(this.props.tile, 'style', optionID)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <div className='subheading'>move</div>\r\n                        <div className='section centered'>\r\n                            <Radial direction='out' click={dir => this.props.moveMapItem(this.props.tile, dir)} />\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='subheading'>resize</div>\r\n                        <div className='section centered'>\r\n                            <Radial direction='both' click={(dir, dir2) => this.props.resizeMapItem(this.props.tile, dir, dir2)} />\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='section'>\r\n                            <button onClick={() => this.props.cloneMapItem(this.props.tile)}>clone tile</button>\r\n                            <button onClick={() => this.props.removeMapItem(this.props.tile)}>remove tile</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Factory from '../../utils/factory';\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Map, MapItem } from '../../models/map-folio';\r\n\r\nimport MapTileCard from '../cards/map-tile-card';\r\nimport MapPanel from '../panels/map-panel';\r\nimport Note from '../panels/note';\r\n\r\ninterface Props {\r\n    map: Map;\r\n}\r\n\r\ninterface State {\r\n    map: Map;\r\n    selectedTileID: string | null;\r\n    addingTile: boolean;\r\n}\r\n\r\nexport default class MapEditorModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            map: props.map,\r\n            selectedTileID: null,\r\n            addingTile: false\r\n        };\r\n    }\r\n\r\n    private setSelectedTileID(id: string | null) {\r\n        this.setState({\r\n            selectedTileID: id\r\n        });\r\n    }\r\n\r\n    private toggleAddingTile() {\r\n        this.setState({\r\n            addingTile: !this.state.addingTile\r\n        });\r\n    }\r\n\r\n    private addMapTile(x: number, y: number) {\r\n        const tile = Factory.createMapItem();\r\n        tile.x = x;\r\n        tile.y = y;\r\n        tile.style = 'square';\r\n        tile.terrain = 'flagstone';\r\n        this.state.map.items.push(tile);\r\n\r\n        this.setState({\r\n            map: this.state.map,\r\n            selectedTileID: tile.id,\r\n            addingTile: false\r\n        });\r\n    }\r\n\r\n    private moveMapItem(item: MapItem, dir: string) {\r\n        switch (dir) {\r\n            case 'N':\r\n                item.y -= 1;\r\n                break;\r\n            case 'E':\r\n                item.x += 1;\r\n                break;\r\n            case 'S':\r\n                item.y += 1;\r\n                break;\r\n            case 'W':\r\n                item.x -= 1;\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    private bigMapItem(item: MapItem, dir: string) {\r\n        switch (dir) {\r\n            case 'N':\r\n                item.y -= 1;\r\n                item.height += 1;\r\n                break;\r\n            case 'E':\r\n                item.width += 1;\r\n                break;\r\n            case 'S':\r\n                item.height += 1;\r\n                break;\r\n            case 'W':\r\n                item.x -= 1;\r\n                item.width += 1;\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    private smallMapItem(item: MapItem, dir: string) {\r\n        switch (dir) {\r\n            case 'N':\r\n                if (item.height > 1) {\r\n                    item.y += 1;\r\n                    item.height -= 1;\r\n                }\r\n                break;\r\n            case 'E':\r\n                if (item.width > 1) {\r\n                    item.width -= 1;\r\n                }\r\n                break;\r\n            case 'S':\r\n                if (item.height > 1) {\r\n                    item.height -= 1;\r\n                }\r\n                break;\r\n            case 'W':\r\n                if (item.width > 1) {\r\n                    item.x += 1;\r\n                    item.width -= 1;\r\n                }\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    private resizeMapItem(item: MapItem, dir: string, dir2: 'in' | 'out') {\r\n        switch (dir2) {\r\n            case 'in':\r\n                this.smallMapItem(item, dir);\r\n                break;\r\n            case 'out':\r\n                this.bigMapItem(item, dir);\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n    }\r\n\r\n    private cloneMapItem(item: MapItem) {\r\n        const copy = JSON.parse(JSON.stringify(item));\r\n        copy.id = Utils.guid();\r\n        copy.x += 1;\r\n        copy.y += 1;\r\n        this.state.map.items.push(copy);\r\n\r\n        this.setState({\r\n            map: this.state.map,\r\n            selectedTileID: copy.id\r\n        });\r\n    }\r\n\r\n    private removeMapItem(item: MapItem) {\r\n        const index = this.state.map.items.indexOf(item);\r\n        this.state.map.items.splice(index, 1);\r\n\r\n        this.setState({\r\n            map: this.state.map,\r\n            selectedTileID: null\r\n        });\r\n    }\r\n\r\n    private rotateMap() {\r\n        this.state.map.items.forEach(item => {\r\n            const newX = (item.y + item.height - 1) * -1;\r\n            const newY = item.x;\r\n            const newWidth = item.height;\r\n            const newHeight = item.width;\r\n\r\n            item.x = newX;\r\n            item.y = newY;\r\n            item.width = newWidth;\r\n            item.height = newHeight;\r\n        });\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    private clearMap() {\r\n        // eslint-disable-next-line\r\n        this.state.map.items = [];\r\n\r\n        this.setState({\r\n            map: this.state.map,\r\n            selectedTileID: null\r\n        });\r\n    }\r\n\r\n    private changeValue(source: any, field: string, value: any) {\r\n        source[field] = value;\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let tools = null;\r\n            if (this.state.selectedTileID) {\r\n                const item = this.state.map.items.find(i => i.id === this.state.selectedTileID);\r\n                if (item) {\r\n                    tools = (\r\n                        <div className='tools'>\r\n                            <MapTileCard\r\n                                tile={item}\r\n                                moveMapItem={(mapItem, dir) => this.moveMapItem(mapItem, dir)}\r\n                                resizeMapItem={(mapItem, dir, dir2) => this.resizeMapItem(mapItem, dir, dir2 as 'in' | 'out')}\r\n                                cloneMapItem={mapItem => this.cloneMapItem(mapItem)}\r\n                                removeMapItem={mapItem => this.removeMapItem(mapItem)}\r\n                                changeValue={(source, field, value) => this.changeValue(source, field, value)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                }\r\n            } else {\r\n                tools = (\r\n                    <div className='tools'>\r\n                        <Note\r\n                            content={\r\n                                <div>\r\n                                    <p>to add a new tile to the map, click on the button below</p>\r\n                                    <p>to edit an existing tile, click on it to select it</p>\r\n                                </div>\r\n                            }\r\n                        />\r\n                        <div className='divider' />\r\n                        <div className='subheading'>map name</div>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='map name'\r\n                            value={this.state.map.name}\r\n                            onChange={event => this.changeValue(this.state.map, 'name', event.target.value)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <button onClick={() => this.toggleAddingTile()}>\r\n                            {this.state.addingTile ? 'click somewhere on the map to add your new tile, or click here to cancel' : 'add a new tile'}\r\n                        </button>\r\n                        <button onClick={() => this.rotateMap()}>rotate the map</button>\r\n                        <button onClick={() => this.clearMap()}>clear all tiles</button>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='map-editor'>\r\n                    {tools}\r\n                    <MapPanel\r\n                        map={this.state.map}\r\n                        mode='edit'\r\n                        selectedItemID={this.state.selectedTileID ? this.state.selectedTileID : undefined}\r\n                        showOverlay={this.state.addingTile}\r\n                        setSelectedItemID={id => this.setSelectedTileID(id)}\r\n                        gridSquareClicked={(x, y) => this.addMapTile(x, y)}\r\n                    />\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Factory from '../../utils/factory';\r\nimport Frankenstein from '../../utils/frankenstein';\r\nimport Napoleon from '../../utils/napoleon';\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { MonsterFilter } from '../../models/encounter';\r\nimport { CATEGORY_TYPES, Monster, MonsterGroup, Trait, TRAIT_TYPES } from '../../models/monster-group';\r\n\r\nimport MonsterCard from '../cards/monster-card';\r\nimport Checkbox from '../controls/checkbox';\r\nimport Dropdown from '../controls/dropdown';\r\nimport Expander from '../controls/expander';\r\nimport Selector from '../controls/selector';\r\nimport Spin from '../controls/spin';\r\nimport AbilityScorePanel from '../panels/ability-score-panel';\r\nimport FilterPanel from '../panels/filter-panel';\r\nimport Note from '../panels/note';\r\nimport TraitsPanel from '../panels/traits-panel';\r\n\r\ninterface Props {\r\n    monster: Monster;\r\n    library: MonsterGroup[];\r\n    showSidebar: boolean;\r\n}\r\n\r\ninterface State {\r\n    monster: Monster;\r\n    page: 'overview' | 'abilities' | 'cbt-stats' | 'actions';\r\n    showFilter: boolean;\r\n    helpSection: string;\r\n    sidebar: 'similar' | 'scratchpad';\r\n    similarFilter: {\r\n        size: boolean,\r\n        type: boolean,\r\n        subtype: boolean,\r\n        alignment: boolean,\r\n        challenge: boolean,\r\n        text: string\r\n    };\r\n    scratchpadFilter: MonsterFilter;\r\n    scratchpadList: Monster[];\r\n}\r\n\r\nexport default class MonsterEditorModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            monster: props.monster,\r\n            page: 'overview',\r\n            showFilter: false,\r\n            helpSection: 'speed',\r\n            sidebar: 'similar',\r\n            similarFilter: {\r\n                size: true,\r\n                type: true,\r\n                subtype: false,\r\n                alignment: false,\r\n                challenge: true,\r\n                text: ''\r\n            },\r\n            scratchpadFilter: Factory.createMonsterFilter(),\r\n            scratchpadList: []\r\n        };\r\n    }\r\n\r\n    private setPage(page: 'overview' | 'abilities' | 'cbt-stats' | 'actions') {\r\n        const sections = this.getHelpOptionsForPage(page);\r\n        this.setState({\r\n            page: page,\r\n            helpSection: sections[0]\r\n        });\r\n    }\r\n\r\n    private toggleFilter() {\r\n        this.setState({\r\n            showFilter: !this.state.showFilter\r\n        });\r\n    }\r\n\r\n    private setHelpSection(section: string) {\r\n        this.setState({\r\n            helpSection: section\r\n        });\r\n    }\r\n\r\n    private toggleMatch(type: 'size' | 'type' | 'subtype' | 'alignment' | 'challenge') {\r\n        // eslint-disable-next-line\r\n        this.state.similarFilter[type] = !this.state.similarFilter[type];\r\n        this.setState({\r\n            similarFilter: this.state.similarFilter\r\n        });\r\n    }\r\n\r\n    private setFilterText(value: string) {\r\n        // eslint-disable-next-line\r\n        this.state.similarFilter.text = value;\r\n        this.setState({\r\n            similarFilter: this.state.similarFilter\r\n        });\r\n    }\r\n\r\n    private addToScratchpadList(monster: Monster) {\r\n        // eslint-disable-next-line\r\n        this.state.scratchpadList.push(monster);\r\n        // eslint-disable-next-line\r\n        Utils.sort(this.state.scratchpadList);\r\n        this.setState({\r\n            scratchpadList: this.state.scratchpadList\r\n        });\r\n    }\r\n\r\n    private removeFromScratchpadList(monster: Monster) {\r\n        const index = this.state.scratchpadList.indexOf(monster);\r\n        this.state.scratchpadList.splice(index, 1);\r\n        this.setState({\r\n            scratchpadList: this.state.scratchpadList\r\n        });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Helper methods\r\n\r\n    private getHelpOptionsForPage(page: 'overview' | 'abilities' | 'cbt-stats' | 'actions') {\r\n        switch (page) {\r\n            case 'overview':\r\n                return ['speed', 'senses', 'languages', 'equipment'];\r\n            case 'abilities':\r\n                return ['str', 'dex', 'con', 'int', 'wis', 'cha', 'saves', 'skills'];\r\n            case 'cbt-stats':\r\n                return ['armor class', 'hit dice', 'resistances', 'vulnerabilities', 'immunities', 'conditions'];\r\n            case 'actions':\r\n                return ['actions'];\r\n            default:\r\n                return [];\r\n        }\r\n    }\r\n\r\n    private getMonsters() {\r\n        const monsters: Monster[] = [];\r\n        this.props.library.forEach(group => {\r\n            group.monsters.forEach(monster => {\r\n                let match = true;\r\n\r\n                if (this.state.monster.id === monster.id) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.similarFilter.size && (this.state.monster.size !== monster.size)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.similarFilter.type && (this.state.monster.category !== monster.category)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.similarFilter.subtype && (this.state.monster.tag !== monster.tag)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.similarFilter.alignment && (this.state.monster.alignment !== monster.alignment)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.similarFilter.challenge && (this.state.monster.challenge !== monster.challenge)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (match) {\r\n                    monsters.push(monster);\r\n                }\r\n            });\r\n        });\r\n\r\n        return monsters;\r\n    }\r\n\r\n    private setRandomValue(field: string, monsters: Monster[]) {\r\n        Frankenstein.setRandomValue(this.state.monster, field, monsters);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private spliceMonsters(monsters: Monster[]) {\r\n        Frankenstein.spliceMonsters(this.state.monster, monsters);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private addTrait(type: 'trait' | 'action' | 'bonus' | 'reaction' | 'legendary' | 'lair') {\r\n        Frankenstein.addTrait(this.state.monster, type);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private addRandomTrait(type: string, monsters: Monster[]) {\r\n        Frankenstein.addRandomTrait(this.state.monster, type, monsters);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private removeTrait(trait: Trait) {\r\n        Frankenstein.removeTrait(this.state.monster, trait);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private swapTraits(t1: Trait, t2: Trait) {\r\n        Frankenstein.swapTraits(this.state.monster, t1, t2);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private copyTrait(trait: Trait) {\r\n        Frankenstein.copyTrait(this.state.monster, trait);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private changeTrait(trait: Trait, field: string, value: any) {\r\n        (trait as any)[field] = value;\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private nudgeValue(field: string, delta: number) {\r\n        Frankenstein.nudgeValue(this.state.monster, field, delta);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private changeValue(field: string, value: any) {\r\n        Frankenstein.changeValue(this.state.monster, field, value);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private changeFilterValue(type: 'name' | 'challengeMin' | 'challengeMax' | 'category' | 'size', value: any) {\r\n        // eslint-disable-next-line\r\n        this.state.scratchpadFilter[type] = value as never;\r\n        this.setState({\r\n            scratchpadFilter: this.state.scratchpadFilter\r\n        });\r\n    }\r\n\r\n    private nudgeFilterValue(type: 'challengeMin' | 'challengeMax', delta: number) {\r\n        const value = Utils.nudgeChallenge(this.state.scratchpadFilter[type], delta);\r\n        this.changeFilterValue(type, value);\r\n    }\r\n\r\n    private resetFilter() {\r\n        this.setState({\r\n            scratchpadFilter: Factory.createMonsterFilter()\r\n        });\r\n    }\r\n\r\n    private matchMonster(monster: Monster) {\r\n        return Napoleon.matchMonster(monster, this.state.scratchpadFilter);\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // HTML render methods\r\n\r\n    private getHelpSection(monsters: Monster[]) {\r\n        switch (this.state.helpSection) {\r\n            case 'speed':\r\n                return this.getValueSection('speed', 'text', monsters);\r\n            case 'senses':\r\n                return this.getValueSection('senses', 'text', monsters);\r\n            case 'languages':\r\n                return this.getValueSection('languages', 'text', monsters);\r\n            case 'equipment':\r\n                return this.getValueSection('equipment', 'text', monsters);\r\n            case 'str':\r\n                return this.getValueSection('abilityScores.str', 'number', monsters);\r\n            case 'dex':\r\n                return this.getValueSection('abilityScores.dex', 'number', monsters);\r\n            case 'con':\r\n                return this.getValueSection('abilityScores.con', 'number', monsters);\r\n            case 'int':\r\n                return this.getValueSection('abilityScores.int', 'number', monsters);\r\n            case 'wis':\r\n                return this.getValueSection('abilityScores.wis', 'number', monsters);\r\n            case 'cha':\r\n                return this.getValueSection('abilityScores.cha', 'number', monsters);\r\n            case 'saves':\r\n                return this.getValueSection('savingThrows', 'text', monsters);\r\n            case 'skills':\r\n                return this.getValueSection('skills', 'text', monsters);\r\n            case 'armor class':\r\n                return this.getValueSection('ac', 'number', monsters);\r\n            case 'hit dice':\r\n                return this.getValueSection('hitDice', 'number', monsters);\r\n            case 'resistances':\r\n                return this.getValueSection('damage.resist', 'text', monsters);\r\n            case 'vulnerabilities':\r\n                return this.getValueSection('damage.vulnerable', 'text', monsters);\r\n            case 'immunities':\r\n                return this.getValueSection('damage.immune', 'text', monsters);\r\n            case 'conditions':\r\n                return this.getValueSection('conditionImmunities', 'text', monsters);\r\n            case 'actions':\r\n                return this.getActionsSection(monsters);\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    private getValueSection(field: string, dataType: 'text' | 'number', monsters: Monster[]) {\r\n        const values: any[] = monsters\r\n            .map(m => {\r\n                const tokens = field.split('.');\r\n                let source: any = m;\r\n                let value = null;\r\n                tokens.forEach(token => {\r\n                    if (token === tokens[tokens.length - 1]) {\r\n                        value = source[token];\r\n                    } else {\r\n                        source = source[token];\r\n                    }\r\n                });\r\n                if ((dataType === 'text') && (value === '')) {\r\n                    value = null;\r\n                }\r\n                return value;\r\n            })\r\n            .filter(v => v !== null);\r\n\r\n        const distinct: { value: any, count: number }[] = [];\r\n        if (dataType === 'number') {\r\n            let min: number | null = null;\r\n            let max: number | null = null;\r\n            values.forEach(v => {\r\n                if ((min === null) || (v < min)) {\r\n                    min = v;\r\n                }\r\n                if ((max === null) || (v > max)) {\r\n                    max = v;\r\n                }\r\n            });\r\n            if ((min !== null) && (max !== null)) {\r\n                for (let n = min; n <= max; ++n) {\r\n                    distinct.push({\r\n                        value: n,\r\n                        count: 0\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        values.forEach(v => {\r\n            const current = distinct.find(d => d.value === v);\r\n            if (current) {\r\n                current.count += 1;\r\n            } else {\r\n                distinct.push({\r\n                    value: v,\r\n                    count: 1\r\n                });\r\n            }\r\n        });\r\n\r\n        switch (dataType) {\r\n            case 'number':\r\n                Utils.sort(distinct, [{ field: 'value', dir: 'asc' }]);\r\n                break;\r\n            case 'text':\r\n                Utils.sort(distinct, [{ field: 'count', dir: 'desc' }, { field: 'value', dir: 'asc' }]);\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        if (dataType === 'text') {\r\n            const count = monsters.length - values.length;\r\n            if (count !== 0) {\r\n                distinct.push({\r\n                    value: '',\r\n                    count: monsters.length - values.length\r\n                });\r\n            }\r\n        }\r\n\r\n        const valueSections = distinct.map(d => {\r\n            const width = 100 * d.count / monsters.length;\r\n            return (\r\n                <div className='row small-up-3 medium-up-3 large-up-3 value-list' key={distinct.indexOf(d)}>\r\n                    <div className='column'>\r\n                        <div className='text-container'>\r\n                            {d.value || '(none specified)'}\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <div className='bar-container'>\r\n                            <div className='bar' style={{ width: width + '%' }} />\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <button onClick={() => this.changeValue(field, d.value)}>use this value</button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                {valueSections}\r\n                <button onClick={() => this.setRandomValue(field, monsters)}>select random value</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getActionsSection(monsters: Monster[]) {\r\n        const rows = [];\r\n        rows.push(\r\n            <div className='row small-up-4 medium-up-4 large-up-4 value-list' key='header'>\r\n                <div className='column'>\r\n                    <div className='text-container'>\r\n                        <b>type</b>\r\n                    </div>\r\n                </div>\r\n                <div className='column'>\r\n                    <div className='text-container number'>\r\n                        <b>average number</b>\r\n                    </div>\r\n                </div>\r\n                <div className='column'>\r\n                    <div className='text-container number'>\r\n                        <b>min - max</b>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        TRAIT_TYPES.forEach(type => {\r\n            let min: number | null = null;\r\n            let max: number | null = null;\r\n            let count = 0;\r\n            monsters.forEach(m => {\r\n                const n = m.traits.filter(t => t.type === type).length;\r\n                if ((min === null) || (n < min)) {\r\n                    min = n;\r\n                }\r\n                if ((max === null) || (n > max)) {\r\n                    max = n;\r\n                }\r\n                count += n;\r\n            });\r\n            const avg = Math.round(count / monsters.length);\r\n\r\n            rows.push(\r\n                <div className='row small-up-4 medium-up-4 large-up-4 value-list' key={type}>\r\n                    <div className='column'>\r\n                        <div className={count === 0 ? 'text-container disabled' : 'text-container'}>\r\n                            {Utils.traitType(type, true)}\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <div className={count === 0 ? 'text-container number disabled' : 'text-container number'}>\r\n                            {avg}\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <div className={count === 0 ? 'text-container number disabled' : 'text-container number'}>\r\n                            {min} - {max}\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <button className={count === 0 ? 'disabled' : ''} onClick={() => this.addRandomTrait(type, monsters)}>add random</button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                {rows}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getMonsterCards(monsters: Monster[]) {\r\n        const sorted = Utils.sort(monsters);\r\n        const monsterCards = sorted.map(m => {\r\n            const showMonster = m.traits.some((t: Trait) => Utils.match(this.state.similarFilter.text, t.name));\r\n            if (showMonster) {\r\n                return (\r\n                    <div className='section' key={m.id}>\r\n                        <MonsterCard\r\n                            combatant={m}\r\n                            mode={'template ' + this.state.page}\r\n                            filter={this.state.similarFilter.text}\r\n                            copyTrait={trait => this.copyTrait(trait)}\r\n                        />\r\n                    </div>\r\n                );\r\n            } else {\r\n                return null;\r\n            }\r\n        }).filter(m => !!m);\r\n\r\n        if (monsterCards.length === 0) {\r\n            let info = '';\r\n            switch (this.state.sidebar) {\r\n                case 'similar':\r\n                    info = 'there are no monsters in your library which match the above criteria.';\r\n                    break;\r\n                case 'scratchpad':\r\n                    info = 'your scratchpad list is empty; you can add monsters to it to see their stats here.';\r\n                    break;\r\n            }\r\n\r\n            return (\r\n                <Note content={info} />\r\n            );\r\n        }\r\n\r\n        return monsterCards;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    public render() {\r\n        try {\r\n            const pages = [\r\n                {\r\n                    id: 'overview',\r\n                    text: 'overview'\r\n                },\r\n                {\r\n                    id: 'abilities',\r\n                    text: 'abilities'\r\n                },\r\n                {\r\n                    id: 'cbt-stats',\r\n                    text: 'combat'\r\n                },\r\n                {\r\n                    id: 'actions',\r\n                    text: 'actions'\r\n                }\r\n            ];\r\n\r\n            let monsters: Monster[] = [];\r\n            if (this.props.showSidebar) {\r\n                switch (this.state.sidebar) {\r\n                    case 'similar':\r\n                        monsters = this.getMonsters();\r\n                        break;\r\n                    case 'scratchpad':\r\n                        monsters = this.state.scratchpadList;\r\n                        break;\r\n                }\r\n            }\r\n\r\n            let content = null;\r\n            switch (this.state.page) {\r\n                case 'overview':\r\n                    const catOptions = CATEGORY_TYPES.map(cat => ({ id: cat, text: cat }));\r\n\r\n                    content = (\r\n                        <div className='row'>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>name</div>\r\n                                <input type='text' value={this.state.monster.name} onChange={event => this.changeValue('name', event.target.value)} />\r\n                                <div className='subheading'>size</div>\r\n                                <Spin\r\n                                    source={this.state.monster}\r\n                                    name='size'\r\n                                    nudgeValue={delta => this.nudgeValue('size', delta)}\r\n                                />\r\n                                <div className='subheading'>type</div>\r\n                                <Dropdown\r\n                                    options={catOptions}\r\n                                    selectedID={this.state.monster.category}\r\n                                    select={optionID => this.changeValue('category', optionID)}\r\n                                />\r\n                                <div className='subheading'>subtype</div>\r\n                                <input type='text' value={this.state.monster.tag} onChange={event => this.changeValue('tag', event.target.value)} />\r\n                                <div className='subheading'>alignment</div>\r\n                                <input type='text' value={this.state.monster.alignment} onChange={event => this.changeValue('alignment', event.target.value)} />\r\n                            </div>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>challenge rating</div>\r\n                                <Spin\r\n                                    source={this.state.monster}\r\n                                    name='challenge'\r\n                                    display={value => Utils.challenge(value)}\r\n                                    nudgeValue={delta => this.nudgeValue('challenge', delta)}\r\n                                />\r\n                                <div className='subheading'>speed</div>\r\n                                <input type='text' value={this.state.monster.speed} onChange={event => this.changeValue('speed', event.target.value)} />\r\n                                <div className='subheading'>senses</div>\r\n                                <input type='text' value={this.state.monster.senses} onChange={event => this.changeValue('senses', event.target.value)} />\r\n                                <div className='subheading'>languages</div>\r\n                                <input type='text' value={this.state.monster.languages} onChange={event => this.changeValue('languages', event.target.value)} />\r\n                                <div className='subheading'>equipment</div>\r\n                                <input type='text' value={this.state.monster.equipment} onChange={event => this.changeValue('equipment', event.target.value)} />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                    break;\r\n                case 'abilities':\r\n                    content = (\r\n                        <div className='row'>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>ability scores</div>\r\n                                <AbilityScorePanel\r\n                                    edit={true}\r\n                                    combatant={this.state.monster}\r\n                                    nudgeValue={(source, type, delta) => this.nudgeValue(type, delta)}\r\n                                />\r\n                            </div>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>saving throws</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.savingThrows}\r\n                                    onChange={event => this.changeValue('savingThrows', event.target.value)}\r\n                                />\r\n                                <div className='subheading'>skills</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.skills}\r\n                                    onChange={event => this.changeValue('skills', event.target.value)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                    break;\r\n                case 'cbt-stats':\r\n                    content = (\r\n                        <div className='row'>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>armor class</div>\r\n                                <Spin\r\n                                    source={this.state.monster}\r\n                                    name='ac'\r\n                                    nudgeValue={delta => this.nudgeValue('ac', delta)}\r\n                                />\r\n                                <div className='subheading'>hit dice</div>\r\n                                <Spin\r\n                                    source={this.state.monster}\r\n                                    name='hitDice'\r\n                                    display={value => value + 'd' + Utils.hitDieType(this.state.monster.size)}\r\n                                    nudgeValue={delta => this.nudgeValue('hitDice', delta)}\r\n                                />\r\n                                <div className='subheading'>hit points</div>\r\n                                <div className='hp-value'>{this.state.monster.hpMax} hp</div>\r\n                            </div>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>damage resistances</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.damage.resist}\r\n                                    onChange={event => this.changeValue('damage.resist', event.target.value)}\r\n                                />\r\n                                <div className='subheading'>damage vulnerabilities</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.damage.vulnerable}\r\n                                    onChange={event => this.changeValue('damage.vulnerable', event.target.value)}\r\n                                />\r\n                                <div className='subheading'>damage immunities</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.damage.immune}\r\n                                    onChange={event => this.changeValue('damage.immune', event.target.value)}\r\n                                />\r\n                                <div className='subheading'>condition immunities</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.conditionImmunities}\r\n                                    onChange={event => this.changeValue('conditionImmunities', event.target.value)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                    break;\r\n                case 'actions':\r\n                    content = (\r\n                        <TraitsPanel\r\n                            combatant={this.state.monster}\r\n                            mode='edit'\r\n                            addTrait={type => this.addTrait(type)}\r\n                            removeTrait={trait => this.removeTrait(trait)}\r\n                            swapTraits={(t1, t2) => this.swapTraits(t1, t2)}\r\n                            changeValue={(trait, type, value) => this.changeTrait(trait, type, value)}\r\n                        />\r\n                    );\r\n                    break;\r\n                default:\r\n                    // Do nothing\r\n                    break;\r\n            }\r\n\r\n            let help = null;\r\n            if (this.props.showSidebar && (monsters.length > 1)) {\r\n                let selector = null;\r\n                if (this.getHelpOptionsForPage(this.state.page).length > 1) {\r\n                    const options = this.getHelpOptionsForPage(this.state.page).map(s => {\r\n                        return {\r\n                            id: s,\r\n                            text: s\r\n                        };\r\n                    });\r\n                    selector = (\r\n                        <Selector\r\n                            tabs={false}\r\n                            options={options}\r\n                            selectedID={this.state.helpSection}\r\n                            select={optionID => this.setHelpSection(optionID)}\r\n                        />\r\n                    );\r\n                }\r\n\r\n                help = (\r\n                    <div className='monster-help'>\r\n                        <div className='divider' />\r\n                        <div className='heading'>information from sidebar monsters</div>\r\n                        {selector}\r\n                        {this.getHelpSection(monsters)}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            let sidebar = null;\r\n            if (this.props.showSidebar) {\r\n                let sidebarContent = null;\r\n                switch (this.state.sidebar) {\r\n                    case 'similar':\r\n                        sidebarContent = (\r\n                            <Expander\r\n                                text='similarity criteria'\r\n                                content={\r\n                                    <div>\r\n                                        <Checkbox\r\n                                            label={'size ' + this.state.monster.size}\r\n                                            checked={this.state.similarFilter.size}\r\n                                            changeValue={value => this.toggleMatch('size')}\r\n                                        />\r\n                                        <Checkbox\r\n                                            label={'type ' + this.state.monster.category}\r\n                                            checked={this.state.similarFilter.type}\r\n                                            changeValue={value => this.toggleMatch('type')}\r\n                                        />\r\n                                        <Checkbox\r\n                                            label={this.state.monster.tag ? 'subtype ' + this.state.monster.tag : 'subtype'}\r\n                                            checked={this.state.similarFilter.subtype}\r\n                                            disabled={!this.state.monster.tag}\r\n                                            changeValue={value => this.toggleMatch('subtype')}\r\n                                        />\r\n                                        <Checkbox\r\n                                            label={this.state.monster.alignment ? 'alignment ' + this.state.monster.alignment : 'alignment'}\r\n                                            checked={this.state.similarFilter.alignment}\r\n                                            disabled={!this.state.monster.alignment}\r\n                                            changeValue={value => this.toggleMatch('alignment')}\r\n                                        />\r\n                                        <Checkbox\r\n                                            label={'challenge rating ' + Utils.challenge(this.state.monster.challenge)}\r\n                                            checked={this.state.similarFilter.challenge}\r\n                                            changeValue={value => this.toggleMatch('challenge')}\r\n                                        />\r\n                                    </div>\r\n                                }\r\n                            />\r\n                        );\r\n                        break;\r\n                    case 'scratchpad':\r\n                        {\r\n                            const searchResults: Monster[] = [];\r\n                            this.props.library.forEach(group => {\r\n                                group.monsters.forEach(m => {\r\n                                    if (!monsters.includes(m) && this.matchMonster(m)) {\r\n                                        searchResults.push(m);\r\n                                    }\r\n                                });\r\n                            });\r\n                            Utils.sort(searchResults);\r\n                            let resultsRows = searchResults.map(m =>\r\n                                <button key={m.id} onClick={() => this.addToScratchpadList(m)}>{m.name}</button>\r\n                            );\r\n                            if (searchResults.length === 0) {\r\n                                resultsRows = [(\r\n                                    <Note key='none' content='no monsters found' />\r\n                                )];\r\n                            }\r\n                            let removeSection = null;\r\n                            if (monsters.length > 0) {\r\n                                const deleteRows = monsters.map(m =>\r\n                                    <button key={m.id} onClick={() => this.removeFromScratchpadList(m)}>{m.name}</button>\r\n                                );\r\n                                removeSection = (\r\n                                    <Expander\r\n                                        text='remove monsters from the list'\r\n                                        content={\r\n                                            <div>\r\n                                                {deleteRows}\r\n                                            </div>\r\n                                        }\r\n                                    />\r\n                                );\r\n                            }\r\n                            sidebarContent = (\r\n                                <div>\r\n                                    <Expander\r\n                                        text='add monsters to the list'\r\n                                        content={\r\n                                            <div>\r\n                                                <FilterPanel\r\n                                                    filter={this.state.scratchpadFilter}\r\n                                                    changeValue={(type, value) => this.changeFilterValue(type, value)}\r\n                                                    nudgeValue={(type, delta) => this.nudgeFilterValue(type, delta)}\r\n                                                    resetFilter={() => this.resetFilter()}\r\n                                                />\r\n                                                <div className='divider' />\r\n                                                {resultsRows}\r\n                                            </div>\r\n                                        }\r\n                                    />\r\n                                    {removeSection}\r\n                                </div>\r\n                            );\r\n                        }\r\n                        break;\r\n                }\r\n                const sidebarOptions = [\r\n                    {\r\n                        id: 'similar',\r\n                        text: 'similar'\r\n                    },\r\n                    {\r\n                        id: 'scratchpad',\r\n                        text: 'scratchpad'\r\n                    }\r\n                ];\r\n                sidebar = (\r\n                    <div className='columns small-4 medium-4 large-4 scrollable wide-column'>\r\n                        <Selector\r\n                            tabs={true}\r\n                            options={sidebarOptions}\r\n                            selectedID={this.state.sidebar}\r\n                            select={optionID => this.setState({sidebar: optionID as 'similar' | 'scratchpad'})}\r\n                        />\r\n                        {sidebarContent}\r\n                        <div className='divider'/>\r\n                        <button className={monsters.length < 2 ? 'disabled' : ''} onClick={() => this.spliceMonsters(monsters)}>\r\n                            build random monster\r\n                        </button>\r\n                        <div className='divider'/>\r\n                        {this.getMonsterCards(monsters)}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='row' style={{ height: '100%', margin: '0 -5px' }}>\r\n                    <div\r\n                        className={\r\n                            this.props.showSidebar\r\n                            ? 'columns small-8 medium-8 large-8 scrollable wide-column'\r\n                            : 'columns small-12 medium-12 large-12 scrollable wide-column'\r\n                        }\r\n                        style={{ transition: 'none' }}\r\n                    >\r\n                        <div className='section'>\r\n                            <Selector\r\n                                tabs={true}\r\n                                options={pages}\r\n                                selectedID={this.state.page}\r\n                                select={optionID => this.setPage(optionID as 'overview' | 'abilities' | 'cbt-stats' | 'actions')}\r\n                            />\r\n                            {content}\r\n                            {help}\r\n                        </div>\r\n                    </div>\r\n                    {sidebar}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { PC } from '../../models/party';\r\n\r\nimport Spin from '../controls/spin';\r\n\r\nimport Factory from '../../utils/factory';\r\n\r\ninterface Props {\r\n    pc: PC;\r\n}\r\n\r\ninterface State {\r\n    pc: PC;\r\n}\r\n\r\nexport default class PCEditorModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            pc: props.pc\r\n        };\r\n    }\r\n\r\n    private addCompanion() {\r\n        const companion = Factory.createCompanion();\r\n        companion.name = 'new companion';\r\n        this.state.pc.companions.push(companion);\r\n        this.setState({\r\n            pc: this.state.pc\r\n        });\r\n    }\r\n\r\n    private removeCompanion(id: string) {\r\n        // eslint-disable-next-line\r\n        this.state.pc.companions = this.state.pc.companions.filter(c => c.id !== id);\r\n        this.setState({\r\n            pc: this.state.pc\r\n        });\r\n    }\r\n\r\n    private changeValue(source: any, field: string, value: any) {\r\n        source[field] = value;\r\n\r\n        this.setState({\r\n            pc: this.state.pc\r\n        });\r\n    }\r\n\r\n    private nudgeValue(source: any, field: string, delta: number) {\r\n        const value = source[field] + delta;\r\n        this.changeValue(source, field, value);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const companions = this.state.pc.companions.map(comp => (\r\n                <div className='row companion' key={comp.id}>\r\n                    <div className='columns small-12 medium-8 large-8'>\r\n                        <input\r\n                            type='text'\r\n                            value={comp.name}\r\n                            onChange={event => this.changeValue(comp, 'name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div className='columns small-12 medium-4 large-4'>\r\n                        <button onClick={() => this.removeCompanion(comp.id)}>delete</button>\r\n                    </div>\r\n                </div>\r\n            ));\r\n\r\n            if (companions.length === 0) {\r\n                companions.push(\r\n                    <div className='section' key='empty'>\r\n                        <i>no companions (pets, retainers, mounts, etc)</i>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='pc-editor'>\r\n                    <div className='row section'>\r\n                        <div className='columns small-12 medium-6 large-6'>\r\n                            <div className='subheading'>character name:</div>\r\n                            <input\r\n                                type='text'\r\n                                value={this.state.pc.name}\r\n                                onChange={event => this.changeValue(this.state.pc, 'name', event.target.value)}\r\n                            />\r\n                            <div className='subheading'>player name:</div>\r\n                            <input\r\n                                type='text'\r\n                                value={this.state.pc.player}\r\n                                onChange={event => this.changeValue(this.state.pc, 'player', event.target.value)}\r\n                            />\r\n                            <div className='subheading'>race:</div>\r\n                            <input\r\n                                type='text'\r\n                                value={this.state.pc.race}\r\n                                onChange={event => this.changeValue(this.state.pc, 'race', event.target.value)}\r\n                            />\r\n                            <div className='subheading'>class:</div>\r\n                            <input\r\n                                type='text'\r\n                                value={this.state.pc.classes}\r\n                                onChange={event => this.changeValue(this.state.pc, 'classes', event.target.value)}\r\n                            />\r\n                            <div className='subheading'>level:</div>\r\n                            <Spin\r\n                                source={this.state.pc}\r\n                                name='level'\r\n                                nudgeValue={delta => this.nudgeValue(this.state.pc, 'level', delta)}\r\n                            />\r\n                            <div className='subheading'>passive skills</div>\r\n                            <Spin\r\n                                source={this.state.pc}\r\n                                name='passiveInsight'\r\n                                label='insight'\r\n                                nudgeValue={delta => this.nudgeValue(this.state.pc, 'passiveInsight', delta)}\r\n                            />\r\n                            <Spin\r\n                                source={this.state.pc}\r\n                                name='passiveInvestigation'\r\n                                label='investigation'\r\n                                nudgeValue={delta => this.nudgeValue(this.state.pc, 'passiveInvestigation', delta)}\r\n                            />\r\n                            <Spin\r\n                                source={this.state.pc}\r\n                                name='passivePerception'\r\n                                label='perception'\r\n                                nudgeValue={delta => this.nudgeValue(this.state.pc, 'passivePerception', delta)}\r\n                            />\r\n                        </div>\r\n                        <div className='columns small-12 medium-6 large-6'>\r\n                            <div className='subheading'>languages:</div>\r\n                            <input\r\n                                type='text'\r\n                                value={this.state.pc.languages}\r\n                                onChange={event => this.changeValue(this.state.pc, 'languages', event.target.value)}\r\n                            />\r\n                            <div className='subheading'>d&d beyond link:</div>\r\n                            <input\r\n                                type='text'\r\n                                value={this.state.pc.url}\r\n                                placeholder='https://ddb.ac/characters/...'\r\n                                onChange={event => this.changeValue(this.state.pc, 'url', event.target.value)}\r\n                            />\r\n                            <div className='subheading'>companions:</div>\r\n                            {companions}\r\n                            <button onClick={() => this.addCompanion()}>add a new companion</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport pkg from '../../../../package.json';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    //\r\n}\r\n\r\nexport default class AboutModule extends React.Component<Props> {\r\n    public render() {\r\n        /* tslint:disable:max-line-length */\r\n        return (\r\n            <div>\r\n                <div className='section'>dojo by <a href='mailto:andy.aiken@live.co.uk'>andy aiken</a></div>\r\n                <div className='section'>version <b>{pkg.version}</b></div>\r\n                <div className='section'>if you would like to contribut to this project, you can do so <a href='https://github.com/andyaiken/dojo' target='_blank' rel='noopener noreferrer'>here</a></div>\r\n                <div className='section'>dungeons and dragons copyright wizards of the coast</div>\r\n            </div>\r\n        );\r\n        /* tslint:enable:max-line-length */\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    //\r\n}\r\n\r\nexport default class OGLModule extends React.Component<Props> {\r\n    public render() {\r\n        /* tslint:disable:max-line-length */\r\n        return (\r\n            <div>\r\n                <div className='heading'>open game license</div>\r\n                <div className='section'>The following text is the property of Wizards of the Coast, Inc. and is Copyright 2000 Wizards of the Coast, Inc ('Wizards'). All Rights Reserved.</div>\r\n                <ol>\r\n                    <li>Definitions: (a)'Contributors' means the copyright and/or trademark owners who have contributed Open Game Content; (b)'Derivative Material' means copyrighted material including derivative works and translations (including into other computer languages), potation, modification, correction, addition, extension, upgrade, improvement, compilation, abridgment or other form in which an existing work may be recast, transformed or adapted; (c) 'Distribute' means to reproduce, license, rent, lease, sell, broadcast, publicly display, transmit or otherwise distribute; (d)'Open Game Content' means the game mechanic and includes the methods, procedures, processes and routines to the extent such content does not embody the Product Identity and is an enhancement over the prior art and any additional content clearly identified as Open Game Content by the Contributor, and means any work covered by this License, including translations and derivative works under copyright law, but specifically excludes Product Identity. (e) 'Product Identity' means product and product line names, logos and identifying marks including trade dress; artifacts; creatures characters; stories, storylines, plots, thematic elements, dialogue, incidents, language, artwork, symbols, designs, depictions, likenesses, formats, poses, concepts, themes and graphic, photographic and other visual or audio representations; names and descriptions of characters, spells, enchantments, personalities, teams, personas, likenesses and special abilities; places, locations, environments, creatures, equipment, magical or supernatural abilities or effects, logos, symbols, or graphic designs; and any other trademark or registered trademark clearly identified as Product identity by the owner of the Product Identity, and which specifically excludes the Open Game Content; (f) 'Trademark' means the logos, names, mark, sign, motto, designs that are used by a Contributor to identify itself or its products or the associated products contributed to the Open Game License by the Contributor (g) 'Use', 'Used' or 'Using' means to use, Distribute, copy, edit, format, modify, translate and otherwise create Derivative Material of Open Game Content. (h) 'You' or 'Your' means the licensee in terms of this agreement.</li>\r\n                    <li>The License: This License applies to any Open Game Content that contains a notice indicating that the Open Game Content may only be Used under and in terms of this License. You must affix such a notice to any Open Game Content that you Use. No terms may be added to or subtracted from this License except as described by the License itself. No other terms or conditions may be applied to any Open Game Content distributed using this License.</li>\r\n                    <li>Offer and Acceptance: By Using the Open Game Content You indicate Your acceptance of the terms of this License.</li>\r\n                    <li>Grant and Consideration: In consideration for agreeing to use this License, the Contributors grant You a perpetual, worldwide, royalty-free, non-exclusive license with the exact terms of this License to Use, the Open Game Content.</li>\r\n                    <li>Representation of Authority to Contribute: If You are contributing original material as Open Game Content, You represent that Your Contributions are Your original creation and/or You have sufficient rights to grant the rights conveyed by this License.</li>\r\n                    <li>Notice of License Copyright: You must update the COPYRIGHT NOTICE portion of this License to include the exact text of the COPYRIGHT NOTICE of any Open Game Content You are copying, modifying or distributing, and You must add the title, the copyright date, and the copyright holder's name to the COPYRIGHT NOTICE of any original Open Game Content you Distribute.</li>\r\n                    <li>Use of Product Identity: You agree not to Use any Product Identity, including as an indication as to compatibility, except as expressly licensed in another, independent Agreement with the owner of each element of that Product Identity. You agree not to indicate compatibility or co-adaptability with any Trademark or Registered Trademark in conjunction with a work containing Open Game Content except as expressly licensed in another, independent Agreement with the owner of such Trademark or Registered Trademark. The use of any Product Identity in Open Game Content does not constitute a challenge to the ownership of that Product Identity. The owner of any Product Identity used in Open Game Content shall retain all rights, title and interest in and to that Product Identity.</li>\r\n                    <li>Identification: If you distribute Open Game Content You must clearly indicate which portions of the work that you are distributing are Open Game Content.</li>\r\n                    <li>Updating the License: Wizards or its designated Agents may publish updated versions of this License. You may use any authorized version of this License to copy, modify and distribute any Open Game Content originally distributed under any version of this License.</li>\r\n                    <li>Copy of this License: You MUST include a copy of this License with every copy of the Open Game Content You Distribute.</li>\r\n                    <li>Use of Contributor Credits: You may not market or advertise the Open Game Content using the name of any Contributor unless You have written permission from the Contributor to do so.</li>\r\n                    <li>Inability to Comply: If it is impossible for You to comply with any of the terms of this License with respect to some or all of the Open Game Content due to statute, judicial order, or governmental regulation then You may not Use any Open Game Material so affected.</li>\r\n                    <li>Termination: This License will terminate automatically if You fail to comply with all terms herein and fail to cure such breach within 30 days of becoming aware of the breach. All sublicenses shall survive the termination of this License.</li>\r\n                    <li>Reformation: If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable.</li>\r\n                    <li>COPYRIGHT NOTICE Open Game License v 1.0 Copyright 2000, Wizards of the Coast, Inc.</li>\r\n                </ol>\r\n            </div>\r\n        );\r\n        /* tslint:enable:max-line-length */\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport ConfirmButton from '../../controls/confirm-button';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    resetAll: () => void;\r\n}\r\n\r\nexport default class OptionsModule extends React.Component<Props> {\r\n    public render() {\r\n        return (\r\n            <div>\r\n                <ConfirmButton text='clear all data' callback={() => this.props.resetAll()} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Selector from '../controls/selector';\r\nimport AboutModule from './about/about-module';\r\nimport OGLModule from './about/ogl-module';\r\nimport OptionsModule from './about/options-module';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    resetAll: () => void;\r\n}\r\n\r\ninterface State {\r\n    view: string;\r\n}\r\n\r\nexport default class AboutTool extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            view: 'about'\r\n        };\r\n    }\r\n\r\n    private setView(view: string) {\r\n        this.setState({\r\n            view: view\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        const options = [\r\n            {\r\n                id: 'about',\r\n                text: 'about'\r\n            },\r\n            {\r\n                id: 'ogl',\r\n                text: 'ogl'\r\n            },\r\n            {\r\n                id: 'options',\r\n                text: 'options'\r\n            }\r\n        ];\r\n\r\n        let content = null;\r\n        switch (this.state.view) {\r\n            case 'about':\r\n                content = (\r\n                    <AboutModule />\r\n                );\r\n                break;\r\n            case 'ogl':\r\n                content = (\r\n                    <OGLModule />\r\n                );\r\n                break;\r\n            case 'options':\r\n                content = (\r\n                    <OptionsModule resetAll={() => this.props.resetAll()} />\r\n                );\r\n                break;\r\n        }\r\n\r\n        return (\r\n            <div className='about'>\r\n                <Selector\r\n                    options={options}\r\n                    selectedID={this.state.view}\r\n                    select={optionID => this.setView(optionID)}\r\n                />\r\n                <div className='divider' />\r\n                {content}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../../utils/utils';\r\n\r\nimport Checkbox from '../../controls/checkbox';\r\nimport ControlRow from '../../controls/control-row';\r\nimport Selector from '../../controls/selector';\r\nimport Spin from '../../controls/spin';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    //\r\n}\r\n\r\ninterface State {\r\n    dice: string;\r\n    count: number;\r\n    options: string[];\r\n    rolls: number[] | null;\r\n    result: number | null;\r\n}\r\n\r\nexport default class DieRollerModule extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            dice: '20',\r\n            count: 1,\r\n            options: [],\r\n            rolls: null,\r\n            result: null\r\n        };\r\n    }\r\n\r\n    private setDice(dice: string) {\r\n        this.setState({\r\n            dice: dice\r\n        });\r\n    }\r\n\r\n    private nudgeCount(delta: number) {\r\n        this.setState({\r\n            count: Math.max(1, this.state.count + delta)\r\n        });\r\n    }\r\n\r\n    private toggleOption(option: string) {\r\n        if (this.state.options.includes(option)) {\r\n            // Remove option\r\n            const index = this.state.options.indexOf(option);\r\n            this.state.options.splice(index, 1);\r\n        } else {\r\n            // Add option\r\n            this.state.options.push(option);\r\n            // Make sure we don't have both advantage and disadvantage\r\n            if (this.state.options.includes('advantage') && this.state.options.includes('disadvantage')) {\r\n                const index = this.state.options.indexOf(option === 'advantage' ? 'disadvantage' : 'advantage');\r\n                this.state.options.splice(index, 1);\r\n            }\r\n        }\r\n        this.setState({\r\n            options: this.state.options\r\n        });\r\n    }\r\n\r\n    private roll() {\r\n        const sides = parseInt(this.state.dice, 10);\r\n\r\n        const rolls: number[] = [];\r\n        let count = this.state.count;\r\n        if (this.state.options.includes('advantage') || this.state.options.includes('disadvantage')) {\r\n            count = 2;\r\n        }\r\n        for (let n = 0; n !== count; ++n) {\r\n            rolls.push(Utils.dieRoll(sides));\r\n        }\r\n        rolls.sort((a, b) => a - b);\r\n\r\n        let result = 0;\r\n        if (this.state.options.includes('advantage')) {\r\n            result = Math.max(...rolls);\r\n        } else if (this.state.options.includes('disadvantage')) {\r\n            result = Math.min(...rolls);\r\n        } else {\r\n            rolls.forEach(roll => result += roll);\r\n            if (this.state.options.includes('drop lowest')) {\r\n                result -= Math.min(...rolls);\r\n            }\r\n            if (this.state.options.includes('drop highest')) {\r\n                result -= Math.max(...rolls);\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            rolls: rolls,\r\n            result: result\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        const options = [\r\n            {\r\n                id: '4',\r\n                text: 'd4'\r\n            },\r\n            {\r\n                id: '6',\r\n                text: 'd6'\r\n            },\r\n            {\r\n                id: '8',\r\n                text: 'd8'\r\n            },\r\n            {\r\n                id: '10',\r\n                text: 'd10'\r\n            },\r\n            {\r\n                id: '12',\r\n                text: 'd12'\r\n            },\r\n            {\r\n                id: '20',\r\n                text: 'd20'\r\n            },\r\n            {\r\n                id: '100',\r\n                text: 'd100'\r\n            }\r\n        ];\r\n\r\n        let optionsSection = null;\r\n        if ((this.state.dice === '20') && (this.state.count === 1)) {\r\n            optionsSection = (\r\n                <ControlRow\r\n                    controls={[\r\n                        <Checkbox\r\n                            key='advantage'\r\n                            label='advantage'\r\n                            checked={this.state.options.includes('advantage')}\r\n                            changeValue={value => this.toggleOption('advantage')}\r\n                        />,\r\n                        <Checkbox\r\n                            key='disadvantage'\r\n                            label='disadvantage'\r\n                            checked={this.state.options.includes('disadvantage')}\r\n                            changeValue={value => this.toggleOption('disadvantage')}\r\n                        />\r\n                    ]}\r\n                />\r\n            );\r\n        } else if (this.state.count > 1) {\r\n            optionsSection = (\r\n                <ControlRow\r\n                    controls={[\r\n                        <Checkbox\r\n                            key='drop-lowest'\r\n                            label='drop lowest'\r\n                            checked={this.state.options.includes('drop lowest')}\r\n                            changeValue={value => this.toggleOption('drop lowest')}\r\n                        />,\r\n                        <Checkbox\r\n                            key='drop-highest'\r\n                            label='drop highest'\r\n                            checked={this.state.options.includes('drop highest')}\r\n                            changeValue={value => this.toggleOption('drop highest')}\r\n                        />\r\n                    ]}\r\n                />\r\n            );\r\n        }\r\n\r\n        let rollsSection = null;\r\n        if ((this.state.rolls !== null) && (this.state.rolls.length > 1)) {\r\n            rollsSection = (\r\n                <div className='section die-rolls'>{this.state.rolls.join(', ')}</div>\r\n            );\r\n        }\r\n\r\n        let resultSection = null;\r\n        if (this.state.result !== null) {\r\n            resultSection = (\r\n                <div className='section die-result'>{this.state.result}</div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className='die-roller'>\r\n                <div className='subheading'>die type</div>\r\n                <Selector\r\n                    options={options}\r\n                    selectedID={this.state.dice}\r\n                    select={optionID => this.setDice(optionID)}\r\n                />\r\n                <div className='subheading'>number of dice to roll</div>\r\n                <Spin\r\n                    source={this.state}\r\n                    name='count'\r\n                    display={count => count + 'd' + this.state.dice}\r\n                    nudgeValue={delta => this.nudgeCount(delta)}\r\n                />\r\n                {optionsSection ? <div className='subheading'>options</div> : null}\r\n                {optionsSection}\r\n                <div className='divider' />\r\n                <button onClick={() => this.roll()}>roll dice</button>\r\n                {rollsSection}\r\n                {resultSection}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import Utils from './utils';\r\n\r\ninterface ModelLine {\r\n    prev: string;\r\n    freq: ModelChar[];\r\n}\r\n\r\ninterface ModelChar {\r\n    char: string;\r\n    count: number;\r\n}\r\n\r\nexport default class Shakespeare {\r\n\r\n    private static model: ModelLine[] = [];\r\n    private static maxLength: number = 0;\r\n\r\n    public static initModel(sources: string[]) {\r\n        const model: ModelLine[] = [];\r\n        let maxLength: number = 0;\r\n\r\n        sources.forEach(source => {\r\n            const lines = source.split(/\\r?\\n/);\r\n            lines.forEach(line => {\r\n                if (line) {\r\n                    Shakespeare.addLineToModel(line, model);\r\n                    maxLength = Math.max(maxLength, line.length);\r\n                }\r\n            });\r\n        });\r\n\r\n        Shakespeare.model = model;\r\n        Shakespeare.maxLength = maxLength;\r\n    }\r\n\r\n    private static addLineToModel(line: string, model: ModelLine[]) {\r\n        line = String.fromCharCode(0, 1) + line + String.fromCharCode(2);\r\n\r\n        for (let index = 2; index !== line.length; ++index) {\r\n            const prev = line.substr(index - 2, 2);\r\n            const char = line.substr(index, 1);\r\n\r\n            let item = model.find(x => x.prev === prev);\r\n            if (!item) {\r\n                item = {\r\n                    prev: prev,\r\n                    freq: []\r\n                };\r\n                model.push(item);\r\n            }\r\n\r\n            let freq = item.freq.find(x => x.char === char);\r\n            if (!freq) {\r\n                freq = {\r\n                    char: char,\r\n                    count: 0\r\n                };\r\n                item.freq.push(freq);\r\n            }\r\n\r\n            freq.count += 1;\r\n        }\r\n    }\r\n\r\n    public static generate(requiredResults: number): { line: string, fit: number }[] {\r\n        const lines: { line: string, fit: number }[] = [];\r\n        const allowedFailures = 100;\r\n        let failures = 0;\r\n\r\n        while ((lines.length < requiredResults) && (failures < allowedFailures)) {\r\n            const line = Shakespeare.extractLine();\r\n            if (line && !lines.map(l => l.line).includes(line) && line.length <= Shakespeare.maxLength) {\r\n                const fit = Shakespeare.fit(line);\r\n                lines.push({ line, fit });\r\n            } else {\r\n                failures += 1;\r\n            }\r\n        }\r\n\r\n        return lines;\r\n    }\r\n\r\n    private static extractLine() {\r\n        let line = String.fromCharCode(0, 1);\r\n\r\n        while (true) {\r\n            const prev = line.substr(line.length - 2, 2);\r\n\r\n            const item = Shakespeare.model.find(x => x.prev === prev);\r\n            if (item) {\r\n                let candidates = '';\r\n                item.freq.forEach(freq => {\r\n                    candidates += freq.char.repeat(freq.count);\r\n                });\r\n\r\n                const index = Math.floor(Math.random() * candidates.length);\r\n                let char = candidates[index];\r\n                if (char === String.fromCharCode(2)) {\r\n                    line = line.substr(2);\r\n                    return line;\r\n                } else {\r\n                    if (Utils.dieRoll() === 1) {\r\n                        // TODO: Mutate choice\r\n                        const groups = ['bdg', 'ptk', 'sz', 'aeiouy', 'lr', 'ckq', 'vf'];\r\n                        groups.forEach(g => {\r\n                            if (g.includes(char)) {\r\n                                const n = Math.floor(Math.random() * g.length);\r\n                                char = g[n];\r\n                            }\r\n                        });\r\n                    }\r\n                    line += char;\r\n                }\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n\r\n    private static fit(text: string): number {\r\n        text = String.fromCharCode(0, 1) + text + String.fromCharCode(2);\r\n\r\n        const values: number[] = [];\r\n        for (let n = 2; n !== text.length; ++n) {\r\n            const prev = text.substr(n - 2, 2);\r\n            const ch = text[n];\r\n\r\n            const line = Shakespeare.model.find(m => m.prev === prev);\r\n            if (line) {\r\n                const mc = line.freq.find(f => f.char === ch);\r\n                if (mc) {\r\n                    const maxCount = line.freq.reduce((max, value) => Math.max(max, value.count), 0);\r\n                    const fit = mc.count / maxCount;\r\n                    values.push(fit);\r\n                } else {\r\n                    values.push(0);\r\n                }\r\n            }\r\n        }\r\n\r\n        return values.reduce((sum, value) => sum + value, 0) / values.length;\r\n    }\r\n}\r\n","export default class Ustinov {\r\n    public static async say(text: string, languages: string[]) {\r\n        // If we're  already saying something, stop it\r\n        window.speechSynthesis.cancel();\r\n\r\n        const utterance = new SpeechSynthesisUtterance(text);\r\n        utterance.voice = await Ustinov.chooseVoice(languages);\r\n        utterance.rate = Ustinov.randomValue(0.5, 1.5);\r\n        utterance.pitch = Ustinov.randomValue(0.5, 1.5);\r\n\r\n        window.speechSynthesis.speak(utterance);\r\n    }\r\n\r\n    private static async chooseVoice(languages: string[]) {\r\n        const voices = await Ustinov.getVoices();\r\n\r\n        // Get language codes for the selected languages\r\n        const langCodes = languages.map(lang => Ustinov.getLanguageCode(lang));\r\n\r\n        // Filter voice list by these language codes\r\n        let candidates = voices.filter(v => langCodes.includes(v.lang.substr(0, 2)));\r\n        if (candidates.length === 0) {\r\n            candidates = voices.filter(v => v.default);\r\n        }\r\n        if (candidates.length === 0) {\r\n            candidates = voices;\r\n        }\r\n\r\n        const index = Math.floor(Math.random() * candidates.length);\r\n        return candidates[index];\r\n    }\r\n\r\n    private static getVoices() {\r\n        return new Promise<SpeechSynthesisVoice[]>(resolve => {\r\n            let list = window.speechSynthesis.getVoices();\r\n            if (list.length > 0) {\r\n                resolve(list);\r\n                return;\r\n            }\r\n            speechSynthesis.onvoiceschanged = () => {\r\n                list = window.speechSynthesis.getVoices();\r\n                resolve(list);\r\n            };\r\n        });\r\n    }\r\n\r\n    private static getLanguageCode(language: string) {\r\n        switch (language) {\r\n            case 'armenian':\r\n                return 'hy';\r\n            case 'basque':\r\n                return 'eu';\r\n            case 'bulgarian':\r\n                return 'bg';\r\n            case 'chichewa':\r\n                return 'ny';\r\n            case 'chinese':\r\n                return 'zh';\r\n            case 'croatian':\r\n                return 'hr';\r\n            case 'czech':\r\n                return 'cs';\r\n            case 'dutch':\r\n                return 'nl';\r\n            case 'german':\r\n                return 'de';\r\n            case 'greek':\r\n                return 'el';\r\n            case 'icelandic':\r\n                return 'is';\r\n            case 'irish':\r\n                return 'ga';\r\n            case 'kannada':\r\n                return 'kn';\r\n            case 'kazakh':\r\n                return 'kk';\r\n            case 'latvian':\r\n                return 'lv';\r\n            case 'lithuanian':\r\n                return 'lt';\r\n            case 'macedonian':\r\n                return 'mk';\r\n            case 'malay':\r\n                return 'ms';\r\n            case 'maltese':\r\n                return 'mt';\r\n            case 'maori':\r\n                return 'mi';\r\n            case 'polish':\r\n                return 'pl';\r\n            case 'portuguese':\r\n                return 'pt';\r\n            case 'punjabi':\r\n                return 'pa';\r\n            case 'samoan':\r\n                return 'sm';\r\n            case 'serbian':\r\n                return 'sr';\r\n            case 'shona':\r\n                return 'sn';\r\n            case 'spanish':\r\n                return 'es';\r\n            case 'swedish':\r\n                return 'sv';\r\n            case 'turkish':\r\n                return 'tr';\r\n            case 'welsh':\r\n                return 'cy';\r\n            default:\r\n                return language.substr(0, 2);\r\n        }\r\n    }\r\n\r\n    private static randomValue(min: number, max: number) {\r\n        const x = (Math.random() + Math.random() + Math.random()) / 3;\r\n        const range = max - min;\r\n        return min + (x * range);\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Shakespeare from '../../../utils/shakespeare';\r\nimport Ustinov from '../../../utils/ustinov';\r\n\r\nimport Checkbox from '../../controls/checkbox';\r\nimport ControlRow from '../../controls/control-row';\r\nimport Expander from '../../controls/expander';\r\nimport Selector from '../../controls/selector';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    //\r\n}\r\n\r\ninterface State {\r\n    sources: { [id: string]: string; };\r\n    output: string[];\r\n}\r\n\r\ninterface Preset {\r\n    name: string;\r\n    languages: string[];\r\n}\r\n\r\nexport default class LanguageModule extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            sources: {},\r\n            output: []\r\n        };\r\n    }\r\n\r\n    private getLanguages(): string[] {\r\n        // Note: When adding a language to this list, also check the Speech.getLanguageCode() method\r\n        return [\r\n            'afrikaans',\r\n            'amharic',\r\n            'armenian',\r\n            'basque',\r\n            'belarusian',\r\n            'bulgarian',\r\n            'chichewa',\r\n            'chinese',\r\n            'croatian',\r\n            'czech',\r\n            'danish',\r\n            'dutch',\r\n            'english',\r\n            'finnish',\r\n            'french',\r\n            'german',\r\n            'greek',\r\n            'hawaiian',\r\n            'hindi',\r\n            'hungarian',\r\n            'icelandic',\r\n            'irish',\r\n            'italian',\r\n            'japanese',\r\n            'kannada',\r\n            'kazakh',\r\n            'korean',\r\n            'kyrgyz',\r\n            'latvian',\r\n            'lithuanian',\r\n            'macedonian',\r\n            'malay',\r\n            'maltese',\r\n            'maori',\r\n            'myanmar',\r\n            'nepali',\r\n            'norwegian',\r\n            'polish',\r\n            'portuguese',\r\n            'punjabi',\r\n            'romanian',\r\n            'russian',\r\n            'samoan',\r\n            'serbian',\r\n            'shona',\r\n            'somali',\r\n            'spanish',\r\n            'swahili',\r\n            'swedish',\r\n            'thai',\r\n            'turkish',\r\n            'welsh',\r\n            'yiddish',\r\n            'zulu'\r\n        ];\r\n    }\r\n\r\n    private getPresets(): Preset[] {\r\n        return [\r\n            {\r\n                name: 'draconic',\r\n                languages: ['armenian', 'irish', 'maltese']\r\n            },\r\n            {\r\n                name: 'dwarvish',\r\n                languages: ['czech', 'german', 'yiddish']\r\n            },\r\n            {\r\n                name: 'elvish',\r\n                languages: ['finnish', 'spanish', 'welsh']\r\n            },\r\n            {\r\n                name: 'goblin',\r\n                languages: ['hawaiian', 'kyrgyz', 'somali']\r\n            },\r\n            {\r\n                name: 'orc',\r\n                languages: ['macedonian', 'russian', 'turkish']\r\n            }\r\n        ];\r\n    }\r\n\r\n    private async addLanguage(language: string) {\r\n        const response = await fetch('./data/langs/' + language + '.txt');\r\n        this.state.sources[language] = await response.text();\r\n        this.setState({\r\n            sources: this.state.sources\r\n        });\r\n    }\r\n\r\n    private removeLanguage(language: string) {\r\n        delete this.state.sources[language];\r\n        this.setState({\r\n            sources: this.state.sources\r\n        });\r\n    }\r\n\r\n    private usePreset(presetName: string) {\r\n        const preset = this.getPresets().find(p => p.name === presetName);\r\n        if (preset) {\r\n            this.setState({\r\n                sources: {},\r\n                output: []\r\n            }, () => {\r\n                preset.languages.forEach(lang => {\r\n                    this.addLanguage(lang);\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    private random() {\r\n        const languages = this.getLanguages();\r\n\r\n        const selection: string[] = [];\r\n        while (selection.length !== 3) {\r\n            const n = Math.floor(Math.random() * languages.length);\r\n            const lang = languages[n];\r\n            if (!selection.includes(lang)) {\r\n                selection.push(lang);\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            sources: {},\r\n            output: []\r\n        }, () => {\r\n            selection.forEach(lang => {\r\n                this.addLanguage(lang);\r\n            });\r\n        });\r\n    }\r\n\r\n    private generate() {\r\n        const sources: string[] = [];\r\n        Object.keys(this.state.sources).forEach(key => {\r\n            const src = this.state.sources[key];\r\n            sources.push(src);\r\n        });\r\n        Shakespeare.initModel(sources);\r\n        this.setState({\r\n            output: Shakespeare.generate(5).map(l => l.line)\r\n        });\r\n    }\r\n\r\n    private reset() {\r\n        this.setState({\r\n            sources: {},\r\n            output: []\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        const presetOptions = this.getPresets().map(p => {\r\n            return {\r\n                id: p.name,\r\n                text: p.name\r\n            };\r\n        });\r\n\r\n        let selectedPreset = '';\r\n        this.getPresets().forEach(p => {\r\n            const selected = Object.keys(this.state.sources).sort().join(', ');\r\n            const setting = p.languages.sort().join(', ');\r\n            if (selected === setting) {\r\n                selectedPreset = p.name;\r\n            }\r\n        });\r\n\r\n        let selectedLanguages = Object.keys(this.state.sources).sort().join(', ');\r\n        if (selectedLanguages === '') {\r\n            selectedLanguages = 'none';\r\n        }\r\n\r\n        const languages = this.getLanguages()\r\n            .map(lang => {\r\n                const isSelected = Object.keys(this.state.sources).includes(lang);\r\n                return (\r\n                    <div className='column' key={lang}>\r\n                        <Checkbox\r\n                            label={lang}\r\n                            display='button'\r\n                            checked={isSelected}\r\n                            changeValue={value => value ? this.addLanguage(lang) : this.removeLanguage(lang)}\r\n                        />\r\n                    </div>\r\n                );\r\n            });\r\n\r\n        const allowGenerate = Object.keys(this.state.sources).length > 0;\r\n        const allowReset = allowGenerate || this.state.output.length > 0;\r\n\r\n        const output = [];\r\n        if (this.state.output.length > 0) {\r\n            output.push(\r\n                <div key='div' className='divider' />\r\n            );\r\n        }\r\n        for (let n = 0; n !== this.state.output.length; ++n) {\r\n            output.push(\r\n                <GeneratedText\r\n                    key={n}\r\n                    text={this.state.output[n]}\r\n                    languages={Object.keys(this.state.sources)}\r\n                />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='subheading'>presets</div>\r\n                <Selector\r\n                    options={presetOptions}\r\n                    selectedID={selectedPreset}\r\n                    select={optionID => this.usePreset(optionID)}\r\n                />\r\n                <div className='divider' />\r\n                <Expander\r\n                    text={'selected languages: ' + selectedLanguages}\r\n                    content={\r\n                        <div className='row collapse small-up-1 medium-up-2 large-up-3 language-options'>\r\n                            {languages}\r\n                        </div>\r\n                    }\r\n                />\r\n                <div className='divider' />\r\n                <ControlRow\r\n                    controls={[\r\n                        <button key='generate' className={allowGenerate ? '' : 'disabled'} onClick={() => this.generate()}>generate text</button>,\r\n                        <button key='reset' className={allowReset ? '' : 'disabled'} onClick={() => this.reset()}>reset</button>,\r\n                        <button key='random' onClick={() => this.random()}>random sources</button>\r\n                    ]}\r\n                />\r\n                <div className='language-output'>\r\n                    {output}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface GeneratedTextProps {\r\n    text: string;\r\n    languages: string[];\r\n}\r\n\r\nclass GeneratedText extends React.Component<GeneratedTextProps> {\r\n    private copy(e: React.MouseEvent) {\r\n        e.preventDefault();\r\n        navigator.clipboard.writeText(this.props.text);\r\n    }\r\n\r\n    private say(e: React.MouseEvent) {\r\n        e.preventDefault();\r\n        Ustinov.say(this.props.text, this.props.languages);\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <Expander\r\n                text={this.props.text.toLowerCase()}\r\n                content={\r\n                    <div>\r\n                        <button onClick={e => this.copy(e)}>copy to clipboard</button>\r\n                        <button onClick={e => this.say(e)}>say</button>\r\n                        <div className='section'>\r\n                            <b>note:</b> speech may not work consistently on all platforms\r\n                        </div>\r\n                    </div>\r\n                }\r\n            />\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Shakespeare from '../../../utils/shakespeare';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    //\r\n}\r\n\r\ninterface State {\r\n    output: {\r\n        male: string[],\r\n        female: string[],\r\n        surname: string[]\r\n    };\r\n}\r\n\r\nexport default class NameModule extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            output: {\r\n                male: [],\r\n                female: [],\r\n                surname: []\r\n            }\r\n        };\r\n    }\r\n\r\n    private async generate(type: 'male' | 'female' | 'surname') {\r\n        const response = await fetch('./data/names/' + type + '.txt');\r\n        const input = await response.text();\r\n\r\n        Shakespeare.initModel([input]);\r\n        const names = Shakespeare.generate(10).map(n => n.line).sort();\r\n\r\n        this.state.output[type] = names;\r\n        this.setState({\r\n            output: this.state.output\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        const male = [];\r\n        for (let n = 0; n !== this.state.output.male.length; ++n) {\r\n            male.push(\r\n                <div key={n} className='section'>\r\n                    {this.state.output.male[n].toLowerCase()}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        const female = [];\r\n        for (let n = 0; n !== this.state.output.female.length; ++n) {\r\n            female.push(\r\n                <div key={n} className='section'>\r\n                    {this.state.output.female[n].toLowerCase()}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        const surname = [];\r\n        for (let n = 0; n !== this.state.output.surname.length; ++n) {\r\n            surname.push(\r\n                <div key={n} className='section'>\r\n                    {this.state.output.surname[n].toLowerCase()}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='name-output'>\r\n                    <div className='row'>\r\n                        <div className='columns small-4 medium-4 large-4'>\r\n                            <div className='heading'>male names</div>\r\n                            <button onClick={() => this.generate('male')}>generate</button>\r\n                            {male}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4'>\r\n                            <div className='heading'>female names</div>\r\n                            <button onClick={() => this.generate('female')}>generate</button>\r\n                            {female}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4'>\r\n                            <div className='heading'>surnames</div>\r\n                            <button onClick={() => this.generate('surname')}>generate</button>\r\n                            {surname}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Selector from '../controls/selector';\r\nimport DieRollerModule from './dm/die-roller-module';\r\nimport LanguageModule from './dm/language-module';\r\nimport NameModule from './dm/name-module';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    //\r\n}\r\n\r\ninterface State {\r\n    view: string;\r\n}\r\n\r\nexport default class DMTool extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            view: 'die'\r\n        };\r\n    }\r\n\r\n    private setView(view: string) {\r\n        this.setState({\r\n            view: view\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        const options = [\r\n            {\r\n                id: 'die',\r\n                text: 'die roller'\r\n            },\r\n            {\r\n                id: 'language',\r\n                text: 'language generator'\r\n            },\r\n            {\r\n                id: 'name',\r\n                text: 'name generator'\r\n            }\r\n        ];\r\n\r\n        let content = null;\r\n        switch (this.state.view) {\r\n            case 'die':\r\n                content = (\r\n                    <DieRollerModule />\r\n                );\r\n                break;\r\n            case 'language':\r\n                content = (\r\n                    <LanguageModule />\r\n                );\r\n                break;\r\n            case 'name':\r\n                content = (\r\n                    <NameModule />\r\n                );\r\n                break;\r\n        }\r\n\r\n        return (\r\n            <div className='tools'>\r\n                <Selector\r\n                    options={options}\r\n                    selectedID={this.state.view}\r\n                    select={optionID => this.setView(optionID)}\r\n                />\r\n                <div className='divider' />\r\n                {content}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport ellipsis from '../../resources/icons/ellipsis.svg';\r\n\r\ninterface Props {\r\n    loaded: boolean;\r\n}\r\n\r\nexport default class LoadingWrapper extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            if (this.props.loaded) {\r\n                return this.props.children;\r\n            }\r\n\r\n            return (\r\n                <div className='loading-wrapper'>\r\n                    <img className='rotate-forever' src={ellipsis} alt='loading' />\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Showdown from 'showdown';\r\n\r\nimport LoadingWrapper from '../../controls/loading-wrapper';\r\n\r\nconst showdown = new Showdown.Converter();\r\nshowdown.setOption('tables', true);\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    //\r\n}\r\n\r\ninterface State {\r\n    source: string | null;\r\n}\r\n\r\nexport default class ActionsModule extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            source: null\r\n        };\r\n    }\r\n\r\n    private async fetchData() {\r\n        const response = await fetch('./data/actions.md');\r\n        const text = await response.text();\r\n        this.setState({\r\n            source: text\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        if (!this.state.source) {\r\n            this.fetchData();\r\n        }\r\n\r\n        return (\r\n            <LoadingWrapper loaded={this.state.source !== null}>\r\n                <div dangerouslySetInnerHTML={{ __html: showdown.makeHtml(this.state.source || '') }} />\r\n            </LoadingWrapper>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Showdown from 'showdown';\r\n\r\nimport LoadingWrapper from '../../controls/loading-wrapper';\r\n\r\nconst showdown = new Showdown.Converter();\r\nshowdown.setOption('tables', true);\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    //\r\n}\r\n\r\ninterface State {\r\n    source: string | null;\r\n}\r\n\r\nexport default class ConditionsModule extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            source: null\r\n        };\r\n    }\r\n\r\n    private async fetchData() {\r\n        const response = await fetch('./data/conditions.md');\r\n        const text = await response.text();\r\n        this.setState({\r\n            source: text\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        if (!this.state.source) {\r\n            this.fetchData();\r\n        }\r\n\r\n        return (\r\n            <LoadingWrapper loaded={this.state.source !== null}>\r\n                <div dangerouslySetInnerHTML={{ __html: showdown.makeHtml(this.state.source || '') }} />\r\n            </LoadingWrapper>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Showdown from 'showdown';\r\n\r\nimport LoadingWrapper from '../../controls/loading-wrapper';\r\n\r\nconst showdown = new Showdown.Converter();\r\nshowdown.setOption('tables', true);\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    //\r\n}\r\n\r\ninterface State {\r\n    source: string | null;\r\n}\r\n\r\nexport default class SkillsModule extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            source: null\r\n        };\r\n    }\r\n\r\n    private async fetchData() {\r\n        const response = await fetch('./data/skills.md');\r\n        const text = await response.text();\r\n        this.setState({\r\n            source: text\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        if (!this.state.source) {\r\n            this.fetchData();\r\n        }\r\n\r\n        return (\r\n            <LoadingWrapper loaded={this.state.source !== null}>\r\n                <div dangerouslySetInnerHTML={{ __html: showdown.makeHtml(this.state.source || '') }} />\r\n            </LoadingWrapper>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Selector from '../controls/selector';\r\nimport ActionsModule from './reference/actions-module';\r\nimport ConditionsModule from './reference/conditions-module';\r\nimport SkillsModule from './reference/skills-module';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    //\r\n}\r\n\r\ninterface State {\r\n    view: string;\r\n}\r\n\r\nexport default class ReferenceTool extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            view: 'skills'\r\n        };\r\n    }\r\n\r\n    private setView(view: string) {\r\n        this.setState({\r\n            view: view\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        const options = [\r\n            {\r\n                id: 'skills',\r\n                text: 'skills'\r\n            },\r\n            {\r\n                id: 'conditions',\r\n                text: 'conditions'\r\n            },\r\n            {\r\n                id: 'actions',\r\n                text: 'actions'\r\n            }\r\n        ];\r\n\r\n        let content = null;\r\n        switch (this.state.view) {\r\n            case 'skills':\r\n                content = (\r\n                    <SkillsModule />\r\n                );\r\n                break;\r\n            case 'conditions':\r\n                content = (\r\n                    <ConditionsModule />\r\n                );\r\n                break;\r\n            case 'actions':\r\n                content = (\r\n                    <ActionsModule />\r\n                );\r\n                break;\r\n        }\r\n\r\n        return (\r\n            <div className='reference'>\r\n                <Selector\r\n                    options={options}\r\n                    selectedID={this.state.view}\r\n                    select={optionID => this.setView(optionID)}\r\n                />\r\n                <div className='divider' />\r\n                {content}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Selector from '../controls/selector';\r\nimport AboutTool from '../tools/about-tool';\r\nimport DMTool from '../tools/dm-tool';\r\nimport ReferenceTool from '../tools/reference-tool';\r\n\r\ninterface Props {\r\n    resetAll: () => void;\r\n}\r\n\r\ninterface State {\r\n    view: string;\r\n}\r\n\r\nexport default class ToolsSidebar extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            view: 'ref'\r\n        };\r\n    }\r\n\r\n    private setView(view: string) {\r\n        this.setState({\r\n            view: view\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const options = [\r\n                {\r\n                    id: 'ref',\r\n                    text: 'reference'\r\n                },\r\n                {\r\n                    id: 'dm',\r\n                    text: 'dm tools'\r\n                },\r\n                {\r\n                    id: 'about',\r\n                    text: 'about'\r\n                }\r\n            ];\r\n\r\n            let content = null;\r\n            switch (this.state.view) {\r\n                case 'ref':\r\n                    content = <ReferenceTool />;\r\n                    break;\r\n                case 'dm':\r\n                    content = <DMTool />;\r\n                    break;\r\n                case 'about':\r\n                    content = <AboutTool resetAll={() => this.props.resetAll()} />;\r\n                    break;\r\n            }\r\n\r\n            return (\r\n                <div className='about'>\r\n                    <Selector\r\n                        tabs={true}\r\n                        options={options}\r\n                        selectedID={this.state.view}\r\n                        select={optionID => this.setView(optionID)}\r\n                    />\r\n                    {content}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Encounter } from '../../models/encounter';\r\nimport { MonsterGroup } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\ninterface Props {\r\n    view: string;\r\n    blur: boolean;\r\n    library: MonsterGroup[];\r\n    parties: Party[];\r\n    encounters: Encounter[];\r\n    setView: (view: string) => void;\r\n}\r\n\r\nexport default class Navbar extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const partiesStyle = this.props.view === 'parties' ? 'navigator-item selected' : 'navigator-item';\r\n            const libraryStyle = this.props.view === 'library' ? 'navigator-item selected' : 'navigator-item';\r\n            let encounterStyle = this.props.view === 'encounter' ? 'navigator-item selected' : 'navigator-item';\r\n            const mapStyle = this.props.view === 'maps' ? 'navigator-item selected' : 'navigator-item';\r\n            let combatStyle = this.props.view === 'combat' ? 'navigator-item selected' : 'navigator-item';\r\n\r\n            const encountersEnabled = this.props.library.length !== 0;\r\n            const combatEnabled = (this.props.parties.length !== 0) && (this.props.encounters.length !== 0);\r\n            if (!encountersEnabled) {\r\n                encounterStyle += ' disabled';\r\n            }\r\n            if (!combatEnabled) {\r\n                combatStyle += ' disabled';\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.blur ? 'navbar blur' : 'navbar'}>\r\n                    <div className={partiesStyle} onClick={() => this.props.setView('parties')}>player characters</div>\r\n                    <div className={libraryStyle} onClick={() => this.props.setView('library')}>monster library</div>\r\n                    <div className={encounterStyle} onClick={() => encountersEnabled ? this.props.setView('encounter') : null}>encounter builder</div>\r\n                    <div className={mapStyle} onClick={() => this.props.setView('maps')}>map folios</div>\r\n                    <div className={combatStyle} onClick={() => combatEnabled ? this.props.setView('combat') : null}>combat manager</div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport cog from '../../resources/icons/settings.svg';\r\n\r\ninterface Props {\r\n    actions: JSX.Element | null;\r\n    blur: boolean;\r\n    openHome: () => void;\r\n    openTools: () => void;\r\n}\r\n\r\nexport default class Titlebar extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div className={this.props.blur ? 'titlebar blur' : 'titlebar'}>\r\n                    <div className='app-name' onClick={() => this.props.openHome()}>dojo</div>\r\n                    {this.props.actions}\r\n                    <img className='tools-icon' src={cog} title='tools' alt='tools' onClick={() => this.props.openTools()} />\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport ellipsis from '../../resources/icons/ellipsis.svg';\r\n\r\ninterface Props {\r\n    text: string;\r\n    content: JSX.Element;\r\n    disabled: boolean;\r\n}\r\n\r\ninterface State {\r\n    open: boolean;\r\n}\r\n\r\nexport default class Menu extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            open: false\r\n        };\r\n    }\r\n\r\n    private toggleOpen(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        this.setState({\r\n            open: !this.state.open\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = this.props.disabled ? 'menu disabled' : 'menu';\r\n            const content = [];\r\n\r\n            content.push(\r\n                <div key='selection' className='menu-top'>\r\n                    <div className='menu-text'>{this.props.text}</div>\r\n                    <img className='arrow' src={ellipsis} alt='arrow' />\r\n                </div>\r\n            );\r\n\r\n            if (this.state.open) {\r\n                style += ' open';\r\n\r\n                content.push(\r\n                    <div key='options' className='menu-content'>\r\n                        {this.props.content}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={style} onClick={e => this.toggleOpen(e)}>\r\n                    {content}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Factory from '../utils/factory';\r\nimport Frankenstein from '../utils/frankenstein';\r\nimport Mercator from '../utils/mercator';\r\nimport Napoleon from '../utils/napoleon';\r\nimport Utils from '../utils/utils';\r\n\r\nimport { Combat, Combatant, CombatSetup, Notification } from '../models/combat';\r\nimport { Condition } from '../models/condition';\r\nimport { Encounter, EncounterSlot, EncounterWave, MonsterFilter } from '../models/encounter';\r\nimport { Map, MapFolio } from '../models/map-folio';\r\nimport { Monster, MonsterGroup } from '../models/monster-group';\r\nimport { Party, PC } from '../models/party';\r\n\r\nimport CombatManagerScreen from './screens/combat-manager-screen';\r\nimport EncounterBuilderScreen from './screens/encounter-builder-screen';\r\nimport HomeScreen from './screens/home-screen';\r\nimport MapFoliosScreen from './screens/map-folios-screen';\r\nimport MonsterLibraryScreen from './screens/monster-library-screen';\r\nimport PartiesScreen from './screens/parties-screen';\r\n\r\nimport AddCombatantsModal from './modals/add-combatants-modal';\r\nimport CombatStartModal from './modals/combat-start-modal';\r\nimport ConditionModal from './modals/condition-modal';\r\nimport DemographicsSidebar from './modals/demographics-sidebar';\r\nimport MapEditorModal from './modals/map-editor-modal';\r\nimport MonsterEditorModal from './modals/monster-editor-modal';\r\nimport PCEditorModal from './modals/pc-editor-modal';\r\nimport ToolsSidebar from './modals/tools-sidebar';\r\n\r\nimport Navbar from './panels/navbar';\r\nimport Titlebar from './panels/titlebar';\r\n\r\nimport Checkbox from './controls/checkbox';\r\nimport Menu from './controls/menu';\r\n\r\nimport close from '../resources/icons/x.svg';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    // No props; this is the root component\r\n}\r\n\r\ninterface State {\r\n    view: string;\r\n    modal: any;\r\n    filter: string;\r\n\r\n    parties: Party[];\r\n    library: MonsterGroup[];\r\n    encounters: Encounter[];\r\n    mapFolios: MapFolio[];\r\n    combats: Combat[];\r\n\r\n    selectedPartyID: string | null;\r\n    selectedMonsterGroupID: string | null;\r\n    selectedEncounterID: string | null;\r\n    selectedMapFolioID: string | null;\r\n    selectedCombatID: string | null;\r\n}\r\n\r\nexport default class Dojo extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            view: 'home',\r\n            modal: null,\r\n            filter: '',\r\n            parties: [],\r\n            library: [],\r\n            encounters: [],\r\n            mapFolios: [],\r\n            combats: [],\r\n            selectedPartyID: null,\r\n            selectedMonsterGroupID: null,\r\n            selectedEncounterID: null,\r\n            selectedMapFolioID: null,\r\n            selectedCombatID: null\r\n        };\r\n\r\n        try {\r\n            let data: State | null = null;\r\n\r\n            try {\r\n                const json = window.localStorage.getItem('data');\r\n                if (json) {\r\n                    data = JSON.parse(json);\r\n                }\r\n            } catch (ex) {\r\n                console.error('Could not parse JSON: ', ex);\r\n                data = null;\r\n            }\r\n\r\n            if (data !== null) {\r\n                data.parties.forEach(p => {\r\n                    p.pcs.forEach(pc => {\r\n                        if (pc.companions === undefined) {\r\n                            pc.companions = [];\r\n                        }\r\n                    });\r\n                });\r\n                data.library.forEach(g => {\r\n                    g.monsters.forEach(m => {\r\n                        m.traits.forEach(t => {\r\n                            if (t.uses === undefined) {\r\n                                t.uses = 0;\r\n                            }\r\n                        });\r\n                    });\r\n                });\r\n\r\n                data.encounters.forEach(enc => {\r\n                    if (!enc.waves) {\r\n                        enc.waves = [];\r\n                    }\r\n                });\r\n\r\n                if (!data.mapFolios) {\r\n                    data.mapFolios = [];\r\n                    data.selectedMapFolioID = null;\r\n                }\r\n\r\n                data.mapFolios.forEach(folio => {\r\n                    folio.maps.forEach(map => {\r\n                        map.items.forEach(item => {\r\n                            if (item.style === undefined) {\r\n                                item.style = null;\r\n                            }\r\n                        });\r\n                    });\r\n                });\r\n\r\n                data.combats.forEach(combat => {\r\n                    if (!combat.notifications) {\r\n                        combat.notifications = [];\r\n                    }\r\n                    combat.combatants.forEach(c => {\r\n                        if (c.showOnMap === undefined) {\r\n                            c.showOnMap = true;\r\n                        }\r\n\r\n                        if (c.altitude === undefined) {\r\n                            c.altitude = 0;\r\n                        }\r\n\r\n                        if (c.tags === undefined) {\r\n                            c.tags = [];\r\n                        }\r\n\r\n                        if (c.aura === undefined) {\r\n                            c.aura = { radius: 0, style: 'rounded', color: '#005080' };\r\n                        }\r\n\r\n                        if (c.type === 'monster') {\r\n                            const m = c as Combatant & Monster;\r\n                            m.traits.forEach(t => {\r\n                                if (t.uses === undefined) {\r\n                                    t.uses = 0;\r\n                                }\r\n                            });\r\n                        }\r\n                    });\r\n                });\r\n\r\n                data.view = 'home';\r\n                data.modal = null;\r\n                data.filter = '';\r\n\r\n                this.state = data;\r\n            }\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n\r\n    public componentDidUpdate() {\r\n        let json = null;\r\n        try {\r\n            json = JSON.stringify(this.state);\r\n        } catch (ex) {\r\n            console.error('Could not stringify data: ', ex);\r\n            json = null;\r\n        }\r\n\r\n        if (json !== null) {\r\n            window.localStorage.setItem('data', json);\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Party screen\r\n\r\n    private addParty() {\r\n        const party = Factory.createParty();\r\n        party.name = 'new party';\r\n        const parties: Party[] = ([] as Party[]).concat(this.state.parties, [party]);\r\n        Utils.sort(parties);\r\n        this.setState({\r\n            parties: parties,\r\n            selectedPartyID: party.id\r\n        });\r\n    }\r\n\r\n    private removeParty() {\r\n        const party = this.state.parties.find(p => p.id === this.state.selectedPartyID);\r\n        if (party) {\r\n            const index = this.state.parties.indexOf(party);\r\n            this.state.parties.splice(index, 1);\r\n            this.setState({\r\n                parties: this.state.parties,\r\n                selectedPartyID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private addPC() {\r\n        const party = this.state.parties.find(p => p.id === this.state.selectedPartyID);\r\n        if (party) {\r\n            const pc = Factory.createPC();\r\n            pc.name = 'new pc';\r\n            party.pcs.push(pc);\r\n            this.setState({\r\n                parties: this.state.parties\r\n            });\r\n        }\r\n    }\r\n\r\n    private removePC(pc: PC) {\r\n        const party = this.state.parties.find(p => p.id === this.state.selectedPartyID);\r\n        if (party) {\r\n            const index = party.pcs.indexOf(pc);\r\n            party.pcs.splice(index, 1);\r\n            this.setState({\r\n                parties: this.state.parties\r\n            });\r\n        }\r\n    }\r\n\r\n    private sortPCs() {\r\n        const party = this.state.parties.find(p => p.id === this.state.selectedPartyID);\r\n        if (party) {\r\n            Utils.sort(party.pcs);\r\n            this.setState({\r\n                parties: this.state.parties\r\n            });\r\n        }\r\n    }\r\n\r\n    private editPC(pc: PC) {\r\n        const copy = JSON.parse(JSON.stringify(pc));\r\n        this.setState({\r\n            modal: {\r\n                type: 'pc',\r\n                pc: copy\r\n            }\r\n        });\r\n    }\r\n\r\n    private savePC() {\r\n        Utils.sort(this.state.modal.pc.companions);\r\n        const party = this.state.parties.find(p => p.id === this.state.selectedPartyID);\r\n        if (party) {\r\n            const original = party.pcs.find(pc => pc.id === this.state.modal.pc.id);\r\n            if (original) {\r\n                const index = party.pcs.indexOf(original);\r\n                party.pcs[index] = this.state.modal.pc;\r\n                this.setState({\r\n                    library: this.state.library,\r\n                    modal: null\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Library screen\r\n\r\n    private addMonsterGroup() {\r\n        const group = Factory.createMonsterGroup();\r\n        group.name = 'new group';\r\n        const library = ([] as MonsterGroup[]).concat(this.state.library, [group]);\r\n        Utils.sort(library);\r\n        this.setState({\r\n            library: library,\r\n            selectedMonsterGroupID: group.id\r\n        });\r\n    }\r\n\r\n    private removeMonsterGroup() {\r\n        const group = this.state.library.find(g => g.id === this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            const index = this.state.library.indexOf(group);\r\n            this.state.library.splice(index, 1);\r\n            this.setState({\r\n                library: this.state.library,\r\n                selectedMonsterGroupID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private addMonster() {\r\n        const monster = Factory.createMonster();\r\n        monster.name = 'new monster';\r\n        const group = this.state.library.find(g => g.id === this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            group.monsters.push(monster);\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    private removeMonster(monster: Monster) {\r\n        const group = this.state.library.find(g => g.id === this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            const index = group.monsters.indexOf(monster);\r\n            group.monsters.splice(index, 1);\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    private sortMonsters() {\r\n        const group = this.state.library.find(g => g.id === this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            Utils.sort(group.monsters);\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    private moveToGroup(monster: Monster, groupID: string) {\r\n        const sourceGroup = this.state.library.find(group => group.monsters.includes(monster));\r\n        if (sourceGroup) {\r\n            const index = sourceGroup.monsters.indexOf(monster);\r\n            sourceGroup.monsters.splice(index, 1);\r\n\r\n            const group = this.state.library.find(g => g.id === groupID);\r\n            if (group) {\r\n                group.monsters.push(monster);\r\n                Utils.sort(group.monsters);\r\n\r\n                this.setState({\r\n                    library: this.state.library\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private editMonster(monster: Monster) {\r\n        const copy = JSON.parse(JSON.stringify(monster));\r\n        this.setState({\r\n            modal: {\r\n                type: 'monster',\r\n                monster: copy,\r\n                showSidebar: false\r\n            }\r\n        });\r\n    }\r\n\r\n    private saveMonster() {\r\n        const group = this.state.library.find(g => g.id === this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            const original = group.monsters.find(m => m.id === this.state.modal.monster.id);\r\n            if (original) {\r\n                // We are editing a monster\r\n                const index = group.monsters.indexOf(original);\r\n                group.monsters[index] = this.state.modal.monster;\r\n                this.setState({\r\n                    library: this.state.library,\r\n                    modal: null\r\n                });\r\n            } else {\r\n                // We are adding a new monster\r\n                group.monsters.push(this.state.modal.monster);\r\n                this.setState({\r\n                    library: this.state.library,\r\n                    modal: null\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private toggleShowSidebar() {\r\n        // eslint-disable-next-line\r\n        this.state.modal.showSidebar = !this.state.modal.showSidebar;\r\n        this.setState({\r\n            modal: this.state.modal\r\n        });\r\n    }\r\n\r\n    private openDemographics() {\r\n        this.setState({\r\n            modal: {\r\n                type: 'demographics'\r\n            }\r\n        });\r\n    }\r\n\r\n    private cloneMonster(monster: Monster, name: string) {\r\n        const group = this.state.library.find(g => g.monsters.includes(monster));\r\n        if (group) {\r\n            const clone = Frankenstein.clone(monster, name);\r\n            group.monsters.push(clone);\r\n            Utils.sort(group.monsters);\r\n\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    private addOpenGameContent() {\r\n        fetch('./data/monsters.json')\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                json.forEach((data: any) => {\r\n                    try {\r\n                        if (data.name) {\r\n                            const monster = Frankenstein.createFromJSON(data);\r\n\r\n                            let groupName = monster.tag || monster.category;\r\n                            if (groupName.indexOf('swarm') === 0) {\r\n                                groupName = 'swarm';\r\n                            }\r\n                            if (groupName === 'any race') {\r\n                                groupName = 'npc';\r\n                            }\r\n\r\n                            let group = this.state.library.find(p => p.name === groupName);\r\n                            if (!group) {\r\n                                group = {\r\n                                    id: Utils.guid(),\r\n                                    name: groupName,\r\n                                    monsters: []\r\n                                };\r\n                                this.state.library.push(group);\r\n                            }\r\n                            group.monsters.push(monster);\r\n                        }\r\n                    } catch (e) {\r\n                        console.error(e);\r\n                    }\r\n                });\r\n\r\n                Utils.sort(this.state.library);\r\n\r\n                this.setState({\r\n                    view: 'library',\r\n                    library: this.state.library\r\n                });\r\n            });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Encounter screen\r\n\r\n    private addEncounter() {\r\n        const encounter = Factory.createEncounter();\r\n        encounter.name = 'new encounter';\r\n        const encounters = ([] as Encounter[]).concat(this.state.encounters, [encounter]);\r\n        Utils.sort(encounters);\r\n\r\n        this.setState({\r\n            encounters: encounters,\r\n            selectedEncounterID: encounter.id\r\n        });\r\n    }\r\n\r\n    private clearEncounter() {\r\n        const encounter = this.state.encounters.find(e => e.id === this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            encounter.slots = [];\r\n            encounter.waves = [];\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters\r\n            });\r\n        }\r\n    }\r\n\r\n    private removeEncounter() {\r\n        const encounter = this.state.encounters.find(e => e.id === this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            const index = this.state.encounters.indexOf(encounter);\r\n            this.state.encounters.splice(index, 1);\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters,\r\n                selectedEncounterID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private buildEncounter(xp: number, filter: MonsterFilter) {\r\n        const encounter = this.state.encounters.find(e => e.id === this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            encounter.slots = [];\r\n            encounter.waves = [];\r\n\r\n            Napoleon.buildEncounter(encounter, xp, filter, this.state.library, (monsterName, groupName) => this.getMonster(monsterName, groupName));\r\n            this.sortEncounterSlots(encounter);\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters\r\n            });\r\n        }\r\n    }\r\n\r\n    private addEncounterSlot(monster: Monster, waveID: string | null) {\r\n        const group = this.state.library.find(g => g.monsters.includes(monster));\r\n        if (group) {\r\n            const slot = Factory.createEncounterSlot();\r\n            slot.monsterGroupName = group.name;\r\n            slot.monsterName = monster.name;\r\n            const encounter = this.state.encounters.find(e => e.id === this.state.selectedEncounterID);\r\n            if (encounter) {\r\n                if (waveID !== null) {\r\n                    const wave = encounter.waves.find(w => w.id === waveID);\r\n                    if (wave) {\r\n                        wave.slots.push(slot);\r\n                        this.sortEncounterSlots(wave);\r\n                    }\r\n                } else {\r\n                    encounter.slots.push(slot);\r\n                    this.sortEncounterSlots(encounter);\r\n                }\r\n\r\n                this.setState({\r\n                    encounters: this.state.encounters\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeEncounterSlot(slot: EncounterSlot, waveID: string | null) {\r\n        const encounter = this.state.encounters.find(e => e.id === this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            if (waveID) {\r\n                const wave = encounter.waves.find(w => w.id === waveID);\r\n                if (wave) {\r\n                    const index = wave.slots.indexOf(slot);\r\n                    wave.slots.splice(index, 1);\r\n                }\r\n            } else {\r\n                const n = encounter.slots.indexOf(slot);\r\n                encounter.slots.splice(n, 1);\r\n            }\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters\r\n            });\r\n        }\r\n    }\r\n\r\n    private sortEncounterSlots(slotContainer: { slots: EncounterSlot[] }) {\r\n        slotContainer.slots.sort((a, b) => {\r\n            const aName = a.monsterName.toLowerCase();\r\n            const bName = b.monsterName.toLowerCase();\r\n            if (aName < bName) { return -1; }\r\n            if (aName > bName) { return 1; }\r\n            return 0;\r\n        });\r\n    }\r\n\r\n    private addWaveToEncounter() {\r\n        const encounter = this.state.encounters.find(e => e.id === this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            const wave = Factory.createEncounterWave();\r\n            wave.name = 'wave ' + (encounter.waves.length + 2);\r\n            encounter.waves.push(wave);\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters\r\n            });\r\n        }\r\n    }\r\n\r\n    private removeWave(wave: EncounterWave) {\r\n        const encounter = this.state.encounters.find(e => e.id === this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            const index = encounter.waves.indexOf(wave);\r\n            encounter.waves.splice(index, 1);\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters\r\n            });\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Map screen\r\n\r\n    private addMapFolio() {\r\n        const folio = Factory.createMapFolio();\r\n        folio.name = 'new folio';\r\n        const folios = ([] as MapFolio[]).concat(this.state.mapFolios, [folio]);\r\n        Utils.sort(folios);\r\n\r\n        this.setState({\r\n            mapFolios: folios,\r\n            selectedMapFolioID: folio.id\r\n        });\r\n    }\r\n\r\n    private removeMapFolio() {\r\n        const folio = this.state.mapFolios.find(f => f.id === this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            const index = this.state.mapFolios.indexOf(folio);\r\n            this.state.mapFolios.splice(index, 1);\r\n\r\n            this.setState({\r\n                mapFolios: this.state.mapFolios,\r\n                selectedMapFolioID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private addMap() {\r\n        const folio = this.state.mapFolios.find(f => f.id === this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            const map = Factory.createMap();\r\n            map.name = 'new map';\r\n            folio.maps.push(map);\r\n\r\n            this.setState({\r\n                mapFolios: this.state.mapFolios\r\n            });\r\n        }\r\n    }\r\n\r\n    private editMap(map: Map) {\r\n        const copy = JSON.parse(JSON.stringify(map));\r\n        this.setState({\r\n            modal: {\r\n                type: 'map',\r\n                map: copy\r\n            }\r\n        });\r\n    }\r\n\r\n    private saveMap() {\r\n        const folio = this.state.mapFolios.find(f => f.id === this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            const original = folio.maps.find(m => m.id === this.state.modal.map.id);\r\n            if (original) {\r\n                const index = folio.maps.indexOf(original);\r\n                folio.maps[index] = this.state.modal.map;\r\n                this.setState({\r\n                    mapFolios: this.state.mapFolios,\r\n                    modal: null\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeMap(map: Map) {\r\n        const folio = this.state.mapFolios.find(f => f.id === this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            const index = folio.maps.indexOf(map);\r\n            folio.maps.splice(index, 1);\r\n            this.setState({\r\n                mapFolios: this.state.mapFolios\r\n            });\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Combat screen\r\n\r\n    private createCombat() {\r\n        const party = this.state.parties.length === 1 ? this.state.parties[0] : null;\r\n        const encounter = this.state.encounters.length === 1 ? this.state.encounters[0] : null;\r\n\r\n        const setup = Factory.createCombatSetup();\r\n        setup.partyID = party ? party.id : null;\r\n        setup.encounterID = encounter ? encounter.id : null;\r\n        if (encounter) {\r\n            setup.monsterNames = Utils.getMonsterNames(encounter);\r\n        }\r\n\r\n        this.setState({\r\n            modal: {\r\n                type: 'combat-start',\r\n                combatSetup: setup\r\n            }\r\n        });\r\n    }\r\n\r\n    private startCombat() {\r\n        const combatSetup: CombatSetup = this.state.modal.combatSetup;\r\n        const party = this.state.parties.find(p => p.id === combatSetup.partyID);\r\n        const encounter = this.state.encounters.find(e => e.id === combatSetup.encounterID);\r\n        if (party && encounter) {\r\n            const partyName = party.name || 'unnamed party';\r\n            const encounterName = encounter.name || 'unnamed encounter';\r\n\r\n            const combat = Factory.createCombat();\r\n            combat.name = partyName + ' vs ' + encounterName;\r\n            combat.encounterID = encounter.id;\r\n\r\n            // Add a copy of each PC to the encounter\r\n            party.pcs.filter(pc => pc.active).forEach(pc => {\r\n                this.addPCToCombat(pc, combat);\r\n            });\r\n\r\n            encounter.slots.forEach(slot => {\r\n                const monster = this.getMonster(slot.monsterName, slot.monsterGroupName);\r\n                if (monster) {\r\n                    const groupInitRoll = Utils.dieRoll();\r\n\r\n                    for (let n = 0; n !== slot.count; ++n) {\r\n                        let displayName = null;\r\n                        if (combatSetup.monsterNames) {\r\n                            const slotNames = combatSetup.monsterNames.find(names => names.id === slot.id);\r\n                            if (slotNames) {\r\n                                displayName = slotNames.names[n];\r\n                            }\r\n                        }\r\n\r\n                        this.addMonsterToCombat(monster, combat, displayName, combatSetup.encounterInitMode, groupInitRoll);\r\n                    }\r\n                } else {\r\n                    combat.issues.push('unknown monster: ' + slot.monsterName + ' in group ' + slot.monsterGroupName);\r\n                }\r\n            });\r\n\r\n            this.sortCombatants(combat);\r\n\r\n            if (combatSetup.folioID && combatSetup.mapID) {\r\n                const folio = this.state.mapFolios.find(f => f.id === combatSetup.folioID);\r\n                if (folio) {\r\n                    const map = folio.maps.find(m => m.id === combatSetup.mapID);\r\n                    if (map) {\r\n                        combat.map = JSON.parse(JSON.stringify(map));\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.setState({\r\n                combats: ([] as Combat[]).concat(this.state.combats, [combat]),\r\n                selectedCombatID: combat.id,\r\n                modal: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private addPCToCombat(pc: PC, combat: Combat) {\r\n        const combatant = JSON.parse(JSON.stringify(pc));\r\n\r\n        combatant.current = false;\r\n        combatant.pending = true;\r\n        combatant.active = false;\r\n        combatant.defeated = false;\r\n\r\n        combatant.displayName = pc.name;\r\n        combatant.displaySize = 'medium';\r\n        combatant.showOnMap = true;\r\n        combatant.initiative = 10;\r\n        combatant.hp = null;\r\n        combatant.conditions = [];\r\n        combatant.tags = [];\r\n        combatant.altitude = 0;\r\n        combatant.aura = { radius: 0, style: 'rounded', color: '#005080' };\r\n\r\n        combat.combatants.push(combatant);\r\n    }\r\n\r\n    private addMonsterToCombat(\r\n        monster: Monster,\r\n        combat: Combat, displayName: string | null = null,\r\n        initMode: 'manual' | 'individual' | 'group' = 'individual',\r\n        groupInitRoll: number = 0) {\r\n\r\n        const combatant = JSON.parse(JSON.stringify(monster));\r\n        combatant.id = Utils.guid();\r\n\r\n        switch (initMode) {\r\n            case 'group':\r\n                combatant.initiative = Utils.modifierValue(monster.abilityScores.dex) + groupInitRoll;\r\n                break;\r\n            case 'individual':\r\n                combatant.initiative = Utils.modifierValue(monster.abilityScores.dex) + Utils.dieRoll();\r\n                break;\r\n            default:\r\n                combatant.initiative = 10;\r\n                break;\r\n        }\r\n\r\n        combatant.current = false;\r\n        combatant.pending = (initMode === 'manual');\r\n        combatant.active = (initMode !== 'manual');\r\n        combatant.defeated = false;\r\n\r\n        combatant.displayName = displayName;\r\n        combatant.displaySize = monster.size;\r\n        combatant.showOnMap = true;\r\n        combatant.hp = combatant.hpMax;\r\n        combatant.conditions = [];\r\n        combatant.tags = [];\r\n        combatant.altitude = 0;\r\n        combatant.aura = { radius: 0, style: 'rounded', color: '#005080' };\r\n\r\n        combat.combatants.push(combatant);\r\n    }\r\n\r\n    private openWaveModal() {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            const encounter = this.state.encounters.find(e => e.id === combat.encounterID);\r\n            if (encounter) {\r\n                const setup = Factory.createCombatSetup();\r\n                setup.encounterID = combat.encounterID;\r\n                setup.monsterNames = Utils.getMonsterNames(encounter);\r\n\r\n                this.setState({\r\n                    modal: {\r\n                        type: 'combat-wave',\r\n                        combatSetup: setup\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private addToEncounter() {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            this.setState({\r\n                modal: {\r\n                    type: 'combat-add-combatants',\r\n                    combatantSlots: [],\r\n                    combat: combat\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private addCombatantsFromModal() {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            this.state.modal.combatantSlots.forEach((slot: EncounterSlot) => {\r\n                const m = this.getMonster(slot.monsterName, slot.monsterGroupName);\r\n                if (m) {\r\n                    const roll = Utils.dieRoll();\r\n                    for (let n = 0; n !== slot.count; ++n) {\r\n                        let displayName = m.name;\r\n                        if (slot.count > 1) {\r\n                            displayName += ' ' + (n + 1);\r\n                        }\r\n                        this.addMonsterToCombat(m, combat, displayName, 'group', roll);\r\n                    }\r\n                }\r\n            });\r\n\r\n            this.sortCombatants(combat);\r\n\r\n            this.setState({\r\n                combats: this.state.combats,\r\n                modal: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private pauseCombat() {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            combat.timestamp = new Date().toLocaleString();\r\n            this.setState({\r\n                combats: this.state.combats,\r\n                selectedCombatID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private resumeCombat(combat: Combat) {\r\n        this.setState({\r\n            selectedCombatID: combat.id\r\n        });\r\n    }\r\n\r\n    private endCombat() {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            const index = this.state.combats.indexOf(combat);\r\n            this.state.combats.splice(index, 1);\r\n            this.setState({\r\n                combats: this.state.combats,\r\n                selectedCombatID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private makeCurrent(combatant: (Combatant & PC) | (Combatant & Monster) | null, newRound: boolean) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            // Handle start-of-turn conditions\r\n            combat.combatants.filter(actor => actor.conditions).forEach(actor => {\r\n                actor.conditions.forEach(c => {\r\n                    if (c.duration) {\r\n                        switch (c.duration.type) {\r\n                            case 'saves':\r\n                                // If it's my condition, and point is START, notify the user\r\n                                if (combat && combatant && (actor.id === combatant.id) && (c.duration.point === 'start')) {\r\n                                    combat.notifications.push({\r\n                                        id: Utils.guid(),\r\n                                        type: 'condition-save',\r\n                                        data: c,\r\n                                        combatant: combatant as Combatant & Monster\r\n                                    });\r\n                                }\r\n                                break;\r\n                            case 'combatant':\r\n                                // If this refers to me, and point is START, remove it\r\n                                if (combat && combatant && (c.duration.combatantID === combatant.id) && (c.duration.point === 'start')) {\r\n                                    const index = actor.conditions.indexOf(c);\r\n                                    actor.conditions.splice(index, 1);\r\n                                    // Notify the user\r\n                                    combat.notifications.push({\r\n                                        id: Utils.guid(),\r\n                                        type: 'condition-end',\r\n                                        data: c,\r\n                                        combatant: combatant as Combatant & Monster\r\n                                    });\r\n                                }\r\n                                break;\r\n                            case 'rounds':\r\n                                // If it's my condition, decrement the condition\r\n                                if (combatant && (actor.id === combatant.id)) {\r\n                                    c.duration.count -= 1;\r\n                                }\r\n                                // If it's now at 0, remove it\r\n                                if (c.duration.count === 0) {\r\n                                    const n = actor.conditions.indexOf(c);\r\n                                    actor.conditions.splice(n, 1);\r\n                                    if (combat) {\r\n                                        // Notify the user\r\n                                        combat.notifications.push({\r\n                                            id: Utils.guid(),\r\n                                            type: 'condition-end',\r\n                                            data: c,\r\n                                            combatant: combatant as Combatant & Monster\r\n                                        });\r\n                                    }\r\n                                }\r\n                                break;\r\n                            default:\r\n                                // Do nothing\r\n                                break;\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n\r\n            // Handle recharging traits\r\n            if (combatant && (combatant.type === 'monster')) {\r\n                (combatant as Monster).traits\r\n                    .filter(t => (t.uses > 0) && t.usage.toLowerCase().startsWith('recharge '))\r\n                    .forEach(t => {\r\n                        combat.notifications.push({\r\n                            id: Utils.guid(),\r\n                            type: 'trait-recharge',\r\n                            data: t,\r\n                            combatant: combatant as Combatant & Monster\r\n                        });\r\n                    });\r\n                (combatant as Monster).traits\r\n                    .filter(t => t.type === 'legendary')\r\n                    .forEach(t => {\r\n                        t.uses = 0;\r\n                    });\r\n            }\r\n\r\n            combat.combatants.forEach(c => {\r\n                c.current = false;\r\n            });\r\n            if (combatant) {\r\n                combatant.current = true;\r\n            }\r\n\r\n            if (newRound) {\r\n                combat.round += 1;\r\n            }\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private makeActive(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            combatant.pending = false;\r\n            combatant.active = true;\r\n            combatant.defeated = false;\r\n\r\n            this.sortCombatants(combat);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private makeDefeated(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        combatant.pending = false;\r\n        combatant.active = false;\r\n        combatant.defeated = true;\r\n\r\n        if (combatant.type === 'monster') {\r\n            // If this monster is on the map, remove them from it\r\n            const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n            if (combat && combat.map) {\r\n                combat.map.items = combat.map.items.filter(item => item.id !== combatant.id);\r\n            }\r\n        }\r\n\r\n        if (combatant.current) {\r\n            this.endTurn(combatant);\r\n        } else {\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private addWaveToCombat() {\r\n        const combatSetup: CombatSetup = this.state.modal.combatSetup;\r\n        const encounter = this.state.encounters.find(e => e.id === combatSetup.encounterID);\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combatSetup && encounter && combat) {\r\n            const wave = encounter.waves.find(w => w.id === combatSetup.waveID);\r\n            if (wave) {\r\n                wave.slots.forEach(slot => {\r\n                    const monster = this.getMonster(slot.monsterName, slot.monsterGroupName);\r\n                    if (monster) {\r\n                        const init = parseInt(Utils.modifier(monster.abilityScores.dex), 10);\r\n                        const groupRoll = Utils.dieRoll();\r\n\r\n                        for (let n = 0; n !== slot.count; ++n) {\r\n                            const singleRoll = Utils.dieRoll();\r\n\r\n                            const combatant = JSON.parse(JSON.stringify(monster));\r\n                            combatant.id = Utils.guid();\r\n\r\n                            combatant.displayName = null;\r\n                            if (combatSetup.monsterNames) {\r\n                                const slotNames = combatSetup.monsterNames.find(names => names.id === slot.id);\r\n                                if (slotNames) {\r\n                                    combatant.displayName = slotNames.names[n];\r\n                                }\r\n                            }\r\n\r\n                            combatant.displaySize = monster.size;\r\n\r\n                            switch (combatSetup.encounterInitMode) {\r\n                                case 'manual':\r\n                                    combatant.initiative = 10;\r\n                                    break;\r\n                                case 'group':\r\n                                    combatant.initiative = init + groupRoll;\r\n                                    break;\r\n                                case 'individual':\r\n                                    combatant.initiative = init + singleRoll;\r\n                                    break;\r\n                                default:\r\n                                    // Do nothing\r\n                                    break;\r\n                            }\r\n\r\n                            combatant.showOnMap = true;\r\n                            combatant.current = false;\r\n                            combatant.pending = (this.state.modal.combatSetup.encounterInitMode === 'manual');\r\n                            combatant.active = (this.state.modal.combatSetup.encounterInitMode !== 'manual');\r\n                            combatant.defeated = false;\r\n\r\n                            combatant.hp = combatant.hpMax;\r\n                            combatant.conditions = [];\r\n                            combatant.tags = [];\r\n                            combatant.altitude = 0;\r\n                            combatant.aura = { radius: 0, style: 'rounded', color: '#005080' };\r\n\r\n                            if (combat) {\r\n                                combat.combatants.push(combatant);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (combat) {\r\n                            const issue = 'unknown monster: ' + slot.monsterName + ' in group ' + slot.monsterGroupName;\r\n                            combat.issues.push(issue);\r\n                        }\r\n                    }\r\n                });\r\n\r\n                this.sortCombatants(combat);\r\n\r\n                this.setState({\r\n                    combats: this.state.combats,\r\n                    modal: null\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeCombatant(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            const index = combat.combatants.indexOf(combatant);\r\n            combat.combatants.splice(index, 1);\r\n\r\n            if (combat.map) {\r\n                const item = combat.map.items.find(i => i.id === combatant.id);\r\n                if (item) {\r\n                    const n = combat.map.items.indexOf(item);\r\n                    combat.map.items.splice(n, 1);\r\n                }\r\n            }\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private mapAdd(combatant: ((Combatant & PC) | (Combatant & Monster)), x: number, y: number) {\r\n        const item = Factory.createMapItem();\r\n        item.id = combatant.id;\r\n        item.type = combatant.type as 'pc' | 'monster';\r\n        item.x = x;\r\n        item.y = y;\r\n        let size = 1;\r\n        if (combatant.type === 'monster') {\r\n            size = Utils.miniSize((combatant as Monster).size);\r\n        }\r\n        item.height = size;\r\n        item.width = size;\r\n\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat && combat.map) {\r\n            combat.map.items.push(item);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private mapMove(combatant: (Combatant & PC) | (Combatant & Monster), dir: string) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat && combat.map) {\r\n            const item = combat.map.items.find(i => i.id === combatant.id);\r\n            if (item) {\r\n                switch (dir) {\r\n                    case 'N':\r\n                        item.y -= 1;\r\n                        break;\r\n                    case 'NE':\r\n                        item.x += 1;\r\n                        item.y -= 1;\r\n                        break;\r\n                    case 'E':\r\n                        item.x += 1;\r\n                        break;\r\n                    case 'SE':\r\n                        item.x += 1;\r\n                        item.y += 1;\r\n                        break;\r\n                    case 'S':\r\n                        item.y += 1;\r\n                        break;\r\n                    case 'SW':\r\n                        item.x -= 1;\r\n                        item.y += 1;\r\n                        break;\r\n                    case 'W':\r\n                        item.x -= 1;\r\n                        break;\r\n                    case 'NW':\r\n                        item.x -= 1;\r\n                        item.y -= 1;\r\n                        break;\r\n                    default:\r\n                        // Do nothing\r\n                        break;\r\n                }\r\n\r\n                this.setState({\r\n                    combats: this.state.combats\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private mapRemove(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat && combat.map) {\r\n            const item = combat.map.items.find(i => i.id === combatant.id);\r\n            if (item) {\r\n                const index = combat.map.items.indexOf(item);\r\n                combat.map.items.splice(index, 1);\r\n\r\n                this.setState({\r\n                    combats: this.state.combats\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private endTurn(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            // Handle end-of-turn conditions\r\n            combat.combatants.filter(actor => actor.conditions).forEach(actor => {\r\n                actor.conditions.forEach(c => {\r\n                    if (c.duration) {\r\n                        switch (c.duration.type) {\r\n                            case 'saves':\r\n                                // If it's my condition, and point is END, notify the user\r\n                                if (combat && (actor.id === combatant.id) && (c.duration.point === 'end')) {\r\n                                    const saveNotification = Factory.createNotification();\r\n                                    saveNotification.type = 'condition-save';\r\n                                    saveNotification.data = c;\r\n                                    saveNotification.combatant = combatant as Combatant & Monster;\r\n                                    combat.notifications.push(saveNotification);\r\n                                }\r\n                                break;\r\n                            case 'combatant':\r\n                                // If this refers to me, and point is END, remove it\r\n                                if (combat && (c.duration.combatantID === combatant.id) && (c.duration.point === 'end')) {\r\n                                    const n = actor.conditions.indexOf(c);\r\n                                    actor.conditions.splice(n, 1);\r\n                                    // Notify the user\r\n                                    const endNotification = Factory.createNotification();\r\n                                    endNotification.type = 'condition-end';\r\n                                    endNotification.data = c;\r\n                                    endNotification.combatant = combatant as Combatant & Monster;\r\n                                    combat.notifications.push(endNotification);\r\n                                }\r\n                                break;\r\n                            case 'rounds':\r\n                                // We check this at the beginning of each turn, not at the end\r\n                                break;\r\n                            default:\r\n                                // Do nothing\r\n                                break;\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n\r\n            const active = combat.combatants.filter(c => {\r\n                return c.current || (!c.pending && c.active && !c.defeated);\r\n            });\r\n            if (active.length === 0) {\r\n                // There's no-one left in the fight\r\n                this.makeCurrent(null, false);\r\n            } else if ((active.length === 1) && (active[0].defeated)) {\r\n                // The only person in the fight is me, and I'm defeated\r\n                this.makeCurrent(null, false);\r\n            } else {\r\n                let index = active.indexOf(combatant) + 1;\r\n                let newRound = false;\r\n                if (index >= active.length) {\r\n                    index = 0;\r\n                    newRound = true;\r\n                }\r\n                this.makeCurrent(active[index], newRound);\r\n            }\r\n        }\r\n    }\r\n\r\n    private changeHP(combatant: Combatant & Monster, hp: number, temp: number) {\r\n        combatant.hp = hp;\r\n        combatant.hpTemp = temp;\r\n\r\n        this.setState({\r\n            combats: this.state.combats\r\n        });\r\n    }\r\n\r\n    private addCondition(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            const condition = Factory.createCondition();\r\n            condition.name = 'blinded';\r\n\r\n            this.setState({\r\n                modal: {\r\n                    type: 'condition-add',\r\n                    condition: condition,\r\n                    combatant: combatant,\r\n                    combat: combat\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private addConditionFromModal() {\r\n        this.state.modal.combatant.conditions.push(this.state.modal.condition);\r\n\r\n        this.setState({\r\n            combats: this.state.combats,\r\n            modal: null\r\n        });\r\n    }\r\n\r\n    private editCondition(combatant: (Combatant & PC) | (Combatant & Monster), condition: Condition) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            this.setState({\r\n                modal: {\r\n                    type: 'condition-edit',\r\n                    condition: condition,\r\n                    combatant: combatant,\r\n                    combat: combat\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private editConditionFromModal() {\r\n        const conditions: Condition[] = this.state.modal.combatant.conditions;\r\n        const original = conditions.find(c => c.id === this.state.modal.condition.id);\r\n        if (original) {\r\n            const index = conditions.indexOf(original);\r\n            // eslint-disable-next-line\r\n            conditions[index] = this.state.modal.condition;\r\n\r\n            this.setState({\r\n                combats: this.state.combats,\r\n                modal: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private removeCondition(combatant: (Combatant & PC) | (Combatant & Monster), conditionID: string) {\r\n        const condition = combatant.conditions.find(c => c.id === conditionID);\r\n        if (condition) {\r\n            const index = combatant.conditions.indexOf(condition);\r\n            combatant.conditions.splice(index, 1);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private sortCombatants(combat: Combat) {\r\n        combat.combatants.sort((a, b) => {\r\n            // First sort by initiative, descending\r\n            if (a.initiative && b.initiative && (a.initiative < b.initiative)) { return 1; }\r\n            if (a.initiative && b.initiative && (a.initiative > b.initiative)) { return -1; }\r\n            // Then sort by name, ascending\r\n            if (a.name < b.name) { return -1; }\r\n            if (a.name > b.name) { return 1; }\r\n            return 0;\r\n        });\r\n    }\r\n\r\n    private closeNotification(notification: Notification, removeCondition: boolean) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            const index = combat.notifications.indexOf(notification);\r\n            combat.notifications.splice(index, 1);\r\n\r\n            if (removeCondition && notification.combatant && notification.data) {\r\n                const conditionIndex = notification.combatant.conditions.indexOf(notification.data as Condition);\r\n                notification.combatant.conditions.splice(conditionIndex, 1);\r\n            }\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private toggleTag(combatant: Combatant, tag: string) {\r\n        if (combatant.tags.includes(tag)) {\r\n            combatant.tags = combatant.tags.filter(t => t !== tag);\r\n        } else {\r\n            combatant.tags.push(tag);\r\n        }\r\n\r\n        this.setState({\r\n            combats: this.state.combats\r\n        });\r\n    }\r\n\r\n    private scatterMonsters() {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat && combat.map) {\r\n            Mercator.scatterCombatants(combat);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    private setView(view: string) {\r\n        this.setState({\r\n            view: view\r\n        });\r\n    }\r\n\r\n    private openToolsSidebar() {\r\n        this.setState({\r\n            modal: {\r\n                type: 'tools-sidebar'\r\n            }\r\n        });\r\n    }\r\n\r\n    private closeModal() {\r\n        this.setState({\r\n            modal: null\r\n        });\r\n    }\r\n\r\n    private selectParty(party: Party | null) {\r\n        this.setState({\r\n            selectedPartyID: party ? party.id : null\r\n        });\r\n    }\r\n\r\n    private selectMonsterGroup(group: MonsterGroup | null) {\r\n        this.setState({\r\n            selectedMonsterGroupID: group ? group.id : null\r\n        });\r\n    }\r\n\r\n    private selectEncounter(encounter: Encounter | null) {\r\n        this.setState({\r\n            selectedEncounterID: encounter ? encounter.id : null\r\n        });\r\n    }\r\n\r\n    private selectMapFolio(mapFolio: MapFolio | null) {\r\n        this.setState({\r\n            selectedMapFolioID: mapFolio ? mapFolio.id : null\r\n        });\r\n    }\r\n\r\n    private resetAll() {\r\n        this.setState({\r\n            parties: [],\r\n            selectedPartyID: null,\r\n            library: [],\r\n            selectedMonsterGroupID: null,\r\n            encounters: [],\r\n            selectedEncounterID: null,\r\n            mapFolios: [],\r\n            selectedMapFolioID: null,\r\n            combats: [],\r\n            selectedCombatID: null\r\n        });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    private getMonster(monsterName: string, groupName: string) {\r\n        const group = this.state.library.find(p => p.name === groupName);\r\n        if (group) {\r\n            const monster = group.monsters.find(m => m.name === monsterName);\r\n            if (monster) {\r\n                return monster;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private changeValue(combatant: any, type: string, value: any) {\r\n        switch (type) {\r\n            case 'hp':\r\n                value = Math.min(value, combatant.hpMax);\r\n                value = Math.max(value, 0);\r\n                break;\r\n            case 'hpTemp':\r\n                value = Math.max(value, 0);\r\n                break;\r\n            case 'level':\r\n                value = Math.max(value, 1);\r\n                value = (combatant.player !== undefined) ? Math.min(value, 20) : Math.min(value, 6);\r\n                break;\r\n            case 'count':\r\n                value = Math.max(value, 1);\r\n                break;\r\n            case 'hitDice':\r\n                value = Math.max(value, 1);\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        const tokens = type.split('.');\r\n        let obj = combatant;\r\n        for (let n = 0; n !== tokens.length; ++n) {\r\n            const token = tokens[n];\r\n            if (n === tokens.length - 1) {\r\n                obj[token] = value;\r\n            } else {\r\n                obj = obj[token];\r\n            }\r\n        }\r\n\r\n        Utils.sort(this.state.parties);\r\n        Utils.sort(this.state.library);\r\n        Utils.sort(this.state.encounters);\r\n\r\n        if (type === 'initiative') {\r\n            if (!(combatant as Combatant).pending) {\r\n                const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n                this.sortCombatants(combat as Combat);\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            parties: this.state.parties,\r\n            library: this.state.library,\r\n            encounters: this.state.encounters,\r\n            combats: this.state.combats,\r\n            selectedPartyID: this.state.selectedPartyID,\r\n            selectedMonsterGroupID: this.state.selectedMonsterGroupID,\r\n            selectedEncounterID: this.state.selectedEncounterID,\r\n            selectedCombatID: this.state.selectedCombatID,\r\n            modal: this.state.modal\r\n        });\r\n    }\r\n\r\n    private nudgeValue(combatant: any, type: string, delta: number) {\r\n        const tokens = type.split('.');\r\n        let obj = combatant;\r\n        for (let n = 0; n !== tokens.length; ++n) {\r\n            const token = tokens[n];\r\n            if (n === tokens.length - 1) {\r\n                let value = null;\r\n                switch (token) {\r\n                    case 'challenge':\r\n                        value = Utils.nudgeChallenge(obj[token], delta);\r\n                        break;\r\n                    case 'size':\r\n                    case 'displaySize':\r\n                        value = Utils.nudgeSize(obj[token], delta);\r\n                        break;\r\n                    default:\r\n                        value = obj[token] + delta;\r\n                }\r\n                this.changeValue(combatant, type, value);\r\n            } else {\r\n                obj = obj[token];\r\n            }\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    private getActions() {\r\n        switch (this.state.view) {\r\n            case 'parties':\r\n            case 'encounter':\r\n            case 'maps':\r\n                return (\r\n                    <div className='actions'>\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='search'\r\n                                value={this.state.filter}\r\n                                onChange={event => this.changeValue(this.state, 'filter', event.target.value)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                );\r\n            case 'library':\r\n                return (\r\n                    <div className='actions'>\r\n                        <div className='section'>\r\n                            <button onClick={() => this.openDemographics()}>demographics</button>\r\n                        </div>\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='search'\r\n                                value={this.state.filter}\r\n                                onChange={event => this.changeValue(this.state, 'filter', event.target.value)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                );\r\n            case 'combat':\r\n                const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n                if (combat) {\r\n                    let xp = 0;\r\n                    let allowWave = false;\r\n                    const encounter = this.state.encounters.find(e => e.id === combat.encounterID);\r\n                    if (encounter) {\r\n                        combat.combatants.filter(c => c.type === 'monster')\r\n                            .forEach(combatant => {\r\n                                xp += Utils.experience((combatant as Combatant & Monster).challenge);\r\n                            });\r\n                        allowWave = (encounter.waves.length !== 0);\r\n                    }\r\n                    return (\r\n                        <div className='actions'>\r\n                            <div className='section'>\r\n                                <div className='text'>round: {combat.round}</div>\r\n                            </div>\r\n                            <div className='section'>\r\n                                <div className='text'>xp: {xp}</div>\r\n                            </div>\r\n                            <div className='section'>\r\n                                <Menu\r\n                                    text='add'\r\n                                    content={(\r\n                                        <div>\r\n                                            <button onClick={() => this.addToEncounter()}>add combatants</button>\r\n                                            <button onClick={() => this.openWaveModal()} className={allowWave ? '' : 'disabled'}>add wave</button>\r\n                                        </div>\r\n                                    )}\r\n                                />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <button onClick={() => this.pauseCombat()}>pause encounter</button>\r\n                            </div>\r\n                            <div className='section'>\r\n                                <button onClick={() => this.endCombat()}>end encounter</button>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                } else {\r\n                    return (\r\n                        <div className='actions'>\r\n                            <div className='section'>\r\n                                <input\r\n                                    type='text'\r\n                                    placeholder='search'\r\n                                    value={this.state.filter}\r\n                                    onChange={event => this.changeValue(this.state, 'filter', event.target.value)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private getContent() {\r\n        switch (this.state.view) {\r\n            case 'home':\r\n                return (\r\n                    <HomeScreen\r\n                        library={this.state.library}\r\n                        addOpenGameContent={() => this.addOpenGameContent()}\r\n                    />\r\n                );\r\n            case 'parties':\r\n                return (\r\n                    <PartiesScreen\r\n                        parties={this.state.parties}\r\n                        selection={this.state.parties.find(p => p.id === this.state.selectedPartyID) || null}\r\n                        filter={this.state.filter}\r\n                        selectParty={party => this.selectParty(party)}\r\n                        addParty={() => this.addParty()}\r\n                        removeParty={() => this.removeParty()}\r\n                        addPC={() => this.addPC()}\r\n                        editPC={pc => this.editPC(pc)}\r\n                        removePC={pc => this.removePC(pc)}\r\n                        sortPCs={() => this.sortPCs()}\r\n                        changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                        nudgeValue={(combatant, type, delta) => this.nudgeValue(combatant, type, delta)}\r\n                    />\r\n                );\r\n            case 'library':\r\n                return (\r\n                    <MonsterLibraryScreen\r\n                        library={this.state.library}\r\n                        selection={this.state.library.find(g => g.id === this.state.selectedMonsterGroupID) || null}\r\n                        filter={this.state.filter}\r\n                        selectMonsterGroup={group => this.selectMonsterGroup(group)}\r\n                        addMonsterGroup={() => this.addMonsterGroup()}\r\n                        removeMonsterGroup={() => this.removeMonsterGroup()}\r\n                        addMonster={() => this.addMonster()}\r\n                        removeMonster={monster => this.removeMonster(monster)}\r\n                        sortMonsters={() => this.sortMonsters()}\r\n                        changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                        nudgeValue={(combatant, type, delta) => this.nudgeValue(combatant, type, delta)}\r\n                        editMonster={combatant => this.editMonster(combatant)}\r\n                        cloneMonster={(combatant, name) => this.cloneMonster(combatant, name)}\r\n                        moveToGroup={(combatant, groupID) => this.moveToGroup(combatant, groupID)}\r\n                    />\r\n                );\r\n            case 'encounter':\r\n                return (\r\n                    <EncounterBuilderScreen\r\n                        encounters={this.state.encounters}\r\n                        selection={this.state.encounters.find(e => e.id === this.state.selectedEncounterID) || null}\r\n                        filter={this.state.filter}\r\n                        parties={this.state.parties}\r\n                        library={this.state.library}\r\n                        selectEncounter={encounter => this.selectEncounter(encounter)}\r\n                        addEncounter={() => this.addEncounter()}\r\n                        clearEncounter={() => this.clearEncounter()}\r\n                        removeEncounter={() => this.removeEncounter()}\r\n                        buildEncounter={(xp, filter) => this.buildEncounter(xp, filter)}\r\n                        addWave={() => this.addWaveToEncounter()}\r\n                        removeWave={wave => this.removeWave(wave)}\r\n                        getMonster={(monsterName, groupName) => this.getMonster(monsterName, groupName)}\r\n                        addEncounterSlot={(monster, waveID) => this.addEncounterSlot(monster, waveID)}\r\n                        removeEncounterSlot={(slot, waveID) => this.removeEncounterSlot(slot, waveID)}\r\n                        nudgeValue={(slot, type, delta) => this.nudgeValue(slot, type, delta)}\r\n                        changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                    />\r\n                );\r\n            case 'maps':\r\n                return (\r\n                    <MapFoliosScreen\r\n                        mapFolios={this.state.mapFolios}\r\n                        selection={this.state.mapFolios.find(f => f.id === this.state.selectedMapFolioID) || null}\r\n                        filter={this.state.filter}\r\n                        selectMapFolio={folio => this.selectMapFolio(folio)}\r\n                        addMapFolio={() => this.addMapFolio()}\r\n                        removeMapFolio={() => this.removeMapFolio()}\r\n                        addMap={() => this.addMap()}\r\n                        editMap={map => this.editMap(map)}\r\n                        removeMap={map => this.removeMap(map)}\r\n                        changeValue={(source, type, value) => this.changeValue(source, type, value)}\r\n                    />\r\n                );\r\n            case 'combat':\r\n                return (\r\n                    <CombatManagerScreen\r\n                        combats={this.state.combats}\r\n                        combat={this.state.combats.find(c => c.id === this.state.selectedCombatID) || null}\r\n                        filter={this.state.filter}\r\n                        createCombat={() => this.createCombat()}\r\n                        resumeEncounter={pausedCombat => this.resumeCombat(pausedCombat)}\r\n                        nudgeValue={(combatant, type, delta) => this.nudgeValue(combatant, type, delta)}\r\n                        changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                        makeCurrent={(combatant) => this.makeCurrent(combatant, false)}\r\n                        makeActive={(combatant) => this.makeActive(combatant)}\r\n                        makeDefeated={(combatant) => this.makeDefeated(combatant)}\r\n                        removeCombatant={(combatant) => this.removeCombatant(combatant)}\r\n                        addCondition={(combatant) => this.addCondition(combatant)}\r\n                        editCondition={(combatant, condition) => this.editCondition(combatant, condition)}\r\n                        removeCondition={(combatant, conditionID) => this.removeCondition(combatant, conditionID)}\r\n                        mapAdd={(combatant, x, y) => this.mapAdd(combatant, x, y)}\r\n                        mapMove={(combatant, dir) => this.mapMove(combatant, dir)}\r\n                        mapRemove={combatant => this.mapRemove(combatant)}\r\n                        endTurn={(combatant) => this.endTurn(combatant)}\r\n                        changeHP={(combatant, hp, temp) => this.changeHP(combatant, hp, temp)}\r\n                        close={(notification, removeCondition) => this.closeNotification(notification, removeCondition)}\r\n                        toggleTag={(combatant, tag) => this.toggleTag(combatant, tag)}\r\n                        scatterMonsters={() => this.scatterMonsters()}\r\n                    />\r\n                );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private getModal() {\r\n        if (this.state.modal) {\r\n            let modalSidebar = false;\r\n            let modalTitle = null;\r\n            let modalContent = null;\r\n            let modalAllowScroll = true;\r\n\r\n            const modalButtons = {\r\n                left: [] as JSX.Element[],\r\n                right: [\r\n                    <button key='close' onClick={() => this.closeModal()}>close</button>\r\n                ] as JSX.Element[]\r\n            };\r\n\r\n            switch (this.state.modal.type) {\r\n                case 'tools-sidebar':\r\n                    modalSidebar = true;\r\n                    modalContent = (\r\n                        <ToolsSidebar\r\n                            resetAll={() => this.resetAll()}\r\n                        />\r\n                    );\r\n                    modalButtons.right = [];\r\n                    break;\r\n                case 'demographics':\r\n                    modalSidebar = true;\r\n                    modalContent = (\r\n                        <DemographicsSidebar\r\n                            library={this.state.library}\r\n                        />\r\n                    );\r\n                    modalButtons.right = [];\r\n                    break;\r\n                case 'pc':\r\n                        modalTitle = 'pc editor';\r\n                        modalContent = (\r\n                            <PCEditorModal\r\n                                pc={this.state.modal.pc}\r\n                            />\r\n                        );\r\n                        modalButtons.right = [\r\n                            <button key='save' onClick={() => this.savePC()}>save</button>,\r\n                            <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                        ];\r\n                        break;\r\n                case 'monster':\r\n                    modalTitle = 'monster editor';\r\n                    modalContent = (\r\n                        <MonsterEditorModal\r\n                            monster={this.state.modal.monster}\r\n                            library={this.state.library}\r\n                            showSidebar={this.state.modal.showSidebar}\r\n                        />\r\n                    );\r\n                    modalAllowScroll = false;\r\n                    modalButtons.left = [\r\n                        (\r\n                            <Checkbox\r\n                                key='sidebar'\r\n                                label='advanced tools'\r\n                                checked={this.state.modal.showSidebar}\r\n                                changeValue={() => this.toggleShowSidebar()}\r\n                            />\r\n                        )\r\n                    ];\r\n                    modalButtons.right = [\r\n                        <button key='save' onClick={() => this.saveMonster()}>save</button>,\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                case 'map':\r\n                    modalTitle = 'map editor';\r\n                    modalContent = (\r\n                        <MapEditorModal\r\n                            map={this.state.modal.map}\r\n                        />\r\n                    );\r\n                    modalAllowScroll = false;\r\n                    modalButtons.right = [\r\n                        <button key='save' onClick={() => this.saveMap()}>save</button>,\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                case 'combat-start':\r\n                    modalTitle = 'start a new encounter';\r\n                    modalContent = (\r\n                        <CombatStartModal\r\n                            combatSetup={this.state.modal.combatSetup}\r\n                            parties={this.state.parties}\r\n                            encounters={this.state.encounters}\r\n                            mapFolios={this.state.mapFolios}\r\n                            getMonster={(monsterName, groupName) => this.getMonster(monsterName, groupName)}\r\n                            notify={() => this.setState({modal: this.state.modal})}\r\n                        />\r\n                    );\r\n                    modalAllowScroll = false;\r\n                    modalButtons.right = [\r\n                        (\r\n                            <button\r\n                                key='start encounter'\r\n                                className={this.state.modal.combatSetup.partyID && this.state.modal.combatSetup.encounterID ? '' : 'disabled'}\r\n                                onClick={() => this.startCombat()}\r\n                            >\r\n                                start encounter\r\n                            </button>\r\n                        ),\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                case 'combat-wave':\r\n                    modalTitle = 'encounter waves';\r\n                    modalContent = (\r\n                        <CombatStartModal\r\n                            combatSetup={this.state.modal.combatSetup}\r\n                            encounters={this.state.encounters}\r\n                            getMonster={(monsterName, groupName) => this.getMonster(monsterName, groupName)}\r\n                            notify={() => this.setState({modal: this.state.modal})}\r\n                        />\r\n                    );\r\n                    modalAllowScroll = false;\r\n                    modalButtons.right = [\r\n                        (\r\n                            <button\r\n                                key='add wave'\r\n                                className={this.state.modal.combatSetup.waveID !== null ? '' : 'disabled'}\r\n                                onClick={() => this.addWaveToCombat()}\r\n                            >\r\n                                add wave\r\n                            </button>\r\n                        ),\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                case 'combat-add-combatants':\r\n                        modalTitle = 'add combatants';\r\n                        modalContent = (\r\n                            <AddCombatantsModal\r\n                                combatantSlots={this.state.modal.combatantSlots}\r\n                                library={this.state.library}\r\n                            />\r\n                        );\r\n                        modalAllowScroll = false;\r\n                        modalButtons.right = [\r\n                            (\r\n                                <button\r\n                                    key='add combatants'\r\n                                    onClick={() => this.addCombatantsFromModal()}\r\n                                >\r\n                                    add combatants\r\n                                </button>\r\n                            ),\r\n                            <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                        ];\r\n                        break;\r\n                case 'condition-add':\r\n                    modalTitle = 'add a condition';\r\n                    modalContent = (\r\n                        <ConditionModal\r\n                            condition={this.state.modal.condition}\r\n                            combatant={this.state.modal.combatant}\r\n                            combat={this.state.modal.combat}\r\n                        />\r\n                    );\r\n                    modalAllowScroll = false;\r\n                    modalButtons.right = [\r\n                        <button key='add' onClick={() => this.addConditionFromModal()}>add</button>,\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                case 'condition-edit':\r\n                    modalTitle = 'edit condition';\r\n                    modalContent = (\r\n                        <ConditionModal\r\n                            condition={this.state.modal.condition}\r\n                            combatant={this.state.modal.combatant}\r\n                            combat={this.state.modal.combat}\r\n                        />\r\n                    );\r\n                    modalButtons.right = [\r\n                        <button key='save' onClick={() => this.editConditionFromModal()}>save</button>,\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                default:\r\n                    // Do nothing\r\n                    break;\r\n            }\r\n\r\n            return (\r\n                <div className='overlay' onClick={() => modalSidebar ? this.closeModal() : null}>\r\n                    <div className={modalSidebar ? 'modal sidebar' : 'modal'} onClick={e => e.stopPropagation()}>\r\n                        <div className='modal-header'>\r\n                            <div className='title'>{modalTitle}</div>\r\n                            {modalSidebar ? <img className='image' src={close} alt='close' onClick={() => this.closeModal()} /> : null}\r\n                        </div>\r\n                        <div className={modalAllowScroll ? 'modal-content scrollable' : 'modal-content'}>\r\n                            {modalContent}\r\n                        </div>\r\n                        <div className='modal-footer'>\r\n                            <div className='left'>{modalButtons.left}</div>\r\n                            <div className='right'>{modalButtons.right}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const content = this.getContent();\r\n            const actions = this.getActions();\r\n            const modal = this.getModal();\r\n\r\n            return (\r\n                <div className='dojo'>\r\n                    <Titlebar\r\n                        actions={actions}\r\n                        blur={modal !== null}\r\n                        openHome={() => this.setView('home')}\r\n                        openTools={() => this.openToolsSidebar()}\r\n                    />\r\n                    <div className={(modal === null) ? 'page-content' : 'page-content blur'}>\r\n                        {content}\r\n                    </div>\r\n                    <Navbar\r\n                        view={this.state.view}\r\n                        parties={this.state.parties}\r\n                        library={this.state.library}\r\n                        encounters={this.state.encounters}\r\n                        blur={modal !== null}\r\n                        setView={view => this.setView(view)}\r\n                    />\r\n                    {modal}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './style/css/foundation.css';\r\nimport './style/scss/app.scss';\r\nimport './style/scss/controls.scss';\r\n\r\nimport Dojo from './components/dojo';\r\n\r\nReactDOM.render(<Dojo />, document.getElementById('root'));\r\n"],"sourceRoot":""}