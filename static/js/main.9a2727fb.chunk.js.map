{"version":3,"sources":["resources/images/down-arrow-black.svg","resources/images/down-arrow.svg","resources/images/close-black.svg","resources/images/warning.svg","resources/images/ellipsis.svg","resources/images/minus.svg","resources/images/plus.svg","resources/images/checked.svg","resources/images/unchecked.svg","resources/images/settings.svg","utils/utils.ts","utils/factory.ts","models/monster-group.ts","utils/frankenstein.ts","components/cards/info-card.tsx","components/cards/information/combat-manager-card.tsx","components/controls/confirm-button.tsx","components/controls/control-row.tsx","components/controls/dropdown.tsx","components/controls/expander.tsx","components/controls/radial.tsx","components/controls/spin.tsx","components/panels/ability-score-panel.tsx","components/panels/conditions-panel.tsx","components/panels/traits-panel.tsx","components/cards/monster-card.tsx","components/cards/pc-card.tsx","components/panels/hit-point-gauge.tsx","components/panels/map-panel.tsx","components/list-items/combat-list-item.tsx","components/panels/card-group.tsx","components/screens/combat-manager-screen.tsx","components/panels/difficulty-chart-panel.tsx","components/cards/encounter-card.tsx","components/cards/error-card.tsx","components/cards/filter-card.tsx","components/cards/information/encounter-builder-card.tsx","components/cards/wave-card.tsx","components/list-items/encounter-list-item.tsx","components/screens/encounter-builder-screen.tsx","components/screens/home-screen.tsx","components/cards/information/map-folios-card.tsx","components/cards/map-card.tsx","components/cards/map-folio-card.tsx","components/list-items/map-folio-list-item.tsx","components/screens/map-folios-screen.tsx","components/cards/information/monster-library-card.tsx","components/cards/monster-group-card.tsx","components/list-items/monster-group-list-item.tsx","components/screens/monster-library-screen.tsx","components/cards/information/parties-card.tsx","components/cards/party-card.tsx","components/list-items/party-list-item.tsx","components/screens/parties-screen.tsx","components/controls/checkbox.tsx","components/controls/selector.tsx","utils/text-generation.ts","components/dm-modules/language-module.tsx","components/dm-modules/name-module.tsx","components/dm-modules/reference-module.tsx","components/modals/about-modal.tsx","components/modals/combat-start-modal.tsx","models/condition.ts","components/controls/radio-group.tsx","components/modals/condition-modal.tsx","components/modals/demographics-modal.tsx","models/map-folio.ts","components/cards/map-tile-card.tsx","components/modals/map-editor-modal.tsx","components/modals/monster-editor-modal.tsx","components/panels/navbar.tsx","components/panels/titlebar.tsx","components/modals/random-monster-modal.tsx","components/dojo.tsx","index.js"],"names":["module","exports","__webpack_require__","p","Utils","monster","library","group","this","monsterIdToGroup","id","grp","find","g","monsters","includes","filter","text","result","toLowerCase","split","forEach","token","indexOf","s4","Math","floor","random","toString","substring","collection","sort","a","b","aName","name","bName","value","count","aValue","bValue","score","mod","modifierValue","str","size","cr","parseInt","push","ac","hpMin","hpMax","attack","dmgMin","dmgMax","save","level","difficulty","type","plural","delta","condition","combat","duration","saveDuration","saveType","toUpperCase","saves","saveDC","combatantDuration","point","c","combatants","cmb","combatantID","displayName","roundsDuration","rounds","encounter","monsterNames","slots","slot","names","monsterName","n","Factory","guid","pcs","active","player","race","classes","languages","passiveInsight","passiveInvestigation","passivePerception","initiative","url","category","tag","alignment","challenge","abilityScores","dex","con","int","wis","cha","hpTemp","hitDice","damage","resist","vulnerable","immune","savingThrows","speed","skills","senses","equipment","traits","conditionImmunities","usage","uses","waves","monsterGroupName","maps","items","x","y","width","height","terrain","partyID","encounterID","waveID","folioID","mapID","encounterInitMode","map","round","notifications","issues","timestamp","data","combatant","SIZE_TYPES","CATEGORY_TYPES","TRAIT_TYPES","Frankenstein","target","field","source","tokens","length","newValue","nudgeChallenge","changeValue","hpPerDie","hitDieType","hp","trait","_this","createMonster","subtype","parseChallenge","challenge_rating","armor_class","hit_points","index","hit_dice","strength","dexterity","constitution","intelligence","wisdom","charisma","damage_resistances","damage_vulnerabilities","damage_immunities","condition_immunities","skill","special_abilities","rawTrait","buildTrait","actions","legendary_actions","openBracket","closeBracket","desc","replace","copy","JSON","parse","stringify","createTrait","traitType","splice","t1","t2","index1","index2","_this2","setRandomValue","m","t","distinct","current","d","addedIDs","copyTrait","findIndex","avg","InfoCard","heading","props","getHeading","content","getContent","react_default","createElement","className","e","console","error","React","Component","defaultProps","CombatManagerCard","info_card_InfoCard","ConfirmButton","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","pressed","setState","toggle","callback","src","warning","alt","details","onClick","perform","disabled","ex","ControlRow","style","controls","Dropdown","open","stopPropagation","optionID","select","options","selectedText","selectedID","option","o","placeholder","key","title","ellipsis","dropdown_DropdownOption","selected","toggleOpen","DropdownOption","_this3","click","Expander","expanded","arrow","Radial","dir","dir2","arguments","undefined","direction","showOut","showIn","showDiag","display","transform","padding","Spin","nudgeValue","preventDefault","minusBtns","plusBtns","factors","factor","onTouchEnd","touchEnd","reverse","minus","plus","infoWidth","label","AbilityScorePanel","showAbilityScores","edit","spin_Spin","toggleAbilityScores","modifier","ConditionsPanel","conditions","conditions_panel_ConditionPanel","nudgeConditionValue","editCondition","removeCondition","conditionID","addCondition","ConditionPanel","conditionDurationText","description","conditionText","expander_Expander","showdown","Showdown","Converter","TraitsPanel","prevTrait","nextTrait","traits_panel_TraitPanel","mode","action","removeTrait","swapTraits","traitsByType","match","list","createTraitPanel","addTrait","createSection","TraitPanel","maxUses","used","startsWith","found","markdown","dangerouslySetInnerHTML","__html","makeHtml","onChange","event","control_row_ControlRow","confirm_button_ConfirmButton","MonsterCard","showDetails","cloneName","damageOrHealing","max","min","changeHP","temp","val","sizeAndType","align","wave","_this4","some","s","die","conMod","conModStr","_this5","editMonster","setCloneName","cloneMonster","groupOptions","dropdown_Dropdown","moveToGroup","removeMonster","removeEncounterSlot","canAdd","monsterIsInWave","addEncounterSlot","selectMonster","deselectMonster","radial_Radial","mapMove","mapRemove","mapAdd","pending","defeated","removeCombatant","endTurn","makeDefeated","makeCurrent","makeActive","stats","slotSection","getHP","ability_score_panel_AbilityScorePanel","traits_panel_TraitsPanel","nudgeDamage","heal","setDamage","conditions_panel_ConditionsPanel","imageStyle","toggleDetails","PCCard","removePC","commonStatBlock","href","rel","HitPointGauge","hpCurrent","hpBloodied","hpWidth","hpTempBar","hpTempWidth","MapPanel","border","dimensions","i","minX","maxX","minY","maxY","mapDimensions","sideLength","getSideLength","left","top","getMapDimensions","grid","gridStyle","getStyle","map_panel_GridSquare","setSelectedItemID","onDoubleClick","posX","posY","addMapTile","tiles","tileStyle","map_panel_MapTile","tile","selectable","selectedItemID","thumbnail","tokenStyle","map_panel_MapToken","simple","mt","dragOverlay","showOverlay","yOver","xOver","overlayStyle","overlay","gridSquareClicked","GridSquare","doubleClick","MapTile","MapToken","initials","hpGauge","altitudeBadge","conditionsBadge","hit_point_gauge_HitPointGauge","altitude","CombatListItem","map_panel_MapPanel","setSelection","CardGroup","showCards","hidden","closeBtn","showClose","close","showToggle","toggleCards","cards","CombatManagerScreen","selectedTokenID","addingToMapID","pc_card_PCCard","setAddingToMapID","monster_card_MonsterCard","createCard","combat_manager_screen_PendingCombatantRow","setSelectedTokenID","combat_manager_screen_PCRow","combat_manager_screen_MonsterRow","showHelp","pendingHelp","concat","activeHelp","notificationSection","combat_manager_screen_NotificationPanel","notification","mapSection","addCombatantToMap","selectedCombatant","card_group_CardGroup","help","combat_manager_card_CombatManagerCard","combats","showCombat","combat_list_item_CombatListItem","resumeEncounter","createCombat","NotificationPanel","success","PendingCombatantRow","_this6","getInformationText","PCRow","_this7","notes","MonsterRow","_this8","gauge","DifficultyChartPanel","monsterCount","monsterXp","getMonster","experience","xpThresholds","diffSection","adjustedXp","experienceFactor","party","xpEasy","xpMedium","xpHard","xpDeadly","pc","pcExperience","adjustedDifficulty","small","getLeft","xp","getRight","right","EncounterCard","parties","partyOptions","difficultySection","selectParty","difficulty_chart_panel_DifficultyChartPanel","selection","addWave","removeEncounter","ErrorCard","FilterCard","showAll","sizeOptions","catOptions","cat","resetFilter","summary","challengeMin","challengeMax","toggleAll","EncounterBuilderCard","encounters","WaveCard","removeWave","EncounterListItem","EncounterBuilderScreen","changeFilterValue","error_card_ErrorCard","libraryCards","filter_card_FilterCard","nudgeFilterValue","matchMonster","enc","encounter_builder_card_EncounterBuilderCard","encounterName","showEncounter","encounter_list_item_EncounterListItem","selectEncounter","encounterCards","encounter_card_EncounterCard","getMonsterCards","card","w","waveCards","wave_card_WaveCard","addEncounter","getLibrarySection","HomeScreen","addOpenGameContent","MapFoliosCard","mapFolios","MapCard","editMap","removeMap","MapFolioCard","addMap","removeMapFolio","MapFolioListItem","matchFolio","mapFolio","MapFoliosScreen","folio","map_folios_card_MapFoliosCard","folios","f","showMapFolio","map_folio_list_item_MapFolioListItem","selectMapFolio","folioCards","map_folio_card_MapFolioCard","map_card_MapCard","addMapFolio","MonsterLibraryCard","MonsterGroupCard","addMonster","generateMonster","sortMonsters","removeMonsterGroup","MonsterGroupListItem","matchGroup","MonsterLibraryScreen","monster_library_card_MonsterLibraryCard","listItems","showMonsterGroup","monster_group_list_item_MonsterGroupListItem","selectMonsterGroup","monster_group_card_MonsterGroupCard","groupID","addMonsterGroup","PartiesCard","PartyCard","activePCs","join","reduce","array","localeCompare","insightSummary","investigationSummary","perceptionSummary","insight","invest","percep","addPC","sortPCs","removeParty","PartyListItem","matchParty","PartiesScreen","parties_card_PartiesCard","showParty","party_list_item_PartyListItem","activeCards","inactiveCards","party_card_PartyCard","activePC","inactivePC","addParty","Checkbox","checked","check","showCheck","unchecked","Selector","tabs","itemsPerRow","rowCount","ceil","rowContents","rowIndex","selector_SelectorOption","rowSections","row","SelectorOption","TextGenerator","sources","model","line","addLineToModel","String","fromCharCode","_loop","prev","substr","char","item","freq","requiredResults","lines","failures","extractLine","_loop2","v","candidates","repeat","_ret","LanguageModule","output","language","fetch","response","presetName","preset","getPresets","lang","addLanguage","getLanguages","keys","initModel","generate","presetOptions","selectedPreset","selectedLanguages","isSelected","checkbox_Checkbox","removeLanguage","allowGenerate","allowReset","selector_Selector","usePreset","reset","NameModule","male","female","surname","input","setOption","ReferenceModule","view","fetchData","setView","AboutModal","reference_module_ReferenceModule","language_module_LanguageModule","name_module_NameModule","moduleID","setModule","pkg","version","resetAll","getTools","getAbout","CombatStartModal","combatSetup","notify","getMonsterNames","slotID","partyContent","selectedParty","pcSections","setParty","encounterOptions","encounterContent","selectedEncounter","monsterSections","waveMonsters","setEncounter","folioOptions","selectMapSection","thumbnailSection","mapOptions","setMapID","setFolioID","waveOptions","waveContent","selectedWave","setWave","_this9","_this10","slotsContainer","slotNames","inputs","combat_start_modal_MonsterName","changeName","setEncounterInitMode","leftSection","rightSection","getPartySection","getEncounterSection","getMapSection","getDifficultySection","getMonsterSection","getWaveSection","margin","MonsterName","_this11","CONDITION_TYPES","RadioGroup","radio_group_RadioGroupItem","itemID","RadioGroupItem","ConditionModal","conditionName","durationType","createConditionDurationSaves","createConditionDurationCombatant","createConditionDurationRounds","object","saveOptions","pointOptions","combatantOptions","durations","radio_group_RadioGroup","setCondition","setDuration","DemographicsModal","chart","demographics","allMonsters","buckets","maxBucketSize","bucket","bars","set","selectChart","TERRAIN_TYPES","MapTileCard","terrainOptions","moveMapItem","resizeMapItem","cloneMapItem","removeMapItem","MapEditorModal","selectedTileID","createMapItem","smallMapItem","bigMapItem","tools","map_tile_card_MapTileCard","mapItem","setSelectedTileID","MonsterEditorModal","page","showFilter","helpSection","sections","getHelpOptionsForPage","section","spliceMonsters","addRandomTrait","getValueSection","getActionsSection","dataType","values","sortByValue","sortByCount","valueSections","rows","criteria","criteriaText","similar","filterContent","toggleMatch","toggleFilter","showMonsters","getMonsters","changeTrait","selector","setHelpSection","getHelpSection","monsterList","searchBox","setFilterText","getFilterCard","transition","setPage","Navbar","partiesStyle","libraryStyle","encounterStyle","mapStyle","combatStyle","encountersEnabled","combatEnabled","blur","Titlebar","openHome","cog","openAbout","RandomMonsterModal","selectedMonsters","Dojo","selectedPartyID","selectedMonsterGroupID","selectedEncounterID","selectedMapFolioID","selectedCombatID","modal","json","window","localStorage","getItem","setItem","createParty","createPC","createMonsterGroup","sourceGroup","original","clone","then","createFromJSON","groupName","createEncounter","_this12","_this13","createEncounterSlot","sortEncounterSlots","_this14","slotContainer","_this15","createEncounterWave","_this16","createMapFolio","_this17","_this18","createMap","_this19","_this20","setup","createCombatSetup","_this21","partyName","init","groupRoll","dieRoll","singleRoll","sortCombatants","_this22","_this23","Date","toLocaleString","_this24","newRound","_this25","actor","_this26","_this27","issue","_this28","_this29","miniSize","_this30","_this31","_this32","saveNotification","createNotification","endNotification","_this33","createCondition","_this34","_this35","_this36","conditionIndex","_this37","obj","_this38","openDemographics","openWaveModal","pauseCombat","endCombat","_this39","home_screen_HomeScreen","parties_screen_PartiesScreen","monster_library_screen_MonsterLibraryScreen","encounter_builder_screen_EncounterBuilderScreen","addWaveToEncounter","map_folios_screen_MapFoliosScreen","combat_manager_screen_CombatManagerScreen","pausedCombat","resumeCombat","closeNotification","_this40","modalSidebar","modalTitle","modalContent","modalAllowScroll","modalButtons","closeModal","about_modal_AboutModal","demographics_modal_DemographicsModal","monster_editor_modal_MonsterEditorModal","toggleShowSimilarMonsters","saveMonster","random_monster_modal_RandomMonsterModal","map_editor_modal_MapEditorModal","saveMap","combat_start_modal_CombatStartModal","startCombat","addWaveToCombat","condition_modal_ConditionModal","addConditionFromModal","editConditionFromModal","_this41","getActions","getModal","titlebar_Titlebar","navbar_Navbar","ReactDOM","render","dojo_Dojo","document","getElementById"],"mappings":"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","file":"static/js/main.9a2727fb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/down-arrow-black.a2fc7a1f.svg\";","module.exports = __webpack_public_path__ + \"static/media/down-arrow.697dc1af.svg\";","module.exports = __webpack_public_path__ + \"static/media/close-black.7645a5b9.svg\";","module.exports = __webpack_public_path__ + \"static/media/warning.67a11a95.svg\";","module.exports = __webpack_public_path__ + \"static/media/ellipsis.9650a20f.svg\";","module.exports = __webpack_public_path__ + \"static/media/minus.7003cf50.svg\";","module.exports = __webpack_public_path__ + \"static/media/plus.b60accff.svg\";","module.exports = __webpack_public_path__ + \"static/media/checked.5cbd1005.svg\";","module.exports = __webpack_public_path__ + \"static/media/unchecked.3d4ae2dd.svg\";","module.exports = __webpack_public_path__ + \"static/media/settings.042bb1c2.svg\";","import { Combat } from '../models/combat';\r\nimport { Condition, ConditionDurationCombatant, ConditionDurationRounds, ConditionDurationSaves } from '../models/condition';\r\nimport { Encounter, EncounterWave } from '../models/encounter';\r\nimport { Monster, MonsterGroup } from '../models/monster-group';\r\n\r\nexport default class Utils {\r\n\r\n    // This is an internal dictionary to speed up lookup\r\n    private static monsterIdToGroup: { [id: string]: MonsterGroup } = {};\r\n\r\n    public static getMonsterGroup(monster: Monster, library: MonsterGroup[]): MonsterGroup {\r\n        let group = this.monsterIdToGroup[monster.id];\r\n\r\n        if (!group) {\r\n            const grp = library.find(g => g.monsters.includes(monster));\r\n            if (grp) {\r\n                group = grp;\r\n                this.monsterIdToGroup[monster.id] = group;\r\n            }\r\n        }\r\n\r\n        return group;\r\n    }\r\n\r\n    public static match(filter: string, text: string): boolean {\r\n        if (!filter) {\r\n            return true;\r\n        }\r\n\r\n        let result = true;\r\n\r\n        const tokens = filter.toLowerCase().split(' ');\r\n        tokens.forEach(token => {\r\n            if (text.toLowerCase().indexOf(token) === -1) {\r\n                result = false;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    public static guid(): string {\r\n        const s4 = () => Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\r\n        return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\r\n    }\r\n\r\n    public static sort(collection: any[]): any[] {\r\n        collection.sort((a, b) => {\r\n            const aName = a.name.toLowerCase();\r\n            const bName = b.name.toLowerCase();\r\n            if (aName < bName) { return -1; }\r\n            if (aName > bName) { return 1; }\r\n            return 0;\r\n        });\r\n        return collection;\r\n    }\r\n\r\n    public static sortByValue(collection: any[]): any[] {\r\n        collection.sort((a, b) => {\r\n            if (a.value < b.value) { return -1; }\r\n            if (a.value > b.value) { return 1; }\r\n            return 0;\r\n        });\r\n        return collection;\r\n    }\r\n\r\n    public static sortByCount(collection: any[]): any[] {\r\n        collection.sort((a, b) => {\r\n            if (a.count < b.count) { return 1; }\r\n            if (a.count > b.count) { return -1; }\r\n\r\n            const aValue = a.value.toLowerCase();\r\n            const bValue = b.value.toLowerCase();\r\n            if (aValue < bValue) { return -1; }\r\n            if (aValue > bValue) { return 1; }\r\n\r\n            return 0;\r\n        });\r\n        return collection;\r\n    }\r\n\r\n    public static modifierValue(score: number): number {\r\n        return Math.floor((score - 10) / 2);\r\n    }\r\n\r\n    public static modifier(score: number): string {\r\n        const mod = this.modifierValue(score);\r\n        let str = mod.toString();\r\n        if (mod >= 0) {\r\n            str = '+' + str;\r\n        }\r\n        return str;\r\n    }\r\n\r\n    public static dieRoll(): number {\r\n        return Math.floor(Math.random() * 20) + 1;\r\n    }\r\n\r\n    public static miniSize(size: string): number {\r\n        switch (size) {\r\n            case 'tiny': return 1;\r\n            case 'small': return 1;\r\n            case 'medium': return 1;\r\n            case 'large': return 2;\r\n            case 'huge': return 3;\r\n            case 'gargantuan': return 4;\r\n            default: return 1;\r\n        }\r\n    }\r\n\r\n    public static hitDieType(size: string) {\r\n        switch (size) {\r\n            case 'tiny': return 4;\r\n            case 'small': return 6;\r\n            case 'medium': return 8;\r\n            case 'large': return 10;\r\n            case 'huge': return 12;\r\n            case 'gargantuan': return 20;\r\n            default: return 8;\r\n        }\r\n    }\r\n\r\n    public static challenge(cr: number): string {\r\n        switch (cr) {\r\n            case 0.125: return '1/8';\r\n            case 0.25: return '1/4';\r\n            case 0.5: return '1/2';\r\n            default: return cr.toString();\r\n        }\r\n    }\r\n\r\n    public static parseChallenge(cr: string): number {\r\n        switch (cr) {\r\n            case '1/8': return 0.125;\r\n            case '1/4': return 0.25;\r\n            case '1/2': return 0.5;\r\n            default: return parseInt(cr, 10);\r\n        }\r\n    }\r\n\r\n    public static challengeDetails(): any[] {\r\n        const result: any[] = [];\r\n\r\n        result.push({ cr: 0,        ac: 13,       hpMin: 1, hpMax: 6,       attack: 3,  dmgMin: 0,   dmgMax: 1,   save: 13 });\r\n        result.push({ cr: 0.125,    ac: 13,       hpMin: 7, hpMax: 35,      attack: 3,  dmgMin: 2,   dmgMax: 3,   save: 13 });\r\n        result.push({ cr: 0.25,     ac: 13,       hpMin: 36, hpMax: 49,     attack: 3,  dmgMin: 4,   dmgMax: 5,   save: 13 });\r\n        result.push({ cr: 0.5,      ac: 13,       hpMin: 50, hpMax: 70,     attack: 3,  dmgMin: 6,   dmgMax: 8,   save: 13 });\r\n        result.push({ cr: 1,        ac: 13,       hpMin: 71, hpMax: 85,     attack: 3,  dmgMin: 9,   dmgMax: 14,  save: 13 });\r\n        result.push({ cr: 2,        ac: 13,       hpMin: 86, hpMax: 100,    attack: 3,  dmgMin: 15,  dmgMax: 20,  save: 13 });\r\n        result.push({ cr: 3,        ac: 13,       hpMin: 101, hpMax: 115,   attack: 4,  dmgMin: 21,  dmgMax: 26,  save: 13 });\r\n        result.push({ cr: 4,        ac: 14,       hpMin: 116, hpMax: 130,   attack: 5,  dmgMin: 27,  dmgMax: 32,  save: 14 });\r\n        result.push({ cr: 5,        ac: 15,       hpMin: 131, hpMax: 145,   attack: 6,  dmgMin: 33,  dmgMax: 38,  save: 15 });\r\n        result.push({ cr: 6,        ac: 15,       hpMin: 146, hpMax: 160,   attack: 6,  dmgMin: 39,  dmgMax: 44,  save: 15 });\r\n        result.push({ cr: 7,        ac: 15,       hpMin: 161, hpMax: 175,   attack: 6,  dmgMin: 45,  dmgMax: 50,  save: 15 });\r\n        result.push({ cr: 8,        ac: 16,       hpMin: 176, hpMax: 190,   attack: 7,  dmgMin: 51,  dmgMax: 56,  save: 16 });\r\n        result.push({ cr: 9,        ac: 16,       hpMin: 191, hpMax: 205,   attack: 7,  dmgMin: 57,  dmgMax: 62,  save: 16 });\r\n        result.push({ cr: 10,       ac: 17,       hpMin: 206, hpMax: 220,   attack: 7,  dmgMin: 63,  dmgMax: 68,  save: 16 });\r\n        result.push({ cr: 11,       ac: 17,       hpMin: 221, hpMax: 235,   attack: 8,  dmgMin: 69,  dmgMax: 74,  save: 17 });\r\n        result.push({ cr: 12,       ac: 17,       hpMin: 236, hpMax: 250,   attack: 8,  dmgMin: 75,  dmgMax: 80,  save: 17 });\r\n        result.push({ cr: 13,       ac: 18,       hpMin: 251, hpMax: 265,   attack: 8,  dmgMin: 81,  dmgMax: 86,  save: 18 });\r\n        result.push({ cr: 14,       ac: 18,       hpMin: 266, hpMax: 280,   attack: 8,  dmgMin: 87,  dmgMax: 92,  save: 18 });\r\n        result.push({ cr: 15,       ac: 18,       hpMin: 281, hpMax: 295,   attack: 8,  dmgMin: 93,  dmgMax: 98,  save: 18 });\r\n        result.push({ cr: 16,       ac: 18,       hpMin: 296, hpMax: 310,   attack: 9,  dmgMin: 99,  dmgMax: 104, save: 18 });\r\n        result.push({ cr: 17,       ac: 19,       hpMin: 311, hpMax: 325,   attack: 10, dmgMin: 105, dmgMax: 110, save: 19 });\r\n        result.push({ cr: 18,       ac: 19,       hpMin: 326, hpMax: 340,   attack: 10, dmgMin: 111, dmgMax: 116, save: 19 });\r\n        result.push({ cr: 19,       ac: 19,       hpMin: 341, hpMax: 355,   attack: 10, dmgMin: 117, dmgMax: 122, save: 19 });\r\n        result.push({ cr: 20,       ac: 19,       hpMin: 356, hpMax: 400,   attack: 10, dmgMin: 123, dmgMax: 140, save: 19 });\r\n        result.push({ cr: 21,       ac: 19,       hpMin: 401, hpMax: 445,   attack: 11, dmgMin: 141, dmgMax: 158, save: 20 });\r\n        result.push({ cr: 22,       ac: 19,       hpMin: 446, hpMax: 490,   attack: 11, dmgMin: 159, dmgMax: 176, save: 20 });\r\n        result.push({ cr: 23,       ac: 19,       hpMin: 491, hpMax: 535,   attack: 11, dmgMin: 177, dmgMax: 194, save: 20 });\r\n        result.push({ cr: 24,       ac: 19,       hpMin: 536, hpMax: 580,   attack: 12, dmgMin: 195, dmgMax: 212, save: 21 });\r\n        result.push({ cr: 25,       ac: 19,       hpMin: 581, hpMax: 625,   attack: 12, dmgMin: 213, dmgMax: 230, save: 21 });\r\n        result.push({ cr: 26,       ac: 19,       hpMin: 626, hpMax: 670,   attack: 12, dmgMin: 231, dmgMax: 248, save: 21 });\r\n        result.push({ cr: 27,       ac: 19,       hpMin: 671, hpMax: 715,   attack: 13, dmgMin: 249, dmgMax: 266, save: 22 });\r\n        result.push({ cr: 28,       ac: 19,       hpMin: 716, hpMax: 760,   attack: 13, dmgMin: 267, dmgMax: 284, save: 22 });\r\n        result.push({ cr: 29,       ac: 19,       hpMin: 761, hpMax: 805,   attack: 13, dmgMin: 285, dmgMax: 302, save: 22 });\r\n        result.push({ cr: 30,       ac: 19,       hpMin: 806, hpMax: 850,   attack: 14, dmgMin: 303, dmgMax: 320, save: 23 });\r\n\r\n        return result;\r\n    }\r\n\r\n    public static experience(cr: number): number {\r\n        switch (cr) {\r\n            case 0: return 10;\r\n            case 0.125: return 25;\r\n            case 0.25: return 50;\r\n            case 0.5: return 100;\r\n            case 1: return 200;\r\n            case 2: return 450;\r\n            case 3: return 700;\r\n            case 4: return 1100;\r\n            case 5: return 1800;\r\n            case 6: return 2300;\r\n            case 7: return 2900;\r\n            case 8: return 3900;\r\n            case 9: return 5000;\r\n            case 10: return 5900;\r\n            case 11: return 7200;\r\n            case 12: return 8400;\r\n            case 13: return 10000;\r\n            case 14: return 11500;\r\n            case 15: return 13000;\r\n            case 16: return 15000;\r\n            case 17: return 18000;\r\n            case 18: return 20000;\r\n            case 19: return 22000;\r\n            case 20: return 25000;\r\n            case 21: return 33000;\r\n            case 22: return 41000;\r\n            case 23: return 50000;\r\n            case 24: return 62000;\r\n            case 30: return 155000;\r\n            default: return 0;\r\n        }\r\n    }\r\n\r\n    public static experienceFactor(count: number): number {\r\n        switch (count) {\r\n            case 0:\r\n                return 0;\r\n            case 1:\r\n                return 1;\r\n            case 2:\r\n                return 1.5;\r\n            case 3:\r\n            case 4:\r\n            case 5:\r\n            case 6:\r\n                return 2;\r\n            case 7:\r\n            case 8:\r\n            case 9:\r\n            case 10:\r\n                return 2.5;\r\n            case 11:\r\n            case 12:\r\n            case 13:\r\n            case 14:\r\n                return 3;\r\n            default:\r\n                return 4;\r\n        }\r\n    }\r\n\r\n    public static pcExperience(level: number, difficulty: string): number {\r\n        switch (difficulty) {\r\n            case 'easy':\r\n                switch (level) {\r\n                    case 1: return 25;\r\n                    case 2: return 50;\r\n                    case 3: return 75;\r\n                    case 4: return 125;\r\n                    case 5: return 250;\r\n                    case 6: return 300;\r\n                    case 7: return 350;\r\n                    case 8: return 450;\r\n                    case 9: return 550;\r\n                    case 10: return 600;\r\n                    case 11: return 800;\r\n                    case 12: return 1000;\r\n                    case 13: return 1100;\r\n                    case 14: return 1250;\r\n                    case 15: return 1400;\r\n                    case 16: return 1600;\r\n                    case 17: return 2000;\r\n                    case 18: return 2100;\r\n                    case 19: return 2400;\r\n                    case 20: return 2800;\r\n                    default: return 0;\r\n                }\r\n            case 'medium':\r\n                switch (level) {\r\n                    case 1: return 50;\r\n                    case 2: return 100;\r\n                    case 3: return 150;\r\n                    case 4: return 250;\r\n                    case 5: return 500;\r\n                    case 6: return 600;\r\n                    case 7: return 750;\r\n                    case 8: return 900;\r\n                    case 9: return 1100;\r\n                    case 10: return 1200;\r\n                    case 11: return 1600;\r\n                    case 12: return 2000;\r\n                    case 13: return 2200;\r\n                    case 14: return 2500;\r\n                    case 15: return 2800;\r\n                    case 16: return 3200;\r\n                    case 17: return 3900;\r\n                    case 18: return 4200;\r\n                    case 19: return 4900;\r\n                    case 20: return 5700;\r\n                    default: return 0;\r\n                }\r\n            case 'hard':\r\n                switch (level) {\r\n                    case 1: return 75;\r\n                    case 2: return 150;\r\n                    case 3: return 225;\r\n                    case 4: return 375;\r\n                    case 5: return 750;\r\n                    case 6: return 900;\r\n                    case 7: return 1100;\r\n                    case 8: return 1400;\r\n                    case 9: return 1600;\r\n                    case 10: return 1900;\r\n                    case 11: return 2400;\r\n                    case 12: return 3000;\r\n                    case 13: return 3400;\r\n                    case 14: return 3800;\r\n                    case 15: return 4300;\r\n                    case 16: return 4800;\r\n                    case 17: return 5900;\r\n                    case 18: return 6300;\r\n                    case 19: return 7300;\r\n                    case 20: return 8500;\r\n                    default: return 0;\r\n                }\r\n            case 'deadly':\r\n                switch (level) {\r\n                    case 1: return 100;\r\n                    case 2: return 200;\r\n                    case 3: return 400;\r\n                    case 4: return 500;\r\n                    case 5: return 1100;\r\n                    case 6: return 1400;\r\n                    case 7: return 1700;\r\n                    case 8: return 2100;\r\n                    case 9: return 2400;\r\n                    case 10: return 2800;\r\n                    case 11: return 3600;\r\n                    case 12: return 4500;\r\n                    case 13: return 5100;\r\n                    case 14: return 5700;\r\n                    case 15: return 6400;\r\n                    case 16: return 7200;\r\n                    case 17: return 8800;\r\n                    case 18: return 9500;\r\n                    case 19: return 10900;\r\n                    case 20: return 12700;\r\n                    default: return 0;\r\n                }\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n\r\n    public static traitType(type: string, plural: boolean): string {\r\n        let str = '';\r\n        switch (type) {\r\n            case 'trait':\r\n                str = 'trait';\r\n                break;\r\n            case 'action':\r\n                str = 'action';\r\n                break;\r\n            case 'legendary':\r\n                str = 'legendary action';\r\n                break;\r\n            case 'lair':\r\n                str = 'lair action';\r\n                break;\r\n            case 'regional':\r\n                str = 'regional effect';\r\n                break;\r\n        }\r\n\r\n        if (plural) {\r\n            str += 's';\r\n        }\r\n\r\n        return str;\r\n    }\r\n\r\n    public static nudgeChallenge(value: number, delta: number): number {\r\n        let result = 0;\r\n\r\n        switch (value) {\r\n            case 0:\r\n                if (delta === -1) {\r\n                    result = 0;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 0.125;\r\n                }\r\n                break;\r\n            case 0.125:\r\n                if (delta === -1) {\r\n                    result = 0;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 0.25;\r\n                }\r\n                break;\r\n            case 0.25:\r\n                if (delta === -1) {\r\n                    result = 0.125;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 0.5;\r\n                }\r\n                break;\r\n            case 0.5:\r\n                if (delta === -1) {\r\n                    result = 0.25;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 1;\r\n                }\r\n                break;\r\n            case 1:\r\n                if (delta === -1) {\r\n                    result = 0.5;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 2;\r\n                }\r\n                break;\r\n            default:\r\n                result = value + delta;\r\n                break;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public static conditionText(condition: Condition): string[] {\r\n        switch (condition.name) {\r\n            case 'blinded':\r\n                return [\r\n                    'a blinded creature can’t see and automatically fails any ability check that requires sight',\r\n                    'attack rolls against the creature have advantage, and the creature’s attack rolls have disadvantage'\r\n                ];\r\n            case 'charmed':\r\n                return [\r\n                    'a charmed creature can’t attack the charmer or target the charmer with harmful abilities or magical effects',\r\n                    'the charmer has advantage on any ability check to interact socially with the creature'\r\n                ];\r\n            case 'deafened':\r\n                return [\r\n                    'a deafened creature can’t hear and automatically fails any ability check that requires hearing.'\r\n                ];\r\n            case 'exhaustion': {\r\n                switch (condition.level) {\r\n                case 1:\r\n                    return [\r\n                        'disadvantage on ability checks'\r\n                    ];\r\n                case 2:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved'\r\n                    ];\r\n                case 3:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved',\r\n                        'disadvantage on attack rolls and saving throws'\r\n                    ];\r\n                case 4:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved',\r\n                        'disadvantage on attack rolls and saving throws',\r\n                        'hit point maximum halved'\r\n                    ];\r\n                case 5:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved',\r\n                        'disadvantage on attack rolls and saving throws',\r\n                        'hit point maximum halved',\r\n                        'speed reduced to 0'\r\n                    ];\r\n                case 6:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved',\r\n                        'disadvantage on attack rolls and saving throws',\r\n                        'hit point maximum halved',\r\n                        'speed reduced to 0',\r\n                        'death'\r\n                    ];\r\n                default:\r\n                    return [];\r\n                }\r\n            }\r\n            case 'frightened':\r\n                return [\r\n                    'a frightened creature has disadvantage on ability checks and attack rolls while the source of its fear is within line of sight',\r\n                    'the creature can’t willingly move closer to the source of its fear'\r\n                ];\r\n            case 'grappled':\r\n                return [\r\n                    'a grappled creature’s speed becomes 0, and it can’t benefit from any bonus to its speed',\r\n                    'the condition ends if the grappler is incapacitated',\r\n                    'the condition also ends if an effect removes the grappled creature from the reach of the grappler or grappling effect'\r\n                ];\r\n            case 'incapacitated':\r\n                return [\r\n                    'an incapacitated creature can’t take actions or reactions'\r\n                ];\r\n            case 'invisible':\r\n                return [\r\n                    'an invisible creature is impossible to see without the aid of magic or a special sense',\r\n                    'for the purpose of hiding, the creature is heavily obscured',\r\n                    'the creature’s location can be detected by any noise it makes or any tracks it leaves',\r\n                    'attack rolls against the creature have disadvantage, and the creature’s attack rolls have advantage'\r\n                ];\r\n            case 'paralyzed':\r\n                return [\r\n                    'a paralyzed creature is incapacitated (can’t take actions or reactions) and can’t move or speak',\r\n                    'the creature automatically fails strength and dexterity saving throws',\r\n                    'attack rolls against the creature have advantage',\r\n                    'any attack that hits the creature is a critical hit if the attacker is within 5 feet of the creature'\r\n                ];\r\n            case 'petrified':\r\n                return [\r\n                    /* tslint:disable-next-line:max-line-length */\r\n                    'a petrified creature is transformed, along with any nonmagical objects it is wearing or carrying, into a solid inanimate substance (usually stone)',\r\n                    'its weight increases by a factor of ten, and it ceases aging',\r\n                    'the creature is incapacitated (can’t take actions or reactions), can’t move or speak, and is unaware of its surroundings',\r\n                    'attack rolls against the creature have advantage',\r\n                    'the creature automatically fails strength and dexterity saving throws',\r\n                    'the creature has resistance to all damage',\r\n                    'the creature is immune to poison and disease, although a poison or disease already in its system is suspended, not neutralized'\r\n                ];\r\n            case 'poisoned':\r\n                return [\r\n                    'a poisoned creature has disadvantage on attack rolls and ability checks'\r\n                ];\r\n            case 'prone':\r\n                return [\r\n                    'a prone creature’s only movement option is to crawl, unless it stands up and thereby ends the condition',\r\n                    'the creature has disadvantage on attack rolls',\r\n                    /* tslint:disable-next-line:max-line-length */\r\n                    'an attack roll against the creature has advantage if the attacker is Within 5 feet of the creature; otherwise, the attack roll has disadvantage'\r\n                ];\r\n            case 'restrained':\r\n                return [\r\n                    'a restrained creature’s speed becomes 0, and it can’t benefit from any bonus to its speed',\r\n                    'attack rolls against the creature have advantage, and the creature’s attack rolls have disadvantage',\r\n                    'the creature has disadvantage on dexterity saving throws'\r\n                ];\r\n            case 'stunned':\r\n                return [\r\n                    'a stunned creature is incapacitated (can’t take actions or reactions), can’t move, and can speak only falteringly',\r\n                    'the creature automatically fails strength and dexterity saving throws',\r\n                    'attack rolls against the creature have advantage'\r\n                ];\r\n            case 'unconscious':\r\n                return [\r\n                    'an unconscious creature is incapacitated (can’t take actions or reactions), can’t move or speak, and is unaware of its surroundings',\r\n                    'the creature drops whatever its holding and falls prone',\r\n                    'the creature automatically fails strength and dexterity saving throws',\r\n                    'attack rolls against the creature have advantage',\r\n                    'any attack that hits the creature is a critical hit if the attacker is within 5 feet of the creature'\r\n                ];\r\n            case 'custom':\r\n                return [];\r\n            default:\r\n                return [];\r\n        }\r\n    }\r\n\r\n    public static conditionDurationText(condition: Condition, combat: Combat) {\r\n        if (condition.duration !== null) {\r\n            switch (condition.duration.type) {\r\n                case 'saves':\r\n                    const saveDuration = condition.duration as ConditionDurationSaves;\r\n                    let saveType = saveDuration.saveType.toString();\r\n                    if (saveType !== 'death') {\r\n                        saveType = saveType.toUpperCase();\r\n                    }\r\n                    const saves = saveDuration.count > 1 ? 'saves' : 'save';\r\n                    return 'until you make ' + saveDuration.count + ' ' + saveType + ' ' + saves + ' at dc ' + saveDuration.saveDC;\r\n                case 'combatant':\r\n                    const combatantDuration = condition.duration as ConditionDurationCombatant;\r\n                    const point = combatantDuration.point;\r\n                    const c = combat.combatants.find(cmb => cmb.id === combatantDuration.combatantID);\r\n                    const combatant = c ? (c.displayName || c.name || 'unnamed monster') + '\\'s' : 'someone\\'s';\r\n                    return 'until the ' + point + ' of ' + combatant + ' next turn';\r\n                case 'rounds':\r\n                    const roundsDuration = condition.duration as ConditionDurationRounds;\r\n                    const rounds = roundsDuration.count > 1 ? 'rounds' : 'round';\r\n                    return 'for ' + roundsDuration.count + ' ' + rounds;\r\n                default:\r\n                    return null;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public static getMonsterNames(encounter: Encounter | EncounterWave): { id: string, names: string[] }[] {\r\n        const monsterNames: any[] = [];\r\n        if (encounter) {\r\n            encounter.slots.forEach(slot => {\r\n                const names: any[] = [];\r\n                if (slot.count === 1) {\r\n                    names.push(slot.monsterName);\r\n                } else {\r\n                    for (let n = 0; n !== slot.count; ++n) {\r\n                        names.push(slot.monsterName + ' ' + (n + 1));\r\n                    }\r\n                }\r\n\r\n                monsterNames.push({\r\n                    id: slot.id,\r\n                    names: names\r\n                });\r\n            });\r\n        }\r\n\r\n        return monsterNames;\r\n    }\r\n}\r\n","import Utils from './utils';\r\n\r\nimport { Combat, CombatSetup, Notification } from '../models/combat';\r\nimport { Condition, ConditionDurationCombatant, ConditionDurationRounds, ConditionDurationSaves } from '../models/condition';\r\nimport { Encounter, EncounterSlot, EncounterWave } from '../models/encounter';\r\nimport { Map, MapFolio, MapItem } from '../models/map-folio';\r\nimport { Monster, MonsterGroup, Trait } from '../models/monster-group';\r\nimport { Party, PC } from '../models/party';\r\n\r\nexport default class Factory {\r\n\r\n    public static createParty(): Party {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            pcs: []\r\n        };\r\n    }\r\n\r\n    public static createPC(): PC {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'pc',\r\n            active: true,\r\n            player: '',\r\n            name: '',\r\n            race: '',\r\n            classes: '',\r\n            level: 1,\r\n            languages: 'Common',\r\n            passiveInsight: 10,\r\n            passiveInvestigation: 10,\r\n            passivePerception: 10,\r\n            initiative: 10,\r\n            url: ''\r\n        };\r\n    }\r\n\r\n    public static createMonsterGroup(): MonsterGroup {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            monsters: []\r\n        };\r\n    }\r\n\r\n    public static createMonster(): Monster {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'monster',\r\n            name: '',\r\n            size: 'medium',\r\n            category: 'humanoid',\r\n            tag: '',\r\n            alignment: '',\r\n            challenge: 1,\r\n            abilityScores: {\r\n                str: 10,\r\n                dex: 10,\r\n                con: 10,\r\n                int: 10,\r\n                wis: 10,\r\n                cha: 10\r\n            },\r\n            ac: 10,\r\n            hpMax: 4,\r\n            hpTemp: 0,\r\n            hitDice: 1,\r\n            damage: {\r\n                resist: '',\r\n                vulnerable: '',\r\n                immune: ''\r\n            },\r\n            savingThrows: '',\r\n            speed: '',\r\n            skills: '',\r\n            senses: '',\r\n            languages: '',\r\n            equipment: '',\r\n            traits: [],\r\n            conditionImmunities: ''\r\n        };\r\n    }\r\n\r\n    public static createTrait(): Trait {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            usage: '',\r\n            type: 'action',\r\n            text: '',\r\n            uses: 0\r\n        };\r\n    }\r\n\r\n    public static createEncounter(): Encounter {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            slots: [],\r\n            waves: []\r\n        };\r\n    }\r\n\r\n    public static createEncounterSlot(): EncounterSlot {\r\n        return {\r\n            id: Utils.guid(),\r\n            monsterGroupName: '',\r\n            monsterName: '',\r\n            count: 1\r\n        };\r\n    }\r\n\r\n    public static createEncounterWave(): EncounterWave {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            slots: []\r\n        };\r\n    }\r\n\r\n    public static createMapFolio(): MapFolio {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            maps: []\r\n        };\r\n    }\r\n\r\n    public static createMap(): Map {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            items: []\r\n        };\r\n    }\r\n\r\n    public static createMapItem(): MapItem {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'tile',\r\n            x: 0,\r\n            y: 0,\r\n            width: 4,\r\n            height: 4,\r\n            terrain: null\r\n        };\r\n    }\r\n\r\n    public static createCombatSetup(): CombatSetup {\r\n        return {\r\n            partyID: null,\r\n            encounterID: null,\r\n            waveID: null,\r\n            folioID: null,\r\n            mapID: null,\r\n            monsterNames: [],\r\n            encounterInitMode: 'group'\r\n        };\r\n    }\r\n\r\n    public static createCombat(): Combat {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            encounterID: null,\r\n            combatants: [],\r\n            map: null,\r\n            round: 1,\r\n            notifications: [],\r\n            issues: [],\r\n            timestamp: null\r\n        };\r\n    }\r\n\r\n    public static createNotification(): Notification {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'condition-save',\r\n            data: null,\r\n            combatant: null\r\n        };\r\n    }\r\n\r\n    public static createCondition(): Condition {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            level: 1,\r\n            text: null,\r\n            duration: null\r\n        };\r\n    }\r\n\r\n    public static createConditionDurationSaves(): ConditionDurationSaves {\r\n        return {\r\n            type: 'saves',\r\n            count: 1,\r\n            saveType: 'str',\r\n            saveDC: 10,\r\n            point: 'start'\r\n        };\r\n    }\r\n\r\n    public static createConditionDurationCombatant(): ConditionDurationCombatant {\r\n        return {\r\n            type: 'combatant',\r\n            point: 'start',\r\n            combatantID: null\r\n        };\r\n    }\r\n\r\n    public static createConditionDurationRounds(): ConditionDurationRounds {\r\n        return {\r\n            type: 'rounds',\r\n            count: 1\r\n        };\r\n    }\r\n}\r\n","export interface MonsterGroup {\r\n    id: string;\r\n    name: string;\r\n    monsters: Monster[];\r\n}\r\n\r\nexport interface Monster {\r\n    id: string;\r\n    type: string;\r\n    name: string;\r\n    size: string;\r\n    category: string;\r\n    tag: string;\r\n    alignment: string;\r\n    challenge: number;\r\n    abilityScores: {\r\n        str: number;\r\n        dex: number;\r\n        con: number;\r\n        int: number;\r\n        wis: number;\r\n        cha: number;\r\n    };\r\n    ac: number;\r\n    hpMax: number;\r\n    hpTemp: number;\r\n    hitDice: number;\r\n    damage: {\r\n        resist: string;\r\n        vulnerable: string;\r\n        immune: string;\r\n    };\r\n    savingThrows: string;\r\n    speed: string;\r\n    skills: string;\r\n    senses: string;\r\n    languages: string;\r\n    equipment: string;\r\n    traits: Trait[];\r\n    conditionImmunities: string;\r\n}\r\n\r\nexport interface Trait {\r\n    id: string;\r\n    name: string;\r\n    usage: string;\r\n    type: 'trait' | 'action' | 'legendary' | 'lair' | 'regional';\r\n    text: string;\r\n    uses: number;\r\n}\r\n\r\nexport const SIZE_TYPES = [\r\n    'tiny',\r\n    'small',\r\n    'medium',\r\n    'large',\r\n    'huge',\r\n    'gargantuan'\r\n];\r\n\r\nexport const CATEGORY_TYPES = [\r\n    'aberration',\r\n    'beast',\r\n    'celestial',\r\n    'construct',\r\n    'dragon',\r\n    'elemental',\r\n    'fey',\r\n    'fiend',\r\n    'giant',\r\n    'humanoid',\r\n    'monstrosity',\r\n    'ooze',\r\n    'plant',\r\n    'undead'\r\n];\r\n\r\nexport const TRAIT_TYPES = [\r\n    'trait',\r\n    'action',\r\n    'legendary',\r\n    'lair',\r\n    'regional'\r\n];\r\n","import Factory from './factory';\r\nimport Utils from './utils';\r\n\r\nimport { Monster, Trait, TRAIT_TYPES } from '../models/monster-group';\r\n\r\nexport default class Frankenstein {\r\n    public static nudgeValue(target: Monster, field: string, delta: number) {\r\n        let source: any = target;\r\n        let value: any = null;\r\n        const tokens = field.split('.');\r\n        tokens.forEach(token => {\r\n            if (token === tokens[tokens.length - 1]) {\r\n                value = source[token];\r\n            } else {\r\n                source = source[token];\r\n            }\r\n        });\r\n\r\n        const newValue = (field === 'challenge') ? Utils.nudgeChallenge(value, delta) : (value ? value : 0) + delta;\r\n        Frankenstein.changeValue(target, field, newValue);\r\n    }\r\n\r\n    public static changeValue(target: Monster, field: string, value: any) {\r\n        let source: any = target;\r\n        const tokens = field.split('.');\r\n        tokens.forEach(token => {\r\n            if (token === tokens[tokens.length - 1]) {\r\n                source[token] = value;\r\n\r\n                if ((field === 'abilityScores.con') || (field === 'size') || (field === 'hitDice')) {\r\n                    const sides = Utils.hitDieType(target.size);\r\n                    const conMod = Math.floor((target.abilityScores.con - 10) / 2);\r\n                    const hpPerDie = ((sides + 1) / 2) + conMod;\r\n                    const hp = Math.floor(target.hitDice * hpPerDie);\r\n                    target.hpMax = hp;\r\n                }\r\n            } else {\r\n                source = source[token];\r\n            }\r\n        });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Monster creation\r\n\r\n    public static clone(monster: Monster, name: string): Monster {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'monster',\r\n            name: name || (monster.name + ' copy'),\r\n            size: monster.size,\r\n            category: monster.category,\r\n            tag: monster.tag,\r\n            alignment: monster.alignment,\r\n            challenge: monster.challenge,\r\n            abilityScores: {\r\n                str: monster.abilityScores.str,\r\n                dex: monster.abilityScores.dex,\r\n                con: monster.abilityScores.con,\r\n                int: monster.abilityScores.int,\r\n                wis: monster.abilityScores.wis,\r\n                cha: monster.abilityScores.cha\r\n            },\r\n            ac: monster.ac,\r\n            hpMax: monster.hpMax,\r\n            hpTemp: monster.hpTemp,\r\n            hitDice: monster.hitDice,\r\n            damage: {\r\n                resist: monster.damage.resist,\r\n                vulnerable: monster.damage.vulnerable,\r\n                immune: monster.damage.immune\r\n            },\r\n            savingThrows: monster.savingThrows,\r\n            speed: monster.speed,\r\n            skills: monster.skills,\r\n            senses: monster.senses,\r\n            languages: monster.languages,\r\n            equipment: monster.equipment,\r\n            traits: monster.traits.map(trait => {\r\n                return {\r\n                    id: Utils.guid(),\r\n                    name: trait.name,\r\n                    usage: trait.usage,\r\n                    type: trait.type,\r\n                    text: trait.text,\r\n                    uses: 0\r\n                };\r\n            }),\r\n            conditionImmunities: monster.conditionImmunities\r\n        };\r\n    }\r\n\r\n    public static createFromJSON(data: any): Monster {\r\n        const monster = Factory.createMonster();\r\n\r\n        monster.type = 'monster';\r\n        monster.name = data.name;\r\n        monster.size = data.size.toLowerCase();\r\n        monster.category = data.type;\r\n        monster.tag = data.subtype;\r\n        monster.alignment = data.alignment;\r\n        monster.challenge = Utils.parseChallenge(data.challenge_rating);\r\n        monster.ac = data.armor_class;\r\n        monster.hpMax = data.hit_points;\r\n        monster.speed = data.speed;\r\n        monster.senses = data.senses;\r\n        monster.languages = data.languages;\r\n\r\n        const index = data.hit_dice.indexOf('d');\r\n        monster.hitDice = parseInt(data.hit_dice.substring(0, index), 10);\r\n\r\n        monster.abilityScores.str = data.strength;\r\n        monster.abilityScores.dex = data.dexterity;\r\n        monster.abilityScores.con = data.constitution;\r\n        monster.abilityScores.int = data.intelligence;\r\n        monster.abilityScores.wis = data.wisdom;\r\n        monster.abilityScores.cha = data.charisma;\r\n\r\n        monster.damage.resist = data.damage_resistances;\r\n        monster.damage.vulnerable = data.damage_vulnerabilities;\r\n        monster.damage.immune = data.damage_immunities;\r\n        monster.conditionImmunities = data.condition_immunities;\r\n\r\n        const saves = [\r\n            {\r\n                field: 'strength_save',\r\n                text: 'Strength'\r\n            },\r\n            {\r\n                field: 'dexterity_save',\r\n                text: 'Dexterity'\r\n            },\r\n            {\r\n                field: 'constitution_save',\r\n                text: 'Constitution'\r\n            },\r\n            {\r\n                field: 'intelligence_save',\r\n                text: 'Intelligence'\r\n            },\r\n            {\r\n                field: 'wisdom_save',\r\n                text: 'Wisdom'\r\n            },\r\n            {\r\n                field: 'charisma_save',\r\n                text: 'Charisma'\r\n            }\r\n        ];\r\n        saves.forEach(save => {\r\n            if (data[save.field]) {\r\n                const str = save.text + ' ' + data[save.field];\r\n                monster.savingThrows += monster.savingThrows === '' ? str : ', ' + str;\r\n            }\r\n        });\r\n\r\n        const skills = [\r\n            {\r\n                field: 'acrobatics',\r\n                text: 'Acrobatics'\r\n            },\r\n            {\r\n                field: 'animal_handling',\r\n                text: 'Animal handling'\r\n            },\r\n            {\r\n                field: 'arcana',\r\n                text: 'Arcana'\r\n            },\r\n            {\r\n                field: 'athletics',\r\n                text: 'Athletics'\r\n            },\r\n            {\r\n                field: 'deception',\r\n                text: 'Deception'\r\n            },\r\n            {\r\n                field: 'history',\r\n                text: 'History'\r\n            },\r\n            {\r\n                field: 'insight',\r\n                text: 'Insight'\r\n            },\r\n            {\r\n                field: 'intimidation',\r\n                text: 'Intimidation'\r\n            },\r\n            {\r\n                field: 'investigation',\r\n                text: 'Investigation'\r\n            },\r\n            {\r\n                field: 'medicine',\r\n                text: 'Medicine'\r\n            },\r\n            {\r\n                field: 'nature',\r\n                text: 'Nature'\r\n            },\r\n            {\r\n                field: 'perception',\r\n                text: 'Perception'\r\n            },\r\n            {\r\n                field: 'performance',\r\n                text: 'Performance'\r\n            },\r\n            {\r\n                field: 'persuasion',\r\n                text: 'Persuasion'\r\n            },\r\n            {\r\n                field: 'religion',\r\n                text: 'Religion'\r\n            },\r\n            {\r\n                field: 'sleight_of_hand',\r\n                text: 'Sleight of hand'\r\n            },\r\n            {\r\n                field: 'stealth',\r\n                text: 'Stealth'\r\n            },\r\n            {\r\n                field: 'survival',\r\n                text: 'Survival'\r\n            }\r\n        ];\r\n        skills.forEach(skill => {\r\n            if (data[skill.field]) {\r\n                const str = skill.text + ' ' + data[skill.field];\r\n                monster.skills += monster.skills === '' ? str : ', ' + str;\r\n            }\r\n        });\r\n\r\n        if (data.special_abilities) {\r\n            data.special_abilities.forEach((rawTrait: any) => {\r\n                const trait = this.buildTrait(rawTrait, 'trait');\r\n                monster.traits.push(trait);\r\n            });\r\n        }\r\n        if (data.actions) {\r\n            data.actions.forEach((rawTrait: any) => {\r\n                const trait = this.buildTrait(rawTrait, 'action');\r\n                monster.traits.push(trait);\r\n            });\r\n        }\r\n        if (data.legendary_actions) {\r\n            data.legendary_actions.forEach((rawTrait: any) => {\r\n                const trait = this.buildTrait(rawTrait, 'legendary');\r\n                monster.traits.push(trait);\r\n            });\r\n        }\r\n\r\n        return monster;\r\n    }\r\n\r\n    private static buildTrait(rawTrait: any, type: 'trait' | 'action' | 'legendary' | 'lair' | 'regional'): Trait {\r\n        let name = '';\r\n        let usage = '';\r\n\r\n        const openBracket = rawTrait.name.indexOf('(');\r\n        if (openBracket === -1) {\r\n            name = rawTrait.name;\r\n        } else {\r\n            const closeBracket = rawTrait.name.indexOf(')');\r\n            name = rawTrait.name.substring(0, openBracket - 1);\r\n            usage = rawTrait.name.substring(openBracket + 1, closeBracket).toLowerCase();\r\n        }\r\n\r\n        const text = rawTrait.desc.replace(/•/g, '*');\r\n\r\n        return {\r\n            id: Utils.guid(),\r\n            type: type,\r\n            name: name,\r\n            usage: usage,\r\n            text: text,\r\n            uses: 0\r\n        };\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Traits\r\n\r\n    public static copyTrait(target: Monster, trait: Trait) {\r\n        const copy = JSON.parse(JSON.stringify(trait));\r\n        copy.id = Utils.guid();\r\n        target.traits.push(copy);\r\n    }\r\n\r\n    public static addTrait(target: Monster, type: 'trait' | 'action' | 'legendary' | 'lair' | 'regional') {\r\n        const trait = Factory.createTrait();\r\n        trait.type = type;\r\n        trait.name = 'New ' + Utils.traitType(type, false).toLowerCase();\r\n        target.traits.push(trait);\r\n    }\r\n\r\n    public static removeTrait(target: Monster, trait: Trait) {\r\n        const index = target.traits.indexOf(trait);\r\n        target.traits.splice(index, 1);\r\n    }\r\n\r\n    public static swapTraits(target: Monster, t1: Trait, t2: Trait) {\r\n        const index1 = target.traits.indexOf(t1);\r\n        const index2 = target.traits.indexOf(t2);\r\n        target.traits[index2] = t1;\r\n        target.traits[index1] = t2;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Randomisation\r\n\r\n    public static spliceMonsters(target: Monster, monsters: Monster[]) {\r\n        const fields = [\r\n            'size',\r\n            'category',\r\n            'tag',\r\n            'alignment',\r\n            'challenge',\r\n            'speed',\r\n            'senses',\r\n            'languages',\r\n            'equipment',\r\n            'abilityScores.str',\r\n            'abilityScores.dex',\r\n            'abilityScores.con',\r\n            'abilityScores.int',\r\n            'abilityScores.wis',\r\n            'abilityScores.cha',\r\n            'savingThrows',\r\n            'skills',\r\n            'ac',\r\n            'hitDice',\r\n            'damage.resist',\r\n            'damage.vulnerable',\r\n            'damage.immune',\r\n            'conditionImmunities'\r\n        ];\r\n        fields.forEach(field => {\r\n            this.setRandomValue(target, field, monsters);\r\n        });\r\n\r\n        target.traits = [];\r\n\r\n        TRAIT_TYPES.forEach(type => {\r\n            // Get all traits of this type\r\n            const traits: Trait[] = [];\r\n            monsters.forEach(m => {\r\n                m.traits.filter(t => t.type === type)\r\n                    .forEach(t => traits.push(t));\r\n            });\r\n\r\n            // Collate by name\r\n            const distinct: { trait: Trait, count: number }[] = [];\r\n            traits.forEach(t => {\r\n                const current = distinct.find(d => d.trait.name === t.name);\r\n                if (current) {\r\n                    current.count += 1;\r\n                } else {\r\n                    distinct.push({\r\n                        trait: t,\r\n                        count: 1\r\n                    });\r\n                }\r\n            });\r\n\r\n            // If any are common to all monsters, copy them and remove from the candidates\r\n            const addedIDs: string[] = [];\r\n            distinct.filter(d => d.count === monsters.length)\r\n                .forEach(d => {\r\n                    this.copyTrait(target, d.trait);\r\n                    addedIDs.push(d.trait.id);\r\n                });\r\n            addedIDs.forEach(id => {\r\n                const index = distinct.findIndex(d => d.trait.id === id);\r\n                distinct.splice(index, 1);\r\n            });\r\n\r\n            const avg = traits.length / monsters.length;\r\n            while (target.traits.filter(t => t.type === type).length < avg) {\r\n                const index = Math.floor(Math.random() * distinct.length);\r\n                const t = distinct[index].trait;\r\n                this.copyTrait(target, t);\r\n                distinct.splice(index, 1);\r\n            }\r\n        });\r\n    }\r\n\r\n    public static setRandomValue(target: Monster, field: string, monsters: Monster[]) {\r\n        const index = Math.floor(Math.random() * monsters.length);\r\n        const m = monsters[index];\r\n\r\n        let source: any = m;\r\n        let value = null;\r\n        const tokens = field.split('.');\r\n        tokens.forEach(token => {\r\n            if (token === tokens[tokens.length - 1]) {\r\n                value = source[token];\r\n            } else {\r\n                source = source[token];\r\n            }\r\n        });\r\n\r\n        this.changeValue(target, field, value);\r\n    }\r\n\r\n    public static addRandomTrait(target: Monster, type: string, monsters: Monster[]) {\r\n        const traits: Trait[] = [];\r\n        monsters.forEach(m => {\r\n            m.traits.filter(t => t.type === type)\r\n                .forEach(t => {\r\n                    traits.push(t);\r\n                });\r\n        });\r\n\r\n        const index = Math.floor(Math.random() * traits.length);\r\n        const trait = traits[index];\r\n\r\n        this.copyTrait(target, trait);\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    getHeading: () => (string | JSX.Element);\r\n    getContent: () => (string | JSX.Element);\r\n}\r\n\r\nexport default class InfoCard extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        getHeading: null,\r\n        getContent: null\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            let heading = null;\r\n            if (this.props.getHeading) {\r\n                heading = this.props.getHeading();\r\n            }\r\n\r\n            let content = null;\r\n            if (this.props.getContent) {\r\n                content = this.props.getContent();\r\n            }\r\n            if (!content) {\r\n                return null;\r\n            }\r\n\r\n            return (\r\n                <div className='card'>\r\n                    {heading}\r\n                    <div className='card-content'>\r\n                        {content}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport InfoCard from '../info-card';\r\n\r\nexport default class CombatManagerCard extends React.Component {\r\n    private getContent() {\r\n        return (\r\n            <div>\r\n                <div className='section'>here you can run a combat encounter by specifying a party and an encounter</div>\r\n                <div className='divider' />\r\n                <div className='section'>below you will see a list of encounters that you have paused</div>\r\n                <div className='section'>you can resume a paused combat by selecting it</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <InfoCard getContent={this.getContent}/>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport warning from '../../resources/images/warning.svg';\r\n\r\ninterface Props {\r\n    text: string;\r\n    callback: () => void;\r\n    details: string;\r\n    disabled: boolean;\r\n}\r\n\r\ninterface State {\r\n    pressed: boolean;\r\n}\r\n\r\nexport default class ConfirmButton extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        details: null,\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            pressed: false\r\n        };\r\n    }\r\n\r\n    private toggle() {\r\n        this.setState({\r\n            pressed: !this.state.pressed\r\n        });\r\n    }\r\n\r\n    private perform() {\r\n        this.toggle();\r\n        this.props.callback();\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let content = null;\r\n            if (this.state.pressed) {\r\n                content = (\r\n                    <div>\r\n                        <div className='title'>{this.props.text} - are you sure?</div>\r\n                        <img className='image' src={warning} alt='warning' />\r\n                        {this.props.details ? <div className='details'>{this.props.details}</div> : null}\r\n                        <div className='confirmation'>\r\n                            <div className='destructive' onClick={() => this.perform()}>yes</div>\r\n                            <div className='non-destructive' onClick={() => this.toggle()}>no</div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                content = (\r\n                    <div>\r\n                        <div className='title'>{this.props.text}</div>\r\n                        <img className='image' src={warning} alt='warning' />\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <button className={this.props.disabled ? 'disabled' : ''} onClick={() => this.toggle()}>\r\n                    {content}\r\n                </button>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    controls: JSX.Element[];\r\n    disabled: boolean;\r\n}\r\n\r\nexport default class ControlRow extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        disabled: false\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'control-row';\r\n            if (this.props.disabled) {\r\n                style += ' disabled';\r\n            }\r\n            switch (this.props.controls.length) {\r\n                case 1:\r\n                    style += ' one';\r\n                    break;\r\n                case 2:\r\n                    style += ' two';\r\n                    break;\r\n                case 3:\r\n                    style += ' three';\r\n                    break;\r\n                case 4:\r\n                    style += ' four';\r\n                    break;\r\n                case 5:\r\n                    style += ' five';\r\n                    break;\r\n            }\r\n\r\n            return (\r\n                <div className={style}>\r\n                    {this.props.controls}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport ellipsis from '../../resources/images/ellipsis.svg';\r\n\r\ninterface Props {\r\n    options: { id: string; text: string; disabled?: boolean }[];\r\n    select: (optionID: string) => void;\r\n    selectedID: string;\r\n    placeholder: string;\r\n    disabled: boolean;\r\n}\r\n\r\ninterface State {\r\n    open: boolean;\r\n}\r\n\r\nexport default class Dropdown extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        selectedID: null,\r\n        placeholder: 'select...',\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            open: false\r\n        };\r\n    }\r\n\r\n    private toggleOpen(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        this.setState({\r\n            open: !this.state.open\r\n        });\r\n    }\r\n\r\n    private select(optionID: string) {\r\n        this.setState({\r\n            open: false\r\n        });\r\n        this.props.select(optionID);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            if (this.props.options.length === 0) {\r\n                return null;\r\n            }\r\n\r\n            let style = this.props.disabled ? 'dropdown disabled' : 'dropdown';\r\n            const content = [];\r\n\r\n            let selectedText;\r\n            if (this.props.selectedID) {\r\n                const option: { id: string; text: string; disabled?: boolean } | undefined = this.props.options.find(o => o.id === this.props.selectedID);\r\n                if (option) {\r\n                    selectedText = option.text;\r\n                }\r\n            } else {\r\n                selectedText = /*this.props.text ||*/ this.props.placeholder;\r\n            }\r\n\r\n            content.push(\r\n                <div key='selection' className='dropdown-top' title={selectedText}>\r\n                    <div className='item-text'>{selectedText}</div>\r\n                    <img className='arrow' src={ellipsis} alt='arrow' />\r\n                </div>\r\n            );\r\n\r\n            if (this.state.open) {\r\n                style += ' open';\r\n\r\n                const items = this.props.options.map(option => {\r\n                    if (option.text === null) {\r\n                        return <div key={option.id} className='divider' />;\r\n                    } else {\r\n                        return (\r\n                            <DropdownOption\r\n                                key={option.id}\r\n                                option={option}\r\n                                selected={option.id === this.props.selectedID}\r\n                                select={optionID => this.select(optionID)}\r\n                            />\r\n                        );\r\n                    }\r\n                });\r\n\r\n                content.push(\r\n                    <div key='options' className='dropdown-options'>\r\n                        {items}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={style} onClick={e => this.toggleOpen(e)}>\r\n                    {content}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface DropdownOptionProps {\r\n    option: { id: string; text: string; disabled?: boolean };\r\n    selected: boolean;\r\n    select: (optionID: string) => void;\r\n}\r\n\r\nclass DropdownOption extends React.Component<DropdownOptionProps> {\r\n    private click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (!this.props.option.disabled) {\r\n            this.props.select(this.props.option.id);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'dropdown-option';\r\n            if (this.props.selected) {\r\n                style += ' selected';\r\n            }\r\n            if (this.props.option.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            return (\r\n                <div className={style} title={this.props.option.text} onClick={e => this.click(e)}>\r\n                    {this.props.option.text}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport arrow from '../../resources/images/down-arrow-black.svg';\r\n\r\ninterface Props {\r\n    text: string;\r\n    content: string | JSX.Element;\r\n    disabled: boolean;\r\n}\r\n\r\ninterface State {\r\n    expanded: boolean;\r\n}\r\n\r\nexport default class Expander extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            expanded: false\r\n        };\r\n    }\r\n\r\n    private toggle() {\r\n        this.setState({\r\n            expanded: !this.state.expanded\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = this.props.disabled ? 'expander disabled' : 'expander';\r\n            if (this.state.expanded) {\r\n                style += ' expanded';\r\n            }\r\n\r\n            let content = null;\r\n            if (this.state.expanded) {\r\n                content = (\r\n                    <div className='expander-content'>\r\n                        {this.props.content}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={style}>\r\n                    <div className='expander-header' onClick={() => this.toggle()}>\r\n                        <div className='expander-text'>{this.props.text}</div>\r\n                        <img className='expander-button' src={arrow} alt='arrow' />\r\n                    </div>\r\n                    {content}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport arrow from '../../resources/images/down-arrow-black.svg';\r\n\r\ninterface Props {\r\n    click: (dir: string, dir2: 'in' | 'out' | null) => void;\r\n    direction: 'out' | 'in' | 'both' | 'eight';\r\n    disabled: boolean;\r\n}\r\n\r\nexport default class Radial extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        direction: 'out',\r\n        disabled: false\r\n    };\r\n\r\n    private click(e: React.MouseEvent, dir: string, dir2: 'in' | 'out' | null = null) {\r\n        e.stopPropagation();\r\n        this.props.click(dir, dir2);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'radial ' + (this.props.direction || 'out');\r\n            if (this.props.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            const showOut = (this.props.direction === 'out') || (this.props.direction === 'both') || (this.props.direction === 'eight');\r\n            const showIn = (this.props.direction === 'in') || (this.props.direction === 'both');\r\n            const showDiag = (this.props.direction === 'eight');\r\n\r\n            return (\r\n                <div className={style}>\r\n                    <div className='empty' style={{ display: showDiag ? 'none' : 'inline-block' }} />\r\n                    <div className='btn diag' style={{ display: showDiag ? 'inline-block' : 'none' }}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(135deg)' }}\r\n                            alt='nw'\r\n                            onClick={e => this.click(e, 'NW')}\r\n                        />\r\n                    </div>\r\n                    <div className='btn'>\r\n                        <div>\r\n                            <img\r\n                                src={arrow}\r\n                                style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(180deg)' }}\r\n                                alt='n'\r\n                                onClick={e => this.click(e, 'N', 'out')}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <img\r\n                                src={arrow}\r\n                                style={{ display: showIn ? 'inline-block' : 'none' }}\r\n                                alt='n'\r\n                                onClick={e => this.click(e, 'N', 'in')}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className='empty' style={{ display: showDiag ? 'none' : 'inline-block' }} />\r\n                    <div className='btn diag' style={{ display: showDiag ? 'inline-block' : 'none' }}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(-135deg)' }}\r\n                            alt='ne'\r\n                            onClick={e => this.click(e, 'NE')}\r\n                        />\r\n                    </div>\r\n                    <div className='btn' style={{ padding: (showIn && showOut) ? '10px 0' : '0'}}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(90deg)' }}\r\n                            alt='w'\r\n                            onClick={e => this.click(e, 'W', 'out')}\r\n                        />\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showIn ? 'inline-block' : 'none', transform: 'rotate(-90deg)' }}\r\n                            alt='w'\r\n                            onClick={e => this.click(e, 'W', 'in')}\r\n                        />\r\n                    </div>\r\n                    <div className='empty' />\r\n                    <div className='btn' style={{ padding: (showIn && showOut) ? '10px 0' : '0'}}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showIn ? 'inline-block' : 'none', transform: 'rotate(90deg)' }}\r\n                            alt='e'\r\n                            onClick={e => this.click(e, 'E', 'in')}\r\n                        />\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(-90deg)' }}\r\n                            alt='e'\r\n                            onClick={e => this.click(e, 'E', 'out')}\r\n                        />\r\n                    </div>\r\n                    <div className='empty' style={{ display: showDiag ? 'none' : 'inline-block' }} />\r\n                    <div className='btn diag' style={{ display: showDiag ? 'inline-block' : 'none' }}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(45deg)' }}\r\n                            alt='sw'\r\n                            onClick={e => this.click(e, 'SW')}\r\n                        />\r\n                    </div>\r\n                    <div className='btn'>\r\n                        <div>\r\n                            <img\r\n                                src={arrow}\r\n                                style={{ display: showIn ? 'inline-block' : 'none', transform: 'rotate(180deg)' }}\r\n                                alt='s'\r\n                                onClick={e => this.click(e, 'S', 'in')}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <img\r\n                                src={arrow}\r\n                                style={{ display: showOut ? 'inline-block' : 'none' }}\r\n                                alt='s'\r\n                                onClick={e => this.click(e, 'S', 'out')}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className='empty' style={{ display: showDiag ? 'none' : 'inline-block' }} />\r\n                    <div className='btn diag' style={{ display: showDiag ? 'inline-block' : 'none' }}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(-45deg)' }}\r\n                            alt='se'\r\n                            onClick={e => this.click(e, 'SE')}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport minus from '../../resources/images/minus.svg';\r\nimport plus from '../../resources/images/plus.svg';\r\n\r\ninterface Props {\r\n    source: any;\r\n    name: string;\r\n    nudgeValue: (delta: number) => void;\r\n    label: string;\r\n    disabled: boolean;\r\n    factors: number[];\r\n    display: ((value: number) => string) | null;\r\n}\r\n\r\nexport default class Spin extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        label: null,\r\n        disabled: false,\r\n        factors: null,\r\n        display: null\r\n    };\r\n\r\n    private click(e: React.MouseEvent, delta: number) {\r\n        e.stopPropagation();\r\n        this.props.nudgeValue(delta);\r\n    }\r\n\r\n    private touchEnd(e: React.TouchEvent, delta: number) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        this.props.nudgeValue(delta);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'info-value';\r\n            let value = this.props.source[this.props.name];\r\n            if (value === 0) {\r\n                style += ' dimmed';\r\n            }\r\n\r\n            if (this.props.display) {\r\n                value = this.props.display(value);\r\n            }\r\n\r\n            const minusBtns: JSX.Element[] = [];\r\n            const plusBtns: JSX.Element[] = [];\r\n\r\n            if (this.props.factors) {\r\n                this.props.factors.forEach(factor => {\r\n                    minusBtns.push(\r\n                        <div\r\n                            key={'minus' + factor}\r\n                            className='spin-button factor'\r\n                            onTouchEnd={e => this.touchEnd(e, -1 * factor)}\r\n                            onClick={e => this.click(e, -1 * factor)}\r\n                        >\r\n                            {'-' + factor}\r\n                        </div>\r\n                    );\r\n\r\n                    plusBtns.push(\r\n                        <div\r\n                            key={'plus' + factor}\r\n                            className='spin-button factor'\r\n                            onTouchEnd={e => this.touchEnd(e, +1 * factor)}\r\n                            onClick={e => this.click(e, +1 * factor)}\r\n                        >\r\n                            {'+' + factor}\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                minusBtns.reverse();\r\n            } else {\r\n                minusBtns.push(\r\n                    <div key='minus1' className='spin-button' onTouchEnd={e => this.touchEnd(e, -1)} onClick={e => this.click(e, -1)}>\r\n                        <img className='image' src={minus} alt='minus' />\r\n                    </div>\r\n                );\r\n\r\n                plusBtns.push(\r\n                    <div key='plus1' className='spin-button' onTouchEnd={e => this.touchEnd(e, +1)} onClick={e => this.click(e, +1)}>\r\n                        <img className='image' src={plus} alt='plus' />\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            const infoWidth = 80 * (this.props.factors ? this.props.factors.length : 1);\r\n\r\n            return (\r\n                <div className={this.props.disabled ? 'spin disabled' : 'spin'}>\r\n                    <div className='minus'>\r\n                        {minusBtns}\r\n                    </div>\r\n                    <div className='info' style={{ width: 'calc(100% - ' + infoWidth + 'px)' }}>\r\n                        <div className='info-label'>{this.props.label}</div>\r\n                        <div className={style}>{value}</div>\r\n                    </div>\r\n                    <div className='plus'>\r\n                        {plusBtns}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Monster } from '../../models/monster-group';\r\n\r\nimport Spin from '../controls/spin';\r\n\r\ninterface Props {\r\n    combatant: Monster;\r\n    edit: boolean;\r\n    nudgeValue: (combatant: Monster, field: string, delta: number) => void;\r\n}\r\n\r\ninterface State {\r\n    showAbilityScores: boolean;\r\n}\r\n\r\nexport default class AbilityScorePanel extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        edit: null,\r\n        nudgeValue: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showAbilityScores: false\r\n        };\r\n    }\r\n\r\n    private toggleAbilityScores() {\r\n        this.setState({\r\n            showAbilityScores: !this.state.showAbilityScores\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let result = null;\r\n\r\n            if (this.props.edit) {\r\n                result = (\r\n                    <div>\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='str'\r\n                            label='strength'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.str', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='dex'\r\n                            label='dexterity'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.dex', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='con'\r\n                            label='constitution'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.con', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='int'\r\n                            label='intelligence'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.int', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='wis'\r\n                            label='wisdom'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.wis', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='cha'\r\n                            label='charisma'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.cha', delta)}\r\n                        />\r\n                    </div>\r\n                );\r\n            } else {\r\n                result = (\r\n                    <div className='ability-scores' onClick={() => this.toggleAbilityScores()}>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>str</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.str\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.str)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>dex</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.dex\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.dex)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>con</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.con\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.con)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>int</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.int\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.int)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>wis</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.wis\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.wis)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>cha</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.cha\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.cha)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return result;\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combat, Combatant } from '../../models/combat';\r\nimport { Condition } from '../../models/condition';\r\n\r\nimport Expander from '../controls/expander';\r\nimport Spin from '../controls/spin';\r\n\r\ninterface Props {\r\n    combatant: Combatant;\r\n    combat: Combat;\r\n    nudgeConditionValue: (condition: Condition, field: string, delta: number) => void;\r\n    addCondition: () => void;\r\n    editCondition: (condition: Condition) => void;\r\n    removeCondition: (conditionID: string) => void;\r\n}\r\n\r\nexport default class ConditionsPanel extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const conditions = [];\r\n            if (this.props.combatant.conditions) {\r\n                for (let n = 0; n !== this.props.combatant.conditions.length; ++n) {\r\n                    const c = this.props.combatant.conditions[n];\r\n                    conditions.push(\r\n                        <ConditionPanel\r\n                            key={n}\r\n                            condition={c}\r\n                            combat={this.props.combat}\r\n                            nudgeConditionValue={(condition, type, delta) => this.props.nudgeConditionValue(condition, type, delta)}\r\n                            editCondition={condition => this.props.editCondition(condition)}\r\n                            removeCondition={conditionID => this.props.removeCondition(conditionID)}\r\n                        />\r\n                    );\r\n                }\r\n            }\r\n\r\n            return (\r\n                <div className='section'>\r\n                    {conditions}\r\n                    <button onClick={() => this.props.addCondition()}>add a condition</button>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface ConditionPanelProps {\r\n    condition: Condition;\r\n    combat: Combat;\r\n    nudgeConditionValue: (condition: Condition, field: string, delta: number) => void;\r\n    editCondition: (condition: Condition) => void;\r\n    removeCondition: (conditionID: string) => void;\r\n}\r\n\r\nclass ConditionPanel extends React.Component<ConditionPanelProps> {\r\n    public render() {\r\n        try {\r\n            let name: string = this.props.condition.name || 'condition';\r\n            if (this.props.condition.name === 'exhaustion') {\r\n                name += ' (' + this.props.condition.level + ')';\r\n            }\r\n            if ((this.props.condition.name === 'custom') && (this.props.condition.text !== null)) {\r\n                name = this.props.condition.text;\r\n            }\r\n\r\n            if (this.props.condition.duration !== null) {\r\n                name += ' ' + Utils.conditionDurationText(this.props.condition, this.props.combat);\r\n            }\r\n\r\n            const description = [];\r\n            if (this.props.condition.name === 'exhaustion') {\r\n                description.push(\r\n                    <div key='level' className='section'>\r\n                        <Spin\r\n                            source={this.props.condition}\r\n                            name='level'\r\n                            label='level'\r\n                            nudgeValue={delta => this.props.nudgeConditionValue(this.props.condition, 'level', delta)}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n            const text = Utils.conditionText(this.props.condition);\r\n            for (let n = 0; n !== text.length; ++n) {\r\n                description.push(<div key={n} className='section'>{text[n]}</div>);\r\n            }\r\n\r\n            return (\r\n                <Expander\r\n                    text={name}\r\n                    content={(\r\n                        <div>\r\n                            {description}\r\n                            <div className='divider' />\r\n                            <button onClick={() => this.props.editCondition(this.props.condition)}>edit</button>\r\n                            <button onClick={() => this.props.removeCondition(this.props.condition.id)}>remove</button>\r\n                        </div>\r\n                    )}\r\n                />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Showdown from 'showdown';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combatant } from '../../models/combat';\r\nimport { Monster, Trait, TRAIT_TYPES } from '../../models/monster-group';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport ControlRow from '../controls/control-row';\r\nimport Expander from '../controls/expander';\r\n\r\nconst showdown = new Showdown.Converter();\r\n\r\ninterface Props {\r\n    combatant: Monster | (Combatant & Monster);\r\n    mode: 'view' | 'edit' | 'template' | 'combat';\r\n    filter: string;\r\n    addTrait: (traitType: 'trait' | 'action' | 'legendary' | 'lair' | 'regional') => void;\r\n    copyTrait: (trait: Trait) => void;\r\n    removeTrait: (trait: Trait) => void;\r\n    changeValue: (trait: Trait, field: string, value: any) => void;\r\n    swapTraits: (t1: Trait, t2: Trait) => void;\r\n}\r\n\r\nexport default class TraitsPanel extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        mode: 'view',\r\n        filter: '',\r\n        addTrait: null,\r\n        copyTrait: null,\r\n        removeTrait: null,\r\n        changeValue: null,\r\n        swapTraits: null\r\n    };\r\n\r\n    private createTraitPanel(trait: Trait, prevTrait: Trait | null, nextTrait: Trait | null) {\r\n        return (\r\n            <TraitPanel\r\n                key={trait.id}\r\n                trait={trait}\r\n                mode={this.props.mode}\r\n                prevTrait={prevTrait}\r\n                nextTrait={nextTrait}\r\n                changeValue={(action, type, value) => this.props.changeValue(action, type, value)}\r\n                removeTrait={action => this.props.removeTrait(action)}\r\n                copyTrait={action => this.props.copyTrait(action)}\r\n                swapTraits={(t1, t2) => this.props.swapTraits(t1, t2)}\r\n            />\r\n        );\r\n    }\r\n\r\n    private createSection(traitsByType: { [id: string]: JSX.Element[] }, type: string) {\r\n        const traits = traitsByType[type];\r\n        if (traits.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='section subheading'>{Utils.traitType(type, true)}</div>\r\n                {traits}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const traitsByType: { [id: string]: JSX.Element[] } = {};\r\n\r\n            TRAIT_TYPES.forEach(type => {\r\n                const traits = this.props.combatant.traits\r\n                    .filter(t => t.type === type)\r\n                    .filter(t => Utils.match(this.props.filter, t.name));\r\n\r\n                const list: JSX.Element[] = [];\r\n                for (let n = 0; n !== traits.length; ++n) {\r\n                    const trait = traits[n];\r\n                    const prevTrait = n !== 0 ? traits[n - 1] : null;\r\n                    const nextTrait = n !== traits.length - 1 ? traits[n + 1] : null;\r\n                    list.push(this.createTraitPanel(trait, prevTrait, nextTrait));\r\n                }\r\n\r\n                if (this.props.mode === 'edit') {\r\n                    list.push(\r\n                        <button key='add' onClick={() => this.props.addTrait(type as 'trait' | 'action' | 'legendary' | 'lair' | 'regional')}>\r\n                            add a new {Utils.traitType(type, false)}\r\n                        </button>\r\n                    );\r\n                }\r\n\r\n                traitsByType[type] = list;\r\n            });\r\n\r\n            if (this.props.mode === 'edit') {\r\n                return (\r\n                    <div className='row collapse'>\r\n                        <div className='columns small-4 medium-4 large-4 list-column'>\r\n                            {this.createSection(traitsByType, 'trait')}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 list-column'>\r\n                            {this.createSection(traitsByType, 'action')}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 list-column'>\r\n                            {this.createSection(traitsByType, 'legendary')}\r\n                            {this.createSection(traitsByType, 'lair')}\r\n                            {this.createSection(traitsByType, 'regional')}\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            if (this.props.combatant.traits.length === 0) {\r\n                return (\r\n                    <div><i>no traits or actions</i></div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div>\r\n                    {this.createSection(traitsByType, 'trait')}\r\n                    {this.createSection(traitsByType, 'action')}\r\n                    {this.createSection(traitsByType, 'legendary')}\r\n                    {this.createSection(traitsByType, 'lair')}\r\n                    {this.createSection(traitsByType, 'regional')}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface TraitPanelProps {\r\n    trait: Trait;\r\n    mode: 'view' | 'edit' | 'template' | 'combat';\r\n    prevTrait: Trait | null;\r\n    nextTrait: Trait | null;\r\n    changeValue: (trait: Trait, field: string, value: any) => void;\r\n    copyTrait: (trait: Trait) => void;\r\n    removeTrait: (trait: Trait) => void;\r\n    swapTraits: (t1: Trait, t2: Trait) => void;\r\n}\r\n\r\nclass TraitPanel extends React.Component<TraitPanelProps> {\r\n    public render() {\r\n        try {\r\n            let maxUses = 0;\r\n            let heading = this.props.trait.name || 'unnamed ' + Utils.traitType(this.props.trait.type, false);\r\n\r\n            if (this.props.trait.usage) {\r\n                let used = '';\r\n                if (this.props.trait.usage.toLowerCase().startsWith('recharge ')) {\r\n                    maxUses = 1;\r\n                    if (this.props.trait.uses > 0) {\r\n                        used = '; used';\r\n                    }\r\n                }\r\n                const found = this.props.trait.usage.toLowerCase().match(/(\\d+)\\s*\\/\\s*day/);\r\n                if (found) {\r\n                    maxUses = parseInt(found[1], 10);\r\n                    if (this.props.trait.uses > 0) {\r\n                        used = '; used ' + this.props.trait.uses;\r\n                    }\r\n                }\r\n                heading += ' *(' + this.props.trait.usage + used + ')*';\r\n            }\r\n            const markdown = '**' + heading + '** ' + this.props.trait.text;\r\n\r\n            switch (this.props.mode) {\r\n                case 'view':\r\n                    return (\r\n                        <div key={this.props.trait.id} className='section trait'>\r\n                            <div dangerouslySetInnerHTML={{ __html: showdown.makeHtml(markdown) }} />\r\n                        </div>\r\n                    );\r\n                case 'edit':\r\n                    const details = (\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='name'\r\n                                value={this.props.trait.name}\r\n                                onChange={event => this.props.changeValue(this.props.trait, 'name', event.target.value)}\r\n                            />\r\n                            <input\r\n                                type='text'\r\n                                placeholder='usage'\r\n                                value={this.props.trait.usage}\r\n                                onChange={event => this.props.changeValue(this.props.trait, 'usage', event.target.value)}\r\n                            />\r\n                            <textarea\r\n                                placeholder='details'\r\n                                value={this.props.trait.text}\r\n                                onChange={event => this.props.changeValue(this.props.trait, 'text', event.target.value)}\r\n                            />\r\n                            <div className='divider' />\r\n                            <ControlRow\r\n                                controls={[\r\n                                    <button\r\n                                        key='up'\r\n                                        className={this.props.prevTrait ? '' : 'disabled'}\r\n                                        onClick={() => this.props.swapTraits(this.props.trait, this.props.prevTrait as Trait)}\r\n                                    >\r\n                                        move up\r\n                                    </button>,\r\n                                    <button\r\n                                        key='down'\r\n                                        className={this.props.nextTrait ? '' : 'disabled'}\r\n                                        onClick={() => this.props.swapTraits(this.props.trait, this.props.nextTrait as Trait)}\r\n                                    >\r\n                                        move down\r\n                                    </button>\r\n                                ]}\r\n                            />\r\n                            <ConfirmButton text='delete' callback={() => this.props.removeTrait(this.props.trait)} />\r\n                        </div>\r\n                    );\r\n\r\n                    return (\r\n                        <Expander\r\n                            text={this.props.trait.name || 'unnamed ' + Utils.traitType(this.props.trait.type, false)}\r\n                            content={details}\r\n                        />\r\n                    );\r\n                case 'template':\r\n                    return (\r\n                        <div key={this.props.trait.id} className='section trait'>\r\n                            <div dangerouslySetInnerHTML={{ __html: showdown.makeHtml(markdown) }} />\r\n                            <button onClick={() => this.props.copyTrait(this.props.trait)}>copy</button>\r\n                        </div>\r\n                    );\r\n                case 'combat':\r\n                    let style = '';\r\n                    let usage = null;\r\n                    if (maxUses > 0) {\r\n                        const isTapped = this.props.trait.uses >= maxUses;\r\n                        if (isTapped) {\r\n                            style = 'strikethrough';\r\n                            usage = <button onClick={() => this.props.changeValue(this.props.trait, 'uses', 0)}>recharge</button>;\r\n                        } else {\r\n                            usage = <button onClick={() => this.props.changeValue(this.props.trait, 'uses', this.props.trait.uses + 1)}>use</button>;\r\n                        }\r\n                    }\r\n                    return (\r\n                        <div key={this.props.trait.id} className='section trait'>\r\n                            <div className={style} dangerouslySetInnerHTML={{ __html: showdown.makeHtml(markdown) }} />\r\n                            {usage}\r\n                        </div>\r\n                    );\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combat, Combatant } from '../../models/combat';\r\nimport { Condition } from '../../models/condition';\r\nimport { Encounter, EncounterSlot, EncounterWave } from '../../models/encounter';\r\nimport { Monster, MonsterGroup, Trait } from '../../models/monster-group';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport ControlRow from '../controls/control-row';\r\nimport Dropdown from '../controls/dropdown';\r\nimport Expander from '../controls/expander';\r\nimport Radial from '../controls/radial';\r\nimport Spin from '../controls/spin';\r\nimport AbilityScorePanel from '../panels/ability-score-panel';\r\nimport ConditionsPanel from '../panels/conditions-panel';\r\nimport TraitsPanel from '../panels/traits-panel';\r\nimport InfoCard from './info-card';\r\n\r\nimport arrow from '../../resources/images/down-arrow.svg';\r\n\r\ninterface Props {\r\n    combatant: Monster | (Monster & Combatant);\r\n    mode: string;\r\n    library: MonsterGroup[];\r\n    changeValue: (monster: any, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, delta: number) => void;\r\n    // Library\r\n    filter: string;\r\n    editMonster: (monster: Monster) => void;\r\n    removeMonster: (monster: Monster) => void;\r\n    cloneMonster: (monster: Monster, name: string) => void;\r\n    moveToGroup: (monster: Monster, group: string) => void;\r\n    copyTrait: (trait: Trait) => void;\r\n    selectMonster: (monster: Monster) => void;\r\n    deselectMonster: (monster: Monster) => void;\r\n    // Encounter builder\r\n    encounter: Encounter;\r\n    slot: EncounterSlot;\r\n    addEncounterSlot: (monster: Monster, waveID: string | null) => void;\r\n    removeEncounterSlot: (slot: EncounterSlot) => void;\r\n    // Combat\r\n    combat: Combat;\r\n    makeCurrent: (combatant: Combatant) => void;\r\n    makeActive: (combatant: Combatant) => void;\r\n    makeDefeated: (combatant: Combatant) => void;\r\n    endTurn: (combatant: Combatant) => void;\r\n    mapAdd: (combatant: Combatant) => void;\r\n    mapMove: (combatant: Combatant, dir: string) => void;\r\n    mapRemove: (combatant: Combatant) => void;\r\n    removeCombatant: (combatant: Combatant) => void;\r\n    changeHP: (combatant: Combatant, hp: number, tempHP: number) => void;\r\n    addCondition: (combatant: Combatant) => void;\r\n    editCondition: (combatant: Combatant, condition: Condition) => void;\r\n    removeCondition: (combatant: Combatant, conditionID: string) => void;\r\n    nudgeConditionValue: (condition: Condition, field: string, delta: number) => void;\r\n}\r\n\r\ninterface State {\r\n    showDetails: boolean;\r\n    cloneName: string;\r\n    damageOrHealing: number;\r\n}\r\n\r\nexport default class MonsterCard extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        library: null,\r\n        changeValue: null,\r\n        nudgeValue: null,\r\n        filter: '',\r\n        editMonster: null,\r\n        removeMonster: null,\r\n        cloneMonster: null,\r\n        moveToGroup: null,\r\n        copyTrait: null,\r\n        selectMonster: null,\r\n        deselectMonster: null,\r\n        encounter: null,\r\n        slot: null,\r\n        addEncounterSlot: null,\r\n        removeEncounterSlot: null,\r\n        combat: null,\r\n        makeCurrent: null,\r\n        makeActive: null,\r\n        makeDefeated: null,\r\n        endTurn: null,\r\n        mapAdd: null,\r\n        mapMove: null,\r\n        mapRemove: null,\r\n        removeCombatant: null,\r\n        changeHP: null,\r\n        addCondition: null,\r\n        editCondition: null,\r\n        removeCondition: null,\r\n        nudgeConditionValue: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showDetails: false,\r\n            cloneName: props.combatant.name + ' copy',\r\n            damageOrHealing: 0\r\n        };\r\n    }\r\n\r\n    private setCloneName(cloneName: string) {\r\n        this.setState({\r\n            cloneName: cloneName\r\n        });\r\n    }\r\n\r\n    private toggleDetails() {\r\n        this.setState({\r\n            showDetails: !this.state.showDetails\r\n        });\r\n    }\r\n\r\n    private setDamage(value: number) {\r\n        this.setState({\r\n            damageOrHealing: value\r\n        });\r\n    }\r\n\r\n    private nudgeDamage(delta: number) {\r\n        this.setState({\r\n            damageOrHealing: Math.max(this.state.damageOrHealing + delta, 0)\r\n        });\r\n    }\r\n\r\n    private heal() {\r\n        const combatant = this.props.combatant as Combatant;\r\n\r\n        let hp = (combatant.hp ? combatant.hp : 0) + this.state.damageOrHealing;\r\n        hp = Math.min(hp, this.props.combatant.hpMax);\r\n\r\n        this.setState({\r\n            damageOrHealing: 0\r\n        }, () => {\r\n            this.props.changeHP(combatant, hp, this.props.combatant.hpTemp);\r\n        });\r\n    }\r\n\r\n    private damage() {\r\n        const combatant = this.props.combatant as Combatant;\r\n\r\n        let hp = (combatant.hp ? combatant.hp : 0);\r\n        let temp = this.props.combatant.hpTemp;\r\n\r\n        let damage = this.state.damageOrHealing;\r\n\r\n        // Take damage off temp HP first\r\n        const val = Math.min(damage, temp);\r\n        damage -= val;\r\n        temp -= val;\r\n\r\n        // Take the rest off HP\r\n        hp -= damage;\r\n        hp = Math.max(hp, 0);\r\n\r\n        this.setState({\r\n            damageOrHealing: 0\r\n        }, () => {\r\n            this.props.changeHP(combatant, hp, temp);\r\n        });\r\n    }\r\n\r\n    private description() {\r\n        let sizeAndType = (this.props.combatant.size + ' ' + this.props.combatant.category).toLowerCase();\r\n        if (this.props.combatant.tag) {\r\n            sizeAndType += ' (' + this.props.combatant.tag.toLowerCase() + ')';\r\n        }\r\n        sizeAndType += ', ';\r\n\r\n        let align = '';\r\n        if (this.props.combatant.alignment) {\r\n            align = this.props.combatant.alignment.toLowerCase() + ', ';\r\n        }\r\n\r\n        const cr = 'cr ' + Utils.challenge(this.props.combatant.challenge);\r\n\r\n        return sizeAndType + align + cr;\r\n    }\r\n\r\n    private monsterIsInWave(wave: EncounterWave) {\r\n        return wave.slots.some(s => {\r\n            const group = this.props.library.find(g => g.monsters.includes(this.props.combatant));\r\n            return !!group && (s.monsterGroupName === group.name) && (s.monsterName === this.props.combatant.name);\r\n        });\r\n    }\r\n\r\n    private getHP() {\r\n        if (this.props.combatant.hitDice === 0) {\r\n            return this.props.combatant.hpMax;\r\n        }\r\n\r\n        const die = Utils.hitDieType(this.props.combatant.size);\r\n        const conMod = Utils.modifierValue(this.props.combatant.abilityScores.con) * this.props.combatant.hitDice;\r\n        let conModStr = '';\r\n        if (conMod > 0) {\r\n            conModStr = ' +' + conMod;\r\n        }\r\n        if (conMod < 0) {\r\n            conModStr = ' ' + conMod;\r\n        }\r\n        return this.props.combatant.hpMax + ' (' + this.props.combatant.hitDice + 'd' + die + conModStr + ')';\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const options = [];\r\n            if (this.props.mode.indexOf('no-buttons') === -1) {\r\n                if (this.props.mode.indexOf('view') !== -1) {\r\n                    if (this.props.mode.indexOf('editable') !== -1) {\r\n                        options.push(\r\n                            <button key='edit' onClick={() => this.props.editMonster(this.props.combatant)}>edit monster</button>\r\n                        );\r\n\r\n                        options.push(\r\n                            <Expander\r\n                                key='clone'\r\n                                text='clone monster'\r\n                                content={\r\n                                    <div>\r\n                                        <input\r\n                                            type='text'\r\n                                            placeholder='monster name'\r\n                                            value={this.state.cloneName}\r\n                                            onChange={event => this.setCloneName(event.target.value)}\r\n                                        />\r\n                                        <button onClick={() => this.props.cloneMonster(this.props.combatant, this.state.cloneName)}>create copy</button>\r\n                                    </div>\r\n                                }\r\n                            />\r\n                        );\r\n\r\n                        const groupOptions: { id: string, text: string }[] = [];\r\n                        this.props.library.forEach(group => {\r\n                            if (group.monsters.indexOf(this.props.combatant) === -1) {\r\n                                groupOptions.push({\r\n                                    id: group.id,\r\n                                    text: group.name\r\n                                });\r\n                            }\r\n                        });\r\n                        options.push(\r\n                            <Dropdown\r\n                                key='move'\r\n                                options={groupOptions}\r\n                                placeholder='move to group...'\r\n                                select={optionID => this.props.moveToGroup(this.props.combatant, optionID)}\r\n                            />\r\n                        );\r\n\r\n                        options.push(<ConfirmButton key='remove' text='delete monster' callback={() => this.props.removeMonster(this.props.combatant)} />);\r\n                    }\r\n                    if (this.props.mode.indexOf('encounter') !== -1) {\r\n                        if (this.props.slot) {\r\n                            // This card is in an encounter or a wave\r\n                            options.push(\r\n                                <button key='remove' onClick={() => this.props.removeEncounterSlot(this.props.slot)}>\r\n                                    remove from encounter\r\n                                </button>\r\n                            );\r\n                        } else {\r\n                            let canAdd = false;\r\n                            // This card is in the library list\r\n                            if (!this.monsterIsInWave(this.props.encounter)) {\r\n                                options.push(\r\n                                    <button key='add encounter' onClick={() => this.props.addEncounterSlot(this.props.combatant, null)}>\r\n                                        add to encounter\r\n                                    </button>\r\n                                );\r\n                                canAdd = true;\r\n                            }\r\n                            this.props.encounter.waves.forEach(wave => {\r\n                                if (!this.monsterIsInWave(wave)) {\r\n                                    options.push(\r\n                                        <button key={'add ' + wave.id} onClick={() => this.props.addEncounterSlot(this.props.combatant, wave.id)}>\r\n                                            add to {wave.name}\r\n                                        </button>\r\n                                    );\r\n                                    canAdd = true;\r\n                                }\r\n                            });\r\n                            // If we can't add it anywhere, don't show it\r\n                            if (!canAdd) {\r\n                                return (\r\n                                    <InfoCard\r\n                                        getHeading={() => {\r\n                                            return (\r\n                                                <div className='heading'>\r\n                                                    <div className='title'>{this.props.combatant.name}</div>\r\n                                                </div>\r\n                                            );\r\n                                        }}\r\n                                        getContent={() => {\r\n                                            return (\r\n                                                <div className='section centered'>\r\n                                                    <i>this monster is already part of this encounter</i>\r\n                                                </div>\r\n                                            );\r\n                                        }}\r\n                                    />\r\n                                );\r\n                            }\r\n                        }\r\n                    }\r\n                    if (this.props.mode.indexOf('candidate') !== -1) {\r\n                        if (this.props.mode.indexOf('selected') === -1) {\r\n                            options.push(\r\n                                <button key='select' onClick={() => this.props.selectMonster(this.props.combatant)}>select monster</button>\r\n                            );\r\n                        } else {\r\n                            options.push(\r\n                                <button key='deselect' onClick={() => this.props.deselectMonster(this.props.combatant)}>deselect monster</button>\r\n                            );\r\n                        }\r\n                    }\r\n                }\r\n                if (this.props.mode.indexOf('combat') !== -1) {\r\n                    const combatant = this.props.combatant as Combatant;\r\n\r\n                    if (this.props.mode.indexOf('tactical') !== -1) {\r\n                        if (this.props.mode.indexOf('on-map') !== -1) {\r\n                            options.push(\r\n                                <div key='mapMove' className='section centered'>\r\n                                    <Radial\r\n                                        direction='eight'\r\n                                        click={dir => this.props.mapMove(combatant, dir)}\r\n                                    />\r\n                                </div>\r\n                            );\r\n                            options.push(\r\n                                <Spin\r\n                                    key='altitude'\r\n                                    source={this.props.combatant}\r\n                                    name='altitude'\r\n                                    label='altitude'\r\n                                    display={value => value + ' ft.'}\r\n                                    nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'altitude', delta * 5)}\r\n                                />\r\n                            );\r\n                            options.push(<button key='mapRemove' onClick={() => this.props.mapRemove(combatant)}>remove from map</button>);\r\n                        }\r\n                        if (this.props.mode.indexOf('off-map') !== -1) {\r\n                            options.push(<button key='mapAdd' onClick={() => this.props.mapAdd(combatant)}>add to map</button>);\r\n                        }\r\n                        options.push(<div key='tactical-div' className='divider' />);\r\n                    }\r\n                    if (combatant.pending && !combatant.active && !combatant.defeated) {\r\n                        options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                    }\r\n                    if (!combatant.pending && combatant.active && !combatant.defeated) {\r\n                        if (combatant.current) {\r\n                            options.push(<button key='endTurn' onClick={() => this.props.endTurn(combatant)}>end turn</button>);\r\n                            options.push(<button key='makeDefeated' onClick={() => this.props.makeDefeated(combatant)}>mark as defeated and end turn</button>);\r\n                        } else {\r\n                            options.push(<button key='makeCurrent' onClick={() => this.props.makeCurrent(combatant)}>start turn</button>);\r\n                            options.push(<button key='makeDefeated' onClick={() => this.props.makeDefeated(combatant)}>mark as defeated</button>);\r\n                            options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                        }\r\n                    }\r\n                    if (!combatant.pending && !combatant.active && combatant.defeated) {\r\n                        options.push(<button key='makeActive' onClick={() => this.props.makeActive(combatant)}>mark as active</button>);\r\n                        options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                    }\r\n                    options.push(\r\n                        <Expander\r\n                            key='rename'\r\n                            text='change name'\r\n                            content={(\r\n                                <div>\r\n                                    <input\r\n                                        type='text'\r\n                                        value={combatant.displayName}\r\n                                        onChange={event => this.props.changeValue(this.props.combatant, 'displayName', event.target.value)}\r\n                                    />\r\n                                </div>\r\n                            )}\r\n                        />\r\n                    );\r\n                    options.push(\r\n                        <Expander\r\n                            key='init'\r\n                            text='change initiative score'\r\n                            content={(\r\n                                <div>\r\n                                    <Spin\r\n                                        source={this.props.combatant}\r\n                                        name='initiative'\r\n                                        label='initiative'\r\n                                        nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'initiative', delta)}\r\n                                    />\r\n                                </div>\r\n                            )}\r\n                        />\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf('template') !== -1) {\r\n                    // None\r\n                }\r\n            }\r\n\r\n            let stats = null;\r\n            if (this.props.mode.indexOf('view') !== -1) {\r\n                let slotSection = null;\r\n                if (this.props.slot) {\r\n                    slotSection = (\r\n                        <div>\r\n                            <div className='divider' />\r\n                            <Spin\r\n                                source={this.props.slot}\r\n                                name='count'\r\n                                label='count'\r\n                                nudgeValue={delta => this.props.nudgeValue(this.props.slot, 'count', delta)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                let details = null;\r\n                if (this.state.showDetails || (this.props.mode.indexOf('generated') !== -1)) {\r\n                    details = (\r\n                        <div>\r\n                            <div className='divider' />\r\n                            <div className='section'>\r\n                                <b>ac</b> {this.props.combatant.ac}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.hpMax !== 0 ? '' : 'none' }}>\r\n                                <b>hp</b> {this.getHP()}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.speed !== '' ? '' : 'none' }}>\r\n                                <b>speed</b> {this.props.combatant.speed}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <AbilityScorePanel combatant={this.props.combatant} />\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.savingThrows !== '' ? '' : 'none' }}>\r\n                                <b>saving throws</b> {this.props.combatant.savingThrows}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.skills !== '' ? '' : 'none' }}>\r\n                                <b>skills</b> {this.props.combatant.skills}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.damage.resist !== '' ? '' : 'none' }}>\r\n                                <b>damage resistances</b> {this.props.combatant.damage.resist}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.damage.vulnerable !== '' ? '' : 'none' }}>\r\n                                <b>damage vulnerabilities</b> {this.props.combatant.damage.vulnerable}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.damage.immune !== '' ? '' : 'none' }}>\r\n                                <b>damage immunities</b> {this.props.combatant.damage.immune}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.conditionImmunities !== '' ? '' : 'none' }}>\r\n                                <b>condition immunities</b> {this.props.combatant.conditionImmunities}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.senses !== '' ? '' : 'none' }}>\r\n                                <b>senses</b> {this.props.combatant.senses}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.languages !== '' ? '' : 'none' }}>\r\n                                <b>languages</b> {this.props.combatant.languages}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.equipment !== '' ? '' : 'none' }}>\r\n                                <b>equipment</b> {this.props.combatant.equipment}\r\n                            </div>\r\n                            <div className='divider' />\r\n                            <TraitsPanel combatant={this.props.combatant} />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                stats = (\r\n                    <div className='stats'>\r\n                        <div className='section centered'>\r\n                            <i>{this.description()}</i>\r\n                        </div>\r\n                        {slotSection}\r\n                        {details}\r\n                    </div>\r\n                );\r\n            }\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                stats = (\r\n                    <div className='stats'>\r\n                        <div className='section centered'>\r\n                            <i>{this.description()}</i>\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <Spin\r\n                            source={this.props.combatant}\r\n                            name='hp'\r\n                            label='hit points'\r\n                            factors={[1, 10]}\r\n                            nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'hp', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant}\r\n                            name='hpTemp'\r\n                            label='temp hp'\r\n                            factors={[1, 10]}\r\n                            nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'hpTemp', delta)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <Spin\r\n                            source={this.state}\r\n                            name='damageOrHealing'\r\n                            factors={[1, 10]}\r\n                            nudgeValue={delta => this.nudgeDamage(delta)}\r\n                        />\r\n                        <ControlRow\r\n                            controls={[\r\n                                <button key='heal' onClick={() => this.heal()}>heal</button>,\r\n                                <button key='reset' onClick={() => this.setDamage(0)}>reset</button>,\r\n                                <button key='damage' onClick={() => this.damage()}>damage</button>\r\n                            ]}\r\n                            disabled={this.state.damageOrHealing === 0}\r\n                        />\r\n                        <div className='section' style={{ display: this.props.combatant.damage.resist !== '' ? '' : 'none' }}>\r\n                            <b>damage resistances</b> {this.props.combatant.damage.resist}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.damage.vulnerable !== '' ? '' : 'none' }}>\r\n                            <b>damage vulnerabilities</b> {this.props.combatant.damage.vulnerable}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.damage.immune !== '' ? '' : 'none' }}>\r\n                            <b>damage immunities</b> {this.props.combatant.damage.immune}\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='section'>\r\n                            <AbilityScorePanel combatant={this.props.combatant} />\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.ac !== 0 ? '' : 'none' }}>\r\n                            <b>ac</b> {this.props.combatant.ac}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.savingThrows !== '' ? '' : 'none' }}>\r\n                            <b>saving throws</b> {this.props.combatant.savingThrows}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.skills !== '' ? '' : 'none' }}>\r\n                            <b>skills</b> {this.props.combatant.skills}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.speed !== '' ? '' : 'none' }}>\r\n                            <b>speed</b> {this.props.combatant.speed}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.senses !== '' ? '' : 'none' }}>\r\n                            <b>senses</b> {this.props.combatant.senses}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.languages !== '' ? '' : 'none' }}>\r\n                            <b>languages</b> {this.props.combatant.languages}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.equipment !== '' ? '' : 'none' }}>\r\n                            <b>equipment</b> {this.props.combatant.equipment}\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <TraitsPanel\r\n                            combatant={this.props.combatant}\r\n                            mode='combat'\r\n                            changeValue={(trait, field, value) => this.props.changeValue(trait, field, value)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <div className='section subheading'>\r\n                            conditions\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.conditionImmunities !== '' ? '' : 'none' }}>\r\n                            <b>condition immunities</b> {this.props.combatant.conditionImmunities}\r\n                        </div>\r\n                        <ConditionsPanel\r\n                            combatant={this.props.combatant as Combatant}\r\n                            combat={this.props.combat}\r\n                            addCondition={() => this.props.addCondition(this.props.combatant as Combatant)}\r\n                            editCondition={condition => this.props.editCondition(this.props.combatant as Combatant, condition)}\r\n                            removeCondition={conditionID => this.props.removeCondition(this.props.combatant as Combatant, conditionID)}\r\n                            nudgeConditionValue={(condition, type, delta) => this.props.nudgeConditionValue(condition, type, delta)}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n            if (this.props.mode.indexOf('template') !== -1) {\r\n                if (this.props.mode.indexOf('overview') !== -1) {\r\n                    stats = (\r\n                        <div>\r\n                            <div className='section centered'>\r\n                                <i>{this.description()}</i>\r\n                            </div>\r\n                            <div className='divider' />\r\n                            <div className='section'>\r\n                                <b>speed</b> {this.props.combatant.speed || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>senses</b> {this.props.combatant.senses || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>languages</b> {this.props.combatant.languages || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>equipment</b> {this.props.combatant.equipment || '-'}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf('abilities') !== -1) {\r\n                    stats = (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <AbilityScorePanel combatant={this.props.combatant} />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>saving throws</b> {this.props.combatant.savingThrows || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>skills</b> {this.props.combatant.skills || '-'}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf('cbt-stats') !== -1) {\r\n                    stats = (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <b>ac</b> {this.props.combatant.ac}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>hp</b> {this.getHP()}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>damage immunity</b> {this.props.combatant.damage.immune || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>damage resistance</b> {this.props.combatant.damage.resist || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>damage vulnerability</b> {this.props.combatant.damage.vulnerable || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>condition immunities</b> {this.props.combatant.conditionImmunities || '-'}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf('actions') !== -1) {\r\n                    stats = (\r\n                        <TraitsPanel\r\n                            combatant={this.props.combatant}\r\n                            mode='template'\r\n                            filter={this.props.filter}\r\n                            copyTrait={trait => this.props.copyTrait(trait)}\r\n                        />\r\n                    );\r\n                }\r\n            }\r\n\r\n            let toggle = null;\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                // Don't show toggle button for combatant\r\n            } else if (this.props.mode.indexOf('template') !== -1) {\r\n                // Don't show toggle button for template\r\n            } else if (this.props.mode.indexOf('view generated') !== -1) {\r\n                // Don't show toggle button for generated monster\r\n            } else {\r\n                const imageStyle = this.state.showDetails ? 'image rotate' : 'image';\r\n                toggle = (\r\n                    <img className={imageStyle} src={arrow} alt='arrow' onClick={() => this.toggleDetails()} />\r\n                );\r\n            }\r\n\r\n            const name = (this.props.combatant as Combatant ? (this.props.combatant as Combatant).displayName : null)\r\n                || this.props.combatant.name\r\n                || 'unnamed monster';\r\n\r\n            return (\r\n                <div className='card monster'>\r\n                    <div className='heading'>\r\n                        <div className='title'>{name}</div>\r\n                        {toggle}\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        {stats}\r\n                        <div style={{ display: options.length > 0 ? '' : 'none' }}>\r\n                            <div className='divider' />\r\n                            <div className='section'>{options}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Combatant } from '../../models/combat';\r\nimport { PC } from '../../models/party';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport Expander from '../controls/expander';\r\nimport Radial from '../controls/radial';\r\nimport Spin from '../controls/spin';\r\n\r\nimport arrow from '../../resources/images/down-arrow.svg';\r\n\r\ninterface Props {\r\n    combatant: PC | (PC & Combatant);\r\n    mode: string;\r\n    changeValue: (pc: PC, field: string, value: any) => void;\r\n    nudgeValue: (pc: PC, field: string, delta: number) => void;\r\n    removePC: (pc: PC) => void;\r\n    // Combat\r\n    makeCurrent: (combatant: Combatant) => void;\r\n    makeActive: (combatant: Combatant) => void;\r\n    makeDefeated: (combatant: Combatant) => void;\r\n    endTurn: (combatant: Combatant) => void;\r\n    mapAdd: (combatant: Combatant) => void;\r\n    mapMove: (combatant: Combatant, dir: string) => void;\r\n    mapRemove: (combatant: Combatant) => void;\r\n    removeCombatant: (combatant: Combatant) => void;\r\n}\r\n\r\ninterface State {\r\n    showDetails: boolean;\r\n}\r\n\r\nexport default class PCCard extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        removePC: null,\r\n        makeCurrent: null,\r\n        makeActive: null,\r\n        makeDefeated: null,\r\n        endTurn: null,\r\n        mapAdd: null,\r\n        mapMove: null,\r\n        mapRemove: null,\r\n        removeCombatant: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showDetails: false\r\n        };\r\n    }\r\n\r\n    private toggleDetails() {\r\n        this.setState({\r\n            showDetails: !this.state.showDetails\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const options = [];\r\n            if (this.props.mode.indexOf('edit') !== -1) {\r\n                if (this.props.combatant.active) {\r\n                    options.push(\r\n                        <button key='toggle-active' onClick={() => this.props.changeValue(this.props.combatant, 'active', false)}>\r\n                            mark inactive\r\n                        </button>\r\n                    );\r\n                } else {\r\n                    options.push(\r\n                        <button key='toggle-active' onClick={() => this.props.changeValue(this.props.combatant, 'active', true)}>\r\n                            mark active\r\n                        </button>\r\n                    );\r\n                }\r\n                options.push(<ConfirmButton key='remove' text='delete pc' callback={() => this.props.removePC(this.props.combatant)} />);\r\n            }\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                const combatant = this.props.combatant as Combatant;\r\n\r\n                if (this.props.mode.indexOf('tactical') !== -1) {\r\n                    if (this.props.mode.indexOf('on-map') !== -1) {\r\n                        options.push(\r\n                            <div key='mapMove' className='section centered'>\r\n                                <Radial\r\n                                    direction='eight'\r\n                                    click={dir => this.props.mapMove(combatant, dir)}\r\n                                />\r\n                            </div>\r\n                        );\r\n                        options.push(\r\n                            <Spin\r\n                                key='altitude'\r\n                                source={this.props.combatant}\r\n                                name='altitude'\r\n                                label='altitude'\r\n                                display={value => value + ' ft.'}\r\n                                nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'altitude', delta * 5)}\r\n                            />\r\n                        );\r\n                        options.push(<button key='mapRemove' onClick={() => this.props.mapRemove(combatant)}>remove from map</button>);\r\n                    }\r\n                    if (this.props.mode.indexOf('off-map') !== -1) {\r\n                        options.push(<button key='mapAdd' onClick={() => this.props.mapAdd(combatant)}>add to map</button>);\r\n                    }\r\n                    options.push(<div key='tactical-div' className='divider' />);\r\n                }\r\n                if (combatant.pending && !combatant.active && !combatant.defeated) {\r\n                    options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                }\r\n                if (!combatant.pending && combatant.active && !combatant.defeated) {\r\n                    if (combatant.current) {\r\n                        options.push(<button key='endTurn' onClick={() => this.props.endTurn(combatant)}>end turn</button>);\r\n                        options.push(<button key='makeDefeated' onClick={() => this.props.makeDefeated(combatant)}>mark as defeated and end turn</button>);\r\n                    } else {\r\n                        options.push(<button key='makeCurrent' onClick={() => this.props.makeCurrent(combatant)}>start turn</button>);\r\n                        options.push(<button key='makeDefeated' onClick={() => this.props.makeDefeated(combatant)}>mark as defeated</button>);\r\n                        options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                    }\r\n                    options.push(\r\n                        <Expander\r\n                            key='init'\r\n                            text='change initiative score'\r\n                            content={(\r\n                                <div>\r\n                                    <Spin\r\n                                        source={this.props.combatant}\r\n                                        name='initiative'\r\n                                        label='initiative'\r\n                                        nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'initiative', delta)}\r\n                                    />\r\n                                </div>\r\n                            )}\r\n                        />\r\n                    );\r\n                }\r\n                if (!combatant.pending && !combatant.active && combatant.defeated) {\r\n                    options.push(<button key='makeActive' onClick={() => this.props.makeActive(combatant)}>mark as active</button>);\r\n                    options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                }\r\n            }\r\n\r\n            const desc = (this.props.combatant.race || 'unknown race')\r\n                + ' ' + (this.props.combatant.classes || 'unknown class')\r\n                + ', level ' + this.props.combatant.level;\r\n\r\n            const commonStatBlock = (\r\n                <div className='stats'>\r\n                    <div className='section centered lowercase'>\r\n                        <i>{desc}</i>\r\n                        <div style={{ display: this.props.combatant.url ? '' : 'none' }}>\r\n                            <a href={this.props.combatant.url} target='_blank' rel='noopener noreferrer'>d&d beyond sheet</a>\r\n                        </div>\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section subheading'>languages</div>\r\n                    <div className='section'>\r\n                        {this.props.combatant.languages || '-'}\r\n                    </div>\r\n                    <div className='section subheading'>passive skills</div>\r\n                    <div className='section'>\r\n                        <div><b>insight</b> {this.props.combatant.passiveInsight}</div>\r\n                        <div><b>investigation</b> {this.props.combatant.passiveInvestigation}</div>\r\n                        <div><b>perception</b> {this.props.combatant.passivePerception}</div>\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            let stats = null;\r\n            if (this.props.mode.indexOf('edit') !== -1) {\r\n                if (this.state.showDetails) {\r\n                    stats = (\r\n                        <div className='edit'>\r\n                            <div className='section'>\r\n                                <div className='input-label' style={{ display: this.state.showDetails ? '' : 'none' }}>character name:</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.props.combatant.name}\r\n                                    onChange={event => this.props.changeValue(this.props.combatant, 'name', event.target.value)}\r\n                                />\r\n                                <div className='input-label' style={{ display: this.state.showDetails ? '' : 'none' }}>player name:</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.props.combatant.player}\r\n                                    onChange={event => this.props.changeValue(this.props.combatant, 'player', event.target.value)}\r\n                                />\r\n                                <div className='input-label'>race:</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.props.combatant.race}\r\n                                    onChange={event => this.props.changeValue(this.props.combatant, 'race', event.target.value)}\r\n                                />\r\n                                <div className='input-label'>class:</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.props.combatant.classes}\r\n                                    onChange={event => this.props.changeValue(this.props.combatant, 'classes', event.target.value)}\r\n                                />\r\n                                <div className='input-label'>level:</div>\r\n                                <Spin\r\n                                    source={this.props.combatant}\r\n                                    name='level'\r\n                                    nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'level', delta)}\r\n                                />\r\n                                <div className='input-label'>languages:</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.props.combatant.languages}\r\n                                    onChange={event => this.props.changeValue(this.props.combatant, 'languages', event.target.value)}\r\n                                />\r\n                                <div className='input-label'>d&d beyond link:</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.props.combatant.url}\r\n                                    onChange={event => this.props.changeValue(this.props.combatant, 'url', event.target.value)}\r\n                                />\r\n                            </div>\r\n                            <div className='divider' />\r\n                            <div className='section subheading'>passive skills</div>\r\n                            <Spin\r\n                                source={this.props.combatant}\r\n                                name='passiveInsight'\r\n                                label='insight'\r\n                                nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'passiveInsight', delta)}\r\n                            />\r\n                            <Spin\r\n                                source={this.props.combatant}\r\n                                name='passiveInvestigation'\r\n                                label='investigation'\r\n                                nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'passiveInvestigation', delta)}\r\n                            />\r\n                            <Spin\r\n                                source={this.props.combatant}\r\n                                name='passivePerception'\r\n                                label='perception'\r\n                                nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'passivePerception', delta)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                } else {\r\n                    stats = commonStatBlock;\r\n                }\r\n            }\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                stats = commonStatBlock;\r\n            }\r\n\r\n            let toggle = null;\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                // Don't show toggle button for combatant\r\n            } else {\r\n                const imageStyle = this.state.showDetails ? 'image rotate' : 'image';\r\n                toggle = <img className={imageStyle} src={arrow} alt='arrow' onClick={() => this.toggleDetails()} />;\r\n            }\r\n\r\n            const name = (this.props.combatant as Combatant ? (this.props.combatant as Combatant).displayName : null)\r\n                || this.props.combatant.name\r\n                || 'unnamed pc';\r\n\r\n            return (\r\n                <div className='card pc'>\r\n                    <div className='heading'>\r\n                        <div className='title'>{name}</div>\r\n                        {toggle}\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        {stats}\r\n                        <div style={{ display: options.length > 0 ? '' : 'none' }}>\r\n                            <div className='divider' />\r\n                            <div className='section'>\r\n                                {options}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Combatant } from '../../models/combat';\r\nimport { Monster } from '../../models/monster-group';\r\n\r\ninterface Props {\r\n    combatant: Combatant & Monster;\r\n}\r\n\r\nexport default class HitPointGauge extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const hpCurrent = this.props.combatant.hp || 0;\r\n            const hpMax = this.props.combatant.hpMax + this.props.combatant.hpTemp;\r\n            const hpBloodied = this.props.combatant.hpMax / 2;\r\n            const hpWidth = 100 * Math.max(hpCurrent, 0) / hpMax;\r\n\r\n            let style = '';\r\n            if (hpCurrent >= this.props.combatant.hpMax) {\r\n                style = 'bar unhurt';\r\n            } else if (hpCurrent <= hpBloodied) {\r\n                style = 'bar bloodied';\r\n            } else {\r\n                style = 'bar injured';\r\n            }\r\n\r\n            let hpTempBar = null;\r\n            if (this.props.combatant.hpTemp > 0) {\r\n                const hpTempWidth = 100 * Math.max(this.props.combatant.hpTemp, 0) / hpMax;\r\n                hpTempBar = <div className='bar temp' style={{ width: hpTempWidth + '%' }} />;\r\n            }\r\n\r\n            return (\r\n                <div className='hp-gauge'>\r\n                    <div className={style} style={{ width: hpWidth + '%' }} />\r\n                    {hpTempBar}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Combatant } from '../../models/combat';\r\nimport { Map, MapItem } from '../../models/map-folio';\r\nimport { Monster } from '../../models/monster-group';\r\nimport { PC } from '../../models/party';\r\n\r\nimport HitPointGauge from './hit-point-gauge';\r\n\r\ninterface Props {\r\n    map: Map;\r\n    mode: 'edit' | 'thumbnail' | 'combat';\r\n    combatants: ((Combatant & PC) | (Combatant & Monster))[];\r\n    showOverlay: boolean;\r\n    selectedItemID: string;\r\n    setSelectedItemID: (itemID: string | null) => void;\r\n    addMapTile: (x: number, y: number) => void;\r\n    gridSquareClicked: (x: number, y: number) => void;\r\n}\r\n\r\ninterface MapDimensions {\r\n    minX: number;\r\n    maxX: number;\r\n    minY: number;\r\n    maxY: number;\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\ninterface StyleData {\r\n    left: string;\r\n    top: string;\r\n    width: string;\r\n    height: string;\r\n}\r\n\r\nexport default class MapPanel extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        combatants: null,\r\n        showOverlay: false,\r\n        selectedItemID: null,\r\n        setSelectedItemID: null,\r\n        addMapTile: null,\r\n        gridSquareClicked: null\r\n    };\r\n\r\n    private getMapDimensions(border: number): MapDimensions | null {\r\n        let dimensions: MapDimensions | null = null;\r\n\r\n        this.props.map.items.filter(i => {\r\n            if (this.props.mode === 'edit') {\r\n                return i.type === 'tile';\r\n            }\r\n            return true;\r\n        }).forEach(i => {\r\n            if (!dimensions) {\r\n                dimensions = {\r\n                    minX: i.x,\r\n                    maxX: i.x + i.width - 1,\r\n                    minY: i.y,\r\n                    maxY: i.y + i.height - 1,\r\n                    width: 0,\r\n                    height: 0\r\n                };\r\n            } else {\r\n                dimensions.minX = Math.min(dimensions.minX, i.x);\r\n                dimensions.maxX = Math.max(dimensions.maxX, i.x + i.width - 1);\r\n                dimensions.minY = Math.min(dimensions.minY, i.y);\r\n                dimensions.maxY = Math.max(dimensions.maxY, i.y + i.height - 1);\r\n            }\r\n        });\r\n\r\n        if (!dimensions) {\r\n            // The map is blank\r\n            if (this.props.mode === 'thumbnail') {\r\n                return null;\r\n            }\r\n\r\n            dimensions = {\r\n                minX: 0,\r\n                maxX: 0,\r\n                minY: 0,\r\n                maxY: 0,\r\n                width: 0,\r\n                height: 0\r\n            };\r\n        }\r\n\r\n        // Apply the border\r\n        dimensions.minX -= border;\r\n        dimensions.maxX += border;\r\n        dimensions.minY -= border;\r\n        dimensions.maxY += border;\r\n\r\n        // Set width and height\r\n        dimensions.width = 1 + dimensions.maxX - dimensions.minX;\r\n        dimensions.height = 1 + dimensions.maxY - dimensions.minY;\r\n\r\n        return dimensions;\r\n    }\r\n\r\n    private getSideLength(): number {\r\n        switch (this.props.mode) {\r\n            case 'thumbnail':\r\n                return 5;\r\n            case 'edit':\r\n            case 'combat':\r\n                return 25;\r\n            default:\r\n                return 5;\r\n        }\r\n    }\r\n\r\n    private getStyle(x: number, y: number, width: number, height: number, mapDimensions: MapDimensions): StyleData {\r\n        const sideLength = this.getSideLength();\r\n\r\n        return {\r\n            left: 'calc(' + sideLength + 'px * ' + (x - mapDimensions.minX) + ')',\r\n            top: 'calc(' + sideLength + 'px * ' + (y - mapDimensions.minY) + ')',\r\n            width: 'calc((' + sideLength + 'px * ' + width + ') + 1px)',\r\n            height: 'calc((' + sideLength + 'px * ' + height + ') + 1px)'\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const border = (this.props.mode === 'edit') ? 2 : 0;\r\n            const mapDimensions = this.getMapDimensions(border);\r\n            if (!mapDimensions) {\r\n                return (\r\n                    <div>(blank map)</div>\r\n                );\r\n            }\r\n\r\n            // Draw the grid squares\r\n            const grid = [];\r\n            if (this.props.mode === 'edit') {\r\n                for (let y = mapDimensions.minY; y !== mapDimensions.maxY + 1; ++y) {\r\n                    for (let x = mapDimensions.minX; x !== mapDimensions.maxX + 1; ++x) {\r\n                        const gridStyle = this.getStyle(x, y, 1, 1, mapDimensions);\r\n                        grid.push(\r\n                            <GridSquare\r\n                                key={x + ',' + y}\r\n                                x={x}\r\n                                y={y}\r\n                                style={gridStyle}\r\n                                onClick={() => this.props.setSelectedItemID(null)}\r\n                                onDoubleClick={(posX, posY) => this.props.addMapTile(posX, posY)}\r\n                            />\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Draw the map tiles\r\n            const tiles = this.props.map.items\r\n                .filter(i => i.type === 'tile')\r\n                .map(i => {\r\n                    const tileStyle = this.getStyle(i.x, i.y, i.width, i.height, mapDimensions as MapDimensions);\r\n                    return (\r\n                        <MapTile\r\n                            key={i.id}\r\n                            tile={i}\r\n                            style={tileStyle}\r\n                            selectable={this.props.mode === 'edit'}\r\n                            selected={this.props.selectedItemID === i.id}\r\n                            thumbnail={this.props.mode === 'thumbnail'}\r\n                            select={id => this.props.mode === 'edit' ? this.props.setSelectedItemID(id) : null}\r\n                        />\r\n                    );\r\n                });\r\n\r\n            // Draw the tokens\r\n            let tokens: JSX.Element[] = [];\r\n            if (this.props.mode !== 'edit') {\r\n                tokens = this.props.map.items\r\n                    .filter(i => (i.type === 'monster') || (i.type === 'pc'))\r\n                    .map(i => {\r\n                        const tokenStyle = this.getStyle(i.x, i.y, i.width, i.height, mapDimensions as MapDimensions);\r\n                        const combatant = this.props.combatants.find(c => c.id === i.id);\r\n                        if (combatant) {\r\n                            return (\r\n                                <MapToken\r\n                                    key={i.id}\r\n                                    token={i}\r\n                                    combatant={combatant}\r\n                                    style={tokenStyle}\r\n                                    simple={this.props.mode === 'thumbnail'}\r\n                                    selectable={this.props.mode === 'combat'}\r\n                                    selected={this.props.selectedItemID ===  i.id}\r\n                                    select={id => this.props.setSelectedItemID(id)}\r\n                                />\r\n                            );\r\n                        }\r\n\r\n                        return null;\r\n                    })\r\n                    .filter(mt => mt !== null) as JSX.Element[];\r\n            }\r\n\r\n            // Draw the drag overlay\r\n            const dragOverlay = [];\r\n            if (this.props.showOverlay) {\r\n                for (let yOver = mapDimensions.minY; yOver !== mapDimensions.maxY + 1; ++yOver) {\r\n                    for (let xOver = mapDimensions.minX; xOver !== mapDimensions.maxX + 1; ++xOver) {\r\n                        const overlayStyle = this.getStyle(xOver, yOver, 1, 1, mapDimensions);\r\n                        dragOverlay.push(\r\n                            <GridSquare\r\n                                key={xOver + ',' + yOver}\r\n                                x={xOver}\r\n                                y={yOver}\r\n                                style={overlayStyle}\r\n                                overlay={true}\r\n                                onClick={(posX, posY) => this.props.gridSquareClicked(posX, posY)}\r\n                            />\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n\r\n            const style = 'map-panel ' + this.props.mode;\r\n            return (\r\n                <div className={style} onClick={() => this.props.setSelectedItemID(null)}>\r\n                    <div className='grid' style={{ height: ((this.getSideLength() * mapDimensions.height) + 1) + 'px' }}>\r\n                        {grid}\r\n                        {tiles}\r\n                        {tokens}\r\n                        {dragOverlay}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface GridSquareProps {\r\n    x: number;\r\n    y: number;\r\n    style: StyleData;\r\n    overlay: boolean;\r\n    onClick: (x: number, y: number) => void;\r\n    onDoubleClick: (x: number, y: number) => void;\r\n}\r\n\r\nclass GridSquare extends React.Component<GridSquareProps> {\r\n    public static defaultProps = {\r\n        overlay: false,\r\n        onDoubleClick: null\r\n    };\r\n\r\n    private click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (this.props.onClick) {\r\n            this.props.onClick(this.props.x, this.props.y);\r\n        }\r\n    }\r\n\r\n    private doubleClick(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (this.props.onDoubleClick) {\r\n            this.props.onDoubleClick(this.props.x, this.props.y);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'grid-square';\r\n        if (this.props.overlay) {\r\n            style += ' grid-overlay';\r\n        }\r\n\r\n        return (\r\n            <div\r\n                className={style}\r\n                style={this.props.style}\r\n                onClick={e => this.click(e)}\r\n                onDoubleClick={e => this.doubleClick(e)}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\ninterface MapTileProps {\r\n    tile: MapItem;\r\n    style: StyleData;\r\n    thumbnail: boolean;\r\n    selectable: boolean;\r\n    selected: boolean;\r\n    select: (tileID: string) => void;\r\n}\r\n\r\nclass MapTile extends React.Component<MapTileProps> {\r\n    private select(e: React.MouseEvent) {\r\n        if (this.props.selectable) {\r\n            e.stopPropagation();\r\n            this.props.select(this.props.tile.id);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'tile ' + this.props.tile.terrain;\r\n        if (this.props.selected) {\r\n            style += ' selected';\r\n        }\r\n        if (this.props.thumbnail) {\r\n            style += ' thumbnail';\r\n        }\r\n\r\n        return (\r\n            <div\r\n                className={style}\r\n                style={this.props.style}\r\n                onClick={e => this.select(e)}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\ninterface MapTokenProps {\r\n    token: MapItem;\r\n    combatant: (Combatant & PC) | (Combatant & Monster);\r\n    style: StyleData;\r\n    simple: boolean;\r\n    selectable: boolean;\r\n    selected: boolean;\r\n    select: (tokenID: string) => void;\r\n}\r\n\r\nclass MapToken extends React.Component<MapTokenProps> {\r\n    private select(e: React.MouseEvent) {\r\n        if (this.props.selectable) {\r\n            e.stopPropagation();\r\n            this.props.select(this.props.token.id);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'token ' + this.props.token.type;\r\n        if (this.props.selected) {\r\n            style += ' selected';\r\n        }\r\n        if (this.props.combatant.current) {\r\n            style += ' current';\r\n        }\r\n\r\n        let initials = null;\r\n        let hpGauge = null;\r\n        let altitudeBadge = null;\r\n        let conditionsBadge = null;\r\n        if (!this.props.simple) {\r\n            const name = this.props.combatant.displayName || this.props.combatant.name;\r\n            initials = (\r\n                <div className='initials'>{name.split(' ').map(s => s[0])}</div>\r\n            );\r\n\r\n            if (this.props.combatant.type === 'monster') {\r\n                hpGauge = (\r\n                    <HitPointGauge combatant={this.props.combatant as Combatant & Monster} />\r\n                );\r\n            }\r\n\r\n            if (this.props.combatant.altitude > 0) {\r\n                altitudeBadge = (\r\n                    <div className='badge altitude'>&#9206;</div>\r\n                );\r\n            }\r\n\r\n            if (this.props.combatant.altitude < 0) {\r\n                altitudeBadge = (\r\n                    <div className='badge altitude'>&#9207;</div>\r\n                );\r\n            }\r\n\r\n            if ((this.props.combatant.conditions) && (this.props.combatant.conditions.length > 0)) {\r\n                conditionsBadge = (\r\n                    <div className='badge'>&#9670;</div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div\r\n                title={this.props.combatant.displayName || this.props.combatant.name}\r\n                className={style}\r\n                style={this.props.style}\r\n                onClick={e => this.select(e)}\r\n            >\r\n                {initials}\r\n                {hpGauge}\r\n                {altitudeBadge}\r\n                {conditionsBadge}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Combat } from '../../models/combat';\r\n\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    combat: Combat;\r\n    selected: boolean;\r\n    setSelection: (combat: Combat) => void;\r\n}\r\n\r\nexport default class CombatListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            let map = null;\r\n            if (this.props.combat.map) {\r\n                map = (\r\n                    <MapPanel\r\n                        map={this.props.combat.map}\r\n                        mode='thumbnail'\r\n                        combatants={this.props.combat.combatants}\r\n                    />\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.combat)}>\r\n                    <div className='heading'>{this.props.combat.name || 'unnamed combat'}</div>\r\n                    <div className='text'>paused at {this.props.combat.timestamp}</div>\r\n                    {map}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport close from '../../resources/images/close-black.svg';\r\nimport arrow from '../../resources/images/down-arrow-black.svg';\r\n\r\ninterface Props {\r\n    content: any[];\r\n    heading: string;\r\n    hidden: boolean;\r\n    showClose: boolean;\r\n    showToggle: boolean;\r\n    close: () => void;\r\n}\r\n\r\ninterface State {\r\n    showCards: boolean;\r\n}\r\n\r\nexport default class CardGroup extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        heading: null,\r\n        hidden: false,\r\n        showClose: false,\r\n        showToggle: false,\r\n        close: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showCards: true\r\n        };\r\n    }\r\n\r\n    private toggleCards() {\r\n        this.setState({\r\n            showCards: !this.state.showCards\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            if (this.props.hidden) {\r\n                return null;\r\n            }\r\n\r\n            let heading = null;\r\n            if (this.props.heading) {\r\n                let closeBtn = null;\r\n                if (this.props.showClose) {\r\n                    closeBtn = (\r\n                        <img className='image' src={close} alt='close' onClick={() => this.props.close()} />\r\n                    );\r\n                }\r\n\r\n                let toggle = null;\r\n                if (this.props.showToggle) {\r\n                    const style = this.state.showCards ? 'image rotate' : 'image';\r\n                    toggle = (\r\n                        <img className={style} src={arrow} alt='arrow' onClick={() => this.toggleCards()} />\r\n                    );\r\n                }\r\n\r\n                heading = (\r\n                    <div className='heading'>\r\n                        <div className='title'>{this.props.heading}</div>\r\n                        {toggle}\r\n                        {closeBtn}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            let cards = [];\r\n            if ((this.props.content.length > 0) && this.state.showCards) {\r\n                cards = this.props.content;\r\n            }\r\n\r\n            return (\r\n                <div className='card-group'>\r\n                    {heading}\r\n                    <div className='row small-up-1 medium-up-2 large-up-3 collapse'>\r\n                        {cards}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combat, Combatant, Notification } from '../../models/combat';\r\nimport { Condition, ConditionDurationSaves } from '../../models/condition';\r\nimport { Monster, Trait } from '../../models/monster-group';\r\nimport { PC } from '../../models/party';\r\n\r\nimport InfoCard from '../cards/info-card';\r\nimport CombatManagerCard from '../cards/information/combat-manager-card';\r\nimport MonsterCard from '../cards/monster-card';\r\nimport PCCard from '../cards/pc-card';\r\nimport ControlRow from '../controls/control-row';\r\nimport Spin from '../controls/spin';\r\nimport CombatListItem from '../list-items/combat-list-item';\r\nimport CardGroup from '../panels/card-group';\r\nimport HitPointGauge from '../panels/hit-point-gauge';\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    combats: Combat[];\r\n    combat: Combat | null;\r\n    filter: string;\r\n    showHelp: boolean;\r\n    createCombat: () => void;\r\n    resumeEncounter: (combat: Combat) => void;\r\n    close: (notification: Notification, removeCondition: boolean) => void;\r\n    mapAdd: (combatant: (Combatant & PC) | (Combatant & Monster), x: number, y: number) => void;\r\n    makeCurrent: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    makeActive: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    makeDefeated: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    removeCombatant: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    addCondition: (combatant: Combatant & Monster) => void;\r\n    editCondition: (combatant: Combatant & Monster, condition: Condition) => void;\r\n    removeCondition: (combatant: Combatant & Monster, conditionID: string) => void;\r\n    mapMove: (combatant: (Combatant & PC) | (Combatant & Monster), dir: string) => void;\r\n    mapRemove: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    endTurn: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    changeHP: (combatant: Combatant & Monster, hp: number, temp: number) => void;\r\n    changeValue: (source: {}, type: string, value: any) => void;\r\n    nudgeValue: (source: {}, type: string, delta: number) => void;\r\n}\r\n\r\ninterface State {\r\n    selectedTokenID: string | null;\r\n    addingToMapID: string | null;\r\n}\r\n\r\nexport default class CombatManagerScreen extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            selectedTokenID: null,  // The ID of the combatant that's selected\r\n            addingToMapID: null     // The ID of the combatant we're adding to the map\r\n        };\r\n    }\r\n\r\n    private setSelectedTokenID(id: string | null) {\r\n        this.setState({\r\n            selectedTokenID: id\r\n        });\r\n    }\r\n\r\n    private setAddingToMapID(id: string | null) {\r\n        this.setState({\r\n            addingToMapID: id\r\n        });\r\n    }\r\n\r\n    private createCard(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        let mode = 'combat';\r\n        if (this.props.combat && this.props.combat.map) {\r\n            mode += ' tactical';\r\n            const onMap = this.props.combat.map.items.find(i => i.id === combatant.id);\r\n            mode += onMap ? ' on-map' : ' off-map';\r\n        }\r\n\r\n        switch (combatant.type) {\r\n            case 'pc':\r\n                return (\r\n                    <PCCard\r\n                        key='selected'\r\n                        combatant={combatant as Combatant & PC}\r\n                        mode={mode}\r\n                        changeValue={(source, type, value) => this.props.changeValue(source, type, value)}\r\n                        nudgeValue={(source, type, delta) => this.props.nudgeValue(source, type, delta)}\r\n                        makeCurrent={c => this.props.makeCurrent(c as Combatant & PC)}\r\n                        makeActive={c => this.props.makeActive(c as Combatant & PC)}\r\n                        makeDefeated={c => this.props.makeDefeated(c as Combatant & PC)}\r\n                        removeCombatant={c => this.props.removeCombatant(c as Combatant & PC)}\r\n                        mapAdd={c => this.setAddingToMapID(c.id)}\r\n                        mapMove={(c, dir) => this.props.mapMove(c as Combatant & PC, dir)}\r\n                        mapRemove={c => this.props.mapRemove(c as Combatant & PC)}\r\n                        endTurn={c => this.props.endTurn(c as Combatant & PC)}\r\n                    />\r\n                );\r\n            case 'monster':\r\n                return (\r\n                    <MonsterCard\r\n                        key='selected'\r\n                        combatant={combatant as Combatant & Monster}\r\n                        mode={mode}\r\n                        combat={this.props.combat as Combat}\r\n                        changeValue={(c, type, value) => this.props.changeValue(c, type, value)}\r\n                        nudgeValue={(c, type, delta) => this.props.nudgeValue(c, type, delta)}\r\n                        makeCurrent={c => this.props.makeCurrent(c as Combatant & Monster)}\r\n                        makeActive={c => this.props.makeActive(c as Combatant & Monster)}\r\n                        makeDefeated={c => this.props.makeDefeated(c as Combatant & Monster)}\r\n                        removeCombatant={c => this.props.removeCombatant(c as Combatant & Monster)}\r\n                        addCondition={c => this.props.addCondition(c as Combatant & Monster)}\r\n                        editCondition={(c, condition) => this.props.editCondition(c as Combatant & Monster, condition)}\r\n                        removeCondition={(c, conditionID) => this.props.removeCondition(c as Combatant & Monster, conditionID)}\r\n                        nudgeConditionValue={(c, type, delta) => this.props.nudgeValue(c, type, delta)}\r\n                        mapAdd={c => this.setAddingToMapID(c.id)}\r\n                        mapMove={(c, dir) => this.props.mapMove(c as Combatant & Monster, dir)}\r\n                        mapRemove={c => this.props.mapRemove(c as Combatant & Monster)}\r\n                        endTurn={(c) => this.props.endTurn(c as Combatant & Monster)}\r\n                        changeHP={(c, hp, temp) => this.props.changeHP(c as Combatant & Monster, hp, temp)}\r\n                    />\r\n                );\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    private addCombatantToMap(x: number, y: number) {\r\n        if (this.props.combat) {\r\n            const combatant = this.props.combat.combatants.find(c => c.id === this.state.addingToMapID);\r\n            if (combatant) {\r\n                this.props.mapAdd(combatant, x, y);\r\n            }\r\n            this.setAddingToMapID(null);\r\n        }\r\n    }\r\n\r\n    private showCombat(combat: Combat) {\r\n        return Utils.match(this.props.filter, combat.name);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            if (this.props.combat) {\r\n                const current: JSX.Element[] = [];\r\n                let pending: JSX.Element[] = [];\r\n                let active: JSX.Element[] = [];\r\n                const defeated: JSX.Element[] = [];\r\n\r\n                this.props.combat.combatants.forEach(combatant => {\r\n                    if (combatant.current) {\r\n                        current.push(\r\n                            <div key={combatant.id}>\r\n                                {this.createCard(combatant)}\r\n                            </div>\r\n                        );\r\n                    }\r\n                    if (combatant.pending && !combatant.active && !combatant.defeated) {\r\n                        pending.push(\r\n                            <PendingCombatantRow\r\n                                key={combatant.id}\r\n                                combatant={combatant}\r\n                                select={c => this.setSelectedTokenID(c.id)}\r\n                                selected={combatant.id === this.state.selectedTokenID}\r\n                                nudgeValue={(c, type, delta) => this.props.nudgeValue(c, type, delta)}\r\n                                makeActive={c => this.props.makeActive(c)}\r\n                            />\r\n                        );\r\n                    }\r\n                    if (!combatant.pending && combatant.active && !combatant.defeated) {\r\n                        switch (combatant.type) {\r\n                            case 'pc':\r\n                                active.push(\r\n                                    <PCRow\r\n                                        key={combatant.id}\r\n                                        combatant={combatant as Combatant & PC}\r\n                                        combat={this.props.combat as Combat}\r\n                                        select={c => this.setSelectedTokenID(c.id)}\r\n                                        selected={combatant.id === this.state.selectedTokenID}\r\n                                    />\r\n                                );\r\n                                break;\r\n                            case 'monster':\r\n                                active.push(\r\n                                    <MonsterRow\r\n                                        key={combatant.id}\r\n                                        combatant={combatant as Combatant & Monster}\r\n                                        combat={this.props.combat as Combat}\r\n                                        select={c => this.setSelectedTokenID(c.id)}\r\n                                        selected={combatant.id === this.state.selectedTokenID}\r\n                                    />\r\n                                );\r\n                                break;\r\n                        }\r\n                    }\r\n                    if (!combatant.pending && !combatant.active && combatant.defeated) {\r\n                        switch (combatant.type) {\r\n                            case 'pc':\r\n                                defeated.push(\r\n                                    <PCRow\r\n                                        key={combatant.id}\r\n                                        combatant={combatant as Combatant & PC}\r\n                                        combat={this.props.combat as Combat}\r\n                                        select={c => this.setSelectedTokenID(c.id)}\r\n                                        selected={combatant.id === this.state.selectedTokenID}\r\n                                    />\r\n                                );\r\n                                break;\r\n                            case 'monster':\r\n                                defeated.push(\r\n                                    <MonsterRow\r\n                                        key={combatant.id}\r\n                                        combatant={combatant as Combatant & Monster}\r\n                                        combat={this.props.combat as Combat}\r\n                                        select={c => this.setSelectedTokenID(c.id)}\r\n                                        selected={combatant.id === this.state.selectedTokenID}\r\n                                    />\r\n                                );\r\n                                break;\r\n                        }\r\n                    }\r\n                });\r\n\r\n                if (this.props.showHelp && (pending.length !== 0)) {\r\n                    const pendingHelp = (\r\n                        <div key='pending-help'>\r\n                            <InfoCard\r\n                                getContent={() =>\r\n                                    <div>\r\n                                        <div className='section'>these combatants are not yet part of the encounter</div>\r\n                                        <div className='section'>set initiative on each of them, then add them to the encounter</div>\r\n                                    </div>\r\n                                }\r\n                            />\r\n                        </div>\r\n                    );\r\n                    pending = [pendingHelp].concat(pending);\r\n                }\r\n\r\n                if (this.props.showHelp && (current.length === 0)) {\r\n                    const activeHelp = (\r\n                        /* tslint:disable:max-line-length */\r\n                        <div key='active-help'>\r\n                            <InfoCard\r\n                                getContent={() =>\r\n                                    <div>\r\n                                        <div className='section'>these are the combatants taking part in this encounter; you can select them to see their stat blocks (on the right)</div>\r\n                                        <div className='section'>to begin the encounter, select the first combatant and press the <b>start turn</b> button on their stat block</div>\r\n                                    </div>\r\n                                }\r\n                            />\r\n                        </div>\r\n                        /* tslint:enable:max-line-length */\r\n                    );\r\n                    active = [activeHelp].concat(active);\r\n                }\r\n\r\n                if (current.length === 0) {\r\n                    current.push(\r\n                        <InfoCard\r\n                            key='current'\r\n                            getContent={() =>\r\n                                <div className='section'>the current initiative holder will be displayed here</div>\r\n                            }\r\n                        />\r\n                    );\r\n                }\r\n\r\n                let notificationSection = null;\r\n                if (this.props.combat.notifications.length > 0) {\r\n                    const notifications = this.props.combat.notifications.map(n => (\r\n                        <NotificationPanel\r\n                            key={n.id}\r\n                            notification={n}\r\n                            close={(notification, removeCondition) => this.props.close(notification, removeCondition)}\r\n                        />\r\n                    ));\r\n                    notificationSection = (\r\n                        <div className='notifications'>\r\n                            {notifications}\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                let mapSection = null;\r\n                if (this.props.combat.map) {\r\n                    mapSection = (\r\n                        <MapPanel\r\n                            map={this.props.combat.map}\r\n                            mode='combat'\r\n                            showOverlay={this.state.addingToMapID !== null}\r\n                            combatants={this.props.combat.combatants}\r\n                            selectedItemID={this.state.selectedTokenID ? this.state.selectedTokenID : undefined}\r\n                            setSelectedItemID={id => {\r\n                                if (id) {\r\n                                    this.setSelectedTokenID(id);\r\n                                }\r\n                            }}\r\n                            gridSquareClicked={(x, y) => this.addCombatantToMap(x, y)}\r\n                        />\r\n                    );\r\n                }\r\n\r\n                let selectedCombatant = null;\r\n                if (this.state.selectedTokenID) {\r\n                    const combatant = this.props.combat.combatants.find(c => c.id === this.state.selectedTokenID);\r\n                    if (combatant && !combatant.current) {\r\n                        selectedCombatant = this.createCard(combatant);\r\n                    }\r\n                }\r\n                if (!selectedCombatant) {\r\n                    selectedCombatant = (\r\n                        <InfoCard\r\n                            key='selected'\r\n                            getContent={() =>\r\n                                <div className='section'>select a pc or monster to see its details here</div>\r\n                            }\r\n                        />\r\n                    );\r\n                }\r\n\r\n                return (\r\n                    <div className='combat-manager row collapse'>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable'>\r\n                            <CardGroup\r\n                                heading='initiative holder'\r\n                                content={current}\r\n                            />\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable'>\r\n                            {notificationSection}\r\n                            <CardGroup\r\n                                heading='waiting for intiative to be entered'\r\n                                content={pending}\r\n                                hidden={pending.length === 0}\r\n                                showToggle={true}\r\n                            />\r\n                            {mapSection}\r\n                            <CardGroup\r\n                                heading='combatants in the encounter'\r\n                                content={active}\r\n                                hidden={active.length === 0}\r\n                            />\r\n                            <CardGroup\r\n                                heading='defeated'\r\n                                content={defeated}\r\n                                hidden={defeated.length === 0}\r\n                                showToggle={true}\r\n                            />\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable'>\r\n                            <CardGroup\r\n                                heading='selected combatant'\r\n                                content={[selectedCombatant]}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                let help = null;\r\n                if (this.props.showHelp) {\r\n                    help = (\r\n                        <CombatManagerCard />\r\n                    );\r\n                }\r\n\r\n                const combats = this.props.combats.filter(c => this.showCombat(c)).map(c => {\r\n                    return (\r\n                        <CombatListItem\r\n                            key={c.id}\r\n                            combat={c}\r\n                            selected={false}\r\n                            setSelection={combat => this.props.resumeEncounter(combat)}\r\n                        />\r\n                    );\r\n                });\r\n\r\n                return (\r\n                    <div className='combat-manager row collapse'>\r\n                        <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                            {help}\r\n                            <button onClick={() => this.props.createCombat()}>start a new combat</button>\r\n                            {combats}\r\n                        </div>\r\n                        <div className='columns small-8 medium-8 large-9 scrollable' />\r\n                    </div>\r\n                );\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface NotificationProps {\r\n    notification: Notification;\r\n    close: (notification: Notification, removeCondition: boolean) => void;\r\n}\r\n\r\nclass NotificationPanel extends React.Component<NotificationProps> {\r\n    private success() {\r\n        switch (this.props.notification.type) {\r\n            case 'condition-save':\r\n            case 'condition-end':\r\n                const condition = this.props.notification.data as Condition;\r\n                if (condition.duration) {\r\n                    // Reduce save by 1\r\n                    if ((condition.duration.type === 'saves') || (condition.duration.type === 'rounds')) {\r\n                        condition.duration.count -= 1;\r\n                        if (condition.duration.count === 0) {\r\n                            // Remove the condition\r\n                            this.close(true);\r\n                        } else {\r\n                            this.close();\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            case 'trait-recharge':\r\n                // Mark trait as recharged\r\n                const trait = this.props.notification.data as Trait;\r\n                trait.uses = 0;\r\n                this.close();\r\n                break;\r\n        }\r\n    }\r\n\r\n    private close(removeCondition = false) {\r\n        this.props.close(this.props.notification, removeCondition);\r\n    }\r\n\r\n    public render() {\r\n        const combatant = this.props.notification.combatant as (Combatant & Monster);\r\n        const condition = this.props.notification.data as Condition;\r\n        const trait = this.props.notification.data as Trait;\r\n\r\n        const name = combatant.displayName || combatant.name || 'unnamed monster';\r\n        switch (this.props.notification.type) {\r\n            case 'condition-save':\r\n                const duration = condition.duration as ConditionDurationSaves;\r\n                let saveType = duration.saveType.toString();\r\n                if (saveType !== 'death') {\r\n                    saveType = saveType.toUpperCase();\r\n                }\r\n                return (\r\n                    <div key={this.props.notification.id} className='notification'>\r\n                        <div className='text'>\r\n                            {name} must make a {saveType} save against dc {duration.saveDC}\r\n                        </div>\r\n                        <ControlRow\r\n                            controls={[\r\n                                <button key='success' onClick={() => this.success()}>success</button>,\r\n                                <button key='close' onClick={() => this.close()}>close</button>\r\n                            ]}\r\n                        />\r\n                    </div>\r\n                );\r\n            case 'condition-end':\r\n                return (\r\n                    <div key={this.props.notification.id} className='notification'>\r\n                        <div className='text'>\r\n                            {name} is no longer affected by condition {condition.name}\r\n                        </div>\r\n                        <ControlRow\r\n                            controls={[\r\n                                <button key='close' onClick={() => this.close()}>close</button>\r\n                            ]}\r\n                        />\r\n                    </div>\r\n                );\r\n            case 'trait-recharge':\r\n                return (\r\n                    <div key={this.props.notification.id} className='notification'>\r\n                        <div className='text'>\r\n                            {name} can attempt to recharge {trait.name} ({trait.usage})\r\n                        </div>\r\n                        <ControlRow\r\n                            controls={[\r\n                                <button key='recharge' onClick={() => this.success()}>recharge</button>,\r\n                                <button key='close' onClick={() => this.close()}>close</button>\r\n                            ]}\r\n                        />\r\n                    </div>\r\n                );\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface PendingCombatantRowProps {\r\n    combatant: (Combatant & PC) | (Combatant & Monster);\r\n    selected: boolean;\r\n    select: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    nudgeValue: (combatant: (Combatant & PC) | (Combatant & Monster), field: string, delta: number) => void;\r\n    makeActive: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n}\r\n\r\nclass PendingCombatantRow extends React.Component<PendingCombatantRowProps> {\r\n    private getInformationText() {\r\n        if (this.props.selected) {\r\n            return 'selected';\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private onClick(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (this.props.select) {\r\n            this.props.select(this.props.combatant);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'combatant-row ' + this.props.combatant.type;\r\n        if (this.props.combatant.current || this.props.selected) {\r\n            style += ' highlight';\r\n        }\r\n\r\n        return (\r\n            <div className={style} onClick={e => this.onClick(e)}>\r\n                <div className='name'>\r\n                    {this.props.combatant.displayName || this.props.combatant.name || 'combatant'}\r\n                    <span className='info'>{this.getInformationText()}</span>\r\n                </div>\r\n                <div className='content'>\r\n                    <Spin\r\n                        source={this.props.combatant}\r\n                        name='initiative'\r\n                        label='initiative'\r\n                        nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'initiative', delta)}\r\n                    />\r\n                    <button onClick={e => { e.stopPropagation(); this.props.makeActive(this.props.combatant); }}>add to encounter</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface PCRowProps {\r\n    combatant: Combatant & PC;\r\n    combat: Combat;\r\n    selected: boolean;\r\n    select: (combatant: Combatant & PC) => void;\r\n}\r\n\r\nclass PCRow extends React.Component<PCRowProps> {\r\n    private getInformationText() {\r\n        if (this.props.combatant.current) {\r\n            return 'current turn';\r\n        }\r\n\r\n        if (this.props.selected) {\r\n            return 'selected';\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private onClick(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (!this.props.combatant.current && !this.props.selected && this.props.select) {\r\n            this.props.select(this.props.combatant);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'combatant-row ' + this.props.combatant.type;\r\n        if (this.props.combatant.current || this.props.selected) {\r\n            style += ' highlight';\r\n        }\r\n\r\n        const desc = (this.props.combatant.race || 'unknown race')\r\n                + ' ' + (this.props.combatant.classes || 'unknown class')\r\n                + ', level ' + this.props.combatant.level;\r\n\r\n        const notes = [];\r\n        if (this.props.combat.map) {\r\n            if (!this.props.combatant.pending && !this.props.combat.map.items.find(i => i.id === this.props.combatant.id)) {\r\n                notes.push(\r\n                    <div key='not-on-map' className='note'>not on the map</div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className={style} onClick={e => this.onClick(e)}>\r\n                <div className='name'>\r\n                    {this.props.combatant.displayName || this.props.combatant.name || 'combatant'}\r\n                    {this.props.combatant.player ? ' | ' + this.props.combatant.player : ''}\r\n                    <span className='info'>{this.getInformationText()}</span>\r\n                </div>\r\n                <div className='content'>\r\n                    <div className='section lowercase'>\r\n                        {desc}\r\n                    </div>\r\n                    {notes}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface MonsterRowProps {\r\n    combatant: Combatant & Monster;\r\n    combat: Combat;\r\n    selected: boolean;\r\n    select: (combatant: Combatant & Monster) => void;\r\n}\r\n\r\nclass MonsterRow extends React.Component<MonsterRowProps> {\r\n    private getInformationText() {\r\n        if (this.props.combatant.current) {\r\n            return 'current turn';\r\n        }\r\n\r\n        if (this.props.selected) {\r\n            return 'selected';\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private onClick(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (!this.props.combatant.current && !this.props.selected && this.props.select) {\r\n            this.props.select(this.props.combatant);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'combatant-row ' + this.props.combatant.type;\r\n        if (this.props.combatant.current || this.props.selected) {\r\n            style += ' highlight';\r\n        }\r\n\r\n        let hp = (this.props.combatant.hp ? this.props.combatant.hp : 0).toString();\r\n        if (this.props.combatant.hpTemp > 0) {\r\n            hp += '+' + this.props.combatant.hpTemp;\r\n        }\r\n\r\n        let gauge = null;\r\n        if (!this.props.combatant.pending) {\r\n            gauge = (\r\n                <HitPointGauge combatant={this.props.combatant} />\r\n            );\r\n        }\r\n\r\n        let conditions = null;\r\n        if (this.props.combatant.conditions) {\r\n            conditions = this.props.combatant.conditions.map(c => {\r\n                let name = c.name;\r\n                if (c.name === 'exhaustion') {\r\n                    name += ' (' + c.level + ')';\r\n                }\r\n                if ((c.name === 'custom') && (c.text)) {\r\n                    name = c.text;\r\n                }\r\n                if (c.duration) {\r\n                    name += ' ' + Utils.conditionDurationText(c, this.props.combat);\r\n                }\r\n                const description = [];\r\n                const text = Utils.conditionText(c);\r\n                for (let n = 0; n !== text.length; ++n) {\r\n                    description.push(<li key={n} className='condition-text'>{text[n]}</li>);\r\n                }\r\n                return (\r\n                    <div key={c.id} className='condition'>\r\n                        <div className='condition-name'>{name}</div>\r\n                        <ul>\r\n                            {description}\r\n                        </ul>\r\n                    </div>\r\n                );\r\n            });\r\n        }\r\n\r\n        const notes = [];\r\n        if (this.props.combat.map) {\r\n            if (!this.props.combatant.pending && !this.props.combat.map.items.find(i => i.id === this.props.combatant.id)) {\r\n                notes.push(\r\n                    <div key='not-on-map' className='note'>not on the map</div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className={style} onClick={e => this.onClick(e)}>\r\n                <div className='name'>\r\n                    {this.props.combatant.displayName || this.props.combatant.name || 'combatant'}\r\n                    <span className='info'>{this.getInformationText()}</span>\r\n                </div>\r\n                <div className='content'>\r\n                    <div className='section key-stats'>\r\n                        <div className='key-stat'>\r\n                            <div className='stat-label'>ac</div>\r\n                            <div className='stat-value'>{this.props.combatant.ac}</div>\r\n                        </div>\r\n                        <div className='key-stat'>\r\n                            <div className='stat-value'>{hp}</div>\r\n                            <div className='stat-label'>hp</div>\r\n                        </div>\r\n                    </div>\r\n                    {gauge}\r\n                    {conditions}\r\n                    {notes}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Encounter, EncounterSlot } from '../../models/encounter';\r\nimport { Monster } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\ninterface Props {\r\n    encounter: Encounter;\r\n    party: Party | null;\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n}\r\n\r\nexport default class DifficultyChartPanel extends React.Component<Props> {\r\n    public render() {\r\n        let monsterCount = 0;\r\n        let monsterXp = 0;\r\n        let slots: EncounterSlot[] = [];\r\n        slots = slots.concat(this.props.encounter.slots);\r\n        this.props.encounter.waves.forEach(wave => {\r\n            slots = slots.concat(wave.slots);\r\n        });\r\n        slots.forEach(slot => {\r\n            monsterCount += slot.count;\r\n            const monster = this.props.getMonster(slot.monsterName, slot.monsterGroupName);\r\n            if (monster) {\r\n                monsterXp += Utils.experience(monster.challenge) * slot.count;\r\n            }\r\n        });\r\n\r\n        const adjustedXp = monsterXp * Utils.experienceFactor(monsterCount);\r\n\r\n        let xpThresholds;\r\n        let diffSection;\r\n        if (this.props.party) {\r\n            let xpEasy = 0;\r\n            let xpMedium = 0;\r\n            let xpHard = 0;\r\n            let xpDeadly = 0;\r\n\r\n            const pcs = this.props.party.pcs.filter(pc => pc.active);\r\n            pcs.forEach(pc => {\r\n                xpEasy += Utils.pcExperience(pc.level, 'easy');\r\n                xpMedium += Utils.pcExperience(pc.level, 'medium');\r\n                xpHard += Utils.pcExperience(pc.level, 'hard');\r\n                xpDeadly += Utils.pcExperience(pc.level, 'deadly');\r\n            });\r\n\r\n            let difficulty = null;\r\n            let adjustedDifficulty = null;\r\n            if (adjustedXp > 0) {\r\n                difficulty = 'trivial';\r\n                if (adjustedXp >= xpEasy) {\r\n                    difficulty = 'easy';\r\n                }\r\n                if (adjustedXp >= xpMedium) {\r\n                    difficulty = 'medium';\r\n                }\r\n                if (adjustedXp >= xpHard) {\r\n                    difficulty = 'hard';\r\n                }\r\n                if (adjustedXp >= xpDeadly) {\r\n                    difficulty = 'deadly';\r\n                }\r\n                adjustedDifficulty = difficulty;\r\n\r\n                if ((pcs.length < 3) || (pcs.length > 5)) {\r\n                    const small = pcs.length < 3;\r\n                    switch (difficulty) {\r\n                        case 'trivial':\r\n                            adjustedDifficulty = small ? 'easy' : 'trivial';\r\n                            break;\r\n                        case 'easy':\r\n                            adjustedDifficulty = small ? 'medium' : 'trivial';\r\n                            break;\r\n                        case 'medium':\r\n                            adjustedDifficulty = small ? 'hard' : 'easy';\r\n                            break;\r\n                        case 'hard':\r\n                            adjustedDifficulty = small ? 'deadly' : 'medium';\r\n                            break;\r\n                        case 'deadly':\r\n                            adjustedDifficulty = small ? 'deadly' : 'hard';\r\n                            break;\r\n                        default:\r\n                            adjustedDifficulty = '';\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            xpThresholds = (\r\n                <div className='table'>\r\n                    <div>\r\n                        <div className='cell four'><b>easy</b></div>\r\n                        <div className='cell four'><b>medium</b></div>\r\n                        <div className='cell four'><b>hard</b></div>\r\n                        <div className='cell four'><b>deadly</b></div>\r\n                    </div>\r\n                    <div>\r\n                        <div className='cell four'>{xpEasy} xp</div>\r\n                        <div className='cell four'>{xpMedium} xp</div>\r\n                        <div className='cell four'>{xpHard} xp</div>\r\n                        <div className='cell four'>{xpDeadly} xp</div>\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            const getLeft = (xp: number) => {\r\n                const max = Math.max(adjustedXp, (xpDeadly * 1.2));\r\n                return (100 * xp) / max;\r\n            };\r\n\r\n            const getRight = (xp: number) => {\r\n                return 100 - getLeft(xp);\r\n            };\r\n\r\n            diffSection = (\r\n                <div>\r\n                    <div className='difficulty-gauge'>\r\n                        <div className='bar-container'>\r\n                            <div className='bar trivial' style={{ left: '0', right: getRight(xpEasy) + '%' }} />\r\n                        </div>\r\n                        <div className='bar-container'>\r\n                            <div className='bar easy' style={{ left: getLeft(xpEasy) + '%', right: getRight(xpMedium) + '%' }} />\r\n                        </div>\r\n                        <div className='bar-container'>\r\n                            <div className='bar medium' style={{ left: getLeft(xpMedium) + '%', right: getRight(xpHard) + '%' }} />\r\n                        </div>\r\n                        <div className='bar-container'>\r\n                            <div className='bar hard' style={{ left: getLeft(xpHard) + '%', right: getRight(xpDeadly) + '%' }} />\r\n                        </div>\r\n                        <div className='bar-container'>\r\n                            <div className='bar deadly' style={{ left: getLeft(xpDeadly) + '%', right: '0' }} />\r\n                        </div>\r\n                        <div className='encounter-container'>\r\n                            <div className='encounter' style={{ left: (getLeft(adjustedXp) - 0.5) + '%' }} />\r\n                        </div>\r\n                    </div>\r\n                    <div className='subheading'>difficulty</div>\r\n                    <div className='section'>\r\n                        difficulty for this party\r\n                        <div className='right'>{difficulty}</div>\r\n                    </div>\r\n                    <div className='section' style={{ display: (adjustedDifficulty === difficulty) ? 'none' : ''}}>\r\n                        effective difficulty for {pcs.length} pc(s)\r\n                        <div className='right'><b>{adjustedDifficulty}</b></div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='subheading'>xp value</div>\r\n                <div className='section'>\r\n                    xp for this encounter\r\n                    <div className='right'>{monsterXp} xp</div>\r\n                </div>\r\n                <div className='section' style={{ display: (adjustedXp === monsterXp) ? 'none' : ''}}>\r\n                    effective xp for {monsterCount} monster(s)\r\n                    <div className='right'>{adjustedXp} xp</div>\r\n                </div>\r\n                {xpThresholds}\r\n                {diffSection}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Encounter } from '../../models/encounter';\r\nimport { Monster } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport Dropdown from '../controls/dropdown';\r\nimport DifficultyChartPanel from '../panels/difficulty-chart-panel';\r\nimport InfoCard from './info-card';\r\n\r\nimport arrow from '../../resources/images/down-arrow.svg';\r\n\r\ninterface Props {\r\n    selection: Encounter;\r\n    parties: Party[];\r\n    filter: string;\r\n    changeValue: (field: string, value: string) => void;\r\n    addWave: () => void;\r\n    removeEncounter: () => void;\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n}\r\n\r\ninterface State {\r\n    showDetails: boolean;\r\n    party: Party | null;\r\n}\r\n\r\nexport default class EncounterCard extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showDetails: false,\r\n            party: null\r\n        };\r\n    }\r\n\r\n    private toggleDetails() {\r\n        this.setState({\r\n            showDetails: !this.state.showDetails\r\n        });\r\n    }\r\n\r\n    private selectParty(partyID: string) {\r\n        const party = this.props.parties.find(p => p.id === partyID);\r\n        this.setState({\r\n            party: party as Party\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const partyOptions = [];\r\n            if (this.props.parties) {\r\n                for (let n = 0; n !== this.props.parties.length; ++n) {\r\n                    const party = this.props.parties[n];\r\n                    partyOptions.push({\r\n                        id: party.id,\r\n                        text: party.name\r\n                    });\r\n                }\r\n            }\r\n\r\n            const difficultySection = (\r\n                <div>\r\n                    <Dropdown\r\n                        options={partyOptions}\r\n                        placeholder='select party...'\r\n                        selectedID={this.state.party ? this.state.party.id : undefined}\r\n                        select={optionID => this.selectParty(optionID)}\r\n                    />\r\n                    <DifficultyChartPanel\r\n                        encounter={this.props.selection}\r\n                        party={this.state.party}\r\n                        getMonster={(monsterName, monsterGroupName) => this.props.getMonster(monsterName, monsterGroupName)}\r\n                    />\r\n                </div>\r\n            );\r\n\r\n            const imageStyle = this.state.showDetails ? 'image rotate' : 'image';\r\n\r\n            const heading = (\r\n                <div className='heading'>\r\n                    <div className='title'>encounter</div>\r\n                    <img className={imageStyle} src={arrow} alt='arrow' onClick={() => this.toggleDetails()} />\r\n                </div>\r\n            );\r\n\r\n            const content = (\r\n                <div>\r\n                    <div className='section'>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='encounter name'\r\n                            value={this.props.selection.name}\r\n                            disabled={!!this.props.filter}\r\n                            onChange={event => this.props.changeValue('name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div style={{ display: this.state.showDetails ? '' : 'none' }}>\r\n                        <div className='divider' />\r\n                        {difficultySection}\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.addWave()}>add a new wave</button>\r\n                        <ConfirmButton text='delete encounter' callback={() => this.props.removeEncounter()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            return (\r\n                <InfoCard getHeading={() => heading} getContent={() => content} />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    title: string;\r\n    getContent: () => (string | JSX.Element);\r\n}\r\n\r\nexport default class ErrorCard extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        title: null\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            let heading = null;\r\n            if (this.props.title) {\r\n                heading = <div className='heading'><div className='title'>{this.props.title}</div></div>;\r\n            }\r\n\r\n            const content = this.props.getContent();\r\n\r\n            return (\r\n                <div className='card error'>\r\n                    {heading}\r\n                    <div className='card-content'>\r\n                        {content}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { CATEGORY_TYPES, SIZE_TYPES } from '../../models/monster-group';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport Spin from '../controls/spin';\r\n\r\nimport arrow from '../../resources/images/down-arrow.svg';\r\n\r\ninterface Props {\r\n    filter: {\r\n        name: string,\r\n        challengeMin: number;\r\n        challengeMax: number;\r\n        category: string;\r\n        size: string;\r\n    };\r\n    changeValue: (type: 'name' | 'challengeMin' | 'challengeMax' | 'category' | 'size', value: any) => void;\r\n    nudgeValue: (type: 'challengeMin' | 'challengeMax', delta: number) => void;\r\n    resetFilter: () => void;\r\n}\r\n\r\ninterface State {\r\n    showAll: boolean;\r\n}\r\n\r\nexport default class FilterCard extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showAll: false\r\n        };\r\n    }\r\n\r\n    private toggleAll() {\r\n        this.setState({\r\n            showAll: !this.state.showAll\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const sizes = ['all sizes'].concat(SIZE_TYPES);\r\n            const sizeOptions = sizes.map(size => ({ id: size, text: size }));\r\n\r\n            const categories = ['all types'].concat(CATEGORY_TYPES);\r\n            const catOptions = categories.map(cat => ({ id: cat, text: cat }));\r\n\r\n            let content = null;\r\n            if (this.state.showAll) {\r\n                content = (\r\n                    <div>\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='name'\r\n                                value={this.props.filter.name}\r\n                                onChange={event => this.props.changeValue('name', event.target.value)}\r\n                            />\r\n                        </div>\r\n                        <Spin\r\n                            source={this.props.filter}\r\n                            name='challengeMin'\r\n                            label='min cr'\r\n                            display={value => Utils.challenge(value)}\r\n                            nudgeValue={delta => this.props.nudgeValue('challengeMin', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.filter}\r\n                            name='challengeMax'\r\n                            label='max cr'\r\n                            display={value => Utils.challenge(value)}\r\n                            nudgeValue={delta => this.props.nudgeValue('challengeMax', delta)}\r\n                        />\r\n                        <Dropdown\r\n                            options={sizeOptions}\r\n                            placeholder='filter by size...'\r\n                            selectedID={this.props.filter.size}\r\n                            select={optionID => this.props.changeValue('size', optionID)}\r\n                        />\r\n                        <Dropdown\r\n                            options={catOptions}\r\n                            placeholder='filter by type...'\r\n                            selectedID={this.props.filter.category}\r\n                            select={optionID => this.props.changeValue('category', optionID)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <div className='section'>\r\n                            <button onClick={() => this.props.resetFilter()}>clear filter</button>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                let summary = '';\r\n                if (this.props.filter.size !== 'all sizes') {\r\n                    summary += summary ? ' ' + this.props.filter.size : this.props.filter.size;\r\n                }\r\n                if (this.props.filter.category !== 'all types') {\r\n                    summary += summary ? ' ' + this.props.filter.category : this.props.filter.category;\r\n                }\r\n                summary += ' monsters of cr ' + Utils.challenge(this.props.filter.challengeMin) + ' to ' + Utils.challenge(this.props.filter.challengeMax);\r\n\r\n                content = (\r\n                    <div>\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='name'\r\n                                value={this.props.filter.name}\r\n                                onChange={event => this.props.changeValue('name', event.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div className='section'>showing {summary}</div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='card'>\r\n                    <div className='heading'>\r\n                        <div className='title'>filter</div>\r\n                        <img className={this.state.showAll ? 'image rotate' : 'image'} src={arrow} alt='arrow' onClick={() => this.toggleAll()} />\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        {content}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Encounter } from '../../../models/encounter';\r\n\r\nimport InfoCard from '../info-card';\r\n\r\ninterface Props {\r\n    encounters: Encounter[];\r\n}\r\n\r\nexport default class EncounterBuilderCard extends React.Component<Props> {\r\n    private getContent() {\r\n        let action: JSX.Element | null = null;\r\n        if (this.props.encounters.length === 0) {\r\n            action = (\r\n                <div className='section'>to start building an encounter, press the button below</div>\r\n            );\r\n        } else {\r\n            action = (\r\n                <div className='section'>select an encounter from the list to add monsters to it</div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='section'>on this page you can set up encounters</div>\r\n                <div className='section'>when you have created an encounter you can add monsters to it, then gauge its difficulty for a party of pcs</div>\r\n                <div className='divider'/>\r\n                {action}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            return (\r\n                <InfoCard getContent={() => this.getContent()} />\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { EncounterWave } from '../../models/encounter';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport InfoCard from './info-card';\r\n\r\ninterface Props {\r\n    wave: EncounterWave;\r\n    changeValue: (wave: EncounterWave, field: string, value: string) => void;\r\n    removeWave: (wave: EncounterWave) => void;\r\n}\r\n\r\nexport default class WaveCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const heading = (\r\n                <div className='heading'>\r\n                    <div className='title'>wave</div>\r\n                </div>\r\n            );\r\n\r\n            const content = (\r\n                <div>\r\n                    <div className='section'>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='wave name'\r\n                            value={this.props.wave.name}\r\n                            onChange={event => this.props.changeValue(this.props.wave, 'name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <ConfirmButton text='delete wave' callback={() => this.props.removeWave(this.props.wave)} />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            return (\r\n                <InfoCard getHeading={() => heading} getContent={() => content} />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Encounter } from '../../models/encounter';\r\n\r\ninterface Props {\r\n    encounter: Encounter;\r\n    selected: boolean;\r\n    setSelection: (encounter: Encounter) => void;\r\n}\r\n\r\nexport default class EncounterListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const slots = [];\r\n\r\n            this.props.encounter.slots.forEach(slot => {\r\n                let text = slot.monsterName || 'unnamed monster';\r\n                if (slot.count > 1) {\r\n                    text += ' x' + slot.count;\r\n                }\r\n                slots.push(<div key={slot.id} className='text'>{text}</div>);\r\n            });\r\n\r\n            if (slots.length === 0) {\r\n                slots.push(<div key='empty' className='text'>no monsters</div>);\r\n            }\r\n\r\n            this.props.encounter.waves.forEach(wave => {\r\n                slots.push(<div key={'name ' + wave.id} className='text subheading'>{wave.name || 'unnamed wave'}</div>);\r\n                wave.slots.forEach(slot => {\r\n                    let text = slot.monsterName || 'unnamed monster';\r\n                    if (slot.count > 1) {\r\n                        text += ' x' + slot.count;\r\n                    }\r\n                    slots.push(<div key={slot.id} className='text'>{text}</div>);\r\n                });\r\n                if (slots.length === 0) {\r\n                    slots.push(<div key={'empty ' + wave.id} className='text'>no monsters</div>);\r\n                }\r\n            });\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.encounter)}>\r\n                    <div className='heading'>{this.props.encounter.name || 'unnamed encounter'}</div>\r\n                    {slots}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Encounter, EncounterSlot, EncounterWave } from '../../models/encounter';\r\nimport { Monster, MonsterGroup } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\nimport EncounterCard from '../cards/encounter-card';\r\nimport ErrorCard from '../cards/error-card';\r\nimport FilterCard from '../cards/filter-card';\r\nimport InfoCard from '../cards/info-card';\r\nimport EncounterBuilderCard from '../cards/information/encounter-builder-card';\r\nimport MonsterCard from '../cards/monster-card';\r\nimport WaveCard from '../cards/wave-card';\r\nimport EncounterListItem from '../list-items/encounter-list-item';\r\nimport CardGroup from '../panels/card-group';\r\n\r\ninterface Props {\r\n    encounters: Encounter[];\r\n    selection: Encounter | null;\r\n    parties: Party[];\r\n    library: MonsterGroup[];\r\n    filter: string;\r\n    showHelp: boolean;\r\n    selectEncounter: (encounter: Encounter | null) => void;\r\n    addEncounter: () => void;\r\n    removeEncounter: () => void;\r\n    addEncounterSlot: (monster: Monster, waveID: string | null) => void;\r\n    removeEncounterSlot: (encounterSlot: EncounterSlot, waveID: string | null) => void;\r\n    addWave: () => void;\r\n    removeWave: (wave: EncounterWave) => void;\r\n    changeValue: (source: any, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, value: number) => void;\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n}\r\n\r\ninterface State {\r\n    filter: {\r\n        name: string,\r\n        challengeMin: number;\r\n        challengeMax: number;\r\n        category: string;\r\n        size: string;\r\n    };\r\n}\r\n\r\nexport default class EncounterBuilderScreen extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            filter: {\r\n                name: '',\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: 'all types',\r\n                size: 'all sizes'\r\n            }\r\n        };\r\n    }\r\n\r\n    private matchMonster(monster: Monster) {\r\n        if (monster.challenge < this.state.filter.challengeMin) {\r\n            return false;\r\n        }\r\n\r\n        if (monster.challenge > this.state.filter.challengeMax) {\r\n            return false;\r\n        }\r\n\r\n        if (this.state.filter.name !== '') {\r\n            if (!Utils.match(this.state.filter.name, monster.name)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.filter.category !== 'all types') {\r\n            if (monster.category !== this.state.filter.category) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.filter.size !== 'all sizes') {\r\n            if (monster.size !== this.state.filter.size) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private changeFilterValue(type: 'name' | 'challengeMin' | 'challengeMax' | 'category' | 'size', value: any) {\r\n        // eslint-disable-next-line\r\n        this.state.filter[type] = value;\r\n        this.setState({\r\n            filter: this.state.filter\r\n        });\r\n    }\r\n\r\n    private nudgeFilterValue(type: 'challengeMin' | 'challengeMax', delta: number) {\r\n        const value = Utils.nudgeChallenge(this.state.filter[type], delta);\r\n        this.changeFilterValue(type, value);\r\n    }\r\n\r\n    private resetFilter() {\r\n        this.setState({\r\n            filter: {\r\n                name: '',\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: 'all types',\r\n                size: 'all sizes'\r\n            }\r\n        });\r\n    }\r\n\r\n    private getMonsterCards(slots: EncounterSlot[], waveID: string | null) {\r\n        const cards = [];\r\n\r\n        slots.forEach(slot => {\r\n            const monster = this.props.getMonster(slot.monsterName, slot.monsterGroupName);\r\n            if (monster) {\r\n                cards.push(\r\n                    <div className='column' key={monster.id}>\r\n                        <MonsterCard\r\n                            combatant={monster}\r\n                            slot={slot}\r\n                            encounter={this.props.selection as Encounter}\r\n                            mode={'view encounter'}\r\n                            nudgeValue={(source, type, delta) => this.props.nudgeValue(source, type, delta)}\r\n                            removeEncounterSlot={source => this.props.removeEncounterSlot(source, waveID)}\r\n                        />\r\n                    </div>\r\n                );\r\n            } else {\r\n                const index = slots.indexOf(slot);\r\n                const error = 'unknown monster: ' + slot.monsterName + ' in group ' + slot.monsterGroupName;\r\n                cards.push(\r\n                    <div className='column' key={index}>\r\n                        <ErrorCard\r\n                            getContent={() => <div className='section'>{error}</div>}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n        });\r\n\r\n        if (slots.length === 0) {\r\n            cards.push(\r\n                <div className='column' key='empty'>\r\n                    <InfoCard getContent={() => <div className='section'>no monsters</div>} />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return cards;\r\n    }\r\n\r\n    private getLibrarySection() {\r\n        if (!this.props.selection) {\r\n            return null;\r\n        }\r\n\r\n        const libraryCards = [];\r\n        libraryCards.push(\r\n            <div className='column' key='filter'>\r\n                <FilterCard\r\n                    filter={this.state.filter}\r\n                    changeValue={(type, value) => this.changeFilterValue(type, value)}\r\n                    nudgeValue={(type, delta) => this.nudgeFilterValue(type, delta)}\r\n                    resetFilter={() => this.resetFilter()}\r\n                />\r\n            </div>\r\n        );\r\n\r\n        const monsters: Monster[] = [];\r\n        if (this.props.selection) {\r\n            this.props.library.forEach(group => {\r\n                group.monsters.forEach(monster => {\r\n                    if (this.matchMonster(monster)) {\r\n                        monsters.push(monster);\r\n                    }\r\n                });\r\n            });\r\n            monsters.sort((a, b) => {\r\n                if (a.name < b.name) { return -1; }\r\n                if (a.name > b.name) { return 1; }\r\n                return 0;\r\n            });\r\n        }\r\n        monsters.forEach(monster => {\r\n            libraryCards.push(\r\n                <div className='column' key={monster.id}>\r\n                    <MonsterCard\r\n                        key={monster.id}\r\n                        combatant={monster}\r\n                        encounter={this.props.selection as Encounter}\r\n                        library={this.props.library}\r\n                        mode={'view encounter'}\r\n                        addEncounterSlot={(combatant, waveID) => this.props.addEncounterSlot(combatant, waveID)}\r\n                    />\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <CardGroup\r\n                heading='monster library'\r\n                content={libraryCards}\r\n                showToggle={true}\r\n            />\r\n        );\r\n    }\r\n\r\n    private showEncounter(enc: Encounter) {\r\n        return Utils.match(this.props.filter, enc.name);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let help = null;\r\n            if (this.props.showHelp) {\r\n                help = (\r\n                    <EncounterBuilderCard encounters={this.props.encounters} />\r\n                );\r\n            }\r\n\r\n            const encounters = this.props.encounters.filter(e => this.showEncounter(e)).map(e => {\r\n                return (\r\n                    <EncounterListItem\r\n                        key={e.id}\r\n                        encounter={e}\r\n                        selected={e === this.props.selection}\r\n                        setSelection={encounter => this.props.selectEncounter(encounter)}\r\n                    />\r\n                );\r\n            });\r\n\r\n            let encounterName;\r\n            const encounterCards = [];\r\n            let waves: JSX.Element[] = [];\r\n\r\n            if (this.props.selection) {\r\n                encounterName = this.props.selection.name || 'unnamed encounter';\r\n\r\n                encounterCards.push(\r\n                    <div className='column' key='info'>\r\n                        <EncounterCard\r\n                            selection={this.props.selection}\r\n                            parties={this.props.parties}\r\n                            filter={this.props.filter}\r\n                            changeValue={(type, value) => this.props.changeValue(this.props.selection, type, value)}\r\n                            addWave={() => this.props.addWave()}\r\n                            removeEncounter={() => this.props.removeEncounter()}\r\n                            getMonster={(monsterName, monsterGroupName) => this.props.getMonster(monsterName, monsterGroupName)}\r\n                        />\r\n                    </div>\r\n                );\r\n\r\n                this.getMonsterCards(this.props.selection.slots, null)\r\n                    .forEach(card => encounterCards.push(card));\r\n\r\n                waves = this.props.selection.waves.map(w => {\r\n                    const waveCards = [];\r\n                    waveCards.push(\r\n                        <div className='column' key='info'>\r\n                            <WaveCard\r\n                                wave={w}\r\n                                removeWave={wave => this.props.removeWave(wave)}\r\n                                changeValue={(source, field, value) => this.props.changeValue(source, field, value)}\r\n                            />\r\n                        </div>\r\n                    );\r\n\r\n                    this.getMonsterCards(w.slots, w.id)\r\n                        .forEach(card => waveCards.push(card));\r\n\r\n                    return (\r\n                        <CardGroup\r\n                            key={w.id}\r\n                            heading={w.name || 'unnamed wave'}\r\n                            content={waveCards}\r\n                            showToggle={true}\r\n                        />\r\n                    );\r\n                });\r\n            }\r\n\r\n            return (\r\n                <div className='encounter-builder row collapse'>\r\n                    <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                        {help}\r\n                        <button onClick={() => this.props.addEncounter()}>add a new encounter</button>\r\n                        {encounters}\r\n                    </div>\r\n                    <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                        <CardGroup\r\n                            content={encounterCards}\r\n                            heading={encounterName}\r\n                            showClose={this.props.selection !== null}\r\n                            close={() => this.props.selectEncounter(null)}\r\n                        />\r\n                        {waves}\r\n                        {this.getLibrarySection()}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { MonsterGroup } from '../../models/monster-group';\r\n\r\ninterface Props {\r\n    library: MonsterGroup[];\r\n    addOpenGameContent: () => void;\r\n}\r\n\r\nexport default class HomeScreen extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            let monsters = null;\r\n            if (this.props.library.length === 0) {\r\n                monsters = (\r\n                    <div>\r\n                        <div className='divider' />\r\n                        <div className='text'>\r\n                            since your collection of monsters is empty, you might want to start by pressing the button below to add monsters from the&nbsp;\r\n                            <a href='http://dnd.wizards.com/articles/features/systems-reference-document-srd' target='_blank' rel='noopener noreferrer'>\r\n                                system reference document\r\n                            </a>\r\n                        </div>\r\n                        <div className='text'>\r\n                            <button onClick={() => this.props.addOpenGameContent()}>add monsters</button>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='home scrollable'>\r\n                    <div className='vertical-center-outer'>\r\n                        <div className='vertical-center-middle'>\r\n                            <div className='vertical-center-inner'>\r\n                                <div className='welcome-panel'>\r\n                                    <div className='heading'>welcome to <b>dojo</b></div>\r\n                                    <div className='text'>\r\n                                        <b>dojo</b> is an app for dms of dungeons and dragons fifth edition\r\n                                    </div>\r\n                                    <div className='text'>\r\n                                        with <b>dojo</b> you can:\r\n                                        <ul>\r\n                                            <li>build unique, challenging monsters</li>\r\n                                            <li>create encounters of just the right difficulty for your players</li>\r\n                                            <li>design intricate tactical maps</li>\r\n                                            <li>run combat without the book-keeping</li>\r\n                                        </ul>\r\n                                    </div>\r\n                                    {monsters}\r\n                                    <div className='divider' />\r\n                                    <div className='text'>\r\n                                        use the buttons at the bottom of the screen to access the app's features\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { MapFolio } from '../../../models/map-folio';\r\n\r\nimport InfoCard from '../info-card';\r\n\r\ninterface Props {\r\n    mapFolios: MapFolio[];\r\n}\r\n\r\nexport default class MapFoliosCard extends React.Component<Props> {\r\n    private getContent() {\r\n        let action: JSX.Element | null = null;\r\n        if (this.props.mapFolios.length === 0) {\r\n            action = (\r\n                <div className='section'>to start a new folio, press the button below</div>\r\n            );\r\n        } else {\r\n            action = (\r\n                <div className='section'>select a map folio from the list to see the maps it contains</div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='section'>on this page you can set up folios containing tactical maps</div>\r\n                <div className='section'>when you have created a map you can use it in encounters</div>\r\n                <div className='divider'/>\r\n                {action}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            return (\r\n                <InfoCard getContent={() => this.getContent()} />\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Map } from '../../models/map-folio';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    map: Map;\r\n    changeValue: (map: Map, field: string, value: string) => void;\r\n    editMap: (map: Map) => void;\r\n    removeMap: (map: Map) => void;\r\n}\r\n\r\nexport default class MapCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div className='card map'>\r\n                    <div className='heading'>\r\n                        <div className='title'>{this.props.map.name || 'unnamed map'}</div>\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='map name'\r\n                                value={this.props.map.name}\r\n                                onChange={event => this.props.changeValue(this.props.map, 'name', event.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='section centered'>\r\n                            <MapPanel\r\n                                map={this.props.map}\r\n                                mode='thumbnail'\r\n                            />\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='section'>\r\n                            <button onClick={() => this.props.editMap(this.props.map)}>edit map</button>\r\n                            <ConfirmButton text='delete map' callback={() => this.props.removeMap(this.props.map)} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { MapFolio } from '../../models/map-folio';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport InfoCard from './info-card';\r\n\r\ninterface Props {\r\n    selection: MapFolio;\r\n    filter: string | null;\r\n    changeValue: (source: MapFolio, field: string, value: string) => void;\r\n    addMap: () => void;\r\n    removeMapFolio: () => void;\r\n}\r\n\r\nexport default class MapFolioCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const heading = (\r\n                <div className='heading'>\r\n                    <div className='title'>map folio</div>\r\n                </div>\r\n            );\r\n\r\n            const content = (\r\n                <div>\r\n                    <div className='section'>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='folio name'\r\n                            value={this.props.selection.name}\r\n                            disabled={!!this.props.filter}\r\n                            onChange={event => this.props.changeValue(this.props.selection, 'name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.addMap()}>add a new map</button>\r\n                        <ConfirmButton text='delete folio' callback={() => this.props.removeMapFolio()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            return (\r\n                <InfoCard getHeading={() => heading} getContent={() => content} />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { MapFolio } from '../../models/map-folio';\r\n\r\ninterface Props {\r\n    mapFolio: MapFolio;\r\n    selected: boolean;\r\n    filter: string;\r\n    setSelection: (mapFolio: MapFolio) => void;\r\n}\r\n\r\nexport default class MapFolioListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const matchFolio = Utils.match(this.props.filter, this.props.mapFolio.name);\r\n\r\n            const maps = [];\r\n            for (let n = 0; n !== this.props.mapFolio.maps.length; ++n) {\r\n                const map = this.props.mapFolio.maps[n];\r\n                const name = map.name || 'unnamed map';\r\n                if (matchFolio || Utils.match(this.props.filter, name)) {\r\n                    maps.push(<div key={map.id} className='text'>{name}</div>);\r\n                }\r\n            }\r\n            if (maps.length === 0) {\r\n                maps.push(<div key='empty' className='text'>no maps</div>);\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.mapFolio)}>\r\n                    <div className='heading'>{this.props.mapFolio.name || 'unnamed folio'}</div>\r\n                    {maps}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Map, MapFolio } from '../../models/map-folio';\r\n\r\nimport InfoCard from '../cards/info-card';\r\nimport MapFoliosCard from '../cards/information/map-folios-card';\r\nimport MapCard from '../cards/map-card';\r\nimport MapFolioCard from '../cards/map-folio-card';\r\nimport MapFolioListItem from '../list-items/map-folio-list-item';\r\nimport CardGroup from '../panels/card-group';\r\n\r\ninterface Props {\r\n    mapFolios: MapFolio[];\r\n    selection: MapFolio | null;\r\n    filter: string;\r\n    showHelp: boolean;\r\n    selectMapFolio: (mapFolio: MapFolio | null) => void;\r\n    addMapFolio: () => void;\r\n    removeMapFolio: () => void;\r\n    addMap: () => void;\r\n    editMap: (map: Map) => void;\r\n    removeMap: (map: Map) => void;\r\n    changeValue: (source: {}, field: string, value: any) => void;\r\n}\r\n\r\nexport default class MapFoliosScreen extends React.Component<Props> {\r\n    private showMapFolio(folio: MapFolio) {\r\n        let result = Utils.match(this.props.filter, folio.name);\r\n\r\n        if (!result) {\r\n            folio.maps.forEach(map => {\r\n                result = Utils.match(this.props.filter, map.name) || result;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let help = null;\r\n            if (this.props.showHelp) {\r\n                help = (\r\n                    <MapFoliosCard mapFolios={this.props.mapFolios} />\r\n                );\r\n            }\r\n\r\n            const folios = this.props.mapFolios.filter(f => this.showMapFolio(f)).map(mapFolio => {\r\n                return (\r\n                    <MapFolioListItem\r\n                        key={mapFolio.id}\r\n                        mapFolio={mapFolio}\r\n                        filter={this.props.filter}\r\n                        selected={mapFolio === this.props.selection}\r\n                        setSelection={f => this.props.selectMapFolio(f)}\r\n                    />\r\n                );\r\n            });\r\n\r\n            let folio = null;\r\n            if (this.props.selection) {\r\n                const folioCards = [];\r\n\r\n                folioCards.push(\r\n                    <div className='column' key='info'>\r\n                        <MapFolioCard\r\n                            selection={this.props.selection}\r\n                            filter={this.props.filter}\r\n                            addMap={() => this.props.addMap()}\r\n                            removeMapFolio={() => this.props.removeMapFolio()}\r\n                            changeValue={(source, field, value) => this.props.changeValue(source, field, value)}\r\n                        />\r\n                    </div>\r\n                );\r\n\r\n                this.props.selection.maps.filter(m => Utils.match(this.props.filter, m.name)).forEach(m => {\r\n                    folioCards.push(\r\n                        <div className='column' key={m.id}>\r\n                            <MapCard\r\n                                map={m}\r\n                                editMap={map => this.props.editMap(map)}\r\n                                removeMap={map => this.props.removeMap(map)}\r\n                                changeValue={(source, type, value) => this.props.changeValue(source, type, value)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                if (folioCards.length === 0) {\r\n                    folioCards.push(\r\n                        <div className='column' key='empty'>\r\n                            <InfoCard getContent={() => <div className='section'>no maps</div>} />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                folio = (\r\n                    <div>\r\n                        <CardGroup\r\n                            content={folioCards}\r\n                            heading={this.props.selection.name || 'unnamed folio'}\r\n                            showClose={this.props.selection !== null}\r\n                            close={() => this.props.selectMapFolio(null)}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='map-builder row collapse'>\r\n                    <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                        {help}\r\n                        <button onClick={() => this.props.addMapFolio()}>add a new map folio</button>\r\n                        {folios}\r\n                    </div>\r\n                    <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                        {folio}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport InfoCard from '../info-card';\r\n\r\nexport default class MonsterLibraryCard extends React.Component {\r\n    private getContent() {\r\n        return (\r\n            <div>\r\n                <div className='section'>you can maintain your menagerie of monsters here</div>\r\n                <div className='divider'/>\r\n                <div className='section'>select a monster group from the list to see stat blocks for monsters in that group</div>\r\n                <div className='section'>to quickly find a monster, type its name into the filter box</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <InfoCard getContent={() => this.getContent()} />\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { MonsterGroup } from '../../models/monster-group';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport InfoCard from './info-card';\r\n\r\ninterface Props {\r\n    selection: MonsterGroup;\r\n    filter: string | null;\r\n    changeValue: (field: string, value: string) => void;\r\n    addMonster: () => void;\r\n    generateMonster: () => void;\r\n    sortMonsters: () => void;\r\n    removeMonsterGroup: () => void;\r\n}\r\n\r\nexport default class MonsterGroupCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const heading = (\r\n                <div className='heading'>\r\n                    <div className='title'>monster group</div>\r\n                </div>\r\n            );\r\n\r\n            const content = (\r\n                <div>\r\n                    <div className='section'>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='group name'\r\n                            value={this.props.selection.name}\r\n                            disabled={!!this.props.filter}\r\n                            onChange={event => this.props.changeValue('name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.addMonster()}>add a new blank monster</button>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.generateMonster()}>generate a random monster</button>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.sortMonsters()}>sort monsters</button>\r\n                        <ConfirmButton text='delete group' callback={() => this.props.removeMonsterGroup()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            return (\r\n                <InfoCard getHeading={() => heading} getContent={() => content} />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { MonsterGroup } from '../../models/monster-group';\r\n\r\ninterface Props {\r\n    group: MonsterGroup;\r\n    selected: boolean;\r\n    filter: string;\r\n    setSelection: (group: MonsterGroup) => void;\r\n}\r\n\r\nexport default class MonsterGroupListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const matchGroup = Utils.match(this.props.filter, this.props.group.name);\r\n\r\n            const monsters = [];\r\n            for (let n = 0; n !== this.props.group.monsters.length; ++n) {\r\n                const monster = this.props.group.monsters[n];\r\n                const name = monster.name || 'unnamed monster';\r\n                if (matchGroup || Utils.match(this.props.filter, name)) {\r\n                    monsters.push(<div key={monster.id} className='text'>{name}</div>);\r\n                }\r\n            }\r\n            if (monsters.length === 0) {\r\n                monsters.push(<div key='empty' className='text'>no monsters</div>);\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.group)}>\r\n                    <div className='heading'>{this.props.group.name || 'unnamed group'}</div>\r\n                    {monsters}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Monster, MonsterGroup } from '../../models/monster-group';\r\n\r\nimport InfoCard from '../cards/info-card';\r\nimport MonsterLibraryCard from '../cards/information/monster-library-card';\r\nimport MonsterCard from '../cards/monster-card';\r\nimport MonsterGroupCard from '../cards/monster-group-card';\r\nimport MonsterGroupListItem from '../list-items/monster-group-list-item';\r\nimport CardGroup from '../panels/card-group';\r\n\r\ninterface Props {\r\n    library: MonsterGroup[];\r\n    selection: MonsterGroup | null;\r\n    showHelp: boolean;\r\n    filter: string;\r\n    selectMonsterGroup: (group: MonsterGroup | null) => void;\r\n    addMonsterGroup: () => void;\r\n    removeMonsterGroup: () => void;\r\n    addMonster: () => void;\r\n    generateMonster: () => void;\r\n    removeMonster: (monster: Monster) => void;\r\n    editMonster: (monster: Monster) => void;\r\n    cloneMonster: (monster: Monster, name: string) => void;\r\n    sortMonsters: () => void;\r\n    moveToGroup: (monster: Monster, groupID: string) => void;\r\n    changeValue: (source: any, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, value: number) => void;\r\n}\r\n\r\nexport default class MonsterLibraryScreen extends React.Component<Props> {\r\n    private showMonsterGroup(group: MonsterGroup) {\r\n        let result = Utils.match(this.props.filter, group.name);\r\n\r\n        if (!result) {\r\n            group.monsters.forEach(monster => {\r\n                result = Utils.match(this.props.filter, monster.name) || result;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let help = null;\r\n            if (this.props.showHelp) {\r\n                help = (\r\n                    <MonsterLibraryCard />\r\n                );\r\n            }\r\n\r\n            const listItems = this.props.library.filter(group => this.showMonsterGroup(group)).map(group => {\r\n                return (\r\n                    <MonsterGroupListItem\r\n                        key={group.id}\r\n                        group={group}\r\n                        filter={this.props.filter}\r\n                        selected={group === this.props.selection}\r\n                        setSelection={grp => this.props.selectMonsterGroup(grp)}\r\n                    />\r\n                );\r\n            });\r\n\r\n            const cards = [];\r\n\r\n            if (this.props.selection) {\r\n                cards.push(\r\n                    <div className='column' key='info'>\r\n                        <MonsterGroupCard\r\n                            selection={this.props.selection}\r\n                            filter={this.props.filter}\r\n                            addMonster={() => this.props.addMonster()}\r\n                            generateMonster={() => this.props.generateMonster()}\r\n                            sortMonsters={() => this.props.sortMonsters()}\r\n                            changeValue={(type, value) => this.props.changeValue(this.props.selection, type, value)}\r\n                            removeMonsterGroup={() => this.props.removeMonsterGroup()}\r\n                        />\r\n                    </div>\r\n                );\r\n\r\n                const monsters = this.props.selection.monsters.filter(monster => {\r\n                    return Utils.match(this.props.filter, monster.name);\r\n                });\r\n\r\n                if (monsters.length !== 0) {\r\n                    monsters.forEach(m => {\r\n                        cards.push(\r\n                            <div className='column' key={m.id}>\r\n                                <MonsterCard\r\n                                    combatant={m}\r\n                                    mode={'view editable'}\r\n                                    library={this.props.library}\r\n                                    changeValue={(source, type, value) => this.props.changeValue(source, type, value)}\r\n                                    nudgeValue={(source, type, delta) => this.props.nudgeValue(source, type, delta)}\r\n                                    moveToGroup={(monster, groupID) => this.props.moveToGroup(monster, groupID)}\r\n                                    removeMonster={monster => this.props.removeMonster(monster)}\r\n                                    editMonster={monster => this.props.editMonster(monster)}\r\n                                    cloneMonster={(monster, monsterName) => this.props.cloneMonster(monster, monsterName)}\r\n                                />\r\n                            </div>\r\n                        );\r\n                    });\r\n                } else {\r\n                    cards.push(\r\n                        <div className='column' key='empty'>\r\n                            <InfoCard getContent={() => <div className='section'>no monsters</div>} />\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n\r\n            let name;\r\n            if (this.props.selection) {\r\n                name = this.props.selection.name;\r\n                if (!name) {\r\n                    name = 'unnamed group';\r\n                }\r\n            }\r\n\r\n            return (\r\n                <div className='monster-library row collapse'>\r\n                    <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                        {help}\r\n                        <button onClick={() => this.props.addMonsterGroup()}>add a new monster group</button>\r\n                        {listItems}\r\n                    </div>\r\n                    <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                        <CardGroup\r\n                            content={cards}\r\n                            heading={name}\r\n                            showClose={this.props.selection !== null}\r\n                            close={() => this.props.selectMonsterGroup(null)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Party } from '../../../models/party';\r\n\r\nimport InfoCard from '../info-card';\r\n\r\ninterface Props {\r\n    parties: Party[];\r\n}\r\n\r\nexport default class PartiesCard extends React.Component<Props> {\r\n    private getContent() {\r\n        let action: JSX.Element | null = null;\r\n        if (this.props.parties.length === 0) {\r\n            action = (\r\n                <div className='section'>to start adding a party, press the button below</div>\r\n            );\r\n        } else {\r\n            action = (\r\n                <div className='section'>select a party from the list to see pc details</div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='section'>this page is where you can tell dojo all about your pcs</div>\r\n                <div className='section'>you can add a party for each of your gaming groups</div>\r\n                <div className='divider'/>\r\n                {action}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            return (\r\n                <InfoCard getContent={() => this.getContent()} />\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Party } from '../../models/party';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport InfoCard from './info-card';\r\n\r\ninterface Props {\r\n    selection: Party;\r\n    filter: string | null;\r\n    changeValue: (field: string, value: string) => void;\r\n    addPC: () => void;\r\n    sortPCs: () => void;\r\n    removeParty: () => void;\r\n}\r\n\r\nexport default class PartyCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const activePCs = this.props.selection.pcs.filter(pc => pc.active);\r\n\r\n            const languages = activePCs\r\n                .map(pc => pc.languages)\r\n                .join(', ')\r\n                .split(/[ ,;]+/)\r\n                .reduce((array: string[], value) => {\r\n                    if (array.indexOf(value) === -1) {\r\n                        array.push(value);\r\n                    }\r\n                    return array;\r\n                }, [])\r\n                .sort((a, b) => {\r\n                    if (a === 'Common') {\r\n                        return -1;\r\n                    }\r\n                    if (b === 'Common') {\r\n                        return 1;\r\n                    }\r\n                    return a.localeCompare(b);\r\n                })\r\n                .join(', ');\r\n\r\n            let insightSummary = '-';\r\n            let investigationSummary = '-';\r\n            let perceptionSummary = '-';\r\n\r\n            if (activePCs.length !== 0) {\r\n                const insight: { min: number | null, max: number | null } = { min: null, max: null };\r\n                const invest: { min: number | null, max: number | null } = { min: null, max: null };\r\n                const percep: { min: number | null, max: number | null } = { min: null, max: null };\r\n\r\n                activePCs.forEach(pc => {\r\n                    insight.min = insight.min === null ? pc.passiveInsight : Math.min(insight.min, pc.passiveInsight);\r\n                    insight.max = insight.max === null ? pc.passiveInsight : Math.max(insight.max, pc.passiveInsight);\r\n                    invest.min = invest.min === null ? pc.passiveInvestigation : Math.min(invest.min, pc.passiveInvestigation);\r\n                    invest.max = invest.max === null ? pc.passiveInvestigation : Math.max(invest.max, pc.passiveInvestigation);\r\n                    percep.min = percep.min === null ? pc.passivePerception : Math.min(percep.min, pc.passivePerception);\r\n                    percep.max = percep.max === null ? pc.passivePerception : Math.max(percep.max, pc.passivePerception);\r\n                });\r\n\r\n                insightSummary = insight.min === insight.max ? (insight.min as number).toString() : insight.min + ' - ' + insight.max;\r\n                investigationSummary = invest.min === invest.max ? (invest.min as number).toString() : invest.min + ' - ' + invest.max;\r\n                perceptionSummary = percep.min === percep.max ? (percep.min as number).toString() : percep.min + ' - ' + percep.max;\r\n            }\r\n\r\n            const heading = (\r\n                <div className='heading'>\r\n                    <div className='title'>party</div>\r\n                </div>\r\n            );\r\n\r\n            const content = (\r\n                <div>\r\n                    <div className='section'>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='party name'\r\n                            value={this.props.selection.name}\r\n                            disabled={!!this.props.filter}\r\n                            onChange={event => this.props.changeValue('name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section' style={{ display: languages !== '' ? 'block' : 'none' }}>\r\n                        <div className='subheading'>languages</div>\r\n                    </div>\r\n                    <div className='section'>\r\n                        {languages}\r\n                    </div>\r\n                    <div className='section'>\r\n                        <div className='subheading'>passive skills</div>\r\n                    </div>\r\n                    <div className='table'>\r\n                        <div>\r\n                            <div className='cell three'><b>insight</b></div>\r\n                            <div className='cell three'><b>invest.</b></div>\r\n                            <div className='cell three'><b>percep.</b></div>\r\n                        </div>\r\n                        <div>\r\n                            <div className='cell three'>{insightSummary}</div>\r\n                            <div className='cell three'>{investigationSummary}</div>\r\n                            <div className='cell three'>{perceptionSummary}</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.addPC()}>add a new pc</button>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.sortPCs()}>sort pcs</button>\r\n                        <ConfirmButton text='delete party' callback={() => this.props.removeParty()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            return (\r\n                <InfoCard getHeading={() => heading} getContent={() => content} />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Party } from '../../models/party';\r\n\r\ninterface Props {\r\n    party: Party;\r\n    selected: boolean;\r\n    filter: string;\r\n    setSelection: (party: Party) => void;\r\n}\r\n\r\nexport default class PartyListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const matchParty = Utils.match(this.props.filter, this.props.party.name);\r\n\r\n            const pcs = [];\r\n            for (let n = 0; n !== this.props.party.pcs.length; ++n) {\r\n                const pc = this.props.party.pcs[n];\r\n                let name = pc.name || 'unnamed pc';\r\n                if (pc.player) {\r\n                    name += ' (' + pc.player + ')';\r\n                }\r\n                if (matchParty || Utils.match(this.props.filter, name)) {\r\n                    pcs.push(<div key={pc.id} className='text'>{name}</div>);\r\n                }\r\n            }\r\n            if (pcs.length === 0) {\r\n                pcs.push(<div key='empty' className='text'>no pcs</div>);\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.party)}>\r\n                    <div className='heading'>{this.props.party.name || 'unnamed party'}</div>\r\n                    {pcs}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Party, PC } from '../../models/party';\r\n\r\nimport InfoCard from '../cards/info-card';\r\nimport PartiesCard from '../cards/information/parties-card';\r\nimport PartyCard from '../cards/party-card';\r\nimport PCCard from '../cards/pc-card';\r\nimport PartyListItem from '../list-items/party-list-item';\r\nimport CardGroup from '../panels/card-group';\r\n\r\ninterface Props {\r\n    parties: Party[];\r\n    selection: Party | null;\r\n    filter: string;\r\n    showHelp: boolean;\r\n    selectParty: (party: Party | null) => void;\r\n    addParty: () => void;\r\n    removeParty: () => void;\r\n    addPC: () => void;\r\n    removePC: (pc: PC) => void;\r\n    sortPCs: () => void;\r\n    changeValue: (source: any, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, value: number) => void;\r\n}\r\n\r\nexport default class PartiesScreen extends React.Component<Props> {\r\n    private showParty(party: Party) {\r\n        let result = Utils.match(this.props.filter, party.name);\r\n\r\n        if (!result) {\r\n            party.pcs.forEach(pc => {\r\n                result = Utils.match(this.props.filter, pc.name) || result;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let help = null;\r\n            if (this.props.showHelp) {\r\n                help = (\r\n                    <PartiesCard parties={this.props.parties}/>\r\n                );\r\n            }\r\n\r\n            const parties = this.props.parties.filter(p => this.showParty(p)).map(p => {\r\n                return (\r\n                    <PartyListItem\r\n                        key={p.id}\r\n                        party={p}\r\n                        filter={this.props.filter}\r\n                        selected={p === this.props.selection}\r\n                        setSelection={party => this.props.selectParty(party)}\r\n                    />\r\n                );\r\n            });\r\n\r\n            const activeCards: JSX.Element[] = [];\r\n            const inactiveCards: JSX.Element[] = [];\r\n\r\n            if (this.props.selection) {\r\n                activeCards.push(\r\n                    <div className='column' key='info'>\r\n                        <PartyCard\r\n                            selection={this.props.selection}\r\n                            filter={this.props.filter}\r\n                            addPC={() => this.props.addPC()}\r\n                            sortPCs={() => this.props.sortPCs()}\r\n                            changeValue={(type, value) => this.props.changeValue(this.props.selection, type, value)}\r\n                            removeParty={() => this.props.removeParty()}\r\n                        />\r\n                    </div>\r\n                );\r\n\r\n                const pcs = this.props.selection.pcs.filter(pc => {\r\n                    return Utils.match(this.props.filter, pc.name);\r\n                });\r\n\r\n                const activePCs = pcs.filter(pc => pc.active);\r\n                activePCs.forEach(activePC => {\r\n                    activeCards.push(\r\n                        <div className='column' key={activePC.id}>\r\n                            <PCCard\r\n                                combatant={activePC}\r\n                                mode={'edit'}\r\n                                changeValue={(pc, type, value) => this.props.changeValue(pc, type, value)}\r\n                                nudgeValue={(pc, type, delta) => this.props.nudgeValue(pc, type, delta)}\r\n                                removePC={pc => this.props.removePC(pc)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                const inactivePCs = pcs.filter(pc => !pc.active);\r\n                inactivePCs.forEach(inactivePC => {\r\n                    inactiveCards.push(\r\n                        <div className='column' key={inactivePC.id}>\r\n                            <PCCard\r\n                                combatant={inactivePC}\r\n                                mode={'edit'}\r\n                                changeValue={(pc, type, value) => this.props.changeValue(pc, type, value)}\r\n                                nudgeValue={(pc, type, delta) => this.props.nudgeValue(pc, type, delta)}\r\n                                removePC={pc => this.props.removePC(pc)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                if (activePCs.length === 0) {\r\n                    activeCards.push(\r\n                        <div className='column' key='empty'>\r\n                            <InfoCard getContent={() => <div className='section'>no pcs</div>} />\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n\r\n            let name;\r\n            if (this.props.selection) {\r\n                name = this.props.selection.name || 'unnamed party';\r\n            }\r\n\r\n            return (\r\n                <div className='parties row collapse'>\r\n                    <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                        {help}\r\n                        <button onClick={() => this.props.addParty()}>add a new party</button>\r\n                        {parties}\r\n                    </div>\r\n                    <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                        <CardGroup\r\n                            content={activeCards}\r\n                            heading={name}\r\n                            showClose={this.props.selection !== null}\r\n                            close={() => this.props.selectParty(null)}\r\n                            hidden={!this.props.selection}\r\n                        />\r\n                        <CardGroup\r\n                            content={inactiveCards}\r\n                            heading='inactive pcs'\r\n                            showClose={false}\r\n                            hidden={inactiveCards.length === 0}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport checked from '../../resources/images/checked.svg';\r\nimport unchecked from '../../resources/images/unchecked.svg';\r\n\r\ninterface Props {\r\n    label: string;\r\n    checked: boolean;\r\n    changeValue: (value: boolean) => void;\r\n    showCheck: boolean;\r\n    disabled: boolean;\r\n}\r\n\r\nexport default class Checkbox extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        showCheck: true,\r\n        disabled: false\r\n    };\r\n\r\n    private click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        this.props.changeValue(!this.props.checked);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'checkbox';\r\n            if (this.props.checked) {\r\n                style += ' checked';\r\n            }\r\n            if (this.props.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            let check = null;\r\n            if (this.props.showCheck) {\r\n                check = (\r\n                    <img className='image' src={this.props.checked ? checked : unchecked} alt='check' />\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={style} onClick={e => this.click(e)}>\r\n                    {check}\r\n                    <div className='checkbox-label'>{this.props.label}</div>\r\n                </div>\r\n            );\r\n\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    options: { id: string; text: string; disabled?: boolean }[];\r\n    selectedID: string | null;\r\n    select: (optionID: string) => void;\r\n    tabs: boolean;\r\n    disabled: boolean;\r\n    itemsPerRow: number;\r\n}\r\n\r\nexport default class Selector extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        tabs: false,\r\n        disabled: false,\r\n        itemsPerRow: null\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            let style = this.props.tabs ? 'selector tabs' : 'selector radio';\r\n            if (this.props.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            const itemsPerRow = this.props.itemsPerRow ? this.props.itemsPerRow : this.props.options.length;\r\n            const rowCount = Math.ceil(this.props.options.length / itemsPerRow);\r\n            const rowContents: JSX.Element[][] = [];\r\n            for (let n = 0; n !== rowCount; ++n) {\r\n                rowContents.push([]);\r\n            }\r\n\r\n            this.props.options.forEach(option => {\r\n                const index = this.props.options.indexOf(option);\r\n                const rowIndex = Math.floor(index / itemsPerRow);\r\n                const row = rowContents[rowIndex];\r\n                row.push(\r\n                    <SelectorOption\r\n                        key={option.id}\r\n                        option={option}\r\n                        selected={option.id === this.props.selectedID}\r\n                        count={itemsPerRow}\r\n                        select={(optionID: string) => this.props.select(optionID)}\r\n                    />\r\n                );\r\n            });\r\n\r\n            const rowSections = rowContents.map(row => {\r\n                const index = rowContents.indexOf(row);\r\n                return <div key={index}>{row}</div>;\r\n            });\r\n\r\n            return (\r\n                <div className={style}>\r\n                    {rowSections}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface SelectorOptionInterface {\r\n    option: { id: string; text: string; disabled?: boolean };\r\n    selected: boolean;\r\n    count: number;\r\n    select: (optionID: string) => void;\r\n}\r\n\r\nclass SelectorOption extends React.Component<SelectorOptionInterface> {\r\n    private click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (!this.props.option.disabled) {\r\n            this.props.select(this.props.option.id);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const width = 'calc(((100% - 1px) / ' + this.props.count + ') - 2px )';\r\n\r\n            let style = 'option';\r\n            if (this.props.selected) {\r\n                style += ' selected';\r\n            }\r\n            if (this.props.option.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            return (\r\n                <div key={this.props.option.id} className={style} style={{ width: width }} title={this.props.option.text} onClick={e => this.click(e)}>\r\n                    {this.props.option.text}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","interface ModelLine {\r\n    prev: string;\r\n    freq: ModelChar[];\r\n}\r\n\r\ninterface ModelChar {\r\n    char: string;\r\n    count: number;\r\n}\r\n\r\nexport default class TextGenerator {\r\n\r\n    private static model: ModelLine[] = [];\r\n\r\n    public static initModel(sources: string[]) {\r\n        const model: ModelLine[] = [];\r\n\r\n        sources.forEach(source => {\r\n            const lines = source.split(/\\r?\\n/);\r\n            lines.forEach(line => {\r\n                if (line) {\r\n                    TextGenerator.addLineToModel(line, model);\r\n                }\r\n            });\r\n        });\r\n\r\n        TextGenerator.model = model;\r\n    }\r\n\r\n    private static addLineToModel(line: string, model: ModelLine[]) {\r\n        line = String.fromCharCode(0, 1) + line + String.fromCharCode(2);\r\n\r\n        for (let index = 2; index !== line.length; ++index) {\r\n            const prev = line.substr(index - 2, 2);\r\n            const char = line.substr(index, 1);\r\n\r\n            let item = model.find(x => x.prev === prev);\r\n            if (!item) {\r\n                item = {\r\n                    prev: prev,\r\n                    freq: []\r\n                };\r\n                model.push(item);\r\n            }\r\n\r\n            let freq = item.freq.find(x => x.char === char);\r\n            if (!freq) {\r\n                freq = {\r\n                    char: char,\r\n                    count: 0\r\n                };\r\n                item.freq.push(freq);\r\n            }\r\n\r\n            freq.count += 1;\r\n        }\r\n    }\r\n\r\n    public static generate(requiredResults: number): string[] {\r\n        const lines: string[] = [];\r\n        const allowedFailures = 100;\r\n        let failures = 0;\r\n\r\n        while ((lines.length < requiredResults) && (failures < allowedFailures)) {\r\n            const line = TextGenerator.extractLine();\r\n            if (line && !lines.includes(line)) {\r\n                lines.push(line);\r\n            } else {\r\n                failures += 1;\r\n            }\r\n        }\r\n\r\n        return lines;\r\n    }\r\n\r\n    private static extractLine() {\r\n        let line = String.fromCharCode(0, 1);\r\n\r\n        while (true) {\r\n            const prev = line.substr(line.length - 2, 2);\r\n\r\n            const item = TextGenerator.model.find(x => x.prev === prev);\r\n            if (item) {\r\n                let candidates = '';\r\n                item.freq.forEach(freq => {\r\n                    candidates += freq.char.repeat(freq.count);\r\n                });\r\n\r\n                const index = Math.floor(Math.random() * candidates.length);\r\n                const char = candidates[index];\r\n                if (char === String.fromCharCode(2)) {\r\n                    line = line.substr(2);\r\n                    return line;\r\n                } else {\r\n                    line += char;\r\n                }\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport TextGenerator from '../../utils/text-generation';\r\n\r\nimport Checkbox from '../controls/checkbox';\r\nimport ControlRow from '../controls/control-row';\r\nimport Expander from '../controls/expander';\r\nimport Selector from '../controls/selector';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    //\r\n}\r\n\r\ninterface State {\r\n    sources: { [id: string]: string; };\r\n    output: string[];\r\n}\r\n\r\ninterface Preset {\r\n    name: string;\r\n    languages: string[];\r\n}\r\n\r\nexport default class LanguageModule extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            sources: {},\r\n            output: []\r\n        };\r\n    }\r\n\r\n    private getLanguages(): string[] {\r\n        return [\r\n            'afrikaans',\r\n            'amharic',\r\n            'armenian',\r\n            'basque',\r\n            'belarusian',\r\n            'bulgarian',\r\n            'chichewa',\r\n            'chinese',\r\n            'croatian',\r\n            'czech',\r\n            'danish',\r\n            'dutch',\r\n            'english',\r\n            'finnish',\r\n            'french',\r\n            'german',\r\n            'greek',\r\n            'hawaiian',\r\n            'hindi',\r\n            'hungarian',\r\n            'icelandic',\r\n            'irish',\r\n            'italian',\r\n            'japanese',\r\n            'kannada',\r\n            'kazakh',\r\n            'korean',\r\n            'kyrgyz',\r\n            'latvian',\r\n            'lithuanian',\r\n            'macedonian',\r\n            'malay',\r\n            'maltese',\r\n            'maori',\r\n            'myanmar',\r\n            'nepalese',\r\n            'norwegian',\r\n            'persian',\r\n            'portuguese',\r\n            'punjabi',\r\n            'romanian',\r\n            'russian',\r\n            'samoan',\r\n            'serbian',\r\n            'shona',\r\n            'somali',\r\n            'spanish',\r\n            'swahili',\r\n            'swedish',\r\n            'thai',\r\n            'turkish',\r\n            'welsh',\r\n            'yiddish',\r\n            'zulu'\r\n        ];\r\n    }\r\n\r\n    private getPresets(): Preset[] {\r\n        return [\r\n            {\r\n                name: 'draconic',\r\n                languages: ['armenian', 'irish', 'maltese']\r\n            },\r\n            {\r\n                name: 'dwarvish',\r\n                languages: ['czech', 'german', 'yiddish']\r\n            },\r\n            {\r\n                name: 'elvish',\r\n                languages: ['finnish', 'spanish', 'welsh']\r\n            },\r\n            {\r\n                name: 'goblin',\r\n                languages: ['hawaiian', 'kyrgyz', 'somali']\r\n            },\r\n            {\r\n                name: 'orc',\r\n                languages: ['macedonian', 'russian', 'turkish']\r\n            }\r\n        ];\r\n    }\r\n\r\n    private async addLanguage(language: string) {\r\n        const response = await fetch('./data/langs/' + language + '.txt');\r\n        this.state.sources[language] = await response.text();\r\n        this.setState({\r\n            sources: this.state.sources\r\n        });\r\n    }\r\n\r\n    private removeLanguage(language: string) {\r\n        delete this.state.sources[language];\r\n        this.setState({\r\n            sources: this.state.sources\r\n        });\r\n    }\r\n\r\n    private usePreset(presetName: string) {\r\n        const preset = this.getPresets().find(p => p.name === presetName);\r\n        if (preset) {\r\n            this.setState({\r\n                sources: {},\r\n                output: []\r\n            }, () => {\r\n                preset.languages.forEach(lang => {\r\n                    this.addLanguage(lang);\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    private random() {\r\n        const languages = this.getLanguages();\r\n\r\n        const selection: string[] = [];\r\n        while (selection.length !== 3) {\r\n            const n = Math.floor(Math.random() * languages.length);\r\n            const lang = languages[n];\r\n            if (!selection.includes(lang)) {\r\n                selection.push(lang);\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            sources: {},\r\n            output: []\r\n        }, () => {\r\n            selection.forEach(lang => {\r\n                this.addLanguage(lang);\r\n            });\r\n        });\r\n    }\r\n\r\n    private generate() {\r\n        const sources: string[] = [];\r\n        Object.keys(this.state.sources).forEach(key => {\r\n            const src = this.state.sources[key];\r\n            sources.push(src);\r\n        });\r\n        TextGenerator.initModel(sources);\r\n        this.setState({\r\n            output: TextGenerator.generate(5)\r\n        });\r\n    }\r\n\r\n    private reset() {\r\n        this.setState({\r\n            sources: {},\r\n            output: []\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        const presetOptions = this.getPresets().map(p => {\r\n            return {\r\n                id: p.name,\r\n                text: p.name\r\n            };\r\n        });\r\n\r\n        let selectedPreset = '';\r\n        this.getPresets().forEach(p => {\r\n            const selected = Object.keys(this.state.sources).sort().join(', ');\r\n            const setting = p.languages.sort().join(', ');\r\n            if (selected === setting) {\r\n                selectedPreset = p.name;\r\n            }\r\n        });\r\n\r\n        let selectedLanguages = Object.keys(this.state.sources).sort().join(', ');\r\n        if (selectedLanguages === '') {\r\n            selectedLanguages = 'none';\r\n        }\r\n\r\n        const languages = this.getLanguages()\r\n            .map(lang => {\r\n                const isSelected = Object.keys(this.state.sources).includes(lang);\r\n                return (\r\n                    <div className='column' key={lang}>\r\n                        <Checkbox\r\n                            label={lang}\r\n                            checked={isSelected}\r\n                            showCheck={false}\r\n                            changeValue={value => value ? this.addLanguage(lang) : this.removeLanguage(lang)}\r\n                        />\r\n                    </div>\r\n                );\r\n            });\r\n\r\n        const allowGenerate = Object.keys(this.state.sources).length > 0;\r\n        const allowReset = allowGenerate || this.state.output.length > 0;\r\n\r\n        const output = [];\r\n        if (this.state.output.length > 0) {\r\n            output.push(\r\n                <div key='div' className='divider' />\r\n            );\r\n        }\r\n        for (let n = 0; n !== this.state.output.length; ++n) {\r\n            output.push(\r\n                <div key={n} className='section'>\r\n                    {this.state.output[n].toLowerCase()}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className='language'>\r\n                <div className='heading'>presets</div>\r\n                <Selector\r\n                    options={presetOptions}\r\n                    selectedID={selectedPreset}\r\n                    select={optionID => this.usePreset(optionID)}\r\n                />\r\n                <div className='divider' />\r\n                <Expander\r\n                    text={'selected languages: ' + selectedLanguages}\r\n                    content={\r\n                        <div className='row collapse small-up-1 medium-up-2 large-up-3 language-options'>\r\n                            {languages}\r\n                        </div>\r\n                    }\r\n                />\r\n                <div className='divider' />\r\n                <ControlRow\r\n                    controls={[\r\n                        <button key='generate' className={allowGenerate ? '' : 'disabled'} onClick={() => this.generate()}>generate text</button>,\r\n                        <button key='reset' className={allowReset ? '' : 'disabled'} onClick={() => this.reset()}>reset</button>,\r\n                        <button key='random' onClick={() => this.random()}>random sources</button>\r\n                    ]}\r\n                />\r\n                <div className='language-output'>\r\n                    {output}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport TextGenerator from '../../utils/text-generation';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    //\r\n}\r\n\r\ninterface State {\r\n    output: {\r\n        male: string[],\r\n        female: string[],\r\n        surname: string[]\r\n    };\r\n}\r\n\r\nexport default class NameModule extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            output: {\r\n                male: [],\r\n                female: [],\r\n                surname: []\r\n            }\r\n        };\r\n    }\r\n\r\n    private async generate(type: 'male' | 'female' | 'surname') {\r\n        const response = await fetch('./data/names/' + type + '.txt');\r\n        const input = await response.text();\r\n\r\n        TextGenerator.initModel([input]);\r\n        const names = TextGenerator.generate(10).sort();\r\n\r\n        this.state.output[type] = names;\r\n        this.setState({\r\n            output: this.state.output\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        const male = [];\r\n        for (let n = 0; n !== this.state.output.male.length; ++n) {\r\n            male.push(\r\n                <div key={n} className='section'>\r\n                    {this.state.output.male[n].toLowerCase()}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        const female = [];\r\n        for (let n = 0; n !== this.state.output.female.length; ++n) {\r\n            female.push(\r\n                <div key={n} className='section'>\r\n                    {this.state.output.female[n].toLowerCase()}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        const surname = [];\r\n        for (let n = 0; n !== this.state.output.surname.length; ++n) {\r\n            surname.push(\r\n                <div key={n} className='section'>\r\n                    {this.state.output.surname[n].toLowerCase()}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className='name'>\r\n                <div className='name-output'>\r\n                    <div className='row'>\r\n                        <div className='columns small-4 medium-4 large-4'>\r\n                            <div className='heading'>male names</div>\r\n                            <button onClick={() => this.generate('male')}>generate</button>\r\n                            {male}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4'>\r\n                            <div className='heading'>female names</div>\r\n                            <button onClick={() => this.generate('female')}>generate</button>\r\n                            {female}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4'>\r\n                            <div className='heading'>surnames</div>\r\n                            <button onClick={() => this.generate('surname')}>generate</button>\r\n                            {surname}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Showdown from 'showdown';\r\n\r\nimport Selector from '../controls/selector';\r\n\r\nconst showdown = new Showdown.Converter();\r\nshowdown.setOption('tables', true);\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    //\r\n}\r\n\r\ninterface State {\r\n    view: string;\r\n    source: string | null;\r\n}\r\n\r\nexport default class ReferenceModule extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            view: 'skills',\r\n            source: null\r\n        };\r\n    }\r\n\r\n    private setView(view: string) {\r\n        this.setState({\r\n            view: view,\r\n            source: null\r\n        });\r\n    }\r\n\r\n    private async fetchData() {\r\n        const response = await fetch('./data/' + this.state.view + '.md');\r\n        const text = await response.text();\r\n        this.setState({\r\n            source: text\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        if (this.state.view && !this.state.source) {\r\n            this.fetchData();\r\n        }\r\n\r\n        const options = [\r\n            {\r\n                id: 'skills',\r\n                text: 'skills'\r\n            },\r\n            {\r\n                id: 'conditions',\r\n                text: 'conditions'\r\n            },\r\n            {\r\n                id: 'actions',\r\n                text: 'actions'\r\n            }\r\n        ];\r\n\r\n        return (\r\n            <div>\r\n                <Selector\r\n                    options={options}\r\n                    selectedID={this.state.view}\r\n                    select={optionID => this.setView(optionID)}\r\n                />\r\n                <div dangerouslySetInnerHTML={{ __html: showdown.makeHtml(this.state.source || '') }} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport InfoCard from '../cards/info-card';\r\nimport Checkbox from '../controls/checkbox';\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport Selector from '../controls/selector';\r\nimport LanguageModule from '../dm-modules/language-module';\r\nimport NameModule from '../dm-modules/name-module';\r\nimport ReferenceModule from '../dm-modules/reference-module';\r\n\r\nimport pkg from '../../../package.json';\r\n\r\ninterface Props {\r\n    options: {\r\n        showHelp: boolean;\r\n    };\r\n    resetAll: () => void;\r\n    changeValue: (source: {}, field: string, value: any) => void;\r\n}\r\n\r\ninterface State {\r\n    view: string;\r\n    module: string | null;\r\n}\r\n\r\nexport default class AboutModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            view: 'dm',\r\n            module: null\r\n        };\r\n    }\r\n\r\n    private setView(view: string) {\r\n        this.setState({\r\n            view: view\r\n        });\r\n    }\r\n\r\n    private setModule(module: string) {\r\n        this.setState({\r\n            module: module\r\n        });\r\n    }\r\n\r\n    private getTools() {\r\n        if (this.state.view !== 'dm') {\r\n            return null;\r\n        }\r\n\r\n        const modules = [\r\n            {\r\n                id: 'reference',\r\n                text: 'd&d reference'\r\n            },\r\n            {\r\n                id: 'language',\r\n                text: 'language generator'\r\n            },\r\n            {\r\n                id: 'names',\r\n                text: 'name generator'\r\n            }\r\n        ];\r\n\r\n        let module = (\r\n            <InfoCard\r\n                getContent={() => (\r\n                    <div className='section'>\r\n                        <b>dojo</b> includes several dm tools; select one of them above\r\n                    </div>\r\n                )}\r\n            />\r\n        );\r\n\r\n        switch (this.state.module) {\r\n            case 'reference':\r\n                module = (\r\n                    <ReferenceModule />\r\n                );\r\n                break;\r\n            case 'language':\r\n                module = (\r\n                    <LanguageModule />\r\n                );\r\n                break;\r\n            case 'names':\r\n                module = (\r\n                    <NameModule />\r\n                );\r\n                break;\r\n        }\r\n\r\n        return (\r\n            <div className='dm-screen'>\r\n                <Selector\r\n                    options={modules}\r\n                    selectedID={this.state.module}\r\n                    select={moduleID => this.setModule(moduleID)}\r\n                />\r\n                <div className='divider' />\r\n                <div className='dm-module'>\r\n                    {module}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getAbout() {\r\n        if (this.state.view !== 'about') {\r\n            return null;\r\n        }\r\n\r\n        /* tslint:disable:max-line-length */\r\n        return (\r\n            <div>\r\n                <div className='section'>dojo by <a href='mailto:andy.aiken@live.co.uk'>andy aiken</a></div>\r\n                <div className='section'>version <b>{pkg.version}</b></div>\r\n                <div className='section'>if you would like to contribut to this project, you can do so <a href='https://github.com/andyaiken/dojo' target='_blank' rel='noopener noreferrer'>here</a></div>\r\n                <div className='section'>dungeons and dragons copyright wizards of the coast</div>\r\n                <div className='heading'>options</div>\r\n                <ConfirmButton text='clear all data' callback={() => this.props.resetAll()} />\r\n                <Checkbox\r\n                    label='show help cards'\r\n                    checked={this.props.options.showHelp}\r\n                    changeValue={value => this.props.changeValue(this.props.options, 'showHelp', value)}\r\n                />\r\n                <div className='heading'>open game license</div>\r\n                <div className='section'>The following text is the property of Wizards of the Coast, Inc. and is Copyright 2000 Wizards of the Coast, Inc ('Wizards'). All Rights Reserved.</div>\r\n                <ol>\r\n                    <li>Definitions: (a)'Contributors' means the copyright and/or trademark owners who have contributed Open Game Content; (b)'Derivative Material' means copyrighted material including derivative works and translations (including into other computer languages), potation, modification, correction, addition, extension, upgrade, improvement, compilation, abridgment or other form in which an existing work may be recast, transformed or adapted; (c) 'Distribute' means to reproduce, license, rent, lease, sell, broadcast, publicly display, transmit or otherwise distribute; (d)'Open Game Content' means the game mechanic and includes the methods, procedures, processes and routines to the extent such content does not embody the Product Identity and is an enhancement over the prior art and any additional content clearly identified as Open Game Content by the Contributor, and means any work covered by this License, including translations and derivative works under copyright law, but specifically excludes Product Identity. (e) 'Product Identity' means product and product line names, logos and identifying marks including trade dress; artifacts; creatures characters; stories, storylines, plots, thematic elements, dialogue, incidents, language, artwork, symbols, designs, depictions, likenesses, formats, poses, concepts, themes and graphic, photographic and other visual or audio representations; names and descriptions of characters, spells, enchantments, personalities, teams, personas, likenesses and special abilities; places, locations, environments, creatures, equipment, magical or supernatural abilities or effects, logos, symbols, or graphic designs; and any other trademark or registered trademark clearly identified as Product identity by the owner of the Product Identity, and which specifically excludes the Open Game Content; (f) 'Trademark' means the logos, names, mark, sign, motto, designs that are used by a Contributor to identify itself or its products or the associated products contributed to the Open Game License by the Contributor (g) 'Use', 'Used' or 'Using' means to use, Distribute, copy, edit, format, modify, translate and otherwise create Derivative Material of Open Game Content. (h) 'You' or 'Your' means the licensee in terms of this agreement.</li>\r\n                    <li>The License: This License applies to any Open Game Content that contains a notice indicating that the Open Game Content may only be Used under and in terms of this License. You must affix such a notice to any Open Game Content that you Use. No terms may be added to or subtracted from this License except as described by the License itself. No other terms or conditions may be applied to any Open Game Content distributed using this License.</li>\r\n                    <li>Offer and Acceptance: By Using the Open Game Content You indicate Your acceptance of the terms of this License.</li>\r\n                    <li>Grant and Consideration: In consideration for agreeing to use this License, the Contributors grant You a perpetual, worldwide, royalty-free, non-exclusive license with the exact terms of this License to Use, the Open Game Content.</li>\r\n                    <li>Representation of Authority to Contribute: If You are contributing original material as Open Game Content, You represent that Your Contributions are Your original creation and/or You have sufficient rights to grant the rights conveyed by this License.</li>\r\n                    <li>Notice of License Copyright: You must update the COPYRIGHT NOTICE portion of this License to include the exact text of the COPYRIGHT NOTICE of any Open Game Content You are copying, modifying or distributing, and You must add the title, the copyright date, and the copyright holder's name to the COPYRIGHT NOTICE of any original Open Game Content you Distribute.</li>\r\n                    <li>Use of Product Identity: You agree not to Use any Product Identity, including as an indication as to compatibility, except as expressly licensed in another, independent Agreement with the owner of each element of that Product Identity. You agree not to indicate compatibility or co-adaptability with any Trademark or Registered Trademark in conjunction with a work containing Open Game Content except as expressly licensed in another, independent Agreement with the owner of such Trademark or Registered Trademark. The use of any Product Identity in Open Game Content does not constitute a challenge to the ownership of that Product Identity. The owner of any Product Identity used in Open Game Content shall retain all rights, title and interest in and to that Product Identity.</li>\r\n                    <li>Identification: If you distribute Open Game Content You must clearly indicate which portions of the work that you are distributing are Open Game Content.</li>\r\n                    <li>Updating the License: Wizards or its designated Agents may publish updated versions of this License. You may use any authorized version of this License to copy, modify and distribute any Open Game Content originally distributed under any version of this License.</li>\r\n                    <li>Copy of this License: You MUST include a copy of this License with every copy of the Open Game Content You Distribute.</li>\r\n                    <li>Use of Contributor Credits: You may not market or advertise the Open Game Content using the name of any Contributor unless You have written permission from the Contributor to do so.</li>\r\n                    <li>Inability to Comply: If it is impossible for You to comply with any of the terms of this License with respect to some or all of the Open Game Content due to statute, judicial order, or governmental regulation then You may not Use any Open Game Material so affected.</li>\r\n                    <li>Termination: This License will terminate automatically if You fail to comply with all terms herein and fail to cure such breach within 30 days of becoming aware of the breach. All sublicenses shall survive the termination of this License.</li>\r\n                    <li>Reformation: If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable.</li>\r\n                    <li>COPYRIGHT NOTICE Open Game License v 1.0 Copyright 2000, Wizards of the Coast, Inc.</li>\r\n                </ol>\r\n            </div>\r\n        );\r\n        /* tslint:enable:max-line-length */\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const viewOptions = [\r\n                {\r\n                    id: 'dm',\r\n                    text: 'dm tools'\r\n                },\r\n                {\r\n                    id: 'about',\r\n                    text: 'about'\r\n                }\r\n            ];\r\n\r\n            return (\r\n                <div className='about'>\r\n                    <Selector\r\n                        tabs={true}\r\n                        options={viewOptions}\r\n                        selectedID={this.state.view}\r\n                        select={optionID => this.setView(optionID)}\r\n                    />\r\n                    {this.getTools()}\r\n                    {this.getAbout()}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { CombatSetup } from '../../models/combat';\r\nimport { Encounter, EncounterSlot } from '../../models/encounter';\r\nimport { MapFolio } from '../../models/map-folio';\r\nimport { Monster } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport Selector from '../controls/selector';\r\nimport DifficultyChartPanel from '../panels/difficulty-chart-panel';\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    combatSetup: CombatSetup;\r\n    parties: Party[];\r\n    encounters: Encounter[];\r\n    mapFolios: MapFolio[];\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n    notify: () => void;\r\n}\r\n\r\ninterface State {\r\n    combatSetup: CombatSetup;\r\n}\r\n\r\nexport default class CombatStartModal extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        parties: null,\r\n        mapFolios: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            combatSetup: props.combatSetup\r\n        };\r\n    }\r\n\r\n    private setParty(partyID: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.partyID = partyID;\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        }, () => this.props.notify());\r\n    }\r\n\r\n    private setEncounter(encounterID: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.encounterID = encounterID;\r\n        const enc = this.props.encounters.find(e => e.id === encounterID);\r\n        if (enc) {\r\n            // eslint-disable-next-line\r\n            this.state.combatSetup.monsterNames = Utils.getMonsterNames(enc);\r\n        }\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        }, () => this.props.notify());\r\n    }\r\n\r\n    private setFolioID(id: string) {\r\n        if (id && (id !== '')) {\r\n            const folio = this.props.mapFolios.find(f => f.id === id);\r\n            if (folio) {\r\n                // eslint-disable-next-line\r\n                this.state.combatSetup.folioID = folio.id;\r\n                // eslint-disable-next-line\r\n                this.state.combatSetup.mapID = folio.maps.length === 1 ? folio.maps[0].id : null;\r\n            }\r\n        } else {\r\n            // eslint-disable-next-line\r\n            this.state.combatSetup.folioID = null;\r\n            // eslint-disable-next-line\r\n            this.state.combatSetup.mapID = null;\r\n        }\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        });\r\n    }\r\n\r\n    private setMapID(id: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.mapID = id;\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        });\r\n    }\r\n\r\n    private setWave(waveID: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.waveID = waveID;\r\n        const enc = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n        if (enc) {\r\n            const wave = enc.waves.find(w => w.id === waveID);\r\n            if (wave) {\r\n                // eslint-disable-next-line\r\n                this.state.combatSetup.monsterNames = Utils.getMonsterNames(wave);\r\n            }\r\n        }\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        }, () => this.props.notify());\r\n    }\r\n\r\n    private setEncounterInitMode(mode: 'manual' | 'individual' | 'group') {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.encounterInitMode = mode;\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        });\r\n    }\r\n\r\n    private changeName(slotID: string, index: number, name: string) {\r\n        const slot = this.state.combatSetup.monsterNames.find(s => s.id === slotID);\r\n        if (slot) {\r\n            slot.names[index] = name;\r\n            this.setState({\r\n                combatSetup: this.state.combatSetup\r\n            });\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    private getPartySection() {\r\n        if (this.props.parties.length === 0) {\r\n            return (\r\n                <div className='section'>you have not defined any parties</div>\r\n            );\r\n        }\r\n\r\n        const partyOptions = this.props.parties.map(party => {\r\n            return {\r\n                id: party.id,\r\n                text: party.name || 'unnamed party'\r\n            };\r\n        });\r\n\r\n        let partyContent = null;\r\n        if (this.state.combatSetup.partyID) {\r\n            const selectedParty = this.props.parties.find(p => p.id === this.state.combatSetup.partyID);\r\n            if (selectedParty) {\r\n                const pcs = selectedParty.pcs.filter(pc => pc.active);\r\n\r\n                const pcSections = pcs.map(pc =>\r\n                    (\r\n                        <li key={pc.id}>\r\n                            {pc.name || 'unnamed pc'} (level {pc.level})\r\n                        </li>\r\n                    )\r\n                );\r\n\r\n                if (pcSections.length === 0) {\r\n                    pcSections.push(\r\n                        <li key={'empty'}>no pcs</li>\r\n                    );\r\n                }\r\n\r\n                partyContent = (\r\n                    <div>\r\n                        <div className='subheading'>pcs</div>\r\n                        <ul>{pcSections}</ul>\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='heading'>party</div>\r\n                <Dropdown\r\n                    options={partyOptions}\r\n                    placeholder='select party...'\r\n                    selectedID={this.state.combatSetup.partyID ? this.state.combatSetup.partyID : undefined}\r\n                    select={optionID => this.setParty(optionID)}\r\n                />\r\n                {partyContent}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getEncounterSection() {\r\n        if (this.props.encounters.length === 0) {\r\n            return (\r\n                <div className='section'>you have not built any encounters</div>\r\n            );\r\n        }\r\n\r\n        const encounterOptions = this.props.encounters.map(encounter => {\r\n            return {\r\n                id: encounter.id,\r\n                text: encounter.name || 'unnamed encounter'\r\n            };\r\n        });\r\n\r\n        let encounterContent = null;\r\n        if (this.state.combatSetup.encounterID) {\r\n            const selectedEncounter = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n            if (selectedEncounter) {\r\n                const monsterSections = selectedEncounter.slots.map(slot => {\r\n                    let name = slot.monsterName || 'unnamed monster';\r\n                    if (slot.count > 1) {\r\n                        name += ' (x' + slot.count + ')';\r\n                    }\r\n                    return (\r\n                        <li key={slot.id}>{name}</li>\r\n                    );\r\n                });\r\n\r\n                if (monsterSections.length === 0) {\r\n                    monsterSections.push(\r\n                        <li key={'empty'}>no monsters</li>\r\n                    );\r\n                }\r\n\r\n                const waves = selectedEncounter.waves.map(wave => {\r\n                    if (wave.slots.length === 0) {\r\n                        return null;\r\n                    }\r\n\r\n                    const waveMonsters = wave.slots.map(slot => {\r\n                        let name = slot.monsterName || 'unnamed monster';\r\n                        if (slot.count > 1) {\r\n                            name += ' x' + slot.count;\r\n                        }\r\n                        return (\r\n                            <li key={slot.id}>{name}</li>\r\n                        );\r\n                    });\r\n\r\n                    return (\r\n                        <div key={wave.id}>\r\n                            <div className='subheading'>{wave.name || 'unnamed wave'}</div>\r\n                            <ul>{waveMonsters}</ul>\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                encounterContent = (\r\n                    <div>\r\n                        <div className='subheading'>monsters</div>\r\n                        <ul>{monsterSections}</ul>\r\n                        {waves}\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='heading'>encounter</div>\r\n                <Dropdown\r\n                    options={encounterOptions}\r\n                    placeholder='select encounter...'\r\n                    selectedID={this.state.combatSetup.encounterID ? this.state.combatSetup.encounterID : undefined}\r\n                    select={optionID => this.setEncounter(optionID)}\r\n                />\r\n                {encounterContent}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getMapSection() {\r\n        const folios = this.props.mapFolios.filter(folio => folio.maps.length > 0);\r\n        if (folios.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        const folioOptions = [{\r\n            id: '',\r\n            text: 'none'\r\n        }].concat(folios.map(folio => {\r\n            return {\r\n                id: folio.id,\r\n                text: folio.name || 'unnamed folio'\r\n            };\r\n        }));\r\n\r\n        let selectMapSection = null;\r\n        let thumbnailSection = null;\r\n\r\n        if (this.state.combatSetup.folioID) {\r\n            const folio = this.props.mapFolios.find(f => f.id === this.state.combatSetup.folioID);\r\n            if (folio) {\r\n                const mapOptions = folio.maps.map(m => {\r\n                    return {\r\n                        id: m.id,\r\n                        text: m.name || 'unnamed map'\r\n                    };\r\n                });\r\n\r\n                if (mapOptions.length !== 1) {\r\n                    selectMapSection = (\r\n                        <Selector\r\n                            options={mapOptions}\r\n                            selectedID={this.state.combatSetup.mapID}\r\n                            select={optionID => this.setMapID(optionID)}\r\n                        />\r\n                    );\r\n                }\r\n\r\n                if (this.state.combatSetup.mapID) {\r\n                    const map = folio.maps.find(m => m.id === this.state.combatSetup.mapID);\r\n                    if (map) {\r\n                        thumbnailSection = (\r\n                            <MapPanel\r\n                                map={map}\r\n                                mode='thumbnail'\r\n                            />\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='heading'>map</div>\r\n                <Dropdown\r\n                    options={folioOptions}\r\n                    placeholder='select map folio...'\r\n                    selectedID={this.state.combatSetup.folioID ? this.state.combatSetup.folioID : undefined}\r\n                    select={optionID => this.setFolioID(optionID)}\r\n                />\r\n                {selectMapSection}\r\n                {thumbnailSection}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getWaveSection() {\r\n        if (this.state.combatSetup.encounterID === null) {\r\n            return (\r\n                <div className='section'>you have not selected an encounter</div>\r\n            );\r\n        }\r\n\r\n        const selectedEncounter = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n        if (selectedEncounter) {\r\n            if (selectedEncounter.waves.length === 0) {\r\n                return (\r\n                    <div className='section'>you have not defined any waves</div>\r\n                );\r\n            }\r\n\r\n            const waveOptions = selectedEncounter.waves.map(wave => {\r\n                return {\r\n                    id: wave.id,\r\n                    text: wave.name || 'unnamed wave'\r\n                };\r\n            });\r\n\r\n            let waveContent = null;\r\n            if (this.state.combatSetup.waveID) {\r\n                const selectedWave = selectedEncounter.waves.find(w => w.id === this.state.combatSetup.waveID);\r\n                if (selectedWave) {\r\n                    const monsterSections = selectedWave.slots.map(slot => {\r\n                        let name = slot.monsterName || 'unnamed monster';\r\n                        if (slot.count > 1) {\r\n                            name += ' (x' + slot.count + ')';\r\n                        }\r\n                        return (\r\n                            <li key={slot.id}>{name}</li>\r\n                        );\r\n                    });\r\n\r\n                    if (monsterSections.length === 0) {\r\n                        monsterSections.push(\r\n                            <li key={'empty'}>no monsters</li>\r\n                        );\r\n                    }\r\n\r\n                    waveContent = (\r\n                        <div>\r\n                            <div className='subheading'>monsters</div>\r\n                            <ul>{monsterSections}</ul>\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n\r\n            return (\r\n                <div>\r\n                    <div className='heading'>wave</div>\r\n                    <Dropdown\r\n                        options={waveOptions}\r\n                        placeholder='select wave...'\r\n                        selectedID={this.state.combatSetup.waveID ? this.state.combatSetup.waveID : undefined}\r\n                        select={optionID => this.setWave(optionID)}\r\n                    />\r\n                    {waveContent}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private getDifficultySection() {\r\n        const party = this.props.parties.find(p => p.id === this.state.combatSetup.partyID);\r\n        const encounter = this.props.encounters.find(enc => enc.id === this.state.combatSetup.encounterID);\r\n\r\n        if (party && encounter) {\r\n            return (\r\n                <div>\r\n                    <div className='heading'>encounter difficulty</div>\r\n                    <DifficultyChartPanel\r\n                        party={party}\r\n                        encounter={encounter}\r\n                        getMonster={(monsterName, monsterGroupName) => this.props.getMonster(monsterName, monsterGroupName)}\r\n                    />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='heading'>encounter difficulty</div>\r\n                <div className='section'>select a party and an encounter on the left to see difficulty information.</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getMonsterSection() {\r\n        if (this.state.combatSetup.encounterID === null) {\r\n            return (\r\n                <div>\r\n                    <div className='heading'>monsters</div>\r\n                    <div className='section'>select an encounter to see monster options here.</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (!this.props.parties && this.state.combatSetup.waveID === null) {\r\n            return (\r\n                <div>\r\n                    <div className='heading'>monsters</div>\r\n                    <div className='section'>select a wave to see monster options here.</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        const selectedEncounter = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n        if (selectedEncounter) {\r\n            let slotsContainer: { slots: EncounterSlot[] } = selectedEncounter;\r\n            if (this.state.combatSetup.waveID) {\r\n                const selectedWave = selectedEncounter.waves.find(w => w.id === this.state.combatSetup.waveID);\r\n                if (selectedWave) {\r\n                    slotsContainer = selectedWave;\r\n                }\r\n            }\r\n\r\n            if (slotsContainer.slots.length === 0) {\r\n                return null;\r\n            }\r\n\r\n            const initOptions = [\r\n                {\r\n                    id: 'manual',\r\n                    text: 'enter manually'\r\n                },\r\n                {\r\n                    id: 'individual',\r\n                    text: 'roll individually'\r\n                },\r\n                {\r\n                    id: 'group',\r\n                    text: 'roll in groups'\r\n                }\r\n            ];\r\n\r\n            const names = this.state.combatSetup.monsterNames.map(slotNames => {\r\n                const slot = slotsContainer.slots.find(s => s.id === slotNames.id);\r\n                if (slot) {\r\n                    const inputs = [];\r\n                    for (let n = 0; n !== slotNames.names.length; ++n) {\r\n                        inputs.push(\r\n                            <div key={n}>\r\n                                <MonsterName\r\n                                    value={slotNames.names[n]}\r\n                                    slotID={slot.id}\r\n                                    index={n}\r\n                                    changeName={(slotID, index, value) => this.changeName(slotID, index, value)}\r\n                                />\r\n                            </div>\r\n                        );\r\n                    }\r\n                    return (\r\n                        <div key={slotNames.id} className='name-row'>\r\n                            <div className='name-label'>\r\n                                {slot.monsterName}\r\n                            </div>\r\n                            <div className='name-inputs'>\r\n                                {inputs}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n            });\r\n\r\n            return (\r\n                <div>\r\n                    <div className='heading'>monsters</div>\r\n                    <div className='subheading'>initiative</div>\r\n                    <Selector\r\n                        options={initOptions}\r\n                        selectedID={this.state.combatSetup.encounterInitMode}\r\n                        select={optionID => this.setEncounterInitMode(optionID as 'manual' | 'individual' | 'group')}\r\n                    />\r\n                    <div className='subheading'>names</div>\r\n                    <div>{names}</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    public render() {\r\n        try {\r\n            let leftSection = null;\r\n            let rightSection = null;\r\n\r\n            if (this.props.parties) {\r\n                leftSection = (\r\n                    <div>\r\n                        {this.getPartySection()}\r\n                        {this.getEncounterSection()}\r\n                        {this.getMapSection()}\r\n                    </div>\r\n                );\r\n\r\n                rightSection = (\r\n                    <div>\r\n                        {this.getDifficultySection()}\r\n                        {this.getMonsterSection()}\r\n                    </div>\r\n                );\r\n            } else {\r\n                leftSection = (\r\n                    <div>\r\n                        {this.getWaveSection()}\r\n                    </div>\r\n                );\r\n\r\n                rightSection = (\r\n                    <div>\r\n                        {this.getMonsterSection()}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='row' style={{ height: '100%', margin: '0 -15px' }}>\r\n                    <div className='column small-6 medium-6 large-6 scrollable'>\r\n                        {leftSection}\r\n                    </div>\r\n                    <div className='column small-6 medium-6 large-6 scrollable'>\r\n                        {rightSection}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface MonsterNameProps {\r\n    slotID: string;\r\n    index: number;\r\n    value: string;\r\n    changeName: (slotID: string, index: number, value: string) => void;\r\n}\r\n\r\nclass MonsterName extends React.Component<MonsterNameProps> {\r\n    public render() {\r\n        return (\r\n            <input type='text' value={this.props.value} onChange={event => this.props.changeName(this.props.slotID, this.props.index, event.target.value)} />\r\n        );\r\n    }\r\n}\r\n","export interface Condition {\r\n    id: string;\r\n    name: string;\r\n    level: number;\r\n    text: string | null;\r\n    duration: ConditionDurationSaves | ConditionDurationCombatant | ConditionDurationRounds | null;\r\n}\r\n\r\nexport interface ConditionDurationSaves {\r\n    type: 'saves';\r\n    count: number;\r\n    saveType: 'str' | 'dex' | 'con' | 'int' | 'wis' | 'cha' | 'death';\r\n    saveDC: number;\r\n    point: 'start' | 'end';\r\n}\r\n\r\nexport interface ConditionDurationCombatant {\r\n    type: 'combatant';\r\n    point: 'start' | 'end';\r\n    combatantID: string | null;\r\n}\r\n\r\nexport interface ConditionDurationRounds {\r\n    type: 'rounds';\r\n    count: number;\r\n}\r\n\r\nexport const CONDITION_TYPES = [\r\n    'blinded',\r\n    'charmed',\r\n    'deafened',\r\n    'exhaustion',\r\n    'frightened',\r\n    'grappled',\r\n    'incapacitated',\r\n    'invisible',\r\n    'paralyzed',\r\n    'petrified',\r\n    'poisoned',\r\n    'prone',\r\n    'restrained',\r\n    'stunned',\r\n    'unconscious',\r\n    'custom'\r\n];\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    items: { id: string; text: string; details: JSX.Element | string; disabled?: boolean }[];\r\n    selectedItemID: string | null;\r\n    select: (itemID: string) => void;\r\n}\r\n\r\nexport default class RadioGroup extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        // No default property values\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            const content = this.props.items.map(item => {\r\n                return (\r\n                    <RadioGroupItem\r\n                        key={item.id}\r\n                        item={item}\r\n                        selected={this.props.selectedItemID === item.id}\r\n                        select={(itemID: string) => this.props.select(itemID)}\r\n                    />\r\n                );\r\n            });\r\n\r\n            return (\r\n                <div className='radio-group'>\r\n                    {content}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface RadioGroupItemProps {\r\n    item: { id: string; text: string; details: JSX.Element | string; disabled?: boolean };\r\n    selected: boolean;\r\n    select: (itemID: string) => void;\r\n}\r\n\r\nclass RadioGroupItem extends React.Component<RadioGroupItemProps> {\r\n    public render() {\r\n        let style = 'radio-item';\r\n        let details = null;\r\n\r\n        if (this.props.selected) {\r\n            style += ' selected';\r\n            details = (\r\n                <div className='radio-item-details'>\r\n                    {this.props.item.details}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (this.props.item.disabled) {\r\n            style += ' disabled';\r\n        }\r\n\r\n        return (\r\n            <div className={style} onClick={() => this.props.select(this.props.item.id)}>\r\n                <div className='radio-item-text'>{this.props.item.text}</div>\r\n                {details}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Factory from '../../utils/factory';\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combat, Combatant } from '../../models/combat';\r\nimport { Condition, CONDITION_TYPES, ConditionDurationCombatant, ConditionDurationSaves } from '../../models/condition';\r\nimport { Monster } from '../../models/monster-group';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport RadioGroup from '../controls/radio-group';\r\nimport Selector from '../controls/selector';\r\nimport Spin from '../controls/spin';\r\n\r\ninterface Props {\r\n    condition: Condition;\r\n    combatant: Combatant & Monster;\r\n    combat: Combat;\r\n}\r\n\r\ninterface State {\r\n    condition: Condition;\r\n}\r\n\r\nexport default class ConditionModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            condition: props.condition\r\n        };\r\n    }\r\n\r\n    private setCondition(conditionName: string) {\r\n        // eslint-disable-next-line\r\n        this.state.condition.name = conditionName;\r\n        // eslint-disable-next-line\r\n        this.state.condition.level = 1;\r\n        // eslint-disable-next-line\r\n        this.state.condition.text = conditionName === 'custom' ? 'custom condition' : null;\r\n\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    private setDuration(durationType: 'saves' | 'combatant' | 'rounds') {\r\n        let duration = null;\r\n\r\n        switch (durationType) {\r\n            case 'saves':\r\n                duration = Factory.createConditionDurationSaves();\r\n                break;\r\n            case 'combatant':\r\n                duration = Factory.createConditionDurationCombatant();\r\n                duration.combatantID = this.props.combatant.id;\r\n                break;\r\n            case 'rounds':\r\n                duration = Factory.createConditionDurationRounds();\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        // eslint-disable-next-line\r\n        this.state.condition.duration = duration;\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    private changeValue(object: any, field: string, value: any) {\r\n        object[field] = value;\r\n\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    private nudgeValue(object: any, field: string, delta: number) {\r\n        let value = object[field] + delta;\r\n        if (field === 'level') {\r\n            value = Math.max(value, 1);\r\n            value = Math.min(value, 6);\r\n        }\r\n        if (field === 'count') {\r\n            value = Math.max(value, 1);\r\n        }\r\n        if (field === 'saveDC') {\r\n            value = Math.max(value, 0);\r\n        }\r\n        object[field] = value;\r\n\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const conditions = CONDITION_TYPES.map(condition => {\r\n                const controls = [];\r\n                const description = [];\r\n                if (condition === this.state.condition.name) {\r\n                    if (condition === 'custom') {\r\n                        controls.push(\r\n                            <input\r\n                                type='text'\r\n                                placeholder='custom condition'\r\n                                value={this.state.condition.text ? this.state.condition.text : ''}\r\n                                onChange={event => this.changeValue(this.state.condition, 'text', event.target.value)}\r\n                            />\r\n                        );\r\n                    }\r\n                    if (condition === 'exhaustion') {\r\n                        controls.push(\r\n                            <Spin\r\n                                key='exhaustion-spin'\r\n                                source={this.props.condition}\r\n                                name='level'\r\n                                label='exhaustion'\r\n                                nudgeValue={delta => this.nudgeValue(this.props.condition, 'level', delta)}\r\n                            />\r\n                        );\r\n                    }\r\n                    const text = Utils.conditionText(this.state.condition);\r\n                    for (let n = 0; n !== text.length; ++n) {\r\n                        description.push(<li key={n} className='section'>{text[n]}</li>);\r\n                    }\r\n                }\r\n\r\n                return {\r\n                    id: condition,\r\n                    text: condition,\r\n                    details: (\r\n                        <div key={condition}>\r\n                            {controls}\r\n                            <ul>\r\n                                {description}\r\n                            </ul>\r\n                        </div>\r\n                    ),\r\n                    disabled: this.props.combatant.conditionImmunities ? this.props.combatant.conditionImmunities.indexOf(condition) !== -1 : false\r\n                };\r\n            });\r\n\r\n            const saveOptions = ['str', 'dex', 'con', 'int', 'wis', 'cha', 'death'].map(c => ({ id: c, text: c }));\r\n            const pointOptions = [\r\n                {\r\n                    id: 'start',\r\n                    text: 'start of turn'\r\n                },\r\n                {\r\n                    id: 'end',\r\n                    text: 'end of turn'\r\n                }\r\n            ];\r\n            const combatantOptions = this.props.combat.combatants.map(c => ({ id: c.id, text: (c.displayName || c.name || 'unnamed monster') }));\r\n\r\n            const durations = [\r\n                {\r\n                    id: 'none',\r\n                    text: 'until removed (default)',\r\n                    details: (\r\n                        <div className='section'>\r\n                            <div>the condition persists until it is manually removed</div>\r\n                        </div>\r\n                    )\r\n                },\r\n                {\r\n                    id: 'saves',\r\n                    text: 'until a successful save',\r\n                    details: (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>number of saves required</div>\r\n                                <Spin\r\n                                    source={this.props.condition.duration}\r\n                                    name='count'\r\n                                    nudgeValue={delta => this.nudgeValue(this.props.condition.duration, 'count', delta)}\r\n                                />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>save dc</div>\r\n                                <Spin\r\n                                    source={this.props.condition.duration}\r\n                                    name='saveDC'\r\n                                    nudgeValue={delta => this.nudgeValue(this.props.condition.duration, 'saveDC', delta)}\r\n                                />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>type of save</div>\r\n                                <Selector\r\n                                    options={saveOptions}\r\n                                    selectedID={\r\n                                        (this.props.condition.duration as ConditionDurationSaves)\r\n                                        ? (this.props.condition.duration as ConditionDurationSaves).saveType\r\n                                        : null\r\n                                    }\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, 'saveType', optionID)}\r\n                                />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>make the save at the start or end of the turn</div>\r\n                                <Selector\r\n                                    options={pointOptions}\r\n                                    selectedID={\r\n                                        (this.props.condition.duration as ConditionDurationSaves)\r\n                                        ? (this.props.condition.duration as ConditionDurationSaves).point\r\n                                        : null\r\n                                    }\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, 'point', optionID)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                },\r\n                {\r\n                    id: 'combatant',\r\n                    text: 'until someone\\'s next turn',\r\n                    details: (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>combatant</div>\r\n                                <Dropdown\r\n                                    options={combatantOptions}\r\n                                    selectedID={\r\n                                        (this.props.condition.duration as ConditionDurationCombatant)\r\n                                        ? (this.props.condition.duration as ConditionDurationCombatant).combatantID || undefined\r\n                                        : undefined\r\n                                    }\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, 'combatantID', optionID)}\r\n                                />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>start or end of the turn</div>\r\n                                <Selector\r\n                                    options={pointOptions}\r\n                                    selectedID={\r\n                                        (this.props.condition.duration as ConditionDurationCombatant)\r\n                                        ? (this.props.condition.duration as ConditionDurationCombatant).point\r\n                                        : null\r\n                                    }\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, 'point', optionID)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                },\r\n                {\r\n                    id: 'rounds',\r\n                    text: 'for a number of rounds',\r\n                    details: (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>number of rounds</div>\r\n                                <Spin\r\n                                    source={this.props.condition.duration}\r\n                                    name='count'\r\n                                    nudgeValue={delta => this.nudgeValue(this.props.condition.duration, 'count', delta)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }\r\n            ];\r\n\r\n            return (\r\n                <div className='condition-modal'>\r\n                    <div className='row' style={{ height: '100%' }}>\r\n                        <div className='columns small-6 medium-6 large-6 scrollable'>\r\n                            <div className='heading'>condition</div>\r\n                            <RadioGroup\r\n                                items={conditions}\r\n                                selectedItemID={this.state.condition.name}\r\n                                select={itemID => this.setCondition(itemID)}\r\n                            />\r\n                        </div>\r\n                        <div className='columns small-6 medium-6 large-6 scrollable'>\r\n                            <div className='heading'>duration</div>\r\n                            <RadioGroup\r\n                                items={durations}\r\n                                selectedItemID={this.state.condition.duration ? this.state.condition.duration.type : 'none'}\r\n                                select={itemID => this.setDuration(itemID as 'saves' | 'combatant' | 'rounds')}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { CATEGORY_TYPES, Monster, MonsterGroup, SIZE_TYPES } from '../../models/monster-group';\r\n\r\nimport Selector from '../controls/selector';\r\n\r\ninterface Props {\r\n    library: MonsterGroup[];\r\n}\r\n\r\ninterface State {\r\n    chart: string;\r\n}\r\n\r\nexport default class DemographicsModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            chart: 'challenge'\r\n        };\r\n    }\r\n\r\n    private selectChart(chart: string) {\r\n        this.setState({\r\n            chart: chart\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let demographics = null;\r\n\r\n            const allMonsters: Monster[] = [];\r\n            this.props.library.forEach(group => group.monsters.forEach(monster => allMonsters.push(monster)));\r\n            if (allMonsters.length !== 0) {\r\n                const buckets: { value: any, title: string }[] = [];\r\n                let maxBucketSize = 0;\r\n                const monsters: { [key: string]: Monster[] } = {};\r\n\r\n                switch (this.state.chart) {\r\n                    case 'challenge':\r\n                        const challenges = [\r\n                            0, 0.125, 0.25, 0.5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30\r\n                        ];\r\n                        challenges.forEach(cr => {\r\n                            buckets.push({\r\n                                value: cr,\r\n                                title: 'challenge ' + Utils.challenge(cr)\r\n                            });\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const cr = bucket.value;\r\n                            monsters[cr.toString()] = allMonsters.filter(monster => monster.challenge === cr);\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const cr = bucket.value;\r\n                            maxBucketSize = Math.max(monsters[cr].length, maxBucketSize);\r\n                        });\r\n                        break;\r\n                    case 'size':\r\n                        SIZE_TYPES.forEach(size => {\r\n                            buckets.push({\r\n                                value: size,\r\n                                title: size\r\n                            });\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const size = bucket.value;\r\n                            monsters[size.toString()] = allMonsters.filter(monster => monster.size === size);\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const size = bucket.value;\r\n                            maxBucketSize = Math.max(monsters[size].length, maxBucketSize);\r\n                        });\r\n                        break;\r\n                    case 'type':\r\n                        CATEGORY_TYPES.forEach(type => {\r\n                            buckets.push({\r\n                                value: type,\r\n                                title: type\r\n                            });\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const type = bucket.value;\r\n                            monsters[type.toString()] = allMonsters.filter(monster => monster.category === type);\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const type = bucket.value;\r\n                            maxBucketSize = Math.max(monsters[type].length, maxBucketSize);\r\n                        });\r\n                        break;\r\n                    default:\r\n                        // Do nothing\r\n                        break;\r\n                }\r\n\r\n                const bars = [];\r\n                for (let index = 0; index !== buckets.length; ++index) {\r\n                    const bucket = buckets[index];\r\n                    const set = monsters[bucket.value];\r\n                    const count = set ? set.length : 0;\r\n                    bars.push(\r\n                        <div\r\n                            key={bucket.title}\r\n                            className='bar-container'\r\n                            title={bucket.title + ': ' + set.length + ' monsters'}\r\n                        >\r\n                            <div\r\n                                className='bar'\r\n                                style={{\r\n                                    width: 'calc((100% - 1px) * ' + count + ' / ' + maxBucketSize + ')'\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                const chartOptions = [\r\n                    {\r\n                        id: 'challenge',\r\n                        text: 'challenge rating'\r\n                    },\r\n                    {\r\n                        id: 'size',\r\n                        text: 'size'\r\n                    },\r\n                    {\r\n                        id: 'type',\r\n                        text: 'type'\r\n                    }\r\n                ];\r\n\r\n                demographics = (\r\n                    <div>\r\n                        <div className='heading'>monster demographics</div>\r\n                        <Selector\r\n                            options={chartOptions}\r\n                            selectedID={this.state.chart}\r\n                            select={optionID => this.selectChart(optionID)}\r\n                        />\r\n                        <div className='chart'>\r\n                            <div className='plot'>{bars}</div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return demographics;\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","export interface MapFolio {\r\n    id: string;\r\n    name: string;\r\n    maps: Map[];\r\n}\r\n\r\nexport interface Map {\r\n    id: string;\r\n    name: string;\r\n    items: MapItem[];\r\n}\r\n\r\nexport interface MapItem {\r\n    id: string;\r\n    type: 'tile' | 'pc' | 'monster';\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n    terrain: string | null;\r\n}\r\n\r\nexport const TERRAIN_TYPES = [\r\n    'cavern',\r\n    'dirt',\r\n    'flagstone',\r\n    'floorboard',\r\n    'grassland',\r\n    'pit',\r\n    'sand',\r\n    'snow',\r\n    'water'\r\n];\r\n","import React from 'react';\r\n\r\nimport { MapItem, TERRAIN_TYPES } from '../../models/map-folio';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport Radial from '../controls/radial';\r\n\r\ninterface Props {\r\n    tile: MapItem;\r\n    changeValue: (tile: MapItem, field: string, value: string) => void;\r\n    moveMapItem: (tile: MapItem, dir: string) => void;\r\n    resizeMapItem: (tile: MapItem, dir: string, dir2: 'in' | 'out' | null) => void;\r\n    cloneMapItem: (tile: MapItem) => void;\r\n    removeMapItem: (tile: MapItem) => void;\r\n}\r\n\r\nexport default class MapTileCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const terrainOptions = TERRAIN_TYPES.map(t => {\r\n                return { id: t, text: t };\r\n            });\r\n\r\n            return (\r\n                <div className='card map-tile'>\r\n                    <div className='heading'>\r\n                        <div className='title'>map tile</div>\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        <div className='subheading'>size</div>\r\n                        <div className='section'>{this.props.tile.width} sq x {this.props.tile.height} sq</div>\r\n                        <div className='section'>{this.props.tile.width * 5} ft x {this.props.tile.height * 5} ft</div>\r\n                        <div className='divider' />\r\n                        <div className='subheading'>terrain</div>\r\n                        <Dropdown\r\n                            options={terrainOptions}\r\n                            placeholder='select terrain'\r\n                            selectedID={this.props.tile.terrain ? this.props.tile.terrain : undefined}\r\n                            select={optionID => this.props.changeValue(this.props.tile, 'terrain', optionID)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <div className='subheading'>move</div>\r\n                        <div className='section centered'>\r\n                            <Radial direction='out' click={dir => this.props.moveMapItem(this.props.tile, dir)} />\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='subheading'>resize</div>\r\n                        <div className='section centered'>\r\n                            <Radial direction='both' click={(dir, dir2) => this.props.resizeMapItem(this.props.tile, dir, dir2)} />\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='section'>\r\n                            <button onClick={() => this.props.cloneMapItem(this.props.tile)}>clone tile</button>\r\n                            <button onClick={() => this.props.removeMapItem(this.props.tile)}>remove tile</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Factory from '../../utils/factory';\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Map, MapItem } from '../../models/map-folio';\r\n\r\nimport MapTileCard from '../cards/map-tile-card';\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    map: Map;\r\n}\r\n\r\ninterface State {\r\n    map: Map;\r\n    selectedTileID: string | null;\r\n}\r\n\r\nexport default class MapEditorModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            map: props.map,\r\n            selectedTileID: null\r\n        };\r\n    }\r\n\r\n    private setSelectedTileID(id: string | null) {\r\n        this.setState({\r\n            selectedTileID: id\r\n        });\r\n    }\r\n\r\n    private addMapTile(x: number, y: number) {\r\n        const tile = Factory.createMapItem();\r\n        tile.x = x;\r\n        tile.y = y;\r\n        tile.terrain = 'flagstone';\r\n        this.state.map.items.push(tile);\r\n\r\n        this.setState({\r\n            map: this.state.map,\r\n            selectedTileID: tile.id\r\n        });\r\n    }\r\n\r\n    private moveMapItem(item: MapItem, dir: string) {\r\n        switch (dir) {\r\n            case 'N':\r\n                item.y -= 1;\r\n                break;\r\n            case 'E':\r\n                item.x += 1;\r\n                break;\r\n            case 'S':\r\n                item.y += 1;\r\n                break;\r\n            case 'W':\r\n                item.x -= 1;\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    private bigMapItem(item: MapItem, dir: string) {\r\n        switch (dir) {\r\n            case 'N':\r\n                item.y -= 1;\r\n                item.height += 1;\r\n                break;\r\n            case 'E':\r\n                item.width += 1;\r\n                break;\r\n            case 'S':\r\n                item.height += 1;\r\n                break;\r\n            case 'W':\r\n                item.x -= 1;\r\n                item.width += 1;\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    private smallMapItem(item: MapItem, dir: string) {\r\n        switch (dir) {\r\n            case 'N':\r\n                if (item.height > 1) {\r\n                    item.y += 1;\r\n                    item.height -= 1;\r\n                }\r\n                break;\r\n            case 'E':\r\n                if (item.width > 1) {\r\n                    item.width -= 1;\r\n                }\r\n                break;\r\n            case 'S':\r\n                if (item.height > 1) {\r\n                    item.height -= 1;\r\n                }\r\n                break;\r\n            case 'W':\r\n                if (item.width > 1) {\r\n                    item.x += 1;\r\n                    item.width -= 1;\r\n                }\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    private resizeMapItem(item: MapItem, dir: string, dir2: 'in' | 'out') {\r\n        switch (dir2) {\r\n            case 'in':\r\n                this.smallMapItem(item, dir);\r\n                break;\r\n            case 'out':\r\n                this.bigMapItem(item, dir);\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n    }\r\n\r\n    private cloneMapItem(item: MapItem) {\r\n        const copy = JSON.parse(JSON.stringify(item));\r\n        copy.id = Utils.guid();\r\n        copy.x += 1;\r\n        copy.y += 1;\r\n        this.state.map.items.push(copy);\r\n\r\n        this.setState({\r\n            map: this.state.map,\r\n            selectedTileID: copy.id\r\n        });\r\n    }\r\n\r\n    private removeMapItem(item: MapItem) {\r\n        const index = this.state.map.items.indexOf(item);\r\n        this.state.map.items.splice(index, 1);\r\n\r\n        this.setState({\r\n            map: this.state.map,\r\n            selectedTileID: null\r\n        });\r\n    }\r\n\r\n    private changeValue(source: any, field: string, value: any) {\r\n        source[field] = value;\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let tools = null;\r\n            if (this.state.selectedTileID) {\r\n                const item = this.state.map.items.find(i => i.id === this.state.selectedTileID);\r\n                if (item) {\r\n                    tools = (\r\n                        <div className='tools'>\r\n                            <MapTileCard\r\n                                tile={item}\r\n                                moveMapItem={(mapItem, dir) => this.moveMapItem(mapItem, dir)}\r\n                                resizeMapItem={(mapItem, dir, dir2) => this.resizeMapItem(mapItem, dir, dir2 as 'in' | 'out')}\r\n                                cloneMapItem={mapItem => this.cloneMapItem(mapItem)}\r\n                                removeMapItem={mapItem => this.removeMapItem(mapItem)}\r\n                                changeValue={(source, field, value) => this.changeValue(source, field, value)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                }\r\n            } else {\r\n                tools = (\r\n                    <div className='tools'>\r\n                        <p>to add a new tile to the map, double-click on an empty grid square</p>\r\n                        <p>to edit an existing tile, click on it once to select it</p>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='map-editor'>\r\n                    {tools}\r\n                    <MapPanel\r\n                        map={this.state.map}\r\n                        mode='edit'\r\n                        selectedItemID={this.state.selectedTileID ? this.state.selectedTileID : undefined}\r\n                        setSelectedItemID={id => this.setSelectedTileID(id)}\r\n                        addMapTile={(x, y) => this.addMapTile(x, y)}\r\n                    />\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Factory from '../../utils/factory';\r\nimport Frankenstein from '../../utils/frankenstein';\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { CATEGORY_TYPES, Monster, MonsterGroup, SIZE_TYPES, Trait, TRAIT_TYPES } from '../../models/monster-group';\r\n\r\nimport MonsterCard from '../cards/monster-card';\r\nimport Checkbox from '../controls/checkbox';\r\nimport Dropdown from '../controls/dropdown';\r\nimport Selector from '../controls/selector';\r\nimport Spin from '../controls/spin';\r\nimport AbilityScorePanel from '../panels/ability-score-panel';\r\nimport TraitsPanel from '../panels/traits-panel';\r\n\r\nimport arrow from '../../resources/images/down-arrow.svg';\r\n\r\ninterface Props {\r\n    monster: Monster;\r\n    library: MonsterGroup[];\r\n    showMonsters: boolean;\r\n}\r\n\r\ninterface State {\r\n    monster: Monster;\r\n    page: 'overview' | 'abilities' | 'cbt-stats' | 'actions';\r\n    showFilter: boolean;\r\n    helpSection: string;\r\n    filter: {\r\n        size: boolean,\r\n        type: boolean,\r\n        subtype: boolean,\r\n        alignment: boolean,\r\n        challenge: boolean,\r\n        text: string\r\n    };\r\n}\r\n\r\nexport default class MonsterEditorModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            monster: props.monster,\r\n            page: 'overview',\r\n            showFilter: false,\r\n            helpSection: 'speed',\r\n            filter: {\r\n                size: true,\r\n                type: true,\r\n                subtype: false,\r\n                alignment: false,\r\n                challenge: true,\r\n                text: ''\r\n            }\r\n        };\r\n    }\r\n\r\n    private setPage(page: 'overview' | 'abilities' | 'cbt-stats' | 'actions') {\r\n        const sections = this.getHelpOptionsForPage(page);\r\n        this.setState({\r\n            page: page,\r\n            helpSection: sections[0]\r\n        });\r\n    }\r\n\r\n    private toggleFilter() {\r\n        this.setState({\r\n            showFilter: !this.state.showFilter\r\n        });\r\n    }\r\n\r\n    private setHelpSection(section: string) {\r\n        this.setState({\r\n            helpSection: section\r\n        });\r\n    }\r\n\r\n    private toggleMatch(type: 'size' | 'type' | 'subtype' | 'alignment' | 'challenge') {\r\n        // eslint-disable-next-line\r\n        this.state.filter[type] = !this.state.filter[type];\r\n        this.setState({\r\n            filter: this.state.filter\r\n        });\r\n    }\r\n\r\n    private setFilterText(value: string) {\r\n        // eslint-disable-next-line\r\n        this.state.filter.text = value;\r\n        this.setState({\r\n            filter: this.state.filter\r\n        });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Helper methods\r\n\r\n    private getHelpOptionsForPage(page: 'overview' | 'abilities' | 'cbt-stats' | 'actions') {\r\n        switch (page) {\r\n            case 'overview':\r\n                return ['speed', 'senses', 'languages', 'equipment'];\r\n            case 'abilities':\r\n                return ['str', 'dex', 'con', 'int', 'wis', 'cha', 'saves', 'skills'];\r\n            case 'cbt-stats':\r\n                return ['armor class', 'hit dice', 'resistances', 'vulnerabilities', 'immunities', 'conditions'];\r\n            case 'actions':\r\n                return ['actions'];\r\n            default:\r\n                return [];\r\n        }\r\n    }\r\n\r\n    private getMonsters() {\r\n        const monsters: Monster[] = [];\r\n        this.props.library.forEach(group => {\r\n            group.monsters.forEach(monster => {\r\n                let match = true;\r\n\r\n                if (this.state.monster.id === monster.id) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.filter.size && (this.state.monster.size !== monster.size)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.filter.type && (this.state.monster.category !== monster.category)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.filter.subtype && (this.state.monster.tag !== monster.tag)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.filter.alignment && (this.state.monster.alignment !== monster.alignment)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.filter.challenge && (this.state.monster.challenge !== monster.challenge)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (match) {\r\n                    monsters.push(monster);\r\n                }\r\n            });\r\n        });\r\n\r\n        return monsters;\r\n    }\r\n\r\n    private setRandomValue(field: string, monsters: Monster[]) {\r\n        Frankenstein.setRandomValue(this.state.monster, field, monsters);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private spliceMonsters(monsters: Monster[]) {\r\n        Frankenstein.spliceMonsters(this.state.monster, monsters);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private addTrait(type: 'trait' | 'action' | 'legendary' | 'lair' | 'regional') {\r\n        Frankenstein.addTrait(this.state.monster, type);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private addRandomTrait(type: string, monsters: Monster[]) {\r\n        Frankenstein.addRandomTrait(this.state.monster, type, monsters);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private removeTrait(trait: Trait) {\r\n        Frankenstein.removeTrait(this.state.monster, trait);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private swapTraits(t1: Trait, t2: Trait) {\r\n        Frankenstein.swapTraits(this.state.monster, t1, t2);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private copyTrait(trait: Trait) {\r\n        Frankenstein.copyTrait(this.state.monster, trait);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private changeTrait(trait: Trait, field: string, value: any) {\r\n        (trait as any)[field] = value;\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private nudgeValue(field: string, delta: number) {\r\n        Frankenstein.nudgeValue(this.state.monster, field, delta);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private changeValue(field: string, value: any) {\r\n        Frankenstein.changeValue(this.state.monster, field, value);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // HTML render methods\r\n\r\n    private getHelpSection(monsters: Monster[]) {\r\n        switch (this.state.helpSection) {\r\n            case 'speed':\r\n                return this.getValueSection('speed', 'text', monsters);\r\n            case 'senses':\r\n                return this.getValueSection('senses', 'text', monsters);\r\n            case 'languages':\r\n                return this.getValueSection('languages', 'text', monsters);\r\n            case 'equipment':\r\n                return this.getValueSection('equipment', 'text', monsters);\r\n            case 'str':\r\n                return this.getValueSection('abilityScores.str', 'number', monsters);\r\n            case 'dex':\r\n                return this.getValueSection('abilityScores.dex', 'number', monsters);\r\n            case 'con':\r\n                return this.getValueSection('abilityScores.con', 'number', monsters);\r\n            case 'int':\r\n                return this.getValueSection('abilityScores.int', 'number', monsters);\r\n            case 'wis':\r\n                return this.getValueSection('abilityScores.wis', 'number', monsters);\r\n            case 'cha':\r\n                return this.getValueSection('abilityScores.cha', 'number', monsters);\r\n            case 'saves':\r\n                return this.getValueSection('savingThrows', 'text', monsters);\r\n            case 'skills':\r\n                return this.getValueSection('skills', 'text', monsters);\r\n            case 'armor class':\r\n                return this.getValueSection('ac', 'number', monsters);\r\n            case 'hit dice':\r\n                return this.getValueSection('hitDice', 'number', monsters);\r\n            case 'resistances':\r\n                return this.getValueSection('damage.resist', 'text', monsters);\r\n            case 'vulnerabilities':\r\n                return this.getValueSection('damage.vulnerable', 'text', monsters);\r\n            case 'immunities':\r\n                return this.getValueSection('damage.immune', 'text', monsters);\r\n            case 'conditions':\r\n                return this.getValueSection('conditionImmunities', 'text', monsters);\r\n            case 'actions':\r\n                return this.getActionsSection(monsters);\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    private getValueSection(field: string, dataType: 'text' | 'number', monsters: Monster[]) {\r\n        const values: any[] = monsters\r\n            .map(m => {\r\n                const tokens = field.split('.');\r\n                let source: any = m;\r\n                let value = null;\r\n                tokens.forEach(token => {\r\n                    if (token === tokens[tokens.length - 1]) {\r\n                        value = source[token];\r\n                    } else {\r\n                        source = source[token];\r\n                    }\r\n                });\r\n                if ((dataType === 'text') && (value === '')) {\r\n                    value = null;\r\n                }\r\n                return value;\r\n            })\r\n            .filter(v => v !== null);\r\n\r\n        const distinct: { value: any, count: number }[] = [];\r\n        if (dataType === 'number') {\r\n            let min: number | null = null;\r\n            let max: number | null = null;\r\n            values.forEach(v => {\r\n                if ((min === null) || (v < min)) {\r\n                    min = v;\r\n                }\r\n                if ((max === null) || (v > max)) {\r\n                    max = v;\r\n                }\r\n            });\r\n            if ((min !== null) && (max !== null)) {\r\n                for (let n = min; n <= max; ++n) {\r\n                    distinct.push({\r\n                        value: n,\r\n                        count: 0\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        values.forEach(v => {\r\n            const current = distinct.find(d => d.value === v);\r\n            if (current) {\r\n                current.count += 1;\r\n            } else {\r\n                distinct.push({\r\n                    value: v,\r\n                    count: 1\r\n                });\r\n            }\r\n        });\r\n\r\n        switch (dataType) {\r\n            case 'number':\r\n                Utils.sortByValue(distinct);\r\n                break;\r\n            case 'text':\r\n                Utils.sortByCount(distinct);\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        if (dataType === 'text') {\r\n            const count = monsters.length - values.length;\r\n            if (count !== 0) {\r\n                distinct.push({\r\n                    value: '',\r\n                    count: monsters.length - values.length\r\n                });\r\n            }\r\n        }\r\n\r\n        const valueSections = distinct.map(d => {\r\n            const width = 100 * d.count / monsters.length;\r\n            return (\r\n                <div className='row small-up-3 medium-up-3 large-up-3 value-list' key={distinct.indexOf(d)}>\r\n                    <div className='column'>\r\n                        <div className='text-container'>\r\n                            {d.value || '(none specified)'}\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <div className='bar-container'>\r\n                            <div className='bar' style={{ width: width + '%' }} />\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <button onClick={() => this.changeValue(field, d.value)}>use this value</button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                {valueSections}\r\n                <button onClick={() => this.setRandomValue(field, monsters)}>select random value</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getActionsSection(monsters: Monster[]) {\r\n        const rows = [];\r\n        rows.push(\r\n            <div className='row small-up-4 medium-up-4 large-up-4 value-list' key='header'>\r\n                <div className='column'>\r\n                    <div className='text-container'>\r\n                        <b>type</b>\r\n                    </div>\r\n                </div>\r\n                <div className='column'>\r\n                    <div className='text-container number'>\r\n                        <b>average number</b>\r\n                    </div>\r\n                </div>\r\n                <div className='column'>\r\n                    <div className='text-container number'>\r\n                        <b>min - max</b>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        TRAIT_TYPES.forEach(type => {\r\n            let min: number | null = null;\r\n            let max: number | null = null;\r\n            let count = 0;\r\n            monsters.forEach(m => {\r\n                const n = m.traits.filter(t => t.type === type).length;\r\n                if ((min === null) || (n < min)) {\r\n                    min = n;\r\n                }\r\n                if ((max === null) || (n > max)) {\r\n                    max = n;\r\n                }\r\n                count += n;\r\n            });\r\n            const avg = Math.round(count / monsters.length);\r\n\r\n            rows.push(\r\n                <div className='row small-up-4 medium-up-4 large-up-4 value-list' key={type}>\r\n                    <div className='column'>\r\n                        <div className={count === 0 ? 'text-container disabled' : 'text-container'}>\r\n                            {Utils.traitType(type, true)}\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <div className={count === 0 ? 'text-container number disabled' : 'text-container number'}>\r\n                            {avg}\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <div className={count === 0 ? 'text-container number disabled' : 'text-container number'}>\r\n                            {min} - {max}\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <button className={count === 0 ? 'disabled' : ''} onClick={() => this.addRandomTrait(type, monsters)}>add random</button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                {rows}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getFilterCard(monsters: Monster[]) {\r\n        const criteria: string[] = [];\r\n        if (this.state.filter.size) {\r\n            criteria.push('size');\r\n        }\r\n        if (this.state.filter.type) {\r\n            criteria.push('type');\r\n        }\r\n        if (this.state.filter.subtype) {\r\n            criteria.push('subtype');\r\n        }\r\n        if (this.state.filter.alignment) {\r\n            criteria.push('alignment');\r\n        }\r\n        if (this.state.filter.challenge) {\r\n            criteria.push('challenge rating');\r\n        }\r\n        const criteriaText = (criteria.length > 0) ? 'based on ' + criteria.join(', ') : 'no criteria specified';\r\n        const similar = (\r\n            <div className='section'>\r\n                {monsters.length} similar monsters ({criteriaText})\r\n            </div>\r\n        );\r\n\r\n        let filterContent = null;\r\n        if (this.state.showFilter) {\r\n            filterContent = (\r\n                <div>\r\n                    <Checkbox\r\n                        label={'size ' + this.state.monster.size}\r\n                        checked={this.state.filter.size}\r\n                        changeValue={value => this.toggleMatch('size')}\r\n                    />\r\n                    <Checkbox\r\n                        label={'type ' + this.state.monster.category}\r\n                        checked={this.state.filter.type}\r\n                        changeValue={value => this.toggleMatch('type')}\r\n                    />\r\n                    <Checkbox\r\n                        label={this.state.monster.tag ? 'subtype ' + this.state.monster.tag : 'subtype'}\r\n                        checked={this.state.filter.subtype}\r\n                        disabled={!this.state.monster.tag}\r\n                        changeValue={value => this.toggleMatch('subtype')}\r\n                    />\r\n                    <Checkbox\r\n                        label={this.state.monster.alignment ? 'alignment ' + this.state.monster.alignment : 'alignment'}\r\n                        checked={this.state.filter.alignment}\r\n                        disabled={!this.state.monster.alignment}\r\n                        changeValue={value => this.toggleMatch('alignment')}\r\n                    />\r\n                    <Checkbox\r\n                        label={'challenge rating ' + Utils.challenge(this.state.monster.challenge)}\r\n                        checked={this.state.filter.challenge}\r\n                        changeValue={value => this.toggleMatch('challenge')}\r\n                    />\r\n                    <div className='divider' />\r\n                    <button className={monsters.length < 2 ? 'disabled' : ''} onClick={() => this.spliceMonsters(monsters)}>build random monster</button>\r\n                    <div className='divider' />\r\n                    {similar}\r\n                </div>\r\n            );\r\n        } else {\r\n            filterContent = (\r\n                <div>\r\n                    {similar}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className='section'>\r\n                <div className='card'>\r\n                    <div className='heading'>\r\n                        <div className='title'>similar monsters</div>\r\n                        <img className={this.state.showFilter ? 'image rotate' : 'image'} src={arrow} alt='arrow' onClick={() => this.toggleFilter()} />\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        {filterContent}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getMonsterCards(monsters: Monster[]) {\r\n        const sorted = Utils.sort(monsters);\r\n        const monsterCards = sorted.map(m => {\r\n            const showMonster = m.traits.some((t: Trait) => Utils.match(this.state.filter.text, t.name));\r\n            if (showMonster) {\r\n                return (\r\n                    <div className='section' key={m.id}>\r\n                        <MonsterCard\r\n                            combatant={m}\r\n                            mode={'template ' + this.state.page}\r\n                            filter={this.state.filter.text}\r\n                            copyTrait={trait => this.copyTrait(trait)}\r\n                        />\r\n                    </div>\r\n                );\r\n            } else {\r\n                return null;\r\n            }\r\n        }).filter(m => !!m);\r\n\r\n        return monsterCards;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    public render() {\r\n        try {\r\n            const pages = [\r\n                {\r\n                    id: 'overview',\r\n                    text: 'overview'\r\n                },\r\n                {\r\n                    id: 'abilities',\r\n                    text: 'abilities'\r\n                },\r\n                {\r\n                    id: 'cbt-stats',\r\n                    text: 'combat'\r\n                },\r\n                {\r\n                    id: 'actions',\r\n                    text: 'actions'\r\n                }\r\n            ];\r\n\r\n            let monsters: Monster[] = [];\r\n            if (this.props.showMonsters) {\r\n                monsters = this.getMonsters();\r\n            }\r\n\r\n            let content = null;\r\n            switch (this.state.page) {\r\n                case 'overview':\r\n                    const catOptions = CATEGORY_TYPES.map(cat => ({ id: cat, text: cat }));\r\n                    const sizeOptions = SIZE_TYPES.map(size => ({ id: size, text: size }));\r\n\r\n                    content = (\r\n                        <div className='row'>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>name</div>\r\n                                <input type='text' value={this.state.monster.name} onChange={event => this.changeValue('name', event.target.value)} />\r\n                                <div className='subheading'>size</div>\r\n                                <Dropdown\r\n                                    options={sizeOptions}\r\n                                    selectedID={this.state.monster.size}\r\n                                    select={optionID => this.changeValue('size', optionID)}\r\n                                />\r\n                                <div className='subheading'>type</div>\r\n                                <Dropdown\r\n                                    options={catOptions}\r\n                                    selectedID={this.state.monster.category}\r\n                                    select={optionID => this.changeValue('category', optionID)}\r\n                                />\r\n                                <div className='subheading'>subtype</div>\r\n                                <input type='text' value={this.state.monster.tag} onChange={event => this.changeValue('tag', event.target.value)} />\r\n                                <div className='subheading'>alignment</div>\r\n                                <input type='text' value={this.state.monster.alignment} onChange={event => this.changeValue('alignment', event.target.value)} />\r\n                            </div>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>challenge rating</div>\r\n                                <Spin\r\n                                    source={this.state.monster}\r\n                                    name='challenge'\r\n                                    display={value => Utils.challenge(value)}\r\n                                    nudgeValue={delta => this.nudgeValue('challenge', delta)}\r\n                                />\r\n                                <div className='subheading'>speed</div>\r\n                                <input type='text' value={this.state.monster.speed} onChange={event => this.changeValue('speed', event.target.value)} />\r\n                                <div className='subheading'>senses</div>\r\n                                <input type='text' value={this.state.monster.senses} onChange={event => this.changeValue('senses', event.target.value)} />\r\n                                <div className='subheading'>languages</div>\r\n                                <input type='text' value={this.state.monster.languages} onChange={event => this.changeValue('languages', event.target.value)} />\r\n                                <div className='subheading'>equipment</div>\r\n                                <input type='text' value={this.state.monster.equipment} onChange={event => this.changeValue('equipment', event.target.value)} />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                    break;\r\n                case 'abilities':\r\n                    content = (\r\n                        <div className='row'>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>ability scores</div>\r\n                                <AbilityScorePanel\r\n                                    edit={true}\r\n                                    combatant={this.state.monster}\r\n                                    nudgeValue={(source, type, delta) => this.nudgeValue(type, delta)}\r\n                                />\r\n                            </div>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>saving throws</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.savingThrows}\r\n                                    onChange={event => this.changeValue('savingThrows', event.target.value)}\r\n                                />\r\n                                <div className='subheading'>skills</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.skills}\r\n                                    onChange={event => this.changeValue('skills', event.target.value)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                    break;\r\n                case 'cbt-stats':\r\n                    content = (\r\n                        <div className='row'>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>armor class</div>\r\n                                <Spin\r\n                                    source={this.state.monster}\r\n                                    name='ac'\r\n                                    nudgeValue={delta => this.nudgeValue('ac', delta)}\r\n                                />\r\n                                <div className='subheading'>hit dice</div>\r\n                                <Spin\r\n                                    source={this.state.monster}\r\n                                    name='hitDice'\r\n                                    display={value => value + 'd' + Utils.hitDieType(this.state.monster.size)}\r\n                                    nudgeValue={delta => this.nudgeValue('hitDice', delta)}\r\n                                />\r\n                                <div className='subheading'>hit points</div>\r\n                                <div className='hp-value'>{this.state.monster.hpMax} hp</div>\r\n                            </div>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>damage resistances</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.damage.resist}\r\n                                    onChange={event => this.changeValue('damage.resist', event.target.value)}\r\n                                />\r\n                                <div className='subheading'>damage vulnerabilities</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.damage.vulnerable}\r\n                                    onChange={event => this.changeValue('damage.vulnerable', event.target.value)}\r\n                                />\r\n                                <div className='subheading'>damage immunities</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.damage.immune}\r\n                                    onChange={event => this.changeValue('damage.immune', event.target.value)}\r\n                                />\r\n                                <div className='subheading'>condition immunities</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.conditionImmunities}\r\n                                    onChange={event => this.changeValue('conditionImmunities', event.target.value)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                    break;\r\n                case 'actions':\r\n                    content = (\r\n                        <TraitsPanel\r\n                            combatant={this.state.monster}\r\n                            mode='edit'\r\n                            addTrait={type => this.addTrait(type)}\r\n                            removeTrait={trait => this.removeTrait(trait)}\r\n                            swapTraits={(t1, t2) => this.swapTraits(t1, t2)}\r\n                            changeValue={(trait, type, value) => this.changeTrait(trait, type, value)}\r\n                        />\r\n                    );\r\n                    break;\r\n                default:\r\n                    // Do nothing\r\n                    break;\r\n            }\r\n\r\n            let help = null;\r\n            if (this.props.showMonsters && (monsters.length > 1)) {\r\n                let selector = null;\r\n                if (this.getHelpOptionsForPage(this.state.page).length > 1) {\r\n                    const options = this.getHelpOptionsForPage(this.state.page).map(s => {\r\n                        return {\r\n                            id: s,\r\n                            text: s\r\n                        };\r\n                    });\r\n                    selector = (\r\n                        <Selector\r\n                            tabs={false}\r\n                            options={options}\r\n                            selectedID={this.state.helpSection}\r\n                            select={optionID => this.setHelpSection(optionID)}\r\n                        />\r\n                    );\r\n                }\r\n\r\n                help = (\r\n                    <div className='monster-help'>\r\n                        <div className='subheading'>information from similar monsters</div>\r\n                        {selector}\r\n                        {this.getHelpSection(monsters)}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            let monsterList = null;\r\n            if (this.props.showMonsters) {\r\n                let searchBox = null;\r\n                if ((this.state.page === 'actions') && (monsters.length > 0)) {\r\n                    searchBox = (\r\n                        <input\r\n                            type='text'\r\n                            placeholder='search for traits and actions'\r\n                            value={this.state.filter.text}\r\n                            onChange={event => this.setFilterText(event.target.value)}\r\n                        />\r\n                    );\r\n                }\r\n                monsterList = (\r\n                    <div className='columns small-4 medium-4 large-4 scrollable list-column'>\r\n                        {this.getFilterCard(monsters)}\r\n                        {searchBox}\r\n                        {this.getMonsterCards(monsters)}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='row' style={{ height: '100%', margin: '0 -15px' }}>\r\n                    <div\r\n                        className={\r\n                            this.props.showMonsters\r\n                            ? 'columns small-8 medium-8 large-8 scrollable'\r\n                            : 'columns small-12 medium-12 large-12 scrollable'\r\n                        }\r\n                        style={{ transition: 'none' }}\r\n                    >\r\n                        <div className='section'>\r\n                            <Selector\r\n                                tabs={true}\r\n                                options={pages}\r\n                                selectedID={this.state.page}\r\n                                select={optionID => this.setPage(optionID as 'overview' | 'abilities' | 'cbt-stats' | 'actions')}\r\n                            />\r\n                            {content}\r\n                            {help}\r\n                        </div>\r\n                    </div>\r\n                    {monsterList}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Encounter } from '../../models/encounter';\r\nimport { MonsterGroup } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\ninterface Props {\r\n    view: string;\r\n    blur: boolean;\r\n    library: MonsterGroup[];\r\n    parties: Party[];\r\n    encounters: Encounter[];\r\n    setView: (view: string) => void;\r\n}\r\n\r\nexport default class Navbar extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const partiesStyle = this.props.view === 'parties' ? 'navigator-item selected' : 'navigator-item';\r\n            const libraryStyle = this.props.view === 'library' ? 'navigator-item selected' : 'navigator-item';\r\n            let encounterStyle = this.props.view === 'encounter' ? 'navigator-item selected' : 'navigator-item';\r\n            const mapStyle = this.props.view === 'maps' ? 'navigator-item selected' : 'navigator-item';\r\n            let combatStyle = this.props.view === 'combat' ? 'navigator-item selected' : 'navigator-item';\r\n\r\n            const encountersEnabled = this.props.library.length !== 0;\r\n            const combatEnabled = (this.props.parties.length !== 0) && (this.props.encounters.length !== 0);\r\n            if (!encountersEnabled) {\r\n                encounterStyle += ' disabled';\r\n            }\r\n            if (!combatEnabled) {\r\n                combatStyle += ' disabled';\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.blur ? 'navbar blur' : 'navbar'}>\r\n                    <div className={partiesStyle} onClick={() => this.props.setView('parties')}>player characters</div>\r\n                    <div className={libraryStyle} onClick={() => this.props.setView('library')}>monster library</div>\r\n                    <div className={encounterStyle} onClick={() => encountersEnabled ? this.props.setView('encounter') : null}>encounter builder</div>\r\n                    <div className={mapStyle} onClick={() => this.props.setView('maps')}>map folios</div>\r\n                    <div className={combatStyle} onClick={() => combatEnabled ? this.props.setView('combat') : null}>combat manager</div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport cog from '../../resources/images/settings.svg';\r\n\r\ninterface Props {\r\n    actions: JSX.Element | null;\r\n    blur: boolean;\r\n    openHome: () => void;\r\n    openAbout: () => void;\r\n}\r\n\r\nexport default class Titlebar extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div className={this.props.blur ? 'titlebar blur' : 'titlebar'}>\r\n                    <div className='app-name' onClick={() => this.props.openHome()}>dojo</div>\r\n                    {this.props.actions}\r\n                    <img className='settings-icon' src={cog} title='about' alt='about' onClick={() => this.props.openAbout()} />\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Frankenstein from '../../utils/frankenstein';\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Monster, MonsterGroup } from '../../models/monster-group';\r\n\r\nimport FilterCard from '../cards/filter-card';\r\nimport InfoCard from '../cards/info-card';\r\nimport MonsterCard from '../cards/monster-card';\r\n\r\ninterface Props {\r\n    monster: Monster;\r\n    library: MonsterGroup[];\r\n}\r\n\r\ninterface State {\r\n    monster: Monster;\r\n    filter: {\r\n        name: string,\r\n        challengeMin: number;\r\n        challengeMax: number;\r\n        category: string;\r\n        size: string;\r\n    };\r\n    selectedMonsters: Monster[];\r\n}\r\n\r\nexport default class RandomMonsterModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            monster: this.props.monster,\r\n            filter: {\r\n                name: '',\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: 'all types',\r\n                size: 'all sizes'\r\n            },\r\n            selectedMonsters: []\r\n        };\r\n    }\r\n\r\n    private generateMonster() {\r\n        Frankenstein.spliceMonsters(this.state.monster, this.state.selectedMonsters);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private changeFilterValue(type: 'name' | 'challengeMin' | 'challengeMax' | 'category' | 'size', value: any) {\r\n        // eslint-disable-next-line\r\n        this.state.filter[type] = value;\r\n        this.setState({\r\n            filter: this.state.filter\r\n        });\r\n    }\r\n\r\n    private nudgeFilterValue(type: 'challengeMin' | 'challengeMax', delta: number) {\r\n        const value = Utils.nudgeChallenge(this.state.filter[type], delta);\r\n        this.changeFilterValue(type, value);\r\n    }\r\n\r\n    private resetFilter() {\r\n        this.setState({\r\n            filter: {\r\n                name: '',\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: 'all types',\r\n                size: 'all sizes'\r\n            }\r\n        });\r\n    }\r\n\r\n    private matchMonster(monster: Monster) {\r\n        if (monster.challenge < this.state.filter.challengeMin) {\r\n            return false;\r\n        }\r\n\r\n        if (monster.challenge > this.state.filter.challengeMax) {\r\n            return false;\r\n        }\r\n\r\n        if (this.state.filter.name !== '') {\r\n            if (!Utils.match(this.state.filter.name, monster.name)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.filter.category !== 'all types') {\r\n            if (monster.category !== this.state.filter.category) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.filter.size !== 'all sizes') {\r\n            if (monster.size !== this.state.filter.size) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private selectMonster(monster: Monster) {\r\n        this.state.selectedMonsters.push(monster);\r\n        this.state.selectedMonsters.sort((a, b) => {\r\n            if (a.name < b.name) { return -1; }\r\n            if (a.name > b.name) { return 1; }\r\n            return 0;\r\n        });\r\n        this.setState({\r\n            selectedMonsters: this.state.selectedMonsters\r\n        });\r\n    }\r\n\r\n    private deselectMonster(monster: Monster) {\r\n        const index = this.state.selectedMonsters.indexOf(monster);\r\n        this.state.selectedMonsters.splice(index, 1);\r\n        this.setState({\r\n            selectedMonsters: this.state.selectedMonsters\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const monsters: Monster[] = [];\r\n            this.props.library.forEach(group => {\r\n                group.monsters.forEach(monster => {\r\n                    if (this.matchMonster(monster)) {\r\n                        monsters.push(monster);\r\n                    }\r\n                });\r\n            });\r\n            monsters.sort((a, b) => {\r\n                if (a.name < b.name) { return -1; }\r\n                if (a.name > b.name) { return 1; }\r\n                return 0;\r\n            });\r\n            let allMonsters: JSX.Element | JSX.Element[] = monsters.filter(m => !this.state.selectedMonsters.includes(m)).map(m => {\r\n                return (\r\n                    <MonsterCard key={m.id} combatant={m} mode='view candidate' selectMonster={monster => this.selectMonster(monster)} />\r\n                );\r\n            });\r\n            if (allMonsters.length === 0) {\r\n                allMonsters = (\r\n                    <InfoCard\r\n                        getContent={() => (\r\n                            <div className='section'><i>no monsters</i></div>\r\n                        )}\r\n                    />\r\n                );\r\n            }\r\n\r\n            let selectedMonsters: JSX.Element | JSX.Element[] = this.state.selectedMonsters.map(m => {\r\n                return (\r\n                    <MonsterCard key={m.id} combatant={m} mode='view candidate selected' deselectMonster={monster => this.deselectMonster(monster)} />\r\n                );\r\n            });\r\n            if (selectedMonsters.length === 0) {\r\n                selectedMonsters = (\r\n                    <InfoCard\r\n                        getContent={() => (\r\n                            <div className='section'><i>no monsters selected</i></div>\r\n                        )}\r\n                    />\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='random-monster-modal'>\r\n                    <div className='row' style={{ height: '100%' }}>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable'>\r\n                            <div className='heading'>all monsters</div>\r\n                            <FilterCard\r\n                                filter={this.state.filter}\r\n                                changeValue={(type, value) => this.changeFilterValue(type, value)}\r\n                                nudgeValue={(type, delta) => this.nudgeFilterValue(type, delta)}\r\n                                resetFilter={() => this.resetFilter()}\r\n                            />\r\n                            <div className='divider' />\r\n                            {allMonsters}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable'>\r\n                            <div className='heading'>selected monsters</div>\r\n                            <InfoCard\r\n                                getContent={() => (\r\n                                    <div className='section'>\r\n                                        in order to generate a random monster, select at least two source monsters from the list on the left\r\n                                    </div>\r\n                                )}\r\n                            />\r\n                            <button\r\n                                className={this.state.selectedMonsters.length < 2 ? 'disabled' : ''}\r\n                                onClick={() => this.generateMonster()}\r\n                            >\r\n                                randomly generate monster\r\n                            </button>\r\n                            <div className='divider' />\r\n                            {selectedMonsters}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable'>\r\n                            <div className='heading'>output</div>\r\n                            <MonsterCard\r\n                                combatant={this.state.monster}\r\n                                mode='view generated'\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Factory from '../utils/factory';\r\nimport Frankenstein from '../utils/frankenstein';\r\nimport Utils from '../utils/utils';\r\n\r\nimport { Combat, Combatant, CombatSetup, Notification } from '../models/combat';\r\nimport { Condition } from '../models/condition';\r\nimport { Encounter, EncounterSlot, EncounterWave } from '../models/encounter';\r\nimport { Map, MapFolio } from '../models/map-folio';\r\nimport { Monster, MonsterGroup, Trait } from '../models/monster-group';\r\nimport { Party, PC } from '../models/party';\r\n\r\nimport CombatManagerScreen from './screens/combat-manager-screen';\r\nimport EncounterBuilderScreen from './screens/encounter-builder-screen';\r\nimport HomeScreen from './screens/home-screen';\r\nimport MapFoliosScreen from './screens/map-folios-screen';\r\nimport MonsterLibraryScreen from './screens/monster-library-screen';\r\nimport PartiesScreen from './screens/parties-screen';\r\n\r\nimport AboutModal from './modals/about-modal';\r\nimport CombatStartModal from './modals/combat-start-modal';\r\nimport ConditionModal from './modals/condition-modal';\r\nimport DemographicsModal from './modals/demographics-modal';\r\nimport MapEditorModal from './modals/map-editor-modal';\r\nimport MonsterEditorModal from './modals/monster-editor-modal';\r\n\r\nimport Navbar from './panels/navbar';\r\nimport Titlebar from './panels/titlebar';\r\n\r\nimport Checkbox from './controls/checkbox';\r\n\r\nimport close from '../resources/images/close-black.svg';\r\nimport RandomMonsterModal from './modals/random-monster-modal';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    // No props; this is the root component\r\n}\r\n\r\ninterface State {\r\n    view: string;\r\n    options: {\r\n        showHelp: boolean;\r\n    };\r\n\r\n    parties: Party[];\r\n    library: MonsterGroup[];\r\n    encounters: Encounter[];\r\n    mapFolios: MapFolio[];\r\n    combats: Combat[];\r\n\r\n    selectedPartyID: string | null;\r\n    selectedMonsterGroupID: string | null;\r\n    selectedEncounterID: string | null;\r\n    selectedMapFolioID: string | null;\r\n    selectedCombatID: string | null;\r\n\r\n    modal: any;\r\n\r\n    filter: string;\r\n}\r\n\r\nexport default class Dojo extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            view: 'home',\r\n            options: {\r\n                showHelp: true\r\n            },\r\n            parties: [],\r\n            library: [],\r\n            encounters: [],\r\n            mapFolios: [],\r\n            combats: [],\r\n            selectedPartyID: null,\r\n            selectedMonsterGroupID: null,\r\n            selectedEncounterID: null,\r\n            selectedMapFolioID: null,\r\n            selectedCombatID: null,\r\n            modal: null,\r\n            filter: ''\r\n        };\r\n\r\n        try {\r\n            let data: State | null = null;\r\n\r\n            try {\r\n                const json = window.localStorage.getItem('data');\r\n                if (json) {\r\n                    data = JSON.parse(json);\r\n                }\r\n            } catch (ex) {\r\n                console.error('Could not parse JSON: ', ex);\r\n                data = null;\r\n            }\r\n\r\n            if (data !== null) {\r\n                data.library.forEach(g => {\r\n                    g.monsters.forEach(m => {\r\n                        m.traits.forEach(t => {\r\n                            t.uses = 0;\r\n                        });\r\n                    });\r\n                });\r\n\r\n                data.encounters.forEach(enc => {\r\n                    if (!enc.waves) {\r\n                        enc.waves = [];\r\n                    }\r\n                });\r\n\r\n                if (!data.mapFolios) {\r\n                    data.mapFolios = [];\r\n                    data.selectedMapFolioID = null;\r\n                }\r\n\r\n                data.combats.forEach(combat => {\r\n                    if (!combat.notifications) {\r\n                        combat.notifications = [];\r\n                    }\r\n                    combat.combatants.forEach(c => {\r\n                        if (c.altitude === undefined) {\r\n                            c.altitude = 0;\r\n                        }\r\n\r\n                        if (c.type === 'monster') {\r\n                            const m = c as Combatant & Monster;\r\n                            m.traits.forEach(t => {\r\n                                if (t.uses === undefined) {\r\n                                    t.uses = 0;\r\n                                }\r\n                            });\r\n                        }\r\n                    });\r\n                });\r\n\r\n                data.view = 'home';\r\n                data.modal = null;\r\n                data.filter = '';\r\n\r\n                this.state = data;\r\n            }\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n\r\n    public componentDidUpdate() {\r\n        let json = null;\r\n        try {\r\n            json = JSON.stringify(this.state);\r\n        } catch (ex) {\r\n            console.error('Could not stringify data: ', ex);\r\n            json = null;\r\n        }\r\n\r\n        if (json !== null) {\r\n            window.localStorage.setItem('data', json);\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Party screen\r\n\r\n    private addParty() {\r\n        const party = Factory.createParty();\r\n        party.name = 'new party';\r\n        const parties: Party[] = ([] as Party[]).concat(this.state.parties, [party]);\r\n        Utils.sort(parties);\r\n        this.setState({\r\n            parties: parties,\r\n            selectedPartyID: party.id\r\n        });\r\n    }\r\n\r\n    private removeParty() {\r\n        const party = this.state.parties.find(p => p.id === this.state.selectedPartyID);\r\n        if (party) {\r\n            const index = this.state.parties.indexOf(party);\r\n            this.state.parties.splice(index, 1);\r\n            this.setState({\r\n                parties: this.state.parties,\r\n                selectedPartyID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private addPC() {\r\n        const party = this.state.parties.find(p => p.id === this.state.selectedPartyID);\r\n        if (party) {\r\n            const pc = Factory.createPC();\r\n            pc.name = 'new pc';\r\n            party.pcs.push(pc);\r\n            this.setState({\r\n                parties: this.state.parties\r\n            });\r\n        }\r\n    }\r\n\r\n    private removePC(pc: PC) {\r\n        const party = this.state.parties.find(p => p.id === this.state.selectedPartyID);\r\n        if (party) {\r\n            const index = party.pcs.indexOf(pc);\r\n            party.pcs.splice(index, 1);\r\n            this.setState({\r\n                parties: this.state.parties\r\n            });\r\n        }\r\n    }\r\n\r\n    private sortPCs() {\r\n        const party = this.state.parties.find(p => p.id === this.state.selectedPartyID);\r\n        if (party) {\r\n            Utils.sort(party.pcs);\r\n            this.setState({\r\n                parties: this.state.parties\r\n            });\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Library screen\r\n\r\n    private addMonsterGroup() {\r\n        const group = Factory.createMonsterGroup();\r\n        group.name = 'new group';\r\n        const library = ([] as MonsterGroup[]).concat(this.state.library, [group]);\r\n        Utils.sort(library);\r\n        this.setState({\r\n            library: library,\r\n            selectedMonsterGroupID: group.id\r\n        });\r\n    }\r\n\r\n    private removeMonsterGroup() {\r\n        const group = this.state.library.find(g => g.id === this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            const index = this.state.library.indexOf(group);\r\n            this.state.library.splice(index, 1);\r\n            this.setState({\r\n                library: this.state.library,\r\n                selectedMonsterGroupID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private addMonster() {\r\n        const monster = Factory.createMonster();\r\n        monster.name = 'new monster';\r\n        const group = this.state.library.find(g => g.id === this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            group.monsters.push(monster);\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    private generateMonster() {\r\n        const monster = Factory.createMonster();\r\n        monster.name = 'generated monster';\r\n        this.setState({\r\n            modal: {\r\n                type: 'random-monster',\r\n                monster: monster\r\n            }\r\n        });\r\n    }\r\n\r\n    private removeMonster(monster: Monster) {\r\n        const group = this.state.library.find(g => g.id === this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            const index = group.monsters.indexOf(monster);\r\n            group.monsters.splice(index, 1);\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    private sortMonsters() {\r\n        const group = this.state.library.find(g => g.id === this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            Utils.sort(group.monsters);\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    private moveToGroup(monster: Monster, groupID: string) {\r\n        const sourceGroup = this.state.library.find(group => group.monsters.includes(monster));\r\n        if (sourceGroup) {\r\n            const index = sourceGroup.monsters.indexOf(monster);\r\n            sourceGroup.monsters.splice(index, 1);\r\n\r\n            const group = this.state.library.find(g => g.id === groupID);\r\n            if (group) {\r\n                group.monsters.push(monster);\r\n                Utils.sort(group.monsters);\r\n\r\n                this.setState({\r\n                    library: this.state.library\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private editMonster(monster: Monster) {\r\n        const copy = JSON.parse(JSON.stringify(monster));\r\n        this.setState({\r\n            modal: {\r\n                type: 'monster',\r\n                monster: copy,\r\n                showMonsters: false\r\n            }\r\n        });\r\n    }\r\n\r\n    private saveMonster() {\r\n        const group = this.state.library.find(g => g.id === this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            const original = group.monsters.find(m => m.id === this.state.modal.monster.id);\r\n            if (original) {\r\n                // We are editing a monster\r\n                const index = group.monsters.indexOf(original);\r\n                group.monsters[index] = this.state.modal.monster;\r\n                this.setState({\r\n                    library: this.state.library,\r\n                    modal: null\r\n                });\r\n            } else {\r\n                // We are adding a new monster\r\n                group.monsters.push(this.state.modal.monster);\r\n                this.setState({\r\n                    library: this.state.library,\r\n                    modal: null\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private toggleShowSimilarMonsters() {\r\n        // eslint-disable-next-line\r\n        this.state.modal.showMonsters = !this.state.modal.showMonsters;\r\n        this.setState({\r\n            modal: this.state.modal\r\n        });\r\n    }\r\n\r\n    private openDemographics() {\r\n        this.setState({\r\n            modal: {\r\n                type: 'demographics'\r\n            }\r\n        });\r\n    }\r\n\r\n    private cloneMonster(monster: Monster, name: string) {\r\n        const group = this.state.library.find(g => g.monsters.includes(monster));\r\n        if (group) {\r\n            const clone = Frankenstein.clone(monster, name);\r\n            group.monsters.push(clone);\r\n            Utils.sort(group.monsters);\r\n\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    private addOpenGameContent() {\r\n        fetch('./data/monsters.json')\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                json.forEach((data: any) => {\r\n                    try {\r\n                        if (data.name) {\r\n                            const monster = Frankenstein.createFromJSON(data);\r\n\r\n                            let groupName = monster.tag || monster.category;\r\n                            if (groupName.indexOf('swarm') === 0) {\r\n                                groupName = 'swarm';\r\n                            }\r\n                            if (groupName === 'any race') {\r\n                                groupName = 'npc';\r\n                            }\r\n\r\n                            let group = this.state.library.find(p => p.name === groupName);\r\n                            if (!group) {\r\n                                group = {\r\n                                    id: Utils.guid(),\r\n                                    name: groupName,\r\n                                    monsters: []\r\n                                };\r\n                                this.state.library.push(group);\r\n                            }\r\n                            group.monsters.push(monster);\r\n                        }\r\n                    } catch (e) {\r\n                        console.error(e);\r\n                    }\r\n                });\r\n\r\n                Utils.sort(this.state.library);\r\n\r\n                this.setState({\r\n                    view: 'library',\r\n                    library: this.state.library\r\n                });\r\n            });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Encounter screen\r\n\r\n    private addEncounter() {\r\n        const encounter = Factory.createEncounter();\r\n        encounter.name = 'new encounter';\r\n        const encounters = ([] as Encounter[]).concat(this.state.encounters, [encounter]);\r\n        Utils.sort(encounters);\r\n\r\n        this.setState({\r\n            encounters: encounters,\r\n            selectedEncounterID: encounter.id\r\n        });\r\n    }\r\n\r\n    private removeEncounter() {\r\n        const encounter = this.state.encounters.find(e => e.id === this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            const index = this.state.encounters.indexOf(encounter);\r\n            this.state.encounters.splice(index, 1);\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters,\r\n                selectedEncounterID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private addEncounterSlot(monster: Monster, waveID: string | null) {\r\n        const group = this.state.library.find(g => g.monsters.includes(monster));\r\n        if (group) {\r\n            const slot = Factory.createEncounterSlot();\r\n            slot.monsterGroupName = group.name;\r\n            slot.monsterName = monster.name;\r\n            const encounter = this.state.encounters.find(e => e.id === this.state.selectedEncounterID);\r\n            if (encounter) {\r\n                if (waveID !== null) {\r\n                    const wave = encounter.waves.find(w => w.id === waveID);\r\n                    if (wave) {\r\n                        wave.slots.push(slot);\r\n                        this.sortEncounterSlots(wave);\r\n                    }\r\n                } else {\r\n                    encounter.slots.push(slot);\r\n                    this.sortEncounterSlots(encounter);\r\n                }\r\n\r\n                this.setState({\r\n                    encounters: this.state.encounters\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeEncounterSlot(slot: EncounterSlot, waveID: string | null) {\r\n        const encounter = this.state.encounters.find(e => e.id === this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            if (waveID) {\r\n                const wave = encounter.waves.find(w => w.id === waveID);\r\n                if (wave) {\r\n                    const index = wave.slots.indexOf(slot);\r\n                    wave.slots.splice(index, 1);\r\n                }\r\n            } else {\r\n                const n = encounter.slots.indexOf(slot);\r\n                encounter.slots.splice(n, 1);\r\n            }\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters\r\n            });\r\n        }\r\n    }\r\n\r\n    private sortEncounterSlots(slotContainer: { slots: EncounterSlot[] }) {\r\n        slotContainer.slots.sort((a, b) => {\r\n            const aName = a.monsterName.toLowerCase();\r\n            const bName = b.monsterName.toLowerCase();\r\n            if (aName < bName) { return -1; }\r\n            if (aName > bName) { return 1; }\r\n            return 0;\r\n        });\r\n    }\r\n\r\n    private addWaveToEncounter() {\r\n        const encounter = this.state.encounters.find(e => e.id === this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            const wave = Factory.createEncounterWave();\r\n            wave.name = 'wave ' + (encounter.waves.length + 2);\r\n            encounter.waves.push(wave);\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters\r\n            });\r\n        }\r\n    }\r\n\r\n    private removeWave(wave: EncounterWave) {\r\n        const encounter = this.state.encounters.find(e => e.id === this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            const index = encounter.waves.indexOf(wave);\r\n            encounter.waves.splice(index, 1);\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters\r\n            });\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Map screen\r\n\r\n    private addMapFolio() {\r\n        const folio = Factory.createMapFolio();\r\n        folio.name = 'new folio';\r\n        const folios = ([] as MapFolio[]).concat(this.state.mapFolios, [folio]);\r\n        Utils.sort(folios);\r\n\r\n        this.setState({\r\n            mapFolios: folios,\r\n            selectedMapFolioID: folio.id\r\n        });\r\n    }\r\n\r\n    private removeMapFolio() {\r\n        const folio = this.state.mapFolios.find(f => f.id === this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            const index = this.state.mapFolios.indexOf(folio);\r\n            this.state.mapFolios.splice(index, 1);\r\n\r\n            this.setState({\r\n                mapFolios: this.state.mapFolios,\r\n                selectedMapFolioID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private addMap() {\r\n        const folio = this.state.mapFolios.find(f => f.id === this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            const map = Factory.createMap();\r\n            map.name = 'new map';\r\n            folio.maps.push(map);\r\n\r\n            this.setState({\r\n                mapFolios: this.state.mapFolios\r\n            });\r\n        }\r\n    }\r\n\r\n    private editMap(map: Map) {\r\n        const copy = JSON.parse(JSON.stringify(map));\r\n        this.setState({\r\n            modal: {\r\n                type: 'map',\r\n                map: copy\r\n            }\r\n        });\r\n    }\r\n\r\n    private saveMap() {\r\n        const folio = this.state.mapFolios.find(f => f.id === this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            const original = folio.maps.find(m => m.id === this.state.modal.map.id);\r\n            if (original) {\r\n                const index = folio.maps.indexOf(original);\r\n                folio.maps[index] = this.state.modal.map;\r\n                this.setState({\r\n                    mapFolios: this.state.mapFolios,\r\n                    modal: null\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeMap(map: Map) {\r\n        const folio = this.state.mapFolios.find(f => f.id === this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            const index = folio.maps.indexOf(map);\r\n            folio.maps.splice(index, 1);\r\n            this.setState({\r\n                mapFolios: this.state.mapFolios\r\n            });\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Combat screen\r\n\r\n    private createCombat() {\r\n        const party = this.state.parties.length === 1 ? this.state.parties[0] : null;\r\n        const encounter = this.state.encounters.length === 1 ? this.state.encounters[0] : null;\r\n\r\n        const setup = Factory.createCombatSetup();\r\n        setup.partyID = party ? party.id : null;\r\n        setup.encounterID = encounter ? encounter.id : null;\r\n        if (encounter) {\r\n            setup.monsterNames = Utils.getMonsterNames(encounter);\r\n        }\r\n\r\n        this.setState({\r\n            modal: {\r\n                type: 'combat-start',\r\n                combatSetup: setup\r\n            }\r\n        });\r\n    }\r\n\r\n    private startCombat() {\r\n        const combatSetup: CombatSetup = this.state.modal.combatSetup;\r\n        const party = this.state.parties.find(p => p.id === combatSetup.partyID);\r\n        const encounter = this.state.encounters.find(e => e.id === combatSetup.encounterID);\r\n        if (party && encounter) {\r\n            const partyName = party.name || 'unnamed party';\r\n            const encounterName = encounter.name || 'unnamed encounter';\r\n\r\n            const combat = Factory.createCombat();\r\n            combat.name = partyName + ' vs ' + encounterName;\r\n            combat.encounterID = encounter.id;\r\n\r\n            // Add a copy of each PC to the encounter\r\n            party.pcs.filter(pc => pc.active).forEach(pc => {\r\n                const combatant = JSON.parse(JSON.stringify(pc));\r\n\r\n                combatant.current = false;\r\n                combatant.pending = true;\r\n                combatant.active = false;\r\n                combatant.defeated = false;\r\n\r\n                combatant.displayName = pc.name;\r\n                combatant.initiative = 10;\r\n                combatant.hp = null;\r\n                combatant.conditions = [];\r\n                combatant.altitude = 0;\r\n\r\n                combat.combatants.push(combatant);\r\n            });\r\n\r\n            encounter.slots.forEach(slot => {\r\n                const monster = this.getMonster(slot.monsterName, slot.monsterGroupName);\r\n                if (monster) {\r\n                    const init = parseInt(Utils.modifier(monster.abilityScores.dex), 10);\r\n                    const groupRoll = Utils.dieRoll();\r\n\r\n                    for (let n = 0; n !== slot.count; ++n) {\r\n                        const singleRoll = Utils.dieRoll();\r\n\r\n                        const combatant = JSON.parse(JSON.stringify(monster));\r\n                        combatant.id = Utils.guid();\r\n\r\n                        combatant.displayName = null;\r\n                        if (combatSetup.monsterNames) {\r\n                            const slotNames = combatSetup.monsterNames.find(names => names.id === slot.id);\r\n                            if (slotNames) {\r\n                                combatant.displayName = slotNames.names[n];\r\n                            }\r\n                        }\r\n\r\n                        switch (combatSetup.encounterInitMode) {\r\n                            case 'manual':\r\n                                combatant.initiative = 10;\r\n                                break;\r\n                            case 'group':\r\n                                combatant.initiative = init + groupRoll;\r\n                                break;\r\n                            case 'individual':\r\n                                combatant.initiative = init + singleRoll;\r\n                                break;\r\n                            default:\r\n                                // Do nothing\r\n                                break;\r\n                        }\r\n\r\n                        combatant.current = false;\r\n                        combatant.pending = (combatSetup.encounterInitMode === 'manual');\r\n                        combatant.active = (combatSetup.encounterInitMode !== 'manual');\r\n                        combatant.defeated = false;\r\n\r\n                        combatant.hp = combatant.hpMax;\r\n                        combatant.conditions = [];\r\n                        combatant.altitude = 0;\r\n\r\n                        combat.combatants.push(combatant);\r\n                    }\r\n                } else {\r\n                    combat.issues.push('unknown monster: ' + slot.monsterName + ' in group ' + slot.monsterGroupName);\r\n                }\r\n            });\r\n\r\n            combat.combatants.forEach(c => c.altitude = 0);\r\n\r\n            this.sortCombatants(combat);\r\n\r\n            if (combatSetup.folioID && combatSetup.mapID) {\r\n                const folio = this.state.mapFolios.find(f => f.id === combatSetup.folioID);\r\n                if (folio) {\r\n                    const map = folio.maps.find(m => m.id === combatSetup.mapID);\r\n                    if (map) {\r\n                        combat.map = JSON.parse(JSON.stringify(map));\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.setState({\r\n                combats: ([] as Combat[]).concat(this.state.combats, [combat]),\r\n                selectedCombatID: combat.id,\r\n                modal: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private openWaveModal() {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            const encounter = this.state.encounters.find(e => e.id === combat.encounterID);\r\n            if (encounter) {\r\n                const setup = Factory.createCombatSetup();\r\n                setup.encounterID = combat.encounterID;\r\n                setup.monsterNames = Utils.getMonsterNames(encounter);\r\n\r\n                this.setState({\r\n                    modal: {\r\n                        type: 'combat-wave',\r\n                        combatSetup: setup\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private pauseCombat() {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            combat.timestamp = new Date().toLocaleString();\r\n            this.setState({\r\n                combats: this.state.combats,\r\n                selectedCombatID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private resumeCombat(combat: Combat) {\r\n        this.setState({\r\n            selectedCombatID: combat.id\r\n        });\r\n    }\r\n\r\n    private endCombat() {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            const index = this.state.combats.indexOf(combat);\r\n            this.state.combats.splice(index, 1);\r\n            this.setState({\r\n                combats: this.state.combats,\r\n                selectedCombatID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private makeCurrent(combatant: (Combatant & PC) | (Combatant & Monster) | null, newRound: boolean) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            // Handle start-of-turn conditions\r\n            combat.combatants.filter(actor => actor.conditions).forEach(actor => {\r\n                actor.conditions.forEach(c => {\r\n                    if (c.duration) {\r\n                        switch (c.duration.type) {\r\n                            case 'saves':\r\n                                // If it's my condition, and point is START, notify the user\r\n                                if (combat && combatant && (actor.id === combatant.id) && (c.duration.point === 'start')) {\r\n                                    combat.notifications.push({\r\n                                        id: Utils.guid(),\r\n                                        type: 'condition-save',\r\n                                        data: c,\r\n                                        combatant: combatant as Combatant & Monster\r\n                                    });\r\n                                }\r\n                                break;\r\n                            case 'combatant':\r\n                                // If this refers to me, and point is START, remove it\r\n                                if (combat && combatant && (c.duration.combatantID === combatant.id) && (c.duration.point === 'start')) {\r\n                                    const index = actor.conditions.indexOf(c);\r\n                                    actor.conditions.splice(index, 1);\r\n                                    // Notify the user\r\n                                    combat.notifications.push({\r\n                                        id: Utils.guid(),\r\n                                        type: 'condition-end',\r\n                                        data: c,\r\n                                        combatant: combatant as Combatant & Monster\r\n                                    });\r\n                                }\r\n                                break;\r\n                            case 'rounds':\r\n                                // If it's my condition, decrement the condition\r\n                                if (combatant && (actor.id === combatant.id)) {\r\n                                    c.duration.count -= 1;\r\n                                }\r\n                                // If it's now at 0, remove it\r\n                                if (c.duration.count === 0) {\r\n                                    const n = actor.conditions.indexOf(c);\r\n                                    actor.conditions.splice(n, 1);\r\n                                    if (combat) {\r\n                                        // Notify the user\r\n                                        combat.notifications.push({\r\n                                            id: Utils.guid(),\r\n                                            type: 'condition-end',\r\n                                            data: c,\r\n                                            combatant: combatant as Combatant & Monster\r\n                                        });\r\n                                    }\r\n                                }\r\n                                break;\r\n                            default:\r\n                                // Do nothing\r\n                                break;\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n\r\n            // Handle recharging traits\r\n            if (combatant && (combatant.type === 'monster')) {\r\n                (combatant as Monster).traits\r\n                    .filter(t => (t.uses > 0) && t.usage.toLowerCase().startsWith('recharge '))\r\n                    .forEach(t => {\r\n                        combat.notifications.push({\r\n                            id: Utils.guid(),\r\n                            type: 'trait-recharge',\r\n                            data: t,\r\n                            combatant: combatant as Combatant & Monster\r\n                        });\r\n                    });\r\n            }\r\n\r\n            combat.combatants.forEach(c => {\r\n                c.current = false;\r\n            });\r\n            if (combatant) {\r\n                combatant.current = true;\r\n            }\r\n\r\n            if (newRound) {\r\n                combat.round += 1;\r\n            }\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private makeActive(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            combatant.pending = false;\r\n            combatant.active = true;\r\n            combatant.defeated = false;\r\n\r\n            this.sortCombatants(combat);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private makeDefeated(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        combatant.pending = false;\r\n        combatant.active = false;\r\n        combatant.defeated = true;\r\n\r\n        if (combatant.current) {\r\n            this.endTurn(combatant);\r\n        } else {\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private addWaveToCombat() {\r\n        const combatSetup: CombatSetup = this.state.modal.combatSetup;\r\n        const encounter = this.state.encounters.find(e => e.id === combatSetup.encounterID);\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combatSetup && encounter && combat) {\r\n            const wave = encounter.waves.find(w => w.id === combatSetup.waveID);\r\n            if (wave) {\r\n                wave.slots.forEach(slot => {\r\n                    const monster = this.getMonster(slot.monsterName, slot.monsterGroupName);\r\n                    if (monster) {\r\n                        const init = parseInt(Utils.modifier(monster.abilityScores.dex), 10);\r\n                        const groupRoll = Utils.dieRoll();\r\n\r\n                        for (let n = 0; n !== slot.count; ++n) {\r\n                            const singleRoll = Utils.dieRoll();\r\n\r\n                            const combatant = JSON.parse(JSON.stringify(monster));\r\n                            combatant.id = Utils.guid();\r\n\r\n                            combatant.displayName = null;\r\n                            if (combatSetup.monsterNames) {\r\n                                const slotNames = combatSetup.monsterNames.find(names => names.id === slot.id);\r\n                                if (slotNames) {\r\n                                    combatant.displayName = slotNames.names[n];\r\n                                }\r\n                            }\r\n\r\n                            switch (combatSetup.encounterInitMode) {\r\n                                case 'manual':\r\n                                    combatant.initiative = 10;\r\n                                    break;\r\n                                case 'group':\r\n                                    combatant.initiative = init + groupRoll;\r\n                                    break;\r\n                                case 'individual':\r\n                                    combatant.initiative = init + singleRoll;\r\n                                    break;\r\n                                default:\r\n                                    // Do nothing\r\n                                    break;\r\n                            }\r\n\r\n                            combatant.current = false;\r\n                            combatant.pending = (this.state.modal.combatSetup.encounterInitMode === 'manual');\r\n                            combatant.active = (this.state.modal.combatSetup.encounterInitMode !== 'manual');\r\n                            combatant.defeated = false;\r\n\r\n                            combatant.hp = combatant.hpMax;\r\n                            combatant.conditions = [];\r\n\r\n                            if (combat) {\r\n                                combat.combatants.push(combatant);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (combat) {\r\n                            const issue = 'unknown monster: ' + slot.monsterName + ' in group ' + slot.monsterGroupName;\r\n                            combat.issues.push(issue);\r\n                        }\r\n                    }\r\n                });\r\n\r\n                this.sortCombatants(combat);\r\n\r\n                this.setState({\r\n                    combats: this.state.combats,\r\n                    modal: null\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeCombatant(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            const index = combat.combatants.indexOf(combatant);\r\n            combat.combatants.splice(index, 1);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private mapAdd(combatant: ((Combatant & PC) | (Combatant & Monster)), x: number, y: number) {\r\n        const item = Factory.createMapItem();\r\n        item.id = combatant.id;\r\n        item.type = combatant.type as 'pc' | 'monster';\r\n        item.x = x;\r\n        item.y = y;\r\n        let size = 1;\r\n        if (combatant.type === 'monster') {\r\n            size = Utils.miniSize((combatant as Monster).size);\r\n        }\r\n        item.height = size;\r\n        item.width = size;\r\n\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat && combat.map) {\r\n            combat.map.items.push(item);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private mapMove(combatant: (Combatant & PC) | (Combatant & Monster), dir: string) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat && combat.map) {\r\n            const item = combat.map.items.find(i => i.id === combatant.id);\r\n            if (item) {\r\n                switch (dir) {\r\n                    case 'N':\r\n                        item.y -= 1;\r\n                        break;\r\n                    case 'NE':\r\n                        item.x += 1;\r\n                        item.y -= 1;\r\n                        break;\r\n                    case 'E':\r\n                        item.x += 1;\r\n                        break;\r\n                    case 'SE':\r\n                        item.x += 1;\r\n                        item.y += 1;\r\n                        break;\r\n                    case 'S':\r\n                        item.y += 1;\r\n                        break;\r\n                    case 'SW':\r\n                        item.x -= 1;\r\n                        item.y += 1;\r\n                        break;\r\n                    case 'W':\r\n                        item.x -= 1;\r\n                        break;\r\n                    case 'NW':\r\n                        item.x -= 1;\r\n                        item.y -= 1;\r\n                        break;\r\n                    default:\r\n                        // Do nothing\r\n                        break;\r\n                }\r\n\r\n                this.setState({\r\n                    combats: this.state.combats\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private mapRemove(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat && combat.map) {\r\n            const item = combat.map.items.find(i => i.id === combatant.id);\r\n            if (item) {\r\n                const index = combat.map.items.indexOf(item);\r\n                combat.map.items.splice(index, 1);\r\n\r\n                this.setState({\r\n                    combats: this.state.combats\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private endTurn(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            // Handle end-of-turn conditions\r\n            combat.combatants.filter(actor => actor.conditions).forEach(actor => {\r\n                actor.conditions.forEach(c => {\r\n                    if (c.duration) {\r\n                        switch (c.duration.type) {\r\n                            case 'saves':\r\n                                // If it's my condition, and point is END, notify the user\r\n                                if (combat && (actor.id === combatant.id) && (c.duration.point === 'end')) {\r\n                                    const saveNotification = Factory.createNotification();\r\n                                    saveNotification.type = 'condition-save';\r\n                                    saveNotification.data = c;\r\n                                    saveNotification.combatant = combatant as Combatant & Monster;\r\n                                    combat.notifications.push(saveNotification);\r\n                                }\r\n                                break;\r\n                            case 'combatant':\r\n                                // If this refers to me, and point is END, remove it\r\n                                if (combat && (c.duration.combatantID === combatant.id) && (c.duration.point === 'end')) {\r\n                                    const n = actor.conditions.indexOf(c);\r\n                                    actor.conditions.splice(n, 1);\r\n                                    // Notify the user\r\n                                    const endNotification = Factory.createNotification();\r\n                                    endNotification.type = 'condition-end';\r\n                                    endNotification.data = c;\r\n                                    endNotification.combatant = combatant as Combatant & Monster;\r\n                                    combat.notifications.push(endNotification);\r\n                                }\r\n                                break;\r\n                            case 'rounds':\r\n                                // We check this at the beginning of each turn, not at the end\r\n                                break;\r\n                            default:\r\n                                // Do nothing\r\n                                break;\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n\r\n            const active = combat.combatants.filter(c => {\r\n                return c.current || (!c.pending && c.active && !c.defeated);\r\n            });\r\n            if (active.length === 0) {\r\n                // There's no-one left in the fight\r\n                this.makeCurrent(null, false);\r\n            } else if ((active.length === 1) && (active[0].defeated)) {\r\n                // The only person in the fight is me, and I'm defeated\r\n                this.makeCurrent(null, false);\r\n            } else {\r\n                let index = active.indexOf(combatant) + 1;\r\n                let newRound = false;\r\n                if (index >= active.length) {\r\n                    index = 0;\r\n                    newRound = true;\r\n                }\r\n                this.makeCurrent(active[index], newRound);\r\n            }\r\n        }\r\n    }\r\n\r\n    private changeHP(combatant: Combatant & Monster, hp: number, temp: number) {\r\n        combatant.hp = hp;\r\n        combatant.hpTemp = temp;\r\n\r\n        this.setState({\r\n            combats: this.state.combats\r\n        });\r\n    }\r\n\r\n    private addCondition(combatant: Combatant & Monster) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            const condition = Factory.createCondition();\r\n            condition.name = 'blinded';\r\n\r\n            this.setState({\r\n                modal: {\r\n                    type: 'condition-add',\r\n                    condition: condition,\r\n                    combatant: combatant,\r\n                    combat: combat\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private addConditionFromModal() {\r\n        this.state.modal.combatant.conditions.push(this.state.modal.condition);\r\n\r\n        this.setState({\r\n            combats: this.state.combats,\r\n            modal: null\r\n        });\r\n    }\r\n\r\n    private editCondition(combatant: Combatant & Monster, condition: Condition) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            this.setState({\r\n                modal: {\r\n                    type: 'condition-edit',\r\n                    condition: condition,\r\n                    combatant: combatant,\r\n                    combat: combat\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private editConditionFromModal() {\r\n        const conditions: Condition[] = this.state.modal.combatant.conditions;\r\n        const original = conditions.find(c => c.id === this.state.modal.condition.id);\r\n        if (original) {\r\n            const index = conditions.indexOf(original);\r\n            // eslint-disable-next-line\r\n            conditions[index] = this.state.modal.condition;\r\n\r\n            this.setState({\r\n                combats: this.state.combats,\r\n                modal: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private removeCondition(combatant: Combatant & Monster, conditionID: string) {\r\n        const condition = combatant.conditions.find(c => c.id === conditionID);\r\n        if (condition) {\r\n            const index = combatant.conditions.indexOf(condition);\r\n            combatant.conditions.splice(index, 1);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private sortCombatants(combat: Combat) {\r\n        combat.combatants.sort((a, b) => {\r\n            // First sort by initiative, descending\r\n            if (a.initiative && b.initiative && (a.initiative < b.initiative)) { return 1; }\r\n            if (a.initiative && b.initiative && (a.initiative > b.initiative)) { return -1; }\r\n            // Then sort by name, ascending\r\n            if (a.name < b.name) { return -1; }\r\n            if (a.name > b.name) { return 1; }\r\n            return 0;\r\n        });\r\n    }\r\n\r\n    private closeNotification(notification: Notification, removeCondition: boolean) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            const index = combat.notifications.indexOf(notification);\r\n            combat.notifications.splice(index, 1);\r\n\r\n            if (removeCondition && notification.combatant && notification.data) {\r\n                const conditionIndex = notification.combatant.conditions.indexOf(notification.data as Condition);\r\n                notification.combatant.conditions.splice(conditionIndex, 1);\r\n            }\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    private setView(view: string) {\r\n        this.setState({\r\n            view: view\r\n        });\r\n    }\r\n\r\n    private openAbout() {\r\n        this.setState({\r\n            modal: {\r\n                type: 'about'\r\n            }\r\n        });\r\n    }\r\n\r\n    private closeModal() {\r\n        this.setState({\r\n            modal: null\r\n        });\r\n    }\r\n\r\n    private selectParty(party: Party | null) {\r\n        this.setState({\r\n            selectedPartyID: party ? party.id : null\r\n        });\r\n    }\r\n\r\n    private selectMonsterGroup(group: MonsterGroup | null) {\r\n        this.setState({\r\n            selectedMonsterGroupID: group ? group.id : null\r\n        });\r\n    }\r\n\r\n    private selectEncounter(encounter: Encounter | null) {\r\n        this.setState({\r\n            selectedEncounterID: encounter ? encounter.id : null\r\n        });\r\n    }\r\n\r\n    private selectMapFolio(mapFolio: MapFolio | null) {\r\n        this.setState({\r\n            selectedMapFolioID: mapFolio ? mapFolio.id : null\r\n        });\r\n    }\r\n\r\n    private resetAll() {\r\n        this.setState({\r\n            parties: [],\r\n            selectedPartyID: null,\r\n            library: [],\r\n            selectedMonsterGroupID: null,\r\n            encounters: [],\r\n            selectedEncounterID: null,\r\n            mapFolios: [],\r\n            selectedMapFolioID: null,\r\n            combats: [],\r\n            selectedCombatID: null\r\n        });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    private getMonster(monsterName: string, groupName: string) {\r\n        const group = this.state.library.find(p => p.name === groupName);\r\n        if (group) {\r\n            return group.monsters.find(monster => monster.name === monsterName);\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    private changeValue(combatant: any, type: string, value: any) {\r\n        switch (type) {\r\n            case 'hp':\r\n                value = Math.min(value, combatant.hpMax);\r\n                value = Math.max(value, 0);\r\n                break;\r\n            case 'hpTemp':\r\n                value = Math.max(value, 0);\r\n                break;\r\n            case 'level':\r\n                value = Math.max(value, 1);\r\n                value = (combatant.player !== undefined) ? Math.min(value, 20) : Math.min(value, 6);\r\n                break;\r\n            case 'count':\r\n                value = Math.max(value, 1);\r\n                break;\r\n            case 'hitDice':\r\n                value = Math.max(value, 1);\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        const tokens = type.split('.');\r\n        let obj = combatant;\r\n        for (let n = 0; n !== tokens.length; ++n) {\r\n            const token = tokens[n];\r\n            if (n === tokens.length - 1) {\r\n                obj[token] = value;\r\n            } else {\r\n                obj = obj[token];\r\n            }\r\n        }\r\n\r\n        Utils.sort(this.state.parties);\r\n        Utils.sort(this.state.library);\r\n        Utils.sort(this.state.encounters);\r\n\r\n        if (type === 'initiative') {\r\n            if (!(combatant as Combatant).pending) {\r\n                const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n                this.sortCombatants(combat as Combat);\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            parties: this.state.parties,\r\n            library: this.state.library,\r\n            encounters: this.state.encounters,\r\n            combats: this.state.combats,\r\n            selectedPartyID: this.state.selectedPartyID,\r\n            selectedMonsterGroupID: this.state.selectedMonsterGroupID,\r\n            selectedEncounterID: this.state.selectedEncounterID,\r\n            selectedCombatID: this.state.selectedCombatID,\r\n            options: this.state.options,\r\n            modal: this.state.modal\r\n        });\r\n    }\r\n\r\n    private nudgeValue(combatant: any, type: string, delta: number) {\r\n        const tokens = type.split('.');\r\n        let obj = combatant;\r\n        for (let n = 0; n !== tokens.length; ++n) {\r\n            const token = tokens[n];\r\n            if (n === tokens.length - 1) {\r\n                let value = null;\r\n                value = (token === 'challenge') ? Utils.nudgeChallenge(obj.challenge, delta) : obj[token] + delta;\r\n                this.changeValue(combatant, type, value);\r\n            } else {\r\n                obj = obj[token];\r\n            }\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    private getActions() {\r\n        switch (this.state.view) {\r\n            case 'parties':\r\n            case 'encounter':\r\n            case 'maps':\r\n                return (\r\n                    <div className='actions'>\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='search'\r\n                                value={this.state.filter}\r\n                                onChange={event => this.changeValue(this.state, 'filter', event.target.value)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                );\r\n            case 'library':\r\n                return (\r\n                    <div className='actions'>\r\n                        <div className='section'>\r\n                            <button onClick={() => this.openDemographics()}>demographics</button>\r\n                        </div>\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='search'\r\n                                value={this.state.filter}\r\n                                onChange={event => this.changeValue(this.state, 'filter', event.target.value)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                );\r\n            case 'combat':\r\n                const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n                if (combat) {\r\n                    const encounter = this.state.encounters.find(e => e.id === combat.encounterID);\r\n                    if (encounter) {\r\n                        let xp = 0;\r\n                        combat.combatants.filter(c => c.type === 'monster')\r\n                            .forEach(combatant => {\r\n                                xp += Utils.experience((combatant as Combatant & Monster).challenge);\r\n                            });\r\n\r\n                        return (\r\n                            <div className='actions'>\r\n                                <div className='section'>\r\n                                    <div className='text'>round: {combat.round}</div>\r\n                                </div>\r\n                                <div className='section'>\r\n                                    <div className='text'>xp: {xp}</div>\r\n                                </div>\r\n                                <div className='section' style={{ display: encounter.waves.length === 0 ? 'none' : ''}}>\r\n                                    <button onClick={() => this.openWaveModal()}>add wave</button>\r\n                                </div>\r\n                                <div className='section'>\r\n                                    <button onClick={() => this.pauseCombat()}>pause encounter</button>\r\n                                </div>\r\n                                <div className='section'>\r\n                                    <button onClick={() => this.endCombat()}>end encounter</button>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    }\r\n                } else {\r\n                    return (\r\n                        <div className='actions'>\r\n                            <div className='section'>\r\n                                <input\r\n                                    type='text'\r\n                                    placeholder='search'\r\n                                    value={this.state.filter}\r\n                                    onChange={event => this.changeValue(this.state, 'filter', event.target.value)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private getContent() {\r\n        switch (this.state.view) {\r\n            case 'home':\r\n                return (\r\n                    <HomeScreen\r\n                        library={this.state.library}\r\n                        addOpenGameContent={() => this.addOpenGameContent()}\r\n                    />\r\n                );\r\n            case 'parties':\r\n                return (\r\n                    <PartiesScreen\r\n                        parties={this.state.parties}\r\n                        selection={this.state.parties.find(p => p.id === this.state.selectedPartyID) || null}\r\n                        filter={this.state.filter}\r\n                        showHelp={this.state.options.showHelp}\r\n                        selectParty={party => this.selectParty(party)}\r\n                        addParty={() => this.addParty()}\r\n                        removeParty={() => this.removeParty()}\r\n                        addPC={() => this.addPC()}\r\n                        removePC={pc => this.removePC(pc)}\r\n                        sortPCs={() => this.sortPCs()}\r\n                        changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                        nudgeValue={(combatant, type, delta) => this.nudgeValue(combatant, type, delta)}\r\n                    />\r\n                );\r\n            case 'library':\r\n                return (\r\n                    <MonsterLibraryScreen\r\n                        library={this.state.library}\r\n                        selection={this.state.library.find(g => g.id === this.state.selectedMonsterGroupID) || null}\r\n                        filter={this.state.filter}\r\n                        showHelp={this.state.options.showHelp}\r\n                        selectMonsterGroup={group => this.selectMonsterGroup(group)}\r\n                        addMonsterGroup={() => this.addMonsterGroup()}\r\n                        removeMonsterGroup={() => this.removeMonsterGroup()}\r\n                        addMonster={() => this.addMonster()}\r\n                        generateMonster={() => this.generateMonster()}\r\n                        removeMonster={monster => this.removeMonster(monster)}\r\n                        sortMonsters={() => this.sortMonsters()}\r\n                        changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                        nudgeValue={(combatant, type, delta) => this.nudgeValue(combatant, type, delta)}\r\n                        editMonster={combatant => this.editMonster(combatant)}\r\n                        cloneMonster={(combatant, name) => this.cloneMonster(combatant, name)}\r\n                        moveToGroup={(combatant, groupID) => this.moveToGroup(combatant, groupID)}\r\n                    />\r\n                );\r\n            case 'encounter':\r\n                return (\r\n                    <EncounterBuilderScreen\r\n                        encounters={this.state.encounters}\r\n                        selection={this.state.encounters.find(e => e.id === this.state.selectedEncounterID) || null}\r\n                        filter={this.state.filter}\r\n                        parties={this.state.parties}\r\n                        library={this.state.library}\r\n                        showHelp={this.state.options.showHelp}\r\n                        selectEncounter={encounter => this.selectEncounter(encounter)}\r\n                        addEncounter={() => this.addEncounter()}\r\n                        removeEncounter={() => this.removeEncounter()}\r\n                        addWave={() => this.addWaveToEncounter()}\r\n                        removeWave={wave => this.removeWave(wave)}\r\n                        getMonster={(monsterName, groupName) => this.getMonster(monsterName, groupName) || null}\r\n                        addEncounterSlot={(monster, waveID) => this.addEncounterSlot(monster, waveID)}\r\n                        removeEncounterSlot={(slot, waveID) => this.removeEncounterSlot(slot, waveID)}\r\n                        nudgeValue={(slot, type, delta) => this.nudgeValue(slot, type, delta)}\r\n                        changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                    />\r\n                );\r\n            case 'maps':\r\n                return (\r\n                    <MapFoliosScreen\r\n                        mapFolios={this.state.mapFolios}\r\n                        selection={this.state.mapFolios.find(f => f.id === this.state.selectedMapFolioID) || null}\r\n                        filter={this.state.filter}\r\n                        showHelp={this.state.options.showHelp}\r\n                        selectMapFolio={folio => this.selectMapFolio(folio)}\r\n                        addMapFolio={() => this.addMapFolio()}\r\n                        removeMapFolio={() => this.removeMapFolio()}\r\n                        addMap={() => this.addMap()}\r\n                        editMap={map => this.editMap(map)}\r\n                        removeMap={map => this.removeMap(map)}\r\n                        changeValue={(source, type, value) => this.changeValue(source, type, value)}\r\n                    />\r\n                );\r\n            case 'combat':\r\n                return (\r\n                    <CombatManagerScreen\r\n                        combats={this.state.combats}\r\n                        combat={this.state.combats.find(c => c.id === this.state.selectedCombatID) || null}\r\n                        filter={this.state.filter}\r\n                        showHelp={this.state.options.showHelp}\r\n                        createCombat={() => this.createCombat()}\r\n                        resumeEncounter={pausedCombat => this.resumeCombat(pausedCombat)}\r\n                        nudgeValue={(combatant, type, delta) => this.nudgeValue(combatant, type, delta)}\r\n                        changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                        makeCurrent={(combatant) => this.makeCurrent(combatant, false)}\r\n                        makeActive={(combatant) => this.makeActive(combatant)}\r\n                        makeDefeated={(combatant) => this.makeDefeated(combatant)}\r\n                        removeCombatant={(combatant) => this.removeCombatant(combatant)}\r\n                        addCondition={(combatant) => this.addCondition(combatant)}\r\n                        editCondition={(combatant, condition) => this.editCondition(combatant, condition)}\r\n                        removeCondition={(combatant, conditionID) => this.removeCondition(combatant, conditionID)}\r\n                        mapAdd={(combatant, x, y) => this.mapAdd(combatant, x, y)}\r\n                        mapMove={(combatant, dir) => this.mapMove(combatant, dir)}\r\n                        mapRemove={combatant => this.mapRemove(combatant)}\r\n                        endTurn={(combatant) => this.endTurn(combatant)}\r\n                        changeHP={(combatant, hp, temp) => this.changeHP(combatant, hp, temp)}\r\n                        close={(notification, removeCondition) => this.closeNotification(notification, removeCondition)}\r\n                    />\r\n                );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private getModal() {\r\n        if (this.state.modal) {\r\n            let modalSidebar = false;\r\n            let modalTitle = null;\r\n            let modalContent = null;\r\n            let modalAllowScroll = true;\r\n\r\n            const modalButtons = {\r\n                left: [] as JSX.Element[],\r\n                right: [\r\n                    <button key='close' onClick={() => this.closeModal()}>close</button>\r\n                ] as JSX.Element[]\r\n            };\r\n\r\n            switch (this.state.modal.type) {\r\n                case 'about':\r\n                    modalSidebar = true;\r\n                    modalContent = (\r\n                        <AboutModal\r\n                            options={this.state.options}\r\n                            resetAll={() => this.resetAll()}\r\n                            changeValue={(source, type, value) => this.changeValue(source, type, value)}\r\n                        />\r\n                    );\r\n                    modalButtons.right = [];\r\n                    break;\r\n                case 'demographics':\r\n                    modalSidebar = true;\r\n                    modalContent = (\r\n                        <DemographicsModal\r\n                            library={this.state.library}\r\n                        />\r\n                    );\r\n                    modalButtons.right = [];\r\n                    break;\r\n                case 'monster':\r\n                    modalTitle = 'monster editor';\r\n                    modalContent = (\r\n                        <MonsterEditorModal\r\n                            monster={this.state.modal.monster}\r\n                            library={this.state.library}\r\n                            showMonsters={this.state.modal.showMonsters}\r\n                        />\r\n                    );\r\n                    modalAllowScroll = false;\r\n                    modalButtons.left = [\r\n                        (\r\n                            <Checkbox\r\n                                key='similar'\r\n                                label='similar monsters'\r\n                                checked={this.state.modal.showMonsters}\r\n                                changeValue={() => this.toggleShowSimilarMonsters()}\r\n                            />\r\n                        )\r\n                    ];\r\n                    modalButtons.right = [\r\n                        <button key='save' onClick={() => this.saveMonster()}>save</button>,\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                case 'random-monster':\r\n                    modalTitle = 'random monster generator';\r\n                    modalContent = (\r\n                        <RandomMonsterModal\r\n                            monster={this.state.modal.monster}\r\n                            library={this.state.library}\r\n                        />\r\n                    );\r\n                    modalAllowScroll = false;\r\n                    modalButtons.right = [\r\n                        <button key='save' onClick={() => this.saveMonster()}>save</button>,\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                case 'map':\r\n                    modalTitle = 'map editor';\r\n                    modalContent = (\r\n                        <MapEditorModal\r\n                            map={this.state.modal.map}\r\n                        />\r\n                    );\r\n                    modalAllowScroll = false;\r\n                    modalButtons.right = [\r\n                        <button key='save' onClick={() => this.saveMap()}>save</button>,\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                case 'combat-start':\r\n                    modalTitle = 'start a new encounter';\r\n                    modalContent = (\r\n                        <CombatStartModal\r\n                            combatSetup={this.state.modal.combatSetup}\r\n                            parties={this.state.parties}\r\n                            encounters={this.state.encounters}\r\n                            mapFolios={this.state.mapFolios}\r\n                            getMonster={(monsterName, groupName) => this.getMonster(monsterName, groupName) || null}\r\n                            notify={() => this.setState({modal: this.state.modal})}\r\n                        />\r\n                    );\r\n                    modalAllowScroll = false;\r\n                    modalButtons.right = [\r\n                        (\r\n                            <button\r\n                                key='start encounter'\r\n                                className={this.state.modal.combatSetup.partyID && this.state.modal.combatSetup.encounterID ? '' : 'disabled'}\r\n                                onClick={() => this.startCombat()}\r\n                            >\r\n                                start encounter\r\n                            </button>\r\n                        ),\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                case 'combat-wave':\r\n                    modalTitle = 'encounter waves';\r\n                    modalContent = (\r\n                        <CombatStartModal\r\n                            combatSetup={this.state.modal.combatSetup}\r\n                            encounters={this.state.encounters}\r\n                            getMonster={(monsterName, groupName) => this.getMonster(monsterName, groupName) || null}\r\n                            notify={() => this.setState({modal: this.state.modal})}\r\n                        />\r\n                    );\r\n                    modalAllowScroll = false;\r\n                    modalButtons.right = [\r\n                        (\r\n                            <button\r\n                                key='add wave'\r\n                                className={this.state.modal.combatSetup.waveID !== null ? '' : 'disabled'}\r\n                                onClick={() => this.addWaveToCombat()}\r\n                            >\r\n                                add wave\r\n                            </button>\r\n                        ),\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                case 'condition-add':\r\n                    modalTitle = 'add a condition';\r\n                    modalContent = (\r\n                        <ConditionModal\r\n                            condition={this.state.modal.condition}\r\n                            combatant={this.state.modal.combatant}\r\n                            combat={this.state.modal.combat}\r\n                        />\r\n                    );\r\n                    modalAllowScroll = false;\r\n                    modalButtons.right = [\r\n                        <button key='add' onClick={() => this.addConditionFromModal()}>add</button>,\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                case 'condition-edit':\r\n                    modalTitle = 'edit condition';\r\n                    modalContent = (\r\n                        <ConditionModal\r\n                            condition={this.state.modal.condition}\r\n                            combatant={this.state.modal.combatant}\r\n                            combat={this.state.modal.combat}\r\n                        />\r\n                    );\r\n                    modalButtons.right = [\r\n                        <button key='save' onClick={() => this.editConditionFromModal()}>save</button>,\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                default:\r\n                    // Do nothing\r\n                    break;\r\n            }\r\n\r\n            return (\r\n                <div className='overlay' onClick={() => modalSidebar ? this.closeModal() : null}>\r\n                    <div className={modalSidebar ? 'modal sidebar' : 'modal'} onClick={e => e.stopPropagation()}>\r\n                        <div className='modal-header'>\r\n                            <div className='title'>{modalTitle}</div>\r\n                            {modalSidebar ? <img className='image' src={close} alt='close' onClick={() => this.closeModal()} /> : null}\r\n                        </div>\r\n                        <div className={modalAllowScroll ? 'modal-content scrollable' : 'modal-content'}>\r\n                            {modalContent}\r\n                        </div>\r\n                        <div className='modal-footer'>\r\n                            <div className='left'>{modalButtons.left}</div>\r\n                            <div className='right'>{modalButtons.right}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const content = this.getContent();\r\n            const actions = this.getActions();\r\n            const modal = this.getModal();\r\n\r\n            return (\r\n                <div className='dojo'>\r\n                    <Titlebar\r\n                        actions={actions}\r\n                        blur={modal !== null}\r\n                        openHome={() => this.setView('home')}\r\n                        openAbout={() => this.openAbout()}\r\n                    />\r\n                    <div className={(modal === null) ? 'page-content' : 'page-content blur'}>\r\n                        {content}\r\n                    </div>\r\n                    <Navbar\r\n                        view={this.state.view}\r\n                        parties={this.state.parties}\r\n                        library={this.state.library}\r\n                        encounters={this.state.encounters}\r\n                        blur={modal !== null}\r\n                        setView={view => this.setView(view)}\r\n                    />\r\n                    {modal}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './style/css/foundation.css';\r\nimport './style/scss/app.scss';\r\nimport './style/scss/controls.scss';\r\n\r\nimport Dojo from './components/dojo';\r\n\r\nReactDOM.render(<Dojo />, document.getElementById('root'));\r\n"],"sourceRoot":""}