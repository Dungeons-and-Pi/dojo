{"version":3,"sources":["resources/images/down-arrow-black.svg","resources/images/down-arrow.svg","resources/images/close-black.svg","resources/images/warning.svg","resources/images/ellipsis.svg","resources/images/minus.svg","resources/images/plus.svg","resources/images/settings.svg","utils/utils.ts","utils/factory.ts","models/monster-group.ts","utils/frankenstein.ts","components/controls/confirm-button.tsx","components/controls/control-row.tsx","components/controls/dropdown.tsx","components/controls/expander.tsx","components/controls/radial.tsx","components/controls/spin.tsx","components/panels/ability-score-panel.tsx","components/panels/conditions-panel.tsx","components/panels/traits-panel.tsx","components/cards/info-card.tsx","components/cards/monster-card.tsx","components/cards/pc-card.tsx","components/panels/hit-point-gauge.tsx","components/panels/map-panel.tsx","components/list-items/combat-list-item.tsx","components/panels/card-group.tsx","components/panels/note.tsx","components/screens/combat-manager-screen.tsx","components/panels/difficulty-chart-panel.tsx","components/cards/encounter-card.tsx","components/cards/error-card.tsx","components/cards/filter-card.tsx","components/cards/wave-card.tsx","components/list-items/encounter-list-item.tsx","components/screens/encounter-builder-screen.tsx","components/panels/readaloud.tsx","components/screens/home-screen.tsx","components/cards/map-card.tsx","components/cards/map-folio-card.tsx","components/list-items/map-folio-list-item.tsx","components/screens/map-folios-screen.tsx","components/cards/monster-group-card.tsx","components/list-items/monster-group-list-item.tsx","components/screens/monster-library-screen.tsx","components/cards/party-card.tsx","components/list-items/party-list-item.tsx","components/screens/parties-screen.tsx","components/controls/checkbox.tsx","components/controls/selector.tsx","components/dm-modules/die-roller-module.tsx","utils/speech.ts","utils/text-generation.ts","components/dm-modules/language-module.tsx","components/dm-modules/name-module.tsx","components/dm-modules/reference-module.tsx","components/modals/about-modal.tsx","components/modals/combat-start-modal.tsx","models/condition.ts","components/controls/radio-group.tsx","components/modals/condition-modal.tsx","components/modals/demographics-modal.tsx","models/map-folio.ts","components/cards/map-tile-card.tsx","components/modals/map-editor-modal.tsx","components/modals/monster-editor-modal.tsx","components/panels/navbar.tsx","components/panels/titlebar.tsx","components/modals/random-monster-modal.tsx","components/dojo.tsx","index.js"],"names":["module","exports","__webpack_require__","p","Utils","monster","library","group","this","monsterIdToGroup","id","grp","find","g","monsters","includes","filter","text","result","toLowerCase","split","forEach","token","indexOf","s4","Math","floor","random","toString","substring","collection","sorts","arguments","length","undefined","field","dir","sort","a","b","order","fn","score","mod","modifierValue","str","sides","size","cr","parseInt","push","ac","hpMin","hpMax","attack","dmgMin","dmgMax","save","count","level","difficulty","type","plural","value","delta","condition","name","combat","duration","saveDuration","saveType","toUpperCase","saves","saveDC","combatantDuration","point","c","combatants","cmb","combatantID","displayName","roundsDuration","rounds","encounter","monsterNames","slots","slot","names","monsterName","n","Factory","guid","pcs","active","player","race","classes","languages","passiveInsight","passiveInvestigation","passivePerception","initiative","url","category","tag","alignment","challenge","abilityScores","dex","con","int","wis","cha","hpTemp","hitDice","damage","resist","vulnerable","immune","savingThrows","speed","skills","senses","equipment","traits","conditionImmunities","usage","uses","waves","monsterGroupName","maps","items","x","y","width","height","terrain","partyID","encounterID","waveID","folioID","mapID","encounterInitMode","map","round","notifications","issues","timestamp","data","combatant","SIZE_TYPES","CATEGORY_TYPES","TRAIT_TYPES","Frankenstein","target","source","tokens","newValue","nudgeChallenge","changeValue","hpPerDie","hitDieType","hp","trait","_this","createMonster","subtype","parseChallenge","challenge_rating","armor_class","hit_points","index","hit_dice","strength","dexterity","constitution","intelligence","wisdom","charisma","damage_resistances","damage_vulnerabilities","damage_immunities","condition_immunities","skill","special_abilities","rawTrait","buildTrait","actions","legendary_actions","openBracket","closeBracket","desc","replace","copy","JSON","parse","stringify","createTrait","traitType","splice","t1","t2","index1","index2","_this2","setRandomValue","m","t","distinct","current","d","addedIDs","copyTrait","findIndex","avg","ConfirmButton","props","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","pressed","setState","toggle","callback","content","react_default","createElement","className","src","warning","alt","details","onClick","perform","disabled","ex","console","error","React","Component","defaultProps","ControlRow","style","controls","Dropdown","open","e","stopPropagation","optionID","select","options","selectedText","selectedID","option","o","placeholder","key","title","ellipsis","dropdown_DropdownOption","selected","toggleOpen","DropdownOption","_this3","click","Expander","expanded","arrow","Radial","dir2","direction","showOut","showIn","showDiag","display","transform","padding","Spin","nudgeValue","preventDefault","minusBtns","plusBtns","factors","factor","onTouchEnd","touchEnd","reverse","minus","plus","infoWidth","label","AbilityScorePanel","showAbilityScores","edit","spin_Spin","toggleAbilityScores","modifier","ConditionsPanel","conditions","conditions_panel_ConditionPanel","nudgeConditionValue","editCondition","removeCondition","conditionID","addCondition","ConditionPanel","conditionDurationText","description","conditionText","expander_Expander","showdown","Showdown","Converter","TraitsPanel","prevTrait","nextTrait","traits_panel_TraitPanel","mode","action","removeTrait","swapTraits","traitsByType","match","list","createTraitPanel","addTrait","createSection","TraitPanel","maxUses","heading","used","startsWith","found","markdown","dangerouslySetInnerHTML","__html","makeHtml","onChange","event","control_row_ControlRow","confirm_button_ConfirmButton","InfoCard","MonsterCard","showDetails","cloneName","damageOrHealing","max","min","changeHP","temp","val","sizeAndType","align","wave","_this4","some","s","die","conMod","conModStr","_this5","editMonster","setCloneName","cloneMonster","groupOptions","dropdown_Dropdown","moveToGroup","removeMonster","removeEncounterSlot","canAdd","monsterIsInWave","addEncounterSlot","info_card_InfoCard","selectMonster","deselectMonster","radial_Radial","mapMove","mapRemove","mapAdd","pending","defeated","removeCombatant","endTurn","makeDefeated","makeCurrent","makeActive","stats","slotSection","getHP","ability_score_panel_AbilityScorePanel","traits_panel_TraitsPanel","nudgeDamage","heal","setDamage","conditions_panel_ConditionsPanel","imageStyle","toggleDetails","PCCard","removePC","commonStatBlock","href","rel","HitPointGauge","hpCurrent","hpBloodied","hpWidth","hpTempBar","hpTempWidth","MapPanel","border","dimensions","i","minX","maxX","minY","maxY","mapDimensions","sideLength","getSideLength","left","top","getMapDimensions","grid","gridStyle","getStyle","map_panel_GridSquare","setSelectedItemID","onDoubleClick","posX","posY","addMapTile","tiles","tileStyle","map_panel_MapTile","tile","selectable","selectedItemID","thumbnail","tokenStyle","map_panel_MapToken","simple","mt","dragOverlay","showOverlay","yOver","xOver","overlayStyle","overlay","gridSquareClicked","GridSquare","doubleClick","MapTile","MapToken","initials","hpGauge","altitudeBadge","conditionsBadge","hit_point_gauge_HitPointGauge","altitude","CombatListItem","map_panel_MapPanel","setSelection","CardGroup","showCards","hidden","closeBtn","showClose","close","showToggle","toggleCards","cards","Note","white","CombatManagerScreen","selectedTokenID","addingToMapID","pc_card_PCCard","setAddingToMapID","monster_card_MonsterCard","createCard","combat_manager_screen_PendingCombatantRow","setSelectedTokenID","combat_manager_screen_PCRow","combat_manager_screen_MonsterRow","showHelp","pendingHelp","note_Note","concat","activeHelp","notificationSection","combat_manager_screen_NotificationPanel","notification","mapSection","addCombatantToMap","selectedCombatant","card_group_CardGroup","help","combat_manager_screen_HelpCard","combats","showCombat","combat_list_item_CombatListItem","resumeEncounter","createCombat","HelpCard","NotificationPanel","success","PendingCombatantRow","_this6","getInformationText","PCRow","_this7","notes","MonsterRow","_this8","gauge","DifficultyChartPanel","monsterCount","monsterXp","getMonster","experience","xpThresholds","diffSection","adjustedXp","experienceFactor","party","xpEasy","xpMedium","xpHard","xpDeadly","pc","pcExperience","adjustedDifficulty","small","getLeft","xp","getRight","right","EncounterCard","parties","partyOptions","difficultySection","selectParty","difficulty_chart_panel_DifficultyChartPanel","selection","addWave","removeEncounter","ErrorCard","getContent","FilterCard","showAll","sizeOptions","catOptions","cat","resetFilter","summary","challengeMin","challengeMax","toggleAll","WaveCard","removeWave","EncounterListItem","EncounterBuilderScreen","changeFilterValue","error_card_ErrorCard","libraryCards","filter_card_FilterCard","nudgeFilterValue","matchMonster","enc","encounter_builder_screen_HelpCard","encounters","encounterName","showEncounter","encounter_list_item_EncounterListItem","selectEncounter","encounterCards","encounter_card_EncounterCard","getMonsterCards","card","w","waveCards","wave_card_WaveCard","addEncounter","getLibrarySection","Readaloud","HomeScreen","addOpenGameContent","readaloud_Readaloud","MapCard","editMap","removeMap","MapFolioCard","addMap","removeMapFolio","MapFolioListItem","matchFolio","mapFolio","MapFoliosScreen","folio","map_folios_screen_HelpCard","mapFolios","folios","f","showMapFolio","map_folio_list_item_MapFolioListItem","selectMapFolio","folioCards","map_folio_card_MapFolioCard","map_card_MapCard","addMapFolio","MonsterGroupCard","addMonster","generateMonster","sortMonsters","removeMonsterGroup","MonsterGroupListItem","matchGroup","MonsterLibraryScreen","monster_library_screen_HelpCard","listItems","showMonsterGroup","monster_group_list_item_MonsterGroupListItem","selectMonsterGroup","monster_group_card_MonsterGroupCard","groupID","addMonsterGroup","PartyCard","activePCs","join","reduce","array","localeCompare","insightSummary","investigationSummary","perceptionSummary","insight","invest","percep","addPC","sortPCs","removeParty","PartyListItem","matchParty","PartiesScreen","parties_screen_HelpCard","showParty","party_list_item_PartyListItem","activeCards","inactiveCards","party_card_PartyCard","activePC","inactivePC","addParty","Checkbox","checked","Selector","tabs","itemsPerRow","rowCount","ceil","rowContents","rowIndex","selector_SelectorOption","rowSections","row","SelectorOption","DieRollerModule","dice","rolls","dieRoll","roll","rollsSection","resultSection","selector_Selector","setDice","nudgeCount","Speech","window","speechSynthesis","cancel","utterance","SpeechSynthesisUtterance","chooseVoice","voice","rate","randomValue","pitch","speak","getVoices","voices","langCodes","lang","getLanguageCode","candidates","v","substr","default","Promise","resolve","onvoiceschanged","language","TextGenerator","sources","model","maxLength","line","addLineToModel","String","fromCharCode","_loop","prev","char","item","freq","requiredResults","lines","failures","extractLine","l","fit","_loop2","repeat","_ret","values","_loop3","ch","mc","maxCount","sum","LanguageModule","output","fetch","response","presetName","preset","getPresets","addLanguage","getLanguages","keys","initModel","generate","say","presetOptions","selectedPreset","selectedLanguages","isSelected","checkbox_Checkbox","removeLanguage","allowGenerate","allowReset","usePreset","reset","NameModule","male","female","surname","input","setOption","ReferenceModule","view","fetchData","setView","AboutModal","reference_module_ReferenceModule","language_module_LanguageModule","name_module_NameModule","die_roller_module_DieRollerModule","moduleID","setModule","pkg","version","resetAll","getTools","getAbout","CombatStartModal","combatSetup","notify","getMonsterNames","slotID","partyContent","selectedParty","pcSections","setParty","encounterOptions","encounterContent","selectedEncounter","monsterSections","waveMonsters","setEncounter","folioOptions","selectMapSection","thumbnailSection","mapOptions","setMapID","setFolioID","waveOptions","waveContent","selectedWave","setWave","_this9","_this10","slotsContainer","slotNames","inputs","combat_start_modal_MonsterName","changeName","setEncounterInitMode","leftSection","rightSection","getPartySection","getEncounterSection","getMapSection","getDifficultySection","getMonsterSection","getWaveSection","margin","MonsterName","_this11","CONDITION_TYPES","RadioGroup","radio_group_RadioGroupItem","itemID","RadioGroupItem","ConditionModal","conditionName","durationType","createConditionDurationSaves","createConditionDurationCombatant","createConditionDurationRounds","object","saveOptions","pointOptions","combatantOptions","durations","radio_group_RadioGroup","setCondition","setDuration","DemographicsModal","chart","demographics","allMonsters","buckets","maxBucketSize","bucket","bars","set","selectChart","TERRAIN_TYPES","MapTileCard","terrainOptions","moveMapItem","resizeMapItem","cloneMapItem","removeMapItem","MapEditorModal","selectedTileID","createMapItem","smallMapItem","bigMapItem","tools","map_tile_card_MapTileCard","mapItem","setSelectedTileID","MonsterEditorModal","page","showFilter","helpSection","sections","getHelpOptionsForPage","section","spliceMonsters","addRandomTrait","getValueSection","getActionsSection","dataType","valueSections","rows","criteria","criteriaText","similar","filterContent","toggleMatch","toggleFilter","showMonsters","getMonsters","changeTrait","selector","setHelpSection","getHelpSection","monsterList","searchBox","setFilterText","getFilterCard","transition","setPage","Navbar","partiesStyle","libraryStyle","encounterStyle","mapStyle","combatStyle","encountersEnabled","combatEnabled","blur","Titlebar","openHome","cog","openAbout","RandomMonsterModal","selectedMonsters","selectedMonstersInfo","selectAll","Dojo","selectedPartyID","selectedMonsterGroupID","selectedEncounterID","selectedMapFolioID","selectedCombatID","modal","json","localStorage","getItem","setItem","createParty","createPC","createMonsterGroup","sourceGroup","original","clone","then","createFromJSON","groupName","createEncounter","_this12","_this13","createEncounterSlot","sortEncounterSlots","_this14","slotContainer","aName","bName","_this15","createEncounterWave","_this16","createMapFolio","_this17","_this18","createMap","_this19","_this20","setup","createCombatSetup","_this21","partyName","init","groupRoll","singleRoll","sortCombatants","_this22","_this23","Date","toLocaleString","_this24","newRound","_this25","actor","_this26","_this27","issue","_this28","_this29","miniSize","_this30","_this31","_this32","saveNotification","createNotification","endNotification","_this33","createCondition","_this34","_this35","_this36","conditionIndex","_this37","obj","_this38","openDemographics","openWaveModal","pauseCombat","endCombat","_this39","home_screen_HomeScreen","parties_screen_PartiesScreen","monster_library_screen_MonsterLibraryScreen","encounter_builder_screen_EncounterBuilderScreen","addWaveToEncounter","map_folios_screen_MapFoliosScreen","combat_manager_screen_CombatManagerScreen","pausedCombat","resumeCombat","closeNotification","_this40","modalSidebar","modalTitle","modalContent","modalAllowScroll","modalButtons","closeModal","about_modal_AboutModal","demographics_modal_DemographicsModal","monster_editor_modal_MonsterEditorModal","toggleShowSimilarMonsters","saveMonster","random_monster_modal_RandomMonsterModal","map_editor_modal_MapEditorModal","saveMap","combat_start_modal_CombatStartModal","startCombat","addWaveToCombat","condition_modal_ConditionModal","addConditionFromModal","editConditionFromModal","_this41","getActions","getModal","titlebar_Titlebar","navbar_Navbar","ReactDOM","render","dojo_Dojo","document","getElementById"],"mappings":"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","file":"static/js/main.8abe4c7b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/down-arrow-black.a2fc7a1f.svg\";","module.exports = __webpack_public_path__ + \"static/media/down-arrow.697dc1af.svg\";","module.exports = __webpack_public_path__ + \"static/media/close-black.7645a5b9.svg\";","module.exports = __webpack_public_path__ + \"static/media/warning.67a11a95.svg\";","module.exports = __webpack_public_path__ + \"static/media/ellipsis.9650a20f.svg\";","module.exports = __webpack_public_path__ + \"static/media/minus.7003cf50.svg\";","module.exports = __webpack_public_path__ + \"static/media/plus.b60accff.svg\";","module.exports = __webpack_public_path__ + \"static/media/settings.042bb1c2.svg\";","import { Combat } from '../models/combat';\r\nimport { Condition, ConditionDurationCombatant, ConditionDurationRounds, ConditionDurationSaves } from '../models/condition';\r\nimport { Encounter, EncounterWave } from '../models/encounter';\r\nimport { Monster, MonsterGroup } from '../models/monster-group';\r\n\r\nexport default class Utils {\r\n\r\n    // This is an internal dictionary to speed up lookup\r\n    private static monsterIdToGroup: { [id: string]: MonsterGroup } = {};\r\n\r\n    public static getMonsterGroup(monster: Monster, library: MonsterGroup[]): MonsterGroup {\r\n        let group = this.monsterIdToGroup[monster.id];\r\n\r\n        if (!group) {\r\n            const grp = library.find(g => g.monsters.includes(monster));\r\n            if (grp) {\r\n                group = grp;\r\n                this.monsterIdToGroup[monster.id] = group;\r\n            }\r\n        }\r\n\r\n        return group;\r\n    }\r\n\r\n    public static match(filter: string, text: string): boolean {\r\n        if (!filter) {\r\n            return true;\r\n        }\r\n\r\n        let result = true;\r\n\r\n        const tokens = filter.toLowerCase().split(' ');\r\n        tokens.forEach(token => {\r\n            if (text.toLowerCase().indexOf(token) === -1) {\r\n                result = false;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    public static guid(): string {\r\n        const s4 = () => Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\r\n        return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\r\n    }\r\n\r\n    public static sort(collection: any[], sorts: { field: string, dir: 'asc' | 'desc' }[] = []): any[] {\r\n        if (sorts.length === 0) {\r\n            sorts = [{ field: 'name', dir: 'asc' }];\r\n        }\r\n\r\n        const fn = (a: any, b: any, field: string): number => {\r\n            if ((a[field] !== undefined) && (b[field] !== undefined)) {\r\n                if (a[field] < b[field]) { return -1; }\r\n                if (a[field] > b[field]) { return 1; }\r\n            }\r\n            return 0;\r\n        };\r\n\r\n        collection.sort((a, b) => {\r\n            let order = 0;\r\n            sorts.forEach(sort => {\r\n                if (order === 0) {\r\n                    order = fn(a, b, sort.field) * (sort.dir === 'asc' ? 1 : -1);\r\n                }\r\n            });\r\n            return order;\r\n        });\r\n\r\n        return collection;\r\n    }\r\n\r\n    public static modifierValue(score: number): number {\r\n        return Math.floor((score - 10) / 2);\r\n    }\r\n\r\n    public static modifier(score: number): string {\r\n        const mod = this.modifierValue(score);\r\n        let str = mod.toString();\r\n        if (mod >= 0) {\r\n            str = '+' + str;\r\n        }\r\n        return str;\r\n    }\r\n\r\n    public static dieRoll(sides: number = 20): number {\r\n        return Math.floor(Math.random() * sides) + 1;\r\n    }\r\n\r\n    public static miniSize(size: string): number {\r\n        switch (size) {\r\n            case 'tiny': return 1;\r\n            case 'small': return 1;\r\n            case 'medium': return 1;\r\n            case 'large': return 2;\r\n            case 'huge': return 3;\r\n            case 'gargantuan': return 4;\r\n            default: return 1;\r\n        }\r\n    }\r\n\r\n    public static hitDieType(size: string) {\r\n        switch (size) {\r\n            case 'tiny': return 4;\r\n            case 'small': return 6;\r\n            case 'medium': return 8;\r\n            case 'large': return 10;\r\n            case 'huge': return 12;\r\n            case 'gargantuan': return 20;\r\n            default: return 8;\r\n        }\r\n    }\r\n\r\n    public static challenge(cr: number): string {\r\n        switch (cr) {\r\n            case 0.125: return '1/8';\r\n            case 0.25: return '1/4';\r\n            case 0.5: return '1/2';\r\n            default: return cr.toString();\r\n        }\r\n    }\r\n\r\n    public static parseChallenge(cr: string): number {\r\n        switch (cr) {\r\n            case '1/8': return 0.125;\r\n            case '1/4': return 0.25;\r\n            case '1/2': return 0.5;\r\n            default: return parseInt(cr, 10);\r\n        }\r\n    }\r\n\r\n    public static challengeDetails(): any[] {\r\n        const result: any[] = [];\r\n\r\n        result.push({ cr: 0,        ac: 13,       hpMin: 1, hpMax: 6,       attack: 3,  dmgMin: 0,   dmgMax: 1,   save: 13 });\r\n        result.push({ cr: 0.125,    ac: 13,       hpMin: 7, hpMax: 35,      attack: 3,  dmgMin: 2,   dmgMax: 3,   save: 13 });\r\n        result.push({ cr: 0.25,     ac: 13,       hpMin: 36, hpMax: 49,     attack: 3,  dmgMin: 4,   dmgMax: 5,   save: 13 });\r\n        result.push({ cr: 0.5,      ac: 13,       hpMin: 50, hpMax: 70,     attack: 3,  dmgMin: 6,   dmgMax: 8,   save: 13 });\r\n        result.push({ cr: 1,        ac: 13,       hpMin: 71, hpMax: 85,     attack: 3,  dmgMin: 9,   dmgMax: 14,  save: 13 });\r\n        result.push({ cr: 2,        ac: 13,       hpMin: 86, hpMax: 100,    attack: 3,  dmgMin: 15,  dmgMax: 20,  save: 13 });\r\n        result.push({ cr: 3,        ac: 13,       hpMin: 101, hpMax: 115,   attack: 4,  dmgMin: 21,  dmgMax: 26,  save: 13 });\r\n        result.push({ cr: 4,        ac: 14,       hpMin: 116, hpMax: 130,   attack: 5,  dmgMin: 27,  dmgMax: 32,  save: 14 });\r\n        result.push({ cr: 5,        ac: 15,       hpMin: 131, hpMax: 145,   attack: 6,  dmgMin: 33,  dmgMax: 38,  save: 15 });\r\n        result.push({ cr: 6,        ac: 15,       hpMin: 146, hpMax: 160,   attack: 6,  dmgMin: 39,  dmgMax: 44,  save: 15 });\r\n        result.push({ cr: 7,        ac: 15,       hpMin: 161, hpMax: 175,   attack: 6,  dmgMin: 45,  dmgMax: 50,  save: 15 });\r\n        result.push({ cr: 8,        ac: 16,       hpMin: 176, hpMax: 190,   attack: 7,  dmgMin: 51,  dmgMax: 56,  save: 16 });\r\n        result.push({ cr: 9,        ac: 16,       hpMin: 191, hpMax: 205,   attack: 7,  dmgMin: 57,  dmgMax: 62,  save: 16 });\r\n        result.push({ cr: 10,       ac: 17,       hpMin: 206, hpMax: 220,   attack: 7,  dmgMin: 63,  dmgMax: 68,  save: 16 });\r\n        result.push({ cr: 11,       ac: 17,       hpMin: 221, hpMax: 235,   attack: 8,  dmgMin: 69,  dmgMax: 74,  save: 17 });\r\n        result.push({ cr: 12,       ac: 17,       hpMin: 236, hpMax: 250,   attack: 8,  dmgMin: 75,  dmgMax: 80,  save: 17 });\r\n        result.push({ cr: 13,       ac: 18,       hpMin: 251, hpMax: 265,   attack: 8,  dmgMin: 81,  dmgMax: 86,  save: 18 });\r\n        result.push({ cr: 14,       ac: 18,       hpMin: 266, hpMax: 280,   attack: 8,  dmgMin: 87,  dmgMax: 92,  save: 18 });\r\n        result.push({ cr: 15,       ac: 18,       hpMin: 281, hpMax: 295,   attack: 8,  dmgMin: 93,  dmgMax: 98,  save: 18 });\r\n        result.push({ cr: 16,       ac: 18,       hpMin: 296, hpMax: 310,   attack: 9,  dmgMin: 99,  dmgMax: 104, save: 18 });\r\n        result.push({ cr: 17,       ac: 19,       hpMin: 311, hpMax: 325,   attack: 10, dmgMin: 105, dmgMax: 110, save: 19 });\r\n        result.push({ cr: 18,       ac: 19,       hpMin: 326, hpMax: 340,   attack: 10, dmgMin: 111, dmgMax: 116, save: 19 });\r\n        result.push({ cr: 19,       ac: 19,       hpMin: 341, hpMax: 355,   attack: 10, dmgMin: 117, dmgMax: 122, save: 19 });\r\n        result.push({ cr: 20,       ac: 19,       hpMin: 356, hpMax: 400,   attack: 10, dmgMin: 123, dmgMax: 140, save: 19 });\r\n        result.push({ cr: 21,       ac: 19,       hpMin: 401, hpMax: 445,   attack: 11, dmgMin: 141, dmgMax: 158, save: 20 });\r\n        result.push({ cr: 22,       ac: 19,       hpMin: 446, hpMax: 490,   attack: 11, dmgMin: 159, dmgMax: 176, save: 20 });\r\n        result.push({ cr: 23,       ac: 19,       hpMin: 491, hpMax: 535,   attack: 11, dmgMin: 177, dmgMax: 194, save: 20 });\r\n        result.push({ cr: 24,       ac: 19,       hpMin: 536, hpMax: 580,   attack: 12, dmgMin: 195, dmgMax: 212, save: 21 });\r\n        result.push({ cr: 25,       ac: 19,       hpMin: 581, hpMax: 625,   attack: 12, dmgMin: 213, dmgMax: 230, save: 21 });\r\n        result.push({ cr: 26,       ac: 19,       hpMin: 626, hpMax: 670,   attack: 12, dmgMin: 231, dmgMax: 248, save: 21 });\r\n        result.push({ cr: 27,       ac: 19,       hpMin: 671, hpMax: 715,   attack: 13, dmgMin: 249, dmgMax: 266, save: 22 });\r\n        result.push({ cr: 28,       ac: 19,       hpMin: 716, hpMax: 760,   attack: 13, dmgMin: 267, dmgMax: 284, save: 22 });\r\n        result.push({ cr: 29,       ac: 19,       hpMin: 761, hpMax: 805,   attack: 13, dmgMin: 285, dmgMax: 302, save: 22 });\r\n        result.push({ cr: 30,       ac: 19,       hpMin: 806, hpMax: 850,   attack: 14, dmgMin: 303, dmgMax: 320, save: 23 });\r\n\r\n        return result;\r\n    }\r\n\r\n    public static experience(cr: number): number {\r\n        switch (cr) {\r\n            case 0: return 10;\r\n            case 0.125: return 25;\r\n            case 0.25: return 50;\r\n            case 0.5: return 100;\r\n            case 1: return 200;\r\n            case 2: return 450;\r\n            case 3: return 700;\r\n            case 4: return 1100;\r\n            case 5: return 1800;\r\n            case 6: return 2300;\r\n            case 7: return 2900;\r\n            case 8: return 3900;\r\n            case 9: return 5000;\r\n            case 10: return 5900;\r\n            case 11: return 7200;\r\n            case 12: return 8400;\r\n            case 13: return 10000;\r\n            case 14: return 11500;\r\n            case 15: return 13000;\r\n            case 16: return 15000;\r\n            case 17: return 18000;\r\n            case 18: return 20000;\r\n            case 19: return 22000;\r\n            case 20: return 25000;\r\n            case 21: return 33000;\r\n            case 22: return 41000;\r\n            case 23: return 50000;\r\n            case 24: return 62000;\r\n            case 30: return 155000;\r\n            default: return 0;\r\n        }\r\n    }\r\n\r\n    public static experienceFactor(count: number): number {\r\n        switch (count) {\r\n            case 0:\r\n                return 0;\r\n            case 1:\r\n                return 1;\r\n            case 2:\r\n                return 1.5;\r\n            case 3:\r\n            case 4:\r\n            case 5:\r\n            case 6:\r\n                return 2;\r\n            case 7:\r\n            case 8:\r\n            case 9:\r\n            case 10:\r\n                return 2.5;\r\n            case 11:\r\n            case 12:\r\n            case 13:\r\n            case 14:\r\n                return 3;\r\n            default:\r\n                return 4;\r\n        }\r\n    }\r\n\r\n    public static pcExperience(level: number, difficulty: string): number {\r\n        switch (difficulty) {\r\n            case 'easy':\r\n                switch (level) {\r\n                    case 1: return 25;\r\n                    case 2: return 50;\r\n                    case 3: return 75;\r\n                    case 4: return 125;\r\n                    case 5: return 250;\r\n                    case 6: return 300;\r\n                    case 7: return 350;\r\n                    case 8: return 450;\r\n                    case 9: return 550;\r\n                    case 10: return 600;\r\n                    case 11: return 800;\r\n                    case 12: return 1000;\r\n                    case 13: return 1100;\r\n                    case 14: return 1250;\r\n                    case 15: return 1400;\r\n                    case 16: return 1600;\r\n                    case 17: return 2000;\r\n                    case 18: return 2100;\r\n                    case 19: return 2400;\r\n                    case 20: return 2800;\r\n                    default: return 0;\r\n                }\r\n            case 'medium':\r\n                switch (level) {\r\n                    case 1: return 50;\r\n                    case 2: return 100;\r\n                    case 3: return 150;\r\n                    case 4: return 250;\r\n                    case 5: return 500;\r\n                    case 6: return 600;\r\n                    case 7: return 750;\r\n                    case 8: return 900;\r\n                    case 9: return 1100;\r\n                    case 10: return 1200;\r\n                    case 11: return 1600;\r\n                    case 12: return 2000;\r\n                    case 13: return 2200;\r\n                    case 14: return 2500;\r\n                    case 15: return 2800;\r\n                    case 16: return 3200;\r\n                    case 17: return 3900;\r\n                    case 18: return 4200;\r\n                    case 19: return 4900;\r\n                    case 20: return 5700;\r\n                    default: return 0;\r\n                }\r\n            case 'hard':\r\n                switch (level) {\r\n                    case 1: return 75;\r\n                    case 2: return 150;\r\n                    case 3: return 225;\r\n                    case 4: return 375;\r\n                    case 5: return 750;\r\n                    case 6: return 900;\r\n                    case 7: return 1100;\r\n                    case 8: return 1400;\r\n                    case 9: return 1600;\r\n                    case 10: return 1900;\r\n                    case 11: return 2400;\r\n                    case 12: return 3000;\r\n                    case 13: return 3400;\r\n                    case 14: return 3800;\r\n                    case 15: return 4300;\r\n                    case 16: return 4800;\r\n                    case 17: return 5900;\r\n                    case 18: return 6300;\r\n                    case 19: return 7300;\r\n                    case 20: return 8500;\r\n                    default: return 0;\r\n                }\r\n            case 'deadly':\r\n                switch (level) {\r\n                    case 1: return 100;\r\n                    case 2: return 200;\r\n                    case 3: return 400;\r\n                    case 4: return 500;\r\n                    case 5: return 1100;\r\n                    case 6: return 1400;\r\n                    case 7: return 1700;\r\n                    case 8: return 2100;\r\n                    case 9: return 2400;\r\n                    case 10: return 2800;\r\n                    case 11: return 3600;\r\n                    case 12: return 4500;\r\n                    case 13: return 5100;\r\n                    case 14: return 5700;\r\n                    case 15: return 6400;\r\n                    case 16: return 7200;\r\n                    case 17: return 8800;\r\n                    case 18: return 9500;\r\n                    case 19: return 10900;\r\n                    case 20: return 12700;\r\n                    default: return 0;\r\n                }\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n\r\n    public static traitType(type: string, plural: boolean): string {\r\n        let str = '';\r\n        switch (type) {\r\n            case 'trait':\r\n                str = 'trait';\r\n                break;\r\n            case 'action':\r\n                str = 'action';\r\n                break;\r\n            case 'legendary':\r\n                str = 'legendary action';\r\n                break;\r\n            case 'lair':\r\n                str = 'lair action';\r\n                break;\r\n            case 'regional':\r\n                str = 'regional effect';\r\n                break;\r\n        }\r\n\r\n        if (plural) {\r\n            str += 's';\r\n        }\r\n\r\n        return str;\r\n    }\r\n\r\n    public static nudgeChallenge(value: number, delta: number): number {\r\n        let result = 0;\r\n\r\n        switch (value) {\r\n            case 0:\r\n                if (delta === -1) {\r\n                    result = 0;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 0.125;\r\n                }\r\n                break;\r\n            case 0.125:\r\n                if (delta === -1) {\r\n                    result = 0;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 0.25;\r\n                }\r\n                break;\r\n            case 0.25:\r\n                if (delta === -1) {\r\n                    result = 0.125;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 0.5;\r\n                }\r\n                break;\r\n            case 0.5:\r\n                if (delta === -1) {\r\n                    result = 0.25;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 1;\r\n                }\r\n                break;\r\n            case 1:\r\n                if (delta === -1) {\r\n                    result = 0.5;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 2;\r\n                }\r\n                break;\r\n            default:\r\n                result = value + delta;\r\n                break;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public static conditionText(condition: Condition): string[] {\r\n        switch (condition.name) {\r\n            case 'blinded':\r\n                return [\r\n                    'a blinded creature can’t see and automatically fails any ability check that requires sight',\r\n                    'attack rolls against the creature have advantage, and the creature’s attack rolls have disadvantage'\r\n                ];\r\n            case 'charmed':\r\n                return [\r\n                    'a charmed creature can’t attack the charmer or target the charmer with harmful abilities or magical effects',\r\n                    'the charmer has advantage on any ability check to interact socially with the creature'\r\n                ];\r\n            case 'deafened':\r\n                return [\r\n                    'a deafened creature can’t hear and automatically fails any ability check that requires hearing.'\r\n                ];\r\n            case 'exhaustion': {\r\n                switch (condition.level) {\r\n                case 1:\r\n                    return [\r\n                        'disadvantage on ability checks'\r\n                    ];\r\n                case 2:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved'\r\n                    ];\r\n                case 3:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved',\r\n                        'disadvantage on attack rolls and saving throws'\r\n                    ];\r\n                case 4:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved',\r\n                        'disadvantage on attack rolls and saving throws',\r\n                        'hit point maximum halved'\r\n                    ];\r\n                case 5:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved',\r\n                        'disadvantage on attack rolls and saving throws',\r\n                        'hit point maximum halved',\r\n                        'speed reduced to 0'\r\n                    ];\r\n                case 6:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved',\r\n                        'disadvantage on attack rolls and saving throws',\r\n                        'hit point maximum halved',\r\n                        'speed reduced to 0',\r\n                        'death'\r\n                    ];\r\n                default:\r\n                    return [];\r\n                }\r\n            }\r\n            case 'frightened':\r\n                return [\r\n                    'a frightened creature has disadvantage on ability checks and attack rolls while the source of its fear is within line of sight',\r\n                    'the creature can’t willingly move closer to the source of its fear'\r\n                ];\r\n            case 'grappled':\r\n                return [\r\n                    'a grappled creature’s speed becomes 0, and it can’t benefit from any bonus to its speed',\r\n                    'the condition ends if the grappler is incapacitated',\r\n                    'the condition also ends if an effect removes the grappled creature from the reach of the grappler or grappling effect'\r\n                ];\r\n            case 'incapacitated':\r\n                return [\r\n                    'an incapacitated creature can’t take actions or reactions'\r\n                ];\r\n            case 'invisible':\r\n                return [\r\n                    'an invisible creature is impossible to see without the aid of magic or a special sense',\r\n                    'for the purpose of hiding, the creature is heavily obscured',\r\n                    'the creature’s location can be detected by any noise it makes or any tracks it leaves',\r\n                    'attack rolls against the creature have disadvantage, and the creature’s attack rolls have advantage'\r\n                ];\r\n            case 'paralyzed':\r\n                return [\r\n                    'a paralyzed creature is incapacitated (can’t take actions or reactions) and can’t move or speak',\r\n                    'the creature automatically fails strength and dexterity saving throws',\r\n                    'attack rolls against the creature have advantage',\r\n                    'any attack that hits the creature is a critical hit if the attacker is within 5 feet of the creature'\r\n                ];\r\n            case 'petrified':\r\n                return [\r\n                    /* tslint:disable-next-line:max-line-length */\r\n                    'a petrified creature is transformed, along with any nonmagical objects it is wearing or carrying, into a solid inanimate substance (usually stone)',\r\n                    'its weight increases by a factor of ten, and it ceases aging',\r\n                    'the creature is incapacitated (can’t take actions or reactions), can’t move or speak, and is unaware of its surroundings',\r\n                    'attack rolls against the creature have advantage',\r\n                    'the creature automatically fails strength and dexterity saving throws',\r\n                    'the creature has resistance to all damage',\r\n                    'the creature is immune to poison and disease, although a poison or disease already in its system is suspended, not neutralized'\r\n                ];\r\n            case 'poisoned':\r\n                return [\r\n                    'a poisoned creature has disadvantage on attack rolls and ability checks'\r\n                ];\r\n            case 'prone':\r\n                return [\r\n                    'a prone creature’s only movement option is to crawl, unless it stands up and thereby ends the condition',\r\n                    'the creature has disadvantage on attack rolls',\r\n                    /* tslint:disable-next-line:max-line-length */\r\n                    'an attack roll against the creature has advantage if the attacker is Within 5 feet of the creature; otherwise, the attack roll has disadvantage'\r\n                ];\r\n            case 'restrained':\r\n                return [\r\n                    'a restrained creature’s speed becomes 0, and it can’t benefit from any bonus to its speed',\r\n                    'attack rolls against the creature have advantage, and the creature’s attack rolls have disadvantage',\r\n                    'the creature has disadvantage on dexterity saving throws'\r\n                ];\r\n            case 'stunned':\r\n                return [\r\n                    'a stunned creature is incapacitated (can’t take actions or reactions), can’t move, and can speak only falteringly',\r\n                    'the creature automatically fails strength and dexterity saving throws',\r\n                    'attack rolls against the creature have advantage'\r\n                ];\r\n            case 'unconscious':\r\n                return [\r\n                    'an unconscious creature is incapacitated (can’t take actions or reactions), can’t move or speak, and is unaware of its surroundings',\r\n                    'the creature drops whatever its holding and falls prone',\r\n                    'the creature automatically fails strength and dexterity saving throws',\r\n                    'attack rolls against the creature have advantage',\r\n                    'any attack that hits the creature is a critical hit if the attacker is within 5 feet of the creature'\r\n                ];\r\n            case 'custom':\r\n                return [];\r\n            default:\r\n                return [];\r\n        }\r\n    }\r\n\r\n    public static conditionDurationText(condition: Condition, combat: Combat) {\r\n        if (condition.duration !== null) {\r\n            switch (condition.duration.type) {\r\n                case 'saves':\r\n                    const saveDuration = condition.duration as ConditionDurationSaves;\r\n                    let saveType = saveDuration.saveType.toString();\r\n                    if (saveType !== 'death') {\r\n                        saveType = saveType.toUpperCase();\r\n                    }\r\n                    const saves = saveDuration.count > 1 ? 'saves' : 'save';\r\n                    return 'until you make ' + saveDuration.count + ' ' + saveType + ' ' + saves + ' at dc ' + saveDuration.saveDC;\r\n                case 'combatant':\r\n                    const combatantDuration = condition.duration as ConditionDurationCombatant;\r\n                    const point = combatantDuration.point;\r\n                    const c = combat.combatants.find(cmb => cmb.id === combatantDuration.combatantID);\r\n                    const combatant = c ? (c.displayName || c.name || 'unnamed monster') + '\\'s' : 'someone\\'s';\r\n                    return 'until the ' + point + ' of ' + combatant + ' next turn';\r\n                case 'rounds':\r\n                    const roundsDuration = condition.duration as ConditionDurationRounds;\r\n                    const rounds = roundsDuration.count > 1 ? 'rounds' : 'round';\r\n                    return 'for ' + roundsDuration.count + ' ' + rounds;\r\n                default:\r\n                    return null;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public static getMonsterNames(encounter: Encounter | EncounterWave): { id: string, names: string[] }[] {\r\n        const monsterNames: any[] = [];\r\n        if (encounter) {\r\n            encounter.slots.forEach(slot => {\r\n                const names: any[] = [];\r\n                if (slot.count === 1) {\r\n                    names.push(slot.monsterName);\r\n                } else {\r\n                    for (let n = 0; n !== slot.count; ++n) {\r\n                        names.push(slot.monsterName + ' ' + (n + 1));\r\n                    }\r\n                }\r\n\r\n                monsterNames.push({\r\n                    id: slot.id,\r\n                    names: names\r\n                });\r\n            });\r\n        }\r\n\r\n        return monsterNames;\r\n    }\r\n}\r\n","import Utils from './utils';\r\n\r\nimport { Combat, CombatSetup, Notification } from '../models/combat';\r\nimport { Condition, ConditionDurationCombatant, ConditionDurationRounds, ConditionDurationSaves } from '../models/condition';\r\nimport { Encounter, EncounterSlot, EncounterWave } from '../models/encounter';\r\nimport { Map, MapFolio, MapItem } from '../models/map-folio';\r\nimport { Monster, MonsterGroup, Trait } from '../models/monster-group';\r\nimport { Party, PC } from '../models/party';\r\n\r\nexport default class Factory {\r\n\r\n    public static createParty(): Party {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            pcs: []\r\n        };\r\n    }\r\n\r\n    public static createPC(): PC {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'pc',\r\n            active: true,\r\n            player: '',\r\n            name: '',\r\n            race: '',\r\n            classes: '',\r\n            level: 1,\r\n            languages: 'Common',\r\n            passiveInsight: 10,\r\n            passiveInvestigation: 10,\r\n            passivePerception: 10,\r\n            initiative: 10,\r\n            url: ''\r\n        };\r\n    }\r\n\r\n    public static createMonsterGroup(): MonsterGroup {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            monsters: []\r\n        };\r\n    }\r\n\r\n    public static createMonster(): Monster {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'monster',\r\n            name: '',\r\n            size: 'medium',\r\n            category: 'humanoid',\r\n            tag: '',\r\n            alignment: '',\r\n            challenge: 1,\r\n            abilityScores: {\r\n                str: 10,\r\n                dex: 10,\r\n                con: 10,\r\n                int: 10,\r\n                wis: 10,\r\n                cha: 10\r\n            },\r\n            ac: 10,\r\n            hpMax: 4,\r\n            hpTemp: 0,\r\n            hitDice: 1,\r\n            damage: {\r\n                resist: '',\r\n                vulnerable: '',\r\n                immune: ''\r\n            },\r\n            savingThrows: '',\r\n            speed: '',\r\n            skills: '',\r\n            senses: '',\r\n            languages: '',\r\n            equipment: '',\r\n            traits: [],\r\n            conditionImmunities: ''\r\n        };\r\n    }\r\n\r\n    public static createTrait(): Trait {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            usage: '',\r\n            type: 'action',\r\n            text: '',\r\n            uses: 0\r\n        };\r\n    }\r\n\r\n    public static createEncounter(): Encounter {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            slots: [],\r\n            waves: []\r\n        };\r\n    }\r\n\r\n    public static createEncounterSlot(): EncounterSlot {\r\n        return {\r\n            id: Utils.guid(),\r\n            monsterGroupName: '',\r\n            monsterName: '',\r\n            count: 1\r\n        };\r\n    }\r\n\r\n    public static createEncounterWave(): EncounterWave {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            slots: []\r\n        };\r\n    }\r\n\r\n    public static createMapFolio(): MapFolio {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            maps: []\r\n        };\r\n    }\r\n\r\n    public static createMap(): Map {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            items: []\r\n        };\r\n    }\r\n\r\n    public static createMapItem(): MapItem {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'tile',\r\n            x: 0,\r\n            y: 0,\r\n            width: 4,\r\n            height: 4,\r\n            terrain: null\r\n        };\r\n    }\r\n\r\n    public static createCombatSetup(): CombatSetup {\r\n        return {\r\n            partyID: null,\r\n            encounterID: null,\r\n            waveID: null,\r\n            folioID: null,\r\n            mapID: null,\r\n            monsterNames: [],\r\n            encounterInitMode: 'group'\r\n        };\r\n    }\r\n\r\n    public static createCombat(): Combat {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            encounterID: null,\r\n            combatants: [],\r\n            map: null,\r\n            round: 1,\r\n            notifications: [],\r\n            issues: [],\r\n            timestamp: null\r\n        };\r\n    }\r\n\r\n    public static createNotification(): Notification {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'condition-save',\r\n            data: null,\r\n            combatant: null\r\n        };\r\n    }\r\n\r\n    public static createCondition(): Condition {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            level: 1,\r\n            text: null,\r\n            duration: null\r\n        };\r\n    }\r\n\r\n    public static createConditionDurationSaves(): ConditionDurationSaves {\r\n        return {\r\n            type: 'saves',\r\n            count: 1,\r\n            saveType: 'str',\r\n            saveDC: 10,\r\n            point: 'start'\r\n        };\r\n    }\r\n\r\n    public static createConditionDurationCombatant(): ConditionDurationCombatant {\r\n        return {\r\n            type: 'combatant',\r\n            point: 'start',\r\n            combatantID: null\r\n        };\r\n    }\r\n\r\n    public static createConditionDurationRounds(): ConditionDurationRounds {\r\n        return {\r\n            type: 'rounds',\r\n            count: 1\r\n        };\r\n    }\r\n}\r\n","export interface MonsterGroup {\r\n    id: string;\r\n    name: string;\r\n    monsters: Monster[];\r\n}\r\n\r\nexport interface Monster {\r\n    id: string;\r\n    type: string;\r\n    name: string;\r\n    size: string;\r\n    category: string;\r\n    tag: string;\r\n    alignment: string;\r\n    challenge: number;\r\n    abilityScores: {\r\n        str: number;\r\n        dex: number;\r\n        con: number;\r\n        int: number;\r\n        wis: number;\r\n        cha: number;\r\n    };\r\n    ac: number;\r\n    hpMax: number;\r\n    hpTemp: number;\r\n    hitDice: number;\r\n    damage: {\r\n        resist: string;\r\n        vulnerable: string;\r\n        immune: string;\r\n    };\r\n    savingThrows: string;\r\n    speed: string;\r\n    skills: string;\r\n    senses: string;\r\n    languages: string;\r\n    equipment: string;\r\n    traits: Trait[];\r\n    conditionImmunities: string;\r\n}\r\n\r\nexport interface Trait {\r\n    id: string;\r\n    name: string;\r\n    usage: string;\r\n    type: 'trait' | 'action' | 'legendary' | 'lair' | 'regional';\r\n    text: string;\r\n    uses: number;\r\n}\r\n\r\nexport const SIZE_TYPES = [\r\n    'tiny',\r\n    'small',\r\n    'medium',\r\n    'large',\r\n    'huge',\r\n    'gargantuan'\r\n];\r\n\r\nexport const CATEGORY_TYPES = [\r\n    'aberration',\r\n    'beast',\r\n    'celestial',\r\n    'construct',\r\n    'dragon',\r\n    'elemental',\r\n    'fey',\r\n    'fiend',\r\n    'giant',\r\n    'humanoid',\r\n    'monstrosity',\r\n    'ooze',\r\n    'plant',\r\n    'undead'\r\n];\r\n\r\nexport const TRAIT_TYPES = [\r\n    'trait',\r\n    'action',\r\n    'legendary',\r\n    'lair',\r\n    'regional'\r\n];\r\n","import Factory from './factory';\r\nimport Utils from './utils';\r\n\r\nimport { Monster, Trait, TRAIT_TYPES } from '../models/monster-group';\r\n\r\nexport default class Frankenstein {\r\n    public static nudgeValue(target: Monster, field: string, delta: number) {\r\n        let source: any = target;\r\n        let value: any = null;\r\n        const tokens = field.split('.');\r\n        tokens.forEach(token => {\r\n            if (token === tokens[tokens.length - 1]) {\r\n                value = source[token];\r\n            } else {\r\n                source = source[token];\r\n            }\r\n        });\r\n\r\n        const newValue = (field === 'challenge') ? Utils.nudgeChallenge(value, delta) : (value ? value : 0) + delta;\r\n        Frankenstein.changeValue(target, field, newValue);\r\n    }\r\n\r\n    public static changeValue(target: Monster, field: string, value: any) {\r\n        let source: any = target;\r\n        const tokens = field.split('.');\r\n        tokens.forEach(token => {\r\n            if (token === tokens[tokens.length - 1]) {\r\n                source[token] = value;\r\n\r\n                if ((field === 'abilityScores.con') || (field === 'size') || (field === 'hitDice')) {\r\n                    const sides = Utils.hitDieType(target.size);\r\n                    const conMod = Math.floor((target.abilityScores.con - 10) / 2);\r\n                    const hpPerDie = ((sides + 1) / 2) + conMod;\r\n                    const hp = Math.floor(target.hitDice * hpPerDie);\r\n                    target.hpMax = hp;\r\n                }\r\n            } else {\r\n                source = source[token];\r\n            }\r\n        });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Monster creation\r\n\r\n    public static clone(monster: Monster, name: string): Monster {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'monster',\r\n            name: name || (monster.name + ' copy'),\r\n            size: monster.size,\r\n            category: monster.category,\r\n            tag: monster.tag,\r\n            alignment: monster.alignment,\r\n            challenge: monster.challenge,\r\n            abilityScores: {\r\n                str: monster.abilityScores.str,\r\n                dex: monster.abilityScores.dex,\r\n                con: monster.abilityScores.con,\r\n                int: monster.abilityScores.int,\r\n                wis: monster.abilityScores.wis,\r\n                cha: monster.abilityScores.cha\r\n            },\r\n            ac: monster.ac,\r\n            hpMax: monster.hpMax,\r\n            hpTemp: monster.hpTemp,\r\n            hitDice: monster.hitDice,\r\n            damage: {\r\n                resist: monster.damage.resist,\r\n                vulnerable: monster.damage.vulnerable,\r\n                immune: monster.damage.immune\r\n            },\r\n            savingThrows: monster.savingThrows,\r\n            speed: monster.speed,\r\n            skills: monster.skills,\r\n            senses: monster.senses,\r\n            languages: monster.languages,\r\n            equipment: monster.equipment,\r\n            traits: monster.traits.map(trait => {\r\n                return {\r\n                    id: Utils.guid(),\r\n                    name: trait.name,\r\n                    usage: trait.usage,\r\n                    type: trait.type,\r\n                    text: trait.text,\r\n                    uses: 0\r\n                };\r\n            }),\r\n            conditionImmunities: monster.conditionImmunities\r\n        };\r\n    }\r\n\r\n    public static createFromJSON(data: any): Monster {\r\n        const monster = Factory.createMonster();\r\n\r\n        monster.type = 'monster';\r\n        monster.name = data.name;\r\n        monster.size = data.size.toLowerCase();\r\n        monster.category = data.type;\r\n        monster.tag = data.subtype;\r\n        monster.alignment = data.alignment;\r\n        monster.challenge = Utils.parseChallenge(data.challenge_rating);\r\n        monster.ac = data.armor_class;\r\n        monster.hpMax = data.hit_points;\r\n        monster.speed = data.speed;\r\n        monster.senses = data.senses;\r\n        monster.languages = data.languages;\r\n\r\n        const index = data.hit_dice.indexOf('d');\r\n        monster.hitDice = parseInt(data.hit_dice.substring(0, index), 10);\r\n\r\n        monster.abilityScores.str = data.strength;\r\n        monster.abilityScores.dex = data.dexterity;\r\n        monster.abilityScores.con = data.constitution;\r\n        monster.abilityScores.int = data.intelligence;\r\n        monster.abilityScores.wis = data.wisdom;\r\n        monster.abilityScores.cha = data.charisma;\r\n\r\n        monster.damage.resist = data.damage_resistances;\r\n        monster.damage.vulnerable = data.damage_vulnerabilities;\r\n        monster.damage.immune = data.damage_immunities;\r\n        monster.conditionImmunities = data.condition_immunities;\r\n\r\n        const saves = [\r\n            {\r\n                field: 'strength_save',\r\n                text: 'Strength'\r\n            },\r\n            {\r\n                field: 'dexterity_save',\r\n                text: 'Dexterity'\r\n            },\r\n            {\r\n                field: 'constitution_save',\r\n                text: 'Constitution'\r\n            },\r\n            {\r\n                field: 'intelligence_save',\r\n                text: 'Intelligence'\r\n            },\r\n            {\r\n                field: 'wisdom_save',\r\n                text: 'Wisdom'\r\n            },\r\n            {\r\n                field: 'charisma_save',\r\n                text: 'Charisma'\r\n            }\r\n        ];\r\n        saves.forEach(save => {\r\n            if (data[save.field]) {\r\n                const str = save.text + ' ' + data[save.field];\r\n                monster.savingThrows += monster.savingThrows === '' ? str : ', ' + str;\r\n            }\r\n        });\r\n\r\n        const skills = [\r\n            {\r\n                field: 'acrobatics',\r\n                text: 'Acrobatics'\r\n            },\r\n            {\r\n                field: 'animal_handling',\r\n                text: 'Animal handling'\r\n            },\r\n            {\r\n                field: 'arcana',\r\n                text: 'Arcana'\r\n            },\r\n            {\r\n                field: 'athletics',\r\n                text: 'Athletics'\r\n            },\r\n            {\r\n                field: 'deception',\r\n                text: 'Deception'\r\n            },\r\n            {\r\n                field: 'history',\r\n                text: 'History'\r\n            },\r\n            {\r\n                field: 'insight',\r\n                text: 'Insight'\r\n            },\r\n            {\r\n                field: 'intimidation',\r\n                text: 'Intimidation'\r\n            },\r\n            {\r\n                field: 'investigation',\r\n                text: 'Investigation'\r\n            },\r\n            {\r\n                field: 'medicine',\r\n                text: 'Medicine'\r\n            },\r\n            {\r\n                field: 'nature',\r\n                text: 'Nature'\r\n            },\r\n            {\r\n                field: 'perception',\r\n                text: 'Perception'\r\n            },\r\n            {\r\n                field: 'performance',\r\n                text: 'Performance'\r\n            },\r\n            {\r\n                field: 'persuasion',\r\n                text: 'Persuasion'\r\n            },\r\n            {\r\n                field: 'religion',\r\n                text: 'Religion'\r\n            },\r\n            {\r\n                field: 'sleight_of_hand',\r\n                text: 'Sleight of hand'\r\n            },\r\n            {\r\n                field: 'stealth',\r\n                text: 'Stealth'\r\n            },\r\n            {\r\n                field: 'survival',\r\n                text: 'Survival'\r\n            }\r\n        ];\r\n        skills.forEach(skill => {\r\n            if (data[skill.field]) {\r\n                const str = skill.text + ' ' + data[skill.field];\r\n                monster.skills += monster.skills === '' ? str : ', ' + str;\r\n            }\r\n        });\r\n\r\n        if (data.special_abilities) {\r\n            data.special_abilities.forEach((rawTrait: any) => {\r\n                const trait = this.buildTrait(rawTrait, 'trait');\r\n                monster.traits.push(trait);\r\n            });\r\n        }\r\n        if (data.actions) {\r\n            data.actions.forEach((rawTrait: any) => {\r\n                const trait = this.buildTrait(rawTrait, 'action');\r\n                monster.traits.push(trait);\r\n            });\r\n        }\r\n        if (data.legendary_actions) {\r\n            data.legendary_actions.forEach((rawTrait: any) => {\r\n                const trait = this.buildTrait(rawTrait, 'legendary');\r\n                monster.traits.push(trait);\r\n            });\r\n        }\r\n\r\n        return monster;\r\n    }\r\n\r\n    private static buildTrait(rawTrait: any, type: 'trait' | 'action' | 'legendary' | 'lair' | 'regional'): Trait {\r\n        let name = '';\r\n        let usage = '';\r\n\r\n        const openBracket = rawTrait.name.indexOf('(');\r\n        if (openBracket === -1) {\r\n            name = rawTrait.name;\r\n        } else {\r\n            const closeBracket = rawTrait.name.indexOf(')');\r\n            name = rawTrait.name.substring(0, openBracket - 1);\r\n            usage = rawTrait.name.substring(openBracket + 1, closeBracket).toLowerCase();\r\n        }\r\n\r\n        const text = rawTrait.desc.replace(/•/g, '*');\r\n\r\n        return {\r\n            id: Utils.guid(),\r\n            type: type,\r\n            name: name,\r\n            usage: usage,\r\n            text: text,\r\n            uses: 0\r\n        };\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Traits\r\n\r\n    public static copyTrait(target: Monster, trait: Trait) {\r\n        const copy = JSON.parse(JSON.stringify(trait));\r\n        copy.id = Utils.guid();\r\n        target.traits.push(copy);\r\n    }\r\n\r\n    public static addTrait(target: Monster, type: 'trait' | 'action' | 'legendary' | 'lair' | 'regional') {\r\n        const trait = Factory.createTrait();\r\n        trait.type = type;\r\n        trait.name = 'New ' + Utils.traitType(type, false).toLowerCase();\r\n        target.traits.push(trait);\r\n    }\r\n\r\n    public static removeTrait(target: Monster, trait: Trait) {\r\n        const index = target.traits.indexOf(trait);\r\n        target.traits.splice(index, 1);\r\n    }\r\n\r\n    public static swapTraits(target: Monster, t1: Trait, t2: Trait) {\r\n        const index1 = target.traits.indexOf(t1);\r\n        const index2 = target.traits.indexOf(t2);\r\n        target.traits[index2] = t1;\r\n        target.traits[index1] = t2;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Randomisation\r\n\r\n    public static spliceMonsters(target: Monster, monsters: Monster[]) {\r\n        const fields = [\r\n            'size',\r\n            'category',\r\n            'tag',\r\n            'alignment',\r\n            'challenge',\r\n            'speed',\r\n            'senses',\r\n            'languages',\r\n            'equipment',\r\n            'abilityScores.str',\r\n            'abilityScores.dex',\r\n            'abilityScores.con',\r\n            'abilityScores.int',\r\n            'abilityScores.wis',\r\n            'abilityScores.cha',\r\n            'savingThrows',\r\n            'skills',\r\n            'ac',\r\n            'hitDice',\r\n            'damage.resist',\r\n            'damage.vulnerable',\r\n            'damage.immune',\r\n            'conditionImmunities'\r\n        ];\r\n        fields.forEach(field => {\r\n            this.setRandomValue(target, field, monsters);\r\n        });\r\n\r\n        target.traits = [];\r\n\r\n        TRAIT_TYPES.forEach(type => {\r\n            // Get all traits of this type\r\n            const traits: Trait[] = [];\r\n            monsters.forEach(m => {\r\n                m.traits.filter(t => t.type === type)\r\n                    .forEach(t => traits.push(t));\r\n            });\r\n\r\n            // Collate by name\r\n            const distinct: { trait: Trait, count: number }[] = [];\r\n            traits.forEach(t => {\r\n                const current = distinct.find(d => d.trait.name === t.name);\r\n                if (current) {\r\n                    current.count += 1;\r\n                } else {\r\n                    distinct.push({\r\n                        trait: t,\r\n                        count: 1\r\n                    });\r\n                }\r\n            });\r\n\r\n            // If any are common to all monsters, copy them and remove from the candidates\r\n            const addedIDs: string[] = [];\r\n            distinct.filter(d => d.count === monsters.length)\r\n                .forEach(d => {\r\n                    this.copyTrait(target, d.trait);\r\n                    addedIDs.push(d.trait.id);\r\n                });\r\n            addedIDs.forEach(id => {\r\n                const index = distinct.findIndex(d => d.trait.id === id);\r\n                distinct.splice(index, 1);\r\n            });\r\n\r\n            const avg = traits.length / monsters.length;\r\n            while (target.traits.filter(t => t.type === type).length < avg) {\r\n                const index = Math.floor(Math.random() * distinct.length);\r\n                const t = distinct[index].trait;\r\n                this.copyTrait(target, t);\r\n                distinct.splice(index, 1);\r\n            }\r\n        });\r\n    }\r\n\r\n    public static setRandomValue(target: Monster, field: string, monsters: Monster[]) {\r\n        const index = Math.floor(Math.random() * monsters.length);\r\n        const m = monsters[index];\r\n\r\n        let source: any = m;\r\n        let value = null;\r\n        const tokens = field.split('.');\r\n        tokens.forEach(token => {\r\n            if (token === tokens[tokens.length - 1]) {\r\n                value = source[token];\r\n            } else {\r\n                source = source[token];\r\n            }\r\n        });\r\n\r\n        this.changeValue(target, field, value);\r\n    }\r\n\r\n    public static addRandomTrait(target: Monster, type: string, monsters: Monster[]) {\r\n        const traits: Trait[] = [];\r\n        monsters.forEach(m => {\r\n            m.traits.filter(t => t.type === type)\r\n                .forEach(t => {\r\n                    traits.push(t);\r\n                });\r\n        });\r\n\r\n        const index = Math.floor(Math.random() * traits.length);\r\n        const trait = traits[index];\r\n\r\n        this.copyTrait(target, trait);\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport warning from '../../resources/images/warning.svg';\r\n\r\ninterface Props {\r\n    text: string;\r\n    callback: () => void;\r\n    details: string;\r\n    disabled: boolean;\r\n}\r\n\r\ninterface State {\r\n    pressed: boolean;\r\n}\r\n\r\nexport default class ConfirmButton extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        details: null,\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            pressed: false\r\n        };\r\n    }\r\n\r\n    private toggle() {\r\n        this.setState({\r\n            pressed: !this.state.pressed\r\n        });\r\n    }\r\n\r\n    private perform() {\r\n        this.toggle();\r\n        this.props.callback();\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let content = null;\r\n            if (this.state.pressed) {\r\n                content = (\r\n                    <div>\r\n                        <div className='title'>{this.props.text} - are you sure?</div>\r\n                        <img className='image' src={warning} alt='warning' />\r\n                        {this.props.details ? <div className='details'>{this.props.details}</div> : null}\r\n                        <div className='confirmation'>\r\n                            <div className='destructive' onClick={() => this.perform()}>yes</div>\r\n                            <div className='non-destructive' onClick={() => this.toggle()}>no</div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                content = (\r\n                    <div>\r\n                        <div className='title'>{this.props.text}</div>\r\n                        <img className='image' src={warning} alt='warning' />\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <button className={this.props.disabled ? 'disabled' : ''} onClick={() => this.toggle()}>\r\n                    {content}\r\n                </button>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    controls: JSX.Element[];\r\n    disabled: boolean;\r\n}\r\n\r\nexport default class ControlRow extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        disabled: false\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'control-row';\r\n            if (this.props.disabled) {\r\n                style += ' disabled';\r\n            }\r\n            switch (this.props.controls.length) {\r\n                case 1:\r\n                    style += ' one';\r\n                    break;\r\n                case 2:\r\n                    style += ' two';\r\n                    break;\r\n                case 3:\r\n                    style += ' three';\r\n                    break;\r\n                case 4:\r\n                    style += ' four';\r\n                    break;\r\n                case 5:\r\n                    style += ' five';\r\n                    break;\r\n            }\r\n\r\n            return (\r\n                <div className={style}>\r\n                    {this.props.controls}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport ellipsis from '../../resources/images/ellipsis.svg';\r\n\r\ninterface Props {\r\n    options: { id: string; text: string; disabled?: boolean }[];\r\n    select: (optionID: string) => void;\r\n    selectedID: string;\r\n    placeholder: string;\r\n    disabled: boolean;\r\n}\r\n\r\ninterface State {\r\n    open: boolean;\r\n}\r\n\r\nexport default class Dropdown extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        selectedID: null,\r\n        placeholder: 'select...',\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            open: false\r\n        };\r\n    }\r\n\r\n    private toggleOpen(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        this.setState({\r\n            open: !this.state.open\r\n        });\r\n    }\r\n\r\n    private select(optionID: string) {\r\n        this.setState({\r\n            open: false\r\n        });\r\n        this.props.select(optionID);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            if (this.props.options.length === 0) {\r\n                return null;\r\n            }\r\n\r\n            let style = this.props.disabled ? 'dropdown disabled' : 'dropdown';\r\n            const content = [];\r\n\r\n            let selectedText;\r\n            if (this.props.selectedID) {\r\n                const option: { id: string; text: string; disabled?: boolean } | undefined = this.props.options.find(o => o.id === this.props.selectedID);\r\n                if (option) {\r\n                    selectedText = option.text;\r\n                }\r\n            } else {\r\n                selectedText = /*this.props.text ||*/ this.props.placeholder;\r\n            }\r\n\r\n            content.push(\r\n                <div key='selection' className='dropdown-top' title={selectedText}>\r\n                    <div className='item-text'>{selectedText}</div>\r\n                    <img className='arrow' src={ellipsis} alt='arrow' />\r\n                </div>\r\n            );\r\n\r\n            if (this.state.open) {\r\n                style += ' open';\r\n\r\n                const items = this.props.options.map(option => {\r\n                    if (option.text === null) {\r\n                        return <div key={option.id} className='divider' />;\r\n                    } else {\r\n                        return (\r\n                            <DropdownOption\r\n                                key={option.id}\r\n                                option={option}\r\n                                selected={option.id === this.props.selectedID}\r\n                                select={optionID => this.select(optionID)}\r\n                            />\r\n                        );\r\n                    }\r\n                });\r\n\r\n                content.push(\r\n                    <div key='options' className='dropdown-options'>\r\n                        {items}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={style} onClick={e => this.toggleOpen(e)}>\r\n                    {content}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface DropdownOptionProps {\r\n    option: { id: string; text: string; disabled?: boolean };\r\n    selected: boolean;\r\n    select: (optionID: string) => void;\r\n}\r\n\r\nclass DropdownOption extends React.Component<DropdownOptionProps> {\r\n    private click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (!this.props.option.disabled) {\r\n            this.props.select(this.props.option.id);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'dropdown-option';\r\n            if (this.props.selected) {\r\n                style += ' selected';\r\n            }\r\n            if (this.props.option.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            return (\r\n                <div className={style} title={this.props.option.text} onClick={e => this.click(e)}>\r\n                    {this.props.option.text}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport arrow from '../../resources/images/down-arrow-black.svg';\r\n\r\ninterface Props {\r\n    text: string;\r\n    content: string | JSX.Element;\r\n    disabled: boolean;\r\n}\r\n\r\ninterface State {\r\n    expanded: boolean;\r\n}\r\n\r\nexport default class Expander extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            expanded: false\r\n        };\r\n    }\r\n\r\n    private toggle() {\r\n        this.setState({\r\n            expanded: !this.state.expanded\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = this.props.disabled ? 'expander disabled' : 'expander';\r\n            if (this.state.expanded) {\r\n                style += ' expanded';\r\n            }\r\n\r\n            let content = null;\r\n            if (this.state.expanded) {\r\n                content = (\r\n                    <div className='expander-content'>\r\n                        {this.props.content}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={style}>\r\n                    <div className='expander-header' onClick={() => this.toggle()}>\r\n                        <div className='expander-text'>{this.props.text}</div>\r\n                        <img className='expander-button' src={arrow} alt='arrow' />\r\n                    </div>\r\n                    {content}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport arrow from '../../resources/images/down-arrow-black.svg';\r\n\r\ninterface Props {\r\n    click: (dir: string, dir2: 'in' | 'out' | null) => void;\r\n    direction: 'out' | 'in' | 'both' | 'eight';\r\n    disabled: boolean;\r\n}\r\n\r\nexport default class Radial extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        direction: 'out',\r\n        disabled: false\r\n    };\r\n\r\n    private click(e: React.MouseEvent, dir: string, dir2: 'in' | 'out' | null = null) {\r\n        e.stopPropagation();\r\n        this.props.click(dir, dir2);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'radial ' + (this.props.direction || 'out');\r\n            if (this.props.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            const showOut = (this.props.direction === 'out') || (this.props.direction === 'both') || (this.props.direction === 'eight');\r\n            const showIn = (this.props.direction === 'in') || (this.props.direction === 'both');\r\n            const showDiag = (this.props.direction === 'eight');\r\n\r\n            return (\r\n                <div className={style}>\r\n                    <div className='empty' style={{ display: showDiag ? 'none' : 'inline-block' }} />\r\n                    <div className='btn diag' style={{ display: showDiag ? 'inline-block' : 'none' }}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(135deg)' }}\r\n                            alt='nw'\r\n                            onClick={e => this.click(e, 'NW')}\r\n                        />\r\n                    </div>\r\n                    <div className='btn'>\r\n                        <div>\r\n                            <img\r\n                                src={arrow}\r\n                                style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(180deg)' }}\r\n                                alt='n'\r\n                                onClick={e => this.click(e, 'N', 'out')}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <img\r\n                                src={arrow}\r\n                                style={{ display: showIn ? 'inline-block' : 'none' }}\r\n                                alt='n'\r\n                                onClick={e => this.click(e, 'N', 'in')}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className='empty' style={{ display: showDiag ? 'none' : 'inline-block' }} />\r\n                    <div className='btn diag' style={{ display: showDiag ? 'inline-block' : 'none' }}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(-135deg)' }}\r\n                            alt='ne'\r\n                            onClick={e => this.click(e, 'NE')}\r\n                        />\r\n                    </div>\r\n                    <div className='btn' style={{ padding: (showIn && showOut) ? '10px 0' : '0'}}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(90deg)' }}\r\n                            alt='w'\r\n                            onClick={e => this.click(e, 'W', 'out')}\r\n                        />\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showIn ? 'inline-block' : 'none', transform: 'rotate(-90deg)' }}\r\n                            alt='w'\r\n                            onClick={e => this.click(e, 'W', 'in')}\r\n                        />\r\n                    </div>\r\n                    <div className='empty' />\r\n                    <div className='btn' style={{ padding: (showIn && showOut) ? '10px 0' : '0'}}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showIn ? 'inline-block' : 'none', transform: 'rotate(90deg)' }}\r\n                            alt='e'\r\n                            onClick={e => this.click(e, 'E', 'in')}\r\n                        />\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(-90deg)' }}\r\n                            alt='e'\r\n                            onClick={e => this.click(e, 'E', 'out')}\r\n                        />\r\n                    </div>\r\n                    <div className='empty' style={{ display: showDiag ? 'none' : 'inline-block' }} />\r\n                    <div className='btn diag' style={{ display: showDiag ? 'inline-block' : 'none' }}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(45deg)' }}\r\n                            alt='sw'\r\n                            onClick={e => this.click(e, 'SW')}\r\n                        />\r\n                    </div>\r\n                    <div className='btn'>\r\n                        <div>\r\n                            <img\r\n                                src={arrow}\r\n                                style={{ display: showIn ? 'inline-block' : 'none', transform: 'rotate(180deg)' }}\r\n                                alt='s'\r\n                                onClick={e => this.click(e, 'S', 'in')}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <img\r\n                                src={arrow}\r\n                                style={{ display: showOut ? 'inline-block' : 'none' }}\r\n                                alt='s'\r\n                                onClick={e => this.click(e, 'S', 'out')}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className='empty' style={{ display: showDiag ? 'none' : 'inline-block' }} />\r\n                    <div className='btn diag' style={{ display: showDiag ? 'inline-block' : 'none' }}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(-45deg)' }}\r\n                            alt='se'\r\n                            onClick={e => this.click(e, 'SE')}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport minus from '../../resources/images/minus.svg';\r\nimport plus from '../../resources/images/plus.svg';\r\n\r\ninterface Props {\r\n    source: any;\r\n    name: string;\r\n    nudgeValue: (delta: number) => void;\r\n    label: string;\r\n    disabled: boolean;\r\n    factors: number[];\r\n    display: ((value: number) => string) | null;\r\n}\r\n\r\nexport default class Spin extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        label: null,\r\n        disabled: false,\r\n        factors: null,\r\n        display: null\r\n    };\r\n\r\n    private click(e: React.MouseEvent, delta: number) {\r\n        e.stopPropagation();\r\n        this.props.nudgeValue(delta);\r\n    }\r\n\r\n    private touchEnd(e: React.TouchEvent, delta: number) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        this.props.nudgeValue(delta);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'info-value';\r\n            let value = this.props.source[this.props.name];\r\n            if (value === 0) {\r\n                style += ' dimmed';\r\n            }\r\n\r\n            if (this.props.display) {\r\n                value = this.props.display(value);\r\n            }\r\n\r\n            const minusBtns: JSX.Element[] = [];\r\n            const plusBtns: JSX.Element[] = [];\r\n\r\n            if (this.props.factors) {\r\n                this.props.factors.forEach(factor => {\r\n                    minusBtns.push(\r\n                        <div\r\n                            key={'minus' + factor}\r\n                            className='spin-button factor'\r\n                            onTouchEnd={e => this.touchEnd(e, -1 * factor)}\r\n                            onClick={e => this.click(e, -1 * factor)}\r\n                        >\r\n                            {'-' + factor}\r\n                        </div>\r\n                    );\r\n\r\n                    plusBtns.push(\r\n                        <div\r\n                            key={'plus' + factor}\r\n                            className='spin-button factor'\r\n                            onTouchEnd={e => this.touchEnd(e, +1 * factor)}\r\n                            onClick={e => this.click(e, +1 * factor)}\r\n                        >\r\n                            {'+' + factor}\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                minusBtns.reverse();\r\n            } else {\r\n                minusBtns.push(\r\n                    <div key='minus1' className='spin-button' onTouchEnd={e => this.touchEnd(e, -1)} onClick={e => this.click(e, -1)}>\r\n                        <img className='image' src={minus} alt='minus' />\r\n                    </div>\r\n                );\r\n\r\n                plusBtns.push(\r\n                    <div key='plus1' className='spin-button' onTouchEnd={e => this.touchEnd(e, +1)} onClick={e => this.click(e, +1)}>\r\n                        <img className='image' src={plus} alt='plus' />\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            const infoWidth = 80 * (this.props.factors ? this.props.factors.length : 1);\r\n\r\n            return (\r\n                <div className={this.props.disabled ? 'spin disabled' : 'spin'}>\r\n                    <div className='minus'>\r\n                        {minusBtns}\r\n                    </div>\r\n                    <div className='info' style={{ width: 'calc(100% - ' + infoWidth + 'px)' }}>\r\n                        <div className='info-label'>{this.props.label}</div>\r\n                        <div className={style}>{value}</div>\r\n                    </div>\r\n                    <div className='plus'>\r\n                        {plusBtns}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Monster } from '../../models/monster-group';\r\n\r\nimport Spin from '../controls/spin';\r\n\r\ninterface Props {\r\n    combatant: Monster;\r\n    edit: boolean;\r\n    nudgeValue: (combatant: Monster, field: string, delta: number) => void;\r\n}\r\n\r\ninterface State {\r\n    showAbilityScores: boolean;\r\n}\r\n\r\nexport default class AbilityScorePanel extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        edit: null,\r\n        nudgeValue: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showAbilityScores: false\r\n        };\r\n    }\r\n\r\n    private toggleAbilityScores() {\r\n        this.setState({\r\n            showAbilityScores: !this.state.showAbilityScores\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let result = null;\r\n\r\n            if (this.props.edit) {\r\n                result = (\r\n                    <div>\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='str'\r\n                            label='strength'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.str', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='dex'\r\n                            label='dexterity'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.dex', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='con'\r\n                            label='constitution'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.con', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='int'\r\n                            label='intelligence'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.int', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='wis'\r\n                            label='wisdom'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.wis', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='cha'\r\n                            label='charisma'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.cha', delta)}\r\n                        />\r\n                    </div>\r\n                );\r\n            } else {\r\n                result = (\r\n                    <div className='ability-scores' onClick={() => this.toggleAbilityScores()}>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>str</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.str\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.str)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>dex</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.dex\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.dex)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>con</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.con\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.con)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>int</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.int\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.int)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>wis</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.wis\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.wis)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>cha</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.cha\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.cha)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return result;\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combat, Combatant } from '../../models/combat';\r\nimport { Condition } from '../../models/condition';\r\n\r\nimport Expander from '../controls/expander';\r\nimport Spin from '../controls/spin';\r\n\r\ninterface Props {\r\n    combatant: Combatant;\r\n    combat: Combat;\r\n    nudgeConditionValue: (condition: Condition, field: string, delta: number) => void;\r\n    addCondition: () => void;\r\n    editCondition: (condition: Condition) => void;\r\n    removeCondition: (conditionID: string) => void;\r\n}\r\n\r\nexport default class ConditionsPanel extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const conditions = [];\r\n            if (this.props.combatant.conditions) {\r\n                for (let n = 0; n !== this.props.combatant.conditions.length; ++n) {\r\n                    const c = this.props.combatant.conditions[n];\r\n                    conditions.push(\r\n                        <ConditionPanel\r\n                            key={n}\r\n                            condition={c}\r\n                            combat={this.props.combat}\r\n                            nudgeConditionValue={(condition, type, delta) => this.props.nudgeConditionValue(condition, type, delta)}\r\n                            editCondition={condition => this.props.editCondition(condition)}\r\n                            removeCondition={conditionID => this.props.removeCondition(conditionID)}\r\n                        />\r\n                    );\r\n                }\r\n            }\r\n\r\n            return (\r\n                <div className='section'>\r\n                    {conditions}\r\n                    <button onClick={() => this.props.addCondition()}>add a condition</button>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface ConditionPanelProps {\r\n    condition: Condition;\r\n    combat: Combat;\r\n    nudgeConditionValue: (condition: Condition, field: string, delta: number) => void;\r\n    editCondition: (condition: Condition) => void;\r\n    removeCondition: (conditionID: string) => void;\r\n}\r\n\r\nclass ConditionPanel extends React.Component<ConditionPanelProps> {\r\n    public render() {\r\n        try {\r\n            let name: string = this.props.condition.name || 'condition';\r\n            if (this.props.condition.name === 'exhaustion') {\r\n                name += ' (' + this.props.condition.level + ')';\r\n            }\r\n            if ((this.props.condition.name === 'custom') && (this.props.condition.text !== null)) {\r\n                name = this.props.condition.text;\r\n            }\r\n\r\n            if (this.props.condition.duration !== null) {\r\n                name += ' ' + Utils.conditionDurationText(this.props.condition, this.props.combat);\r\n            }\r\n\r\n            const description = [];\r\n            if (this.props.condition.name === 'exhaustion') {\r\n                description.push(\r\n                    <div key='level' className='section'>\r\n                        <Spin\r\n                            source={this.props.condition}\r\n                            name='level'\r\n                            label='level'\r\n                            nudgeValue={delta => this.props.nudgeConditionValue(this.props.condition, 'level', delta)}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n            const text = Utils.conditionText(this.props.condition);\r\n            for (let n = 0; n !== text.length; ++n) {\r\n                description.push(<div key={n} className='section'>{text[n]}</div>);\r\n            }\r\n\r\n            return (\r\n                <Expander\r\n                    text={name}\r\n                    content={(\r\n                        <div>\r\n                            {description}\r\n                            <div className='divider' />\r\n                            <button onClick={() => this.props.editCondition(this.props.condition)}>edit</button>\r\n                            <button onClick={() => this.props.removeCondition(this.props.condition.id)}>remove</button>\r\n                        </div>\r\n                    )}\r\n                />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Showdown from 'showdown';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combatant } from '../../models/combat';\r\nimport { Monster, Trait, TRAIT_TYPES } from '../../models/monster-group';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport ControlRow from '../controls/control-row';\r\nimport Expander from '../controls/expander';\r\n\r\nconst showdown = new Showdown.Converter();\r\n\r\ninterface Props {\r\n    combatant: Monster | (Combatant & Monster);\r\n    mode: 'view' | 'edit' | 'template' | 'combat';\r\n    filter: string;\r\n    addTrait: (traitType: 'trait' | 'action' | 'legendary' | 'lair' | 'regional') => void;\r\n    copyTrait: (trait: Trait) => void;\r\n    removeTrait: (trait: Trait) => void;\r\n    changeValue: (trait: Trait, field: string, value: any) => void;\r\n    swapTraits: (t1: Trait, t2: Trait) => void;\r\n}\r\n\r\nexport default class TraitsPanel extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        mode: 'view',\r\n        filter: '',\r\n        addTrait: null,\r\n        copyTrait: null,\r\n        removeTrait: null,\r\n        changeValue: null,\r\n        swapTraits: null\r\n    };\r\n\r\n    private createTraitPanel(trait: Trait, prevTrait: Trait | null, nextTrait: Trait | null) {\r\n        return (\r\n            <TraitPanel\r\n                key={trait.id}\r\n                trait={trait}\r\n                mode={this.props.mode}\r\n                prevTrait={prevTrait}\r\n                nextTrait={nextTrait}\r\n                changeValue={(action, type, value) => this.props.changeValue(action, type, value)}\r\n                removeTrait={action => this.props.removeTrait(action)}\r\n                copyTrait={action => this.props.copyTrait(action)}\r\n                swapTraits={(t1, t2) => this.props.swapTraits(t1, t2)}\r\n            />\r\n        );\r\n    }\r\n\r\n    private createSection(traitsByType: { [id: string]: JSX.Element[] }, type: string) {\r\n        const traits = traitsByType[type];\r\n        if (traits.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='section subheading'>{Utils.traitType(type, true)}</div>\r\n                {traits}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const traitsByType: { [id: string]: JSX.Element[] } = {};\r\n\r\n            TRAIT_TYPES.forEach(type => {\r\n                const traits = this.props.combatant.traits\r\n                    .filter(t => t.type === type)\r\n                    .filter(t => Utils.match(this.props.filter, t.name));\r\n\r\n                const list: JSX.Element[] = [];\r\n                for (let n = 0; n !== traits.length; ++n) {\r\n                    const trait = traits[n];\r\n                    const prevTrait = n !== 0 ? traits[n - 1] : null;\r\n                    const nextTrait = n !== traits.length - 1 ? traits[n + 1] : null;\r\n                    list.push(this.createTraitPanel(trait, prevTrait, nextTrait));\r\n                }\r\n\r\n                if (this.props.mode === 'edit') {\r\n                    list.push(\r\n                        <button key='add' onClick={() => this.props.addTrait(type as 'trait' | 'action' | 'legendary' | 'lair' | 'regional')}>\r\n                            add a new {Utils.traitType(type, false)}\r\n                        </button>\r\n                    );\r\n                }\r\n\r\n                traitsByType[type] = list;\r\n            });\r\n\r\n            if (this.props.mode === 'edit') {\r\n                return (\r\n                    <div className='row collapse'>\r\n                        <div className='columns small-4 medium-4 large-4 list-column'>\r\n                            {this.createSection(traitsByType, 'trait')}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 list-column'>\r\n                            {this.createSection(traitsByType, 'action')}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 list-column'>\r\n                            {this.createSection(traitsByType, 'legendary')}\r\n                            {this.createSection(traitsByType, 'lair')}\r\n                            {this.createSection(traitsByType, 'regional')}\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            if (this.props.combatant.traits.length === 0) {\r\n                return (\r\n                    <div><i>no traits or actions</i></div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div>\r\n                    {this.createSection(traitsByType, 'trait')}\r\n                    {this.createSection(traitsByType, 'action')}\r\n                    {this.createSection(traitsByType, 'legendary')}\r\n                    {this.createSection(traitsByType, 'lair')}\r\n                    {this.createSection(traitsByType, 'regional')}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface TraitPanelProps {\r\n    trait: Trait;\r\n    mode: 'view' | 'edit' | 'template' | 'combat';\r\n    prevTrait: Trait | null;\r\n    nextTrait: Trait | null;\r\n    changeValue: (trait: Trait, field: string, value: any) => void;\r\n    copyTrait: (trait: Trait) => void;\r\n    removeTrait: (trait: Trait) => void;\r\n    swapTraits: (t1: Trait, t2: Trait) => void;\r\n}\r\n\r\nclass TraitPanel extends React.Component<TraitPanelProps> {\r\n    public render() {\r\n        try {\r\n            let maxUses = 0;\r\n            let heading = this.props.trait.name || 'unnamed ' + Utils.traitType(this.props.trait.type, false);\r\n\r\n            if (this.props.trait.usage) {\r\n                let used = '';\r\n                if (this.props.trait.usage.toLowerCase().startsWith('recharge ')) {\r\n                    maxUses = 1;\r\n                    if (this.props.trait.uses > 0) {\r\n                        used = '; used';\r\n                    }\r\n                }\r\n                const found = this.props.trait.usage.toLowerCase().match(/(\\d+)\\s*\\/\\s*day/);\r\n                if (found) {\r\n                    maxUses = parseInt(found[1], 10);\r\n                    if (this.props.trait.uses > 0) {\r\n                        used = '; used ' + this.props.trait.uses;\r\n                    }\r\n                }\r\n                heading += ' *(' + this.props.trait.usage + used + ')*';\r\n            }\r\n            const markdown = '**' + heading + '** ' + this.props.trait.text;\r\n\r\n            switch (this.props.mode) {\r\n                case 'view':\r\n                    return (\r\n                        <div key={this.props.trait.id} className='section trait'>\r\n                            <div dangerouslySetInnerHTML={{ __html: showdown.makeHtml(markdown) }} />\r\n                        </div>\r\n                    );\r\n                case 'edit':\r\n                    const details = (\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='name'\r\n                                value={this.props.trait.name}\r\n                                onChange={event => this.props.changeValue(this.props.trait, 'name', event.target.value)}\r\n                            />\r\n                            <input\r\n                                type='text'\r\n                                placeholder='usage'\r\n                                value={this.props.trait.usage}\r\n                                onChange={event => this.props.changeValue(this.props.trait, 'usage', event.target.value)}\r\n                            />\r\n                            <textarea\r\n                                placeholder='details'\r\n                                value={this.props.trait.text}\r\n                                onChange={event => this.props.changeValue(this.props.trait, 'text', event.target.value)}\r\n                            />\r\n                            <div className='divider' />\r\n                            <ControlRow\r\n                                controls={[\r\n                                    <button\r\n                                        key='up'\r\n                                        className={this.props.prevTrait ? '' : 'disabled'}\r\n                                        onClick={() => this.props.swapTraits(this.props.trait, this.props.prevTrait as Trait)}\r\n                                    >\r\n                                        move up\r\n                                    </button>,\r\n                                    <button\r\n                                        key='down'\r\n                                        className={this.props.nextTrait ? '' : 'disabled'}\r\n                                        onClick={() => this.props.swapTraits(this.props.trait, this.props.nextTrait as Trait)}\r\n                                    >\r\n                                        move down\r\n                                    </button>\r\n                                ]}\r\n                            />\r\n                            <ConfirmButton text='delete' callback={() => this.props.removeTrait(this.props.trait)} />\r\n                        </div>\r\n                    );\r\n\r\n                    return (\r\n                        <Expander\r\n                            text={this.props.trait.name || 'unnamed ' + Utils.traitType(this.props.trait.type, false)}\r\n                            content={details}\r\n                        />\r\n                    );\r\n                case 'template':\r\n                    return (\r\n                        <div key={this.props.trait.id} className='section trait'>\r\n                            <div dangerouslySetInnerHTML={{ __html: showdown.makeHtml(markdown) }} />\r\n                            <button onClick={() => this.props.copyTrait(this.props.trait)}>copy</button>\r\n                        </div>\r\n                    );\r\n                case 'combat':\r\n                    let style = '';\r\n                    let usage = null;\r\n                    if (maxUses > 0) {\r\n                        const isTapped = this.props.trait.uses >= maxUses;\r\n                        if (isTapped) {\r\n                            style = 'strikethrough';\r\n                            usage = <button onClick={() => this.props.changeValue(this.props.trait, 'uses', 0)}>recharge</button>;\r\n                        } else {\r\n                            usage = <button onClick={() => this.props.changeValue(this.props.trait, 'uses', this.props.trait.uses + 1)}>use</button>;\r\n                        }\r\n                    }\r\n                    return (\r\n                        <div key={this.props.trait.id} className='section trait'>\r\n                            <div className={style} dangerouslySetInnerHTML={{ __html: showdown.makeHtml(markdown) }} />\r\n                            {usage}\r\n                        </div>\r\n                    );\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    heading: string | JSX.Element | JSX.Element[];\r\n    content: string | JSX.Element | JSX.Element[];\r\n}\r\n\r\nexport default class InfoCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div className='card'>\r\n                    {this.props.heading}\r\n                    <div className='card-content'>\r\n                        {this.props.content}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combat, Combatant } from '../../models/combat';\r\nimport { Condition } from '../../models/condition';\r\nimport { Encounter, EncounterSlot, EncounterWave } from '../../models/encounter';\r\nimport { Monster, MonsterGroup, Trait } from '../../models/monster-group';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport ControlRow from '../controls/control-row';\r\nimport Dropdown from '../controls/dropdown';\r\nimport Expander from '../controls/expander';\r\nimport Radial from '../controls/radial';\r\nimport Spin from '../controls/spin';\r\nimport AbilityScorePanel from '../panels/ability-score-panel';\r\nimport ConditionsPanel from '../panels/conditions-panel';\r\nimport TraitsPanel from '../panels/traits-panel';\r\nimport InfoCard from './info-card';\r\n\r\nimport arrow from '../../resources/images/down-arrow.svg';\r\n\r\ninterface Props {\r\n    combatant: Monster | (Monster & Combatant);\r\n    mode: string;\r\n    library: MonsterGroup[];\r\n    changeValue: (monster: any, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, delta: number) => void;\r\n    // Library\r\n    filter: string;\r\n    editMonster: (monster: Monster) => void;\r\n    removeMonster: (monster: Monster) => void;\r\n    cloneMonster: (monster: Monster, name: string) => void;\r\n    moveToGroup: (monster: Monster, group: string) => void;\r\n    copyTrait: (trait: Trait) => void;\r\n    selectMonster: (monster: Monster) => void;\r\n    deselectMonster: (monster: Monster) => void;\r\n    // Encounter builder\r\n    encounter: Encounter;\r\n    slot: EncounterSlot;\r\n    addEncounterSlot: (monster: Monster, waveID: string | null) => void;\r\n    removeEncounterSlot: (slot: EncounterSlot) => void;\r\n    // Combat\r\n    combat: Combat;\r\n    makeCurrent: (combatant: Combatant) => void;\r\n    makeActive: (combatant: Combatant) => void;\r\n    makeDefeated: (combatant: Combatant) => void;\r\n    endTurn: (combatant: Combatant) => void;\r\n    mapAdd: (combatant: Combatant) => void;\r\n    mapMove: (combatant: Combatant, dir: string) => void;\r\n    mapRemove: (combatant: Combatant) => void;\r\n    removeCombatant: (combatant: Combatant) => void;\r\n    changeHP: (combatant: Combatant, hp: number, tempHP: number) => void;\r\n    addCondition: (combatant: Combatant) => void;\r\n    editCondition: (combatant: Combatant, condition: Condition) => void;\r\n    removeCondition: (combatant: Combatant, conditionID: string) => void;\r\n    nudgeConditionValue: (condition: Condition, field: string, delta: number) => void;\r\n}\r\n\r\ninterface State {\r\n    showDetails: boolean;\r\n    cloneName: string;\r\n    damageOrHealing: number;\r\n}\r\n\r\nexport default class MonsterCard extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        library: null,\r\n        changeValue: null,\r\n        nudgeValue: null,\r\n        filter: '',\r\n        editMonster: null,\r\n        removeMonster: null,\r\n        cloneMonster: null,\r\n        moveToGroup: null,\r\n        copyTrait: null,\r\n        selectMonster: null,\r\n        deselectMonster: null,\r\n        encounter: null,\r\n        slot: null,\r\n        addEncounterSlot: null,\r\n        removeEncounterSlot: null,\r\n        combat: null,\r\n        makeCurrent: null,\r\n        makeActive: null,\r\n        makeDefeated: null,\r\n        endTurn: null,\r\n        mapAdd: null,\r\n        mapMove: null,\r\n        mapRemove: null,\r\n        removeCombatant: null,\r\n        changeHP: null,\r\n        addCondition: null,\r\n        editCondition: null,\r\n        removeCondition: null,\r\n        nudgeConditionValue: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showDetails: false,\r\n            cloneName: props.combatant.name + ' copy',\r\n            damageOrHealing: 0\r\n        };\r\n    }\r\n\r\n    private setCloneName(cloneName: string) {\r\n        this.setState({\r\n            cloneName: cloneName\r\n        });\r\n    }\r\n\r\n    private toggleDetails() {\r\n        this.setState({\r\n            showDetails: !this.state.showDetails\r\n        });\r\n    }\r\n\r\n    private setDamage(value: number) {\r\n        this.setState({\r\n            damageOrHealing: value\r\n        });\r\n    }\r\n\r\n    private nudgeDamage(delta: number) {\r\n        this.setState({\r\n            damageOrHealing: Math.max(this.state.damageOrHealing + delta, 0)\r\n        });\r\n    }\r\n\r\n    private heal() {\r\n        const combatant = this.props.combatant as Combatant;\r\n\r\n        let hp = (combatant.hp ? combatant.hp : 0) + this.state.damageOrHealing;\r\n        hp = Math.min(hp, this.props.combatant.hpMax);\r\n\r\n        this.setState({\r\n            damageOrHealing: 0\r\n        }, () => {\r\n            this.props.changeHP(combatant, hp, this.props.combatant.hpTemp);\r\n        });\r\n    }\r\n\r\n    private damage() {\r\n        const combatant = this.props.combatant as Combatant;\r\n\r\n        let hp = (combatant.hp ? combatant.hp : 0);\r\n        let temp = this.props.combatant.hpTemp;\r\n\r\n        let damage = this.state.damageOrHealing;\r\n\r\n        // Take damage off temp HP first\r\n        const val = Math.min(damage, temp);\r\n        damage -= val;\r\n        temp -= val;\r\n\r\n        // Take the rest off HP\r\n        hp -= damage;\r\n        hp = Math.max(hp, 0);\r\n\r\n        this.setState({\r\n            damageOrHealing: 0\r\n        }, () => {\r\n            this.props.changeHP(combatant, hp, temp);\r\n        });\r\n    }\r\n\r\n    private description() {\r\n        let sizeAndType = (this.props.combatant.size + ' ' + this.props.combatant.category).toLowerCase();\r\n        if (this.props.combatant.tag) {\r\n            sizeAndType += ' (' + this.props.combatant.tag.toLowerCase() + ')';\r\n        }\r\n        sizeAndType += ', ';\r\n\r\n        let align = '';\r\n        if (this.props.combatant.alignment) {\r\n            align = this.props.combatant.alignment.toLowerCase() + ', ';\r\n        }\r\n\r\n        const cr = 'cr ' + Utils.challenge(this.props.combatant.challenge);\r\n\r\n        return sizeAndType + align + cr;\r\n    }\r\n\r\n    private monsterIsInWave(wave: EncounterWave) {\r\n        return wave.slots.some(s => {\r\n            const group = this.props.library.find(g => g.monsters.includes(this.props.combatant));\r\n            return !!group && (s.monsterGroupName === group.name) && (s.monsterName === this.props.combatant.name);\r\n        });\r\n    }\r\n\r\n    private getHP() {\r\n        if (this.props.combatant.hitDice === 0) {\r\n            return this.props.combatant.hpMax;\r\n        }\r\n\r\n        const die = Utils.hitDieType(this.props.combatant.size);\r\n        const conMod = Utils.modifierValue(this.props.combatant.abilityScores.con) * this.props.combatant.hitDice;\r\n        let conModStr = '';\r\n        if (conMod > 0) {\r\n            conModStr = ' +' + conMod;\r\n        }\r\n        if (conMod < 0) {\r\n            conModStr = ' ' + conMod;\r\n        }\r\n        return this.props.combatant.hpMax + ' (' + this.props.combatant.hitDice + 'd' + die + conModStr + ')';\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const options = [];\r\n            if (this.props.mode.indexOf('no-buttons') === -1) {\r\n                if (this.props.mode.indexOf('view') !== -1) {\r\n                    if (this.props.mode.indexOf('editable') !== -1) {\r\n                        options.push(\r\n                            <button key='edit' onClick={() => this.props.editMonster(this.props.combatant)}>edit monster</button>\r\n                        );\r\n\r\n                        options.push(\r\n                            <Expander\r\n                                key='clone'\r\n                                text='clone monster'\r\n                                content={\r\n                                    <div>\r\n                                        <input\r\n                                            type='text'\r\n                                            placeholder='monster name'\r\n                                            value={this.state.cloneName}\r\n                                            onChange={event => this.setCloneName(event.target.value)}\r\n                                        />\r\n                                        <button onClick={() => this.props.cloneMonster(this.props.combatant, this.state.cloneName)}>create copy</button>\r\n                                    </div>\r\n                                }\r\n                            />\r\n                        );\r\n\r\n                        const groupOptions: { id: string, text: string }[] = [];\r\n                        this.props.library.forEach(group => {\r\n                            if (group.monsters.indexOf(this.props.combatant) === -1) {\r\n                                groupOptions.push({\r\n                                    id: group.id,\r\n                                    text: group.name\r\n                                });\r\n                            }\r\n                        });\r\n                        options.push(\r\n                            <Dropdown\r\n                                key='move'\r\n                                options={groupOptions}\r\n                                placeholder='move to group...'\r\n                                select={optionID => this.props.moveToGroup(this.props.combatant, optionID)}\r\n                            />\r\n                        );\r\n\r\n                        options.push(<ConfirmButton key='remove' text='delete monster' callback={() => this.props.removeMonster(this.props.combatant)} />);\r\n                    }\r\n                    if (this.props.mode.indexOf('encounter') !== -1) {\r\n                        if (this.props.slot) {\r\n                            // This card is in an encounter or a wave\r\n                            options.push(\r\n                                <button key='remove' onClick={() => this.props.removeEncounterSlot(this.props.slot)}>\r\n                                    remove from encounter\r\n                                </button>\r\n                            );\r\n                        } else {\r\n                            let canAdd = false;\r\n                            // This card is in the library list\r\n                            if (!this.monsterIsInWave(this.props.encounter)) {\r\n                                options.push(\r\n                                    <button key='add encounter' onClick={() => this.props.addEncounterSlot(this.props.combatant, null)}>\r\n                                        add to encounter\r\n                                    </button>\r\n                                );\r\n                                canAdd = true;\r\n                            }\r\n                            this.props.encounter.waves.forEach(wave => {\r\n                                if (!this.monsterIsInWave(wave)) {\r\n                                    options.push(\r\n                                        <button key={'add ' + wave.id} onClick={() => this.props.addEncounterSlot(this.props.combatant, wave.id)}>\r\n                                            add to {wave.name}\r\n                                        </button>\r\n                                    );\r\n                                    canAdd = true;\r\n                                }\r\n                            });\r\n                            // If we can't add it anywhere, don't show it\r\n                            if (!canAdd) {\r\n                                return (\r\n                                    <InfoCard\r\n                                        heading={\r\n                                            (\r\n                                                <div className='heading'>\r\n                                                    <div className='title'>{this.props.combatant.name}</div>\r\n                                                </div>\r\n                                            )\r\n                                        }\r\n                                        content={\r\n                                            (\r\n                                                <div className='section centered'>\r\n                                                    <i>this monster is already part of this encounter</i>\r\n                                                </div>\r\n                                            )\r\n                                        }\r\n                                    />\r\n                                );\r\n                            }\r\n                        }\r\n                    }\r\n                    if (this.props.mode.indexOf('candidate') !== -1) {\r\n                        if (this.props.mode.indexOf('selected') === -1) {\r\n                            options.push(\r\n                                <button key='select' onClick={() => this.props.selectMonster(this.props.combatant)}>select monster</button>\r\n                            );\r\n                        } else {\r\n                            options.push(\r\n                                <button key='deselect' onClick={() => this.props.deselectMonster(this.props.combatant)}>deselect monster</button>\r\n                            );\r\n                        }\r\n                    }\r\n                }\r\n                if (this.props.mode.indexOf('combat') !== -1) {\r\n                    const combatant = this.props.combatant as Combatant;\r\n\r\n                    if (this.props.mode.indexOf('tactical') !== -1) {\r\n                        if (this.props.mode.indexOf('on-map') !== -1) {\r\n                            options.push(\r\n                                <div key='mapMove' className='section centered'>\r\n                                    <Radial\r\n                                        direction='eight'\r\n                                        click={dir => this.props.mapMove(combatant, dir)}\r\n                                    />\r\n                                </div>\r\n                            );\r\n                            options.push(\r\n                                <Spin\r\n                                    key='altitude'\r\n                                    source={this.props.combatant}\r\n                                    name='altitude'\r\n                                    label='altitude'\r\n                                    display={value => value + ' ft.'}\r\n                                    nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'altitude', delta * 5)}\r\n                                />\r\n                            );\r\n                            options.push(<button key='mapRemove' onClick={() => this.props.mapRemove(combatant)}>remove from map</button>);\r\n                        }\r\n                        if (this.props.mode.indexOf('off-map') !== -1) {\r\n                            options.push(<button key='mapAdd' onClick={() => this.props.mapAdd(combatant)}>add to map</button>);\r\n                        }\r\n                        options.push(<div key='tactical-div' className='divider' />);\r\n                    }\r\n                    if (combatant.pending && !combatant.active && !combatant.defeated) {\r\n                        options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                    }\r\n                    if (!combatant.pending && combatant.active && !combatant.defeated) {\r\n                        if (combatant.current) {\r\n                            options.push(<button key='endTurn' onClick={() => this.props.endTurn(combatant)}>end turn</button>);\r\n                            options.push(<button key='makeDefeated' onClick={() => this.props.makeDefeated(combatant)}>mark as defeated and end turn</button>);\r\n                        } else {\r\n                            options.push(<button key='makeCurrent' onClick={() => this.props.makeCurrent(combatant)}>start turn</button>);\r\n                            options.push(<button key='makeDefeated' onClick={() => this.props.makeDefeated(combatant)}>mark as defeated</button>);\r\n                            options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                        }\r\n                    }\r\n                    if (!combatant.pending && !combatant.active && combatant.defeated) {\r\n                        options.push(<button key='makeActive' onClick={() => this.props.makeActive(combatant)}>mark as active</button>);\r\n                        options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                    }\r\n                    options.push(\r\n                        <Expander\r\n                            key='rename'\r\n                            text='change name'\r\n                            content={(\r\n                                <div>\r\n                                    <input\r\n                                        type='text'\r\n                                        value={combatant.displayName}\r\n                                        onChange={event => this.props.changeValue(this.props.combatant, 'displayName', event.target.value)}\r\n                                    />\r\n                                </div>\r\n                            )}\r\n                        />\r\n                    );\r\n                    options.push(\r\n                        <Expander\r\n                            key='init'\r\n                            text='change initiative score'\r\n                            content={(\r\n                                <div>\r\n                                    <Spin\r\n                                        source={this.props.combatant}\r\n                                        name='initiative'\r\n                                        label='initiative'\r\n                                        nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'initiative', delta)}\r\n                                    />\r\n                                </div>\r\n                            )}\r\n                        />\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf('template') !== -1) {\r\n                    // None\r\n                }\r\n            }\r\n\r\n            let stats = null;\r\n            if (this.props.mode.indexOf('view') !== -1) {\r\n                let slotSection = null;\r\n                if (this.props.slot) {\r\n                    slotSection = (\r\n                        <div>\r\n                            <div className='divider' />\r\n                            <Spin\r\n                                source={this.props.slot}\r\n                                name='count'\r\n                                label='count'\r\n                                nudgeValue={delta => this.props.nudgeValue(this.props.slot, 'count', delta)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                let details = null;\r\n                if (this.state.showDetails || (this.props.mode.indexOf('generated') !== -1)) {\r\n                    details = (\r\n                        <div>\r\n                            <div className='divider' />\r\n                            <div className='section'>\r\n                                <b>ac</b> {this.props.combatant.ac}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.hpMax !== 0 ? '' : 'none' }}>\r\n                                <b>hp</b> {this.getHP()}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.speed !== '' ? '' : 'none' }}>\r\n                                <b>speed</b> {this.props.combatant.speed}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <AbilityScorePanel combatant={this.props.combatant} />\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.savingThrows !== '' ? '' : 'none' }}>\r\n                                <b>saving throws</b> {this.props.combatant.savingThrows}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.skills !== '' ? '' : 'none' }}>\r\n                                <b>skills</b> {this.props.combatant.skills}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.damage.resist !== '' ? '' : 'none' }}>\r\n                                <b>damage resistances</b> {this.props.combatant.damage.resist}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.damage.vulnerable !== '' ? '' : 'none' }}>\r\n                                <b>damage vulnerabilities</b> {this.props.combatant.damage.vulnerable}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.damage.immune !== '' ? '' : 'none' }}>\r\n                                <b>damage immunities</b> {this.props.combatant.damage.immune}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.conditionImmunities !== '' ? '' : 'none' }}>\r\n                                <b>condition immunities</b> {this.props.combatant.conditionImmunities}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.senses !== '' ? '' : 'none' }}>\r\n                                <b>senses</b> {this.props.combatant.senses}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.languages !== '' ? '' : 'none' }}>\r\n                                <b>languages</b> {this.props.combatant.languages}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.equipment !== '' ? '' : 'none' }}>\r\n                                <b>equipment</b> {this.props.combatant.equipment}\r\n                            </div>\r\n                            <div className='divider' />\r\n                            <TraitsPanel combatant={this.props.combatant} />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                stats = (\r\n                    <div className='stats'>\r\n                        <div className='section centered'>\r\n                            <i>{this.description()}</i>\r\n                        </div>\r\n                        {slotSection}\r\n                        {details}\r\n                    </div>\r\n                );\r\n            }\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                stats = (\r\n                    <div className='stats'>\r\n                        <div className='section centered'>\r\n                            <i>{this.description()}</i>\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <Spin\r\n                            source={this.props.combatant}\r\n                            name='hp'\r\n                            label='hit points'\r\n                            factors={[1, 10]}\r\n                            nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'hp', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant}\r\n                            name='hpTemp'\r\n                            label='temp hp'\r\n                            factors={[1, 10]}\r\n                            nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'hpTemp', delta)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <Spin\r\n                            source={this.state}\r\n                            name='damageOrHealing'\r\n                            factors={[1, 10]}\r\n                            nudgeValue={delta => this.nudgeDamage(delta)}\r\n                        />\r\n                        <ControlRow\r\n                            controls={[\r\n                                <button key='heal' onClick={() => this.heal()}>heal</button>,\r\n                                <button key='reset' onClick={() => this.setDamage(0)}>reset</button>,\r\n                                <button key='damage' onClick={() => this.damage()}>damage</button>\r\n                            ]}\r\n                            disabled={this.state.damageOrHealing === 0}\r\n                        />\r\n                        <div className='section' style={{ display: this.props.combatant.damage.resist !== '' ? '' : 'none' }}>\r\n                            <b>damage resistances</b> {this.props.combatant.damage.resist}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.damage.vulnerable !== '' ? '' : 'none' }}>\r\n                            <b>damage vulnerabilities</b> {this.props.combatant.damage.vulnerable}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.damage.immune !== '' ? '' : 'none' }}>\r\n                            <b>damage immunities</b> {this.props.combatant.damage.immune}\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='section'>\r\n                            <AbilityScorePanel combatant={this.props.combatant} />\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.ac !== 0 ? '' : 'none' }}>\r\n                            <b>ac</b> {this.props.combatant.ac}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.savingThrows !== '' ? '' : 'none' }}>\r\n                            <b>saving throws</b> {this.props.combatant.savingThrows}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.skills !== '' ? '' : 'none' }}>\r\n                            <b>skills</b> {this.props.combatant.skills}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.speed !== '' ? '' : 'none' }}>\r\n                            <b>speed</b> {this.props.combatant.speed}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.senses !== '' ? '' : 'none' }}>\r\n                            <b>senses</b> {this.props.combatant.senses}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.languages !== '' ? '' : 'none' }}>\r\n                            <b>languages</b> {this.props.combatant.languages}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.equipment !== '' ? '' : 'none' }}>\r\n                            <b>equipment</b> {this.props.combatant.equipment}\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <TraitsPanel\r\n                            combatant={this.props.combatant}\r\n                            mode='combat'\r\n                            changeValue={(trait, field, value) => this.props.changeValue(trait, field, value)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <div className='section subheading'>\r\n                            conditions\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.conditionImmunities !== '' ? '' : 'none' }}>\r\n                            <b>condition immunities</b> {this.props.combatant.conditionImmunities}\r\n                        </div>\r\n                        <ConditionsPanel\r\n                            combatant={this.props.combatant as Combatant}\r\n                            combat={this.props.combat}\r\n                            addCondition={() => this.props.addCondition(this.props.combatant as Combatant)}\r\n                            editCondition={condition => this.props.editCondition(this.props.combatant as Combatant, condition)}\r\n                            removeCondition={conditionID => this.props.removeCondition(this.props.combatant as Combatant, conditionID)}\r\n                            nudgeConditionValue={(condition, type, delta) => this.props.nudgeConditionValue(condition, type, delta)}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n            if (this.props.mode.indexOf('template') !== -1) {\r\n                if (this.props.mode.indexOf('overview') !== -1) {\r\n                    stats = (\r\n                        <div>\r\n                            <div className='section centered'>\r\n                                <i>{this.description()}</i>\r\n                            </div>\r\n                            <div className='divider' />\r\n                            <div className='section'>\r\n                                <b>speed</b> {this.props.combatant.speed || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>senses</b> {this.props.combatant.senses || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>languages</b> {this.props.combatant.languages || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>equipment</b> {this.props.combatant.equipment || '-'}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf('abilities') !== -1) {\r\n                    stats = (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <AbilityScorePanel combatant={this.props.combatant} />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>saving throws</b> {this.props.combatant.savingThrows || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>skills</b> {this.props.combatant.skills || '-'}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf('cbt-stats') !== -1) {\r\n                    stats = (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <b>ac</b> {this.props.combatant.ac}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>hp</b> {this.getHP()}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>damage immunity</b> {this.props.combatant.damage.immune || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>damage resistance</b> {this.props.combatant.damage.resist || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>damage vulnerability</b> {this.props.combatant.damage.vulnerable || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>condition immunities</b> {this.props.combatant.conditionImmunities || '-'}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf('actions') !== -1) {\r\n                    stats = (\r\n                        <TraitsPanel\r\n                            combatant={this.props.combatant}\r\n                            mode='template'\r\n                            filter={this.props.filter}\r\n                            copyTrait={trait => this.props.copyTrait(trait)}\r\n                        />\r\n                    );\r\n                }\r\n            }\r\n\r\n            let toggle = null;\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                // Don't show toggle button for combatant\r\n            } else if (this.props.mode.indexOf('template') !== -1) {\r\n                // Don't show toggle button for template\r\n            } else if (this.props.mode.indexOf('view generated') !== -1) {\r\n                // Don't show toggle button for generated monster\r\n            } else {\r\n                const imageStyle = this.state.showDetails ? 'image rotate' : 'image';\r\n                toggle = (\r\n                    <img className={imageStyle} src={arrow} alt='arrow' onClick={() => this.toggleDetails()} />\r\n                );\r\n            }\r\n\r\n            const name = (this.props.combatant as Combatant ? (this.props.combatant as Combatant).displayName : null)\r\n                || this.props.combatant.name\r\n                || 'unnamed monster';\r\n\r\n            return (\r\n                <div className='card monster'>\r\n                    <div className='heading'>\r\n                        <div className='title'>{name}</div>\r\n                        {toggle}\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        {stats}\r\n                        <div style={{ display: options.length > 0 ? '' : 'none' }}>\r\n                            <div className='divider' />\r\n                            <div className='section'>{options}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Combatant } from '../../models/combat';\r\nimport { PC } from '../../models/party';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport Expander from '../controls/expander';\r\nimport Radial from '../controls/radial';\r\nimport Spin from '../controls/spin';\r\n\r\nimport arrow from '../../resources/images/down-arrow.svg';\r\n\r\ninterface Props {\r\n    combatant: PC | (PC & Combatant);\r\n    mode: string;\r\n    changeValue: (pc: PC, field: string, value: any) => void;\r\n    nudgeValue: (pc: PC, field: string, delta: number) => void;\r\n    removePC: (pc: PC) => void;\r\n    // Combat\r\n    makeCurrent: (combatant: Combatant) => void;\r\n    makeActive: (combatant: Combatant) => void;\r\n    makeDefeated: (combatant: Combatant) => void;\r\n    endTurn: (combatant: Combatant) => void;\r\n    mapAdd: (combatant: Combatant) => void;\r\n    mapMove: (combatant: Combatant, dir: string) => void;\r\n    mapRemove: (combatant: Combatant) => void;\r\n    removeCombatant: (combatant: Combatant) => void;\r\n}\r\n\r\ninterface State {\r\n    showDetails: boolean;\r\n}\r\n\r\nexport default class PCCard extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        removePC: null,\r\n        makeCurrent: null,\r\n        makeActive: null,\r\n        makeDefeated: null,\r\n        endTurn: null,\r\n        mapAdd: null,\r\n        mapMove: null,\r\n        mapRemove: null,\r\n        removeCombatant: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showDetails: false\r\n        };\r\n    }\r\n\r\n    private toggleDetails() {\r\n        this.setState({\r\n            showDetails: !this.state.showDetails\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const options = [];\r\n            if (this.props.mode.indexOf('edit') !== -1) {\r\n                if (this.props.combatant.active) {\r\n                    options.push(\r\n                        <button key='toggle-active' onClick={() => this.props.changeValue(this.props.combatant, 'active', false)}>\r\n                            mark inactive\r\n                        </button>\r\n                    );\r\n                } else {\r\n                    options.push(\r\n                        <button key='toggle-active' onClick={() => this.props.changeValue(this.props.combatant, 'active', true)}>\r\n                            mark active\r\n                        </button>\r\n                    );\r\n                }\r\n                options.push(<ConfirmButton key='remove' text='delete pc' callback={() => this.props.removePC(this.props.combatant)} />);\r\n            }\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                const combatant = this.props.combatant as Combatant;\r\n\r\n                if (this.props.mode.indexOf('tactical') !== -1) {\r\n                    if (this.props.mode.indexOf('on-map') !== -1) {\r\n                        options.push(\r\n                            <div key='mapMove' className='section centered'>\r\n                                <Radial\r\n                                    direction='eight'\r\n                                    click={dir => this.props.mapMove(combatant, dir)}\r\n                                />\r\n                            </div>\r\n                        );\r\n                        options.push(\r\n                            <Spin\r\n                                key='altitude'\r\n                                source={this.props.combatant}\r\n                                name='altitude'\r\n                                label='altitude'\r\n                                display={value => value + ' ft.'}\r\n                                nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'altitude', delta * 5)}\r\n                            />\r\n                        );\r\n                        options.push(<button key='mapRemove' onClick={() => this.props.mapRemove(combatant)}>remove from map</button>);\r\n                    }\r\n                    if (this.props.mode.indexOf('off-map') !== -1) {\r\n                        options.push(<button key='mapAdd' onClick={() => this.props.mapAdd(combatant)}>add to map</button>);\r\n                    }\r\n                    options.push(<div key='tactical-div' className='divider' />);\r\n                }\r\n                if (combatant.pending && !combatant.active && !combatant.defeated) {\r\n                    options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                }\r\n                if (!combatant.pending && combatant.active && !combatant.defeated) {\r\n                    if (combatant.current) {\r\n                        options.push(<button key='endTurn' onClick={() => this.props.endTurn(combatant)}>end turn</button>);\r\n                        options.push(<button key='makeDefeated' onClick={() => this.props.makeDefeated(combatant)}>mark as defeated and end turn</button>);\r\n                    } else {\r\n                        options.push(<button key='makeCurrent' onClick={() => this.props.makeCurrent(combatant)}>start turn</button>);\r\n                        options.push(<button key='makeDefeated' onClick={() => this.props.makeDefeated(combatant)}>mark as defeated</button>);\r\n                        options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                    }\r\n                    options.push(\r\n                        <Expander\r\n                            key='init'\r\n                            text='change initiative score'\r\n                            content={(\r\n                                <div>\r\n                                    <Spin\r\n                                        source={this.props.combatant}\r\n                                        name='initiative'\r\n                                        label='initiative'\r\n                                        nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'initiative', delta)}\r\n                                    />\r\n                                </div>\r\n                            )}\r\n                        />\r\n                    );\r\n                }\r\n                if (!combatant.pending && !combatant.active && combatant.defeated) {\r\n                    options.push(<button key='makeActive' onClick={() => this.props.makeActive(combatant)}>mark as active</button>);\r\n                    options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                }\r\n            }\r\n\r\n            const desc = (this.props.combatant.race || 'unknown race')\r\n                + ' ' + (this.props.combatant.classes || 'unknown class')\r\n                + ', level ' + this.props.combatant.level;\r\n\r\n            const commonStatBlock = (\r\n                <div className='stats'>\r\n                    <div className='section centered lowercase'>\r\n                        <i>{desc}</i>\r\n                        <div style={{ display: this.props.combatant.url ? '' : 'none' }}>\r\n                            <a href={this.props.combatant.url} target='_blank' rel='noopener noreferrer'>d&d beyond sheet</a>\r\n                        </div>\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section subheading'>languages</div>\r\n                    <div className='section'>\r\n                        {this.props.combatant.languages || '-'}\r\n                    </div>\r\n                    <div className='section subheading'>passive skills</div>\r\n                    <div className='section'>\r\n                        <div><b>insight</b> {this.props.combatant.passiveInsight}</div>\r\n                        <div><b>investigation</b> {this.props.combatant.passiveInvestigation}</div>\r\n                        <div><b>perception</b> {this.props.combatant.passivePerception}</div>\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            let stats = null;\r\n            if (this.props.mode.indexOf('edit') !== -1) {\r\n                if (this.state.showDetails) {\r\n                    stats = (\r\n                        <div className='edit'>\r\n                            <div className='section'>\r\n                                <div className='input-label' style={{ display: this.state.showDetails ? '' : 'none' }}>character name:</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.props.combatant.name}\r\n                                    onChange={event => this.props.changeValue(this.props.combatant, 'name', event.target.value)}\r\n                                />\r\n                                <div className='input-label' style={{ display: this.state.showDetails ? '' : 'none' }}>player name:</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.props.combatant.player}\r\n                                    onChange={event => this.props.changeValue(this.props.combatant, 'player', event.target.value)}\r\n                                />\r\n                                <div className='input-label'>race:</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.props.combatant.race}\r\n                                    onChange={event => this.props.changeValue(this.props.combatant, 'race', event.target.value)}\r\n                                />\r\n                                <div className='input-label'>class:</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.props.combatant.classes}\r\n                                    onChange={event => this.props.changeValue(this.props.combatant, 'classes', event.target.value)}\r\n                                />\r\n                                <div className='input-label'>level:</div>\r\n                                <Spin\r\n                                    source={this.props.combatant}\r\n                                    name='level'\r\n                                    nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'level', delta)}\r\n                                />\r\n                                <div className='input-label'>languages:</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.props.combatant.languages}\r\n                                    onChange={event => this.props.changeValue(this.props.combatant, 'languages', event.target.value)}\r\n                                />\r\n                                <div className='input-label'>d&d beyond link:</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.props.combatant.url}\r\n                                    onChange={event => this.props.changeValue(this.props.combatant, 'url', event.target.value)}\r\n                                />\r\n                            </div>\r\n                            <div className='divider' />\r\n                            <div className='section subheading'>passive skills</div>\r\n                            <Spin\r\n                                source={this.props.combatant}\r\n                                name='passiveInsight'\r\n                                label='insight'\r\n                                nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'passiveInsight', delta)}\r\n                            />\r\n                            <Spin\r\n                                source={this.props.combatant}\r\n                                name='passiveInvestigation'\r\n                                label='investigation'\r\n                                nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'passiveInvestigation', delta)}\r\n                            />\r\n                            <Spin\r\n                                source={this.props.combatant}\r\n                                name='passivePerception'\r\n                                label='perception'\r\n                                nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'passivePerception', delta)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                } else {\r\n                    stats = commonStatBlock;\r\n                }\r\n            }\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                stats = commonStatBlock;\r\n            }\r\n\r\n            let toggle = null;\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                // Don't show toggle button for combatant\r\n            } else {\r\n                const imageStyle = this.state.showDetails ? 'image rotate' : 'image';\r\n                toggle = <img className={imageStyle} src={arrow} alt='arrow' onClick={() => this.toggleDetails()} />;\r\n            }\r\n\r\n            const name = (this.props.combatant as Combatant ? (this.props.combatant as Combatant).displayName : null)\r\n                || this.props.combatant.name\r\n                || 'unnamed pc';\r\n\r\n            return (\r\n                <div className='card pc'>\r\n                    <div className='heading'>\r\n                        <div className='title'>{name}</div>\r\n                        {toggle}\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        {stats}\r\n                        <div style={{ display: options.length > 0 ? '' : 'none' }}>\r\n                            <div className='divider' />\r\n                            <div className='section'>\r\n                                {options}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Combatant } from '../../models/combat';\r\nimport { Monster } from '../../models/monster-group';\r\n\r\ninterface Props {\r\n    combatant: Combatant & Monster;\r\n}\r\n\r\nexport default class HitPointGauge extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const hpCurrent = this.props.combatant.hp || 0;\r\n            const hpMax = this.props.combatant.hpMax + this.props.combatant.hpTemp;\r\n            const hpBloodied = this.props.combatant.hpMax / 2;\r\n            const hpWidth = 100 * Math.max(hpCurrent, 0) / hpMax;\r\n\r\n            let style = '';\r\n            if (hpCurrent >= this.props.combatant.hpMax) {\r\n                style = 'bar unhurt';\r\n            } else if (hpCurrent <= hpBloodied) {\r\n                style = 'bar bloodied';\r\n            } else {\r\n                style = 'bar injured';\r\n            }\r\n\r\n            let hpTempBar = null;\r\n            if (this.props.combatant.hpTemp > 0) {\r\n                const hpTempWidth = 100 * Math.max(this.props.combatant.hpTemp, 0) / hpMax;\r\n                hpTempBar = <div className='bar temp' style={{ width: hpTempWidth + '%' }} />;\r\n            }\r\n\r\n            return (\r\n                <div className='hp-gauge'>\r\n                    <div className={style} style={{ width: hpWidth + '%' }} />\r\n                    {hpTempBar}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Combatant } from '../../models/combat';\r\nimport { Map, MapItem } from '../../models/map-folio';\r\nimport { Monster } from '../../models/monster-group';\r\nimport { PC } from '../../models/party';\r\n\r\nimport HitPointGauge from './hit-point-gauge';\r\n\r\ninterface Props {\r\n    map: Map;\r\n    mode: 'edit' | 'thumbnail' | 'combat';\r\n    combatants: ((Combatant & PC) | (Combatant & Monster))[];\r\n    showOverlay: boolean;\r\n    selectedItemID: string;\r\n    setSelectedItemID: (itemID: string | null) => void;\r\n    addMapTile: (x: number, y: number) => void;\r\n    gridSquareClicked: (x: number, y: number) => void;\r\n}\r\n\r\ninterface MapDimensions {\r\n    minX: number;\r\n    maxX: number;\r\n    minY: number;\r\n    maxY: number;\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\ninterface StyleData {\r\n    left: string;\r\n    top: string;\r\n    width: string;\r\n    height: string;\r\n}\r\n\r\nexport default class MapPanel extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        combatants: null,\r\n        showOverlay: false,\r\n        selectedItemID: null,\r\n        setSelectedItemID: null,\r\n        addMapTile: null,\r\n        gridSquareClicked: null\r\n    };\r\n\r\n    private getMapDimensions(border: number): MapDimensions | null {\r\n        let dimensions: MapDimensions | null = null;\r\n\r\n        this.props.map.items.filter(i => {\r\n            if (this.props.mode === 'edit') {\r\n                return i.type === 'tile';\r\n            }\r\n            return true;\r\n        }).forEach(i => {\r\n            if (!dimensions) {\r\n                dimensions = {\r\n                    minX: i.x,\r\n                    maxX: i.x + i.width - 1,\r\n                    minY: i.y,\r\n                    maxY: i.y + i.height - 1,\r\n                    width: 0,\r\n                    height: 0\r\n                };\r\n            } else {\r\n                dimensions.minX = Math.min(dimensions.minX, i.x);\r\n                dimensions.maxX = Math.max(dimensions.maxX, i.x + i.width - 1);\r\n                dimensions.minY = Math.min(dimensions.minY, i.y);\r\n                dimensions.maxY = Math.max(dimensions.maxY, i.y + i.height - 1);\r\n            }\r\n        });\r\n\r\n        if (!dimensions) {\r\n            // The map is blank\r\n            if (this.props.mode === 'thumbnail') {\r\n                return null;\r\n            }\r\n\r\n            dimensions = {\r\n                minX: 0,\r\n                maxX: 0,\r\n                minY: 0,\r\n                maxY: 0,\r\n                width: 0,\r\n                height: 0\r\n            };\r\n        }\r\n\r\n        // Apply the border\r\n        dimensions.minX -= border;\r\n        dimensions.maxX += border;\r\n        dimensions.minY -= border;\r\n        dimensions.maxY += border;\r\n\r\n        // Set width and height\r\n        dimensions.width = 1 + dimensions.maxX - dimensions.minX;\r\n        dimensions.height = 1 + dimensions.maxY - dimensions.minY;\r\n\r\n        return dimensions;\r\n    }\r\n\r\n    private getSideLength(): number {\r\n        switch (this.props.mode) {\r\n            case 'thumbnail':\r\n                return 5;\r\n            case 'edit':\r\n            case 'combat':\r\n                return 25;\r\n            default:\r\n                return 5;\r\n        }\r\n    }\r\n\r\n    private getStyle(x: number, y: number, width: number, height: number, mapDimensions: MapDimensions): StyleData {\r\n        const sideLength = this.getSideLength();\r\n\r\n        return {\r\n            left: 'calc(' + sideLength + 'px * ' + (x - mapDimensions.minX) + ')',\r\n            top: 'calc(' + sideLength + 'px * ' + (y - mapDimensions.minY) + ')',\r\n            width: 'calc((' + sideLength + 'px * ' + width + ') + 1px)',\r\n            height: 'calc((' + sideLength + 'px * ' + height + ') + 1px)'\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const border = (this.props.mode === 'edit') ? 2 : 0;\r\n            const mapDimensions = this.getMapDimensions(border);\r\n            if (!mapDimensions) {\r\n                return (\r\n                    <div>(blank map)</div>\r\n                );\r\n            }\r\n\r\n            // Draw the grid squares\r\n            const grid = [];\r\n            if (this.props.mode === 'edit') {\r\n                for (let y = mapDimensions.minY; y !== mapDimensions.maxY + 1; ++y) {\r\n                    for (let x = mapDimensions.minX; x !== mapDimensions.maxX + 1; ++x) {\r\n                        const gridStyle = this.getStyle(x, y, 1, 1, mapDimensions);\r\n                        grid.push(\r\n                            <GridSquare\r\n                                key={x + ',' + y}\r\n                                x={x}\r\n                                y={y}\r\n                                style={gridStyle}\r\n                                onClick={() => this.props.setSelectedItemID(null)}\r\n                                onDoubleClick={(posX, posY) => this.props.addMapTile(posX, posY)}\r\n                            />\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Draw the map tiles\r\n            const tiles = this.props.map.items\r\n                .filter(i => i.type === 'tile')\r\n                .map(i => {\r\n                    const tileStyle = this.getStyle(i.x, i.y, i.width, i.height, mapDimensions as MapDimensions);\r\n                    return (\r\n                        <MapTile\r\n                            key={i.id}\r\n                            tile={i}\r\n                            style={tileStyle}\r\n                            selectable={this.props.mode === 'edit'}\r\n                            selected={this.props.selectedItemID === i.id}\r\n                            thumbnail={this.props.mode === 'thumbnail'}\r\n                            select={id => this.props.mode === 'edit' ? this.props.setSelectedItemID(id) : null}\r\n                        />\r\n                    );\r\n                });\r\n\r\n            // Draw the tokens\r\n            let tokens: JSX.Element[] = [];\r\n            if (this.props.mode !== 'edit') {\r\n                tokens = this.props.map.items\r\n                    .filter(i => (i.type === 'monster') || (i.type === 'pc'))\r\n                    .map(i => {\r\n                        const tokenStyle = this.getStyle(i.x, i.y, i.width, i.height, mapDimensions as MapDimensions);\r\n                        const combatant = this.props.combatants.find(c => c.id === i.id);\r\n                        if (combatant) {\r\n                            return (\r\n                                <MapToken\r\n                                    key={i.id}\r\n                                    token={i}\r\n                                    combatant={combatant}\r\n                                    style={tokenStyle}\r\n                                    simple={this.props.mode === 'thumbnail'}\r\n                                    selectable={this.props.mode === 'combat'}\r\n                                    selected={this.props.selectedItemID ===  i.id}\r\n                                    select={id => this.props.setSelectedItemID(id)}\r\n                                />\r\n                            );\r\n                        }\r\n\r\n                        return null;\r\n                    })\r\n                    .filter(mt => mt !== null) as JSX.Element[];\r\n            }\r\n\r\n            // Draw the drag overlay\r\n            const dragOverlay = [];\r\n            if (this.props.showOverlay) {\r\n                for (let yOver = mapDimensions.minY; yOver !== mapDimensions.maxY + 1; ++yOver) {\r\n                    for (let xOver = mapDimensions.minX; xOver !== mapDimensions.maxX + 1; ++xOver) {\r\n                        const overlayStyle = this.getStyle(xOver, yOver, 1, 1, mapDimensions);\r\n                        dragOverlay.push(\r\n                            <GridSquare\r\n                                key={xOver + ',' + yOver}\r\n                                x={xOver}\r\n                                y={yOver}\r\n                                style={overlayStyle}\r\n                                overlay={true}\r\n                                onClick={(posX, posY) => this.props.gridSquareClicked(posX, posY)}\r\n                            />\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n\r\n            const style = 'map-panel ' + this.props.mode;\r\n            return (\r\n                <div className={style} onClick={() => this.props.setSelectedItemID(null)}>\r\n                    <div className='grid' style={{ height: ((this.getSideLength() * mapDimensions.height) + 1) + 'px' }}>\r\n                        {grid}\r\n                        {tiles}\r\n                        {tokens}\r\n                        {dragOverlay}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface GridSquareProps {\r\n    x: number;\r\n    y: number;\r\n    style: StyleData;\r\n    overlay: boolean;\r\n    onClick: (x: number, y: number) => void;\r\n    onDoubleClick: (x: number, y: number) => void;\r\n}\r\n\r\nclass GridSquare extends React.Component<GridSquareProps> {\r\n    public static defaultProps = {\r\n        overlay: false,\r\n        onDoubleClick: null\r\n    };\r\n\r\n    private click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (this.props.onClick) {\r\n            this.props.onClick(this.props.x, this.props.y);\r\n        }\r\n    }\r\n\r\n    private doubleClick(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (this.props.onDoubleClick) {\r\n            this.props.onDoubleClick(this.props.x, this.props.y);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'grid-square';\r\n        if (this.props.overlay) {\r\n            style += ' grid-overlay';\r\n        }\r\n\r\n        return (\r\n            <div\r\n                className={style}\r\n                style={this.props.style}\r\n                onClick={e => this.click(e)}\r\n                onDoubleClick={e => this.doubleClick(e)}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\ninterface MapTileProps {\r\n    tile: MapItem;\r\n    style: StyleData;\r\n    thumbnail: boolean;\r\n    selectable: boolean;\r\n    selected: boolean;\r\n    select: (tileID: string) => void;\r\n}\r\n\r\nclass MapTile extends React.Component<MapTileProps> {\r\n    private select(e: React.MouseEvent) {\r\n        if (this.props.selectable) {\r\n            e.stopPropagation();\r\n            this.props.select(this.props.tile.id);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'tile ' + this.props.tile.terrain;\r\n        if (this.props.selected) {\r\n            style += ' selected';\r\n        }\r\n        if (this.props.thumbnail) {\r\n            style += ' thumbnail';\r\n        }\r\n\r\n        return (\r\n            <div\r\n                className={style}\r\n                style={this.props.style}\r\n                onClick={e => this.select(e)}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\ninterface MapTokenProps {\r\n    token: MapItem;\r\n    combatant: (Combatant & PC) | (Combatant & Monster);\r\n    style: StyleData;\r\n    simple: boolean;\r\n    selectable: boolean;\r\n    selected: boolean;\r\n    select: (tokenID: string) => void;\r\n}\r\n\r\nclass MapToken extends React.Component<MapTokenProps> {\r\n    private select(e: React.MouseEvent) {\r\n        if (this.props.selectable) {\r\n            e.stopPropagation();\r\n            this.props.select(this.props.token.id);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'token ' + this.props.token.type;\r\n        if (this.props.selected) {\r\n            style += ' selected';\r\n        }\r\n        if (this.props.combatant.current) {\r\n            style += ' current';\r\n        }\r\n\r\n        let initials = null;\r\n        let hpGauge = null;\r\n        let altitudeBadge = null;\r\n        let conditionsBadge = null;\r\n        if (!this.props.simple) {\r\n            const name = this.props.combatant.displayName || this.props.combatant.name;\r\n            initials = (\r\n                <div className='initials'>{name.split(' ').map(s => s[0])}</div>\r\n            );\r\n\r\n            if (this.props.combatant.type === 'monster') {\r\n                hpGauge = (\r\n                    <HitPointGauge combatant={this.props.combatant as Combatant & Monster} />\r\n                );\r\n            }\r\n\r\n            if (this.props.combatant.altitude > 0) {\r\n                altitudeBadge = (\r\n                    <div className='badge altitude'>&#9206;</div>\r\n                );\r\n            }\r\n\r\n            if (this.props.combatant.altitude < 0) {\r\n                altitudeBadge = (\r\n                    <div className='badge altitude'>&#9207;</div>\r\n                );\r\n            }\r\n\r\n            if ((this.props.combatant.conditions) && (this.props.combatant.conditions.length > 0)) {\r\n                conditionsBadge = (\r\n                    <div className='badge'>&#9670;</div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div\r\n                title={this.props.combatant.displayName || this.props.combatant.name}\r\n                className={style}\r\n                style={this.props.style}\r\n                onClick={e => this.select(e)}\r\n            >\r\n                {initials}\r\n                {hpGauge}\r\n                {altitudeBadge}\r\n                {conditionsBadge}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Combat } from '../../models/combat';\r\n\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    combat: Combat;\r\n    selected: boolean;\r\n    setSelection: (combat: Combat) => void;\r\n}\r\n\r\nexport default class CombatListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            let map = null;\r\n            if (this.props.combat.map) {\r\n                map = (\r\n                    <MapPanel\r\n                        map={this.props.combat.map}\r\n                        mode='thumbnail'\r\n                        combatants={this.props.combat.combatants}\r\n                    />\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.combat)}>\r\n                    <div className='heading'>{this.props.combat.name || 'unnamed combat'}</div>\r\n                    <div className='text'>paused at {this.props.combat.timestamp}</div>\r\n                    {map}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport close from '../../resources/images/close-black.svg';\r\nimport arrow from '../../resources/images/down-arrow-black.svg';\r\n\r\ninterface Props {\r\n    content: any[];\r\n    heading: string;\r\n    hidden: boolean;\r\n    showClose: boolean;\r\n    showToggle: boolean;\r\n    close: () => void;\r\n}\r\n\r\ninterface State {\r\n    showCards: boolean;\r\n}\r\n\r\nexport default class CardGroup extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        heading: null,\r\n        hidden: false,\r\n        showClose: false,\r\n        showToggle: false,\r\n        close: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showCards: true\r\n        };\r\n    }\r\n\r\n    private toggleCards() {\r\n        this.setState({\r\n            showCards: !this.state.showCards\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            if (this.props.hidden) {\r\n                return null;\r\n            }\r\n\r\n            let heading = null;\r\n            if (this.props.heading) {\r\n                let closeBtn = null;\r\n                if (this.props.showClose) {\r\n                    closeBtn = (\r\n                        <img className='image' src={close} alt='close' onClick={() => this.props.close()} />\r\n                    );\r\n                }\r\n\r\n                let toggle = null;\r\n                if (this.props.showToggle) {\r\n                    const style = this.state.showCards ? 'image rotate' : 'image';\r\n                    toggle = (\r\n                        <img className={style} src={arrow} alt='arrow' onClick={() => this.toggleCards()} />\r\n                    );\r\n                }\r\n\r\n                heading = (\r\n                    <div className='heading'>\r\n                        <div className='title'>{this.props.heading}</div>\r\n                        {toggle}\r\n                        {closeBtn}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            let cards = [];\r\n            if ((this.props.content.length > 0) && this.state.showCards) {\r\n                cards = this.props.content;\r\n            }\r\n\r\n            return (\r\n                <div className='card-group'>\r\n                    {heading}\r\n                    <div className='row small-up-1 medium-up-2 large-up-3 collapse'>\r\n                        {cards}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    content: string | JSX.Element | JSX.Element[];\r\n    white: boolean;\r\n}\r\n\r\nexport default class Note extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        white: false\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'descriptive';\r\n            if (this.props.white) {\r\n                style += ' white';\r\n            }\r\n\r\n            return (\r\n                <div className={style}>\r\n                    {this.props.content}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combat, Combatant, Notification } from '../../models/combat';\r\nimport { Condition, ConditionDurationSaves } from '../../models/condition';\r\nimport { Monster, Trait } from '../../models/monster-group';\r\nimport { PC } from '../../models/party';\r\n\r\nimport MonsterCard from '../cards/monster-card';\r\nimport PCCard from '../cards/pc-card';\r\nimport ControlRow from '../controls/control-row';\r\nimport Spin from '../controls/spin';\r\nimport CombatListItem from '../list-items/combat-list-item';\r\nimport CardGroup from '../panels/card-group';\r\nimport HitPointGauge from '../panels/hit-point-gauge';\r\nimport MapPanel from '../panels/map-panel';\r\nimport Note from '../panels/note';\r\n\r\ninterface Props {\r\n    combats: Combat[];\r\n    combat: Combat | null;\r\n    filter: string;\r\n    showHelp: boolean;\r\n    createCombat: () => void;\r\n    resumeEncounter: (combat: Combat) => void;\r\n    close: (notification: Notification, removeCondition: boolean) => void;\r\n    mapAdd: (combatant: (Combatant & PC) | (Combatant & Monster), x: number, y: number) => void;\r\n    makeCurrent: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    makeActive: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    makeDefeated: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    removeCombatant: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    addCondition: (combatant: Combatant & Monster) => void;\r\n    editCondition: (combatant: Combatant & Monster, condition: Condition) => void;\r\n    removeCondition: (combatant: Combatant & Monster, conditionID: string) => void;\r\n    mapMove: (combatant: (Combatant & PC) | (Combatant & Monster), dir: string) => void;\r\n    mapRemove: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    endTurn: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    changeHP: (combatant: Combatant & Monster, hp: number, temp: number) => void;\r\n    changeValue: (source: {}, type: string, value: any) => void;\r\n    nudgeValue: (source: {}, type: string, delta: number) => void;\r\n}\r\n\r\ninterface State {\r\n    selectedTokenID: string | null;\r\n    addingToMapID: string | null;\r\n}\r\n\r\nexport default class CombatManagerScreen extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            selectedTokenID: null,  // The ID of the combatant that's selected\r\n            addingToMapID: null     // The ID of the combatant we're adding to the map\r\n        };\r\n    }\r\n\r\n    private setSelectedTokenID(id: string | null) {\r\n        this.setState({\r\n            selectedTokenID: id\r\n        });\r\n    }\r\n\r\n    private setAddingToMapID(id: string | null) {\r\n        this.setState({\r\n            addingToMapID: id\r\n        });\r\n    }\r\n\r\n    private createCard(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        let mode = 'combat';\r\n        if (this.props.combat && this.props.combat.map) {\r\n            mode += ' tactical';\r\n            const onMap = this.props.combat.map.items.find(i => i.id === combatant.id);\r\n            mode += onMap ? ' on-map' : ' off-map';\r\n        }\r\n\r\n        switch (combatant.type) {\r\n            case 'pc':\r\n                return (\r\n                    <PCCard\r\n                        key='selected'\r\n                        combatant={combatant as Combatant & PC}\r\n                        mode={mode}\r\n                        changeValue={(source, type, value) => this.props.changeValue(source, type, value)}\r\n                        nudgeValue={(source, type, delta) => this.props.nudgeValue(source, type, delta)}\r\n                        makeCurrent={c => this.props.makeCurrent(c as Combatant & PC)}\r\n                        makeActive={c => this.props.makeActive(c as Combatant & PC)}\r\n                        makeDefeated={c => this.props.makeDefeated(c as Combatant & PC)}\r\n                        removeCombatant={c => this.props.removeCombatant(c as Combatant & PC)}\r\n                        mapAdd={c => this.setAddingToMapID(c.id)}\r\n                        mapMove={(c, dir) => this.props.mapMove(c as Combatant & PC, dir)}\r\n                        mapRemove={c => this.props.mapRemove(c as Combatant & PC)}\r\n                        endTurn={c => this.props.endTurn(c as Combatant & PC)}\r\n                    />\r\n                );\r\n            case 'monster':\r\n                return (\r\n                    <MonsterCard\r\n                        key='selected'\r\n                        combatant={combatant as Combatant & Monster}\r\n                        mode={mode}\r\n                        combat={this.props.combat as Combat}\r\n                        changeValue={(c, type, value) => this.props.changeValue(c, type, value)}\r\n                        nudgeValue={(c, type, delta) => this.props.nudgeValue(c, type, delta)}\r\n                        makeCurrent={c => this.props.makeCurrent(c as Combatant & Monster)}\r\n                        makeActive={c => this.props.makeActive(c as Combatant & Monster)}\r\n                        makeDefeated={c => this.props.makeDefeated(c as Combatant & Monster)}\r\n                        removeCombatant={c => this.props.removeCombatant(c as Combatant & Monster)}\r\n                        addCondition={c => this.props.addCondition(c as Combatant & Monster)}\r\n                        editCondition={(c, condition) => this.props.editCondition(c as Combatant & Monster, condition)}\r\n                        removeCondition={(c, conditionID) => this.props.removeCondition(c as Combatant & Monster, conditionID)}\r\n                        nudgeConditionValue={(c, type, delta) => this.props.nudgeValue(c, type, delta)}\r\n                        mapAdd={c => this.setAddingToMapID(c.id)}\r\n                        mapMove={(c, dir) => this.props.mapMove(c as Combatant & Monster, dir)}\r\n                        mapRemove={c => this.props.mapRemove(c as Combatant & Monster)}\r\n                        endTurn={(c) => this.props.endTurn(c as Combatant & Monster)}\r\n                        changeHP={(c, hp, temp) => this.props.changeHP(c as Combatant & Monster, hp, temp)}\r\n                    />\r\n                );\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    private addCombatantToMap(x: number, y: number) {\r\n        if (this.props.combat) {\r\n            const combatant = this.props.combat.combatants.find(c => c.id === this.state.addingToMapID);\r\n            if (combatant) {\r\n                this.props.mapAdd(combatant, x, y);\r\n            }\r\n            this.setAddingToMapID(null);\r\n        }\r\n    }\r\n\r\n    private showCombat(combat: Combat) {\r\n        return Utils.match(this.props.filter, combat.name);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            if (this.props.combat) {\r\n                const current: JSX.Element[] = [];\r\n                let pending: JSX.Element[] = [];\r\n                let active: JSX.Element[] = [];\r\n                const defeated: JSX.Element[] = [];\r\n\r\n                this.props.combat.combatants.forEach(combatant => {\r\n                    if (combatant.current) {\r\n                        current.push(\r\n                            <div key={combatant.id}>\r\n                                {this.createCard(combatant)}\r\n                            </div>\r\n                        );\r\n                    }\r\n                    if (combatant.pending && !combatant.active && !combatant.defeated) {\r\n                        pending.push(\r\n                            <PendingCombatantRow\r\n                                key={combatant.id}\r\n                                combatant={combatant}\r\n                                select={c => this.setSelectedTokenID(c.id)}\r\n                                selected={combatant.id === this.state.selectedTokenID}\r\n                                nudgeValue={(c, type, delta) => this.props.nudgeValue(c, type, delta)}\r\n                                makeActive={c => this.props.makeActive(c)}\r\n                            />\r\n                        );\r\n                    }\r\n                    if (!combatant.pending && combatant.active && !combatant.defeated) {\r\n                        switch (combatant.type) {\r\n                            case 'pc':\r\n                                active.push(\r\n                                    <PCRow\r\n                                        key={combatant.id}\r\n                                        combatant={combatant as Combatant & PC}\r\n                                        combat={this.props.combat as Combat}\r\n                                        select={c => this.setSelectedTokenID(c.id)}\r\n                                        selected={combatant.id === this.state.selectedTokenID}\r\n                                    />\r\n                                );\r\n                                break;\r\n                            case 'monster':\r\n                                active.push(\r\n                                    <MonsterRow\r\n                                        key={combatant.id}\r\n                                        combatant={combatant as Combatant & Monster}\r\n                                        combat={this.props.combat as Combat}\r\n                                        select={c => this.setSelectedTokenID(c.id)}\r\n                                        selected={combatant.id === this.state.selectedTokenID}\r\n                                    />\r\n                                );\r\n                                break;\r\n                        }\r\n                    }\r\n                    if (!combatant.pending && !combatant.active && combatant.defeated) {\r\n                        switch (combatant.type) {\r\n                            case 'pc':\r\n                                defeated.push(\r\n                                    <PCRow\r\n                                        key={combatant.id}\r\n                                        combatant={combatant as Combatant & PC}\r\n                                        combat={this.props.combat as Combat}\r\n                                        select={c => this.setSelectedTokenID(c.id)}\r\n                                        selected={combatant.id === this.state.selectedTokenID}\r\n                                    />\r\n                                );\r\n                                break;\r\n                            case 'monster':\r\n                                defeated.push(\r\n                                    <MonsterRow\r\n                                        key={combatant.id}\r\n                                        combatant={combatant as Combatant & Monster}\r\n                                        combat={this.props.combat as Combat}\r\n                                        select={c => this.setSelectedTokenID(c.id)}\r\n                                        selected={combatant.id === this.state.selectedTokenID}\r\n                                    />\r\n                                );\r\n                                break;\r\n                        }\r\n                    }\r\n                });\r\n\r\n                if (this.props.showHelp && (pending.length !== 0)) {\r\n                    const pendingHelp = (\r\n                        <div key='pending-help'>\r\n                            <Note\r\n                                content={\r\n                                    <div>\r\n                                        <div className='section'>these combatants are not yet part of the encounter</div>\r\n                                        <div className='section'>set initiative on each of them, then add them to the encounter</div>\r\n                                    </div>\r\n                                }\r\n                            />\r\n                        </div>\r\n                    );\r\n                    pending = [pendingHelp].concat(pending);\r\n                }\r\n\r\n                if (this.props.showHelp && (current.length === 0)) {\r\n                    const activeHelp = (\r\n                        /* tslint:disable:max-line-length */\r\n                        <div key='active-help'>\r\n                            <Note\r\n                                content={\r\n                                    <div>\r\n                                        <div className='section'>these are the combatants taking part in this encounter; you can select them to see their stat blocks (on the right)</div>\r\n                                        <div className='section'>to begin the encounter, select the first combatant and press the <b>start turn</b> button on their stat block</div>\r\n                                    </div>\r\n                                }\r\n                            />\r\n                        </div>\r\n                        /* tslint:enable:max-line-length */\r\n                    );\r\n                    active = [activeHelp].concat(active);\r\n                }\r\n\r\n                if (current.length === 0) {\r\n                    current.push(\r\n                        <Note\r\n                            key='current'\r\n                            content={\r\n                                <div className='section'>\r\n                                    the current initiative holder will be displayed here\r\n                                </div>\r\n                            }\r\n                        />\r\n                    );\r\n                }\r\n\r\n                let notificationSection = null;\r\n                if (this.props.combat.notifications.length > 0) {\r\n                    const notifications = this.props.combat.notifications.map(n => (\r\n                        <NotificationPanel\r\n                            key={n.id}\r\n                            notification={n}\r\n                            close={(notification, removeCondition) => this.props.close(notification, removeCondition)}\r\n                        />\r\n                    ));\r\n                    notificationSection = (\r\n                        <div className='notifications'>\r\n                            {notifications}\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                let mapSection = null;\r\n                if (this.props.combat.map) {\r\n                    mapSection = (\r\n                        <MapPanel\r\n                            map={this.props.combat.map}\r\n                            mode='combat'\r\n                            showOverlay={this.state.addingToMapID !== null}\r\n                            combatants={this.props.combat.combatants}\r\n                            selectedItemID={this.state.selectedTokenID ? this.state.selectedTokenID : undefined}\r\n                            setSelectedItemID={id => {\r\n                                if (id) {\r\n                                    this.setSelectedTokenID(id);\r\n                                }\r\n                            }}\r\n                            gridSquareClicked={(x, y) => this.addCombatantToMap(x, y)}\r\n                        />\r\n                    );\r\n                }\r\n\r\n                let selectedCombatant = null;\r\n                if (this.state.selectedTokenID) {\r\n                    const combatant = this.props.combat.combatants.find(c => c.id === this.state.selectedTokenID);\r\n                    if (combatant && !combatant.current) {\r\n                        selectedCombatant = this.createCard(combatant);\r\n                    }\r\n                }\r\n                if (!selectedCombatant) {\r\n                    selectedCombatant = (\r\n                        <Note\r\n                            key='selected'\r\n                            content={\r\n                                <div className='section'>\r\n                                    select a pc or monster from the central list to see its details here\r\n                                </div>\r\n                            }\r\n                        />\r\n                    );\r\n                }\r\n\r\n                return (\r\n                    <div className='combat-manager row collapse'>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable'>\r\n                            <CardGroup\r\n                                heading='initiative holder'\r\n                                content={current}\r\n                            />\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable'>\r\n                            {notificationSection}\r\n                            <CardGroup\r\n                                heading='waiting for intiative to be entered'\r\n                                content={pending}\r\n                                hidden={pending.length === 0}\r\n                                showToggle={true}\r\n                            />\r\n                            {mapSection}\r\n                            <CardGroup\r\n                                heading='combatants in the encounter'\r\n                                content={active}\r\n                                hidden={active.length === 0}\r\n                            />\r\n                            <CardGroup\r\n                                heading='defeated'\r\n                                content={defeated}\r\n                                hidden={defeated.length === 0}\r\n                                showToggle={true}\r\n                            />\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable'>\r\n                            <CardGroup\r\n                                heading='selected combatant'\r\n                                content={[selectedCombatant]}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                let help = null;\r\n                if (this.props.showHelp) {\r\n                    help = (\r\n                        <HelpCard combats={this.props.combats} />\r\n                    );\r\n                }\r\n\r\n                const combats = this.props.combats.filter(c => this.showCombat(c)).map(c => {\r\n                    return (\r\n                        <CombatListItem\r\n                            key={c.id}\r\n                            combat={c}\r\n                            selected={false}\r\n                            setSelection={combat => this.props.resumeEncounter(combat)}\r\n                        />\r\n                    );\r\n                });\r\n\r\n                return (\r\n                    <div className='combat-manager row collapse'>\r\n                        <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                            {help}\r\n                            <button onClick={() => this.props.createCombat()}>start a new combat</button>\r\n                            {combats}\r\n                        </div>\r\n                        <div className='columns small-8 medium-8 large-9 scrollable' />\r\n                    </div>\r\n                );\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface HelpCardProps {\r\n    combats: Combat[];\r\n}\r\n\r\nclass HelpCard extends React.Component<HelpCardProps> {\r\n    public render() {\r\n        let action: JSX.Element | null = null;\r\n        if (this.props.combats.length === 0) {\r\n            action = (\r\n                <div className='section'>to start a combat encounter, press the button below</div>\r\n            );\r\n        } else {\r\n            action = (\r\n                <div>\r\n                    <div className='section'>below you will see a list of encounters that you have paused</div>\r\n                    <div className='section'>you can resume a paused combat by selecting it</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Note\r\n                content={\r\n                    <div>\r\n                        <div className='section'>here you can run a combat encounter by specifying a party and an encounter</div>\r\n                        <div className='divider' />\r\n                        {action}\r\n                    </div>\r\n                }\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\ninterface NotificationProps {\r\n    notification: Notification;\r\n    close: (notification: Notification, removeCondition: boolean) => void;\r\n}\r\n\r\nclass NotificationPanel extends React.Component<NotificationProps> {\r\n    private success() {\r\n        switch (this.props.notification.type) {\r\n            case 'condition-save':\r\n            case 'condition-end':\r\n                const condition = this.props.notification.data as Condition;\r\n                if (condition.duration) {\r\n                    // Reduce save by 1\r\n                    if ((condition.duration.type === 'saves') || (condition.duration.type === 'rounds')) {\r\n                        condition.duration.count -= 1;\r\n                        if (condition.duration.count === 0) {\r\n                            // Remove the condition\r\n                            this.close(true);\r\n                        } else {\r\n                            this.close();\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            case 'trait-recharge':\r\n                // Mark trait as recharged\r\n                const trait = this.props.notification.data as Trait;\r\n                trait.uses = 0;\r\n                this.close();\r\n                break;\r\n        }\r\n    }\r\n\r\n    private close(removeCondition = false) {\r\n        this.props.close(this.props.notification, removeCondition);\r\n    }\r\n\r\n    public render() {\r\n        const combatant = this.props.notification.combatant as (Combatant & Monster);\r\n        const condition = this.props.notification.data as Condition;\r\n        const trait = this.props.notification.data as Trait;\r\n\r\n        const name = combatant.displayName || combatant.name || 'unnamed monster';\r\n        switch (this.props.notification.type) {\r\n            case 'condition-save':\r\n                const duration = condition.duration as ConditionDurationSaves;\r\n                let saveType = duration.saveType.toString();\r\n                if (saveType !== 'death') {\r\n                    saveType = saveType.toUpperCase();\r\n                }\r\n                return (\r\n                    <div key={this.props.notification.id} className='descriptive'>\r\n                        <div className='text'>\r\n                            {name} must make a {saveType} save against dc {duration.saveDC}\r\n                        </div>\r\n                        <ControlRow\r\n                            controls={[\r\n                                <button key='success' onClick={() => this.success()}>success</button>,\r\n                                <button key='close' onClick={() => this.close()}>close</button>\r\n                            ]}\r\n                        />\r\n                    </div>\r\n                );\r\n            case 'condition-end':\r\n                return (\r\n                    <div key={this.props.notification.id} className='descriptive'>\r\n                        <div className='text'>\r\n                            {name} is no longer affected by condition {condition.name}\r\n                        </div>\r\n                        <ControlRow\r\n                            controls={[\r\n                                <button key='close' onClick={() => this.close()}>close</button>\r\n                            ]}\r\n                        />\r\n                    </div>\r\n                );\r\n            case 'trait-recharge':\r\n                return (\r\n                    <div key={this.props.notification.id} className='descriptive'>\r\n                        <div className='text'>\r\n                            {name} can attempt to recharge {trait.name} ({trait.usage})\r\n                        </div>\r\n                        <ControlRow\r\n                            controls={[\r\n                                <button key='recharge' onClick={() => this.success()}>recharge</button>,\r\n                                <button key='close' onClick={() => this.close()}>close</button>\r\n                            ]}\r\n                        />\r\n                    </div>\r\n                );\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface PendingCombatantRowProps {\r\n    combatant: (Combatant & PC) | (Combatant & Monster);\r\n    selected: boolean;\r\n    select: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    nudgeValue: (combatant: (Combatant & PC) | (Combatant & Monster), field: string, delta: number) => void;\r\n    makeActive: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n}\r\n\r\nclass PendingCombatantRow extends React.Component<PendingCombatantRowProps> {\r\n    private getInformationText() {\r\n        if (this.props.selected) {\r\n            return 'selected';\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private onClick(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (this.props.select) {\r\n            this.props.select(this.props.combatant);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'combatant-row ' + this.props.combatant.type;\r\n        if (this.props.combatant.current || this.props.selected) {\r\n            style += ' highlight';\r\n        }\r\n\r\n        return (\r\n            <div className={style} onClick={e => this.onClick(e)}>\r\n                <div className='name'>\r\n                    {this.props.combatant.displayName || this.props.combatant.name || 'combatant'}\r\n                    <span className='info'>{this.getInformationText()}</span>\r\n                </div>\r\n                <div className='content'>\r\n                    <Spin\r\n                        source={this.props.combatant}\r\n                        name='initiative'\r\n                        label='initiative'\r\n                        nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'initiative', delta)}\r\n                    />\r\n                    <button onClick={e => { e.stopPropagation(); this.props.makeActive(this.props.combatant); }}>add to encounter</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface PCRowProps {\r\n    combatant: Combatant & PC;\r\n    combat: Combat;\r\n    selected: boolean;\r\n    select: (combatant: Combatant & PC) => void;\r\n}\r\n\r\nclass PCRow extends React.Component<PCRowProps> {\r\n    private getInformationText() {\r\n        if (this.props.combatant.current) {\r\n            return 'current turn';\r\n        }\r\n\r\n        if (this.props.selected) {\r\n            return 'selected';\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private onClick(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (!this.props.combatant.current && !this.props.selected && this.props.select) {\r\n            this.props.select(this.props.combatant);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'combatant-row ' + this.props.combatant.type;\r\n        if (this.props.combatant.current || this.props.selected) {\r\n            style += ' highlight';\r\n        }\r\n\r\n        const desc = (this.props.combatant.race || 'unknown race')\r\n                + ' ' + (this.props.combatant.classes || 'unknown class')\r\n                + ', level ' + this.props.combatant.level;\r\n\r\n        const notes = [];\r\n        if (this.props.combat.map) {\r\n            if (!this.props.combatant.pending && !this.props.combat.map.items.find(i => i.id === this.props.combatant.id)) {\r\n                notes.push(\r\n                    <div key='not-on-map' className='note'>not on the map</div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className={style} onClick={e => this.onClick(e)}>\r\n                <div className='name'>\r\n                    {this.props.combatant.displayName || this.props.combatant.name || 'combatant'}\r\n                    {this.props.combatant.player ? ' | ' + this.props.combatant.player : ''}\r\n                    <span className='info'>{this.getInformationText()}</span>\r\n                </div>\r\n                <div className='content'>\r\n                    <div className='section lowercase'>\r\n                        {desc}\r\n                    </div>\r\n                    {notes}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface MonsterRowProps {\r\n    combatant: Combatant & Monster;\r\n    combat: Combat;\r\n    selected: boolean;\r\n    select: (combatant: Combatant & Monster) => void;\r\n}\r\n\r\nclass MonsterRow extends React.Component<MonsterRowProps> {\r\n    private getInformationText() {\r\n        if (this.props.combatant.current) {\r\n            return 'current turn';\r\n        }\r\n\r\n        if (this.props.selected) {\r\n            return 'selected';\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private onClick(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (!this.props.combatant.current && !this.props.selected && this.props.select) {\r\n            this.props.select(this.props.combatant);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'combatant-row ' + this.props.combatant.type;\r\n        if (this.props.combatant.current || this.props.selected) {\r\n            style += ' highlight';\r\n        }\r\n\r\n        let hp = (this.props.combatant.hp ? this.props.combatant.hp : 0).toString();\r\n        if (this.props.combatant.hpTemp > 0) {\r\n            hp += '+' + this.props.combatant.hpTemp;\r\n        }\r\n\r\n        let gauge = null;\r\n        if (!this.props.combatant.pending) {\r\n            gauge = (\r\n                <HitPointGauge combatant={this.props.combatant} />\r\n            );\r\n        }\r\n\r\n        let conditions = null;\r\n        if (this.props.combatant.conditions) {\r\n            conditions = this.props.combatant.conditions.map(c => {\r\n                let name = c.name;\r\n                if (c.name === 'exhaustion') {\r\n                    name += ' (' + c.level + ')';\r\n                }\r\n                if ((c.name === 'custom') && (c.text)) {\r\n                    name = c.text;\r\n                }\r\n                if (c.duration) {\r\n                    name += ' ' + Utils.conditionDurationText(c, this.props.combat);\r\n                }\r\n                const description = [];\r\n                const text = Utils.conditionText(c);\r\n                for (let n = 0; n !== text.length; ++n) {\r\n                    description.push(<li key={n} className='condition-text'>{text[n]}</li>);\r\n                }\r\n                return (\r\n                    <Note\r\n                        key={c.id}\r\n                        white={true}\r\n                        content={\r\n                            <div className='condition'>\r\n                                <div className='condition-name'>{name}</div>\r\n                                <ul>\r\n                                    {description}\r\n                                </ul>\r\n                            </div>\r\n                        }\r\n                    />\r\n                );\r\n            });\r\n        }\r\n\r\n        const notes = [];\r\n        if (this.props.combat.map) {\r\n            if (!this.props.combatant.pending && !this.props.combat.map.items.find(i => i.id === this.props.combatant.id)) {\r\n                notes.push(\r\n                    <div key='not-on-map' className='note'>not on the map</div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className={style} onClick={e => this.onClick(e)}>\r\n                <div className='name'>\r\n                    {this.props.combatant.displayName || this.props.combatant.name || 'combatant'}\r\n                    <span className='info'>{this.getInformationText()}</span>\r\n                </div>\r\n                <div className='content'>\r\n                    <div className='section key-stats'>\r\n                        <div className='key-stat'>\r\n                            <div className='stat-label'>ac</div>\r\n                            <div className='stat-value'>{this.props.combatant.ac}</div>\r\n                        </div>\r\n                        <div className='key-stat'>\r\n                            <div className='stat-value'>{hp}</div>\r\n                            <div className='stat-label'>hp</div>\r\n                        </div>\r\n                    </div>\r\n                    {gauge}\r\n                    {conditions}\r\n                    {notes}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Encounter, EncounterSlot } from '../../models/encounter';\r\nimport { Monster } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\ninterface Props {\r\n    encounter: Encounter;\r\n    party: Party | null;\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n}\r\n\r\nexport default class DifficultyChartPanel extends React.Component<Props> {\r\n    public render() {\r\n        let monsterCount = 0;\r\n        let monsterXp = 0;\r\n        let slots: EncounterSlot[] = [];\r\n        slots = slots.concat(this.props.encounter.slots);\r\n        this.props.encounter.waves.forEach(wave => {\r\n            slots = slots.concat(wave.slots);\r\n        });\r\n        slots.forEach(slot => {\r\n            monsterCount += slot.count;\r\n            const monster = this.props.getMonster(slot.monsterName, slot.monsterGroupName);\r\n            if (monster) {\r\n                monsterXp += Utils.experience(monster.challenge) * slot.count;\r\n            }\r\n        });\r\n\r\n        const adjustedXp = monsterXp * Utils.experienceFactor(monsterCount);\r\n\r\n        let xpThresholds;\r\n        let diffSection;\r\n        if (this.props.party) {\r\n            let xpEasy = 0;\r\n            let xpMedium = 0;\r\n            let xpHard = 0;\r\n            let xpDeadly = 0;\r\n\r\n            const pcs = this.props.party.pcs.filter(pc => pc.active);\r\n            pcs.forEach(pc => {\r\n                xpEasy += Utils.pcExperience(pc.level, 'easy');\r\n                xpMedium += Utils.pcExperience(pc.level, 'medium');\r\n                xpHard += Utils.pcExperience(pc.level, 'hard');\r\n                xpDeadly += Utils.pcExperience(pc.level, 'deadly');\r\n            });\r\n\r\n            let difficulty = null;\r\n            let adjustedDifficulty = null;\r\n            if (adjustedXp > 0) {\r\n                difficulty = 'trivial';\r\n                if (adjustedXp >= xpEasy) {\r\n                    difficulty = 'easy';\r\n                }\r\n                if (adjustedXp >= xpMedium) {\r\n                    difficulty = 'medium';\r\n                }\r\n                if (adjustedXp >= xpHard) {\r\n                    difficulty = 'hard';\r\n                }\r\n                if (adjustedXp >= xpDeadly) {\r\n                    difficulty = 'deadly';\r\n                }\r\n                adjustedDifficulty = difficulty;\r\n\r\n                if ((pcs.length < 3) || (pcs.length > 5)) {\r\n                    const small = pcs.length < 3;\r\n                    switch (difficulty) {\r\n                        case 'trivial':\r\n                            adjustedDifficulty = small ? 'easy' : 'trivial';\r\n                            break;\r\n                        case 'easy':\r\n                            adjustedDifficulty = small ? 'medium' : 'trivial';\r\n                            break;\r\n                        case 'medium':\r\n                            adjustedDifficulty = small ? 'hard' : 'easy';\r\n                            break;\r\n                        case 'hard':\r\n                            adjustedDifficulty = small ? 'deadly' : 'medium';\r\n                            break;\r\n                        case 'deadly':\r\n                            adjustedDifficulty = small ? 'deadly' : 'hard';\r\n                            break;\r\n                        default:\r\n                            adjustedDifficulty = '';\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            xpThresholds = (\r\n                <div className='table'>\r\n                    <div>\r\n                        <div className='cell four'><b>easy</b></div>\r\n                        <div className='cell four'><b>medium</b></div>\r\n                        <div className='cell four'><b>hard</b></div>\r\n                        <div className='cell four'><b>deadly</b></div>\r\n                    </div>\r\n                    <div>\r\n                        <div className='cell four'>{xpEasy} xp</div>\r\n                        <div className='cell four'>{xpMedium} xp</div>\r\n                        <div className='cell four'>{xpHard} xp</div>\r\n                        <div className='cell four'>{xpDeadly} xp</div>\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            const getLeft = (xp: number) => {\r\n                const max = Math.max(adjustedXp, (xpDeadly * 1.2));\r\n                return (100 * xp) / max;\r\n            };\r\n\r\n            const getRight = (xp: number) => {\r\n                return 100 - getLeft(xp);\r\n            };\r\n\r\n            diffSection = (\r\n                <div>\r\n                    <div className='difficulty-gauge'>\r\n                        <div className='bar-container'>\r\n                            <div className='bar trivial' style={{ left: '0', right: getRight(xpEasy) + '%' }} />\r\n                        </div>\r\n                        <div className='bar-container'>\r\n                            <div className='bar easy' style={{ left: getLeft(xpEasy) + '%', right: getRight(xpMedium) + '%' }} />\r\n                        </div>\r\n                        <div className='bar-container'>\r\n                            <div className='bar medium' style={{ left: getLeft(xpMedium) + '%', right: getRight(xpHard) + '%' }} />\r\n                        </div>\r\n                        <div className='bar-container'>\r\n                            <div className='bar hard' style={{ left: getLeft(xpHard) + '%', right: getRight(xpDeadly) + '%' }} />\r\n                        </div>\r\n                        <div className='bar-container'>\r\n                            <div className='bar deadly' style={{ left: getLeft(xpDeadly) + '%', right: '0' }} />\r\n                        </div>\r\n                        <div className='encounter-container'>\r\n                            <div className='encounter' style={{ left: (getLeft(adjustedXp) - 0.5) + '%' }} />\r\n                        </div>\r\n                    </div>\r\n                    <div className='subheading'>difficulty</div>\r\n                    <div className='section'>\r\n                        difficulty for this party\r\n                        <div className='right'>{difficulty}</div>\r\n                    </div>\r\n                    <div className='section' style={{ display: (adjustedDifficulty === difficulty) ? 'none' : ''}}>\r\n                        effective difficulty for {pcs.length} pc(s)\r\n                        <div className='right'><b>{adjustedDifficulty}</b></div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='subheading'>xp value</div>\r\n                <div className='section'>\r\n                    xp for this encounter\r\n                    <div className='right'>{monsterXp} xp</div>\r\n                </div>\r\n                <div className='section' style={{ display: (adjustedXp === monsterXp) ? 'none' : ''}}>\r\n                    effective xp for {monsterCount} monster(s)\r\n                    <div className='right'>{adjustedXp} xp</div>\r\n                </div>\r\n                {xpThresholds}\r\n                {diffSection}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Encounter } from '../../models/encounter';\r\nimport { Monster } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport Dropdown from '../controls/dropdown';\r\nimport DifficultyChartPanel from '../panels/difficulty-chart-panel';\r\nimport InfoCard from './info-card';\r\n\r\nimport arrow from '../../resources/images/down-arrow.svg';\r\n\r\ninterface Props {\r\n    selection: Encounter;\r\n    parties: Party[];\r\n    filter: string;\r\n    changeValue: (field: string, value: string) => void;\r\n    addWave: () => void;\r\n    removeEncounter: () => void;\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n}\r\n\r\ninterface State {\r\n    showDetails: boolean;\r\n    party: Party | null;\r\n}\r\n\r\nexport default class EncounterCard extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showDetails: false,\r\n            party: null\r\n        };\r\n    }\r\n\r\n    private toggleDetails() {\r\n        this.setState({\r\n            showDetails: !this.state.showDetails\r\n        });\r\n    }\r\n\r\n    private selectParty(partyID: string) {\r\n        const party = this.props.parties.find(p => p.id === partyID);\r\n        this.setState({\r\n            party: party as Party\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const partyOptions = [];\r\n            if (this.props.parties) {\r\n                for (let n = 0; n !== this.props.parties.length; ++n) {\r\n                    const party = this.props.parties[n];\r\n                    partyOptions.push({\r\n                        id: party.id,\r\n                        text: party.name\r\n                    });\r\n                }\r\n            }\r\n\r\n            const difficultySection = (\r\n                <div>\r\n                    <Dropdown\r\n                        options={partyOptions}\r\n                        placeholder='select party...'\r\n                        selectedID={this.state.party ? this.state.party.id : undefined}\r\n                        select={optionID => this.selectParty(optionID)}\r\n                    />\r\n                    <DifficultyChartPanel\r\n                        encounter={this.props.selection}\r\n                        party={this.state.party}\r\n                        getMonster={(monsterName, monsterGroupName) => this.props.getMonster(monsterName, monsterGroupName)}\r\n                    />\r\n                </div>\r\n            );\r\n\r\n            const imageStyle = this.state.showDetails ? 'image rotate' : 'image';\r\n\r\n            const heading = (\r\n                <div className='heading'>\r\n                    <div className='title'>encounter</div>\r\n                    <img className={imageStyle} src={arrow} alt='arrow' onClick={() => this.toggleDetails()} />\r\n                </div>\r\n            );\r\n\r\n            const content = (\r\n                <div>\r\n                    <div className='section'>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='encounter name'\r\n                            value={this.props.selection.name}\r\n                            disabled={!!this.props.filter}\r\n                            onChange={event => this.props.changeValue('name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div style={{ display: this.state.showDetails ? '' : 'none' }}>\r\n                        <div className='divider' />\r\n                        {difficultySection}\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.addWave()}>add a new wave</button>\r\n                        <ConfirmButton text='delete encounter' callback={() => this.props.removeEncounter()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            return (\r\n                <InfoCard heading={heading} content={content} />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    title: string;\r\n    getContent: () => (string | JSX.Element);\r\n}\r\n\r\nexport default class ErrorCard extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        title: null\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            let heading = null;\r\n            if (this.props.title) {\r\n                heading = <div className='heading'><div className='title'>{this.props.title}</div></div>;\r\n            }\r\n\r\n            const content = this.props.getContent();\r\n\r\n            return (\r\n                <div className='card error'>\r\n                    {heading}\r\n                    <div className='card-content'>\r\n                        {content}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { CATEGORY_TYPES, SIZE_TYPES } from '../../models/monster-group';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport Spin from '../controls/spin';\r\n\r\nimport arrow from '../../resources/images/down-arrow.svg';\r\n\r\ninterface Props {\r\n    filter: {\r\n        name: string,\r\n        challengeMin: number;\r\n        challengeMax: number;\r\n        category: string;\r\n        size: string;\r\n    };\r\n    changeValue: (type: 'name' | 'challengeMin' | 'challengeMax' | 'category' | 'size', value: any) => void;\r\n    nudgeValue: (type: 'challengeMin' | 'challengeMax', delta: number) => void;\r\n    resetFilter: () => void;\r\n}\r\n\r\ninterface State {\r\n    showAll: boolean;\r\n}\r\n\r\nexport default class FilterCard extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showAll: false\r\n        };\r\n    }\r\n\r\n    private toggleAll() {\r\n        this.setState({\r\n            showAll: !this.state.showAll\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const sizes = ['all sizes'].concat(SIZE_TYPES);\r\n            const sizeOptions = sizes.map(size => ({ id: size, text: size }));\r\n\r\n            const categories = ['all types'].concat(CATEGORY_TYPES);\r\n            const catOptions = categories.map(cat => ({ id: cat, text: cat }));\r\n\r\n            let content = null;\r\n            if (this.state.showAll) {\r\n                content = (\r\n                    <div>\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='name'\r\n                                value={this.props.filter.name}\r\n                                onChange={event => this.props.changeValue('name', event.target.value)}\r\n                            />\r\n                        </div>\r\n                        <Spin\r\n                            source={this.props.filter}\r\n                            name='challengeMin'\r\n                            label='min cr'\r\n                            display={value => Utils.challenge(value)}\r\n                            nudgeValue={delta => this.props.nudgeValue('challengeMin', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.filter}\r\n                            name='challengeMax'\r\n                            label='max cr'\r\n                            display={value => Utils.challenge(value)}\r\n                            nudgeValue={delta => this.props.nudgeValue('challengeMax', delta)}\r\n                        />\r\n                        <Dropdown\r\n                            options={sizeOptions}\r\n                            placeholder='filter by size...'\r\n                            selectedID={this.props.filter.size}\r\n                            select={optionID => this.props.changeValue('size', optionID)}\r\n                        />\r\n                        <Dropdown\r\n                            options={catOptions}\r\n                            placeholder='filter by type...'\r\n                            selectedID={this.props.filter.category}\r\n                            select={optionID => this.props.changeValue('category', optionID)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <div className='section'>\r\n                            <button onClick={() => this.props.resetFilter()}>clear filter</button>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                let summary = '';\r\n                if (this.props.filter.size !== 'all sizes') {\r\n                    summary += summary ? ' ' + this.props.filter.size : this.props.filter.size;\r\n                }\r\n                if (this.props.filter.category !== 'all types') {\r\n                    summary += summary ? ' ' + this.props.filter.category : this.props.filter.category;\r\n                }\r\n                summary += ' monsters of cr ' + Utils.challenge(this.props.filter.challengeMin) + ' to ' + Utils.challenge(this.props.filter.challengeMax);\r\n\r\n                content = (\r\n                    <div>\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='name'\r\n                                value={this.props.filter.name}\r\n                                onChange={event => this.props.changeValue('name', event.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div className='section'>showing {summary}</div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='card'>\r\n                    <div className='heading'>\r\n                        <div className='title'>filter</div>\r\n                        <img className={this.state.showAll ? 'image rotate' : 'image'} src={arrow} alt='arrow' onClick={() => this.toggleAll()} />\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        {content}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { EncounterWave } from '../../models/encounter';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport InfoCard from './info-card';\r\n\r\ninterface Props {\r\n    wave: EncounterWave;\r\n    changeValue: (wave: EncounterWave, field: string, value: string) => void;\r\n    removeWave: (wave: EncounterWave) => void;\r\n}\r\n\r\nexport default class WaveCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const heading = (\r\n                <div className='heading'>\r\n                    <div className='title'>wave</div>\r\n                </div>\r\n            );\r\n\r\n            const content = (\r\n                <div>\r\n                    <div className='section'>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='wave name'\r\n                            value={this.props.wave.name}\r\n                            onChange={event => this.props.changeValue(this.props.wave, 'name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <ConfirmButton text='delete wave' callback={() => this.props.removeWave(this.props.wave)} />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            return (\r\n                <InfoCard heading={heading} content={content} />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Encounter } from '../../models/encounter';\r\n\r\ninterface Props {\r\n    encounter: Encounter;\r\n    selected: boolean;\r\n    setSelection: (encounter: Encounter) => void;\r\n}\r\n\r\nexport default class EncounterListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const slots = [];\r\n\r\n            this.props.encounter.slots.forEach(slot => {\r\n                let text = slot.monsterName || 'unnamed monster';\r\n                if (slot.count > 1) {\r\n                    text += ' x' + slot.count;\r\n                }\r\n                slots.push(<div key={slot.id} className='text'>{text}</div>);\r\n            });\r\n\r\n            if (slots.length === 0) {\r\n                slots.push(<div key='empty' className='text'>no monsters</div>);\r\n            }\r\n\r\n            this.props.encounter.waves.forEach(wave => {\r\n                slots.push(<div key={'name ' + wave.id} className='text subheading'>{wave.name || 'unnamed wave'}</div>);\r\n                wave.slots.forEach(slot => {\r\n                    let text = slot.monsterName || 'unnamed monster';\r\n                    if (slot.count > 1) {\r\n                        text += ' x' + slot.count;\r\n                    }\r\n                    slots.push(<div key={slot.id} className='text'>{text}</div>);\r\n                });\r\n                if (slots.length === 0) {\r\n                    slots.push(<div key={'empty ' + wave.id} className='text'>no monsters</div>);\r\n                }\r\n            });\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.encounter)}>\r\n                    <div className='heading'>{this.props.encounter.name || 'unnamed encounter'}</div>\r\n                    {slots}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Encounter, EncounterSlot, EncounterWave } from '../../models/encounter';\r\nimport { Monster, MonsterGroup } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\nimport EncounterCard from '../cards/encounter-card';\r\nimport ErrorCard from '../cards/error-card';\r\nimport FilterCard from '../cards/filter-card';\r\nimport MonsterCard from '../cards/monster-card';\r\nimport WaveCard from '../cards/wave-card';\r\nimport EncounterListItem from '../list-items/encounter-list-item';\r\nimport CardGroup from '../panels/card-group';\r\nimport Note from '../panels/note';\r\n\r\ninterface Props {\r\n    encounters: Encounter[];\r\n    selection: Encounter | null;\r\n    parties: Party[];\r\n    library: MonsterGroup[];\r\n    filter: string;\r\n    showHelp: boolean;\r\n    selectEncounter: (encounter: Encounter | null) => void;\r\n    addEncounter: () => void;\r\n    removeEncounter: () => void;\r\n    addEncounterSlot: (monster: Monster, waveID: string | null) => void;\r\n    removeEncounterSlot: (encounterSlot: EncounterSlot, waveID: string | null) => void;\r\n    addWave: () => void;\r\n    removeWave: (wave: EncounterWave) => void;\r\n    changeValue: (source: any, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, value: number) => void;\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n}\r\n\r\ninterface State {\r\n    filter: {\r\n        name: string,\r\n        challengeMin: number;\r\n        challengeMax: number;\r\n        category: string;\r\n        size: string;\r\n    };\r\n}\r\n\r\nexport default class EncounterBuilderScreen extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            filter: {\r\n                name: '',\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: 'all types',\r\n                size: 'all sizes'\r\n            }\r\n        };\r\n    }\r\n\r\n    private matchMonster(monster: Monster) {\r\n        if (monster.challenge < this.state.filter.challengeMin) {\r\n            return false;\r\n        }\r\n\r\n        if (monster.challenge > this.state.filter.challengeMax) {\r\n            return false;\r\n        }\r\n\r\n        if (this.state.filter.name !== '') {\r\n            if (!Utils.match(this.state.filter.name, monster.name)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.filter.category !== 'all types') {\r\n            if (monster.category !== this.state.filter.category) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.filter.size !== 'all sizes') {\r\n            if (monster.size !== this.state.filter.size) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private changeFilterValue(type: 'name' | 'challengeMin' | 'challengeMax' | 'category' | 'size', value: any) {\r\n        // eslint-disable-next-line\r\n        this.state.filter[type] = value;\r\n        this.setState({\r\n            filter: this.state.filter\r\n        });\r\n    }\r\n\r\n    private nudgeFilterValue(type: 'challengeMin' | 'challengeMax', delta: number) {\r\n        const value = Utils.nudgeChallenge(this.state.filter[type], delta);\r\n        this.changeFilterValue(type, value);\r\n    }\r\n\r\n    private resetFilter() {\r\n        this.setState({\r\n            filter: {\r\n                name: '',\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: 'all types',\r\n                size: 'all sizes'\r\n            }\r\n        });\r\n    }\r\n\r\n    private getMonsterCards(slots: EncounterSlot[], waveID: string | null) {\r\n        const cards = [];\r\n\r\n        slots.forEach(slot => {\r\n            const monster = this.props.getMonster(slot.monsterName, slot.monsterGroupName);\r\n            if (monster) {\r\n                cards.push(\r\n                    <div className='column' key={monster.id}>\r\n                        <MonsterCard\r\n                            combatant={monster}\r\n                            slot={slot}\r\n                            encounter={this.props.selection as Encounter}\r\n                            mode={'view encounter'}\r\n                            nudgeValue={(source, type, delta) => this.props.nudgeValue(source, type, delta)}\r\n                            removeEncounterSlot={source => this.props.removeEncounterSlot(source, waveID)}\r\n                        />\r\n                    </div>\r\n                );\r\n            } else {\r\n                const index = slots.indexOf(slot);\r\n                const error = 'unknown monster: ' + slot.monsterName + ' in group ' + slot.monsterGroupName;\r\n                cards.push(\r\n                    <div className='column' key={index}>\r\n                        <ErrorCard\r\n                            getContent={() => <div className='section'>{error}</div>}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n        });\r\n\r\n        if (slots.length === 0) {\r\n            cards.push(\r\n                <div className='column' key='empty'>\r\n                    <Note content={<div className='section'>there are no monsters in this {waveID ? 'wave' : 'encounter'}</div>} />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return cards;\r\n    }\r\n\r\n    private getLibrarySection() {\r\n        if (!this.props.selection) {\r\n            return null;\r\n        }\r\n\r\n        const libraryCards = [];\r\n        libraryCards.push(\r\n            <div className='column' key='filter'>\r\n                <FilterCard\r\n                    filter={this.state.filter}\r\n                    changeValue={(type, value) => this.changeFilterValue(type, value)}\r\n                    nudgeValue={(type, delta) => this.nudgeFilterValue(type, delta)}\r\n                    resetFilter={() => this.resetFilter()}\r\n                />\r\n            </div>\r\n        );\r\n\r\n        const monsters: Monster[] = [];\r\n        if (this.props.selection) {\r\n            this.props.library.forEach(group => {\r\n                group.monsters.forEach(monster => {\r\n                    if (this.matchMonster(monster)) {\r\n                        monsters.push(monster);\r\n                    }\r\n                });\r\n            });\r\n            monsters.sort((a, b) => {\r\n                if (a.name < b.name) { return -1; }\r\n                if (a.name > b.name) { return 1; }\r\n                return 0;\r\n            });\r\n        }\r\n        monsters.forEach(monster => {\r\n            libraryCards.push(\r\n                <div className='column' key={monster.id}>\r\n                    <MonsterCard\r\n                        key={monster.id}\r\n                        combatant={monster}\r\n                        encounter={this.props.selection as Encounter}\r\n                        library={this.props.library}\r\n                        mode={'view encounter'}\r\n                        addEncounterSlot={(combatant, waveID) => this.props.addEncounterSlot(combatant, waveID)}\r\n                    />\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <CardGroup\r\n                heading='monster library'\r\n                content={libraryCards}\r\n                showToggle={true}\r\n            />\r\n        );\r\n    }\r\n\r\n    private showEncounter(enc: Encounter) {\r\n        return Utils.match(this.props.filter, enc.name);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let help = null;\r\n            if (this.props.showHelp) {\r\n                help = (\r\n                    <HelpCard encounters={this.props.encounters} />\r\n                );\r\n            }\r\n\r\n            const encounters = this.props.encounters.filter(e => this.showEncounter(e)).map(e => {\r\n                return (\r\n                    <EncounterListItem\r\n                        key={e.id}\r\n                        encounter={e}\r\n                        selected={e === this.props.selection}\r\n                        setSelection={encounter => this.props.selectEncounter(encounter)}\r\n                    />\r\n                );\r\n            });\r\n\r\n            let encounterName;\r\n            const encounterCards = [];\r\n            let waves: JSX.Element[] = [];\r\n\r\n            if (this.props.selection) {\r\n                encounterName = this.props.selection.name || 'unnamed encounter';\r\n\r\n                encounterCards.push(\r\n                    <div className='column' key='info'>\r\n                        <EncounterCard\r\n                            selection={this.props.selection}\r\n                            parties={this.props.parties}\r\n                            filter={this.props.filter}\r\n                            changeValue={(type, value) => this.props.changeValue(this.props.selection, type, value)}\r\n                            addWave={() => this.props.addWave()}\r\n                            removeEncounter={() => this.props.removeEncounter()}\r\n                            getMonster={(monsterName, monsterGroupName) => this.props.getMonster(monsterName, monsterGroupName)}\r\n                        />\r\n                    </div>\r\n                );\r\n\r\n                this.getMonsterCards(this.props.selection.slots, null)\r\n                    .forEach(card => encounterCards.push(card));\r\n\r\n                waves = this.props.selection.waves.map(w => {\r\n                    const waveCards = [];\r\n                    waveCards.push(\r\n                        <div className='column' key='info'>\r\n                            <WaveCard\r\n                                wave={w}\r\n                                removeWave={wave => this.props.removeWave(wave)}\r\n                                changeValue={(source, field, value) => this.props.changeValue(source, field, value)}\r\n                            />\r\n                        </div>\r\n                    );\r\n\r\n                    this.getMonsterCards(w.slots, w.id)\r\n                        .forEach(card => waveCards.push(card));\r\n\r\n                    return (\r\n                        <CardGroup\r\n                            key={w.id}\r\n                            heading={w.name || 'unnamed wave'}\r\n                            content={waveCards}\r\n                            showToggle={true}\r\n                        />\r\n                    );\r\n                });\r\n            }\r\n\r\n            return (\r\n                <div className='encounter-builder row collapse'>\r\n                    <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                        {help}\r\n                        <button onClick={() => this.props.addEncounter()}>add a new encounter</button>\r\n                        {encounters}\r\n                    </div>\r\n                    <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                        <CardGroup\r\n                            content={encounterCards}\r\n                            heading={encounterName}\r\n                            showClose={this.props.selection !== null}\r\n                            close={() => this.props.selectEncounter(null)}\r\n                        />\r\n                        {waves}\r\n                        {this.getLibrarySection()}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface HelpCardProps {\r\n    encounters: Encounter[];\r\n}\r\n\r\nclass HelpCard extends React.Component<HelpCardProps> {\r\n    public render() {\r\n        try {\r\n            let action: JSX.Element | null = null;\r\n            if (this.props.encounters.length === 0) {\r\n                action = (\r\n                    <div className='section'>to start building an encounter, press the button below</div>\r\n                );\r\n            } else {\r\n                action = (\r\n                    <div className='section'>select an encounter from the list to add monsters to it</div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <Note\r\n                    content={\r\n                        <div>\r\n                            <div className='section'>on this page you can set up encounters</div>\r\n                            <div className='section'>\r\n                                when you have created an encounter you can add monsters to it, then gauge its difficulty for a party of pcs\r\n                            </div>\r\n                            <div className='divider'/>\r\n                            {action}\r\n                        </div>\r\n                    }\r\n                />\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    content: string | JSX.Element | JSX.Element[];\r\n}\r\n\r\nexport default class Readaloud extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div className='readaloud'>\r\n                    {this.props.content}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { MonsterGroup } from '../../models/monster-group';\r\n\r\nimport Readaloud from '../panels/readaloud';\r\n\r\ninterface Props {\r\n    library: MonsterGroup[];\r\n    addOpenGameContent: () => void;\r\n}\r\n\r\nexport default class HomeScreen extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            let monsters = null;\r\n            if (this.props.library.length === 0) {\r\n                monsters = (\r\n                    <div>\r\n                        <div className='divider' />\r\n                        <div className='text'>\r\n                            since your collection of monsters is empty, you might want to start by pressing the button below to add monsters from the&nbsp;\r\n                            <a href='http://dnd.wizards.com/articles/features/systems-reference-document-srd' target='_blank' rel='noopener noreferrer'>\r\n                                system reference document\r\n                            </a>\r\n                        </div>\r\n                        <div className='text'>\r\n                            <button onClick={() => this.props.addOpenGameContent()}>add monsters</button>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            const content = (\r\n                <Readaloud\r\n                    content={(\r\n                        <div>\r\n                            <div className='heading'>welcome to <b>dojo</b></div>\r\n                            <div className='divider' />\r\n                            <div className='section'>\r\n                                <b>dojo</b> is an app for dms of dungeons and dragons fifth edition\r\n                            </div>\r\n                            <div className='section'>\r\n                                with <b>dojo</b> you can:\r\n                                <ul>\r\n                                    <li>build unique, challenging monsters</li>\r\n                                    <li>create encounters of just the right difficulty for your players</li>\r\n                                    <li>design intricate tactical maps</li>\r\n                                    <li>run combat without the book-keeping</li>\r\n                                </ul>\r\n                            </div>\r\n                            {monsters}\r\n                            <div className='divider' />\r\n                            <div className='section'>\r\n                                use the buttons at the bottom of the screen to access the app's features\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                />\r\n            );\r\n\r\n            return (\r\n                <div className='home scrollable'>\r\n                    <div className='vertical-center-outer'>\r\n                        <div className='vertical-center-middle'>\r\n                            <div className='vertical-center-inner'>\r\n                                {content}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Map } from '../../models/map-folio';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    map: Map;\r\n    changeValue: (map: Map, field: string, value: string) => void;\r\n    editMap: (map: Map) => void;\r\n    removeMap: (map: Map) => void;\r\n}\r\n\r\nexport default class MapCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div className='card map'>\r\n                    <div className='heading'>\r\n                        <div className='title'>{this.props.map.name || 'unnamed map'}</div>\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='map name'\r\n                                value={this.props.map.name}\r\n                                onChange={event => this.props.changeValue(this.props.map, 'name', event.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='section centered'>\r\n                            <MapPanel\r\n                                map={this.props.map}\r\n                                mode='thumbnail'\r\n                            />\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='section'>\r\n                            <button onClick={() => this.props.editMap(this.props.map)}>edit map</button>\r\n                            <ConfirmButton text='delete map' callback={() => this.props.removeMap(this.props.map)} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { MapFolio } from '../../models/map-folio';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport InfoCard from './info-card';\r\n\r\ninterface Props {\r\n    selection: MapFolio;\r\n    filter: string | null;\r\n    changeValue: (source: MapFolio, field: string, value: string) => void;\r\n    addMap: () => void;\r\n    removeMapFolio: () => void;\r\n}\r\n\r\nexport default class MapFolioCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const heading = (\r\n                <div className='heading'>\r\n                    <div className='title'>map folio</div>\r\n                </div>\r\n            );\r\n\r\n            const content = (\r\n                <div>\r\n                    <div className='section'>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='folio name'\r\n                            value={this.props.selection.name}\r\n                            disabled={!!this.props.filter}\r\n                            onChange={event => this.props.changeValue(this.props.selection, 'name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.addMap()}>add a new map</button>\r\n                        <ConfirmButton text='delete folio' callback={() => this.props.removeMapFolio()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            return (\r\n                <InfoCard heading={heading} content={content} />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { MapFolio } from '../../models/map-folio';\r\n\r\ninterface Props {\r\n    mapFolio: MapFolio;\r\n    selected: boolean;\r\n    filter: string;\r\n    setSelection: (mapFolio: MapFolio) => void;\r\n}\r\n\r\nexport default class MapFolioListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const matchFolio = Utils.match(this.props.filter, this.props.mapFolio.name);\r\n\r\n            const maps = [];\r\n            for (let n = 0; n !== this.props.mapFolio.maps.length; ++n) {\r\n                const map = this.props.mapFolio.maps[n];\r\n                const name = map.name || 'unnamed map';\r\n                if (matchFolio || Utils.match(this.props.filter, name)) {\r\n                    maps.push(<div key={map.id} className='text'>{name}</div>);\r\n                }\r\n            }\r\n            if (maps.length === 0) {\r\n                maps.push(<div key='empty' className='text'>no maps</div>);\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.mapFolio)}>\r\n                    <div className='heading'>{this.props.mapFolio.name || 'unnamed folio'}</div>\r\n                    {maps}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Map, MapFolio } from '../../models/map-folio';\r\n\r\nimport MapCard from '../cards/map-card';\r\nimport MapFolioCard from '../cards/map-folio-card';\r\nimport MapFolioListItem from '../list-items/map-folio-list-item';\r\nimport CardGroup from '../panels/card-group';\r\nimport Note from '../panels/note';\r\n\r\ninterface Props {\r\n    mapFolios: MapFolio[];\r\n    selection: MapFolio | null;\r\n    filter: string;\r\n    showHelp: boolean;\r\n    selectMapFolio: (mapFolio: MapFolio | null) => void;\r\n    addMapFolio: () => void;\r\n    removeMapFolio: () => void;\r\n    addMap: () => void;\r\n    editMap: (map: Map) => void;\r\n    removeMap: (map: Map) => void;\r\n    changeValue: (source: {}, field: string, value: any) => void;\r\n}\r\n\r\nexport default class MapFoliosScreen extends React.Component<Props> {\r\n    private showMapFolio(folio: MapFolio) {\r\n        let result = Utils.match(this.props.filter, folio.name);\r\n\r\n        if (!result) {\r\n            folio.maps.forEach(map => {\r\n                result = Utils.match(this.props.filter, map.name) || result;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let help = null;\r\n            if (this.props.showHelp) {\r\n                help = (\r\n                    <HelpCard mapFolios={this.props.mapFolios} />\r\n                );\r\n            }\r\n\r\n            const folios = this.props.mapFolios.filter(f => this.showMapFolio(f)).map(mapFolio => {\r\n                return (\r\n                    <MapFolioListItem\r\n                        key={mapFolio.id}\r\n                        mapFolio={mapFolio}\r\n                        filter={this.props.filter}\r\n                        selected={mapFolio === this.props.selection}\r\n                        setSelection={f => this.props.selectMapFolio(f)}\r\n                    />\r\n                );\r\n            });\r\n\r\n            let folio = null;\r\n            if (this.props.selection) {\r\n                const folioCards = [];\r\n\r\n                folioCards.push(\r\n                    <div className='column' key='info'>\r\n                        <MapFolioCard\r\n                            selection={this.props.selection}\r\n                            filter={this.props.filter}\r\n                            addMap={() => this.props.addMap()}\r\n                            removeMapFolio={() => this.props.removeMapFolio()}\r\n                            changeValue={(source, field, value) => this.props.changeValue(source, field, value)}\r\n                        />\r\n                    </div>\r\n                );\r\n\r\n                this.props.selection.maps.filter(m => Utils.match(this.props.filter, m.name)).forEach(m => {\r\n                    folioCards.push(\r\n                        <div className='column' key={m.id}>\r\n                            <MapCard\r\n                                map={m}\r\n                                editMap={map => this.props.editMap(map)}\r\n                                removeMap={map => this.props.removeMap(map)}\r\n                                changeValue={(source, type, value) => this.props.changeValue(source, type, value)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                if (folioCards.length === 0) {\r\n                    folioCards.push(\r\n                        <div className='column' key='empty'>\r\n                            <Note content={<div className='section'>there are no maps in this folio</div>} />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                folio = (\r\n                    <div>\r\n                        <CardGroup\r\n                            content={folioCards}\r\n                            heading={this.props.selection.name || 'unnamed folio'}\r\n                            showClose={this.props.selection !== null}\r\n                            close={() => this.props.selectMapFolio(null)}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='map-builder row collapse'>\r\n                    <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                        {help}\r\n                        <button onClick={() => this.props.addMapFolio()}>add a new map folio</button>\r\n                        {folios}\r\n                    </div>\r\n                    <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                        {folio}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface HelpCardProps {\r\n    mapFolios: MapFolio[];\r\n}\r\n\r\nclass HelpCard extends React.Component<HelpCardProps> {\r\n    public render() {\r\n        try {\r\n            let action: JSX.Element | null = null;\r\n            if (this.props.mapFolios.length === 0) {\r\n                action = (\r\n                    <div className='section'>to start a new folio, press the button below</div>\r\n                );\r\n            } else {\r\n                action = (\r\n                    <div className='section'>select a map folio from the list to see the maps it contains</div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <Note\r\n                    content={\r\n                        <div>\r\n                            <div className='section'>on this page you can set up folios containing tactical maps</div>\r\n                            <div className='section'>when you have created a map you can use it in encounters</div>\r\n                            <div className='divider'/>\r\n                            {action}\r\n                        </div>\r\n                    }\r\n                />\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { MonsterGroup } from '../../models/monster-group';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport InfoCard from './info-card';\r\n\r\ninterface Props {\r\n    selection: MonsterGroup;\r\n    filter: string | null;\r\n    changeValue: (field: string, value: string) => void;\r\n    addMonster: () => void;\r\n    generateMonster: () => void;\r\n    sortMonsters: () => void;\r\n    removeMonsterGroup: () => void;\r\n}\r\n\r\nexport default class MonsterGroupCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const heading = (\r\n                <div className='heading'>\r\n                    <div className='title'>monster group</div>\r\n                </div>\r\n            );\r\n\r\n            const content = (\r\n                <div>\r\n                    <div className='section'>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='group name'\r\n                            value={this.props.selection.name}\r\n                            disabled={!!this.props.filter}\r\n                            onChange={event => this.props.changeValue('name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.addMonster()}>add a new blank monster</button>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.generateMonster()}>generate a random monster</button>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.sortMonsters()}>sort monsters</button>\r\n                        <ConfirmButton text='delete group' callback={() => this.props.removeMonsterGroup()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            return (\r\n                <InfoCard heading={heading} content={content} />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { MonsterGroup } from '../../models/monster-group';\r\n\r\ninterface Props {\r\n    group: MonsterGroup;\r\n    selected: boolean;\r\n    filter: string;\r\n    setSelection: (group: MonsterGroup) => void;\r\n}\r\n\r\nexport default class MonsterGroupListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const matchGroup = Utils.match(this.props.filter, this.props.group.name);\r\n\r\n            const monsters = [];\r\n            for (let n = 0; n !== this.props.group.monsters.length; ++n) {\r\n                const monster = this.props.group.monsters[n];\r\n                const name = monster.name || 'unnamed monster';\r\n                if (matchGroup || Utils.match(this.props.filter, name)) {\r\n                    monsters.push(<div key={monster.id} className='text'>{name}</div>);\r\n                }\r\n            }\r\n            if (monsters.length === 0) {\r\n                monsters.push(<div key='empty' className='text'>no monsters</div>);\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.group)}>\r\n                    <div className='heading'>{this.props.group.name || 'unnamed group'}</div>\r\n                    {monsters}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Monster, MonsterGroup } from '../../models/monster-group';\r\n\r\nimport MonsterCard from '../cards/monster-card';\r\nimport MonsterGroupCard from '../cards/monster-group-card';\r\nimport MonsterGroupListItem from '../list-items/monster-group-list-item';\r\nimport CardGroup from '../panels/card-group';\r\nimport Note from '../panels/note';\r\n\r\ninterface Props {\r\n    library: MonsterGroup[];\r\n    selection: MonsterGroup | null;\r\n    showHelp: boolean;\r\n    filter: string;\r\n    selectMonsterGroup: (group: MonsterGroup | null) => void;\r\n    addMonsterGroup: () => void;\r\n    removeMonsterGroup: () => void;\r\n    addMonster: () => void;\r\n    generateMonster: () => void;\r\n    removeMonster: (monster: Monster) => void;\r\n    editMonster: (monster: Monster) => void;\r\n    cloneMonster: (monster: Monster, name: string) => void;\r\n    sortMonsters: () => void;\r\n    moveToGroup: (monster: Monster, groupID: string) => void;\r\n    changeValue: (source: any, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, value: number) => void;\r\n}\r\n\r\nexport default class MonsterLibraryScreen extends React.Component<Props> {\r\n    private showMonsterGroup(group: MonsterGroup) {\r\n        let result = Utils.match(this.props.filter, group.name);\r\n\r\n        if (!result) {\r\n            group.monsters.forEach(monster => {\r\n                result = Utils.match(this.props.filter, monster.name) || result;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let help = null;\r\n            if (this.props.showHelp) {\r\n                help = (\r\n                    <HelpCard library={this.props.library} />\r\n                );\r\n            }\r\n\r\n            const listItems = this.props.library.filter(group => this.showMonsterGroup(group)).map(group => {\r\n                return (\r\n                    <MonsterGroupListItem\r\n                        key={group.id}\r\n                        group={group}\r\n                        filter={this.props.filter}\r\n                        selected={group === this.props.selection}\r\n                        setSelection={grp => this.props.selectMonsterGroup(grp)}\r\n                    />\r\n                );\r\n            });\r\n\r\n            const cards = [];\r\n\r\n            if (this.props.selection) {\r\n                cards.push(\r\n                    <div className='column' key='info'>\r\n                        <MonsterGroupCard\r\n                            selection={this.props.selection}\r\n                            filter={this.props.filter}\r\n                            addMonster={() => this.props.addMonster()}\r\n                            generateMonster={() => this.props.generateMonster()}\r\n                            sortMonsters={() => this.props.sortMonsters()}\r\n                            changeValue={(type, value) => this.props.changeValue(this.props.selection, type, value)}\r\n                            removeMonsterGroup={() => this.props.removeMonsterGroup()}\r\n                        />\r\n                    </div>\r\n                );\r\n\r\n                const monsters = this.props.selection.monsters.filter(monster => {\r\n                    return Utils.match(this.props.filter, monster.name);\r\n                });\r\n\r\n                if (monsters.length !== 0) {\r\n                    monsters.forEach(m => {\r\n                        cards.push(\r\n                            <div className='column' key={m.id}>\r\n                                <MonsterCard\r\n                                    combatant={m}\r\n                                    mode={'view editable'}\r\n                                    library={this.props.library}\r\n                                    changeValue={(source, type, value) => this.props.changeValue(source, type, value)}\r\n                                    nudgeValue={(source, type, delta) => this.props.nudgeValue(source, type, delta)}\r\n                                    moveToGroup={(monster, groupID) => this.props.moveToGroup(monster, groupID)}\r\n                                    removeMonster={monster => this.props.removeMonster(monster)}\r\n                                    editMonster={monster => this.props.editMonster(monster)}\r\n                                    cloneMonster={(monster, monsterName) => this.props.cloneMonster(monster, monsterName)}\r\n                                />\r\n                            </div>\r\n                        );\r\n                    });\r\n                } else {\r\n                    cards.push(\r\n                        <div className='column' key='empty'>\r\n                            <Note content={<div className='section'>there are no monsters in this group</div>} />\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n\r\n            let name;\r\n            if (this.props.selection) {\r\n                name = this.props.selection.name;\r\n                if (!name) {\r\n                    name = 'unnamed group';\r\n                }\r\n            }\r\n\r\n            return (\r\n                <div className='monster-library row collapse'>\r\n                    <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                        {help}\r\n                        <button onClick={() => this.props.addMonsterGroup()}>add a new monster group</button>\r\n                        {listItems}\r\n                    </div>\r\n                    <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                        <CardGroup\r\n                            content={cards}\r\n                            heading={name}\r\n                            showClose={this.props.selection !== null}\r\n                            close={() => this.props.selectMonsterGroup(null)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface HelpCardProps {\r\n    library: MonsterGroup[];\r\n}\r\n\r\nclass HelpCard extends React.Component<HelpCardProps> {\r\n    public render() {\r\n        let action: JSX.Element | null = null;\r\n        if (this.props.library.length === 0) {\r\n            action = (\r\n                <div className='section'>to start adding monsters, press the button below</div>\r\n            );\r\n        } else {\r\n            action = (\r\n                <div className='section'>select a monster group from the list to see stat blocks for monsters in that group</div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Note\r\n                content={\r\n                    <div>\r\n                        <div className='section'>you can maintain your menagerie of monsters here</div>\r\n                        <div className='divider'/>\r\n                        {action}\r\n                    </div>\r\n                }\r\n            />\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Party } from '../../models/party';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport InfoCard from './info-card';\r\n\r\ninterface Props {\r\n    selection: Party;\r\n    filter: string | null;\r\n    changeValue: (field: string, value: string) => void;\r\n    addPC: () => void;\r\n    sortPCs: () => void;\r\n    removeParty: () => void;\r\n}\r\n\r\nexport default class PartyCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const activePCs = this.props.selection.pcs.filter(pc => pc.active);\r\n\r\n            const languages = activePCs\r\n                .map(pc => pc.languages)\r\n                .join(', ')\r\n                .split(/[ ,;]+/)\r\n                .reduce((array: string[], value) => {\r\n                    if (array.indexOf(value) === -1) {\r\n                        array.push(value);\r\n                    }\r\n                    return array;\r\n                }, [])\r\n                .sort((a, b) => {\r\n                    if (a === 'Common') {\r\n                        return -1;\r\n                    }\r\n                    if (b === 'Common') {\r\n                        return 1;\r\n                    }\r\n                    return a.localeCompare(b);\r\n                })\r\n                .join(', ');\r\n\r\n            let insightSummary = '-';\r\n            let investigationSummary = '-';\r\n            let perceptionSummary = '-';\r\n\r\n            if (activePCs.length !== 0) {\r\n                const insight: { min: number | null, max: number | null } = { min: null, max: null };\r\n                const invest: { min: number | null, max: number | null } = { min: null, max: null };\r\n                const percep: { min: number | null, max: number | null } = { min: null, max: null };\r\n\r\n                activePCs.forEach(pc => {\r\n                    insight.min = insight.min === null ? pc.passiveInsight : Math.min(insight.min, pc.passiveInsight);\r\n                    insight.max = insight.max === null ? pc.passiveInsight : Math.max(insight.max, pc.passiveInsight);\r\n                    invest.min = invest.min === null ? pc.passiveInvestigation : Math.min(invest.min, pc.passiveInvestigation);\r\n                    invest.max = invest.max === null ? pc.passiveInvestigation : Math.max(invest.max, pc.passiveInvestigation);\r\n                    percep.min = percep.min === null ? pc.passivePerception : Math.min(percep.min, pc.passivePerception);\r\n                    percep.max = percep.max === null ? pc.passivePerception : Math.max(percep.max, pc.passivePerception);\r\n                });\r\n\r\n                insightSummary = insight.min === insight.max ? (insight.min as number).toString() : insight.min + ' - ' + insight.max;\r\n                investigationSummary = invest.min === invest.max ? (invest.min as number).toString() : invest.min + ' - ' + invest.max;\r\n                perceptionSummary = percep.min === percep.max ? (percep.min as number).toString() : percep.min + ' - ' + percep.max;\r\n            }\r\n\r\n            const heading = (\r\n                <div className='heading'>\r\n                    <div className='title'>party</div>\r\n                </div>\r\n            );\r\n\r\n            const content = (\r\n                <div>\r\n                    <div className='section'>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='party name'\r\n                            value={this.props.selection.name}\r\n                            disabled={!!this.props.filter}\r\n                            onChange={event => this.props.changeValue('name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section' style={{ display: languages !== '' ? 'block' : 'none' }}>\r\n                        <div className='subheading'>languages</div>\r\n                    </div>\r\n                    <div className='section'>\r\n                        {languages}\r\n                    </div>\r\n                    <div className='section'>\r\n                        <div className='subheading'>passive skills</div>\r\n                    </div>\r\n                    <div className='table'>\r\n                        <div>\r\n                            <div className='cell three'><b>insight</b></div>\r\n                            <div className='cell three'><b>invest.</b></div>\r\n                            <div className='cell three'><b>percep.</b></div>\r\n                        </div>\r\n                        <div>\r\n                            <div className='cell three'>{insightSummary}</div>\r\n                            <div className='cell three'>{investigationSummary}</div>\r\n                            <div className='cell three'>{perceptionSummary}</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.addPC()}>add a new pc</button>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.sortPCs()}>sort pcs</button>\r\n                        <ConfirmButton text='delete party' callback={() => this.props.removeParty()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            return (\r\n                <InfoCard heading={heading} content={content} />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Party } from '../../models/party';\r\n\r\ninterface Props {\r\n    party: Party;\r\n    selected: boolean;\r\n    filter: string;\r\n    setSelection: (party: Party) => void;\r\n}\r\n\r\nexport default class PartyListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const matchParty = Utils.match(this.props.filter, this.props.party.name);\r\n\r\n            const pcs = [];\r\n            for (let n = 0; n !== this.props.party.pcs.length; ++n) {\r\n                const pc = this.props.party.pcs[n];\r\n                let name = pc.name || 'unnamed pc';\r\n                if (pc.player) {\r\n                    name += ' (' + pc.player + ')';\r\n                }\r\n                if (matchParty || Utils.match(this.props.filter, name)) {\r\n                    pcs.push(<div key={pc.id} className='text'>{name}</div>);\r\n                }\r\n            }\r\n            if (pcs.length === 0) {\r\n                pcs.push(<div key='empty' className='text'>no pcs</div>);\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.party)}>\r\n                    <div className='heading'>{this.props.party.name || 'unnamed party'}</div>\r\n                    {pcs}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Party, PC } from '../../models/party';\r\n\r\nimport PartyCard from '../cards/party-card';\r\nimport PCCard from '../cards/pc-card';\r\nimport PartyListItem from '../list-items/party-list-item';\r\nimport CardGroup from '../panels/card-group';\r\nimport Note from '../panels/note';\r\n\r\ninterface Props {\r\n    parties: Party[];\r\n    selection: Party | null;\r\n    filter: string;\r\n    showHelp: boolean;\r\n    selectParty: (party: Party | null) => void;\r\n    addParty: () => void;\r\n    removeParty: () => void;\r\n    addPC: () => void;\r\n    removePC: (pc: PC) => void;\r\n    sortPCs: () => void;\r\n    changeValue: (source: any, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, value: number) => void;\r\n}\r\n\r\nexport default class PartiesScreen extends React.Component<Props> {\r\n    private showParty(party: Party) {\r\n        let result = Utils.match(this.props.filter, party.name);\r\n\r\n        if (!result) {\r\n            party.pcs.forEach(pc => {\r\n                result = Utils.match(this.props.filter, pc.name) || result;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let help = null;\r\n            if (this.props.showHelp) {\r\n                help = (\r\n                    <HelpCard parties={this.props.parties}/>\r\n                );\r\n            }\r\n\r\n            const parties = this.props.parties.filter(p => this.showParty(p)).map(p => {\r\n                return (\r\n                    <PartyListItem\r\n                        key={p.id}\r\n                        party={p}\r\n                        filter={this.props.filter}\r\n                        selected={p === this.props.selection}\r\n                        setSelection={party => this.props.selectParty(party)}\r\n                    />\r\n                );\r\n            });\r\n\r\n            const activeCards: JSX.Element[] = [];\r\n            const inactiveCards: JSX.Element[] = [];\r\n\r\n            if (this.props.selection) {\r\n                activeCards.push(\r\n                    <div className='column' key='info'>\r\n                        <PartyCard\r\n                            selection={this.props.selection}\r\n                            filter={this.props.filter}\r\n                            addPC={() => this.props.addPC()}\r\n                            sortPCs={() => this.props.sortPCs()}\r\n                            changeValue={(type, value) => this.props.changeValue(this.props.selection, type, value)}\r\n                            removeParty={() => this.props.removeParty()}\r\n                        />\r\n                    </div>\r\n                );\r\n\r\n                const pcs = this.props.selection.pcs.filter(pc => {\r\n                    return Utils.match(this.props.filter, pc.name);\r\n                });\r\n\r\n                const activePCs = pcs.filter(pc => pc.active);\r\n                activePCs.forEach(activePC => {\r\n                    activeCards.push(\r\n                        <div className='column' key={activePC.id}>\r\n                            <PCCard\r\n                                combatant={activePC}\r\n                                mode={'edit'}\r\n                                changeValue={(pc, type, value) => this.props.changeValue(pc, type, value)}\r\n                                nudgeValue={(pc, type, delta) => this.props.nudgeValue(pc, type, delta)}\r\n                                removePC={pc => this.props.removePC(pc)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                const inactivePCs = pcs.filter(pc => !pc.active);\r\n                inactivePCs.forEach(inactivePC => {\r\n                    inactiveCards.push(\r\n                        <div className='column' key={inactivePC.id}>\r\n                            <PCCard\r\n                                combatant={inactivePC}\r\n                                mode={'edit'}\r\n                                changeValue={(pc, type, value) => this.props.changeValue(pc, type, value)}\r\n                                nudgeValue={(pc, type, delta) => this.props.nudgeValue(pc, type, delta)}\r\n                                removePC={pc => this.props.removePC(pc)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                if (activePCs.length === 0) {\r\n                    activeCards.push(\r\n                        <div className='column' key='empty'>\r\n                            <Note content={<div className='section'>there are no pcs in this party</div>} />\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n\r\n            let name;\r\n            if (this.props.selection) {\r\n                name = this.props.selection.name || 'unnamed party';\r\n            }\r\n\r\n            return (\r\n                <div className='parties row collapse'>\r\n                    <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                        {help}\r\n                        <button onClick={() => this.props.addParty()}>add a new party</button>\r\n                        {parties}\r\n                    </div>\r\n                    <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                        <CardGroup\r\n                            content={activeCards}\r\n                            heading={name}\r\n                            showClose={this.props.selection !== null}\r\n                            close={() => this.props.selectParty(null)}\r\n                            hidden={!this.props.selection}\r\n                        />\r\n                        <CardGroup\r\n                            content={inactiveCards}\r\n                            heading='inactive pcs'\r\n                            showClose={false}\r\n                            hidden={inactiveCards.length === 0}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface HelpCardProps {\r\n    parties: Party[];\r\n}\r\n\r\nclass HelpCard extends React.Component<HelpCardProps> {\r\n    public render() {\r\n        try {\r\n            let action: JSX.Element | null = null;\r\n            if (this.props.parties.length === 0) {\r\n                action = (\r\n                    <div className='section'>to start adding a party, press the button below</div>\r\n                );\r\n            } else {\r\n                action = (\r\n                    <div className='section'>select a party from the list to see pc details</div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <Note\r\n                    content={\r\n                        <div>\r\n                            <div className='section'>this page is where you can tell dojo all about your pcs</div>\r\n                            <div className='section'>you can add a party for each of your gaming groups</div>\r\n                            <div className='divider'/>\r\n                            {action}\r\n                        </div>\r\n                    }\r\n                />\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    label: string;\r\n    style: 'switch' | 'button';\r\n    checked: boolean;\r\n    changeValue: (value: boolean) => void;\r\n    disabled: boolean;\r\n}\r\n\r\nexport default class Checkbox extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        style: 'switch',\r\n        disabled: false\r\n    };\r\n\r\n    private click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        this.props.changeValue(!this.props.checked);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'checkbox ' + this.props.style;\r\n            if (this.props.checked) {\r\n                style += ' checked';\r\n            }\r\n            if (this.props.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            let toggle = null;\r\n            if (this.props.style === 'switch') {\r\n                toggle = (\r\n                    <div className='toggle-container'>\r\n                        <div className='toggle'/>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={style} onClick={e => this.click(e)}>\r\n                    <div className='checkbox-label'>{this.props.label}</div>\r\n                    {toggle}\r\n                </div>\r\n            );\r\n\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    options: { id: string; text: string; disabled?: boolean }[];\r\n    selectedID: string | null;\r\n    select: (optionID: string) => void;\r\n    tabs: boolean;\r\n    disabled: boolean;\r\n    itemsPerRow: number;\r\n}\r\n\r\nexport default class Selector extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        tabs: false,\r\n        disabled: false,\r\n        itemsPerRow: null\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            let style = this.props.tabs ? 'selector tabs' : 'selector radio';\r\n            if (this.props.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            const itemsPerRow = this.props.itemsPerRow ? this.props.itemsPerRow : this.props.options.length;\r\n            const rowCount = Math.ceil(this.props.options.length / itemsPerRow);\r\n            const rowContents: JSX.Element[][] = [];\r\n            for (let n = 0; n !== rowCount; ++n) {\r\n                rowContents.push([]);\r\n            }\r\n\r\n            this.props.options.forEach(option => {\r\n                const index = this.props.options.indexOf(option);\r\n                const rowIndex = Math.floor(index / itemsPerRow);\r\n                const row = rowContents[rowIndex];\r\n                row.push(\r\n                    <SelectorOption\r\n                        key={option.id}\r\n                        option={option}\r\n                        selected={option.id === this.props.selectedID}\r\n                        count={itemsPerRow}\r\n                        select={(optionID: string) => this.props.select(optionID)}\r\n                    />\r\n                );\r\n            });\r\n\r\n            const rowSections = rowContents.map(row => {\r\n                const index = rowContents.indexOf(row);\r\n                return <div key={index}>{row}</div>;\r\n            });\r\n\r\n            return (\r\n                <div className={style}>\r\n                    {rowSections}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface SelectorOptionInterface {\r\n    option: { id: string; text: string; disabled?: boolean };\r\n    selected: boolean;\r\n    count: number;\r\n    select: (optionID: string) => void;\r\n}\r\n\r\nclass SelectorOption extends React.Component<SelectorOptionInterface> {\r\n    private click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (!this.props.option.disabled) {\r\n            this.props.select(this.props.option.id);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const width = 'calc(((100% - 1px) / ' + this.props.count + ') - 2px )';\r\n\r\n            let style = 'option';\r\n            if (this.props.selected) {\r\n                style += ' selected';\r\n            }\r\n            if (this.props.option.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            return (\r\n                <div key={this.props.option.id} className={style} style={{ width: width }} title={this.props.option.text} onClick={e => this.click(e)}>\r\n                    {this.props.option.text}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport Selector from '../controls/selector';\r\nimport Spin from '../controls/spin';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    //\r\n}\r\n\r\ninterface State {\r\n    dice: string;\r\n    count: number;\r\n    rolls: number[] | null;\r\n    result: number | null;\r\n}\r\n\r\nexport default class DieRollerModule extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            dice: '20',\r\n            count: 1,\r\n            rolls: null,\r\n            result: null\r\n        };\r\n    }\r\n\r\n    private setDice(dice: string) {\r\n        this.setState({\r\n            dice: dice\r\n        });\r\n    }\r\n\r\n    private nudgeCount(delta: number) {\r\n        this.setState({\r\n            count: Math.max(1, this.state.count + delta)\r\n        });\r\n    }\r\n\r\n    private roll() {\r\n        const sides = parseInt(this.state.dice, 10);\r\n\r\n        const rolls: number[] = [];\r\n        for (let n = 0; n !== this.state.count; ++n) {\r\n            rolls.push(Utils.dieRoll(sides));\r\n        }\r\n        rolls.sort((a, b) => a - b);\r\n\r\n        let result = 0;\r\n        rolls.forEach(roll => result += roll);\r\n\r\n        this.setState({\r\n            rolls: rolls,\r\n            result: result\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        const options = [\r\n            {\r\n                id: '4',\r\n                text: 'd4'\r\n            },\r\n            {\r\n                id: '6',\r\n                text: 'd6'\r\n            },\r\n            {\r\n                id: '8',\r\n                text: 'd8'\r\n            },\r\n            {\r\n                id: '10',\r\n                text: 'd10'\r\n            },\r\n            {\r\n                id: '12',\r\n                text: 'd12'\r\n            },\r\n            {\r\n                id: '20',\r\n                text: 'd20'\r\n            },\r\n            {\r\n                id: '100',\r\n                text: 'd100'\r\n            }\r\n        ];\r\n\r\n        let rollsSection = null;\r\n        if (this.state.rolls !== null) {\r\n            rollsSection = (\r\n                <div className='section die-rolls'>{this.state.rolls.join(', ')}</div>\r\n            );\r\n        }\r\n\r\n        let resultSection = null;\r\n        if (this.state.result !== null) {\r\n            resultSection = (\r\n                <div className='section die-result'>{this.state.result}</div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className='die-roller'>\r\n                <div className='subheading'>die type</div>\r\n                <Selector\r\n                    options={options}\r\n                    selectedID={this.state.dice}\r\n                    select={optionID => this.setDice(optionID)}\r\n                />\r\n                <div className='subheading'>number to roll</div>\r\n                <Spin\r\n                    source={this.state}\r\n                    name='count'\r\n                    display={count => count + 'd' + this.state.dice}\r\n                    nudgeValue={delta => this.nudgeCount(delta)}\r\n                />\r\n                <div className='divider' />\r\n                <button onClick={() => this.roll()}>roll dice</button>\r\n                {rollsSection}\r\n                {resultSection}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","export default class Speech {\r\n    public static async say(text: string, languages: string[]) {\r\n        // If we're  already saying something, stop it\r\n        window.speechSynthesis.cancel();\r\n\r\n        const utterance = new SpeechSynthesisUtterance(text);\r\n        utterance.voice = await Speech.chooseVoice(languages);\r\n        utterance.rate = Speech.randomValue(0.5, 2);\r\n        utterance.pitch = Speech.randomValue(0, 1.5);\r\n\r\n        // console.log('Voice: ' + utterance.voice.name);\r\n        // console.log('Rate: ' + utterance.rate);\r\n        // console.log('Pitch: ' + utterance.pitch);\r\n\r\n        window.speechSynthesis.speak(utterance);\r\n    }\r\n\r\n    private static async chooseVoice(languages: string[]) {\r\n        const voices = await Speech.getVoices();\r\n\r\n        // Get language codes for the selected languages\r\n        const langCodes = languages.map(lang => Speech.getLanguageCode(lang));\r\n\r\n        // Filter voice list by these language codes\r\n        let candidates = voices.filter(v => langCodes.includes(v.lang.substr(0, 2)));\r\n        if (candidates.length === 0) {\r\n            candidates = voices.filter(v => v.default);\r\n        }\r\n        if (candidates.length === 0) {\r\n            candidates = voices;\r\n        }\r\n\r\n        const index = Math.floor(Math.random() * candidates.length);\r\n        return candidates[index];\r\n    }\r\n\r\n    private static getVoices() {\r\n        return new Promise<SpeechSynthesisVoice[]>(resolve => {\r\n            let list = window.speechSynthesis.getVoices();\r\n            if (list.length > 0) {\r\n                resolve(list);\r\n                return;\r\n            }\r\n            speechSynthesis.onvoiceschanged = () => {\r\n                list = window.speechSynthesis.getVoices();\r\n                resolve(list);\r\n            };\r\n        });\r\n    }\r\n\r\n    private static getLanguageCode(language: string) {\r\n        switch (language) {\r\n            case 'armenian':\r\n                return 'hy';\r\n            case 'basque':\r\n                return 'eu';\r\n            case 'bulgarian':\r\n                return 'bg';\r\n            case 'chichewa':\r\n                return 'ny';\r\n            case 'chinese':\r\n                return 'zh';\r\n            case 'croatian':\r\n                return 'hr';\r\n            case 'czech':\r\n                return 'cs';\r\n            case 'dutch':\r\n                return 'nl';\r\n            case 'german':\r\n                return 'de';\r\n            case 'greek':\r\n                return 'el';\r\n            case 'icelandic':\r\n                return 'is';\r\n            case 'irish':\r\n                return 'ga';\r\n            case 'kannada':\r\n                return 'kn';\r\n            case 'kazakh':\r\n                return 'kk';\r\n            case 'latvian':\r\n                return 'lv';\r\n            case 'lithuanian':\r\n                return 'lt';\r\n            case 'macedonian':\r\n                return 'mk';\r\n            case 'malay':\r\n                return 'ms';\r\n            case 'maltese':\r\n                return 'mt';\r\n            case 'maori':\r\n                return 'mi';\r\n            case 'polish':\r\n                return 'pl';\r\n            case 'portuguese':\r\n                return 'pt';\r\n            case 'punjabi':\r\n                return 'pa';\r\n            case 'samoan':\r\n                return 'sm';\r\n            case 'serbian':\r\n                return 'sr';\r\n            case 'shona':\r\n                return 'sn';\r\n            case 'spanish':\r\n                return 'es';\r\n            case 'swedish':\r\n                return 'sv';\r\n            case 'turkish':\r\n                return 'tr';\r\n            case 'welsh':\r\n                return 'cy';\r\n            default:\r\n                return language.substr(0, 2);\r\n        }\r\n    }\r\n\r\n    private static randomValue(min: number, max: number) {\r\n        const x = (Math.random() + Math.random() + Math.random()) / 3;\r\n        const range = max - min;\r\n        return min + (x * range);\r\n    }\r\n}\r\n","import Utils from './utils';\r\n\r\ninterface ModelLine {\r\n    prev: string;\r\n    freq: ModelChar[];\r\n}\r\n\r\ninterface ModelChar {\r\n    char: string;\r\n    count: number;\r\n}\r\n\r\nexport default class TextGenerator {\r\n\r\n    private static model: ModelLine[] = [];\r\n    private static maxLength: number = 0;\r\n\r\n    public static initModel(sources: string[]) {\r\n        const model: ModelLine[] = [];\r\n        let maxLength: number = 0;\r\n\r\n        sources.forEach(source => {\r\n            const lines = source.split(/\\r?\\n/);\r\n            lines.forEach(line => {\r\n                if (line) {\r\n                    TextGenerator.addLineToModel(line, model);\r\n                    maxLength = Math.max(maxLength, line.length);\r\n                }\r\n            });\r\n        });\r\n\r\n        TextGenerator.model = model;\r\n        TextGenerator.maxLength = maxLength;\r\n    }\r\n\r\n    private static addLineToModel(line: string, model: ModelLine[]) {\r\n        line = String.fromCharCode(0, 1) + line + String.fromCharCode(2);\r\n\r\n        for (let index = 2; index !== line.length; ++index) {\r\n            const prev = line.substr(index - 2, 2);\r\n            const char = line.substr(index, 1);\r\n\r\n            let item = model.find(x => x.prev === prev);\r\n            if (!item) {\r\n                item = {\r\n                    prev: prev,\r\n                    freq: []\r\n                };\r\n                model.push(item);\r\n            }\r\n\r\n            let freq = item.freq.find(x => x.char === char);\r\n            if (!freq) {\r\n                freq = {\r\n                    char: char,\r\n                    count: 0\r\n                };\r\n                item.freq.push(freq);\r\n            }\r\n\r\n            freq.count += 1;\r\n        }\r\n    }\r\n\r\n    public static generate(requiredResults: number): { line: string, fit: number }[] {\r\n        const lines: { line: string, fit: number }[] = [];\r\n        const allowedFailures = 100;\r\n        let failures = 0;\r\n\r\n        while ((lines.length < requiredResults) && (failures < allowedFailures)) {\r\n            const line = TextGenerator.extractLine();\r\n            if (line && !lines.map(l => l.line).includes(line) && line.length <= TextGenerator.maxLength) {\r\n                const fit = TextGenerator.fit(line);\r\n                lines.push({ line, fit });\r\n            } else {\r\n                failures += 1;\r\n            }\r\n        }\r\n\r\n        return lines;\r\n    }\r\n\r\n    private static extractLine() {\r\n        let line = String.fromCharCode(0, 1);\r\n\r\n        while (true) {\r\n            const prev = line.substr(line.length - 2, 2);\r\n\r\n            const item = TextGenerator.model.find(x => x.prev === prev);\r\n            if (item) {\r\n                let candidates = '';\r\n                item.freq.forEach(freq => {\r\n                    candidates += freq.char.repeat(freq.count);\r\n                });\r\n\r\n                const index = Math.floor(Math.random() * candidates.length);\r\n                let char = candidates[index];\r\n                if (char === String.fromCharCode(2)) {\r\n                    line = line.substr(2);\r\n                    return line;\r\n                } else {\r\n                    if (Utils.dieRoll() === 1) {\r\n                        // TODO: Mutate choice\r\n                        const groups = ['bdg', 'ptk', 'sz', 'aeiouy', 'lr', 'ckq', 'vf'];\r\n                        groups.forEach(g => {\r\n                            if (g.includes(char)) {\r\n                                const n = Math.floor(Math.random() * g.length);\r\n                                char = g[n];\r\n                            }\r\n                        });\r\n                    }\r\n                    line += char;\r\n                }\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n\r\n    private static fit(text: string): number {\r\n        text = String.fromCharCode(0, 1) + text + String.fromCharCode(2);\r\n\r\n        const values: number[] = [];\r\n        for (let n = 2; n !== text.length; ++n) {\r\n            const prev = text.substr(n - 2, 2);\r\n            const ch = text[n];\r\n\r\n            const line = TextGenerator.model.find(m => m.prev === prev);\r\n            if (line) {\r\n                const mc = line.freq.find(f => f.char === ch);\r\n                if (mc) {\r\n                    const maxCount = line.freq.reduce((max, value) => Math.max(max, value.count), 0);\r\n                    const fit = mc.count / maxCount;\r\n                    values.push(fit);\r\n                } else {\r\n                    values.push(0);\r\n                }\r\n            }\r\n        }\r\n\r\n        return values.reduce((sum, value) => sum + value, 0) / values.length;\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Speech from '../../utils/speech';\r\nimport TextGenerator from '../../utils/text-generation';\r\n\r\nimport Checkbox from '../controls/checkbox';\r\nimport ControlRow from '../controls/control-row';\r\nimport Expander from '../controls/expander';\r\nimport Selector from '../controls/selector';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    //\r\n}\r\n\r\ninterface State {\r\n    sources: { [id: string]: string; };\r\n    output: string[];\r\n}\r\n\r\ninterface Preset {\r\n    name: string;\r\n    languages: string[];\r\n}\r\n\r\nexport default class LanguageModule extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            sources: {},\r\n            output: []\r\n        };\r\n    }\r\n\r\n    private getLanguages(): string[] {\r\n        // Note: When adding a language to this list, also check the Speech.getLanguageCode() method\r\n        return [\r\n            'afrikaans',\r\n            'amharic',\r\n            'armenian',\r\n            'basque',\r\n            'belarusian',\r\n            'bulgarian',\r\n            'chichewa',\r\n            'chinese',\r\n            'croatian',\r\n            'czech',\r\n            'danish',\r\n            'dutch',\r\n            'english',\r\n            'finnish',\r\n            'french',\r\n            'german',\r\n            'greek',\r\n            'hawaiian',\r\n            'hindi',\r\n            'hungarian',\r\n            'icelandic',\r\n            'irish',\r\n            'italian',\r\n            'japanese',\r\n            'kannada',\r\n            'kazakh',\r\n            'korean',\r\n            'kyrgyz',\r\n            'latvian',\r\n            'lithuanian',\r\n            'macedonian',\r\n            'malay',\r\n            'maltese',\r\n            'maori',\r\n            'myanmar',\r\n            'nepali',\r\n            'norwegian',\r\n            'polish',\r\n            'portuguese',\r\n            'punjabi',\r\n            'romanian',\r\n            'russian',\r\n            'samoan',\r\n            'serbian',\r\n            'shona',\r\n            'somali',\r\n            'spanish',\r\n            'swahili',\r\n            'swedish',\r\n            'thai',\r\n            'turkish',\r\n            'welsh',\r\n            'yiddish',\r\n            'zulu'\r\n        ];\r\n    }\r\n\r\n    private getPresets(): Preset[] {\r\n        return [\r\n            {\r\n                name: 'draconic',\r\n                languages: ['armenian', 'irish', 'maltese']\r\n            },\r\n            {\r\n                name: 'dwarvish',\r\n                languages: ['czech', 'german', 'yiddish']\r\n            },\r\n            {\r\n                name: 'elvish',\r\n                languages: ['finnish', 'spanish', 'welsh']\r\n            },\r\n            {\r\n                name: 'goblin',\r\n                languages: ['hawaiian', 'kyrgyz', 'somali']\r\n            },\r\n            {\r\n                name: 'orc',\r\n                languages: ['macedonian', 'russian', 'turkish']\r\n            }\r\n        ];\r\n    }\r\n\r\n    private async addLanguage(language: string) {\r\n        const response = await fetch('./data/langs/' + language + '.txt');\r\n        this.state.sources[language] = await response.text();\r\n        this.setState({\r\n            sources: this.state.sources\r\n        });\r\n    }\r\n\r\n    private removeLanguage(language: string) {\r\n        delete this.state.sources[language];\r\n        this.setState({\r\n            sources: this.state.sources\r\n        });\r\n    }\r\n\r\n    private usePreset(presetName: string) {\r\n        const preset = this.getPresets().find(p => p.name === presetName);\r\n        if (preset) {\r\n            this.setState({\r\n                sources: {},\r\n                output: []\r\n            }, () => {\r\n                preset.languages.forEach(lang => {\r\n                    this.addLanguage(lang);\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    private random() {\r\n        const languages = this.getLanguages();\r\n\r\n        const selection: string[] = [];\r\n        while (selection.length !== 3) {\r\n            const n = Math.floor(Math.random() * languages.length);\r\n            const lang = languages[n];\r\n            if (!selection.includes(lang)) {\r\n                selection.push(lang);\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            sources: {},\r\n            output: []\r\n        }, () => {\r\n            selection.forEach(lang => {\r\n                this.addLanguage(lang);\r\n            });\r\n        });\r\n    }\r\n\r\n    private generate() {\r\n        const sources: string[] = [];\r\n        Object.keys(this.state.sources).forEach(key => {\r\n            const src = this.state.sources[key];\r\n            sources.push(src);\r\n        });\r\n        TextGenerator.initModel(sources);\r\n        this.setState({\r\n            output: TextGenerator.generate(5).map(l => l.line)\r\n        });\r\n    }\r\n\r\n    private reset() {\r\n        this.setState({\r\n            sources: {},\r\n            output: []\r\n        });\r\n    }\r\n\r\n    private async say(e: React.MouseEvent, text: string) {\r\n        e.preventDefault();\r\n        Speech.say(text, Object.keys(this.state.sources));\r\n    }\r\n\r\n    public render() {\r\n        const presetOptions = this.getPresets().map(p => {\r\n            return {\r\n                id: p.name,\r\n                text: p.name\r\n            };\r\n        });\r\n\r\n        let selectedPreset = '';\r\n        this.getPresets().forEach(p => {\r\n            const selected = Object.keys(this.state.sources).sort().join(', ');\r\n            const setting = p.languages.sort().join(', ');\r\n            if (selected === setting) {\r\n                selectedPreset = p.name;\r\n            }\r\n        });\r\n\r\n        let selectedLanguages = Object.keys(this.state.sources).sort().join(', ');\r\n        if (selectedLanguages === '') {\r\n            selectedLanguages = 'none';\r\n        }\r\n\r\n        const languages = this.getLanguages()\r\n            .map(lang => {\r\n                const isSelected = Object.keys(this.state.sources).includes(lang);\r\n                return (\r\n                    <div className='column' key={lang}>\r\n                        <Checkbox\r\n                            label={lang}\r\n                            style='button'\r\n                            checked={isSelected}\r\n                            changeValue={value => value ? this.addLanguage(lang) : this.removeLanguage(lang)}\r\n                        />\r\n                    </div>\r\n                );\r\n            });\r\n\r\n        const allowGenerate = Object.keys(this.state.sources).length > 0;\r\n        const allowReset = allowGenerate || this.state.output.length > 0;\r\n\r\n        const output = [];\r\n        if (this.state.output.length > 0) {\r\n            output.push(\r\n                <div key='div' className='divider' />\r\n            );\r\n        }\r\n        for (let n = 0; n !== this.state.output.length; ++n) {\r\n            output.push(\r\n                <div key={n} className='section' onDoubleClick={e => this.say(e, this.state.output[n])}>\r\n                    {this.state.output[n].toLowerCase()}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className='language'>\r\n                <div className='heading'>presets</div>\r\n                <Selector\r\n                    options={presetOptions}\r\n                    selectedID={selectedPreset}\r\n                    select={optionID => this.usePreset(optionID)}\r\n                />\r\n                <div className='divider' />\r\n                <Expander\r\n                    text={'selected languages: ' + selectedLanguages}\r\n                    content={\r\n                        <div className='row collapse small-up-1 medium-up-2 large-up-3 language-options'>\r\n                            {languages}\r\n                        </div>\r\n                    }\r\n                />\r\n                <div className='divider' />\r\n                <ControlRow\r\n                    controls={[\r\n                        <button key='generate' className={allowGenerate ? '' : 'disabled'} onClick={() => this.generate()}>generate text</button>,\r\n                        <button key='reset' className={allowReset ? '' : 'disabled'} onClick={() => this.reset()}>reset</button>,\r\n                        <button key='random' onClick={() => this.random()}>random sources</button>\r\n                    ]}\r\n                />\r\n                <div className='language-output'>\r\n                    {output}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport TextGenerator from '../../utils/text-generation';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    //\r\n}\r\n\r\ninterface State {\r\n    output: {\r\n        male: string[],\r\n        female: string[],\r\n        surname: string[]\r\n    };\r\n}\r\n\r\nexport default class NameModule extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            output: {\r\n                male: [],\r\n                female: [],\r\n                surname: []\r\n            }\r\n        };\r\n    }\r\n\r\n    private async generate(type: 'male' | 'female' | 'surname') {\r\n        const response = await fetch('./data/names/' + type + '.txt');\r\n        const input = await response.text();\r\n\r\n        TextGenerator.initModel([input]);\r\n        const names = TextGenerator.generate(10).map(n => n.line).sort();\r\n\r\n        this.state.output[type] = names;\r\n        this.setState({\r\n            output: this.state.output\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        const male = [];\r\n        for (let n = 0; n !== this.state.output.male.length; ++n) {\r\n            male.push(\r\n                <div key={n} className='section'>\r\n                    {this.state.output.male[n].toLowerCase()}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        const female = [];\r\n        for (let n = 0; n !== this.state.output.female.length; ++n) {\r\n            female.push(\r\n                <div key={n} className='section'>\r\n                    {this.state.output.female[n].toLowerCase()}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        const surname = [];\r\n        for (let n = 0; n !== this.state.output.surname.length; ++n) {\r\n            surname.push(\r\n                <div key={n} className='section'>\r\n                    {this.state.output.surname[n].toLowerCase()}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className='name'>\r\n                <div className='name-output'>\r\n                    <div className='row'>\r\n                        <div className='columns small-4 medium-4 large-4'>\r\n                            <div className='heading'>male names</div>\r\n                            <button onClick={() => this.generate('male')}>generate</button>\r\n                            {male}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4'>\r\n                            <div className='heading'>female names</div>\r\n                            <button onClick={() => this.generate('female')}>generate</button>\r\n                            {female}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4'>\r\n                            <div className='heading'>surnames</div>\r\n                            <button onClick={() => this.generate('surname')}>generate</button>\r\n                            {surname}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Showdown from 'showdown';\r\n\r\nimport Selector from '../controls/selector';\r\n\r\nconst showdown = new Showdown.Converter();\r\nshowdown.setOption('tables', true);\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    //\r\n}\r\n\r\ninterface State {\r\n    view: string;\r\n    source: string | null;\r\n}\r\n\r\nexport default class ReferenceModule extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            view: 'skills',\r\n            source: null\r\n        };\r\n    }\r\n\r\n    private setView(view: string) {\r\n        this.setState({\r\n            view: view,\r\n            source: null\r\n        });\r\n    }\r\n\r\n    private async fetchData() {\r\n        const response = await fetch('./data/' + this.state.view + '.md');\r\n        const text = await response.text();\r\n        this.setState({\r\n            source: text\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        if (this.state.view && !this.state.source) {\r\n            this.fetchData();\r\n        }\r\n\r\n        const options = [\r\n            {\r\n                id: 'skills',\r\n                text: 'skills'\r\n            },\r\n            {\r\n                id: 'conditions',\r\n                text: 'conditions'\r\n            },\r\n            {\r\n                id: 'actions',\r\n                text: 'actions'\r\n            }\r\n        ];\r\n\r\n        return (\r\n            <div className='reference'>\r\n                <Selector\r\n                    options={options}\r\n                    selectedID={this.state.view}\r\n                    select={optionID => this.setView(optionID)}\r\n                />\r\n                <div dangerouslySetInnerHTML={{ __html: showdown.makeHtml(this.state.source || '') }} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Checkbox from '../controls/checkbox';\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport Selector from '../controls/selector';\r\nimport DieRollerModule from '../dm-modules/die-roller-module';\r\nimport LanguageModule from '../dm-modules/language-module';\r\nimport NameModule from '../dm-modules/name-module';\r\nimport ReferenceModule from '../dm-modules/reference-module';\r\nimport Note from '../panels/note';\r\n\r\nimport pkg from '../../../package.json';\r\n\r\ninterface Props {\r\n    options: {\r\n        showHelp: boolean;\r\n    };\r\n    resetAll: () => void;\r\n    changeValue: (source: {}, field: string, value: any) => void;\r\n}\r\n\r\ninterface State {\r\n    view: string;\r\n    module: string | null;\r\n}\r\n\r\nexport default class AboutModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            view: 'dm',\r\n            module: null\r\n        };\r\n    }\r\n\r\n    private setView(view: string) {\r\n        this.setState({\r\n            view: view\r\n        });\r\n    }\r\n\r\n    private setModule(module: string) {\r\n        this.setState({\r\n            module: module\r\n        });\r\n    }\r\n\r\n    private getTools() {\r\n        if (this.state.view !== 'dm') {\r\n            return null;\r\n        }\r\n\r\n        const modules = [\r\n            {\r\n                id: 'reference',\r\n                text: 'd&d reference'\r\n            },\r\n            {\r\n                id: 'names',\r\n                text: 'name generator'\r\n            },\r\n            {\r\n                id: 'language',\r\n                text: 'language generator'\r\n            },\r\n            {\r\n                id: 'die-roller',\r\n                text: 'die roller'\r\n            }\r\n        ];\r\n\r\n        let module = (\r\n            <Note\r\n                content={(\r\n                    <div className='section'>\r\n                        <b>dojo</b> includes several dm tools; select one of them above\r\n                    </div>\r\n                )}\r\n            />\r\n        );\r\n\r\n        switch (this.state.module) {\r\n            case 'reference':\r\n                module = (\r\n                    <ReferenceModule />\r\n                );\r\n                break;\r\n            case 'language':\r\n                module = (\r\n                    <LanguageModule />\r\n                );\r\n                break;\r\n            case 'names':\r\n                module = (\r\n                    <NameModule />\r\n                );\r\n                break;\r\n            case 'die-roller':\r\n                module = (\r\n                    <DieRollerModule />\r\n                );\r\n                break;\r\n        }\r\n\r\n        return (\r\n            <div className='dm-screen'>\r\n                <Selector\r\n                    options={modules}\r\n                    selectedID={this.state.module}\r\n                    select={moduleID => this.setModule(moduleID)}\r\n                />\r\n                <div className='divider' />\r\n                <div className='dm-module'>\r\n                    {module}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getAbout() {\r\n        if (this.state.view !== 'about') {\r\n            return null;\r\n        }\r\n\r\n        /* tslint:disable:max-line-length */\r\n        return (\r\n            <div>\r\n                <div className='section'>dojo by <a href='mailto:andy.aiken@live.co.uk'>andy aiken</a></div>\r\n                <div className='section'>version <b>{pkg.version}</b></div>\r\n                <div className='section'>if you would like to contribut to this project, you can do so <a href='https://github.com/andyaiken/dojo' target='_blank' rel='noopener noreferrer'>here</a></div>\r\n                <div className='section'>dungeons and dragons copyright wizards of the coast</div>\r\n                <div className='heading'>options</div>\r\n                <ConfirmButton text='clear all data' callback={() => this.props.resetAll()} />\r\n                <Checkbox\r\n                    label='show help cards'\r\n                    checked={this.props.options.showHelp}\r\n                    changeValue={value => this.props.changeValue(this.props.options, 'showHelp', value)}\r\n                />\r\n                <div className='heading'>open game license</div>\r\n                <div className='section'>The following text is the property of Wizards of the Coast, Inc. and is Copyright 2000 Wizards of the Coast, Inc ('Wizards'). All Rights Reserved.</div>\r\n                <ol>\r\n                    <li>Definitions: (a)'Contributors' means the copyright and/or trademark owners who have contributed Open Game Content; (b)'Derivative Material' means copyrighted material including derivative works and translations (including into other computer languages), potation, modification, correction, addition, extension, upgrade, improvement, compilation, abridgment or other form in which an existing work may be recast, transformed or adapted; (c) 'Distribute' means to reproduce, license, rent, lease, sell, broadcast, publicly display, transmit or otherwise distribute; (d)'Open Game Content' means the game mechanic and includes the methods, procedures, processes and routines to the extent such content does not embody the Product Identity and is an enhancement over the prior art and any additional content clearly identified as Open Game Content by the Contributor, and means any work covered by this License, including translations and derivative works under copyright law, but specifically excludes Product Identity. (e) 'Product Identity' means product and product line names, logos and identifying marks including trade dress; artifacts; creatures characters; stories, storylines, plots, thematic elements, dialogue, incidents, language, artwork, symbols, designs, depictions, likenesses, formats, poses, concepts, themes and graphic, photographic and other visual or audio representations; names and descriptions of characters, spells, enchantments, personalities, teams, personas, likenesses and special abilities; places, locations, environments, creatures, equipment, magical or supernatural abilities or effects, logos, symbols, or graphic designs; and any other trademark or registered trademark clearly identified as Product identity by the owner of the Product Identity, and which specifically excludes the Open Game Content; (f) 'Trademark' means the logos, names, mark, sign, motto, designs that are used by a Contributor to identify itself or its products or the associated products contributed to the Open Game License by the Contributor (g) 'Use', 'Used' or 'Using' means to use, Distribute, copy, edit, format, modify, translate and otherwise create Derivative Material of Open Game Content. (h) 'You' or 'Your' means the licensee in terms of this agreement.</li>\r\n                    <li>The License: This License applies to any Open Game Content that contains a notice indicating that the Open Game Content may only be Used under and in terms of this License. You must affix such a notice to any Open Game Content that you Use. No terms may be added to or subtracted from this License except as described by the License itself. No other terms or conditions may be applied to any Open Game Content distributed using this License.</li>\r\n                    <li>Offer and Acceptance: By Using the Open Game Content You indicate Your acceptance of the terms of this License.</li>\r\n                    <li>Grant and Consideration: In consideration for agreeing to use this License, the Contributors grant You a perpetual, worldwide, royalty-free, non-exclusive license with the exact terms of this License to Use, the Open Game Content.</li>\r\n                    <li>Representation of Authority to Contribute: If You are contributing original material as Open Game Content, You represent that Your Contributions are Your original creation and/or You have sufficient rights to grant the rights conveyed by this License.</li>\r\n                    <li>Notice of License Copyright: You must update the COPYRIGHT NOTICE portion of this License to include the exact text of the COPYRIGHT NOTICE of any Open Game Content You are copying, modifying or distributing, and You must add the title, the copyright date, and the copyright holder's name to the COPYRIGHT NOTICE of any original Open Game Content you Distribute.</li>\r\n                    <li>Use of Product Identity: You agree not to Use any Product Identity, including as an indication as to compatibility, except as expressly licensed in another, independent Agreement with the owner of each element of that Product Identity. You agree not to indicate compatibility or co-adaptability with any Trademark or Registered Trademark in conjunction with a work containing Open Game Content except as expressly licensed in another, independent Agreement with the owner of such Trademark or Registered Trademark. The use of any Product Identity in Open Game Content does not constitute a challenge to the ownership of that Product Identity. The owner of any Product Identity used in Open Game Content shall retain all rights, title and interest in and to that Product Identity.</li>\r\n                    <li>Identification: If you distribute Open Game Content You must clearly indicate which portions of the work that you are distributing are Open Game Content.</li>\r\n                    <li>Updating the License: Wizards or its designated Agents may publish updated versions of this License. You may use any authorized version of this License to copy, modify and distribute any Open Game Content originally distributed under any version of this License.</li>\r\n                    <li>Copy of this License: You MUST include a copy of this License with every copy of the Open Game Content You Distribute.</li>\r\n                    <li>Use of Contributor Credits: You may not market or advertise the Open Game Content using the name of any Contributor unless You have written permission from the Contributor to do so.</li>\r\n                    <li>Inability to Comply: If it is impossible for You to comply with any of the terms of this License with respect to some or all of the Open Game Content due to statute, judicial order, or governmental regulation then You may not Use any Open Game Material so affected.</li>\r\n                    <li>Termination: This License will terminate automatically if You fail to comply with all terms herein and fail to cure such breach within 30 days of becoming aware of the breach. All sublicenses shall survive the termination of this License.</li>\r\n                    <li>Reformation: If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable.</li>\r\n                    <li>COPYRIGHT NOTICE Open Game License v 1.0 Copyright 2000, Wizards of the Coast, Inc.</li>\r\n                </ol>\r\n            </div>\r\n        );\r\n        /* tslint:enable:max-line-length */\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const viewOptions = [\r\n                {\r\n                    id: 'dm',\r\n                    text: 'dm tools'\r\n                },\r\n                {\r\n                    id: 'about',\r\n                    text: 'about'\r\n                }\r\n            ];\r\n\r\n            return (\r\n                <div className='about'>\r\n                    <Selector\r\n                        tabs={true}\r\n                        options={viewOptions}\r\n                        selectedID={this.state.view}\r\n                        select={optionID => this.setView(optionID)}\r\n                    />\r\n                    {this.getTools()}\r\n                    {this.getAbout()}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { CombatSetup } from '../../models/combat';\r\nimport { Encounter, EncounterSlot } from '../../models/encounter';\r\nimport { MapFolio } from '../../models/map-folio';\r\nimport { Monster } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport Selector from '../controls/selector';\r\nimport DifficultyChartPanel from '../panels/difficulty-chart-panel';\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    combatSetup: CombatSetup;\r\n    parties: Party[];\r\n    encounters: Encounter[];\r\n    mapFolios: MapFolio[];\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n    notify: () => void;\r\n}\r\n\r\ninterface State {\r\n    combatSetup: CombatSetup;\r\n}\r\n\r\nexport default class CombatStartModal extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        parties: null,\r\n        mapFolios: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            combatSetup: props.combatSetup\r\n        };\r\n    }\r\n\r\n    private setParty(partyID: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.partyID = partyID;\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        }, () => this.props.notify());\r\n    }\r\n\r\n    private setEncounter(encounterID: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.encounterID = encounterID;\r\n        const enc = this.props.encounters.find(e => e.id === encounterID);\r\n        if (enc) {\r\n            // eslint-disable-next-line\r\n            this.state.combatSetup.monsterNames = Utils.getMonsterNames(enc);\r\n        }\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        }, () => this.props.notify());\r\n    }\r\n\r\n    private setFolioID(id: string) {\r\n        if (id && (id !== '')) {\r\n            const folio = this.props.mapFolios.find(f => f.id === id);\r\n            if (folio) {\r\n                // eslint-disable-next-line\r\n                this.state.combatSetup.folioID = folio.id;\r\n                // eslint-disable-next-line\r\n                this.state.combatSetup.mapID = folio.maps.length === 1 ? folio.maps[0].id : null;\r\n            }\r\n        } else {\r\n            // eslint-disable-next-line\r\n            this.state.combatSetup.folioID = null;\r\n            // eslint-disable-next-line\r\n            this.state.combatSetup.mapID = null;\r\n        }\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        });\r\n    }\r\n\r\n    private setMapID(id: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.mapID = id;\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        });\r\n    }\r\n\r\n    private setWave(waveID: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.waveID = waveID;\r\n        const enc = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n        if (enc) {\r\n            const wave = enc.waves.find(w => w.id === waveID);\r\n            if (wave) {\r\n                // eslint-disable-next-line\r\n                this.state.combatSetup.monsterNames = Utils.getMonsterNames(wave);\r\n            }\r\n        }\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        }, () => this.props.notify());\r\n    }\r\n\r\n    private setEncounterInitMode(mode: 'manual' | 'individual' | 'group') {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.encounterInitMode = mode;\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        });\r\n    }\r\n\r\n    private changeName(slotID: string, index: number, name: string) {\r\n        const slot = this.state.combatSetup.monsterNames.find(s => s.id === slotID);\r\n        if (slot) {\r\n            slot.names[index] = name;\r\n            this.setState({\r\n                combatSetup: this.state.combatSetup\r\n            });\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    private getPartySection() {\r\n        if (this.props.parties.length === 0) {\r\n            return (\r\n                <div className='section'>you have not defined any parties</div>\r\n            );\r\n        }\r\n\r\n        const partyOptions = this.props.parties.map(party => {\r\n            return {\r\n                id: party.id,\r\n                text: party.name || 'unnamed party'\r\n            };\r\n        });\r\n\r\n        let partyContent = null;\r\n        if (this.state.combatSetup.partyID) {\r\n            const selectedParty = this.props.parties.find(p => p.id === this.state.combatSetup.partyID);\r\n            if (selectedParty) {\r\n                const pcs = selectedParty.pcs.filter(pc => pc.active);\r\n\r\n                const pcSections = pcs.map(pc =>\r\n                    (\r\n                        <li key={pc.id}>\r\n                            {pc.name || 'unnamed pc'} (level {pc.level})\r\n                        </li>\r\n                    )\r\n                );\r\n\r\n                if (pcSections.length === 0) {\r\n                    pcSections.push(\r\n                        <li key={'empty'}>no pcs</li>\r\n                    );\r\n                }\r\n\r\n                partyContent = (\r\n                    <div>\r\n                        <div className='subheading'>pcs</div>\r\n                        <ul>{pcSections}</ul>\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='heading'>party</div>\r\n                <Dropdown\r\n                    options={partyOptions}\r\n                    placeholder='select party...'\r\n                    selectedID={this.state.combatSetup.partyID ? this.state.combatSetup.partyID : undefined}\r\n                    select={optionID => this.setParty(optionID)}\r\n                />\r\n                {partyContent}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getEncounterSection() {\r\n        if (this.props.encounters.length === 0) {\r\n            return (\r\n                <div className='section'>you have not built any encounters</div>\r\n            );\r\n        }\r\n\r\n        const encounterOptions = this.props.encounters.map(encounter => {\r\n            return {\r\n                id: encounter.id,\r\n                text: encounter.name || 'unnamed encounter'\r\n            };\r\n        });\r\n\r\n        let encounterContent = null;\r\n        if (this.state.combatSetup.encounterID) {\r\n            const selectedEncounter = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n            if (selectedEncounter) {\r\n                const monsterSections = selectedEncounter.slots.map(slot => {\r\n                    let name = slot.monsterName || 'unnamed monster';\r\n                    if (slot.count > 1) {\r\n                        name += ' (x' + slot.count + ')';\r\n                    }\r\n                    return (\r\n                        <li key={slot.id}>{name}</li>\r\n                    );\r\n                });\r\n\r\n                if (monsterSections.length === 0) {\r\n                    monsterSections.push(\r\n                        <li key={'empty'}>no monsters</li>\r\n                    );\r\n                }\r\n\r\n                const waves = selectedEncounter.waves.map(wave => {\r\n                    if (wave.slots.length === 0) {\r\n                        return null;\r\n                    }\r\n\r\n                    const waveMonsters = wave.slots.map(slot => {\r\n                        let name = slot.monsterName || 'unnamed monster';\r\n                        if (slot.count > 1) {\r\n                            name += ' x' + slot.count;\r\n                        }\r\n                        return (\r\n                            <li key={slot.id}>{name}</li>\r\n                        );\r\n                    });\r\n\r\n                    return (\r\n                        <div key={wave.id}>\r\n                            <div className='subheading'>{wave.name || 'unnamed wave'}</div>\r\n                            <ul>{waveMonsters}</ul>\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                encounterContent = (\r\n                    <div>\r\n                        <div className='subheading'>monsters</div>\r\n                        <ul>{monsterSections}</ul>\r\n                        {waves}\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='heading'>encounter</div>\r\n                <Dropdown\r\n                    options={encounterOptions}\r\n                    placeholder='select encounter...'\r\n                    selectedID={this.state.combatSetup.encounterID ? this.state.combatSetup.encounterID : undefined}\r\n                    select={optionID => this.setEncounter(optionID)}\r\n                />\r\n                {encounterContent}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getMapSection() {\r\n        const folios = this.props.mapFolios.filter(folio => folio.maps.length > 0);\r\n        if (folios.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        const folioOptions = [{\r\n            id: '',\r\n            text: 'none'\r\n        }].concat(folios.map(folio => {\r\n            return {\r\n                id: folio.id,\r\n                text: folio.name || 'unnamed folio'\r\n            };\r\n        }));\r\n\r\n        let selectMapSection = null;\r\n        let thumbnailSection = null;\r\n\r\n        if (this.state.combatSetup.folioID) {\r\n            const folio = this.props.mapFolios.find(f => f.id === this.state.combatSetup.folioID);\r\n            if (folio) {\r\n                const mapOptions = folio.maps.map(m => {\r\n                    return {\r\n                        id: m.id,\r\n                        text: m.name || 'unnamed map'\r\n                    };\r\n                });\r\n\r\n                if (mapOptions.length !== 1) {\r\n                    selectMapSection = (\r\n                        <Selector\r\n                            options={mapOptions}\r\n                            selectedID={this.state.combatSetup.mapID}\r\n                            select={optionID => this.setMapID(optionID)}\r\n                        />\r\n                    );\r\n                }\r\n\r\n                if (this.state.combatSetup.mapID) {\r\n                    const map = folio.maps.find(m => m.id === this.state.combatSetup.mapID);\r\n                    if (map) {\r\n                        thumbnailSection = (\r\n                            <MapPanel\r\n                                map={map}\r\n                                mode='thumbnail'\r\n                            />\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='heading'>map</div>\r\n                <Dropdown\r\n                    options={folioOptions}\r\n                    placeholder='select map folio...'\r\n                    selectedID={this.state.combatSetup.folioID ? this.state.combatSetup.folioID : undefined}\r\n                    select={optionID => this.setFolioID(optionID)}\r\n                />\r\n                {selectMapSection}\r\n                {thumbnailSection}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getWaveSection() {\r\n        if (this.state.combatSetup.encounterID === null) {\r\n            return (\r\n                <div className='section'>you have not selected an encounter</div>\r\n            );\r\n        }\r\n\r\n        const selectedEncounter = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n        if (selectedEncounter) {\r\n            if (selectedEncounter.waves.length === 0) {\r\n                return (\r\n                    <div className='section'>you have not defined any waves</div>\r\n                );\r\n            }\r\n\r\n            const waveOptions = selectedEncounter.waves.map(wave => {\r\n                return {\r\n                    id: wave.id,\r\n                    text: wave.name || 'unnamed wave'\r\n                };\r\n            });\r\n\r\n            let waveContent = null;\r\n            if (this.state.combatSetup.waveID) {\r\n                const selectedWave = selectedEncounter.waves.find(w => w.id === this.state.combatSetup.waveID);\r\n                if (selectedWave) {\r\n                    const monsterSections = selectedWave.slots.map(slot => {\r\n                        let name = slot.monsterName || 'unnamed monster';\r\n                        if (slot.count > 1) {\r\n                            name += ' (x' + slot.count + ')';\r\n                        }\r\n                        return (\r\n                            <li key={slot.id}>{name}</li>\r\n                        );\r\n                    });\r\n\r\n                    if (monsterSections.length === 0) {\r\n                        monsterSections.push(\r\n                            <li key={'empty'}>no monsters</li>\r\n                        );\r\n                    }\r\n\r\n                    waveContent = (\r\n                        <div>\r\n                            <div className='subheading'>monsters</div>\r\n                            <ul>{monsterSections}</ul>\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n\r\n            return (\r\n                <div>\r\n                    <div className='heading'>wave</div>\r\n                    <Dropdown\r\n                        options={waveOptions}\r\n                        placeholder='select wave...'\r\n                        selectedID={this.state.combatSetup.waveID ? this.state.combatSetup.waveID : undefined}\r\n                        select={optionID => this.setWave(optionID)}\r\n                    />\r\n                    {waveContent}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private getDifficultySection() {\r\n        const party = this.props.parties.find(p => p.id === this.state.combatSetup.partyID);\r\n        const encounter = this.props.encounters.find(enc => enc.id === this.state.combatSetup.encounterID);\r\n\r\n        if (party && encounter) {\r\n            return (\r\n                <div>\r\n                    <div className='heading'>encounter difficulty</div>\r\n                    <DifficultyChartPanel\r\n                        party={party}\r\n                        encounter={encounter}\r\n                        getMonster={(monsterName, monsterGroupName) => this.props.getMonster(monsterName, monsterGroupName)}\r\n                    />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='heading'>encounter difficulty</div>\r\n                <div className='section'>select a party and an encounter on the left to see difficulty information.</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getMonsterSection() {\r\n        if (this.state.combatSetup.encounterID === null) {\r\n            return (\r\n                <div>\r\n                    <div className='heading'>monsters</div>\r\n                    <div className='section'>select an encounter to see monster options here.</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (!this.props.parties && this.state.combatSetup.waveID === null) {\r\n            return (\r\n                <div>\r\n                    <div className='heading'>monsters</div>\r\n                    <div className='section'>select a wave to see monster options here.</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        const selectedEncounter = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n        if (selectedEncounter) {\r\n            let slotsContainer: { slots: EncounterSlot[] } = selectedEncounter;\r\n            if (this.state.combatSetup.waveID) {\r\n                const selectedWave = selectedEncounter.waves.find(w => w.id === this.state.combatSetup.waveID);\r\n                if (selectedWave) {\r\n                    slotsContainer = selectedWave;\r\n                }\r\n            }\r\n\r\n            if (slotsContainer.slots.length === 0) {\r\n                return null;\r\n            }\r\n\r\n            const initOptions = [\r\n                {\r\n                    id: 'manual',\r\n                    text: 'enter manually'\r\n                },\r\n                {\r\n                    id: 'individual',\r\n                    text: 'roll individually'\r\n                },\r\n                {\r\n                    id: 'group',\r\n                    text: 'roll in groups'\r\n                }\r\n            ];\r\n\r\n            const names = this.state.combatSetup.monsterNames.map(slotNames => {\r\n                const slot = slotsContainer.slots.find(s => s.id === slotNames.id);\r\n                if (slot) {\r\n                    const inputs = [];\r\n                    for (let n = 0; n !== slotNames.names.length; ++n) {\r\n                        inputs.push(\r\n                            <div key={n}>\r\n                                <MonsterName\r\n                                    value={slotNames.names[n]}\r\n                                    slotID={slot.id}\r\n                                    index={n}\r\n                                    changeName={(slotID, index, value) => this.changeName(slotID, index, value)}\r\n                                />\r\n                            </div>\r\n                        );\r\n                    }\r\n                    return (\r\n                        <div key={slotNames.id} className='name-row'>\r\n                            <div className='name-label'>\r\n                                {slot.monsterName}\r\n                            </div>\r\n                            <div className='name-inputs'>\r\n                                {inputs}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n            });\r\n\r\n            return (\r\n                <div>\r\n                    <div className='heading'>monsters</div>\r\n                    <div className='subheading'>initiative</div>\r\n                    <Selector\r\n                        options={initOptions}\r\n                        selectedID={this.state.combatSetup.encounterInitMode}\r\n                        select={optionID => this.setEncounterInitMode(optionID as 'manual' | 'individual' | 'group')}\r\n                    />\r\n                    <div className='subheading'>names</div>\r\n                    <div>{names}</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    public render() {\r\n        try {\r\n            let leftSection = null;\r\n            let rightSection = null;\r\n\r\n            if (this.props.parties) {\r\n                leftSection = (\r\n                    <div>\r\n                        {this.getPartySection()}\r\n                        {this.getEncounterSection()}\r\n                        {this.getMapSection()}\r\n                    </div>\r\n                );\r\n\r\n                rightSection = (\r\n                    <div>\r\n                        {this.getDifficultySection()}\r\n                        {this.getMonsterSection()}\r\n                    </div>\r\n                );\r\n            } else {\r\n                leftSection = (\r\n                    <div>\r\n                        {this.getWaveSection()}\r\n                    </div>\r\n                );\r\n\r\n                rightSection = (\r\n                    <div>\r\n                        {this.getMonsterSection()}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='row' style={{ height: '100%', margin: '0 -15px' }}>\r\n                    <div className='column small-6 medium-6 large-6 scrollable'>\r\n                        {leftSection}\r\n                    </div>\r\n                    <div className='column small-6 medium-6 large-6 scrollable'>\r\n                        {rightSection}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface MonsterNameProps {\r\n    slotID: string;\r\n    index: number;\r\n    value: string;\r\n    changeName: (slotID: string, index: number, value: string) => void;\r\n}\r\n\r\nclass MonsterName extends React.Component<MonsterNameProps> {\r\n    public render() {\r\n        return (\r\n            <input type='text' value={this.props.value} onChange={event => this.props.changeName(this.props.slotID, this.props.index, event.target.value)} />\r\n        );\r\n    }\r\n}\r\n","export interface Condition {\r\n    id: string;\r\n    name: string;\r\n    level: number;\r\n    text: string | null;\r\n    duration: ConditionDurationSaves | ConditionDurationCombatant | ConditionDurationRounds | null;\r\n}\r\n\r\nexport interface ConditionDurationSaves {\r\n    type: 'saves';\r\n    count: number;\r\n    saveType: 'str' | 'dex' | 'con' | 'int' | 'wis' | 'cha' | 'death';\r\n    saveDC: number;\r\n    point: 'start' | 'end';\r\n}\r\n\r\nexport interface ConditionDurationCombatant {\r\n    type: 'combatant';\r\n    point: 'start' | 'end';\r\n    combatantID: string | null;\r\n}\r\n\r\nexport interface ConditionDurationRounds {\r\n    type: 'rounds';\r\n    count: number;\r\n}\r\n\r\nexport const CONDITION_TYPES = [\r\n    'blinded',\r\n    'charmed',\r\n    'deafened',\r\n    'exhaustion',\r\n    'frightened',\r\n    'grappled',\r\n    'incapacitated',\r\n    'invisible',\r\n    'paralyzed',\r\n    'petrified',\r\n    'poisoned',\r\n    'prone',\r\n    'restrained',\r\n    'stunned',\r\n    'unconscious',\r\n    'custom'\r\n];\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    items: { id: string; text: string; details: JSX.Element | string; disabled?: boolean }[];\r\n    selectedItemID: string | null;\r\n    select: (itemID: string) => void;\r\n}\r\n\r\nexport default class RadioGroup extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        // No default property values\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            const content = this.props.items.map(item => {\r\n                return (\r\n                    <RadioGroupItem\r\n                        key={item.id}\r\n                        item={item}\r\n                        selected={this.props.selectedItemID === item.id}\r\n                        select={(itemID: string) => this.props.select(itemID)}\r\n                    />\r\n                );\r\n            });\r\n\r\n            return (\r\n                <div className='radio-group'>\r\n                    {content}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface RadioGroupItemProps {\r\n    item: { id: string; text: string; details: JSX.Element | string; disabled?: boolean };\r\n    selected: boolean;\r\n    select: (itemID: string) => void;\r\n}\r\n\r\nclass RadioGroupItem extends React.Component<RadioGroupItemProps> {\r\n    public render() {\r\n        let style = 'radio-item';\r\n        let details = null;\r\n\r\n        if (this.props.selected) {\r\n            style += ' selected';\r\n            details = (\r\n                <div className='radio-item-details'>\r\n                    {this.props.item.details}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (this.props.item.disabled) {\r\n            style += ' disabled';\r\n        }\r\n\r\n        return (\r\n            <div className={style} onClick={() => this.props.select(this.props.item.id)}>\r\n                <div className='radio-item-text'>{this.props.item.text}</div>\r\n                {details}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Factory from '../../utils/factory';\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combat, Combatant } from '../../models/combat';\r\nimport { Condition, CONDITION_TYPES, ConditionDurationCombatant, ConditionDurationSaves } from '../../models/condition';\r\nimport { Monster } from '../../models/monster-group';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport RadioGroup from '../controls/radio-group';\r\nimport Selector from '../controls/selector';\r\nimport Spin from '../controls/spin';\r\n\r\ninterface Props {\r\n    condition: Condition;\r\n    combatant: Combatant & Monster;\r\n    combat: Combat;\r\n}\r\n\r\ninterface State {\r\n    condition: Condition;\r\n}\r\n\r\nexport default class ConditionModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            condition: props.condition\r\n        };\r\n    }\r\n\r\n    private setCondition(conditionName: string) {\r\n        // eslint-disable-next-line\r\n        this.state.condition.name = conditionName;\r\n        // eslint-disable-next-line\r\n        this.state.condition.level = 1;\r\n        // eslint-disable-next-line\r\n        this.state.condition.text = conditionName === 'custom' ? 'custom condition' : null;\r\n\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    private setDuration(durationType: 'saves' | 'combatant' | 'rounds') {\r\n        let duration = null;\r\n\r\n        switch (durationType) {\r\n            case 'saves':\r\n                duration = Factory.createConditionDurationSaves();\r\n                break;\r\n            case 'combatant':\r\n                duration = Factory.createConditionDurationCombatant();\r\n                duration.combatantID = this.props.combatant.id;\r\n                break;\r\n            case 'rounds':\r\n                duration = Factory.createConditionDurationRounds();\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        // eslint-disable-next-line\r\n        this.state.condition.duration = duration;\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    private changeValue(object: any, field: string, value: any) {\r\n        object[field] = value;\r\n\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    private nudgeValue(object: any, field: string, delta: number) {\r\n        let value = object[field] + delta;\r\n        if (field === 'level') {\r\n            value = Math.max(value, 1);\r\n            value = Math.min(value, 6);\r\n        }\r\n        if (field === 'count') {\r\n            value = Math.max(value, 1);\r\n        }\r\n        if (field === 'saveDC') {\r\n            value = Math.max(value, 0);\r\n        }\r\n        object[field] = value;\r\n\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const conditions = CONDITION_TYPES.map(condition => {\r\n                const controls = [];\r\n                const description = [];\r\n                if (condition === this.state.condition.name) {\r\n                    if (condition === 'custom') {\r\n                        controls.push(\r\n                            <input\r\n                                type='text'\r\n                                placeholder='custom condition'\r\n                                value={this.state.condition.text ? this.state.condition.text : ''}\r\n                                onChange={event => this.changeValue(this.state.condition, 'text', event.target.value)}\r\n                            />\r\n                        );\r\n                    }\r\n                    if (condition === 'exhaustion') {\r\n                        controls.push(\r\n                            <Spin\r\n                                key='exhaustion-spin'\r\n                                source={this.props.condition}\r\n                                name='level'\r\n                                label='exhaustion'\r\n                                nudgeValue={delta => this.nudgeValue(this.props.condition, 'level', delta)}\r\n                            />\r\n                        );\r\n                    }\r\n                    const text = Utils.conditionText(this.state.condition);\r\n                    for (let n = 0; n !== text.length; ++n) {\r\n                        description.push(<li key={n} className='section'>{text[n]}</li>);\r\n                    }\r\n                }\r\n\r\n                return {\r\n                    id: condition,\r\n                    text: condition,\r\n                    details: (\r\n                        <div key={condition}>\r\n                            {controls}\r\n                            <ul>\r\n                                {description}\r\n                            </ul>\r\n                        </div>\r\n                    ),\r\n                    disabled: this.props.combatant.conditionImmunities ? this.props.combatant.conditionImmunities.indexOf(condition) !== -1 : false\r\n                };\r\n            });\r\n\r\n            const saveOptions = ['str', 'dex', 'con', 'int', 'wis', 'cha', 'death'].map(c => ({ id: c, text: c }));\r\n            const pointOptions = [\r\n                {\r\n                    id: 'start',\r\n                    text: 'start of turn'\r\n                },\r\n                {\r\n                    id: 'end',\r\n                    text: 'end of turn'\r\n                }\r\n            ];\r\n            const combatantOptions = this.props.combat.combatants.map(c => ({ id: c.id, text: (c.displayName || c.name || 'unnamed monster') }));\r\n\r\n            const durations = [\r\n                {\r\n                    id: 'none',\r\n                    text: 'until removed (default)',\r\n                    details: (\r\n                        <div className='section'>\r\n                            <div>the condition persists until it is manually removed</div>\r\n                        </div>\r\n                    )\r\n                },\r\n                {\r\n                    id: 'saves',\r\n                    text: 'until a successful save',\r\n                    details: (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>number of saves required</div>\r\n                                <Spin\r\n                                    source={this.props.condition.duration}\r\n                                    name='count'\r\n                                    nudgeValue={delta => this.nudgeValue(this.props.condition.duration, 'count', delta)}\r\n                                />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>save dc</div>\r\n                                <Spin\r\n                                    source={this.props.condition.duration}\r\n                                    name='saveDC'\r\n                                    nudgeValue={delta => this.nudgeValue(this.props.condition.duration, 'saveDC', delta)}\r\n                                />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>type of save</div>\r\n                                <Selector\r\n                                    options={saveOptions}\r\n                                    selectedID={\r\n                                        (this.props.condition.duration as ConditionDurationSaves)\r\n                                        ? (this.props.condition.duration as ConditionDurationSaves).saveType\r\n                                        : null\r\n                                    }\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, 'saveType', optionID)}\r\n                                />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>make the save at the start or end of the turn</div>\r\n                                <Selector\r\n                                    options={pointOptions}\r\n                                    selectedID={\r\n                                        (this.props.condition.duration as ConditionDurationSaves)\r\n                                        ? (this.props.condition.duration as ConditionDurationSaves).point\r\n                                        : null\r\n                                    }\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, 'point', optionID)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                },\r\n                {\r\n                    id: 'combatant',\r\n                    text: 'until someone\\'s next turn',\r\n                    details: (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>combatant</div>\r\n                                <Dropdown\r\n                                    options={combatantOptions}\r\n                                    selectedID={\r\n                                        (this.props.condition.duration as ConditionDurationCombatant)\r\n                                        ? (this.props.condition.duration as ConditionDurationCombatant).combatantID || undefined\r\n                                        : undefined\r\n                                    }\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, 'combatantID', optionID)}\r\n                                />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>start or end of the turn</div>\r\n                                <Selector\r\n                                    options={pointOptions}\r\n                                    selectedID={\r\n                                        (this.props.condition.duration as ConditionDurationCombatant)\r\n                                        ? (this.props.condition.duration as ConditionDurationCombatant).point\r\n                                        : null\r\n                                    }\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, 'point', optionID)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                },\r\n                {\r\n                    id: 'rounds',\r\n                    text: 'for a number of rounds',\r\n                    details: (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>number of rounds</div>\r\n                                <Spin\r\n                                    source={this.props.condition.duration}\r\n                                    name='count'\r\n                                    nudgeValue={delta => this.nudgeValue(this.props.condition.duration, 'count', delta)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }\r\n            ];\r\n\r\n            return (\r\n                <div className='condition-modal'>\r\n                    <div className='row' style={{ height: '100%' }}>\r\n                        <div className='columns small-6 medium-6 large-6 scrollable'>\r\n                            <div className='heading'>condition</div>\r\n                            <RadioGroup\r\n                                items={conditions}\r\n                                selectedItemID={this.state.condition.name}\r\n                                select={itemID => this.setCondition(itemID)}\r\n                            />\r\n                        </div>\r\n                        <div className='columns small-6 medium-6 large-6 scrollable'>\r\n                            <div className='heading'>duration</div>\r\n                            <RadioGroup\r\n                                items={durations}\r\n                                selectedItemID={this.state.condition.duration ? this.state.condition.duration.type : 'none'}\r\n                                select={itemID => this.setDuration(itemID as 'saves' | 'combatant' | 'rounds')}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { CATEGORY_TYPES, Monster, MonsterGroup, SIZE_TYPES } from '../../models/monster-group';\r\n\r\nimport Selector from '../controls/selector';\r\n\r\ninterface Props {\r\n    library: MonsterGroup[];\r\n}\r\n\r\ninterface State {\r\n    chart: string;\r\n}\r\n\r\nexport default class DemographicsModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            chart: 'challenge'\r\n        };\r\n    }\r\n\r\n    private selectChart(chart: string) {\r\n        this.setState({\r\n            chart: chart\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let demographics = null;\r\n\r\n            const allMonsters: Monster[] = [];\r\n            this.props.library.forEach(group => group.monsters.forEach(monster => allMonsters.push(monster)));\r\n            if (allMonsters.length !== 0) {\r\n                const buckets: { value: any, title: string }[] = [];\r\n                let maxBucketSize = 0;\r\n                const monsters: { [key: string]: Monster[] } = {};\r\n\r\n                switch (this.state.chart) {\r\n                    case 'challenge':\r\n                        const challenges = [\r\n                            0, 0.125, 0.25, 0.5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30\r\n                        ];\r\n                        challenges.forEach(cr => {\r\n                            buckets.push({\r\n                                value: cr,\r\n                                title: 'challenge ' + Utils.challenge(cr)\r\n                            });\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const cr = bucket.value;\r\n                            monsters[cr.toString()] = allMonsters.filter(monster => monster.challenge === cr);\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const cr = bucket.value;\r\n                            maxBucketSize = Math.max(monsters[cr].length, maxBucketSize);\r\n                        });\r\n                        break;\r\n                    case 'size':\r\n                        SIZE_TYPES.forEach(size => {\r\n                            buckets.push({\r\n                                value: size,\r\n                                title: size\r\n                            });\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const size = bucket.value;\r\n                            monsters[size.toString()] = allMonsters.filter(monster => monster.size === size);\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const size = bucket.value;\r\n                            maxBucketSize = Math.max(monsters[size].length, maxBucketSize);\r\n                        });\r\n                        break;\r\n                    case 'type':\r\n                        CATEGORY_TYPES.forEach(type => {\r\n                            buckets.push({\r\n                                value: type,\r\n                                title: type\r\n                            });\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const type = bucket.value;\r\n                            monsters[type.toString()] = allMonsters.filter(monster => monster.category === type);\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const type = bucket.value;\r\n                            maxBucketSize = Math.max(monsters[type].length, maxBucketSize);\r\n                        });\r\n                        break;\r\n                    default:\r\n                        // Do nothing\r\n                        break;\r\n                }\r\n\r\n                const bars = [];\r\n                for (let index = 0; index !== buckets.length; ++index) {\r\n                    const bucket = buckets[index];\r\n                    const set = monsters[bucket.value];\r\n                    const count = set ? set.length : 0;\r\n                    bars.push(\r\n                        <div\r\n                            key={bucket.title}\r\n                            className='bar-container'\r\n                            title={bucket.title + ': ' + set.length + ' monsters'}\r\n                        >\r\n                            <div\r\n                                className='bar'\r\n                                style={{\r\n                                    width: 'calc((100% - 1px) * ' + count + ' / ' + maxBucketSize + ')'\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                const chartOptions = [\r\n                    {\r\n                        id: 'challenge',\r\n                        text: 'challenge rating'\r\n                    },\r\n                    {\r\n                        id: 'size',\r\n                        text: 'size'\r\n                    },\r\n                    {\r\n                        id: 'type',\r\n                        text: 'type'\r\n                    }\r\n                ];\r\n\r\n                demographics = (\r\n                    <div>\r\n                        <div className='heading'>monster demographics</div>\r\n                        <Selector\r\n                            options={chartOptions}\r\n                            selectedID={this.state.chart}\r\n                            select={optionID => this.selectChart(optionID)}\r\n                        />\r\n                        <div className='chart'>\r\n                            <div className='plot'>{bars}</div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return demographics;\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","export interface MapFolio {\r\n    id: string;\r\n    name: string;\r\n    maps: Map[];\r\n}\r\n\r\nexport interface Map {\r\n    id: string;\r\n    name: string;\r\n    items: MapItem[];\r\n}\r\n\r\nexport interface MapItem {\r\n    id: string;\r\n    type: 'tile' | 'pc' | 'monster';\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n    terrain: string | null;\r\n}\r\n\r\nexport const TERRAIN_TYPES = [\r\n    'cavern',\r\n    'dirt',\r\n    'flagstone',\r\n    'floorboard',\r\n    'grassland',\r\n    'pit',\r\n    'sand',\r\n    'snow',\r\n    'water'\r\n];\r\n","import React from 'react';\r\n\r\nimport { MapItem, TERRAIN_TYPES } from '../../models/map-folio';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport Radial from '../controls/radial';\r\n\r\ninterface Props {\r\n    tile: MapItem;\r\n    changeValue: (tile: MapItem, field: string, value: string) => void;\r\n    moveMapItem: (tile: MapItem, dir: string) => void;\r\n    resizeMapItem: (tile: MapItem, dir: string, dir2: 'in' | 'out' | null) => void;\r\n    cloneMapItem: (tile: MapItem) => void;\r\n    removeMapItem: (tile: MapItem) => void;\r\n}\r\n\r\nexport default class MapTileCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const terrainOptions = TERRAIN_TYPES.map(t => {\r\n                return { id: t, text: t };\r\n            });\r\n\r\n            return (\r\n                <div className='card map-tile'>\r\n                    <div className='heading'>\r\n                        <div className='title'>map tile</div>\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        <div className='subheading'>size</div>\r\n                        <div className='section'>{this.props.tile.width} sq x {this.props.tile.height} sq</div>\r\n                        <div className='section'>{this.props.tile.width * 5} ft x {this.props.tile.height * 5} ft</div>\r\n                        <div className='divider' />\r\n                        <div className='subheading'>terrain</div>\r\n                        <Dropdown\r\n                            options={terrainOptions}\r\n                            placeholder='select terrain'\r\n                            selectedID={this.props.tile.terrain ? this.props.tile.terrain : undefined}\r\n                            select={optionID => this.props.changeValue(this.props.tile, 'terrain', optionID)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <div className='subheading'>move</div>\r\n                        <div className='section centered'>\r\n                            <Radial direction='out' click={dir => this.props.moveMapItem(this.props.tile, dir)} />\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='subheading'>resize</div>\r\n                        <div className='section centered'>\r\n                            <Radial direction='both' click={(dir, dir2) => this.props.resizeMapItem(this.props.tile, dir, dir2)} />\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='section'>\r\n                            <button onClick={() => this.props.cloneMapItem(this.props.tile)}>clone tile</button>\r\n                            <button onClick={() => this.props.removeMapItem(this.props.tile)}>remove tile</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Factory from '../../utils/factory';\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Map, MapItem } from '../../models/map-folio';\r\n\r\nimport MapTileCard from '../cards/map-tile-card';\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    map: Map;\r\n}\r\n\r\ninterface State {\r\n    map: Map;\r\n    selectedTileID: string | null;\r\n}\r\n\r\nexport default class MapEditorModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            map: props.map,\r\n            selectedTileID: null\r\n        };\r\n    }\r\n\r\n    private setSelectedTileID(id: string | null) {\r\n        this.setState({\r\n            selectedTileID: id\r\n        });\r\n    }\r\n\r\n    private addMapTile(x: number, y: number) {\r\n        const tile = Factory.createMapItem();\r\n        tile.x = x;\r\n        tile.y = y;\r\n        tile.terrain = 'flagstone';\r\n        this.state.map.items.push(tile);\r\n\r\n        this.setState({\r\n            map: this.state.map,\r\n            selectedTileID: tile.id\r\n        });\r\n    }\r\n\r\n    private moveMapItem(item: MapItem, dir: string) {\r\n        switch (dir) {\r\n            case 'N':\r\n                item.y -= 1;\r\n                break;\r\n            case 'E':\r\n                item.x += 1;\r\n                break;\r\n            case 'S':\r\n                item.y += 1;\r\n                break;\r\n            case 'W':\r\n                item.x -= 1;\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    private bigMapItem(item: MapItem, dir: string) {\r\n        switch (dir) {\r\n            case 'N':\r\n                item.y -= 1;\r\n                item.height += 1;\r\n                break;\r\n            case 'E':\r\n                item.width += 1;\r\n                break;\r\n            case 'S':\r\n                item.height += 1;\r\n                break;\r\n            case 'W':\r\n                item.x -= 1;\r\n                item.width += 1;\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    private smallMapItem(item: MapItem, dir: string) {\r\n        switch (dir) {\r\n            case 'N':\r\n                if (item.height > 1) {\r\n                    item.y += 1;\r\n                    item.height -= 1;\r\n                }\r\n                break;\r\n            case 'E':\r\n                if (item.width > 1) {\r\n                    item.width -= 1;\r\n                }\r\n                break;\r\n            case 'S':\r\n                if (item.height > 1) {\r\n                    item.height -= 1;\r\n                }\r\n                break;\r\n            case 'W':\r\n                if (item.width > 1) {\r\n                    item.x += 1;\r\n                    item.width -= 1;\r\n                }\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    private resizeMapItem(item: MapItem, dir: string, dir2: 'in' | 'out') {\r\n        switch (dir2) {\r\n            case 'in':\r\n                this.smallMapItem(item, dir);\r\n                break;\r\n            case 'out':\r\n                this.bigMapItem(item, dir);\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n    }\r\n\r\n    private cloneMapItem(item: MapItem) {\r\n        const copy = JSON.parse(JSON.stringify(item));\r\n        copy.id = Utils.guid();\r\n        copy.x += 1;\r\n        copy.y += 1;\r\n        this.state.map.items.push(copy);\r\n\r\n        this.setState({\r\n            map: this.state.map,\r\n            selectedTileID: copy.id\r\n        });\r\n    }\r\n\r\n    private removeMapItem(item: MapItem) {\r\n        const index = this.state.map.items.indexOf(item);\r\n        this.state.map.items.splice(index, 1);\r\n\r\n        this.setState({\r\n            map: this.state.map,\r\n            selectedTileID: null\r\n        });\r\n    }\r\n\r\n    private changeValue(source: any, field: string, value: any) {\r\n        source[field] = value;\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let tools = null;\r\n            if (this.state.selectedTileID) {\r\n                const item = this.state.map.items.find(i => i.id === this.state.selectedTileID);\r\n                if (item) {\r\n                    tools = (\r\n                        <div className='tools'>\r\n                            <MapTileCard\r\n                                tile={item}\r\n                                moveMapItem={(mapItem, dir) => this.moveMapItem(mapItem, dir)}\r\n                                resizeMapItem={(mapItem, dir, dir2) => this.resizeMapItem(mapItem, dir, dir2 as 'in' | 'out')}\r\n                                cloneMapItem={mapItem => this.cloneMapItem(mapItem)}\r\n                                removeMapItem={mapItem => this.removeMapItem(mapItem)}\r\n                                changeValue={(source, field, value) => this.changeValue(source, field, value)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                }\r\n            } else {\r\n                tools = (\r\n                    <div className='tools'>\r\n                        <p>to add a new tile to the map, double-click on an empty grid square</p>\r\n                        <p>to edit an existing tile, click on it once to select it</p>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='map-editor'>\r\n                    {tools}\r\n                    <MapPanel\r\n                        map={this.state.map}\r\n                        mode='edit'\r\n                        selectedItemID={this.state.selectedTileID ? this.state.selectedTileID : undefined}\r\n                        setSelectedItemID={id => this.setSelectedTileID(id)}\r\n                        addMapTile={(x, y) => this.addMapTile(x, y)}\r\n                    />\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Factory from '../../utils/factory';\r\nimport Frankenstein from '../../utils/frankenstein';\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { CATEGORY_TYPES, Monster, MonsterGroup, SIZE_TYPES, Trait, TRAIT_TYPES } from '../../models/monster-group';\r\n\r\nimport MonsterCard from '../cards/monster-card';\r\nimport Checkbox from '../controls/checkbox';\r\nimport Dropdown from '../controls/dropdown';\r\nimport Selector from '../controls/selector';\r\nimport Spin from '../controls/spin';\r\nimport AbilityScorePanel from '../panels/ability-score-panel';\r\nimport TraitsPanel from '../panels/traits-panel';\r\n\r\nimport arrow from '../../resources/images/down-arrow.svg';\r\n\r\ninterface Props {\r\n    monster: Monster;\r\n    library: MonsterGroup[];\r\n    showMonsters: boolean;\r\n}\r\n\r\ninterface State {\r\n    monster: Monster;\r\n    page: 'overview' | 'abilities' | 'cbt-stats' | 'actions';\r\n    showFilter: boolean;\r\n    helpSection: string;\r\n    filter: {\r\n        size: boolean,\r\n        type: boolean,\r\n        subtype: boolean,\r\n        alignment: boolean,\r\n        challenge: boolean,\r\n        text: string\r\n    };\r\n}\r\n\r\nexport default class MonsterEditorModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            monster: props.monster,\r\n            page: 'overview',\r\n            showFilter: false,\r\n            helpSection: 'speed',\r\n            filter: {\r\n                size: true,\r\n                type: true,\r\n                subtype: false,\r\n                alignment: false,\r\n                challenge: true,\r\n                text: ''\r\n            }\r\n        };\r\n    }\r\n\r\n    private setPage(page: 'overview' | 'abilities' | 'cbt-stats' | 'actions') {\r\n        const sections = this.getHelpOptionsForPage(page);\r\n        this.setState({\r\n            page: page,\r\n            helpSection: sections[0]\r\n        });\r\n    }\r\n\r\n    private toggleFilter() {\r\n        this.setState({\r\n            showFilter: !this.state.showFilter\r\n        });\r\n    }\r\n\r\n    private setHelpSection(section: string) {\r\n        this.setState({\r\n            helpSection: section\r\n        });\r\n    }\r\n\r\n    private toggleMatch(type: 'size' | 'type' | 'subtype' | 'alignment' | 'challenge') {\r\n        // eslint-disable-next-line\r\n        this.state.filter[type] = !this.state.filter[type];\r\n        this.setState({\r\n            filter: this.state.filter\r\n        });\r\n    }\r\n\r\n    private setFilterText(value: string) {\r\n        // eslint-disable-next-line\r\n        this.state.filter.text = value;\r\n        this.setState({\r\n            filter: this.state.filter\r\n        });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Helper methods\r\n\r\n    private getHelpOptionsForPage(page: 'overview' | 'abilities' | 'cbt-stats' | 'actions') {\r\n        switch (page) {\r\n            case 'overview':\r\n                return ['speed', 'senses', 'languages', 'equipment'];\r\n            case 'abilities':\r\n                return ['str', 'dex', 'con', 'int', 'wis', 'cha', 'saves', 'skills'];\r\n            case 'cbt-stats':\r\n                return ['armor class', 'hit dice', 'resistances', 'vulnerabilities', 'immunities', 'conditions'];\r\n            case 'actions':\r\n                return ['actions'];\r\n            default:\r\n                return [];\r\n        }\r\n    }\r\n\r\n    private getMonsters() {\r\n        const monsters: Monster[] = [];\r\n        this.props.library.forEach(group => {\r\n            group.monsters.forEach(monster => {\r\n                let match = true;\r\n\r\n                if (this.state.monster.id === monster.id) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.filter.size && (this.state.monster.size !== monster.size)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.filter.type && (this.state.monster.category !== monster.category)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.filter.subtype && (this.state.monster.tag !== monster.tag)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.filter.alignment && (this.state.monster.alignment !== monster.alignment)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.filter.challenge && (this.state.monster.challenge !== monster.challenge)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (match) {\r\n                    monsters.push(monster);\r\n                }\r\n            });\r\n        });\r\n\r\n        return monsters;\r\n    }\r\n\r\n    private setRandomValue(field: string, monsters: Monster[]) {\r\n        Frankenstein.setRandomValue(this.state.monster, field, monsters);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private spliceMonsters(monsters: Monster[]) {\r\n        Frankenstein.spliceMonsters(this.state.monster, monsters);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private addTrait(type: 'trait' | 'action' | 'legendary' | 'lair' | 'regional') {\r\n        Frankenstein.addTrait(this.state.monster, type);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private addRandomTrait(type: string, monsters: Monster[]) {\r\n        Frankenstein.addRandomTrait(this.state.monster, type, monsters);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private removeTrait(trait: Trait) {\r\n        Frankenstein.removeTrait(this.state.monster, trait);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private swapTraits(t1: Trait, t2: Trait) {\r\n        Frankenstein.swapTraits(this.state.monster, t1, t2);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private copyTrait(trait: Trait) {\r\n        Frankenstein.copyTrait(this.state.monster, trait);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private changeTrait(trait: Trait, field: string, value: any) {\r\n        (trait as any)[field] = value;\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private nudgeValue(field: string, delta: number) {\r\n        Frankenstein.nudgeValue(this.state.monster, field, delta);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private changeValue(field: string, value: any) {\r\n        Frankenstein.changeValue(this.state.monster, field, value);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // HTML render methods\r\n\r\n    private getHelpSection(monsters: Monster[]) {\r\n        switch (this.state.helpSection) {\r\n            case 'speed':\r\n                return this.getValueSection('speed', 'text', monsters);\r\n            case 'senses':\r\n                return this.getValueSection('senses', 'text', monsters);\r\n            case 'languages':\r\n                return this.getValueSection('languages', 'text', monsters);\r\n            case 'equipment':\r\n                return this.getValueSection('equipment', 'text', monsters);\r\n            case 'str':\r\n                return this.getValueSection('abilityScores.str', 'number', monsters);\r\n            case 'dex':\r\n                return this.getValueSection('abilityScores.dex', 'number', monsters);\r\n            case 'con':\r\n                return this.getValueSection('abilityScores.con', 'number', monsters);\r\n            case 'int':\r\n                return this.getValueSection('abilityScores.int', 'number', monsters);\r\n            case 'wis':\r\n                return this.getValueSection('abilityScores.wis', 'number', monsters);\r\n            case 'cha':\r\n                return this.getValueSection('abilityScores.cha', 'number', monsters);\r\n            case 'saves':\r\n                return this.getValueSection('savingThrows', 'text', monsters);\r\n            case 'skills':\r\n                return this.getValueSection('skills', 'text', monsters);\r\n            case 'armor class':\r\n                return this.getValueSection('ac', 'number', monsters);\r\n            case 'hit dice':\r\n                return this.getValueSection('hitDice', 'number', monsters);\r\n            case 'resistances':\r\n                return this.getValueSection('damage.resist', 'text', monsters);\r\n            case 'vulnerabilities':\r\n                return this.getValueSection('damage.vulnerable', 'text', monsters);\r\n            case 'immunities':\r\n                return this.getValueSection('damage.immune', 'text', monsters);\r\n            case 'conditions':\r\n                return this.getValueSection('conditionImmunities', 'text', monsters);\r\n            case 'actions':\r\n                return this.getActionsSection(monsters);\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    private getValueSection(field: string, dataType: 'text' | 'number', monsters: Monster[]) {\r\n        const values: any[] = monsters\r\n            .map(m => {\r\n                const tokens = field.split('.');\r\n                let source: any = m;\r\n                let value = null;\r\n                tokens.forEach(token => {\r\n                    if (token === tokens[tokens.length - 1]) {\r\n                        value = source[token];\r\n                    } else {\r\n                        source = source[token];\r\n                    }\r\n                });\r\n                if ((dataType === 'text') && (value === '')) {\r\n                    value = null;\r\n                }\r\n                return value;\r\n            })\r\n            .filter(v => v !== null);\r\n\r\n        const distinct: { value: any, count: number }[] = [];\r\n        if (dataType === 'number') {\r\n            let min: number | null = null;\r\n            let max: number | null = null;\r\n            values.forEach(v => {\r\n                if ((min === null) || (v < min)) {\r\n                    min = v;\r\n                }\r\n                if ((max === null) || (v > max)) {\r\n                    max = v;\r\n                }\r\n            });\r\n            if ((min !== null) && (max !== null)) {\r\n                for (let n = min; n <= max; ++n) {\r\n                    distinct.push({\r\n                        value: n,\r\n                        count: 0\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        values.forEach(v => {\r\n            const current = distinct.find(d => d.value === v);\r\n            if (current) {\r\n                current.count += 1;\r\n            } else {\r\n                distinct.push({\r\n                    value: v,\r\n                    count: 1\r\n                });\r\n            }\r\n        });\r\n\r\n        switch (dataType) {\r\n            case 'number':\r\n                Utils.sort(distinct, [{ field: 'value', dir: 'asc' }]);\r\n                break;\r\n            case 'text':\r\n                Utils.sort(distinct, [{ field: 'count', dir: 'desc' }, { field: 'value', dir: 'asc' }]);\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        if (dataType === 'text') {\r\n            const count = monsters.length - values.length;\r\n            if (count !== 0) {\r\n                distinct.push({\r\n                    value: '',\r\n                    count: monsters.length - values.length\r\n                });\r\n            }\r\n        }\r\n\r\n        const valueSections = distinct.map(d => {\r\n            const width = 100 * d.count / monsters.length;\r\n            return (\r\n                <div className='row small-up-3 medium-up-3 large-up-3 value-list' key={distinct.indexOf(d)}>\r\n                    <div className='column'>\r\n                        <div className='text-container'>\r\n                            {d.value || '(none specified)'}\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <div className='bar-container'>\r\n                            <div className='bar' style={{ width: width + '%' }} />\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <button onClick={() => this.changeValue(field, d.value)}>use this value</button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                {valueSections}\r\n                <button onClick={() => this.setRandomValue(field, monsters)}>select random value</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getActionsSection(monsters: Monster[]) {\r\n        const rows = [];\r\n        rows.push(\r\n            <div className='row small-up-4 medium-up-4 large-up-4 value-list' key='header'>\r\n                <div className='column'>\r\n                    <div className='text-container'>\r\n                        <b>type</b>\r\n                    </div>\r\n                </div>\r\n                <div className='column'>\r\n                    <div className='text-container number'>\r\n                        <b>average number</b>\r\n                    </div>\r\n                </div>\r\n                <div className='column'>\r\n                    <div className='text-container number'>\r\n                        <b>min - max</b>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        TRAIT_TYPES.forEach(type => {\r\n            let min: number | null = null;\r\n            let max: number | null = null;\r\n            let count = 0;\r\n            monsters.forEach(m => {\r\n                const n = m.traits.filter(t => t.type === type).length;\r\n                if ((min === null) || (n < min)) {\r\n                    min = n;\r\n                }\r\n                if ((max === null) || (n > max)) {\r\n                    max = n;\r\n                }\r\n                count += n;\r\n            });\r\n            const avg = Math.round(count / monsters.length);\r\n\r\n            rows.push(\r\n                <div className='row small-up-4 medium-up-4 large-up-4 value-list' key={type}>\r\n                    <div className='column'>\r\n                        <div className={count === 0 ? 'text-container disabled' : 'text-container'}>\r\n                            {Utils.traitType(type, true)}\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <div className={count === 0 ? 'text-container number disabled' : 'text-container number'}>\r\n                            {avg}\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <div className={count === 0 ? 'text-container number disabled' : 'text-container number'}>\r\n                            {min} - {max}\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <button className={count === 0 ? 'disabled' : ''} onClick={() => this.addRandomTrait(type, monsters)}>add random</button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                {rows}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getFilterCard(monsters: Monster[]) {\r\n        const criteria: string[] = [];\r\n        if (this.state.filter.size) {\r\n            criteria.push('size');\r\n        }\r\n        if (this.state.filter.type) {\r\n            criteria.push('type');\r\n        }\r\n        if (this.state.filter.subtype) {\r\n            criteria.push('subtype');\r\n        }\r\n        if (this.state.filter.alignment) {\r\n            criteria.push('alignment');\r\n        }\r\n        if (this.state.filter.challenge) {\r\n            criteria.push('challenge rating');\r\n        }\r\n        const criteriaText = (criteria.length > 0) ? 'based on ' + criteria.join(', ') : 'no criteria specified';\r\n        const similar = (\r\n            <div className='section'>\r\n                {monsters.length} similar monsters ({criteriaText})\r\n            </div>\r\n        );\r\n\r\n        let filterContent = null;\r\n        if (this.state.showFilter) {\r\n            filterContent = (\r\n                <div>\r\n                    <Checkbox\r\n                        label={'size ' + this.state.monster.size}\r\n                        checked={this.state.filter.size}\r\n                        changeValue={value => this.toggleMatch('size')}\r\n                    />\r\n                    <Checkbox\r\n                        label={'type ' + this.state.monster.category}\r\n                        checked={this.state.filter.type}\r\n                        changeValue={value => this.toggleMatch('type')}\r\n                    />\r\n                    <Checkbox\r\n                        label={this.state.monster.tag ? 'subtype ' + this.state.monster.tag : 'subtype'}\r\n                        checked={this.state.filter.subtype}\r\n                        disabled={!this.state.monster.tag}\r\n                        changeValue={value => this.toggleMatch('subtype')}\r\n                    />\r\n                    <Checkbox\r\n                        label={this.state.monster.alignment ? 'alignment ' + this.state.monster.alignment : 'alignment'}\r\n                        checked={this.state.filter.alignment}\r\n                        disabled={!this.state.monster.alignment}\r\n                        changeValue={value => this.toggleMatch('alignment')}\r\n                    />\r\n                    <Checkbox\r\n                        label={'challenge rating ' + Utils.challenge(this.state.monster.challenge)}\r\n                        checked={this.state.filter.challenge}\r\n                        changeValue={value => this.toggleMatch('challenge')}\r\n                    />\r\n                    <div className='divider' />\r\n                    <button className={monsters.length < 2 ? 'disabled' : ''} onClick={() => this.spliceMonsters(monsters)}>build random monster</button>\r\n                    <div className='divider' />\r\n                    {similar}\r\n                </div>\r\n            );\r\n        } else {\r\n            filterContent = (\r\n                <div>\r\n                    {similar}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className='section'>\r\n                <div className='card'>\r\n                    <div className='heading'>\r\n                        <div className='title'>similar monsters</div>\r\n                        <img className={this.state.showFilter ? 'image rotate' : 'image'} src={arrow} alt='arrow' onClick={() => this.toggleFilter()} />\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        {filterContent}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getMonsterCards(monsters: Monster[]) {\r\n        const sorted = Utils.sort(monsters);\r\n        const monsterCards = sorted.map(m => {\r\n            const showMonster = m.traits.some((t: Trait) => Utils.match(this.state.filter.text, t.name));\r\n            if (showMonster) {\r\n                return (\r\n                    <div className='section' key={m.id}>\r\n                        <MonsterCard\r\n                            combatant={m}\r\n                            mode={'template ' + this.state.page}\r\n                            filter={this.state.filter.text}\r\n                            copyTrait={trait => this.copyTrait(trait)}\r\n                        />\r\n                    </div>\r\n                );\r\n            } else {\r\n                return null;\r\n            }\r\n        }).filter(m => !!m);\r\n\r\n        return monsterCards;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    public render() {\r\n        try {\r\n            const pages = [\r\n                {\r\n                    id: 'overview',\r\n                    text: 'overview'\r\n                },\r\n                {\r\n                    id: 'abilities',\r\n                    text: 'abilities'\r\n                },\r\n                {\r\n                    id: 'cbt-stats',\r\n                    text: 'combat'\r\n                },\r\n                {\r\n                    id: 'actions',\r\n                    text: 'actions'\r\n                }\r\n            ];\r\n\r\n            let monsters: Monster[] = [];\r\n            if (this.props.showMonsters) {\r\n                monsters = this.getMonsters();\r\n            }\r\n\r\n            let content = null;\r\n            switch (this.state.page) {\r\n                case 'overview':\r\n                    const catOptions = CATEGORY_TYPES.map(cat => ({ id: cat, text: cat }));\r\n                    const sizeOptions = SIZE_TYPES.map(size => ({ id: size, text: size }));\r\n\r\n                    content = (\r\n                        <div className='row'>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>name</div>\r\n                                <input type='text' value={this.state.monster.name} onChange={event => this.changeValue('name', event.target.value)} />\r\n                                <div className='subheading'>size</div>\r\n                                <Dropdown\r\n                                    options={sizeOptions}\r\n                                    selectedID={this.state.monster.size}\r\n                                    select={optionID => this.changeValue('size', optionID)}\r\n                                />\r\n                                <div className='subheading'>type</div>\r\n                                <Dropdown\r\n                                    options={catOptions}\r\n                                    selectedID={this.state.monster.category}\r\n                                    select={optionID => this.changeValue('category', optionID)}\r\n                                />\r\n                                <div className='subheading'>subtype</div>\r\n                                <input type='text' value={this.state.monster.tag} onChange={event => this.changeValue('tag', event.target.value)} />\r\n                                <div className='subheading'>alignment</div>\r\n                                <input type='text' value={this.state.monster.alignment} onChange={event => this.changeValue('alignment', event.target.value)} />\r\n                            </div>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>challenge rating</div>\r\n                                <Spin\r\n                                    source={this.state.monster}\r\n                                    name='challenge'\r\n                                    display={value => Utils.challenge(value)}\r\n                                    nudgeValue={delta => this.nudgeValue('challenge', delta)}\r\n                                />\r\n                                <div className='subheading'>speed</div>\r\n                                <input type='text' value={this.state.monster.speed} onChange={event => this.changeValue('speed', event.target.value)} />\r\n                                <div className='subheading'>senses</div>\r\n                                <input type='text' value={this.state.monster.senses} onChange={event => this.changeValue('senses', event.target.value)} />\r\n                                <div className='subheading'>languages</div>\r\n                                <input type='text' value={this.state.monster.languages} onChange={event => this.changeValue('languages', event.target.value)} />\r\n                                <div className='subheading'>equipment</div>\r\n                                <input type='text' value={this.state.monster.equipment} onChange={event => this.changeValue('equipment', event.target.value)} />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                    break;\r\n                case 'abilities':\r\n                    content = (\r\n                        <div className='row'>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>ability scores</div>\r\n                                <AbilityScorePanel\r\n                                    edit={true}\r\n                                    combatant={this.state.monster}\r\n                                    nudgeValue={(source, type, delta) => this.nudgeValue(type, delta)}\r\n                                />\r\n                            </div>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>saving throws</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.savingThrows}\r\n                                    onChange={event => this.changeValue('savingThrows', event.target.value)}\r\n                                />\r\n                                <div className='subheading'>skills</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.skills}\r\n                                    onChange={event => this.changeValue('skills', event.target.value)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                    break;\r\n                case 'cbt-stats':\r\n                    content = (\r\n                        <div className='row'>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>armor class</div>\r\n                                <Spin\r\n                                    source={this.state.monster}\r\n                                    name='ac'\r\n                                    nudgeValue={delta => this.nudgeValue('ac', delta)}\r\n                                />\r\n                                <div className='subheading'>hit dice</div>\r\n                                <Spin\r\n                                    source={this.state.monster}\r\n                                    name='hitDice'\r\n                                    display={value => value + 'd' + Utils.hitDieType(this.state.monster.size)}\r\n                                    nudgeValue={delta => this.nudgeValue('hitDice', delta)}\r\n                                />\r\n                                <div className='subheading'>hit points</div>\r\n                                <div className='hp-value'>{this.state.monster.hpMax} hp</div>\r\n                            </div>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>damage resistances</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.damage.resist}\r\n                                    onChange={event => this.changeValue('damage.resist', event.target.value)}\r\n                                />\r\n                                <div className='subheading'>damage vulnerabilities</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.damage.vulnerable}\r\n                                    onChange={event => this.changeValue('damage.vulnerable', event.target.value)}\r\n                                />\r\n                                <div className='subheading'>damage immunities</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.damage.immune}\r\n                                    onChange={event => this.changeValue('damage.immune', event.target.value)}\r\n                                />\r\n                                <div className='subheading'>condition immunities</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.conditionImmunities}\r\n                                    onChange={event => this.changeValue('conditionImmunities', event.target.value)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                    break;\r\n                case 'actions':\r\n                    content = (\r\n                        <TraitsPanel\r\n                            combatant={this.state.monster}\r\n                            mode='edit'\r\n                            addTrait={type => this.addTrait(type)}\r\n                            removeTrait={trait => this.removeTrait(trait)}\r\n                            swapTraits={(t1, t2) => this.swapTraits(t1, t2)}\r\n                            changeValue={(trait, type, value) => this.changeTrait(trait, type, value)}\r\n                        />\r\n                    );\r\n                    break;\r\n                default:\r\n                    // Do nothing\r\n                    break;\r\n            }\r\n\r\n            let help = null;\r\n            if (this.props.showMonsters && (monsters.length > 1)) {\r\n                let selector = null;\r\n                if (this.getHelpOptionsForPage(this.state.page).length > 1) {\r\n                    const options = this.getHelpOptionsForPage(this.state.page).map(s => {\r\n                        return {\r\n                            id: s,\r\n                            text: s\r\n                        };\r\n                    });\r\n                    selector = (\r\n                        <Selector\r\n                            tabs={false}\r\n                            options={options}\r\n                            selectedID={this.state.helpSection}\r\n                            select={optionID => this.setHelpSection(optionID)}\r\n                        />\r\n                    );\r\n                }\r\n\r\n                help = (\r\n                    <div className='monster-help'>\r\n                        <div className='divider' />\r\n                        <div className='subheading'>information from similar monsters</div>\r\n                        {selector}\r\n                        {this.getHelpSection(monsters)}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            let monsterList = null;\r\n            if (this.props.showMonsters) {\r\n                let searchBox = null;\r\n                if ((this.state.page === 'actions') && (monsters.length > 0)) {\r\n                    searchBox = (\r\n                        <input\r\n                            type='text'\r\n                            placeholder='search for traits and actions'\r\n                            value={this.state.filter.text}\r\n                            onChange={event => this.setFilterText(event.target.value)}\r\n                        />\r\n                    );\r\n                }\r\n                monsterList = (\r\n                    <div className='columns small-4 medium-4 large-4 scrollable list-column'>\r\n                        {this.getFilterCard(monsters)}\r\n                        {searchBox}\r\n                        {this.getMonsterCards(monsters)}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='row' style={{ height: '100%', margin: '0 -15px' }}>\r\n                    <div\r\n                        className={\r\n                            this.props.showMonsters\r\n                            ? 'columns small-8 medium-8 large-8 scrollable'\r\n                            : 'columns small-12 medium-12 large-12 scrollable'\r\n                        }\r\n                        style={{ transition: 'none' }}\r\n                    >\r\n                        <div className='section'>\r\n                            <Selector\r\n                                tabs={true}\r\n                                options={pages}\r\n                                selectedID={this.state.page}\r\n                                select={optionID => this.setPage(optionID as 'overview' | 'abilities' | 'cbt-stats' | 'actions')}\r\n                            />\r\n                            {content}\r\n                            {help}\r\n                        </div>\r\n                    </div>\r\n                    {monsterList}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Encounter } from '../../models/encounter';\r\nimport { MonsterGroup } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\ninterface Props {\r\n    view: string;\r\n    blur: boolean;\r\n    library: MonsterGroup[];\r\n    parties: Party[];\r\n    encounters: Encounter[];\r\n    setView: (view: string) => void;\r\n}\r\n\r\nexport default class Navbar extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const partiesStyle = this.props.view === 'parties' ? 'navigator-item selected' : 'navigator-item';\r\n            const libraryStyle = this.props.view === 'library' ? 'navigator-item selected' : 'navigator-item';\r\n            let encounterStyle = this.props.view === 'encounter' ? 'navigator-item selected' : 'navigator-item';\r\n            const mapStyle = this.props.view === 'maps' ? 'navigator-item selected' : 'navigator-item';\r\n            let combatStyle = this.props.view === 'combat' ? 'navigator-item selected' : 'navigator-item';\r\n\r\n            const encountersEnabled = this.props.library.length !== 0;\r\n            const combatEnabled = (this.props.parties.length !== 0) && (this.props.encounters.length !== 0);\r\n            if (!encountersEnabled) {\r\n                encounterStyle += ' disabled';\r\n            }\r\n            if (!combatEnabled) {\r\n                combatStyle += ' disabled';\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.blur ? 'navbar blur' : 'navbar'}>\r\n                    <div className={partiesStyle} onClick={() => this.props.setView('parties')}>player characters</div>\r\n                    <div className={libraryStyle} onClick={() => this.props.setView('library')}>monster library</div>\r\n                    <div className={encounterStyle} onClick={() => encountersEnabled ? this.props.setView('encounter') : null}>encounter builder</div>\r\n                    <div className={mapStyle} onClick={() => this.props.setView('maps')}>map folios</div>\r\n                    <div className={combatStyle} onClick={() => combatEnabled ? this.props.setView('combat') : null}>combat manager</div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport cog from '../../resources/images/settings.svg';\r\n\r\ninterface Props {\r\n    actions: JSX.Element | null;\r\n    blur: boolean;\r\n    openHome: () => void;\r\n    openAbout: () => void;\r\n}\r\n\r\nexport default class Titlebar extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div className={this.props.blur ? 'titlebar blur' : 'titlebar'}>\r\n                    <div className='app-name' onClick={() => this.props.openHome()}>dojo</div>\r\n                    {this.props.actions}\r\n                    <img className='settings-icon' src={cog} title='about' alt='about' onClick={() => this.props.openAbout()} />\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Frankenstein from '../../utils/frankenstein';\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Monster, MonsterGroup } from '../../models/monster-group';\r\n\r\nimport FilterCard from '../cards/filter-card';\r\nimport MonsterCard from '../cards/monster-card';\r\nimport Note from '../panels/note';\r\n\r\ninterface Props {\r\n    monster: Monster;\r\n    library: MonsterGroup[];\r\n}\r\n\r\ninterface State {\r\n    monster: Monster;\r\n    filter: {\r\n        name: string,\r\n        challengeMin: number;\r\n        challengeMax: number;\r\n        category: string;\r\n        size: string;\r\n    };\r\n    selectedMonsters: Monster[];\r\n}\r\n\r\nexport default class RandomMonsterModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            monster: this.props.monster,\r\n            filter: {\r\n                name: '',\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: 'all types',\r\n                size: 'all sizes'\r\n            },\r\n            selectedMonsters: []\r\n        };\r\n    }\r\n\r\n    private generateMonster() {\r\n        Frankenstein.spliceMonsters(this.state.monster, this.state.selectedMonsters);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private changeFilterValue(type: 'name' | 'challengeMin' | 'challengeMax' | 'category' | 'size', value: any) {\r\n        // eslint-disable-next-line\r\n        this.state.filter[type] = value;\r\n        this.setState({\r\n            filter: this.state.filter\r\n        });\r\n    }\r\n\r\n    private nudgeFilterValue(type: 'challengeMin' | 'challengeMax', delta: number) {\r\n        const value = Utils.nudgeChallenge(this.state.filter[type], delta);\r\n        this.changeFilterValue(type, value);\r\n    }\r\n\r\n    private resetFilter() {\r\n        this.setState({\r\n            filter: {\r\n                name: '',\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: 'all types',\r\n                size: 'all sizes'\r\n            }\r\n        });\r\n    }\r\n\r\n    private matchMonster(monster: Monster) {\r\n        if (monster.challenge < this.state.filter.challengeMin) {\r\n            return false;\r\n        }\r\n\r\n        if (monster.challenge > this.state.filter.challengeMax) {\r\n            return false;\r\n        }\r\n\r\n        if (this.state.filter.name !== '') {\r\n            if (!Utils.match(this.state.filter.name, monster.name)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.filter.category !== 'all types') {\r\n            if (monster.category !== this.state.filter.category) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.filter.size !== 'all sizes') {\r\n            if (monster.size !== this.state.filter.size) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private selectMonster(monster: Monster) {\r\n        this.state.selectedMonsters.push(monster);\r\n        this.state.selectedMonsters.sort((a, b) => {\r\n            if (a.name < b.name) { return -1; }\r\n            if (a.name > b.name) { return 1; }\r\n            return 0;\r\n        });\r\n        this.setState({\r\n            selectedMonsters: this.state.selectedMonsters\r\n        });\r\n    }\r\n\r\n    private deselectMonster(monster: Monster) {\r\n        const index = this.state.selectedMonsters.indexOf(monster);\r\n        this.state.selectedMonsters.splice(index, 1);\r\n        this.setState({\r\n            selectedMonsters: this.state.selectedMonsters\r\n        });\r\n    }\r\n\r\n    private selectAll() {\r\n        this.props.library.forEach(group => {\r\n            group.monsters.forEach(monster => {\r\n                if (this.matchMonster(monster)) {\r\n                    this.state.selectedMonsters.push(monster);\r\n                }\r\n            });\r\n        });\r\n        this.state.selectedMonsters.sort((a, b) => {\r\n            if (a.name < b.name) { return -1; }\r\n            if (a.name > b.name) { return 1; }\r\n            return 0;\r\n        });\r\n        this.setState({\r\n            selectedMonsters: this.state.selectedMonsters\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const monsters: Monster[] = [];\r\n            this.props.library.forEach(group => {\r\n                group.monsters.forEach(monster => {\r\n                    if (this.matchMonster(monster)) {\r\n                        monsters.push(monster);\r\n                    }\r\n                });\r\n            });\r\n            monsters.sort((a, b) => {\r\n                if (a.name < b.name) { return -1; }\r\n                if (a.name > b.name) { return 1; }\r\n                return 0;\r\n            });\r\n            let allMonsters: JSX.Element | JSX.Element[] = monsters.filter(m => !this.state.selectedMonsters.includes(m)).map(m => {\r\n                return (\r\n                    <MonsterCard key={m.id} combatant={m} mode='view candidate' selectMonster={monster => this.selectMonster(monster)} />\r\n                );\r\n            });\r\n            if (allMonsters.length === 0) {\r\n                allMonsters = (\r\n                    <Note\r\n                        content={(\r\n                            <div className='section'>\r\n                                there are no monsters that match the above criteria (or you have already selected them all)\r\n                            </div>\r\n                        )}\r\n                    />\r\n                );\r\n            }\r\n\r\n            const selectedMonsters: JSX.Element | JSX.Element[] = this.state.selectedMonsters.map(m => {\r\n                return (\r\n                    <MonsterCard key={m.id} combatant={m} mode='view candidate selected' deselectMonster={monster => this.deselectMonster(monster)} />\r\n                );\r\n            });\r\n            let selectedMonstersInfo = null;\r\n            if (selectedMonsters.length < 2) {\r\n                selectedMonstersInfo = (\r\n                    <Note\r\n                        content={(\r\n                            <div>\r\n                                <div className='section'>\r\n                                    in order to generate a random monster, select at least two source monsters from the list on the left\r\n                                </div>\r\n                                <button onClick={() => this.selectAll()}>select all monsters</button>\r\n                            </div>\r\n                        )}\r\n                    />\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='random-monster-modal'>\r\n                    <div className='row' style={{ height: '100%' }}>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable'>\r\n                            <div className='heading'>all monsters</div>\r\n                            <FilterCard\r\n                                filter={this.state.filter}\r\n                                changeValue={(type, value) => this.changeFilterValue(type, value)}\r\n                                nudgeValue={(type, delta) => this.nudgeFilterValue(type, delta)}\r\n                                resetFilter={() => this.resetFilter()}\r\n                            />\r\n                            <div className='divider' />\r\n                            {allMonsters}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable'>\r\n                            <div className='heading'>selected monsters</div>\r\n                            <button\r\n                                className={this.state.selectedMonsters.length < 2 ? 'disabled' : ''}\r\n                                onClick={() => this.generateMonster()}\r\n                            >\r\n                                randomly generate monster\r\n                            </button>\r\n                            <div className='divider' />\r\n                            {selectedMonstersInfo}\r\n                            {selectedMonsters}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable'>\r\n                            <div className='heading'>output</div>\r\n                            <MonsterCard\r\n                                combatant={this.state.monster}\r\n                                mode='view generated'\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Factory from '../utils/factory';\r\nimport Frankenstein from '../utils/frankenstein';\r\nimport Utils from '../utils/utils';\r\n\r\nimport { Combat, Combatant, CombatSetup, Notification } from '../models/combat';\r\nimport { Condition } from '../models/condition';\r\nimport { Encounter, EncounterSlot, EncounterWave } from '../models/encounter';\r\nimport { Map, MapFolio } from '../models/map-folio';\r\nimport { Monster, MonsterGroup, Trait } from '../models/monster-group';\r\nimport { Party, PC } from '../models/party';\r\n\r\nimport CombatManagerScreen from './screens/combat-manager-screen';\r\nimport EncounterBuilderScreen from './screens/encounter-builder-screen';\r\nimport HomeScreen from './screens/home-screen';\r\nimport MapFoliosScreen from './screens/map-folios-screen';\r\nimport MonsterLibraryScreen from './screens/monster-library-screen';\r\nimport PartiesScreen from './screens/parties-screen';\r\n\r\nimport AboutModal from './modals/about-modal';\r\nimport CombatStartModal from './modals/combat-start-modal';\r\nimport ConditionModal from './modals/condition-modal';\r\nimport DemographicsModal from './modals/demographics-modal';\r\nimport MapEditorModal from './modals/map-editor-modal';\r\nimport MonsterEditorModal from './modals/monster-editor-modal';\r\n\r\nimport Navbar from './panels/navbar';\r\nimport Titlebar from './panels/titlebar';\r\n\r\nimport Checkbox from './controls/checkbox';\r\n\r\nimport close from '../resources/images/close-black.svg';\r\nimport RandomMonsterModal from './modals/random-monster-modal';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    // No props; this is the root component\r\n}\r\n\r\ninterface State {\r\n    view: string;\r\n    options: {\r\n        showHelp: boolean;\r\n    };\r\n\r\n    parties: Party[];\r\n    library: MonsterGroup[];\r\n    encounters: Encounter[];\r\n    mapFolios: MapFolio[];\r\n    combats: Combat[];\r\n\r\n    selectedPartyID: string | null;\r\n    selectedMonsterGroupID: string | null;\r\n    selectedEncounterID: string | null;\r\n    selectedMapFolioID: string | null;\r\n    selectedCombatID: string | null;\r\n\r\n    modal: any;\r\n\r\n    filter: string;\r\n}\r\n\r\nexport default class Dojo extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            view: 'home',\r\n            options: {\r\n                showHelp: true\r\n            },\r\n            parties: [],\r\n            library: [],\r\n            encounters: [],\r\n            mapFolios: [],\r\n            combats: [],\r\n            selectedPartyID: null,\r\n            selectedMonsterGroupID: null,\r\n            selectedEncounterID: null,\r\n            selectedMapFolioID: null,\r\n            selectedCombatID: null,\r\n            modal: null,\r\n            filter: ''\r\n        };\r\n\r\n        try {\r\n            let data: State | null = null;\r\n\r\n            try {\r\n                const json = window.localStorage.getItem('data');\r\n                if (json) {\r\n                    data = JSON.parse(json);\r\n                }\r\n            } catch (ex) {\r\n                console.error('Could not parse JSON: ', ex);\r\n                data = null;\r\n            }\r\n\r\n            if (data !== null) {\r\n                data.library.forEach(g => {\r\n                    g.monsters.forEach(m => {\r\n                        m.traits.forEach(t => {\r\n                            t.uses = 0;\r\n                        });\r\n                    });\r\n                });\r\n\r\n                data.encounters.forEach(enc => {\r\n                    if (!enc.waves) {\r\n                        enc.waves = [];\r\n                    }\r\n                });\r\n\r\n                if (!data.mapFolios) {\r\n                    data.mapFolios = [];\r\n                    data.selectedMapFolioID = null;\r\n                }\r\n\r\n                data.combats.forEach(combat => {\r\n                    if (!combat.notifications) {\r\n                        combat.notifications = [];\r\n                    }\r\n                    combat.combatants.forEach(c => {\r\n                        if (c.altitude === undefined) {\r\n                            c.altitude = 0;\r\n                        }\r\n\r\n                        if (c.type === 'monster') {\r\n                            const m = c as Combatant & Monster;\r\n                            m.traits.forEach(t => {\r\n                                if (t.uses === undefined) {\r\n                                    t.uses = 0;\r\n                                }\r\n                            });\r\n                        }\r\n                    });\r\n                });\r\n\r\n                data.view = 'home';\r\n                data.modal = null;\r\n                data.filter = '';\r\n\r\n                this.state = data;\r\n            }\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n\r\n    public componentDidUpdate() {\r\n        let json = null;\r\n        try {\r\n            json = JSON.stringify(this.state);\r\n        } catch (ex) {\r\n            console.error('Could not stringify data: ', ex);\r\n            json = null;\r\n        }\r\n\r\n        if (json !== null) {\r\n            window.localStorage.setItem('data', json);\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Party screen\r\n\r\n    private addParty() {\r\n        const party = Factory.createParty();\r\n        party.name = 'new party';\r\n        const parties: Party[] = ([] as Party[]).concat(this.state.parties, [party]);\r\n        Utils.sort(parties);\r\n        this.setState({\r\n            parties: parties,\r\n            selectedPartyID: party.id\r\n        });\r\n    }\r\n\r\n    private removeParty() {\r\n        const party = this.state.parties.find(p => p.id === this.state.selectedPartyID);\r\n        if (party) {\r\n            const index = this.state.parties.indexOf(party);\r\n            this.state.parties.splice(index, 1);\r\n            this.setState({\r\n                parties: this.state.parties,\r\n                selectedPartyID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private addPC() {\r\n        const party = this.state.parties.find(p => p.id === this.state.selectedPartyID);\r\n        if (party) {\r\n            const pc = Factory.createPC();\r\n            pc.name = 'new pc';\r\n            party.pcs.push(pc);\r\n            this.setState({\r\n                parties: this.state.parties\r\n            });\r\n        }\r\n    }\r\n\r\n    private removePC(pc: PC) {\r\n        const party = this.state.parties.find(p => p.id === this.state.selectedPartyID);\r\n        if (party) {\r\n            const index = party.pcs.indexOf(pc);\r\n            party.pcs.splice(index, 1);\r\n            this.setState({\r\n                parties: this.state.parties\r\n            });\r\n        }\r\n    }\r\n\r\n    private sortPCs() {\r\n        const party = this.state.parties.find(p => p.id === this.state.selectedPartyID);\r\n        if (party) {\r\n            Utils.sort(party.pcs);\r\n            this.setState({\r\n                parties: this.state.parties\r\n            });\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Library screen\r\n\r\n    private addMonsterGroup() {\r\n        const group = Factory.createMonsterGroup();\r\n        group.name = 'new group';\r\n        const library = ([] as MonsterGroup[]).concat(this.state.library, [group]);\r\n        Utils.sort(library);\r\n        this.setState({\r\n            library: library,\r\n            selectedMonsterGroupID: group.id\r\n        });\r\n    }\r\n\r\n    private removeMonsterGroup() {\r\n        const group = this.state.library.find(g => g.id === this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            const index = this.state.library.indexOf(group);\r\n            this.state.library.splice(index, 1);\r\n            this.setState({\r\n                library: this.state.library,\r\n                selectedMonsterGroupID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private addMonster() {\r\n        const monster = Factory.createMonster();\r\n        monster.name = 'new monster';\r\n        const group = this.state.library.find(g => g.id === this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            group.monsters.push(monster);\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    private generateMonster() {\r\n        const monster = Factory.createMonster();\r\n        monster.name = 'generated monster';\r\n        this.setState({\r\n            modal: {\r\n                type: 'random-monster',\r\n                monster: monster\r\n            }\r\n        });\r\n    }\r\n\r\n    private removeMonster(monster: Monster) {\r\n        const group = this.state.library.find(g => g.id === this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            const index = group.monsters.indexOf(monster);\r\n            group.monsters.splice(index, 1);\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    private sortMonsters() {\r\n        const group = this.state.library.find(g => g.id === this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            Utils.sort(group.monsters);\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    private moveToGroup(monster: Monster, groupID: string) {\r\n        const sourceGroup = this.state.library.find(group => group.monsters.includes(monster));\r\n        if (sourceGroup) {\r\n            const index = sourceGroup.monsters.indexOf(monster);\r\n            sourceGroup.monsters.splice(index, 1);\r\n\r\n            const group = this.state.library.find(g => g.id === groupID);\r\n            if (group) {\r\n                group.monsters.push(monster);\r\n                Utils.sort(group.monsters);\r\n\r\n                this.setState({\r\n                    library: this.state.library\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private editMonster(monster: Monster) {\r\n        const copy = JSON.parse(JSON.stringify(monster));\r\n        this.setState({\r\n            modal: {\r\n                type: 'monster',\r\n                monster: copy,\r\n                showMonsters: false\r\n            }\r\n        });\r\n    }\r\n\r\n    private saveMonster() {\r\n        const group = this.state.library.find(g => g.id === this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            const original = group.monsters.find(m => m.id === this.state.modal.monster.id);\r\n            if (original) {\r\n                // We are editing a monster\r\n                const index = group.monsters.indexOf(original);\r\n                group.monsters[index] = this.state.modal.monster;\r\n                this.setState({\r\n                    library: this.state.library,\r\n                    modal: null\r\n                });\r\n            } else {\r\n                // We are adding a new monster\r\n                group.monsters.push(this.state.modal.monster);\r\n                this.setState({\r\n                    library: this.state.library,\r\n                    modal: null\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private toggleShowSimilarMonsters() {\r\n        // eslint-disable-next-line\r\n        this.state.modal.showMonsters = !this.state.modal.showMonsters;\r\n        this.setState({\r\n            modal: this.state.modal\r\n        });\r\n    }\r\n\r\n    private openDemographics() {\r\n        this.setState({\r\n            modal: {\r\n                type: 'demographics'\r\n            }\r\n        });\r\n    }\r\n\r\n    private cloneMonster(monster: Monster, name: string) {\r\n        const group = this.state.library.find(g => g.monsters.includes(monster));\r\n        if (group) {\r\n            const clone = Frankenstein.clone(monster, name);\r\n            group.monsters.push(clone);\r\n            Utils.sort(group.monsters);\r\n\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    private addOpenGameContent() {\r\n        fetch('./data/monsters.json')\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                json.forEach((data: any) => {\r\n                    try {\r\n                        if (data.name) {\r\n                            const monster = Frankenstein.createFromJSON(data);\r\n\r\n                            let groupName = monster.tag || monster.category;\r\n                            if (groupName.indexOf('swarm') === 0) {\r\n                                groupName = 'swarm';\r\n                            }\r\n                            if (groupName === 'any race') {\r\n                                groupName = 'npc';\r\n                            }\r\n\r\n                            let group = this.state.library.find(p => p.name === groupName);\r\n                            if (!group) {\r\n                                group = {\r\n                                    id: Utils.guid(),\r\n                                    name: groupName,\r\n                                    monsters: []\r\n                                };\r\n                                this.state.library.push(group);\r\n                            }\r\n                            group.monsters.push(monster);\r\n                        }\r\n                    } catch (e) {\r\n                        console.error(e);\r\n                    }\r\n                });\r\n\r\n                Utils.sort(this.state.library);\r\n\r\n                this.setState({\r\n                    view: 'library',\r\n                    library: this.state.library\r\n                });\r\n            });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Encounter screen\r\n\r\n    private addEncounter() {\r\n        const encounter = Factory.createEncounter();\r\n        encounter.name = 'new encounter';\r\n        const encounters = ([] as Encounter[]).concat(this.state.encounters, [encounter]);\r\n        Utils.sort(encounters);\r\n\r\n        this.setState({\r\n            encounters: encounters,\r\n            selectedEncounterID: encounter.id\r\n        });\r\n    }\r\n\r\n    private removeEncounter() {\r\n        const encounter = this.state.encounters.find(e => e.id === this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            const index = this.state.encounters.indexOf(encounter);\r\n            this.state.encounters.splice(index, 1);\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters,\r\n                selectedEncounterID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private addEncounterSlot(monster: Monster, waveID: string | null) {\r\n        const group = this.state.library.find(g => g.monsters.includes(monster));\r\n        if (group) {\r\n            const slot = Factory.createEncounterSlot();\r\n            slot.monsterGroupName = group.name;\r\n            slot.monsterName = monster.name;\r\n            const encounter = this.state.encounters.find(e => e.id === this.state.selectedEncounterID);\r\n            if (encounter) {\r\n                if (waveID !== null) {\r\n                    const wave = encounter.waves.find(w => w.id === waveID);\r\n                    if (wave) {\r\n                        wave.slots.push(slot);\r\n                        this.sortEncounterSlots(wave);\r\n                    }\r\n                } else {\r\n                    encounter.slots.push(slot);\r\n                    this.sortEncounterSlots(encounter);\r\n                }\r\n\r\n                this.setState({\r\n                    encounters: this.state.encounters\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeEncounterSlot(slot: EncounterSlot, waveID: string | null) {\r\n        const encounter = this.state.encounters.find(e => e.id === this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            if (waveID) {\r\n                const wave = encounter.waves.find(w => w.id === waveID);\r\n                if (wave) {\r\n                    const index = wave.slots.indexOf(slot);\r\n                    wave.slots.splice(index, 1);\r\n                }\r\n            } else {\r\n                const n = encounter.slots.indexOf(slot);\r\n                encounter.slots.splice(n, 1);\r\n            }\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters\r\n            });\r\n        }\r\n    }\r\n\r\n    private sortEncounterSlots(slotContainer: { slots: EncounterSlot[] }) {\r\n        slotContainer.slots.sort((a, b) => {\r\n            const aName = a.monsterName.toLowerCase();\r\n            const bName = b.monsterName.toLowerCase();\r\n            if (aName < bName) { return -1; }\r\n            if (aName > bName) { return 1; }\r\n            return 0;\r\n        });\r\n    }\r\n\r\n    private addWaveToEncounter() {\r\n        const encounter = this.state.encounters.find(e => e.id === this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            const wave = Factory.createEncounterWave();\r\n            wave.name = 'wave ' + (encounter.waves.length + 2);\r\n            encounter.waves.push(wave);\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters\r\n            });\r\n        }\r\n    }\r\n\r\n    private removeWave(wave: EncounterWave) {\r\n        const encounter = this.state.encounters.find(e => e.id === this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            const index = encounter.waves.indexOf(wave);\r\n            encounter.waves.splice(index, 1);\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters\r\n            });\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Map screen\r\n\r\n    private addMapFolio() {\r\n        const folio = Factory.createMapFolio();\r\n        folio.name = 'new folio';\r\n        const folios = ([] as MapFolio[]).concat(this.state.mapFolios, [folio]);\r\n        Utils.sort(folios);\r\n\r\n        this.setState({\r\n            mapFolios: folios,\r\n            selectedMapFolioID: folio.id\r\n        });\r\n    }\r\n\r\n    private removeMapFolio() {\r\n        const folio = this.state.mapFolios.find(f => f.id === this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            const index = this.state.mapFolios.indexOf(folio);\r\n            this.state.mapFolios.splice(index, 1);\r\n\r\n            this.setState({\r\n                mapFolios: this.state.mapFolios,\r\n                selectedMapFolioID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private addMap() {\r\n        const folio = this.state.mapFolios.find(f => f.id === this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            const map = Factory.createMap();\r\n            map.name = 'new map';\r\n            folio.maps.push(map);\r\n\r\n            this.setState({\r\n                mapFolios: this.state.mapFolios\r\n            });\r\n        }\r\n    }\r\n\r\n    private editMap(map: Map) {\r\n        const copy = JSON.parse(JSON.stringify(map));\r\n        this.setState({\r\n            modal: {\r\n                type: 'map',\r\n                map: copy\r\n            }\r\n        });\r\n    }\r\n\r\n    private saveMap() {\r\n        const folio = this.state.mapFolios.find(f => f.id === this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            const original = folio.maps.find(m => m.id === this.state.modal.map.id);\r\n            if (original) {\r\n                const index = folio.maps.indexOf(original);\r\n                folio.maps[index] = this.state.modal.map;\r\n                this.setState({\r\n                    mapFolios: this.state.mapFolios,\r\n                    modal: null\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeMap(map: Map) {\r\n        const folio = this.state.mapFolios.find(f => f.id === this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            const index = folio.maps.indexOf(map);\r\n            folio.maps.splice(index, 1);\r\n            this.setState({\r\n                mapFolios: this.state.mapFolios\r\n            });\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Combat screen\r\n\r\n    private createCombat() {\r\n        const party = this.state.parties.length === 1 ? this.state.parties[0] : null;\r\n        const encounter = this.state.encounters.length === 1 ? this.state.encounters[0] : null;\r\n\r\n        const setup = Factory.createCombatSetup();\r\n        setup.partyID = party ? party.id : null;\r\n        setup.encounterID = encounter ? encounter.id : null;\r\n        if (encounter) {\r\n            setup.monsterNames = Utils.getMonsterNames(encounter);\r\n        }\r\n\r\n        this.setState({\r\n            modal: {\r\n                type: 'combat-start',\r\n                combatSetup: setup\r\n            }\r\n        });\r\n    }\r\n\r\n    private startCombat() {\r\n        const combatSetup: CombatSetup = this.state.modal.combatSetup;\r\n        const party = this.state.parties.find(p => p.id === combatSetup.partyID);\r\n        const encounter = this.state.encounters.find(e => e.id === combatSetup.encounterID);\r\n        if (party && encounter) {\r\n            const partyName = party.name || 'unnamed party';\r\n            const encounterName = encounter.name || 'unnamed encounter';\r\n\r\n            const combat = Factory.createCombat();\r\n            combat.name = partyName + ' vs ' + encounterName;\r\n            combat.encounterID = encounter.id;\r\n\r\n            // Add a copy of each PC to the encounter\r\n            party.pcs.filter(pc => pc.active).forEach(pc => {\r\n                const combatant = JSON.parse(JSON.stringify(pc));\r\n\r\n                combatant.current = false;\r\n                combatant.pending = true;\r\n                combatant.active = false;\r\n                combatant.defeated = false;\r\n\r\n                combatant.displayName = pc.name;\r\n                combatant.initiative = 10;\r\n                combatant.hp = null;\r\n                combatant.conditions = [];\r\n                combatant.altitude = 0;\r\n\r\n                combat.combatants.push(combatant);\r\n            });\r\n\r\n            encounter.slots.forEach(slot => {\r\n                const monster = this.getMonster(slot.monsterName, slot.monsterGroupName);\r\n                if (monster) {\r\n                    const init = parseInt(Utils.modifier(monster.abilityScores.dex), 10);\r\n                    const groupRoll = Utils.dieRoll();\r\n\r\n                    for (let n = 0; n !== slot.count; ++n) {\r\n                        const singleRoll = Utils.dieRoll();\r\n\r\n                        const combatant = JSON.parse(JSON.stringify(monster));\r\n                        combatant.id = Utils.guid();\r\n\r\n                        combatant.displayName = null;\r\n                        if (combatSetup.monsterNames) {\r\n                            const slotNames = combatSetup.monsterNames.find(names => names.id === slot.id);\r\n                            if (slotNames) {\r\n                                combatant.displayName = slotNames.names[n];\r\n                            }\r\n                        }\r\n\r\n                        switch (combatSetup.encounterInitMode) {\r\n                            case 'manual':\r\n                                combatant.initiative = 10;\r\n                                break;\r\n                            case 'group':\r\n                                combatant.initiative = init + groupRoll;\r\n                                break;\r\n                            case 'individual':\r\n                                combatant.initiative = init + singleRoll;\r\n                                break;\r\n                            default:\r\n                                // Do nothing\r\n                                break;\r\n                        }\r\n\r\n                        combatant.current = false;\r\n                        combatant.pending = (combatSetup.encounterInitMode === 'manual');\r\n                        combatant.active = (combatSetup.encounterInitMode !== 'manual');\r\n                        combatant.defeated = false;\r\n\r\n                        combatant.hp = combatant.hpMax;\r\n                        combatant.conditions = [];\r\n                        combatant.altitude = 0;\r\n\r\n                        combat.combatants.push(combatant);\r\n                    }\r\n                } else {\r\n                    combat.issues.push('unknown monster: ' + slot.monsterName + ' in group ' + slot.monsterGroupName);\r\n                }\r\n            });\r\n\r\n            combat.combatants.forEach(c => c.altitude = 0);\r\n\r\n            this.sortCombatants(combat);\r\n\r\n            if (combatSetup.folioID && combatSetup.mapID) {\r\n                const folio = this.state.mapFolios.find(f => f.id === combatSetup.folioID);\r\n                if (folio) {\r\n                    const map = folio.maps.find(m => m.id === combatSetup.mapID);\r\n                    if (map) {\r\n                        combat.map = JSON.parse(JSON.stringify(map));\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.setState({\r\n                combats: ([] as Combat[]).concat(this.state.combats, [combat]),\r\n                selectedCombatID: combat.id,\r\n                modal: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private openWaveModal() {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            const encounter = this.state.encounters.find(e => e.id === combat.encounterID);\r\n            if (encounter) {\r\n                const setup = Factory.createCombatSetup();\r\n                setup.encounterID = combat.encounterID;\r\n                setup.monsterNames = Utils.getMonsterNames(encounter);\r\n\r\n                this.setState({\r\n                    modal: {\r\n                        type: 'combat-wave',\r\n                        combatSetup: setup\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private pauseCombat() {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            combat.timestamp = new Date().toLocaleString();\r\n            this.setState({\r\n                combats: this.state.combats,\r\n                selectedCombatID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private resumeCombat(combat: Combat) {\r\n        this.setState({\r\n            selectedCombatID: combat.id\r\n        });\r\n    }\r\n\r\n    private endCombat() {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            const index = this.state.combats.indexOf(combat);\r\n            this.state.combats.splice(index, 1);\r\n            this.setState({\r\n                combats: this.state.combats,\r\n                selectedCombatID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private makeCurrent(combatant: (Combatant & PC) | (Combatant & Monster) | null, newRound: boolean) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            // Handle start-of-turn conditions\r\n            combat.combatants.filter(actor => actor.conditions).forEach(actor => {\r\n                actor.conditions.forEach(c => {\r\n                    if (c.duration) {\r\n                        switch (c.duration.type) {\r\n                            case 'saves':\r\n                                // If it's my condition, and point is START, notify the user\r\n                                if (combat && combatant && (actor.id === combatant.id) && (c.duration.point === 'start')) {\r\n                                    combat.notifications.push({\r\n                                        id: Utils.guid(),\r\n                                        type: 'condition-save',\r\n                                        data: c,\r\n                                        combatant: combatant as Combatant & Monster\r\n                                    });\r\n                                }\r\n                                break;\r\n                            case 'combatant':\r\n                                // If this refers to me, and point is START, remove it\r\n                                if (combat && combatant && (c.duration.combatantID === combatant.id) && (c.duration.point === 'start')) {\r\n                                    const index = actor.conditions.indexOf(c);\r\n                                    actor.conditions.splice(index, 1);\r\n                                    // Notify the user\r\n                                    combat.notifications.push({\r\n                                        id: Utils.guid(),\r\n                                        type: 'condition-end',\r\n                                        data: c,\r\n                                        combatant: combatant as Combatant & Monster\r\n                                    });\r\n                                }\r\n                                break;\r\n                            case 'rounds':\r\n                                // If it's my condition, decrement the condition\r\n                                if (combatant && (actor.id === combatant.id)) {\r\n                                    c.duration.count -= 1;\r\n                                }\r\n                                // If it's now at 0, remove it\r\n                                if (c.duration.count === 0) {\r\n                                    const n = actor.conditions.indexOf(c);\r\n                                    actor.conditions.splice(n, 1);\r\n                                    if (combat) {\r\n                                        // Notify the user\r\n                                        combat.notifications.push({\r\n                                            id: Utils.guid(),\r\n                                            type: 'condition-end',\r\n                                            data: c,\r\n                                            combatant: combatant as Combatant & Monster\r\n                                        });\r\n                                    }\r\n                                }\r\n                                break;\r\n                            default:\r\n                                // Do nothing\r\n                                break;\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n\r\n            // Handle recharging traits\r\n            if (combatant && (combatant.type === 'monster')) {\r\n                (combatant as Monster).traits\r\n                    .filter(t => (t.uses > 0) && t.usage.toLowerCase().startsWith('recharge '))\r\n                    .forEach(t => {\r\n                        combat.notifications.push({\r\n                            id: Utils.guid(),\r\n                            type: 'trait-recharge',\r\n                            data: t,\r\n                            combatant: combatant as Combatant & Monster\r\n                        });\r\n                    });\r\n            }\r\n\r\n            combat.combatants.forEach(c => {\r\n                c.current = false;\r\n            });\r\n            if (combatant) {\r\n                combatant.current = true;\r\n            }\r\n\r\n            if (newRound) {\r\n                combat.round += 1;\r\n            }\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private makeActive(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            combatant.pending = false;\r\n            combatant.active = true;\r\n            combatant.defeated = false;\r\n\r\n            this.sortCombatants(combat);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private makeDefeated(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        combatant.pending = false;\r\n        combatant.active = false;\r\n        combatant.defeated = true;\r\n\r\n        if (combatant.current) {\r\n            this.endTurn(combatant);\r\n        } else {\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private addWaveToCombat() {\r\n        const combatSetup: CombatSetup = this.state.modal.combatSetup;\r\n        const encounter = this.state.encounters.find(e => e.id === combatSetup.encounterID);\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combatSetup && encounter && combat) {\r\n            const wave = encounter.waves.find(w => w.id === combatSetup.waveID);\r\n            if (wave) {\r\n                wave.slots.forEach(slot => {\r\n                    const monster = this.getMonster(slot.monsterName, slot.monsterGroupName);\r\n                    if (monster) {\r\n                        const init = parseInt(Utils.modifier(monster.abilityScores.dex), 10);\r\n                        const groupRoll = Utils.dieRoll();\r\n\r\n                        for (let n = 0; n !== slot.count; ++n) {\r\n                            const singleRoll = Utils.dieRoll();\r\n\r\n                            const combatant = JSON.parse(JSON.stringify(monster));\r\n                            combatant.id = Utils.guid();\r\n\r\n                            combatant.displayName = null;\r\n                            if (combatSetup.monsterNames) {\r\n                                const slotNames = combatSetup.monsterNames.find(names => names.id === slot.id);\r\n                                if (slotNames) {\r\n                                    combatant.displayName = slotNames.names[n];\r\n                                }\r\n                            }\r\n\r\n                            switch (combatSetup.encounterInitMode) {\r\n                                case 'manual':\r\n                                    combatant.initiative = 10;\r\n                                    break;\r\n                                case 'group':\r\n                                    combatant.initiative = init + groupRoll;\r\n                                    break;\r\n                                case 'individual':\r\n                                    combatant.initiative = init + singleRoll;\r\n                                    break;\r\n                                default:\r\n                                    // Do nothing\r\n                                    break;\r\n                            }\r\n\r\n                            combatant.current = false;\r\n                            combatant.pending = (this.state.modal.combatSetup.encounterInitMode === 'manual');\r\n                            combatant.active = (this.state.modal.combatSetup.encounterInitMode !== 'manual');\r\n                            combatant.defeated = false;\r\n\r\n                            combatant.hp = combatant.hpMax;\r\n                            combatant.conditions = [];\r\n\r\n                            if (combat) {\r\n                                combat.combatants.push(combatant);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (combat) {\r\n                            const issue = 'unknown monster: ' + slot.monsterName + ' in group ' + slot.monsterGroupName;\r\n                            combat.issues.push(issue);\r\n                        }\r\n                    }\r\n                });\r\n\r\n                this.sortCombatants(combat);\r\n\r\n                this.setState({\r\n                    combats: this.state.combats,\r\n                    modal: null\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeCombatant(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            const index = combat.combatants.indexOf(combatant);\r\n            combat.combatants.splice(index, 1);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private mapAdd(combatant: ((Combatant & PC) | (Combatant & Monster)), x: number, y: number) {\r\n        const item = Factory.createMapItem();\r\n        item.id = combatant.id;\r\n        item.type = combatant.type as 'pc' | 'monster';\r\n        item.x = x;\r\n        item.y = y;\r\n        let size = 1;\r\n        if (combatant.type === 'monster') {\r\n            size = Utils.miniSize((combatant as Monster).size);\r\n        }\r\n        item.height = size;\r\n        item.width = size;\r\n\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat && combat.map) {\r\n            combat.map.items.push(item);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private mapMove(combatant: (Combatant & PC) | (Combatant & Monster), dir: string) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat && combat.map) {\r\n            const item = combat.map.items.find(i => i.id === combatant.id);\r\n            if (item) {\r\n                switch (dir) {\r\n                    case 'N':\r\n                        item.y -= 1;\r\n                        break;\r\n                    case 'NE':\r\n                        item.x += 1;\r\n                        item.y -= 1;\r\n                        break;\r\n                    case 'E':\r\n                        item.x += 1;\r\n                        break;\r\n                    case 'SE':\r\n                        item.x += 1;\r\n                        item.y += 1;\r\n                        break;\r\n                    case 'S':\r\n                        item.y += 1;\r\n                        break;\r\n                    case 'SW':\r\n                        item.x -= 1;\r\n                        item.y += 1;\r\n                        break;\r\n                    case 'W':\r\n                        item.x -= 1;\r\n                        break;\r\n                    case 'NW':\r\n                        item.x -= 1;\r\n                        item.y -= 1;\r\n                        break;\r\n                    default:\r\n                        // Do nothing\r\n                        break;\r\n                }\r\n\r\n                this.setState({\r\n                    combats: this.state.combats\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private mapRemove(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat && combat.map) {\r\n            const item = combat.map.items.find(i => i.id === combatant.id);\r\n            if (item) {\r\n                const index = combat.map.items.indexOf(item);\r\n                combat.map.items.splice(index, 1);\r\n\r\n                this.setState({\r\n                    combats: this.state.combats\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private endTurn(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            // Handle end-of-turn conditions\r\n            combat.combatants.filter(actor => actor.conditions).forEach(actor => {\r\n                actor.conditions.forEach(c => {\r\n                    if (c.duration) {\r\n                        switch (c.duration.type) {\r\n                            case 'saves':\r\n                                // If it's my condition, and point is END, notify the user\r\n                                if (combat && (actor.id === combatant.id) && (c.duration.point === 'end')) {\r\n                                    const saveNotification = Factory.createNotification();\r\n                                    saveNotification.type = 'condition-save';\r\n                                    saveNotification.data = c;\r\n                                    saveNotification.combatant = combatant as Combatant & Monster;\r\n                                    combat.notifications.push(saveNotification);\r\n                                }\r\n                                break;\r\n                            case 'combatant':\r\n                                // If this refers to me, and point is END, remove it\r\n                                if (combat && (c.duration.combatantID === combatant.id) && (c.duration.point === 'end')) {\r\n                                    const n = actor.conditions.indexOf(c);\r\n                                    actor.conditions.splice(n, 1);\r\n                                    // Notify the user\r\n                                    const endNotification = Factory.createNotification();\r\n                                    endNotification.type = 'condition-end';\r\n                                    endNotification.data = c;\r\n                                    endNotification.combatant = combatant as Combatant & Monster;\r\n                                    combat.notifications.push(endNotification);\r\n                                }\r\n                                break;\r\n                            case 'rounds':\r\n                                // We check this at the beginning of each turn, not at the end\r\n                                break;\r\n                            default:\r\n                                // Do nothing\r\n                                break;\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n\r\n            const active = combat.combatants.filter(c => {\r\n                return c.current || (!c.pending && c.active && !c.defeated);\r\n            });\r\n            if (active.length === 0) {\r\n                // There's no-one left in the fight\r\n                this.makeCurrent(null, false);\r\n            } else if ((active.length === 1) && (active[0].defeated)) {\r\n                // The only person in the fight is me, and I'm defeated\r\n                this.makeCurrent(null, false);\r\n            } else {\r\n                let index = active.indexOf(combatant) + 1;\r\n                let newRound = false;\r\n                if (index >= active.length) {\r\n                    index = 0;\r\n                    newRound = true;\r\n                }\r\n                this.makeCurrent(active[index], newRound);\r\n            }\r\n        }\r\n    }\r\n\r\n    private changeHP(combatant: Combatant & Monster, hp: number, temp: number) {\r\n        combatant.hp = hp;\r\n        combatant.hpTemp = temp;\r\n\r\n        this.setState({\r\n            combats: this.state.combats\r\n        });\r\n    }\r\n\r\n    private addCondition(combatant: Combatant & Monster) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            const condition = Factory.createCondition();\r\n            condition.name = 'blinded';\r\n\r\n            this.setState({\r\n                modal: {\r\n                    type: 'condition-add',\r\n                    condition: condition,\r\n                    combatant: combatant,\r\n                    combat: combat\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private addConditionFromModal() {\r\n        this.state.modal.combatant.conditions.push(this.state.modal.condition);\r\n\r\n        this.setState({\r\n            combats: this.state.combats,\r\n            modal: null\r\n        });\r\n    }\r\n\r\n    private editCondition(combatant: Combatant & Monster, condition: Condition) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            this.setState({\r\n                modal: {\r\n                    type: 'condition-edit',\r\n                    condition: condition,\r\n                    combatant: combatant,\r\n                    combat: combat\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private editConditionFromModal() {\r\n        const conditions: Condition[] = this.state.modal.combatant.conditions;\r\n        const original = conditions.find(c => c.id === this.state.modal.condition.id);\r\n        if (original) {\r\n            const index = conditions.indexOf(original);\r\n            // eslint-disable-next-line\r\n            conditions[index] = this.state.modal.condition;\r\n\r\n            this.setState({\r\n                combats: this.state.combats,\r\n                modal: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private removeCondition(combatant: Combatant & Monster, conditionID: string) {\r\n        const condition = combatant.conditions.find(c => c.id === conditionID);\r\n        if (condition) {\r\n            const index = combatant.conditions.indexOf(condition);\r\n            combatant.conditions.splice(index, 1);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private sortCombatants(combat: Combat) {\r\n        combat.combatants.sort((a, b) => {\r\n            // First sort by initiative, descending\r\n            if (a.initiative && b.initiative && (a.initiative < b.initiative)) { return 1; }\r\n            if (a.initiative && b.initiative && (a.initiative > b.initiative)) { return -1; }\r\n            // Then sort by name, ascending\r\n            if (a.name < b.name) { return -1; }\r\n            if (a.name > b.name) { return 1; }\r\n            return 0;\r\n        });\r\n    }\r\n\r\n    private closeNotification(notification: Notification, removeCondition: boolean) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            const index = combat.notifications.indexOf(notification);\r\n            combat.notifications.splice(index, 1);\r\n\r\n            if (removeCondition && notification.combatant && notification.data) {\r\n                const conditionIndex = notification.combatant.conditions.indexOf(notification.data as Condition);\r\n                notification.combatant.conditions.splice(conditionIndex, 1);\r\n            }\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    private setView(view: string) {\r\n        this.setState({\r\n            view: view\r\n        });\r\n    }\r\n\r\n    private openAbout() {\r\n        this.setState({\r\n            modal: {\r\n                type: 'about'\r\n            }\r\n        });\r\n    }\r\n\r\n    private closeModal() {\r\n        this.setState({\r\n            modal: null\r\n        });\r\n    }\r\n\r\n    private selectParty(party: Party | null) {\r\n        this.setState({\r\n            selectedPartyID: party ? party.id : null\r\n        });\r\n    }\r\n\r\n    private selectMonsterGroup(group: MonsterGroup | null) {\r\n        this.setState({\r\n            selectedMonsterGroupID: group ? group.id : null\r\n        });\r\n    }\r\n\r\n    private selectEncounter(encounter: Encounter | null) {\r\n        this.setState({\r\n            selectedEncounterID: encounter ? encounter.id : null\r\n        });\r\n    }\r\n\r\n    private selectMapFolio(mapFolio: MapFolio | null) {\r\n        this.setState({\r\n            selectedMapFolioID: mapFolio ? mapFolio.id : null\r\n        });\r\n    }\r\n\r\n    private resetAll() {\r\n        this.setState({\r\n            parties: [],\r\n            selectedPartyID: null,\r\n            library: [],\r\n            selectedMonsterGroupID: null,\r\n            encounters: [],\r\n            selectedEncounterID: null,\r\n            mapFolios: [],\r\n            selectedMapFolioID: null,\r\n            combats: [],\r\n            selectedCombatID: null\r\n        });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    private getMonster(monsterName: string, groupName: string) {\r\n        const group = this.state.library.find(p => p.name === groupName);\r\n        if (group) {\r\n            return group.monsters.find(monster => monster.name === monsterName);\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    private changeValue(combatant: any, type: string, value: any) {\r\n        switch (type) {\r\n            case 'hp':\r\n                value = Math.min(value, combatant.hpMax);\r\n                value = Math.max(value, 0);\r\n                break;\r\n            case 'hpTemp':\r\n                value = Math.max(value, 0);\r\n                break;\r\n            case 'level':\r\n                value = Math.max(value, 1);\r\n                value = (combatant.player !== undefined) ? Math.min(value, 20) : Math.min(value, 6);\r\n                break;\r\n            case 'count':\r\n                value = Math.max(value, 1);\r\n                break;\r\n            case 'hitDice':\r\n                value = Math.max(value, 1);\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        const tokens = type.split('.');\r\n        let obj = combatant;\r\n        for (let n = 0; n !== tokens.length; ++n) {\r\n            const token = tokens[n];\r\n            if (n === tokens.length - 1) {\r\n                obj[token] = value;\r\n            } else {\r\n                obj = obj[token];\r\n            }\r\n        }\r\n\r\n        Utils.sort(this.state.parties);\r\n        Utils.sort(this.state.library);\r\n        Utils.sort(this.state.encounters);\r\n\r\n        if (type === 'initiative') {\r\n            if (!(combatant as Combatant).pending) {\r\n                const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n                this.sortCombatants(combat as Combat);\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            parties: this.state.parties,\r\n            library: this.state.library,\r\n            encounters: this.state.encounters,\r\n            combats: this.state.combats,\r\n            selectedPartyID: this.state.selectedPartyID,\r\n            selectedMonsterGroupID: this.state.selectedMonsterGroupID,\r\n            selectedEncounterID: this.state.selectedEncounterID,\r\n            selectedCombatID: this.state.selectedCombatID,\r\n            options: this.state.options,\r\n            modal: this.state.modal\r\n        });\r\n    }\r\n\r\n    private nudgeValue(combatant: any, type: string, delta: number) {\r\n        const tokens = type.split('.');\r\n        let obj = combatant;\r\n        for (let n = 0; n !== tokens.length; ++n) {\r\n            const token = tokens[n];\r\n            if (n === tokens.length - 1) {\r\n                let value = null;\r\n                value = (token === 'challenge') ? Utils.nudgeChallenge(obj.challenge, delta) : obj[token] + delta;\r\n                this.changeValue(combatant, type, value);\r\n            } else {\r\n                obj = obj[token];\r\n            }\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    private getActions() {\r\n        switch (this.state.view) {\r\n            case 'parties':\r\n            case 'encounter':\r\n            case 'maps':\r\n                return (\r\n                    <div className='actions'>\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='search'\r\n                                value={this.state.filter}\r\n                                onChange={event => this.changeValue(this.state, 'filter', event.target.value)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                );\r\n            case 'library':\r\n                return (\r\n                    <div className='actions'>\r\n                        <div className='section'>\r\n                            <button onClick={() => this.openDemographics()}>demographics</button>\r\n                        </div>\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='search'\r\n                                value={this.state.filter}\r\n                                onChange={event => this.changeValue(this.state, 'filter', event.target.value)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                );\r\n            case 'combat':\r\n                const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n                if (combat) {\r\n                    const encounter = this.state.encounters.find(e => e.id === combat.encounterID);\r\n                    if (encounter) {\r\n                        let xp = 0;\r\n                        combat.combatants.filter(c => c.type === 'monster')\r\n                            .forEach(combatant => {\r\n                                xp += Utils.experience((combatant as Combatant & Monster).challenge);\r\n                            });\r\n\r\n                        return (\r\n                            <div className='actions'>\r\n                                <div className='section'>\r\n                                    <div className='text'>round: {combat.round}</div>\r\n                                </div>\r\n                                <div className='section'>\r\n                                    <div className='text'>xp: {xp}</div>\r\n                                </div>\r\n                                <div className='section' style={{ display: encounter.waves.length === 0 ? 'none' : ''}}>\r\n                                    <button onClick={() => this.openWaveModal()}>add wave</button>\r\n                                </div>\r\n                                <div className='section'>\r\n                                    <button onClick={() => this.pauseCombat()}>pause encounter</button>\r\n                                </div>\r\n                                <div className='section'>\r\n                                    <button onClick={() => this.endCombat()}>end encounter</button>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    }\r\n                } else {\r\n                    return (\r\n                        <div className='actions'>\r\n                            <div className='section'>\r\n                                <input\r\n                                    type='text'\r\n                                    placeholder='search'\r\n                                    value={this.state.filter}\r\n                                    onChange={event => this.changeValue(this.state, 'filter', event.target.value)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private getContent() {\r\n        switch (this.state.view) {\r\n            case 'home':\r\n                return (\r\n                    <HomeScreen\r\n                        library={this.state.library}\r\n                        addOpenGameContent={() => this.addOpenGameContent()}\r\n                    />\r\n                );\r\n            case 'parties':\r\n                return (\r\n                    <PartiesScreen\r\n                        parties={this.state.parties}\r\n                        selection={this.state.parties.find(p => p.id === this.state.selectedPartyID) || null}\r\n                        filter={this.state.filter}\r\n                        showHelp={this.state.options.showHelp}\r\n                        selectParty={party => this.selectParty(party)}\r\n                        addParty={() => this.addParty()}\r\n                        removeParty={() => this.removeParty()}\r\n                        addPC={() => this.addPC()}\r\n                        removePC={pc => this.removePC(pc)}\r\n                        sortPCs={() => this.sortPCs()}\r\n                        changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                        nudgeValue={(combatant, type, delta) => this.nudgeValue(combatant, type, delta)}\r\n                    />\r\n                );\r\n            case 'library':\r\n                return (\r\n                    <MonsterLibraryScreen\r\n                        library={this.state.library}\r\n                        selection={this.state.library.find(g => g.id === this.state.selectedMonsterGroupID) || null}\r\n                        filter={this.state.filter}\r\n                        showHelp={this.state.options.showHelp}\r\n                        selectMonsterGroup={group => this.selectMonsterGroup(group)}\r\n                        addMonsterGroup={() => this.addMonsterGroup()}\r\n                        removeMonsterGroup={() => this.removeMonsterGroup()}\r\n                        addMonster={() => this.addMonster()}\r\n                        generateMonster={() => this.generateMonster()}\r\n                        removeMonster={monster => this.removeMonster(monster)}\r\n                        sortMonsters={() => this.sortMonsters()}\r\n                        changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                        nudgeValue={(combatant, type, delta) => this.nudgeValue(combatant, type, delta)}\r\n                        editMonster={combatant => this.editMonster(combatant)}\r\n                        cloneMonster={(combatant, name) => this.cloneMonster(combatant, name)}\r\n                        moveToGroup={(combatant, groupID) => this.moveToGroup(combatant, groupID)}\r\n                    />\r\n                );\r\n            case 'encounter':\r\n                return (\r\n                    <EncounterBuilderScreen\r\n                        encounters={this.state.encounters}\r\n                        selection={this.state.encounters.find(e => e.id === this.state.selectedEncounterID) || null}\r\n                        filter={this.state.filter}\r\n                        parties={this.state.parties}\r\n                        library={this.state.library}\r\n                        showHelp={this.state.options.showHelp}\r\n                        selectEncounter={encounter => this.selectEncounter(encounter)}\r\n                        addEncounter={() => this.addEncounter()}\r\n                        removeEncounter={() => this.removeEncounter()}\r\n                        addWave={() => this.addWaveToEncounter()}\r\n                        removeWave={wave => this.removeWave(wave)}\r\n                        getMonster={(monsterName, groupName) => this.getMonster(monsterName, groupName) || null}\r\n                        addEncounterSlot={(monster, waveID) => this.addEncounterSlot(monster, waveID)}\r\n                        removeEncounterSlot={(slot, waveID) => this.removeEncounterSlot(slot, waveID)}\r\n                        nudgeValue={(slot, type, delta) => this.nudgeValue(slot, type, delta)}\r\n                        changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                    />\r\n                );\r\n            case 'maps':\r\n                return (\r\n                    <MapFoliosScreen\r\n                        mapFolios={this.state.mapFolios}\r\n                        selection={this.state.mapFolios.find(f => f.id === this.state.selectedMapFolioID) || null}\r\n                        filter={this.state.filter}\r\n                        showHelp={this.state.options.showHelp}\r\n                        selectMapFolio={folio => this.selectMapFolio(folio)}\r\n                        addMapFolio={() => this.addMapFolio()}\r\n                        removeMapFolio={() => this.removeMapFolio()}\r\n                        addMap={() => this.addMap()}\r\n                        editMap={map => this.editMap(map)}\r\n                        removeMap={map => this.removeMap(map)}\r\n                        changeValue={(source, type, value) => this.changeValue(source, type, value)}\r\n                    />\r\n                );\r\n            case 'combat':\r\n                return (\r\n                    <CombatManagerScreen\r\n                        combats={this.state.combats}\r\n                        combat={this.state.combats.find(c => c.id === this.state.selectedCombatID) || null}\r\n                        filter={this.state.filter}\r\n                        showHelp={this.state.options.showHelp}\r\n                        createCombat={() => this.createCombat()}\r\n                        resumeEncounter={pausedCombat => this.resumeCombat(pausedCombat)}\r\n                        nudgeValue={(combatant, type, delta) => this.nudgeValue(combatant, type, delta)}\r\n                        changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                        makeCurrent={(combatant) => this.makeCurrent(combatant, false)}\r\n                        makeActive={(combatant) => this.makeActive(combatant)}\r\n                        makeDefeated={(combatant) => this.makeDefeated(combatant)}\r\n                        removeCombatant={(combatant) => this.removeCombatant(combatant)}\r\n                        addCondition={(combatant) => this.addCondition(combatant)}\r\n                        editCondition={(combatant, condition) => this.editCondition(combatant, condition)}\r\n                        removeCondition={(combatant, conditionID) => this.removeCondition(combatant, conditionID)}\r\n                        mapAdd={(combatant, x, y) => this.mapAdd(combatant, x, y)}\r\n                        mapMove={(combatant, dir) => this.mapMove(combatant, dir)}\r\n                        mapRemove={combatant => this.mapRemove(combatant)}\r\n                        endTurn={(combatant) => this.endTurn(combatant)}\r\n                        changeHP={(combatant, hp, temp) => this.changeHP(combatant, hp, temp)}\r\n                        close={(notification, removeCondition) => this.closeNotification(notification, removeCondition)}\r\n                    />\r\n                );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private getModal() {\r\n        if (this.state.modal) {\r\n            let modalSidebar = false;\r\n            let modalTitle = null;\r\n            let modalContent = null;\r\n            let modalAllowScroll = true;\r\n\r\n            const modalButtons = {\r\n                left: [] as JSX.Element[],\r\n                right: [\r\n                    <button key='close' onClick={() => this.closeModal()}>close</button>\r\n                ] as JSX.Element[]\r\n            };\r\n\r\n            switch (this.state.modal.type) {\r\n                case 'about':\r\n                    modalSidebar = true;\r\n                    modalContent = (\r\n                        <AboutModal\r\n                            options={this.state.options}\r\n                            resetAll={() => this.resetAll()}\r\n                            changeValue={(source, type, value) => this.changeValue(source, type, value)}\r\n                        />\r\n                    );\r\n                    modalButtons.right = [];\r\n                    break;\r\n                case 'demographics':\r\n                    modalSidebar = true;\r\n                    modalContent = (\r\n                        <DemographicsModal\r\n                            library={this.state.library}\r\n                        />\r\n                    );\r\n                    modalButtons.right = [];\r\n                    break;\r\n                case 'monster':\r\n                    modalTitle = 'monster editor';\r\n                    modalContent = (\r\n                        <MonsterEditorModal\r\n                            monster={this.state.modal.monster}\r\n                            library={this.state.library}\r\n                            showMonsters={this.state.modal.showMonsters}\r\n                        />\r\n                    );\r\n                    modalAllowScroll = false;\r\n                    modalButtons.left = [\r\n                        (\r\n                            <Checkbox\r\n                                key='similar'\r\n                                label='similar monsters'\r\n                                checked={this.state.modal.showMonsters}\r\n                                changeValue={() => this.toggleShowSimilarMonsters()}\r\n                            />\r\n                        )\r\n                    ];\r\n                    modalButtons.right = [\r\n                        <button key='save' onClick={() => this.saveMonster()}>save</button>,\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                case 'random-monster':\r\n                    modalTitle = 'random monster generator';\r\n                    modalContent = (\r\n                        <RandomMonsterModal\r\n                            monster={this.state.modal.monster}\r\n                            library={this.state.library}\r\n                        />\r\n                    );\r\n                    modalAllowScroll = false;\r\n                    modalButtons.right = [\r\n                        <button key='save' onClick={() => this.saveMonster()}>save</button>,\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                case 'map':\r\n                    modalTitle = 'map editor';\r\n                    modalContent = (\r\n                        <MapEditorModal\r\n                            map={this.state.modal.map}\r\n                        />\r\n                    );\r\n                    modalAllowScroll = false;\r\n                    modalButtons.right = [\r\n                        <button key='save' onClick={() => this.saveMap()}>save</button>,\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                case 'combat-start':\r\n                    modalTitle = 'start a new encounter';\r\n                    modalContent = (\r\n                        <CombatStartModal\r\n                            combatSetup={this.state.modal.combatSetup}\r\n                            parties={this.state.parties}\r\n                            encounters={this.state.encounters}\r\n                            mapFolios={this.state.mapFolios}\r\n                            getMonster={(monsterName, groupName) => this.getMonster(monsterName, groupName) || null}\r\n                            notify={() => this.setState({modal: this.state.modal})}\r\n                        />\r\n                    );\r\n                    modalAllowScroll = false;\r\n                    modalButtons.right = [\r\n                        (\r\n                            <button\r\n                                key='start encounter'\r\n                                className={this.state.modal.combatSetup.partyID && this.state.modal.combatSetup.encounterID ? '' : 'disabled'}\r\n                                onClick={() => this.startCombat()}\r\n                            >\r\n                                start encounter\r\n                            </button>\r\n                        ),\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                case 'combat-wave':\r\n                    modalTitle = 'encounter waves';\r\n                    modalContent = (\r\n                        <CombatStartModal\r\n                            combatSetup={this.state.modal.combatSetup}\r\n                            encounters={this.state.encounters}\r\n                            getMonster={(monsterName, groupName) => this.getMonster(monsterName, groupName) || null}\r\n                            notify={() => this.setState({modal: this.state.modal})}\r\n                        />\r\n                    );\r\n                    modalAllowScroll = false;\r\n                    modalButtons.right = [\r\n                        (\r\n                            <button\r\n                                key='add wave'\r\n                                className={this.state.modal.combatSetup.waveID !== null ? '' : 'disabled'}\r\n                                onClick={() => this.addWaveToCombat()}\r\n                            >\r\n                                add wave\r\n                            </button>\r\n                        ),\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                case 'condition-add':\r\n                    modalTitle = 'add a condition';\r\n                    modalContent = (\r\n                        <ConditionModal\r\n                            condition={this.state.modal.condition}\r\n                            combatant={this.state.modal.combatant}\r\n                            combat={this.state.modal.combat}\r\n                        />\r\n                    );\r\n                    modalAllowScroll = false;\r\n                    modalButtons.right = [\r\n                        <button key='add' onClick={() => this.addConditionFromModal()}>add</button>,\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                case 'condition-edit':\r\n                    modalTitle = 'edit condition';\r\n                    modalContent = (\r\n                        <ConditionModal\r\n                            condition={this.state.modal.condition}\r\n                            combatant={this.state.modal.combatant}\r\n                            combat={this.state.modal.combat}\r\n                        />\r\n                    );\r\n                    modalButtons.right = [\r\n                        <button key='save' onClick={() => this.editConditionFromModal()}>save</button>,\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                default:\r\n                    // Do nothing\r\n                    break;\r\n            }\r\n\r\n            return (\r\n                <div className='overlay' onClick={() => modalSidebar ? this.closeModal() : null}>\r\n                    <div className={modalSidebar ? 'modal sidebar' : 'modal'} onClick={e => e.stopPropagation()}>\r\n                        <div className='modal-header'>\r\n                            <div className='title'>{modalTitle}</div>\r\n                            {modalSidebar ? <img className='image' src={close} alt='close' onClick={() => this.closeModal()} /> : null}\r\n                        </div>\r\n                        <div className={modalAllowScroll ? 'modal-content scrollable' : 'modal-content'}>\r\n                            {modalContent}\r\n                        </div>\r\n                        <div className='modal-footer'>\r\n                            <div className='left'>{modalButtons.left}</div>\r\n                            <div className='right'>{modalButtons.right}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const content = this.getContent();\r\n            const actions = this.getActions();\r\n            const modal = this.getModal();\r\n\r\n            return (\r\n                <div className='dojo'>\r\n                    <Titlebar\r\n                        actions={actions}\r\n                        blur={modal !== null}\r\n                        openHome={() => this.setView('home')}\r\n                        openAbout={() => this.openAbout()}\r\n                    />\r\n                    <div className={(modal === null) ? 'page-content' : 'page-content blur'}>\r\n                        {content}\r\n                    </div>\r\n                    <Navbar\r\n                        view={this.state.view}\r\n                        parties={this.state.parties}\r\n                        library={this.state.library}\r\n                        encounters={this.state.encounters}\r\n                        blur={modal !== null}\r\n                        setView={view => this.setView(view)}\r\n                    />\r\n                    {modal}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './style/css/foundation.css';\r\nimport './style/scss/app.scss';\r\nimport './style/scss/controls.scss';\r\n\r\nimport Dojo from './components/dojo';\r\n\r\nReactDOM.render(<Dojo />, document.getElementById('root'));\r\n"],"sourceRoot":""}