{"version":3,"sources":["resources/images/down-arrow-black.svg","resources/images/down-arrow.svg","resources/images/close-black.svg","resources/images/warning.svg","resources/images/ellipsis.svg","resources/images/minus.svg","resources/images/plus.svg","resources/images/settings.svg","utils/utils.ts","utils/factory.ts","models/monster-group.ts","utils/frankenstein.ts","models/combat.ts","components/controls/checkbox.tsx","components/controls/confirm-button.tsx","components/controls/control-row.tsx","components/controls/dropdown.tsx","components/controls/expander.tsx","components/controls/radial.tsx","components/controls/selector.tsx","components/controls/spin.tsx","components/panels/ability-score-panel.tsx","components/panels/conditions-panel.tsx","components/panels/note.tsx","components/panels/traits-panel.tsx","components/cards/info-card.tsx","components/cards/monster-card.tsx","components/cards/pc-card.tsx","components/panels/hit-point-gauge.tsx","components/panels/map-panel.tsx","components/list-items/combat-list-item.tsx","components/panels/card-group.tsx","components/screens/combat-manager-screen.tsx","components/cards/filter-card.tsx","components/cards/wave-card.tsx","components/list-items/encounter-list-item.tsx","components/panels/difficulty-chart-panel.tsx","components/screens/encounter-builder-screen.tsx","components/panels/readaloud.tsx","components/screens/home-screen.tsx","components/cards/map-card.tsx","components/list-items/map-folio-list-item.tsx","components/screens/map-folios-screen.tsx","components/list-items/monster-group-list-item.tsx","components/screens/monster-library-screen.tsx","components/list-items/party-list-item.tsx","components/screens/parties-screen.tsx","components/dm-modules/die-roller-module.tsx","utils/speech.ts","utils/text-generation.ts","components/dm-modules/language-module.tsx","components/dm-modules/name-module.tsx","components/dm-modules/reference-module.tsx","components/modals/about-modal.tsx","components/modals/add-combatants-modal.tsx","components/modals/combat-start-modal.tsx","models/condition.ts","components/controls/radio-group.tsx","components/modals/condition-modal.tsx","components/modals/demographics-modal.tsx","models/map-folio.ts","components/cards/map-tile-card.tsx","components/modals/map-editor-modal.tsx","components/modals/monster-editor-modal.tsx","components/modals/pc-editor-modal.tsx","components/modals/random-monster-modal.tsx","components/panels/navbar.tsx","components/panels/titlebar.tsx","components/dojo.tsx","index.js"],"names":["module","exports","Utils","monster","library","group","this","monsterIdToGroup","id","grp","find","g","monsters","includes","filter","text","result","toLowerCase","split","forEach","token","indexOf","s4","Math","floor","random","toString","substring","collection","sorts","length","field","dir","fn","a","b","undefined","sort","order","score","mod","modifierValue","str","sides","size","cr","parseInt","push","ac","hpMin","hpMax","attack","dmgMin","dmgMax","save","count","level","difficulty","type","plural","value","delta","condition","name","combat","duration","saveDuration","saveType","toUpperCase","saves","saveDC","combatantDuration","point","c","combatants","cmb","combatantID","displayName","roundsDuration","rounds","encounter","monsterNames","slots","slot","names","monsterName","n","tag","Factory","guid","pcs","active","player","race","classes","languages","passiveInsight","passiveInvestigation","passivePerception","initiative","url","category","alignment","challenge","abilityScores","dex","con","int","wis","cha","hpTemp","hitDice","damage","resist","vulnerable","immune","savingThrows","speed","skills","senses","equipment","traits","conditionImmunities","usage","uses","waves","monsterGroupName","maps","items","x","y","width","height","terrain","style","partyID","encounterID","waveID","folioID","mapID","encounterInitMode","map","round","notifications","issues","timestamp","data","combatant","SIZE_TYPES","CATEGORY_TYPES","TRAIT_TYPES","Frankenstein","target","source","tokens","newValue","nudgeChallenge","changeValue","hpPerDie","hitDieType","hp","trait","createMonster","subtype","parseChallenge","challenge_rating","armor_class","hit_points","index","hit_dice","strength","dexterity","constitution","intelligence","wisdom","charisma","damage_resistances","damage_vulnerabilities","damage_immunities","condition_immunities","skill","special_abilities","rawTrait","buildTrait","actions","legendary_actions","openBracket","closeBracket","desc","replace","copy","JSON","parse","stringify","createTrait","traitType","splice","t1","t2","index1","index2","setRandomValue","m","t","distinct","current","d","addedIDs","copyTrait","findIndex","avg","COMBAT_TAGS","Checkbox","e","stopPropagation","props","checked","display","disabled","toggle","className","onClick","click","label","ex","console","error","React","Component","defaultProps","ConfirmButton","state","pressed","setState","callback","content","src","warning","alt","details","perform","ControlRow","controls","Dropdown","open","optionID","select","options","selectedText","selectedID","option","o","placeholder","key","title","ellipsis","selected","toggleOpen","DropdownOption","Expander","expanded","arrow","Radial","dir2","direction","showOut","showIn","showDiag","transform","padding","Selector","tabs","itemsPerRow","rowCount","ceil","rowContents","rowIndex","rowSections","row","SelectorOption","Spin","nudgeValue","preventDefault","minusBtns","plusBtns","factors","factor","onTouchEnd","touchEnd","reverse","minus","plus","infoWidth","AbilityScorePanel","showAbilityScores","edit","toggleAbilityScores","modifier","ConditionsPanel","conditions","nudgeConditionValue","editCondition","removeCondition","conditionID","addCondition","ConditionPanel","conditionDurationText","description","conditionText","Note","white","showdown","Showdown","Converter","TraitsPanel","prevTrait","nextTrait","mode","action","removeTrait","swapTraits","traitsByType","showInfo","info","match","list","createTraitPanel","addTrait","createSection","TraitPanel","maxUses","heading","used","startsWith","found","markdown","dangerouslySetInnerHTML","__html","makeHtml","onChange","event","InfoCard","MonsterCard","showDetails","cloneName","combatMode","damageOrHealing","max","min","changeHP","temp","val","sizeAndType","align","wave","some","s","die","conMod","conModStr","combatModes","setCombatMode","pending","defeated","endTurn","makeDefeated","makeCurrent","makeActive","tags","toggleTag","nudgeDamage","heal","setDamage","mapMove","auraDetails","aura","color","mapRemove","mapAdd","removeCombatant","editMonster","setCloneName","cloneMonster","groupOptions","moveToGroup","removeMonster","removeEncounterSlot","canAdd","monsterIsInWave","addEncounterSlot","selectMonster","deselectMonster","getCombatControls","stats","slotSection","getHP","imageStyle","toggleDetails","PCCard","editPC","removePC","href","rel","HitPointGauge","hpCurrent","hpBloodied","hpWidth","hpTempBar","hpTempWidth","MapPanel","border","dimensions","i","minX","maxX","minY","maxY","mi","sizeInSquares","miniSize","mapDimensions","sideLength","getSideLength","left","top","getMapDimensions","grid","gridStyle","getStyle","setSelectedItemID","tiles","tileStyle","tile","selectable","selectedItemID","thumbnail","auras","dim","auraStyle","backgroundColor","mt","tokenStyle","simple","dragOverlay","showOverlay","yOver","xOver","overlayStyle","overlay","posX","posY","gridSquareClicked","GridSquare","onDoubleClick","doubleClick","MapTile","MapToken","initials","hpGauge","altitudeBadge","conditionsBadge","altitude","CombatListItem","setSelection","CardGroup","showCards","hidden","closeBtn","close","showToggle","toggleCards","cards","CombatManagerScreen","selectedTokenID","addingToMapID","setAddingToMapID","createCard","setSelectedTokenID","pendingHelp","concat","activeHelp","notificationSection","notification","mapSection","addCombatantToMap","special","legendary","lair","selectedCombatant","listItems","combats","showCombat","resumeEncounter","createCombat","HelpCard","NotificationPanel","success","PendingCombatantRow","getInformationText","PCRow","notes","getTagDescription","MonsterRow","gauge","FilterCard","showAll","sizeOptions","catOptions","cat","resetFilter","summary","challengeMin","challengeMax","toggleAll","WaveCard","removeWave","EncounterListItem","DifficultyChartPanel","monsterCount","monsterXp","getMonster","experience","xpThresholds","diffSection","adjustedXp","experienceFactor","party","xpEasy","xpMedium","xpHard","xpDeadly","pc","pcExperience","adjustedDifficulty","small","getLeft","xp","getRight","right","EncounterBuilderScreen","changeFilterValue","selection","libraryCards","nudgeFilterValue","matchMonster","enc","encounterName","leftColumn","parties","addWave","removeEncounter","selectEncounter","encounters","showEncounter","addEncounter","watermark","encounterCards","getMonsterCards","card","w","waveCards","getLibrarySection","EncounterInfo","p","partyOptions","selectParty","Readaloud","HomeScreen","addOpenGameContent","MapCard","editMap","removeMap","MapFolioListItem","matchFolio","mapFolio","MapFoliosScreen","folio","addMap","removeMapFolio","selectMapFolio","mapFolios","f","showMapFolio","addMapFolio","folioCards","MapFolioInfo","MonsterGroupListItem","matchGroup","MonsterLibraryScreen","addMonster","generateMonster","sortMonsters","removeMonsterGroup","selectMonsterGroup","showMonsterGroup","addMonsterGroup","groupID","MonsterInfo","PartyListItem","matchParty","PartiesScreen","addPC","sortPCs","removeParty","showParty","addParty","activeCards","inactiveCards","activePCs","activePC","inactivePC","PartyInfo","insightSummary","investigationSummary","perceptionSummary","join","reduce","array","localeCompare","insight","invest","percep","DieRollerModule","dice","rolls","dieRoll","roll","rollsSection","resultSection","setDice","nudgeCount","Speech","window","speechSynthesis","cancel","utterance","SpeechSynthesisUtterance","chooseVoice","voice","rate","randomValue","pitch","speak","getVoices","voices","langCodes","lang","getLanguageCode","candidates","v","substr","default","Promise","resolve","onvoiceschanged","language","TextGenerator","sources","model","maxLength","line","addLineToModel","String","fromCharCode","prev","char","item","freq","requiredResults","lines","failures","extractLine","l","fit","repeat","values","ch","mc","maxCount","sum","LanguageModule","output","fetch","response","presetName","preset","getPresets","addLanguage","getLanguages","Object","keys","initModel","generate","presetOptions","selectedPreset","selectedLanguages","isSelected","removeLanguage","allowGenerate","allowReset","usePreset","reset","GeneratedText","navigator","clipboard","writeText","say","NameModule","male","female","surname","input","setOption","ReferenceModule","view","fetchData","setView","AboutModal","moduleID","setModule","pkg","version","resetAll","getTools","getAbout","AddCombatantsModal","allCombatants","selectedCombatants","CombatStartModal","combatSetup","notify","getMonsterNames","slotID","partyContent","selectedParty","pcSections","setParty","encounterOptions","encounterContent","selectedEncounter","monsterSections","waveMonsters","setEncounter","folios","folioOptions","selectMapSection","thumbnailSection","mapOptions","setMapID","setFolioID","waveOptions","waveContent","selectedWave","setWave","slotsContainer","slotNames","inputs","changeName","setEncounterInitMode","leftSection","rightSection","getPartySection","getEncounterSection","getMapSection","getDifficultySection","getMonsterSection","getWaveSection","margin","MonsterName","CONDITION_TYPES","RadioGroup","itemID","RadioGroupItem","ConditionModal","conditionName","durationType","createConditionDurationSaves","createConditionDurationCombatant","createConditionDurationRounds","object","saveOptions","pointOptions","combatantOptions","durations","setCondition","setDuration","DemographicsModal","chart","demographics","allMonsters","buckets","maxBucketSize","bucket","bars","set","selectChart","TERRAIN_TYPES","MapTileCard","terrainOptions","styleOptions","moveMapItem","resizeMapItem","cloneMapItem","removeMapItem","MapEditorModal","selectedTileID","addingTile","createMapItem","smallMapItem","bigMapItem","addBtn","toggleAddingTile","tools","mapItem","setSelectedTileID","addMapTile","MonsterEditorModal","page","showFilter","helpSection","sidebar","similarFilter","scratchpadFilter","scratchpadList","sections","getHelpOptionsForPage","section","spliceMonsters","addRandomTrait","getValueSection","getActionsSection","dataType","valueSections","rows","monsterCards","showSidebar","getMonsters","changeTrait","help","selector","setHelpSection","getHelpSection","sidebarContent","toggleMatch","searchResults","slice","resultsRows","addToScratchpadList","removeSection","deleteRows","removeFromScratchpadList","transition","setPage","PCEditorModal","RandomMonsterModal","selectedMonsters","selectedMonstersInfo","selectAll","Navbar","partiesStyle","libraryStyle","encounterStyle","mapStyle","combatStyle","encountersEnabled","combatEnabled","blur","Titlebar","openHome","cog","openAbout","Dojo","modal","selectedPartyID","selectedMonsterGroupID","selectedEncounterID","selectedMapFolioID","selectedCombatID","json","localStorage","getItem","setItem","createParty","createPC","original","createMonsterGroup","sourceGroup","clone","then","createFromJSON","groupName","createEncounter","createEncounterSlot","sortEncounterSlots","slotContainer","aName","bName","createEncounterWave","createMapFolio","createMap","setup","createCombatSetup","partyName","addPCToCombat","groupInitRoll","addMonsterToCombat","sortCombatants","initMode","Date","toLocaleString","newRound","actor","init","groupRoll","singleRoll","issue","saveNotification","createNotification","endNotification","createCondition","conditionIndex","obj","openDemographics","openWaveModal","addToEncounter","pauseCombat","endCombat","addWaveToEncounter","pausedCombat","resumeCombat","closeNotification","modalSidebar","modalTitle","modalContent","modalAllowScroll","modalButtons","closeModal","savePC","toggleShowSidebar","saveMonster","saveMap","startCombat","addWaveToCombat","addCombatantsFromModal","addConditionFromModal","editConditionFromModal","getContent","getActions","getModal","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.23b56613.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/down-arrow-black.a2fc7a1f.svg\";","module.exports = __webpack_public_path__ + \"static/media/down-arrow.697dc1af.svg\";","module.exports = __webpack_public_path__ + \"static/media/close-black.7645a5b9.svg\";","module.exports = __webpack_public_path__ + \"static/media/warning.67a11a95.svg\";","module.exports = __webpack_public_path__ + \"static/media/ellipsis.9650a20f.svg\";","module.exports = __webpack_public_path__ + \"static/media/minus.7003cf50.svg\";","module.exports = __webpack_public_path__ + \"static/media/plus.b60accff.svg\";","module.exports = __webpack_public_path__ + \"static/media/settings.042bb1c2.svg\";","import { Combat } from '../models/combat';\r\nimport { Condition, ConditionDurationCombatant, ConditionDurationRounds, ConditionDurationSaves } from '../models/condition';\r\nimport { Encounter, EncounterWave } from '../models/encounter';\r\nimport { Monster, MonsterGroup } from '../models/monster-group';\r\n\r\nexport default class Utils {\r\n\r\n    // This is an internal dictionary to speed up lookup\r\n    private static monsterIdToGroup: { [id: string]: MonsterGroup } = {};\r\n\r\n    public static getMonsterGroup(monster: Monster, library: MonsterGroup[]): MonsterGroup {\r\n        let group = this.monsterIdToGroup[monster.id];\r\n\r\n        if (!group) {\r\n            const grp = library.find(g => g.monsters.includes(monster));\r\n            if (grp) {\r\n                group = grp;\r\n                this.monsterIdToGroup[monster.id] = group;\r\n            }\r\n        }\r\n\r\n        return group;\r\n    }\r\n\r\n    public static match(filter: string, text: string): boolean {\r\n        if (!filter) {\r\n            return true;\r\n        }\r\n\r\n        let result = true;\r\n\r\n        const tokens = filter.toLowerCase().split(' ');\r\n        tokens.forEach(token => {\r\n            if (text.toLowerCase().indexOf(token) === -1) {\r\n                result = false;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    public static guid(): string {\r\n        const s4 = () => Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\r\n        return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\r\n    }\r\n\r\n    public static sort(collection: any[], sorts: { field: string, dir: 'asc' | 'desc' }[] = []): any[] {\r\n        if (sorts.length === 0) {\r\n            sorts = [{ field: 'name', dir: 'asc' }];\r\n        }\r\n\r\n        const fn = (a: any, b: any, field: string): number => {\r\n            if ((a[field] !== undefined) && (b[field] !== undefined)) {\r\n                if (a[field] < b[field]) { return -1; }\r\n                if (a[field] > b[field]) { return 1; }\r\n            }\r\n            return 0;\r\n        };\r\n\r\n        collection.sort((a, b) => {\r\n            let order = 0;\r\n            sorts.forEach(sort => {\r\n                if (order === 0) {\r\n                    order = fn(a, b, sort.field) * (sort.dir === 'asc' ? 1 : -1);\r\n                }\r\n            });\r\n            return order;\r\n        });\r\n\r\n        return collection;\r\n    }\r\n\r\n    public static modifierValue(score: number): number {\r\n        return Math.floor((score - 10) / 2);\r\n    }\r\n\r\n    public static modifier(score: number): string {\r\n        const mod = this.modifierValue(score);\r\n        let str = mod.toString();\r\n        if (mod >= 0) {\r\n            str = '+' + str;\r\n        }\r\n        return str;\r\n    }\r\n\r\n    public static dieRoll(sides: number = 20): number {\r\n        return Math.floor(Math.random() * sides) + 1;\r\n    }\r\n\r\n    public static miniSize(size: string): number {\r\n        switch (size) {\r\n            case 'tiny': return 1;\r\n            case 'small': return 1;\r\n            case 'medium': return 1;\r\n            case 'large': return 2;\r\n            case 'huge': return 3;\r\n            case 'gargantuan': return 4;\r\n            default: return 1;\r\n        }\r\n    }\r\n\r\n    public static hitDieType(size: string) {\r\n        switch (size) {\r\n            case 'tiny': return 4;\r\n            case 'small': return 6;\r\n            case 'medium': return 8;\r\n            case 'large': return 10;\r\n            case 'huge': return 12;\r\n            case 'gargantuan': return 20;\r\n            default: return 8;\r\n        }\r\n    }\r\n\r\n    public static challenge(cr: number): string {\r\n        switch (cr) {\r\n            case 0.125: return '1/8';\r\n            case 0.25: return '1/4';\r\n            case 0.5: return '1/2';\r\n            default: return cr.toString();\r\n        }\r\n    }\r\n\r\n    public static parseChallenge(cr: string): number {\r\n        switch (cr) {\r\n            case '1/8': return 0.125;\r\n            case '1/4': return 0.25;\r\n            case '1/2': return 0.5;\r\n            default: return parseInt(cr, 10);\r\n        }\r\n    }\r\n\r\n    public static challengeDetails(): any[] {\r\n        const result: any[] = [];\r\n\r\n        result.push({ cr: 0,        ac: 13,       hpMin: 1, hpMax: 6,       attack: 3,  dmgMin: 0,   dmgMax: 1,   save: 13 });\r\n        result.push({ cr: 0.125,    ac: 13,       hpMin: 7, hpMax: 35,      attack: 3,  dmgMin: 2,   dmgMax: 3,   save: 13 });\r\n        result.push({ cr: 0.25,     ac: 13,       hpMin: 36, hpMax: 49,     attack: 3,  dmgMin: 4,   dmgMax: 5,   save: 13 });\r\n        result.push({ cr: 0.5,      ac: 13,       hpMin: 50, hpMax: 70,     attack: 3,  dmgMin: 6,   dmgMax: 8,   save: 13 });\r\n        result.push({ cr: 1,        ac: 13,       hpMin: 71, hpMax: 85,     attack: 3,  dmgMin: 9,   dmgMax: 14,  save: 13 });\r\n        result.push({ cr: 2,        ac: 13,       hpMin: 86, hpMax: 100,    attack: 3,  dmgMin: 15,  dmgMax: 20,  save: 13 });\r\n        result.push({ cr: 3,        ac: 13,       hpMin: 101, hpMax: 115,   attack: 4,  dmgMin: 21,  dmgMax: 26,  save: 13 });\r\n        result.push({ cr: 4,        ac: 14,       hpMin: 116, hpMax: 130,   attack: 5,  dmgMin: 27,  dmgMax: 32,  save: 14 });\r\n        result.push({ cr: 5,        ac: 15,       hpMin: 131, hpMax: 145,   attack: 6,  dmgMin: 33,  dmgMax: 38,  save: 15 });\r\n        result.push({ cr: 6,        ac: 15,       hpMin: 146, hpMax: 160,   attack: 6,  dmgMin: 39,  dmgMax: 44,  save: 15 });\r\n        result.push({ cr: 7,        ac: 15,       hpMin: 161, hpMax: 175,   attack: 6,  dmgMin: 45,  dmgMax: 50,  save: 15 });\r\n        result.push({ cr: 8,        ac: 16,       hpMin: 176, hpMax: 190,   attack: 7,  dmgMin: 51,  dmgMax: 56,  save: 16 });\r\n        result.push({ cr: 9,        ac: 16,       hpMin: 191, hpMax: 205,   attack: 7,  dmgMin: 57,  dmgMax: 62,  save: 16 });\r\n        result.push({ cr: 10,       ac: 17,       hpMin: 206, hpMax: 220,   attack: 7,  dmgMin: 63,  dmgMax: 68,  save: 16 });\r\n        result.push({ cr: 11,       ac: 17,       hpMin: 221, hpMax: 235,   attack: 8,  dmgMin: 69,  dmgMax: 74,  save: 17 });\r\n        result.push({ cr: 12,       ac: 17,       hpMin: 236, hpMax: 250,   attack: 8,  dmgMin: 75,  dmgMax: 80,  save: 17 });\r\n        result.push({ cr: 13,       ac: 18,       hpMin: 251, hpMax: 265,   attack: 8,  dmgMin: 81,  dmgMax: 86,  save: 18 });\r\n        result.push({ cr: 14,       ac: 18,       hpMin: 266, hpMax: 280,   attack: 8,  dmgMin: 87,  dmgMax: 92,  save: 18 });\r\n        result.push({ cr: 15,       ac: 18,       hpMin: 281, hpMax: 295,   attack: 8,  dmgMin: 93,  dmgMax: 98,  save: 18 });\r\n        result.push({ cr: 16,       ac: 18,       hpMin: 296, hpMax: 310,   attack: 9,  dmgMin: 99,  dmgMax: 104, save: 18 });\r\n        result.push({ cr: 17,       ac: 19,       hpMin: 311, hpMax: 325,   attack: 10, dmgMin: 105, dmgMax: 110, save: 19 });\r\n        result.push({ cr: 18,       ac: 19,       hpMin: 326, hpMax: 340,   attack: 10, dmgMin: 111, dmgMax: 116, save: 19 });\r\n        result.push({ cr: 19,       ac: 19,       hpMin: 341, hpMax: 355,   attack: 10, dmgMin: 117, dmgMax: 122, save: 19 });\r\n        result.push({ cr: 20,       ac: 19,       hpMin: 356, hpMax: 400,   attack: 10, dmgMin: 123, dmgMax: 140, save: 19 });\r\n        result.push({ cr: 21,       ac: 19,       hpMin: 401, hpMax: 445,   attack: 11, dmgMin: 141, dmgMax: 158, save: 20 });\r\n        result.push({ cr: 22,       ac: 19,       hpMin: 446, hpMax: 490,   attack: 11, dmgMin: 159, dmgMax: 176, save: 20 });\r\n        result.push({ cr: 23,       ac: 19,       hpMin: 491, hpMax: 535,   attack: 11, dmgMin: 177, dmgMax: 194, save: 20 });\r\n        result.push({ cr: 24,       ac: 19,       hpMin: 536, hpMax: 580,   attack: 12, dmgMin: 195, dmgMax: 212, save: 21 });\r\n        result.push({ cr: 25,       ac: 19,       hpMin: 581, hpMax: 625,   attack: 12, dmgMin: 213, dmgMax: 230, save: 21 });\r\n        result.push({ cr: 26,       ac: 19,       hpMin: 626, hpMax: 670,   attack: 12, dmgMin: 231, dmgMax: 248, save: 21 });\r\n        result.push({ cr: 27,       ac: 19,       hpMin: 671, hpMax: 715,   attack: 13, dmgMin: 249, dmgMax: 266, save: 22 });\r\n        result.push({ cr: 28,       ac: 19,       hpMin: 716, hpMax: 760,   attack: 13, dmgMin: 267, dmgMax: 284, save: 22 });\r\n        result.push({ cr: 29,       ac: 19,       hpMin: 761, hpMax: 805,   attack: 13, dmgMin: 285, dmgMax: 302, save: 22 });\r\n        result.push({ cr: 30,       ac: 19,       hpMin: 806, hpMax: 850,   attack: 14, dmgMin: 303, dmgMax: 320, save: 23 });\r\n\r\n        return result;\r\n    }\r\n\r\n    public static experience(cr: number): number {\r\n        switch (cr) {\r\n            case 0: return 10;\r\n            case 0.125: return 25;\r\n            case 0.25: return 50;\r\n            case 0.5: return 100;\r\n            case 1: return 200;\r\n            case 2: return 450;\r\n            case 3: return 700;\r\n            case 4: return 1100;\r\n            case 5: return 1800;\r\n            case 6: return 2300;\r\n            case 7: return 2900;\r\n            case 8: return 3900;\r\n            case 9: return 5000;\r\n            case 10: return 5900;\r\n            case 11: return 7200;\r\n            case 12: return 8400;\r\n            case 13: return 10000;\r\n            case 14: return 11500;\r\n            case 15: return 13000;\r\n            case 16: return 15000;\r\n            case 17: return 18000;\r\n            case 18: return 20000;\r\n            case 19: return 22000;\r\n            case 20: return 25000;\r\n            case 21: return 33000;\r\n            case 22: return 41000;\r\n            case 23: return 50000;\r\n            case 24: return 62000;\r\n            case 30: return 155000;\r\n            default: return 0;\r\n        }\r\n    }\r\n\r\n    public static experienceFactor(count: number): number {\r\n        switch (count) {\r\n            case 0:\r\n                return 0;\r\n            case 1:\r\n                return 1;\r\n            case 2:\r\n                return 1.5;\r\n            case 3:\r\n            case 4:\r\n            case 5:\r\n            case 6:\r\n                return 2;\r\n            case 7:\r\n            case 8:\r\n            case 9:\r\n            case 10:\r\n                return 2.5;\r\n            case 11:\r\n            case 12:\r\n            case 13:\r\n            case 14:\r\n                return 3;\r\n            default:\r\n                return 4;\r\n        }\r\n    }\r\n\r\n    public static pcExperience(level: number, difficulty: string): number {\r\n        switch (difficulty) {\r\n            case 'easy':\r\n                switch (level) {\r\n                    case 1: return 25;\r\n                    case 2: return 50;\r\n                    case 3: return 75;\r\n                    case 4: return 125;\r\n                    case 5: return 250;\r\n                    case 6: return 300;\r\n                    case 7: return 350;\r\n                    case 8: return 450;\r\n                    case 9: return 550;\r\n                    case 10: return 600;\r\n                    case 11: return 800;\r\n                    case 12: return 1000;\r\n                    case 13: return 1100;\r\n                    case 14: return 1250;\r\n                    case 15: return 1400;\r\n                    case 16: return 1600;\r\n                    case 17: return 2000;\r\n                    case 18: return 2100;\r\n                    case 19: return 2400;\r\n                    case 20: return 2800;\r\n                    default: return 0;\r\n                }\r\n            case 'medium':\r\n                switch (level) {\r\n                    case 1: return 50;\r\n                    case 2: return 100;\r\n                    case 3: return 150;\r\n                    case 4: return 250;\r\n                    case 5: return 500;\r\n                    case 6: return 600;\r\n                    case 7: return 750;\r\n                    case 8: return 900;\r\n                    case 9: return 1100;\r\n                    case 10: return 1200;\r\n                    case 11: return 1600;\r\n                    case 12: return 2000;\r\n                    case 13: return 2200;\r\n                    case 14: return 2500;\r\n                    case 15: return 2800;\r\n                    case 16: return 3200;\r\n                    case 17: return 3900;\r\n                    case 18: return 4200;\r\n                    case 19: return 4900;\r\n                    case 20: return 5700;\r\n                    default: return 0;\r\n                }\r\n            case 'hard':\r\n                switch (level) {\r\n                    case 1: return 75;\r\n                    case 2: return 150;\r\n                    case 3: return 225;\r\n                    case 4: return 375;\r\n                    case 5: return 750;\r\n                    case 6: return 900;\r\n                    case 7: return 1100;\r\n                    case 8: return 1400;\r\n                    case 9: return 1600;\r\n                    case 10: return 1900;\r\n                    case 11: return 2400;\r\n                    case 12: return 3000;\r\n                    case 13: return 3400;\r\n                    case 14: return 3800;\r\n                    case 15: return 4300;\r\n                    case 16: return 4800;\r\n                    case 17: return 5900;\r\n                    case 18: return 6300;\r\n                    case 19: return 7300;\r\n                    case 20: return 8500;\r\n                    default: return 0;\r\n                }\r\n            case 'deadly':\r\n                switch (level) {\r\n                    case 1: return 100;\r\n                    case 2: return 200;\r\n                    case 3: return 400;\r\n                    case 4: return 500;\r\n                    case 5: return 1100;\r\n                    case 6: return 1400;\r\n                    case 7: return 1700;\r\n                    case 8: return 2100;\r\n                    case 9: return 2400;\r\n                    case 10: return 2800;\r\n                    case 11: return 3600;\r\n                    case 12: return 4500;\r\n                    case 13: return 5100;\r\n                    case 14: return 5700;\r\n                    case 15: return 6400;\r\n                    case 16: return 7200;\r\n                    case 17: return 8800;\r\n                    case 18: return 9500;\r\n                    case 19: return 10900;\r\n                    case 20: return 12700;\r\n                    default: return 0;\r\n                }\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n\r\n    public static traitType(type: string, plural: boolean): string {\r\n        let str = '';\r\n        switch (type) {\r\n            case 'trait':\r\n                str = 'trait';\r\n                break;\r\n            case 'action':\r\n                str = 'action';\r\n                break;\r\n            case 'legendary':\r\n                str = 'legendary action';\r\n                break;\r\n            case 'lair':\r\n                str = 'lair action';\r\n                break;\r\n        }\r\n\r\n        if (plural) {\r\n            str += 's';\r\n        }\r\n\r\n        return str;\r\n    }\r\n\r\n    public static nudgeChallenge(value: number, delta: number): number {\r\n        let result = 0;\r\n\r\n        switch (value) {\r\n            case 0:\r\n                if (delta === -1) {\r\n                    result = 0;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 0.125;\r\n                }\r\n                break;\r\n            case 0.125:\r\n                if (delta === -1) {\r\n                    result = 0;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 0.25;\r\n                }\r\n                break;\r\n            case 0.25:\r\n                if (delta === -1) {\r\n                    result = 0.125;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 0.5;\r\n                }\r\n                break;\r\n            case 0.5:\r\n                if (delta === -1) {\r\n                    result = 0.25;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 1;\r\n                }\r\n                break;\r\n            case 1:\r\n                if (delta === -1) {\r\n                    result = 0.5;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 2;\r\n                }\r\n                break;\r\n            default:\r\n                result = value + delta;\r\n                break;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public static conditionText(condition: Condition): string[] {\r\n        switch (condition.name) {\r\n            case 'blinded':\r\n                return [\r\n                    'a blinded creature can’t see and automatically fails any ability check that requires sight',\r\n                    'attack rolls against the creature have advantage, and the creature’s attack rolls have disadvantage'\r\n                ];\r\n            case 'charmed':\r\n                return [\r\n                    'a charmed creature can’t attack the charmer or target the charmer with harmful abilities or magical effects',\r\n                    'the charmer has advantage on any ability check to interact socially with the creature'\r\n                ];\r\n            case 'deafened':\r\n                return [\r\n                    'a deafened creature can’t hear and automatically fails any ability check that requires hearing.'\r\n                ];\r\n            case 'exhaustion': {\r\n                switch (condition.level) {\r\n                case 1:\r\n                    return [\r\n                        'disadvantage on ability checks'\r\n                    ];\r\n                case 2:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved'\r\n                    ];\r\n                case 3:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved',\r\n                        'disadvantage on attack rolls and saving throws'\r\n                    ];\r\n                case 4:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved',\r\n                        'disadvantage on attack rolls and saving throws',\r\n                        'hit point maximum halved'\r\n                    ];\r\n                case 5:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved',\r\n                        'disadvantage on attack rolls and saving throws',\r\n                        'hit point maximum halved',\r\n                        'speed reduced to 0'\r\n                    ];\r\n                case 6:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved',\r\n                        'disadvantage on attack rolls and saving throws',\r\n                        'hit point maximum halved',\r\n                        'speed reduced to 0',\r\n                        'death'\r\n                    ];\r\n                default:\r\n                    return [];\r\n                }\r\n            }\r\n            case 'frightened':\r\n                return [\r\n                    'a frightened creature has disadvantage on ability checks and attack rolls while the source of its fear is within line of sight',\r\n                    'the creature can’t willingly move closer to the source of its fear'\r\n                ];\r\n            case 'grappled':\r\n                return [\r\n                    'a grappled creature’s speed becomes 0, and it can’t benefit from any bonus to its speed',\r\n                    'the condition ends if the grappler is incapacitated',\r\n                    'the condition also ends if an effect removes the grappled creature from the reach of the grappler or grappling effect'\r\n                ];\r\n            case 'incapacitated':\r\n                return [\r\n                    'an incapacitated creature can’t take actions or reactions'\r\n                ];\r\n            case 'invisible':\r\n                return [\r\n                    'an invisible creature is impossible to see without the aid of magic or a special sense',\r\n                    'for the purpose of hiding, the creature is heavily obscured',\r\n                    'the creature’s location can be detected by any noise it makes or any tracks it leaves',\r\n                    'attack rolls against the creature have disadvantage, and the creature’s attack rolls have advantage'\r\n                ];\r\n            case 'paralyzed':\r\n                return [\r\n                    'a paralyzed creature is incapacitated (can’t take actions or reactions) and can’t move or speak',\r\n                    'the creature automatically fails strength and dexterity saving throws',\r\n                    'attack rolls against the creature have advantage',\r\n                    'any attack that hits the creature is a critical hit if the attacker is within 5 feet of the creature'\r\n                ];\r\n            case 'petrified':\r\n                return [\r\n                    /* tslint:disable-next-line:max-line-length */\r\n                    'a petrified creature is transformed, along with any nonmagical objects it is wearing or carrying, into a solid inanimate substance (usually stone)',\r\n                    'its weight increases by a factor of ten, and it ceases aging',\r\n                    'the creature is incapacitated (can’t take actions or reactions), can’t move or speak, and is unaware of its surroundings',\r\n                    'attack rolls against the creature have advantage',\r\n                    'the creature automatically fails strength and dexterity saving throws',\r\n                    'the creature has resistance to all damage',\r\n                    'the creature is immune to poison and disease, although a poison or disease already in its system is suspended, not neutralized'\r\n                ];\r\n            case 'poisoned':\r\n                return [\r\n                    'a poisoned creature has disadvantage on attack rolls and ability checks'\r\n                ];\r\n            case 'prone':\r\n                return [\r\n                    'a prone creature’s only movement option is to crawl, unless it stands up and thereby ends the condition',\r\n                    'the creature has disadvantage on attack rolls',\r\n                    /* tslint:disable-next-line:max-line-length */\r\n                    'an attack roll against the creature has advantage if the attacker is Within 5 feet of the creature; otherwise, the attack roll has disadvantage'\r\n                ];\r\n            case 'restrained':\r\n                return [\r\n                    'a restrained creature’s speed becomes 0, and it can’t benefit from any bonus to its speed',\r\n                    'attack rolls against the creature have advantage, and the creature’s attack rolls have disadvantage',\r\n                    'the creature has disadvantage on dexterity saving throws'\r\n                ];\r\n            case 'stunned':\r\n                return [\r\n                    'a stunned creature is incapacitated (can’t take actions or reactions), can’t move, and can speak only falteringly',\r\n                    'the creature automatically fails strength and dexterity saving throws',\r\n                    'attack rolls against the creature have advantage'\r\n                ];\r\n            case 'unconscious':\r\n                return [\r\n                    'an unconscious creature is incapacitated (can’t take actions or reactions), can’t move or speak, and is unaware of its surroundings',\r\n                    'the creature drops whatever its holding and falls prone',\r\n                    'the creature automatically fails strength and dexterity saving throws',\r\n                    'attack rolls against the creature have advantage',\r\n                    'any attack that hits the creature is a critical hit if the attacker is within 5 feet of the creature'\r\n                ];\r\n            case 'custom':\r\n                return [];\r\n            default:\r\n                return [];\r\n        }\r\n    }\r\n\r\n    public static conditionDurationText(condition: Condition, combat: Combat) {\r\n        if (condition.duration !== null) {\r\n            switch (condition.duration.type) {\r\n                case 'saves':\r\n                    const saveDuration = condition.duration as ConditionDurationSaves;\r\n                    let saveType = saveDuration.saveType.toString();\r\n                    if (saveType !== 'death') {\r\n                        saveType = saveType.toUpperCase();\r\n                    }\r\n                    const saves = saveDuration.count > 1 ? 'saves' : 'save';\r\n                    return 'until you make ' + saveDuration.count + ' ' + saveType + ' ' + saves + ' at dc ' + saveDuration.saveDC;\r\n                case 'combatant':\r\n                    const combatantDuration = condition.duration as ConditionDurationCombatant;\r\n                    const point = combatantDuration.point;\r\n                    const c = combat.combatants.find(cmb => cmb.id === combatantDuration.combatantID);\r\n                    const combatant = c ? (c.displayName || c.name || 'unnamed monster') + '\\'s' : 'someone\\'s';\r\n                    return 'until the ' + point + ' of ' + combatant + ' next turn';\r\n                case 'rounds':\r\n                    const roundsDuration = condition.duration as ConditionDurationRounds;\r\n                    const rounds = roundsDuration.count > 1 ? 'rounds' : 'round';\r\n                    return 'for ' + roundsDuration.count + ' ' + rounds;\r\n                default:\r\n                    return null;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public static getMonsterNames(encounter: Encounter | EncounterWave): { id: string, names: string[] }[] {\r\n        const monsterNames: any[] = [];\r\n        if (encounter) {\r\n            encounter.slots.forEach(slot => {\r\n                const names: any[] = [];\r\n                if (slot.count === 1) {\r\n                    names.push(slot.monsterName);\r\n                } else {\r\n                    for (let n = 0; n !== slot.count; ++n) {\r\n                        names.push(slot.monsterName + ' ' + (n + 1));\r\n                    }\r\n                }\r\n\r\n                monsterNames.push({\r\n                    id: slot.id,\r\n                    names: names\r\n                });\r\n            });\r\n        }\r\n\r\n        return monsterNames;\r\n    }\r\n\r\n    public static getTagDescription(tag: string) {\r\n        switch (tag) {\r\n            case 'conc':\r\n                return 'concentrating';\r\n            case 'bane':\r\n                return 'baned (subtract d4 from attack rolls and saving throws)';\r\n            case 'bless':\r\n                return 'blessed (add d4 to attack rolls and saving throws)';\r\n            case 'hex':\r\n                return 'hexed (disadvantage on one saving throw; take additional damage on hit)';\r\n            default:\r\n                return tag;\r\n        }\r\n    }\r\n}\r\n","import Utils from './utils';\r\n\r\nimport { Combat, CombatSetup, Notification } from '../models/combat';\r\nimport { Condition, ConditionDurationCombatant, ConditionDurationRounds, ConditionDurationSaves } from '../models/condition';\r\nimport { Encounter, EncounterSlot, EncounterWave } from '../models/encounter';\r\nimport { Map, MapFolio, MapItem } from '../models/map-folio';\r\nimport { Monster, MonsterGroup, Trait } from '../models/monster-group';\r\nimport { Party, PC } from '../models/party';\r\n\r\nexport default class Factory {\r\n\r\n    public static createParty(): Party {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            pcs: []\r\n        };\r\n    }\r\n\r\n    public static createPC(): PC {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'pc',\r\n            active: true,\r\n            player: '',\r\n            name: '',\r\n            race: '',\r\n            classes: '',\r\n            level: 1,\r\n            languages: 'Common',\r\n            passiveInsight: 10,\r\n            passiveInvestigation: 10,\r\n            passivePerception: 10,\r\n            initiative: 10,\r\n            url: ''\r\n        };\r\n    }\r\n\r\n    public static createMonsterGroup(): MonsterGroup {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            monsters: []\r\n        };\r\n    }\r\n\r\n    public static createMonster(): Monster {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'monster',\r\n            name: '',\r\n            size: 'medium',\r\n            category: 'humanoid',\r\n            tag: '',\r\n            alignment: '',\r\n            challenge: 1,\r\n            abilityScores: {\r\n                str: 10,\r\n                dex: 10,\r\n                con: 10,\r\n                int: 10,\r\n                wis: 10,\r\n                cha: 10\r\n            },\r\n            ac: 10,\r\n            hpMax: 4,\r\n            hpTemp: 0,\r\n            hitDice: 1,\r\n            damage: {\r\n                resist: '',\r\n                vulnerable: '',\r\n                immune: ''\r\n            },\r\n            savingThrows: '',\r\n            speed: '',\r\n            skills: '',\r\n            senses: '',\r\n            languages: '',\r\n            equipment: '',\r\n            traits: [],\r\n            conditionImmunities: ''\r\n        };\r\n    }\r\n\r\n    public static createTrait(): Trait {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            usage: '',\r\n            type: 'action',\r\n            text: '',\r\n            uses: 0\r\n        };\r\n    }\r\n\r\n    public static createEncounter(): Encounter {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            slots: [],\r\n            waves: []\r\n        };\r\n    }\r\n\r\n    public static createEncounterSlot(): EncounterSlot {\r\n        return {\r\n            id: Utils.guid(),\r\n            monsterGroupName: '',\r\n            monsterName: '',\r\n            count: 1\r\n        };\r\n    }\r\n\r\n    public static createEncounterWave(): EncounterWave {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            slots: []\r\n        };\r\n    }\r\n\r\n    public static createMapFolio(): MapFolio {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            maps: []\r\n        };\r\n    }\r\n\r\n    public static createMap(): Map {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            items: []\r\n        };\r\n    }\r\n\r\n    public static createMapItem(): MapItem {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'tile',\r\n            x: 0,\r\n            y: 0,\r\n            width: 4,\r\n            height: 4,\r\n            terrain: null,\r\n            style: null\r\n        };\r\n    }\r\n\r\n    public static createCombatSetup(): CombatSetup {\r\n        return {\r\n            partyID: null,\r\n            encounterID: null,\r\n            waveID: null,\r\n            folioID: null,\r\n            mapID: null,\r\n            monsterNames: [],\r\n            encounterInitMode: 'group'\r\n        };\r\n    }\r\n\r\n    public static createCombat(): Combat {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            encounterID: null,\r\n            combatants: [],\r\n            map: null,\r\n            round: 1,\r\n            notifications: [],\r\n            issues: [],\r\n            timestamp: null\r\n        };\r\n    }\r\n\r\n    public static createNotification(): Notification {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'condition-save',\r\n            data: null,\r\n            combatant: null\r\n        };\r\n    }\r\n\r\n    public static createCondition(): Condition {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            level: 1,\r\n            text: null,\r\n            duration: null\r\n        };\r\n    }\r\n\r\n    public static createConditionDurationSaves(): ConditionDurationSaves {\r\n        return {\r\n            type: 'saves',\r\n            count: 1,\r\n            saveType: 'str',\r\n            saveDC: 10,\r\n            point: 'start'\r\n        };\r\n    }\r\n\r\n    public static createConditionDurationCombatant(): ConditionDurationCombatant {\r\n        return {\r\n            type: 'combatant',\r\n            point: 'start',\r\n            combatantID: null\r\n        };\r\n    }\r\n\r\n    public static createConditionDurationRounds(): ConditionDurationRounds {\r\n        return {\r\n            type: 'rounds',\r\n            count: 1\r\n        };\r\n    }\r\n}\r\n","export interface MonsterGroup {\r\n    id: string;\r\n    name: string;\r\n    monsters: Monster[];\r\n}\r\n\r\nexport interface Monster {\r\n    id: string;\r\n    type: string;\r\n    name: string;\r\n    size: string;\r\n    category: string;\r\n    tag: string;\r\n    alignment: string;\r\n    challenge: number;\r\n    abilityScores: {\r\n        str: number;\r\n        dex: number;\r\n        con: number;\r\n        int: number;\r\n        wis: number;\r\n        cha: number;\r\n    };\r\n    ac: number;\r\n    hpMax: number;\r\n    hpTemp: number;\r\n    hitDice: number;\r\n    damage: {\r\n        resist: string;\r\n        vulnerable: string;\r\n        immune: string;\r\n    };\r\n    savingThrows: string;\r\n    speed: string;\r\n    skills: string;\r\n    senses: string;\r\n    languages: string;\r\n    equipment: string;\r\n    traits: Trait[];\r\n    conditionImmunities: string;\r\n}\r\n\r\nexport interface Trait {\r\n    id: string;\r\n    name: string;\r\n    usage: string;\r\n    type: 'trait' | 'action' | 'legendary' | 'lair';\r\n    text: string;\r\n    uses: number;\r\n}\r\n\r\nexport const SIZE_TYPES = [\r\n    'tiny',\r\n    'small',\r\n    'medium',\r\n    'large',\r\n    'huge',\r\n    'gargantuan'\r\n];\r\n\r\nexport const CATEGORY_TYPES = [\r\n    'aberration',\r\n    'beast',\r\n    'celestial',\r\n    'construct',\r\n    'dragon',\r\n    'elemental',\r\n    'fey',\r\n    'fiend',\r\n    'giant',\r\n    'humanoid',\r\n    'monstrosity',\r\n    'ooze',\r\n    'plant',\r\n    'undead'\r\n];\r\n\r\nexport const TRAIT_TYPES = [\r\n    'trait',\r\n    'action',\r\n    'legendary',\r\n    'lair'\r\n];\r\n","import Factory from './factory';\r\nimport Utils from './utils';\r\n\r\nimport { Monster, Trait, TRAIT_TYPES } from '../models/monster-group';\r\n\r\nexport default class Frankenstein {\r\n    public static nudgeValue(target: Monster, field: string, delta: number) {\r\n        let source: any = target;\r\n        let value: any = null;\r\n        const tokens = field.split('.');\r\n        tokens.forEach(token => {\r\n            if (token === tokens[tokens.length - 1]) {\r\n                value = source[token];\r\n            } else {\r\n                source = source[token];\r\n            }\r\n        });\r\n\r\n        const newValue = (field === 'challenge') ? Utils.nudgeChallenge(value, delta) : (value ? value : 0) + delta;\r\n        Frankenstein.changeValue(target, field, newValue);\r\n    }\r\n\r\n    public static changeValue(target: Monster, field: string, value: any) {\r\n        let source: any = target;\r\n        const tokens = field.split('.');\r\n        tokens.forEach(token => {\r\n            if (token === tokens[tokens.length - 1]) {\r\n                source[token] = value;\r\n\r\n                if ((field === 'abilityScores.con') || (field === 'size') || (field === 'hitDice')) {\r\n                    const sides = Utils.hitDieType(target.size);\r\n                    const conMod = Math.floor((target.abilityScores.con - 10) / 2);\r\n                    const hpPerDie = ((sides + 1) / 2) + conMod;\r\n                    const hp = Math.floor(target.hitDice * hpPerDie);\r\n                    target.hpMax = hp;\r\n                }\r\n            } else {\r\n                source = source[token];\r\n            }\r\n        });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Monster creation\r\n\r\n    public static clone(monster: Monster, name: string): Monster {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'monster',\r\n            name: name || (monster.name + ' copy'),\r\n            size: monster.size,\r\n            category: monster.category,\r\n            tag: monster.tag,\r\n            alignment: monster.alignment,\r\n            challenge: monster.challenge,\r\n            abilityScores: {\r\n                str: monster.abilityScores.str,\r\n                dex: monster.abilityScores.dex,\r\n                con: monster.abilityScores.con,\r\n                int: monster.abilityScores.int,\r\n                wis: monster.abilityScores.wis,\r\n                cha: monster.abilityScores.cha\r\n            },\r\n            ac: monster.ac,\r\n            hpMax: monster.hpMax,\r\n            hpTemp: monster.hpTemp,\r\n            hitDice: monster.hitDice,\r\n            damage: {\r\n                resist: monster.damage.resist,\r\n                vulnerable: monster.damage.vulnerable,\r\n                immune: monster.damage.immune\r\n            },\r\n            savingThrows: monster.savingThrows,\r\n            speed: monster.speed,\r\n            skills: monster.skills,\r\n            senses: monster.senses,\r\n            languages: monster.languages,\r\n            equipment: monster.equipment,\r\n            traits: monster.traits.map(trait => {\r\n                return {\r\n                    id: Utils.guid(),\r\n                    name: trait.name,\r\n                    usage: trait.usage,\r\n                    type: trait.type,\r\n                    text: trait.text,\r\n                    uses: 0\r\n                };\r\n            }),\r\n            conditionImmunities: monster.conditionImmunities\r\n        };\r\n    }\r\n\r\n    public static createFromJSON(data: any): Monster {\r\n        const monster = Factory.createMonster();\r\n\r\n        monster.type = 'monster';\r\n        monster.name = data.name;\r\n        monster.size = data.size.toLowerCase();\r\n        monster.category = data.type;\r\n        monster.tag = data.subtype;\r\n        monster.alignment = data.alignment;\r\n        monster.challenge = Utils.parseChallenge(data.challenge_rating);\r\n        monster.ac = data.armor_class;\r\n        monster.hpMax = data.hit_points;\r\n        monster.speed = data.speed;\r\n        monster.senses = data.senses;\r\n        monster.languages = data.languages;\r\n\r\n        const index = data.hit_dice.indexOf('d');\r\n        monster.hitDice = parseInt(data.hit_dice.substring(0, index), 10);\r\n\r\n        monster.abilityScores.str = data.strength;\r\n        monster.abilityScores.dex = data.dexterity;\r\n        monster.abilityScores.con = data.constitution;\r\n        monster.abilityScores.int = data.intelligence;\r\n        monster.abilityScores.wis = data.wisdom;\r\n        monster.abilityScores.cha = data.charisma;\r\n\r\n        monster.damage.resist = data.damage_resistances;\r\n        monster.damage.vulnerable = data.damage_vulnerabilities;\r\n        monster.damage.immune = data.damage_immunities;\r\n        monster.conditionImmunities = data.condition_immunities;\r\n\r\n        const saves = [\r\n            {\r\n                field: 'strength_save',\r\n                text: 'Strength'\r\n            },\r\n            {\r\n                field: 'dexterity_save',\r\n                text: 'Dexterity'\r\n            },\r\n            {\r\n                field: 'constitution_save',\r\n                text: 'Constitution'\r\n            },\r\n            {\r\n                field: 'intelligence_save',\r\n                text: 'Intelligence'\r\n            },\r\n            {\r\n                field: 'wisdom_save',\r\n                text: 'Wisdom'\r\n            },\r\n            {\r\n                field: 'charisma_save',\r\n                text: 'Charisma'\r\n            }\r\n        ];\r\n        saves.forEach(save => {\r\n            if (data[save.field]) {\r\n                const str = save.text + ' ' + data[save.field];\r\n                monster.savingThrows += monster.savingThrows === '' ? str : ', ' + str;\r\n            }\r\n        });\r\n\r\n        const skills = [\r\n            {\r\n                field: 'acrobatics',\r\n                text: 'Acrobatics'\r\n            },\r\n            {\r\n                field: 'animal_handling',\r\n                text: 'Animal handling'\r\n            },\r\n            {\r\n                field: 'arcana',\r\n                text: 'Arcana'\r\n            },\r\n            {\r\n                field: 'athletics',\r\n                text: 'Athletics'\r\n            },\r\n            {\r\n                field: 'deception',\r\n                text: 'Deception'\r\n            },\r\n            {\r\n                field: 'history',\r\n                text: 'History'\r\n            },\r\n            {\r\n                field: 'insight',\r\n                text: 'Insight'\r\n            },\r\n            {\r\n                field: 'intimidation',\r\n                text: 'Intimidation'\r\n            },\r\n            {\r\n                field: 'investigation',\r\n                text: 'Investigation'\r\n            },\r\n            {\r\n                field: 'medicine',\r\n                text: 'Medicine'\r\n            },\r\n            {\r\n                field: 'nature',\r\n                text: 'Nature'\r\n            },\r\n            {\r\n                field: 'perception',\r\n                text: 'Perception'\r\n            },\r\n            {\r\n                field: 'performance',\r\n                text: 'Performance'\r\n            },\r\n            {\r\n                field: 'persuasion',\r\n                text: 'Persuasion'\r\n            },\r\n            {\r\n                field: 'religion',\r\n                text: 'Religion'\r\n            },\r\n            {\r\n                field: 'sleight_of_hand',\r\n                text: 'Sleight of hand'\r\n            },\r\n            {\r\n                field: 'stealth',\r\n                text: 'Stealth'\r\n            },\r\n            {\r\n                field: 'survival',\r\n                text: 'Survival'\r\n            }\r\n        ];\r\n        skills.forEach(skill => {\r\n            if (data[skill.field]) {\r\n                const str = skill.text + ' ' + data[skill.field];\r\n                monster.skills += monster.skills === '' ? str : ', ' + str;\r\n            }\r\n        });\r\n\r\n        if (data.special_abilities) {\r\n            data.special_abilities.forEach((rawTrait: any) => {\r\n                const trait = this.buildTrait(rawTrait, 'trait');\r\n                monster.traits.push(trait);\r\n            });\r\n        }\r\n        if (data.actions) {\r\n            data.actions.forEach((rawTrait: any) => {\r\n                const trait = this.buildTrait(rawTrait, 'action');\r\n                monster.traits.push(trait);\r\n            });\r\n        }\r\n        if (data.legendary_actions) {\r\n            data.legendary_actions.forEach((rawTrait: any) => {\r\n                const trait = this.buildTrait(rawTrait, 'legendary');\r\n                monster.traits.push(trait);\r\n            });\r\n        }\r\n\r\n        return monster;\r\n    }\r\n\r\n    private static buildTrait(rawTrait: any, type: 'trait' | 'action' | 'legendary' | 'lair'): Trait {\r\n        let name = '';\r\n        let usage = '';\r\n\r\n        const openBracket = rawTrait.name.indexOf('(');\r\n        if (openBracket === -1) {\r\n            name = rawTrait.name;\r\n        } else {\r\n            const closeBracket = rawTrait.name.indexOf(')');\r\n            name = rawTrait.name.substring(0, openBracket - 1);\r\n            usage = rawTrait.name.substring(openBracket + 1, closeBracket).toLowerCase();\r\n        }\r\n\r\n        const text = rawTrait.desc.replace(/•/g, '*');\r\n\r\n        return {\r\n            id: Utils.guid(),\r\n            type: (name === 'Lair Actions') ? 'lair' : type,\r\n            name: name,\r\n            usage: usage,\r\n            text: text,\r\n            uses: 0\r\n        };\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Traits\r\n\r\n    public static copyTrait(target: Monster, trait: Trait) {\r\n        const copy = JSON.parse(JSON.stringify(trait));\r\n        copy.id = Utils.guid();\r\n        target.traits.push(copy);\r\n    }\r\n\r\n    public static addTrait(target: Monster, type: 'trait' | 'action' | 'legendary' | 'lair') {\r\n        const trait = Factory.createTrait();\r\n        trait.type = type;\r\n        trait.name = 'New ' + Utils.traitType(type, false).toLowerCase();\r\n        target.traits.push(trait);\r\n    }\r\n\r\n    public static removeTrait(target: Monster, trait: Trait) {\r\n        const index = target.traits.indexOf(trait);\r\n        target.traits.splice(index, 1);\r\n    }\r\n\r\n    public static swapTraits(target: Monster, t1: Trait, t2: Trait) {\r\n        const index1 = target.traits.indexOf(t1);\r\n        const index2 = target.traits.indexOf(t2);\r\n        target.traits[index2] = t1;\r\n        target.traits[index1] = t2;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Randomisation\r\n\r\n    public static spliceMonsters(target: Monster, monsters: Monster[]) {\r\n        const fields = [\r\n            'size',\r\n            'category',\r\n            'tag',\r\n            'alignment',\r\n            'challenge',\r\n            'speed',\r\n            'senses',\r\n            'languages',\r\n            'equipment',\r\n            'abilityScores.str',\r\n            'abilityScores.dex',\r\n            'abilityScores.con',\r\n            'abilityScores.int',\r\n            'abilityScores.wis',\r\n            'abilityScores.cha',\r\n            'savingThrows',\r\n            'skills',\r\n            'ac',\r\n            'hitDice',\r\n            'damage.resist',\r\n            'damage.vulnerable',\r\n            'damage.immune',\r\n            'conditionImmunities'\r\n        ];\r\n        fields.forEach(field => {\r\n            this.setRandomValue(target, field, monsters);\r\n        });\r\n\r\n        target.traits = [];\r\n\r\n        TRAIT_TYPES.forEach(type => {\r\n            // Get all traits of this type\r\n            const traits: Trait[] = [];\r\n            monsters.forEach(m => {\r\n                m.traits.filter(t => t.type === type)\r\n                    .forEach(t => traits.push(t));\r\n            });\r\n\r\n            // Collate by name\r\n            const distinct: { trait: Trait, count: number }[] = [];\r\n            traits.forEach(t => {\r\n                const current = distinct.find(d => d.trait.name === t.name);\r\n                if (current) {\r\n                    current.count += 1;\r\n                } else {\r\n                    distinct.push({\r\n                        trait: t,\r\n                        count: 1\r\n                    });\r\n                }\r\n            });\r\n\r\n            // If any are common to all monsters, copy them and remove from the candidates\r\n            const addedIDs: string[] = [];\r\n            distinct.filter(d => d.count === monsters.length)\r\n                .forEach(d => {\r\n                    this.copyTrait(target, d.trait);\r\n                    addedIDs.push(d.trait.id);\r\n                });\r\n            addedIDs.forEach(id => {\r\n                const index = distinct.findIndex(d => d.trait.id === id);\r\n                distinct.splice(index, 1);\r\n            });\r\n\r\n            const avg = traits.length / monsters.length;\r\n            while (target.traits.filter(t => t.type === type).length < avg) {\r\n                const index = Math.floor(Math.random() * distinct.length);\r\n                const t = distinct[index].trait;\r\n                this.copyTrait(target, t);\r\n                distinct.splice(index, 1);\r\n            }\r\n        });\r\n    }\r\n\r\n    public static setRandomValue(target: Monster, field: string, monsters: Monster[]) {\r\n        const index = Math.floor(Math.random() * monsters.length);\r\n        const m = monsters[index];\r\n\r\n        let source: any = m;\r\n        let value = null;\r\n        const tokens = field.split('.');\r\n        tokens.forEach(token => {\r\n            if (token === tokens[tokens.length - 1]) {\r\n                value = source[token];\r\n            } else {\r\n                source = source[token];\r\n            }\r\n        });\r\n\r\n        this.changeValue(target, field, value);\r\n    }\r\n\r\n    public static addRandomTrait(target: Monster, type: string, monsters: Monster[]) {\r\n        const traits: Trait[] = [];\r\n        monsters.forEach(m => {\r\n            m.traits.filter(t => t.type === type)\r\n                .forEach(t => {\r\n                    traits.push(t);\r\n                });\r\n        });\r\n\r\n        const index = Math.floor(Math.random() * traits.length);\r\n        const trait = traits[index];\r\n\r\n        this.copyTrait(target, trait);\r\n    }\r\n}\r\n","import { Condition } from './condition';\r\nimport { Map } from './map-folio';\r\nimport { Monster, Trait } from './monster-group';\r\nimport { PC } from './party';\r\n\r\nexport interface CombatSetup {\r\n    partyID: string | null;\r\n    encounterID: string | null;\r\n    waveID: string | null;\r\n    folioID: string | null;\r\n    mapID: string | null;\r\n    monsterNames: { id: string, names: string[] }[];\r\n    encounterInitMode: 'manual' | 'individual' | 'group';\r\n}\r\n\r\nexport interface Combat {\r\n    id: string;\r\n    name: string;\r\n    encounterID: string | null;\r\n    combatants: ((Combatant & PC) | (Combatant & Monster))[];\r\n    map: Map | null;\r\n    round: number;\r\n    notifications: Notification[];\r\n    issues: string[];\r\n    timestamp: string | null;\r\n}\r\n\r\nexport interface Combatant {\r\n    id: string;\r\n    displayName: string;\r\n    current: boolean;\r\n    pending: boolean;\r\n    active: boolean;\r\n    defeated: boolean;\r\n    initiative: number | null;\r\n    hp: number | null;\r\n    conditions: Condition[];\r\n    tags: string[];\r\n    altitude: number;\r\n    aura: {\r\n        size: number;\r\n        style: 'square' | 'rounded' | 'circle';\r\n        color: string;\r\n    };\r\n}\r\n\r\nexport interface Notification {\r\n    id: string;\r\n    type: 'condition-save' | 'condition-end' | 'trait-recharge';\r\n    data: Condition | Trait | null;\r\n    combatant: (Combatant & Monster) | null;\r\n}\r\n\r\nexport const COMBAT_TAGS = [\r\n    'conc',\r\n    'bane',\r\n    'bless',\r\n    'hex'\r\n];\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    label: string;\r\n    display: 'switch' | 'button';\r\n    checked: boolean;\r\n    changeValue: (value: boolean) => void;\r\n    disabled: boolean;\r\n}\r\n\r\nexport default class Checkbox extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        display: 'switch',\r\n        disabled: false\r\n    };\r\n\r\n    private click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        this.props.changeValue(!this.props.checked);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'checkbox ' + this.props.display;\r\n            if (this.props.checked) {\r\n                style += ' checked';\r\n            }\r\n            if (this.props.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            let toggle = null;\r\n            if (this.props.display === 'switch') {\r\n                toggle = (\r\n                    <div className='toggle-container'>\r\n                        <div className='toggle'/>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={style} onClick={e => this.click(e)}>\r\n                    <div className='checkbox-label'>{this.props.label}</div>\r\n                    {toggle}\r\n                </div>\r\n            );\r\n\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport warning from '../../resources/images/warning.svg';\r\n\r\ninterface Props {\r\n    text: string;\r\n    callback: () => void;\r\n    details: string;\r\n    disabled: boolean;\r\n}\r\n\r\ninterface State {\r\n    pressed: boolean;\r\n}\r\n\r\nexport default class ConfirmButton extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        details: null,\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            pressed: false\r\n        };\r\n    }\r\n\r\n    private toggle() {\r\n        this.setState({\r\n            pressed: !this.state.pressed\r\n        });\r\n    }\r\n\r\n    private perform() {\r\n        this.toggle();\r\n        this.props.callback();\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let content = null;\r\n            if (this.state.pressed) {\r\n                content = (\r\n                    <div>\r\n                        <div className='title'>{this.props.text} - are you sure?</div>\r\n                        <img className='image' src={warning} alt='warning' />\r\n                        {this.props.details ? <div className='details'>{this.props.details}</div> : null}\r\n                        <div className='confirmation'>\r\n                            <div className='destructive' onClick={() => this.perform()}>yes</div>\r\n                            <div className='non-destructive' onClick={() => this.toggle()}>no</div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                content = (\r\n                    <div>\r\n                        <div className='title'>{this.props.text}</div>\r\n                        <img className='image' src={warning} alt='warning' />\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <button className={this.props.disabled ? 'disabled' : ''} onClick={() => this.toggle()}>\r\n                    {content}\r\n                </button>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    controls: JSX.Element[];\r\n    disabled: boolean;\r\n}\r\n\r\nexport default class ControlRow extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        disabled: false\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'control-row';\r\n            if (this.props.disabled) {\r\n                style += ' disabled';\r\n            }\r\n            switch (this.props.controls.length) {\r\n                case 1:\r\n                    style += ' one';\r\n                    break;\r\n                case 2:\r\n                    style += ' two';\r\n                    break;\r\n                case 3:\r\n                    style += ' three';\r\n                    break;\r\n                case 4:\r\n                    style += ' four';\r\n                    break;\r\n                case 5:\r\n                    style += ' five';\r\n                    break;\r\n            }\r\n\r\n            return (\r\n                <div className={style}>\r\n                    {this.props.controls}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport ellipsis from '../../resources/images/ellipsis.svg';\r\n\r\ninterface Props {\r\n    options: { id: string; text: string; disabled?: boolean }[];\r\n    select: (optionID: string) => void;\r\n    selectedID: string;\r\n    placeholder: string;\r\n    disabled: boolean;\r\n}\r\n\r\ninterface State {\r\n    open: boolean;\r\n}\r\n\r\nexport default class Dropdown extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        selectedID: null,\r\n        placeholder: 'select...',\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            open: false\r\n        };\r\n    }\r\n\r\n    private toggleOpen(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        this.setState({\r\n            open: !this.state.open\r\n        });\r\n    }\r\n\r\n    private select(optionID: string) {\r\n        this.setState({\r\n            open: false\r\n        });\r\n        this.props.select(optionID);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            if (this.props.options.length === 0) {\r\n                return null;\r\n            }\r\n\r\n            let style = this.props.disabled ? 'dropdown disabled' : 'dropdown';\r\n            const content = [];\r\n\r\n            let selectedText;\r\n            if (this.props.selectedID) {\r\n                const option: { id: string; text: string; disabled?: boolean } | undefined = this.props.options.find(o => o.id === this.props.selectedID);\r\n                if (option) {\r\n                    selectedText = option.text;\r\n                }\r\n            } else {\r\n                selectedText = /*this.props.text ||*/ this.props.placeholder;\r\n            }\r\n\r\n            content.push(\r\n                <div key='selection' className='dropdown-top' title={selectedText}>\r\n                    <div className='item-text'>{selectedText}</div>\r\n                    <img className='arrow' src={ellipsis} alt='arrow' />\r\n                </div>\r\n            );\r\n\r\n            if (this.state.open) {\r\n                style += ' open';\r\n\r\n                const items = this.props.options.map(option => {\r\n                    if (option.text === null) {\r\n                        return <div key={option.id} className='divider' />;\r\n                    } else {\r\n                        return (\r\n                            <DropdownOption\r\n                                key={option.id}\r\n                                option={option}\r\n                                selected={option.id === this.props.selectedID}\r\n                                select={optionID => this.select(optionID)}\r\n                            />\r\n                        );\r\n                    }\r\n                });\r\n\r\n                content.push(\r\n                    <div key='options' className='dropdown-options'>\r\n                        {items}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={style} onClick={e => this.toggleOpen(e)}>\r\n                    {content}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface DropdownOptionProps {\r\n    option: { id: string; text: string; disabled?: boolean };\r\n    selected: boolean;\r\n    select: (optionID: string) => void;\r\n}\r\n\r\nclass DropdownOption extends React.Component<DropdownOptionProps> {\r\n    private click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (!this.props.option.disabled) {\r\n            this.props.select(this.props.option.id);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'dropdown-option';\r\n            if (this.props.selected) {\r\n                style += ' selected';\r\n            }\r\n            if (this.props.option.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            return (\r\n                <div className={style} title={this.props.option.text} onClick={e => this.click(e)}>\r\n                    {this.props.option.text}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport arrow from '../../resources/images/down-arrow-black.svg';\r\n\r\ninterface Props {\r\n    text: string;\r\n    content: string | JSX.Element;\r\n    disabled: boolean;\r\n}\r\n\r\ninterface State {\r\n    expanded: boolean;\r\n}\r\n\r\nexport default class Expander extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            expanded: false\r\n        };\r\n    }\r\n\r\n    private toggle() {\r\n        this.setState({\r\n            expanded: !this.state.expanded\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = this.props.disabled ? 'expander disabled' : 'expander';\r\n            if (this.state.expanded) {\r\n                style += ' expanded';\r\n            }\r\n\r\n            let content = null;\r\n            if (this.state.expanded) {\r\n                content = (\r\n                    <div className='expander-content'>\r\n                        {this.props.content}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={style}>\r\n                    <div className='expander-header' onClick={() => this.toggle()}>\r\n                        <div className='expander-text'>{this.props.text}</div>\r\n                        <img className='expander-button' src={arrow} alt='arrow' />\r\n                    </div>\r\n                    {content}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport arrow from '../../resources/images/down-arrow-black.svg';\r\n\r\ninterface Props {\r\n    click: (dir: string, dir2: 'in' | 'out' | null) => void;\r\n    direction: 'out' | 'in' | 'both' | 'eight';\r\n    disabled: boolean;\r\n}\r\n\r\nexport default class Radial extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        direction: 'out',\r\n        disabled: false\r\n    };\r\n\r\n    private click(e: React.MouseEvent, dir: string, dir2: 'in' | 'out' | null = null) {\r\n        e.stopPropagation();\r\n        this.props.click(dir, dir2);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'radial ' + (this.props.direction || 'out');\r\n            if (this.props.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            const showOut = (this.props.direction === 'out') || (this.props.direction === 'both') || (this.props.direction === 'eight');\r\n            const showIn = (this.props.direction === 'in') || (this.props.direction === 'both');\r\n            const showDiag = (this.props.direction === 'eight');\r\n\r\n            return (\r\n                <div className={style}>\r\n                    <div className='empty' style={{ display: showDiag ? 'none' : 'inline-block' }} />\r\n                    <div className='btn diag' style={{ display: showDiag ? 'inline-block' : 'none' }}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(135deg)' }}\r\n                            alt='nw'\r\n                            onClick={e => this.click(e, 'NW')}\r\n                        />\r\n                    </div>\r\n                    <div className='btn'>\r\n                        <div>\r\n                            <img\r\n                                src={arrow}\r\n                                style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(180deg)' }}\r\n                                alt='n'\r\n                                onClick={e => this.click(e, 'N', 'out')}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <img\r\n                                src={arrow}\r\n                                style={{ display: showIn ? 'inline-block' : 'none' }}\r\n                                alt='n'\r\n                                onClick={e => this.click(e, 'N', 'in')}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className='empty' style={{ display: showDiag ? 'none' : 'inline-block' }} />\r\n                    <div className='btn diag' style={{ display: showDiag ? 'inline-block' : 'none' }}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(-135deg)' }}\r\n                            alt='ne'\r\n                            onClick={e => this.click(e, 'NE')}\r\n                        />\r\n                    </div>\r\n                    <div className='btn' style={{ padding: (showIn && showOut) ? '10px 0' : '0'}}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(90deg)' }}\r\n                            alt='w'\r\n                            onClick={e => this.click(e, 'W', 'out')}\r\n                        />\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showIn ? 'inline-block' : 'none', transform: 'rotate(-90deg)' }}\r\n                            alt='w'\r\n                            onClick={e => this.click(e, 'W', 'in')}\r\n                        />\r\n                    </div>\r\n                    <div className='empty' />\r\n                    <div className='btn' style={{ padding: (showIn && showOut) ? '10px 0' : '0'}}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showIn ? 'inline-block' : 'none', transform: 'rotate(90deg)' }}\r\n                            alt='e'\r\n                            onClick={e => this.click(e, 'E', 'in')}\r\n                        />\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(-90deg)' }}\r\n                            alt='e'\r\n                            onClick={e => this.click(e, 'E', 'out')}\r\n                        />\r\n                    </div>\r\n                    <div className='empty' style={{ display: showDiag ? 'none' : 'inline-block' }} />\r\n                    <div className='btn diag' style={{ display: showDiag ? 'inline-block' : 'none' }}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(45deg)' }}\r\n                            alt='sw'\r\n                            onClick={e => this.click(e, 'SW')}\r\n                        />\r\n                    </div>\r\n                    <div className='btn'>\r\n                        <div>\r\n                            <img\r\n                                src={arrow}\r\n                                style={{ display: showIn ? 'inline-block' : 'none', transform: 'rotate(180deg)' }}\r\n                                alt='s'\r\n                                onClick={e => this.click(e, 'S', 'in')}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <img\r\n                                src={arrow}\r\n                                style={{ display: showOut ? 'inline-block' : 'none' }}\r\n                                alt='s'\r\n                                onClick={e => this.click(e, 'S', 'out')}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className='empty' style={{ display: showDiag ? 'none' : 'inline-block' }} />\r\n                    <div className='btn diag' style={{ display: showDiag ? 'inline-block' : 'none' }}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(-45deg)' }}\r\n                            alt='se'\r\n                            onClick={e => this.click(e, 'SE')}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    options: { id: string; text: string; disabled?: boolean }[];\r\n    selectedID: string | null;\r\n    select: (optionID: string) => void;\r\n    tabs: boolean;\r\n    disabled: boolean;\r\n    itemsPerRow: number;\r\n}\r\n\r\nexport default class Selector extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        tabs: false,\r\n        disabled: false,\r\n        itemsPerRow: null\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            let style = this.props.tabs ? 'selector tabs' : 'selector radio';\r\n            if (this.props.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            const itemsPerRow = this.props.itemsPerRow ? this.props.itemsPerRow : this.props.options.length;\r\n            const rowCount = Math.ceil(this.props.options.length / itemsPerRow);\r\n            const rowContents: JSX.Element[][] = [];\r\n            for (let n = 0; n !== rowCount; ++n) {\r\n                rowContents.push([]);\r\n            }\r\n\r\n            this.props.options.forEach(option => {\r\n                const index = this.props.options.indexOf(option);\r\n                const rowIndex = Math.floor(index / itemsPerRow);\r\n                const row = rowContents[rowIndex];\r\n                row.push(\r\n                    <SelectorOption\r\n                        key={option.id}\r\n                        option={option}\r\n                        selected={option.id === this.props.selectedID}\r\n                        count={itemsPerRow}\r\n                        select={(optionID: string) => this.props.select(optionID)}\r\n                    />\r\n                );\r\n            });\r\n\r\n            const rowSections = rowContents.map(row => {\r\n                const index = rowContents.indexOf(row);\r\n                return <div key={index}>{row}</div>;\r\n            });\r\n\r\n            return (\r\n                <div className={style}>\r\n                    {rowSections}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface SelectorOptionInterface {\r\n    option: { id: string; text: string; disabled?: boolean };\r\n    selected: boolean;\r\n    count: number;\r\n    select: (optionID: string) => void;\r\n}\r\n\r\nclass SelectorOption extends React.Component<SelectorOptionInterface> {\r\n    private click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (!this.props.option.disabled) {\r\n            this.props.select(this.props.option.id);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const width = 'calc(((100% - 1px) / ' + this.props.count + ') - 2px )';\r\n\r\n            let style = 'option';\r\n            if (this.props.selected) {\r\n                style += ' selected';\r\n            }\r\n            if (this.props.option.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            return (\r\n                <div key={this.props.option.id} className={style} style={{ width: width }} title={this.props.option.text} onClick={e => this.click(e)}>\r\n                    {this.props.option.text}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport minus from '../../resources/images/minus.svg';\r\nimport plus from '../../resources/images/plus.svg';\r\n\r\ninterface Props {\r\n    source: any;\r\n    name: string;\r\n    nudgeValue: (delta: number) => void;\r\n    label: string;\r\n    disabled: boolean;\r\n    factors: number[];\r\n    display: ((value: number) => string) | null;\r\n}\r\n\r\nexport default class Spin extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        label: null,\r\n        disabled: false,\r\n        factors: null,\r\n        display: null\r\n    };\r\n\r\n    private click(e: React.MouseEvent, delta: number) {\r\n        e.stopPropagation();\r\n        this.props.nudgeValue(delta);\r\n    }\r\n\r\n    private touchEnd(e: React.TouchEvent, delta: number) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        this.props.nudgeValue(delta);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'info-value';\r\n            let value = this.props.source[this.props.name];\r\n            if (value === 0) {\r\n                style += ' dimmed';\r\n            }\r\n\r\n            if (this.props.display) {\r\n                value = this.props.display(value);\r\n            }\r\n\r\n            const minusBtns: JSX.Element[] = [];\r\n            const plusBtns: JSX.Element[] = [];\r\n\r\n            if (this.props.factors) {\r\n                this.props.factors.forEach(factor => {\r\n                    minusBtns.push(\r\n                        <div\r\n                            key={'minus' + factor}\r\n                            className='spin-button factor'\r\n                            onTouchEnd={e => this.touchEnd(e, -1 * factor)}\r\n                            onClick={e => this.click(e, -1 * factor)}\r\n                        >\r\n                            {'-' + factor}\r\n                        </div>\r\n                    );\r\n\r\n                    plusBtns.push(\r\n                        <div\r\n                            key={'plus' + factor}\r\n                            className='spin-button factor'\r\n                            onTouchEnd={e => this.touchEnd(e, +1 * factor)}\r\n                            onClick={e => this.click(e, +1 * factor)}\r\n                        >\r\n                            {'+' + factor}\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                minusBtns.reverse();\r\n            } else {\r\n                minusBtns.push(\r\n                    <div key='minus1' className='spin-button' onTouchEnd={e => this.touchEnd(e, -1)} onClick={e => this.click(e, -1)}>\r\n                        <img className='image' src={minus} alt='minus' />\r\n                    </div>\r\n                );\r\n\r\n                plusBtns.push(\r\n                    <div key='plus1' className='spin-button' onTouchEnd={e => this.touchEnd(e, +1)} onClick={e => this.click(e, +1)}>\r\n                        <img className='image' src={plus} alt='plus' />\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            const infoWidth = 80 * (this.props.factors ? this.props.factors.length : 1);\r\n\r\n            return (\r\n                <div className={this.props.disabled ? 'spin disabled' : 'spin'}>\r\n                    <div className='minus'>\r\n                        {minusBtns}\r\n                    </div>\r\n                    <div className='info' style={{ width: 'calc(100% - ' + infoWidth + 'px)' }}>\r\n                        <div className='info-label'>{this.props.label}</div>\r\n                        <div className={style}>{value}</div>\r\n                    </div>\r\n                    <div className='plus'>\r\n                        {plusBtns}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Monster } from '../../models/monster-group';\r\n\r\nimport Spin from '../controls/spin';\r\n\r\ninterface Props {\r\n    combatant: Monster;\r\n    edit: boolean;\r\n    nudgeValue: (combatant: Monster, field: string, delta: number) => void;\r\n}\r\n\r\ninterface State {\r\n    showAbilityScores: boolean;\r\n}\r\n\r\nexport default class AbilityScorePanel extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        edit: null,\r\n        nudgeValue: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showAbilityScores: false\r\n        };\r\n    }\r\n\r\n    private toggleAbilityScores() {\r\n        this.setState({\r\n            showAbilityScores: !this.state.showAbilityScores\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let result = null;\r\n\r\n            if (this.props.edit) {\r\n                result = (\r\n                    <div>\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='str'\r\n                            label='strength'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.str', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='dex'\r\n                            label='dexterity'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.dex', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='con'\r\n                            label='constitution'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.con', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='int'\r\n                            label='intelligence'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.int', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='wis'\r\n                            label='wisdom'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.wis', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='cha'\r\n                            label='charisma'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.cha', delta)}\r\n                        />\r\n                    </div>\r\n                );\r\n            } else {\r\n                result = (\r\n                    <div className='ability-scores' onClick={() => this.toggleAbilityScores()}>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>str</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.str\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.str)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>dex</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.dex\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.dex)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>con</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.con\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.con)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>int</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.int\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.int)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>wis</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.wis\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.wis)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>cha</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.cha\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.cha)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return result;\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combat, Combatant } from '../../models/combat';\r\nimport { Condition } from '../../models/condition';\r\n\r\nimport Expander from '../controls/expander';\r\nimport Spin from '../controls/spin';\r\n\r\ninterface Props {\r\n    combatant: Combatant;\r\n    combat: Combat;\r\n    nudgeConditionValue: (condition: Condition, field: string, delta: number) => void;\r\n    addCondition: () => void;\r\n    editCondition: (condition: Condition) => void;\r\n    removeCondition: (conditionID: string) => void;\r\n}\r\n\r\nexport default class ConditionsPanel extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const conditions = [];\r\n            if (this.props.combatant.conditions) {\r\n                for (let n = 0; n !== this.props.combatant.conditions.length; ++n) {\r\n                    const c = this.props.combatant.conditions[n];\r\n                    conditions.push(\r\n                        <ConditionPanel\r\n                            key={n}\r\n                            condition={c}\r\n                            combat={this.props.combat}\r\n                            nudgeConditionValue={(condition, type, delta) => this.props.nudgeConditionValue(condition, type, delta)}\r\n                            editCondition={condition => this.props.editCondition(condition)}\r\n                            removeCondition={conditionID => this.props.removeCondition(conditionID)}\r\n                        />\r\n                    );\r\n                }\r\n            }\r\n\r\n            return (\r\n                <div className='section'>\r\n                    {conditions}\r\n                    <button onClick={() => this.props.addCondition()}>add a condition</button>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface ConditionPanelProps {\r\n    condition: Condition;\r\n    combat: Combat;\r\n    nudgeConditionValue: (condition: Condition, field: string, delta: number) => void;\r\n    editCondition: (condition: Condition) => void;\r\n    removeCondition: (conditionID: string) => void;\r\n}\r\n\r\nclass ConditionPanel extends React.Component<ConditionPanelProps> {\r\n    public render() {\r\n        try {\r\n            let name: string = this.props.condition.name || 'condition';\r\n            if (this.props.condition.name === 'exhaustion') {\r\n                name += ' (' + this.props.condition.level + ')';\r\n            }\r\n            if ((this.props.condition.name === 'custom') && (this.props.condition.text !== null)) {\r\n                name = this.props.condition.text;\r\n            }\r\n\r\n            if (this.props.condition.duration !== null) {\r\n                name += ' ' + Utils.conditionDurationText(this.props.condition, this.props.combat);\r\n            }\r\n\r\n            const description = [];\r\n            if (this.props.condition.name === 'exhaustion') {\r\n                description.push(\r\n                    <div key='level' className='section'>\r\n                        <Spin\r\n                            source={this.props.condition}\r\n                            name='level'\r\n                            label='level'\r\n                            nudgeValue={delta => this.props.nudgeConditionValue(this.props.condition, 'level', delta)}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n            const text = Utils.conditionText(this.props.condition);\r\n            for (let n = 0; n !== text.length; ++n) {\r\n                description.push(<div key={n} className='section'>{text[n]}</div>);\r\n            }\r\n\r\n            return (\r\n                <Expander\r\n                    text={name}\r\n                    content={(\r\n                        <div>\r\n                            {description}\r\n                            <div className='divider' />\r\n                            <button onClick={() => this.props.editCondition(this.props.condition)}>edit</button>\r\n                            <button onClick={() => this.props.removeCondition(this.props.condition.id)}>remove</button>\r\n                        </div>\r\n                    )}\r\n                />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    content: string | JSX.Element | JSX.Element[];\r\n    white: boolean;\r\n}\r\n\r\nexport default class Note extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        white: false\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'descriptive';\r\n            if (this.props.white) {\r\n                style += ' white';\r\n            }\r\n\r\n            return (\r\n                <div className={style}>\r\n                    {this.props.content}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Showdown from 'showdown';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combatant } from '../../models/combat';\r\nimport { Monster, Trait, TRAIT_TYPES } from '../../models/monster-group';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport Expander from '../controls/expander';\r\nimport Note from '../panels/note';\r\n\r\nimport arrow from '../../resources/images/down-arrow-black.svg';\r\n\r\nconst showdown = new Showdown.Converter();\r\n\r\ninterface Props {\r\n    combatant: Monster | (Combatant & Monster);\r\n    mode: 'view' | 'edit' | 'template' | 'combat' | 'combat-special';\r\n    filter: string;\r\n    addTrait: (traitType: 'trait' | 'action' | 'legendary' | 'lair') => void;\r\n    copyTrait: (trait: Trait) => void;\r\n    removeTrait: (trait: Trait) => void;\r\n    changeValue: (trait: Trait, field: string, value: any) => void;\r\n    swapTraits: (t1: Trait, t2: Trait) => void;\r\n}\r\n\r\nexport default class TraitsPanel extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        mode: 'view',\r\n        filter: '',\r\n        addTrait: null,\r\n        copyTrait: null,\r\n        removeTrait: null,\r\n        changeValue: null,\r\n        swapTraits: null\r\n    };\r\n\r\n    private createTraitPanel(trait: Trait, prevTrait: Trait | null, nextTrait: Trait | null) {\r\n        return (\r\n            <TraitPanel\r\n                key={trait.id}\r\n                trait={trait}\r\n                mode={this.props.mode}\r\n                prevTrait={prevTrait}\r\n                nextTrait={nextTrait}\r\n                changeValue={(action, type, value) => this.props.changeValue(action, type, value)}\r\n                removeTrait={action => this.props.removeTrait(action)}\r\n                copyTrait={action => this.props.copyTrait(action)}\r\n                swapTraits={(t1, t2) => this.props.swapTraits(t1, t2)}\r\n            />\r\n        );\r\n    }\r\n\r\n    private createSection(traitsByType: { [id: string]: JSX.Element[] }, type: string, showInfo: boolean = false) {\r\n        const traits = traitsByType[type];\r\n        if (traits.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        let info: JSX.Element | null = null;\r\n        if (showInfo) {\r\n            switch (type) {\r\n                case 'legendary':\r\n                    /* tslint:disable:max-line-length */\r\n                    info = (\r\n                        <Note\r\n                            content={'one legendary action can be used at the end of each other combatant\\'s turn; spent actions are refreshed at the start of the creature\\'s turn'}\r\n                            white={true}\r\n                        />\r\n                    );\r\n                    /* tslint:enable:max-line-length */\r\n                    break;\r\n                case 'lair':\r\n                    info = (\r\n                        <Note\r\n                            content={'one lair action can be taken each round on initiative 20'}\r\n                            white={true}\r\n                        />\r\n                    );\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='section subheading'>{Utils.traitType(type, true)}</div>\r\n                {info}\r\n                {traits}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const traitsByType: { [id: string]: JSX.Element[] } = {};\r\n\r\n            TRAIT_TYPES.forEach(type => {\r\n                const traits = this.props.combatant.traits\r\n                    .filter(t => t.type === type)\r\n                    .filter(t => Utils.match(this.props.filter, t.name));\r\n\r\n                const list: JSX.Element[] = [];\r\n                for (let n = 0; n !== traits.length; ++n) {\r\n                    const trait = traits[n];\r\n                    const prevTrait = n !== 0 ? traits[n - 1] : null;\r\n                    const nextTrait = n !== traits.length - 1 ? traits[n + 1] : null;\r\n                    list.push(this.createTraitPanel(trait, prevTrait, nextTrait));\r\n                }\r\n\r\n                if (this.props.mode === 'edit') {\r\n                    list.push(\r\n                        <button key='add' onClick={() => this.props.addTrait(type as 'trait' | 'action' | 'legendary' | 'lair')}>\r\n                            add a new {Utils.traitType(type, false)}\r\n                        </button>\r\n                    );\r\n                }\r\n\r\n                traitsByType[type] = list;\r\n            });\r\n\r\n            if (this.props.mode === 'edit') {\r\n                return (\r\n                    <div className='row collapse'>\r\n                        <div className='columns small-4 medium-4 large-4 wide-column'>\r\n                            {this.createSection(traitsByType, 'trait')}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 wide-column'>\r\n                            {this.createSection(traitsByType, 'action')}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 wide-column'>\r\n                            {this.createSection(traitsByType, 'legendary')}\r\n                            <div className='divider' />\r\n                            {this.createSection(traitsByType, 'lair')}\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            if (this.props.combatant.traits.length === 0) {\r\n                return (\r\n                    <div><i>no traits or actions</i></div>\r\n                );\r\n            }\r\n\r\n            if (this.props.mode === 'combat') {\r\n                return (\r\n                    <div>\r\n                        {this.createSection(traitsByType, 'trait')}\r\n                        {this.createSection(traitsByType, 'action')}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            if (this.props.mode === 'combat-special') {\r\n                return (\r\n                    <div>\r\n                        {this.createSection(traitsByType, 'legendary', true)}\r\n                        {this.createSection(traitsByType, 'lair', true)}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div>\r\n                    {this.createSection(traitsByType, 'trait')}\r\n                    {this.createSection(traitsByType, 'action')}\r\n                    {this.createSection(traitsByType, 'legendary')}\r\n                    {this.createSection(traitsByType, 'lair')}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface TraitPanelProps {\r\n    trait: Trait;\r\n    mode: 'view' | 'edit' | 'template' | 'combat' | 'combat-special';\r\n    prevTrait: Trait | null;\r\n    nextTrait: Trait | null;\r\n    changeValue: (trait: Trait, field: string, value: any) => void;\r\n    copyTrait: (trait: Trait) => void;\r\n    removeTrait: (trait: Trait) => void;\r\n    swapTraits: (t1: Trait, t2: Trait) => void;\r\n}\r\n\r\nclass TraitPanel extends React.Component<TraitPanelProps> {\r\n    public render() {\r\n        try {\r\n            let maxUses = 0;\r\n            let heading = this.props.trait.name || 'unnamed ' + Utils.traitType(this.props.trait.type, false);\r\n\r\n            if (this.props.trait.usage) {\r\n                let used = '';\r\n                if (this.props.trait.usage.toLowerCase().startsWith('recharge ')) {\r\n                    maxUses = 1;\r\n                    if (this.props.trait.uses > 0) {\r\n                        used = '; used';\r\n                    }\r\n                }\r\n                const found = this.props.trait.usage.toLowerCase().match(/(\\d+)\\s*\\/\\s*day/);\r\n                if (found) {\r\n                    maxUses = parseInt(found[1], 10);\r\n                    if (this.props.trait.uses > 0) {\r\n                        used = '; used ' + this.props.trait.uses;\r\n                    }\r\n                }\r\n                heading += ' *(' + this.props.trait.usage + used + ')*';\r\n            }\r\n            if (this.props.trait.type === 'legendary') {\r\n                maxUses = 1;\r\n                if (this.props.trait.uses > 0) {\r\n                    heading += ' *(used)*';\r\n                }\r\n            }\r\n            const markdown = '**' + heading + '** ' + this.props.trait.text;\r\n\r\n            switch (this.props.mode) {\r\n                case 'view':\r\n                    return (\r\n                        <div key={this.props.trait.id} className='section trait'>\r\n                            <div dangerouslySetInnerHTML={{ __html: showdown.makeHtml(markdown) }} />\r\n                        </div>\r\n                    );\r\n                case 'edit':\r\n                    const details = (\r\n                        <div className='section'>\r\n                            <div className='row collapse'>\r\n                                <div className='columns small-6 medium-8 large-9'>\r\n                                    <input\r\n                                        type='text'\r\n                                        placeholder='name'\r\n                                        value={this.props.trait.name}\r\n                                        onChange={event => this.props.changeValue(this.props.trait, 'name', event.target.value)}\r\n                                    />\r\n                                    <input\r\n                                        type='text'\r\n                                        placeholder='usage'\r\n                                        value={this.props.trait.usage}\r\n                                        onChange={event => this.props.changeValue(this.props.trait, 'usage', event.target.value)}\r\n                                    />\r\n                                </div>\r\n                                <div className='columns small-6 medium-4 large-3'>\r\n                                    <div className='trait-ordering'>\r\n                                        <div className='vertical-center-outer'>\r\n                                            <div className='vertical-center-middle'>\r\n                                                <img\r\n                                                    className={this.props.prevTrait ? 'rotate' : 'rotate disabled'}\r\n                                                    src={arrow}\r\n                                                    alt='move up'\r\n                                                    onClick={() => this.props.swapTraits(this.props.trait, this.props.prevTrait as Trait)}\r\n                                                />\r\n                                                <img\r\n                                                    className={this.props.nextTrait ? '' : 'disabled'}\r\n                                                    src={arrow}\r\n                                                    alt='move down'\r\n                                                    onClick={() => this.props.swapTraits(this.props.trait, this.props.nextTrait as Trait)}\r\n                                                />\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <textarea\r\n                                placeholder='details'\r\n                                value={this.props.trait.text}\r\n                                onChange={event => this.props.changeValue(this.props.trait, 'text', event.target.value)}\r\n                            />\r\n                            <div className='divider' />\r\n                            <ConfirmButton text='delete' callback={() => this.props.removeTrait(this.props.trait)} />\r\n                        </div>\r\n                    );\r\n\r\n                    return (\r\n                        <Expander\r\n                            text={this.props.trait.name || 'unnamed ' + Utils.traitType(this.props.trait.type, false)}\r\n                            content={details}\r\n                        />\r\n                    );\r\n                case 'template':\r\n                    return (\r\n                        <div key={this.props.trait.id} className='section trait'>\r\n                            <div dangerouslySetInnerHTML={{ __html: showdown.makeHtml(markdown) }} />\r\n                            <button onClick={() => this.props.copyTrait(this.props.trait)}>copy</button>\r\n                        </div>\r\n                    );\r\n                case 'combat':\r\n                case 'combat-special':\r\n                    let style = '';\r\n                    let usage = null;\r\n                    if (maxUses > 0) {\r\n                        const isTapped = this.props.trait.uses >= maxUses;\r\n                        if (isTapped) {\r\n                            style = 'strikethrough';\r\n                            usage = <button onClick={() => this.props.changeValue(this.props.trait, 'uses', 0)}>recharge</button>;\r\n                        } else {\r\n                            usage = <button onClick={() => this.props.changeValue(this.props.trait, 'uses', this.props.trait.uses + 1)}>use</button>;\r\n                        }\r\n                    }\r\n                    return (\r\n                        <div key={this.props.trait.id} className='section trait'>\r\n                            <div className={style} dangerouslySetInnerHTML={{ __html: showdown.makeHtml(markdown) }} />\r\n                            {usage}\r\n                        </div>\r\n                    );\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    heading: string | JSX.Element | JSX.Element[] | null;\r\n    content: string | JSX.Element | JSX.Element[] | null;\r\n}\r\n\r\nexport default class InfoCard extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        heading: null,\r\n        content: null\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div className='card'>\r\n                    {this.props.heading}\r\n                    <div className='card-content'>\r\n                        {this.props.content}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combat, COMBAT_TAGS, Combatant } from '../../models/combat';\r\nimport { Condition } from '../../models/condition';\r\nimport { Encounter, EncounterSlot, EncounterWave } from '../../models/encounter';\r\nimport { Monster, MonsterGroup, Trait } from '../../models/monster-group';\r\n\r\nimport Checkbox from '../controls/checkbox';\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport ControlRow from '../controls/control-row';\r\nimport Dropdown from '../controls/dropdown';\r\nimport Expander from '../controls/expander';\r\nimport Radial from '../controls/radial';\r\nimport Selector from '../controls/selector';\r\nimport Spin from '../controls/spin';\r\nimport AbilityScorePanel from '../panels/ability-score-panel';\r\nimport ConditionsPanel from '../panels/conditions-panel';\r\nimport TraitsPanel from '../panels/traits-panel';\r\nimport InfoCard from './info-card';\r\n\r\nimport arrow from '../../resources/images/down-arrow.svg';\r\n\r\ninterface Props {\r\n    combatant: Monster | (Monster & Combatant);\r\n    mode: string;\r\n    library: MonsterGroup[];\r\n    changeValue: (monster: any, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, delta: number) => void;\r\n    // Library\r\n    filter: string;\r\n    editMonster: (monster: Monster) => void;\r\n    removeMonster: (monster: Monster) => void;\r\n    cloneMonster: (monster: Monster, name: string) => void;\r\n    moveToGroup: (monster: Monster, group: string) => void;\r\n    copyTrait: (trait: Trait) => void;\r\n    selectMonster: (monster: Monster) => void;\r\n    deselectMonster: (monster: Monster) => void;\r\n    // Encounter builder\r\n    encounter: Encounter;\r\n    slot: EncounterSlot;\r\n    addEncounterSlot: (monster: Monster, waveID: string | null) => void;\r\n    removeEncounterSlot: (slot: EncounterSlot) => void;\r\n    // Combat\r\n    combat: Combat;\r\n    makeCurrent: (combatant: Combatant) => void;\r\n    makeActive: (combatant: Combatant) => void;\r\n    makeDefeated: (combatant: Combatant) => void;\r\n    endTurn: (combatant: Combatant) => void;\r\n    mapAdd: (combatant: Combatant) => void;\r\n    mapMove: (combatant: Combatant, dir: string) => void;\r\n    mapRemove: (combatant: Combatant) => void;\r\n    removeCombatant: (combatant: Combatant) => void;\r\n    changeHP: (combatant: Combatant, hp: number, tempHP: number) => void;\r\n    addCondition: (combatant: Combatant) => void;\r\n    editCondition: (combatant: Combatant, condition: Condition) => void;\r\n    removeCondition: (combatant: Combatant, conditionID: string) => void;\r\n    nudgeConditionValue: (condition: Condition, field: string, delta: number) => void;\r\n    toggleTag: (combatant: Combatant, tag: string) => void;\r\n}\r\n\r\ninterface State {\r\n    showDetails: boolean;\r\n    cloneName: string;\r\n    combatMode: string;\r\n    damageOrHealing: number;\r\n}\r\n\r\nexport default class MonsterCard extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        library: null,\r\n        changeValue: null,\r\n        nudgeValue: null,\r\n        filter: '',\r\n        editMonster: null,\r\n        removeMonster: null,\r\n        cloneMonster: null,\r\n        moveToGroup: null,\r\n        copyTrait: null,\r\n        selectMonster: null,\r\n        deselectMonster: null,\r\n        encounter: null,\r\n        slot: null,\r\n        addEncounterSlot: null,\r\n        removeEncounterSlot: null,\r\n        combat: null,\r\n        makeCurrent: null,\r\n        makeActive: null,\r\n        makeDefeated: null,\r\n        endTurn: null,\r\n        mapAdd: null,\r\n        mapMove: null,\r\n        mapRemove: null,\r\n        removeCombatant: null,\r\n        changeHP: null,\r\n        addCondition: null,\r\n        editCondition: null,\r\n        removeCondition: null,\r\n        nudgeConditionValue: null,\r\n        toggleTag: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showDetails: false,\r\n            cloneName: props.combatant.name + ' copy',\r\n            combatMode: 'main',\r\n            damageOrHealing: 0\r\n        };\r\n    }\r\n\r\n    private setCloneName(cloneName: string) {\r\n        this.setState({\r\n            cloneName: cloneName\r\n        });\r\n    }\r\n\r\n    private toggleDetails() {\r\n        this.setState({\r\n            showDetails: !this.state.showDetails\r\n        });\r\n    }\r\n\r\n    private setDamage(value: number) {\r\n        this.setState({\r\n            damageOrHealing: value\r\n        });\r\n    }\r\n\r\n    private nudgeDamage(delta: number) {\r\n        this.setState({\r\n            damageOrHealing: Math.max(this.state.damageOrHealing + delta, 0)\r\n        });\r\n    }\r\n\r\n    private setCombatMode(mode: string) {\r\n        this.setState({\r\n            combatMode: mode\r\n        });\r\n    }\r\n\r\n    private heal() {\r\n        const combatant = this.props.combatant as Combatant;\r\n\r\n        let hp = (combatant.hp ? combatant.hp : 0) + this.state.damageOrHealing;\r\n        hp = Math.min(hp, this.props.combatant.hpMax);\r\n\r\n        this.setState({\r\n            damageOrHealing: 0\r\n        }, () => {\r\n            this.props.changeHP(combatant, hp, this.props.combatant.hpTemp);\r\n        });\r\n    }\r\n\r\n    private damage() {\r\n        const combatant = this.props.combatant as Combatant;\r\n\r\n        let hp = (combatant.hp ? combatant.hp : 0);\r\n        let temp = this.props.combatant.hpTemp;\r\n\r\n        let damage = this.state.damageOrHealing;\r\n\r\n        // Take damage off temp HP first\r\n        const val = Math.min(damage, temp);\r\n        damage -= val;\r\n        temp -= val;\r\n\r\n        // Take the rest off HP\r\n        hp -= damage;\r\n        hp = Math.max(hp, 0);\r\n\r\n        this.setState({\r\n            damageOrHealing: 0\r\n        }, () => {\r\n            this.props.changeHP(combatant, hp, temp);\r\n        });\r\n    }\r\n\r\n    private description() {\r\n        let sizeAndType = (this.props.combatant.size + ' ' + this.props.combatant.category).toLowerCase();\r\n        if (this.props.combatant.tag) {\r\n            sizeAndType += ' (' + this.props.combatant.tag.toLowerCase() + ')';\r\n        }\r\n        sizeAndType += ', ';\r\n\r\n        let align = '';\r\n        if (this.props.combatant.alignment) {\r\n            align = this.props.combatant.alignment.toLowerCase() + ', ';\r\n        }\r\n\r\n        const cr = 'cr ' + Utils.challenge(this.props.combatant.challenge);\r\n\r\n        return sizeAndType + align + cr;\r\n    }\r\n\r\n    private monsterIsInWave(wave: EncounterWave) {\r\n        return wave.slots.some(s => {\r\n            const group = this.props.library.find(g => g.monsters.includes(this.props.combatant));\r\n            return !!group && (s.monsterGroupName === group.name) && (s.monsterName === this.props.combatant.name);\r\n        });\r\n    }\r\n\r\n    private getHP() {\r\n        if (this.props.combatant.hitDice === 0) {\r\n            return this.props.combatant.hpMax;\r\n        }\r\n\r\n        const die = Utils.hitDieType(this.props.combatant.size);\r\n        const conMod = Utils.modifierValue(this.props.combatant.abilityScores.con) * this.props.combatant.hitDice;\r\n        let conModStr = '';\r\n        if (conMod > 0) {\r\n            conModStr = ' +' + conMod;\r\n        }\r\n        if (conMod < 0) {\r\n            conModStr = ' ' + conMod;\r\n        }\r\n        return this.props.combatant.hpMax + ' (' + this.props.combatant.hitDice + 'd' + die + conModStr + ')';\r\n    }\r\n\r\n    private getCombatControls() {\r\n        const combatant = this.props.combatant as Combatant;\r\n\r\n        const options = [];\r\n\r\n        const combatModes = ['main', 'hp', 'cond', 'map', 'adv'].map(m => {\r\n            return {\r\n                id: m,\r\n                text: m\r\n            };\r\n        });\r\n        if (this.props.mode.indexOf('tactical') === -1) {\r\n            // No combat map, so remove the map option\r\n            combatModes.splice(3, 1);\r\n        }\r\n        options.push(\r\n            <Selector\r\n                key='selector'\r\n                options={combatModes}\r\n                selectedID={this.state.combatMode}\r\n                select={option => this.setCombatMode(option)}\r\n            />\r\n        );\r\n        options.push(<div key='selector-sep' className='divider' />);\r\n\r\n        switch (this.state.combatMode) {\r\n            case 'main':\r\n                if (!combatant.pending && combatant.active && !combatant.defeated) {\r\n                    if (combatant.current) {\r\n                        options.push(<button key='endTurn' onClick={() => this.props.endTurn(combatant)}>end turn</button>);\r\n                        options.push(<button key='makeDefeated' onClick={() => this.props.makeDefeated(combatant)}>mark as defeated and end turn</button>);\r\n                    } else {\r\n                        options.push(<button key='makeCurrent' onClick={() => this.props.makeCurrent(combatant)}>start turn</button>);\r\n                        options.push(<button key='makeDefeated' onClick={() => this.props.makeDefeated(combatant)}>mark as defeated</button>);\r\n                    }\r\n                }\r\n                if (!combatant.pending && !combatant.active && combatant.defeated) {\r\n                    options.push(<button key='makeActive' onClick={() => this.props.makeActive(combatant)}>mark as active</button>);\r\n                }\r\n                options.push(<div key='tag-sep' className='divider' />);\r\n                options.push(\r\n                    <ControlRow\r\n                        key='tags'\r\n                        controls={COMBAT_TAGS.map(tag =>\r\n                            <Checkbox\r\n                                key={tag}\r\n                                label={tag}\r\n                                display='button'\r\n                                checked={combatant.tags.includes(tag)}\r\n                                changeValue={value => this.props.toggleTag(combatant, tag)}\r\n                            />\r\n                        )}\r\n                    />\r\n                );\r\n                break;\r\n            case 'hp':\r\n                options.push(\r\n                    <div key='hp'>\r\n                        <Spin\r\n                            source={this.props.combatant}\r\n                            name='hp'\r\n                            label='hit points'\r\n                            factors={[1, 10]}\r\n                            nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'hp', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant}\r\n                            name='hpTemp'\r\n                            label='temp hp'\r\n                            factors={[1, 10]}\r\n                            nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'hpTemp', delta)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <div className='section' style={{ display: this.props.combatant.damage.resist !== '' ? '' : 'none' }}>\r\n                            <b>damage resistances</b> {this.props.combatant.damage.resist}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.damage.vulnerable !== '' ? '' : 'none' }}>\r\n                            <b>damage vulnerabilities</b> {this.props.combatant.damage.vulnerable}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.damage.immune !== '' ? '' : 'none' }}>\r\n                            <b>damage immunities</b> {this.props.combatant.damage.immune}\r\n                        </div>\r\n                        <Spin\r\n                            source={this.state}\r\n                            name='damageOrHealing'\r\n                            factors={[1, 10]}\r\n                            nudgeValue={delta => this.nudgeDamage(delta)}\r\n                        />\r\n                        <ControlRow\r\n                            controls={[\r\n                                <button key='heal' onClick={() => this.heal()}>heal</button>,\r\n                                <button key='reset' onClick={() => this.setDamage(0)}>reset</button>,\r\n                                <button key='damage' onClick={() => this.damage()}>damage</button>\r\n                            ]}\r\n                            disabled={this.state.damageOrHealing === 0}\r\n                        />\r\n                    </div>\r\n                );\r\n                break;\r\n            case 'cond':\r\n                options.push(\r\n                    <div key='conditions'>\r\n                        <div className='section' style={{ display: this.props.combatant.conditionImmunities !== '' ? '' : 'none' }}>\r\n                            <b>condition immunities</b> {this.props.combatant.conditionImmunities}\r\n                        </div>\r\n                        <ConditionsPanel\r\n                            combatant={this.props.combatant as Combatant}\r\n                            combat={this.props.combat}\r\n                            addCondition={() => this.props.addCondition(this.props.combatant as Combatant)}\r\n                            editCondition={condition => this.props.editCondition(this.props.combatant as Combatant, condition)}\r\n                            removeCondition={conditionID => this.props.removeCondition(this.props.combatant as Combatant, conditionID)}\r\n                            nudgeConditionValue={(condition, type, delta) => this.props.nudgeConditionValue(condition, type, delta)}\r\n                        />\r\n                    </div>\r\n                );\r\n                break;\r\n            case 'map':\r\n                if (this.props.mode.indexOf('on-map') !== -1) {\r\n                    options.push(\r\n                        <div key='mapMove' className='section centered'>\r\n                            <Radial\r\n                                direction='eight'\r\n                                click={dir => this.props.mapMove(combatant, dir)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                    options.push(<div key='move-sep' className='divider' />);\r\n                    options.push(\r\n                        <Spin\r\n                            key='altitude'\r\n                            source={combatant}\r\n                            name='altitude'\r\n                            label='altitude'\r\n                            display={value => value + ' ft.'}\r\n                            nudgeValue={delta => this.props.nudgeValue(combatant, 'altitude', delta * 5)}\r\n                        />\r\n                    );\r\n                    let auraDetails = null;\r\n                    if (combatant.aura.size > 0) {\r\n                        const auraStyleOptions = [\r\n                            {\r\n                                id: 'square',\r\n                                text: 'square'\r\n                            },\r\n                            {\r\n                                id: 'rounded',\r\n                                text: 'rounded'\r\n                            },\r\n                            {\r\n                                id: 'circle',\r\n                                text: 'circle'\r\n                            }\r\n                        ];\r\n                        auraDetails = (\r\n                            <div>\r\n                                <Selector\r\n                                    options={auraStyleOptions}\r\n                                    selectedID={combatant.aura.style}\r\n                                    select={optionID => this.props.changeValue(combatant.aura, 'style', optionID)}\r\n                                />\r\n                                <input\r\n                                    type='color'\r\n                                    value={combatant.aura.color}\r\n                                    onChange={event => this.props.changeValue(combatant.aura, 'color', event.target.value)}\r\n                                />\r\n                            </div>\r\n                        );\r\n                    }\r\n                    options.push(\r\n                        <Expander\r\n                            key='aura'\r\n                            text='aura'\r\n                            content={(\r\n                                <div>\r\n                                    <Spin\r\n                                        source={combatant.aura}\r\n                                        name='size'\r\n                                        label='size'\r\n                                        display={value => value + ' ft.'}\r\n                                        nudgeValue={delta => this.props.nudgeValue(combatant.aura, 'size', delta * 5)}\r\n                                    />\r\n                                    {auraDetails}\r\n                                </div>\r\n                            )}\r\n                        />\r\n                    );\r\n                    options.push(<button key='mapRemove' onClick={() => this.props.mapRemove(combatant)}>remove from map</button>);\r\n                }\r\n                if (this.props.mode.indexOf('off-map') !== -1) {\r\n                    options.push(<button key='mapAdd' onClick={() => this.props.mapAdd(combatant)}>add to map</button>);\r\n                }\r\n                break;\r\n            case 'adv':\r\n                if (!combatant.current) {\r\n                    options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                }\r\n                if (!combatant.pending) {\r\n                    options.push(\r\n                        <Expander\r\n                            key='init'\r\n                            text='change initiative score'\r\n                            content={(\r\n                                <div>\r\n                                    <Spin\r\n                                        source={this.props.combatant}\r\n                                        name='initiative'\r\n                                        label='initiative'\r\n                                        nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'initiative', delta)}\r\n                                    />\r\n                                </div>\r\n                            )}\r\n                        />\r\n                    );\r\n                }\r\n                options.push(\r\n                    <Expander\r\n                        key='rename'\r\n                        text='change name'\r\n                        content={(\r\n                            <div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={combatant.displayName}\r\n                                    onChange={event => this.props.changeValue(this.props.combatant, 'displayName', event.target.value)}\r\n                                />\r\n                            </div>\r\n                        )}\r\n                    />\r\n                );\r\n                break;\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='combat-options-panel'>\r\n                    {options}\r\n                </div>\r\n                <div className='divider' />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const options = [];\r\n            if (this.props.mode.indexOf('no-buttons') === -1) {\r\n                if (this.props.mode.indexOf('view') !== -1) {\r\n                    if (this.props.mode.indexOf('editable') !== -1) {\r\n                        options.push(\r\n                            <button key='edit' onClick={() => this.props.editMonster(this.props.combatant)}>edit monster</button>\r\n                        );\r\n\r\n                        options.push(\r\n                            <Expander\r\n                                key='clone'\r\n                                text='clone monster'\r\n                                content={\r\n                                    <div>\r\n                                        <input\r\n                                            type='text'\r\n                                            placeholder='monster name'\r\n                                            value={this.state.cloneName}\r\n                                            onChange={event => this.setCloneName(event.target.value)}\r\n                                        />\r\n                                        <button onClick={() => this.props.cloneMonster(this.props.combatant, this.state.cloneName)}>create copy</button>\r\n                                    </div>\r\n                                }\r\n                            />\r\n                        );\r\n\r\n                        const groupOptions: { id: string, text: string }[] = [];\r\n                        this.props.library.forEach(group => {\r\n                            if (group.monsters.indexOf(this.props.combatant) === -1) {\r\n                                groupOptions.push({\r\n                                    id: group.id,\r\n                                    text: group.name\r\n                                });\r\n                            }\r\n                        });\r\n                        options.push(\r\n                            <Dropdown\r\n                                key='move'\r\n                                options={groupOptions}\r\n                                placeholder='move to group...'\r\n                                select={optionID => this.props.moveToGroup(this.props.combatant, optionID)}\r\n                            />\r\n                        );\r\n\r\n                        options.push(<ConfirmButton key='remove' text='delete monster' callback={() => this.props.removeMonster(this.props.combatant)} />);\r\n                    }\r\n                    if (this.props.mode.indexOf('encounter') !== -1) {\r\n                        if (this.props.slot) {\r\n                            // This card is in an encounter or a wave\r\n                            options.push(\r\n                                <button key='remove' onClick={() => this.props.removeEncounterSlot(this.props.slot)}>\r\n                                    remove from encounter\r\n                                </button>\r\n                            );\r\n                        } else {\r\n                            let canAdd = false;\r\n                            // This card is in the library list\r\n                            if (!this.monsterIsInWave(this.props.encounter)) {\r\n                                options.push(\r\n                                    <button key='add encounter' onClick={() => this.props.addEncounterSlot(this.props.combatant, null)}>\r\n                                        add to encounter\r\n                                    </button>\r\n                                );\r\n                                canAdd = true;\r\n                            }\r\n                            this.props.encounter.waves.forEach(wave => {\r\n                                if (!this.monsterIsInWave(wave)) {\r\n                                    options.push(\r\n                                        <button key={'add ' + wave.id} onClick={() => this.props.addEncounterSlot(this.props.combatant, wave.id)}>\r\n                                            add to {wave.name}\r\n                                        </button>\r\n                                    );\r\n                                    canAdd = true;\r\n                                }\r\n                            });\r\n                            // If we can't add it anywhere, don't show it\r\n                            if (!canAdd) {\r\n                                return (\r\n                                    <InfoCard\r\n                                        heading={\r\n                                            (\r\n                                                <div className='heading'>\r\n                                                    <div className='title'>{this.props.combatant.name}</div>\r\n                                                </div>\r\n                                            )\r\n                                        }\r\n                                        content={\r\n                                            (\r\n                                                <div className='section centered'>\r\n                                                    <i>this monster is already part of this encounter</i>\r\n                                                </div>\r\n                                            )\r\n                                        }\r\n                                    />\r\n                                );\r\n                            }\r\n                        }\r\n                    }\r\n                    if (this.props.mode.indexOf('candidate') !== -1) {\r\n                        if (this.props.mode.indexOf('selected') === -1) {\r\n                            options.push(\r\n                                <button key='select' onClick={() => this.props.selectMonster(this.props.combatant)}>select monster</button>\r\n                            );\r\n                        } else {\r\n                            options.push(\r\n                                <button key='deselect' onClick={() => this.props.deselectMonster(this.props.combatant)}>deselect monster</button>\r\n                            );\r\n                        }\r\n                    }\r\n                }\r\n                if (this.props.mode.indexOf('template') !== -1) {\r\n                    // None\r\n                }\r\n            }\r\n\r\n            let combat = null;\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                combat = this.getCombatControls();\r\n            }\r\n\r\n            let stats = null;\r\n            if (this.props.mode.indexOf('view') !== -1) {\r\n                let slotSection = null;\r\n                if (this.props.slot) {\r\n                    slotSection = (\r\n                        <div>\r\n                            <div className='divider' />\r\n                            <Spin\r\n                                source={this.props.slot}\r\n                                name='count'\r\n                                label='count'\r\n                                nudgeValue={delta => this.props.nudgeValue(this.props.slot, 'count', delta)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                let details = null;\r\n                if (this.state.showDetails || (this.props.mode.indexOf('generated') !== -1)) {\r\n                    details = (\r\n                        <div>\r\n                            <div className='divider' />\r\n                            <div className='section'>\r\n                                <b>ac</b> {this.props.combatant.ac}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.hpMax !== 0 ? '' : 'none' }}>\r\n                                <b>hp</b> {this.getHP()}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.speed !== '' ? '' : 'none' }}>\r\n                                <b>speed</b> {this.props.combatant.speed}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <AbilityScorePanel combatant={this.props.combatant} />\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.savingThrows !== '' ? '' : 'none' }}>\r\n                                <b>saving throws</b> {this.props.combatant.savingThrows}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.skills !== '' ? '' : 'none' }}>\r\n                                <b>skills</b> {this.props.combatant.skills}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.damage.resist !== '' ? '' : 'none' }}>\r\n                                <b>damage resistances</b> {this.props.combatant.damage.resist}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.damage.vulnerable !== '' ? '' : 'none' }}>\r\n                                <b>damage vulnerabilities</b> {this.props.combatant.damage.vulnerable}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.damage.immune !== '' ? '' : 'none' }}>\r\n                                <b>damage immunities</b> {this.props.combatant.damage.immune}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.conditionImmunities !== '' ? '' : 'none' }}>\r\n                                <b>condition immunities</b> {this.props.combatant.conditionImmunities}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.senses !== '' ? '' : 'none' }}>\r\n                                <b>senses</b> {this.props.combatant.senses}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.languages !== '' ? '' : 'none' }}>\r\n                                <b>languages</b> {this.props.combatant.languages}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.equipment !== '' ? '' : 'none' }}>\r\n                                <b>equipment</b> {this.props.combatant.equipment}\r\n                            </div>\r\n                            <div className='divider' />\r\n                            <TraitsPanel combatant={this.props.combatant} />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                stats = (\r\n                    <div className='stats'>\r\n                        <div className='section centered'>\r\n                            <i>{this.description()}</i>\r\n                        </div>\r\n                        {slotSection}\r\n                        {details}\r\n                    </div>\r\n                );\r\n            }\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                stats = (\r\n                    <div className='stats'>\r\n                        <div className='section centered'>\r\n                            <i>{this.description()}</i>\r\n                        </div>\r\n                        <div className='divider' />\r\n                        {combat}\r\n                        <div className='section'>\r\n                            <AbilityScorePanel combatant={this.props.combatant} />\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.ac !== 0 ? '' : 'none' }}>\r\n                            <b>ac</b> {this.props.combatant.ac}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.savingThrows !== '' ? '' : 'none' }}>\r\n                            <b>saving throws</b> {this.props.combatant.savingThrows}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.skills !== '' ? '' : 'none' }}>\r\n                            <b>skills</b> {this.props.combatant.skills}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.speed !== '' ? '' : 'none' }}>\r\n                            <b>speed</b> {this.props.combatant.speed}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.senses !== '' ? '' : 'none' }}>\r\n                            <b>senses</b> {this.props.combatant.senses}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.damage.resist !== '' ? '' : 'none' }}>\r\n                            <b>damage resistances</b> {this.props.combatant.damage.resist}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.damage.vulnerable !== '' ? '' : 'none' }}>\r\n                            <b>damage vulnerabilities</b> {this.props.combatant.damage.vulnerable}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.damage.immune !== '' ? '' : 'none' }}>\r\n                            <b>damage immunities</b> {this.props.combatant.damage.immune}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.conditionImmunities !== '' ? '' : 'none' }}>\r\n                            <b>condition immunities</b> {this.props.combatant.conditionImmunities}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.languages !== '' ? '' : 'none' }}>\r\n                            <b>languages</b> {this.props.combatant.languages}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.equipment !== '' ? '' : 'none' }}>\r\n                            <b>equipment</b> {this.props.combatant.equipment}\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <TraitsPanel\r\n                            combatant={this.props.combatant}\r\n                            mode='combat'\r\n                            changeValue={(trait, field, value) => this.props.changeValue(trait, field, value)}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n            if (this.props.mode.indexOf('template') !== -1) {\r\n                if (this.props.mode.indexOf('overview') !== -1) {\r\n                    stats = (\r\n                        <div>\r\n                            <div className='section centered'>\r\n                                <i>{this.description()}</i>\r\n                            </div>\r\n                            <div className='divider' />\r\n                            <div className='section'>\r\n                                <b>speed</b> {this.props.combatant.speed || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>senses</b> {this.props.combatant.senses || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>languages</b> {this.props.combatant.languages || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>equipment</b> {this.props.combatant.equipment || '-'}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf('abilities') !== -1) {\r\n                    stats = (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <AbilityScorePanel combatant={this.props.combatant} />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>saving throws</b> {this.props.combatant.savingThrows || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>skills</b> {this.props.combatant.skills || '-'}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf('cbt-stats') !== -1) {\r\n                    stats = (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <b>ac</b> {this.props.combatant.ac}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>hp</b> {this.getHP()}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>damage immunity</b> {this.props.combatant.damage.immune || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>damage resistance</b> {this.props.combatant.damage.resist || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>damage vulnerability</b> {this.props.combatant.damage.vulnerable || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>condition immunities</b> {this.props.combatant.conditionImmunities || '-'}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf('actions') !== -1) {\r\n                    stats = (\r\n                        <TraitsPanel\r\n                            combatant={this.props.combatant}\r\n                            mode='template'\r\n                            filter={this.props.filter}\r\n                            copyTrait={trait => this.props.copyTrait(trait)}\r\n                        />\r\n                    );\r\n                }\r\n            }\r\n\r\n            let toggle = null;\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                // Don't show toggle button for combatant\r\n            } else if (this.props.mode.indexOf('template') !== -1) {\r\n                // Don't show toggle button for template\r\n            } else if (this.props.mode.indexOf('view generated') !== -1) {\r\n                // Don't show toggle button for generated monster\r\n            } else {\r\n                const imageStyle = this.state.showDetails ? 'image rotate' : 'image';\r\n                toggle = (\r\n                    <img className={imageStyle} src={arrow} alt='arrow' onClick={() => this.toggleDetails()} />\r\n                );\r\n            }\r\n\r\n            const name = (this.props.combatant as Combatant ? (this.props.combatant as Combatant).displayName : null)\r\n                || this.props.combatant.name\r\n                || 'unnamed monster';\r\n\r\n            return (\r\n                <div className='card monster'>\r\n                    <div className='heading'>\r\n                        <div className='title'>{name}</div>\r\n                        {toggle}\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        {stats}\r\n                        <div style={{ display: options.length > 0 ? '' : 'none' }}>\r\n                            <div className='divider' />\r\n                            <div className='section'>{options}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { COMBAT_TAGS, Combatant } from '../../models/combat';\r\nimport { PC } from '../../models/party';\r\n\r\nimport Checkbox from '../controls/checkbox';\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport ControlRow from '../controls/control-row';\r\nimport Expander from '../controls/expander';\r\nimport Radial from '../controls/radial';\r\nimport Selector from '../controls/selector';\r\nimport Spin from '../controls/spin';\r\n\r\ninterface Props {\r\n    combatant: PC | (PC & Combatant);\r\n    mode: string;\r\n    changeValue: (pc: any, field: string, value: any) => void;\r\n    nudgeValue: (pc: any, field: string, delta: number) => void;\r\n    removePC: (pc: PC) => void;\r\n    editPC: (pc: PC) => void;\r\n    // Combat\r\n    makeCurrent: (combatant: Combatant) => void;\r\n    makeActive: (combatant: Combatant) => void;\r\n    makeDefeated: (combatant: Combatant) => void;\r\n    endTurn: (combatant: Combatant) => void;\r\n    mapAdd: (combatant: Combatant) => void;\r\n    mapMove: (combatant: Combatant, dir: string) => void;\r\n    mapRemove: (combatant: Combatant) => void;\r\n    removeCombatant: (combatant: Combatant) => void;\r\n    toggleTag: (combatant: Combatant, tag: string) => void;\r\n}\r\n\r\ninterface State {\r\n    combatMode: string;\r\n}\r\n\r\nexport default class PCCard extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        removePC: null,\r\n        editPC: null,\r\n        makeCurrent: null,\r\n        makeActive: null,\r\n        makeDefeated: null,\r\n        endTurn: null,\r\n        mapAdd: null,\r\n        mapMove: null,\r\n        mapRemove: null,\r\n        removeCombatant: null,\r\n        toggleTag: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            combatMode: 'main'\r\n        };\r\n    }\r\n\r\n    private setCombatMode(mode: string) {\r\n        this.setState({\r\n            combatMode: mode\r\n        });\r\n    }\r\n\r\n    private getCombatControls() {\r\n        const combatant = this.props.combatant as Combatant;\r\n\r\n        const options = [];\r\n\r\n        const combatModes = ['main', 'map', 'adv'].map(m => {\r\n            return {\r\n                id: m,\r\n                text: m\r\n            };\r\n        });\r\n        if (this.props.mode.indexOf('tactical') === -1) {\r\n            // No combat map, so remove the map option\r\n            combatModes.splice(1, 1);\r\n        }\r\n        options.push(\r\n            <Selector\r\n                key='selector'\r\n                options={combatModes}\r\n                selectedID={this.state.combatMode}\r\n                select={option => this.setCombatMode(option)}\r\n            />\r\n        );\r\n        options.push(<div key='selector-sep' className='divider' />);\r\n\r\n        switch (this.state.combatMode) {\r\n            case 'main':\r\n                if (!combatant.pending && combatant.active && !combatant.defeated) {\r\n                    if (combatant.current) {\r\n                        options.push(<button key='endTurn' onClick={() => this.props.endTurn(combatant)}>end turn</button>);\r\n                        options.push(<button key='makeDefeated' onClick={() => this.props.makeDefeated(combatant)}>mark as defeated and end turn</button>);\r\n                    } else {\r\n                        options.push(<button key='makeCurrent' onClick={() => this.props.makeCurrent(combatant)}>start turn</button>);\r\n                        options.push(<button key='makeDefeated' onClick={() => this.props.makeDefeated(combatant)}>mark as defeated</button>);\r\n                    }\r\n                }\r\n                if (!combatant.pending && !combatant.active && combatant.defeated) {\r\n                    options.push(<button key='makeActive' onClick={() => this.props.makeActive(combatant)}>mark as active</button>);\r\n                }\r\n                options.push(<div key='tag-sep' className='divider' />);\r\n                options.push(\r\n                    <ControlRow\r\n                        key='tags'\r\n                        controls={COMBAT_TAGS.map(tag =>\r\n                            <Checkbox\r\n                                key={tag}\r\n                                label={tag}\r\n                                display='button'\r\n                                checked={combatant.tags.includes(tag)}\r\n                                changeValue={value => this.props.toggleTag(combatant, tag)}\r\n                            />\r\n                        )}\r\n                    />\r\n                );\r\n                break;\r\n            case 'map':\r\n                if (this.props.mode.indexOf('on-map') !== -1) {\r\n                    options.push(\r\n                        <div key='mapMove' className='section centered'>\r\n                            <Radial\r\n                                direction='eight'\r\n                                click={dir => this.props.mapMove(combatant, dir)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                    options.push(<div key='move-sep' className='divider' />);\r\n                    options.push(\r\n                        <Spin\r\n                            key='altitude'\r\n                            source={this.props.combatant}\r\n                            name='altitude'\r\n                            label='altitude'\r\n                            display={value => value + ' ft.'}\r\n                            nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'altitude', delta * 5)}\r\n                        />\r\n                    );\r\n                    let auraDetails = null;\r\n                    if (combatant.aura.size > 0) {\r\n                        const auraStyleOptions = [\r\n                            {\r\n                                id: 'square',\r\n                                text: 'square'\r\n                            },\r\n                            {\r\n                                id: 'rounded',\r\n                                text: 'rounded'\r\n                            },\r\n                            {\r\n                                id: 'circle',\r\n                                text: 'circle'\r\n                            }\r\n                        ];\r\n                        auraDetails = (\r\n                            <div>\r\n                                <Selector\r\n                                    options={auraStyleOptions}\r\n                                    selectedID={combatant.aura.style}\r\n                                    select={optionID => this.props.changeValue(combatant.aura, 'style', optionID)}\r\n                                />\r\n                                <input\r\n                                    type='color'\r\n                                    value={combatant.aura.color}\r\n                                    onChange={event => this.props.changeValue(combatant.aura, 'color', event.target.value)}\r\n                                />\r\n                            </div>\r\n                        );\r\n                    }\r\n                    options.push(\r\n                        <Expander\r\n                            key='aura'\r\n                            text='aura'\r\n                            content={(\r\n                                <div>\r\n                                    <Spin\r\n                                        source={combatant.aura}\r\n                                        name='size'\r\n                                        label='size'\r\n                                        display={value => value + ' ft.'}\r\n                                        nudgeValue={delta => this.props.nudgeValue(combatant.aura, 'size', delta * 5)}\r\n                                    />\r\n                                    {auraDetails}\r\n                                </div>\r\n                            )}\r\n                        />\r\n                    );\r\n                    options.push(<button key='mapRemove' onClick={() => this.props.mapRemove(combatant)}>remove from map</button>);\r\n                }\r\n                if (this.props.mode.indexOf('off-map') !== -1) {\r\n                    options.push(<button key='mapAdd' onClick={() => this.props.mapAdd(combatant)}>add to map</button>);\r\n                }\r\n                break;\r\n            case 'adv':\r\n                if (!combatant.current) {\r\n                    options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                }\r\n                if (!combatant.pending) {\r\n                    options.push(\r\n                        <Expander\r\n                            key='init'\r\n                            text='change initiative score'\r\n                            content={(\r\n                                <div>\r\n                                    <Spin\r\n                                        source={this.props.combatant}\r\n                                        name='initiative'\r\n                                        label='initiative'\r\n                                        nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'initiative', delta)}\r\n                                    />\r\n                                </div>\r\n                            )}\r\n                        />\r\n                    );\r\n                }\r\n                break;\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='combat-options-panel'>\r\n                    {options}\r\n                </div>\r\n                <div className='divider' />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const options = [];\r\n            if (this.props.mode.indexOf('edit') !== -1) {\r\n                options.push(<button key='edit' onClick={() => this.props.editPC(this.props.combatant)}>edit pc</button>);\r\n                if (this.props.combatant.active) {\r\n                    options.push(\r\n                        <button key='toggle-active' onClick={() => this.props.changeValue(this.props.combatant, 'active', false)}>\r\n                            mark pc as inactive\r\n                        </button>\r\n                    );\r\n                } else {\r\n                    options.push(\r\n                        <button key='toggle-active' onClick={() => this.props.changeValue(this.props.combatant, 'active', true)}>\r\n                            mark pc as active\r\n                        </button>\r\n                    );\r\n                }\r\n                options.push(<ConfirmButton key='remove' text='delete pc' callback={() => this.props.removePC(this.props.combatant)} />);\r\n            }\r\n\r\n            let combat = null;\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                combat = this.getCombatControls();\r\n            }\r\n\r\n            const desc = (this.props.combatant.race || 'unknown race')\r\n                + ' ' + (this.props.combatant.classes || 'unknown class')\r\n                + ', level ' + this.props.combatant.level;\r\n\r\n            const name = (this.props.combatant as Combatant ? (this.props.combatant as Combatant).displayName : null)\r\n                || this.props.combatant.name\r\n                || 'unnamed pc';\r\n\r\n            return (\r\n                <div className='card pc'>\r\n                    <div className='heading'>\r\n                        <div className='title'>{name}</div>\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        <div className='stats'>\r\n                            <div className='section centered lowercase'>\r\n                                <i>{desc}</i>\r\n                                <div style={{ display: this.props.combatant.url ? '' : 'none' }}>\r\n                                    <a href={this.props.combatant.url} target='_blank' rel='noopener noreferrer'>d&d beyond sheet</a>\r\n                                </div>\r\n                            </div>\r\n                            <div className='divider' />\r\n                            {combat}\r\n                            <div className='section subheading'>languages</div>\r\n                            <div className='section'>\r\n                                {this.props.combatant.languages || '-'}\r\n                            </div>\r\n                            <div className='section subheading'>passive skills</div>\r\n                            <div className='section'>\r\n                                <div><b>insight</b> {this.props.combatant.passiveInsight}</div>\r\n                                <div><b>investigation</b> {this.props.combatant.passiveInvestigation}</div>\r\n                                <div><b>perception</b> {this.props.combatant.passivePerception}</div>\r\n                            </div>\r\n                        </div>\r\n                        <div style={{ display: options.length > 0 ? '' : 'none' }}>\r\n                            <div className='divider' />\r\n                            <div className='section'>\r\n                                {options}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Combatant } from '../../models/combat';\r\nimport { Monster } from '../../models/monster-group';\r\n\r\ninterface Props {\r\n    combatant: Combatant & Monster;\r\n}\r\n\r\nexport default class HitPointGauge extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const hpCurrent = this.props.combatant.hp || 0;\r\n            const hpMax = this.props.combatant.hpMax + this.props.combatant.hpTemp;\r\n            const hpBloodied = this.props.combatant.hpMax / 2;\r\n            const hpWidth = 100 * Math.max(hpCurrent, 0) / hpMax;\r\n\r\n            let style = '';\r\n            if (hpCurrent >= this.props.combatant.hpMax) {\r\n                style = 'bar unhurt';\r\n            } else if (hpCurrent <= hpBloodied) {\r\n                style = 'bar bloodied';\r\n            } else {\r\n                style = 'bar injured';\r\n            }\r\n\r\n            let hpTempBar = null;\r\n            if (this.props.combatant.hpTemp > 0) {\r\n                const hpTempWidth = 100 * Math.max(this.props.combatant.hpTemp, 0) / hpMax;\r\n                hpTempBar = <div className='bar temp' style={{ width: hpTempWidth + '%' }} />;\r\n            }\r\n\r\n            return (\r\n                <div className='hp-gauge'>\r\n                    <div className={style} style={{ width: hpWidth + '%' }} />\r\n                    {hpTempBar}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combatant } from '../../models/combat';\r\nimport { Map, MapItem } from '../../models/map-folio';\r\nimport { Monster } from '../../models/monster-group';\r\nimport { PC } from '../../models/party';\r\n\r\nimport HitPointGauge from './hit-point-gauge';\r\n\r\ninterface Props {\r\n    map: Map;\r\n    mode: 'edit' | 'thumbnail' | 'combat';\r\n    combatants: ((Combatant & PC) | (Combatant & Monster))[];\r\n    showOverlay: boolean;\r\n    selectedItemID: string;\r\n    setSelectedItemID: (itemID: string | null) => void;\r\n    gridSquareClicked: (x: number, y: number) => void;\r\n}\r\n\r\ninterface MapDimensions {\r\n    minX: number;\r\n    maxX: number;\r\n    minY: number;\r\n    maxY: number;\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\ninterface StyleData {\r\n    left: string;\r\n    top: string;\r\n    width: string;\r\n    height: string;\r\n    backgroundColor?: string;\r\n}\r\n\r\nexport default class MapPanel extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        combatants: null,\r\n        showOverlay: false,\r\n        selectedItemID: null,\r\n        setSelectedItemID: null,\r\n        gridSquareClicked: null\r\n    };\r\n\r\n    private getMapDimensions(border: number): MapDimensions | null {\r\n        let dimensions: MapDimensions | null = null;\r\n\r\n        this.props.map.items.filter(i => {\r\n            if (this.props.mode === 'edit') {\r\n                return i.type === 'tile';\r\n            }\r\n            return true;\r\n        }).forEach(i => {\r\n            if (!dimensions) {\r\n                dimensions = {\r\n                    minX: i.x,\r\n                    maxX: i.x + i.width - 1,\r\n                    minY: i.y,\r\n                    maxY: i.y + i.height - 1,\r\n                    width: 0,\r\n                    height: 0\r\n                };\r\n            } else {\r\n                dimensions.minX = Math.min(dimensions.minX, i.x);\r\n                dimensions.maxX = Math.max(dimensions.maxX, i.x + i.width - 1);\r\n                dimensions.minY = Math.min(dimensions.minY, i.y);\r\n                dimensions.maxY = Math.max(dimensions.maxY, i.y + i.height - 1);\r\n            }\r\n        });\r\n\r\n        if (this.props.combatants) {\r\n            this.props.combatants.filter(c => c.aura.size > 0).forEach(c => {\r\n                const mi = this.props.map.items.find(i => i.id === c.id);\r\n                if (mi) {\r\n                    const sizeInSquares = c.aura.size / 5;\r\n                    let miniSize = 1;\r\n                    const m = c as Monster;\r\n                    if (m) {\r\n                        miniSize = Utils.miniSize(m.size);\r\n                    }\r\n                    const minX = mi.x - sizeInSquares;\r\n                    const maxX = mi.x + (miniSize - 1) + sizeInSquares;\r\n                    const minY = mi.y - sizeInSquares;\r\n                    const maxY = mi.y + (miniSize - 1) + sizeInSquares;\r\n\r\n                    if (dimensions) {\r\n                        dimensions.minX = Math.min(dimensions.minX, minX);\r\n                        dimensions.maxX = Math.max(dimensions.maxX, maxX);\r\n                        dimensions.minY = Math.min(dimensions.minY, minY);\r\n                        dimensions.maxY = Math.max(dimensions.maxY, maxY);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        if (!dimensions) {\r\n            // The map is blank\r\n            if (this.props.mode === 'thumbnail') {\r\n                return null;\r\n            }\r\n\r\n            dimensions = {\r\n                minX: 0,\r\n                maxX: 0,\r\n                minY: 0,\r\n                maxY: 0,\r\n                width: 0,\r\n                height: 0\r\n            };\r\n        }\r\n\r\n        // Apply the border\r\n        dimensions.minX -= border;\r\n        dimensions.maxX += border;\r\n        dimensions.minY -= border;\r\n        dimensions.maxY += border;\r\n\r\n        // Set width and height\r\n        dimensions.width = 1 + dimensions.maxX - dimensions.minX;\r\n        dimensions.height = 1 + dimensions.maxY - dimensions.minY;\r\n\r\n        return dimensions;\r\n    }\r\n\r\n    private getSideLength(): number {\r\n        switch (this.props.mode) {\r\n            case 'thumbnail':\r\n                return 5;\r\n            case 'edit':\r\n            case 'combat':\r\n                return 25;\r\n            default:\r\n                return 5;\r\n        }\r\n    }\r\n\r\n    private getStyle(x: number, y: number, width: number, height: number, mapDimensions: MapDimensions): StyleData {\r\n        const sideLength = this.getSideLength();\r\n\r\n        return {\r\n            left: 'calc(' + sideLength + 'px * ' + (x - mapDimensions.minX) + ')',\r\n            top: 'calc(' + sideLength + 'px * ' + (y - mapDimensions.minY) + ')',\r\n            width: 'calc((' + sideLength + 'px * ' + width + ') + 1px)',\r\n            height: 'calc((' + sideLength + 'px * ' + height + ') + 1px)'\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const border = (this.props.mode === 'edit') ? 2 : 0;\r\n            const mapDimensions = this.getMapDimensions(border);\r\n            if (!mapDimensions) {\r\n                return (\r\n                    <div>(blank map)</div>\r\n                );\r\n            }\r\n\r\n            // Draw the grid squares\r\n            const grid = [];\r\n            if (this.props.mode === 'edit') {\r\n                for (let y = mapDimensions.minY; y !== mapDimensions.maxY + 1; ++y) {\r\n                    for (let x = mapDimensions.minX; x !== mapDimensions.maxX + 1; ++x) {\r\n                        const gridStyle = this.getStyle(x, y, 1, 1, mapDimensions);\r\n                        grid.push(\r\n                            <GridSquare\r\n                                key={x + ',' + y}\r\n                                x={x}\r\n                                y={y}\r\n                                style={gridStyle}\r\n                                onClick={() => this.props.setSelectedItemID(null)}\r\n                            />\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Draw the map tiles\r\n            const tiles = this.props.map.items\r\n                .filter(i => i.type === 'tile')\r\n                .map(i => {\r\n                    const tileStyle = this.getStyle(i.x, i.y, i.width, i.height, mapDimensions as MapDimensions);\r\n                    return (\r\n                        <MapTile\r\n                            key={i.id}\r\n                            tile={i}\r\n                            style={tileStyle}\r\n                            selectable={this.props.mode === 'edit'}\r\n                            selected={this.props.selectedItemID === i.id}\r\n                            thumbnail={this.props.mode === 'thumbnail'}\r\n                            select={id => this.props.mode === 'edit' ? this.props.setSelectedItemID(id) : null}\r\n                        />\r\n                    );\r\n                });\r\n\r\n            // Draw token auras\r\n            let auras: JSX.Element[] = [];\r\n            if ((this.props.mode !== 'edit') && (this.props.mode !== 'thumbnail')) {\r\n                auras = this.props.combatants\r\n                    .filter(c => c.aura.size > 0)\r\n                    .map(c => {\r\n                        const mi = this.props.map.items.find(i => i.id === c.id);\r\n                        if (mi) {\r\n                            const sizeInSquares = c.aura.size / 5;\r\n                            let miniSize = 1;\r\n                            const m = c as Monster;\r\n                            if (m) {\r\n                                miniSize = Utils.miniSize(m.size);\r\n                            }\r\n                            const dim = (sizeInSquares * 2) + miniSize;\r\n                            const auraStyle = this.getStyle(mi.x - sizeInSquares, mi.y - sizeInSquares, dim, dim, mapDimensions as MapDimensions);\r\n                            auraStyle.backgroundColor = c.aura.color;\r\n                            return (\r\n                                <div\r\n                                    key={c.id + ' aura'}\r\n                                    className={'aura ' + c.aura.style}\r\n                                    style={auraStyle}\r\n                                />\r\n                            );\r\n                        }\r\n                        return null;\r\n                    })\r\n                    .filter(mt => mt !== null) as JSX.Element[];\r\n            }\r\n\r\n            // Draw the tokens\r\n            let tokens: JSX.Element[] = [];\r\n            if (this.props.mode !== 'edit') {\r\n                tokens = this.props.map.items\r\n                    .filter(i => (i.type === 'monster') || (i.type === 'pc'))\r\n                    .map(i => {\r\n                        const tokenStyle = this.getStyle(i.x, i.y, i.width, i.height, mapDimensions as MapDimensions);\r\n                        const combatant = this.props.combatants.find(c => c.id === i.id);\r\n                        if (combatant) {\r\n                            return (\r\n                                <MapToken\r\n                                    key={i.id}\r\n                                    token={i}\r\n                                    combatant={combatant}\r\n                                    style={tokenStyle}\r\n                                    simple={this.props.mode === 'thumbnail'}\r\n                                    selectable={this.props.mode === 'combat'}\r\n                                    selected={this.props.selectedItemID ===  i.id}\r\n                                    select={id => this.props.setSelectedItemID(id)}\r\n                                />\r\n                            );\r\n                        }\r\n\r\n                        return null;\r\n                    })\r\n                    .filter(mt => mt !== null) as JSX.Element[];\r\n            }\r\n\r\n            // Draw the drag overlay\r\n            const dragOverlay = [];\r\n            if (this.props.showOverlay) {\r\n                for (let yOver = mapDimensions.minY; yOver !== mapDimensions.maxY + 1; ++yOver) {\r\n                    for (let xOver = mapDimensions.minX; xOver !== mapDimensions.maxX + 1; ++xOver) {\r\n                        const overlayStyle = this.getStyle(xOver, yOver, 1, 1, mapDimensions);\r\n                        dragOverlay.push(\r\n                            <GridSquare\r\n                                key={xOver + ',' + yOver}\r\n                                x={xOver}\r\n                                y={yOver}\r\n                                style={overlayStyle}\r\n                                overlay={true}\r\n                                onClick={(posX, posY) => this.props.gridSquareClicked(posX, posY)}\r\n                            />\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n\r\n            const style = 'map-panel ' + this.props.mode;\r\n            return (\r\n                <div className={style} onClick={() => this.props.setSelectedItemID(null)}>\r\n                    <div className='grid' style={{ height: ((this.getSideLength() * mapDimensions.height) + 1) + 'px' }}>\r\n                        {grid}\r\n                        {tiles}\r\n                        {auras}\r\n                        {tokens}\r\n                        {dragOverlay}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface GridSquareProps {\r\n    x: number;\r\n    y: number;\r\n    style: StyleData;\r\n    overlay: boolean;\r\n    onClick: (x: number, y: number) => void;\r\n    onDoubleClick: (x: number, y: number) => void;\r\n}\r\n\r\nclass GridSquare extends React.Component<GridSquareProps> {\r\n    public static defaultProps = {\r\n        overlay: false,\r\n        onDoubleClick: null\r\n    };\r\n\r\n    private click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (this.props.onClick) {\r\n            this.props.onClick(this.props.x, this.props.y);\r\n        }\r\n    }\r\n\r\n    private doubleClick(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (this.props.onDoubleClick) {\r\n            this.props.onDoubleClick(this.props.x, this.props.y);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'grid-square';\r\n        if (this.props.overlay) {\r\n            style += ' grid-overlay';\r\n        }\r\n\r\n        return (\r\n            <div\r\n                className={style}\r\n                style={this.props.style}\r\n                onClick={e => this.click(e)}\r\n                onDoubleClick={e => this.doubleClick(e)}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\ninterface MapTileProps {\r\n    tile: MapItem;\r\n    style: StyleData;\r\n    thumbnail: boolean;\r\n    selectable: boolean;\r\n    selected: boolean;\r\n    select: (tileID: string) => void;\r\n}\r\n\r\nclass MapTile extends React.Component<MapTileProps> {\r\n    private select(e: React.MouseEvent) {\r\n        if (this.props.selectable) {\r\n            e.stopPropagation();\r\n            this.props.select(this.props.tile.id);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'tile ' + this.props.tile.terrain + ' ' + this.props.tile.style;\r\n        if (this.props.selected) {\r\n            style += ' selected';\r\n        }\r\n        if (this.props.thumbnail) {\r\n            style += ' thumbnail';\r\n        }\r\n\r\n        return (\r\n            <div\r\n                className={style}\r\n                style={this.props.style}\r\n                onClick={e => this.select(e)}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\ninterface MapTokenProps {\r\n    token: MapItem;\r\n    combatant: (Combatant & PC) | (Combatant & Monster);\r\n    style: StyleData;\r\n    simple: boolean;\r\n    selectable: boolean;\r\n    selected: boolean;\r\n    select: (tokenID: string) => void;\r\n}\r\n\r\nclass MapToken extends React.Component<MapTokenProps> {\r\n    private select(e: React.MouseEvent) {\r\n        if (this.props.selectable) {\r\n            e.stopPropagation();\r\n            this.props.select(this.props.token.id);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'token ' + this.props.token.type;\r\n        if (this.props.selected) {\r\n            style += ' selected';\r\n        }\r\n        if (this.props.combatant.current) {\r\n            style += ' current';\r\n        }\r\n\r\n        let initials = null;\r\n        let hpGauge = null;\r\n        let altitudeBadge = null;\r\n        let conditionsBadge = null;\r\n        if (!this.props.simple) {\r\n            const name = this.props.combatant.displayName || this.props.combatant.name || 'combatant';\r\n            initials = (\r\n                <div className='initials'>{name.split(' ').map(s => s[0])}</div>\r\n            );\r\n\r\n            if (this.props.combatant.type === 'monster') {\r\n                hpGauge = (\r\n                    <HitPointGauge combatant={this.props.combatant as Combatant & Monster} />\r\n                );\r\n            }\r\n\r\n            if (this.props.combatant.altitude > 0) {\r\n                altitudeBadge = (\r\n                    <div className='badge altitude' title='above the map'>&#9206;</div>\r\n                );\r\n            }\r\n\r\n            if (this.props.combatant.altitude < 0) {\r\n                altitudeBadge = (\r\n                    <div className='badge altitude' title='below the map'>&#9207;</div>\r\n                );\r\n            }\r\n\r\n            if ((this.props.combatant.conditions) && (this.props.combatant.conditions.length > 0)) {\r\n                conditionsBadge = (\r\n                    <div className='badge' title='affected by conditions'>&#9670;</div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div\r\n                title={this.props.combatant.displayName || this.props.combatant.name}\r\n                className={style}\r\n                style={this.props.style}\r\n                onClick={e => this.select(e)}\r\n            >\r\n                {initials}\r\n                {hpGauge}\r\n                {altitudeBadge}\r\n                {conditionsBadge}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Combat } from '../../models/combat';\r\n\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    combat: Combat;\r\n    selected: boolean;\r\n    setSelection: (combat: Combat) => void;\r\n}\r\n\r\nexport default class CombatListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            let map = null;\r\n            if (this.props.combat.map) {\r\n                map = (\r\n                    <MapPanel\r\n                        map={this.props.combat.map}\r\n                        mode='thumbnail'\r\n                        combatants={this.props.combat.combatants}\r\n                    />\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.combat)}>\r\n                    <div className='heading'>{this.props.combat.name || 'unnamed combat'}</div>\r\n                    <div className='text'>paused at {this.props.combat.timestamp}</div>\r\n                    {map}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport close from '../../resources/images/close-black.svg';\r\nimport arrow from '../../resources/images/down-arrow-black.svg';\r\n\r\ninterface Props {\r\n    content: any[];\r\n    heading: string;\r\n    hidden: boolean;\r\n    showToggle: boolean;\r\n    close: () => void;\r\n}\r\n\r\ninterface State {\r\n    showCards: boolean;\r\n}\r\n\r\nexport default class CardGroup extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        heading: null,\r\n        hidden: false,\r\n        showToggle: false,\r\n        close: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showCards: true\r\n        };\r\n    }\r\n\r\n    private toggleCards() {\r\n        this.setState({\r\n            showCards: !this.state.showCards\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            if (this.props.hidden) {\r\n                return null;\r\n            }\r\n\r\n            let heading = null;\r\n            if (this.props.heading) {\r\n                let closeBtn = null;\r\n                if (this.props.close) {\r\n                    closeBtn = (\r\n                        <img className='image' src={close} alt='close' onClick={() => this.props.close()} />\r\n                    );\r\n                }\r\n\r\n                let toggle = null;\r\n                if (this.props.showToggle) {\r\n                    const style = this.state.showCards ? 'image rotate' : 'image';\r\n                    toggle = (\r\n                        <img className={style} src={arrow} alt='arrow' onClick={() => this.toggleCards()} />\r\n                    );\r\n                }\r\n\r\n                heading = (\r\n                    <div className='heading'>\r\n                        <div className='title'>{this.props.heading}</div>\r\n                        {toggle}\r\n                        {closeBtn}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            let cards = [];\r\n            if ((this.props.content.length > 0) && this.state.showCards) {\r\n                cards = this.props.content;\r\n            }\r\n\r\n            return (\r\n                <div className='card-group'>\r\n                    {heading}\r\n                    <div className='row small-up-1 medium-up-2 large-up-3 collapse'>\r\n                        {cards}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combat, Combatant, Notification } from '../../models/combat';\r\nimport { Condition, ConditionDurationSaves } from '../../models/condition';\r\nimport { Monster, Trait } from '../../models/monster-group';\r\nimport { PC } from '../../models/party';\r\n\r\nimport MonsterCard from '../cards/monster-card';\r\nimport PCCard from '../cards/pc-card';\r\nimport ControlRow from '../controls/control-row';\r\nimport Spin from '../controls/spin';\r\nimport CombatListItem from '../list-items/combat-list-item';\r\nimport CardGroup from '../panels/card-group';\r\nimport HitPointGauge from '../panels/hit-point-gauge';\r\nimport MapPanel from '../panels/map-panel';\r\nimport Note from '../panels/note';\r\nimport TraitsPanel from '../panels/traits-panel';\r\n\r\ninterface Props {\r\n    combats: Combat[];\r\n    combat: Combat | null;\r\n    filter: string;\r\n    createCombat: () => void;\r\n    resumeEncounter: (combat: Combat) => void;\r\n    close: (notification: Notification, removeCondition: boolean) => void;\r\n    mapAdd: (combatant: (Combatant & PC) | (Combatant & Monster), x: number, y: number) => void;\r\n    makeCurrent: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    makeActive: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    makeDefeated: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    removeCombatant: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    addCondition: (combatant: Combatant & Monster) => void;\r\n    editCondition: (combatant: Combatant & Monster, condition: Condition) => void;\r\n    removeCondition: (combatant: Combatant & Monster, conditionID: string) => void;\r\n    mapMove: (combatant: (Combatant & PC) | (Combatant & Monster), dir: string) => void;\r\n    mapRemove: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    endTurn: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    changeHP: (combatant: Combatant & Monster, hp: number, temp: number) => void;\r\n    changeValue: (source: {}, type: string, value: any) => void;\r\n    nudgeValue: (source: {}, type: string, delta: number) => void;\r\n    toggleTag: (combatant: Combatant, tag: string) => void;\r\n}\r\n\r\ninterface State {\r\n    selectedTokenID: string | null;\r\n    addingToMapID: string | null;\r\n}\r\n\r\nexport default class CombatManagerScreen extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            selectedTokenID: null,  // The ID of the combatant that's selected\r\n            addingToMapID: null     // The ID of the combatant we're adding to the map\r\n        };\r\n    }\r\n\r\n    private setSelectedTokenID(id: string | null) {\r\n        this.setState({\r\n            selectedTokenID: id\r\n        });\r\n    }\r\n\r\n    private setAddingToMapID(id: string | null) {\r\n        this.setState({\r\n            addingToMapID: id\r\n        });\r\n    }\r\n\r\n    private createCard(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        let mode = 'combat';\r\n        if (this.props.combat && this.props.combat.map) {\r\n            mode += ' tactical';\r\n            const onMap = this.props.combat.map.items.find(i => i.id === combatant.id);\r\n            mode += onMap ? ' on-map' : ' off-map';\r\n        }\r\n\r\n        switch (combatant.type) {\r\n            case 'pc':\r\n                return (\r\n                    <PCCard\r\n                        key='selected'\r\n                        combatant={combatant as Combatant & PC}\r\n                        mode={mode}\r\n                        changeValue={(source, type, value) => this.props.changeValue(source, type, value)}\r\n                        nudgeValue={(source, type, delta) => this.props.nudgeValue(source, type, delta)}\r\n                        makeCurrent={c => this.props.makeCurrent(c as Combatant & PC)}\r\n                        makeActive={c => this.props.makeActive(c as Combatant & PC)}\r\n                        makeDefeated={c => this.props.makeDefeated(c as Combatant & PC)}\r\n                        removeCombatant={c => this.props.removeCombatant(c as Combatant & PC)}\r\n                        mapAdd={c => this.setAddingToMapID(c.id)}\r\n                        mapMove={(c, dir) => this.props.mapMove(c as Combatant & PC, dir)}\r\n                        mapRemove={c => this.props.mapRemove(c as Combatant & PC)}\r\n                        endTurn={c => this.props.endTurn(c as Combatant & PC)}\r\n                        toggleTag={(c, tag) => this.props.toggleTag(c, tag)}\r\n                    />\r\n                );\r\n            case 'monster':\r\n                return (\r\n                    <MonsterCard\r\n                        key='selected'\r\n                        combatant={combatant as Combatant & Monster}\r\n                        mode={mode}\r\n                        combat={this.props.combat as Combat}\r\n                        changeValue={(c, type, value) => this.props.changeValue(c, type, value)}\r\n                        nudgeValue={(c, type, delta) => this.props.nudgeValue(c, type, delta)}\r\n                        makeCurrent={c => this.props.makeCurrent(c as Combatant & Monster)}\r\n                        makeActive={c => this.props.makeActive(c as Combatant & Monster)}\r\n                        makeDefeated={c => this.props.makeDefeated(c as Combatant & Monster)}\r\n                        removeCombatant={c => this.props.removeCombatant(c as Combatant & Monster)}\r\n                        addCondition={c => this.props.addCondition(c as Combatant & Monster)}\r\n                        editCondition={(c, condition) => this.props.editCondition(c as Combatant & Monster, condition)}\r\n                        removeCondition={(c, conditionID) => this.props.removeCondition(c as Combatant & Monster, conditionID)}\r\n                        nudgeConditionValue={(c, type, delta) => this.props.nudgeValue(c, type, delta)}\r\n                        mapAdd={c => this.setAddingToMapID(c.id)}\r\n                        mapMove={(c, dir) => this.props.mapMove(c as Combatant & Monster, dir)}\r\n                        mapRemove={c => this.props.mapRemove(c as Combatant & Monster)}\r\n                        endTurn={(c) => this.props.endTurn(c as Combatant & Monster)}\r\n                        changeHP={(c, hp, temp) => this.props.changeHP(c as Combatant & Monster, hp, temp)}\r\n                        toggleTag={(c, tag) => this.props.toggleTag(c, tag)}\r\n                    />\r\n                );\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    private addCombatantToMap(x: number, y: number) {\r\n        if (this.props.combat) {\r\n            const combatant = this.props.combat.combatants.find(c => c.id === this.state.addingToMapID);\r\n            if (combatant) {\r\n                this.props.mapAdd(combatant, x, y);\r\n            }\r\n            this.setAddingToMapID(null);\r\n        }\r\n    }\r\n\r\n    private showCombat(combat: Combat) {\r\n        return Utils.match(this.props.filter, combat.name);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            if (this.props.combat) {\r\n                const current: JSX.Element[] = [];\r\n                let pending: JSX.Element[] = [];\r\n                let active: JSX.Element[] = [];\r\n                const defeated: JSX.Element[] = [];\r\n\r\n                this.props.combat.combatants.forEach(combatant => {\r\n                    if (combatant.current) {\r\n                        current.push(\r\n                            <div key={combatant.id}>\r\n                                {this.createCard(combatant)}\r\n                            </div>\r\n                        );\r\n                    }\r\n                    if (combatant.pending && !combatant.active && !combatant.defeated) {\r\n                        pending.push(\r\n                            <PendingCombatantRow\r\n                                key={combatant.id}\r\n                                combatant={combatant}\r\n                                select={c => this.setSelectedTokenID(c.id)}\r\n                                selected={combatant.id === this.state.selectedTokenID}\r\n                                nudgeValue={(c, type, delta) => this.props.nudgeValue(c, type, delta)}\r\n                                makeActive={c => this.props.makeActive(c)}\r\n                            />\r\n                        );\r\n                    }\r\n                    if (!combatant.pending && combatant.active && !combatant.defeated) {\r\n                        switch (combatant.type) {\r\n                            case 'pc':\r\n                                active.push(\r\n                                    <PCRow\r\n                                        key={combatant.id}\r\n                                        combatant={combatant as Combatant & PC}\r\n                                        combat={this.props.combat as Combat}\r\n                                        select={c => this.setSelectedTokenID(c.id)}\r\n                                        selected={combatant.id === this.state.selectedTokenID}\r\n                                    />\r\n                                );\r\n                                break;\r\n                            case 'monster':\r\n                                active.push(\r\n                                    <MonsterRow\r\n                                        key={combatant.id}\r\n                                        combatant={combatant as Combatant & Monster}\r\n                                        combat={this.props.combat as Combat}\r\n                                        select={c => this.setSelectedTokenID(c.id)}\r\n                                        selected={combatant.id === this.state.selectedTokenID}\r\n                                    />\r\n                                );\r\n                                break;\r\n                        }\r\n                    }\r\n                    if (!combatant.pending && !combatant.active && combatant.defeated) {\r\n                        switch (combatant.type) {\r\n                            case 'pc':\r\n                                defeated.push(\r\n                                    <PCRow\r\n                                        key={combatant.id}\r\n                                        combatant={combatant as Combatant & PC}\r\n                                        combat={this.props.combat as Combat}\r\n                                        select={c => this.setSelectedTokenID(c.id)}\r\n                                        selected={combatant.id === this.state.selectedTokenID}\r\n                                    />\r\n                                );\r\n                                break;\r\n                            case 'monster':\r\n                                defeated.push(\r\n                                    <MonsterRow\r\n                                        key={combatant.id}\r\n                                        combatant={combatant as Combatant & Monster}\r\n                                        combat={this.props.combat as Combat}\r\n                                        select={c => this.setSelectedTokenID(c.id)}\r\n                                        selected={combatant.id === this.state.selectedTokenID}\r\n                                    />\r\n                                );\r\n                                break;\r\n                        }\r\n                    }\r\n                });\r\n\r\n                if (pending.length !== 0) {\r\n                    const pendingHelp = (\r\n                        <div key='pending-help'>\r\n                            <Note\r\n                                content={\r\n                                    <div>\r\n                                        <div className='section'>these combatants are not yet part of the encounter</div>\r\n                                        <div className='section'>set initiative on each of them, then add them to the encounter</div>\r\n                                    </div>\r\n                                }\r\n                            />\r\n                        </div>\r\n                    );\r\n                    pending = [pendingHelp].concat(pending);\r\n                }\r\n\r\n                if (current.length === 0) {\r\n                    const activeHelp = (\r\n                        /* tslint:disable:max-line-length */\r\n                        <div key='active-help'>\r\n                            <Note\r\n                                content={\r\n                                    <div>\r\n                                        <div className='section'>these are the combatants taking part in this encounter; you can select them to see their stat blocks (on the right)</div>\r\n                                        <div className='section'>they are listed in initiative order (with the highest initiative score at the top of the list, and the lowest at the bottom)</div>\r\n                                        <div className='section'>to begin the encounter, select the first combatant and press the <b>start turn</b> button on their stat block</div>\r\n                                    </div>\r\n                                }\r\n                            />\r\n                        </div>\r\n                        /* tslint:enable:max-line-length */\r\n                    );\r\n                    active = [activeHelp].concat(active);\r\n                }\r\n\r\n                if (current.length === 0) {\r\n                    current.push(\r\n                        <Note\r\n                            key='current'\r\n                            content={\r\n                                <div className='section'>\r\n                                    the current initiative holder will be displayed here\r\n                                </div>\r\n                            }\r\n                        />\r\n                    );\r\n                }\r\n\r\n                let notificationSection = null;\r\n                if (this.props.combat.notifications.length > 0) {\r\n                    const notifications = this.props.combat.notifications.map(n => (\r\n                        <NotificationPanel\r\n                            key={n.id}\r\n                            notification={n}\r\n                            close={(notification, removeCondition) => this.props.close(notification, removeCondition)}\r\n                        />\r\n                    ));\r\n                    notificationSection = (\r\n                        <div className='notifications'>\r\n                            {notifications}\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                let mapSection = null;\r\n                if (this.props.combat.map) {\r\n                    mapSection = (\r\n                        <MapPanel\r\n                            key='map'\r\n                            map={this.props.combat.map}\r\n                            mode='combat'\r\n                            showOverlay={this.state.addingToMapID !== null}\r\n                            combatants={this.props.combat.combatants}\r\n                            selectedItemID={this.state.selectedTokenID ? this.state.selectedTokenID : undefined}\r\n                            setSelectedItemID={id => {\r\n                                if (id) {\r\n                                    this.setSelectedTokenID(id);\r\n                                }\r\n                            }}\r\n                            gridSquareClicked={(x, y) => this.addCombatantToMap(x, y)}\r\n                        />\r\n                    );\r\n                }\r\n\r\n                const special: JSX.Element[] = [];\r\n                this.props.combat.combatants.forEach(c => {\r\n                    const monster = c as (Combatant & Monster);\r\n                    const legendary = monster && monster.traits && monster.traits.some(t => t.type === 'legendary') && !monster.current;\r\n                    const lair = monster && monster.traits && monster.traits.some(t => t.type === 'lair');\r\n                    if (legendary || lair) {\r\n                        special.push(\r\n                            <div className='card monster' key={monster.id}>\r\n                                <div className='heading'><div className='title'>{monster.name}</div></div>\r\n                                <div className='card-content'>\r\n                                    <TraitsPanel\r\n                                        combatant={monster}\r\n                                        mode='combat-special'\r\n                                        changeValue={(source, type, value) => this.props.changeValue(source, type, value)}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    }\r\n                });\r\n\r\n                let selectedCombatant = null;\r\n                if (this.state.selectedTokenID) {\r\n                    const combatant = this.props.combat.combatants.find(c => c.id === this.state.selectedTokenID);\r\n                    if (combatant && !combatant.current) {\r\n                        selectedCombatant = this.createCard(combatant);\r\n                    }\r\n                }\r\n                if (!selectedCombatant) {\r\n                    selectedCombatant = (\r\n                        <Note\r\n                            key='selected'\r\n                            content={\r\n                                <div className='section'>\r\n                                    select a pc or monster from the <b>initiative order</b> list to see its details here\r\n                                </div>\r\n                            }\r\n                        />\r\n                    );\r\n                }\r\n\r\n                return (\r\n                    <div className='combat-manager row collapse'>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable'>\r\n                            <CardGroup\r\n                                heading='initiative holder'\r\n                                content={current}\r\n                            />\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable'>\r\n                            {notificationSection}\r\n                            <CardGroup\r\n                                heading='waiting for intiative to be entered'\r\n                                content={pending}\r\n                                hidden={pending.length === 0}\r\n                                showToggle={true}\r\n                            />\r\n                            <CardGroup\r\n                                heading='encounter map'\r\n                                content={[mapSection]}\r\n                                hidden={mapSection === null}\r\n                                showToggle={true}\r\n                            />\r\n                            <CardGroup\r\n                                heading='initiative order'\r\n                                content={active}\r\n                                hidden={active.length === 0}\r\n                                showToggle={true}\r\n                            />\r\n                            <CardGroup\r\n                                heading='defeated'\r\n                                content={defeated}\r\n                                hidden={defeated.length === 0}\r\n                                showToggle={true}\r\n                            />\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable'>\r\n                            <CardGroup\r\n                                heading={'don\\'t forget'}\r\n                                content={special}\r\n                                hidden={special.length === 0}\r\n                                showToggle={true}\r\n                            />\r\n                            <CardGroup\r\n                                heading='selected combatant'\r\n                                content={[selectedCombatant]}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                let listItems = this.props.combats.filter(c => this.showCombat(c)).map(c => {\r\n                    return (\r\n                        <CombatListItem\r\n                            key={c.id}\r\n                            combat={c}\r\n                            selected={false}\r\n                            setSelection={combat => this.props.resumeEncounter(combat)}\r\n                        />\r\n                    );\r\n                });\r\n                if (listItems.length === 0) {\r\n                    listItems = [(\r\n                        <Note\r\n                            key='empty'\r\n                            content={'you have no in-progress encounters'}\r\n                        />\r\n                    )];\r\n                }\r\n\r\n                return (\r\n                    <div className='combat-manager row collapse'>\r\n                        <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                            <button onClick={() => this.props.createCombat()}>start a new combat</button>\r\n                            <div className='divider' />\r\n                            {listItems}\r\n                        </div>\r\n                        <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                            <div className='vertical-center-outer'>\r\n                                <div className='vertical-center-middle'>\r\n                                    <div className='vertical-center-inner'>\r\n                                        <HelpCard combats={this.props.combats} />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface HelpCardProps {\r\n    combats: Combat[];\r\n}\r\n\r\nclass HelpCard extends React.Component<HelpCardProps> {\r\n    public render() {\r\n        let action: JSX.Element | null = null;\r\n        if (this.props.combats.length === 0) {\r\n            action = (\r\n                <div className='section'>to start a combat encounter, press the <b>start a new combat</b> button</div>\r\n            );\r\n        } else {\r\n            action = (\r\n                <div>\r\n                    <div className='section'>on the left you will see a list of encounters that you have paused</div>\r\n                    <div className='section'>you can resume a paused combat by selecting it</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Note\r\n                content={\r\n                    <div>\r\n                        <div className='section'>here you can run a combat encounter by specifying a party and an encounter</div>\r\n                        <div className='divider' />\r\n                        {action}\r\n                    </div>\r\n                }\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\ninterface NotificationProps {\r\n    notification: Notification;\r\n    close: (notification: Notification, removeCondition: boolean) => void;\r\n}\r\n\r\nclass NotificationPanel extends React.Component<NotificationProps> {\r\n    private success() {\r\n        switch (this.props.notification.type) {\r\n            case 'condition-save':\r\n            case 'condition-end':\r\n                const condition = this.props.notification.data as Condition;\r\n                if (condition.duration) {\r\n                    // Reduce save by 1\r\n                    if ((condition.duration.type === 'saves') || (condition.duration.type === 'rounds')) {\r\n                        condition.duration.count -= 1;\r\n                        if (condition.duration.count === 0) {\r\n                            // Remove the condition\r\n                            this.close(true);\r\n                        } else {\r\n                            this.close();\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            case 'trait-recharge':\r\n                // Mark trait as recharged\r\n                const trait = this.props.notification.data as Trait;\r\n                trait.uses = 0;\r\n                this.close();\r\n                break;\r\n        }\r\n    }\r\n\r\n    private close(removeCondition = false) {\r\n        this.props.close(this.props.notification, removeCondition);\r\n    }\r\n\r\n    public render() {\r\n        const combatant = this.props.notification.combatant as (Combatant & Monster);\r\n        const condition = this.props.notification.data as Condition;\r\n        const trait = this.props.notification.data as Trait;\r\n\r\n        const name = combatant.displayName || combatant.name || 'unnamed monster';\r\n        switch (this.props.notification.type) {\r\n            case 'condition-save':\r\n                const duration = condition.duration as ConditionDurationSaves;\r\n                let saveType = duration.saveType.toString();\r\n                if (saveType !== 'death') {\r\n                    saveType = saveType.toUpperCase();\r\n                }\r\n                return (\r\n                    <div key={this.props.notification.id} className='descriptive'>\r\n                        <div className='text'>\r\n                            {name} must make a {saveType} save against dc {duration.saveDC}\r\n                        </div>\r\n                        <ControlRow\r\n                            controls={[\r\n                                <button key='success' onClick={() => this.success()}>success</button>,\r\n                                <button key='close' onClick={() => this.close()}>close</button>\r\n                            ]}\r\n                        />\r\n                    </div>\r\n                );\r\n            case 'condition-end':\r\n                return (\r\n                    <div key={this.props.notification.id} className='descriptive'>\r\n                        <div className='text'>\r\n                            {name} is no longer affected by condition {condition.name}\r\n                        </div>\r\n                        <ControlRow\r\n                            controls={[\r\n                                <button key='close' onClick={() => this.close()}>close</button>\r\n                            ]}\r\n                        />\r\n                    </div>\r\n                );\r\n            case 'trait-recharge':\r\n                return (\r\n                    <div key={this.props.notification.id} className='descriptive'>\r\n                        <div className='text'>\r\n                            {name} can attempt to recharge {trait.name} ({trait.usage})\r\n                        </div>\r\n                        <ControlRow\r\n                            controls={[\r\n                                <button key='recharge' onClick={() => this.success()}>recharge</button>,\r\n                                <button key='close' onClick={() => this.close()}>close</button>\r\n                            ]}\r\n                        />\r\n                    </div>\r\n                );\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface PendingCombatantRowProps {\r\n    combatant: (Combatant & PC) | (Combatant & Monster);\r\n    selected: boolean;\r\n    select: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    nudgeValue: (combatant: (Combatant & PC) | (Combatant & Monster), field: string, delta: number) => void;\r\n    makeActive: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n}\r\n\r\nclass PendingCombatantRow extends React.Component<PendingCombatantRowProps> {\r\n    private getInformationText() {\r\n        if (this.props.selected) {\r\n            return 'selected';\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private onClick(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (this.props.select) {\r\n            this.props.select(this.props.combatant);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'combatant-row ' + this.props.combatant.type;\r\n        if (this.props.combatant.current || this.props.selected) {\r\n            style += ' highlight';\r\n        }\r\n\r\n        return (\r\n            <div className={style} onClick={e => this.onClick(e)}>\r\n                <div className='name'>\r\n                    {this.props.combatant.displayName || this.props.combatant.name || 'combatant'}\r\n                    <span className='info'>{this.getInformationText()}</span>\r\n                </div>\r\n                <div className='content'>\r\n                    <Spin\r\n                        source={this.props.combatant}\r\n                        name='initiative'\r\n                        label='initiative'\r\n                        nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'initiative', delta)}\r\n                    />\r\n                    <button onClick={e => { e.stopPropagation(); this.props.makeActive(this.props.combatant); }}>add to encounter</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface PCRowProps {\r\n    combatant: Combatant & PC;\r\n    combat: Combat;\r\n    selected: boolean;\r\n    select: (combatant: Combatant & PC) => void;\r\n}\r\n\r\nclass PCRow extends React.Component<PCRowProps> {\r\n    private getInformationText() {\r\n        if (this.props.combatant.current) {\r\n            return 'current turn';\r\n        }\r\n\r\n        if (this.props.selected) {\r\n            return 'selected';\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private onClick(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (!this.props.combatant.current && !this.props.selected && this.props.select) {\r\n            this.props.select(this.props.combatant);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'combatant-row ' + this.props.combatant.type;\r\n        if (this.props.combatant.current || this.props.selected) {\r\n            style += ' highlight';\r\n        }\r\n\r\n        const desc = (this.props.combatant.race || 'unknown race')\r\n                + ' ' + (this.props.combatant.classes || 'unknown class')\r\n                + ', level ' + this.props.combatant.level;\r\n\r\n        const notes = [];\r\n        if (this.props.combat.map) {\r\n            if (!this.props.combatant.pending && !this.props.combat.map.items.find(i => i.id === this.props.combatant.id)) {\r\n                notes.push(\r\n                    <Note key='not-on-map' white={true} content='not on the map' />\r\n                );\r\n            }\r\n        }\r\n        this.props.combatant.tags.forEach(tag => {\r\n            notes.push(\r\n                <Note key={tag} white={true} content={Utils.getTagDescription(tag)} />\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div className={style} onClick={e => this.onClick(e)}>\r\n                <div className='name'>\r\n                    {this.props.combatant.displayName || this.props.combatant.name || 'combatant'}\r\n                    {this.props.combatant.player ? ' | ' + this.props.combatant.player : ''}\r\n                    <span className='info'>{this.getInformationText()}</span>\r\n                </div>\r\n                <div className='content'>\r\n                    <div className='section lowercase'>\r\n                        {desc}\r\n                    </div>\r\n                    {notes}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface MonsterRowProps {\r\n    combatant: Combatant & Monster;\r\n    combat: Combat;\r\n    selected: boolean;\r\n    select: (combatant: Combatant & Monster) => void;\r\n}\r\n\r\nclass MonsterRow extends React.Component<MonsterRowProps> {\r\n    private getInformationText() {\r\n        if (this.props.combatant.current) {\r\n            return 'current turn';\r\n        }\r\n\r\n        if (this.props.selected) {\r\n            return 'selected';\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private onClick(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (!this.props.combatant.current && !this.props.selected && this.props.select) {\r\n            this.props.select(this.props.combatant);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'combatant-row ' + this.props.combatant.type;\r\n        if (this.props.combatant.current || this.props.selected) {\r\n            style += ' highlight';\r\n        }\r\n\r\n        let hp = (this.props.combatant.hp ? this.props.combatant.hp : 0).toString();\r\n        if (this.props.combatant.hpTemp > 0) {\r\n            hp += '+' + this.props.combatant.hpTemp;\r\n        }\r\n\r\n        let gauge = null;\r\n        if (!this.props.combatant.pending) {\r\n            gauge = (\r\n                <HitPointGauge combatant={this.props.combatant} />\r\n            );\r\n        }\r\n\r\n        let conditions = null;\r\n        if (this.props.combatant.conditions) {\r\n            conditions = this.props.combatant.conditions.map(c => {\r\n                let name = c.name;\r\n                if (c.name === 'exhaustion') {\r\n                    name += ' (' + c.level + ')';\r\n                }\r\n                if ((c.name === 'custom') && (c.text)) {\r\n                    name = c.text;\r\n                }\r\n                if (c.duration) {\r\n                    name += ' ' + Utils.conditionDurationText(c, this.props.combat);\r\n                }\r\n                const description = [];\r\n                const text = Utils.conditionText(c);\r\n                for (let n = 0; n !== text.length; ++n) {\r\n                    description.push(<li key={n} className='condition-text'>{text[n]}</li>);\r\n                }\r\n                return (\r\n                    <Note\r\n                        key={c.id}\r\n                        white={true}\r\n                        content={\r\n                            <div className='condition'>\r\n                                <div className='condition-name'>{name}</div>\r\n                                <ul>\r\n                                    {description}\r\n                                </ul>\r\n                            </div>\r\n                        }\r\n                    />\r\n                );\r\n            });\r\n        }\r\n\r\n        const notes = [];\r\n        if (this.props.combat.map) {\r\n            if (!this.props.combatant.pending && !this.props.combat.map.items.find(i => i.id === this.props.combatant.id)) {\r\n                notes.push(\r\n                    <Note key='not-on-map' white={true} content='not on the map' />\r\n                );\r\n            }\r\n        }\r\n        this.props.combatant.tags.forEach(tag => {\r\n            notes.push(\r\n                <Note key={tag} white={true} content={Utils.getTagDescription(tag)} />\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div className={style} onClick={e => this.onClick(e)}>\r\n                <div className='name'>\r\n                    {this.props.combatant.displayName || this.props.combatant.name || 'combatant'}\r\n                    <span className='info'>{this.getInformationText()}</span>\r\n                </div>\r\n                <div className='content'>\r\n                    <div className='section key-stats'>\r\n                        <div className='key-stat'>\r\n                            <div className='stat-label'>ac</div>\r\n                            <div className='stat-value'>{this.props.combatant.ac}</div>\r\n                        </div>\r\n                        <div className='key-stat'>\r\n                            <div className='stat-value'>{hp}</div>\r\n                            <div className='stat-label'>hp</div>\r\n                        </div>\r\n                    </div>\r\n                    {gauge}\r\n                    {conditions}\r\n                    {notes}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { CATEGORY_TYPES, SIZE_TYPES } from '../../models/monster-group';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport Spin from '../controls/spin';\r\n\r\nimport arrow from '../../resources/images/down-arrow.svg';\r\n\r\ninterface Props {\r\n    filter: {\r\n        name: string,\r\n        challengeMin: number;\r\n        challengeMax: number;\r\n        category: string;\r\n        size: string;\r\n    };\r\n    changeValue: (type: 'name' | 'challengeMin' | 'challengeMax' | 'category' | 'size', value: any) => void;\r\n    nudgeValue: (type: 'challengeMin' | 'challengeMax', delta: number) => void;\r\n    resetFilter: () => void;\r\n}\r\n\r\ninterface State {\r\n    showAll: boolean;\r\n}\r\n\r\nexport default class FilterCard extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showAll: false\r\n        };\r\n    }\r\n\r\n    private toggleAll() {\r\n        this.setState({\r\n            showAll: !this.state.showAll\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const sizes = ['all sizes'].concat(SIZE_TYPES);\r\n            const sizeOptions = sizes.map(size => ({ id: size, text: size }));\r\n\r\n            const categories = ['all types'].concat(CATEGORY_TYPES);\r\n            const catOptions = categories.map(cat => ({ id: cat, text: cat }));\r\n\r\n            let content = null;\r\n            if (this.state.showAll) {\r\n                content = (\r\n                    <div>\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='name'\r\n                                value={this.props.filter.name}\r\n                                onChange={event => this.props.changeValue('name', event.target.value)}\r\n                            />\r\n                        </div>\r\n                        <Spin\r\n                            source={this.props.filter}\r\n                            name='challengeMin'\r\n                            label='min cr'\r\n                            display={value => Utils.challenge(value)}\r\n                            nudgeValue={delta => this.props.nudgeValue('challengeMin', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.filter}\r\n                            name='challengeMax'\r\n                            label='max cr'\r\n                            display={value => Utils.challenge(value)}\r\n                            nudgeValue={delta => this.props.nudgeValue('challengeMax', delta)}\r\n                        />\r\n                        <Dropdown\r\n                            options={sizeOptions}\r\n                            placeholder='filter by size...'\r\n                            selectedID={this.props.filter.size}\r\n                            select={optionID => this.props.changeValue('size', optionID)}\r\n                        />\r\n                        <Dropdown\r\n                            options={catOptions}\r\n                            placeholder='filter by type...'\r\n                            selectedID={this.props.filter.category}\r\n                            select={optionID => this.props.changeValue('category', optionID)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <div className='section'>\r\n                            <button onClick={() => this.props.resetFilter()}>clear filter</button>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                let summary = '';\r\n                if (this.props.filter.size !== 'all sizes') {\r\n                    summary += summary ? ' ' + this.props.filter.size : this.props.filter.size;\r\n                }\r\n                if (this.props.filter.category !== 'all types') {\r\n                    summary += summary ? ' ' + this.props.filter.category : this.props.filter.category;\r\n                }\r\n                summary += ' monsters of cr ' + Utils.challenge(this.props.filter.challengeMin) + ' to ' + Utils.challenge(this.props.filter.challengeMax);\r\n\r\n                content = (\r\n                    <div>\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='name'\r\n                                value={this.props.filter.name}\r\n                                onChange={event => this.props.changeValue('name', event.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div className='section'>showing {summary}</div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='card'>\r\n                    <div className='heading'>\r\n                        <div className='title'>filter</div>\r\n                        <img className={this.state.showAll ? 'image rotate' : 'image'} src={arrow} alt='arrow' onClick={() => this.toggleAll()} />\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        {content}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { EncounterWave } from '../../models/encounter';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport InfoCard from './info-card';\r\n\r\ninterface Props {\r\n    wave: EncounterWave;\r\n    changeValue: (wave: EncounterWave, field: string, value: string) => void;\r\n    removeWave: (wave: EncounterWave) => void;\r\n}\r\n\r\nexport default class WaveCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const heading = (\r\n                <div className='heading'>\r\n                    <div className='title'>wave</div>\r\n                </div>\r\n            );\r\n\r\n            const content = (\r\n                <div>\r\n                    <div className='section'>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='wave name'\r\n                            value={this.props.wave.name}\r\n                            onChange={event => this.props.changeValue(this.props.wave, 'name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <ConfirmButton text='delete wave' callback={() => this.props.removeWave(this.props.wave)} />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            return (\r\n                <InfoCard heading={heading} content={content} />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Encounter } from '../../models/encounter';\r\n\r\ninterface Props {\r\n    encounter: Encounter;\r\n    selected: boolean;\r\n    setSelection: (encounter: Encounter) => void;\r\n}\r\n\r\nexport default class EncounterListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const slots = [];\r\n\r\n            this.props.encounter.slots.forEach(slot => {\r\n                let text = slot.monsterName || 'unnamed monster';\r\n                if (slot.count > 1) {\r\n                    text += ' x' + slot.count;\r\n                }\r\n                slots.push(<div key={slot.id} className='text'>{text}</div>);\r\n            });\r\n\r\n            if (slots.length === 0) {\r\n                slots.push(<div key='empty' className='text'>no monsters</div>);\r\n            }\r\n\r\n            this.props.encounter.waves.forEach(wave => {\r\n                slots.push(<div key={'name ' + wave.id} className='text subheading'>{wave.name || 'unnamed wave'}</div>);\r\n                wave.slots.forEach(slot => {\r\n                    let text = slot.monsterName || 'unnamed monster';\r\n                    if (slot.count > 1) {\r\n                        text += ' x' + slot.count;\r\n                    }\r\n                    slots.push(<div key={slot.id} className='text'>{text}</div>);\r\n                });\r\n                if (slots.length === 0) {\r\n                    slots.push(<div key={'empty ' + wave.id} className='text'>no monsters</div>);\r\n                }\r\n            });\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.encounter)}>\r\n                    <div className='heading'>{this.props.encounter.name || 'unnamed encounter'}</div>\r\n                    {slots}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Encounter, EncounterSlot } from '../../models/encounter';\r\nimport { Monster } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\ninterface Props {\r\n    encounter: Encounter;\r\n    party: Party | null;\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n}\r\n\r\nexport default class DifficultyChartPanel extends React.Component<Props> {\r\n    public render() {\r\n        let monsterCount = 0;\r\n        let monsterXp = 0;\r\n        let slots: EncounterSlot[] = [];\r\n        slots = slots.concat(this.props.encounter.slots);\r\n        this.props.encounter.waves.forEach(wave => {\r\n            slots = slots.concat(wave.slots);\r\n        });\r\n        slots.forEach(slot => {\r\n            monsterCount += slot.count;\r\n            const monster = this.props.getMonster(slot.monsterName, slot.monsterGroupName);\r\n            if (monster) {\r\n                monsterXp += Utils.experience(monster.challenge) * slot.count;\r\n            }\r\n        });\r\n\r\n        const adjustedXp = monsterXp * Utils.experienceFactor(monsterCount);\r\n\r\n        let xpThresholds;\r\n        let diffSection;\r\n        if (this.props.party) {\r\n            let xpEasy = 0;\r\n            let xpMedium = 0;\r\n            let xpHard = 0;\r\n            let xpDeadly = 0;\r\n\r\n            const pcs = this.props.party.pcs.filter(pc => pc.active);\r\n            pcs.forEach(pc => {\r\n                xpEasy += Utils.pcExperience(pc.level, 'easy');\r\n                xpMedium += Utils.pcExperience(pc.level, 'medium');\r\n                xpHard += Utils.pcExperience(pc.level, 'hard');\r\n                xpDeadly += Utils.pcExperience(pc.level, 'deadly');\r\n            });\r\n\r\n            let difficulty = null;\r\n            let adjustedDifficulty = null;\r\n            if (adjustedXp > 0) {\r\n                difficulty = 'trivial';\r\n                if (adjustedXp >= xpEasy) {\r\n                    difficulty = 'easy';\r\n                }\r\n                if (adjustedXp >= xpMedium) {\r\n                    difficulty = 'medium';\r\n                }\r\n                if (adjustedXp >= xpHard) {\r\n                    difficulty = 'hard';\r\n                }\r\n                if (adjustedXp >= xpDeadly) {\r\n                    difficulty = 'deadly';\r\n                }\r\n                adjustedDifficulty = difficulty;\r\n\r\n                if ((pcs.length < 3) || (pcs.length > 5)) {\r\n                    const small = pcs.length < 3;\r\n                    switch (difficulty) {\r\n                        case 'trivial':\r\n                            adjustedDifficulty = small ? 'easy' : 'trivial';\r\n                            break;\r\n                        case 'easy':\r\n                            adjustedDifficulty = small ? 'medium' : 'trivial';\r\n                            break;\r\n                        case 'medium':\r\n                            adjustedDifficulty = small ? 'hard' : 'easy';\r\n                            break;\r\n                        case 'hard':\r\n                            adjustedDifficulty = small ? 'deadly' : 'medium';\r\n                            break;\r\n                        case 'deadly':\r\n                            adjustedDifficulty = small ? 'deadly' : 'hard';\r\n                            break;\r\n                        default:\r\n                            adjustedDifficulty = '';\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            xpThresholds = (\r\n                <div className='table'>\r\n                    <div>\r\n                        <div className='cell four'><b>easy</b></div>\r\n                        <div className='cell four'><b>medium</b></div>\r\n                        <div className='cell four'><b>hard</b></div>\r\n                        <div className='cell four'><b>deadly</b></div>\r\n                    </div>\r\n                    <div>\r\n                        <div className='cell four'>{xpEasy} xp</div>\r\n                        <div className='cell four'>{xpMedium} xp</div>\r\n                        <div className='cell four'>{xpHard} xp</div>\r\n                        <div className='cell four'>{xpDeadly} xp</div>\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            const getLeft = (xp: number) => {\r\n                const max = Math.max(adjustedXp, (xpDeadly * 1.2));\r\n                return (100 * xp) / max;\r\n            };\r\n\r\n            const getRight = (xp: number) => {\r\n                return 100 - getLeft(xp);\r\n            };\r\n\r\n            diffSection = (\r\n                <div>\r\n                    <div className='difficulty-gauge'>\r\n                        <div className='bar-container'>\r\n                            <div className='bar trivial' style={{ left: '0', right: getRight(xpEasy) + '%' }} />\r\n                        </div>\r\n                        <div className='bar-container'>\r\n                            <div className='bar easy' style={{ left: getLeft(xpEasy) + '%', right: getRight(xpMedium) + '%' }} />\r\n                        </div>\r\n                        <div className='bar-container'>\r\n                            <div className='bar medium' style={{ left: getLeft(xpMedium) + '%', right: getRight(xpHard) + '%' }} />\r\n                        </div>\r\n                        <div className='bar-container'>\r\n                            <div className='bar hard' style={{ left: getLeft(xpHard) + '%', right: getRight(xpDeadly) + '%' }} />\r\n                        </div>\r\n                        <div className='bar-container'>\r\n                            <div className='bar deadly' style={{ left: getLeft(xpDeadly) + '%', right: '0' }} />\r\n                        </div>\r\n                        <div className='encounter-container'>\r\n                            <div className='encounter' style={{ left: (getLeft(adjustedXp) - 0.5) + '%' }} />\r\n                        </div>\r\n                    </div>\r\n                    <div className='subheading'>difficulty</div>\r\n                    <div className='section'>\r\n                        difficulty for this party\r\n                        <div className='right'>{difficulty}</div>\r\n                    </div>\r\n                    <div className='section' style={{ display: (adjustedDifficulty === difficulty) ? 'none' : ''}}>\r\n                        effective difficulty for {pcs.length} pc(s)\r\n                        <div className='right'><b>{adjustedDifficulty}</b></div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='subheading'>xp value</div>\r\n                <div className='section'>\r\n                    xp for this encounter\r\n                    <div className='right'>{monsterXp} xp</div>\r\n                </div>\r\n                <div className='section' style={{ display: (adjustedXp === monsterXp) ? 'none' : ''}}>\r\n                    effective xp for {monsterCount} monster(s)\r\n                    <div className='right'>{adjustedXp} xp</div>\r\n                </div>\r\n                {xpThresholds}\r\n                {diffSection}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Encounter, EncounterSlot, EncounterWave } from '../../models/encounter';\r\nimport { Monster, MonsterGroup } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\nimport FilterCard from '../cards/filter-card';\r\nimport MonsterCard from '../cards/monster-card';\r\nimport WaveCard from '../cards/wave-card';\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport Dropdown from '../controls/dropdown';\r\nimport EncounterListItem from '../list-items/encounter-list-item';\r\nimport CardGroup from '../panels/card-group';\r\nimport DifficultyChartPanel from '../panels/difficulty-chart-panel';\r\nimport Note from '../panels/note';\r\n\r\ninterface Props {\r\n    encounters: Encounter[];\r\n    selection: Encounter | null;\r\n    parties: Party[];\r\n    library: MonsterGroup[];\r\n    filter: string;\r\n    selectEncounter: (encounter: Encounter | null) => void;\r\n    addEncounter: () => void;\r\n    removeEncounter: () => void;\r\n    addEncounterSlot: (monster: Monster, waveID: string | null) => void;\r\n    removeEncounterSlot: (encounterSlot: EncounterSlot, waveID: string | null) => void;\r\n    addWave: () => void;\r\n    removeWave: (wave: EncounterWave) => void;\r\n    changeValue: (source: any, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, value: number) => void;\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n}\r\n\r\ninterface State {\r\n    filter: {\r\n        name: string,\r\n        challengeMin: number;\r\n        challengeMax: number;\r\n        category: string;\r\n        size: string;\r\n    };\r\n}\r\n\r\nexport default class EncounterBuilderScreen extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            filter: {\r\n                name: '',\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: 'all types',\r\n                size: 'all sizes'\r\n            }\r\n        };\r\n    }\r\n\r\n    private matchMonster(monster: Monster) {\r\n        if (monster.challenge < this.state.filter.challengeMin) {\r\n            return false;\r\n        }\r\n\r\n        if (monster.challenge > this.state.filter.challengeMax) {\r\n            return false;\r\n        }\r\n\r\n        if (this.state.filter.name !== '') {\r\n            if (!Utils.match(this.state.filter.name, monster.name)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.filter.category !== 'all types') {\r\n            if (monster.category !== this.state.filter.category) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.filter.size !== 'all sizes') {\r\n            if (monster.size !== this.state.filter.size) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private changeFilterValue(type: 'name' | 'challengeMin' | 'challengeMax' | 'category' | 'size', value: any) {\r\n        // eslint-disable-next-line\r\n        this.state.filter[type] = value;\r\n        this.setState({\r\n            filter: this.state.filter\r\n        });\r\n    }\r\n\r\n    private nudgeFilterValue(type: 'challengeMin' | 'challengeMax', delta: number) {\r\n        const value = Utils.nudgeChallenge(this.state.filter[type], delta);\r\n        this.changeFilterValue(type, value);\r\n    }\r\n\r\n    private resetFilter() {\r\n        this.setState({\r\n            filter: {\r\n                name: '',\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: 'all types',\r\n                size: 'all sizes'\r\n            }\r\n        });\r\n    }\r\n\r\n    private getMonsterCards(slots: EncounterSlot[], waveID: string | null) {\r\n        const cards = [];\r\n\r\n        slots.forEach(slot => {\r\n            const monster = this.props.getMonster(slot.monsterName, slot.monsterGroupName);\r\n            if (monster) {\r\n                cards.push(\r\n                    <div className='column' key={monster.id}>\r\n                        <MonsterCard\r\n                            combatant={monster}\r\n                            slot={slot}\r\n                            encounter={this.props.selection as Encounter}\r\n                            mode={'view encounter'}\r\n                            nudgeValue={(source, type, delta) => this.props.nudgeValue(source, type, delta)}\r\n                            removeEncounterSlot={source => this.props.removeEncounterSlot(source, waveID)}\r\n                        />\r\n                    </div>\r\n                );\r\n            } else {\r\n                const index = slots.indexOf(slot);\r\n                const error = 'unknown monster: ' + slot.monsterName + ' in group ' + slot.monsterGroupName;\r\n                cards.push(\r\n                    <div className='column' key={index}>\r\n                        <div className='card error'>\r\n                            <div className='card-content'>\r\n                                <div className='section'>\r\n                                    {error}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n        });\r\n\r\n        if (slots.length === 0) {\r\n            cards.push(\r\n                <div className='column' key='empty'>\r\n                    <Note content={<div className='section'>there are no monsters in this {waveID ? 'wave' : 'encounter'}</div>} />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return cards;\r\n    }\r\n\r\n    private getLibrarySection() {\r\n        if (!this.props.selection) {\r\n            return null;\r\n        }\r\n\r\n        const libraryCards = [];\r\n        libraryCards.push(\r\n            <div className='column' key='filter'>\r\n                <FilterCard\r\n                    filter={this.state.filter}\r\n                    changeValue={(type, value) => this.changeFilterValue(type, value)}\r\n                    nudgeValue={(type, delta) => this.nudgeFilterValue(type, delta)}\r\n                    resetFilter={() => this.resetFilter()}\r\n                />\r\n            </div>\r\n        );\r\n\r\n        const monsters: Monster[] = [];\r\n        if (this.props.selection) {\r\n            this.props.library.forEach(group => {\r\n                group.monsters.forEach(monster => {\r\n                    if (this.matchMonster(monster)) {\r\n                        monsters.push(monster);\r\n                    }\r\n                });\r\n            });\r\n            monsters.sort((a, b) => {\r\n                if (a.name < b.name) { return -1; }\r\n                if (a.name > b.name) { return 1; }\r\n                return 0;\r\n            });\r\n        }\r\n        monsters.forEach(monster => {\r\n            libraryCards.push(\r\n                <div className='column' key={monster.id}>\r\n                    <MonsterCard\r\n                        key={monster.id}\r\n                        combatant={monster}\r\n                        encounter={this.props.selection as Encounter}\r\n                        library={this.props.library}\r\n                        mode={'view encounter'}\r\n                        addEncounterSlot={(combatant, waveID) => this.props.addEncounterSlot(combatant, waveID)}\r\n                    />\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <CardGroup\r\n                heading='monster library'\r\n                content={libraryCards}\r\n                showToggle={true}\r\n            />\r\n        );\r\n    }\r\n\r\n    private showEncounter(enc: Encounter) {\r\n        return Utils.match(this.props.filter, enc.name);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let leftColumn = null;\r\n            if (this.props.selection) {\r\n                leftColumn = (\r\n                    <div>\r\n                        <EncounterInfo\r\n                            selection={this.props.selection}\r\n                            parties={this.props.parties}\r\n                            filter={this.props.filter}\r\n                            changeValue={(type, value) => this.props.changeValue(this.props.selection, type, value)}\r\n                            addWave={() => this.props.addWave()}\r\n                            removeEncounter={() => this.props.removeEncounter()}\r\n                            getMonster={(monsterName, monsterGroupName) => this.props.getMonster(monsterName, monsterGroupName)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <button onClick={() => this.props.selectEncounter(null)}>&larr; back to list</button>\r\n                    </div>\r\n                );\r\n            } else {\r\n                let listItems = this.props.encounters.filter(e => this.showEncounter(e)).map(e => {\r\n                    return (\r\n                        <EncounterListItem\r\n                            key={e.id}\r\n                            encounter={e}\r\n                            selected={e === this.props.selection}\r\n                            setSelection={encounter => this.props.selectEncounter(encounter)}\r\n                        />\r\n                    );\r\n                });\r\n                if (listItems.length === 0) {\r\n                    listItems = [(\r\n                        <Note\r\n                            key='empty'\r\n                            content={'you have not defined any encounters yet'}\r\n                        />\r\n                    )];\r\n                }\r\n\r\n                leftColumn = (\r\n                    <div>\r\n                        <button onClick={() => this.props.addEncounter()}>add a new encounter</button>\r\n                        <div className='divider' />\r\n                        {listItems}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            let encounterName;\r\n            const encounterCards: JSX.Element[] = [];\r\n            let waves: JSX.Element[] = [];\r\n\r\n            if (this.props.selection) {\r\n                encounterName = this.props.selection.name || 'unnamed encounter';\r\n\r\n                this.getMonsterCards(this.props.selection.slots, null)\r\n                    .forEach(card => encounterCards.push(card));\r\n\r\n                waves = this.props.selection.waves.map(w => {\r\n                    const waveCards = [];\r\n                    waveCards.push(\r\n                        <div className='column' key='info'>\r\n                            <WaveCard\r\n                                wave={w}\r\n                                removeWave={wave => this.props.removeWave(wave)}\r\n                                changeValue={(source, field, value) => this.props.changeValue(source, field, value)}\r\n                            />\r\n                        </div>\r\n                    );\r\n\r\n                    this.getMonsterCards(w.slots, w.id)\r\n                        .forEach(card => waveCards.push(card));\r\n\r\n                    return (\r\n                        <CardGroup\r\n                            key={w.id}\r\n                            heading={w.name || 'unnamed wave'}\r\n                            content={waveCards}\r\n                            showToggle={true}\r\n                        />\r\n                    );\r\n                });\r\n            }\r\n\r\n            let watermark;\r\n            if (!this.props.selection) {\r\n                watermark = (\r\n                    <div className='vertical-center-outer'>\r\n                        <div className='vertical-center-middle'>\r\n                            <div className='vertical-center-inner'>\r\n                                <HelpCard encounters={this.props.encounters} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='encounter-builder row collapse'>\r\n                    <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                        {leftColumn}\r\n                    </div>\r\n                    <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                        <CardGroup\r\n                            content={encounterCards}\r\n                            heading={encounterName}\r\n                            hidden={!this.props.selection}\r\n                        />\r\n                        {waves}\r\n                        {this.getLibrarySection()}\r\n                        {watermark}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface HelpCardProps {\r\n    encounters: Encounter[];\r\n}\r\n\r\nclass HelpCard extends React.Component<HelpCardProps> {\r\n    public render() {\r\n        try {\r\n            let action: JSX.Element | null = null;\r\n            if (this.props.encounters.length === 0) {\r\n                action = (\r\n                    <div className='section'>to start building an encounter, press the <b>add a new encounter</b> button</div>\r\n                );\r\n            } else {\r\n                action = (\r\n                    <div>\r\n                        <div className='section'>on the left you will see a list of encounters that you have created</div>\r\n                        <div className='section'>select an encounter from the list to add monsters to it</div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <Note\r\n                    content={\r\n                        <div>\r\n                            <div className='section'>on this page you can set up encounters</div>\r\n                            <div className='section'>\r\n                                when you have created an encounter you can add monsters to it, then gauge its difficulty for a party of pcs\r\n                            </div>\r\n                            <div className='divider'/>\r\n                            {action}\r\n                        </div>\r\n                    }\r\n                />\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n\r\ninterface EncounterInfoProps {\r\n    selection: Encounter;\r\n    parties: Party[];\r\n    filter: string;\r\n    changeValue: (field: string, value: string) => void;\r\n    addWave: () => void;\r\n    removeEncounter: () => void;\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n}\r\n\r\ninterface EncounterInfoState {\r\n    party: Party | null;\r\n}\r\n\r\nclass EncounterInfo extends React.Component<EncounterInfoProps, EncounterInfoState> {\r\n    constructor(props: EncounterInfoProps) {\r\n        super(props);\r\n        this.state = {\r\n            party: null\r\n        };\r\n    }\r\n\r\n    private selectParty(partyID: string) {\r\n        const party = this.props.parties.find(p => p.id === partyID);\r\n        this.setState({\r\n            party: party as Party\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const partyOptions = [];\r\n            if (this.props.parties) {\r\n                for (let n = 0; n !== this.props.parties.length; ++n) {\r\n                    const party = this.props.parties[n];\r\n                    partyOptions.push({\r\n                        id: party.id,\r\n                        text: party.name\r\n                    });\r\n                }\r\n            }\r\n\r\n            return (\r\n                <div>\r\n                    <div className='section'>\r\n                        <div className='subheading'>encounter name</div>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='encounter name'\r\n                            value={this.props.selection.name}\r\n                            disabled={!!this.props.filter}\r\n                            onChange={event => this.props.changeValue('name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <Dropdown\r\n                        options={partyOptions}\r\n                        placeholder='select party...'\r\n                        selectedID={this.state.party ? this.state.party.id : undefined}\r\n                        select={optionID => this.selectParty(optionID)}\r\n                    />\r\n                    <DifficultyChartPanel\r\n                        encounter={this.props.selection}\r\n                        party={this.state.party}\r\n                        getMonster={(monsterName, monsterGroupName) => this.props.getMonster(monsterName, monsterGroupName)}\r\n                    />\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.addWave()}>add a new wave</button>\r\n                        <ConfirmButton text='delete encounter' callback={() => this.props.removeEncounter()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    content: string | JSX.Element | JSX.Element[];\r\n}\r\n\r\nexport default class Readaloud extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div className='readaloud'>\r\n                    {this.props.content}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { MonsterGroup } from '../../models/monster-group';\r\n\r\nimport Readaloud from '../panels/readaloud';\r\n\r\ninterface Props {\r\n    library: MonsterGroup[];\r\n    addOpenGameContent: () => void;\r\n}\r\n\r\nexport default class HomeScreen extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            let monsters = null;\r\n            if (this.props.library.length === 0) {\r\n                monsters = (\r\n                    <div>\r\n                        <div className='divider' />\r\n                        <div className='text'>\r\n                            since your collection of monsters is empty, you might want to start by pressing the button below to add monsters from the&nbsp;\r\n                            <a href='http://dnd.wizards.com/articles/features/systems-reference-document-srd' target='_blank' rel='noopener noreferrer'>\r\n                                system reference document\r\n                            </a>\r\n                        </div>\r\n                        <div className='text'>\r\n                            <button onClick={() => this.props.addOpenGameContent()}>add monsters</button>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            const content = (\r\n                <Readaloud\r\n                    content={(\r\n                        <div>\r\n                            <div className='heading'>welcome to <b>dojo</b></div>\r\n                            <div className='divider' />\r\n                            <div className='section'>\r\n                                <b>dojo</b> is an app for dms of dungeons and dragons fifth edition\r\n                            </div>\r\n                            <div className='section'>\r\n                                with <b>dojo</b> you can:\r\n                                <ul>\r\n                                    <li>build unique, challenging monsters</li>\r\n                                    <li>create encounters of just the right difficulty for your players</li>\r\n                                    <li>design intricate tactical maps</li>\r\n                                    <li>run combat without the book-keeping</li>\r\n                                </ul>\r\n                            </div>\r\n                            {monsters}\r\n                            <div className='divider' />\r\n                            <div className='section'>\r\n                                use the buttons at the bottom of the screen to access the app's features\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                />\r\n            );\r\n\r\n            return (\r\n                <div className='home scrollable'>\r\n                    <div className='vertical-center-outer'>\r\n                        <div className='vertical-center-middle'>\r\n                            <div className='vertical-center-inner'>\r\n                                {content}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Map } from '../../models/map-folio';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    map: Map;\r\n    changeValue: (map: Map, field: string, value: string) => void;\r\n    editMap: (map: Map) => void;\r\n    removeMap: (map: Map) => void;\r\n}\r\n\r\nexport default class MapCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div className='card map'>\r\n                    <div className='heading'>\r\n                        <div className='title'>{this.props.map.name || 'unnamed map'}</div>\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='map name'\r\n                                value={this.props.map.name}\r\n                                onChange={event => this.props.changeValue(this.props.map, 'name', event.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='section centered'>\r\n                            <MapPanel\r\n                                map={this.props.map}\r\n                                mode='thumbnail'\r\n                            />\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='section'>\r\n                            <button onClick={() => this.props.editMap(this.props.map)}>edit map</button>\r\n                            <ConfirmButton text='delete map' callback={() => this.props.removeMap(this.props.map)} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { MapFolio } from '../../models/map-folio';\r\n\r\ninterface Props {\r\n    mapFolio: MapFolio;\r\n    selected: boolean;\r\n    filter: string;\r\n    setSelection: (mapFolio: MapFolio) => void;\r\n}\r\n\r\nexport default class MapFolioListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const matchFolio = Utils.match(this.props.filter, this.props.mapFolio.name);\r\n\r\n            const maps = [];\r\n            for (let n = 0; n !== this.props.mapFolio.maps.length; ++n) {\r\n                const map = this.props.mapFolio.maps[n];\r\n                const name = map.name || 'unnamed map';\r\n                if (matchFolio || Utils.match(this.props.filter, name)) {\r\n                    maps.push(<div key={map.id} className='text'>{name}</div>);\r\n                }\r\n            }\r\n            if (maps.length === 0) {\r\n                maps.push(<div key='empty' className='text'>no maps</div>);\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.mapFolio)}>\r\n                    <div className='heading'>{this.props.mapFolio.name || 'unnamed folio'}</div>\r\n                    {maps}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Map, MapFolio } from '../../models/map-folio';\r\n\r\nimport MapCard from '../cards/map-card';\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport MapFolioListItem from '../list-items/map-folio-list-item';\r\nimport CardGroup from '../panels/card-group';\r\nimport Note from '../panels/note';\r\n\r\ninterface Props {\r\n    mapFolios: MapFolio[];\r\n    selection: MapFolio | null;\r\n    filter: string;\r\n    selectMapFolio: (mapFolio: MapFolio | null) => void;\r\n    addMapFolio: () => void;\r\n    removeMapFolio: () => void;\r\n    addMap: () => void;\r\n    editMap: (map: Map) => void;\r\n    removeMap: (map: Map) => void;\r\n    changeValue: (source: {}, field: string, value: any) => void;\r\n}\r\n\r\nexport default class MapFoliosScreen extends React.Component<Props> {\r\n    private showMapFolio(folio: MapFolio) {\r\n        let result = Utils.match(this.props.filter, folio.name);\r\n\r\n        if (!result) {\r\n            folio.maps.forEach(map => {\r\n                result = Utils.match(this.props.filter, map.name) || result;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let leftColumn = null;\r\n            if (this.props.selection) {\r\n                leftColumn = (\r\n                    <div>\r\n                        <MapFolioInfo\r\n                            selection={this.props.selection}\r\n                            filter={this.props.filter}\r\n                            addMap={() => this.props.addMap()}\r\n                            removeMapFolio={() => this.props.removeMapFolio()}\r\n                            changeValue={(source, field, value) => this.props.changeValue(source, field, value)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <button onClick={() => this.props.selectMapFolio(null)}>&larr; back to list</button>\r\n                    </div>\r\n                );\r\n            } else {\r\n                let listItems = this.props.mapFolios.filter(f => this.showMapFolio(f)).map(mapFolio => {\r\n                    return (\r\n                        <MapFolioListItem\r\n                            key={mapFolio.id}\r\n                            mapFolio={mapFolio}\r\n                            filter={this.props.filter}\r\n                            selected={mapFolio === this.props.selection}\r\n                            setSelection={f => this.props.selectMapFolio(f)}\r\n                        />\r\n                    );\r\n                });\r\n                if (listItems.length === 0) {\r\n                    listItems = [(\r\n                        <Note\r\n                            key='empty'\r\n                            content={'you have not set up any tactical maps yet'}\r\n                        />\r\n                    )];\r\n                }\r\n\r\n                leftColumn = (\r\n                    <div>\r\n                        <button onClick={() => this.props.addMapFolio()}>add a new map folio</button>\r\n                        <div className='divider' />\r\n                        {listItems}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            let folio = null;\r\n            if (this.props.selection) {\r\n                const folioCards = [];\r\n\r\n                this.props.selection.maps.filter(m => Utils.match(this.props.filter, m.name)).forEach(m => {\r\n                    folioCards.push(\r\n                        <div className='column' key={m.id}>\r\n                            <MapCard\r\n                                map={m}\r\n                                editMap={map => this.props.editMap(map)}\r\n                                removeMap={map => this.props.removeMap(map)}\r\n                                changeValue={(source, type, value) => this.props.changeValue(source, type, value)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                if (folioCards.length === 0) {\r\n                    folioCards.push(\r\n                        <div className='column' key='empty'>\r\n                            <Note content={<div className='section'>there are no maps in this folio</div>} />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                folio = (\r\n                    <CardGroup\r\n                        content={folioCards}\r\n                        heading={this.props.selection.name || 'unnamed folio'}\r\n                    />\r\n                );\r\n            }\r\n\r\n            let watermark;\r\n            if (!this.props.selection) {\r\n                watermark = (\r\n                    <div className='vertical-center-outer'>\r\n                        <div className='vertical-center-middle'>\r\n                            <div className='vertical-center-inner'>\r\n                                <HelpCard mapFolios={this.props.mapFolios} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='map-builder row collapse'>\r\n                    <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                        {leftColumn}\r\n                    </div>\r\n                    <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                        {folio}\r\n                        {watermark}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface HelpCardProps {\r\n    mapFolios: MapFolio[];\r\n}\r\n\r\nclass HelpCard extends React.Component<HelpCardProps> {\r\n    public render() {\r\n        try {\r\n            let action: JSX.Element | null = null;\r\n            if (this.props.mapFolios.length === 0) {\r\n                action = (\r\n                    <div className='section'>to start a new folio, press the <b>add a new map folio</b> button</div>\r\n                );\r\n            } else {\r\n                action = (\r\n                    <div>\r\n                        <div className='section'>on the left you will see a list of map folios</div>\r\n                        <div className='section'>select a folio from the list to see the maps it contains</div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <Note\r\n                    content={\r\n                        <div>\r\n                            <div className='section'>on this page you can set up folios containing tactical maps</div>\r\n                            <div className='section'>when you have created a map you can use it in encounters</div>\r\n                            <div className='divider'/>\r\n                            {action}\r\n                        </div>\r\n                    }\r\n                />\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n\r\ninterface MapFolioInfoProps {\r\n    selection: MapFolio;\r\n    filter: string | null;\r\n    changeValue: (source: MapFolio, field: string, value: string) => void;\r\n    addMap: () => void;\r\n    removeMapFolio: () => void;\r\n}\r\n\r\nclass MapFolioInfo extends React.Component<MapFolioInfoProps> {\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div>\r\n                    <div className='section'>\r\n                        <div className='subheading'>map folio name</div>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='map folio name'\r\n                            value={this.props.selection.name}\r\n                            disabled={!!this.props.filter}\r\n                            onChange={event => this.props.changeValue(this.props.selection, 'name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.addMap()}>add a new map</button>\r\n                        <ConfirmButton text='delete folio' callback={() => this.props.removeMapFolio()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { MonsterGroup } from '../../models/monster-group';\r\n\r\ninterface Props {\r\n    group: MonsterGroup;\r\n    selected: boolean;\r\n    filter: string;\r\n    setSelection: (group: MonsterGroup) => void;\r\n}\r\n\r\nexport default class MonsterGroupListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const matchGroup = Utils.match(this.props.filter, this.props.group.name);\r\n\r\n            const monsters = [];\r\n            for (let n = 0; n !== this.props.group.monsters.length; ++n) {\r\n                const monster = this.props.group.monsters[n];\r\n                const name = monster.name || 'unnamed monster';\r\n                if (matchGroup || Utils.match(this.props.filter, name)) {\r\n                    monsters.push(<div key={monster.id} className='text'>{name}</div>);\r\n                }\r\n            }\r\n            if (monsters.length === 0) {\r\n                monsters.push(<div key='empty' className='text'>no monsters</div>);\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.group)}>\r\n                    <div className='heading'>{this.props.group.name || 'unnamed group'}</div>\r\n                    {monsters}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Monster, MonsterGroup } from '../../models/monster-group';\r\n\r\nimport MonsterCard from '../cards/monster-card';\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport MonsterGroupListItem from '../list-items/monster-group-list-item';\r\nimport CardGroup from '../panels/card-group';\r\nimport Note from '../panels/note';\r\n\r\ninterface Props {\r\n    library: MonsterGroup[];\r\n    selection: MonsterGroup | null;\r\n    filter: string;\r\n    selectMonsterGroup: (group: MonsterGroup | null) => void;\r\n    addMonsterGroup: () => void;\r\n    removeMonsterGroup: () => void;\r\n    addMonster: () => void;\r\n    generateMonster: () => void;\r\n    removeMonster: (monster: Monster) => void;\r\n    editMonster: (monster: Monster) => void;\r\n    cloneMonster: (monster: Monster, name: string) => void;\r\n    sortMonsters: () => void;\r\n    moveToGroup: (monster: Monster, groupID: string) => void;\r\n    changeValue: (source: any, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, value: number) => void;\r\n}\r\n\r\nexport default class MonsterLibraryScreen extends React.Component<Props> {\r\n    private showMonsterGroup(group: MonsterGroup) {\r\n        let result = Utils.match(this.props.filter, group.name);\r\n\r\n        if (!result) {\r\n            group.monsters.forEach(monster => {\r\n                result = Utils.match(this.props.filter, monster.name) || result;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let leftColumn = null;\r\n            if (this.props.selection) {\r\n                leftColumn = (\r\n                    <div>\r\n                        <MonsterInfo\r\n                            selection={this.props.selection}\r\n                            filter={this.props.filter}\r\n                            addMonster={() => this.props.addMonster()}\r\n                            generateMonster={() => this.props.generateMonster()}\r\n                            sortMonsters={() => this.props.sortMonsters()}\r\n                            changeValue={(type, value) => this.props.changeValue(this.props.selection, type, value)}\r\n                            removeMonsterGroup={() => this.props.removeMonsterGroup()}\r\n                        />\r\n                        <div className='divider' />\r\n                        <button onClick={() => this.props.selectMonsterGroup(null)}>&larr; back to list</button>\r\n                    </div>\r\n                );\r\n            } else {\r\n                let listItems = this.props.library.filter(group => this.showMonsterGroup(group)).map(group => {\r\n                    return (\r\n                        <MonsterGroupListItem\r\n                            key={group.id}\r\n                            group={group}\r\n                            filter={this.props.filter}\r\n                            selected={group === this.props.selection}\r\n                            setSelection={grp => this.props.selectMonsterGroup(grp)}\r\n                        />\r\n                    );\r\n                });\r\n                if (listItems.length === 0) {\r\n                    listItems = [(\r\n                        <Note\r\n                            key='empty'\r\n                            content={'you do not have any monsters in your library'}\r\n                        />\r\n                    )];\r\n                }\r\n\r\n                leftColumn = (\r\n                    <div>\r\n                        <button onClick={() => this.props.addMonsterGroup()}>add a new monster group</button>\r\n                        <div className='divider' />\r\n                        {listItems}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            const cards: JSX.Element[] = [];\r\n\r\n            if (this.props.selection) {\r\n                const monsters = this.props.selection.monsters.filter(monster => {\r\n                    return Utils.match(this.props.filter, monster.name);\r\n                });\r\n\r\n                if (monsters.length !== 0) {\r\n                    monsters.forEach(m => {\r\n                        cards.push(\r\n                            <div className='column' key={m.id}>\r\n                                <MonsterCard\r\n                                    combatant={m}\r\n                                    mode={'view editable'}\r\n                                    library={this.props.library}\r\n                                    changeValue={(source, type, value) => this.props.changeValue(source, type, value)}\r\n                                    nudgeValue={(source, type, delta) => this.props.nudgeValue(source, type, delta)}\r\n                                    moveToGroup={(monster, groupID) => this.props.moveToGroup(monster, groupID)}\r\n                                    removeMonster={monster => this.props.removeMonster(monster)}\r\n                                    editMonster={monster => this.props.editMonster(monster)}\r\n                                    cloneMonster={(monster, monsterName) => this.props.cloneMonster(monster, monsterName)}\r\n                                />\r\n                            </div>\r\n                        );\r\n                    });\r\n                } else {\r\n                    cards.push(\r\n                        <div className='column' key='empty'>\r\n                            <Note content={<div className='section'>there are no monsters in this group</div>} />\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n\r\n            let name;\r\n            if (this.props.selection) {\r\n                name = this.props.selection.name;\r\n                if (!name) {\r\n                    name = 'unnamed group';\r\n                }\r\n            }\r\n\r\n            let watermark;\r\n            if (!this.props.selection) {\r\n                watermark = (\r\n                    <div className='vertical-center-outer'>\r\n                        <div className='vertical-center-middle'>\r\n                            <div className='vertical-center-inner'>\r\n                                <HelpCard library={this.props.library} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='monster-library row collapse'>\r\n                    <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                        {leftColumn}\r\n                    </div>\r\n                    <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                        <CardGroup\r\n                            content={cards}\r\n                            heading={name}\r\n                            hidden={!this.props.selection}\r\n                        />\r\n                        {watermark}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface HelpCardProps {\r\n    library: MonsterGroup[];\r\n}\r\n\r\nclass HelpCard extends React.Component<HelpCardProps> {\r\n    public render() {\r\n        let action: JSX.Element | null = null;\r\n        if (this.props.library.length === 0) {\r\n            action = (\r\n                <div className='section'>to start adding monsters, press the <b>add a new monster group</b> button</div>\r\n            );\r\n        } else {\r\n            action = (\r\n                <div>\r\n                    <div className='section'>on the left you will see a list of monster groups</div>\r\n                    <div className='section'>select a monster group from the list to see stat blocks for monsters in that group</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Note\r\n                content={\r\n                    <div>\r\n                        <div className='section'>you can maintain your menagerie of monsters here</div>\r\n                        <div className='divider'/>\r\n                        {action}\r\n                    </div>\r\n                }\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\ninterface MonsterInfoProps {\r\n    selection: MonsterGroup;\r\n    filter: string | null;\r\n    changeValue: (field: string, value: string) => void;\r\n    addMonster: () => void;\r\n    generateMonster: () => void;\r\n    sortMonsters: () => void;\r\n    removeMonsterGroup: () => void;\r\n}\r\n\r\nclass MonsterInfo extends React.Component<MonsterInfoProps> {\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div>\r\n                    <div className='section'>\r\n                        <div className='subheading'>monster group name</div>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='monster group name'\r\n                            value={this.props.selection.name}\r\n                            disabled={!!this.props.filter}\r\n                            onChange={event => this.props.changeValue('name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.addMonster()}>add a new blank monster</button>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.generateMonster()}>generate a random monster</button>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.sortMonsters()}>sort monsters</button>\r\n                        <ConfirmButton text='delete group' callback={() => this.props.removeMonsterGroup()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Party } from '../../models/party';\r\n\r\ninterface Props {\r\n    party: Party;\r\n    selected: boolean;\r\n    filter: string;\r\n    setSelection: (party: Party) => void;\r\n}\r\n\r\nexport default class PartyListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const matchParty = Utils.match(this.props.filter, this.props.party.name);\r\n\r\n            const pcs = [];\r\n            for (let n = 0; n !== this.props.party.pcs.length; ++n) {\r\n                const pc = this.props.party.pcs[n];\r\n                let name = pc.name || 'unnamed pc';\r\n                if (pc.player) {\r\n                    name += ' (' + pc.player + ')';\r\n                }\r\n                if (matchParty || Utils.match(this.props.filter, name)) {\r\n                    pcs.push(<div key={pc.id} className='text'>{name}</div>);\r\n                }\r\n            }\r\n            if (pcs.length === 0) {\r\n                pcs.push(<div key='empty' className='text'>no pcs</div>);\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.party)}>\r\n                    <div className='heading'>{this.props.party.name || 'unnamed party'}</div>\r\n                    {pcs}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Party, PC } from '../../models/party';\r\n\r\nimport PCCard from '../cards/pc-card';\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport PartyListItem from '../list-items/party-list-item';\r\nimport CardGroup from '../panels/card-group';\r\nimport Note from '../panels/note';\r\n\r\ninterface Props {\r\n    parties: Party[];\r\n    selection: Party | null;\r\n    filter: string;\r\n    selectParty: (party: Party | null) => void;\r\n    addParty: () => void;\r\n    removeParty: () => void;\r\n    addPC: () => void;\r\n    editPC: (pc: PC) => void;\r\n    removePC: (pc: PC) => void;\r\n    sortPCs: () => void;\r\n    changeValue: (source: any, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, value: number) => void;\r\n}\r\n\r\nexport default class PartiesScreen extends React.Component<Props> {\r\n    private showParty(party: Party) {\r\n        let result = Utils.match(this.props.filter, party.name);\r\n\r\n        if (!result) {\r\n            party.pcs.forEach(pc => {\r\n                result = Utils.match(this.props.filter, pc.name) || result;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let leftColumn = null;\r\n            if (this.props.selection) {\r\n                leftColumn = (\r\n                    <div>\r\n                        <PartyInfo\r\n                            selection={this.props.selection}\r\n                            filter={this.props.filter}\r\n                            addPC={() => this.props.addPC()}\r\n                            sortPCs={() => this.props.sortPCs()}\r\n                            changeValue={(type, value) => this.props.changeValue(this.props.selection, type, value)}\r\n                            removeParty={() => this.props.removeParty()}\r\n                        />\r\n                        <div className='divider' />\r\n                        <button onClick={() => this.props.selectParty(null)}>&larr; back to list</button>\r\n                    </div>\r\n                );\r\n            } else {\r\n                let listItems = this.props.parties.filter(p => this.showParty(p)).map(p => {\r\n                    return (\r\n                        <PartyListItem\r\n                            key={p.id}\r\n                            party={p}\r\n                            filter={this.props.filter}\r\n                            selected={p === this.props.selection}\r\n                            setSelection={party => this.props.selectParty(party)}\r\n                        />\r\n                    );\r\n                });\r\n                if (listItems.length === 0) {\r\n                    listItems = [(\r\n                        <Note\r\n                            key='empty'\r\n                            content={'you have not set up any parties yet'}\r\n                        />\r\n                    )];\r\n                }\r\n\r\n                leftColumn = (\r\n                    <div>\r\n                        <button onClick={() => this.props.addParty()}>add a new party</button>\r\n                        <div className='divider' />\r\n                        {listItems}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            const activeCards: JSX.Element[] = [];\r\n            const inactiveCards: JSX.Element[] = [];\r\n\r\n            if (this.props.selection) {\r\n                const pcs = this.props.selection.pcs.filter(pc => {\r\n                    return Utils.match(this.props.filter, pc.name);\r\n                });\r\n\r\n                const activePCs = pcs.filter(pc => pc.active);\r\n                activePCs.forEach(activePC => {\r\n                    activeCards.push(\r\n                        <div className='column' key={activePC.id}>\r\n                            <PCCard\r\n                                combatant={activePC}\r\n                                mode={'edit'}\r\n                                changeValue={(pc, type, value) => this.props.changeValue(pc, type, value)}\r\n                                nudgeValue={(pc, type, delta) => this.props.nudgeValue(pc, type, delta)}\r\n                                editPC={pc => this.props.editPC(pc)}\r\n                                removePC={pc => this.props.removePC(pc)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                const inactivePCs = pcs.filter(pc => !pc.active);\r\n                inactivePCs.forEach(inactivePC => {\r\n                    inactiveCards.push(\r\n                        <div className='column' key={inactivePC.id}>\r\n                            <PCCard\r\n                                combatant={inactivePC}\r\n                                mode={'edit'}\r\n                                changeValue={(pc, type, value) => this.props.changeValue(pc, type, value)}\r\n                                nudgeValue={(pc, type, delta) => this.props.nudgeValue(pc, type, delta)}\r\n                                editPC={pc => this.props.editPC(pc)}\r\n                                removePC={pc => this.props.removePC(pc)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                if (activePCs.length === 0) {\r\n                    activeCards.push(\r\n                        <div className='column' key='empty'>\r\n                            <Note content={<div className='section'>there are no pcs in this party</div>} />\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n\r\n            let name;\r\n            if (this.props.selection) {\r\n                name = this.props.selection.name || 'unnamed party';\r\n            }\r\n\r\n            let watermark;\r\n            if (!this.props.selection) {\r\n                watermark = (\r\n                    <div className='vertical-center-outer'>\r\n                        <div className='vertical-center-middle'>\r\n                            <div className='vertical-center-inner'>\r\n                                <HelpCard parties={this.props.parties} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='parties row collapse'>\r\n                    <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                        {leftColumn}\r\n                    </div>\r\n                    <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                        <CardGroup\r\n                            content={activeCards}\r\n                            heading={name}\r\n                            hidden={!this.props.selection}\r\n                        />\r\n                        <CardGroup\r\n                            content={inactiveCards}\r\n                            heading='inactive pcs'\r\n                            hidden={inactiveCards.length === 0}\r\n                        />\r\n                        {watermark}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface HelpCardProps {\r\n    parties: Party[];\r\n}\r\n\r\nclass HelpCard extends React.Component<HelpCardProps> {\r\n    public render() {\r\n        try {\r\n            let action: JSX.Element | null = null;\r\n            if (this.props.parties.length === 0) {\r\n                action = (\r\n                    <div className='section'>to start adding a party, press the <b>add a new party</b> button</div>\r\n                );\r\n            } else {\r\n                action = (\r\n                    <div>\r\n                        <div className='section'>on the left you will see a list of parties that you have created</div>\r\n                        <div className='section'>select a party from the list to see pc details</div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <Note\r\n                    content={\r\n                        <div>\r\n                            <div className='section'>this page is where you can tell dojo all about your pcs</div>\r\n                            <div className='section'>you can add a party for each of your gaming groups</div>\r\n                            <div className='divider'/>\r\n                            {action}\r\n                        </div>\r\n                    }\r\n                />\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n\r\ninterface PartyInfoProps {\r\n    selection: Party;\r\n    filter: string | null;\r\n    changeValue: (field: string, value: string) => void;\r\n    addPC: () => void;\r\n    sortPCs: () => void;\r\n    removeParty: () => void;\r\n}\r\n\r\nclass PartyInfo extends React.Component<PartyInfoProps> {\r\n    public render() {\r\n        try {\r\n            const activePCs = this.props.selection.pcs.filter(pc => pc.active);\r\n\r\n            let summary = null;\r\n\r\n            if (activePCs.length !== 0) {\r\n\r\n                let languages = '';\r\n                let insightSummary = '-';\r\n                let investigationSummary = '-';\r\n                let perceptionSummary = '-';\r\n\r\n                languages = activePCs\r\n                    .map(pc => pc.languages)\r\n                    .join(', ')\r\n                    .split(/[ ,;]+/)\r\n                    .reduce((array: string[], value) => {\r\n                        if (array.indexOf(value) === -1) {\r\n                            array.push(value);\r\n                        }\r\n                        return array;\r\n                    }, [])\r\n                    .sort((a, b) => {\r\n                        if (a === 'Common') {\r\n                            return -1;\r\n                        }\r\n                        if (b === 'Common') {\r\n                            return 1;\r\n                        }\r\n                        return a.localeCompare(b);\r\n                    })\r\n                    .join(', ');\r\n\r\n                const insight: { min: number | null, max: number | null } = { min: null, max: null };\r\n                const invest: { min: number | null, max: number | null } = { min: null, max: null };\r\n                const percep: { min: number | null, max: number | null } = { min: null, max: null };\r\n\r\n                activePCs.forEach(pc => {\r\n                    insight.min = insight.min === null ? pc.passiveInsight : Math.min(insight.min, pc.passiveInsight);\r\n                    insight.max = insight.max === null ? pc.passiveInsight : Math.max(insight.max, pc.passiveInsight);\r\n                    invest.min = invest.min === null ? pc.passiveInvestigation : Math.min(invest.min, pc.passiveInvestigation);\r\n                    invest.max = invest.max === null ? pc.passiveInvestigation : Math.max(invest.max, pc.passiveInvestigation);\r\n                    percep.min = percep.min === null ? pc.passivePerception : Math.min(percep.min, pc.passivePerception);\r\n                    percep.max = percep.max === null ? pc.passivePerception : Math.max(percep.max, pc.passivePerception);\r\n                });\r\n\r\n                insightSummary = insight.min === insight.max ? (insight.min as number).toString() : insight.min + ' - ' + insight.max;\r\n                investigationSummary = invest.min === invest.max ? (invest.min as number).toString() : invest.min + ' - ' + invest.max;\r\n                perceptionSummary = percep.min === percep.max ? (percep.min as number).toString() : percep.min + ' - ' + percep.max;\r\n\r\n                summary = (\r\n                    <div>\r\n                        <div className='section' style={{ display: languages !== '' ? 'block' : 'none' }}>\r\n                            <div className='subheading'>party known languages</div>\r\n                        </div>\r\n                        <div className='section'>\r\n                            {languages}\r\n                        </div>\r\n                        <div className='section'>\r\n                            <div className='subheading'>party passive skills</div>\r\n                        </div>\r\n                        <div className='table'>\r\n                            <div>\r\n                                <div className='cell three'><b>insight</b></div>\r\n                                <div className='cell three'><b>invest.</b></div>\r\n                                <div className='cell three'><b>percep.</b></div>\r\n                            </div>\r\n                            <div>\r\n                                <div className='cell three'>{insightSummary}</div>\r\n                                <div className='cell three'>{investigationSummary}</div>\r\n                                <div className='cell three'>{perceptionSummary}</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div>\r\n                    <div className='section'>\r\n                        <div className='subheading'>party name</div>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='party name'\r\n                            value={this.props.selection.name}\r\n                            disabled={!!this.props.filter}\r\n                            onChange={event => this.props.changeValue('name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    {summary}\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.addPC()}>add a new pc</button>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.sortPCs()}>sort pcs</button>\r\n                        <ConfirmButton text='delete party' callback={() => this.props.removeParty()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport Selector from '../controls/selector';\r\nimport Spin from '../controls/spin';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    //\r\n}\r\n\r\ninterface State {\r\n    dice: string;\r\n    count: number;\r\n    rolls: number[] | null;\r\n    result: number | null;\r\n}\r\n\r\nexport default class DieRollerModule extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            dice: '20',\r\n            count: 1,\r\n            rolls: null,\r\n            result: null\r\n        };\r\n    }\r\n\r\n    private setDice(dice: string) {\r\n        this.setState({\r\n            dice: dice\r\n        });\r\n    }\r\n\r\n    private nudgeCount(delta: number) {\r\n        this.setState({\r\n            count: Math.max(1, this.state.count + delta)\r\n        });\r\n    }\r\n\r\n    private roll() {\r\n        const sides = parseInt(this.state.dice, 10);\r\n\r\n        const rolls: number[] = [];\r\n        for (let n = 0; n !== this.state.count; ++n) {\r\n            rolls.push(Utils.dieRoll(sides));\r\n        }\r\n        rolls.sort((a, b) => a - b);\r\n\r\n        let result = 0;\r\n        rolls.forEach(roll => result += roll);\r\n\r\n        this.setState({\r\n            rolls: rolls,\r\n            result: result\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        const options = [\r\n            {\r\n                id: '4',\r\n                text: 'd4'\r\n            },\r\n            {\r\n                id: '6',\r\n                text: 'd6'\r\n            },\r\n            {\r\n                id: '8',\r\n                text: 'd8'\r\n            },\r\n            {\r\n                id: '10',\r\n                text: 'd10'\r\n            },\r\n            {\r\n                id: '12',\r\n                text: 'd12'\r\n            },\r\n            {\r\n                id: '20',\r\n                text: 'd20'\r\n            },\r\n            {\r\n                id: '100',\r\n                text: 'd100'\r\n            }\r\n        ];\r\n\r\n        let rollsSection = null;\r\n        if (this.state.rolls !== null) {\r\n            rollsSection = (\r\n                <div className='section die-rolls'>{this.state.rolls.join(', ')}</div>\r\n            );\r\n        }\r\n\r\n        let resultSection = null;\r\n        if (this.state.result !== null) {\r\n            resultSection = (\r\n                <div className='section die-result'>{this.state.result}</div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className='die-roller'>\r\n                <div className='subheading'>die type</div>\r\n                <Selector\r\n                    options={options}\r\n                    selectedID={this.state.dice}\r\n                    select={optionID => this.setDice(optionID)}\r\n                />\r\n                <div className='subheading'>number to roll</div>\r\n                <Spin\r\n                    source={this.state}\r\n                    name='count'\r\n                    display={count => count + 'd' + this.state.dice}\r\n                    nudgeValue={delta => this.nudgeCount(delta)}\r\n                />\r\n                <div className='divider' />\r\n                <button onClick={() => this.roll()}>roll dice</button>\r\n                {rollsSection}\r\n                {resultSection}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","export default class Speech {\r\n    public static async say(text: string, languages: string[]) {\r\n        // If we're  already saying something, stop it\r\n        window.speechSynthesis.cancel();\r\n\r\n        const utterance = new SpeechSynthesisUtterance(text);\r\n        utterance.voice = await Speech.chooseVoice(languages);\r\n        utterance.rate = Speech.randomValue(0.5, 1.5);\r\n        utterance.pitch = Speech.randomValue(0.5, 1.5);\r\n\r\n        window.speechSynthesis.speak(utterance);\r\n    }\r\n\r\n    private static async chooseVoice(languages: string[]) {\r\n        const voices = await Speech.getVoices();\r\n\r\n        // Get language codes for the selected languages\r\n        const langCodes = languages.map(lang => Speech.getLanguageCode(lang));\r\n\r\n        // Filter voice list by these language codes\r\n        let candidates = voices.filter(v => langCodes.includes(v.lang.substr(0, 2)));\r\n        if (candidates.length === 0) {\r\n            candidates = voices.filter(v => v.default);\r\n        }\r\n        if (candidates.length === 0) {\r\n            candidates = voices;\r\n        }\r\n\r\n        const index = Math.floor(Math.random() * candidates.length);\r\n        return candidates[index];\r\n    }\r\n\r\n    private static getVoices() {\r\n        return new Promise<SpeechSynthesisVoice[]>(resolve => {\r\n            let list = window.speechSynthesis.getVoices();\r\n            if (list.length > 0) {\r\n                resolve(list);\r\n                return;\r\n            }\r\n            speechSynthesis.onvoiceschanged = () => {\r\n                list = window.speechSynthesis.getVoices();\r\n                resolve(list);\r\n            };\r\n        });\r\n    }\r\n\r\n    private static getLanguageCode(language: string) {\r\n        switch (language) {\r\n            case 'armenian':\r\n                return 'hy';\r\n            case 'basque':\r\n                return 'eu';\r\n            case 'bulgarian':\r\n                return 'bg';\r\n            case 'chichewa':\r\n                return 'ny';\r\n            case 'chinese':\r\n                return 'zh';\r\n            case 'croatian':\r\n                return 'hr';\r\n            case 'czech':\r\n                return 'cs';\r\n            case 'dutch':\r\n                return 'nl';\r\n            case 'german':\r\n                return 'de';\r\n            case 'greek':\r\n                return 'el';\r\n            case 'icelandic':\r\n                return 'is';\r\n            case 'irish':\r\n                return 'ga';\r\n            case 'kannada':\r\n                return 'kn';\r\n            case 'kazakh':\r\n                return 'kk';\r\n            case 'latvian':\r\n                return 'lv';\r\n            case 'lithuanian':\r\n                return 'lt';\r\n            case 'macedonian':\r\n                return 'mk';\r\n            case 'malay':\r\n                return 'ms';\r\n            case 'maltese':\r\n                return 'mt';\r\n            case 'maori':\r\n                return 'mi';\r\n            case 'polish':\r\n                return 'pl';\r\n            case 'portuguese':\r\n                return 'pt';\r\n            case 'punjabi':\r\n                return 'pa';\r\n            case 'samoan':\r\n                return 'sm';\r\n            case 'serbian':\r\n                return 'sr';\r\n            case 'shona':\r\n                return 'sn';\r\n            case 'spanish':\r\n                return 'es';\r\n            case 'swedish':\r\n                return 'sv';\r\n            case 'turkish':\r\n                return 'tr';\r\n            case 'welsh':\r\n                return 'cy';\r\n            default:\r\n                return language.substr(0, 2);\r\n        }\r\n    }\r\n\r\n    private static randomValue(min: number, max: number) {\r\n        const x = (Math.random() + Math.random() + Math.random()) / 3;\r\n        const range = max - min;\r\n        return min + (x * range);\r\n    }\r\n}\r\n","import Utils from './utils';\r\n\r\ninterface ModelLine {\r\n    prev: string;\r\n    freq: ModelChar[];\r\n}\r\n\r\ninterface ModelChar {\r\n    char: string;\r\n    count: number;\r\n}\r\n\r\nexport default class TextGenerator {\r\n\r\n    private static model: ModelLine[] = [];\r\n    private static maxLength: number = 0;\r\n\r\n    public static initModel(sources: string[]) {\r\n        const model: ModelLine[] = [];\r\n        let maxLength: number = 0;\r\n\r\n        sources.forEach(source => {\r\n            const lines = source.split(/\\r?\\n/);\r\n            lines.forEach(line => {\r\n                if (line) {\r\n                    TextGenerator.addLineToModel(line, model);\r\n                    maxLength = Math.max(maxLength, line.length);\r\n                }\r\n            });\r\n        });\r\n\r\n        TextGenerator.model = model;\r\n        TextGenerator.maxLength = maxLength;\r\n    }\r\n\r\n    private static addLineToModel(line: string, model: ModelLine[]) {\r\n        line = String.fromCharCode(0, 1) + line + String.fromCharCode(2);\r\n\r\n        for (let index = 2; index !== line.length; ++index) {\r\n            const prev = line.substr(index - 2, 2);\r\n            const char = line.substr(index, 1);\r\n\r\n            let item = model.find(x => x.prev === prev);\r\n            if (!item) {\r\n                item = {\r\n                    prev: prev,\r\n                    freq: []\r\n                };\r\n                model.push(item);\r\n            }\r\n\r\n            let freq = item.freq.find(x => x.char === char);\r\n            if (!freq) {\r\n                freq = {\r\n                    char: char,\r\n                    count: 0\r\n                };\r\n                item.freq.push(freq);\r\n            }\r\n\r\n            freq.count += 1;\r\n        }\r\n    }\r\n\r\n    public static generate(requiredResults: number): { line: string, fit: number }[] {\r\n        const lines: { line: string, fit: number }[] = [];\r\n        const allowedFailures = 100;\r\n        let failures = 0;\r\n\r\n        while ((lines.length < requiredResults) && (failures < allowedFailures)) {\r\n            const line = TextGenerator.extractLine();\r\n            if (line && !lines.map(l => l.line).includes(line) && line.length <= TextGenerator.maxLength) {\r\n                const fit = TextGenerator.fit(line);\r\n                lines.push({ line, fit });\r\n            } else {\r\n                failures += 1;\r\n            }\r\n        }\r\n\r\n        return lines;\r\n    }\r\n\r\n    private static extractLine() {\r\n        let line = String.fromCharCode(0, 1);\r\n\r\n        while (true) {\r\n            const prev = line.substr(line.length - 2, 2);\r\n\r\n            const item = TextGenerator.model.find(x => x.prev === prev);\r\n            if (item) {\r\n                let candidates = '';\r\n                item.freq.forEach(freq => {\r\n                    candidates += freq.char.repeat(freq.count);\r\n                });\r\n\r\n                const index = Math.floor(Math.random() * candidates.length);\r\n                let char = candidates[index];\r\n                if (char === String.fromCharCode(2)) {\r\n                    line = line.substr(2);\r\n                    return line;\r\n                } else {\r\n                    if (Utils.dieRoll() === 1) {\r\n                        // TODO: Mutate choice\r\n                        const groups = ['bdg', 'ptk', 'sz', 'aeiouy', 'lr', 'ckq', 'vf'];\r\n                        groups.forEach(g => {\r\n                            if (g.includes(char)) {\r\n                                const n = Math.floor(Math.random() * g.length);\r\n                                char = g[n];\r\n                            }\r\n                        });\r\n                    }\r\n                    line += char;\r\n                }\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n\r\n    private static fit(text: string): number {\r\n        text = String.fromCharCode(0, 1) + text + String.fromCharCode(2);\r\n\r\n        const values: number[] = [];\r\n        for (let n = 2; n !== text.length; ++n) {\r\n            const prev = text.substr(n - 2, 2);\r\n            const ch = text[n];\r\n\r\n            const line = TextGenerator.model.find(m => m.prev === prev);\r\n            if (line) {\r\n                const mc = line.freq.find(f => f.char === ch);\r\n                if (mc) {\r\n                    const maxCount = line.freq.reduce((max, value) => Math.max(max, value.count), 0);\r\n                    const fit = mc.count / maxCount;\r\n                    values.push(fit);\r\n                } else {\r\n                    values.push(0);\r\n                }\r\n            }\r\n        }\r\n\r\n        return values.reduce((sum, value) => sum + value, 0) / values.length;\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Speech from '../../utils/speech';\r\nimport TextGenerator from '../../utils/text-generation';\r\n\r\nimport Checkbox from '../controls/checkbox';\r\nimport ControlRow from '../controls/control-row';\r\nimport Expander from '../controls/expander';\r\nimport Selector from '../controls/selector';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    //\r\n}\r\n\r\ninterface State {\r\n    sources: { [id: string]: string; };\r\n    output: string[];\r\n}\r\n\r\ninterface Preset {\r\n    name: string;\r\n    languages: string[];\r\n}\r\n\r\nexport default class LanguageModule extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            sources: {},\r\n            output: []\r\n        };\r\n    }\r\n\r\n    private getLanguages(): string[] {\r\n        // Note: When adding a language to this list, also check the Speech.getLanguageCode() method\r\n        return [\r\n            'afrikaans',\r\n            'amharic',\r\n            'armenian',\r\n            'basque',\r\n            'belarusian',\r\n            'bulgarian',\r\n            'chichewa',\r\n            'chinese',\r\n            'croatian',\r\n            'czech',\r\n            'danish',\r\n            'dutch',\r\n            'english',\r\n            'finnish',\r\n            'french',\r\n            'german',\r\n            'greek',\r\n            'hawaiian',\r\n            'hindi',\r\n            'hungarian',\r\n            'icelandic',\r\n            'irish',\r\n            'italian',\r\n            'japanese',\r\n            'kannada',\r\n            'kazakh',\r\n            'korean',\r\n            'kyrgyz',\r\n            'latvian',\r\n            'lithuanian',\r\n            'macedonian',\r\n            'malay',\r\n            'maltese',\r\n            'maori',\r\n            'myanmar',\r\n            'nepali',\r\n            'norwegian',\r\n            'polish',\r\n            'portuguese',\r\n            'punjabi',\r\n            'romanian',\r\n            'russian',\r\n            'samoan',\r\n            'serbian',\r\n            'shona',\r\n            'somali',\r\n            'spanish',\r\n            'swahili',\r\n            'swedish',\r\n            'thai',\r\n            'turkish',\r\n            'welsh',\r\n            'yiddish',\r\n            'zulu'\r\n        ];\r\n    }\r\n\r\n    private getPresets(): Preset[] {\r\n        return [\r\n            {\r\n                name: 'draconic',\r\n                languages: ['armenian', 'irish', 'maltese']\r\n            },\r\n            {\r\n                name: 'dwarvish',\r\n                languages: ['czech', 'german', 'yiddish']\r\n            },\r\n            {\r\n                name: 'elvish',\r\n                languages: ['finnish', 'spanish', 'welsh']\r\n            },\r\n            {\r\n                name: 'goblin',\r\n                languages: ['hawaiian', 'kyrgyz', 'somali']\r\n            },\r\n            {\r\n                name: 'orc',\r\n                languages: ['macedonian', 'russian', 'turkish']\r\n            }\r\n        ];\r\n    }\r\n\r\n    private async addLanguage(language: string) {\r\n        const response = await fetch('./data/langs/' + language + '.txt');\r\n        this.state.sources[language] = await response.text();\r\n        this.setState({\r\n            sources: this.state.sources\r\n        });\r\n    }\r\n\r\n    private removeLanguage(language: string) {\r\n        delete this.state.sources[language];\r\n        this.setState({\r\n            sources: this.state.sources\r\n        });\r\n    }\r\n\r\n    private usePreset(presetName: string) {\r\n        const preset = this.getPresets().find(p => p.name === presetName);\r\n        if (preset) {\r\n            this.setState({\r\n                sources: {},\r\n                output: []\r\n            }, () => {\r\n                preset.languages.forEach(lang => {\r\n                    this.addLanguage(lang);\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    private random() {\r\n        const languages = this.getLanguages();\r\n\r\n        const selection: string[] = [];\r\n        while (selection.length !== 3) {\r\n            const n = Math.floor(Math.random() * languages.length);\r\n            const lang = languages[n];\r\n            if (!selection.includes(lang)) {\r\n                selection.push(lang);\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            sources: {},\r\n            output: []\r\n        }, () => {\r\n            selection.forEach(lang => {\r\n                this.addLanguage(lang);\r\n            });\r\n        });\r\n    }\r\n\r\n    private generate() {\r\n        const sources: string[] = [];\r\n        Object.keys(this.state.sources).forEach(key => {\r\n            const src = this.state.sources[key];\r\n            sources.push(src);\r\n        });\r\n        TextGenerator.initModel(sources);\r\n        this.setState({\r\n            output: TextGenerator.generate(5).map(l => l.line)\r\n        });\r\n    }\r\n\r\n    private reset() {\r\n        this.setState({\r\n            sources: {},\r\n            output: []\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        const presetOptions = this.getPresets().map(p => {\r\n            return {\r\n                id: p.name,\r\n                text: p.name\r\n            };\r\n        });\r\n\r\n        let selectedPreset = '';\r\n        this.getPresets().forEach(p => {\r\n            const selected = Object.keys(this.state.sources).sort().join(', ');\r\n            const setting = p.languages.sort().join(', ');\r\n            if (selected === setting) {\r\n                selectedPreset = p.name;\r\n            }\r\n        });\r\n\r\n        let selectedLanguages = Object.keys(this.state.sources).sort().join(', ');\r\n        if (selectedLanguages === '') {\r\n            selectedLanguages = 'none';\r\n        }\r\n\r\n        const languages = this.getLanguages()\r\n            .map(lang => {\r\n                const isSelected = Object.keys(this.state.sources).includes(lang);\r\n                return (\r\n                    <div className='column' key={lang}>\r\n                        <Checkbox\r\n                            label={lang}\r\n                            display='button'\r\n                            checked={isSelected}\r\n                            changeValue={value => value ? this.addLanguage(lang) : this.removeLanguage(lang)}\r\n                        />\r\n                    </div>\r\n                );\r\n            });\r\n\r\n        const allowGenerate = Object.keys(this.state.sources).length > 0;\r\n        const allowReset = allowGenerate || this.state.output.length > 0;\r\n\r\n        const output = [];\r\n        if (this.state.output.length > 0) {\r\n            output.push(\r\n                <div key='div' className='divider' />\r\n            );\r\n        }\r\n        for (let n = 0; n !== this.state.output.length; ++n) {\r\n            output.push(\r\n                <GeneratedText\r\n                    key={n}\r\n                    text={this.state.output[n]}\r\n                    languages={Object.keys(this.state.sources)}\r\n                />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className='language'>\r\n                <div className='heading'>presets</div>\r\n                <Selector\r\n                    options={presetOptions}\r\n                    selectedID={selectedPreset}\r\n                    select={optionID => this.usePreset(optionID)}\r\n                />\r\n                <div className='divider' />\r\n                <Expander\r\n                    text={'selected languages: ' + selectedLanguages}\r\n                    content={\r\n                        <div className='row collapse small-up-1 medium-up-2 large-up-3 language-options'>\r\n                            {languages}\r\n                        </div>\r\n                    }\r\n                />\r\n                <div className='divider' />\r\n                <ControlRow\r\n                    controls={[\r\n                        <button key='generate' className={allowGenerate ? '' : 'disabled'} onClick={() => this.generate()}>generate text</button>,\r\n                        <button key='reset' className={allowReset ? '' : 'disabled'} onClick={() => this.reset()}>reset</button>,\r\n                        <button key='random' onClick={() => this.random()}>random sources</button>\r\n                    ]}\r\n                />\r\n                <div className='language-output'>\r\n                    {output}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface GeneratedTextProps {\r\n    text: string;\r\n    languages: string[];\r\n}\r\n\r\nclass GeneratedText extends React.Component<GeneratedTextProps> {\r\n    private copy(e: React.MouseEvent) {\r\n        e.preventDefault();\r\n        navigator.clipboard.writeText(this.props.text);\r\n    }\r\n\r\n    private say(e: React.MouseEvent) {\r\n        e.preventDefault();\r\n        Speech.say(this.props.text, this.props.languages);\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <Expander\r\n                text={this.props.text.toLowerCase()}\r\n                content={\r\n                    <div>\r\n                        <button onClick={e => this.copy(e)}>copy to clipboard</button>\r\n                        <button onClick={e => this.say(e)}>say</button>\r\n                        <div className='section'>\r\n                            <b>note:</b> speech may not work consistently on all platforms\r\n                        </div>\r\n                    </div>\r\n                }\r\n            />\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport TextGenerator from '../../utils/text-generation';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    //\r\n}\r\n\r\ninterface State {\r\n    output: {\r\n        male: string[],\r\n        female: string[],\r\n        surname: string[]\r\n    };\r\n}\r\n\r\nexport default class NameModule extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            output: {\r\n                male: [],\r\n                female: [],\r\n                surname: []\r\n            }\r\n        };\r\n    }\r\n\r\n    private async generate(type: 'male' | 'female' | 'surname') {\r\n        const response = await fetch('./data/names/' + type + '.txt');\r\n        const input = await response.text();\r\n\r\n        TextGenerator.initModel([input]);\r\n        const names = TextGenerator.generate(10).map(n => n.line).sort();\r\n\r\n        this.state.output[type] = names;\r\n        this.setState({\r\n            output: this.state.output\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        const male = [];\r\n        for (let n = 0; n !== this.state.output.male.length; ++n) {\r\n            male.push(\r\n                <div key={n} className='section'>\r\n                    {this.state.output.male[n].toLowerCase()}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        const female = [];\r\n        for (let n = 0; n !== this.state.output.female.length; ++n) {\r\n            female.push(\r\n                <div key={n} className='section'>\r\n                    {this.state.output.female[n].toLowerCase()}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        const surname = [];\r\n        for (let n = 0; n !== this.state.output.surname.length; ++n) {\r\n            surname.push(\r\n                <div key={n} className='section'>\r\n                    {this.state.output.surname[n].toLowerCase()}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className='name'>\r\n                <div className='name-output'>\r\n                    <div className='row'>\r\n                        <div className='columns small-4 medium-4 large-4'>\r\n                            <div className='heading'>male names</div>\r\n                            <button onClick={() => this.generate('male')}>generate</button>\r\n                            {male}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4'>\r\n                            <div className='heading'>female names</div>\r\n                            <button onClick={() => this.generate('female')}>generate</button>\r\n                            {female}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4'>\r\n                            <div className='heading'>surnames</div>\r\n                            <button onClick={() => this.generate('surname')}>generate</button>\r\n                            {surname}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Showdown from 'showdown';\r\n\r\nimport Selector from '../controls/selector';\r\n\r\nconst showdown = new Showdown.Converter();\r\nshowdown.setOption('tables', true);\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    //\r\n}\r\n\r\ninterface State {\r\n    view: string;\r\n    source: string | null;\r\n}\r\n\r\nexport default class ReferenceModule extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            view: 'skills',\r\n            source: null\r\n        };\r\n    }\r\n\r\n    private setView(view: string) {\r\n        this.setState({\r\n            view: view,\r\n            source: null\r\n        });\r\n    }\r\n\r\n    private async fetchData() {\r\n        const response = await fetch('./data/' + this.state.view + '.md');\r\n        const text = await response.text();\r\n        this.setState({\r\n            source: text\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        if (this.state.view && !this.state.source) {\r\n            this.fetchData();\r\n        }\r\n\r\n        const options = [\r\n            {\r\n                id: 'skills',\r\n                text: 'skills'\r\n            },\r\n            {\r\n                id: 'conditions',\r\n                text: 'conditions'\r\n            },\r\n            {\r\n                id: 'actions',\r\n                text: 'actions'\r\n            }\r\n        ];\r\n\r\n        return (\r\n            <div className='reference'>\r\n                <Selector\r\n                    options={options}\r\n                    selectedID={this.state.view}\r\n                    select={optionID => this.setView(optionID)}\r\n                />\r\n                <div dangerouslySetInnerHTML={{ __html: showdown.makeHtml(this.state.source || '') }} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport Selector from '../controls/selector';\r\nimport DieRollerModule from '../dm-modules/die-roller-module';\r\nimport LanguageModule from '../dm-modules/language-module';\r\nimport NameModule from '../dm-modules/name-module';\r\nimport ReferenceModule from '../dm-modules/reference-module';\r\nimport Note from '../panels/note';\r\n\r\nimport pkg from '../../../package.json';\r\n\r\ninterface Props {\r\n    resetAll: () => void;\r\n    changeValue: (source: {}, field: string, value: any) => void;\r\n}\r\n\r\ninterface State {\r\n    view: string;\r\n    module: string | null;\r\n}\r\n\r\nexport default class AboutModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            view: 'dm',\r\n            module: 'reference'\r\n        };\r\n    }\r\n\r\n    private setView(view: string) {\r\n        this.setState({\r\n            view: view\r\n        });\r\n    }\r\n\r\n    private setModule(module: string) {\r\n        this.setState({\r\n            module: module\r\n        });\r\n    }\r\n\r\n    private getTools() {\r\n        if (this.state.view !== 'dm') {\r\n            return null;\r\n        }\r\n\r\n        const modules = [\r\n            {\r\n                id: 'reference',\r\n                text: 'd&d reference'\r\n            },\r\n            {\r\n                id: 'names',\r\n                text: 'name generator'\r\n            },\r\n            {\r\n                id: 'language',\r\n                text: 'language generator'\r\n            },\r\n            {\r\n                id: 'die-roller',\r\n                text: 'die roller'\r\n            }\r\n        ];\r\n\r\n        let module = (\r\n            <Note\r\n                content={(\r\n                    <div className='section'>\r\n                        <b>dojo</b> includes several dm tools; select one of them above\r\n                    </div>\r\n                )}\r\n            />\r\n        );\r\n\r\n        switch (this.state.module) {\r\n            case 'reference':\r\n                module = (\r\n                    <ReferenceModule />\r\n                );\r\n                break;\r\n            case 'language':\r\n                module = (\r\n                    <LanguageModule />\r\n                );\r\n                break;\r\n            case 'names':\r\n                module = (\r\n                    <NameModule />\r\n                );\r\n                break;\r\n            case 'die-roller':\r\n                module = (\r\n                    <DieRollerModule />\r\n                );\r\n                break;\r\n        }\r\n\r\n        return (\r\n            <div className='dm-screen'>\r\n                <Selector\r\n                    options={modules}\r\n                    selectedID={this.state.module}\r\n                    select={moduleID => this.setModule(moduleID)}\r\n                />\r\n                <div className='divider' />\r\n                <div className='dm-module'>\r\n                    {module}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getAbout() {\r\n        if (this.state.view !== 'about') {\r\n            return null;\r\n        }\r\n\r\n        /* tslint:disable:max-line-length */\r\n        return (\r\n            <div>\r\n                <div className='section'>dojo by <a href='mailto:andy.aiken@live.co.uk'>andy aiken</a></div>\r\n                <div className='section'>version <b>{pkg.version}</b></div>\r\n                <div className='section'>if you would like to contribut to this project, you can do so <a href='https://github.com/andyaiken/dojo' target='_blank' rel='noopener noreferrer'>here</a></div>\r\n                <div className='section'>dungeons and dragons copyright wizards of the coast</div>\r\n                <div className='heading'>options</div>\r\n                <ConfirmButton text='clear all data' callback={() => this.props.resetAll()} />\r\n                <div className='heading'>open game license</div>\r\n                <div className='section'>The following text is the property of Wizards of the Coast, Inc. and is Copyright 2000 Wizards of the Coast, Inc ('Wizards'). All Rights Reserved.</div>\r\n                <ol>\r\n                    <li>Definitions: (a)'Contributors' means the copyright and/or trademark owners who have contributed Open Game Content; (b)'Derivative Material' means copyrighted material including derivative works and translations (including into other computer languages), potation, modification, correction, addition, extension, upgrade, improvement, compilation, abridgment or other form in which an existing work may be recast, transformed or adapted; (c) 'Distribute' means to reproduce, license, rent, lease, sell, broadcast, publicly display, transmit or otherwise distribute; (d)'Open Game Content' means the game mechanic and includes the methods, procedures, processes and routines to the extent such content does not embody the Product Identity and is an enhancement over the prior art and any additional content clearly identified as Open Game Content by the Contributor, and means any work covered by this License, including translations and derivative works under copyright law, but specifically excludes Product Identity. (e) 'Product Identity' means product and product line names, logos and identifying marks including trade dress; artifacts; creatures characters; stories, storylines, plots, thematic elements, dialogue, incidents, language, artwork, symbols, designs, depictions, likenesses, formats, poses, concepts, themes and graphic, photographic and other visual or audio representations; names and descriptions of characters, spells, enchantments, personalities, teams, personas, likenesses and special abilities; places, locations, environments, creatures, equipment, magical or supernatural abilities or effects, logos, symbols, or graphic designs; and any other trademark or registered trademark clearly identified as Product identity by the owner of the Product Identity, and which specifically excludes the Open Game Content; (f) 'Trademark' means the logos, names, mark, sign, motto, designs that are used by a Contributor to identify itself or its products or the associated products contributed to the Open Game License by the Contributor (g) 'Use', 'Used' or 'Using' means to use, Distribute, copy, edit, format, modify, translate and otherwise create Derivative Material of Open Game Content. (h) 'You' or 'Your' means the licensee in terms of this agreement.</li>\r\n                    <li>The License: This License applies to any Open Game Content that contains a notice indicating that the Open Game Content may only be Used under and in terms of this License. You must affix such a notice to any Open Game Content that you Use. No terms may be added to or subtracted from this License except as described by the License itself. No other terms or conditions may be applied to any Open Game Content distributed using this License.</li>\r\n                    <li>Offer and Acceptance: By Using the Open Game Content You indicate Your acceptance of the terms of this License.</li>\r\n                    <li>Grant and Consideration: In consideration for agreeing to use this License, the Contributors grant You a perpetual, worldwide, royalty-free, non-exclusive license with the exact terms of this License to Use, the Open Game Content.</li>\r\n                    <li>Representation of Authority to Contribute: If You are contributing original material as Open Game Content, You represent that Your Contributions are Your original creation and/or You have sufficient rights to grant the rights conveyed by this License.</li>\r\n                    <li>Notice of License Copyright: You must update the COPYRIGHT NOTICE portion of this License to include the exact text of the COPYRIGHT NOTICE of any Open Game Content You are copying, modifying or distributing, and You must add the title, the copyright date, and the copyright holder's name to the COPYRIGHT NOTICE of any original Open Game Content you Distribute.</li>\r\n                    <li>Use of Product Identity: You agree not to Use any Product Identity, including as an indication as to compatibility, except as expressly licensed in another, independent Agreement with the owner of each element of that Product Identity. You agree not to indicate compatibility or co-adaptability with any Trademark or Registered Trademark in conjunction with a work containing Open Game Content except as expressly licensed in another, independent Agreement with the owner of such Trademark or Registered Trademark. The use of any Product Identity in Open Game Content does not constitute a challenge to the ownership of that Product Identity. The owner of any Product Identity used in Open Game Content shall retain all rights, title and interest in and to that Product Identity.</li>\r\n                    <li>Identification: If you distribute Open Game Content You must clearly indicate which portions of the work that you are distributing are Open Game Content.</li>\r\n                    <li>Updating the License: Wizards or its designated Agents may publish updated versions of this License. You may use any authorized version of this License to copy, modify and distribute any Open Game Content originally distributed under any version of this License.</li>\r\n                    <li>Copy of this License: You MUST include a copy of this License with every copy of the Open Game Content You Distribute.</li>\r\n                    <li>Use of Contributor Credits: You may not market or advertise the Open Game Content using the name of any Contributor unless You have written permission from the Contributor to do so.</li>\r\n                    <li>Inability to Comply: If it is impossible for You to comply with any of the terms of this License with respect to some or all of the Open Game Content due to statute, judicial order, or governmental regulation then You may not Use any Open Game Material so affected.</li>\r\n                    <li>Termination: This License will terminate automatically if You fail to comply with all terms herein and fail to cure such breach within 30 days of becoming aware of the breach. All sublicenses shall survive the termination of this License.</li>\r\n                    <li>Reformation: If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable.</li>\r\n                    <li>COPYRIGHT NOTICE Open Game License v 1.0 Copyright 2000, Wizards of the Coast, Inc.</li>\r\n                </ol>\r\n            </div>\r\n        );\r\n        /* tslint:enable:max-line-length */\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const viewOptions = [\r\n                {\r\n                    id: 'dm',\r\n                    text: 'dm tools'\r\n                },\r\n                {\r\n                    id: 'about',\r\n                    text: 'about'\r\n                }\r\n            ];\r\n\r\n            return (\r\n                <div className='about'>\r\n                    <Selector\r\n                        tabs={true}\r\n                        options={viewOptions}\r\n                        selectedID={this.state.view}\r\n                        select={optionID => this.setView(optionID)}\r\n                    />\r\n                    {this.getTools()}\r\n                    {this.getAbout()}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Monster, MonsterGroup } from '../../models/monster-group';\r\n\r\nimport FilterCard from '../cards/filter-card';\r\nimport MonsterCard from '../cards/monster-card';\r\nimport Note from '../panels/note';\r\n\r\ninterface Props {\r\n    combatants: Monster[];\r\n    library: MonsterGroup[];\r\n}\r\n\r\ninterface State {\r\n    combatants: Monster[];\r\n    filter: {\r\n        name: string,\r\n        challengeMin: number;\r\n        challengeMax: number;\r\n        category: string;\r\n        size: string;\r\n    };\r\n}\r\n\r\nexport default class AddCombatantsModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            combatants: props.combatants,\r\n            filter: {\r\n                name: '',\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: 'all types',\r\n                size: 'all sizes'\r\n            }\r\n        };\r\n    }\r\n\r\n    private changeFilterValue(type: 'name' | 'challengeMin' | 'challengeMax' | 'category' | 'size', value: any) {\r\n        // eslint-disable-next-line\r\n        this.state.filter[type] = value;\r\n        this.setState({\r\n            filter: this.state.filter\r\n        });\r\n    }\r\n\r\n    private nudgeFilterValue(type: 'challengeMin' | 'challengeMax', delta: number) {\r\n        const value = Utils.nudgeChallenge(this.state.filter[type], delta);\r\n        this.changeFilterValue(type, value);\r\n    }\r\n\r\n    private resetFilter() {\r\n        this.setState({\r\n            filter: {\r\n                name: '',\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: 'all types',\r\n                size: 'all sizes'\r\n            }\r\n        });\r\n    }\r\n    private matchMonster(monster: Monster) {\r\n        if (monster.challenge < this.state.filter.challengeMin) {\r\n            return false;\r\n        }\r\n\r\n        if (monster.challenge > this.state.filter.challengeMax) {\r\n            return false;\r\n        }\r\n\r\n        if (this.state.filter.name !== '') {\r\n            if (!Utils.match(this.state.filter.name, monster.name)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.filter.category !== 'all types') {\r\n            if (monster.category !== this.state.filter.category) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.filter.size !== 'all sizes') {\r\n            if (monster.size !== this.state.filter.size) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private selectMonster(monster: Monster) {\r\n        this.state.combatants.push(monster);\r\n        this.state.combatants.sort((a, b) => {\r\n            if (a.name < b.name) { return -1; }\r\n            if (a.name > b.name) { return 1; }\r\n            return 0;\r\n        });\r\n        this.setState({\r\n            combatants: this.state.combatants\r\n        });\r\n    }\r\n\r\n    private deselectMonster(monster: Monster) {\r\n        const index = this.state.combatants.indexOf(monster);\r\n        this.state.combatants.splice(index, 1);\r\n        this.setState({\r\n            combatants: this.state.combatants\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const monsters: Monster[] = [];\r\n            this.props.library.forEach(group => {\r\n                group.monsters.forEach(monster => {\r\n                    if (this.matchMonster(monster)) {\r\n                        monsters.push(monster);\r\n                    }\r\n                });\r\n            });\r\n            monsters.sort((a, b) => {\r\n                if (a.name < b.name) { return -1; }\r\n                if (a.name > b.name) { return 1; }\r\n                return 0;\r\n            });\r\n            let allCombatants: JSX.Element | JSX.Element[] = monsters.filter(m => !this.state.combatants.includes(m)).map(m => {\r\n                return (\r\n                    <MonsterCard key={m.id} combatant={m} mode='view candidate' selectMonster={monster => this.selectMonster(monster)} />\r\n                );\r\n            });\r\n            if (allCombatants.length === 0) {\r\n                allCombatants = (\r\n                    <Note\r\n                        content={(\r\n                            <div className='section'>\r\n                                there are no monsters that match the above criteria (or you have already selected them all)\r\n                            </div>\r\n                        )}\r\n                    />\r\n                );\r\n            }\r\n\r\n            const selectedCombatants: JSX.Element | JSX.Element[] = this.state.combatants.map(c => {\r\n                return (\r\n                    <MonsterCard key={c.id} combatant={c} mode='view candidate selected' deselectMonster={monster => this.deselectMonster(monster)} />\r\n                );\r\n            });\r\n\r\n            return (\r\n                <div className='add-combatants-modal'>\r\n                    <div className='row' style={{ height: '100%' }}>\r\n                        <div className='columns small-6 medium-6 large-6 scrollable'>\r\n                            <div className='heading'>all combatants</div>\r\n                            <FilterCard\r\n                                filter={this.state.filter}\r\n                                changeValue={(type, value) => this.changeFilterValue(type, value)}\r\n                                nudgeValue={(type, delta) => this.nudgeFilterValue(type, delta)}\r\n                                resetFilter={() => this.resetFilter()}\r\n                            />\r\n                            <div className='divider' />\r\n                            {allCombatants}\r\n                        </div>\r\n                        <div className='columns small-6 medium-6 large-6 scrollable'>\r\n                            <div className='heading'>selected combatants</div>\r\n                            {selectedCombatants}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { CombatSetup } from '../../models/combat';\r\nimport { Encounter, EncounterSlot } from '../../models/encounter';\r\nimport { MapFolio } from '../../models/map-folio';\r\nimport { Monster } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport Selector from '../controls/selector';\r\nimport DifficultyChartPanel from '../panels/difficulty-chart-panel';\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    combatSetup: CombatSetup;\r\n    parties: Party[];\r\n    encounters: Encounter[];\r\n    mapFolios: MapFolio[];\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n    notify: () => void;\r\n}\r\n\r\ninterface State {\r\n    combatSetup: CombatSetup;\r\n}\r\n\r\nexport default class CombatStartModal extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        parties: null,\r\n        mapFolios: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            combatSetup: props.combatSetup\r\n        };\r\n    }\r\n\r\n    private setParty(partyID: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.partyID = partyID;\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        }, () => this.props.notify());\r\n    }\r\n\r\n    private setEncounter(encounterID: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.encounterID = encounterID;\r\n        const enc = this.props.encounters.find(e => e.id === encounterID);\r\n        if (enc) {\r\n            // eslint-disable-next-line\r\n            this.state.combatSetup.monsterNames = Utils.getMonsterNames(enc);\r\n        }\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        }, () => this.props.notify());\r\n    }\r\n\r\n    private setFolioID(id: string) {\r\n        if (id && (id !== '')) {\r\n            const folio = this.props.mapFolios.find(f => f.id === id);\r\n            if (folio) {\r\n                // eslint-disable-next-line\r\n                this.state.combatSetup.folioID = folio.id;\r\n                // eslint-disable-next-line\r\n                this.state.combatSetup.mapID = folio.maps.length === 1 ? folio.maps[0].id : null;\r\n            }\r\n        } else {\r\n            // eslint-disable-next-line\r\n            this.state.combatSetup.folioID = null;\r\n            // eslint-disable-next-line\r\n            this.state.combatSetup.mapID = null;\r\n        }\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        });\r\n    }\r\n\r\n    private setMapID(id: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.mapID = id;\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        });\r\n    }\r\n\r\n    private setWave(waveID: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.waveID = waveID;\r\n        const enc = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n        if (enc) {\r\n            const wave = enc.waves.find(w => w.id === waveID);\r\n            if (wave) {\r\n                // eslint-disable-next-line\r\n                this.state.combatSetup.monsterNames = Utils.getMonsterNames(wave);\r\n            }\r\n        }\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        }, () => this.props.notify());\r\n    }\r\n\r\n    private setEncounterInitMode(mode: 'manual' | 'individual' | 'group') {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.encounterInitMode = mode;\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        });\r\n    }\r\n\r\n    private changeName(slotID: string, index: number, name: string) {\r\n        const slot = this.state.combatSetup.monsterNames.find(s => s.id === slotID);\r\n        if (slot) {\r\n            slot.names[index] = name;\r\n            this.setState({\r\n                combatSetup: this.state.combatSetup\r\n            });\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    private getPartySection() {\r\n        if (this.props.parties.length === 0) {\r\n            return (\r\n                <div className='section'>you have not defined any parties</div>\r\n            );\r\n        }\r\n\r\n        const partyOptions = this.props.parties.map(party => {\r\n            return {\r\n                id: party.id,\r\n                text: party.name || 'unnamed party'\r\n            };\r\n        });\r\n\r\n        let partyContent = null;\r\n        if (this.state.combatSetup.partyID) {\r\n            const selectedParty = this.props.parties.find(p => p.id === this.state.combatSetup.partyID);\r\n            if (selectedParty) {\r\n                const pcs = selectedParty.pcs.filter(pc => pc.active);\r\n\r\n                const pcSections = pcs.map(pc =>\r\n                    (\r\n                        <li key={pc.id}>\r\n                            {pc.name || 'unnamed pc'} (level {pc.level})\r\n                        </li>\r\n                    )\r\n                );\r\n\r\n                if (pcSections.length === 0) {\r\n                    pcSections.push(\r\n                        <li key={'empty'}>no pcs</li>\r\n                    );\r\n                }\r\n\r\n                partyContent = (\r\n                    <div>\r\n                        <div className='subheading'>pcs</div>\r\n                        <ul>{pcSections}</ul>\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='heading'>party</div>\r\n                <Dropdown\r\n                    options={partyOptions}\r\n                    placeholder='select party...'\r\n                    selectedID={this.state.combatSetup.partyID ? this.state.combatSetup.partyID : undefined}\r\n                    select={optionID => this.setParty(optionID)}\r\n                />\r\n                {partyContent}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getEncounterSection() {\r\n        if (this.props.encounters.length === 0) {\r\n            return (\r\n                <div className='section'>you have not built any encounters</div>\r\n            );\r\n        }\r\n\r\n        const encounterOptions = this.props.encounters.map(encounter => {\r\n            return {\r\n                id: encounter.id,\r\n                text: encounter.name || 'unnamed encounter'\r\n            };\r\n        });\r\n\r\n        let encounterContent = null;\r\n        if (this.state.combatSetup.encounterID) {\r\n            const selectedEncounter = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n            if (selectedEncounter) {\r\n                const monsterSections = selectedEncounter.slots.map(slot => {\r\n                    let name = slot.monsterName || 'unnamed monster';\r\n                    if (slot.count > 1) {\r\n                        name += ' (x' + slot.count + ')';\r\n                    }\r\n                    return (\r\n                        <li key={slot.id}>{name}</li>\r\n                    );\r\n                });\r\n\r\n                if (monsterSections.length === 0) {\r\n                    monsterSections.push(\r\n                        <li key={'empty'}>no monsters</li>\r\n                    );\r\n                }\r\n\r\n                const waves = selectedEncounter.waves.map(wave => {\r\n                    if (wave.slots.length === 0) {\r\n                        return null;\r\n                    }\r\n\r\n                    const waveMonsters = wave.slots.map(slot => {\r\n                        let name = slot.monsterName || 'unnamed monster';\r\n                        if (slot.count > 1) {\r\n                            name += ' x' + slot.count;\r\n                        }\r\n                        return (\r\n                            <li key={slot.id}>{name}</li>\r\n                        );\r\n                    });\r\n\r\n                    return (\r\n                        <div key={wave.id}>\r\n                            <div className='subheading'>{wave.name || 'unnamed wave'}</div>\r\n                            <ul>{waveMonsters}</ul>\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                encounterContent = (\r\n                    <div>\r\n                        <div className='subheading'>monsters</div>\r\n                        <ul>{monsterSections}</ul>\r\n                        {waves}\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='heading'>encounter</div>\r\n                <Dropdown\r\n                    options={encounterOptions}\r\n                    placeholder='select encounter...'\r\n                    selectedID={this.state.combatSetup.encounterID ? this.state.combatSetup.encounterID : undefined}\r\n                    select={optionID => this.setEncounter(optionID)}\r\n                />\r\n                {encounterContent}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getMapSection() {\r\n        const folios = this.props.mapFolios.filter(folio => folio.maps.length > 0);\r\n        if (folios.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        const folioOptions = [{\r\n            id: '',\r\n            text: 'none'\r\n        }].concat(folios.map(folio => {\r\n            return {\r\n                id: folio.id,\r\n                text: folio.name || 'unnamed folio'\r\n            };\r\n        }));\r\n\r\n        let selectMapSection = null;\r\n        let thumbnailSection = null;\r\n\r\n        if (this.state.combatSetup.folioID) {\r\n            const folio = this.props.mapFolios.find(f => f.id === this.state.combatSetup.folioID);\r\n            if (folio) {\r\n                const mapOptions = folio.maps.map(m => {\r\n                    return {\r\n                        id: m.id,\r\n                        text: m.name || 'unnamed map'\r\n                    };\r\n                });\r\n\r\n                if (mapOptions.length !== 1) {\r\n                    selectMapSection = (\r\n                        <Selector\r\n                            options={mapOptions}\r\n                            selectedID={this.state.combatSetup.mapID}\r\n                            select={optionID => this.setMapID(optionID)}\r\n                        />\r\n                    );\r\n                }\r\n\r\n                if (this.state.combatSetup.mapID) {\r\n                    const map = folio.maps.find(m => m.id === this.state.combatSetup.mapID);\r\n                    if (map) {\r\n                        thumbnailSection = (\r\n                            <MapPanel\r\n                                map={map}\r\n                                mode='thumbnail'\r\n                            />\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='heading'>map</div>\r\n                <Dropdown\r\n                    options={folioOptions}\r\n                    placeholder='select map folio...'\r\n                    selectedID={this.state.combatSetup.folioID ? this.state.combatSetup.folioID : undefined}\r\n                    select={optionID => this.setFolioID(optionID)}\r\n                />\r\n                {selectMapSection}\r\n                {thumbnailSection}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getWaveSection() {\r\n        if (this.state.combatSetup.encounterID === null) {\r\n            return (\r\n                <div className='section'>you have not selected an encounter</div>\r\n            );\r\n        }\r\n\r\n        const selectedEncounter = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n        if (selectedEncounter) {\r\n            if (selectedEncounter.waves.length === 0) {\r\n                return (\r\n                    <div className='section'>you have not defined any waves</div>\r\n                );\r\n            }\r\n\r\n            const waveOptions = selectedEncounter.waves.map(wave => {\r\n                return {\r\n                    id: wave.id,\r\n                    text: wave.name || 'unnamed wave'\r\n                };\r\n            });\r\n\r\n            let waveContent = null;\r\n            if (this.state.combatSetup.waveID) {\r\n                const selectedWave = selectedEncounter.waves.find(w => w.id === this.state.combatSetup.waveID);\r\n                if (selectedWave) {\r\n                    const monsterSections = selectedWave.slots.map(slot => {\r\n                        let name = slot.monsterName || 'unnamed monster';\r\n                        if (slot.count > 1) {\r\n                            name += ' (x' + slot.count + ')';\r\n                        }\r\n                        return (\r\n                            <li key={slot.id}>{name}</li>\r\n                        );\r\n                    });\r\n\r\n                    if (monsterSections.length === 0) {\r\n                        monsterSections.push(\r\n                            <li key={'empty'}>no monsters</li>\r\n                        );\r\n                    }\r\n\r\n                    waveContent = (\r\n                        <div>\r\n                            <div className='subheading'>monsters</div>\r\n                            <ul>{monsterSections}</ul>\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n\r\n            return (\r\n                <div>\r\n                    <div className='heading'>wave</div>\r\n                    <Dropdown\r\n                        options={waveOptions}\r\n                        placeholder='select wave...'\r\n                        selectedID={this.state.combatSetup.waveID ? this.state.combatSetup.waveID : undefined}\r\n                        select={optionID => this.setWave(optionID)}\r\n                    />\r\n                    {waveContent}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private getDifficultySection() {\r\n        const party = this.props.parties.find(p => p.id === this.state.combatSetup.partyID);\r\n        const encounter = this.props.encounters.find(enc => enc.id === this.state.combatSetup.encounterID);\r\n\r\n        if (party && encounter) {\r\n            return (\r\n                <div>\r\n                    <div className='heading'>encounter difficulty</div>\r\n                    <DifficultyChartPanel\r\n                        party={party}\r\n                        encounter={encounter}\r\n                        getMonster={(monsterName, monsterGroupName) => this.props.getMonster(monsterName, monsterGroupName)}\r\n                    />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='heading'>encounter difficulty</div>\r\n                <div className='section'>select a party and an encounter on the left to see difficulty information.</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getMonsterSection() {\r\n        if (this.state.combatSetup.encounterID === null) {\r\n            return (\r\n                <div>\r\n                    <div className='heading'>monsters</div>\r\n                    <div className='section'>select an encounter to see monster options here.</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (!this.props.parties && this.state.combatSetup.waveID === null) {\r\n            return (\r\n                <div>\r\n                    <div className='heading'>monsters</div>\r\n                    <div className='section'>select a wave to see monster options here.</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        const selectedEncounter = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n        if (selectedEncounter) {\r\n            let slotsContainer: { slots: EncounterSlot[] } = selectedEncounter;\r\n            if (this.state.combatSetup.waveID) {\r\n                const selectedWave = selectedEncounter.waves.find(w => w.id === this.state.combatSetup.waveID);\r\n                if (selectedWave) {\r\n                    slotsContainer = selectedWave;\r\n                }\r\n            }\r\n\r\n            if (slotsContainer.slots.length === 0) {\r\n                return null;\r\n            }\r\n\r\n            const initOptions = [\r\n                {\r\n                    id: 'manual',\r\n                    text: 'enter manually'\r\n                },\r\n                {\r\n                    id: 'individual',\r\n                    text: 'roll individually'\r\n                },\r\n                {\r\n                    id: 'group',\r\n                    text: 'roll in groups'\r\n                }\r\n            ];\r\n\r\n            const names = this.state.combatSetup.monsterNames.map(slotNames => {\r\n                const slot = slotsContainer.slots.find(s => s.id === slotNames.id);\r\n                if (slot) {\r\n                    const inputs = [];\r\n                    for (let n = 0; n !== slotNames.names.length; ++n) {\r\n                        inputs.push(\r\n                            <div key={n}>\r\n                                <MonsterName\r\n                                    value={slotNames.names[n]}\r\n                                    slotID={slot.id}\r\n                                    index={n}\r\n                                    changeName={(slotID, index, value) => this.changeName(slotID, index, value)}\r\n                                />\r\n                            </div>\r\n                        );\r\n                    }\r\n                    return (\r\n                        <div key={slotNames.id} className='name-row'>\r\n                            <div className='name-label'>\r\n                                {slot.monsterName}\r\n                            </div>\r\n                            <div className='name-inputs'>\r\n                                {inputs}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n                return null;\r\n            });\r\n\r\n            return (\r\n                <div>\r\n                    <div className='heading'>monsters</div>\r\n                    <div className='subheading'>initiative</div>\r\n                    <Selector\r\n                        options={initOptions}\r\n                        selectedID={this.state.combatSetup.encounterInitMode}\r\n                        select={optionID => this.setEncounterInitMode(optionID as 'manual' | 'individual' | 'group')}\r\n                    />\r\n                    <div className='subheading'>names</div>\r\n                    <div>{names}</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    public render() {\r\n        try {\r\n            let leftSection = null;\r\n            let rightSection = null;\r\n\r\n            if (this.props.parties) {\r\n                leftSection = (\r\n                    <div>\r\n                        {this.getPartySection()}\r\n                        {this.getEncounterSection()}\r\n                        {this.getMapSection()}\r\n                    </div>\r\n                );\r\n\r\n                rightSection = (\r\n                    <div>\r\n                        {this.getDifficultySection()}\r\n                        {this.getMonsterSection()}\r\n                    </div>\r\n                );\r\n            } else {\r\n                leftSection = (\r\n                    <div>\r\n                        {this.getWaveSection()}\r\n                    </div>\r\n                );\r\n\r\n                rightSection = (\r\n                    <div>\r\n                        {this.getMonsterSection()}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='row' style={{ height: '100%', margin: '0 -15px' }}>\r\n                    <div className='column small-6 medium-6 large-6 scrollable'>\r\n                        {leftSection}\r\n                    </div>\r\n                    <div className='column small-6 medium-6 large-6 scrollable'>\r\n                        {rightSection}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface MonsterNameProps {\r\n    slotID: string;\r\n    index: number;\r\n    value: string;\r\n    changeName: (slotID: string, index: number, value: string) => void;\r\n}\r\n\r\nclass MonsterName extends React.Component<MonsterNameProps> {\r\n    public render() {\r\n        return (\r\n            <input type='text' value={this.props.value} onChange={event => this.props.changeName(this.props.slotID, this.props.index, event.target.value)} />\r\n        );\r\n    }\r\n}\r\n","export interface Condition {\r\n    id: string;\r\n    name: string;\r\n    level: number;\r\n    text: string | null;\r\n    duration: ConditionDurationSaves | ConditionDurationCombatant | ConditionDurationRounds | null;\r\n}\r\n\r\nexport interface ConditionDurationSaves {\r\n    type: 'saves';\r\n    count: number;\r\n    saveType: 'str' | 'dex' | 'con' | 'int' | 'wis' | 'cha' | 'death';\r\n    saveDC: number;\r\n    point: 'start' | 'end';\r\n}\r\n\r\nexport interface ConditionDurationCombatant {\r\n    type: 'combatant';\r\n    point: 'start' | 'end';\r\n    combatantID: string | null;\r\n}\r\n\r\nexport interface ConditionDurationRounds {\r\n    type: 'rounds';\r\n    count: number;\r\n}\r\n\r\nexport const CONDITION_TYPES = [\r\n    'blinded',\r\n    'charmed',\r\n    'deafened',\r\n    'exhaustion',\r\n    'frightened',\r\n    'grappled',\r\n    'incapacitated',\r\n    'invisible',\r\n    'paralyzed',\r\n    'petrified',\r\n    'poisoned',\r\n    'prone',\r\n    'restrained',\r\n    'stunned',\r\n    'unconscious',\r\n    'custom'\r\n];\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    items: { id: string; text: string; details: JSX.Element | string; disabled?: boolean }[];\r\n    selectedItemID: string | null;\r\n    select: (itemID: string) => void;\r\n}\r\n\r\nexport default class RadioGroup extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        // No default property values\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            const content = this.props.items.map(item => {\r\n                return (\r\n                    <RadioGroupItem\r\n                        key={item.id}\r\n                        item={item}\r\n                        selected={this.props.selectedItemID === item.id}\r\n                        select={(itemID: string) => this.props.select(itemID)}\r\n                    />\r\n                );\r\n            });\r\n\r\n            return (\r\n                <div className='radio-group'>\r\n                    {content}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface RadioGroupItemProps {\r\n    item: { id: string; text: string; details: JSX.Element | string; disabled?: boolean };\r\n    selected: boolean;\r\n    select: (itemID: string) => void;\r\n}\r\n\r\nclass RadioGroupItem extends React.Component<RadioGroupItemProps> {\r\n    public render() {\r\n        let style = 'radio-item';\r\n        let details = null;\r\n\r\n        if (this.props.selected) {\r\n            style += ' selected';\r\n            details = (\r\n                <div className='radio-item-details'>\r\n                    {this.props.item.details}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (this.props.item.disabled) {\r\n            style += ' disabled';\r\n        }\r\n\r\n        return (\r\n            <div className={style} onClick={() => this.props.select(this.props.item.id)}>\r\n                <div className='radio-item-text'>{this.props.item.text}</div>\r\n                {details}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Factory from '../../utils/factory';\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combat, Combatant } from '../../models/combat';\r\nimport { Condition, CONDITION_TYPES, ConditionDurationCombatant, ConditionDurationSaves } from '../../models/condition';\r\nimport { Monster } from '../../models/monster-group';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport RadioGroup from '../controls/radio-group';\r\nimport Selector from '../controls/selector';\r\nimport Spin from '../controls/spin';\r\n\r\ninterface Props {\r\n    condition: Condition;\r\n    combatant: Combatant & Monster;\r\n    combat: Combat;\r\n}\r\n\r\ninterface State {\r\n    condition: Condition;\r\n}\r\n\r\nexport default class ConditionModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            condition: props.condition\r\n        };\r\n    }\r\n\r\n    private setCondition(conditionName: string) {\r\n        // eslint-disable-next-line\r\n        this.state.condition.name = conditionName;\r\n        // eslint-disable-next-line\r\n        this.state.condition.level = 1;\r\n        // eslint-disable-next-line\r\n        this.state.condition.text = conditionName === 'custom' ? 'custom condition' : null;\r\n\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    private setDuration(durationType: 'saves' | 'combatant' | 'rounds') {\r\n        let duration = null;\r\n\r\n        switch (durationType) {\r\n            case 'saves':\r\n                duration = Factory.createConditionDurationSaves();\r\n                break;\r\n            case 'combatant':\r\n                duration = Factory.createConditionDurationCombatant();\r\n                duration.combatantID = this.props.combatant.id;\r\n                break;\r\n            case 'rounds':\r\n                duration = Factory.createConditionDurationRounds();\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        // eslint-disable-next-line\r\n        this.state.condition.duration = duration;\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    private changeValue(object: any, field: string, value: any) {\r\n        object[field] = value;\r\n\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    private nudgeValue(object: any, field: string, delta: number) {\r\n        let value = object[field] + delta;\r\n        if (field === 'level') {\r\n            value = Math.max(value, 1);\r\n            value = Math.min(value, 6);\r\n        }\r\n        if (field === 'count') {\r\n            value = Math.max(value, 1);\r\n        }\r\n        if (field === 'saveDC') {\r\n            value = Math.max(value, 0);\r\n        }\r\n        object[field] = value;\r\n\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const conditions = CONDITION_TYPES.map(condition => {\r\n                const controls = [];\r\n                const description = [];\r\n                if (condition === this.state.condition.name) {\r\n                    if (condition === 'custom') {\r\n                        controls.push(\r\n                            <input\r\n                                type='text'\r\n                                placeholder='custom condition'\r\n                                value={this.state.condition.text ? this.state.condition.text : ''}\r\n                                onChange={event => this.changeValue(this.state.condition, 'text', event.target.value)}\r\n                            />\r\n                        );\r\n                    }\r\n                    if (condition === 'exhaustion') {\r\n                        controls.push(\r\n                            <Spin\r\n                                key='exhaustion-spin'\r\n                                source={this.props.condition}\r\n                                name='level'\r\n                                label='exhaustion'\r\n                                nudgeValue={delta => this.nudgeValue(this.props.condition, 'level', delta)}\r\n                            />\r\n                        );\r\n                    }\r\n                    const text = Utils.conditionText(this.state.condition);\r\n                    for (let n = 0; n !== text.length; ++n) {\r\n                        description.push(<li key={n} className='section'>{text[n]}</li>);\r\n                    }\r\n                }\r\n\r\n                return {\r\n                    id: condition,\r\n                    text: condition,\r\n                    details: (\r\n                        <div key={condition}>\r\n                            {controls}\r\n                            <ul>\r\n                                {description}\r\n                            </ul>\r\n                        </div>\r\n                    ),\r\n                    disabled: this.props.combatant.conditionImmunities ? this.props.combatant.conditionImmunities.indexOf(condition) !== -1 : false\r\n                };\r\n            });\r\n\r\n            const saveOptions = ['str', 'dex', 'con', 'int', 'wis', 'cha', 'death'].map(c => ({ id: c, text: c }));\r\n            const pointOptions = [\r\n                {\r\n                    id: 'start',\r\n                    text: 'start of turn'\r\n                },\r\n                {\r\n                    id: 'end',\r\n                    text: 'end of turn'\r\n                }\r\n            ];\r\n            const combatantOptions = this.props.combat.combatants.map(c => ({ id: c.id, text: (c.displayName || c.name || 'unnamed monster') }));\r\n\r\n            const durations = [\r\n                {\r\n                    id: 'none',\r\n                    text: 'until removed (default)',\r\n                    details: (\r\n                        <div className='section'>\r\n                            <div>the condition persists until it is manually removed</div>\r\n                        </div>\r\n                    )\r\n                },\r\n                {\r\n                    id: 'saves',\r\n                    text: 'until a successful save',\r\n                    details: (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>number of saves required</div>\r\n                                <Spin\r\n                                    source={this.props.condition.duration}\r\n                                    name='count'\r\n                                    nudgeValue={delta => this.nudgeValue(this.props.condition.duration, 'count', delta)}\r\n                                />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>save dc</div>\r\n                                <Spin\r\n                                    source={this.props.condition.duration}\r\n                                    name='saveDC'\r\n                                    nudgeValue={delta => this.nudgeValue(this.props.condition.duration, 'saveDC', delta)}\r\n                                />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>type of save</div>\r\n                                <Selector\r\n                                    options={saveOptions}\r\n                                    selectedID={\r\n                                        (this.props.condition.duration as ConditionDurationSaves)\r\n                                        ? (this.props.condition.duration as ConditionDurationSaves).saveType\r\n                                        : null\r\n                                    }\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, 'saveType', optionID)}\r\n                                />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>make the save at the start or end of the turn</div>\r\n                                <Selector\r\n                                    options={pointOptions}\r\n                                    selectedID={\r\n                                        (this.props.condition.duration as ConditionDurationSaves)\r\n                                        ? (this.props.condition.duration as ConditionDurationSaves).point\r\n                                        : null\r\n                                    }\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, 'point', optionID)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                },\r\n                {\r\n                    id: 'combatant',\r\n                    text: 'until someone\\'s next turn',\r\n                    details: (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>combatant</div>\r\n                                <Dropdown\r\n                                    options={combatantOptions}\r\n                                    selectedID={\r\n                                        (this.props.condition.duration as ConditionDurationCombatant)\r\n                                        ? (this.props.condition.duration as ConditionDurationCombatant).combatantID || undefined\r\n                                        : undefined\r\n                                    }\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, 'combatantID', optionID)}\r\n                                />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>start or end of the turn</div>\r\n                                <Selector\r\n                                    options={pointOptions}\r\n                                    selectedID={\r\n                                        (this.props.condition.duration as ConditionDurationCombatant)\r\n                                        ? (this.props.condition.duration as ConditionDurationCombatant).point\r\n                                        : null\r\n                                    }\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, 'point', optionID)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                },\r\n                {\r\n                    id: 'rounds',\r\n                    text: 'for a number of rounds',\r\n                    details: (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>number of rounds</div>\r\n                                <Spin\r\n                                    source={this.props.condition.duration}\r\n                                    name='count'\r\n                                    nudgeValue={delta => this.nudgeValue(this.props.condition.duration, 'count', delta)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }\r\n            ];\r\n\r\n            return (\r\n                <div className='condition-modal'>\r\n                    <div className='row' style={{ height: '100%' }}>\r\n                        <div className='columns small-6 medium-6 large-6 scrollable'>\r\n                            <div className='heading'>condition</div>\r\n                            <RadioGroup\r\n                                items={conditions}\r\n                                selectedItemID={this.state.condition.name}\r\n                                select={itemID => this.setCondition(itemID)}\r\n                            />\r\n                        </div>\r\n                        <div className='columns small-6 medium-6 large-6 scrollable'>\r\n                            <div className='heading'>duration</div>\r\n                            <RadioGroup\r\n                                items={durations}\r\n                                selectedItemID={this.state.condition.duration ? this.state.condition.duration.type : 'none'}\r\n                                select={itemID => this.setDuration(itemID as 'saves' | 'combatant' | 'rounds')}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { CATEGORY_TYPES, Monster, MonsterGroup, SIZE_TYPES } from '../../models/monster-group';\r\n\r\nimport Selector from '../controls/selector';\r\n\r\ninterface Props {\r\n    library: MonsterGroup[];\r\n}\r\n\r\ninterface State {\r\n    chart: string;\r\n}\r\n\r\nexport default class DemographicsModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            chart: 'challenge'\r\n        };\r\n    }\r\n\r\n    private selectChart(chart: string) {\r\n        this.setState({\r\n            chart: chart\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let demographics = null;\r\n\r\n            const allMonsters: Monster[] = [];\r\n            this.props.library.forEach(group => group.monsters.forEach(monster => allMonsters.push(monster)));\r\n            if (allMonsters.length !== 0) {\r\n                const buckets: { value: any, title: string }[] = [];\r\n                let maxBucketSize = 0;\r\n                const monsters: { [key: string]: Monster[] } = {};\r\n\r\n                switch (this.state.chart) {\r\n                    case 'challenge':\r\n                        const challenges = [\r\n                            0, 0.125, 0.25, 0.5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30\r\n                        ];\r\n                        challenges.forEach(cr => {\r\n                            buckets.push({\r\n                                value: cr,\r\n                                title: 'challenge ' + Utils.challenge(cr)\r\n                            });\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const cr = bucket.value;\r\n                            monsters[cr.toString()] = allMonsters.filter(monster => monster.challenge === cr);\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const cr = bucket.value;\r\n                            maxBucketSize = Math.max(monsters[cr].length, maxBucketSize);\r\n                        });\r\n                        break;\r\n                    case 'size':\r\n                        SIZE_TYPES.forEach(size => {\r\n                            buckets.push({\r\n                                value: size,\r\n                                title: size\r\n                            });\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const size = bucket.value;\r\n                            monsters[size.toString()] = allMonsters.filter(monster => monster.size === size);\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const size = bucket.value;\r\n                            maxBucketSize = Math.max(monsters[size].length, maxBucketSize);\r\n                        });\r\n                        break;\r\n                    case 'type':\r\n                        CATEGORY_TYPES.forEach(type => {\r\n                            buckets.push({\r\n                                value: type,\r\n                                title: type\r\n                            });\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const type = bucket.value;\r\n                            monsters[type.toString()] = allMonsters.filter(monster => monster.category === type);\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const type = bucket.value;\r\n                            maxBucketSize = Math.max(monsters[type].length, maxBucketSize);\r\n                        });\r\n                        break;\r\n                    default:\r\n                        // Do nothing\r\n                        break;\r\n                }\r\n\r\n                const bars = [];\r\n                for (let index = 0; index !== buckets.length; ++index) {\r\n                    const bucket = buckets[index];\r\n                    const set = monsters[bucket.value];\r\n                    const count = set ? set.length : 0;\r\n                    bars.push(\r\n                        <div\r\n                            key={bucket.title}\r\n                            className='bar-container'\r\n                            title={bucket.title + ': ' + set.length + ' monsters'}\r\n                        >\r\n                            <div\r\n                                className='bar'\r\n                                style={{\r\n                                    width: 'calc((100% - 1px) * ' + count + ' / ' + maxBucketSize + ')'\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                const chartOptions = [\r\n                    {\r\n                        id: 'challenge',\r\n                        text: 'challenge rating'\r\n                    },\r\n                    {\r\n                        id: 'size',\r\n                        text: 'size'\r\n                    },\r\n                    {\r\n                        id: 'type',\r\n                        text: 'type'\r\n                    }\r\n                ];\r\n\r\n                demographics = (\r\n                    <div>\r\n                        <div className='heading'>monster demographics</div>\r\n                        <Selector\r\n                            options={chartOptions}\r\n                            selectedID={this.state.chart}\r\n                            select={optionID => this.selectChart(optionID)}\r\n                        />\r\n                        <div className='chart'>\r\n                            <div className='plot'>{bars}</div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return demographics;\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","export interface MapFolio {\r\n    id: string;\r\n    name: string;\r\n    maps: Map[];\r\n}\r\n\r\nexport interface Map {\r\n    id: string;\r\n    name: string;\r\n    items: MapItem[];\r\n}\r\n\r\nexport interface MapItem {\r\n    id: string;\r\n    type: 'tile' | 'pc' | 'monster';\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n    terrain: string | null;\r\n    style: 'square' | 'rounded' | 'circle' | null;\r\n}\r\n\r\nexport const TERRAIN_TYPES = [\r\n    'cavern',\r\n    'dirt',\r\n    'flagstone',\r\n    'floorboard',\r\n    'grassland',\r\n    'pit',\r\n    'sand',\r\n    'snow',\r\n    'water'\r\n];\r\n","import React from 'react';\r\n\r\nimport { MapItem, TERRAIN_TYPES } from '../../models/map-folio';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport Radial from '../controls/radial';\r\nimport Selector from '../controls/selector';\r\n\r\ninterface Props {\r\n    tile: MapItem;\r\n    changeValue: (tile: MapItem, field: string, value: string) => void;\r\n    moveMapItem: (tile: MapItem, dir: string) => void;\r\n    resizeMapItem: (tile: MapItem, dir: string, dir2: 'in' | 'out' | null) => void;\r\n    cloneMapItem: (tile: MapItem) => void;\r\n    removeMapItem: (tile: MapItem) => void;\r\n}\r\n\r\nexport default class MapTileCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const terrainOptions = TERRAIN_TYPES.map(t => {\r\n                return { id: t, text: t };\r\n            });\r\n\r\n            const styleOptions = ['square', 'rounded', 'circle'].map(t => {\r\n                return { id: t, text: t };\r\n            });\r\n\r\n            return (\r\n                <div className='card map-tile'>\r\n                    <div className='heading'>\r\n                        <div className='title'>map tile</div>\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        <div className='subheading'>size</div>\r\n                        <div className='section'>{this.props.tile.width} sq x {this.props.tile.height} sq</div>\r\n                        <div className='section'>{this.props.tile.width * 5} ft x {this.props.tile.height * 5} ft</div>\r\n                        <div className='divider' />\r\n                        <div className='subheading'>terrain</div>\r\n                        <Dropdown\r\n                            options={terrainOptions}\r\n                            placeholder='select terrain'\r\n                            selectedID={this.props.tile.terrain ? this.props.tile.terrain : undefined}\r\n                            select={optionID => this.props.changeValue(this.props.tile, 'terrain', optionID)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <div className='subheading'>style</div>\r\n                        <Selector\r\n                            options={styleOptions}\r\n                            selectedID={this.props.tile.style}\r\n                            select={optionID => this.props.changeValue(this.props.tile, 'style', optionID)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <div className='subheading'>move</div>\r\n                        <div className='section centered'>\r\n                            <Radial direction='out' click={dir => this.props.moveMapItem(this.props.tile, dir)} />\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='subheading'>resize</div>\r\n                        <div className='section centered'>\r\n                            <Radial direction='both' click={(dir, dir2) => this.props.resizeMapItem(this.props.tile, dir, dir2)} />\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='section'>\r\n                            <button onClick={() => this.props.cloneMapItem(this.props.tile)}>clone tile</button>\r\n                            <button onClick={() => this.props.removeMapItem(this.props.tile)}>remove tile</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Factory from '../../utils/factory';\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Map, MapItem } from '../../models/map-folio';\r\n\r\nimport MapTileCard from '../cards/map-tile-card';\r\nimport MapPanel from '../panels/map-panel';\r\nimport Note from '../panels/note';\r\n\r\ninterface Props {\r\n    map: Map;\r\n}\r\n\r\ninterface State {\r\n    map: Map;\r\n    selectedTileID: string | null;\r\n    addingTile: boolean;\r\n}\r\n\r\nexport default class MapEditorModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            map: props.map,\r\n            selectedTileID: null,\r\n            addingTile: false\r\n        };\r\n    }\r\n\r\n    private setSelectedTileID(id: string | null) {\r\n        this.setState({\r\n            selectedTileID: id\r\n        });\r\n    }\r\n\r\n    private toggleAddingTile() {\r\n        this.setState({\r\n            addingTile: !this.state.addingTile\r\n        });\r\n    }\r\n\r\n    private addMapTile(x: number, y: number) {\r\n        const tile = Factory.createMapItem();\r\n        tile.x = x;\r\n        tile.y = y;\r\n        tile.terrain = 'flagstone';\r\n        this.state.map.items.push(tile);\r\n\r\n        this.setState({\r\n            map: this.state.map,\r\n            selectedTileID: tile.id,\r\n            addingTile: false\r\n        });\r\n    }\r\n\r\n    private moveMapItem(item: MapItem, dir: string) {\r\n        switch (dir) {\r\n            case 'N':\r\n                item.y -= 1;\r\n                break;\r\n            case 'E':\r\n                item.x += 1;\r\n                break;\r\n            case 'S':\r\n                item.y += 1;\r\n                break;\r\n            case 'W':\r\n                item.x -= 1;\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    private bigMapItem(item: MapItem, dir: string) {\r\n        switch (dir) {\r\n            case 'N':\r\n                item.y -= 1;\r\n                item.height += 1;\r\n                break;\r\n            case 'E':\r\n                item.width += 1;\r\n                break;\r\n            case 'S':\r\n                item.height += 1;\r\n                break;\r\n            case 'W':\r\n                item.x -= 1;\r\n                item.width += 1;\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    private smallMapItem(item: MapItem, dir: string) {\r\n        switch (dir) {\r\n            case 'N':\r\n                if (item.height > 1) {\r\n                    item.y += 1;\r\n                    item.height -= 1;\r\n                }\r\n                break;\r\n            case 'E':\r\n                if (item.width > 1) {\r\n                    item.width -= 1;\r\n                }\r\n                break;\r\n            case 'S':\r\n                if (item.height > 1) {\r\n                    item.height -= 1;\r\n                }\r\n                break;\r\n            case 'W':\r\n                if (item.width > 1) {\r\n                    item.x += 1;\r\n                    item.width -= 1;\r\n                }\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    private resizeMapItem(item: MapItem, dir: string, dir2: 'in' | 'out') {\r\n        switch (dir2) {\r\n            case 'in':\r\n                this.smallMapItem(item, dir);\r\n                break;\r\n            case 'out':\r\n                this.bigMapItem(item, dir);\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n    }\r\n\r\n    private cloneMapItem(item: MapItem) {\r\n        const copy = JSON.parse(JSON.stringify(item));\r\n        copy.id = Utils.guid();\r\n        copy.x += 1;\r\n        copy.y += 1;\r\n        this.state.map.items.push(copy);\r\n\r\n        this.setState({\r\n            map: this.state.map,\r\n            selectedTileID: copy.id\r\n        });\r\n    }\r\n\r\n    private removeMapItem(item: MapItem) {\r\n        const index = this.state.map.items.indexOf(item);\r\n        this.state.map.items.splice(index, 1);\r\n\r\n        this.setState({\r\n            map: this.state.map,\r\n            selectedTileID: null\r\n        });\r\n    }\r\n\r\n    private changeValue(source: any, field: string, value: any) {\r\n        source[field] = value;\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const addBtn = (\r\n                <button onClick={() => this.toggleAddingTile()}>\r\n                    {this.state.addingTile ? 'click somewhere on the map to add your new tile, or click here to cancel' : 'add a new tile'}\r\n                </button>\r\n            );\r\n            let tools = null;\r\n            if (this.state.selectedTileID) {\r\n                const item = this.state.map.items.find(i => i.id === this.state.selectedTileID);\r\n                if (item) {\r\n                    tools = (\r\n                        <div className='tools'>\r\n                            <MapTileCard\r\n                                tile={item}\r\n                                moveMapItem={(mapItem, dir) => this.moveMapItem(mapItem, dir)}\r\n                                resizeMapItem={(mapItem, dir, dir2) => this.resizeMapItem(mapItem, dir, dir2 as 'in' | 'out')}\r\n                                cloneMapItem={mapItem => this.cloneMapItem(mapItem)}\r\n                                removeMapItem={mapItem => this.removeMapItem(mapItem)}\r\n                                changeValue={(source, field, value) => this.changeValue(source, field, value)}\r\n                            />\r\n                            {addBtn}\r\n                        </div>\r\n                    );\r\n                }\r\n            } else {\r\n                tools = (\r\n                    <div className='tools'>\r\n                        <Note\r\n                            content={\r\n                                <div>\r\n                                    <p>to add a new tile to the map, click on the button below</p>\r\n                                    <p>to edit an existing tile, click on it to select it</p>\r\n                                </div>\r\n                            }\r\n                        />\r\n                        {addBtn}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='map-editor'>\r\n                    {tools}\r\n                    <MapPanel\r\n                        map={this.state.map}\r\n                        mode='edit'\r\n                        selectedItemID={this.state.selectedTileID ? this.state.selectedTileID : undefined}\r\n                        showOverlay={this.state.addingTile}\r\n                        setSelectedItemID={id => this.setSelectedTileID(id)}\r\n                        gridSquareClicked={(x, y) => this.addMapTile(x, y)}\r\n                    />\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Frankenstein from '../../utils/frankenstein';\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { CATEGORY_TYPES, Monster, MonsterGroup, SIZE_TYPES, Trait, TRAIT_TYPES } from '../../models/monster-group';\r\n\r\nimport FilterCard from '../cards/filter-card';\r\nimport MonsterCard from '../cards/monster-card';\r\nimport Checkbox from '../controls/checkbox';\r\nimport Dropdown from '../controls/dropdown';\r\nimport Expander from '../controls/expander';\r\nimport Selector from '../controls/selector';\r\nimport Spin from '../controls/spin';\r\nimport AbilityScorePanel from '../panels/ability-score-panel';\r\nimport TraitsPanel from '../panels/traits-panel';\r\n\r\nimport Note from '../panels/note';\r\n\r\ninterface Props {\r\n    monster: Monster;\r\n    library: MonsterGroup[];\r\n    showSidebar: boolean;\r\n}\r\n\r\ninterface State {\r\n    monster: Monster;\r\n    page: 'overview' | 'abilities' | 'cbt-stats' | 'actions';\r\n    showFilter: boolean;\r\n    helpSection: string;\r\n    sidebar: 'similar' | 'scratchpad';\r\n    similarFilter: {\r\n        size: boolean,\r\n        type: boolean,\r\n        subtype: boolean,\r\n        alignment: boolean,\r\n        challenge: boolean,\r\n        text: string\r\n    };\r\n    scratchpadFilter: {\r\n        name: string,\r\n        challengeMin: number;\r\n        challengeMax: number;\r\n        category: string;\r\n        size: string;\r\n    };\r\n    scratchpadList: Monster[];\r\n}\r\n\r\nexport default class MonsterEditorModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            monster: props.monster,\r\n            page: 'overview',\r\n            showFilter: false,\r\n            helpSection: 'speed',\r\n            sidebar: 'similar',\r\n            similarFilter: {\r\n                size: true,\r\n                type: true,\r\n                subtype: false,\r\n                alignment: false,\r\n                challenge: true,\r\n                text: ''\r\n            },\r\n            scratchpadFilter: {\r\n                name: '',\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: 'all types',\r\n                size: 'all sizes'\r\n            },\r\n            scratchpadList: []\r\n        };\r\n    }\r\n\r\n    private setPage(page: 'overview' | 'abilities' | 'cbt-stats' | 'actions') {\r\n        const sections = this.getHelpOptionsForPage(page);\r\n        this.setState({\r\n            page: page,\r\n            helpSection: sections[0]\r\n        });\r\n    }\r\n\r\n    private toggleFilter() {\r\n        this.setState({\r\n            showFilter: !this.state.showFilter\r\n        });\r\n    }\r\n\r\n    private setHelpSection(section: string) {\r\n        this.setState({\r\n            helpSection: section\r\n        });\r\n    }\r\n\r\n    private toggleMatch(type: 'size' | 'type' | 'subtype' | 'alignment' | 'challenge') {\r\n        // eslint-disable-next-line\r\n        this.state.similarFilter[type] = !this.state.similarFilter[type];\r\n        this.setState({\r\n            similarFilter: this.state.similarFilter\r\n        });\r\n    }\r\n\r\n    private setFilterText(value: string) {\r\n        // eslint-disable-next-line\r\n        this.state.similarFilter.text = value;\r\n        this.setState({\r\n            similarFilter: this.state.similarFilter\r\n        });\r\n    }\r\n\r\n    private addToScratchpadList(monster: Monster) {\r\n        // eslint-disable-next-line\r\n        this.state.scratchpadList.push(monster);\r\n        // eslint-disable-next-line\r\n        Utils.sort(this.state.scratchpadList);\r\n        this.setState({\r\n            scratchpadList: this.state.scratchpadList\r\n        });\r\n    }\r\n\r\n    private removeFromScratchpadList(monster: Monster) {\r\n        const index = this.state.scratchpadList.indexOf(monster);\r\n        this.state.scratchpadList.splice(index, 1);\r\n        this.setState({\r\n            scratchpadList: this.state.scratchpadList\r\n        });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Helper methods\r\n\r\n    private getHelpOptionsForPage(page: 'overview' | 'abilities' | 'cbt-stats' | 'actions') {\r\n        switch (page) {\r\n            case 'overview':\r\n                return ['speed', 'senses', 'languages', 'equipment'];\r\n            case 'abilities':\r\n                return ['str', 'dex', 'con', 'int', 'wis', 'cha', 'saves', 'skills'];\r\n            case 'cbt-stats':\r\n                return ['armor class', 'hit dice', 'resistances', 'vulnerabilities', 'immunities', 'conditions'];\r\n            case 'actions':\r\n                return ['actions'];\r\n            default:\r\n                return [];\r\n        }\r\n    }\r\n\r\n    private getMonsters() {\r\n        const monsters: Monster[] = [];\r\n        this.props.library.forEach(group => {\r\n            group.monsters.forEach(monster => {\r\n                let match = true;\r\n\r\n                if (this.state.monster.id === monster.id) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.similarFilter.size && (this.state.monster.size !== monster.size)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.similarFilter.type && (this.state.monster.category !== monster.category)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.similarFilter.subtype && (this.state.monster.tag !== monster.tag)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.similarFilter.alignment && (this.state.monster.alignment !== monster.alignment)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.similarFilter.challenge && (this.state.monster.challenge !== monster.challenge)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (match) {\r\n                    monsters.push(monster);\r\n                }\r\n            });\r\n        });\r\n\r\n        return monsters;\r\n    }\r\n\r\n    private setRandomValue(field: string, monsters: Monster[]) {\r\n        Frankenstein.setRandomValue(this.state.monster, field, monsters);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private spliceMonsters(monsters: Monster[]) {\r\n        Frankenstein.spliceMonsters(this.state.monster, monsters);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private addTrait(type: 'trait' | 'action' | 'legendary' | 'lair') {\r\n        Frankenstein.addTrait(this.state.monster, type);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private addRandomTrait(type: string, monsters: Monster[]) {\r\n        Frankenstein.addRandomTrait(this.state.monster, type, monsters);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private removeTrait(trait: Trait) {\r\n        Frankenstein.removeTrait(this.state.monster, trait);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private swapTraits(t1: Trait, t2: Trait) {\r\n        Frankenstein.swapTraits(this.state.monster, t1, t2);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private copyTrait(trait: Trait) {\r\n        Frankenstein.copyTrait(this.state.monster, trait);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private changeTrait(trait: Trait, field: string, value: any) {\r\n        (trait as any)[field] = value;\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private nudgeValue(field: string, delta: number) {\r\n        Frankenstein.nudgeValue(this.state.monster, field, delta);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private changeValue(field: string, value: any) {\r\n        Frankenstein.changeValue(this.state.monster, field, value);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private changeFilterValue(type: 'name' | 'challengeMin' | 'challengeMax' | 'category' | 'size', value: any) {\r\n        // eslint-disable-next-line\r\n        this.state.scratchpadFilter[type] = value;\r\n        this.setState({\r\n            scratchpadFilter: this.state.scratchpadFilter\r\n        });\r\n    }\r\n\r\n    private nudgeFilterValue(type: 'challengeMin' | 'challengeMax', delta: number) {\r\n        const value = Utils.nudgeChallenge(this.state.scratchpadFilter[type], delta);\r\n        this.changeFilterValue(type, value);\r\n    }\r\n\r\n    private resetFilter() {\r\n        this.setState({\r\n            scratchpadFilter: {\r\n                name: '',\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: 'all types',\r\n                size: 'all sizes'\r\n            }\r\n        });\r\n    }\r\n\r\n    private matchMonster(monster: Monster) {\r\n        if (monster.challenge < this.state.scratchpadFilter.challengeMin) {\r\n            return false;\r\n        }\r\n\r\n        if (monster.challenge > this.state.scratchpadFilter.challengeMax) {\r\n            return false;\r\n        }\r\n\r\n        if (this.state.scratchpadFilter.name !== '') {\r\n            if (!Utils.match(this.state.scratchpadFilter.name, monster.name)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.scratchpadFilter.category !== 'all types') {\r\n            if (monster.category !== this.state.scratchpadFilter.category) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.scratchpadFilter.size !== 'all sizes') {\r\n            if (monster.size !== this.state.scratchpadFilter.size) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // HTML render methods\r\n\r\n    private getHelpSection(monsters: Monster[]) {\r\n        switch (this.state.helpSection) {\r\n            case 'speed':\r\n                return this.getValueSection('speed', 'text', monsters);\r\n            case 'senses':\r\n                return this.getValueSection('senses', 'text', monsters);\r\n            case 'languages':\r\n                return this.getValueSection('languages', 'text', monsters);\r\n            case 'equipment':\r\n                return this.getValueSection('equipment', 'text', monsters);\r\n            case 'str':\r\n                return this.getValueSection('abilityScores.str', 'number', monsters);\r\n            case 'dex':\r\n                return this.getValueSection('abilityScores.dex', 'number', monsters);\r\n            case 'con':\r\n                return this.getValueSection('abilityScores.con', 'number', monsters);\r\n            case 'int':\r\n                return this.getValueSection('abilityScores.int', 'number', monsters);\r\n            case 'wis':\r\n                return this.getValueSection('abilityScores.wis', 'number', monsters);\r\n            case 'cha':\r\n                return this.getValueSection('abilityScores.cha', 'number', monsters);\r\n            case 'saves':\r\n                return this.getValueSection('savingThrows', 'text', monsters);\r\n            case 'skills':\r\n                return this.getValueSection('skills', 'text', monsters);\r\n            case 'armor class':\r\n                return this.getValueSection('ac', 'number', monsters);\r\n            case 'hit dice':\r\n                return this.getValueSection('hitDice', 'number', monsters);\r\n            case 'resistances':\r\n                return this.getValueSection('damage.resist', 'text', monsters);\r\n            case 'vulnerabilities':\r\n                return this.getValueSection('damage.vulnerable', 'text', monsters);\r\n            case 'immunities':\r\n                return this.getValueSection('damage.immune', 'text', monsters);\r\n            case 'conditions':\r\n                return this.getValueSection('conditionImmunities', 'text', monsters);\r\n            case 'actions':\r\n                return this.getActionsSection(monsters);\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    private getValueSection(field: string, dataType: 'text' | 'number', monsters: Monster[]) {\r\n        const values: any[] = monsters\r\n            .map(m => {\r\n                const tokens = field.split('.');\r\n                let source: any = m;\r\n                let value = null;\r\n                tokens.forEach(token => {\r\n                    if (token === tokens[tokens.length - 1]) {\r\n                        value = source[token];\r\n                    } else {\r\n                        source = source[token];\r\n                    }\r\n                });\r\n                if ((dataType === 'text') && (value === '')) {\r\n                    value = null;\r\n                }\r\n                return value;\r\n            })\r\n            .filter(v => v !== null);\r\n\r\n        const distinct: { value: any, count: number }[] = [];\r\n        if (dataType === 'number') {\r\n            let min: number | null = null;\r\n            let max: number | null = null;\r\n            values.forEach(v => {\r\n                if ((min === null) || (v < min)) {\r\n                    min = v;\r\n                }\r\n                if ((max === null) || (v > max)) {\r\n                    max = v;\r\n                }\r\n            });\r\n            if ((min !== null) && (max !== null)) {\r\n                for (let n = min; n <= max; ++n) {\r\n                    distinct.push({\r\n                        value: n,\r\n                        count: 0\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        values.forEach(v => {\r\n            const current = distinct.find(d => d.value === v);\r\n            if (current) {\r\n                current.count += 1;\r\n            } else {\r\n                distinct.push({\r\n                    value: v,\r\n                    count: 1\r\n                });\r\n            }\r\n        });\r\n\r\n        switch (dataType) {\r\n            case 'number':\r\n                Utils.sort(distinct, [{ field: 'value', dir: 'asc' }]);\r\n                break;\r\n            case 'text':\r\n                Utils.sort(distinct, [{ field: 'count', dir: 'desc' }, { field: 'value', dir: 'asc' }]);\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        if (dataType === 'text') {\r\n            const count = monsters.length - values.length;\r\n            if (count !== 0) {\r\n                distinct.push({\r\n                    value: '',\r\n                    count: monsters.length - values.length\r\n                });\r\n            }\r\n        }\r\n\r\n        const valueSections = distinct.map(d => {\r\n            const width = 100 * d.count / monsters.length;\r\n            return (\r\n                <div className='row small-up-3 medium-up-3 large-up-3 value-list' key={distinct.indexOf(d)}>\r\n                    <div className='column'>\r\n                        <div className='text-container'>\r\n                            {d.value || '(none specified)'}\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <div className='bar-container'>\r\n                            <div className='bar' style={{ width: width + '%' }} />\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <button onClick={() => this.changeValue(field, d.value)}>use this value</button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                {valueSections}\r\n                <button onClick={() => this.setRandomValue(field, monsters)}>select random value</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getActionsSection(monsters: Monster[]) {\r\n        const rows = [];\r\n        rows.push(\r\n            <div className='row small-up-4 medium-up-4 large-up-4 value-list' key='header'>\r\n                <div className='column'>\r\n                    <div className='text-container'>\r\n                        <b>type</b>\r\n                    </div>\r\n                </div>\r\n                <div className='column'>\r\n                    <div className='text-container number'>\r\n                        <b>average number</b>\r\n                    </div>\r\n                </div>\r\n                <div className='column'>\r\n                    <div className='text-container number'>\r\n                        <b>min - max</b>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        TRAIT_TYPES.forEach(type => {\r\n            let min: number | null = null;\r\n            let max: number | null = null;\r\n            let count = 0;\r\n            monsters.forEach(m => {\r\n                const n = m.traits.filter(t => t.type === type).length;\r\n                if ((min === null) || (n < min)) {\r\n                    min = n;\r\n                }\r\n                if ((max === null) || (n > max)) {\r\n                    max = n;\r\n                }\r\n                count += n;\r\n            });\r\n            const avg = Math.round(count / monsters.length);\r\n\r\n            rows.push(\r\n                <div className='row small-up-4 medium-up-4 large-up-4 value-list' key={type}>\r\n                    <div className='column'>\r\n                        <div className={count === 0 ? 'text-container disabled' : 'text-container'}>\r\n                            {Utils.traitType(type, true)}\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <div className={count === 0 ? 'text-container number disabled' : 'text-container number'}>\r\n                            {avg}\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <div className={count === 0 ? 'text-container number disabled' : 'text-container number'}>\r\n                            {min} - {max}\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <button className={count === 0 ? 'disabled' : ''} onClick={() => this.addRandomTrait(type, monsters)}>add random</button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                {rows}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getMonsterCards(monsters: Monster[]) {\r\n        const sorted = Utils.sort(monsters);\r\n        const monsterCards = sorted.map(m => {\r\n            const showMonster = m.traits.some((t: Trait) => Utils.match(this.state.similarFilter.text, t.name));\r\n            if (showMonster) {\r\n                return (\r\n                    <div className='section' key={m.id}>\r\n                        <MonsterCard\r\n                            combatant={m}\r\n                            mode={'template ' + this.state.page}\r\n                            filter={this.state.similarFilter.text}\r\n                            copyTrait={trait => this.copyTrait(trait)}\r\n                        />\r\n                    </div>\r\n                );\r\n            } else {\r\n                return null;\r\n            }\r\n        }).filter(m => !!m);\r\n\r\n        if (monsterCards.length === 0) {\r\n            let info = '';\r\n            switch (this.state.sidebar) {\r\n                case 'similar':\r\n                    info = 'there are no monsters in your library which match the above criteria.';\r\n                    break;\r\n                case 'scratchpad':\r\n                    info = 'your scratchpad list is empty; you can add monsters to it to see their stats here.';\r\n                    break;\r\n            }\r\n\r\n            return (\r\n                <Note content={info} />\r\n            );\r\n        }\r\n\r\n        return monsterCards;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    public render() {\r\n        try {\r\n            const pages = [\r\n                {\r\n                    id: 'overview',\r\n                    text: 'overview'\r\n                },\r\n                {\r\n                    id: 'abilities',\r\n                    text: 'abilities'\r\n                },\r\n                {\r\n                    id: 'cbt-stats',\r\n                    text: 'combat'\r\n                },\r\n                {\r\n                    id: 'actions',\r\n                    text: 'actions'\r\n                }\r\n            ];\r\n\r\n            let monsters: Monster[] = [];\r\n            if (this.props.showSidebar) {\r\n                switch (this.state.sidebar) {\r\n                    case 'similar':\r\n                        monsters = this.getMonsters();\r\n                        break;\r\n                    case 'scratchpad':\r\n                        monsters = this.state.scratchpadList;\r\n                        break;\r\n                }\r\n            }\r\n\r\n            let content = null;\r\n            switch (this.state.page) {\r\n                case 'overview':\r\n                    const catOptions = CATEGORY_TYPES.map(cat => ({ id: cat, text: cat }));\r\n                    const sizeOptions = SIZE_TYPES.map(size => ({ id: size, text: size }));\r\n\r\n                    content = (\r\n                        <div className='row'>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>name</div>\r\n                                <input type='text' value={this.state.monster.name} onChange={event => this.changeValue('name', event.target.value)} />\r\n                                <div className='subheading'>size</div>\r\n                                <Dropdown\r\n                                    options={sizeOptions}\r\n                                    selectedID={this.state.monster.size}\r\n                                    select={optionID => this.changeValue('size', optionID)}\r\n                                />\r\n                                <div className='subheading'>type</div>\r\n                                <Dropdown\r\n                                    options={catOptions}\r\n                                    selectedID={this.state.monster.category}\r\n                                    select={optionID => this.changeValue('category', optionID)}\r\n                                />\r\n                                <div className='subheading'>subtype</div>\r\n                                <input type='text' value={this.state.monster.tag} onChange={event => this.changeValue('tag', event.target.value)} />\r\n                                <div className='subheading'>alignment</div>\r\n                                <input type='text' value={this.state.monster.alignment} onChange={event => this.changeValue('alignment', event.target.value)} />\r\n                            </div>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>challenge rating</div>\r\n                                <Spin\r\n                                    source={this.state.monster}\r\n                                    name='challenge'\r\n                                    display={value => Utils.challenge(value)}\r\n                                    nudgeValue={delta => this.nudgeValue('challenge', delta)}\r\n                                />\r\n                                <div className='subheading'>speed</div>\r\n                                <input type='text' value={this.state.monster.speed} onChange={event => this.changeValue('speed', event.target.value)} />\r\n                                <div className='subheading'>senses</div>\r\n                                <input type='text' value={this.state.monster.senses} onChange={event => this.changeValue('senses', event.target.value)} />\r\n                                <div className='subheading'>languages</div>\r\n                                <input type='text' value={this.state.monster.languages} onChange={event => this.changeValue('languages', event.target.value)} />\r\n                                <div className='subheading'>equipment</div>\r\n                                <input type='text' value={this.state.monster.equipment} onChange={event => this.changeValue('equipment', event.target.value)} />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                    break;\r\n                case 'abilities':\r\n                    content = (\r\n                        <div className='row'>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>ability scores</div>\r\n                                <AbilityScorePanel\r\n                                    edit={true}\r\n                                    combatant={this.state.monster}\r\n                                    nudgeValue={(source, type, delta) => this.nudgeValue(type, delta)}\r\n                                />\r\n                            </div>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>saving throws</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.savingThrows}\r\n                                    onChange={event => this.changeValue('savingThrows', event.target.value)}\r\n                                />\r\n                                <div className='subheading'>skills</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.skills}\r\n                                    onChange={event => this.changeValue('skills', event.target.value)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                    break;\r\n                case 'cbt-stats':\r\n                    content = (\r\n                        <div className='row'>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>armor class</div>\r\n                                <Spin\r\n                                    source={this.state.monster}\r\n                                    name='ac'\r\n                                    nudgeValue={delta => this.nudgeValue('ac', delta)}\r\n                                />\r\n                                <div className='subheading'>hit dice</div>\r\n                                <Spin\r\n                                    source={this.state.monster}\r\n                                    name='hitDice'\r\n                                    display={value => value + 'd' + Utils.hitDieType(this.state.monster.size)}\r\n                                    nudgeValue={delta => this.nudgeValue('hitDice', delta)}\r\n                                />\r\n                                <div className='subheading'>hit points</div>\r\n                                <div className='hp-value'>{this.state.monster.hpMax} hp</div>\r\n                            </div>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>damage resistances</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.damage.resist}\r\n                                    onChange={event => this.changeValue('damage.resist', event.target.value)}\r\n                                />\r\n                                <div className='subheading'>damage vulnerabilities</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.damage.vulnerable}\r\n                                    onChange={event => this.changeValue('damage.vulnerable', event.target.value)}\r\n                                />\r\n                                <div className='subheading'>damage immunities</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.damage.immune}\r\n                                    onChange={event => this.changeValue('damage.immune', event.target.value)}\r\n                                />\r\n                                <div className='subheading'>condition immunities</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.conditionImmunities}\r\n                                    onChange={event => this.changeValue('conditionImmunities', event.target.value)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                    break;\r\n                case 'actions':\r\n                    content = (\r\n                        <TraitsPanel\r\n                            combatant={this.state.monster}\r\n                            mode='edit'\r\n                            addTrait={type => this.addTrait(type)}\r\n                            removeTrait={trait => this.removeTrait(trait)}\r\n                            swapTraits={(t1, t2) => this.swapTraits(t1, t2)}\r\n                            changeValue={(trait, type, value) => this.changeTrait(trait, type, value)}\r\n                        />\r\n                    );\r\n                    break;\r\n                default:\r\n                    // Do nothing\r\n                    break;\r\n            }\r\n\r\n            let help = null;\r\n            if (this.props.showSidebar && (monsters.length > 1)) {\r\n                let selector = null;\r\n                if (this.getHelpOptionsForPage(this.state.page).length > 1) {\r\n                    const options = this.getHelpOptionsForPage(this.state.page).map(s => {\r\n                        return {\r\n                            id: s,\r\n                            text: s\r\n                        };\r\n                    });\r\n                    selector = (\r\n                        <Selector\r\n                            tabs={false}\r\n                            options={options}\r\n                            selectedID={this.state.helpSection}\r\n                            select={optionID => this.setHelpSection(optionID)}\r\n                        />\r\n                    );\r\n                }\r\n\r\n                help = (\r\n                    <div className='monster-help'>\r\n                        <div className='divider' />\r\n                        <div className='heading'>information from sidebar monsters</div>\r\n                        {selector}\r\n                        {this.getHelpSection(monsters)}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            let sidebar = null;\r\n            if (this.props.showSidebar) {\r\n                let sidebarContent = null;\r\n                switch (this.state.sidebar) {\r\n                    case 'similar':\r\n                        sidebarContent = (\r\n                            <Expander\r\n                                text='similarity criteria'\r\n                                content={\r\n                                    <div>\r\n                                        <Checkbox\r\n                                            label={'size ' + this.state.monster.size}\r\n                                            checked={this.state.similarFilter.size}\r\n                                            changeValue={value => this.toggleMatch('size')}\r\n                                        />\r\n                                        <Checkbox\r\n                                            label={'type ' + this.state.monster.category}\r\n                                            checked={this.state.similarFilter.type}\r\n                                            changeValue={value => this.toggleMatch('type')}\r\n                                        />\r\n                                        <Checkbox\r\n                                            label={this.state.monster.tag ? 'subtype ' + this.state.monster.tag : 'subtype'}\r\n                                            checked={this.state.similarFilter.subtype}\r\n                                            disabled={!this.state.monster.tag}\r\n                                            changeValue={value => this.toggleMatch('subtype')}\r\n                                        />\r\n                                        <Checkbox\r\n                                            label={this.state.monster.alignment ? 'alignment ' + this.state.monster.alignment : 'alignment'}\r\n                                            checked={this.state.similarFilter.alignment}\r\n                                            disabled={!this.state.monster.alignment}\r\n                                            changeValue={value => this.toggleMatch('alignment')}\r\n                                        />\r\n                                        <Checkbox\r\n                                            label={'challenge rating ' + Utils.challenge(this.state.monster.challenge)}\r\n                                            checked={this.state.similarFilter.challenge}\r\n                                            changeValue={value => this.toggleMatch('challenge')}\r\n                                        />\r\n                                    </div>\r\n                                }\r\n                            />\r\n                        );\r\n                        break;\r\n                    case 'scratchpad':\r\n                        {\r\n                            let searchResults: Monster[] = [];\r\n                            this.props.library.forEach(group => {\r\n                                group.monsters.forEach(m => {\r\n                                    if (!monsters.includes(m) && this.matchMonster(m)) {\r\n                                        searchResults.push(m);\r\n                                    }\r\n                                });\r\n                            });\r\n                            Utils.sort(searchResults);\r\n                            if (searchResults.length > 10) {\r\n                                searchResults = searchResults.slice(0, 10);\r\n                            }\r\n                            let resultsRows = searchResults.map(m =>\r\n                                <button key={m.id} onClick={() => this.addToScratchpadList(m)}>{m.name}</button>\r\n                            );\r\n                            if (searchResults.length === 0) {\r\n                                resultsRows = [(\r\n                                    <Note key='none' content='no monsters found' />\r\n                                )];\r\n                            }\r\n                            let removeSection = null;\r\n                            if (monsters.length > 0) {\r\n                                const deleteRows = monsters.map(m =>\r\n                                    <button key={m.id} onClick={() => this.removeFromScratchpadList(m)}>{m.name}</button>\r\n                                );\r\n                                removeSection = (\r\n                                    <Expander\r\n                                        text='remove monsters from the list'\r\n                                        content={\r\n                                            <div>\r\n                                                {deleteRows}\r\n                                            </div>\r\n                                        }\r\n                                    />\r\n                                );\r\n                            }\r\n                            sidebarContent = (\r\n                                <div>\r\n                                    <Expander\r\n                                        text='add monsters to the list'\r\n                                        content={\r\n                                            <div>\r\n                                                <FilterCard\r\n                                                    filter={this.state.scratchpadFilter}\r\n                                                    changeValue={(type, value) => this.changeFilterValue(type, value)}\r\n                                                    nudgeValue={(type, delta) => this.nudgeFilterValue(type, delta)}\r\n                                                    resetFilter={() => this.resetFilter()}\r\n                                                />\r\n                                                {resultsRows}\r\n                                            </div>\r\n                                        }\r\n                                    />\r\n                                    {removeSection}\r\n                                </div>\r\n                            );\r\n                        }\r\n                        break;\r\n                }\r\n                const sidebarOptions = [\r\n                    {\r\n                        id: 'similar',\r\n                        text: 'similar'\r\n                    },\r\n                    {\r\n                        id: 'scratchpad',\r\n                        text: 'scratchpad'\r\n                    }\r\n                ];\r\n                sidebar = (\r\n                    <div className='columns small-4 medium-4 large-4 scrollable wide-column'>\r\n                        <Selector\r\n                            tabs={true}\r\n                            options={sidebarOptions}\r\n                            selectedID={this.state.sidebar}\r\n                            select={optionID => this.setState({sidebar: optionID as 'similar' | 'scratchpad'})}\r\n                        />\r\n                        {sidebarContent}\r\n                        <button className={monsters.length < 2 ? 'disabled' : ''} onClick={() => this.spliceMonsters(monsters)}>\r\n                            build random monster\r\n                        </button>\r\n                        <div className='divider'/>\r\n                        {this.getMonsterCards(monsters)}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='row' style={{ height: '100%', margin: '0 -5px' }}>\r\n                    <div\r\n                        className={\r\n                            this.props.showSidebar\r\n                            ? 'columns small-8 medium-8 large-8 scrollable wide-column'\r\n                            : 'columns small-12 medium-12 large-12 scrollable wide-column'\r\n                        }\r\n                        style={{ transition: 'none' }}\r\n                    >\r\n                        <div className='section'>\r\n                            <Selector\r\n                                tabs={true}\r\n                                options={pages}\r\n                                selectedID={this.state.page}\r\n                                select={optionID => this.setPage(optionID as 'overview' | 'abilities' | 'cbt-stats' | 'actions')}\r\n                            />\r\n                            {content}\r\n                            {help}\r\n                        </div>\r\n                    </div>\r\n                    {sidebar}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { PC } from '../../models/party';\r\n\r\nimport Spin from '../controls/spin';\r\n\r\ninterface Props {\r\n    pc: PC;\r\n}\r\n\r\ninterface State {\r\n    pc: PC;\r\n}\r\n\r\nexport default class PCEditorModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            pc: props.pc\r\n        };\r\n    }\r\n\r\n    private changeValue(source: any, field: string, value: any) {\r\n        source[field] = value;\r\n\r\n        this.setState({\r\n            pc: this.state.pc\r\n        });\r\n    }\r\n\r\n    private nudgeValue(source: any, field: string, delta: number) {\r\n        const value = source[field] + delta;\r\n        this.changeValue(source, field, value);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div className='pc-editor'>\r\n                    <div className='row section'>\r\n                        <div className='columns small-12 medium-6 large-6'>\r\n                            <div className='subheading'>character name:</div>\r\n                            <input\r\n                                type='text'\r\n                                value={this.state.pc.name}\r\n                                onChange={event => this.changeValue(this.state.pc, 'name', event.target.value)}\r\n                            />\r\n                            <div className='subheading'>player name:</div>\r\n                            <input\r\n                                type='text'\r\n                                value={this.state.pc.player}\r\n                                onChange={event => this.changeValue(this.state.pc, 'player', event.target.value)}\r\n                            />\r\n                            <div className='subheading'>race:</div>\r\n                            <input\r\n                                type='text'\r\n                                value={this.state.pc.race}\r\n                                onChange={event => this.changeValue(this.state.pc, 'race', event.target.value)}\r\n                            />\r\n                            <div className='subheading'>class:</div>\r\n                            <input\r\n                                type='text'\r\n                                value={this.state.pc.classes}\r\n                                onChange={event => this.changeValue(this.state.pc, 'classes', event.target.value)}\r\n                            />\r\n                            <div className='subheading'>level:</div>\r\n                            <Spin\r\n                                source={this.state.pc}\r\n                                name='level'\r\n                                nudgeValue={delta => this.nudgeValue(this.state.pc, 'level', delta)}\r\n                            />\r\n                        </div>\r\n                        <div className='columns small-12 medium-6 large-6'>\r\n                            <div className='subheading'>languages:</div>\r\n                            <input\r\n                                type='text'\r\n                                value={this.state.pc.languages}\r\n                                onChange={event => this.changeValue(this.state.pc, 'languages', event.target.value)}\r\n                            />\r\n                            <div className='subheading'>d&d beyond link:</div>\r\n                            <input\r\n                                type='text'\r\n                                value={this.state.pc.url}\r\n                                placeholder='https://ddb.ac/characters/...'\r\n                                onChange={event => this.changeValue(this.state.pc, 'url', event.target.value)}\r\n                            />\r\n                            <div className='subheading'>passive skills</div>\r\n                            <Spin\r\n                                source={this.state.pc}\r\n                                name='passiveInsight'\r\n                                label='insight'\r\n                                nudgeValue={delta => this.nudgeValue(this.state.pc, 'passiveInsight', delta)}\r\n                            />\r\n                            <Spin\r\n                                source={this.state.pc}\r\n                                name='passiveInvestigation'\r\n                                label='investigation'\r\n                                nudgeValue={delta => this.nudgeValue(this.state.pc, 'passiveInvestigation', delta)}\r\n                            />\r\n                            <Spin\r\n                                source={this.state.pc}\r\n                                name='passivePerception'\r\n                                label='perception'\r\n                                nudgeValue={delta => this.nudgeValue(this.state.pc, 'passivePerception', delta)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Frankenstein from '../../utils/frankenstein';\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Monster, MonsterGroup } from '../../models/monster-group';\r\n\r\nimport FilterCard from '../cards/filter-card';\r\nimport MonsterCard from '../cards/monster-card';\r\nimport Note from '../panels/note';\r\n\r\ninterface Props {\r\n    monster: Monster;\r\n    library: MonsterGroup[];\r\n}\r\n\r\ninterface State {\r\n    monster: Monster;\r\n    filter: {\r\n        name: string,\r\n        challengeMin: number;\r\n        challengeMax: number;\r\n        category: string;\r\n        size: string;\r\n    };\r\n    selectedMonsters: Monster[];\r\n}\r\n\r\nexport default class RandomMonsterModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            monster: this.props.monster,\r\n            filter: {\r\n                name: '',\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: 'all types',\r\n                size: 'all sizes'\r\n            },\r\n            selectedMonsters: []\r\n        };\r\n    }\r\n\r\n    private generateMonster() {\r\n        Frankenstein.spliceMonsters(this.state.monster, this.state.selectedMonsters);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private changeFilterValue(type: 'name' | 'challengeMin' | 'challengeMax' | 'category' | 'size', value: any) {\r\n        // eslint-disable-next-line\r\n        this.state.filter[type] = value;\r\n        this.setState({\r\n            filter: this.state.filter\r\n        });\r\n    }\r\n\r\n    private nudgeFilterValue(type: 'challengeMin' | 'challengeMax', delta: number) {\r\n        const value = Utils.nudgeChallenge(this.state.filter[type], delta);\r\n        this.changeFilterValue(type, value);\r\n    }\r\n\r\n    private resetFilter() {\r\n        this.setState({\r\n            filter: {\r\n                name: '',\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: 'all types',\r\n                size: 'all sizes'\r\n            }\r\n        });\r\n    }\r\n\r\n    private matchMonster(monster: Monster) {\r\n        if (monster.challenge < this.state.filter.challengeMin) {\r\n            return false;\r\n        }\r\n\r\n        if (monster.challenge > this.state.filter.challengeMax) {\r\n            return false;\r\n        }\r\n\r\n        if (this.state.filter.name !== '') {\r\n            if (!Utils.match(this.state.filter.name, monster.name)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.filter.category !== 'all types') {\r\n            if (monster.category !== this.state.filter.category) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.filter.size !== 'all sizes') {\r\n            if (monster.size !== this.state.filter.size) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private selectMonster(monster: Monster) {\r\n        this.state.selectedMonsters.push(monster);\r\n        this.state.selectedMonsters.sort((a, b) => {\r\n            if (a.name < b.name) { return -1; }\r\n            if (a.name > b.name) { return 1; }\r\n            return 0;\r\n        });\r\n        this.setState({\r\n            selectedMonsters: this.state.selectedMonsters\r\n        });\r\n    }\r\n\r\n    private deselectMonster(monster: Monster) {\r\n        const index = this.state.selectedMonsters.indexOf(monster);\r\n        this.state.selectedMonsters.splice(index, 1);\r\n        this.setState({\r\n            selectedMonsters: this.state.selectedMonsters\r\n        });\r\n    }\r\n\r\n    private selectAll() {\r\n        this.props.library.forEach(group => {\r\n            group.monsters.forEach(monster => {\r\n                if (this.matchMonster(monster)) {\r\n                    this.state.selectedMonsters.push(monster);\r\n                }\r\n            });\r\n        });\r\n        this.state.selectedMonsters.sort((a, b) => {\r\n            if (a.name < b.name) { return -1; }\r\n            if (a.name > b.name) { return 1; }\r\n            return 0;\r\n        });\r\n        this.setState({\r\n            selectedMonsters: this.state.selectedMonsters\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const monsters: Monster[] = [];\r\n            this.props.library.forEach(group => {\r\n                group.monsters.forEach(monster => {\r\n                    if (this.matchMonster(monster)) {\r\n                        monsters.push(monster);\r\n                    }\r\n                });\r\n            });\r\n            monsters.sort((a, b) => {\r\n                if (a.name < b.name) { return -1; }\r\n                if (a.name > b.name) { return 1; }\r\n                return 0;\r\n            });\r\n            let allMonsters: JSX.Element | JSX.Element[] = monsters.filter(m => !this.state.selectedMonsters.includes(m)).map(m => {\r\n                return (\r\n                    <MonsterCard key={m.id} combatant={m} mode='view candidate' selectMonster={monster => this.selectMonster(monster)} />\r\n                );\r\n            });\r\n            if (allMonsters.length === 0) {\r\n                allMonsters = (\r\n                    <Note\r\n                        content={(\r\n                            <div className='section'>\r\n                                there are no monsters that match the above criteria (or you have already selected them all)\r\n                            </div>\r\n                        )}\r\n                    />\r\n                );\r\n            }\r\n\r\n            const selectedMonsters: JSX.Element | JSX.Element[] = this.state.selectedMonsters.map(m => {\r\n                return (\r\n                    <MonsterCard key={m.id} combatant={m} mode='view candidate selected' deselectMonster={monster => this.deselectMonster(monster)} />\r\n                );\r\n            });\r\n            let selectedMonstersInfo = null;\r\n            if (selectedMonsters.length < 2) {\r\n                selectedMonstersInfo = (\r\n                    <Note\r\n                        content={(\r\n                            <div>\r\n                                <div className='section'>\r\n                                    in order to generate a random monster, select at least two source monsters from the list on the left\r\n                                </div>\r\n                                <button onClick={() => this.selectAll()}>select all monsters</button>\r\n                            </div>\r\n                        )}\r\n                    />\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='random-monster-modal'>\r\n                    <div className='row' style={{ height: '100%' }}>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable'>\r\n                            <div className='heading'>all monsters</div>\r\n                            <FilterCard\r\n                                filter={this.state.filter}\r\n                                changeValue={(type, value) => this.changeFilterValue(type, value)}\r\n                                nudgeValue={(type, delta) => this.nudgeFilterValue(type, delta)}\r\n                                resetFilter={() => this.resetFilter()}\r\n                            />\r\n                            <div className='divider' />\r\n                            {allMonsters}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable'>\r\n                            <div className='heading'>selected monsters</div>\r\n                            <button\r\n                                className={this.state.selectedMonsters.length < 2 ? 'disabled' : ''}\r\n                                onClick={() => this.generateMonster()}\r\n                            >\r\n                                randomly generate monster\r\n                            </button>\r\n                            <div className='divider' />\r\n                            {selectedMonstersInfo}\r\n                            {selectedMonsters}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable'>\r\n                            <div className='heading'>output</div>\r\n                            <MonsterCard\r\n                                combatant={this.state.monster}\r\n                                mode='view generated'\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Encounter } from '../../models/encounter';\r\nimport { MonsterGroup } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\ninterface Props {\r\n    view: string;\r\n    blur: boolean;\r\n    library: MonsterGroup[];\r\n    parties: Party[];\r\n    encounters: Encounter[];\r\n    setView: (view: string) => void;\r\n}\r\n\r\nexport default class Navbar extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const partiesStyle = this.props.view === 'parties' ? 'navigator-item selected' : 'navigator-item';\r\n            const libraryStyle = this.props.view === 'library' ? 'navigator-item selected' : 'navigator-item';\r\n            let encounterStyle = this.props.view === 'encounter' ? 'navigator-item selected' : 'navigator-item';\r\n            const mapStyle = this.props.view === 'maps' ? 'navigator-item selected' : 'navigator-item';\r\n            let combatStyle = this.props.view === 'combat' ? 'navigator-item selected' : 'navigator-item';\r\n\r\n            const encountersEnabled = this.props.library.length !== 0;\r\n            const combatEnabled = (this.props.parties.length !== 0) && (this.props.encounters.length !== 0);\r\n            if (!encountersEnabled) {\r\n                encounterStyle += ' disabled';\r\n            }\r\n            if (!combatEnabled) {\r\n                combatStyle += ' disabled';\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.blur ? 'navbar blur' : 'navbar'}>\r\n                    <div className={partiesStyle} onClick={() => this.props.setView('parties')}>player characters</div>\r\n                    <div className={libraryStyle} onClick={() => this.props.setView('library')}>monster library</div>\r\n                    <div className={encounterStyle} onClick={() => encountersEnabled ? this.props.setView('encounter') : null}>encounter builder</div>\r\n                    <div className={mapStyle} onClick={() => this.props.setView('maps')}>map folios</div>\r\n                    <div className={combatStyle} onClick={() => combatEnabled ? this.props.setView('combat') : null}>combat manager</div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport cog from '../../resources/images/settings.svg';\r\n\r\ninterface Props {\r\n    actions: JSX.Element | null;\r\n    blur: boolean;\r\n    openHome: () => void;\r\n    openAbout: () => void;\r\n}\r\n\r\nexport default class Titlebar extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div className={this.props.blur ? 'titlebar blur' : 'titlebar'}>\r\n                    <div className='app-name' onClick={() => this.props.openHome()}>dojo</div>\r\n                    {this.props.actions}\r\n                    <img className='settings-icon' src={cog} title='about' alt='about' onClick={() => this.props.openAbout()} />\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Factory from '../utils/factory';\r\nimport Frankenstein from '../utils/frankenstein';\r\nimport Utils from '../utils/utils';\r\n\r\nimport { Combat, Combatant, CombatSetup, Notification } from '../models/combat';\r\nimport { Condition } from '../models/condition';\r\nimport { Encounter, EncounterSlot, EncounterWave } from '../models/encounter';\r\nimport { Map, MapFolio } from '../models/map-folio';\r\nimport { Monster, MonsterGroup } from '../models/monster-group';\r\nimport { Party, PC } from '../models/party';\r\n\r\nimport CombatManagerScreen from './screens/combat-manager-screen';\r\nimport EncounterBuilderScreen from './screens/encounter-builder-screen';\r\nimport HomeScreen from './screens/home-screen';\r\nimport MapFoliosScreen from './screens/map-folios-screen';\r\nimport MonsterLibraryScreen from './screens/monster-library-screen';\r\nimport PartiesScreen from './screens/parties-screen';\r\n\r\nimport AboutModal from './modals/about-modal';\r\nimport AddCombatantsModal from './modals/add-combatants-modal';\r\nimport CombatStartModal from './modals/combat-start-modal';\r\nimport ConditionModal from './modals/condition-modal';\r\nimport DemographicsModal from './modals/demographics-modal';\r\nimport MapEditorModal from './modals/map-editor-modal';\r\nimport MonsterEditorModal from './modals/monster-editor-modal';\r\nimport PCEditorModal from './modals/pc-editor-modal';\r\nimport RandomMonsterModal from './modals/random-monster-modal';\r\n\r\nimport Navbar from './panels/navbar';\r\nimport Titlebar from './panels/titlebar';\r\n\r\nimport Checkbox from './controls/checkbox';\r\n\r\nimport close from '../resources/images/close-black.svg';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    // No props; this is the root component\r\n}\r\n\r\ninterface State {\r\n    view: string;\r\n    modal: any;\r\n    filter: string;\r\n\r\n    parties: Party[];\r\n    library: MonsterGroup[];\r\n    encounters: Encounter[];\r\n    mapFolios: MapFolio[];\r\n    combats: Combat[];\r\n\r\n    selectedPartyID: string | null;\r\n    selectedMonsterGroupID: string | null;\r\n    selectedEncounterID: string | null;\r\n    selectedMapFolioID: string | null;\r\n    selectedCombatID: string | null;\r\n}\r\n\r\nexport default class Dojo extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            view: 'home',\r\n            modal: null,\r\n            filter: '',\r\n            parties: [],\r\n            library: [],\r\n            encounters: [],\r\n            mapFolios: [],\r\n            combats: [],\r\n            selectedPartyID: null,\r\n            selectedMonsterGroupID: null,\r\n            selectedEncounterID: null,\r\n            selectedMapFolioID: null,\r\n            selectedCombatID: null\r\n        };\r\n\r\n        try {\r\n            let data: State | null = null;\r\n\r\n            try {\r\n                const json = window.localStorage.getItem('data');\r\n                if (json) {\r\n                    data = JSON.parse(json);\r\n                }\r\n            } catch (ex) {\r\n                console.error('Could not parse JSON: ', ex);\r\n                data = null;\r\n            }\r\n\r\n            if (data !== null) {\r\n                data.library.forEach(g => {\r\n                    g.monsters.forEach(m => {\r\n                        m.traits.forEach(t => {\r\n                            t.uses = 0;\r\n                        });\r\n                    });\r\n                });\r\n\r\n                data.encounters.forEach(enc => {\r\n                    if (!enc.waves) {\r\n                        enc.waves = [];\r\n                    }\r\n                });\r\n\r\n                if (!data.mapFolios) {\r\n                    data.mapFolios = [];\r\n                    data.selectedMapFolioID = null;\r\n                }\r\n\r\n                data.mapFolios.forEach(folio => {\r\n                    folio.maps.forEach(map => {\r\n                        map.items.forEach(item => {\r\n                            if (item.style === undefined) {\r\n                                item.style = null;\r\n                            }\r\n                        });\r\n                    });\r\n                });\r\n\r\n                data.combats.forEach(combat => {\r\n                    if (!combat.notifications) {\r\n                        combat.notifications = [];\r\n                    }\r\n                    combat.combatants.forEach(c => {\r\n                        if (c.altitude === undefined) {\r\n                            c.altitude = 0;\r\n                        }\r\n\r\n                        if (c.tags === undefined) {\r\n                            c.tags = [];\r\n                        }\r\n\r\n                        if (c.aura === undefined) {\r\n                            c.aura = { size: 0, style: 'rounded', color: '#005080' };\r\n                        }\r\n\r\n                        if (c.type === 'monster') {\r\n                            const m = c as Combatant & Monster;\r\n                            m.traits.forEach(t => {\r\n                                if (t.uses === undefined) {\r\n                                    t.uses = 0;\r\n                                }\r\n                            });\r\n                        }\r\n                    });\r\n                });\r\n\r\n                data.view = 'home';\r\n                data.modal = null;\r\n                data.filter = '';\r\n\r\n                this.state = data;\r\n            }\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n\r\n    public componentDidUpdate() {\r\n        let json = null;\r\n        try {\r\n            json = JSON.stringify(this.state);\r\n        } catch (ex) {\r\n            console.error('Could not stringify data: ', ex);\r\n            json = null;\r\n        }\r\n\r\n        if (json !== null) {\r\n            window.localStorage.setItem('data', json);\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Party screen\r\n\r\n    private addParty() {\r\n        const party = Factory.createParty();\r\n        party.name = 'new party';\r\n        const parties: Party[] = ([] as Party[]).concat(this.state.parties, [party]);\r\n        Utils.sort(parties);\r\n        this.setState({\r\n            parties: parties,\r\n            selectedPartyID: party.id\r\n        });\r\n    }\r\n\r\n    private removeParty() {\r\n        const party = this.state.parties.find(p => p.id === this.state.selectedPartyID);\r\n        if (party) {\r\n            const index = this.state.parties.indexOf(party);\r\n            this.state.parties.splice(index, 1);\r\n            this.setState({\r\n                parties: this.state.parties,\r\n                selectedPartyID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private addPC() {\r\n        const party = this.state.parties.find(p => p.id === this.state.selectedPartyID);\r\n        if (party) {\r\n            const pc = Factory.createPC();\r\n            pc.name = 'new pc';\r\n            party.pcs.push(pc);\r\n            this.setState({\r\n                parties: this.state.parties\r\n            });\r\n        }\r\n    }\r\n\r\n    private removePC(pc: PC) {\r\n        const party = this.state.parties.find(p => p.id === this.state.selectedPartyID);\r\n        if (party) {\r\n            const index = party.pcs.indexOf(pc);\r\n            party.pcs.splice(index, 1);\r\n            this.setState({\r\n                parties: this.state.parties\r\n            });\r\n        }\r\n    }\r\n\r\n    private sortPCs() {\r\n        const party = this.state.parties.find(p => p.id === this.state.selectedPartyID);\r\n        if (party) {\r\n            Utils.sort(party.pcs);\r\n            this.setState({\r\n                parties: this.state.parties\r\n            });\r\n        }\r\n    }\r\n\r\n    private editPC(pc: PC) {\r\n        const copy = JSON.parse(JSON.stringify(pc));\r\n        this.setState({\r\n            modal: {\r\n                type: 'pc',\r\n                pc: copy\r\n            }\r\n        });\r\n    }\r\n\r\n    private savePC() {\r\n        const party = this.state.parties.find(p => p.id === this.state.selectedPartyID);\r\n        if (party) {\r\n            const original = party.pcs.find(pc => pc.id === this.state.modal.pc.id);\r\n            if (original) {\r\n                const index = party.pcs.indexOf(original);\r\n                party.pcs[index] = this.state.modal.pc;\r\n                this.setState({\r\n                    library: this.state.library,\r\n                    modal: null\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Library screen\r\n\r\n    private addMonsterGroup() {\r\n        const group = Factory.createMonsterGroup();\r\n        group.name = 'new group';\r\n        const library = ([] as MonsterGroup[]).concat(this.state.library, [group]);\r\n        Utils.sort(library);\r\n        this.setState({\r\n            library: library,\r\n            selectedMonsterGroupID: group.id\r\n        });\r\n    }\r\n\r\n    private removeMonsterGroup() {\r\n        const group = this.state.library.find(g => g.id === this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            const index = this.state.library.indexOf(group);\r\n            this.state.library.splice(index, 1);\r\n            this.setState({\r\n                library: this.state.library,\r\n                selectedMonsterGroupID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private addMonster() {\r\n        const monster = Factory.createMonster();\r\n        monster.name = 'new monster';\r\n        const group = this.state.library.find(g => g.id === this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            group.monsters.push(monster);\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    private generateMonster() {\r\n        const monster = Factory.createMonster();\r\n        monster.name = 'generated monster';\r\n        this.setState({\r\n            modal: {\r\n                type: 'random-monster',\r\n                monster: monster\r\n            }\r\n        });\r\n    }\r\n\r\n    private removeMonster(monster: Monster) {\r\n        const group = this.state.library.find(g => g.id === this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            const index = group.monsters.indexOf(monster);\r\n            group.monsters.splice(index, 1);\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    private sortMonsters() {\r\n        const group = this.state.library.find(g => g.id === this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            Utils.sort(group.monsters);\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    private moveToGroup(monster: Monster, groupID: string) {\r\n        const sourceGroup = this.state.library.find(group => group.monsters.includes(monster));\r\n        if (sourceGroup) {\r\n            const index = sourceGroup.monsters.indexOf(monster);\r\n            sourceGroup.monsters.splice(index, 1);\r\n\r\n            const group = this.state.library.find(g => g.id === groupID);\r\n            if (group) {\r\n                group.monsters.push(monster);\r\n                Utils.sort(group.monsters);\r\n\r\n                this.setState({\r\n                    library: this.state.library\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private editMonster(monster: Monster) {\r\n        const copy = JSON.parse(JSON.stringify(monster));\r\n        this.setState({\r\n            modal: {\r\n                type: 'monster',\r\n                monster: copy,\r\n                showSidebar: false\r\n            }\r\n        });\r\n    }\r\n\r\n    private saveMonster() {\r\n        const group = this.state.library.find(g => g.id === this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            const original = group.monsters.find(m => m.id === this.state.modal.monster.id);\r\n            if (original) {\r\n                // We are editing a monster\r\n                const index = group.monsters.indexOf(original);\r\n                group.monsters[index] = this.state.modal.monster;\r\n                this.setState({\r\n                    library: this.state.library,\r\n                    modal: null\r\n                });\r\n            } else {\r\n                // We are adding a new monster\r\n                group.monsters.push(this.state.modal.monster);\r\n                this.setState({\r\n                    library: this.state.library,\r\n                    modal: null\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private toggleShowSidebar() {\r\n        // eslint-disable-next-line\r\n        this.state.modal.showSidebar = !this.state.modal.showSidebar;\r\n        this.setState({\r\n            modal: this.state.modal\r\n        });\r\n    }\r\n\r\n    private openDemographics() {\r\n        this.setState({\r\n            modal: {\r\n                type: 'demographics'\r\n            }\r\n        });\r\n    }\r\n\r\n    private cloneMonster(monster: Monster, name: string) {\r\n        const group = this.state.library.find(g => g.monsters.includes(monster));\r\n        if (group) {\r\n            const clone = Frankenstein.clone(monster, name);\r\n            group.monsters.push(clone);\r\n            Utils.sort(group.monsters);\r\n\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    private addOpenGameContent() {\r\n        fetch('./data/monsters.json')\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                json.forEach((data: any) => {\r\n                    try {\r\n                        if (data.name) {\r\n                            const monster = Frankenstein.createFromJSON(data);\r\n\r\n                            let groupName = monster.tag || monster.category;\r\n                            if (groupName.indexOf('swarm') === 0) {\r\n                                groupName = 'swarm';\r\n                            }\r\n                            if (groupName === 'any race') {\r\n                                groupName = 'npc';\r\n                            }\r\n\r\n                            let group = this.state.library.find(p => p.name === groupName);\r\n                            if (!group) {\r\n                                group = {\r\n                                    id: Utils.guid(),\r\n                                    name: groupName,\r\n                                    monsters: []\r\n                                };\r\n                                this.state.library.push(group);\r\n                            }\r\n                            group.monsters.push(monster);\r\n                        }\r\n                    } catch (e) {\r\n                        console.error(e);\r\n                    }\r\n                });\r\n\r\n                Utils.sort(this.state.library);\r\n\r\n                this.setState({\r\n                    view: 'library',\r\n                    library: this.state.library\r\n                });\r\n            });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Encounter screen\r\n\r\n    private addEncounter() {\r\n        const encounter = Factory.createEncounter();\r\n        encounter.name = 'new encounter';\r\n        const encounters = ([] as Encounter[]).concat(this.state.encounters, [encounter]);\r\n        Utils.sort(encounters);\r\n\r\n        this.setState({\r\n            encounters: encounters,\r\n            selectedEncounterID: encounter.id\r\n        });\r\n    }\r\n\r\n    private removeEncounter() {\r\n        const encounter = this.state.encounters.find(e => e.id === this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            const index = this.state.encounters.indexOf(encounter);\r\n            this.state.encounters.splice(index, 1);\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters,\r\n                selectedEncounterID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private addEncounterSlot(monster: Monster, waveID: string | null) {\r\n        const group = this.state.library.find(g => g.monsters.includes(monster));\r\n        if (group) {\r\n            const slot = Factory.createEncounterSlot();\r\n            slot.monsterGroupName = group.name;\r\n            slot.monsterName = monster.name;\r\n            const encounter = this.state.encounters.find(e => e.id === this.state.selectedEncounterID);\r\n            if (encounter) {\r\n                if (waveID !== null) {\r\n                    const wave = encounter.waves.find(w => w.id === waveID);\r\n                    if (wave) {\r\n                        wave.slots.push(slot);\r\n                        this.sortEncounterSlots(wave);\r\n                    }\r\n                } else {\r\n                    encounter.slots.push(slot);\r\n                    this.sortEncounterSlots(encounter);\r\n                }\r\n\r\n                this.setState({\r\n                    encounters: this.state.encounters\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeEncounterSlot(slot: EncounterSlot, waveID: string | null) {\r\n        const encounter = this.state.encounters.find(e => e.id === this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            if (waveID) {\r\n                const wave = encounter.waves.find(w => w.id === waveID);\r\n                if (wave) {\r\n                    const index = wave.slots.indexOf(slot);\r\n                    wave.slots.splice(index, 1);\r\n                }\r\n            } else {\r\n                const n = encounter.slots.indexOf(slot);\r\n                encounter.slots.splice(n, 1);\r\n            }\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters\r\n            });\r\n        }\r\n    }\r\n\r\n    private sortEncounterSlots(slotContainer: { slots: EncounterSlot[] }) {\r\n        slotContainer.slots.sort((a, b) => {\r\n            const aName = a.monsterName.toLowerCase();\r\n            const bName = b.monsterName.toLowerCase();\r\n            if (aName < bName) { return -1; }\r\n            if (aName > bName) { return 1; }\r\n            return 0;\r\n        });\r\n    }\r\n\r\n    private addWaveToEncounter() {\r\n        const encounter = this.state.encounters.find(e => e.id === this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            const wave = Factory.createEncounterWave();\r\n            wave.name = 'wave ' + (encounter.waves.length + 2);\r\n            encounter.waves.push(wave);\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters\r\n            });\r\n        }\r\n    }\r\n\r\n    private removeWave(wave: EncounterWave) {\r\n        const encounter = this.state.encounters.find(e => e.id === this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            const index = encounter.waves.indexOf(wave);\r\n            encounter.waves.splice(index, 1);\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters\r\n            });\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Map screen\r\n\r\n    private addMapFolio() {\r\n        const folio = Factory.createMapFolio();\r\n        folio.name = 'new folio';\r\n        const folios = ([] as MapFolio[]).concat(this.state.mapFolios, [folio]);\r\n        Utils.sort(folios);\r\n\r\n        this.setState({\r\n            mapFolios: folios,\r\n            selectedMapFolioID: folio.id\r\n        });\r\n    }\r\n\r\n    private removeMapFolio() {\r\n        const folio = this.state.mapFolios.find(f => f.id === this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            const index = this.state.mapFolios.indexOf(folio);\r\n            this.state.mapFolios.splice(index, 1);\r\n\r\n            this.setState({\r\n                mapFolios: this.state.mapFolios,\r\n                selectedMapFolioID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private addMap() {\r\n        const folio = this.state.mapFolios.find(f => f.id === this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            const map = Factory.createMap();\r\n            map.name = 'new map';\r\n            folio.maps.push(map);\r\n\r\n            this.setState({\r\n                mapFolios: this.state.mapFolios\r\n            });\r\n        }\r\n    }\r\n\r\n    private editMap(map: Map) {\r\n        const copy = JSON.parse(JSON.stringify(map));\r\n        this.setState({\r\n            modal: {\r\n                type: 'map',\r\n                map: copy\r\n            }\r\n        });\r\n    }\r\n\r\n    private saveMap() {\r\n        const folio = this.state.mapFolios.find(f => f.id === this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            const original = folio.maps.find(m => m.id === this.state.modal.map.id);\r\n            if (original) {\r\n                const index = folio.maps.indexOf(original);\r\n                folio.maps[index] = this.state.modal.map;\r\n                this.setState({\r\n                    mapFolios: this.state.mapFolios,\r\n                    modal: null\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeMap(map: Map) {\r\n        const folio = this.state.mapFolios.find(f => f.id === this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            const index = folio.maps.indexOf(map);\r\n            folio.maps.splice(index, 1);\r\n            this.setState({\r\n                mapFolios: this.state.mapFolios\r\n            });\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Combat screen\r\n\r\n    private createCombat() {\r\n        const party = this.state.parties.length === 1 ? this.state.parties[0] : null;\r\n        const encounter = this.state.encounters.length === 1 ? this.state.encounters[0] : null;\r\n\r\n        const setup = Factory.createCombatSetup();\r\n        setup.partyID = party ? party.id : null;\r\n        setup.encounterID = encounter ? encounter.id : null;\r\n        if (encounter) {\r\n            setup.monsterNames = Utils.getMonsterNames(encounter);\r\n        }\r\n\r\n        this.setState({\r\n            modal: {\r\n                type: 'combat-start',\r\n                combatSetup: setup\r\n            }\r\n        });\r\n    }\r\n\r\n    private startCombat() {\r\n        const combatSetup: CombatSetup = this.state.modal.combatSetup;\r\n        const party = this.state.parties.find(p => p.id === combatSetup.partyID);\r\n        const encounter = this.state.encounters.find(e => e.id === combatSetup.encounterID);\r\n        if (party && encounter) {\r\n            const partyName = party.name || 'unnamed party';\r\n            const encounterName = encounter.name || 'unnamed encounter';\r\n\r\n            const combat = Factory.createCombat();\r\n            combat.name = partyName + ' vs ' + encounterName;\r\n            combat.encounterID = encounter.id;\r\n\r\n            // Add a copy of each PC to the encounter\r\n            party.pcs.filter(pc => pc.active).forEach(pc => {\r\n                this.addPCToCombat(pc, combat);\r\n            });\r\n\r\n            encounter.slots.forEach(slot => {\r\n                const monster = this.getMonster(slot.monsterName, slot.monsterGroupName);\r\n                if (monster) {\r\n                    const groupInitRoll = Utils.dieRoll();\r\n\r\n                    for (let n = 0; n !== slot.count; ++n) {\r\n                        let displayName = null;\r\n                        if (combatSetup.monsterNames) {\r\n                            const slotNames = combatSetup.monsterNames.find(names => names.id === slot.id);\r\n                            if (slotNames) {\r\n                                displayName = slotNames.names[n];\r\n                            }\r\n                        }\r\n\r\n                        this.addMonsterToCombat(monster, combat, displayName, combatSetup.encounterInitMode, groupInitRoll);\r\n                    }\r\n                } else {\r\n                    combat.issues.push('unknown monster: ' + slot.monsterName + ' in group ' + slot.monsterGroupName);\r\n                }\r\n            });\r\n\r\n            this.sortCombatants(combat);\r\n\r\n            if (combatSetup.folioID && combatSetup.mapID) {\r\n                const folio = this.state.mapFolios.find(f => f.id === combatSetup.folioID);\r\n                if (folio) {\r\n                    const map = folio.maps.find(m => m.id === combatSetup.mapID);\r\n                    if (map) {\r\n                        combat.map = JSON.parse(JSON.stringify(map));\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.setState({\r\n                combats: ([] as Combat[]).concat(this.state.combats, [combat]),\r\n                selectedCombatID: combat.id,\r\n                modal: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private addPCToCombat(pc: PC, combat: Combat) {\r\n        const combatant = JSON.parse(JSON.stringify(pc));\r\n\r\n        combatant.current = false;\r\n        combatant.pending = true;\r\n        combatant.active = false;\r\n        combatant.defeated = false;\r\n\r\n        combatant.displayName = pc.name;\r\n        combatant.initiative = 10;\r\n        combatant.hp = null;\r\n        combatant.conditions = [];\r\n        combatant.tags = [];\r\n        combatant.altitude = 0;\r\n        combatant.aura = { size: 0, style: 'rounded', color: '#005080' };\r\n\r\n        combat.combatants.push(combatant);\r\n    }\r\n\r\n    private addMonsterToCombat(\r\n        monster: Monster,\r\n        combat: Combat, displayName: string | null = null,\r\n        initMode: 'manual' | 'individual' | 'group' = 'individual',\r\n        groupInitRoll: number = 0) {\r\n\r\n        const combatant = JSON.parse(JSON.stringify(monster));\r\n        combatant.id = Utils.guid();\r\n\r\n        switch (initMode) {\r\n            case 'group':\r\n                combatant.initiative = Utils.modifierValue(monster.abilityScores.dex) + groupInitRoll;\r\n                break;\r\n            case 'individual':\r\n                combatant.initiative = Utils.modifierValue(monster.abilityScores.dex) + Utils.dieRoll();\r\n                break;\r\n            default:\r\n                combatant.initiative = 10;\r\n                break;\r\n        }\r\n\r\n        combatant.current = false;\r\n        combatant.pending = (initMode === 'manual');\r\n        combatant.active = (initMode !== 'manual');\r\n        combatant.defeated = false;\r\n\r\n        combatant.displayName = displayName;\r\n        combatant.hp = combatant.hpMax;\r\n        combatant.conditions = [];\r\n        combatant.tags = [];\r\n        combatant.altitude = 0;\r\n        combatant.aura = { size: 0, style: 'rounded', color: '#005080' };\r\n\r\n        combat.combatants.push(combatant);\r\n    }\r\n\r\n    private openWaveModal() {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            const encounter = this.state.encounters.find(e => e.id === combat.encounterID);\r\n            if (encounter) {\r\n                const setup = Factory.createCombatSetup();\r\n                setup.encounterID = combat.encounterID;\r\n                setup.monsterNames = Utils.getMonsterNames(encounter);\r\n\r\n                this.setState({\r\n                    modal: {\r\n                        type: 'combat-wave',\r\n                        combatSetup: setup\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private addToEncounter() {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            this.setState({\r\n                modal: {\r\n                    type: 'combat-add-combatants',\r\n                    combatants: [],\r\n                    combat: combat\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private addCombatantsFromModal() {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            this.state.modal.combatants.forEach((m: Monster) => {\r\n                this.addMonsterToCombat(m, combat);\r\n            });\r\n\r\n            this.setState({\r\n                combats: this.state.combats,\r\n                modal: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private pauseCombat() {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            combat.timestamp = new Date().toLocaleString();\r\n            this.setState({\r\n                combats: this.state.combats,\r\n                selectedCombatID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private resumeCombat(combat: Combat) {\r\n        this.setState({\r\n            selectedCombatID: combat.id\r\n        });\r\n    }\r\n\r\n    private endCombat() {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            const index = this.state.combats.indexOf(combat);\r\n            this.state.combats.splice(index, 1);\r\n            this.setState({\r\n                combats: this.state.combats,\r\n                selectedCombatID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private makeCurrent(combatant: (Combatant & PC) | (Combatant & Monster) | null, newRound: boolean) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            // Handle start-of-turn conditions\r\n            combat.combatants.filter(actor => actor.conditions).forEach(actor => {\r\n                actor.conditions.forEach(c => {\r\n                    if (c.duration) {\r\n                        switch (c.duration.type) {\r\n                            case 'saves':\r\n                                // If it's my condition, and point is START, notify the user\r\n                                if (combat && combatant && (actor.id === combatant.id) && (c.duration.point === 'start')) {\r\n                                    combat.notifications.push({\r\n                                        id: Utils.guid(),\r\n                                        type: 'condition-save',\r\n                                        data: c,\r\n                                        combatant: combatant as Combatant & Monster\r\n                                    });\r\n                                }\r\n                                break;\r\n                            case 'combatant':\r\n                                // If this refers to me, and point is START, remove it\r\n                                if (combat && combatant && (c.duration.combatantID === combatant.id) && (c.duration.point === 'start')) {\r\n                                    const index = actor.conditions.indexOf(c);\r\n                                    actor.conditions.splice(index, 1);\r\n                                    // Notify the user\r\n                                    combat.notifications.push({\r\n                                        id: Utils.guid(),\r\n                                        type: 'condition-end',\r\n                                        data: c,\r\n                                        combatant: combatant as Combatant & Monster\r\n                                    });\r\n                                }\r\n                                break;\r\n                            case 'rounds':\r\n                                // If it's my condition, decrement the condition\r\n                                if (combatant && (actor.id === combatant.id)) {\r\n                                    c.duration.count -= 1;\r\n                                }\r\n                                // If it's now at 0, remove it\r\n                                if (c.duration.count === 0) {\r\n                                    const n = actor.conditions.indexOf(c);\r\n                                    actor.conditions.splice(n, 1);\r\n                                    if (combat) {\r\n                                        // Notify the user\r\n                                        combat.notifications.push({\r\n                                            id: Utils.guid(),\r\n                                            type: 'condition-end',\r\n                                            data: c,\r\n                                            combatant: combatant as Combatant & Monster\r\n                                        });\r\n                                    }\r\n                                }\r\n                                break;\r\n                            default:\r\n                                // Do nothing\r\n                                break;\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n\r\n            // Handle recharging traits\r\n            if (combatant && (combatant.type === 'monster')) {\r\n                (combatant as Monster).traits\r\n                    .filter(t => (t.uses > 0) && t.usage.toLowerCase().startsWith('recharge '))\r\n                    .forEach(t => {\r\n                        combat.notifications.push({\r\n                            id: Utils.guid(),\r\n                            type: 'trait-recharge',\r\n                            data: t,\r\n                            combatant: combatant as Combatant & Monster\r\n                        });\r\n                    });\r\n                (combatant as Monster).traits\r\n                    .filter(t => t.type === 'legendary')\r\n                    .forEach(t => {\r\n                        t.uses = 0;\r\n                    });\r\n            }\r\n\r\n            combat.combatants.forEach(c => {\r\n                c.current = false;\r\n            });\r\n            if (combatant) {\r\n                combatant.current = true;\r\n            }\r\n\r\n            if (newRound) {\r\n                combat.round += 1;\r\n            }\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private makeActive(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            combatant.pending = false;\r\n            combatant.active = true;\r\n            combatant.defeated = false;\r\n\r\n            this.sortCombatants(combat);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private makeDefeated(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        combatant.pending = false;\r\n        combatant.active = false;\r\n        combatant.defeated = true;\r\n\r\n        if (combatant.current) {\r\n            this.endTurn(combatant);\r\n        } else {\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private addWaveToCombat() {\r\n        const combatSetup: CombatSetup = this.state.modal.combatSetup;\r\n        const encounter = this.state.encounters.find(e => e.id === combatSetup.encounterID);\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combatSetup && encounter && combat) {\r\n            const wave = encounter.waves.find(w => w.id === combatSetup.waveID);\r\n            if (wave) {\r\n                wave.slots.forEach(slot => {\r\n                    const monster = this.getMonster(slot.monsterName, slot.monsterGroupName);\r\n                    if (monster) {\r\n                        const init = parseInt(Utils.modifier(monster.abilityScores.dex), 10);\r\n                        const groupRoll = Utils.dieRoll();\r\n\r\n                        for (let n = 0; n !== slot.count; ++n) {\r\n                            const singleRoll = Utils.dieRoll();\r\n\r\n                            const combatant = JSON.parse(JSON.stringify(monster));\r\n                            combatant.id = Utils.guid();\r\n\r\n                            combatant.displayName = null;\r\n                            if (combatSetup.monsterNames) {\r\n                                const slotNames = combatSetup.monsterNames.find(names => names.id === slot.id);\r\n                                if (slotNames) {\r\n                                    combatant.displayName = slotNames.names[n];\r\n                                }\r\n                            }\r\n\r\n                            switch (combatSetup.encounterInitMode) {\r\n                                case 'manual':\r\n                                    combatant.initiative = 10;\r\n                                    break;\r\n                                case 'group':\r\n                                    combatant.initiative = init + groupRoll;\r\n                                    break;\r\n                                case 'individual':\r\n                                    combatant.initiative = init + singleRoll;\r\n                                    break;\r\n                                default:\r\n                                    // Do nothing\r\n                                    break;\r\n                            }\r\n\r\n                            combatant.current = false;\r\n                            combatant.pending = (this.state.modal.combatSetup.encounterInitMode === 'manual');\r\n                            combatant.active = (this.state.modal.combatSetup.encounterInitMode !== 'manual');\r\n                            combatant.defeated = false;\r\n\r\n                            combatant.hp = combatant.hpMax;\r\n                            combatant.conditions = [];\r\n                            combatant.tags = [];\r\n                            combatant.altitude = 0;\r\n                            combatant.aura = { size: 0, style: 'rounded', color: '#005080' };\r\n\r\n                            if (combat) {\r\n                                combat.combatants.push(combatant);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (combat) {\r\n                            const issue = 'unknown monster: ' + slot.monsterName + ' in group ' + slot.monsterGroupName;\r\n                            combat.issues.push(issue);\r\n                        }\r\n                    }\r\n                });\r\n\r\n                this.sortCombatants(combat);\r\n\r\n                this.setState({\r\n                    combats: this.state.combats,\r\n                    modal: null\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeCombatant(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            const index = combat.combatants.indexOf(combatant);\r\n            combat.combatants.splice(index, 1);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private mapAdd(combatant: ((Combatant & PC) | (Combatant & Monster)), x: number, y: number) {\r\n        const item = Factory.createMapItem();\r\n        item.id = combatant.id;\r\n        item.type = combatant.type as 'pc' | 'monster';\r\n        item.x = x;\r\n        item.y = y;\r\n        let size = 1;\r\n        if (combatant.type === 'monster') {\r\n            size = Utils.miniSize((combatant as Monster).size);\r\n        }\r\n        item.height = size;\r\n        item.width = size;\r\n\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat && combat.map) {\r\n            combat.map.items.push(item);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private mapMove(combatant: (Combatant & PC) | (Combatant & Monster), dir: string) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat && combat.map) {\r\n            const item = combat.map.items.find(i => i.id === combatant.id);\r\n            if (item) {\r\n                switch (dir) {\r\n                    case 'N':\r\n                        item.y -= 1;\r\n                        break;\r\n                    case 'NE':\r\n                        item.x += 1;\r\n                        item.y -= 1;\r\n                        break;\r\n                    case 'E':\r\n                        item.x += 1;\r\n                        break;\r\n                    case 'SE':\r\n                        item.x += 1;\r\n                        item.y += 1;\r\n                        break;\r\n                    case 'S':\r\n                        item.y += 1;\r\n                        break;\r\n                    case 'SW':\r\n                        item.x -= 1;\r\n                        item.y += 1;\r\n                        break;\r\n                    case 'W':\r\n                        item.x -= 1;\r\n                        break;\r\n                    case 'NW':\r\n                        item.x -= 1;\r\n                        item.y -= 1;\r\n                        break;\r\n                    default:\r\n                        // Do nothing\r\n                        break;\r\n                }\r\n\r\n                this.setState({\r\n                    combats: this.state.combats\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private mapRemove(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat && combat.map) {\r\n            const item = combat.map.items.find(i => i.id === combatant.id);\r\n            if (item) {\r\n                const index = combat.map.items.indexOf(item);\r\n                combat.map.items.splice(index, 1);\r\n\r\n                this.setState({\r\n                    combats: this.state.combats\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private endTurn(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            // Handle end-of-turn conditions\r\n            combat.combatants.filter(actor => actor.conditions).forEach(actor => {\r\n                actor.conditions.forEach(c => {\r\n                    if (c.duration) {\r\n                        switch (c.duration.type) {\r\n                            case 'saves':\r\n                                // If it's my condition, and point is END, notify the user\r\n                                if (combat && (actor.id === combatant.id) && (c.duration.point === 'end')) {\r\n                                    const saveNotification = Factory.createNotification();\r\n                                    saveNotification.type = 'condition-save';\r\n                                    saveNotification.data = c;\r\n                                    saveNotification.combatant = combatant as Combatant & Monster;\r\n                                    combat.notifications.push(saveNotification);\r\n                                }\r\n                                break;\r\n                            case 'combatant':\r\n                                // If this refers to me, and point is END, remove it\r\n                                if (combat && (c.duration.combatantID === combatant.id) && (c.duration.point === 'end')) {\r\n                                    const n = actor.conditions.indexOf(c);\r\n                                    actor.conditions.splice(n, 1);\r\n                                    // Notify the user\r\n                                    const endNotification = Factory.createNotification();\r\n                                    endNotification.type = 'condition-end';\r\n                                    endNotification.data = c;\r\n                                    endNotification.combatant = combatant as Combatant & Monster;\r\n                                    combat.notifications.push(endNotification);\r\n                                }\r\n                                break;\r\n                            case 'rounds':\r\n                                // We check this at the beginning of each turn, not at the end\r\n                                break;\r\n                            default:\r\n                                // Do nothing\r\n                                break;\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n\r\n            const active = combat.combatants.filter(c => {\r\n                return c.current || (!c.pending && c.active && !c.defeated);\r\n            });\r\n            if (active.length === 0) {\r\n                // There's no-one left in the fight\r\n                this.makeCurrent(null, false);\r\n            } else if ((active.length === 1) && (active[0].defeated)) {\r\n                // The only person in the fight is me, and I'm defeated\r\n                this.makeCurrent(null, false);\r\n            } else {\r\n                let index = active.indexOf(combatant) + 1;\r\n                let newRound = false;\r\n                if (index >= active.length) {\r\n                    index = 0;\r\n                    newRound = true;\r\n                }\r\n                this.makeCurrent(active[index], newRound);\r\n            }\r\n        }\r\n    }\r\n\r\n    private changeHP(combatant: Combatant & Monster, hp: number, temp: number) {\r\n        combatant.hp = hp;\r\n        combatant.hpTemp = temp;\r\n\r\n        this.setState({\r\n            combats: this.state.combats\r\n        });\r\n    }\r\n\r\n    private addCondition(combatant: Combatant & Monster) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            const condition = Factory.createCondition();\r\n            condition.name = 'blinded';\r\n\r\n            this.setState({\r\n                modal: {\r\n                    type: 'condition-add',\r\n                    condition: condition,\r\n                    combatant: combatant,\r\n                    combat: combat\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private addConditionFromModal() {\r\n        this.state.modal.combatant.conditions.push(this.state.modal.condition);\r\n\r\n        this.setState({\r\n            combats: this.state.combats,\r\n            modal: null\r\n        });\r\n    }\r\n\r\n    private editCondition(combatant: Combatant & Monster, condition: Condition) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            this.setState({\r\n                modal: {\r\n                    type: 'condition-edit',\r\n                    condition: condition,\r\n                    combatant: combatant,\r\n                    combat: combat\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private editConditionFromModal() {\r\n        const conditions: Condition[] = this.state.modal.combatant.conditions;\r\n        const original = conditions.find(c => c.id === this.state.modal.condition.id);\r\n        if (original) {\r\n            const index = conditions.indexOf(original);\r\n            // eslint-disable-next-line\r\n            conditions[index] = this.state.modal.condition;\r\n\r\n            this.setState({\r\n                combats: this.state.combats,\r\n                modal: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private removeCondition(combatant: Combatant & Monster, conditionID: string) {\r\n        const condition = combatant.conditions.find(c => c.id === conditionID);\r\n        if (condition) {\r\n            const index = combatant.conditions.indexOf(condition);\r\n            combatant.conditions.splice(index, 1);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private sortCombatants(combat: Combat) {\r\n        combat.combatants.sort((a, b) => {\r\n            // First sort by initiative, descending\r\n            if (a.initiative && b.initiative && (a.initiative < b.initiative)) { return 1; }\r\n            if (a.initiative && b.initiative && (a.initiative > b.initiative)) { return -1; }\r\n            // Then sort by name, ascending\r\n            if (a.name < b.name) { return -1; }\r\n            if (a.name > b.name) { return 1; }\r\n            return 0;\r\n        });\r\n    }\r\n\r\n    private closeNotification(notification: Notification, removeCondition: boolean) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            const index = combat.notifications.indexOf(notification);\r\n            combat.notifications.splice(index, 1);\r\n\r\n            if (removeCondition && notification.combatant && notification.data) {\r\n                const conditionIndex = notification.combatant.conditions.indexOf(notification.data as Condition);\r\n                notification.combatant.conditions.splice(conditionIndex, 1);\r\n            }\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private toggleTag(combatant: Combatant, tag: string) {\r\n        if (combatant.tags.includes(tag)) {\r\n            combatant.tags = combatant.tags.filter(t => t !== tag);\r\n        } else {\r\n            combatant.tags.push(tag);\r\n        }\r\n\r\n        this.setState({\r\n            combats: this.state.combats\r\n        });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    private setView(view: string) {\r\n        this.setState({\r\n            view: view\r\n        });\r\n    }\r\n\r\n    private openAbout() {\r\n        this.setState({\r\n            modal: {\r\n                type: 'about'\r\n            }\r\n        });\r\n    }\r\n\r\n    private closeModal() {\r\n        this.setState({\r\n            modal: null\r\n        });\r\n    }\r\n\r\n    private selectParty(party: Party | null) {\r\n        this.setState({\r\n            selectedPartyID: party ? party.id : null\r\n        });\r\n    }\r\n\r\n    private selectMonsterGroup(group: MonsterGroup | null) {\r\n        this.setState({\r\n            selectedMonsterGroupID: group ? group.id : null\r\n        });\r\n    }\r\n\r\n    private selectEncounter(encounter: Encounter | null) {\r\n        this.setState({\r\n            selectedEncounterID: encounter ? encounter.id : null\r\n        });\r\n    }\r\n\r\n    private selectMapFolio(mapFolio: MapFolio | null) {\r\n        this.setState({\r\n            selectedMapFolioID: mapFolio ? mapFolio.id : null\r\n        });\r\n    }\r\n\r\n    private resetAll() {\r\n        this.setState({\r\n            parties: [],\r\n            selectedPartyID: null,\r\n            library: [],\r\n            selectedMonsterGroupID: null,\r\n            encounters: [],\r\n            selectedEncounterID: null,\r\n            mapFolios: [],\r\n            selectedMapFolioID: null,\r\n            combats: [],\r\n            selectedCombatID: null\r\n        });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    private getMonster(monsterName: string, groupName: string) {\r\n        const group = this.state.library.find(p => p.name === groupName);\r\n        if (group) {\r\n            return group.monsters.find(monster => monster.name === monsterName);\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    private changeValue(combatant: any, type: string, value: any) {\r\n        switch (type) {\r\n            case 'hp':\r\n                value = Math.min(value, combatant.hpMax);\r\n                value = Math.max(value, 0);\r\n                break;\r\n            case 'hpTemp':\r\n                value = Math.max(value, 0);\r\n                break;\r\n            case 'level':\r\n                value = Math.max(value, 1);\r\n                value = (combatant.player !== undefined) ? Math.min(value, 20) : Math.min(value, 6);\r\n                break;\r\n            case 'count':\r\n                value = Math.max(value, 1);\r\n                break;\r\n            case 'hitDice':\r\n                value = Math.max(value, 1);\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        const tokens = type.split('.');\r\n        let obj = combatant;\r\n        for (let n = 0; n !== tokens.length; ++n) {\r\n            const token = tokens[n];\r\n            if (n === tokens.length - 1) {\r\n                obj[token] = value;\r\n            } else {\r\n                obj = obj[token];\r\n            }\r\n        }\r\n\r\n        Utils.sort(this.state.parties);\r\n        Utils.sort(this.state.library);\r\n        Utils.sort(this.state.encounters);\r\n\r\n        if (type === 'initiative') {\r\n            if (!(combatant as Combatant).pending) {\r\n                const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n                this.sortCombatants(combat as Combat);\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            parties: this.state.parties,\r\n            library: this.state.library,\r\n            encounters: this.state.encounters,\r\n            combats: this.state.combats,\r\n            selectedPartyID: this.state.selectedPartyID,\r\n            selectedMonsterGroupID: this.state.selectedMonsterGroupID,\r\n            selectedEncounterID: this.state.selectedEncounterID,\r\n            selectedCombatID: this.state.selectedCombatID,\r\n            modal: this.state.modal\r\n        });\r\n    }\r\n\r\n    private nudgeValue(combatant: any, type: string, delta: number) {\r\n        const tokens = type.split('.');\r\n        let obj = combatant;\r\n        for (let n = 0; n !== tokens.length; ++n) {\r\n            const token = tokens[n];\r\n            if (n === tokens.length - 1) {\r\n                let value = null;\r\n                value = (token === 'challenge') ? Utils.nudgeChallenge(obj.challenge, delta) : obj[token] + delta;\r\n                this.changeValue(combatant, type, value);\r\n            } else {\r\n                obj = obj[token];\r\n            }\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    private getActions() {\r\n        switch (this.state.view) {\r\n            case 'parties':\r\n            case 'encounter':\r\n            case 'maps':\r\n                return (\r\n                    <div className='actions'>\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='search'\r\n                                value={this.state.filter}\r\n                                onChange={event => this.changeValue(this.state, 'filter', event.target.value)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                );\r\n            case 'library':\r\n                return (\r\n                    <div className='actions'>\r\n                        <div className='section'>\r\n                            <button onClick={() => this.openDemographics()}>demographics</button>\r\n                        </div>\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='search'\r\n                                value={this.state.filter}\r\n                                onChange={event => this.changeValue(this.state, 'filter', event.target.value)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                );\r\n            case 'combat':\r\n                const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n                if (combat) {\r\n                    const encounter = this.state.encounters.find(e => e.id === combat.encounterID);\r\n                    if (encounter) {\r\n                        let xp = 0;\r\n                        combat.combatants.filter(c => c.type === 'monster')\r\n                            .forEach(combatant => {\r\n                                xp += Utils.experience((combatant as Combatant & Monster).challenge);\r\n                            });\r\n                        return (\r\n                            <div className='actions'>\r\n                                <div className='section'>\r\n                                    <div className='text'>round: {combat.round}</div>\r\n                                </div>\r\n                                <div className='section'>\r\n                                    <div className='text'>xp: {xp}</div>\r\n                                </div>\r\n                                <div className='section' style={{ display: encounter.waves.length === 0 ? 'none' : ''}}>\r\n                                    <button onClick={() => this.openWaveModal()}>add wave</button>\r\n                                </div>\r\n                                <div className='section'>\r\n                                    <button onClick={() => this.addToEncounter()}>add combatants</button>\r\n                                </div>\r\n                                <div className='section'>\r\n                                    <button onClick={() => this.pauseCombat()}>pause encounter</button>\r\n                                </div>\r\n                                <div className='section'>\r\n                                    <button onClick={() => this.endCombat()}>end encounter</button>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    }\r\n                } else {\r\n                    return (\r\n                        <div className='actions'>\r\n                            <div className='section'>\r\n                                <input\r\n                                    type='text'\r\n                                    placeholder='search'\r\n                                    value={this.state.filter}\r\n                                    onChange={event => this.changeValue(this.state, 'filter', event.target.value)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private getContent() {\r\n        switch (this.state.view) {\r\n            case 'home':\r\n                return (\r\n                    <HomeScreen\r\n                        library={this.state.library}\r\n                        addOpenGameContent={() => this.addOpenGameContent()}\r\n                    />\r\n                );\r\n            case 'parties':\r\n                return (\r\n                    <PartiesScreen\r\n                        parties={this.state.parties}\r\n                        selection={this.state.parties.find(p => p.id === this.state.selectedPartyID) || null}\r\n                        filter={this.state.filter}\r\n                        selectParty={party => this.selectParty(party)}\r\n                        addParty={() => this.addParty()}\r\n                        removeParty={() => this.removeParty()}\r\n                        addPC={() => this.addPC()}\r\n                        editPC={pc => this.editPC(pc)}\r\n                        removePC={pc => this.removePC(pc)}\r\n                        sortPCs={() => this.sortPCs()}\r\n                        changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                        nudgeValue={(combatant, type, delta) => this.nudgeValue(combatant, type, delta)}\r\n                    />\r\n                );\r\n            case 'library':\r\n                return (\r\n                    <MonsterLibraryScreen\r\n                        library={this.state.library}\r\n                        selection={this.state.library.find(g => g.id === this.state.selectedMonsterGroupID) || null}\r\n                        filter={this.state.filter}\r\n                        selectMonsterGroup={group => this.selectMonsterGroup(group)}\r\n                        addMonsterGroup={() => this.addMonsterGroup()}\r\n                        removeMonsterGroup={() => this.removeMonsterGroup()}\r\n                        addMonster={() => this.addMonster()}\r\n                        generateMonster={() => this.generateMonster()}\r\n                        removeMonster={monster => this.removeMonster(monster)}\r\n                        sortMonsters={() => this.sortMonsters()}\r\n                        changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                        nudgeValue={(combatant, type, delta) => this.nudgeValue(combatant, type, delta)}\r\n                        editMonster={combatant => this.editMonster(combatant)}\r\n                        cloneMonster={(combatant, name) => this.cloneMonster(combatant, name)}\r\n                        moveToGroup={(combatant, groupID) => this.moveToGroup(combatant, groupID)}\r\n                    />\r\n                );\r\n            case 'encounter':\r\n                return (\r\n                    <EncounterBuilderScreen\r\n                        encounters={this.state.encounters}\r\n                        selection={this.state.encounters.find(e => e.id === this.state.selectedEncounterID) || null}\r\n                        filter={this.state.filter}\r\n                        parties={this.state.parties}\r\n                        library={this.state.library}\r\n                        selectEncounter={encounter => this.selectEncounter(encounter)}\r\n                        addEncounter={() => this.addEncounter()}\r\n                        removeEncounter={() => this.removeEncounter()}\r\n                        addWave={() => this.addWaveToEncounter()}\r\n                        removeWave={wave => this.removeWave(wave)}\r\n                        getMonster={(monsterName, groupName) => this.getMonster(monsterName, groupName) || null}\r\n                        addEncounterSlot={(monster, waveID) => this.addEncounterSlot(monster, waveID)}\r\n                        removeEncounterSlot={(slot, waveID) => this.removeEncounterSlot(slot, waveID)}\r\n                        nudgeValue={(slot, type, delta) => this.nudgeValue(slot, type, delta)}\r\n                        changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                    />\r\n                );\r\n            case 'maps':\r\n                return (\r\n                    <MapFoliosScreen\r\n                        mapFolios={this.state.mapFolios}\r\n                        selection={this.state.mapFolios.find(f => f.id === this.state.selectedMapFolioID) || null}\r\n                        filter={this.state.filter}\r\n                        selectMapFolio={folio => this.selectMapFolio(folio)}\r\n                        addMapFolio={() => this.addMapFolio()}\r\n                        removeMapFolio={() => this.removeMapFolio()}\r\n                        addMap={() => this.addMap()}\r\n                        editMap={map => this.editMap(map)}\r\n                        removeMap={map => this.removeMap(map)}\r\n                        changeValue={(source, type, value) => this.changeValue(source, type, value)}\r\n                    />\r\n                );\r\n            case 'combat':\r\n                return (\r\n                    <CombatManagerScreen\r\n                        combats={this.state.combats}\r\n                        combat={this.state.combats.find(c => c.id === this.state.selectedCombatID) || null}\r\n                        filter={this.state.filter}\r\n                        createCombat={() => this.createCombat()}\r\n                        resumeEncounter={pausedCombat => this.resumeCombat(pausedCombat)}\r\n                        nudgeValue={(combatant, type, delta) => this.nudgeValue(combatant, type, delta)}\r\n                        changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                        makeCurrent={(combatant) => this.makeCurrent(combatant, false)}\r\n                        makeActive={(combatant) => this.makeActive(combatant)}\r\n                        makeDefeated={(combatant) => this.makeDefeated(combatant)}\r\n                        removeCombatant={(combatant) => this.removeCombatant(combatant)}\r\n                        addCondition={(combatant) => this.addCondition(combatant)}\r\n                        editCondition={(combatant, condition) => this.editCondition(combatant, condition)}\r\n                        removeCondition={(combatant, conditionID) => this.removeCondition(combatant, conditionID)}\r\n                        mapAdd={(combatant, x, y) => this.mapAdd(combatant, x, y)}\r\n                        mapMove={(combatant, dir) => this.mapMove(combatant, dir)}\r\n                        mapRemove={combatant => this.mapRemove(combatant)}\r\n                        endTurn={(combatant) => this.endTurn(combatant)}\r\n                        changeHP={(combatant, hp, temp) => this.changeHP(combatant, hp, temp)}\r\n                        close={(notification, removeCondition) => this.closeNotification(notification, removeCondition)}\r\n                        toggleTag={(combatant, tag) => this.toggleTag(combatant, tag)}\r\n                    />\r\n                );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private getModal() {\r\n        if (this.state.modal) {\r\n            let modalSidebar = false;\r\n            let modalTitle = null;\r\n            let modalContent = null;\r\n            let modalAllowScroll = true;\r\n\r\n            const modalButtons = {\r\n                left: [] as JSX.Element[],\r\n                right: [\r\n                    <button key='close' onClick={() => this.closeModal()}>close</button>\r\n                ] as JSX.Element[]\r\n            };\r\n\r\n            switch (this.state.modal.type) {\r\n                case 'about':\r\n                    modalSidebar = true;\r\n                    modalContent = (\r\n                        <AboutModal\r\n                            resetAll={() => this.resetAll()}\r\n                            changeValue={(source, type, value) => this.changeValue(source, type, value)}\r\n                        />\r\n                    );\r\n                    modalButtons.right = [];\r\n                    break;\r\n                case 'demographics':\r\n                    modalSidebar = true;\r\n                    modalContent = (\r\n                        <DemographicsModal\r\n                            library={this.state.library}\r\n                        />\r\n                    );\r\n                    modalButtons.right = [];\r\n                    break;\r\n                case 'pc':\r\n                        modalTitle = 'pc editor';\r\n                        modalContent = (\r\n                            <PCEditorModal\r\n                                pc={this.state.modal.pc}\r\n                            />\r\n                        );\r\n                        modalButtons.right = [\r\n                            <button key='save' onClick={() => this.savePC()}>save</button>,\r\n                            <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                        ];\r\n                        break;\r\n                case 'monster':\r\n                    modalTitle = 'monster editor';\r\n                    modalContent = (\r\n                        <MonsterEditorModal\r\n                            monster={this.state.modal.monster}\r\n                            library={this.state.library}\r\n                            showSidebar={this.state.modal.showSidebar}\r\n                        />\r\n                    );\r\n                    modalAllowScroll = false;\r\n                    modalButtons.left = [\r\n                        (\r\n                            <Checkbox\r\n                                key='sidebar'\r\n                                label='advanced tools'\r\n                                checked={this.state.modal.showSidebar}\r\n                                changeValue={() => this.toggleShowSidebar()}\r\n                            />\r\n                        )\r\n                    ];\r\n                    modalButtons.right = [\r\n                        <button key='save' onClick={() => this.saveMonster()}>save</button>,\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                case 'random-monster':\r\n                    modalTitle = 'random monster generator';\r\n                    modalContent = (\r\n                        <RandomMonsterModal\r\n                            monster={this.state.modal.monster}\r\n                            library={this.state.library}\r\n                        />\r\n                    );\r\n                    modalAllowScroll = false;\r\n                    modalButtons.right = [\r\n                        <button key='save' onClick={() => this.saveMonster()}>save</button>,\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                case 'map':\r\n                    modalTitle = 'map editor';\r\n                    modalContent = (\r\n                        <MapEditorModal\r\n                            map={this.state.modal.map}\r\n                        />\r\n                    );\r\n                    modalAllowScroll = false;\r\n                    modalButtons.right = [\r\n                        <button key='save' onClick={() => this.saveMap()}>save</button>,\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                case 'combat-start':\r\n                    modalTitle = 'start a new encounter';\r\n                    modalContent = (\r\n                        <CombatStartModal\r\n                            combatSetup={this.state.modal.combatSetup}\r\n                            parties={this.state.parties}\r\n                            encounters={this.state.encounters}\r\n                            mapFolios={this.state.mapFolios}\r\n                            getMonster={(monsterName, groupName) => this.getMonster(monsterName, groupName) || null}\r\n                            notify={() => this.setState({modal: this.state.modal})}\r\n                        />\r\n                    );\r\n                    modalAllowScroll = false;\r\n                    modalButtons.right = [\r\n                        (\r\n                            <button\r\n                                key='start encounter'\r\n                                className={this.state.modal.combatSetup.partyID && this.state.modal.combatSetup.encounterID ? '' : 'disabled'}\r\n                                onClick={() => this.startCombat()}\r\n                            >\r\n                                start encounter\r\n                            </button>\r\n                        ),\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                case 'combat-wave':\r\n                    modalTitle = 'encounter waves';\r\n                    modalContent = (\r\n                        <CombatStartModal\r\n                            combatSetup={this.state.modal.combatSetup}\r\n                            encounters={this.state.encounters}\r\n                            getMonster={(monsterName, groupName) => this.getMonster(monsterName, groupName) || null}\r\n                            notify={() => this.setState({modal: this.state.modal})}\r\n                        />\r\n                    );\r\n                    modalAllowScroll = false;\r\n                    modalButtons.right = [\r\n                        (\r\n                            <button\r\n                                key='add wave'\r\n                                className={this.state.modal.combatSetup.waveID !== null ? '' : 'disabled'}\r\n                                onClick={() => this.addWaveToCombat()}\r\n                            >\r\n                                add wave\r\n                            </button>\r\n                        ),\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                case 'combat-add-combatants':\r\n                        modalTitle = 'add combatants';\r\n                        modalContent = (\r\n                            <AddCombatantsModal\r\n                                combatants={this.state.modal.combatants}\r\n                                library={this.state.library}\r\n                            />\r\n                        );\r\n                        modalAllowScroll = false;\r\n                        modalButtons.right = [\r\n                            (\r\n                                <button\r\n                                    key='add combatants'\r\n                                    onClick={() => this.addCombatantsFromModal()}\r\n                                >\r\n                                    add combatants\r\n                                </button>\r\n                            ),\r\n                            <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                        ];\r\n                        break;\r\n                case 'condition-add':\r\n                    modalTitle = 'add a condition';\r\n                    modalContent = (\r\n                        <ConditionModal\r\n                            condition={this.state.modal.condition}\r\n                            combatant={this.state.modal.combatant}\r\n                            combat={this.state.modal.combat}\r\n                        />\r\n                    );\r\n                    modalAllowScroll = false;\r\n                    modalButtons.right = [\r\n                        <button key='add' onClick={() => this.addConditionFromModal()}>add</button>,\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                case 'condition-edit':\r\n                    modalTitle = 'edit condition';\r\n                    modalContent = (\r\n                        <ConditionModal\r\n                            condition={this.state.modal.condition}\r\n                            combatant={this.state.modal.combatant}\r\n                            combat={this.state.modal.combat}\r\n                        />\r\n                    );\r\n                    modalButtons.right = [\r\n                        <button key='save' onClick={() => this.editConditionFromModal()}>save</button>,\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                default:\r\n                    // Do nothing\r\n                    break;\r\n            }\r\n\r\n            return (\r\n                <div className='overlay' onClick={() => modalSidebar ? this.closeModal() : null}>\r\n                    <div className={modalSidebar ? 'modal sidebar' : 'modal'} onClick={e => e.stopPropagation()}>\r\n                        <div className='modal-header'>\r\n                            <div className='title'>{modalTitle}</div>\r\n                            {modalSidebar ? <img className='image' src={close} alt='close' onClick={() => this.closeModal()} /> : null}\r\n                        </div>\r\n                        <div className={modalAllowScroll ? 'modal-content scrollable' : 'modal-content'}>\r\n                            {modalContent}\r\n                        </div>\r\n                        <div className='modal-footer'>\r\n                            <div className='left'>{modalButtons.left}</div>\r\n                            <div className='right'>{modalButtons.right}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const content = this.getContent();\r\n            const actions = this.getActions();\r\n            const modal = this.getModal();\r\n\r\n            return (\r\n                <div className='dojo'>\r\n                    <Titlebar\r\n                        actions={actions}\r\n                        blur={modal !== null}\r\n                        openHome={() => this.setView('home')}\r\n                        openAbout={() => this.openAbout()}\r\n                    />\r\n                    <div className={(modal === null) ? 'page-content' : 'page-content blur'}>\r\n                        {content}\r\n                    </div>\r\n                    <Navbar\r\n                        view={this.state.view}\r\n                        parties={this.state.parties}\r\n                        library={this.state.library}\r\n                        encounters={this.state.encounters}\r\n                        blur={modal !== null}\r\n                        setView={view => this.setView(view)}\r\n                    />\r\n                    {modal}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './style/css/foundation.css';\r\nimport './style/scss/app.scss';\r\nimport './style/scss/controls.scss';\r\n\r\nimport Dojo from './components/dojo';\r\n\r\nReactDOM.render(<Dojo />, document.getElementById('root'));\r\n"],"sourceRoot":""}