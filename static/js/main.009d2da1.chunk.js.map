{"version":3,"sources":["resources/images/down-arrow-black.svg","resources/images/down-arrow.svg","resources/images/close-black.svg","resources/images/warning.svg","resources/images/ellipsis.svg","resources/images/minus.svg","resources/images/plus.svg","resources/images/checked.svg","resources/images/unchecked.svg","resources/images/settings.svg","utils/utils.ts","utils/factory.ts","components/cards/info-card.tsx","components/cards/information/combat-manager-card.tsx","components/controls/confirm-button.tsx","components/controls/dropdown.tsx","components/controls/expander.tsx","components/controls/radial.tsx","components/controls/spin.tsx","components/panels/ability-score-panel.tsx","components/panels/conditions-panel.tsx","components/panels/traits-panel.tsx","components/cards/monster-card.tsx","components/cards/pc-card.tsx","components/panels/hit-point-gauge.tsx","components/panels/map-panel.tsx","components/list-items/combat-list-item.tsx","components/panels/card-group.tsx","components/screens/combat-manager-screen.tsx","components/cards/information/dm-screen-card.tsx","components/dm-modules/actions-module.tsx","components/dm-modules/conditions-module.tsx","utils/text-generation.ts","components/controls/checkbox.tsx","components/controls/selector.tsx","components/dm-modules/language-module.tsx","components/dm-modules/skills-module.tsx","components/list-items/dm-module-list-item.tsx","components/screens/dm-screen.tsx","components/panels/difficulty-chart-panel.tsx","components/cards/encounter-card.tsx","components/cards/error-card.tsx","models/monster-group.ts","components/cards/filter-card.tsx","components/cards/information/encounter-builder-card.tsx","components/cards/wave-card.tsx","components/list-items/encounter-list-item.tsx","components/screens/encounter-builder-screen.tsx","components/screens/home-screen.tsx","components/cards/information/map-folios-card.tsx","components/cards/map-card.tsx","components/cards/map-folio-card.tsx","components/list-items/map-folio-list-item.tsx","components/screens/map-folios-screen.tsx","components/cards/information/monster-library-card.tsx","components/cards/monster-group-card.tsx","components/list-items/monster-group-list-item.tsx","components/screens/monster-library-screen.tsx","components/cards/information/parties-card.tsx","components/cards/party-card.tsx","components/list-items/party-list-item.tsx","components/screens/parties-screen.tsx","components/modals/about-modal.tsx","components/modals/combat-start-modal.tsx","models/condition.ts","components/controls/radio-group.tsx","components/modals/condition-modal.tsx","components/modals/demographics-modal.tsx","models/map-folio.ts","components/cards/map-tile-card.tsx","components/modals/map-editor-modal.tsx","components/modals/monster-editor-modal.tsx","components/panels/navbar.tsx","components/panels/titlebar.tsx","components/dojo.tsx","index.js"],"names":["module","exports","__webpack_require__","p","Utils","monster","library","group","this","monsterIdToGroup","id","grp","find","g","monsters","includes","filter","text","result","toLowerCase","split","forEach","token","indexOf","s4","Math","floor","random","toString","substring","collection","sort","a","b","aName","name","bName","value","count","aValue","bValue","score","mod","modifierValue","str","size","cr","parseInt","push","ac","hpMin","hpMax","attack","dmgMin","dmgMax","save","level","difficulty","type","delta","condition","combat","duration","saveDuration","saveType","toUpperCase","saves","saveDC","combatantDuration","point","c","combatants","cmb","combatantID","displayName","roundsDuration","rounds","encounter","monsterNames","slots","slot","names","monsterName","n","Factory","guid","pcs","active","player","race","classes","languages","passiveInsight","passiveInvestigation","passivePerception","initiative","url","category","tag","alignment","challenge","abilityScores","dex","con","int","wis","cha","hpTemp","hitDice","damage","resist","vulnerable","immune","savingThrows","speed","skills","senses","equipment","traits","conditionImmunities","usage","uses","waves","monsterGroupName","maps","items","x","y","width","height","terrain","partyID","encounterID","waveID","folioID","mapID","encounterInitMode","map","round","notifications","issues","timestamp","data","combatant","InfoCard","heading","props","getHeading","content","getContent","react_default","createElement","className","e","console","error","React","Component","defaultProps","CombatManagerCard","info_card_InfoCard","ConfirmButton","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","pressed","setState","toggle","callback","_this2","src","warning","alt","details","onClick","perform","disabled","ex","Dropdown","open","stopPropagation","optionID","select","options","length","selectedText","style","selectedID","option","o","placeholder","key","title","ellipsis","dropdown_DropdownOption","selected","toggleOpen","DropdownOption","_this3","click","Expander","expanded","arrow","Radial","dir","dir2","arguments","undefined","direction","showOut","showIn","showDiag","display","transform","padding","Spin","nudgeValue","preventDefault","source","minusBtns","plusBtns","factors","factor","onTouchEnd","touchEnd","reverse","minus","plus","infoWidth","label","AbilityScorePanel","showAbilityScores","edit","spin_Spin","toggleAbilityScores","modifier","ConditionsPanel","conditions","conditions_panel_ConditionPanel","nudgeConditionValue","editCondition","removeCondition","conditionID","addCondition","ConditionPanel","conditionDurationText","description","conditionText","expander_Expander","showdown","Showdown","Converter","TraitsPanel","actions","legendaryActions","lairActions","regionalEffects","item","traits_panel_TraitPanel","trait","mode","changeValue","action","removeTrait","copyTrait","addTrait","TraitPanel","maxUses","traitType","used","startsWith","found","match","markdown","dangerouslySetInnerHTML","__html","makeHtml","onChange","event","target","confirm_button_ConfirmButton","MonsterCard","showDetails","cloneName","damageOrHealing","max","hp","min","changeHP","temp","val","sizeAndType","align","wave","_this4","some","s","die","hitDieType","conMod","conModStr","_this5","editMonster","setCloneName","cloneMonster","groupOptions","dropdown_Dropdown","moveToGroup","removeMonster","removeEncounterSlot","canAdd","monsterIsInWave","addEncounterSlot","radial_Radial","mapMove","mapRemove","mapAdd","pending","defeated","removeCombatant","current","endTurn","makeDefeated","makeCurrent","makeActive","stats","slotSection","getHP","ability_score_panel_AbilityScorePanel","traits_panel_TraitsPanel","nudgeDamage","heal","setDamage","field","conditions_panel_ConditionsPanel","imageStyle","toggleDetails","PCCard","removePC","desc","commonStatBlock","href","rel","HitPointGauge","hpCurrent","hpBloodied","hpWidth","hpTempBar","hpTempWidth","MapPanel","border","dimensions","i","minX","maxX","minY","maxY","mapDimensions","sideLength","getSideLength","left","top","getMapDimensions","grid","gridStyle","getStyle","map_panel_GridSquare","setSelectedItemID","onDoubleClick","posX","posY","addMapTile","tiles","tileStyle","map_panel_MapTile","tile","selectable","selectedItemID","thumbnail","tokens","tokenStyle","map_panel_MapToken","simple","mt","dragOverlay","showOverlay","yOver","xOver","overlayStyle","overlay","gridSquareClicked","GridSquare","doubleClick","MapTile","MapToken","initials","hpGauge","altitudeBadge","conditionsBadge","hit_point_gauge_HitPointGauge","altitude","CombatListItem","map_panel_MapPanel","setSelection","CardGroup","showCards","hidden","closeBtn","showClose","close","showToggle","toggleCards","cards","CombatManagerScreen","selectedTokenID","addingToMapID","pc_card_PCCard","setAddingToMapID","monster_card_MonsterCard","createCard","combat_manager_screen_PendingCombatantRow","setSelectedTokenID","combat_manager_screen_PCRow","combat_manager_screen_MonsterRow","showHelp","pendingHelp","concat","activeHelp","notificationSection","combat_manager_screen_NotificationPanel","notification","mapSection","addCombatantToMap","selectedCombatant","card_group_CardGroup","help","combat_manager_card_CombatManagerCard","combats","combat_list_item_CombatListItem","resumeEncounter","createCombat","NotificationPanel","success","PendingCombatantRow","_this6","getInformationText","PCRow","_this7","notes","MonsterRow","_this8","gauge","DMScreenCard","ActionsModule","fetch","response","fetchData","ConditionsModule","TextGenerator","sources","model","line","addLineToModel","String","fromCharCode","_loop","index","prev","substr","char","freq","requiredResults","lines","failures","extractLine","_loop2","v","candidates","repeat","_ret","Checkbox","checked","unchecked","Selector","tabs","itemsPerRow","rowCount","ceil","rowContents","rowIndex","selector_SelectorOption","rowSections","row","SelectorOption","LanguageModule","output","language","presetName","preset","getPresets","lang","addLanguage","keys","initModel","generate","presetOptions","selectedPreset","join","getLanguages","checkbox_Checkbox","removeLanguage","allowGenerate","selector_Selector","usePreset","SkillsModule","DMModuleListItem","DMScreen","selectedModuleID","skills_module_SkillsModule","conditions_module_ConditionsModule","actions_module_ActionsModule","language_module_LanguageModule","dm_screen_card_DMScreenCard","modules","getModules","moduleListItems","m","dm_module_list_item_DMModuleListItem","selectModule","DifficultyChartPanel","monsterCount","monsterXp","getMonster","experience","xpThresholds","diffSection","adjustedXp","experienceFactor","party","xpEasy","xpMedium","xpHard","xpDeadly","pc","pcExperience","adjustedDifficulty","small","getLeft","xp","getRight","right","EncounterCard","parties","partyOptions","difficultySection","selectParty","difficulty_chart_panel_DifficultyChartPanel","selection","addWave","removeEncounter","ErrorCard","SIZE_TYPES","CATEGORY_TYPES","TRAIT_TYPES","FilterCard","showAll","sizeOptions","catOptions","cat","resetFilter","summary","challengeMin","challengeMax","toggleAll","EncounterBuilderCard","encounters","WaveCard","removeWave","EncounterListItem","EncounterBuilderScreen","getMonsterGroup","nudgeChallenge","changeFilterValue","error_card_ErrorCard","libraryCards","filter_card_FilterCard","nudgeFilterValue","matchMonster","encounter_builder_card_EncounterBuilderCard","encounterName","encounter_list_item_EncounterListItem","selectEncounter","encounterCards","encounter_card_EncounterCard","getMonsterCards","card","w","waveCards","wave_card_WaveCard","addEncounter","getLibrarySection","HomeScreen","addOpenGameContent","MapFoliosCard","mapFolios","MapCard","editMap","removeMap","MapFolioCard","addMap","removeMapFolio","MapFolioListItem","mapFolio","MapFoliosScreen","map_folios_card_MapFoliosCard","folios","map_folio_list_item_MapFolioListItem","f","selectMapFolio","folio","folioCards","map_folio_card_MapFolioCard","map_card_MapCard","addMapFolio","MonsterLibraryCard","MonsterGroupCard","addMonster","sortMonsters","removeMonsterGroup","MonsterGroupListItem","matchGroup","MonsterLibraryScreen","monster_library_card_MonsterLibraryCard","listItems","showMonsterGroup","monster_group_list_item_MonsterGroupListItem","selectMonsterGroup","monster_group_card_MonsterGroupCard","groupID","addMonsterGroup","PartiesCard","PartyCard","activePCs","reduce","array","localeCompare","insightSummary","investigationSummary","perceptionSummary","insight","invest","percep","addPC","sortPCs","removeParty","PartyListItem","PartiesScreen","parties_card_PartiesCard","party_list_item_PartyListItem","activeCards","inactiveCards","party_card_PartyCard","activePC","inactivePC","addParty","AboutModal","pkg","version","resetAll","CombatStartModal","combatSetup","notify","enc","getMonsterNames","slotID","partyContent","selectedParty","pcSections","setParty","encounterOptions","encounterContent","selectedEncounter","monsterSections","waveMonsters","setEncounter","folioOptions","selectMapSection","thumbnailSection","mapOptions","setMapID","setFolioID","waveOptions","waveContent","selectedWave","setWave","_this9","_this10","slotsContainer","slotNames","inputs","combat_start_modal_MonsterName","changeName","setEncounterInitMode","leftSection","rightSection","getPartySection","getEncounterSection","getMapSection","getDifficultySection","getMonsterSection","getWaveSection","margin","MonsterName","_this11","CONDITION_TYPES","RadioGroup","radio_group_RadioGroupItem","itemID","RadioGroupItem","ConditionModal","conditionName","durationType","createConditionDurationSaves","createConditionDurationCombatant","createConditionDurationRounds","object","controls","saveOptions","pointOptions","combatantOptions","durations","radio_group_RadioGroup","setCondition","setDuration","DemographicsModal","chart","demographics","allMonsters","buckets","maxBucketSize","bucket","bars","set","selectChart","TERRAIN_TYPES","MapTileCard","terrainOptions","t","moveMapItem","resizeMapItem","cloneMapItem","removeMapItem","MapEditorModal","selectedTileID","createMapItem","smallMapItem","bigMapItem","copy","JSON","parse","stringify","splice","tools","map_tile_card_MapTileCard","mapItem","setSelectedTileID","MonsterEditorModal","page","showFilter","helpSection","subtype","sections","getHelpOptionsForPage","section","setRandomValue","findIndex","distinct","d","addedIDs","avg","createTrait","getActionTypeName","plural","newValue","hpPerDie","getValueSection","getActionsSection","dataType","values","sortByValue","sortByCount","valueSections","rows","addRandomTrait","criteria","criteriaText","similar","filterContent","toggleMatch","geneSplice","toggleFilter","showMonsters","getMonsters","changeTrait","selector","setHelpSection","getHelpSection","monsterList","getFilterCard","transition","setPage","Navbar","dmStyle","view","partiesStyle","libraryStyle","encounterStyle","mapStyle","combatStyle","encountersEnabled","combatEnabled","blur","setView","Titlebar","openHome","cog","openAbout","Dojo","selectedPartyID","selectedMonsterGroupID","selectedEncounterID","selectedMapFolioID","selectedCombatID","selectedDMModuleID","modal","libraryFilter","json","window","localStorage","getItem","setItem","createParty","getParty","createPC","createMonsterGroup","createMonster","sourceGroup","findMonster","original","clone","then","parseChallenge","challenge_rating","armor_class","hit_points","hit_dice","strength","dexterity","constitution","intelligence","wisdom","charisma","damage_resistances","damage_vulnerabilities","damage_immunities","condition_immunities","skill","special_abilities","rawTrait","buildTrait","legendary_actions","groupName","getMonsterGroupByName","openBracket","closeBracket","replace","createEncounter","getEncounter","createEncounterSlot","sortEncounterSlots","slotContainer","createEncounterWave","createMapFolio","getMapFolio","createMap","setup","createCombatSetup","partyName","init","groupRoll","dieRoll","singleRoll","sortCombatants","getCombat","Date","toLocaleString","newRound","actor","issue","miniSize","saveNotification","createNotification","endNotification","createCondition","conditionIndex","obj","home_screen_HomeScreen","dm_screen_DMScreen","selectDMModule","parties_screen_PartiesScreen","monster_library_screen_MonsterLibraryScreen","openDemographics","encounter_builder_screen_EncounterBuilderScreen","addWaveToEncounter","map_folios_screen_MapFoliosScreen","combat_manager_screen_CombatManagerScreen","pausedCombat","resumeCombat","closeNotification","openWaveModal","pauseCombat","endCombat","modalTitle","modalContent","modalAllowClose","modalAllowScroll","modalButtons","about_modal_AboutModal","demographics_modal_DemographicsModal","monster_editor_modal_MonsterEditorModal","toggleShowSimilarMonsters","saveMonster","closeModal","map_editor_modal_MapEditorModal","saveMap","combat_start_modal_CombatStartModal","startCombat","addWaveToCombat","condition_modal_ConditionModal","addConditionFromModal","editConditionFromModal","titlebar_Titlebar","navbar_Navbar","ReactDOM","render","dojo_Dojo","document","getElementById"],"mappings":"+EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,+DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,0DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,uDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,kDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,qDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,otBCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oQCKnBC,+GAKaC,EAAkBC,GAC5C,IAAIC,EAAQC,KAAKC,iBAAiBJ,EAAQK,IAE1C,IAAKH,EAAO,CACR,IAAMI,EAAML,EAAQM,KAAK,SAAAC,GAAC,OAAIA,EAAEC,SAASC,SAASV,KAC9CM,IACAJ,EAAQI,EACRH,KAAKC,iBAAiBJ,EAAQK,IAAMH,GAI5C,OAAOA,gCAGSS,EAAgBC,GAChC,IAAKD,EACD,OAAO,EAGX,IAAIE,GAAS,EASb,OAPeF,EAAOG,cAAcC,MAAM,KACnCC,QAAQ,SAAAC,IACgC,IAAvCL,EAAKE,cAAcI,QAAQD,KAC3BJ,GAAS,KAIVA,iCAIP,IAAMM,EAAK,kBAAMC,KAAKC,MAA4B,OAArB,EAAID,KAAKE,WAAqBC,SAAS,IAAIC,UAAU,IAClF,OAAOL,IAAOA,IAAO,IAAMA,IAAO,IAAMA,IAAO,IAAMA,IAAO,IAAMA,IAAOA,IAAOA,iCAGjEM,GAQf,OAPAA,EAAWC,KAAK,SAACC,EAAGC,GAChB,IAAMC,EAAQF,EAAEG,KAAKhB,cACfiB,EAAQH,EAAEE,KAAKhB,cACrB,OAAIe,EAAQE,GAAiB,EACzBF,EAAQE,EAAgB,EACrB,IAEJN,sCAGeA,GAMtB,OALAA,EAAWC,KAAK,SAACC,EAAGC,GAChB,OAAID,EAAEK,MAAQJ,EAAEI,OAAiB,EAC7BL,EAAEK,MAAQJ,EAAEI,MAAgB,EACzB,IAEJP,sCAGeA,GAYtB,OAXAA,EAAWC,KAAK,SAACC,EAAGC,GAChB,GAAID,EAAEM,MAAQL,EAAEK,MAAS,OAAO,EAChC,GAAIN,EAAEM,MAAQL,EAAEK,MAAS,OAAQ,EAEjC,IAAMC,EAASP,EAAEK,MAAMlB,cACjBqB,EAASP,EAAEI,MAAMlB,cACvB,OAAIoB,EAASC,GAAkB,EAC3BD,EAASC,EAAiB,EAEvB,IAEJV,wCAGiBW,GACxB,OAAOhB,KAAKC,OAAOe,EAAQ,IAAM,oCAGdA,GACnB,IAAMC,EAAMlC,KAAKmC,cAAcF,GAC3BG,EAAMF,EAAId,WAId,OAHIc,GAAO,IACPE,EAAM,IAAMA,GAETA,oCAIP,OAAOnB,KAAKC,MAAsB,GAAhBD,KAAKE,UAAiB,mCAGrBkB,GACnB,OAAQA,GACJ,IAAK,OACL,IAAK,QACL,IAAK,SAAU,OAAO,EACtB,IAAK,QAAS,OAAO,EACrB,IAAK,OAAQ,OAAO,EACpB,IAAK,aAAc,OAAO,EAC1B,QAAS,OAAO,sCAICA,GACrB,OAAQA,GACJ,IAAK,OAAQ,OAAO,EACpB,IAAK,QAAS,OAAO,EACrB,IAAK,SAAU,OAAO,EACtB,IAAK,QAAS,OAAO,GACrB,IAAK,OAAQ,OAAO,GACpB,IAAK,aAAc,OAAO,GAC1B,QAAS,OAAO,qCAIAC,GACpB,OAAQA,GACJ,IAAK,KAAO,MAAO,MACnB,IAAK,IAAM,MAAO,MAClB,IAAK,GAAK,MAAO,MACjB,QAAS,OAAOA,EAAGlB,mDAIEkB,GACzB,OAAQA,GACJ,IAAK,MAAO,MAAO,KACnB,IAAK,MAAO,MAAO,IACnB,IAAK,MAAO,MAAO,GACnB,QAAS,OAAOC,SAASD,EAAI,gDAKjC,IAAM5B,EAAgB,GAqCtB,OAnCAA,EAAO8B,KAAK,CAAEF,GAAI,EAAUG,GAAI,GAAUC,MAAO,EAAGC,MAAO,EAASC,OAAQ,EAAIC,OAAQ,EAAKC,OAAQ,EAAKC,KAAM,KAChHrC,EAAO8B,KAAK,CAAEF,GAAI,KAAUG,GAAI,GAAUC,MAAO,EAAGC,MAAO,GAASC,OAAQ,EAAIC,OAAQ,EAAKC,OAAQ,EAAKC,KAAM,KAChHrC,EAAO8B,KAAK,CAAEF,GAAI,IAAUG,GAAI,GAAUC,MAAO,GAAIC,MAAO,GAAQC,OAAQ,EAAIC,OAAQ,EAAKC,OAAQ,EAAKC,KAAM,KAChHrC,EAAO8B,KAAK,CAAEF,GAAI,GAAUG,GAAI,GAAUC,MAAO,GAAIC,MAAO,GAAQC,OAAQ,EAAIC,OAAQ,EAAKC,OAAQ,EAAKC,KAAM,KAChHrC,EAAO8B,KAAK,CAAEF,GAAI,EAAUG,GAAI,GAAUC,MAAO,GAAIC,MAAO,GAAQC,OAAQ,EAAIC,OAAQ,EAAKC,OAAQ,GAAKC,KAAM,KAChHrC,EAAO8B,KAAK,CAAEF,GAAI,EAAUG,GAAI,GAAUC,MAAO,GAAIC,MAAO,IAAQC,OAAQ,EAAIC,OAAQ,GAAKC,OAAQ,GAAKC,KAAM,KAChHrC,EAAO8B,KAAK,CAAEF,GAAI,EAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,EAAIC,OAAQ,GAAKC,OAAQ,GAAKC,KAAM,KAChHrC,EAAO8B,KAAK,CAAEF,GAAI,EAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,EAAIC,OAAQ,GAAKC,OAAQ,GAAKC,KAAM,KAChHrC,EAAO8B,KAAK,CAAEF,GAAI,EAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,EAAIC,OAAQ,GAAKC,OAAQ,GAAKC,KAAM,KAChHrC,EAAO8B,KAAK,CAAEF,GAAI,EAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,EAAIC,OAAQ,GAAKC,OAAQ,GAAKC,KAAM,KAChHrC,EAAO8B,KAAK,CAAEF,GAAI,EAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,EAAIC,OAAQ,GAAKC,OAAQ,GAAKC,KAAM,KAChHrC,EAAO8B,KAAK,CAAEF,GAAI,EAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,EAAIC,OAAQ,GAAKC,OAAQ,GAAKC,KAAM,KAChHrC,EAAO8B,KAAK,CAAEF,GAAI,EAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,EAAIC,OAAQ,GAAKC,OAAQ,GAAKC,KAAM,KAChHrC,EAAO8B,KAAK,CAAEF,GAAI,GAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,EAAIC,OAAQ,GAAKC,OAAQ,GAAKC,KAAM,KAChHrC,EAAO8B,KAAK,CAAEF,GAAI,GAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,EAAIC,OAAQ,GAAKC,OAAQ,GAAKC,KAAM,KAChHrC,EAAO8B,KAAK,CAAEF,GAAI,GAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,EAAIC,OAAQ,GAAKC,OAAQ,GAAKC,KAAM,KAChHrC,EAAO8B,KAAK,CAAEF,GAAI,GAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,EAAIC,OAAQ,GAAKC,OAAQ,GAAKC,KAAM,KAChHrC,EAAO8B,KAAK,CAAEF,GAAI,GAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,EAAIC,OAAQ,GAAKC,OAAQ,GAAKC,KAAM,KAChHrC,EAAO8B,KAAK,CAAEF,GAAI,GAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,EAAIC,OAAQ,GAAKC,OAAQ,GAAKC,KAAM,KAChHrC,EAAO8B,KAAK,CAAEF,GAAI,GAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,EAAIC,OAAQ,GAAKC,OAAQ,IAAKC,KAAM,KAChHrC,EAAO8B,KAAK,CAAEF,GAAI,GAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,GAAIC,OAAQ,IAAKC,OAAQ,IAAKC,KAAM,KAChHrC,EAAO8B,KAAK,CAAEF,GAAI,GAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,GAAIC,OAAQ,IAAKC,OAAQ,IAAKC,KAAM,KAChHrC,EAAO8B,KAAK,CAAEF,GAAI,GAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,GAAIC,OAAQ,IAAKC,OAAQ,IAAKC,KAAM,KAChHrC,EAAO8B,KAAK,CAAEF,GAAI,GAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,GAAIC,OAAQ,IAAKC,OAAQ,IAAKC,KAAM,KAChHrC,EAAO8B,KAAK,CAAEF,GAAI,GAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,GAAIC,OAAQ,IAAKC,OAAQ,IAAKC,KAAM,KAChHrC,EAAO8B,KAAK,CAAEF,GAAI,GAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,GAAIC,OAAQ,IAAKC,OAAQ,IAAKC,KAAM,KAChHrC,EAAO8B,KAAK,CAAEF,GAAI,GAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,GAAIC,OAAQ,IAAKC,OAAQ,IAAKC,KAAM,KAChHrC,EAAO8B,KAAK,CAAEF,GAAI,GAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,GAAIC,OAAQ,IAAKC,OAAQ,IAAKC,KAAM,KAChHrC,EAAO8B,KAAK,CAAEF,GAAI,GAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,GAAIC,OAAQ,IAAKC,OAAQ,IAAKC,KAAM,KAChHrC,EAAO8B,KAAK,CAAEF,GAAI,GAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,GAAIC,OAAQ,IAAKC,OAAQ,IAAKC,KAAM,KAChHrC,EAAO8B,KAAK,CAAEF,GAAI,GAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,GAAIC,OAAQ,IAAKC,OAAQ,IAAKC,KAAM,KAChHrC,EAAO8B,KAAK,CAAEF,GAAI,GAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,GAAIC,OAAQ,IAAKC,OAAQ,IAAKC,KAAM,KAChHrC,EAAO8B,KAAK,CAAEF,GAAI,GAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,GAAIC,OAAQ,IAAKC,OAAQ,IAAKC,KAAM,KAChHrC,EAAO8B,KAAK,CAAEF,GAAI,GAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,GAAIC,OAAQ,IAAKC,OAAQ,IAAKC,KAAM,KAEzGrC,qCAGc4B,GACrB,OAAQA,GACJ,KAAK,EAAG,OAAO,GACf,IAAK,KAAO,OAAO,GACnB,IAAK,IAAM,OAAO,GAClB,IAAK,GAAK,OAAO,IACjB,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,KACf,KAAK,EAAG,OAAO,KACf,KAAK,EAAG,OAAO,KACf,KAAK,EAAG,OAAO,KACf,KAAK,EAAG,OAAO,KACf,KAAK,EAAG,OAAO,IACf,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,IAChB,KAAK,GAAI,OAAO,MAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,IAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,IAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,MAChB,QAAS,OAAO,4CAIOR,GAC3B,OAAQA,GACJ,KAAK,EACD,OAAO,EACX,KAAK,EACD,OAAO,EACX,KAAK,EACD,OAAO,IACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACD,OAAO,EACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACD,OAAO,IACX,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACD,OAAO,EACX,QACI,OAAO,wCAIQkB,EAAeC,GACtC,OAAQA,GACJ,IAAK,OACD,OAAQD,GACJ,KAAK,EAAG,OAAO,GACf,KAAK,EAAG,OAAO,GACf,KAAK,EAAG,OAAO,GACf,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,IACf,KAAK,GAAI,OAAO,IAChB,KAAK,GAAI,OAAO,IAChB,KAAK,GAAI,OAAO,IAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,IAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,QAAS,OAAO,EAExB,IAAK,SACD,OAAQA,GACJ,KAAK,EAAG,OAAO,GACf,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,KACf,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,IAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,QAAS,OAAO,EAExB,IAAK,OACD,OAAQA,GACJ,KAAK,EAAG,OAAO,GACf,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,KACf,KAAK,EAAG,OAAO,KACf,KAAK,EAAG,OAAO,KACf,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,IAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,QAAS,OAAO,EAExB,IAAK,SACD,OAAQA,GACJ,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,KACf,KAAK,EAAG,OAAO,KACf,KAAK,EAAG,OAAO,KACf,KAAK,EAAG,OAAO,KACf,KAAK,EAAG,OAAO,KACf,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,MAChB,KAAK,GAAI,OAAO,MAChB,QAAS,OAAO,EAExB,QACI,OAAO,qCAIKE,GACpB,OAAQA,GACJ,IAAK,QACD,MAAO,QACX,IAAK,SACD,MAAO,SACX,IAAK,YACD,MAAO,mBACX,IAAK,OACD,MAAO,cACX,IAAK,WACD,MAAO,kBACX,QACI,OAAOA,0CAIUrB,EAAesB,GACxC,IAAIzC,EAAS,EAEb,OAAQmB,GACJ,KAAK,GACc,IAAXsB,IACAzC,EAAS,GAEC,IAAVyC,IACAzC,EAAS,MAEb,MACJ,IAAK,MACc,IAAXyC,IACAzC,EAAS,GAEC,IAAVyC,IACAzC,EAAS,KAEb,MACJ,IAAK,KACc,IAAXyC,IACAzC,EAAS,MAEC,IAAVyC,IACAzC,EAAS,IAEb,MACJ,IAAK,IACc,IAAXyC,IACAzC,EAAS,KAEC,IAAVyC,IACAzC,EAAS,GAEb,MACJ,KAAK,GACc,IAAXyC,IACAzC,EAAS,IAEC,IAAVyC,IACAzC,EAAS,GAEb,MACJ,QACIA,EAASmB,EAAQsB,EAIzB,OAAOzC,wCAGiB0C,GACxB,OAAQA,EAAUzB,MACd,IAAK,UACD,MAAO,CACH,kGACA,4GAER,IAAK,UACD,MAAO,CACH,mHACA,yFAER,IAAK,WACD,MAAO,CACH,wGAER,IAAK,aACD,OAAQyB,EAAUJ,OAClB,KAAK,EACD,MAAO,CACH,kCAER,KAAK,EACD,MAAO,CACH,iCACA,gBAER,KAAK,EACD,MAAO,CACH,iCACA,eACA,kDAER,KAAK,EACD,MAAO,CACH,iCACA,eACA,iDACA,4BAER,KAAK,EACD,MAAO,CACH,iCACA,eACA,iDACA,2BACA,sBAER,KAAK,EACD,MAAO,CACH,iCACA,eACA,iDACA,2BACA,qBACA,SAER,QACI,MAAO,GAGf,IAAK,aACD,MAAO,CACH,iIACA,2EAER,IAAK,WACD,MAAO,CACH,oGACA,sDACA,yHAER,IAAK,gBACD,MAAO,CACH,kEAER,IAAK,YACD,MAAO,CACH,yFACA,8DACA,6FACA,4GAER,IAAK,YACD,MAAO,CACH,4GACA,wEACA,mDACA,wGAER,IAAK,YACD,MAAO,CAEH,qJACA,+DACA,qIACA,mDACA,wEACA,4CACA,kIAER,IAAK,WACD,MAAO,CACH,2EAER,IAAK,QACD,MAAO,CACH,+GACA,gDAEA,mJAER,IAAK,aACD,MAAO,CACH,sGACA,2GACA,4DAER,IAAK,UACD,MAAO,CACH,8HACA,wEACA,oDAER,IAAK,cACD,MAAO,CACH,gJACA,0DACA,wEACA,mDACA,wGAER,IAAK,SAEL,QACI,MAAO,kDAIiBI,EAAsBC,GACtD,GAA2B,OAAvBD,EAAUE,SACV,OAAQF,EAAUE,SAASJ,MACvB,IAAK,QACD,IAAMK,EAAeH,EAAUE,SAC3BE,EAAWD,EAAaC,SAASpC,WACpB,UAAboC,IACAA,EAAWA,EAASC,eAExB,IAAMC,EAAQH,EAAazB,MAAQ,EAAI,QAAU,OACjD,MAAO,kBAAoByB,EAAazB,MAAQ,IAAM0B,EAAW,IAAME,EAAQ,UAAYH,EAAaI,OAC5G,IAAK,YACD,IAAMC,EAAoBR,EAAUE,SAC9BO,EAAQD,EAAkBC,MAC1BC,EAAIT,EAAOU,WAAW3D,KAAK,SAAA4D,GAAG,OAAIA,EAAI9D,KAAO0D,EAAkBK,cAErE,MAAO,aAAeJ,EAAQ,QADZC,GAAKA,EAAEI,aAAeJ,EAAEnC,MAAQ,mBAAqB,KAAQ,aAC5B,aACvD,IAAK,SACD,IAAMwC,EAAiBf,EAAUE,SAC3Bc,EAASD,EAAerC,MAAQ,EAAI,SAAW,QACrD,MAAO,OAASqC,EAAerC,MAAQ,IAAMsC,EACjD,QACI,OAAO,KAInB,OAAO,6CAGmBC,GAC1B,IAAMC,EAAsB,GAmB5B,OAlBID,GACAA,EAAUE,MAAM1D,QAAQ,SAAA2D,GACpB,IAAMC,EAAe,GACrB,GAAmB,IAAfD,EAAK1C,MACL2C,EAAMjC,KAAKgC,EAAKE,kBAEhB,IAAK,IAAIC,EAAI,EAAGA,IAAMH,EAAK1C,QAAS6C,EAChCF,EAAMjC,KAAKgC,EAAKE,YAAc,KAAOC,EAAI,IAIjDL,EAAa9B,KAAK,CACdtC,GAAIsE,EAAKtE,GACTuE,MAAOA,MAKZH,WAvlBM1E,EAGFK,iBAAmD,OCCjD2E,6GAGb,MAAO,CACH1E,GAAIN,EAAMiF,OACVlD,KAAM,GACNmD,IAAK,uCAKT,MAAO,CACH5E,GAAIN,EAAMiF,OACV3B,KAAM,KACN6B,QAAQ,EACRC,OAAQ,GACRrD,KAAM,GACNsD,KAAM,GACNC,QAAS,GACTlC,MAAO,EACPmC,UAAW,SACXC,eAAgB,GAChBC,qBAAsB,GACtBC,kBAAmB,GACnBC,WAAY,GACZC,IAAK,iDAKT,MAAO,CACHtF,GAAIN,EAAMiF,OACVlD,KAAM,GACNrB,SAAU,4CAKd,MAAO,CACHJ,GAAIN,EAAMiF,OACV3B,KAAM,UACNvB,KAAM,GACNU,KAAM,SACNoD,SAAU,WACVC,IAAK,GACLC,UAAW,GACXC,UAAW,EACXC,cAAe,CACXzD,IAAK,GACL0D,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,IAETzD,GAAI,GACJE,MAAO,EACPwD,OAAQ,EACRC,QAAS,EACTC,OAAQ,CACJC,OAAQ,GACRC,WAAY,GACZC,OAAQ,IAEZC,aAAc,GACdC,MAAO,GACPC,OAAQ,GACRC,OAAQ,GACRzB,UAAW,GACX0B,UAAW,GACXC,OAAQ,GACRC,oBAAqB,0CAKzB,MAAO,CACH7G,GAAIN,EAAMiF,OACVlD,KAAM,GACNqF,MAAO,GACP9D,KAAM,SACNzC,KAAM,GACNwG,KAAM,6CAKV,MAAO,CACH/G,GAAIN,EAAMiF,OACVlD,KAAM,GACN4C,MAAO,GACP2C,MAAO,kDAKX,MAAO,CACHhH,GAAIN,EAAMiF,OACVsC,iBAAkB,GAClBzC,YAAa,GACb5C,MAAO,iDAKX,MAAO,CACH5B,GAAIN,EAAMiF,OACVlD,KAAM,GACN4C,MAAO,6CAKX,MAAO,CACHrE,GAAIN,EAAMiF,OACVlD,KAAM,GACNyF,KAAM,wCAKV,MAAO,CACHlH,GAAIN,EAAMiF,OACVlD,KAAM,GACN0F,MAAO,4CAKX,MAAO,CACHnH,GAAIN,EAAMiF,OACV3B,KAAM,OACNoE,EAAG,EACHC,EAAG,EACHC,MAAO,EACPC,OAAQ,EACRC,QAAS,kDAKb,MAAO,CACHC,QAAS,KACTC,YAAa,KACbC,OAAQ,KACRC,QAAS,KACTC,MAAO,KACPzD,aAAc,GACd0D,kBAAmB,gDAKvB,MAAO,CACH9H,GAAIN,EAAMiF,OACVlD,KAAM,GACNiG,YAAa,KACb7D,WAAY,GACZkE,IAAK,KACLC,MAAO,EACPC,cAAe,GACfC,OAAQ,GACRC,UAAW,mDAKf,MAAO,CACHnI,GAAIN,EAAMiF,OACV3B,KAAM,iBACNoF,KAAM,KACNC,UAAW,gDAKf,MAAO,CACHrI,GAAIN,EAAMiF,OACVlD,KAAM,GACNqB,MAAO,EACPvC,KAAM,KACN6C,SAAU,6DAKd,MAAO,CACHJ,KAAM,QACNpB,MAAO,EACP0B,SAAU,MACVG,OAAQ,GACRE,MAAO,oEAKX,MAAO,CACHX,KAAM,YACNW,MAAO,QACPI,YAAa,8DAKjB,MAAO,CACHf,KAAM,SACNpB,MAAO,YChNE0G,mLAOb,IACI,IAAIC,EAAU,KACVzI,KAAK0I,MAAMC,aACXF,EAAUzI,KAAK0I,MAAMC,cAGzB,IAAIC,EAAU,KAId,OAHI5I,KAAK0I,MAAMG,aACXD,EAAU5I,KAAK0I,MAAMG,cAEpBD,EAKDE,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,QACVP,EACDK,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,gBACVJ,IAPF,KAWb,MAAOK,GACLC,QAAQC,MAAMF,WA9BYG,IAAMC,WAAvBb,EACHc,aAAe,CACzBX,WAAY,KACZE,WAAY,UCNCU,uLAEb,OACIT,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,8EACAF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,YACfF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,gEACAF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,oFAMR,OACIF,EAAAtH,EAAAuH,cAACS,EAAD,CAAUX,WAAY7I,KAAK6I,oBAdQO,IAAMC,4BCWhCI,cAMjB,SAAAA,EAAYf,GAAc,IAAAgB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA3J,KAAAyJ,IACtBC,EAAAC,OAAAE,EAAA,EAAAF,CAAA3J,KAAA2J,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAA/J,KAAM0I,KACDsB,MAAQ,CACTC,SAAS,GAHSP,wEAQtB1J,KAAKkK,SAAS,CACVD,SAAUjK,KAAKgK,MAAMC,4CAKzBjK,KAAKmK,SACLnK,KAAK0I,MAAM0B,4CAGC,IAAAC,EAAArK,KACZ,IACI,IAAI4I,EAAU,KAsBd,OApBIA,EADA5I,KAAKgK,MAAMC,QAEPnB,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,SAAShJ,KAAK0I,MAAMjI,KAAnC,oBACAqI,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,QAAQsB,IAAKC,IAASC,IAAI,YACxCxK,KAAK0I,MAAM+B,QAAU3B,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAWhJ,KAAK0I,MAAM+B,SAAiB,KAC5E3B,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,gBACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAc0B,QAAS,kBAAML,EAAKM,YAAjD,OACA7B,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,kBAAkB0B,QAAS,kBAAML,EAAKF,WAArD,QAMRrB,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,SAAShJ,KAAK0I,MAAMjI,MACnCqI,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,QAAQsB,IAAKC,IAASC,IAAI,aAMjD1B,EAAAtH,EAAAuH,cAAA,UAAQC,UAAWhJ,KAAK0I,MAAMkC,SAAW,WAAa,GAAIF,QAAS,kBAAML,EAAKF,WACzEvB,GAGX,MAAOiC,GAEL,OADA3B,QAAQC,MAAM0B,GACP,aAvDwBzB,IAAMC,WAA5BI,EACHH,aAAe,CACzBmB,QAAS,KACTG,UAAU,wBCFGE,cAOjB,SAAAA,EAAYpC,GAAc,IAAAgB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA3J,KAAA8K,IACtBpB,EAAAC,OAAAE,EAAA,EAAAF,CAAA3J,KAAA2J,OAAAG,EAAA,EAAAH,CAAAmB,GAAAf,KAAA/J,KAAM0I,KAEDsB,MAAQ,CACTe,MAAM,GAJYrB,0EAQPT,GACfA,EAAE+B,kBACFhL,KAAKkK,SAAS,CACVa,MAAO/K,KAAKgK,MAAMe,sCAIXE,GACXjL,KAAKkK,SAAS,CACVa,MAAM,IAEV/K,KAAK0I,MAAMwC,OAAOD,oCAGN,IAAAZ,EAAArK,KACZ,IACI,GAAkC,IAA9BA,KAAK0I,MAAMyC,QAAQC,OACnB,OAAO,KAGX,IAGIC,EAHAC,EAAQtL,KAAK0I,MAAMkC,SAAW,oBAAsB,WAClDhC,EAAU,GAGhB,GAAI5I,KAAK0I,MAAM6C,WAAY,CACvB,IAAMC,EAAuExL,KAAK0I,MAAMyC,QAAQ/K,KAAK,SAAAqL,GAAC,OAAIA,EAAEvL,KAAOmK,EAAK3B,MAAM6C,aAC1HC,IACAH,EAAeG,EAAO/K,WAG1B4K,EAAsCrL,KAAK0I,MAAMgD,YAUrD,GAPA9C,EAAQpG,KACJsG,EAAAtH,EAAAuH,cAAA,OAAK4C,IAAI,YAAY3C,UAAU,eAAe4C,MAAOP,GACjDvC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,aAAaqC,GAC5BvC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,QAAQsB,IAAKuB,IAAUrB,IAAI,YAI9CxK,KAAKgK,MAAMe,KAAM,CACjBO,GAAS,QAET,IAAMjE,EAAQrH,KAAK0I,MAAMyC,QAAQlD,IAAI,SAAAuD,GACjC,OAAoB,OAAhBA,EAAO/K,KACAqI,EAAAtH,EAAAuH,cAAA,OAAK4C,IAAKH,EAAOtL,GAAI8I,UAAU,YAGlCF,EAAAtH,EAAAuH,cAAC+C,EAAD,CACIH,IAAKH,EAAOtL,GACZsL,OAAQA,EACRO,SAAUP,EAAOtL,KAAOmK,EAAK3B,MAAM6C,WACnCL,OAAQ,SAAAD,GAAQ,OAAIZ,EAAKa,OAAOD,QAMhDrC,EAAQpG,KACJsG,EAAAtH,EAAAuH,cAAA,OAAK4C,IAAI,UAAU3C,UAAU,oBACxB3B,IAKb,OACIyB,EAAAtH,EAAAuH,cAAA,OAAKC,UAAWsC,EAAOZ,QAAS,SAAAzB,GAAC,OAAIoB,EAAK2B,WAAW/C,KAChDL,GAGX,MAAOiC,GAEL,OADA3B,QAAQC,MAAM0B,GACP,aAvFmBzB,IAAMC,WAAvByB,EACHxB,aAAe,CACzBiC,WAAY,KACZG,YAAa,YACbd,UAAU,OA8FZqB,gLACYhD,GACVA,EAAE+B,kBACGhL,KAAK0I,MAAM8C,OAAOZ,UACnB5K,KAAK0I,MAAMwC,OAAOlL,KAAK0I,MAAM8C,OAAOtL,qCAI5B,IAAAgM,EAAAlM,KACZ,IACI,IAAIsL,EAAQ,kBAQZ,OAPItL,KAAK0I,MAAMqD,WACXT,GAAS,aAETtL,KAAK0I,MAAM8C,OAAOZ,WAClBU,GAAS,aAITxC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAWsC,EAAOM,MAAO5L,KAAK0I,MAAM8C,OAAO/K,KAAMiK,QAAS,SAAAzB,GAAC,OAAIiD,EAAKC,MAAMlD,KAC1EjJ,KAAK0I,MAAM8C,OAAO/K,MAG7B,MAAOoK,GAEL,OADA3B,QAAQC,MAAM0B,GACP,aAzBUzB,IAAMC,2BCpGd+C,cAKjB,SAAAA,EAAY1D,GAAc,IAAAgB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA3J,KAAAoM,IACtB1C,EAAAC,OAAAE,EAAA,EAAAF,CAAA3J,KAAA2J,OAAAG,EAAA,EAAAH,CAAAyC,GAAArC,KAAA/J,KAAM0I,KAEDsB,MAAQ,CACTqC,UAAU,GAJQ3C,wEAStB1J,KAAKkK,SAAS,CACVmC,UAAWrM,KAAKgK,MAAMqC,4CAId,IAAAhC,EAAArK,KACZ,IACI,IAAIsL,EAAQtL,KAAK0I,MAAMkC,SAAW,oBAAsB,WACpD5K,KAAKgK,MAAMqC,WACXf,GAAS,aAGb,IAAI1C,EAAU,KASd,OARI5I,KAAKgK,MAAMqC,WACXzD,EACIE,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,oBACVhJ,KAAK0I,MAAME,UAMpBE,EAAAtH,EAAAuH,cAAA,OAAKC,UAAWsC,GACZxC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,kBAAkB0B,QAAS,kBAAML,EAAKF,WACjDrB,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,iBAAiBhJ,KAAK0I,MAAMjI,MAC3CqI,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,kBAAkBsB,IAAKgC,IAAO9B,IAAI,WAEpD5B,GAGX,MAAOiC,GAEL,OADA3B,QAAQC,MAAM0B,GACP,aA9CmBzB,IAAMC,WAAvB+C,EACH9C,aAAe,CACzBsB,UAAU,OCNG2B,gLAMHtD,EAAqBuD,GAA+C,IAAlCC,EAAkCC,UAAAtB,OAAA,QAAAuB,IAAAD,UAAA,GAAAA,UAAA,GAAN,KACxEzD,EAAE+B,kBACFhL,KAAK0I,MAAMyD,MAAMK,EAAKC,oCAGV,IAAA/C,EAAA1J,KACZ,IACI,IAAIsL,EAAQ,WAAatL,KAAK0I,MAAMkE,WAAa,OAC7C5M,KAAK0I,MAAMkC,WACXU,GAAS,aAGb,IAAMuB,EAAoC,QAAzB7M,KAAK0I,MAAMkE,WAAkD,SAAzB5M,KAAK0I,MAAMkE,WAAmD,UAAzB5M,KAAK0I,MAAMkE,UAC/FE,EAAmC,OAAzB9M,KAAK0I,MAAMkE,WAAiD,SAAzB5M,KAAK0I,MAAMkE,UACxDG,EAAqC,UAAzB/M,KAAK0I,MAAMkE,UAE7B,OACI9D,EAAAtH,EAAAuH,cAAA,OAAKC,UAAWsC,GACZxC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,QAAQsC,MAAO,CAAE0B,QAASD,EAAW,OAAS,kBAC7DjE,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAWsC,MAAO,CAAE0B,QAASD,EAAW,eAAiB,SACpEjE,EAAAtH,EAAAuH,cAAA,OACIuB,IAAKgC,IACLhB,MAAO,CAAE0B,QAASH,EAAU,eAAiB,OAAQI,UAAW,kBAChEzC,IAAI,KACJE,QAAS,SAAAzB,GAAC,OAAIS,EAAKyC,MAAMlD,EAAG,UAGpCH,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,OACXF,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAA,OACIuB,IAAKgC,IACLhB,MAAO,CAAE0B,QAASH,EAAU,eAAiB,OAAQI,UAAW,kBAChEzC,IAAI,IACJE,QAAS,SAAAzB,GAAC,OAAIS,EAAKyC,MAAMlD,EAAG,IAAK,WAGzCH,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAA,OACIuB,IAAKgC,IACLhB,MAAO,CAAE0B,QAASF,EAAS,eAAiB,QAC5CtC,IAAI,IACJE,QAAS,SAAAzB,GAAC,OAAIS,EAAKyC,MAAMlD,EAAG,IAAK,WAI7CH,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,QAAQsC,MAAO,CAAE0B,QAASD,EAAW,OAAS,kBAC7DjE,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAWsC,MAAO,CAAE0B,QAASD,EAAW,eAAiB,SACpEjE,EAAAtH,EAAAuH,cAAA,OACIuB,IAAKgC,IACLhB,MAAO,CAAE0B,QAASH,EAAU,eAAiB,OAAQI,UAAW,mBAChEzC,IAAI,KACJE,QAAS,SAAAzB,GAAC,OAAIS,EAAKyC,MAAMlD,EAAG,UAGpCH,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,MAAMsC,MAAO,CAAE4B,QAAUJ,GAAUD,EAAW,SAAW,MACpE/D,EAAAtH,EAAAuH,cAAA,OACIuB,IAAKgC,IACLhB,MAAO,CAAE0B,QAASH,EAAU,eAAiB,OAAQI,UAAW,iBAChEzC,IAAI,IACJE,QAAS,SAAAzB,GAAC,OAAIS,EAAKyC,MAAMlD,EAAG,IAAK,UAErCH,EAAAtH,EAAAuH,cAAA,OACIuB,IAAKgC,IACLhB,MAAO,CAAE0B,QAASF,EAAS,eAAiB,OAAQG,UAAW,kBAC/DzC,IAAI,IACJE,QAAS,SAAAzB,GAAC,OAAIS,EAAKyC,MAAMlD,EAAG,IAAK,UAGzCH,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,UACfF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,MAAMsC,MAAO,CAAE4B,QAAUJ,GAAUD,EAAW,SAAW,MACpE/D,EAAAtH,EAAAuH,cAAA,OACIuB,IAAKgC,IACLhB,MAAO,CAAE0B,QAASF,EAAS,eAAiB,OAAQG,UAAW,iBAC/DzC,IAAI,IACJE,QAAS,SAAAzB,GAAC,OAAIS,EAAKyC,MAAMlD,EAAG,IAAK,SAErCH,EAAAtH,EAAAuH,cAAA,OACIuB,IAAKgC,IACLhB,MAAO,CAAE0B,QAASH,EAAU,eAAiB,OAAQI,UAAW,kBAChEzC,IAAI,IACJE,QAAS,SAAAzB,GAAC,OAAIS,EAAKyC,MAAMlD,EAAG,IAAK,WAGzCH,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,QAAQsC,MAAO,CAAE0B,QAASD,EAAW,OAAS,kBAC7DjE,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAWsC,MAAO,CAAE0B,QAASD,EAAW,eAAiB,SACpEjE,EAAAtH,EAAAuH,cAAA,OACIuB,IAAKgC,IACLhB,MAAO,CAAE0B,QAASH,EAAU,eAAiB,OAAQI,UAAW,iBAChEzC,IAAI,KACJE,QAAS,SAAAzB,GAAC,OAAIS,EAAKyC,MAAMlD,EAAG,UAGpCH,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,OACXF,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAA,OACIuB,IAAKgC,IACLhB,MAAO,CAAE0B,QAASF,EAAS,eAAiB,OAAQG,UAAW,kBAC/DzC,IAAI,IACJE,QAAS,SAAAzB,GAAC,OAAIS,EAAKyC,MAAMlD,EAAG,IAAK,UAGzCH,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAA,OACIuB,IAAKgC,IACLhB,MAAO,CAAE0B,QAASH,EAAU,eAAiB,QAC7CrC,IAAI,IACJE,QAAS,SAAAzB,GAAC,OAAIS,EAAKyC,MAAMlD,EAAG,IAAK,YAI7CH,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,QAAQsC,MAAO,CAAE0B,QAASD,EAAW,OAAS,kBAC7DjE,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAWsC,MAAO,CAAE0B,QAASD,EAAW,eAAiB,SACpEjE,EAAAtH,EAAAuH,cAAA,OACIuB,IAAKgC,IACLhB,MAAO,CAAE0B,QAASH,EAAU,eAAiB,OAAQI,UAAW,kBAChEzC,IAAI,KACJE,QAAS,SAAAzB,GAAC,OAAIS,EAAKyC,MAAMlD,EAAG,WAM9C,MAAO4B,GAEL,OADA3B,QAAQC,MAAM0B,GACP,aAlIiBzB,IAAMC,WAArBkD,EACHjD,aAAe,CACzBsD,UAAW,MACXhC,UAAU,yCCEGuC,gLAQHlE,EAAqB9F,GAC/B8F,EAAE+B,kBACFhL,KAAK0I,MAAM0E,WAAWjK,oCAGT8F,EAAqB9F,GAClC8F,EAAEoE,iBACFpE,EAAE+B,kBACFhL,KAAK0I,MAAM0E,WAAWjK,oCAGV,IAAAuG,EAAA1J,KACZ,IACI,IAAIsL,EAAQ,aACRzJ,EAAQ7B,KAAK0I,MAAM4E,OAAOtN,KAAK0I,MAAM/G,MAC3B,IAAVE,IACAyJ,GAAS,WAGTtL,KAAK0I,MAAMsE,UACXnL,EAAQ7B,KAAK0I,MAAMsE,QAAQnL,IAG/B,IAAM0L,EAA2B,GAC3BC,EAA0B,GAE5BxN,KAAK0I,MAAM+E,SACXzN,KAAK0I,MAAM+E,QAAQ5M,QAAQ,SAAA6M,GACvBH,EAAU/K,KACNsG,EAAAtH,EAAAuH,cAAA,OACI4C,IAAK,QAAU+B,EACf1E,UAAU,qBACV2E,WAAY,SAAA1E,GAAC,OAAIS,EAAKkE,SAAS3E,GAAI,EAAIyE,IACvChD,QAAS,SAAAzB,GAAC,OAAIS,EAAKyC,MAAMlD,GAAI,EAAIyE,KAEhC,IAAMA,IAIfF,EAAShL,KACLsG,EAAAtH,EAAAuH,cAAA,OACI4C,IAAK,OAAS+B,EACd1E,UAAU,qBACV2E,WAAY,SAAA1E,GAAC,OAAIS,EAAKkE,SAAS3E,EAAG,EAAKyE,IACvChD,QAAS,SAAAzB,GAAC,OAAIS,EAAKyC,MAAMlD,EAAG,EAAKyE,KAEhC,IAAMA,MAKnBH,EAAUM,YAEVN,EAAU/K,KACNsG,EAAAtH,EAAAuH,cAAA,OAAK4C,IAAI,SAAS3C,UAAU,cAAc2E,WAAY,SAAA1E,GAAC,OAAIS,EAAKkE,SAAS3E,GAAI,IAAIyB,QAAS,SAAAzB,GAAC,OAAIS,EAAKyC,MAAMlD,GAAI,KAC1GH,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,QAAQsB,IAAKwD,IAAOtD,IAAI,YAI/CgD,EAAShL,KACLsG,EAAAtH,EAAAuH,cAAA,OAAK4C,IAAI,QAAQ3C,UAAU,cAAc2E,WAAY,SAAA1E,GAAC,OAAIS,EAAKkE,SAAS3E,EAAG,IAAKyB,QAAS,SAAAzB,GAAC,OAAIS,EAAKyC,MAAMlD,EAAG,KACxGH,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,QAAQsB,IAAKyD,IAAMvD,IAAI,YAKlD,IAAMwD,EAAY,IAAMhO,KAAK0I,MAAM+E,QAAUzN,KAAK0I,MAAM+E,QAAQrC,OAAS,GAEzE,OACItC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAWhJ,KAAK0I,MAAMkC,SAAW,gBAAkB,QACpD9B,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,SACVuE,GAELzE,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,OAAOsC,MAAO,CAAE9D,MAAO,eAAiBwG,EAAY,QAC/DlF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAchJ,KAAK0I,MAAMuF,OACxCnF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAWsC,GAAQzJ,IAE5BiH,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,QACVwE,IAIf,MAAO3C,GAEL,OADA3B,QAAQC,MAAM0B,GACP,aA5FezB,IAAMC,WAAnB8D,EACH7D,aAAe,CACzB2E,MAAO,KACPrD,UAAU,EACV6C,QAAS,KACTT,QAAS,UCFIkB,cAMjB,SAAAA,EAAYxF,GAAc,IAAAgB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA3J,KAAAkO,IACtBxE,EAAAC,OAAAE,EAAA,EAAAF,CAAA3J,KAAA2J,OAAAG,EAAA,EAAAH,CAAAuE,GAAAnE,KAAA/J,KAAM0I,KACDsB,MAAQ,CACTmE,mBAAmB,GAHDzE,qFAQtB1J,KAAKkK,SAAS,CACViE,mBAAoBnO,KAAKgK,MAAMmE,qDAIvB,IAAA9D,EAAArK,KACZ,IA+GI,OA5GIA,KAAK0I,MAAM0F,KAEPtF,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAACsF,EAAD,CACIf,OAAQtN,KAAK0I,MAAMH,UAAU1C,cAC7BlE,KAAK,MACLsM,MAAM,WACNb,WAAY,SAACjK,GAAD,OAAmBkH,EAAK3B,MAAM0E,WAAW/C,EAAK3B,MAAMH,UAAW,oBAAqBpF,MAEpG2F,EAAAtH,EAAAuH,cAACsF,EAAD,CACIf,OAAQtN,KAAK0I,MAAMH,UAAU1C,cAC7BlE,KAAK,MACLsM,MAAM,YACNb,WAAY,SAACjK,GAAD,OAAmBkH,EAAK3B,MAAM0E,WAAW/C,EAAK3B,MAAMH,UAAW,oBAAqBpF,MAEpG2F,EAAAtH,EAAAuH,cAACsF,EAAD,CACIf,OAAQtN,KAAK0I,MAAMH,UAAU1C,cAC7BlE,KAAK,MACLsM,MAAM,eACNb,WAAY,SAACjK,GAAD,OAAmBkH,EAAK3B,MAAM0E,WAAW/C,EAAK3B,MAAMH,UAAW,oBAAqBpF,MAEpG2F,EAAAtH,EAAAuH,cAACsF,EAAD,CACIf,OAAQtN,KAAK0I,MAAMH,UAAU1C,cAC7BlE,KAAK,MACLsM,MAAM,eACNb,WAAY,SAACjK,GAAD,OAAmBkH,EAAK3B,MAAM0E,WAAW/C,EAAK3B,MAAMH,UAAW,oBAAqBpF,MAEpG2F,EAAAtH,EAAAuH,cAACsF,EAAD,CACIf,OAAQtN,KAAK0I,MAAMH,UAAU1C,cAC7BlE,KAAK,MACLsM,MAAM,SACNb,WAAY,SAACjK,GAAD,OAAmBkH,EAAK3B,MAAM0E,WAAW/C,EAAK3B,MAAMH,UAAW,oBAAqBpF,MAEpG2F,EAAAtH,EAAAuH,cAACsF,EAAD,CACIf,OAAQtN,KAAK0I,MAAMH,UAAU1C,cAC7BlE,KAAK,MACLsM,MAAM,WACNb,WAAY,SAACjK,GAAD,OAAmBkH,EAAK3B,MAAM0E,WAAW/C,EAAK3B,MAAMH,UAAW,oBAAqBpF,OAMxG2F,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,iBAAiB0B,QAAS,kBAAML,EAAKiE,wBAChDxF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,iBACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,mBAAf,OACAF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,iBAEPhJ,KAAKgK,MAAMmE,kBACTnO,KAAK0I,MAAMH,UAAU1C,cAAczD,IACnCxC,EAAM2O,SAASvO,KAAK0I,MAAMH,UAAU1C,cAAczD,OAIhE0G,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,iBACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,mBAAf,OACAF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,iBAEPhJ,KAAKgK,MAAMmE,kBACTnO,KAAK0I,MAAMH,UAAU1C,cAAcC,IACnClG,EAAM2O,SAASvO,KAAK0I,MAAMH,UAAU1C,cAAcC,OAIhEgD,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,iBACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,mBAAf,OACAF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,iBAEPhJ,KAAKgK,MAAMmE,kBACTnO,KAAK0I,MAAMH,UAAU1C,cAAcE,IACnCnG,EAAM2O,SAASvO,KAAK0I,MAAMH,UAAU1C,cAAcE,OAIhE+C,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,iBACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,mBAAf,OACAF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,iBAEPhJ,KAAKgK,MAAMmE,kBACTnO,KAAK0I,MAAMH,UAAU1C,cAAcG,IACnCpG,EAAM2O,SAASvO,KAAK0I,MAAMH,UAAU1C,cAAcG,OAIhE8C,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,iBACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,mBAAf,OACAF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,iBAEPhJ,KAAKgK,MAAMmE,kBACTnO,KAAK0I,MAAMH,UAAU1C,cAAcI,IACnCrG,EAAM2O,SAASvO,KAAK0I,MAAMH,UAAU1C,cAAcI,OAIhE6C,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,iBACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,mBAAf,OACAF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,iBAEPhJ,KAAKgK,MAAMmE,kBACTnO,KAAK0I,MAAMH,UAAU1C,cAAcK,IACnCtG,EAAM2O,SAASvO,KAAK0I,MAAMH,UAAU1C,cAAcK,QAS9E,MAAO+C,GACLC,QAAQC,MAAMF,WArIqBG,IAAMC,WAAhC6E,EACH5E,aAAe,CACzB8E,KAAM,KACNhB,WAAY,UCFCoB,mLACD,IAAA9E,EAAA1J,KACZ,IACI,IAAMyO,EAAa,GACnB,GAAIzO,KAAK0I,MAAMH,UAAUkG,WACrB,IAAK,IAAI9J,EAAI,EAAGA,IAAM3E,KAAK0I,MAAMH,UAAUkG,WAAWrD,SAAUzG,EAAG,CAC/D,IAAMb,EAAI9D,KAAK0I,MAAMH,UAAUkG,WAAW9J,GAC1C8J,EAAWjM,KACPsG,EAAAtH,EAAAuH,cAAC2F,EAAD,CACI/C,IAAKhH,EACLvB,UAAWU,EACXT,OAAQrD,KAAK0I,MAAMrF,OACnBsL,oBAAqB,SAACvL,EAAWF,EAAMC,GAAlB,OAA4BuG,EAAKhB,MAAMiG,oBAAoBvL,EAAWF,EAAMC,IACjGyL,cAAe,SAAAxL,GAAS,OAAIsG,EAAKhB,MAAMkG,cAAcxL,IACrDyL,gBAAiB,SAAAC,GAAW,OAAIpF,EAAKhB,MAAMmG,gBAAgBC,OAM3E,OACIhG,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACVyF,EACD3F,EAAAtH,EAAAuH,cAAA,UAAQ2B,QAAS,kBAAMhB,EAAKhB,MAAMqG,iBAAlC,oBAGV,MAAO9F,GACLC,QAAQC,MAAMF,WA3BmBG,IAAMC,WAwC7C2F,mLACc,IAAA3E,EAAArK,KACZ,IACI,IAAI2B,EAAe3B,KAAK0I,MAAMtF,UAAUzB,MAAQ,YACd,eAA9B3B,KAAK0I,MAAMtF,UAAUzB,OACrBA,GAAQ,KAAO3B,KAAK0I,MAAMtF,UAAUJ,MAAQ,KAEb,WAA9BhD,KAAK0I,MAAMtF,UAAUzB,MAAqD,OAA9B3B,KAAK0I,MAAMtF,UAAU3C,OAClEkB,EAAO3B,KAAK0I,MAAMtF,UAAU3C,MAGM,OAAlCT,KAAK0I,MAAMtF,UAAUE,WACrB3B,GAAQ,IAAM/B,EAAMqP,sBAAsBjP,KAAK0I,MAAMtF,UAAWpD,KAAK0I,MAAMrF,SAG/E,IAAM6L,EAAc,GACc,eAA9BlP,KAAK0I,MAAMtF,UAAUzB,MACrBuN,EAAY1M,KACRsG,EAAAtH,EAAAuH,cAAA,OAAK4C,IAAI,QAAQ3C,UAAU,WACvBF,EAAAtH,EAAAuH,cAACsF,EAAD,CACIf,OAAQtN,KAAK0I,MAAMtF,UACnBzB,KAAK,QACLsM,MAAM,QACNb,WAAY,SAAAjK,GAAK,OAAIkH,EAAK3B,MAAMiG,oBAAoBtE,EAAK3B,MAAMtF,UAAW,QAASD,QAMnG,IADA,IAAM1C,EAAOb,EAAMuP,cAAcnP,KAAK0I,MAAMtF,WACnCuB,EAAI,EAAGA,IAAMlE,EAAK2K,SAAUzG,EACjCuK,EAAY1M,KAAKsG,EAAAtH,EAAAuH,cAAA,OAAK4C,IAAKhH,EAAGqE,UAAU,WAAWvI,EAAKkE,KAG5D,OACImE,EAAAtH,EAAAuH,cAACqG,EAAD,CACI3O,KAAMkB,EACNiH,QACIE,EAAAtH,EAAAuH,cAAA,WACKmG,EACDpG,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,YACfF,EAAAtH,EAAAuH,cAAA,UAAQ2B,QAAS,kBAAML,EAAK3B,MAAMkG,cAAcvE,EAAK3B,MAAMtF,aAA3D,QACA0F,EAAAtH,EAAAuH,cAAA,UAAQ2B,QAAS,kBAAML,EAAK3B,MAAMmG,gBAAgBxE,EAAK3B,MAAMtF,UAAUlD,MAAvE,aAKlB,MAAO+I,GACLC,QAAQC,MAAMF,WA/CGG,IAAMC,2BChD7BgG,EAAW,IAAIC,IAASC,UAWTC,mLASD,IAAA9F,EAAA1J,KACZ,IAOI,IANA,IAAM8G,EAAS,GACT2I,EAAU,GACVC,EAAmB,GACnBC,EAAc,GACdC,EAAkB,GAEfjL,EAAI,EAAGA,IAAM3E,KAAK0I,MAAMH,UAAUzB,OAAOsE,SAAUzG,EAAG,CAC3D,IAAMnD,EAAIxB,KAAK0I,MAAMH,UAAUzB,OAAOnC,GAEhCkL,EACF/G,EAAAtH,EAAAuH,cAAC+G,EAAD,CACInE,IAAKnK,EAAEtB,GACP6P,MAAOvO,EACPwO,KAAMhQ,KAAK0I,MAAMsH,KACjBC,YAAa,SAACC,EAAQhN,EAAMrB,GAAf,OAAyB6H,EAAKhB,MAAMuH,YAAYC,EAAQhN,EAAMrB,IAC3EsO,YAAa,SAAAD,GAAM,OAAIxG,EAAKhB,MAAMyH,YAAYD,IAC9CE,UAAW,SAAAF,GAAM,OAAIxG,EAAKhB,MAAM0H,UAAUF,MAIlD,OAAQ1O,EAAE0B,MACN,IAAK,QACD4D,EAAOtE,KAAKqN,GACZ,MACJ,IAAK,SACDJ,EAAQjN,KAAKqN,GACb,MACJ,IAAK,YACDH,EAAiBlN,KAAKqN,GACtB,MACJ,IAAK,OACDF,EAAYnN,KAAKqN,GACjB,MACJ,IAAK,WACDD,EAAgBpN,KAAKqN,IAQjC,MAAwB,SAApB7P,KAAK0I,MAAMsH,MACXlJ,EAAOtE,KACHsG,EAAAtH,EAAAuH,cAAA,UAAQ4C,IAAI,MAAMjB,QAAS,kBAAMhB,EAAKhB,MAAM2H,SAAS,WAArD,oBAEJZ,EAAQjN,KACJsG,EAAAtH,EAAAuH,cAAA,UAAQ4C,IAAI,MAAMjB,QAAS,kBAAMhB,EAAKhB,MAAM2H,SAAS,YAArD,qBAEJX,EAAiBlN,KACbsG,EAAAtH,EAAAuH,cAAA,UAAQ4C,IAAI,MAAMjB,QAAS,kBAAMhB,EAAKhB,MAAM2H,SAAS,eAArD,+BAEJV,EAAYnN,KACRsG,EAAAtH,EAAAuH,cAAA,UAAQ4C,IAAI,MAAMjB,QAAS,kBAAMhB,EAAKhB,MAAM2H,SAAS,UAArD,0BAEJT,EAAgBpN,KACZsG,EAAAtH,EAAAuH,cAAA,UAAQ4C,IAAI,MAAMjB,QAAS,kBAAMhB,EAAKhB,MAAM2H,SAAS,cAArD,8BAIAvH,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,gBACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,gDACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,sBAAf,UACClC,GAELgC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,gDACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,sBAAf,WACCyG,GAEL3G,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,gDACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,sBAAf,qBACC0G,EACD5G,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,sBAAf,gBACC2G,EACD7G,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,sBAAf,oBACC4G,KAOb9G,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAA,OAAKuC,MAAO,CAAE0B,QAASlG,EAAOsE,OAAS,EAAI,GAAK,SAC5CtC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,sBAAf,UACClC,GAELgC,EAAAtH,EAAAuH,cAAA,OAAKuC,MAAO,CAAE0B,QAASyC,EAAQrE,OAAS,EAAI,GAAK,SAC7CtC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,sBAAf,WACCyG,GAEL3G,EAAAtH,EAAAuH,cAAA,OAAKuC,MAAO,CAAE0B,QAAS0C,EAAiBtE,OAAS,EAAI,GAAK,SACtDtC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,sBAAf,qBACC0G,GAEL5G,EAAAtH,EAAAuH,cAAA,OAAKuC,MAAO,CAAE0B,QAAS2C,EAAYvE,OAAS,EAAI,GAAK,SACjDtC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,sBAAf,gBACC2G,GAEL7G,EAAAtH,EAAAuH,cAAA,OAAKuC,MAAO,CAAE0B,QAAS4C,EAAgBxE,OAAS,EAAI,GAAK,SACrDtC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,sBAAf,oBACC4G,IAIf,MAAO3G,GACLC,QAAQC,MAAMF,WArHeG,IAAMC,WAA1BmG,EACHlG,aAAe,CACzB0G,KAAM,OACNK,SAAU,KACVD,UAAW,KACXD,YAAa,KACbF,YAAa,UA4HfK,mLACc,IAAAjG,EAAArK,KACZ,IACI,IAAIuQ,EAAU,EACV9H,EAAUzI,KAAK0I,MAAMqH,MAAMpO,MAAQ,WAAa/B,EAAM4Q,UAAUxQ,KAAK0I,MAAMqH,MAAM7M,MAErF,GAAIlD,KAAK0I,MAAMqH,MAAM/I,MAAO,CACxB,IAAIyJ,EAAO,GACPzQ,KAAK0I,MAAMqH,MAAM/I,MAAMrG,cAAc+P,WAAW,eAChDH,EAAU,EACNvQ,KAAK0I,MAAMqH,MAAM9I,KAAO,IACxBwJ,EAAO,WAGf,IAAME,EAAQ3Q,KAAK0I,MAAMqH,MAAM/I,MAAMrG,cAAciQ,MAAM,cACrDD,IACAJ,EAAUhO,SAASoO,EAAM,GAAI,IACzB3Q,KAAK0I,MAAMqH,MAAM9I,KAAO,IACxBwJ,EAAO,UAAYzQ,KAAK0I,MAAMqH,MAAM9I,OAG5CwB,GAAW,MAAQzI,KAAK0I,MAAMqH,MAAM/I,MAAQyJ,EAAO,KAEvD,IAAMI,EAAW,KAAOpI,EAAU,MAAQzI,KAAK0I,MAAMqH,MAAMtP,KAE3D,OAAQT,KAAK0I,MAAMsH,MACf,IAAK,OACD,OACIlH,EAAAtH,EAAAuH,cAAA,OAAK4C,IAAK3L,KAAK0I,MAAMqH,MAAM7P,GAAI8I,UAAU,iBACrCF,EAAAtH,EAAAuH,cAAA,OAAK+H,wBAAyB,CAAEC,OAAQ1B,EAAS2B,SAASH,OAGtE,IAAK,OACD,IAAMpG,EACF3B,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,SACI7F,KAAK,OACLwI,YAAY,OACZ7J,MAAO7B,KAAK0I,MAAMqH,MAAMpO,KACxBsP,SAAU,SAAAC,GAAK,OAAI7G,EAAK3B,MAAMuH,YAAY5F,EAAK3B,MAAMqH,MAAO,OAAQmB,EAAMC,OAAOtP,UAErFiH,EAAAtH,EAAAuH,cAAA,SACI7F,KAAK,OACLwI,YAAY,QACZ7J,MAAO7B,KAAK0I,MAAMqH,MAAM/I,MACxBiK,SAAU,SAAAC,GAAK,OAAI7G,EAAK3B,MAAMuH,YAAY5F,EAAK3B,MAAMqH,MAAO,QAASmB,EAAMC,OAAOtP,UAEtFiH,EAAAtH,EAAAuH,cAAA,YACI2C,YAAY,UACZ7J,MAAO7B,KAAK0I,MAAMqH,MAAMtP,KACxBwQ,SAAU,SAAAC,GAAK,OAAI7G,EAAK3B,MAAMuH,YAAY5F,EAAK3B,MAAMqH,MAAO,OAAQmB,EAAMC,OAAOtP,UAErFiH,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,YACfF,EAAAtH,EAAAuH,cAACqI,EAAD,CAAe3Q,KAAK,SAAS2J,SAAU,kBAAMC,EAAK3B,MAAMyH,YAAY9F,EAAK3B,MAAMqH,WAIvF,OACIjH,EAAAtH,EAAAuH,cAACqG,EAAD,CACI3O,KAAMT,KAAK0I,MAAMqH,MAAMpO,MAAQ,WAAa/B,EAAM4Q,UAAUxQ,KAAK0I,MAAMqH,MAAM7M,MAC7E0F,QAAS6B,IAGrB,IAAK,WACD,OACI3B,EAAAtH,EAAAuH,cAAA,OAAK4C,IAAK3L,KAAK0I,MAAMqH,MAAM7P,GAAI8I,UAAU,iBACrCF,EAAAtH,EAAAuH,cAAA,OAAK+H,wBAAyB,CAAEC,OAAQ1B,EAAS2B,SAASH,MAC1D/H,EAAAtH,EAAAuH,cAAA,UAAQ2B,QAAS,kBAAML,EAAK3B,MAAM0H,UAAU/F,EAAK3B,MAAMqH,SAAvD,SAGZ,IAAK,SACD,IAAIzE,EAAQ,GACRtE,EAAQ,KACZ,GAAIuJ,EAAU,EACOvQ,KAAK0I,MAAMqH,MAAM9I,MAAQsJ,GAEtCjF,EAAQ,gBACRtE,EAAQ8B,EAAAtH,EAAAuH,cAAA,UAAQ2B,QAAS,kBAAML,EAAK3B,MAAMuH,YAAY5F,EAAK3B,MAAMqH,MAAO,OAAQ,KAAxE,aAER/I,EAAQ8B,EAAAtH,EAAAuH,cAAA,UAAQ2B,QAAS,kBAAML,EAAK3B,MAAMuH,YAAY5F,EAAK3B,MAAMqH,MAAO,OAAQ1F,EAAK3B,MAAMqH,MAAM9I,KAAO,KAAhG,OAGhB,OACI6B,EAAAtH,EAAAuH,cAAA,OAAK4C,IAAK3L,KAAK0I,MAAMqH,MAAM7P,GAAI8I,UAAU,iBACrCF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAWsC,EAAOwF,wBAAyB,CAAEC,OAAQ1B,EAAS2B,SAASH,MAC3E7J,IAInB,MAAOiC,GACLC,QAAQC,MAAMF,WA1FDG,IAAMC,2BC3FVgI,cA8BjB,SAAAA,EAAY3I,GAAc,IAAAgB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA3J,KAAAqR,IACtB3H,EAAAC,OAAAE,EAAA,EAAAF,CAAA3J,KAAA2J,OAAAG,EAAA,EAAAH,CAAA0H,GAAAtH,KAAA/J,KAAM0I,KACDsB,MAAQ,CACTsH,aAAa,EACbC,UAAW7I,EAAMH,UAAU5G,KAAO,QAClC6P,gBAAiB,GALC9H,4EASL6H,GACjBvR,KAAKkK,SAAS,CACVqH,UAAWA,4CAKfvR,KAAKkK,SAAS,CACVoH,aAActR,KAAKgK,MAAMsH,gDAIfzP,GACd7B,KAAKkK,SAAS,CACVsH,gBAAiB3P,wCAILsB,GAChBnD,KAAKkK,SAAS,CACVsH,gBAAiBvQ,KAAKwQ,IAAIzR,KAAKgK,MAAMwH,gBAAkBrO,EAAO,oCAIvD,IAAAkH,EAAArK,KACLuI,EAAYvI,KAAK0I,MAAMH,UAEzBmJ,GAAMnJ,EAAUmJ,GAAKnJ,EAAUmJ,GAAK,GAAK1R,KAAKgK,MAAMwH,gBACxDE,EAAKzQ,KAAK0Q,IAAID,EAAI1R,KAAK0I,MAAMH,UAAU5F,OAEvC3C,KAAKkK,SAAS,CACVsH,gBAAiB,GAClB,WACCnH,EAAK3B,MAAMkJ,SAASrJ,EAAWmJ,EAAIrH,EAAK3B,MAAMH,UAAUpC,2CAI/C,IAAA+F,EAAAlM,KACPuI,EAAYvI,KAAK0I,MAAMH,UAEzBmJ,EAAMnJ,EAAUmJ,GAAKnJ,EAAUmJ,GAAK,EACpCG,EAAO7R,KAAK0I,MAAMH,UAAUpC,OAE5BE,EAASrG,KAAKgK,MAAMwH,gBAGlBM,EAAM7Q,KAAK0Q,IAAItL,EAAQwL,GAC7BxL,GAAUyL,EACVD,GAAQC,EAGRJ,GAAMrL,EACNqL,EAAKzQ,KAAKwQ,IAAIC,EAAI,GAElB1R,KAAKkK,SAAS,CACVsH,gBAAiB,GAClB,WACCtF,EAAKxD,MAAMkJ,SAASrJ,EAAWmJ,EAAIG,2CAKvC,IAAIE,GAAe/R,KAAK0I,MAAMH,UAAUlG,KAAO,IAAMrC,KAAK0I,MAAMH,UAAU9C,UAAU9E,cAChFX,KAAK0I,MAAMH,UAAU7C,MACrBqM,GAAe,KAAO/R,KAAK0I,MAAMH,UAAU7C,IAAI/E,cAAgB,KAEnEoR,GAAe,KAEf,IAAIC,EAAQ,GAOZ,OANIhS,KAAK0I,MAAMH,UAAU5C,YACrBqM,EAAQhS,KAAK0I,MAAMH,UAAU5C,UAAUhF,cAAgB,MAKpDoR,EAAcC,GAFV,MAAQpS,EAAMgG,UAAU5F,KAAK0I,MAAMH,UAAU3C,oDAKpCqM,GAAqB,IAAAC,EAAAlS,KACzC,OAAOiS,EAAK1N,MAAM4N,KAAK,SAAAC,GACnB,IAAMrS,EAAQmS,EAAKxJ,MAAM5I,QAAQM,KAAK,SAAAC,GAAC,OAAIA,EAAEC,SAASC,SAAS2R,EAAKxJ,MAAMH,aAC1E,QAASxI,GAAUqS,EAAEjL,mBAAqBpH,EAAM4B,MAAUyQ,EAAE1N,cAAgBwN,EAAKxJ,MAAMH,UAAU5G,uCAKrG,GAAqC,IAAjC3B,KAAK0I,MAAMH,UAAUnC,QACrB,OAAOpG,KAAK0I,MAAMH,UAAU5F,MAGhC,IAAM0P,EAAMzS,EAAM0S,WAAWtS,KAAK0I,MAAMH,UAAUlG,MAC5CkQ,EAAS3S,EAAMuC,cAAcnC,KAAK0I,MAAMH,UAAU1C,cAAcE,KAAO/F,KAAK0I,MAAMH,UAAUnC,QAC9FoM,EAAY,GAOhB,OANID,EAAS,IACTC,EAAY,KAAOD,GAEnBA,EAAS,IACTC,EAAY,IAAMD,GAEfvS,KAAK0I,MAAMH,UAAU5F,MAAQ,KAAO3C,KAAK0I,MAAMH,UAAUnC,QAAU,IAAMiM,EAAMG,EAAY,qCAGtF,IAAAC,EAAAzS,KACZ,IACI,IAAMmL,EAAU,GAChB,IAA+C,IAA3CnL,KAAK0I,MAAMsH,KAAKjP,QAAQ,cAAsB,CAC9C,IAAyC,IAArCf,KAAK0I,MAAMsH,KAAKjP,QAAQ,QAAgB,CACxC,IAA6C,IAAzCf,KAAK0I,MAAMsH,KAAKjP,QAAQ,YAAoB,CAC5CoK,EAAQ3I,KACJsG,EAAAtH,EAAAuH,cAAA,UAAQ4C,IAAI,OAAOjB,QAAS,kBAAM+H,EAAK/J,MAAMgK,YAAYD,EAAK/J,MAAMH,aAApE,iBAGJ4C,EAAQ3I,KACJsG,EAAAtH,EAAAuH,cAACqG,EAAD,CACIzD,IAAI,QACJlL,KAAK,gBACLmI,QACIE,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAA,SACI7F,KAAK,OACLwI,YAAY,eACZ7J,MAAO7B,KAAKgK,MAAMuH,UAClBN,SAAU,SAAAC,GAAK,OAAIuB,EAAKE,aAAazB,EAAMC,OAAOtP,UAEtDiH,EAAAtH,EAAAuH,cAAA,UAAQ2B,QAAS,kBAAM+H,EAAK/J,MAAMkK,aAAaH,EAAK/J,MAAMH,UAAWkK,EAAKzI,MAAMuH,aAAhF,mBAMhB,IAAMsB,EAA+C,GACrD7S,KAAK0I,MAAM5I,QAAQe,QAAQ,SAAAd,IAC+B,IAAlDA,EAAMO,SAASS,QAAQ0R,EAAK/J,MAAMH,YAClCsK,EAAarQ,KAAK,CACdtC,GAAIH,EAAMG,GACVO,KAAMV,EAAM4B,SAIxBwJ,EAAQ3I,KACJsG,EAAAtH,EAAAuH,cAAC+J,EAAD,CACInH,IAAI,OACJR,QAAS0H,EACTnH,YAAY,mBACZR,OAAQ,SAAAD,GAAQ,OAAIwH,EAAK/J,MAAMqK,YAAYN,EAAK/J,MAAMH,UAAW0C,OAIzEE,EAAQ3I,KAAKsG,EAAAtH,EAAAuH,cAACqI,EAAD,CAAezF,IAAI,SAASlL,KAAK,iBAAiB2J,SAAU,kBAAMqI,EAAK/J,MAAMsK,cAAcP,EAAK/J,MAAMH,eAEvH,IAA8C,IAA1CvI,KAAK0I,MAAMsH,KAAKjP,QAAQ,aACxB,GAAIf,KAAK0I,MAAMlE,KAEX2G,EAAQ3I,KACJsG,EAAAtH,EAAAuH,cAAA,UAAQ4C,IAAI,SAASjB,QAAS,kBAAM+H,EAAK/J,MAAMuK,oBAAoBR,EAAK/J,MAAMlE,QAA9E,8BAID,CACH,IAAI0O,GAAS,EAqBb,GAnBKlT,KAAKmT,gBAAgBnT,KAAK0I,MAAMrE,aACjC8G,EAAQ3I,KACJsG,EAAAtH,EAAAuH,cAAA,UAAQ4C,IAAI,gBAAgBjB,QAAS,kBAAM+H,EAAK/J,MAAM0K,iBAAiBX,EAAK/J,MAAMH,UAAW,QAA7F,qBAIJ2K,GAAS,GAEblT,KAAK0I,MAAMrE,UAAU6C,MAAMrG,QAAQ,SAAAoR,GAC1BQ,EAAKU,gBAAgBlB,KACtB9G,EAAQ3I,KACJsG,EAAAtH,EAAAuH,cAAA,UAAQ4C,IAAK,OAASsG,EAAK/R,GAAIwK,QAAS,kBAAM+H,EAAK/J,MAAM0K,iBAAiBX,EAAK/J,MAAMH,UAAW0J,EAAK/R,MAArG,UACY+R,EAAKtQ,OAGrBuR,GAAS,MAIZA,EACD,OACIpK,EAAAtH,EAAAuH,cAACS,EAAD,CACIb,WAAY,WACR,OACIG,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,SAASyJ,EAAK/J,MAAMH,UAAU5G,QAIzDkH,WAAY,WACR,OACIC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,oBACXF,EAAAtH,EAAAuH,cAAA,gEAUpC,IAA2C,IAAvC/I,KAAK0I,MAAMsH,KAAKjP,QAAQ,UAAkB,CAC1C,IAAMwH,EAAYvI,KAAK0I,MAAMH,WAEgB,IAAzCvI,KAAK0I,MAAMsH,KAAKjP,QAAQ,eACmB,IAAvCf,KAAK0I,MAAMsH,KAAKjP,QAAQ,YACxBoK,EAAQ3I,KACJsG,EAAAtH,EAAAuH,cAAA,OAAK4C,IAAI,UAAU3C,UAAU,oBACzBF,EAAAtH,EAAAuH,cAACsK,EAAD,CACIzG,UAAU,QACVT,MAAO,SAAAK,GAAG,OAAIiG,EAAK/J,MAAM4K,QAAQ/K,EAAWiE,QAIxDrB,EAAQ3I,KACJsG,EAAAtH,EAAAuH,cAACsF,EAAD,CACI1C,IAAI,WACJ2B,OAAQtN,KAAK0I,MAAMH,UACnB5G,KAAK,WACLsM,MAAM,WACNjB,QAAS,SAAAnL,GAAK,OAAIA,EAAQ,QAC1BuL,WAAY,SAAAjK,GAAK,OAAIsP,EAAK/J,MAAM0E,WAAWqF,EAAK/J,MAAMH,UAAW,WAAoB,EAARpF,OAGrFgI,EAAQ3I,KAAKsG,EAAAtH,EAAAuH,cAAA,UAAQ4C,IAAI,YAAYjB,QAAS,kBAAM+H,EAAK/J,MAAM6K,UAAUhL,KAA5D,sBAE2B,IAAxCvI,KAAK0I,MAAMsH,KAAKjP,QAAQ,YACxBoK,EAAQ3I,KAAKsG,EAAAtH,EAAAuH,cAAA,UAAQ4C,IAAI,SAASjB,QAAS,kBAAM+H,EAAK/J,MAAM8K,OAAOjL,KAAtD,eAEjB4C,EAAQ3I,KAAKsG,EAAAtH,EAAAuH,cAAA,OAAK4C,IAAI,eAAe3C,UAAU,eAE/CT,EAAUkL,SAAYlL,EAAUxD,QAAWwD,EAAUmL,UACrDvI,EAAQ3I,KAAKsG,EAAAtH,EAAAuH,cAACqI,EAAD,CAAezF,IAAI,SAASlL,KAAK,wBAAwB2J,SAAU,kBAAMqI,EAAK/J,MAAMiL,gBAAgBpL,OAEhHA,EAAUkL,UAAWlL,EAAUxD,QAAWwD,EAAUmL,WACjDnL,EAAUqL,SACVzI,EAAQ3I,KAAKsG,EAAAtH,EAAAuH,cAAA,UAAQ4C,IAAI,UAAUjB,QAAS,kBAAM+H,EAAK/J,MAAMmL,QAAQtL,KAAxD,aACb4C,EAAQ3I,KAAKsG,EAAAtH,EAAAuH,cAAA,UAAQ4C,IAAI,eAAejB,QAAS,kBAAM+H,EAAK/J,MAAMoL,aAAavL,KAAlE,oCAEb4C,EAAQ3I,KAAKsG,EAAAtH,EAAAuH,cAAA,UAAQ4C,IAAI,cAAcjB,QAAS,kBAAM+H,EAAK/J,MAAMqL,YAAYxL,KAAhE,eACb4C,EAAQ3I,KAAKsG,EAAAtH,EAAAuH,cAAA,UAAQ4C,IAAI,eAAejB,QAAS,kBAAM+H,EAAK/J,MAAMoL,aAAavL,KAAlE,qBACb4C,EAAQ3I,KAAKsG,EAAAtH,EAAAuH,cAACqI,EAAD,CAAezF,IAAI,SAASlL,KAAK,wBAAwB2J,SAAU,kBAAMqI,EAAK/J,MAAMiL,gBAAgBpL,SAGpHA,EAAUkL,SAAYlL,EAAUxD,SAAUwD,EAAUmL,WACrDvI,EAAQ3I,KAAKsG,EAAAtH,EAAAuH,cAAA,UAAQ4C,IAAI,aAAajB,QAAS,kBAAM+H,EAAK/J,MAAMsL,WAAWzL,KAA9D,mBACb4C,EAAQ3I,KAAKsG,EAAAtH,EAAAuH,cAACqI,EAAD,CAAezF,IAAI,SAASlL,KAAK,wBAAwB2J,SAAU,kBAAMqI,EAAK/J,MAAMiL,gBAAgBpL,QAErH4C,EAAQ3I,KACJsG,EAAAtH,EAAAuH,cAACqG,EAAD,CACIzD,IAAI,SACJlL,KAAK,cACLmI,QACIE,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAA,SACI7F,KAAK,OACLrB,MAAO0G,EAAUrE,YACjB+M,SAAU,SAAAC,GAAK,OAAIuB,EAAK/J,MAAMuH,YAAYwC,EAAK/J,MAAMH,UAAW,cAAe2I,EAAMC,OAAOtP,cAMhHsJ,EAAQ3I,KACJsG,EAAAtH,EAAAuH,cAACqG,EAAD,CACIzD,IAAI,OACJlL,KAAK,0BACLmI,QACIE,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAACsF,EAAD,CACIf,OAAQtN,KAAK0I,MAAMH,UACnB5G,KAAK,aACLsM,MAAM,aACNb,WAAY,SAAAjK,GAAK,OAAIsP,EAAK/J,MAAM0E,WAAWqF,EAAK/J,MAAMH,UAAW,aAAcpF,UAOnGnD,KAAK0I,MAAMsH,KAAKjP,QAAQ,YAKhC,IAAIkT,EAAQ,KACZ,IAAyC,IAArCjU,KAAK0I,MAAMsH,KAAKjP,QAAQ,QAAgB,CACxC,IAAImT,EAAc,KACdlU,KAAK0I,MAAMlE,OACX0P,EACIpL,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,YACfF,EAAAtH,EAAAuH,cAACsF,EAAD,CACIf,OAAQtN,KAAK0I,MAAMlE,KACnB7C,KAAK,QACLsM,MAAM,QACNb,WAAY,SAAAjK,GAAK,OAAIsP,EAAK/J,MAAM0E,WAAWqF,EAAK/J,MAAMlE,KAAM,QAASrB,QAMrF,IAAIsH,EAAU,KACVzK,KAAKgK,MAAMsH,cACX7G,EACI3B,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,YACfF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,eADJ,IACe/I,KAAK0I,MAAMH,UAAU9F,IAEpCqG,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,UAAUsC,MAAO,CAAE0B,QAAwC,IAA/BhN,KAAK0I,MAAMH,UAAU5F,MAAc,GAAK,SAC/EmG,EAAAtH,EAAAuH,cAAA,eADJ,IACe/I,KAAKmU,SAEpBrL,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,UAAUsC,MAAO,CAAE0B,QAAwC,KAA/BhN,KAAK0I,MAAMH,UAAU7B,MAAe,GAAK,SAChFoC,EAAAtH,EAAAuH,cAAA,kBADJ,IACkB/I,KAAK0I,MAAMH,UAAU7B,OAEvCoC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAACqL,EAAD,CAAmB7L,UAAWvI,KAAK0I,MAAMH,aAE7CO,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,UAAUsC,MAAO,CAAE0B,QAA+C,KAAtChN,KAAK0I,MAAMH,UAAU9B,aAAsB,GAAK,SACvFqC,EAAAtH,EAAAuH,cAAA,0BADJ,IAC0B/I,KAAK0I,MAAMH,UAAU9B,cAE/CqC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,UAAUsC,MAAO,CAAE0B,QAAyC,KAAhChN,KAAK0I,MAAMH,UAAU5B,OAAgB,GAAK,SACjFmC,EAAAtH,EAAAuH,cAAA,mBADJ,IACmB/I,KAAK0I,MAAMH,UAAU5B,QAExCmC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,UAAUsC,MAAO,CAAE0B,QAAgD,KAAvChN,KAAK0I,MAAMH,UAAUlC,OAAOC,OAAgB,GAAK,SACxFwC,EAAAtH,EAAAuH,cAAA,+BADJ,IAC+B/I,KAAK0I,MAAMH,UAAUlC,OAAOC,QAE3DwC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,UAAUsC,MAAO,CAAE0B,QAAoD,KAA3ChN,KAAK0I,MAAMH,UAAUlC,OAAOE,WAAoB,GAAK,SAC5FuC,EAAAtH,EAAAuH,cAAA,mCADJ,IACmC/I,KAAK0I,MAAMH,UAAUlC,OAAOE,YAE/DuC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,UAAUsC,MAAO,CAAE0B,QAAgD,KAAvChN,KAAK0I,MAAMH,UAAUlC,OAAOG,OAAgB,GAAK,SACxFsC,EAAAtH,EAAAuH,cAAA,8BADJ,IAC8B/I,KAAK0I,MAAMH,UAAUlC,OAAOG,QAE1DsC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,UAAUsC,MAAO,CAAE0B,QAAsD,KAA7ChN,KAAK0I,MAAMH,UAAUxB,oBAA6B,GAAK,SAC9F+B,EAAAtH,EAAAuH,cAAA,iCADJ,IACiC/I,KAAK0I,MAAMH,UAAUxB,qBAEtD+B,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,UAAUsC,MAAO,CAAE0B,QAAyC,KAAhChN,KAAK0I,MAAMH,UAAU3B,OAAgB,GAAK,SACjFkC,EAAAtH,EAAAuH,cAAA,mBADJ,IACmB/I,KAAK0I,MAAMH,UAAU3B,QAExCkC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,UAAUsC,MAAO,CAAE0B,QAA4C,KAAnChN,KAAK0I,MAAMH,UAAUpD,UAAmB,GAAK,SACpF2D,EAAAtH,EAAAuH,cAAA,sBADJ,IACsB/I,KAAK0I,MAAMH,UAAUpD,WAE3C2D,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,UAAUsC,MAAO,CAAE0B,QAA4C,KAAnChN,KAAK0I,MAAMH,UAAU1B,UAAmB,GAAK,SACpFiC,EAAAtH,EAAAuH,cAAA,sBADJ,IACsB/I,KAAK0I,MAAMH,UAAU1B,WAE3CiC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,YACfF,EAAAtH,EAAAuH,cAACsL,EAAD,CAAa9L,UAAWvI,KAAK0I,MAAMH,cAK/C0L,EACInL,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,SACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,oBACXF,EAAAtH,EAAAuH,cAAA,SAAI/I,KAAKkP,gBAEZgF,EACAzJ,IAI8B,IAAvCzK,KAAK0I,MAAMsH,KAAKjP,QAAQ,YACxBkT,EACInL,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,SACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,oBACXF,EAAAtH,EAAAuH,cAAA,SAAI/I,KAAKkP,gBAEbpG,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,YACfF,EAAAtH,EAAAuH,cAACsF,EAAD,CACIf,OAAQtN,KAAK0I,MAAMH,UACnB5G,KAAK,KACLsM,MAAM,aACNR,QAAS,CAAC,EAAG,IACbL,WAAY,SAAAjK,GAAK,OAAIsP,EAAK/J,MAAM0E,WAAWqF,EAAK/J,MAAMH,UAAW,KAAMpF,MAE3E2F,EAAAtH,EAAAuH,cAACsF,EAAD,CACIf,OAAQtN,KAAK0I,MAAMH,UACnB5G,KAAK,SACLsM,MAAM,UACNR,QAAS,CAAC,EAAG,IACbL,WAAY,SAAAjK,GAAK,OAAIsP,EAAK/J,MAAM0E,WAAWqF,EAAK/J,MAAMH,UAAW,SAAUpF,MAE/E2F,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,YACfF,EAAAtH,EAAAuH,cAACsF,EAAD,CACIf,OAAQtN,KAAKgK,MACbrI,KAAK,kBACL8L,QAAS,CAAC,EAAG,IACbL,WAAY,SAAAjK,GAAK,OAAIsP,EAAK6B,YAAYnR,MAE1C2F,EAAAtH,EAAAuH,cAAA,OAAKC,UAAWhJ,KAAKgK,MAAMwH,gBAAkB,EAAI,GAAK,YAClD1I,EAAAtH,EAAAuH,cAAA,UAAQC,UAAU,aAAa0B,QAAS,kBAAM+H,EAAK8B,SAAnD,QACAzL,EAAAtH,EAAAuH,cAAA,UAAQC,UAAU,aAAa0B,QAAS,kBAAM+H,EAAK+B,UAAU,KAA7D,SACA1L,EAAAtH,EAAAuH,cAAA,UAAQC,UAAU,aAAa0B,QAAS,kBAAM+H,EAAKpM,WAAnD,WAEJyC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,UAAUsC,MAAO,CAAE0B,QAAgD,KAAvChN,KAAK0I,MAAMH,UAAUlC,OAAOC,OAAgB,GAAK,SACxFwC,EAAAtH,EAAAuH,cAAA,+BADJ,IAC+B/I,KAAK0I,MAAMH,UAAUlC,OAAOC,QAE3DwC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,UAAUsC,MAAO,CAAE0B,QAAoD,KAA3ChN,KAAK0I,MAAMH,UAAUlC,OAAOE,WAAoB,GAAK,SAC5FuC,EAAAtH,EAAAuH,cAAA,mCADJ,IACmC/I,KAAK0I,MAAMH,UAAUlC,OAAOE,YAE/DuC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,UAAUsC,MAAO,CAAE0B,QAAgD,KAAvChN,KAAK0I,MAAMH,UAAUlC,OAAOG,OAAgB,GAAK,SACxFsC,EAAAtH,EAAAuH,cAAA,8BADJ,IAC8B/I,KAAK0I,MAAMH,UAAUlC,OAAOG,QAE1DsC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,YACfF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAACqL,EAAD,CAAmB7L,UAAWvI,KAAK0I,MAAMH,aAE7CO,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,UAAUsC,MAAO,CAAE0B,QAAqC,IAA5BhN,KAAK0I,MAAMH,UAAU9F,GAAW,GAAK,SAC5EqG,EAAAtH,EAAAuH,cAAA,eADJ,IACe/I,KAAK0I,MAAMH,UAAU9F,IAEpCqG,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,UAAUsC,MAAO,CAAE0B,QAA+C,KAAtChN,KAAK0I,MAAMH,UAAU9B,aAAsB,GAAK,SACvFqC,EAAAtH,EAAAuH,cAAA,0BADJ,IAC0B/I,KAAK0I,MAAMH,UAAU9B,cAE/CqC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,UAAUsC,MAAO,CAAE0B,QAAyC,KAAhChN,KAAK0I,MAAMH,UAAU5B,OAAgB,GAAK,SACjFmC,EAAAtH,EAAAuH,cAAA,mBADJ,IACmB/I,KAAK0I,MAAMH,UAAU5B,QAExCmC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,UAAUsC,MAAO,CAAE0B,QAAwC,KAA/BhN,KAAK0I,MAAMH,UAAU7B,MAAe,GAAK,SAChFoC,EAAAtH,EAAAuH,cAAA,kBADJ,IACkB/I,KAAK0I,MAAMH,UAAU7B,OAEvCoC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,UAAUsC,MAAO,CAAE0B,QAAyC,KAAhChN,KAAK0I,MAAMH,UAAU3B,OAAgB,GAAK,SACjFkC,EAAAtH,EAAAuH,cAAA,mBADJ,IACmB/I,KAAK0I,MAAMH,UAAU3B,QAExCkC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,UAAUsC,MAAO,CAAE0B,QAA4C,KAAnChN,KAAK0I,MAAMH,UAAUpD,UAAmB,GAAK,SACpF2D,EAAAtH,EAAAuH,cAAA,sBADJ,IACsB/I,KAAK0I,MAAMH,UAAUpD,WAE3C2D,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,UAAUsC,MAAO,CAAE0B,QAA4C,KAAnChN,KAAK0I,MAAMH,UAAU1B,UAAmB,GAAK,SACpFiC,EAAAtH,EAAAuH,cAAA,sBADJ,IACsB/I,KAAK0I,MAAMH,UAAU1B,WAE3CiC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,YACfF,EAAAtH,EAAAuH,cAACsL,EAAD,CACI9L,UAAWvI,KAAK0I,MAAMH,UACtByH,KAAK,SACLC,YAAa,SAACF,EAAO0E,EAAO5S,GAAf,OAAyB4Q,EAAK/J,MAAMuH,YAAYF,EAAO0E,EAAO5S,MAE/EiH,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,YACfF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,sBAAf,cAGAF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,UAAUsC,MAAO,CAAE0B,QAAsD,KAA7ChN,KAAK0I,MAAMH,UAAUxB,oBAA6B,GAAK,SAC9F+B,EAAAtH,EAAAuH,cAAA,iCADJ,IACiC/I,KAAK0I,MAAMH,UAAUxB,qBAEtD+B,EAAAtH,EAAAuH,cAAC2L,EAAD,CACInM,UAAWvI,KAAK0I,MAAMH,UACtBlF,OAAQrD,KAAK0I,MAAMrF,OACnB0L,aAAc,kBAAM0D,EAAK/J,MAAMqG,aAAa0D,EAAK/J,MAAMH,YACvDqG,cAAe,SAAAxL,GAAS,OAAIqP,EAAK/J,MAAMkG,cAAc6D,EAAK/J,MAAMH,UAAwBnF,IACxFyL,gBAAiB,SAAAC,GAAW,OAAI2D,EAAK/J,MAAMmG,gBAAgB4D,EAAK/J,MAAMH,UAAwBuG,IAC9FH,oBAAqB,SAACvL,EAAWF,EAAMC,GAAlB,OAA4BsP,EAAK/J,MAAMiG,oBAAoBvL,EAAWF,EAAMC,SAKpE,IAAzCnD,KAAK0I,MAAMsH,KAAKjP,QAAQ,eACqB,IAAzCf,KAAK0I,MAAMsH,KAAKjP,QAAQ,cACxBkT,EACInL,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,oBACXF,EAAAtH,EAAAuH,cAAA,SAAI/I,KAAKkP,gBAEbpG,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,YACfF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,kBADJ,IACkB/I,KAAK0I,MAAMH,UAAU7B,OAAS,KAEhDoC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,mBADJ,IACmB/I,KAAK0I,MAAMH,UAAU3B,QAAU,KAElDkC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,sBADJ,IACsB/I,KAAK0I,MAAMH,UAAUpD,WAAa,KAExD2D,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,sBADJ,IACsB/I,KAAK0I,MAAMH,UAAU1B,WAAa,QAKtB,IAA1C7G,KAAK0I,MAAMsH,KAAKjP,QAAQ,eACxBkT,EACInL,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAACqL,EAAD,CAAmB7L,UAAWvI,KAAK0I,MAAMH,aAE7CO,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,0BADJ,IAC0B/I,KAAK0I,MAAMH,UAAU9B,cAAgB,KAE/DqC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,mBADJ,IACmB/I,KAAK0I,MAAMH,UAAU5B,QAAU,QAKhB,IAA1C3G,KAAK0I,MAAMsH,KAAKjP,QAAQ,eACxBkT,EACInL,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,eADJ,IACe/I,KAAK0I,MAAMH,UAAU9F,IAEpCqG,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,eADJ,IACe/I,KAAKmU,SAEpBrL,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,4BADJ,IAC4B/I,KAAK0I,MAAMH,UAAUlC,OAAOG,QAAU,KAElEsC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,8BADJ,IAC8B/I,KAAK0I,MAAMH,UAAUlC,OAAOC,QAAU,KAEpEwC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,iCADJ,IACiC/I,KAAK0I,MAAMH,UAAUlC,OAAOE,YAAc,KAE3EuC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,iCADJ,IACiC/I,KAAK0I,MAAMH,UAAUxB,qBAAuB,QAK7C,IAAxC/G,KAAK0I,MAAMsH,KAAKjP,QAAQ,aACxBkT,EACInL,EAAAtH,EAAAuH,cAACsL,EAAD,CACI9L,UAAWvI,KAAK0I,MAAMH,UACtByH,KAAK,WACLI,UAAW,SAAAL,GAAK,OAAI0C,EAAK/J,MAAM0H,UAAUL,QAMzD,IAAI5F,EAAS,KACb,IAA2C,IAAvCnK,KAAK0I,MAAMsH,KAAKjP,QAAQ,gBAErB,IAA6C,IAAzCf,KAAK0I,MAAMsH,KAAKjP,QAAQ,iBAE5B,CACH,IAAM4T,EAAa3U,KAAKgK,MAAMsH,YAAc,eAAiB,QAC7DnH,EACIrB,EAAAtH,EAAAuH,cAAA,OAAKC,UAAW2L,EAAYrK,IAAKgC,IAAO9B,IAAI,QAAQE,QAAS,kBAAM+H,EAAKmC,mBAIhF,IAAMjT,GAAQ3B,KAAK0I,MAAMH,UAA0BvI,KAAK0I,MAAMH,UAAwBrE,YAAc,OAC7FlE,KAAK0I,MAAMH,UAAU5G,MACrB,kBAEP,OACImH,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,gBACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,SAASrH,GACvBwI,GAELrB,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,gBACViL,EACDnL,EAAAtH,EAAAuH,cAAA,OAAKuC,MAAO,CAAE0B,QAAS7B,EAAQC,OAAS,EAAI,GAAK,SAC7CtC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,YACfF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAWmC,MAK5C,MAAOlC,GACLC,QAAQC,MAAMF,WAvlBeG,IAAMC,WAA1BgI,EACH/H,aAAe,CACzBxJ,QAAS,KACTmQ,YAAa,KACb7C,WAAY,KACZsF,YAAa,KACbM,cAAe,KACfJ,aAAc,KACdG,YAAa,KACb3C,UAAW,KACX/L,UAAW,KACXG,KAAM,KACN4O,iBAAkB,KAClBH,oBAAqB,KACrB5P,OAAQ,KACR0Q,YAAa,KACbC,WAAY,KACZF,aAAc,KACdD,QAAS,KACTL,OAAQ,KACRF,QAAS,KACTC,UAAW,KACXI,gBAAiB,KACjB/B,SAAU,KACV7C,aAAc,KACdH,cAAe,KACfC,gBAAiB,KACjBF,oBAAqB,UCvDRkG,cAajB,SAAAA,EAAYnM,GAAc,IAAAgB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA3J,KAAA6U,IACtBnL,EAAAC,OAAAE,EAAA,EAAAF,CAAA3J,KAAA2J,OAAAG,EAAA,EAAAH,CAAAkL,GAAA9K,KAAA/J,KAAM0I,KACDsB,MAAQ,CACTsH,aAAa,GAHK5H,+EAQtB1J,KAAKkK,SAAS,CACVoH,aAActR,KAAKgK,MAAMsH,+CAIjB,IAAAjH,EAAArK,KACZ,IACI,IAAMmL,EAAU,GAiBhB,IAhByC,IAArCnL,KAAK0I,MAAMsH,KAAKjP,QAAQ,UACpBf,KAAK0I,MAAMH,UAAUxD,OACrBoG,EAAQ3I,KACJsG,EAAAtH,EAAAuH,cAAA,UAAQ4C,IAAI,gBAAgBjB,QAAS,kBAAML,EAAK3B,MAAMuH,YAAY5F,EAAK3B,MAAMH,UAAW,UAAU,KAAlG,kBAKJ4C,EAAQ3I,KACJsG,EAAAtH,EAAAuH,cAAA,UAAQ4C,IAAI,gBAAgBjB,QAAS,kBAAML,EAAK3B,MAAMuH,YAAY5F,EAAK3B,MAAMH,UAAW,UAAU,KAAlG,gBAKR4C,EAAQ3I,KAAKsG,EAAAtH,EAAAuH,cAACqI,EAAD,CAAezF,IAAI,SAASlL,KAAK,YAAY2J,SAAU,kBAAMC,EAAK3B,MAAMoM,SAASzK,EAAK3B,MAAMH,iBAElE,IAAvCvI,KAAK0I,MAAMsH,KAAKjP,QAAQ,UAAkB,CAC1C,IAAMwH,EAAYvI,KAAK0I,MAAMH,WAEgB,IAAzCvI,KAAK0I,MAAMsH,KAAKjP,QAAQ,eACmB,IAAvCf,KAAK0I,MAAMsH,KAAKjP,QAAQ,YACxBoK,EAAQ3I,KACJsG,EAAAtH,EAAAuH,cAAA,OAAK4C,IAAI,UAAU3C,UAAU,oBACzBF,EAAAtH,EAAAuH,cAACsK,EAAD,CACIzG,UAAU,QACVT,MAAO,SAAAK,GAAG,OAAInC,EAAK3B,MAAM4K,QAAQ/K,EAAWiE,QAIxDrB,EAAQ3I,KACJsG,EAAAtH,EAAAuH,cAACsF,EAAD,CACI1C,IAAI,WACJ2B,OAAQtN,KAAK0I,MAAMH,UACnB5G,KAAK,WACLsM,MAAM,WACNjB,QAAS,SAAAnL,GAAK,OAAIA,EAAQ,QAC1BuL,WAAY,SAAAjK,GAAK,OAAIkH,EAAK3B,MAAM0E,WAAW/C,EAAK3B,MAAMH,UAAW,WAAoB,EAARpF,OAGrFgI,EAAQ3I,KAAKsG,EAAAtH,EAAAuH,cAAA,UAAQ4C,IAAI,YAAYjB,QAAS,kBAAML,EAAK3B,MAAM6K,UAAUhL,KAA5D,sBAE2B,IAAxCvI,KAAK0I,MAAMsH,KAAKjP,QAAQ,YACxBoK,EAAQ3I,KAAKsG,EAAAtH,EAAAuH,cAAA,UAAQ4C,IAAI,SAASjB,QAAS,kBAAML,EAAK3B,MAAM8K,OAAOjL,KAAtD,eAEjB4C,EAAQ3I,KAAKsG,EAAAtH,EAAAuH,cAAA,OAAK4C,IAAI,eAAe3C,UAAU,eAE/CT,EAAUkL,SAAYlL,EAAUxD,QAAWwD,EAAUmL,UACrDvI,EAAQ3I,KAAKsG,EAAAtH,EAAAuH,cAACqI,EAAD,CAAezF,IAAI,SAASlL,KAAK,wBAAwB2J,SAAU,kBAAMC,EAAK3B,MAAMiL,gBAAgBpL,OAEhHA,EAAUkL,UAAWlL,EAAUxD,QAAWwD,EAAUmL,WACjDnL,EAAUqL,SACVzI,EAAQ3I,KAAKsG,EAAAtH,EAAAuH,cAAA,UAAQ4C,IAAI,UAAUjB,QAAS,kBAAML,EAAK3B,MAAMmL,QAAQtL,KAAxD,aACb4C,EAAQ3I,KAAKsG,EAAAtH,EAAAuH,cAAA,UAAQ4C,IAAI,eAAejB,QAAS,kBAAML,EAAK3B,MAAMoL,aAAavL,KAAlE,oCAEb4C,EAAQ3I,KAAKsG,EAAAtH,EAAAuH,cAAA,UAAQ4C,IAAI,cAAcjB,QAAS,kBAAML,EAAK3B,MAAMqL,YAAYxL,KAAhE,eACb4C,EAAQ3I,KAAKsG,EAAAtH,EAAAuH,cAAA,UAAQ4C,IAAI,eAAejB,QAAS,kBAAML,EAAK3B,MAAMoL,aAAavL,KAAlE,qBACb4C,EAAQ3I,KAAKsG,EAAAtH,EAAAuH,cAACqI,EAAD,CAAezF,IAAI,SAASlL,KAAK,wBAAwB2J,SAAU,kBAAMC,EAAK3B,MAAMiL,gBAAgBpL,QAErH4C,EAAQ3I,KACJsG,EAAAtH,EAAAuH,cAACqG,EAAD,CACIzD,IAAI,OACJlL,KAAK,0BACLmI,QACIE,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAACsF,EAAD,CACIf,OAAQtN,KAAK0I,MAAMH,UACnB5G,KAAK,aACLsM,MAAM,aACNb,WAAY,SAAAjK,GAAK,OAAIkH,EAAK3B,MAAM0E,WAAW/C,EAAK3B,MAAMH,UAAW,aAAcpF,WAOlGoF,EAAUkL,SAAYlL,EAAUxD,SAAUwD,EAAUmL,WACrDvI,EAAQ3I,KAAKsG,EAAAtH,EAAAuH,cAAA,UAAQ4C,IAAI,aAAajB,QAAS,kBAAML,EAAK3B,MAAMsL,WAAWzL,KAA9D,mBACb4C,EAAQ3I,KAAKsG,EAAAtH,EAAAuH,cAACqI,EAAD,CAAezF,IAAI,SAASlL,KAAK,wBAAwB2J,SAAU,kBAAMC,EAAK3B,MAAMiL,gBAAgBpL,QAIzH,IAAMwM,GAAQ/U,KAAK0I,MAAMH,UAAUtD,MAAQ,gBACrC,KAAOjF,KAAK0I,MAAMH,UAAUrD,SAAW,iBACvC,WAAalF,KAAK0I,MAAMH,UAAUvF,MAElCgS,EACFlM,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,SACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,8BACXF,EAAAtH,EAAAuH,cAAA,SAAIgM,GACJjM,EAAAtH,EAAAuH,cAAA,OAAKuC,MAAO,CAAE0B,QAAShN,KAAK0I,MAAMH,UAAU/C,IAAM,GAAK,SACnDsD,EAAAtH,EAAAuH,cAAA,KAAGkM,KAAMjV,KAAK0I,MAAMH,UAAU/C,IAAK2L,OAAO,SAAS+D,IAAI,uBAAvD,sBAGRpM,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,YACfF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,sBAAf,aACAF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACVhJ,KAAK0I,MAAMH,UAAUpD,WAAa,KAEvC2D,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,sBAAf,kBACAF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,WAAKD,EAAAtH,EAAAuH,cAAA,oBAAL,IAAqB/I,KAAK0I,MAAMH,UAAUnD,gBAC1C0D,EAAAtH,EAAAuH,cAAA,WAAKD,EAAAtH,EAAAuH,cAAA,0BAAL,IAA2B/I,KAAK0I,MAAMH,UAAUlD,sBAChDyD,EAAAtH,EAAAuH,cAAA,WAAKD,EAAAtH,EAAAuH,cAAA,uBAAL,IAAwB/I,KAAK0I,MAAMH,UAAUjD,qBAKrD2O,EAAQ,MAC6B,IAArCjU,KAAK0I,MAAMsH,KAAKjP,QAAQ,UAEpBkT,EADAjU,KAAKgK,MAAMsH,YAEPxI,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,QACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAcsC,MAAO,CAAE0B,QAAShN,KAAKgK,MAAMsH,YAAc,GAAK,SAA7E,mBACAxI,EAAAtH,EAAAuH,cAAA,SACI7F,KAAK,OACLrB,MAAO7B,KAAK0I,MAAMH,UAAU5G,KAC5BsP,SAAU,SAAAC,GAAK,OAAI7G,EAAK3B,MAAMuH,YAAY5F,EAAK3B,MAAMH,UAAW,OAAQ2I,EAAMC,OAAOtP,UAEzFiH,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAcsC,MAAO,CAAE0B,QAAShN,KAAKgK,MAAMsH,YAAc,GAAK,SAA7E,gBACAxI,EAAAtH,EAAAuH,cAAA,SACI7F,KAAK,OACLrB,MAAO7B,KAAK0I,MAAMH,UAAUvD,OAC5BiM,SAAU,SAAAC,GAAK,OAAI7G,EAAK3B,MAAMuH,YAAY5F,EAAK3B,MAAMH,UAAW,SAAU2I,EAAMC,OAAOtP,UAE3FiH,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,eAAf,SACAF,EAAAtH,EAAAuH,cAAA,SACI7F,KAAK,OACLrB,MAAO7B,KAAK0I,MAAMH,UAAUtD,KAC5BgM,SAAU,SAAAC,GAAK,OAAI7G,EAAK3B,MAAMuH,YAAY5F,EAAK3B,MAAMH,UAAW,OAAQ2I,EAAMC,OAAOtP,UAEzFiH,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,eAAf,UACAF,EAAAtH,EAAAuH,cAAA,SACI7F,KAAK,OACLrB,MAAO7B,KAAK0I,MAAMH,UAAUrD,QAC5B+L,SAAU,SAAAC,GAAK,OAAI7G,EAAK3B,MAAMuH,YAAY5F,EAAK3B,MAAMH,UAAW,UAAW2I,EAAMC,OAAOtP,UAE5FiH,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,eAAf,UACAF,EAAAtH,EAAAuH,cAACsF,EAAD,CACIf,OAAQtN,KAAK0I,MAAMH,UACnB5G,KAAK,QACLyL,WAAY,SAAAjK,GAAK,OAAIkH,EAAK3B,MAAM0E,WAAW/C,EAAK3B,MAAMH,UAAW,QAASpF,MAE9E2F,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,eAAf,cACAF,EAAAtH,EAAAuH,cAAA,SACI7F,KAAK,OACLrB,MAAO7B,KAAK0I,MAAMH,UAAUpD,UAC5B8L,SAAU,SAAAC,GAAK,OAAI7G,EAAK3B,MAAMuH,YAAY5F,EAAK3B,MAAMH,UAAW,YAAa2I,EAAMC,OAAOtP,UAE9FiH,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,eAAf,oBACAF,EAAAtH,EAAAuH,cAAA,SACI7F,KAAK,OACLrB,MAAO7B,KAAK0I,MAAMH,UAAU/C,IAC5ByL,SAAU,SAAAC,GAAK,OAAI7G,EAAK3B,MAAMuH,YAAY5F,EAAK3B,MAAMH,UAAW,MAAO2I,EAAMC,OAAOtP,WAG5FiH,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,YACfF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,sBAAf,kBACAF,EAAAtH,EAAAuH,cAACsF,EAAD,CACIf,OAAQtN,KAAK0I,MAAMH,UACnB5G,KAAK,iBACLsM,MAAM,UACNb,WAAY,SAAAjK,GAAK,OAAIkH,EAAK3B,MAAM0E,WAAW/C,EAAK3B,MAAMH,UAAW,iBAAkBpF,MAEvF2F,EAAAtH,EAAAuH,cAACsF,EAAD,CACIf,OAAQtN,KAAK0I,MAAMH,UACnB5G,KAAK,uBACLsM,MAAM,gBACNb,WAAY,SAAAjK,GAAK,OAAIkH,EAAK3B,MAAM0E,WAAW/C,EAAK3B,MAAMH,UAAW,uBAAwBpF,MAE7F2F,EAAAtH,EAAAuH,cAACsF,EAAD,CACIf,OAAQtN,KAAK0I,MAAMH,UACnB5G,KAAK,oBACLsM,MAAM,aACNb,WAAY,SAAAjK,GAAK,OAAIkH,EAAK3B,MAAM0E,WAAW/C,EAAK3B,MAAMH,UAAW,oBAAqBpF,OAK1F6R,IAG2B,IAAvChV,KAAK0I,MAAMsH,KAAKjP,QAAQ,YACxBkT,EAAQe,GAGZ,IAAI7K,EAAS,KACb,IAA2C,IAAvCnK,KAAK0I,MAAMsH,KAAKjP,QAAQ,eAErB,CACH,IAAM4T,EAAa3U,KAAKgK,MAAMsH,YAAc,eAAiB,QAC7DnH,EAASrB,EAAAtH,EAAAuH,cAAA,OAAKC,UAAW2L,EAAYrK,IAAKgC,IAAO9B,IAAI,QAAQE,QAAS,kBAAML,EAAKuK,mBAGrF,IAAMjT,GAAQ3B,KAAK0I,MAAMH,UAA0BvI,KAAK0I,MAAMH,UAAwBrE,YAAc,OAC7FlE,KAAK0I,MAAMH,UAAU5G,MACrB,aAEP,OACImH,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,SAASrH,GACvBwI,GAELrB,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,gBACViL,EACDnL,EAAAtH,EAAAuH,cAAA,OAAKuC,MAAO,CAAE0B,QAAS7B,EAAQC,OAAS,EAAI,GAAK,SAC7CtC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,YACfF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACVmC,MAMvB,MAAOlC,GACLC,QAAQC,MAAMF,WArPUG,IAAMC,WAArBwL,EACHvL,aAAe,CACzBwL,SAAU,KACVf,YAAa,KACbC,WAAY,KACZF,aAAc,KACdD,QAAS,KACTL,OAAQ,KACRF,QAAS,KACTC,UAAW,KACXI,gBAAiB,UClCJwB,mLAEb,IACI,IAAMC,EAAYpV,KAAK0I,MAAMH,UAAUmJ,IAAM,EACvC/O,EAAQ3C,KAAK0I,MAAMH,UAAU5F,MAAQ3C,KAAK0I,MAAMH,UAAUpC,OAC1DkP,EAAarV,KAAK0I,MAAMH,UAAU5F,MAAQ,EAC1C2S,EAAU,IAAMrU,KAAKwQ,IAAI2D,EAAW,GAAKzS,EAE3C2I,EAAQ,GAERA,EADA8J,GAAapV,KAAK0I,MAAMH,UAAU5F,MAC1B,aACDyS,GAAaC,EACZ,eAEA,cAGZ,IAAIE,EAAY,KAChB,GAAIvV,KAAK0I,MAAMH,UAAUpC,OAAS,EAAG,CACjC,IAAMqP,EAAc,IAAMvU,KAAKwQ,IAAIzR,KAAK0I,MAAMH,UAAUpC,OAAQ,GAAKxD,EACrE4S,EAAYzM,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAWsC,MAAO,CAAE9D,MAAOgO,EAAc,OAGxE,OACI1M,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,YACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAWsC,EAAOA,MAAO,CAAE9D,MAAO8N,EAAU,OAChDC,GAGX,MAAOtM,GACLC,QAAQC,MAAMF,WA9BiBG,IAAMC,WC2B5BoM,2LAUQC,GAAsC,IAAAhM,EAAA1J,KACvD2V,EAAmC,KAyBvC,GAvBA3V,KAAK0I,MAAMT,IAAIZ,MAAM7G,OAAO,SAAAoV,GACxB,MAAwB,SAApBlM,EAAKhB,MAAMsH,MACO,SAAX4F,EAAE1S,OAGdrC,QAAQ,SAAA+U,GACFD,GAUDA,EAAWE,KAAO5U,KAAK0Q,IAAIgE,EAAWE,KAAMD,EAAEtO,GAC9CqO,EAAWG,KAAO7U,KAAKwQ,IAAIkE,EAAWG,KAAMF,EAAEtO,EAAIsO,EAAEpO,MAAQ,GAC5DmO,EAAWI,KAAO9U,KAAK0Q,IAAIgE,EAAWI,KAAMH,EAAErO,GAC9CoO,EAAWK,KAAO/U,KAAKwQ,IAAIkE,EAAWK,KAAMJ,EAAErO,EAAIqO,EAAEnO,OAAS,IAZ7DkO,EAAa,CACTE,KAAMD,EAAEtO,EACRwO,KAAMF,EAAEtO,EAAIsO,EAAEpO,MAAQ,EACtBuO,KAAMH,EAAErO,EACRyO,KAAMJ,EAAErO,EAAIqO,EAAEnO,OAAS,EACvBD,MAAO,EACPC,OAAQ,MAUfkO,EAAY,CAEb,GAAwB,cAApB3V,KAAK0I,MAAMsH,KACX,OAAO,KAGX2F,EAAa,CACTE,KAAM,EACNC,KAAM,EACNC,KAAM,EACNC,KAAM,EACNxO,MAAO,EACPC,OAAQ,GAchB,OATAkO,EAAWE,MAAQH,EACnBC,EAAWG,MAAQJ,EACnBC,EAAWI,MAAQL,EACnBC,EAAWK,MAAQN,EAGnBC,EAAWnO,MAAQ,EAAImO,EAAWG,KAAOH,EAAWE,KACpDF,EAAWlO,OAAS,EAAIkO,EAAWK,KAAOL,EAAWI,KAE9CJ,0CAIP,OAAQ3V,KAAK0I,MAAMsH,MACf,IAAK,YACD,OAAO,EACX,IAAK,OACL,IAAK,SACD,OAAO,GACX,QACI,OAAO,oCAIF1I,EAAWC,EAAWC,EAAeC,EAAgBwO,GAClE,IAAMC,EAAalW,KAAKmW,gBAExB,MAAO,CACHC,KAAM,QAAUF,EAAa,SAAW5O,EAAI2O,EAAcJ,MAAQ,IAClEQ,IAAK,QAAUH,EAAa,SAAW3O,EAAI0O,EAAcF,MAAQ,IACjEvO,MAAO,SAAW0O,EAAa,QAAU1O,EAAQ,WACjDC,OAAQ,SAAWyO,EAAa,QAAUzO,EAAS,6CAI3C,IAAA4C,EAAArK,KACZ,IACI,IAAM0V,EAA8B,SAApB1V,KAAK0I,MAAMsH,KAAmB,EAAI,EAC5CiG,EAAgBjW,KAAKsW,iBAAiBZ,GAC5C,IAAKO,EACD,OACInN,EAAAtH,EAAAuH,cAAA,0BAKR,IAAMwN,EAAO,GACb,GAAwB,SAApBvW,KAAK0I,MAAMsH,KACX,IAAK,IAAIzI,EAAI0O,EAAcF,KAAMxO,IAAM0O,EAAcD,KAAO,IAAKzO,EAC7D,IAAK,IAAID,EAAI2O,EAAcJ,KAAMvO,IAAM2O,EAAcH,KAAO,IAAKxO,EAAG,CAChE,IAAMkP,EAAYxW,KAAKyW,SAASnP,EAAGC,EAAG,EAAG,EAAG0O,GAC5CM,EAAK/T,KACDsG,EAAAtH,EAAAuH,cAAC2N,EAAD,CACI/K,IAAKrE,EAAI,IAAMC,EACfD,EAAGA,EACHC,EAAGA,EACH+D,MAAOkL,EACP9L,QAAS,kBAAML,EAAK3B,MAAMiO,kBAAkB,OAC5CC,cAAe,SAACC,EAAMC,GAAP,OAAgBzM,EAAK3B,MAAMqO,WAAWF,EAAMC,OAQ/E,IAAME,EAAQhX,KAAK0I,MAAMT,IAAIZ,MACxB7G,OAAO,SAAAoV,GAAC,MAAe,SAAXA,EAAE1S,OACd+E,IAAI,SAAA2N,GACD,IAAMqB,EAAY5M,EAAKoM,SAASb,EAAEtO,EAAGsO,EAAErO,EAAGqO,EAAEpO,MAAOoO,EAAEnO,OAAQwO,GAC7D,OACInN,EAAAtH,EAAAuH,cAACmO,EAAD,CACIvL,IAAKiK,EAAE1V,GACPiX,KAAMvB,EACNtK,MAAO2L,EACPG,WAAgC,SAApB/M,EAAK3B,MAAMsH,KACvBjE,SAAU1B,EAAK3B,MAAM2O,iBAAmBzB,EAAE1V,GAC1CoX,UAA+B,cAApBjN,EAAK3B,MAAMsH,KACtB9E,OAAQ,SAAAhL,GAAE,MAAwB,SAApBmK,EAAK3B,MAAMsH,KAAkB3F,EAAK3B,MAAMiO,kBAAkBzW,GAAM,UAM1FqX,EAAwB,GACJ,SAApBvX,KAAK0I,MAAMsH,OACXuH,EAASvX,KAAK0I,MAAMT,IAAIZ,MACnB7G,OAAO,SAAAoV,GAAC,MAAgB,YAAXA,EAAE1S,MAAmC,OAAX0S,EAAE1S,OACzC+E,IAAI,SAAA2N,GACD,IAAM4B,EAAanN,EAAKoM,SAASb,EAAEtO,EAAGsO,EAAErO,EAAGqO,EAAEpO,MAAOoO,EAAEnO,OAAQwO,GACxD1N,EAAY8B,EAAK3B,MAAM3E,WAAW3D,KAAK,SAAA0D,GAAC,OAAIA,EAAE5D,KAAO0V,EAAE1V,KAC7D,OAAIqI,EAEIO,EAAAtH,EAAAuH,cAAC0O,EAAD,CACI9L,IAAKiK,EAAE1V,GACPY,MAAO8U,EACPrN,UAAWA,EACX+C,MAAOkM,EACPE,OAA4B,cAApBrN,EAAK3B,MAAMsH,KACnBoH,WAAgC,WAApB/M,EAAK3B,MAAMsH,KACvBjE,SAAU1B,EAAK3B,MAAM2O,iBAAoBzB,EAAE1V,GAC3CgL,OAAQ,SAAAhL,GAAE,OAAImK,EAAK3B,MAAMiO,kBAAkBzW,MAKhD,OAEVM,OAAO,SAAAmX,GAAE,OAAW,OAAPA,KAItB,IAAMC,EAAc,GACpB,GAAI5X,KAAK0I,MAAMmP,YACX,IAAK,IAAIC,EAAQ7B,EAAcF,KAAM+B,IAAU7B,EAAcD,KAAO,IAAK8B,EACrE,IAAK,IAAIC,EAAQ9B,EAAcJ,KAAMkC,IAAU9B,EAAcH,KAAO,IAAKiC,EAAO,CAC5E,IAAMC,EAAehY,KAAKyW,SAASsB,EAAOD,EAAO,EAAG,EAAG7B,GACvD2B,EAAYpV,KACRsG,EAAAtH,EAAAuH,cAAC2N,EAAD,CACI/K,IAAKoM,EAAQ,IAAMD,EACnBxQ,EAAGyQ,EACHxQ,EAAGuQ,EACHxM,MAAO0M,EACPC,SAAS,EACTvN,QAAS,SAACmM,EAAMC,GAAP,OAAgBzM,EAAK3B,MAAMwP,kBAAkBrB,EAAMC,OAOhF,IAAMxL,EAAQ,aAAetL,KAAK0I,MAAMsH,KACxC,OACIlH,EAAAtH,EAAAuH,cAAA,OAAKC,UAAWsC,EAAOZ,QAAS,kBAAML,EAAK3B,MAAMiO,kBAAkB,QAC/D7N,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,OAAOsC,MAAO,CAAE7D,OAAUzH,KAAKmW,gBAAkBF,EAAcxO,OAAU,EAAK,OACxF8O,EACAS,EACAO,EACAK,IAIf,MAAO3O,GACLC,QAAQC,MAAMF,WApMYG,IAAMC,WAAvBoM,EACHnM,aAAe,CACzBvF,WAAY,KACZ8T,aAAa,EACbR,eAAgB,KAChBV,kBAAmB,KACnBI,WAAY,KACZmB,kBAAmB,UA2MrBC,gLAMYlP,GACVA,EAAE+B,kBACEhL,KAAK0I,MAAMgC,SACX1K,KAAK0I,MAAMgC,QAAQ1K,KAAK0I,MAAMpB,EAAGtH,KAAK0I,MAAMnB,uCAIhC0B,GAChBA,EAAE+B,kBACEhL,KAAK0I,MAAMkO,eACX5W,KAAK0I,MAAMkO,cAAc5W,KAAK0I,MAAMpB,EAAGtH,KAAK0I,MAAMnB,oCAI1C,IAAA2E,EAAAlM,KACRsL,EAAQ,cAKZ,OAJItL,KAAK0I,MAAMuP,UACX3M,GAAS,iBAITxC,EAAAtH,EAAAuH,cAAA,OACIC,UAAWsC,EACXA,MAAOtL,KAAK0I,MAAM4C,MAClBZ,QAAS,SAAAzB,GAAC,OAAIiD,EAAKC,MAAMlD,IACzB2N,cAAe,SAAA3N,GAAC,OAAIiD,EAAKkM,YAAYnP,aA/B5BG,IAAMC,WAAzB8O,EACY7O,aAAe,CACzB2O,SAAS,EACTrB,cAAe,UA2CjByB,iLACapP,GACPjJ,KAAK0I,MAAM0O,aACXnO,EAAE+B,kBACFhL,KAAK0I,MAAMwC,OAAOlL,KAAK0I,MAAMyO,KAAKjX,sCAI1B,IAAAgS,EAAAlS,KACRsL,EAAQ,QAAUtL,KAAK0I,MAAMyO,KAAKzP,QAQtC,OAPI1H,KAAK0I,MAAMqD,WACXT,GAAS,aAETtL,KAAK0I,MAAM4O,YACXhM,GAAS,cAITxC,EAAAtH,EAAAuH,cAAA,OACIC,UAAWsC,EACXA,MAAOtL,KAAK0I,MAAM4C,MAClBZ,QAAS,SAAAzB,GAAC,OAAIiJ,EAAKhH,OAAOjC,aArBpBG,IAAMC,WAqCtBiP,iLACarP,GACPjJ,KAAK0I,MAAM0O,aACXnO,EAAE+B,kBACFhL,KAAK0I,MAAMwC,OAAOlL,KAAK0I,MAAM5H,MAAMZ,sCAI3B,IAAAuS,EAAAzS,KACRsL,EAAQ,SAAWtL,KAAK0I,MAAM5H,MAAMoC,KACpClD,KAAK0I,MAAMqD,WACXT,GAAS,aAETtL,KAAK0I,MAAMH,UAAUqL,UACrBtI,GAAS,YAGb,IAAIiN,EAAW,KACXC,EAAU,KACVC,EAAgB,KAChBC,EAAkB,KACtB,IAAK1Y,KAAK0I,MAAMgP,OAAQ,CACpB,IAAM/V,EAAO3B,KAAK0I,MAAMH,UAAUrE,aAAelE,KAAK0I,MAAMH,UAAU5G,KACtE4W,EACIzP,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,YAAYrH,EAAKf,MAAM,KAAKqH,IAAI,SAAAmK,GAAC,OAAIA,EAAE,MAGxB,YAA9BpS,KAAK0I,MAAMH,UAAUrF,OACrBsV,EACI1P,EAAAtH,EAAAuH,cAAC4P,EAAD,CAAepQ,UAAWvI,KAAK0I,MAAMH,aAIzCvI,KAAK0I,MAAMH,UAAUqQ,SAAW,IAChCH,EACI3P,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,kBAAf,WAIJhJ,KAAK0I,MAAMH,UAAUqQ,SAAW,IAChCH,EACI3P,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,kBAAf,WAIHhJ,KAAK0I,MAAMH,UAAUkG,YAAgBzO,KAAK0I,MAAMH,UAAUkG,WAAWrD,OAAS,IAC/EsN,EACI5P,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,SAAf,WAKZ,OACIF,EAAAtH,EAAAuH,cAAA,OACI6C,MAAO5L,KAAK0I,MAAMH,UAAUrE,aAAelE,KAAK0I,MAAMH,UAAU5G,KAChEqH,UAAWsC,EACXA,MAAOtL,KAAK0I,MAAM4C,MAClBZ,QAAS,SAAAzB,GAAC,OAAIwJ,EAAKvH,OAAOjC,KAEzBsP,EACAC,EACAC,EACAC,UA9DMtP,IAAMC,WC7TRwP,mLACD,IAAAnP,EAAA1J,KACZ,IACI,IAAIiI,EAAM,KAWV,OAVIjI,KAAK0I,MAAMrF,OAAO4E,MAClBA,EACIa,EAAAtH,EAAAuH,cAAC+P,EAAD,CACI7Q,IAAKjI,KAAK0I,MAAMrF,OAAO4E,IACvB+H,KAAK,YACLjM,WAAY/D,KAAK0I,MAAMrF,OAAOU,cAMtC+E,EAAAtH,EAAAuH,cAAA,OAAKC,UAAWhJ,KAAK0I,MAAMqD,SAAW,qBAAuB,YAAarB,QAAS,kBAAMhB,EAAKhB,MAAMqQ,aAAarP,EAAKhB,MAAMrF,UACxHyF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAWhJ,KAAK0I,MAAMrF,OAAO1B,MAAQ,kBACpDmH,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,QAAf,aAAiChJ,KAAK0I,MAAMrF,OAAOgF,WAClDJ,GAGX,MAAOgB,GACLC,QAAQC,MAAMF,WAtBkBG,IAAMC,4BCM7B2P,cASjB,SAAAA,EAAYtQ,GAAc,IAAAgB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA3J,KAAAgZ,IACtBtP,EAAAC,OAAAE,EAAA,EAAAF,CAAA3J,KAAA2J,OAAAG,EAAA,EAAAH,CAAAqP,GAAAjP,KAAA/J,KAAM0I,KAEDsB,MAAQ,CACTiP,WAAW,GAJOvP,6EAStB1J,KAAKkK,SAAS,CACV+O,WAAYjZ,KAAKgK,MAAMiP,6CAIf,IAAA5O,EAAArK,KACZ,IACI,GAAIA,KAAK0I,MAAMwQ,OACX,OAAO,KAGX,IAAIzQ,EAAU,KACd,GAAIzI,KAAK0I,MAAMD,QAAS,CACpB,IAAI0Q,EAAW,KACXnZ,KAAK0I,MAAM0Q,YACXD,EACIrQ,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,QAAQsB,IAAK+O,IAAO7O,IAAI,QAAQE,QAAS,kBAAML,EAAK3B,MAAM2Q,YAIjF,IAAIlP,EAAS,KACb,GAAInK,KAAK0I,MAAM4Q,WAAY,CACvB,IAAMhO,EAAQtL,KAAKgK,MAAMiP,UAAY,eAAiB,QACtD9O,EACIrB,EAAAtH,EAAAuH,cAAA,OAAKC,UAAWsC,EAAOhB,IAAKgC,IAAO9B,IAAI,QAAQE,QAAS,kBAAML,EAAKkP,iBAI3E9Q,EACIK,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,SAAShJ,KAAK0I,MAAMD,SAClC0B,EACAgP,GAKb,IAAIK,EAAQ,GAKZ,OAJKxZ,KAAK0I,MAAME,QAAQwC,OAAS,GAAMpL,KAAKgK,MAAMiP,YAC9CO,EAAQxZ,KAAK0I,MAAME,SAInBE,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cACVP,EACDK,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,kDACVwQ,IAIf,MAAOvQ,GACLC,QAAQC,MAAMF,WArEaG,IAAMC,WAAxB2P,EACH1P,aAAe,CACzBb,QAAS,KACTyQ,QAAQ,EACRE,WAAW,EACXE,YAAY,EACZD,MAAO,UCuBMI,cACjB,SAAAA,EAAY/Q,GAAc,IAAAgB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA3J,KAAAyZ,IACtB/P,EAAAC,OAAAE,EAAA,EAAAF,CAAA3J,KAAA2J,OAAAG,EAAA,EAAAH,CAAA8P,GAAA1P,KAAA/J,KAAM0I,KAEDsB,MAAQ,CACT0P,gBAAiB,KACjBC,cAAe,MALGjQ,kFASCxJ,GACvBF,KAAKkK,SAAS,CACVwP,gBAAiBxZ,6CAIAA,GACrBF,KAAKkK,SAAS,CACVyP,cAAezZ,uCAIJqI,GAAqD,IAAA8B,EAAArK,KAChEgQ,EAAO,SACPhQ,KAAK0I,MAAMrF,QAAUrD,KAAK0I,MAAMrF,OAAO4E,MACvC+H,GAAQ,YAERA,GADchQ,KAAK0I,MAAMrF,OAAO4E,IAAIZ,MAAMjH,KAAK,SAAAwV,GAAC,OAAIA,EAAE1V,KAAOqI,EAAUrI,KACvD,UAAY,YAGhC,OAAQqI,EAAUrF,MACd,IAAK,KACD,OACI4F,EAAAtH,EAAAuH,cAAC6Q,EAAD,CACIjO,IAAI,WACJpD,UAAWA,EACXyH,KAAMA,EACNC,YAAa,SAAC3C,EAAQpK,EAAMrB,GAAf,OAAyBwI,EAAK3B,MAAMuH,YAAY3C,EAAQpK,EAAMrB,IAC3EuL,WAAY,SAACE,EAAQpK,EAAMC,GAAf,OAAyBkH,EAAK3B,MAAM0E,WAAWE,EAAQpK,EAAMC,IACzE4Q,YAAa,SAAAjQ,GAAC,OAAIuG,EAAK3B,MAAMqL,YAAYjQ,IACzCkQ,WAAY,SAAAlQ,GAAC,OAAIuG,EAAK3B,MAAMsL,WAAWlQ,IACvCgQ,aAAc,SAAAhQ,GAAC,OAAIuG,EAAK3B,MAAMoL,aAAahQ,IAC3C6P,gBAAiB,SAAA7P,GAAC,OAAIuG,EAAK3B,MAAMiL,gBAAgB7P,IACjD0P,OAAQ,SAAA1P,GAAC,OAAIuG,EAAKwP,iBAAiB/V,EAAE5D,KACrCoT,QAAS,SAACxP,EAAG0I,GAAJ,OAAYnC,EAAK3B,MAAM4K,QAAQxP,EAAqB0I,IAC7D+G,UAAW,SAAAzP,GAAC,OAAIuG,EAAK3B,MAAM6K,UAAUzP,IACrC+P,QAAS,SAAA/P,GAAC,OAAIuG,EAAK3B,MAAMmL,QAAQ/P,MAG7C,IAAK,UACD,OACIgF,EAAAtH,EAAAuH,cAAC+Q,EAAD,CACInO,IAAI,WACJpD,UAAWA,EACXyH,KAAMA,EACN3M,OAAQrD,KAAK0I,MAAMrF,OACnB4M,YAAa,SAACnM,EAAGZ,EAAMrB,GAAV,OAAoBwI,EAAK3B,MAAMuH,YAAYnM,EAAGZ,EAAMrB,IACjEuL,WAAY,SAACtJ,EAAGZ,EAAMC,GAAV,OAAoBkH,EAAK3B,MAAM0E,WAAWtJ,EAAGZ,EAAMC,IAC/D4Q,YAAa,SAAAjQ,GAAC,OAAIuG,EAAK3B,MAAMqL,YAAYjQ,IACzCkQ,WAAY,SAAAlQ,GAAC,OAAIuG,EAAK3B,MAAMsL,WAAWlQ,IACvCgQ,aAAc,SAAAhQ,GAAC,OAAIuG,EAAK3B,MAAMoL,aAAahQ,IAC3C6P,gBAAiB,SAAA7P,GAAC,OAAIuG,EAAK3B,MAAMiL,gBAAgB7P,IACjDiL,aAAc,SAAAjL,GAAC,OAAIuG,EAAK3B,MAAMqG,aAAajL,IAC3C8K,cAAe,SAAC9K,EAAGV,GAAJ,OAAkBiH,EAAK3B,MAAMkG,cAAc9K,EAA0BV,IACpFyL,gBAAiB,SAAC/K,EAAGgL,GAAJ,OAAoBzE,EAAK3B,MAAMmG,gBAAgB/K,EAA0BgL,IAC1FH,oBAAqB,SAAC7K,EAAGZ,EAAMC,GAAV,OAAoBkH,EAAK3B,MAAM0E,WAAWtJ,EAAGZ,EAAMC,IACxEqQ,OAAQ,SAAA1P,GAAC,OAAIuG,EAAKwP,iBAAiB/V,EAAE5D,KACrCoT,QAAS,SAACxP,EAAG0I,GAAJ,OAAYnC,EAAK3B,MAAM4K,QAAQxP,EAA0B0I,IAClE+G,UAAW,SAAAzP,GAAC,OAAIuG,EAAK3B,MAAM6K,UAAUzP,IACrC+P,QAAS,SAAC/P,GAAD,OAAOuG,EAAK3B,MAAMmL,QAAQ/P,IACnC8N,SAAU,SAAC9N,EAAG4N,EAAIG,GAAR,OAAiBxH,EAAK3B,MAAMkJ,SAAS9N,EAA0B4N,EAAIG,MAGzF,QACI,OAAO,gDAIOvK,EAAWC,GAAW,IAAA2E,EAAAlM,KAC5C,GAAIA,KAAK0I,MAAMrF,OAAQ,CACnB,IAAMkF,EAAYvI,KAAK0I,MAAMrF,OAAOU,WAAW3D,KAAK,SAAA0D,GAAC,OAAIA,EAAE5D,KAAOgM,EAAKlC,MAAM2P,gBACzEpR,GACAvI,KAAK0I,MAAM8K,OAAOjL,EAAWjB,EAAGC,GAEpCvH,KAAK6Z,iBAAiB,wCAId,IAAA3H,EAAAlS,KACZ,IACI,GAAIA,KAAK0I,MAAMrF,OAAQ,CACnB,IAAMuQ,EAAyB,GAC3BH,EAAyB,GACzB1O,EAAwB,GACtB2O,EAA0B,GA4EhC,GA1EA1T,KAAK0I,MAAMrF,OAAOU,WAAWlD,QAAQ,SAAA0H,GAoBjC,GAnBIA,EAAUqL,SACVA,EAAQpR,KACJsG,EAAAtH,EAAAuH,cAAA,OAAK4C,IAAKpD,EAAUrI,IACfgS,EAAK6H,WAAWxR,MAIzBA,EAAUkL,SAAYlL,EAAUxD,QAAWwD,EAAUmL,UACrDD,EAAQjR,KACJsG,EAAAtH,EAAAuH,cAACiR,GAAD,CACIrO,IAAKpD,EAAUrI,GACfqI,UAAWA,EACX2C,OAAQ,SAAApH,GAAC,OAAIoO,EAAK+H,mBAAmBnW,EAAE5D,KACvC6L,SAAUxD,EAAUrI,KAAOgS,EAAKlI,MAAM0P,gBACtCtM,WAAY,SAACtJ,EAAGZ,EAAMC,GAAV,OAAoB+O,EAAKxJ,MAAM0E,WAAWtJ,EAAGZ,EAAMC,IAC/D6Q,WAAY,SAAAlQ,GAAC,OAAIoO,EAAKxJ,MAAMsL,WAAWlQ,QAI9CyE,EAAUkL,SAAWlL,EAAUxD,SAAWwD,EAAUmL,SACrD,OAAQnL,EAAUrF,MACd,IAAK,KACD6B,EAAOvC,KACHsG,EAAAtH,EAAAuH,cAACmR,GAAD,CACIvO,IAAKpD,EAAUrI,GACfqI,UAAWA,EACXlF,OAAQ6O,EAAKxJ,MAAMrF,OACnB6H,OAAQ,SAAApH,GAAC,OAAIoO,EAAK+H,mBAAmBnW,EAAE5D,KACvC6L,SAAUxD,EAAUrI,KAAOgS,EAAKlI,MAAM0P,mBAG9C,MACJ,IAAK,UACD3U,EAAOvC,KACHsG,EAAAtH,EAAAuH,cAACoR,GAAD,CACIxO,IAAKpD,EAAUrI,GACfqI,UAAWA,EACXlF,OAAQ6O,EAAKxJ,MAAMrF,OACnB6H,OAAQ,SAAApH,GAAC,OAAIoO,EAAK+H,mBAAmBnW,EAAE5D,KACvC6L,SAAUxD,EAAUrI,KAAOgS,EAAKlI,MAAM0P,mBAM1D,IAAKnR,EAAUkL,UAAYlL,EAAUxD,QAAUwD,EAAUmL,SACrD,OAAQnL,EAAUrF,MACd,IAAK,KACDwQ,EAASlR,KACLsG,EAAAtH,EAAAuH,cAACmR,GAAD,CACIvO,IAAKpD,EAAUrI,GACfqI,UAAWA,EACXlF,OAAQ6O,EAAKxJ,MAAMrF,OACnB6H,OAAQ,SAAApH,GAAC,OAAIoO,EAAK+H,mBAAmBnW,EAAE5D,KACvC6L,SAAUxD,EAAUrI,KAAOgS,EAAKlI,MAAM0P,mBAG9C,MACJ,IAAK,UACDhG,EAASlR,KACLsG,EAAAtH,EAAAuH,cAACoR,GAAD,CACIxO,IAAKpD,EAAUrI,GACfqI,UAAWA,EACXlF,OAAQ6O,EAAKxJ,MAAMrF,OACnB6H,OAAQ,SAAApH,GAAC,OAAIoO,EAAK+H,mBAAmBnW,EAAE5D,KACvC6L,SAAUxD,EAAUrI,KAAOgS,EAAKlI,MAAM0P,sBAQ1D1Z,KAAK0I,MAAM0R,UAAgC,IAAnB3G,EAAQrI,OAAe,CAC/C,IAAMiP,EACFvR,EAAAtH,EAAAuH,cAAA,OAAK4C,IAAI,gBACL7C,EAAAtH,EAAAuH,cAACS,EAAD,CACIX,WAAY,kBACRC,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,sDACAF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,uEAMpByK,EAAU,CAAC4G,GAAaC,OAAO7G,GAGnC,GAAIzT,KAAK0I,MAAM0R,UAAgC,IAAnBxG,EAAQxI,OAAe,CAC/C,IAAMmP,EAEFzR,EAAAtH,EAAAuH,cAAA,OAAK4C,IAAI,eACL7C,EAAAtH,EAAAuH,cAACS,EAAD,CACIX,WAAY,kBACRC,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,uHACAF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,oEAA0FF,EAAAtH,EAAAuH,cAAA,uBAA1F,oCAOpBhE,EAAS,CAACwV,GAAYD,OAAOvV,GAGV,IAAnB6O,EAAQxI,QACRwI,EAAQpR,KACJsG,EAAAtH,EAAAuH,cAACS,EAAD,CACImC,IAAI,UACJ9C,WAAY,kBACRC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,4DAMhB,IAAIwR,EAAsB,KAC1B,GAAIxa,KAAK0I,MAAMrF,OAAO8E,cAAciD,OAAS,EAAG,CAC5C,IAAMjD,EAAgBnI,KAAK0I,MAAMrF,OAAO8E,cAAcF,IAAI,SAAAtD,GAAC,OACvDmE,EAAAtH,EAAAuH,cAAC0R,GAAD,CACI9O,IAAKhH,EAAEzE,GACPwa,aAAc/V,EACd0U,MAAO,SAACqB,EAAc7L,GAAf,OAAmCqD,EAAKxJ,MAAM2Q,MAAMqB,EAAc7L,QAGjF2L,EACI1R,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,iBACVb,GAKb,IAAIwS,EAAa,KACb3a,KAAK0I,MAAMrF,OAAO4E,MAClB0S,EACI7R,EAAAtH,EAAAuH,cAAC+P,EAAD,CACI7Q,IAAKjI,KAAK0I,MAAMrF,OAAO4E,IACvB+H,KAAK,SACL6H,YAA0C,OAA7B7X,KAAKgK,MAAM2P,cACxB5V,WAAY/D,KAAK0I,MAAMrF,OAAOU,WAC9BsT,eAAgBrX,KAAKgK,MAAM0P,gBAAkB1Z,KAAKgK,MAAM0P,qBAAkB/M,EAC1EgK,kBAAmB,SAAAzW,GACXA,GACAgS,EAAK+H,mBAAmB/Z,IAGhCgY,kBAAmB,SAAC5Q,EAAGC,GAAJ,OAAU2K,EAAK0I,kBAAkBtT,EAAGC,OAKnE,IAAIsT,EAAoB,KACxB,GAAI7a,KAAKgK,MAAM0P,gBAAiB,CAC5B,IAAMnR,EAAYvI,KAAK0I,MAAMrF,OAAOU,WAAW3D,KAAK,SAAA0D,GAAC,OAAIA,EAAE5D,KAAOgS,EAAKlI,MAAM0P,kBACzEnR,IAAcA,EAAUqL,UACxBiH,EAAoB7a,KAAK+Z,WAAWxR,IAc5C,OAXKsS,IACDA,EACI/R,EAAAtH,EAAAuH,cAACS,EAAD,CACImC,IAAI,WACJ9C,WAAY,kBACRC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,sDAOZF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,+BACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,+CACXF,EAAAtH,EAAAuH,cAAC+R,EAAD,CACIrS,QAAQ,oBACRG,QAASgL,KAGjB9K,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,+CACVwR,EACD1R,EAAAtH,EAAAuH,cAAC+R,EAAD,CACIrS,QAAQ,sCACRG,QAAS6K,EACTyF,OAA2B,IAAnBzF,EAAQrI,OAChBkO,YAAY,IAEfqB,EACD7R,EAAAtH,EAAAuH,cAAC+R,EAAD,CACIrS,QAAQ,8BACRG,QAAS7D,EACTmU,OAA0B,IAAlBnU,EAAOqG,SAEnBtC,EAAAtH,EAAAuH,cAAC+R,EAAD,CACIrS,QAAQ,WACRG,QAAS8K,EACTwF,OAA4B,IAApBxF,EAAStI,OACjBkO,YAAY,KAGpBxQ,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,+CACXF,EAAAtH,EAAAuH,cAAC+R,EAAD,CACIrS,QAAQ,qBACRG,QAAS,CAACiS,OAM1B,IAAIE,EAAO,KACP/a,KAAK0I,MAAM0R,WACXW,EACIjS,EAAAtH,EAAAuH,cAACiS,EAAD,OAIR,IAAMC,EAAyB,GAY/B,OAXAjb,KAAK0I,MAAMuS,QAAQpa,QAAQ,SAAAiD,GACvBmX,EAAQzY,KACJsG,EAAAtH,EAAAuH,cAACmS,EAAD,CACIvP,IAAK7H,EAAE5D,GACPmD,OAAQS,EACRiI,UAAU,EACVgN,aAAc,SAAA1V,GAAM,OAAI6O,EAAKxJ,MAAMyS,gBAAgB9X,SAM3DyF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,+BACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,2DACV+R,EACDjS,EAAAtH,EAAAuH,cAAA,UAAQ2B,QAAS,kBAAMwH,EAAKxJ,MAAM0S,iBAAlC,sBACCH,GAELnS,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,iDAI7B,MAAOC,GACLC,QAAQC,MAAMF,WAjVuBG,IAAMC,WA2VjDgS,qLAEE,OAAQrb,KAAK0I,MAAMgS,aAAaxX,MAC5B,IAAK,iBACL,IAAK,gBACD,IAAME,EAAYpD,KAAK0I,MAAMgS,aAAapS,KACtClF,EAAUE,WAEuB,UAA5BF,EAAUE,SAASJ,MAAkD,WAA5BE,EAAUE,SAASJ,OAC7DE,EAAUE,SAASxB,OAAS,EACK,IAA7BsB,EAAUE,SAASxB,MAEnB9B,KAAKqZ,OAAM,GAEXrZ,KAAKqZ,UAIjB,MACJ,IAAK,iBAEarZ,KAAK0I,MAAMgS,aAAapS,KAChCrB,KAAO,EACbjH,KAAKqZ,yCAKsB,IAAzBxK,EAAyBnC,UAAAtB,OAAA,QAAAuB,IAAAD,UAAA,IAAAA,UAAA,GACnC1M,KAAK0I,MAAM2Q,MAAMrZ,KAAK0I,MAAMgS,aAAc7L,oCAG9B,IAAA4D,EAAAzS,KACNuI,EAAYvI,KAAK0I,MAAMgS,aAAanS,UACpCnF,EAAYpD,KAAK0I,MAAMgS,aAAapS,KACpCyH,EAAQ/P,KAAK0I,MAAMgS,aAAapS,KAEhC3G,EAAO4G,EAAUrE,aAAeqE,EAAU5G,MAAQ,kBACxD,OAAQ3B,KAAK0I,MAAMgS,aAAaxX,MAC5B,IAAK,iBACD,IAAMI,EAAWF,EAAUE,SACvBE,EAAWF,EAASE,SAASpC,WAIjC,MAHiB,UAAboC,IACAA,EAAWA,EAASC,eAGpBqF,EAAAtH,EAAAuH,cAAA,OAAK4C,IAAK3L,KAAK0I,MAAMgS,aAAaxa,GAAI8I,UAAU,gBAC5CF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,QACVrH,EADL,gBACwB6B,EADxB,oBACmDF,EAASK,QAE5DmF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,UAAQ2B,QAAS,kBAAM+H,EAAK6I,YAA5B,WACAxS,EAAAtH,EAAAuH,cAAA,UAAQ2B,QAAS,kBAAM+H,EAAK4G,UAA5B,WAIhB,IAAK,gBACD,OACIvQ,EAAAtH,EAAAuH,cAAA,OAAK4C,IAAK3L,KAAK0I,MAAMgS,aAAaxa,GAAI8I,UAAU,gBAC5CF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,QACVrH,EADL,uCAC+CyB,EAAUzB,MAEzDmH,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,UAAQ2B,QAAS,kBAAM+H,EAAK4G,UAA5B,WAIhB,IAAK,iBACD,OACIvQ,EAAAtH,EAAAuH,cAAA,OAAK4C,IAAK3L,KAAK0I,MAAMgS,aAAaxa,GAAI8I,UAAU,gBAC5CF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,QACVrH,EADL,4BACoCoO,EAAMpO,KAD1C,KACkDoO,EAAM/I,MADxD,KAGA8B,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,UAAQ2B,QAAS,kBAAM+H,EAAK6I,YAA5B,YACAxS,EAAAtH,EAAAuH,cAAA,UAAQ2B,QAAS,kBAAM+H,EAAK4G,UAA5B,WAIhB,QACI,OAAO,aAhFSjQ,IAAMC,WA6FhCkS,gMAEE,OAAIvb,KAAK0I,MAAMqD,SACJ,WAGJ,qCAGK9C,GACZA,EAAE+B,kBACEhL,KAAK0I,MAAMwC,QACXlL,KAAK0I,MAAMwC,OAAOlL,KAAK0I,MAAMH,4CAIrB,IAAAiT,EAAAxb,KACRsL,EAAQ,iBAAmBtL,KAAK0I,MAAMH,UAAUrF,KAKpD,OAJIlD,KAAK0I,MAAMH,UAAUqL,SAAW5T,KAAK0I,MAAMqD,YAC3CT,GAAS,cAITxC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAWsC,EAAOZ,QAAS,SAAAzB,GAAC,OAAIuS,EAAK9Q,QAAQzB,KAC9CH,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,QACVhJ,KAAK0I,MAAMH,UAAUrE,aAAelE,KAAK0I,MAAMH,UAAU5G,MAAQ,YAClEmH,EAAAtH,EAAAuH,cAAA,QAAMC,UAAU,QAAQhJ,KAAKyb,uBAEjC3S,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAACsF,EAAD,CACIf,OAAQtN,KAAK0I,MAAMH,UACnB5G,KAAK,aACLsM,MAAM,aACNb,WAAY,SAAAjK,GAAK,OAAIqY,EAAK9S,MAAM0E,WAAWoO,EAAK9S,MAAMH,UAAW,aAAcpF,MAEnF2F,EAAAtH,EAAAuH,cAAA,UAAQ2B,QAAS,SAAAzB,GAAOA,EAAE+B,kBAAmBwQ,EAAK9S,MAAMsL,WAAWwH,EAAK9S,MAAMH,aAA9E,6BAnCca,IAAMC,WAiDlCqS,gMAEE,OAAI1b,KAAK0I,MAAMH,UAAUqL,QACd,eAGP5T,KAAK0I,MAAMqD,SACJ,WAGJ,qCAGK9C,GACZA,EAAE+B,kBACGhL,KAAK0I,MAAMH,UAAUqL,SAAY5T,KAAK0I,MAAMqD,WAAY/L,KAAK0I,MAAMwC,QACpElL,KAAK0I,MAAMwC,OAAOlL,KAAK0I,MAAMH,4CAIrB,IAAAoT,EAAA3b,KACRsL,EAAQ,iBAAmBtL,KAAK0I,MAAMH,UAAUrF,MAChDlD,KAAK0I,MAAMH,UAAUqL,SAAW5T,KAAK0I,MAAMqD,YAC3CT,GAAS,cAGb,IAAMyJ,GAAQ/U,KAAK0I,MAAMH,UAAUtD,MAAQ,gBACjC,KAAOjF,KAAK0I,MAAMH,UAAUrD,SAAW,iBACvC,WAAalF,KAAK0I,MAAMH,UAAUvF,MAEtC4Y,EAAQ,GASd,OARI5b,KAAK0I,MAAMrF,OAAO4E,MACbjI,KAAK0I,MAAMH,UAAUkL,SAAYzT,KAAK0I,MAAMrF,OAAO4E,IAAIZ,MAAMjH,KAAK,SAAAwV,GAAC,OAAIA,EAAE1V,KAAOyb,EAAKjT,MAAMH,UAAUrI,MACtG0b,EAAMpZ,KACFsG,EAAAtH,EAAAuH,cAAA,OAAK4C,IAAI,aAAa3C,UAAU,QAAhC,oBAMRF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAWsC,EAAOZ,QAAS,SAAAzB,GAAC,OAAI0S,EAAKjR,QAAQzB,KAC9CH,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,QACVhJ,KAAK0I,MAAMH,UAAUrE,aAAelE,KAAK0I,MAAMH,UAAU5G,MAAQ,YACjE3B,KAAK0I,MAAMH,UAAUvD,OAAS,MAAQhF,KAAK0I,MAAMH,UAAUvD,OAAS,GACrE8D,EAAAtH,EAAAuH,cAAA,QAAMC,UAAU,QAAQhJ,KAAKyb,uBAEjC3S,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,qBACV+L,GAEJ6G,WAlDDxS,IAAMC,WAgEpBwS,gMAEE,OAAI7b,KAAK0I,MAAMH,UAAUqL,QACd,eAGP5T,KAAK0I,MAAMqD,SACJ,WAGJ,qCAGK9C,GACZA,EAAE+B,kBACGhL,KAAK0I,MAAMH,UAAUqL,SAAY5T,KAAK0I,MAAMqD,WAAY/L,KAAK0I,MAAMwC,QACpElL,KAAK0I,MAAMwC,OAAOlL,KAAK0I,MAAMH,4CAIrB,IAAAuT,EAAA9b,KACRsL,EAAQ,iBAAmBtL,KAAK0I,MAAMH,UAAUrF,MAChDlD,KAAK0I,MAAMH,UAAUqL,SAAW5T,KAAK0I,MAAMqD,YAC3CT,GAAS,cAGb,IAAIoG,GAAM1R,KAAK0I,MAAMH,UAAUmJ,GAAK1R,KAAK0I,MAAMH,UAAUmJ,GAAK,GAAGtQ,WAC7DpB,KAAK0I,MAAMH,UAAUpC,OAAS,IAC9BuL,GAAM,IAAM1R,KAAK0I,MAAMH,UAAUpC,QAGrC,IAAI4V,EAAQ,KACP/b,KAAK0I,MAAMH,UAAUkL,UACtBsI,EACIjT,EAAAtH,EAAAuH,cAAC4P,EAAD,CAAepQ,UAAWvI,KAAK0I,MAAMH,aAI7C,IAAIkG,EAAa,KACbzO,KAAK0I,MAAMH,UAAUkG,aACrBA,EAAazO,KAAK0I,MAAMH,UAAUkG,WAAWxG,IAAI,SAAAnE,GAC7C,IAAInC,EAAOmC,EAAEnC,KACE,eAAXmC,EAAEnC,OACFA,GAAQ,KAAOmC,EAAEd,MAAQ,KAEb,WAAXc,EAAEnC,MAAuBmC,EAAErD,OAC5BkB,EAAOmC,EAAErD,MAETqD,EAAER,WACF3B,GAAQ,IAAM/B,EAAMqP,sBAAsBnL,EAAGgY,EAAKpT,MAAMrF,SAI5D,IAFA,IAAM6L,EAAc,GACdzO,EAAOb,EAAMuP,cAAcrL,GACxBa,EAAI,EAAGA,IAAMlE,EAAK2K,SAAUzG,EACjCuK,EAAY1M,KAAKsG,EAAAtH,EAAAuH,cAAA,MAAI4C,IAAKhH,EAAGqE,UAAU,kBAAkBvI,EAAKkE,KAElE,OACImE,EAAAtH,EAAAuH,cAAA,OAAK4C,IAAK7H,EAAE5D,GAAI8I,UAAU,aACtBF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,kBAAkBrH,GACjCmH,EAAAtH,EAAAuH,cAAA,UACKmG,OAOrB,IAAM0M,EAAQ,GASd,OARI5b,KAAK0I,MAAMrF,OAAO4E,MACbjI,KAAK0I,MAAMH,UAAUkL,SAAYzT,KAAK0I,MAAMrF,OAAO4E,IAAIZ,MAAMjH,KAAK,SAAAwV,GAAC,OAAIA,EAAE1V,KAAO4b,EAAKpT,MAAMH,UAAUrI,MACtG0b,EAAMpZ,KACFsG,EAAAtH,EAAAuH,cAAA,OAAK4C,IAAI,aAAa3C,UAAU,QAAhC,oBAMRF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAWsC,EAAOZ,QAAS,SAAAzB,GAAC,OAAI6S,EAAKpR,QAAQzB,KAC9CH,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,QACVhJ,KAAK0I,MAAMH,UAAUrE,aAAelE,KAAK0I,MAAMH,UAAU5G,MAAQ,YAClEmH,EAAAtH,EAAAuH,cAAA,QAAMC,UAAU,QAAQhJ,KAAKyb,uBAEjC3S,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,qBACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,YACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAf,MACAF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAchJ,KAAK0I,MAAMH,UAAU9F,KAEtDqG,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,YACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAc0I,GAC7B5I,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAf,QAGP+S,EACAtN,EACAmN,WA/FIxS,IAAMC,WCplBV2S,wLAEb,OACIlT,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,yBACAF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,0FACAF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,YACfF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,wEAMR,OACIF,EAAAtH,EAAAuH,cAACS,EAAD,CAAUX,WAAY7I,KAAK6I,oBAdGO,IAAMC,uCCD1CgG,GAAW,IAAIC,IAASC,UAWT0M,eACjB,SAAAA,EAAYvT,GAAc,IAAAgB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA3J,KAAAic,IACtBvS,EAAAC,OAAAE,EAAA,EAAAF,CAAA3J,KAAA2J,OAAAG,EAAA,EAAAH,CAAAsS,GAAAlS,KAAA/J,KAAM0I,KAEDsB,MAAQ,CACTsD,OAAQ,MAJU5D,4MASCwS,MAAM,mCAAvBC,cACNnc,cACkBmc,EAAS1b,gCAAvB6M,kBADCpD,4JAUL,OAJKlK,KAAKgK,MAAMsD,QACZtN,KAAKoc,YAILtT,EAAAtH,EAAAuH,cAAA,OAAK+H,wBAAyB,CAAEC,OAAQ1B,GAAS2B,SAAShR,KAAKgK,MAAMsD,QAAU,cAtBhDlE,IAAMC,WCX3CgG,GAAW,IAAIC,IAASC,UAWT8M,eACjB,SAAAA,EAAY3T,GAAc,IAAAgB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA3J,KAAAqc,IACtB3S,EAAAC,OAAAE,EAAA,EAAAF,CAAA3J,KAAA2J,OAAAG,EAAA,EAAAH,CAAA0S,GAAAtS,KAAA/J,KAAM0I,KAEDsB,MAAQ,CACTsD,OAAQ,MAJU5D,4MASCwS,MAAM,sCAAvBC,cACNnc,cACkBmc,EAAS1b,gCAAvB6M,kBADCpD,4JAUL,OAJKlK,KAAKgK,MAAMsD,QACZtN,KAAKoc,YAILtT,EAAAtH,EAAAuH,cAAA,OAAK+H,wBAAyB,CAAEC,OAAQ1B,GAAS2B,SAAShR,KAAKgK,MAAMsD,QAAU,cAtB7ClE,IAAMC,WCJ/BiT,0GAIOC,GACpB,IAAMC,EAAqB,GAE3BD,EAAQ1b,QAAQ,SAAAyM,GACEA,EAAO1M,MAAM,SACrBC,QAAQ,SAAA4b,GACNA,GACAH,EAAcI,eAAeD,EAAMD,OAK/CF,EAAcE,MAAQA,yCAGIC,EAAcD,GACxCC,EAAOE,OAAOC,aAAa,EAAG,GAAKH,EAAOE,OAAOC,aAAa,GAE9D,IAH4D,IAAAC,EAAA,SAGnDC,GACL,IAAMC,EAAON,EAAKO,OAAOF,EAAQ,EAAG,GAC9BG,EAAOR,EAAKO,OAAOF,EAAO,GAE5BjN,EAAO2M,EAAMpc,KAAK,SAAAkH,GAAC,OAAIA,EAAEyV,OAASA,IACjClN,IACDA,EAAO,CACHkN,KAAMA,EACNG,KAAM,IAEVV,EAAMha,KAAKqN,IAGf,IAAIqN,EAAOrN,EAAKqN,KAAK9c,KAAK,SAAAkH,GAAC,OAAIA,EAAE2V,OAASA,IACrCC,IACDA,EAAO,CACHD,KAAMA,EACNnb,MAAO,GAEX+N,EAAKqN,KAAK1a,KAAK0a,IAGnBA,EAAKpb,OAAS,GAtBTgb,EAAQ,EAAGA,IAAUL,EAAKrR,SAAU0R,EAAOD,EAA3CC,oCA0BUK,GAKnB,IAJA,IAAMC,EAAkB,GAEpBC,EAAW,EAEPD,EAAMhS,OAAS+R,GAAqBE,EAHpB,KAGiD,CACrE,IAAMZ,EAAOH,EAAcgB,cACvBb,IAASW,EAAM7c,SAASkc,GACxBW,EAAM5a,KAAKia,GAEXY,GAAY,EAIpB,OAAOD,wCAMP,IAFA,IAAIX,EAAOE,OAAOC,aAAa,EAAG,GADTW,EAAA,WAIrB,IAAMR,EAAON,EAAKO,OAAOP,EAAKrR,OAAS,EAAG,GAEpCyE,EAAOyM,EAAcE,MAAMpc,KAAK,SAAAkH,GAAC,OAAIA,EAAEyV,OAASA,IACtD,IAAIlN,EAeA,OAAA2N,EAAO,MAdP,IAAIC,EAAa,GACjB5N,EAAKqN,KAAKrc,QAAQ,SAAAqc,GACdO,GAAcP,EAAKD,KAAKS,OAAOR,EAAKpb,SAGxC,IAAMgb,EAAQ7b,KAAKC,MAAMD,KAAKE,SAAWsc,EAAWrS,QAC9C6R,EAAOQ,EAAWX,GACxB,GAAIG,IAASN,OAAOC,aAAa,GAE7B,OAAAY,EADAf,EAAOA,EAAKO,OAAO,IAGnBP,GAAQQ,KAhBP,KAAAU,EAAAJ,IAAA,qBAAAI,EAAA,OAAAA,EAAAH,YApEAlB,GAEFE,MAAqB,+CCAnBoB,iLAKH3U,GACVA,EAAE+B,kBACFhL,KAAK0I,MAAMuH,aAAajQ,KAAK0I,MAAMmV,0CAGvB,IAAAnU,EAAA1J,KACZ,IACI,IAAIsL,EAAQ,WAQZ,OAPItL,KAAK0I,MAAMmV,UACXvS,GAAS,YAETtL,KAAK0I,MAAMkC,WACXU,GAAS,aAITxC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAWsC,EAAOZ,QAAS,SAAAzB,GAAC,OAAIS,EAAKyC,MAAMlD,KAC5CH,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,QAAQsB,IAAKtK,KAAK0I,MAAMmV,QAAUA,KAAUC,KAAWtT,IAAI,UAC1E1B,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,kBAAkBhJ,KAAK0I,MAAMuF,QAItD,MAAOpD,GAEL,OADA3B,QAAQC,MAAM0B,GACP,aA7BmBzB,IAAMC,WAAvBuU,GACHtU,aAAe,CACzBsB,UAAU,OCHGmT,oLAOD,IAAArU,EAAA1J,KACZ,IACI,IAAIsL,EAAQtL,KAAK0I,MAAMsV,KAAO,gBAAkB,iBAC5Che,KAAK0I,MAAMkC,WACXU,GAAS,aAMb,IAHA,IAAM2S,EAAcje,KAAK0I,MAAMuV,YAAcje,KAAK0I,MAAMuV,YAAcje,KAAK0I,MAAMyC,QAAQC,OACnF8S,EAAWjd,KAAKkd,KAAKne,KAAK0I,MAAMyC,QAAQC,OAAS6S,GACjDG,EAA+B,GAC5BzZ,EAAI,EAAGA,IAAMuZ,IAAYvZ,EAC9ByZ,EAAY5b,KAAK,IAGrBxC,KAAK0I,MAAMyC,QAAQtK,QAAQ,SAAA2K,GACvB,IAAMsR,EAAQpT,EAAKhB,MAAMyC,QAAQpK,QAAQyK,GACnC6S,EAAWpd,KAAKC,MAAM4b,EAAQmB,GACxBG,EAAYC,GACpB7b,KACAsG,EAAAtH,EAAAuH,cAACuV,GAAD,CACI3S,IAAKH,EAAOtL,GACZsL,OAAQA,EACRO,SAAUP,EAAOtL,KAAOwJ,EAAKhB,MAAM6C,WACnCzJ,MAAOmc,EACP/S,OAAQ,SAACD,GAAD,OAAsBvB,EAAKhB,MAAMwC,OAAOD,SAK5D,IAAMsT,EAAcH,EAAYnW,IAAI,SAAAuW,GAChC,IAAM1B,EAAQsB,EAAYrd,QAAQyd,GAClC,OAAO1V,EAAAtH,EAAAuH,cAAA,OAAK4C,IAAKmR,GAAQ0B,KAG7B,OACI1V,EAAAtH,EAAAuH,cAAA,OAAKC,UAAWsC,GACXiT,GAGX,MAAO1T,GAEL,OADA3B,QAAQC,MAAM0B,GACP,aAhDmBzB,IAAMC,WAAvB0U,GACHzU,aAAe,CACzB0U,MAAM,EACNpT,UAAU,EACVqT,YAAa,UAwDfQ,iLACYxV,GACVA,EAAE+B,kBACGhL,KAAK0I,MAAM8C,OAAOZ,UACnB5K,KAAK0I,MAAMwC,OAAOlL,KAAK0I,MAAM8C,OAAOtL,qCAI5B,IAAAmK,EAAArK,KACZ,IACI,IAAMwH,EAAQ,wBAA0BxH,KAAK0I,MAAM5G,MAAQ,YAEvDwJ,EAAQ,SAQZ,OAPItL,KAAK0I,MAAMqD,WACXT,GAAS,aAETtL,KAAK0I,MAAM8C,OAAOZ,WAClBU,GAAS,aAITxC,EAAAtH,EAAAuH,cAAA,OAAK4C,IAAK3L,KAAK0I,MAAM8C,OAAOtL,GAAI8I,UAAWsC,EAAOA,MAAO,CAAE9D,MAAOA,GAASoE,MAAO5L,KAAK0I,MAAM8C,OAAO/K,KAAMiK,QAAS,SAAAzB,GAAC,OAAIoB,EAAK8B,MAAMlD,KAC9HjJ,KAAK0I,MAAM8C,OAAO/K,MAG7B,MAAOoK,GAEL,OADA3B,QAAQC,MAAM0B,GACP,aA3BUzB,IAAMC,WCjDdqV,eACjB,SAAAA,EAAYhW,GAAc,IAAAgB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA3J,KAAA0e,IACtBhV,EAAAC,OAAAE,EAAA,EAAAF,CAAA3J,KAAA2J,OAAAG,EAAA,EAAAH,CAAA+U,GAAA3U,KAAA/J,KAAM0I,KAEDsB,MAAQ,CACTuS,QAAS,GACToC,OAAQ,IALUjV,8EAUtB,MAAO,CACH,WACA,SACA,YACA,WACA,QACA,SACA,QACA,UACA,SACA,SACA,QACA,WACA,QACA,YACA,YACA,QACA,UACA,WACA,UACA,SACA,SACA,SACA,UACA,aACA,aACA,QACA,UACA,QACA,UACA,WACA,YACA,UACA,aACA,UACA,WACA,UACA,SACA,UACA,QACA,SACA,UACA,UACA,UACA,OACA,UACA,QACA,UACA,6CAKJ,MAAO,CACH,CACI/H,KAAM,WACNwD,UAAW,CAAC,WAAY,QAAS,YAErC,CACIxD,KAAM,WACNwD,UAAW,CAAC,QAAS,SAAU,YAEnC,CACIxD,KAAM,SACNwD,UAAW,CAAC,UAAW,UAAW,UAEtC,CACIxD,KAAM,SACNwD,UAAW,CAAC,WAAY,SAAU,WAEtC,CACIxD,KAAM,MACNwD,UAAW,CAAC,aAAc,UAAW,2FAKvByZ,0FACC1C,MAAM,gBAAkB0C,EAAW,sBAApDzC,kBAC+BA,EAAS1b,cAA9CT,KAAKgK,MAAMuS,QAAQqC,UACnB5e,KAAKkK,SAAS,CACVqS,QAASvc,KAAKgK,MAAMuS,oJAILqC,UACZ5e,KAAKgK,MAAMuS,QAAQqC,GAC1B5e,KAAKkK,SAAS,CACVqS,QAASvc,KAAKgK,MAAMuS,4CAIVsC,GAAoB,IAAAxU,EAAArK,KAC5B8e,EAAS9e,KAAK+e,aAAa3e,KAAK,SAAAT,GAAC,OAAIA,EAAEgC,OAASkd,IAClDC,GACA9e,KAAKkK,SAAS,CACVqS,QAAS,GACToC,OAAQ,IACT,WACCG,EAAO3Z,UAAUtE,QAAQ,SAAAme,GACrB3U,EAAK4U,YAAYD,0CAMd,IAAA9S,EAAAlM,KACTuc,EAAoB,GAC1B5S,OAAOuV,KAAKlf,KAAKgK,MAAMuS,SAAS1b,QAAQ,SAAA8K,GACpC,IAAMrB,EAAM4B,EAAKlC,MAAMuS,QAAQ5Q,GAC/B4Q,EAAQ/Z,KAAK8H,KAEjBgS,GAAc6C,UAAU5C,GACxBvc,KAAKkK,SAAS,CACVyU,OAAQrC,GAAc8C,SAAS,sCAIvB,IAAAlN,EAAAlS,KACNqf,EAAgBrf,KAAK+e,aAAa9W,IAAI,SAAAtI,GACxC,MAAO,CACHO,GAAIP,EAAEgC,KACNlB,KAAMd,EAAEgC,QAIZ2d,EAAiB,SACrBtf,KAAK+e,aAAale,QAAQ,SAAAlB,GACLgK,OAAOuV,KAAKhN,EAAKlI,MAAMuS,SAAShb,OAAOge,KAAK,QAC7C5f,EAAEwF,UAAU5D,OAAOge,KAAK,QAEpCD,EAAiB3f,EAAEgC,QAqB3B,IAjBA,IAAMwD,EAAYnF,KAAKwf,eAClBvX,IAAI,SAAA+W,GACD,IAAMjT,EAAWpC,OAAOuV,KAAKhN,EAAKlI,MAAMuS,SAAShc,SAASye,GAC1D,OACIlW,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,SAAS2C,IAAKqT,GACzBlW,EAAAtH,EAAAuH,cAAC0W,GAAD,CACIxR,MAAO+Q,EACPnB,QAAS9R,EACTkE,YAAa,SAAApO,GAAK,OAAIA,EAAQqQ,EAAK+M,YAAYD,GAAQ9M,EAAKwN,eAAeV,SAMzFW,EAAgBhW,OAAOuV,KAAKlf,KAAKgK,MAAMuS,SAASnR,OAAS,EAEzDuT,EAAS,GACNha,EAAI,EAAGA,IAAM3E,KAAKgK,MAAM2U,OAAOvT,SAAUzG,EAC9Cga,EAAOnc,KACHsG,EAAAtH,EAAAuH,cAAA,OAAK4C,IAAKhH,EAAGqE,UAAU,8CAClBhJ,KAAKgK,MAAM2U,OAAOha,KAK/B,OACImE,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,YACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAf,WACAF,EAAAtH,EAAAuH,cAAC6W,GAAD,CACIzU,QAASkU,EACT9T,WAAY+T,EACZpU,OAAQ,SAAAD,GAAQ,OAAIiH,EAAK2N,UAAU5U,MAEvCnC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAf,aACAF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,mEACV7D,GAEL2D,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAf,UACAF,EAAAtH,EAAAuH,cAAA,UAAQC,UAAW2W,EAAgB,GAAK,WAAYjV,QAAS,kBAAMwH,EAAKkN,aAAxE,YACAtW,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,uBACV2V,WA1LuBvV,IAAMC,WCnB5CgG,GAAW,IAAIC,IAASC,UAWTuQ,eACjB,SAAAA,EAAYpX,GAAc,IAAAgB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA3J,KAAA8f,IACtBpW,EAAAC,OAAAE,EAAA,EAAAF,CAAA3J,KAAA2J,OAAAG,EAAA,EAAAH,CAAAmW,GAAA/V,KAAA/J,KAAM0I,KAEDsB,MAAQ,CACTsD,OAAQ,MAJU5D,4MASCwS,MAAM,kCAAvBC,cACNnc,cACkBmc,EAAS1b,gCAAvB6M,kBADCpD,4JAUL,OAJKlK,KAAKgK,MAAMsD,QACZtN,KAAKoc,YAILtT,EAAAtH,EAAAuH,cAAA,OAAK+H,wBAAyB,CAAEC,OAAQ1B,GAAS2B,SAAShR,KAAKgK,MAAMsD,QAAU,cAtBjDlE,IAAMC,WCJ3B0W,oLACD,IAAArW,EAAA1J,KACZ,IACI,OACI8I,EAAAtH,EAAAuH,cAAA,OAAKC,UAAWhJ,KAAK0I,MAAMqD,SAAW,qBAAuB,YAAarB,QAAS,kBAAMhB,EAAKhB,MAAMqQ,aAAarP,EAAKhB,MAAMlJ,UACxHsJ,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAWhJ,KAAK0I,MAAMlJ,OAAOmC,MAAQ,kBACpDmH,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,QAAQhJ,KAAK0I,MAAMlJ,OAAOuV,MAAQ,mBAG3D,MAAO9L,GACLC,QAAQC,MAAMF,WAVoBG,IAAMC,WCO/B2W,wLAEb,MAAO,CACH,CACI9f,GAAI,SACJyB,KAAM,SACNoT,KAAM,yCAEV,CACI7U,GAAI,aACJyB,KAAM,aACNoT,KAAM,kDAEV,CACI7U,GAAI,UACJyB,KAAM,UACNoT,KAAM,mDAEV,CACI7U,GAAI,WACJyB,KAAM,WACNoT,KAAM,2FAMd,OAAQ/U,KAAK0I,MAAMuX,kBACf,IAAK,SACD,OACInX,EAAAtH,EAAAuH,cAACmX,GAAD,MAER,IAAK,aACD,OACIpX,EAAAtH,EAAAuH,cAACoX,GAAD,MAER,IAAK,UACD,OACIrX,EAAAtH,EAAAuH,cAACqX,GAAD,MAER,IAAK,WACD,OACItX,EAAAtH,EAAAuH,cAACsX,GAAD,MAER,QACI,OAAO,uCAIH,IAAA3W,EAAA1J,KACZ,IACI,IAAI+a,EAAO,KACP/a,KAAK0I,MAAM0R,WACXW,EACIjS,EAAAtH,EAAAuH,cAACuX,GAAD,OAOR,IAHA,IAAMC,EAAsBvgB,KAAKwgB,aAE3BC,EAAkB,GACf9b,EAAI,EAAGA,IAAM4b,EAAQnV,SAAUzG,EAAG,CACvC,IAAM+b,EAAIH,EAAQ5b,GAClB8b,EAAgBje,KACZsG,EAAAtH,EAAAuH,cAAC4X,GAAD,CACIhV,IAAK+U,EAAExgB,GACPV,OAAQkhB,EACR3U,SAAU2U,EAAExgB,KAAOF,KAAK0I,MAAMuX,iBAC9BlH,aAAc,SAAAvZ,GAAM,OAAIkK,EAAKhB,MAAMkY,aAAaphB,OAK5D,OACIsJ,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,0BACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,2DACV+R,EACA0F,GAEL3X,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,+CACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,aACVhJ,KAAK6I,gBAKxB,MAAOgC,GACL3B,QAAQC,MAAM0B,WAvFYzB,IAAMC,WCHvBwX,oLACD,IAAAnX,EAAA1J,KACR8gB,EAAe,EACfC,EAAY,EACZxc,EAAyB,GAC7BA,EAAQA,EAAM+V,OAAOta,KAAK0I,MAAMrE,UAAUE,OAC1CvE,KAAK0I,MAAMrE,UAAU6C,MAAMrG,QAAQ,SAAAoR,GAC/B1N,EAAQA,EAAM+V,OAAOrI,EAAK1N,SAE9BA,EAAM1D,QAAQ,SAAA2D,GACVsc,GAAgBtc,EAAK1C,MACrB,IAAMjC,EAAU6J,EAAKhB,MAAMsY,WAAWxc,EAAKE,YAAaF,EAAK2C,kBACzDtH,IACAkhB,GAAanhB,EAAMqhB,WAAWphB,EAAQ+F,WAAapB,EAAK1C,SAIhE,IAEIof,EACAC,EAHEC,EAAaL,EAAYnhB,EAAMyhB,iBAAiBP,GAItD,GAAI9gB,KAAK0I,MAAM4Y,MAAO,CAClB,IAAIC,EAAS,EACTC,EAAW,EACXC,EAAS,EACTC,EAAW,EAET5c,EAAM9E,KAAK0I,MAAM4Y,MAAMxc,IAAItE,OAAO,SAAAmhB,GAAE,OAAIA,EAAG5c,SACjDD,EAAIjE,QAAQ,SAAA8gB,GACRJ,GAAU3hB,EAAMgiB,aAAaD,EAAG3e,MAAO,QACvCwe,GAAY5hB,EAAMgiB,aAAaD,EAAG3e,MAAO,UACzCye,GAAU7hB,EAAMgiB,aAAaD,EAAG3e,MAAO,QACvC0e,GAAY9hB,EAAMgiB,aAAaD,EAAG3e,MAAO,YAG7C,IAAIC,EAAa,KACb4e,EAAqB,KACzB,GAAIT,EAAa,IACbne,EAAa,UACTme,GAAcG,IACdte,EAAa,QAEbme,GAAcI,IACdve,EAAa,UAEbme,GAAcK,IACdxe,EAAa,QAEbme,GAAcM,IACdze,EAAa,UAEjB4e,EAAqB5e,EAEhB6B,EAAIsG,OAAS,GAAOtG,EAAIsG,OAAS,GAAI,CACtC,IAAM0W,EAAQhd,EAAIsG,OAAS,EAC3B,OAAQnI,GACJ,IAAK,UACD4e,EAAqBC,EAAQ,OAAS,UACtC,MACJ,IAAK,OACDD,EAAqBC,EAAQ,SAAW,UACxC,MACJ,IAAK,SACDD,EAAqBC,EAAQ,OAAS,OACtC,MACJ,IAAK,OACDD,EAAqBC,EAAQ,SAAW,SACxC,MACJ,IAAK,SACDD,EAAqBC,EAAQ,SAAW,OACxC,MACJ,QACID,EAAqB,IAMrCX,EACIpY,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,SACXF,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,aAAYF,EAAAtH,EAAAuH,cAAA,kBAC3BD,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,aAAYF,EAAAtH,EAAAuH,cAAA,oBAC3BD,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,aAAYF,EAAAtH,EAAAuH,cAAA,kBAC3BD,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,aAAYF,EAAAtH,EAAAuH,cAAA,qBAE/BD,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,aAAauY,EAA5B,OACAzY,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,aAAawY,EAA5B,OACA1Y,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,aAAayY,EAA5B,OACA3Y,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,aAAa0Y,EAA5B,SAKZ,IAAMK,EAAU,SAACC,GAEb,OAAQ,IAAMA,EADF/gB,KAAKwQ,IAAI2P,EAAwB,IAAXM,IAIhCO,EAAW,SAACD,GACd,OAAO,IAAMD,EAAQC,IAGzBb,EACIrY,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,oBACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,iBACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAcsC,MAAO,CAAE8K,KAAM,IAAK8L,MAAOD,EAASV,GAAU,QAE/EzY,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,iBACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAWsC,MAAO,CAAE8K,KAAM2L,EAAQR,GAAU,IAAKW,MAAOD,EAAST,GAAY,QAEhG1Y,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,iBACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,aAAasC,MAAO,CAAE8K,KAAM2L,EAAQP,GAAY,IAAKU,MAAOD,EAASR,GAAU,QAElG3Y,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,iBACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAWsC,MAAO,CAAE8K,KAAM2L,EAAQN,GAAU,IAAKS,MAAOD,EAASP,GAAY,QAEhG5Y,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,iBACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,aAAasC,MAAO,CAAE8K,KAAM2L,EAAQL,GAAY,IAAKQ,MAAO,QAE/EpZ,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,uBACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,YAAYsC,MAAO,CAAE8K,KAAO2L,EAAQX,GAAc,GAAO,SAGhFtY,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAf,cACAF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,4BAEIF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,SAAS/F,IAE5B6F,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,UAAUsC,MAAO,CAAE0B,QAAU6U,IAAuB5e,EAAc,OAAS,KAA1F,4BAC8B6B,EAAIsG,OADlC,SAEItC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,SAAQF,EAAAtH,EAAAuH,cAAA,SAAI8Y,MAM3C,OACI/Y,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAf,YACAF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,wBAEIF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,SAAS+X,EAAxB,QAEJjY,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,UAAUsC,MAAO,CAAE0B,QAAUoU,IAAeL,EAAa,OAAS,KAAjF,oBACsBD,EADtB,cAEIhY,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,SAASoY,EAAxB,QAEHF,EACAC,UAvJiC/X,IAAMC,WCanC8Y,eACjB,SAAAA,EAAYzZ,GAAc,IAAAgB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA3J,KAAAmiB,IACtBzY,EAAAC,OAAAE,EAAA,EAAAF,CAAA3J,KAAA2J,OAAAG,EAAA,EAAAH,CAAAwY,GAAApY,KAAA/J,KAAM0I,KACDsB,MAAQ,CACTsH,aAAa,EACbgQ,MAAO,MAJW5X,+EAStB1J,KAAKkK,SAAS,CACVoH,aAActR,KAAKgK,MAAMsH,kDAIb3J,GAChB,IAAM2Z,EAAQthB,KAAK0I,MAAM0Z,QAAQhiB,KAAK,SAAAT,GAAC,OAAIA,EAAEO,KAAOyH,IACpD3H,KAAKkK,SAAS,CACVoX,MAAOA,qCAIC,IAAAjX,EAAArK,KACZ,IACI,IAAMqiB,EAAe,GACrB,GAAIriB,KAAK0I,MAAM0Z,QACX,IAAK,IAAIzd,EAAI,EAAGA,IAAM3E,KAAK0I,MAAM0Z,QAAQhX,SAAUzG,EAAG,CAClD,IAAM2c,EAAQthB,KAAK0I,MAAM0Z,QAAQzd,GACjC0d,EAAa7f,KAAK,CACdtC,GAAIohB,EAAMphB,GACVO,KAAM6gB,EAAM3f,OAKxB,IAAM2gB,EACFxZ,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAC+J,EAAD,CACI3H,QAASkX,EACT3W,YAAY,kBACZH,WAAYvL,KAAKgK,MAAMsX,MAAQthB,KAAKgK,MAAMsX,MAAMphB,QAAKyM,EACrDzB,OAAQ,SAAAD,GAAQ,OAAIZ,EAAKkY,YAAYtX,MAEzCnC,EAAAtH,EAAAuH,cAACyZ,GAAD,CACIne,UAAWrE,KAAK0I,MAAM+Z,UACtBnB,MAAOthB,KAAKgK,MAAMsX,MAClBN,WAAY,SAACtc,EAAayC,GAAd,OAAmCkD,EAAK3B,MAAMsY,WAAWtc,EAAayC,OAKxFwN,EAAa3U,KAAKgK,MAAMsH,YAAc,eAAiB,QAEvD7I,EACFK,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,SAAf,aACAF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAW2L,EAAYrK,IAAKgC,IAAO9B,IAAI,QAAQE,QAAS,kBAAML,EAAKuK,oBAI1EhM,EACFE,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,SACI7F,KAAK,OACLwI,YAAY,iBACZ7J,MAAO7B,KAAK0I,MAAM+Z,UAAU9gB,KAC5BsP,SAAU,SAAAC,GAAK,OAAI7G,EAAK3B,MAAMuH,YAAY,OAAQiB,EAAMC,OAAOtP,WAGvEiH,EAAAtH,EAAAuH,cAAA,OAAKuC,MAAO,CAAE0B,QAAShN,KAAKgK,MAAMsH,YAAc,GAAK,SACjDxI,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,YACdsZ,GAELxZ,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,YACfF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,UAAQ2B,QAAS,kBAAML,EAAK3B,MAAMga,YAAlC,kBACA5Z,EAAAtH,EAAAuH,cAACqI,EAAD,CAAe3Q,KAAK,mBAAmB2J,SAAU,kBAAMC,EAAK3B,MAAMia,uBAK9E,OACI7Z,EAAAtH,EAAAuH,cAACS,EAAD,CAAUb,WAAY,kBAAMF,GAASI,WAAY,kBAAMD,KAE7D,MAAOK,GACLC,QAAQC,MAAMF,WAtFiBG,IAAMC,WCpB5BuZ,oLAMb,IACI,IAAIna,EAAU,KACVzI,KAAK0I,MAAMkD,QACXnD,EAAUK,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAUF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,SAAShJ,KAAK0I,MAAMkD,SAG1E,IAAMhD,EAAU5I,KAAK0I,MAAMG,aAE3B,OACIC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cACVP,EACDK,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,gBACVJ,IAIf,MAAOiC,GACL3B,QAAQC,MAAM0B,WAvBazB,IAAMC,WAAxBuZ,GACHtZ,aAAe,CACzBsC,MAAO,MC0CR,IAAMiX,GAAa,CACtB,OACA,QACA,SACA,QACA,OACA,cAGSC,GAAiB,CAC1B,aACA,QACA,YACA,YACA,SACA,YACA,MACA,QACA,QACA,WACA,cACA,OACA,QACA,UAGSC,GAAc,CACvB,QACA,SACA,YACA,OACA,YCtDiBC,eACjB,SAAAA,EAAYta,GAAc,IAAAgB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA3J,KAAAgjB,IACtBtZ,EAAAC,OAAAE,EAAA,EAAAF,CAAA3J,KAAA2J,OAAAG,EAAA,EAAAH,CAAAqZ,GAAAjZ,KAAA/J,KAAM0I,KACDsB,MAAQ,CACTiZ,SAAS,GAHSvZ,2EAQtB1J,KAAKkK,SAAS,CACV+Y,SAAUjjB,KAAKgK,MAAMiZ,2CAIb,IAAA5Y,EAAArK,KACZ,IACI,IACMkjB,EADQ,CAAC,aAAa5I,OAAOuI,IACT5a,IAAI,SAAA5F,GAAI,MAAK,CAAEnC,GAAImC,EAAM5B,KAAM4B,KAGnD8gB,EADa,CAAC,aAAa7I,OAAOwI,IACV7a,IAAI,SAAAmb,GAAG,MAAK,CAAEljB,GAAIkjB,EAAK3iB,KAAM2iB,KAEvDxa,EAAU,KACd,GAAI5I,KAAKgK,MAAMiZ,QACXra,EACIE,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,SACI7F,KAAK,OACLwI,YAAY,OACZ7J,MAAO7B,KAAK0I,MAAMlI,OAAOmB,KACzBsP,SAAU,SAAAC,GAAK,OAAI7G,EAAK3B,MAAMuH,YAAY,OAAQiB,EAAMC,OAAOtP,WAGvEiH,EAAAtH,EAAAuH,cAACsF,EAAD,CACIf,OAAQtN,KAAK0I,MAAMlI,OACnBmB,KAAK,eACLsM,MAAM,SACNjB,QAAS,SAAAnL,GAAK,OAAIjC,EAAMgG,UAAU/D,IAClCuL,WAAY,SAAAjK,GAAK,OAAIkH,EAAK3B,MAAM0E,WAAW,eAAgBjK,MAE/D2F,EAAAtH,EAAAuH,cAACsF,EAAD,CACIf,OAAQtN,KAAK0I,MAAMlI,OACnBmB,KAAK,eACLsM,MAAM,SACNjB,QAAS,SAAAnL,GAAK,OAAIjC,EAAMgG,UAAU/D,IAClCuL,WAAY,SAAAjK,GAAK,OAAIkH,EAAK3B,MAAM0E,WAAW,eAAgBjK,MAE/D2F,EAAAtH,EAAAuH,cAAC+J,EAAD,CACI3H,QAAS+X,EACTxX,YAAY,oBACZH,WAAYvL,KAAK0I,MAAMlI,OAAO6B,KAC9B6I,OAAQ,SAAAD,GAAQ,OAAIZ,EAAK3B,MAAMuH,YAAY,OAAQhF,MAEvDnC,EAAAtH,EAAAuH,cAAC+J,EAAD,CACI3H,QAASgY,EACTzX,YAAY,oBACZH,WAAYvL,KAAK0I,MAAMlI,OAAOiF,SAC9ByF,OAAQ,SAAAD,GAAQ,OAAIZ,EAAK3B,MAAMuH,YAAY,WAAYhF,MAE3DnC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,YACfF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,UAAQ2B,QAAS,kBAAML,EAAK3B,MAAM2a,gBAAlC,sBAIT,CACH,IAAIC,EAAU,GACiB,cAA3BtjB,KAAK0I,MAAMlI,OAAO6B,OAClBihB,GAAWA,EAAU,IAAMtjB,KAAK0I,MAAMlI,OAAO6B,KAAOrC,KAAK0I,MAAMlI,OAAO6B,MAEvC,cAA/BrC,KAAK0I,MAAMlI,OAAOiF,WAClB6d,GAAWA,EAAU,IAAMtjB,KAAK0I,MAAMlI,OAAOiF,SAAWzF,KAAK0I,MAAMlI,OAAOiF,UAE9E6d,GAAW,mBAAqB1jB,EAAMgG,UAAU5F,KAAK0I,MAAMlI,OAAO+iB,cAAgB,OAAS3jB,EAAMgG,UAAU5F,KAAK0I,MAAMlI,OAAOgjB,cAE7H5a,EACIE,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,SACI7F,KAAK,OACLwI,YAAY,OACZ7J,MAAO7B,KAAK0I,MAAMlI,OAAOmB,KACzBsP,SAAU,SAAAC,GAAK,OAAI7G,EAAK3B,MAAMuH,YAAY,OAAQiB,EAAMC,OAAOtP,WAGvEiH,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,WAAkCsa,IAK9C,OACIxa,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,QACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,SAAf,UACAF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAWhJ,KAAKgK,MAAMiZ,QAAU,eAAiB,QAAS3Y,IAAKgC,IAAO9B,IAAI,QAAQE,QAAS,kBAAML,EAAKoZ,gBAE/G3a,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,gBACVJ,IAIf,MAAOK,GACLC,QAAQC,MAAMF,WAvGcG,IAAMC,WClBzBqa,wLAEb,IAAIxT,EAA6B,KAWjC,OATIA,EADiC,IAAjClQ,KAAK0I,MAAMib,WAAWvY,OAElBtC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,0DAIAF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,2DAKJF,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,0CACAF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,+GACAF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,YACdkH,oCAKG,IAAAxG,EAAA1J,KACZ,IACI,OACI8I,EAAAtH,EAAAuH,cAACS,EAAD,CAAUX,WAAY,kBAAMa,EAAKb,gBAEvC,MAAOgC,GACL3B,QAAQC,MAAM0B,WA7BwBzB,IAAMC,WCGnCua,oLACD,IAAAla,EAAA1J,KACZ,IACI,IAAMyI,EACFK,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,SAAf,SAIFJ,EACFE,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,SACI7F,KAAK,OACLwI,YAAY,YACZ7J,MAAO7B,KAAK0I,MAAMuJ,KAAKtQ,KACvBsP,SAAU,SAAAC,GAAK,OAAIxH,EAAKhB,MAAMuH,YAAYvG,EAAKhB,MAAMuJ,KAAM,OAAQf,EAAMC,OAAOtP,WAGxFiH,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,YACfF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAACqI,EAAD,CAAe3Q,KAAK,cAAc2J,SAAU,kBAAMV,EAAKhB,MAAMmb,WAAWna,EAAKhB,MAAMuJ,WAK/F,OACInJ,EAAAtH,EAAAuH,cAACS,EAAD,CAAUb,WAAY,kBAAMF,GAASI,WAAY,kBAAMD,KAE7D,MAAOK,GACLC,QAAQC,MAAMF,WA9BYG,IAAMC,WCHvBya,oLACD,IAAApa,EAAA1J,KACZ,IACI,IAAMuE,EAAQ,GA4Bd,OA1BAvE,KAAK0I,MAAMrE,UAAUE,MAAM1D,QAAQ,SAAA2D,GAC/B,IAAI/D,EAAO+D,EAAKE,aAAe,kBAC3BF,EAAK1C,MAAQ,IACbrB,GAAQ,KAAO+D,EAAK1C,OAExByC,EAAM/B,KAAKsG,EAAAtH,EAAAuH,cAAA,OAAK4C,IAAKnH,EAAKtE,GAAI8I,UAAU,QAAQvI,MAG/B,IAAjB8D,EAAM6G,QACN7G,EAAM/B,KAAKsG,EAAAtH,EAAAuH,cAAA,OAAK4C,IAAI,QAAQ3C,UAAU,QAA3B,gBAGfhJ,KAAK0I,MAAMrE,UAAU6C,MAAMrG,QAAQ,SAAAoR,GAC/B1N,EAAM/B,KAAKsG,EAAAtH,EAAAuH,cAAA,OAAK4C,IAAK,QAAUsG,EAAK/R,GAAI8I,UAAU,mBAAmBiJ,EAAKtQ,MAAQ,iBAClFsQ,EAAK1N,MAAM1D,QAAQ,SAAA2D,GACf,IAAI/D,EAAO+D,EAAKE,aAAe,kBAC3BF,EAAK1C,MAAQ,IACbrB,GAAQ,KAAO+D,EAAK1C,OAExByC,EAAM/B,KAAKsG,EAAAtH,EAAAuH,cAAA,OAAK4C,IAAKnH,EAAKtE,GAAI8I,UAAU,QAAQvI,MAE/B,IAAjB8D,EAAM6G,QACN7G,EAAM/B,KAAKsG,EAAAtH,EAAAuH,cAAA,OAAK4C,IAAK,SAAWsG,EAAK/R,GAAI8I,UAAU,QAAxC,kBAKfF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAWhJ,KAAK0I,MAAMqD,SAAW,qBAAuB,YAAarB,QAAS,kBAAMhB,EAAKhB,MAAMqQ,aAAarP,EAAKhB,MAAMrE,aACxHyE,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAWhJ,KAAK0I,MAAMrE,UAAU1C,MAAQ,qBACtD4C,GAGX,MAAO0E,GACLC,QAAQC,MAAMF,WAtCqBG,IAAMC,WCoChC0a,eACjB,SAAAA,EAAYrb,GAAc,IAAAgB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA3J,KAAA+jB,IACtBra,EAAAC,OAAAE,EAAA,EAAAF,CAAA3J,KAAA2J,OAAAG,EAAA,EAAAH,CAAAoa,GAAAha,KAAA/J,KAAM0I,KACDsB,MAAQ,CACTxJ,OAAQ,CACJmB,KAAM,GACN4hB,aAAc,EACdC,aAAc,EACd/d,SAAU,YACVpD,KAAM,cARQqH,2EAaN7J,GAChB,IAAIa,GAAS,EAEb,GAAIV,KAAK0I,MAAM+Z,UAAW,CACtB,IAAM1iB,EAAQH,EAAMokB,gBAAgBnkB,EAASG,KAAK0I,MAAM5I,SAExDE,KAAK0I,MAAM+Z,UAAUle,MAAM1D,QAAQ,SAAA2D,GAC1BA,EAAK2C,mBAAqBpH,EAAM4B,MAAU6C,EAAKE,cAAgB7E,EAAQ8B,OACxEjB,GAAS,KAKrB,OAAOA,uCAGUb,GACjB,QAAIA,EAAQ+F,UAAY5F,KAAKgK,MAAMxJ,OAAO+iB,kBAItC1jB,EAAQ+F,UAAY5F,KAAKgK,MAAMxJ,OAAOgjB,kBAIX,KAA3BxjB,KAAKgK,MAAMxJ,OAAOmB,OACb/B,EAAMgR,MAAM5Q,KAAKgK,MAAMxJ,OAAOmB,KAAM9B,EAAQ8B,UAKlB,cAA/B3B,KAAKgK,MAAMxJ,OAAOiF,UACd5F,EAAQ4F,WAAazF,KAAKgK,MAAMxJ,OAAOiF,YAKhB,cAA3BzF,KAAKgK,MAAMxJ,OAAO6B,MACdxC,EAAQwC,OAASrC,KAAKgK,MAAMxJ,OAAO6B,mDAQrBa,EAAsErB,GAE5F7B,KAAKgK,MAAMxJ,OAAO0C,GAAQrB,EAC1B7B,KAAKkK,SAAS,CACV1J,OAAQR,KAAKgK,MAAMxJ,kDAIF0C,EAAuCC,GAC5D,IAAMtB,EAAQjC,EAAMqkB,eAAejkB,KAAKgK,MAAMxJ,OAAO0C,GAAOC,GAC5DnD,KAAKkkB,kBAAkBhhB,EAAMrB,yCAI7B7B,KAAKkK,SAAS,CACV1J,OAAQ,CACJmB,KAAM,GACN4hB,aAAc,EACdC,aAAc,EACd/d,SAAU,YACVpD,KAAM,uDAKMkC,EAAwBsD,GAAuB,IAAAwC,EAAArK,KAC7DwZ,EAAQ,GAsCd,OApCAjV,EAAM1D,QAAQ,SAAA2D,GACV,IAAM3E,EAAUwK,EAAK3B,MAAMsY,WAAWxc,EAAKE,YAAaF,EAAK2C,kBAC7D,GAAItH,EACA2Z,EAAMhX,KACFsG,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,SAAS2C,IAAK9L,EAAQK,IACjC4I,EAAAtH,EAAAuH,cAAC+Q,EAAD,CACIvR,UAAW1I,EACX2E,KAAMA,EACNH,UAAWgG,EAAK3B,MAAM+Z,UACtBzS,KAAM,iBACN5C,WAAY,SAACE,EAAQpK,EAAMC,GAAf,OAAyBkH,EAAK3B,MAAM0E,WAAWE,EAAQpK,EAAMC,IACzE8P,oBAAqB,SAAA3F,GAAM,OAAIjD,EAAK3B,MAAMuK,oBAAoB3F,EAAQzF,YAI/E,CACH,IAAMiV,EAAQvY,EAAMxD,QAAQyD,GACtB2E,EAAQ,oBAAsB3E,EAAKE,YAAc,aAAeF,EAAK2C,iBAC3EqS,EAAMhX,KACFsG,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,SAAS2C,IAAKmR,GACzBhU,EAAAtH,EAAAuH,cAACob,GAAD,CACItb,WAAY,kBAAMC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAWG,WAO3C,IAAjB5E,EAAM6G,QACNoO,EAAMhX,KACFsG,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,SAAS2C,IAAI,SACxB7C,EAAAtH,EAAAuH,cAACS,EAAD,CAAUX,WAAY,kBAAMC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,oBAKjCwQ,8CAGiB,IAAAtN,EAAAlM,KACxB,IAAKA,KAAK0I,MAAM+Z,UACZ,OAAO,KAGX,IAAM2B,EAAe,GACrBA,EAAa5hB,KACTsG,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,SAAS2C,IAAI,UACxB7C,EAAAtH,EAAAuH,cAACsb,GAAD,CACI7jB,OAAQR,KAAKgK,MAAMxJ,OACnByP,YAAa,SAAC/M,EAAMrB,GAAP,OAAiBqK,EAAKgY,kBAAkBhhB,EAAMrB,IAC3DuL,WAAY,SAAClK,EAAMC,GAAP,OAAiB+I,EAAKoY,iBAAiBphB,EAAMC,IACzDkgB,YAAa,kBAAMnX,EAAKmX,mBAKpC,IAAM/iB,EAAsB,GA8B5B,OA7BIN,KAAK0I,MAAM+Z,YACXziB,KAAK0I,MAAM5I,QAAQe,QAAQ,SAAAd,GACvBA,EAAMO,SAASO,QAAQ,SAAAhB,GACfqM,EAAKqY,aAAa1kB,IAClBS,EAASkC,KAAK3C,OAI1BS,EAASiB,KAAK,SAACC,EAAGC,GACd,OAAID,EAAEG,KAAOF,EAAEE,MAAgB,EAC3BH,EAAEG,KAAOF,EAAEE,KAAe,EACvB,KAGfrB,EAASO,QAAQ,SAAAhB,GACbukB,EAAa5hB,KACTsG,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,SAAS2C,IAAK9L,EAAQK,IACjC4I,EAAAtH,EAAAuH,cAAC+Q,EAAD,CACInO,IAAK9L,EAAQK,GACbqI,UAAW1I,EACXwE,UAAW6H,EAAKxD,MAAM+Z,UACtB3iB,QAASoM,EAAKxD,MAAM5I,QACpBkQ,KAAM,iBACNoD,iBAAkB,SAAC7K,EAAWV,GAAZ,OAAuBqE,EAAKxD,MAAM0K,iBAAiB7K,EAAWV,UAO5FiB,EAAAtH,EAAAuH,cAAC+R,EAAD,CACIrS,QAAQ,kBACRG,QAASwb,EACT9K,YAAY,qCAKR,IAAApH,EAAAlS,KACZ,IACI,IAAI+a,EAAO,KACP/a,KAAK0I,MAAM0R,WACXW,EACIjS,EAAAtH,EAAAuH,cAACyb,GAAD,CAAsBb,WAAY3jB,KAAK0I,MAAMib,cAKrD,IADA,IAaIc,EAbEd,EAAa,GACVhf,EAAI,EAAGA,IAAM3E,KAAK0I,MAAMib,WAAWvY,SAAUzG,EAAG,CACrD,IAAMsE,EAAIjJ,KAAK0I,MAAMib,WAAWhf,GAChCgf,EAAWnhB,KACPsG,EAAAtH,EAAAuH,cAAC2b,GAAD,CACI/Y,IAAK1C,EAAE/I,GACPmE,UAAW4E,EACX8C,SAAU9C,IAAMjJ,KAAK0I,MAAM+Z,UAC3B1J,aAAc,SAAA1U,GAAS,OAAI6N,EAAKxJ,MAAMic,gBAAgBtgB,OAMlE,IAAMugB,EAAiB,GACnB1d,EAAuB,GA+C3B,OA7CIlH,KAAK0I,MAAM+Z,YACXgC,EAAgBzkB,KAAK0I,MAAM+Z,UAAU9gB,MAAQ,oBAE7CijB,EAAepiB,KACXsG,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,SAAS2C,IAAI,QACxB7C,EAAAtH,EAAAuH,cAAC8b,GAAD,CACIpC,UAAWziB,KAAK0I,MAAM+Z,UACtBL,QAASpiB,KAAK0I,MAAM0Z,QACpBnS,YAAa,SAAC/M,EAAMrB,GAAP,OAAiBqQ,EAAKxJ,MAAMuH,YAAYiC,EAAKxJ,MAAM+Z,UAAWvf,EAAMrB,IACjF6gB,QAAS,kBAAMxQ,EAAKxJ,MAAMga,WAC1BC,gBAAiB,kBAAMzQ,EAAKxJ,MAAMia,mBAClC3B,WAAY,SAACtc,EAAayC,GAAd,OAAmC+K,EAAKxJ,MAAMsY,WAAWtc,EAAayC,QAK9FnH,KAAK8kB,gBAAgB9kB,KAAK0I,MAAM+Z,UAAUle,MAAO,MAC5C1D,QAAQ,SAAAkkB,GAAI,OAAIH,EAAepiB,KAAKuiB,KAEzC7d,EAAQlH,KAAK0I,MAAM+Z,UAAUvb,MAAMe,IAAI,SAAA+c,GACnC,IAAMC,EAAY,GAclB,OAbAA,EAAUziB,KACNsG,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,SAAS2C,IAAI,QACxB7C,EAAAtH,EAAAuH,cAACmc,GAAD,CACIjT,KAAM+S,EACNnB,WAAY,SAAA5R,GAAI,OAAIC,EAAKxJ,MAAMmb,WAAW5R,IAC1ChC,YAAa,SAAC3C,EAAQmH,EAAO5S,GAAhB,OAA0BqQ,EAAKxJ,MAAMuH,YAAY3C,EAAQmH,EAAO5S,QAKzFqQ,EAAK4S,gBAAgBE,EAAEzgB,MAAOygB,EAAE9kB,IAC3BW,QAAQ,SAAAkkB,GAAI,OAAIE,EAAUziB,KAAKuiB,KAGhCjc,EAAAtH,EAAAuH,cAAC+R,EAAD,CACInP,IAAKqZ,EAAE9kB,GACPuI,QAASuc,EAAErjB,MAAQ,eACnBiH,QAASqc,EACT3L,YAAY,OAOxBxQ,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,kCACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,2DACV+R,EACDjS,EAAAtH,EAAAuH,cAAA,UAAQ2B,QAAS,kBAAMwH,EAAKxJ,MAAMyc,iBAAlC,uBACCxB,GAEL7a,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,+CACXF,EAAAtH,EAAAuH,cAAC+R,EAAD,CACIlS,QAASgc,EACTnc,QAASgc,EACTrL,UAAoC,OAAzBpZ,KAAK0I,MAAM+Z,UACtBpJ,MAAO,kBAAMnH,EAAKxJ,MAAMic,gBAAgB,SAE3Czd,EACAlH,KAAKolB,sBAIpB,MAAOnc,GACLC,QAAQC,MAAMF,WAlR0BG,IAAMC,WCrCrCgc,oLACD,IAAA3b,EAAA1J,KACZ,IACI,IAAIM,EAAW,KAoBf,OAnBkC,IAA9BN,KAAK0I,MAAM5I,QAAQsL,SACnB9K,EACIwI,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,YACfF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,QACXF,EAAAtH,EAAAuH,cAAA,2IAEID,EAAAtH,EAAAuH,cAAA,KAAGkM,KAAK,0EAA0E9D,OAAO,SAAS+D,IAAI,uBAAtG,+BAKRpM,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,QACXF,EAAAtH,EAAAuH,cAAA,UAAQ2B,QAAS,kBAAMhB,EAAKhB,MAAM4c,uBAAlC,mBAOZxc,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,mBACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,yBACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,0BACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,yBACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,iBACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,cAAoCF,EAAAtH,EAAAuH,cAAA,kBACpCD,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,QACXF,EAAAtH,EAAAuH,cAAA,WAAKD,EAAAtH,EAAAuH,cAAA,iBAAL,6DAEJD,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,QACXF,EAAAtH,EAAAuH,cAAA,mBACSD,EAAAtH,EAAAuH,cAAA,iBADT,YAEID,EAAAtH,EAAAuH,cAAA,UACID,EAAAtH,EAAAuH,cAAA,gDACAD,EAAAtH,EAAAuH,cAAA,6EACAD,EAAAtH,EAAAuH,cAAA,4CACAD,EAAAtH,EAAAuH,cAAA,oDAIXzI,EACDwI,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,YACfF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,QACXF,EAAAtH,EAAAuH,cAAA,6FAQ9B,MAAO8B,GACL3B,QAAQC,MAAM0B,WAxDczB,IAAMC,WCCzBkc,wLAEb,IAAIrV,EAA6B,KAWjC,OATIA,EADgC,IAAhClQ,KAAK0I,MAAM8c,UAAUpa,OAEjBtC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,gDAIAF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,gEAKJF,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,+DACAF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,4DACAF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,YACdkH,oCAKG,IAAAxG,EAAA1J,KACZ,IACI,OACI8I,EAAAtH,EAAAuH,cAACS,EAAD,CAAUX,WAAY,kBAAMa,EAAKb,gBAEvC,MAAOgC,GACL3B,QAAQC,MAAM0B,WA7BiBzB,IAAMC,WCI5Boc,oLACD,IAAA/b,EAAA1J,KACZ,IACI,OACI8I,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,YACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,SAAShJ,KAAK0I,MAAMT,IAAItG,MAAQ,gBAEnDmH,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,gBACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,SACI7F,KAAK,OACLwI,YAAY,WACZ7J,MAAO7B,KAAK0I,MAAMT,IAAItG,KACtBsP,SAAU,SAAAC,GAAK,OAAIxH,EAAKhB,MAAMuH,YAAYvG,EAAKhB,MAAMT,IAAK,OAAQiJ,EAAMC,OAAOtP,WAGvFiH,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,YACfF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,oBACXF,EAAAtH,EAAAuH,cAAC+P,EAAD,CACI7Q,IAAKjI,KAAK0I,MAAMT,IAChB+H,KAAK,eAGblH,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,YACfF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,UAAQ2B,QAAS,kBAAMhB,EAAKhB,MAAMgd,QAAQhc,EAAKhB,MAAMT,OAArD,YACAa,EAAAtH,EAAAuH,cAACqI,EAAD,CAAe3Q,KAAK,aAAa2J,SAAU,kBAAMV,EAAKhB,MAAMid,UAAUjc,EAAKhB,MAAMT,WAKnG,MAAOgB,GACLC,QAAQC,MAAMF,WAjCWG,IAAMC,WCAtBuc,oLACD,IAAAlc,EAAA1J,KACZ,IACI,IAAMyI,EACFK,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,SAAf,cAIFJ,EACFE,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,SACI7F,KAAK,OACLwI,YAAY,aACZ7J,MAAO7B,KAAK0I,MAAM+Z,UAAU9gB,KAC5BsP,SAAU,SAAAC,GAAK,OAAIxH,EAAKhB,MAAMuH,YAAYvG,EAAKhB,MAAM+Z,UAAW,OAAQvR,EAAMC,OAAOtP,WAG7FiH,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,YACfF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,UAAQ2B,QAAS,kBAAMhB,EAAKhB,MAAMmd,WAAlC,iBACA/c,EAAAtH,EAAAuH,cAACqI,EAAD,CAAe3Q,KAAK,eAAe2J,SAAU,kBAAMV,EAAKhB,MAAMod,sBAK1E,OACIhd,EAAAtH,EAAAuH,cAACS,EAAD,CAAUb,WAAY,kBAAMF,GAASI,WAAY,kBAAMD,KAE7D,MAAOK,GACLC,QAAQC,MAAMF,WA/BgBG,IAAMC,WCJ3B0c,oLACD,IAAArc,EAAA1J,KACZ,IAEI,IADA,IAAMoH,EAAO,GACJzC,EAAI,EAAGA,IAAM3E,KAAK0I,MAAMsd,SAAS5e,KAAKgE,SAAUzG,EAAG,CACxD,IAAMsD,EAAMjI,KAAK0I,MAAMsd,SAAS5e,KAAKzC,GAC/BhD,EAAOsG,EAAItG,MAAQ,cACzByF,EAAK5E,KAAKsG,EAAAtH,EAAAuH,cAAA,OAAK4C,IAAK1D,EAAI/H,GAAI8I,UAAU,QAAQrH,IAMlD,OAJoB,IAAhByF,EAAKgE,QACLhE,EAAK5E,KAAKsG,EAAAtH,EAAAuH,cAAA,OAAK4C,IAAI,QAAQ3C,UAAU,QAA3B,YAIVF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAWhJ,KAAK0I,MAAMqD,SAAW,qBAAuB,YAAarB,QAAS,kBAAMhB,EAAKhB,MAAMqQ,aAAarP,EAAKhB,MAAMsd,YACxHld,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAWhJ,KAAK0I,MAAMsd,SAASrkB,MAAQ,iBACrDyF,GAGX,MAAO6B,GACLC,QAAQC,MAAMF,WApBoBG,IAAMC,WCc/B4c,oLACD,IAAAvc,EAAA1J,KACZ,IACI,IAAI+a,EAAO,KACP/a,KAAK0I,MAAM0R,WACXW,EACIjS,EAAAtH,EAAAuH,cAACmd,GAAD,CAAeV,UAAWxlB,KAAK0I,MAAM8c,aAK7C,IADA,IAAMW,EAAS,GACNxhB,EAAI,EAAGA,IAAM3E,KAAK0I,MAAM8c,UAAUpa,SAAUzG,EAAG,CACpD,IAAMqhB,EAAWhmB,KAAK0I,MAAM8c,UAAU7gB,GACtCwhB,EAAO3jB,KACHsG,EAAAtH,EAAAuH,cAACqd,GAAD,CACIza,IAAKqa,EAAS9lB,GACd8lB,SAAUA,EACVja,SAAUia,IAAahmB,KAAK0I,MAAM+Z,UAClC1J,aAAc,SAAAsN,GAAC,OAAI3c,EAAKhB,MAAM4d,eAAeD,OAKzD,IAAIE,EAAQ,KACZ,GAAIvmB,KAAK0I,MAAM+Z,UAAW,CACtB,IAAM+D,EAAa,GAEnBA,EAAWhkB,KACPsG,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,SAAS2C,IAAI,QACxB7C,EAAAtH,EAAAuH,cAAC0d,GAAD,CACIhE,UAAWziB,KAAK0I,MAAM+Z,UACtBoD,OAAQ,kBAAMnc,EAAKhB,MAAMmd,UACzBC,eAAgB,kBAAMpc,EAAKhB,MAAMod,kBACjC7V,YAAa,SAAC3C,EAAQmH,EAAO5S,GAAhB,OAA0B6H,EAAKhB,MAAMuH,YAAY3C,EAAQmH,EAAO5S,QAKzF7B,KAAK0I,MAAM+Z,UAAUrb,KAAKvG,QAAQ,SAAA6f,GAC9B8F,EAAWhkB,KACPsG,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,SAAS2C,IAAK+U,EAAExgB,IAC3B4I,EAAAtH,EAAAuH,cAAC2d,GAAD,CACIze,IAAKyY,EACLgF,QAAS,SAAAzd,GAAG,OAAIyB,EAAKhB,MAAMgd,QAAQzd,IACnC0d,UAAW,SAAA1d,GAAG,OAAIyB,EAAKhB,MAAMid,UAAU1d,IACvCgI,YAAa,SAAC3C,EAAQpK,EAAMrB,GAAf,OAAyB6H,EAAKhB,MAAMuH,YAAY3C,EAAQpK,EAAMrB,UAMlD,IAArC7B,KAAK0I,MAAM+Z,UAAUrb,KAAKgE,QAC1Bob,EAAWhkB,KACPsG,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,SAAS2C,IAAI,SACxB7C,EAAAtH,EAAAuH,cAACS,EAAD,CAAUX,WAAY,kBAAMC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,gBAKxCud,EACIzd,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAC+R,EAAD,CACIlS,QAAS4d,EACT/d,QAASzI,KAAK0I,MAAM+Z,UAAU9gB,MAAQ,gBACtCyX,UAAoC,OAAzBpZ,KAAK0I,MAAM+Z,UACtBpJ,MAAO,kBAAM3P,EAAKhB,MAAM4d,eAAe,UAMvD,OACIxd,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,4BACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,2DACV+R,EACDjS,EAAAtH,EAAAuH,cAAA,UAAQ2B,QAAS,kBAAMhB,EAAKhB,MAAMie,gBAAlC,uBACCR,GAELrd,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,+CACVud,IAIf,MAAOtd,GACLC,QAAQC,MAAMF,WApFmBG,IAAMC,WCpB9Bud,wLAEb,OACI9d,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,oDACAF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,YACfF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,sFACAF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,kGAKI,IAAAU,EAAA1J,KACZ,OACI8I,EAAAtH,EAAAuH,cAACS,EAAD,CAAUX,WAAY,kBAAMa,EAAKb,uBAdGO,IAAMC,WCYjCwd,oLACD,IAAAnd,EAAA1J,KACZ,IACI,IAAMyI,EACFK,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,SAAf,kBAIFJ,EACFE,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,SACI7F,KAAK,OACLwI,YAAY,aACZ7J,MAAO7B,KAAK0I,MAAM+Z,UAAU9gB,KAC5BiJ,WAAY5K,KAAK0I,MAAMlI,OACvByQ,SAAU,SAAAC,GAAK,OAAIxH,EAAKhB,MAAMuH,YAAY,OAAQiB,EAAMC,OAAOtP,WAGvEiH,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,YACfF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,UAAQC,UAAWhJ,KAAK0I,MAAMlI,OAAS,WAAa,GAAIkK,QAAS,kBAAMhB,EAAKhB,MAAMoe,eAAlF,qBACAhe,EAAAtH,EAAAuH,cAAA,UAAQC,UAAWhJ,KAAK0I,MAAMlI,OAAS,WAAa,GAAIkK,QAAS,kBAAMhB,EAAKhB,MAAMqe,iBAAlF,iBACAje,EAAAtH,EAAAuH,cAACqI,EAAD,CAAe3Q,KAAK,eAAe2J,SAAU,kBAAMV,EAAKhB,MAAMse,0BAK1E,OACIle,EAAAtH,EAAAuH,cAACS,EAAD,CAAUb,WAAY,kBAAMF,GAASI,WAAY,kBAAMD,KAE7D,MAAOK,GACLC,QAAQC,MAAMF,WAjCoBG,IAAMC,WCH/B4d,oLACD,IAAAvd,EAAA1J,KACZ,IAII,IAHA,IAAMknB,EAAatnB,EAAMgR,MAAM5Q,KAAK0I,MAAMlI,OAAQR,KAAK0I,MAAM3I,MAAM4B,MAE7DrB,EAAW,GACRqE,EAAI,EAAGA,IAAM3E,KAAK0I,MAAM3I,MAAMO,SAAS8K,SAAUzG,EAAG,CACzD,IAAM9E,EAAUG,KAAK0I,MAAM3I,MAAMO,SAASqE,GACpC4f,EAAe3kB,EAAMgR,MAAM5Q,KAAK0I,MAAMlI,OAAQX,EAAQ8B,MAC5D,GAAIulB,GAAc3C,EAAc,CAC5B,IAAI5iB,EAAO9B,EAAQ8B,KACdA,IACDA,EAAO,mBAEXrB,EAASkC,KAAKsG,EAAAtH,EAAAuH,cAAA,OAAK4C,IAAK9L,EAAQK,GAAI8I,UAAU,QAAQrH,KAO9D,OAJwB,IAApBrB,EAAS8K,QACT9K,EAASkC,KAAKsG,EAAAtH,EAAAuH,cAAA,OAAK4C,IAAI,QAAQ3C,UAAU,QAA3B,gBAIdF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAWhJ,KAAK0I,MAAMqD,SAAW,qBAAuB,YAAarB,QAAS,kBAAMhB,EAAKhB,MAAMqQ,aAAarP,EAAKhB,MAAM3I,SACxH+I,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAWhJ,KAAK0I,MAAM3I,MAAM4B,MAAQ,iBAClDrB,GAGX,MAAO2I,GACLC,QAAQC,MAAMF,WA5BwBG,IAAMC,WCkBnC8d,4LACQpnB,GAAqB,IAAA2J,EAAA1J,KACtCU,EAASd,EAAMgR,MAAM5Q,KAAK0I,MAAMlI,OAAQT,EAAM4B,MAQlD,OANKjB,GACDX,EAAMO,SAASO,QAAQ,SAAAhB,GACnBa,EAASd,EAAMgR,MAAMlH,EAAKhB,MAAMlI,OAAQX,EAAQ8B,OAASjB,IAI1DA,mCAGK,IAAA2J,EAAArK,KACZ,IACI,IAAI+a,EAAO,KACP/a,KAAK0I,MAAM0R,WACXW,EACIjS,EAAAtH,EAAAuH,cAACqe,GAAD,OAKR,IADA,IAAMC,EAAY,GACT1iB,EAAI,EAAGA,IAAM3E,KAAK0I,MAAM5I,QAAQsL,SAAUzG,EAAG,CAClD,IAAM5E,EAAQC,KAAK0I,MAAM5I,QAAQ6E,GAC7B3E,KAAKsnB,iBAAiBvnB,IACtBsnB,EAAU7kB,KACNsG,EAAAtH,EAAAuH,cAACwe,GAAD,CACI5b,IAAK5L,EAAMG,GACXH,MAAOA,EACPS,OAAQR,KAAK0I,MAAMlI,OACnBuL,SAAUhM,IAAUC,KAAK0I,MAAM+Z,UAC/B1J,aAAc,SAAA5Y,GAAG,OAAIkK,EAAK3B,MAAM8e,mBAAmBrnB,OAMnE,IA+CIwB,EA/CE6X,EAAQ,GAEd,GAAIxZ,KAAK0I,MAAM+Z,UAAW,CACtBjJ,EAAMhX,KACFsG,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,SAAS2C,IAAI,QACxB7C,EAAAtH,EAAAuH,cAAC0e,GAAD,CACIhF,UAAWziB,KAAK0I,MAAM+Z,UACtBjiB,OAAQR,KAAK0I,MAAMlI,OACnBsmB,WAAY,kBAAMzc,EAAK3B,MAAMoe,cAC7BC,aAAc,kBAAM1c,EAAK3B,MAAMqe,gBAC/B9W,YAAa,SAAC/M,EAAMrB,GAAP,OAAiBwI,EAAK3B,MAAMuH,YAAY5F,EAAK3B,MAAM+Z,UAAWvf,EAAMrB,IACjFmlB,mBAAoB,kBAAM3c,EAAK3B,MAAMse,0BAKjD,IAAM1mB,EAAWN,KAAK0I,MAAM+Z,UAAUniB,SAASE,OAAO,SAAAX,GAClD,OAAOD,EAAMgR,MAAMvG,EAAK3B,MAAMlI,OAAQX,EAAQ8B,QAG1B,IAApBrB,EAAS8K,OACT9K,EAASO,QAAQ,SAAA6f,GACblH,EAAMhX,KACFsG,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,SAAS2C,IAAK+U,EAAExgB,IAC3B4I,EAAAtH,EAAAuH,cAAC+Q,EAAD,CACIvR,UAAWmY,EACX1Q,KAAM,gBACNlQ,QAASuK,EAAK3B,MAAM5I,QACpBmQ,YAAa,SAAC3C,EAAQpK,EAAMrB,GAAf,OAAyBwI,EAAK3B,MAAMuH,YAAY3C,EAAQpK,EAAMrB,IAC3EuL,WAAY,SAACE,EAAQpK,EAAMC,GAAf,OAAyBkH,EAAK3B,MAAM0E,WAAWE,EAAQpK,EAAMC,IACzE4P,YAAa,SAAClT,EAAS6nB,GAAV,OAAsBrd,EAAK3B,MAAMqK,YAAYlT,EAAS6nB,IACnE1U,cAAe,SAAAnT,GAAO,OAAIwK,EAAK3B,MAAMsK,cAAcnT,IACnD6S,YAAa,SAAA7S,GAAO,OAAIwK,EAAK3B,MAAMgK,YAAY7S,IAC/C+S,aAAc,SAAC/S,EAAS6E,GAAV,OAA0B2F,EAAK3B,MAAMkK,aAAa/S,EAAS6E,UAMzF8U,EAAMhX,KACFsG,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,SAAS2C,IAAI,SACxB7C,EAAAtH,EAAAuH,cAACS,EAAD,CAAUX,WAAY,kBAAMC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,oBAc5C,OAPIhJ,KAAK0I,MAAM+Z,aACX9gB,EAAO3B,KAAK0I,MAAM+Z,UAAU9gB,QAExBA,EAAO,kBAKXmH,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,gCACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,2DACV+R,EACDjS,EAAAtH,EAAAuH,cAAA,UAAQ2B,QAAS,kBAAML,EAAK3B,MAAMif,oBAAlC,2BACCN,GAELve,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,+CACXF,EAAAtH,EAAAuH,cAAC+R,EAAD,CACIlS,QAAS4Q,EACT/Q,QAAS9G,EACTyX,UAAoC,OAAzBpZ,KAAK0I,MAAM+Z,UACtBpJ,MAAO,kBAAMhP,EAAK3B,MAAM8e,mBAAmB,WAK7D,MAAOve,GACLC,QAAQC,MAAMF,WA/GwBG,IAAMC,WCrBnCue,wLAEb,IAAI1X,EAA6B,KAWjC,OATIA,EAD8B,IAA9BlQ,KAAK0I,MAAM0Z,QAAQhX,OAEftC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,mDAIAF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,kDAKJF,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,2DACAF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,sDACAF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,YACdkH,oCAKG,IAAAxG,EAAA1J,KACZ,IACI,OACI8I,EAAAtH,EAAAuH,cAACS,EAAD,CAAUX,WAAY,kBAAMa,EAAKb,gBAEvC,MAAOgC,GACL3B,QAAQC,MAAM0B,WA7BezB,IAAMC,WCK1Bwe,oLACD,IAAAne,EAAA1J,KACZ,IACI,IAAM8nB,EAAY9nB,KAAK0I,MAAM+Z,UAAU3d,IAAItE,OAAO,SAAAmhB,GAAE,OAAIA,EAAG5c,SAErDI,EAAY2iB,EACb7f,IAAI,SAAA0Z,GAAE,OAAIA,EAAGxc,YACboa,KAAK,MACL3e,MAAM,UACNmnB,OAAO,SAACC,EAAiBnmB,GAItB,OAH8B,IAA1BmmB,EAAMjnB,QAAQc,IACdmmB,EAAMxlB,KAAKX,GAERmmB,GACR,IACFzmB,KAAK,SAACC,EAAGC,GACN,MAAU,WAAND,GACQ,EAEF,WAANC,EACO,EAEJD,EAAEymB,cAAcxmB,KAE1B8d,KAAK,MAEN2I,EAAiB,IACjBC,EAAuB,IACvBC,EAAoB,IAExB,GAAyB,IAArBN,EAAU1c,OAAc,CACxB,IAAMid,EAAsD,CAAE1W,IAAK,KAAMF,IAAK,MACxE6W,EAAqD,CAAE3W,IAAK,KAAMF,IAAK,MACvE8W,EAAqD,CAAE5W,IAAK,KAAMF,IAAK,MAE7EqW,EAAUjnB,QAAQ,SAAA8gB,GACd0G,EAAQ1W,IAAsB,OAAhB0W,EAAQ1W,IAAegQ,EAAGvc,eAAiBnE,KAAK0Q,IAAI0W,EAAQ1W,IAAKgQ,EAAGvc,gBAClFijB,EAAQ5W,IAAsB,OAAhB4W,EAAQ5W,IAAekQ,EAAGvc,eAAiBnE,KAAKwQ,IAAI4W,EAAQ5W,IAAKkQ,EAAGvc,gBAClFkjB,EAAO3W,IAAqB,OAAf2W,EAAO3W,IAAegQ,EAAGtc,qBAAuBpE,KAAK0Q,IAAI2W,EAAO3W,IAAKgQ,EAAGtc,sBACrFijB,EAAO7W,IAAqB,OAAf6W,EAAO7W,IAAekQ,EAAGtc,qBAAuBpE,KAAKwQ,IAAI6W,EAAO7W,IAAKkQ,EAAGtc,sBACrFkjB,EAAO5W,IAAqB,OAAf4W,EAAO5W,IAAegQ,EAAGrc,kBAAoBrE,KAAK0Q,IAAI4W,EAAO5W,IAAKgQ,EAAGrc,mBAClFijB,EAAO9W,IAAqB,OAAf8W,EAAO9W,IAAekQ,EAAGrc,kBAAoBrE,KAAKwQ,IAAI8W,EAAO9W,IAAKkQ,EAAGrc,qBAGtF4iB,EAAiBG,EAAQ1W,MAAQ0W,EAAQ5W,IAAO4W,EAAQ1W,IAAevQ,WAAainB,EAAQ1W,IAAM,MAAQ0W,EAAQ5W,IAClH0W,EAAuBG,EAAO3W,MAAQ2W,EAAO7W,IAAO6W,EAAO3W,IAAevQ,WAAaknB,EAAO3W,IAAM,MAAQ2W,EAAO7W,IACnH2W,EAAoBG,EAAO5W,MAAQ4W,EAAO9W,IAAO8W,EAAO5W,IAAevQ,WAAamnB,EAAO5W,IAAM,MAAQ4W,EAAO9W,IAGpH,IAAMhJ,EACFK,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,SAAf,UAIFJ,EACFE,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,SACI7F,KAAK,OACLwI,YAAY,aACZ7J,MAAO7B,KAAK0I,MAAM+Z,UAAU9gB,KAC5BsP,SAAU,SAAAC,GAAK,OAAIxH,EAAKhB,MAAMuH,YAAY,OAAQiB,EAAMC,OAAOtP,WAGvEiH,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,YACfF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,UAAUsC,MAAO,CAAE0B,QAAuB,KAAd7H,EAAmB,QAAU,SACpE2D,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAf,cAEJF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACV7D,GAEL2D,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAf,mBAEJF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,SACXF,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAaF,EAAAtH,EAAAuH,cAAA,qBAC5BD,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAaF,EAAAtH,EAAAuH,cAAA,qBAC5BD,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAaF,EAAAtH,EAAAuH,cAAA,sBAEhCD,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAckf,GAC7Bpf,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAcmf,GAC7Brf,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAcof,KAGrCtf,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,YACfF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACfF,EAAAtH,EAAAuH,cAAA,UAAQ2B,QAAS,kBAAMhB,EAAKhB,MAAM8f,UAAlC,gBACI1f,EAAAtH,EAAAuH,cAAA,UAAQ2B,QAAS,kBAAMhB,EAAKhB,MAAM+f,YAAlC,YACA3f,EAAAtH,EAAAuH,cAACqI,EAAD,CAAe3Q,KAAK,eAAe2J,SAAU,kBAAMV,EAAKhB,MAAMggB,mBAK1E,OACI5f,EAAAtH,EAAAuH,cAACS,EAAD,CAAUb,WAAY,kBAAMF,GAASI,WAAY,kBAAMD,KAE7D,MAAOK,GACLC,QAAQC,MAAMF,WApGaG,IAAMC,WCLxBsf,oLACD,IAAAjf,EAAA1J,KACZ,IAEI,IADA,IAAM8E,EAAM,GACHH,EAAI,EAAGA,IAAM3E,KAAK0I,MAAM4Y,MAAMxc,IAAIsG,SAAUzG,EAAG,CACpD,IAAMgd,EAAK3hB,KAAK0I,MAAM4Y,MAAMxc,IAAIH,GAC5BhD,EAAOggB,EAAGhgB,KACVggB,EAAG3c,SACHrD,GAAQ,KAAOggB,EAAG3c,OAAS,KAE1BrD,IACDA,EAAO,cAEXmD,EAAItC,KAAKsG,EAAAtH,EAAAuH,cAAA,OAAK4C,IAAKgW,EAAGzhB,GAAI8I,UAAU,QAAQrH,IAMhD,OAJmB,IAAfmD,EAAIsG,QACJtG,EAAItC,KAAKsG,EAAAtH,EAAAuH,cAAA,OAAK4C,IAAI,QAAQ3C,UAAU,QAA3B,WAITF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAWhJ,KAAK0I,MAAMqD,SAAW,qBAAuB,YAAarB,QAAS,kBAAMhB,EAAKhB,MAAMqQ,aAAarP,EAAKhB,MAAM4Y,SACxHxY,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAWhJ,KAAK0I,MAAM4Y,MAAM3f,MAAQ,iBAClDmD,GAGX,MAAOmE,GACLC,QAAQC,MAAMF,WA1BiBG,IAAMC,WCe5Buf,oLACD,IAAAlf,EAAA1J,KACZ,IACI,IAAI+a,EAAO,KACP/a,KAAK0I,MAAM0R,WACXW,EACIjS,EAAAtH,EAAAuH,cAAC8f,GAAD,CAAazG,QAASpiB,KAAK0I,MAAM0Z,WAKzC,IADA,IAAMA,EAAU,GACPzd,EAAI,EAAGA,IAAM3E,KAAK0I,MAAM0Z,QAAQhX,SAAUzG,EAAG,CAClD,IAAMhF,EAAIK,KAAK0I,MAAM0Z,QAAQzd,GAC7Byd,EAAQ5f,KACJsG,EAAAtH,EAAAuH,cAAC+f,GAAD,CACInd,IAAKhM,EAAEO,GACPohB,MAAO3hB,EACPoM,SAAUpM,IAAMK,KAAK0I,MAAM+Z,UAC3B1J,aAAc,SAAAuI,GAAK,OAAI5X,EAAKhB,MAAM6Z,YAAYjB,OAK1D,IAuDI3f,EAvDEonB,EAA6B,GAC7BC,EAA+B,GAErC,GAAIhpB,KAAK0I,MAAM+Z,UAAW,CACtBsG,EAAYvmB,KACRsG,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,SAAS2C,IAAI,QACxB7C,EAAAtH,EAAAuH,cAACkgB,GAAD,CACIxG,UAAWziB,KAAK0I,MAAM+Z,UACtB+F,MAAO,kBAAM9e,EAAKhB,MAAM8f,SACxBC,QAAS,kBAAM/e,EAAKhB,MAAM+f,WAC1BxY,YAAa,SAAC/M,EAAMrB,GAAP,OAAiB6H,EAAKhB,MAAMuH,YAAYvG,EAAKhB,MAAM+Z,UAAWvf,EAAMrB,IACjF6mB,YAAa,kBAAMhf,EAAKhB,MAAMggB,mBAK1C,IAAMZ,EAAY9nB,KAAK0I,MAAM+Z,UAAU3d,IAAItE,OAAO,SAAAmhB,GAAE,OAAIA,EAAG5c,SAC3D+iB,EAAUjnB,QAAQ,SAAAqoB,GACdH,EAAYvmB,KACRsG,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,SAAS2C,IAAKud,EAAShpB,IAClC4I,EAAAtH,EAAAuH,cAAC6Q,EAAD,CACIrR,UAAW2gB,EACXlZ,KAAM,OACNC,YAAa,SAAC0R,EAAIze,EAAMrB,GAAX,OAAqB6H,EAAKhB,MAAMuH,YAAY0R,EAAIze,EAAMrB,IACnEuL,WAAY,SAACuU,EAAIze,EAAMC,GAAX,OAAqBuG,EAAKhB,MAAM0E,WAAWuU,EAAIze,EAAMC,IACjE2R,SAAU,SAAA6M,GAAE,OAAIjY,EAAKhB,MAAMoM,SAAS6M,UAMhC3hB,KAAK0I,MAAM+Z,UAAU3d,IAAItE,OAAO,SAAAmhB,GAAE,OAAKA,EAAG5c,SAClDlE,QAAQ,SAAAsoB,GAChBH,EAAcxmB,KACVsG,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,SAAS2C,IAAKwd,EAAWjpB,IACpC4I,EAAAtH,EAAAuH,cAAC6Q,EAAD,CACIrR,UAAW4gB,EACXnZ,KAAM,OACNC,YAAa,SAAC0R,EAAIze,EAAMrB,GAAX,OAAqB6H,EAAKhB,MAAMuH,YAAY0R,EAAIze,EAAMrB,IACnEuL,WAAY,SAACuU,EAAIze,EAAMC,GAAX,OAAqBuG,EAAKhB,MAAM0E,WAAWuU,EAAIze,EAAMC,IACjE2R,SAAU,SAAA6M,GAAE,OAAIjY,EAAKhB,MAAMoM,SAAS6M,UAM3B,IAArBmG,EAAU1c,QACV2d,EAAYvmB,KACRsG,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,SAAS2C,IAAI,SACxB7C,EAAAtH,EAAAuH,cAACS,EAAD,CAAUX,WAAY,kBAAMC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,eAW5C,OAJIhJ,KAAK0I,MAAM+Z,YACX9gB,EAAO3B,KAAK0I,MAAM+Z,UAAU9gB,MAAQ,iBAIpCmH,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,wBACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,2DACV+R,EACDjS,EAAAtH,EAAAuH,cAAA,UAAQ2B,QAAS,kBAAMhB,EAAKhB,MAAM0gB,aAAlC,mBACChH,GAELtZ,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,+CACXF,EAAAtH,EAAAuH,cAAC+R,EAAD,CACIlS,QAASmgB,EACTtgB,QAAS9G,EACTyX,UAAoC,OAAzBpZ,KAAK0I,MAAM+Z,UACtBpJ,MAAO,kBAAM3P,EAAKhB,MAAM6Z,YAAY,OACpCrJ,QAASlZ,KAAK0I,MAAM+Z,YAExB3Z,EAAAtH,EAAAuH,cAAC+R,EAAD,CACIlS,QAASogB,EACTvgB,QAAQ,eACR2Q,WAAW,EACXF,OAAiC,IAAzB8P,EAAc5d,WAKxC,MAAOnC,GACLC,QAAQC,MAAMF,WA5GiBG,IAAMC,oBCV5BggB,oLACD,IAAA3f,EAAA1J,KACZ,IAEI,OACI8I,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,SACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,OACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,gDACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,SACAF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,WAAiCF,EAAAtH,EAAAuH,cAAA,KAAGkM,KAAK,gCAAR,eACjCnM,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,WAAiCF,EAAAtH,EAAAuH,cAAA,SAAIugB,GAAIC,UACzCzgB,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,iEAAuFF,EAAAtH,EAAAuH,cAAA,KAAGkM,KAAK,oCAAoC9D,OAAO,SAAS+D,IAAI,uBAAhE,SACvFpM,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,wDAEJF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,gDACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,WACAF,EAAAtH,EAAAuH,cAACqI,EAAD,CAAe3Q,KAAK,iBAAiB2J,SAAU,kBAAMV,EAAKhB,MAAM8gB,cAChE1gB,EAAAtH,EAAAuH,cAAC0W,GAAD,CACIxR,MAAM,kBACN4P,QAAS7d,KAAK0I,MAAMyC,QAAQiP,SAC5BnK,YAAa,SAAApO,GAAK,OAAI6H,EAAKhB,MAAMuH,YAAYvG,EAAKhB,MAAMyC,QAAS,WAAYtJ,QAIzFiH,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,OACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,mDACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,qBACAF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,sJACAF,EAAAtH,EAAAuH,cAAA,UACID,EAAAtH,EAAAuH,cAAA,gvEACAD,EAAAtH,EAAAuH,cAAA,ucACAD,EAAAtH,EAAAuH,cAAA,6HACAD,EAAAtH,EAAAuH,cAAA,oPACAD,EAAAtH,EAAAuH,cAAA,yQACAD,EAAAtH,EAAAuH,cAAA,wXACAD,EAAAtH,EAAAuH,cAAA,yxBACAD,EAAAtH,EAAAuH,cAAA,uKACAD,EAAAtH,EAAAuH,cAAA,oRACAD,EAAAtH,EAAAuH,cAAA,oIACAD,EAAAtH,EAAAuH,cAAA,mMACAD,EAAAtH,EAAAuH,cAAA,uRACAD,EAAAtH,EAAAuH,cAAA,4PACAD,EAAAtH,EAAAuH,cAAA,8KACAD,EAAAtH,EAAAuH,cAAA,qGAOtB,MAAOE,GACLC,QAAQC,MAAMF,WAnDcG,IAAMC,WCazBogB,eAMjB,SAAAA,EAAY/gB,GAAc,IAAAgB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA3J,KAAAypB,IACtB/f,EAAAC,OAAAE,EAAA,EAAAF,CAAA3J,KAAA2J,OAAAG,EAAA,EAAAH,CAAA8f,GAAA1f,KAAA/J,KAAM0I,KAEDsB,MAAQ,CACT0f,YAAahhB,EAAMghB,aAJDhgB,wEAQT/B,GAAiB,IAAA0C,EAAArK,KAE9BA,KAAKgK,MAAM0f,YAAY/hB,QAAUA,EACjC3H,KAAKkK,SAAS,CACVwf,YAAa1pB,KAAKgK,MAAM0f,aACzB,kBAAMrf,EAAK3B,MAAMihB,gDAGH/hB,GAAqB,IAAAsE,EAAAlM,KAEtCA,KAAKgK,MAAM0f,YAAY9hB,YAAcA,EACrC,IAAMgiB,EAAM5pB,KAAK0I,MAAMib,WAAWvjB,KAAK,SAAA6I,GAAC,OAAIA,EAAE/I,KAAO0H,IACjDgiB,IAEA5pB,KAAKgK,MAAM0f,YAAYplB,aAAe1E,EAAMiqB,gBAAgBD,IAEhE5pB,KAAKkK,SAAS,CACVwf,YAAa1pB,KAAKgK,MAAM0f,aACzB,kBAAMxd,EAAKxD,MAAMihB,8CAGLzpB,GACf,GAAIA,GAAc,KAAPA,EAAY,CACnB,IAAMqmB,EAAQvmB,KAAK0I,MAAM8c,UAAUplB,KAAK,SAAAimB,GAAC,OAAIA,EAAEnmB,KAAOA,IAClDqmB,IAEAvmB,KAAKgK,MAAM0f,YAAY5hB,QAAUye,EAAMrmB,GAEvCF,KAAKgK,MAAM0f,YAAY3hB,MAA8B,IAAtBwe,EAAMnf,KAAKgE,OAAemb,EAAMnf,KAAK,GAAGlH,GAAK,WAIhFF,KAAKgK,MAAM0f,YAAY5hB,QAAU,KAEjC9H,KAAKgK,MAAM0f,YAAY3hB,MAAQ,KAEnC/H,KAAKkK,SAAS,CACVwf,YAAa1pB,KAAKgK,MAAM0f,+CAIfxpB,GAEbF,KAAKgK,MAAM0f,YAAY3hB,MAAQ7H,EAC/BF,KAAKkK,SAAS,CACVwf,YAAa1pB,KAAKgK,MAAM0f,8CAIhB7hB,GAAgB,IAAAqK,EAAAlS,KAE5BA,KAAKgK,MAAM0f,YAAY7hB,OAASA,EAChC,IAAM+hB,EAAM5pB,KAAK0I,MAAMib,WAAWvjB,KAAK,SAAA6I,GAAC,OAAIA,EAAE/I,KAAOgS,EAAKlI,MAAM0f,YAAY9hB,cAC5E,GAAIgiB,EAAK,CACL,IAAM3X,EAAO2X,EAAI1iB,MAAM9G,KAAK,SAAA4kB,GAAC,OAAIA,EAAE9kB,KAAO2H,IACtCoK,IAEAjS,KAAKgK,MAAM0f,YAAYplB,aAAe1E,EAAMiqB,gBAAgB5X,IAGpEjS,KAAKkK,SAAS,CACVwf,YAAa1pB,KAAKgK,MAAM0f,aACzB,kBAAMxX,EAAKxJ,MAAMihB,wDAGK3Z,GAEzBhQ,KAAKgK,MAAM0f,YAAY1hB,kBAAoBgI,EAC3ChQ,KAAKkK,SAAS,CACVwf,YAAa1pB,KAAKgK,MAAM0f,iDAIbI,EAAgBhN,EAAenb,GAC9C,IAAM6C,EAAOxE,KAAKgK,MAAM0f,YAAYplB,aAAalE,KAAK,SAAAgS,GAAC,OAAIA,EAAElS,KAAO4pB,IAChEtlB,IACAA,EAAKC,MAAMqY,GAASnb,EACpB3B,KAAKkK,SAAS,CACVwf,YAAa1pB,KAAKgK,MAAM0f,yDAOV,IAAAjX,EAAAzS,KACtB,GAAkC,IAA9BA,KAAK0I,MAAM0Z,QAAQhX,OACnB,OACItC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,oCAIR,IAAMqZ,EAAeriB,KAAK0I,MAAM0Z,QAAQna,IAAI,SAAAqZ,GACxC,MAAO,CACHphB,GAAIohB,EAAMphB,GACVO,KAAM6gB,EAAM3f,MAAQ,mBAIxBooB,EAAe,KACnB,GAAI/pB,KAAKgK,MAAM0f,YAAY/hB,QAAS,CAChC,IAAMqiB,EAAgBhqB,KAAK0I,MAAM0Z,QAAQhiB,KAAK,SAAAT,GAAC,OAAIA,EAAEO,KAAOuS,EAAKzI,MAAM0f,YAAY/hB,UACnF,GAAIqiB,EAAe,CACf,IAEMC,EAFMD,EAAcllB,IAAItE,OAAO,SAAAmhB,GAAE,OAAIA,EAAG5c,SAEvBkD,IAAI,SAAA0Z,GAAE,OAErB7Y,EAAAtH,EAAAuH,cAAA,MAAI4C,IAAKgW,EAAGzhB,IACPyhB,EAAGhgB,MAAQ,aADhB,WACsCggB,EAAG3e,MADzC,OAMkB,IAAtBinB,EAAW7e,QACX6e,EAAWznB,KACPsG,EAAAtH,EAAAuH,cAAA,MAAI4C,IAAK,SAAT,WAIRoe,EACIjhB,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAf,OACAF,EAAAtH,EAAAuH,cAAA,UAAKkhB,KAMrB,OACInhB,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,SACAF,EAAAtH,EAAAuH,cAAC+J,EAAD,CACI3H,QAASkX,EACT3W,YAAY,kBACZH,WAAYvL,KAAKgK,MAAM0f,YAAY/hB,QAAU3H,KAAKgK,MAAM0f,YAAY/hB,aAAUgF,EAC9EzB,OAAQ,SAAAD,GAAQ,OAAIwH,EAAKyX,SAASjf,MAErC8e,iDAKiB,IAAAvO,EAAAxb,KAC1B,GAAqC,IAAjCA,KAAK0I,MAAMib,WAAWvY,OACtB,OACItC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,qCAIR,IAAMmhB,EAAmBnqB,KAAK0I,MAAMib,WAAW1b,IAAI,SAAA5D,GAC/C,MAAO,CACHnE,GAAImE,EAAUnE,GACdO,KAAM4D,EAAU1C,MAAQ,uBAI5ByoB,EAAmB,KACvB,GAAIpqB,KAAKgK,MAAM0f,YAAY9hB,YAAa,CACpC,IAAMyiB,EAAoBrqB,KAAK0I,MAAMib,WAAWvjB,KAAK,SAAA6I,GAAC,OAAIA,EAAE/I,KAAOsb,EAAKxR,MAAM0f,YAAY9hB,cAC1F,GAAIyiB,EAAmB,CACnB,IAAMC,EAAkBD,EAAkB9lB,MAAM0D,IAAI,SAAAzD,GAChD,IAAI7C,EAAO6C,EAAKE,aAAe,kBAI/B,OAHIF,EAAK1C,MAAQ,IACbH,GAAQ,MAAQ6C,EAAK1C,MAAQ,KAG7BgH,EAAAtH,EAAAuH,cAAA,MAAI4C,IAAKnH,EAAKtE,IAAKyB,KAII,IAA3B2oB,EAAgBlf,QAChBkf,EAAgB9nB,KACZsG,EAAAtH,EAAAuH,cAAA,MAAI4C,IAAK,SAAT,gBAIR,IAAMzE,EAAQmjB,EAAkBnjB,MAAMe,IAAI,SAAAgK,GACtC,GAA0B,IAAtBA,EAAK1N,MAAM6G,OACX,OAAO,KAGX,IAAMmf,EAAetY,EAAK1N,MAAM0D,IAAI,SAAAzD,GAChC,IAAI7C,EAAO6C,EAAKE,aAAe,kBAI/B,OAHIF,EAAK1C,MAAQ,IACbH,GAAQ,KAAO6C,EAAK1C,OAGpBgH,EAAAtH,EAAAuH,cAAA,MAAI4C,IAAKnH,EAAKtE,IAAKyB,KAI3B,OACImH,EAAAtH,EAAAuH,cAAA,OAAK4C,IAAKsG,EAAK/R,IACX4I,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAciJ,EAAKtQ,MAAQ,gBAC1CmH,EAAAtH,EAAAuH,cAAA,UAAKwhB,MAKjBH,EACIthB,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAf,YACAF,EAAAtH,EAAAuH,cAAA,UAAKuhB,GACJpjB,IAMjB,OACI4B,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,aACAF,EAAAtH,EAAAuH,cAAC+J,EAAD,CACI3H,QAASgf,EACTze,YAAY,sBACZH,WAAYvL,KAAKgK,MAAM0f,YAAY9hB,YAAc5H,KAAKgK,MAAM0f,YAAY9hB,iBAAc+E,EACtFzB,OAAQ,SAAAD,GAAQ,OAAIuQ,EAAKgP,aAAavf,MAEzCmf,2CAKW,IAAAzO,EAAA3b,KACdmmB,EAASnmB,KAAK0I,MAAM8c,UAAUhlB,OAAO,SAAA+lB,GAAK,OAAIA,EAAMnf,KAAKgE,OAAS,IACxE,GAAsB,IAAlB+a,EAAO/a,OACP,OAAO,KAGX,IAAMqf,EAAe,CAAC,CAClBvqB,GAAI,GACJO,KAAM,SACP6Z,OAAO6L,EAAOle,IAAI,SAAAse,GACjB,MAAO,CACHrmB,GAAIqmB,EAAMrmB,GACVO,KAAM8lB,EAAM5kB,MAAQ,oBAIxB+oB,EAAmB,KACnBC,EAAmB,KAEvB,GAAI3qB,KAAKgK,MAAM0f,YAAY5hB,QAAS,CAChC,IAAMye,EAAQvmB,KAAK0I,MAAM8c,UAAUplB,KAAK,SAAAimB,GAAC,OAAIA,EAAEnmB,KAAOyb,EAAK3R,MAAM0f,YAAY5hB,UAC7E,GAAIye,EAAO,CACP,IAAMqE,EAAarE,EAAMnf,KAAKa,IAAI,SAAAyY,GAC9B,MAAO,CACHxgB,GAAIwgB,EAAExgB,GACNO,KAAMigB,EAAE/e,MAAQ,iBAcxB,GAV0B,IAAtBipB,EAAWxf,SACXsf,EACI5hB,EAAAtH,EAAAuH,cAAC6W,GAAD,CACIzU,QAASyf,EACTrf,WAAYvL,KAAKgK,MAAM0f,YAAY3hB,MACnCmD,OAAQ,SAAAD,GAAQ,OAAI0Q,EAAKkP,SAAS5f,OAK1CjL,KAAKgK,MAAM0f,YAAY3hB,MAAO,CAC9B,IAAME,EAAMse,EAAMnf,KAAKhH,KAAK,SAAAsgB,GAAC,OAAIA,EAAExgB,KAAOyb,EAAK3R,MAAM0f,YAAY3hB,QAC7DE,IACA0iB,EACI7hB,EAAAtH,EAAAuH,cAAC+P,EAAD,CACI7Q,IAAKA,EACL+H,KAAK,iBAQ7B,OACIlH,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,OACAF,EAAAtH,EAAAuH,cAAC+J,EAAD,CACI3H,QAASsf,EACT/e,YAAY,sBACZH,WAAYvL,KAAKgK,MAAM0f,YAAY5hB,QAAU9H,KAAKgK,MAAM0f,YAAY5hB,aAAU6E,EAC9EzB,OAAQ,SAAAD,GAAQ,OAAI0Q,EAAKmP,WAAW7f,MAEvCyf,EACAC,4CAKY,IAAA7O,EAAA9b,KACrB,GAA2C,OAAvCA,KAAKgK,MAAM0f,YAAY9hB,YACvB,OACIkB,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,sCAIR,IAAMqhB,EAAoBrqB,KAAK0I,MAAMib,WAAWvjB,KAAK,SAAA6I,GAAC,OAAIA,EAAE/I,KAAO4b,EAAK9R,MAAM0f,YAAY9hB,cAC1F,GAAIyiB,EAAmB,CACnB,GAAuC,IAAnCA,EAAkBnjB,MAAMkE,OACxB,OACItC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,kCAIR,IAAM+hB,EAAcV,EAAkBnjB,MAAMe,IAAI,SAAAgK,GAC5C,MAAO,CACH/R,GAAI+R,EAAK/R,GACTO,KAAMwR,EAAKtQ,MAAQ,kBAIvBqpB,EAAc,KAClB,GAAIhrB,KAAKgK,MAAM0f,YAAY7hB,OAAQ,CAC/B,IAAMojB,EAAeZ,EAAkBnjB,MAAM9G,KAAK,SAAA4kB,GAAC,OAAIA,EAAE9kB,KAAO4b,EAAK9R,MAAM0f,YAAY7hB,SACvF,GAAIojB,EAAc,CACd,IAAMX,EAAkBW,EAAa1mB,MAAM0D,IAAI,SAAAzD,GAC3C,IAAI7C,EAAO6C,EAAKE,aAAe,kBAI/B,OAHIF,EAAK1C,MAAQ,IACbH,GAAQ,MAAQ6C,EAAK1C,MAAQ,KAG7BgH,EAAAtH,EAAAuH,cAAA,MAAI4C,IAAKnH,EAAKtE,IAAKyB,KAII,IAA3B2oB,EAAgBlf,QAChBkf,EAAgB9nB,KACZsG,EAAAtH,EAAAuH,cAAA,MAAI4C,IAAK,SAAT,gBAIRqf,EACIliB,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAf,YACAF,EAAAtH,EAAAuH,cAAA,UAAKuhB,KAMrB,OACIxhB,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,QACAF,EAAAtH,EAAAuH,cAAC+J,EAAD,CACI3H,QAAS4f,EACTrf,YAAY,iBACZH,WAAYvL,KAAKgK,MAAM0f,YAAY7hB,OAAS7H,KAAKgK,MAAM0f,YAAY7hB,YAAS8E,EAC5EzB,OAAQ,SAAAD,GAAQ,OAAI6Q,EAAKoP,QAAQjgB,MAEpC+f,GAKb,OAAO,oDAGoB,IAAAG,EAAAnrB,KACrBshB,EAAQthB,KAAK0I,MAAM0Z,QAAQhiB,KAAK,SAAAT,GAAC,OAAIA,EAAEO,KAAOirB,EAAKnhB,MAAM0f,YAAY/hB,UACrEtD,EAAYrE,KAAK0I,MAAMib,WAAWvjB,KAAK,SAAAwpB,GAAG,OAAIA,EAAI1pB,KAAOirB,EAAKnhB,MAAM0f,YAAY9hB,cAEtF,OAAI0Z,GAASjd,EAELyE,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,wBACAF,EAAAtH,EAAAuH,cAACyZ,GAAD,CACIlB,MAAOA,EACPjd,UAAWA,EACX2c,WAAY,SAACtc,EAAayC,GAAd,OAAmCgkB,EAAKziB,MAAMsY,WAAWtc,EAAayC,OAO9F2B,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,wBACAF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,2HAKgB,IAAAoiB,EAAAprB,KACxB,GAA2C,OAAvCA,KAAKgK,MAAM0f,YAAY9hB,YACvB,OACIkB,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,YACAF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,qDAKZ,IAAKhJ,KAAK0I,MAAM0Z,SAA6C,OAAlCpiB,KAAKgK,MAAM0f,YAAY7hB,OAC9C,OACIiB,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,YACAF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,+CAKZ,IAAMqhB,EAAoBrqB,KAAK0I,MAAMib,WAAWvjB,KAAK,SAAA6I,GAAC,OAAIA,EAAE/I,KAAOkrB,EAAKphB,MAAM0f,YAAY9hB,cAC1F,GAAIyiB,EAAmB,CACnB,IAAIgB,EAA6ChB,EACjD,GAAIrqB,KAAKgK,MAAM0f,YAAY7hB,OAAQ,CAC/B,IAAMojB,EAAeZ,EAAkBnjB,MAAM9G,KAAK,SAAA4kB,GAAC,OAAIA,EAAE9kB,KAAOkrB,EAAKphB,MAAM0f,YAAY7hB,SACnFojB,IACAI,EAAiBJ,GAIzB,GAAoC,IAAhCI,EAAe9mB,MAAM6G,OACrB,OAAO,KAGX,IAeM3G,EAAQzE,KAAKgK,MAAM0f,YAAYplB,aAAa2D,IAAI,SAAAqjB,GAClD,IAAM9mB,EAAO6mB,EAAe9mB,MAAMnE,KAAK,SAAAgS,GAAC,OAAIA,EAAElS,KAAOorB,EAAUprB,KAC/D,GAAIsE,EAAM,CAEN,IADA,IAAM+mB,EAAS,GACN5mB,EAAI,EAAGA,IAAM2mB,EAAU7mB,MAAM2G,SAAUzG,EAC5C4mB,EAAO/oB,KACHsG,EAAAtH,EAAAuH,cAAA,OAAK4C,IAAKhH,GACNmE,EAAAtH,EAAAuH,cAACyiB,GAAD,CACI3pB,MAAOypB,EAAU7mB,MAAME,GACvBmlB,OAAQtlB,EAAKtE,GACb4c,MAAOnY,EACP8mB,WAAY,SAAC3B,EAAQhN,EAAOjb,GAAhB,OAA0BupB,EAAKK,WAAW3B,EAAQhN,EAAOjb,QAKrF,OACIiH,EAAAtH,EAAAuH,cAAA,OAAK4C,IAAK2f,EAAUprB,GAAI8I,UAAU,YAC9BF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cACVxE,EAAKE,aAEVoE,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,eACVuiB,OAOrB,OACIziB,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,YACAF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAf,cACAF,EAAAtH,EAAAuH,cAAC6W,GAAD,CACIzU,QAjDQ,CAChB,CACIjL,GAAI,SACJO,KAAM,kBAEV,CACIP,GAAI,aACJO,KAAM,qBAEV,CACIP,GAAI,QACJO,KAAM,mBAuCF8K,WAAYvL,KAAKgK,MAAM0f,YAAY1hB,kBACnCkD,OAAQ,SAAAD,GAAQ,OAAImgB,EAAKM,qBAAqBzgB,MAElDnC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAf,SACAF,EAAAtH,EAAAuH,cAAA,WAAMtE,IAKlB,OAAO,sCAMP,IACI,IAAIknB,EAAc,KACdC,EAAe,KA+BnB,OA7BI5rB,KAAK0I,MAAM0Z,SACXuJ,EACI7iB,EAAAtH,EAAAuH,cAAA,WACK/I,KAAK6rB,kBACL7rB,KAAK8rB,sBACL9rB,KAAK+rB,iBAIdH,EACI9iB,EAAAtH,EAAAuH,cAAA,WACK/I,KAAKgsB,uBACLhsB,KAAKisB,uBAIdN,EACI7iB,EAAAtH,EAAAuH,cAAA,WACK/I,KAAKksB,kBAIdN,EACI9iB,EAAAtH,EAAAuH,cAAA,WACK/I,KAAKisB,sBAMdnjB,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,MAAMsC,MAAO,CAAE7D,OAAQ,OAAQ0kB,OAAQ,YAClDrjB,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,8CACV2iB,GAEL7iB,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,8CACV4iB,IAIf,MAAO3iB,GACLC,QAAQC,MAAMF,WA5hBoBG,IAAMC,WAA/BogB,GACHngB,aAAe,CACzB8Y,QAAS,KACToD,UAAW,UAqiBb4G,oLACc,IAAAC,EAAArsB,KACZ,OACI8I,EAAAtH,EAAAuH,cAAA,SAAO7F,KAAK,OAAOrB,MAAO7B,KAAK0I,MAAM7G,MAAOoP,SAAU,SAAAC,GAAK,OAAImb,EAAK3jB,MAAM+iB,WAAWY,EAAK3jB,MAAMohB,OAAQuC,EAAK3jB,MAAMoU,MAAO5L,EAAMC,OAAOtP,iBAHzHuH,IAAMC,WCziBnBijB,GAAkB,CAC3B,UACA,UACA,WACA,aACA,aACA,WACA,gBACA,YACA,YACA,YACA,WACA,QACA,aACA,UACA,cACA,UCnCiBC,oLAKD,IAAA7iB,EAAA1J,KACZ,IACI,IAAM4I,EAAU5I,KAAK0I,MAAMrB,MAAMY,IAAI,SAAA4H,GACjC,OACI/G,EAAAtH,EAAAuH,cAACyjB,GAAD,CACI7gB,IAAKkE,EAAK3P,GACV2P,KAAMA,EACN9D,SAAUrC,EAAKhB,MAAM2O,iBAAmBxH,EAAK3P,GAC7CgL,OAAQ,SAACuhB,GAAD,OAAoB/iB,EAAKhB,MAAMwC,OAAOuhB,QAK1D,OACI3jB,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,eACVJ,GAGX,MAAOiC,GAEL,OADA3B,QAAQC,MAAM0B,GACP,aAzBqBzB,IAAMC,WAAzBkjB,GACHjjB,aAAe,OAmC3BojB,oLACc,IAAAriB,EAAArK,KACRsL,EAAQ,aACRb,EAAU,KAed,OAbIzK,KAAK0I,MAAMqD,WACXT,GAAS,YACTb,EACI3B,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,sBACVhJ,KAAK0I,MAAMmH,KAAKpF,UAKzBzK,KAAK0I,MAAMmH,KAAKjF,WAChBU,GAAS,aAITxC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAWsC,EAAOZ,QAAS,kBAAML,EAAK3B,MAAMwC,OAAOb,EAAK3B,MAAMmH,KAAK3P,MACpE4I,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,mBAAmBhJ,KAAK0I,MAAMmH,KAAKpP,MACjDgK,UArBYrB,IAAMC,WCpBdsjB,eACjB,SAAAA,EAAYjkB,GAAc,IAAAgB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA3J,KAAA2sB,IACtBjjB,EAAAC,OAAAE,EAAA,EAAAF,CAAA3J,KAAA2J,OAAAG,EAAA,EAAAH,CAAAgjB,GAAA5iB,KAAA/J,KAAM0I,KACDsB,MAAQ,CACT5G,UAAWsF,EAAMtF,WAHCsG,4EAOLkjB,GAEjB5sB,KAAKgK,MAAM5G,UAAUzB,KAAOirB,EAE5B5sB,KAAKgK,MAAM5G,UAAUJ,MAAQ,EAE7BhD,KAAKgK,MAAM5G,UAAU3C,KAAyB,WAAlBmsB,EAA6B,mBAAqB,KAE9E5sB,KAAKkK,SAAS,CACV9G,UAAWpD,KAAKgK,MAAM5G,gDAIVypB,GAChB,IAAIvpB,EAAW,KAEf,OAAQupB,GACJ,IAAK,QACDvpB,EAAWsB,EAAQkoB,+BACnB,MACJ,IAAK,aACDxpB,EAAWsB,EAAQmoB,oCACV9oB,YAAcjE,KAAK0I,MAAMH,UAAUrI,GAC5C,MACJ,IAAK,SACDoD,EAAWsB,EAAQooB,gCAQ3BhtB,KAAKgK,MAAM5G,UAAUE,SAAWA,EAChCtD,KAAKkK,SAAS,CACV9G,UAAWpD,KAAKgK,MAAM5G,gDAIV6pB,EAAaxY,EAAe5S,GAC5CorB,EAAOxY,GAAS5S,EAEhB7B,KAAKkK,SAAS,CACV9G,UAAWpD,KAAKgK,MAAM5G,+CAIX6pB,EAAaxY,EAAetR,GAC3C,IAAItB,EAAQorB,EAAOxY,GAAStR,EACd,UAAVsR,IACA5S,EAAQZ,KAAKwQ,IAAI5P,EAAO,GACxBA,EAAQZ,KAAK0Q,IAAI9P,EAAO,IAEd,UAAV4S,IACA5S,EAAQZ,KAAKwQ,IAAI5P,EAAO,IAEd,WAAV4S,IACA5S,EAAQZ,KAAKwQ,IAAI5P,EAAO,IAE5BorB,EAAOxY,GAAS5S,EAEhB7B,KAAKkK,SAAS,CACV9G,UAAWpD,KAAKgK,MAAM5G,6CAId,IAAAiH,EAAArK,KACZ,IACI,IAAMyO,EAAa6d,GAAgBrkB,IAAI,SAAA7E,GACnC,IAAM8pB,EAAW,GACXhe,EAAc,GACpB,GAAI9L,IAAciH,EAAKL,MAAM5G,UAAUzB,KAAM,CACvB,WAAdyB,GACA8pB,EAAS1qB,KACLsG,EAAAtH,EAAAuH,cAAA,SACI7F,KAAK,OACLwI,YAAY,mBACZ7J,MAAOwI,EAAKL,MAAM5G,UAAU3C,KAAO4J,EAAKL,MAAM5G,UAAU3C,KAAO,GAC/DwQ,SAAU,SAAAC,GAAK,OAAI7G,EAAK4F,YAAY5F,EAAKL,MAAM5G,UAAW,OAAQ8N,EAAMC,OAAOtP,WAIzE,eAAduB,GACA8pB,EAAS1qB,KACLsG,EAAAtH,EAAAuH,cAACsF,EAAD,CACI1C,IAAI,kBACJ2B,OAAQjD,EAAK3B,MAAMtF,UACnBzB,KAAK,QACLsM,MAAM,aACNb,WAAY,SAAAjK,GAAK,OAAIkH,EAAK+C,WAAW/C,EAAK3B,MAAMtF,UAAW,QAASD,OAKhF,IADA,IAAM1C,EAAOb,EAAMuP,cAAc9E,EAAKL,MAAM5G,WACnCuB,EAAI,EAAGA,IAAMlE,EAAK2K,SAAUzG,EACjCuK,EAAY1M,KAAKsG,EAAAtH,EAAAuH,cAAA,MAAI4C,IAAKhH,EAAGqE,UAAU,WAAWvI,EAAKkE,KAI/D,MAAO,CACHzE,GAAIkD,EACJ3C,KAAM2C,EACNqH,QACI3B,EAAAtH,EAAAuH,cAAA,OAAK4C,IAAKvI,GACL8pB,EACDpkB,EAAAtH,EAAAuH,cAAA,UACKmG,IAIbtE,WAAUP,EAAK3B,MAAMH,UAAUxB,sBAAuF,IAAjEsD,EAAK3B,MAAMH,UAAUxB,oBAAoBhG,QAAQqC,MAIxG+pB,EAAc,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,SAASllB,IAAI,SAAAnE,GAAC,MAAK,CAAE5D,GAAI4D,EAAGrD,KAAMqD,KAC3FspB,EAAe,CACjB,CACIltB,GAAI,QACJO,KAAM,iBAEV,CACIP,GAAI,MACJO,KAAM,gBAGR4sB,EAAmBrtB,KAAK0I,MAAMrF,OAAOU,WAAWkE,IAAI,SAAAnE,GAAC,MAAK,CAAE5D,GAAI4D,EAAE5D,GAAIO,KAAOqD,EAAEI,aAAeJ,EAAEnC,MAAQ,qBAExG2rB,EAAY,CACd,CACIptB,GAAI,OACJO,KAAM,0BACNgK,QACI3B,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,oEAIZ,CACI7I,GAAI,QACJO,KAAM,0BACNgK,QACI3B,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAf,4BACAF,EAAAtH,EAAAuH,cAACsF,EAAD,CACIf,OAAQtN,KAAK0I,MAAMtF,UAAUE,SAC7B3B,KAAK,QACLyL,WAAY,SAAAjK,GAAK,OAAIkH,EAAK+C,WAAW/C,EAAK3B,MAAMtF,UAAUE,SAAU,QAASH,OAGrF2F,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAf,WACAF,EAAAtH,EAAAuH,cAACsF,EAAD,CACIf,OAAQtN,KAAK0I,MAAMtF,UAAUE,SAC7B3B,KAAK,SACLyL,WAAY,SAAAjK,GAAK,OAAIkH,EAAK+C,WAAW/C,EAAK3B,MAAMtF,UAAUE,SAAU,SAAUH,OAGtF2F,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAf,gBACAF,EAAAtH,EAAAuH,cAAC6W,GAAD,CACIzU,QAASgiB,EACT5hB,WACKvL,KAAK0I,MAAMtF,UAAUE,SACnBtD,KAAK0I,MAAMtF,UAAUE,SAAoCE,SAC1D,KAEN0H,OAAQ,SAAAD,GAAQ,OAAIZ,EAAK4F,YAAY5F,EAAK3B,MAAMtF,UAAUE,SAAU,WAAY2H,OAGxFnC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAf,iDACAF,EAAAtH,EAAAuH,cAAC6W,GAAD,CACIzU,QAASiiB,EACT7hB,WACKvL,KAAK0I,MAAMtF,UAAUE,SACnBtD,KAAK0I,MAAMtF,UAAUE,SAAoCO,MAC1D,KAENqH,OAAQ,SAAAD,GAAQ,OAAIZ,EAAK4F,YAAY5F,EAAK3B,MAAMtF,UAAUE,SAAU,QAAS2H,SAMjG,CACI/K,GAAI,YACJO,KAAM,4BACNgK,QACI3B,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAf,aACAF,EAAAtH,EAAAuH,cAAC+J,EAAD,CACI3H,QAASkiB,EACT9hB,WACKvL,KAAK0I,MAAMtF,UAAUE,UACnBtD,KAAK0I,MAAMtF,UAAUE,SAAwCW,kBAC9D0I,EAENzB,OAAQ,SAAAD,GAAQ,OAAIZ,EAAK4F,YAAY5F,EAAK3B,MAAMtF,UAAUE,SAAU,cAAe2H,OAG3FnC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAf,4BACAF,EAAAtH,EAAAuH,cAAC6W,GAAD,CACIzU,QAASiiB,EACT7hB,WACKvL,KAAK0I,MAAMtF,UAAUE,SACnBtD,KAAK0I,MAAMtF,UAAUE,SAAwCO,MAC9D,KAENqH,OAAQ,SAAAD,GAAQ,OAAIZ,EAAK4F,YAAY5F,EAAK3B,MAAMtF,UAAUE,SAAU,QAAS2H,SAMjG,CACI/K,GAAI,SACJO,KAAM,yBACNgK,QACI3B,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAf,oBACAF,EAAAtH,EAAAuH,cAACsF,EAAD,CACIf,OAAQtN,KAAK0I,MAAMtF,UAAUE,SAC7B3B,KAAK,QACLyL,WAAY,SAAAjK,GAAK,OAAIkH,EAAK+C,WAAW/C,EAAK3B,MAAMtF,UAAUE,SAAU,QAASH,UAQrG,OACI2F,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,mBACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,MAAMsC,MAAO,CAAE7D,OAAQ,SAClCqB,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,+CACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,aACAF,EAAAtH,EAAAuH,cAACwkB,GAAD,CACIlmB,MAAOoH,EACP4I,eAAgBrX,KAAKgK,MAAM5G,UAAUzB,KACrCuJ,OAAQ,SAAAuhB,GAAM,OAAIpiB,EAAKmjB,aAAaf,OAG5C3jB,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,+CACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAf,YACAF,EAAAtH,EAAAuH,cAACwkB,GAAD,CACIlmB,MAAOimB,EACPjW,eAAgBrX,KAAKgK,MAAM5G,UAAUE,SAAWtD,KAAKgK,MAAM5G,UAAUE,SAASJ,KAAO,OACrFgI,OAAQ,SAAAuhB,GAAM,OAAIpiB,EAAKojB,YAAYhB,SAMzD,MAAOxjB,GACLC,QAAQC,MAAMF,WA1QkBG,IAAMC,WCR7BqkB,eACjB,SAAAA,EAAYhlB,GAAc,IAAAgB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA3J,KAAA0tB,IACtBhkB,EAAAC,OAAAE,EAAA,EAAAF,CAAA3J,KAAA2J,OAAAG,EAAA,EAAAH,CAAA+jB,GAAA3jB,KAAA/J,KAAM0I,KACDsB,MAAQ,CACT2jB,MAAO,aAHWjkB,2EAONikB,GAChB3tB,KAAKkK,SAAS,CACVyjB,MAAOA,qCAIC,IAAAtjB,EAAArK,KACZ,IACI,IAAI4tB,EAAe,KAEbC,EAAyB,GAE/B,GADA7tB,KAAK0I,MAAM5I,QAAQe,QAAQ,SAAAd,GAAK,OAAIA,EAAMO,SAASO,QAAQ,SAAAhB,GAAO,OAAIguB,EAAYrrB,KAAK3C,OAC5D,IAAvBguB,EAAYziB,OAAc,CAC1B,IAAM0iB,EAA2C,GAC7CC,EAAgB,EACdztB,EAAyC,GAE/C,OAAQN,KAAKgK,MAAM2jB,OACf,IAAK,YACkB,CACf,EAAG,KAAO,IAAM,GAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAEzH9sB,QAAQ,SAAAyB,GACfwrB,EAAQtrB,KAAK,CACTX,MAAOS,EACPsJ,MAAO,aAAehM,EAAMgG,UAAUtD,OAI9CwrB,EAAQjtB,QAAQ,SAAAmtB,GACZ,IAAM1rB,EAAK0rB,EAAOnsB,MAClBvB,EAASgC,EAAGlB,YAAcysB,EAAYrtB,OAAO,SAAAX,GAAO,OAAIA,EAAQ+F,YAActD,MAGlFwrB,EAAQjtB,QAAQ,SAAAmtB,GACZ,IAAM1rB,EAAK0rB,EAAOnsB,MAClBksB,EAAgB9sB,KAAKwQ,IAAInR,EAASgC,GAAI8I,OAAQ2iB,KAElD,MACJ,IAAK,OACDlL,GAAWhiB,QAAQ,SAAAwB,GACfyrB,EAAQtrB,KAAK,CACTX,MAAOQ,EACPuJ,MAAOvJ,MAIfyrB,EAAQjtB,QAAQ,SAAAmtB,GACZ,IAAM3rB,EAAO2rB,EAAOnsB,MACpBvB,EAAS+B,EAAKjB,YAAcysB,EAAYrtB,OAAO,SAAAX,GAAO,OAAIA,EAAQwC,OAASA,MAG/EyrB,EAAQjtB,QAAQ,SAAAmtB,GACZ,IAAM3rB,EAAO2rB,EAAOnsB,MACpBksB,EAAgB9sB,KAAKwQ,IAAInR,EAAS+B,GAAM+I,OAAQ2iB,KAEpD,MACJ,IAAK,OACDjL,GAAejiB,QAAQ,SAAAqC,GACnB4qB,EAAQtrB,KAAK,CACTX,MAAOqB,EACP0I,MAAO1I,MAIf4qB,EAAQjtB,QAAQ,SAAAmtB,GACZ,IAAM9qB,EAAO8qB,EAAOnsB,MACpBvB,EAAS4C,EAAK9B,YAAcysB,EAAYrtB,OAAO,SAAAX,GAAO,OAAIA,EAAQ4F,WAAavC,MAGnF4qB,EAAQjtB,QAAQ,SAAAmtB,GACZ,IAAM9qB,EAAO8qB,EAAOnsB,MACpBksB,EAAgB9sB,KAAKwQ,IAAInR,EAAS4C,GAAMkI,OAAQ2iB,KAS5D,IADA,IAAME,EAAO,GACJnR,EAAQ,EAAGA,IAAUgR,EAAQ1iB,SAAU0R,EAAO,CACnD,IAAMkR,EAASF,EAAQhR,GACjBoR,EAAM5tB,EAAS0tB,EAAOnsB,OACtBC,EAAQosB,EAAMA,EAAI9iB,OAAS,EACjC6iB,EAAKzrB,KACDsG,EAAAtH,EAAAuH,cAAA,OACI4C,IAAKqiB,EAAOpiB,MACZ5C,UAAU,gBACVsC,MAAO,CACH9D,MAAO,uBAAyBsmB,EAAQ1iB,OAAS,IACjDgL,KAAM,uBAAyB0G,EAAQ,MAAQgR,EAAQ1iB,OAAS,KAEpEQ,MAAOoiB,EAAOpiB,MAAQ,KAAOsiB,EAAI9iB,OAAS,aAE1CtC,EAAAtH,EAAAuH,cAAA,OACIC,UAAU,YACVsC,MAAO,CACH7D,OAAQ,wBAA0BsmB,EAAgBjsB,GAAS,MAAQisB,EAAgB,OAG3FjlB,EAAAtH,EAAAuH,cAAA,OACIC,UAAU,MACVsC,MAAO,CACH7D,OAAQ,uBAAyB3F,EAAQ,MAAQisB,EAAgB,SAsBrFH,EACI9kB,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAC6W,GAAD,CACIzU,QAlBS,CACjB,CACIjL,GAAI,YACJO,KAAM,oBAEV,CACIP,GAAI,OACJO,KAAM,QAEV,CACIP,GAAI,OACJO,KAAM,SAQF8K,WAAYvL,KAAKgK,MAAM2jB,MACvBziB,OAAQ,SAAAD,GAAQ,OAAIZ,EAAK8jB,YAAYljB,MAEzCnC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,SACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,QAAQilB,KAMvC,OAAOL,EACT,MAAO3kB,GACLC,QAAQC,MAAMF,WAtJqBG,IAAMC,WCMxC+kB,GAAgB,CACzB,SACA,OACA,YACA,aACA,YACA,MACA,OACA,OACA,SCfiBC,oLACD,IAAA3kB,EAAA1J,KACZ,IACI,IAAMsuB,EAAiBF,GAAcnmB,IAAI,SAAAsmB,GACrC,MAAO,CAAEruB,GAAIquB,EAAG9tB,KAAM8tB,KAG1B,OACIzlB,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,iBACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,SAAf,aAEJF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,gBACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAf,QACAF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAWhJ,KAAK0I,MAAMyO,KAAK3P,MAA1C,SAAuDxH,KAAK0I,MAAMyO,KAAK1P,OAAvE,OACAqB,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAmC,EAAxBhJ,KAAK0I,MAAMyO,KAAK3P,MAA1C,SAAoF,EAAzBxH,KAAK0I,MAAMyO,KAAK1P,OAA3E,OACAqB,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,YACfF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAf,WACAF,EAAAtH,EAAAuH,cAAC+J,EAAD,CACI3H,QAASmjB,EACT5iB,YAAY,iBACZH,WAAYvL,KAAK0I,MAAMyO,KAAKzP,QAAU1H,KAAK0I,MAAMyO,KAAKzP,aAAUiF,EAChEzB,OAAQ,SAAAD,GAAQ,OAAIvB,EAAKhB,MAAMuH,YAAYvG,EAAKhB,MAAMyO,KAAM,UAAWlM,MAE3EnC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,YACfF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAf,QACAF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,oBACXF,EAAAtH,EAAAuH,cAACsK,EAAD,CAAQzG,UAAU,MAAMT,MAAO,SAAAK,GAAG,OAAI9C,EAAKhB,MAAM8lB,YAAY9kB,EAAKhB,MAAMyO,KAAM3K,OAElF1D,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,YACfF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAf,UACAF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,oBACXF,EAAAtH,EAAAuH,cAACsK,EAAD,CAAQzG,UAAU,OAAOT,MAAO,SAACK,EAAKC,GAAN,OAAe/C,EAAKhB,MAAM+lB,cAAc/kB,EAAKhB,MAAMyO,KAAM3K,EAAKC,OAElG3D,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,YACfF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,UAAQ2B,QAAS,kBAAMhB,EAAKhB,MAAMgmB,aAAahlB,EAAKhB,MAAMyO,QAA1D,cACArO,EAAAtH,EAAAuH,cAAA,UAAQ2B,QAAS,kBAAMhB,EAAKhB,MAAMimB,cAAcjlB,EAAKhB,MAAMyO,QAA3D,kBAKlB,MAAOlO,GACLC,QAAQC,MAAMF,WA3CeG,IAAMC,WCG1BulB,eACjB,SAAAA,EAAYlmB,GAAc,IAAAgB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA3J,KAAA4uB,IACtBllB,EAAAC,OAAAE,EAAA,EAAAF,CAAA3J,KAAA2J,OAAAG,EAAA,EAAAH,CAAAilB,GAAA7kB,KAAA/J,KAAM0I,KAEDsB,MAAQ,CACT/B,IAAKS,EAAMT,IACX4mB,eAAgB,MALEnlB,iFASAxJ,GACtBF,KAAKkK,SAAS,CACV2kB,eAAgB3uB,uCAILoH,EAAWC,GAC1B,IAAM4P,EAAOvS,EAAQkqB,gBACrB3X,EAAK7P,EAAIA,EACT6P,EAAK5P,EAAIA,EACT4P,EAAKzP,QAAU,YACf1H,KAAKgK,MAAM/B,IAAIZ,MAAM7E,KAAK2U,GAE1BnX,KAAKkK,SAAS,CACVjC,IAAKjI,KAAKgK,MAAM/B,IAChB4mB,eAAgB1X,EAAKjX,yCAIT2P,EAAerD,GAC/B,OAAQA,GACJ,IAAK,IACDqD,EAAKtI,GAAK,EACV,MACJ,IAAK,IACDsI,EAAKvI,GAAK,EACV,MACJ,IAAK,IACDuI,EAAKtI,GAAK,EACV,MACJ,IAAK,IACDsI,EAAKvI,GAAK,EAOlBtH,KAAKkK,SAAS,CACVjC,IAAKjI,KAAKgK,MAAM/B,yCAIL4H,EAAerD,GAC9B,OAAQA,GACJ,IAAK,IACDqD,EAAKtI,GAAK,EACVsI,EAAKpI,QAAU,EACf,MACJ,IAAK,IACDoI,EAAKrI,OAAS,EACd,MACJ,IAAK,IACDqI,EAAKpI,QAAU,EACf,MACJ,IAAK,IACDoI,EAAKvI,GAAK,EACVuI,EAAKrI,OAAS,EAOtBxH,KAAKkK,SAAS,CACVjC,IAAKjI,KAAKgK,MAAM/B,2CAIH4H,EAAerD,GAChC,OAAQA,GACJ,IAAK,IACGqD,EAAKpI,OAAS,IACdoI,EAAKtI,GAAK,EACVsI,EAAKpI,QAAU,GAEnB,MACJ,IAAK,IACGoI,EAAKrI,MAAQ,IACbqI,EAAKrI,OAAS,GAElB,MACJ,IAAK,IACGqI,EAAKpI,OAAS,IACdoI,EAAKpI,QAAU,GAEnB,MACJ,IAAK,IACGoI,EAAKrI,MAAQ,IACbqI,EAAKvI,GAAK,EACVuI,EAAKrI,OAAS,GAQ1BxH,KAAKkK,SAAS,CACVjC,IAAKjI,KAAKgK,MAAM/B,4CAIF4H,EAAerD,EAAaC,GAC9C,OAAQA,GACJ,IAAK,KACDzM,KAAK+uB,aAAalf,EAAMrD,GACxB,MACJ,IAAK,MACDxM,KAAKgvB,WAAWnf,EAAMrD,yCAQbqD,GACjB,IAAMof,EAAOC,KAAKC,MAAMD,KAAKE,UAAUvf,IACvCof,EAAK/uB,GAAKN,EAAMiF,OAChBoqB,EAAK3nB,GAAK,EACV2nB,EAAK1nB,GAAK,EACVvH,KAAKgK,MAAM/B,IAAIZ,MAAM7E,KAAKysB,GAE1BjvB,KAAKkK,SAAS,CACVjC,IAAKjI,KAAKgK,MAAM/B,IAChB4mB,eAAgBI,EAAK/uB,2CAIP2P,GAClB,IAAMiN,EAAQ9c,KAAKgK,MAAM/B,IAAIZ,MAAMtG,QAAQ8O,GAC3C7P,KAAKgK,MAAM/B,IAAIZ,MAAMgoB,OAAOvS,EAAO,GAEnC9c,KAAKkK,SAAS,CACVjC,IAAKjI,KAAKgK,MAAM/B,IAChB4mB,eAAgB,2CAIJvhB,EAAamH,EAAe5S,GAC5CyL,EAAOmH,GAAS5S,EAEhB7B,KAAKkK,SAAS,CACVjC,IAAKjI,KAAKgK,MAAM/B,uCAIR,IAAAoC,EAAArK,KACZ,IACI,IAAIsvB,EAAQ,KACZ,GAAItvB,KAAKgK,MAAM6kB,eAAgB,CAC3B,IAAMhf,EAAO7P,KAAKgK,MAAM/B,IAAIZ,MAAMjH,KAAK,SAAAwV,GAAC,OAAIA,EAAE1V,KAAOmK,EAAKL,MAAM6kB,iBAC5Dhf,IACAyf,EACIxmB,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,SACXF,EAAAtH,EAAAuH,cAACwmB,GAAD,CACIpY,KAAMtH,EACN2e,YAAa,SAACgB,EAAShjB,GAAV,OAAkBnC,EAAKmkB,YAAYgB,EAAShjB,IACzDiiB,cAAe,SAACe,EAAShjB,EAAKC,GAAf,OAAwBpC,EAAKokB,cAAce,EAAShjB,EAAKC,IACxEiiB,aAAc,SAAAc,GAAO,OAAInlB,EAAKqkB,aAAac,IAC3Cb,cAAe,SAAAa,GAAO,OAAInlB,EAAKskB,cAAca,IAC7Cvf,YAAa,SAAC3C,EAAQmH,EAAO5S,GAAhB,OAA0BwI,EAAK4F,YAAY3C,EAAQmH,EAAO5S,aAMvFytB,EACIxmB,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,SACXF,EAAAtH,EAAAuH,cAAA,+EACAD,EAAAtH,EAAAuH,cAAA,qEAKZ,OACID,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cACVsmB,EACDxmB,EAAAtH,EAAAuH,cAAC+P,EAAD,CACI7Q,IAAKjI,KAAKgK,MAAM/B,IAChB+H,KAAK,OACLqH,eAAgBrX,KAAKgK,MAAM6kB,eAAiB7uB,KAAKgK,MAAM6kB,oBAAiBliB,EACxEgK,kBAAmB,SAAAzW,GAAE,OAAImK,EAAKolB,kBAAkBvvB,IAChD6W,WAAY,SAACzP,EAAGC,GAAJ,OAAU8C,EAAK0M,WAAWzP,EAAGC,OAIvD,MAAO0B,GACLC,QAAQC,MAAMF,WAvMkBG,IAAMC,WCkB7BqmB,eACjB,SAAAA,EAAYhnB,GAAc,IAAAgB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA3J,KAAA0vB,IACtBhmB,EAAAC,OAAAE,EAAA,EAAAF,CAAA3J,KAAA2J,OAAAG,EAAA,EAAAH,CAAA+lB,GAAA3lB,KAAA/J,KAAM0I,KACDsB,MAAQ,CACTnK,QAAS6I,EAAM7I,QACf8vB,KAAM,WACNC,YAAY,EACZC,YAAa,QACbrvB,OAAQ,CACJ6B,MAAM,EACNa,MAAM,EACN4sB,SAAS,EACTnqB,WAAW,EACXC,WAAW,IAZG8D,uEAiBVimB,GACZ,IAAMI,EAAW/vB,KAAKgwB,sBAAsBL,GAC5C3vB,KAAKkK,SAAS,CACVylB,KAAMA,EACNE,YAAaE,EAAS,4CAK1B/vB,KAAKkK,SAAS,CACV0lB,YAAa5vB,KAAKgK,MAAM4lB,oDAITK,GACnBjwB,KAAKkK,SAAS,CACV2lB,YAAaI,wCAID/sB,GAEhBlD,KAAKgK,MAAMxJ,OAAO0C,IAASlD,KAAKgK,MAAMxJ,OAAO0C,GAC7ClD,KAAKkK,SAAS,CACV1J,OAAQR,KAAKgK,MAAMxJ,uDAOGmvB,GAC1B,OAAQA,GACJ,IAAK,WACD,MAAO,CAAC,QAAS,SAAU,YAAa,aAC5C,IAAK,YACD,MAAO,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,QAAS,UAC/D,IAAK,YACD,MAAO,CAAC,cAAe,WAAY,cAAe,kBAAmB,aAAc,cACvF,IAAK,UACD,MAAO,CAAC,WACZ,QACI,MAAO,0CAIG,IAAAtlB,EAAArK,KACZM,EAAsB,GAmC5B,OAlCAN,KAAK0I,MAAM5I,QAAQe,QAAQ,SAAAd,GACvBA,EAAMO,SAASO,QAAQ,SAAAhB,GACnB,IAAI+Q,GAAQ,EAERvG,EAAKL,MAAMnK,QAAQK,KAAOL,EAAQK,KAClC0Q,GAAQ,GAGRvG,EAAKL,MAAMxJ,OAAO6B,MAASgI,EAAKL,MAAMnK,QAAQwC,OAASxC,EAAQwC,OAC/DuO,GAAQ,GAGRvG,EAAKL,MAAMxJ,OAAO0C,MAASmH,EAAKL,MAAMnK,QAAQ4F,WAAa5F,EAAQ4F,WACnEmL,GAAQ,GAGRvG,EAAKL,MAAMxJ,OAAOsvB,SAAYzlB,EAAKL,MAAMnK,QAAQ6F,MAAQ7F,EAAQ6F,MACjEkL,GAAQ,GAGRvG,EAAKL,MAAMxJ,OAAOmF,WAAc0E,EAAKL,MAAMnK,QAAQ8F,YAAc9F,EAAQ8F,YACzEiL,GAAQ,GAGRvG,EAAKL,MAAMxJ,OAAOoF,WAAcyE,EAAKL,MAAMnK,QAAQ+F,YAAc/F,EAAQ+F,YACzEgL,GAAQ,GAGRA,GACAtQ,EAASkC,KAAK3C,OAKnBS,yCAGYmU,EAAenU,EAAqBqpB,GACvD,IAGIrc,EAFMhN,EADIW,KAAKC,MAAMD,KAAKE,SAAWb,EAAS8K,SAI9CvJ,EAAQ,KACN0V,EAAS9C,EAAM7T,MAAM,KAC3B2W,EAAO1W,QAAQ,SAAAC,GACPA,IAAUyW,EAAOA,EAAOnM,OAAS,GACjCvJ,EAAQyL,EAAOxM,GAEfwM,EAASA,EAAOxM,KAIxBd,KAAKiQ,YAAYwE,EAAO5S,EAAO8nB,sCAGhBrpB,GAAqB,IAAA4L,EAAAlM,KACpC,CACI,QACA,SACA,YACA,YACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,eACA,SACA,KACA,UACA,gBACA,oBACA,gBACA,uBACFa,QAAQ,SAAA4T,GACNvI,EAAKgkB,eAAezb,EAAOnU,GAAU,KAGzCyiB,GAAYliB,QAAQ,SAAAqC,GAEMgJ,EAAKlC,MAAMnK,QAAQiH,OAAOtG,OAAO,SAAA+tB,GAAC,OAAIA,EAAErrB,OAASA,IACzDrC,QAAQ,SAAAiD,GAClB,IAAMgZ,EAAQ5Q,EAAKlC,MAAMnK,QAAQiH,OAAOqpB,UAAU,SAAA5B,GAAC,OAAIA,IAAMzqB,IAC7DoI,EAAKlC,MAAMnK,QAAQiH,OAAOuoB,OAAOvS,EAAO,KAI5C,IAAMhW,EAAkB,GACxBxG,EAASO,QAAQ,SAAA6f,GACbA,EAAE5Z,OAAOtG,OAAO,SAAA+tB,GAAC,OAAIA,EAAErrB,OAASA,IAC3BrC,QAAQ,SAAA0tB,GAAC,OAAIznB,EAAOtE,KAAK+rB,OAIlC,IAAM6B,EAA8C,GACpDtpB,EAAOjG,QAAQ,SAAA0tB,GACX,IAAM3a,EAAUwc,EAAShwB,KAAK,SAAAiwB,GAAC,OAAIA,EAAEtgB,MAAMpO,OAAS4sB,EAAE5sB,OAClDiS,EACAA,EAAQ9R,OAAS,EAEjBsuB,EAAS5tB,KAAK,CACVuN,MAAOwe,EACPzsB,MAAO,MAMnB,IAAMwuB,EAAqB,GAC3BF,EAAS5vB,OAAO,SAAA6vB,GAAC,OAAIA,EAAEvuB,QAAUxB,EAAS8K,SACrCvK,QAAQ,SAAAwvB,GACLnkB,EAAKkE,UAAUigB,EAAEtgB,OACjBugB,EAAS9tB,KAAK6tB,EAAEtgB,MAAM7P,MAE9BowB,EAASzvB,QAAQ,SAAAX,GACb,IAAM4c,EAAQsT,EAASD,UAAU,SAAAE,GAAC,OAAIA,EAAEtgB,MAAM7P,KAAOA,IACrDkwB,EAASf,OAAOvS,EAAO,KAI3B,IADA,IAAMyT,EAAMzpB,EAAOsE,OAAS9K,EAAS8K,OAC9Bc,EAAKlC,MAAMnK,QAAQiH,OAAOtG,OAAO,SAAA+tB,GAAC,OAAIA,EAAErrB,OAASA,IAAMkI,OAASmlB,GAAK,CACxE,IAAMzT,EAAQ7b,KAAKC,MAAMD,KAAKE,SAAWivB,EAAShlB,QAC5CmjB,EAAI6B,EAAStT,GAAO/M,MAC1B7D,EAAKkE,UAAUme,GACf6B,EAASf,OAAOvS,EAAO,MAI/B9c,KAAKkK,SAAS,CACVrK,QAASG,KAAKgK,MAAMnK,2CAIXqD,GACb,IAAM6M,EAAQnL,EAAQ4rB,cACtBzgB,EAAM7M,KAAOA,EACb6M,EAAMpO,KAAO,OAAS3B,KAAKywB,kBAAkBvtB,GAAM,GAAOvC,cAC1DX,KAAKgK,MAAMnK,QAAQiH,OAAOtE,KAAKuN,GAC/B/P,KAAKkK,SAAS,CACVrK,QAASG,KAAKgK,MAAMnK,iDAILqD,EAAc5C,GACjC,IAAMwG,EAAkB,GACxBxG,EAASO,QAAQ,SAAA6f,GACbA,EAAE5Z,OAAOtG,OAAO,SAAA+tB,GAAC,OAAIA,EAAErrB,OAASA,IAC3BrC,QAAQ,SAAA0tB,GACLznB,EAAOtE,KAAK+rB,OAIxB,IAAMzR,EAAQ7b,KAAKC,MAAMD,KAAKE,SAAW2F,EAAOsE,QAC1C2E,EAAQjJ,EAAOgW,GAErB9c,KAAKoQ,UAAUL,uCAGCA,GAChB,IAAM+M,EAAQ9c,KAAKgK,MAAMnK,QAAQiH,OAAO/F,QAAQgP,GAChD/P,KAAKgK,MAAMnK,QAAQiH,OAAOuoB,OAAOvS,EAAO,GACxC9c,KAAKkK,SAAS,CACVrK,QAASG,KAAKgK,MAAMnK,oDAIFqD,EAAcwtB,GACpC,IAAI/uB,EAAO/B,EAAM4Q,UAAUtN,GAI3B,OAHIwtB,IACA/uB,GAAQ,KAELA,oCAGOoO,GACd,IAAMkf,EAAOC,KAAKC,MAAMD,KAAKE,UAAUrf,IACvCkf,EAAK/uB,GAAKN,EAAMiF,OAChB7E,KAAKgK,MAAMnK,QAAQiH,OAAOtE,KAAKysB,GAC/BjvB,KAAKkK,SAAS,CACVrK,QAASG,KAAKgK,MAAMnK,8CAIRkQ,EAAc0E,EAAe5S,GAC5CkO,EAAc0E,GAAS5S,EACxB7B,KAAKkK,SAAS,CACVrK,QAASG,KAAKgK,MAAMnK,6CAIT4U,EAAetR,GAC9B,IAAImK,EAActN,KAAKgK,MAAMnK,QACzBgC,EAAa,KACX0V,EAAS9C,EAAM7T,MAAM,KAC3B2W,EAAO1W,QAAQ,SAAAC,GACPA,IAAUyW,EAAOA,EAAOnM,OAAS,GACjCvJ,EAAQyL,EAAOxM,GAEfwM,EAASA,EAAOxM,KAIxB,IAAM6vB,EAAsB,cAAVlc,EAAyB7U,EAAMqkB,eAAepiB,EAAOsB,IAAUtB,GAAgB,GAAKsB,EACtGnD,KAAKiQ,YAAYwE,EAAOkc,uCAGRlc,EAAe5S,GAA2B,IAAAqQ,EAAAlS,KAAf2pB,IAAejd,UAAAtB,OAAA,QAAAuB,IAAAD,UAAA,KAAAA,UAAA,GACtDY,EAActN,KAAKgK,MAAMnK,QACvB0X,EAAS9C,EAAM7T,MAAM,KAC3B2W,EAAO1W,QAAQ,SAAAC,GACX,GAAIA,IAAUyW,EAAOA,EAAOnM,OAAS,GAAI,CAGrC,GAFAkC,EAAOxM,GAASe,EAED,sBAAV4S,GAA6C,SAAVA,GAAgC,YAAVA,EAAsB,CAChF,IAEMmc,GAFQhxB,EAAM0S,WAAWJ,EAAKlI,MAAMnK,QAAQwC,MAEvB,GAAK,EADjBpB,KAAKC,OAAOgR,EAAKlI,MAAMnK,QAAQgG,cAAcE,IAAM,IAAM,GAElE2L,EAAKzQ,KAAKC,MAAMgR,EAAKlI,MAAMnK,QAAQuG,QAAUwqB,GAEnD1e,EAAKlI,MAAMnK,QAAQ8C,MAAQ+O,EAG3BiY,GACAzX,EAAKhI,SAAS,CACVrK,QAASqS,EAAKlI,MAAMnK,eAI5ByN,EAASA,EAAOxM,4CAQLR,GACnB,OAAQN,KAAKgK,MAAM6lB,aACf,IAAK,QACD,OAAO7vB,KAAK6wB,gBAAgB,QAAS,OAAQvwB,GACjD,IAAK,SACD,OAAON,KAAK6wB,gBAAgB,SAAU,OAAQvwB,GAClD,IAAK,YACD,OAAON,KAAK6wB,gBAAgB,YAAa,OAAQvwB,GACrD,IAAK,YACD,OAAON,KAAK6wB,gBAAgB,YAAa,OAAQvwB,GACrD,IAAK,MACD,OAAON,KAAK6wB,gBAAgB,oBAAqB,SAAUvwB,GAC/D,IAAK,MACD,OAAON,KAAK6wB,gBAAgB,oBAAqB,SAAUvwB,GAC/D,IAAK,MACD,OAAON,KAAK6wB,gBAAgB,oBAAqB,SAAUvwB,GAC/D,IAAK,MACD,OAAON,KAAK6wB,gBAAgB,oBAAqB,SAAUvwB,GAC/D,IAAK,MACD,OAAON,KAAK6wB,gBAAgB,oBAAqB,SAAUvwB,GAC/D,IAAK,MACD,OAAON,KAAK6wB,gBAAgB,oBAAqB,SAAUvwB,GAC/D,IAAK,QACD,OAAON,KAAK6wB,gBAAgB,eAAgB,OAAQvwB,GACxD,IAAK,SACD,OAAON,KAAK6wB,gBAAgB,SAAU,OAAQvwB,GAClD,IAAK,cACD,OAAON,KAAK6wB,gBAAgB,KAAM,SAAUvwB,GAChD,IAAK,WACD,OAAON,KAAK6wB,gBAAgB,UAAW,SAAUvwB,GACrD,IAAK,cACD,OAAON,KAAK6wB,gBAAgB,gBAAiB,OAAQvwB,GACzD,IAAK,kBACD,OAAON,KAAK6wB,gBAAgB,oBAAqB,OAAQvwB,GAC7D,IAAK,aACD,OAAON,KAAK6wB,gBAAgB,gBAAiB,OAAQvwB,GACzD,IAAK,aACD,OAAON,KAAK6wB,gBAAgB,sBAAuB,OAAQvwB,GAC/D,IAAK,UACD,OAAON,KAAK8wB,kBAAkBxwB,GAClC,QACI,OAAO,8CAIKmU,EAAesc,EAA6BzwB,GAAqB,IAAAmS,EAAAzS,KAC/EgxB,EAAgB1wB,EACjB2H,IAAI,SAAAyY,GACD,IAAMnJ,EAAS9C,EAAM7T,MAAM,KACvB0M,EAAcoT,EACd7e,EAAQ,KAWZ,OAVA0V,EAAO1W,QAAQ,SAAAC,GACPA,IAAUyW,EAAOA,EAAOnM,OAAS,GACjCvJ,EAAQyL,EAAOxM,GAEfwM,EAASA,EAAOxM,KAGN,SAAbiwB,GAAmC,KAAVlvB,IAC1BA,EAAQ,MAELA,IAEVrB,OAAO,SAAAgd,GAAC,OAAU,OAANA,IAEX4S,EAA4C,GAClD,GAAiB,WAAbW,EAAuB,CACvB,IAAIpf,EAAqB,KACrBF,EAAqB,KASzB,GARAuf,EAAOnwB,QAAQ,SAAA2c,IACE,OAAR7L,GAAkB6L,EAAI7L,KACvBA,EAAM6L,IAEG,OAAR/L,GAAkB+L,EAAI/L,KACvBA,EAAM+L,KAGD,OAAR7L,GAA0B,OAARF,EACnB,IAAK,IAAI9M,EAAIgN,EAAKhN,GAAK8M,IAAO9M,EAC1ByrB,EAAS5tB,KAAK,CACVX,MAAO8C,EACP7C,MAAO,IAiBvB,OAZAkvB,EAAOnwB,QAAQ,SAAA2c,GACX,IAAM5J,EAAUwc,EAAShwB,KAAK,SAAAiwB,GAAC,OAAIA,EAAExuB,QAAU2b,IAC3C5J,EACAA,EAAQ9R,OAAS,EAEjBsuB,EAAS5tB,KAAK,CACVX,MAAO2b,EACP1b,MAAO,MAKXivB,GACJ,IAAK,SACDnxB,EAAMqxB,YAAYb,GAClB,MACJ,IAAK,OACDxwB,EAAMsxB,YAAYd,GAOT,SAAbW,IAEc,IADAzwB,EAAS8K,OAAS4lB,EAAO5lB,QAEnCglB,EAAS5tB,KAAK,CACVX,MAAO,GACPC,MAAOxB,EAAS8K,OAAS4lB,EAAO5lB,UAK5C,IAAM+lB,EAAgBf,EAASnoB,IAAI,SAAAooB,GAC/B,IAAM7oB,EAAQ,IAAM6oB,EAAEvuB,MAAQxB,EAAS8K,OACvC,OACItC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,mDAAmD2C,IAAKykB,EAASrvB,QAAQsvB,IACpFvnB,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,UACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,kBACVqnB,EAAExuB,OAAS,qBAGpBiH,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,UACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,iBACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,MAAMsC,MAAO,CAAE9D,MAAOA,EAAQ,SAGrDsB,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,UACXF,EAAAtH,EAAAuH,cAAA,UAAQ2B,QAAS,kBAAM+H,EAAKxC,YAAYwE,EAAO4b,EAAExuB,SAAjD,sBAMhB,OACIiH,EAAAtH,EAAAuH,cAAA,WACKooB,EACDroB,EAAAtH,EAAAuH,cAAA,UAAQ2B,QAAS,kBAAM+H,EAAKyd,eAAezb,EAAOnU,GAAU,KAA5D,kEAKcA,GAAqB,IAAAkb,EAAAxb,KACrCoxB,EAAO,GA6Db,OA5DAA,EAAK5uB,KACDsG,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,mDAAmD2C,IAAI,UAClE7C,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,UACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,kBACXF,EAAAtH,EAAAuH,cAAA,mBAGRD,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,UACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,yBACXF,EAAAtH,EAAAuH,cAAA,6BAGRD,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,UACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,yBACXF,EAAAtH,EAAAuH,cAAA,0BAMhBga,GAAYliB,QAAQ,SAAAqC,GAChB,IAAIyO,EAAqB,KACrBF,EAAqB,KACrB3P,EAAQ,EACZxB,EAASO,QAAQ,SAAA6f,GACb,IAAM/b,EAAI+b,EAAE5Z,OAAOtG,OAAO,SAAA+tB,GAAC,OAAIA,EAAErrB,OAASA,IAAMkI,QACnC,OAARuG,GAAkBhN,EAAIgN,KACvBA,EAAMhN,IAEG,OAAR8M,GAAkB9M,EAAI8M,KACvBA,EAAM9M,GAEV7C,GAAS6C,IAEb,IAAM4rB,EAAMtvB,KAAKiH,MAAMpG,EAAQxB,EAAS8K,QAExCgmB,EAAK5uB,KACDsG,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,mDAAmD2C,IAAKzI,GACnE4F,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,UACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAqB,IAAVlH,EAAc,0BAA4B,kBACrD0Z,EAAKiV,kBAAkBvtB,GAAM,KAGtC4F,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,UACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAqB,IAAVlH,EAAc,iCAAmC,yBAC5DyuB,IAGTznB,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,UACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAqB,IAAVlH,EAAc,iCAAmC,yBAC5D6P,EADL,MACaF,IAGjB3I,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,UACXF,EAAAtH,EAAAuH,cAAA,UAAQC,UAAqB,IAAVlH,EAAc,WAAa,GAAI4I,QAAS,kBAAM8Q,EAAK6V,eAAenuB,EAAM5C,KAA3F,mBAOZwI,EAAAtH,EAAAuH,cAAA,WACKqoB,yCAKS9wB,GAAqB,IAAAqb,EAAA3b,KACjCsxB,EAAqB,GACvBtxB,KAAKgK,MAAMxJ,OAAO6B,MAClBivB,EAAS9uB,KAAK,QAEdxC,KAAKgK,MAAMxJ,OAAO0C,MAClBouB,EAAS9uB,KAAK,QAEdxC,KAAKgK,MAAMxJ,OAAOsvB,SAClBwB,EAAS9uB,KAAK,WAEdxC,KAAKgK,MAAMxJ,OAAOmF,WAClB2rB,EAAS9uB,KAAK,aAEdxC,KAAKgK,MAAMxJ,OAAOoF,WAClB0rB,EAAS9uB,KAAK,oBAElB,IAAM+uB,EAAgBD,EAASlmB,OAAS,EAAK,YAAckmB,EAAS/R,KAAK,MAAQ,wBAC3EiS,EACF1oB,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACV1I,EAAS8K,OADd,sBACyCmmB,EADzC,KAKAE,EAAgB,KA6CpB,OA3CIA,EADAzxB,KAAKgK,MAAM4lB,WAEP9mB,EAAAtH,EAAAuH,cAAA,WACID,EAAAtH,EAAAuH,cAAC0W,GAAD,CACIxR,MAAO,QAAUjO,KAAKgK,MAAMnK,QAAQwC,KACpCwb,QAAS7d,KAAKgK,MAAMxJ,OAAO6B,KAC3B4N,YAAa,SAAApO,GAAK,OAAI8Z,EAAK+V,YAAY,WAE3C5oB,EAAAtH,EAAAuH,cAAC0W,GAAD,CACIxR,MAAO,QAAUjO,KAAKgK,MAAMnK,QAAQ4F,SACpCoY,QAAS7d,KAAKgK,MAAMxJ,OAAO0C,KAC3B+M,YAAa,SAAApO,GAAK,OAAI8Z,EAAK+V,YAAY,WAE3C5oB,EAAAtH,EAAAuH,cAAC0W,GAAD,CACIxR,MAAOjO,KAAKgK,MAAMnK,QAAQ6F,IAAM,WAAa1F,KAAKgK,MAAMnK,QAAQ6F,IAAM,UACtEmY,QAAS7d,KAAKgK,MAAMxJ,OAAOsvB,QAC3BllB,UAAW5K,KAAKgK,MAAMnK,QAAQ6F,IAC9BuK,YAAa,SAAApO,GAAK,OAAI8Z,EAAK+V,YAAY,cAE3C5oB,EAAAtH,EAAAuH,cAAC0W,GAAD,CACIxR,MAAOjO,KAAKgK,MAAMnK,QAAQ8F,UAAY,aAAe3F,KAAKgK,MAAMnK,QAAQ8F,UAAY,YACpFkY,QAAS7d,KAAKgK,MAAMxJ,OAAOmF,UAC3BiF,UAAW5K,KAAKgK,MAAMnK,QAAQ8F,UAC9BsK,YAAa,SAAApO,GAAK,OAAI8Z,EAAK+V,YAAY,gBAE3C5oB,EAAAtH,EAAAuH,cAAC0W,GAAD,CACIxR,MAAO,oBAAsBrO,EAAMgG,UAAU5F,KAAKgK,MAAMnK,QAAQ+F,WAChEiY,QAAS7d,KAAKgK,MAAMxJ,OAAOoF,UAC3BqK,YAAa,SAAApO,GAAK,OAAI8Z,EAAK+V,YAAY,gBAE3C5oB,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,YACfF,EAAAtH,EAAAuH,cAAA,UAAQC,UAAW1I,EAAS8K,OAAS,EAAI,WAAa,GAAIV,QAAS,kBAAMiR,EAAKgW,WAAWrxB,KAAzF,wBACAwI,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,YACdwoB,GAKL1oB,EAAAtH,EAAAuH,cAAA,WACKyoB,GAMT1oB,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,QACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,SAAf,oBACAF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAWhJ,KAAKgK,MAAM4lB,WAAa,eAAiB,QAAStlB,IAAKgC,IAAO9B,IAAI,QAAQE,QAAS,kBAAMiR,EAAKiW,mBAElH9oB,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,gBACVyoB,6CAOGnxB,GAAqB,IAAAwb,EAAA9b,KAYzC,OAXeJ,EAAM2B,KAAKjB,GACE2H,IAAI,SAAAyY,GAAC,OAC7B5X,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,UAAU2C,IAAK+U,EAAExgB,IAC5B4I,EAAAtH,EAAAuH,cAAC+Q,EAAD,CACIvR,UAAWmY,EACX1Q,KAAM,YAAc8L,EAAK9R,MAAM2lB,KAC/Bvf,UAAW,SAAAL,GAAK,OAAI+L,EAAK1L,UAAUL,0CAUnC,IAAAob,EAAAnrB,KACZ,IACI,IAmBIM,EAAsB,GACtBN,KAAK0I,MAAMmpB,eACXvxB,EAAWN,KAAK8xB,eAGpB,IAAIlpB,EAAU,KACd,OAAQ5I,KAAKgK,MAAM2lB,MACf,IAAK,WACD,IAAMxM,EAAaL,GAAe7a,IAAI,SAAAmb,GAAG,MAAK,CAAEljB,GAAIkjB,EAAK3iB,KAAM2iB,KACzDF,EAAcL,GAAW5a,IAAI,SAAA5F,GAAI,MAAK,CAAEnC,GAAImC,EAAM5B,KAAM4B,KAE9DuG,EACIE,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,OACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,oCACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAf,QACAF,EAAAtH,EAAAuH,cAAA,SAAO7F,KAAK,OAAOrB,MAAO7B,KAAKgK,MAAMnK,QAAQ8B,KAAMsP,SAAU,SAAAC,GAAK,OAAIia,EAAKlb,YAAY,OAAQiB,EAAMC,OAAOtP,UAC5GiH,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAf,QACAF,EAAAtH,EAAAuH,cAAC+J,EAAD,CACI3H,QAAS+X,EACT3X,WAAYvL,KAAKgK,MAAMnK,QAAQwC,KAC/B6I,OAAQ,SAAAD,GAAQ,OAAIkgB,EAAKlb,YAAY,OAAQhF,MAEjDnC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAf,QACAF,EAAAtH,EAAAuH,cAAC+J,EAAD,CACI3H,QAASgY,EACT5X,WAAYvL,KAAKgK,MAAMnK,QAAQ4F,SAC/ByF,OAAQ,SAAAD,GAAQ,OAAIkgB,EAAKlb,YAAY,WAAYhF,MAErDnC,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAf,WACAF,EAAAtH,EAAAuH,cAAA,SAAO7F,KAAK,OAAOrB,MAAO7B,KAAKgK,MAAMnK,QAAQ6F,IAAKuL,SAAU,SAAAC,GAAK,OAAIia,EAAKlb,YAAY,MAAOiB,EAAMC,OAAOtP,UAC1GiH,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAf,aACAF,EAAAtH,EAAAuH,cAAA,SAAO7F,KAAK,OAAOrB,MAAO7B,KAAKgK,MAAMnK,QAAQ8F,UAAWsL,SAAU,SAAAC,GAAK,OAAIia,EAAKlb,YAAY,YAAaiB,EAAMC,OAAOtP,WAE1HiH,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,oCACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAf,oBACAF,EAAAtH,EAAAuH,cAACsF,EAAD,CACIf,OAAQtN,KAAKgK,MAAMnK,QACnB8B,KAAK,YACLqL,QAAS,SAAAnL,GAAK,OAAIjC,EAAMgG,UAAU/D,IAClCuL,WAAY,SAAAjK,GAAK,OAAIgoB,EAAK/d,WAAW,YAAajK,MAEtD2F,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAf,SACAF,EAAAtH,EAAAuH,cAAA,SAAO7F,KAAK,OAAOrB,MAAO7B,KAAKgK,MAAMnK,QAAQ6G,MAAOuK,SAAU,SAAAC,GAAK,OAAIia,EAAKlb,YAAY,QAASiB,EAAMC,OAAOtP,UAC9GiH,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAf,UACAF,EAAAtH,EAAAuH,cAAA,SAAO7F,KAAK,OAAOrB,MAAO7B,KAAKgK,MAAMnK,QAAQ+G,OAAQqK,SAAU,SAAAC,GAAK,OAAIia,EAAKlb,YAAY,SAAUiB,EAAMC,OAAOtP,UAChHiH,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAf,aACAF,EAAAtH,EAAAuH,cAAA,SAAO7F,KAAK,OAAOrB,MAAO7B,KAAKgK,MAAMnK,QAAQsF,UAAW8L,SAAU,SAAAC,GAAK,OAAIia,EAAKlb,YAAY,YAAaiB,EAAMC,OAAOtP,UACtHiH,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAf,aACAF,EAAAtH,EAAAuH,cAAA,SAAO7F,KAAK,OAAOrB,MAAO7B,KAAKgK,MAAMnK,QAAQgH,UAAWoK,SAAU,SAAAC,GAAK,OAAIia,EAAKlb,YAAY,YAAaiB,EAAMC,OAAOtP,YAIlI,MACJ,IAAK,YACD+G,EACIE,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,OACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,oCACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAf,kBACAF,EAAAtH,EAAAuH,cAACqL,EAAD,CACIhG,MAAM,EACN7F,UAAWvI,KAAKgK,MAAMnK,QACtBuN,WAAY,SAACE,EAAQpK,EAAMC,GAAf,OAAyBgoB,EAAK/d,WAAWlK,EAAMC,OAGnE2F,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,oCACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAf,iBACAF,EAAAtH,EAAAuH,cAAA,SACI7F,KAAK,OACLrB,MAAO7B,KAAKgK,MAAMnK,QAAQ4G,aAC1BwK,SAAU,SAAAC,GAAK,OAAIia,EAAKlb,YAAY,eAAgBiB,EAAMC,OAAOtP,UAErEiH,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAf,UACAF,EAAAtH,EAAAuH,cAAA,SACI7F,KAAK,OACLrB,MAAO7B,KAAKgK,MAAMnK,QAAQ8G,OAC1BsK,SAAU,SAAAC,GAAK,OAAIia,EAAKlb,YAAY,SAAUiB,EAAMC,OAAOtP,YAK3E,MACJ,IAAK,YACD+G,EACIE,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,OACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,oCACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAf,eACAF,EAAAtH,EAAAuH,cAACsF,EAAD,CACIf,OAAQtN,KAAKgK,MAAMnK,QACnB8B,KAAK,KACLyL,WAAY,SAAAjK,GAAK,OAAIgoB,EAAK/d,WAAW,KAAMjK,MAE/C2F,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAf,YACAF,EAAAtH,EAAAuH,cAACsF,EAAD,CACIf,OAAQtN,KAAKgK,MAAMnK,QACnB8B,KAAK,UACLqL,QAAS,SAAAnL,GAAK,OAAIA,EAAQ,IAAMjC,EAAM0S,WAAW6Y,EAAKnhB,MAAMnK,QAAQwC,OACpE+K,WAAY,SAAAjK,GAAK,OAAIgoB,EAAK/d,WAAW,UAAWjK,MAEpD2F,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAf,cACAF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,YAAYhJ,KAAKgK,MAAMnK,QAAQ8C,MAA9C,QAEJmG,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,oCACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAf,sBACAF,EAAAtH,EAAAuH,cAAA,SACI7F,KAAK,OACLrB,MAAO7B,KAAKgK,MAAMnK,QAAQwG,OAAOC,OACjC2K,SAAU,SAAAC,GAAK,OAAIia,EAAKlb,YAAY,gBAAiBiB,EAAMC,OAAOtP,UAEtEiH,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAf,0BACAF,EAAAtH,EAAAuH,cAAA,SACI7F,KAAK,OACLrB,MAAO7B,KAAKgK,MAAMnK,QAAQwG,OAAOE,WACjC0K,SAAU,SAAAC,GAAK,OAAIia,EAAKlb,YAAY,oBAAqBiB,EAAMC,OAAOtP,UAE1EiH,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAf,qBACAF,EAAAtH,EAAAuH,cAAA,SACI7F,KAAK,OACLrB,MAAO7B,KAAKgK,MAAMnK,QAAQwG,OAAOG,OACjCyK,SAAU,SAAAC,GAAK,OAAIia,EAAKlb,YAAY,gBAAiBiB,EAAMC,OAAOtP,UAEtEiH,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAf,wBACAF,EAAAtH,EAAAuH,cAAA,SACI7F,KAAK,OACLrB,MAAO7B,KAAKgK,MAAMnK,QAAQkH,oBAC1BkK,SAAU,SAAAC,GAAK,OAAIia,EAAKlb,YAAY,sBAAuBiB,EAAMC,OAAOtP,YAKxF,MACJ,IAAK,UACD+G,EACIE,EAAAtH,EAAAuH,cAACsL,EAAD,CACI9L,UAAWvI,KAAKgK,MAAMnK,QACtBmQ,KAAK,OACLK,SAAU,SAAAnN,GAAI,OAAIioB,EAAK9a,SAASnN,IAChCiN,YAAa,SAAAJ,GAAK,OAAIob,EAAKhb,YAAYJ,IACvCE,YAAa,SAACF,EAAO7M,EAAMrB,GAAd,OAAwBspB,EAAK4G,YAAYhiB,EAAO7M,EAAMrB,MASnF,IAAIkZ,EAAO,KACX,GAAI/a,KAAK0I,MAAMmpB,cAAiBvxB,EAAS8K,OAAS,EAAI,CAClD,IAAI4mB,EAAW,KACf,GAAIhyB,KAAKgwB,sBAAsBhwB,KAAKgK,MAAM2lB,MAAMvkB,OAAS,EAAG,CACxD,IAAMD,EAAUnL,KAAKgwB,sBAAsBhwB,KAAKgK,MAAM2lB,MAAM1nB,IAAI,SAAAmK,GAC5D,MAAO,CACHlS,GAAIkS,EACJ3R,KAAM2R,KAGd4f,EACIlpB,EAAAtH,EAAAuH,cAAC6W,GAAD,CACI5B,MAAM,EACN7S,QAASA,EACTI,WAAYvL,KAAKgK,MAAM6lB,YACvB3kB,OAAQ,SAAAD,GAAQ,OAAIkgB,EAAK8G,eAAehnB,MAKpD8P,EACIjS,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,gBACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,cAAf,qCACCgpB,EACAhyB,KAAKkyB,eAAe5xB,IAKjC,IAAI6xB,EAAc,KAUlB,OATInyB,KAAK0I,MAAMmpB,eACXM,EACIrpB,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,2DACVhJ,KAAKoyB,cAAc9xB,GACnBN,KAAK8kB,gBAAgBxkB,KAM9BwI,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,MAAMsC,MAAO,CAAE7D,OAAQ,OAAQ0kB,OAAQ,YAClDrjB,EAAAtH,EAAAuH,cAAA,OACIC,UACIhJ,KAAK0I,MAAMmpB,aACT,8CACA,iDAENvmB,MAAO,CAAE+mB,WAAY,SAErBvpB,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAC6W,GAAD,CACI5B,MAAM,EACN7S,QAzNN,CACV,CACIjL,GAAI,WACJO,KAAM,YAEV,CACIP,GAAI,YACJO,KAAM,aAEV,CACIP,GAAI,YACJO,KAAM,UAEV,CACIP,GAAI,UACJO,KAAM,YA2MM8K,WAAYvL,KAAKgK,MAAM2lB,KACvBzkB,OAAQ,SAAAD,GAAQ,OAAIkgB,EAAKmH,QAAQrnB,MAEpCrC,EACAmS,IAGRoX,GAGX,MAAOlpB,GACLC,QAAQC,MAAMF,WAr1BsBG,IAAMC,WCtBjCkpB,oLACD,IAAA7oB,EAAA1J,KACZ,IACI,IAAMwyB,EAA8B,OAApBxyB,KAAK0I,MAAM+pB,KAAgB,0BAA4B,iBACjEC,EAAmC,YAApB1yB,KAAK0I,MAAM+pB,KAAqB,0BAA4B,iBAC3EE,EAAmC,YAApB3yB,KAAK0I,MAAM+pB,KAAqB,0BAA4B,iBAC7EG,EAAqC,cAApB5yB,KAAK0I,MAAM+pB,KAAuB,0BAA4B,iBAC7EI,EAA+B,SAApB7yB,KAAK0I,MAAM+pB,KAAkB,0BAA4B,iBACtEK,EAAkC,WAApB9yB,KAAK0I,MAAM+pB,KAAoB,0BAA4B,iBAEvEM,EAAkD,IAA9B/yB,KAAK0I,MAAM5I,QAAQsL,OACvC4nB,EAA+C,IAA9BhzB,KAAK0I,MAAM0Z,QAAQhX,QAAmD,IAAjCpL,KAAK0I,MAAMib,WAAWvY,OAQlF,OAPK2nB,IACDH,GAAkB,aAEjBI,IACDF,GAAe,aAIfhqB,EAAAtH,EAAAuH,cAAA,OAAKC,UAAWhJ,KAAK0I,MAAMuqB,KAAO,cAAgB,UAC9CnqB,EAAAtH,EAAAuH,cAAA,OAAKC,UAAWwpB,EAAS9nB,QAAS,kBAAMhB,EAAKhB,MAAMwqB,QAAQ,QAA3D,aACApqB,EAAAtH,EAAAuH,cAAA,OAAKC,UAAW0pB,EAAchoB,QAAS,kBAAMhB,EAAKhB,MAAMwqB,QAAQ,aAAhE,qBACApqB,EAAAtH,EAAAuH,cAAA,OAAKC,UAAW2pB,EAAcjoB,QAAS,kBAAMhB,EAAKhB,MAAMwqB,QAAQ,aAAhE,mBACApqB,EAAAtH,EAAAuH,cAAA,OAAKC,UAAW4pB,EAAgBloB,QAAS,kBAAMqoB,EAAoBrpB,EAAKhB,MAAMwqB,QAAQ,aAAe,OAArG,qBACApqB,EAAAtH,EAAAuH,cAAA,OAAKC,UAAW6pB,EAAUnoB,QAAS,kBAAMhB,EAAKhB,MAAMwqB,QAAQ,UAA5D,cACApqB,EAAAtH,EAAAuH,cAAA,OAAKC,UAAW8pB,EAAapoB,QAAS,kBAAMsoB,EAAgBtpB,EAAKhB,MAAMwqB,QAAQ,UAAY,OAA3F,mBAGV,MAAOjqB,GACLC,QAAQC,MAAMF,WA9BUG,IAAMC,+BCJrB8pB,oLACD,IAAAzpB,EAAA1J,KACZ,IACI,OACI8I,EAAAtH,EAAAuH,cAAA,OAAKC,UAAWhJ,KAAK0I,MAAMuqB,KAAO,gBAAkB,YAChDnqB,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WAAW0B,QAAS,kBAAMhB,EAAKhB,MAAM0qB,aAApD,QACCpzB,KAAK0I,MAAM+G,QACZ3G,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,gBAAgBsB,IAAK+oB,KAAKznB,MAAM,QAAQpB,IAAI,QAAQE,QAAS,kBAAMhB,EAAKhB,MAAM4qB,gBAGvG,MAAOrqB,GACLC,QAAQC,MAAMF,WAXYG,IAAMC,WCqDvBkqB,eACjB,SAAAA,EAAY7qB,GAAc,IAAAgB,EAAAC,OAAAC,EAAA,EAAAD,CAAA3J,KAAAuzB,IACtB7pB,EAAAC,OAAAE,EAAA,EAAAF,CAAA3J,KAAA2J,OAAAG,EAAA,EAAAH,CAAA4pB,GAAAxpB,KAAA/J,KAAM0I,KAEDsB,MAAQ,CACTyoB,KAAM,OACNtnB,QAAS,CACLiP,UAAU,GAEdgI,QAAS,GACTtiB,QAAS,GACT6jB,WAAY,GACZ6B,UAAW,GACXvK,QAAS,GACTuY,gBAAiB,KACjBC,uBAAwB,KACxBC,oBAAqB,KACrBC,mBAAoB,KACpBC,iBAAkB,KAClBC,mBAAoB,KACpBC,MAAO,KACPC,cAAe,IAGnB,IACI,IAAIzrB,EAAqB,KAEzB,IACI,IAAM0rB,EAAOC,OAAOC,aAAaC,QAAQ,QACrCH,IACA1rB,EAAO4mB,KAAKC,MAAM6E,IAExB,MAAOnpB,GACL3B,QAAQC,MAAM,yBAA0B0B,GACxCvC,EAAO,KAGE,OAATA,IACAA,EAAKxI,QAAQe,QAAQ,SAAAR,GACjBA,EAAEC,SAASO,QAAQ,SAAA6f,GACfA,EAAE5Z,OAAOjG,QAAQ,SAAA0tB,GACbA,EAAEtnB,KAAO,QAKrBqB,EAAKqb,WAAW9iB,QAAQ,SAAA+oB,GACfA,EAAI1iB,QACL0iB,EAAI1iB,MAAQ,MAIfoB,EAAKkd,YACNld,EAAKkd,UAAY,GACjBld,EAAKqrB,mBAAqB,MAG9BrrB,EAAK2S,QAAQpa,QAAQ,SAAAwC,GACZA,EAAO8E,gBACR9E,EAAO8E,cAAgB,IAE3B9E,EAAOU,WAAWlD,QAAQ,SAAAiD,SACH6I,IAAf7I,EAAE8U,WACF9U,EAAE8U,SAAW,GAGF,YAAX9U,EAAEZ,OACQY,EACRgD,OAAOjG,QAAQ,SAAA0tB,QACE5hB,IAAX4hB,EAAEtnB,OACFsnB,EAAEtnB,KAAO,SAO7BqB,EAAKmqB,KAAO,OACZnqB,EAAKwrB,MAAQ,KACbxrB,EAAKyrB,cAAgB,GAErBrqB,EAAKM,MAAQ1B,GAEnB,MAAOuC,GACL3B,QAAQC,MAAM0B,GAnFI,OAAAnB,oFAwFtB,IAAIsqB,EAAO,KACX,IACIA,EAAO9E,KAAKE,UAAUpvB,KAAKgK,OAC7B,MAAOa,GACL3B,QAAQC,MAAM,6BAA8B0B,GAC5CmpB,EAAO,KAGE,OAATA,GACAC,OAAOC,aAAaE,QAAQ,OAAQJ,sCAQxC,IAAM1S,EAAQ1c,EAAQyvB,cACtB/S,EAAM3f,KAAO,YACb,IAAMygB,EAAoB,GAAe9H,OAAOta,KAAKgK,MAAMoY,QAAS,CAACd,IACrE1hB,EAAM2B,KAAK6gB,GACXpiB,KAAKkK,SAAS,CACVkY,QAASA,EACToR,gBAAiBlS,EAAMphB,2CAK3B,IAAMohB,EAAQthB,KAAKs0B,SAASt0B,KAAKgK,MAAMwpB,iBACvC,GAAIlS,EAAO,CACP,IAAMxE,EAAQ9c,KAAKgK,MAAMoY,QAAQrhB,QAAQugB,GACzCthB,KAAKgK,MAAMoY,QAAQiN,OAAOvS,EAAO,GACjC9c,KAAKkK,SAAS,CACVkY,QAASpiB,KAAKgK,MAAMoY,QACpBoR,gBAAiB,wCAMzB,IAAMlS,EAAQthB,KAAKs0B,SAASt0B,KAAKgK,MAAMwpB,iBACvC,GAAIlS,EAAO,CACP,IAAMK,EAAK/c,EAAQ2vB,WACnB5S,EAAGhgB,KAAO,SACV2f,EAAMxc,IAAItC,KAAKmf,GACf3hB,KAAKkK,SAAS,CACVkY,QAASpiB,KAAKgK,MAAMoY,4CAKfT,GACb,IAAML,EAAQthB,KAAKs0B,SAASt0B,KAAKgK,MAAMwpB,iBACvC,GAAIlS,EAAO,CACP,IAAMxE,EAAQwE,EAAMxc,IAAI/D,QAAQ4gB,GAChCL,EAAMxc,IAAIuqB,OAAOvS,EAAO,GACxB9c,KAAKkK,SAAS,CACVkY,QAASpiB,KAAKgK,MAAMoY,6CAM5B,IAAMd,EAAQthB,KAAKs0B,SAASt0B,KAAKgK,MAAMwpB,iBACnClS,IACA1hB,EAAM2B,KAAK+f,EAAMxc,KACjB9E,KAAKkK,SAAS,CACVkY,QAASpiB,KAAKgK,MAAMoY,qDAS5B,IAAMriB,EAAQ6E,EAAQ4vB,qBACtBz0B,EAAM4B,KAAO,YACb,IAAM7B,EAAW,GAAsBwa,OAAOta,KAAKgK,MAAMlK,QAAS,CAACC,IACnEH,EAAM2B,KAAKzB,GACXE,KAAKkK,SAAS,CACVpK,QAASA,EACT2zB,uBAAwB1zB,EAAMG,kDAKlC,IAAMH,EAAQC,KAAKgkB,gBAAgBhkB,KAAKgK,MAAMypB,wBAC9C,GAAI1zB,EAAO,CACP,IAAM+c,EAAQ9c,KAAKgK,MAAMlK,QAAQiB,QAAQhB,GACzCC,KAAKgK,MAAMlK,QAAQuvB,OAAOvS,EAAO,GACjC9c,KAAKkK,SAAS,CACVpK,QAASE,KAAKgK,MAAMlK,QACpB2zB,uBAAwB,6CAMhC,IAAM5zB,EAAU+E,EAAQ6vB,gBACxB50B,EAAQ8B,KAAO,cACf,IAAM5B,EAAQC,KAAKgkB,gBAAgBhkB,KAAKgK,MAAMypB,wBAC1C1zB,IACAA,EAAMO,SAASkC,KAAK3C,GACpBG,KAAKkK,SAAS,CACVpK,QAASE,KAAKgK,MAAMlK,iDAKVD,GAClB,IAAME,EAAQC,KAAKgkB,gBAAgBhkB,KAAKgK,MAAMypB,wBAC9C,GAAI1zB,EAAO,CACP,IAAM+c,EAAQ/c,EAAMO,SAASS,QAAQlB,GACrCE,EAAMO,SAAS+uB,OAAOvS,EAAO,GAC7B9c,KAAKkK,SAAS,CACVpK,QAASE,KAAKgK,MAAMlK,kDAM5B,IAAMC,EAAQC,KAAKgkB,gBAAgBhkB,KAAKgK,MAAMypB,wBAC1C1zB,IACAH,EAAM2B,KAAKxB,EAAMO,UACjBN,KAAKkK,SAAS,CACVpK,QAASE,KAAKgK,MAAMlK,+CAKZD,EAAkB6nB,GAClC,IAAMgN,EAAc10B,KAAK20B,YAAY90B,GACrC,GAAI60B,EAAa,CACb,IAAM5X,EAAQ4X,EAAYp0B,SAASS,QAAQlB,GAE3C60B,EAAYp0B,SAAS+uB,OAAOvS,EAAO,GACnC,IAAM/c,EAAQC,KAAKgkB,gBAAgB0D,GAC/B3nB,IACAA,EAAMO,SAASkC,KAAK3C,GACpBD,EAAM2B,KAAKxB,EAAMO,UAEjBN,KAAKkK,SAAS,CACVpK,QAASE,KAAKgK,MAAMlK,gDAMhBD,GAChB,IAAMovB,EAAOC,KAAKC,MAAMD,KAAKE,UAAUvvB,IACvCG,KAAKkK,SAAS,CACV4pB,MAAO,CACH5wB,KAAM,UACNrD,QAASovB,EACT4C,cAAc,2CAKJ,IAAAxnB,EAAArK,KACZD,EAAQC,KAAKgkB,gBAAgBhkB,KAAKgK,MAAMypB,wBAC9C,GAAI1zB,EAAO,CACP,IAAM60B,EAAW70B,EAAMO,SAASF,KAAK,SAAAsgB,GAAC,OAAIA,EAAExgB,KAAOmK,EAAKL,MAAM8pB,MAAMj0B,QAAQK,KAC5E,GAAI00B,EAAU,CACV,IAAM9X,EAAQ/c,EAAMO,SAASS,QAAQ6zB,GACrC70B,EAAMO,SAASwc,GAAS9c,KAAKgK,MAAM8pB,MAAMj0B,QACzCG,KAAKkK,SAAS,CACVpK,QAASE,KAAKgK,MAAMlK,QACpBg0B,MAAO,6DAQnB9zB,KAAKgK,MAAM8pB,MAAMjC,cAAgB7xB,KAAKgK,MAAM8pB,MAAMjC,aAClD7xB,KAAKkK,SAAS,CACV4pB,MAAO9zB,KAAKgK,MAAM8pB,mDAKtB9zB,KAAKkK,SAAS,CACV4pB,MAAO,CACH5wB,KAAM,uDAKGrD,EAAkB8B,GACnC,IAAM5B,EAAQC,KAAK20B,YAAY90B,GAC/B,GAAIE,EAAO,CACP,IAAM80B,EAAQ,CACV30B,GAAIN,EAAMiF,OACV3B,KAAM,UACNvB,KAAMA,GAAQ9B,EAAQ8B,KAAO,QAC7BU,KAAMxC,EAAQwC,KACdoD,SAAU5F,EAAQ4F,SAClBC,IAAK7F,EAAQ6F,IACbC,UAAW9F,EAAQ8F,UACnBC,UAAW/F,EAAQ+F,UACnBC,cAAe,CACXzD,IAAKvC,EAAQgG,cAAczD,IAC3B0D,IAAKjG,EAAQgG,cAAcC,IAC3BC,IAAKlG,EAAQgG,cAAcE,IAC3BC,IAAKnG,EAAQgG,cAAcG,IAC3BC,IAAKpG,EAAQgG,cAAcI,IAC3BC,IAAKrG,EAAQgG,cAAcK,KAE/BzD,GAAI5C,EAAQ4C,GACZE,MAAO9C,EAAQ8C,MACfwD,OAAQtG,EAAQsG,OAChBC,QAASvG,EAAQuG,QACjBC,OAAQ,CACJC,OAAQzG,EAAQwG,OAAOC,OACvBC,WAAY1G,EAAQwG,OAAOE,WAC3BC,OAAQ3G,EAAQwG,OAAOG,QAE3BC,aAAc5G,EAAQ4G,aACtBC,MAAO7G,EAAQ6G,MACfC,OAAQ9G,EAAQ8G,OAChBC,OAAQ/G,EAAQ+G,OAChBzB,UAAWtF,EAAQsF,UACnB0B,UAAWhH,EAAQgH,UACnBC,OAAQjH,EAAQiH,OAAOmB,IAAI,SAAA8H,GACvB,MAAO,CACH7P,GAAIN,EAAMiF,OACVlD,KAAMoO,EAAMpO,KACZqF,MAAO+I,EAAM/I,MACb9D,KAAM6M,EAAM7M,KACZzC,KAAMsP,EAAMtP,KACZwG,KAAM,KAGdF,oBAAqBlH,EAAQkH,qBAGjChH,EAAMO,SAASkC,KAAKqyB,GACpBj1B,EAAM2B,KAAKxB,EAAMO,UAEjBN,KAAKkK,SAAS,CACVpK,QAASE,KAAKgK,MAAMlK,wDAKH,IAAAoM,EAAAlM,KACzBkc,MAAM,wBACD4Y,KAAK,SAAA3Y,GAAQ,OAAIA,EAAS6X,SAC1Bc,KAAK,SAAAd,GACFA,EAAKnzB,QAAQ,SAACyH,GACV,IACI,GAAIA,EAAK3G,KAAM,CACX,IAAM9B,EAAU+E,EAAQ6vB,gBAExB50B,EAAQqD,KAAO,UACfrD,EAAQ8B,KAAO2G,EAAK3G,KACpB9B,EAAQwC,KAAOiG,EAAKjG,KAAK1B,cACzBd,EAAQ4F,SAAW6C,EAAKpF,KACxBrD,EAAQ6F,IAAM4C,EAAKwnB,QACnBjwB,EAAQ8F,UAAY2C,EAAK3C,UACzB9F,EAAQ+F,UAAYhG,EAAMm1B,eAAezsB,EAAK0sB,kBAC9Cn1B,EAAQ4C,GAAK6F,EAAK2sB,YAClBp1B,EAAQ8C,MAAQ2F,EAAK4sB,WACrBr1B,EAAQ6G,MAAQ4B,EAAK5B,MACrB7G,EAAQ+G,OAAS0B,EAAK1B,OACtB/G,EAAQsF,UAAYmD,EAAKnD,UAEzB,IAAM2X,EAAQxU,EAAK6sB,SAASp0B,QAAQ,KACpClB,EAAQuG,QAAU7D,SAAS+F,EAAK6sB,SAAS9zB,UAAU,EAAGyb,GAAQ,IAE9Djd,EAAQgG,cAAczD,IAAMkG,EAAK8sB,SACjCv1B,EAAQgG,cAAcC,IAAMwC,EAAK+sB,UACjCx1B,EAAQgG,cAAcE,IAAMuC,EAAKgtB,aACjCz1B,EAAQgG,cAAcG,IAAMsC,EAAKitB,aACjC11B,EAAQgG,cAAcI,IAAMqC,EAAKktB,OACjC31B,EAAQgG,cAAcK,IAAMoC,EAAKmtB,SAEjC51B,EAAQwG,OAAOC,OAASgC,EAAKotB,mBAC7B71B,EAAQwG,OAAOE,WAAa+B,EAAKqtB,uBACjC91B,EAAQwG,OAAOG,OAAS8B,EAAKstB,kBAC7B/1B,EAAQkH,oBAAsBuB,EAAKutB,qBAErB,CACV,CACIphB,MAAO,gBACPhU,KAAM,YAEV,CACIgU,MAAO,iBACPhU,KAAM,aAEV,CACIgU,MAAO,oBACPhU,KAAM,gBAEV,CACIgU,MAAO,oBACPhU,KAAM,gBAEV,CACIgU,MAAO,cACPhU,KAAM,UAEV,CACIgU,MAAO,gBACPhU,KAAM,aAGRI,QAAQ,SAAAkC,GACV,GAAIuF,EAAKvF,EAAK0R,OAAQ,CAClB,IAAMrS,EAAMW,EAAKtC,KAAO,IAAM6H,EAAKvF,EAAK0R,OACxC5U,EAAQ4G,cAAyC,KAAzB5G,EAAQ4G,aAAsBrE,EAAM,KAAOA,KAI5D,CACX,CACIqS,MAAO,aACPhU,KAAM,cAEV,CACIgU,MAAO,kBACPhU,KAAM,mBAEV,CACIgU,MAAO,SACPhU,KAAM,UAEV,CACIgU,MAAO,YACPhU,KAAM,aAEV,CACIgU,MAAO,YACPhU,KAAM,aAEV,CACIgU,MAAO,UACPhU,KAAM,WAEV,CACIgU,MAAO,UACPhU,KAAM,WAEV,CACIgU,MAAO,eACPhU,KAAM,gBAEV,CACIgU,MAAO,gBACPhU,KAAM,iBAEV,CACIgU,MAAO,WACPhU,KAAM,YAEV,CACIgU,MAAO,SACPhU,KAAM,UAEV,CACIgU,MAAO,aACPhU,KAAM,cAEV,CACIgU,MAAO,cACPhU,KAAM,eAEV,CACIgU,MAAO,aACPhU,KAAM,cAEV,CACIgU,MAAO,WACPhU,KAAM,YAEV,CACIgU,MAAO,kBACPhU,KAAM,mBAEV,CACIgU,MAAO,UACPhU,KAAM,WAEV,CACIgU,MAAO,WACPhU,KAAM,aAGPI,QAAQ,SAAAi1B,GACX,GAAIxtB,EAAKwtB,EAAMrhB,OAAQ,CACnB,IAAMrS,EAAM0zB,EAAMr1B,KAAO,IAAM6H,EAAKwtB,EAAMrhB,OAC1C5U,EAAQ8G,QAA6B,KAAnB9G,EAAQ8G,OAAgBvE,EAAM,KAAOA,KAI3DkG,EAAKytB,mBACLztB,EAAKytB,kBAAkBl1B,QAAQ,SAACm1B,GAC5B,IAAMjmB,EAAQ7D,EAAK+pB,WAAWD,EAAU,SACxCn2B,EAAQiH,OAAOtE,KAAKuN,KAGxBzH,EAAKmH,SACLnH,EAAKmH,QAAQ5O,QAAQ,SAACm1B,GAClB,IAAMjmB,EAAQ7D,EAAK+pB,WAAWD,EAAU,UACxCn2B,EAAQiH,OAAOtE,KAAKuN,KAGxBzH,EAAK4tB,mBACL5tB,EAAK4tB,kBAAkBr1B,QAAQ,SAACm1B,GAC5B,IAAMjmB,EAAQ7D,EAAK+pB,WAAWD,EAAU,aACxCn2B,EAAQiH,OAAOtE,KAAKuN,KAI5B,IAAIomB,EAAYt2B,EAAQ6F,IACN,KAAdywB,IACAA,EAAYt2B,EAAQ4F,UAEW,IAA/B0wB,EAAUp1B,QAAQ,WAClBo1B,EAAY,SAEE,aAAdA,IACAA,EAAY,OAGhB,IAAIp2B,EAAQmM,EAAKkqB,sBAAsBD,GAClCp2B,IACDA,EAAQ,CACJG,GAAIN,EAAMiF,OACVlD,KAAMw0B,EACN71B,SAAU,IAEd4L,EAAKlC,MAAMlK,QAAQ0C,KAAKzC,IAE5BA,EAAMO,SAASkC,KAAK3C,IAE1B,MAAOoJ,GACLC,QAAQC,MAAMF,MAItBrJ,EAAM2B,KAAK2K,EAAKlC,MAAMlK,SAEtBoM,EAAKhC,SAAS,CACVuoB,KAAM,UACN3yB,QAASoM,EAAKlC,MAAMlK,+CAKjBk2B,EAAe9yB,GAC9B,IAAIvB,EAAO,GACPqF,EAAQ,GAENqvB,EAAcL,EAASr0B,KAAKZ,QAAQ,KAC1C,IAAqB,IAAjBs1B,EACA10B,EAAOq0B,EAASr0B,SACb,CACH,IAAM20B,EAAeN,EAASr0B,KAAKZ,QAAQ,KAC3CY,EAAOq0B,EAASr0B,KAAKN,UAAU,EAAGg1B,EAAc,GAChDrvB,EAAQgvB,EAASr0B,KAAKN,UAAUg1B,EAAc,EAAGC,GAAc31B,cAGnE,IAAMF,EAAOu1B,EAASjhB,KAAKwhB,QAAQ,UAAM,KAEzC,MAAO,CACHr2B,GAAIN,EAAMiF,OACV3B,KAAMA,EACNvB,KAAMA,EACNqF,MAAOA,EACPvG,KAAMA,EACNwG,KAAM,0CAQV,IAAM5C,EAAYO,EAAQ4xB,kBAC1BnyB,EAAU1C,KAAO,gBACjB,IAAMgiB,EAAc,GAAmBrJ,OAAOta,KAAKgK,MAAM2Z,WAAY,CAACtf,IACtEzE,EAAM2B,KAAKoiB,GAEX3jB,KAAKkK,SAAS,CACVyZ,WAAYA,EACZ+P,oBAAqBrvB,EAAUnE,+CAKnC,IAAMmE,EAAYrE,KAAKy2B,aAAaz2B,KAAKgK,MAAM0pB,qBAC/C,GAAIrvB,EAAW,CACX,IAAMyY,EAAQ9c,KAAKgK,MAAM2Z,WAAW5iB,QAAQsD,GAC5CrE,KAAKgK,MAAM2Z,WAAW0L,OAAOvS,EAAO,GAEpC9c,KAAKkK,SAAS,CACVyZ,WAAY3jB,KAAKgK,MAAM2Z,WACvB+P,oBAAqB,iDAKR7zB,EAAkBgI,GACvC,IAAM9H,EAAQC,KAAK20B,YAAY90B,GAC/B,GAAIE,EAAO,CACP,IAAMyE,EAAOI,EAAQ8xB,sBACrBlyB,EAAK2C,iBAAmBpH,EAAM4B,KAC9B6C,EAAKE,YAAc7E,EAAQ8B,KAC3B,IAAM0C,EAAYrE,KAAKy2B,aAAaz2B,KAAKgK,MAAM0pB,qBAC/C,GAAIrvB,EAAW,CACX,GAAe,OAAXwD,EAAiB,CACjB,IAAMoK,EAAO5N,EAAU6C,MAAM9G,KAAK,SAAA4kB,GAAC,OAAIA,EAAE9kB,KAAO2H,IAC5CoK,IACAA,EAAK1N,MAAM/B,KAAKgC,GAChBxE,KAAK22B,mBAAmB1kB,SAG5B5N,EAAUE,MAAM/B,KAAKgC,GACrBxE,KAAK22B,mBAAmBtyB,GAG5BrE,KAAKkK,SAAS,CACVyZ,WAAY3jB,KAAKgK,MAAM2Z,2DAMXnf,EAAqBqD,GAC7C,IAAMxD,EAAYrE,KAAKy2B,aAAaz2B,KAAKgK,MAAM0pB,qBAC/C,GAAIrvB,EAAW,CACX,GAAIwD,EAAQ,CACR,IAAMoK,EAAO5N,EAAU6C,MAAM9G,KAAK,SAAA4kB,GAAC,OAAIA,EAAE9kB,KAAO2H,IAChD,GAAIoK,EAAM,CACN,IAAM6K,EAAQ7K,EAAK1N,MAAMxD,QAAQyD,GACjCyN,EAAK1N,MAAM8qB,OAAOvS,EAAO,QAE1B,CACH,IAAMnY,EAAIN,EAAUE,MAAMxD,QAAQyD,GAClCH,EAAUE,MAAM8qB,OAAO1qB,EAAG,GAG9B3E,KAAKkK,SAAS,CACVyZ,WAAY3jB,KAAKgK,MAAM2Z,yDAKRiT,GACvBA,EAAcryB,MAAMhD,KAAK,SAACC,EAAGC,GACzB,IAAMC,EAAQF,EAAEkD,YAAY/D,cACtBiB,EAAQH,EAAEiD,YAAY/D,cAC5B,OAAIe,EAAQE,GAAiB,EACzBF,EAAQE,EAAgB,EACrB,iDAKX,IAAMyC,EAAYrE,KAAKy2B,aAAaz2B,KAAKgK,MAAM0pB,qBAC/C,GAAIrvB,EAAW,CACX,IAAM4N,EAAOrN,EAAQiyB,sBACrB5kB,EAAKtQ,KAAO,SAAW0C,EAAU6C,MAAMkE,OAAS,GAChD/G,EAAU6C,MAAM1E,KAAKyP,GAErBjS,KAAKkK,SAAS,CACVyZ,WAAY3jB,KAAKgK,MAAM2Z,iDAKhB1R,GACf,IAAM5N,EAAYrE,KAAKy2B,aAAaz2B,KAAKgK,MAAM0pB,qBAC/C,GAAIrvB,EAAW,CACX,IAAMyY,EAAQzY,EAAU6C,MAAMnG,QAAQkR,GACtC5N,EAAU6C,MAAMmoB,OAAOvS,EAAO,GAE9B9c,KAAKkK,SAAS,CACVyZ,WAAY3jB,KAAKgK,MAAM2Z,oDAS/B,IAAM4C,EAAQ3hB,EAAQkyB,iBACtBvQ,EAAM5kB,KAAO,YACb,IAAMwkB,EAAU,GAAkB7L,OAAOta,KAAKgK,MAAMwb,UAAW,CAACe,IAChE3mB,EAAM2B,KAAK4kB,GAEXnmB,KAAKkK,SAAS,CACVsb,UAAWW,EACXwN,mBAAoBpN,EAAMrmB,8CAK9B,IAAMqmB,EAAQvmB,KAAK+2B,YAAY/2B,KAAKgK,MAAM2pB,oBAC1C,GAAIpN,EAAO,CACP,IAAMzJ,EAAQ9c,KAAKgK,MAAMwb,UAAUzkB,QAAQwlB,GAC3CvmB,KAAKgK,MAAMwb,UAAU6J,OAAOvS,EAAO,GAEnC9c,KAAKkK,SAAS,CACVsb,UAAWxlB,KAAKgK,MAAMwb,UACtBmO,mBAAoB,yCAM5B,IAAMpN,EAAQvmB,KAAK+2B,YAAY/2B,KAAKgK,MAAM2pB,oBAC1C,GAAIpN,EAAO,CACP,IAAMte,EAAMrD,EAAQoyB,YACpB/uB,EAAItG,KAAO,UACX4kB,EAAMnf,KAAK5E,KAAKyF,GAEhBjI,KAAKkK,SAAS,CACVsb,UAAWxlB,KAAKgK,MAAMwb,6CAKlBvd,GACZ,IAAMgnB,EAAOC,KAAKC,MAAMD,KAAKE,UAAUnnB,IACvCjI,KAAKkK,SAAS,CACV4pB,MAAO,CACH5wB,KAAM,MACN+E,IAAKgnB,uCAKC,IAAA/c,EAAAlS,KACRumB,EAAQvmB,KAAK+2B,YAAY/2B,KAAKgK,MAAM2pB,oBAC1C,GAAIpN,EAAO,CACP,IAAMqO,EAAWrO,EAAMnf,KAAKhH,KAAK,SAAAsgB,GAAC,OAAIA,EAAExgB,KAAOgS,EAAKlI,MAAM8pB,MAAM7rB,IAAI/H,KACpE,GAAI00B,EAAU,CACV,IAAM9X,EAAQyJ,EAAMnf,KAAKrG,QAAQ6zB,GACjCrO,EAAMnf,KAAK0V,GAAS9c,KAAKgK,MAAM8pB,MAAM7rB,IACrCjI,KAAKkK,SAAS,CACVsb,UAAWxlB,KAAKgK,MAAMwb,UACtBsO,MAAO,2CAML7rB,GACd,IAAMse,EAAQvmB,KAAK+2B,YAAY/2B,KAAKgK,MAAM2pB,oBAC1C,GAAIpN,EAAO,CACP,IAAMzJ,EAAQyJ,EAAMnf,KAAKrG,QAAQkH,GACjCse,EAAMnf,KAAKioB,OAAOvS,EAAO,GACzB9c,KAAKkK,SAAS,CACVsb,UAAWxlB,KAAKgK,MAAMwb,oDAS9B,IAAMlE,EAAsC,IAA9BthB,KAAKgK,MAAMoY,QAAQhX,OAAepL,KAAKgK,MAAMoY,QAAQ,GAAK,KAClE/d,EAA6C,IAAjCrE,KAAKgK,MAAM2Z,WAAWvY,OAAepL,KAAKgK,MAAM2Z,WAAW,GAAK,KAE5EsT,EAAQryB,EAAQsyB,oBACtBD,EAAMtvB,QAAU2Z,EAAQA,EAAMphB,GAAK,KACnC+2B,EAAMrvB,YAAcvD,EAAYA,EAAUnE,GAAK,KAC3CmE,IACA4yB,EAAM3yB,aAAe1E,EAAMiqB,gBAAgBxlB,IAG/CrE,KAAKkK,SAAS,CACV4pB,MAAO,CACH5wB,KAAM,eACNwmB,YAAauN,2CAKH,IAAAxkB,EAAAzS,KACZ0pB,EAA2B1pB,KAAKgK,MAAM8pB,MAAMpK,YAC5CpI,EAAQthB,KAAKs0B,SAAS5K,EAAY/hB,SAClCtD,EAAYrE,KAAKy2B,aAAa/M,EAAY9hB,aAChD,GAAI0Z,GAASjd,EAAW,CACpB,IAAM8yB,EAAY7V,EAAM3f,MAAQ,gBAC1B8iB,EAAgBpgB,EAAU1C,MAAQ,oBAElC0B,EAASuB,EAAQwW,eA6EvB,GA5EA/X,EAAO1B,KAAOw1B,EAAY,OAAS1S,EACnCphB,EAAOuE,YAAcvD,EAAUnE,GAG/BohB,EAAMxc,IAAItE,OAAO,SAAAmhB,GAAE,OAAIA,EAAG5c,SAAQlE,QAAQ,SAAA8gB,GACtC,IAAMpZ,EAAY2mB,KAAKC,MAAMD,KAAKE,UAAUzN,IAE5CpZ,EAAUqL,SAAU,EACpBrL,EAAUkL,SAAU,EACpBlL,EAAUxD,QAAS,EACnBwD,EAAUmL,UAAW,EAErBnL,EAAUrE,YAAcyd,EAAGhgB,KAC3B4G,EAAUhD,WAAa,GACvBgD,EAAUmJ,GAAK,KACfnJ,EAAUkG,WAAa,GACvBlG,EAAUqQ,SAAW,EAErBvV,EAAOU,WAAWvB,KAAK+F,KAG3BlE,EAAUE,MAAM1D,QAAQ,SAAA2D,GACpB,IAAM3E,EAAU4S,EAAKuO,WAAWxc,EAAKE,YAAaF,EAAK2C,kBACvD,GAAItH,EAIA,IAHA,IAAMu3B,EAAO70B,SAAS3C,EAAM2O,SAAS1O,EAAQgG,cAAcC,KAAM,IAC3DuxB,EAAYz3B,EAAM03B,UAEf3yB,EAAI,EAAGA,IAAMH,EAAK1C,QAAS6C,EAAG,CACnC,IAAM4yB,EAAa33B,EAAM03B,UAEnB/uB,EAAY2mB,KAAKC,MAAMD,KAAKE,UAAUvvB,IAI5C,GAHA0I,EAAUrI,GAAKN,EAAMiF,OAErB0D,EAAUrE,YAAc,KACpBwlB,EAAYplB,aAAc,CAC1B,IAAMgnB,EAAY5B,EAAYplB,aAAalE,KAAK,SAAAqE,GAAK,OAAIA,EAAMvE,KAAOsE,EAAKtE,KACvEorB,IACA/iB,EAAUrE,YAAconB,EAAU7mB,MAAME,IAIhD,OAAQ+kB,EAAY1hB,mBAChB,IAAK,SACDO,EAAUhD,WAAa,GACvB,MACJ,IAAK,QACDgD,EAAUhD,WAAa6xB,EAAOC,EAC9B,MACJ,IAAK,aACD9uB,EAAUhD,WAAa6xB,EAAOG,EAOtChvB,EAAUqL,SAAU,EACpBrL,EAAUkL,QAA6C,WAAlCiW,EAAY1hB,kBACjCO,EAAUxD,OAA4C,WAAlC2kB,EAAY1hB,kBAChCO,EAAUmL,UAAW,EAErBnL,EAAUmJ,GAAKnJ,EAAU5F,MACzB4F,EAAUkG,WAAa,GACvBlG,EAAUqQ,SAAW,EAErBvV,EAAOU,WAAWvB,KAAK+F,QAG3BlF,EAAO+E,OAAO5F,KAAK,oBAAsBgC,EAAKE,YAAc,aAAeF,EAAK2C,oBAIxF9D,EAAOU,WAAWlD,QAAQ,SAAAiD,GAAC,OAAIA,EAAE8U,SAAW,IAE5C5Y,KAAKw3B,eAAen0B,GAEhBqmB,EAAY5hB,SAAW4hB,EAAY3hB,MAAO,CAC1C,IAAMwe,EAAQvmB,KAAK+2B,YAAYrN,EAAY5hB,SAC3C,GAAIye,EAAO,CACP,IAAMte,EAAMse,EAAMnf,KAAKhH,KAAK,SAAAsgB,GAAC,OAAIA,EAAExgB,KAAOwpB,EAAY3hB,QAClDE,IACA5E,EAAO4E,IAAMinB,KAAKC,MAAMD,KAAKE,UAAUnnB,MAKnDjI,KAAKkK,SAAS,CACV+Q,QAAU,GAAgBX,OAAOta,KAAKgK,MAAMiR,QAAS,CAAC5X,IACtDuwB,iBAAkBvwB,EAAOnD,GACzB4zB,MAAO,gDAMf,IAAMzwB,EAASrD,KAAKy3B,UAAUz3B,KAAKgK,MAAM4pB,kBACzC,GAAIvwB,EAAQ,CACR,IAAMgB,EAAYrE,KAAKy2B,aAAapzB,EAAOuE,aAC3C,GAAIvD,EAAW,CACX,IAAM4yB,EAAQryB,EAAQsyB,oBACtBD,EAAMrvB,YAAcvE,EAAOuE,YAC3BqvB,EAAM3yB,aAAe1E,EAAMiqB,gBAAgBxlB,GAE3CrE,KAAKkK,SAAS,CACV4pB,MAAO,CACH5wB,KAAM,cACNwmB,YAAauN,6CAQ7B,IAAM5zB,EAASrD,KAAKy3B,UAAUz3B,KAAKgK,MAAM4pB,kBACrCvwB,IACAA,EAAOgF,WAAY,IAAIqvB,MAAOC,iBAC9B33B,KAAKkK,SAAS,CACV+Q,QAASjb,KAAKgK,MAAMiR,QACpB2Y,iBAAkB,6CAKTvwB,GACjBrD,KAAKkK,SAAS,CACV0pB,iBAAkBvwB,EAAOnD,yCAK7B,IAAMmD,EAASrD,KAAKy3B,UAAUz3B,KAAKgK,MAAM4pB,kBACzC,GAAIvwB,EAAQ,CACR,IAAMyZ,EAAQ9c,KAAKgK,MAAMiR,QAAQla,QAAQsC,GACzCrD,KAAKgK,MAAMiR,QAAQoU,OAAOvS,EAAO,GACjC9c,KAAKkK,SAAS,CACV+Q,QAASjb,KAAKgK,MAAMiR,QACpB2Y,iBAAkB,4CAKVrrB,EAA4DqvB,GAC5E,IAAMv0B,EAASrD,KAAKy3B,UAAUz3B,KAAKgK,MAAM4pB,kBACrCvwB,IAEAA,EAAOU,WAAWvD,OAAO,SAAAq3B,GAAK,OAAIA,EAAMppB,aAAY5N,QAAQ,SAAAg3B,GACxDA,EAAMppB,WAAW5N,QAAQ,SAAAiD,GACrB,GAAIA,EAAER,SACF,OAAQQ,EAAER,SAASJ,MACf,IAAK,QAEGG,GAAUkF,GAAcsvB,EAAM33B,KAAOqI,EAAUrI,IAA6B,UAArB4D,EAAER,SAASO,OAClER,EAAO8E,cAAc3F,KAAK,CACtBtC,GAAIN,EAAMiF,OACV3B,KAAM,iBACNoF,KAAMxE,EACNyE,UAAWA,IAGnB,MACJ,IAAK,YAED,GAAIlF,GAAUkF,GAAczE,EAAER,SAASW,cAAgBsE,EAAUrI,IAA6B,UAArB4D,EAAER,SAASO,MAAoB,CACpG,IAAMiZ,EAAQ+a,EAAMppB,WAAW1N,QAAQ+C,GACvC+zB,EAAMppB,WAAW4gB,OAAOvS,EAAO,GAE/BzZ,EAAO8E,cAAc3F,KAAK,CACtBtC,GAAIN,EAAMiF,OACV3B,KAAM,gBACNoF,KAAMxE,EACNyE,UAAWA,IAGnB,MACJ,IAAK,SAMD,GAJIA,GAAcsvB,EAAM33B,KAAOqI,EAAUrI,KACrC4D,EAAER,SAASxB,OAAS,GAGC,IAArBgC,EAAER,SAASxB,MAAa,CACxB,IAAM6C,EAAIkzB,EAAMppB,WAAW1N,QAAQ+C,GACnC+zB,EAAMppB,WAAW4gB,OAAO1qB,EAAG,GACvBtB,GAEAA,EAAO8E,cAAc3F,KAAK,CACtBtC,GAAIN,EAAMiF,OACV3B,KAAM,gBACNoF,KAAMxE,EACNyE,UAAWA,UAcvCA,GAAiC,YAAnBA,EAAUrF,MACvBqF,EAAsBzB,OAClBtG,OAAO,SAAA+tB,GAAC,OAAKA,EAAEtnB,KAAO,GAAMsnB,EAAEvnB,MAAMrG,cAAc+P,WAAW,eAC7D7P,QAAQ,SAAA0tB,GACLlrB,EAAO8E,cAAc3F,KAAK,CACtBtC,GAAIN,EAAMiF,OACV3B,KAAM,iBACNoF,KAAMimB,EACNhmB,UAAWA,MAK3BlF,EAAOU,WAAWlD,QAAQ,SAAAiD,GACtBA,EAAE8P,SAAU,IAEZrL,IACAA,EAAUqL,SAAU,GAGpBgkB,IACAv0B,EAAO6E,OAAS,GAGpBlI,KAAKkK,SAAS,CACV+Q,QAASjb,KAAKgK,MAAMiR,8CAKb1S,GACf,IAAMlF,EAASrD,KAAKy3B,UAAUz3B,KAAKgK,MAAM4pB,kBACrCvwB,IACAkF,EAAUkL,SAAU,EACpBlL,EAAUxD,QAAS,EACnBwD,EAAUmL,UAAW,EAErB1T,KAAKw3B,eAAen0B,GAEpBrD,KAAKkK,SAAS,CACV+Q,QAASjb,KAAKgK,MAAMiR,gDAKX1S,GACjBA,EAAUkL,SAAU,EACpBlL,EAAUxD,QAAS,EACnBwD,EAAUmL,UAAW,EAEjBnL,EAAUqL,QACV5T,KAAK6T,QAAQtL,GAEbvI,KAAKkK,SAAS,CACV+Q,QAASjb,KAAKgK,MAAMiR,oDAKN,IAAAO,EAAAxb,KAChB0pB,EAA2B1pB,KAAKgK,MAAM8pB,MAAMpK,YAC5CrlB,EAAYrE,KAAKy2B,aAAa/M,EAAY9hB,aAC1CvE,EAASrD,KAAKy3B,UAAUz3B,KAAKgK,MAAM4pB,kBACzC,GAAIlK,GAAerlB,GAAahB,EAAQ,CACpC,IAAM4O,EAAO5N,EAAU6C,MAAM9G,KAAK,SAAA4kB,GAAC,OAAIA,EAAE9kB,KAAOwpB,EAAY7hB,SACxDoK,IACAA,EAAK1N,MAAM1D,QAAQ,SAAA2D,GACf,IAAM3E,EAAU2b,EAAKwF,WAAWxc,EAAKE,YAAaF,EAAK2C,kBACvD,GAAItH,EAIA,IAHA,IAAMu3B,EAAO70B,SAAS3C,EAAM2O,SAAS1O,EAAQgG,cAAcC,KAAM,IAC3DuxB,EAAYz3B,EAAM03B,UAEf3yB,EAAI,EAAGA,IAAMH,EAAK1C,QAAS6C,EAAG,CACnC,IAAM4yB,EAAa33B,EAAM03B,UAEnB/uB,EAAY2mB,KAAKC,MAAMD,KAAKE,UAAUvvB,IAI5C,GAHA0I,EAAUrI,GAAKN,EAAMiF,OAErB0D,EAAUrE,YAAc,KACpBwlB,EAAYplB,aAAc,CAC1B,IAAMgnB,EAAY5B,EAAYplB,aAAalE,KAAK,SAAAqE,GAAK,OAAIA,EAAMvE,KAAOsE,EAAKtE,KACvEorB,IACA/iB,EAAUrE,YAAconB,EAAU7mB,MAAME,IAIhD,OAAQ+kB,EAAY1hB,mBAChB,IAAK,SACDO,EAAUhD,WAAa,GACvB,MACJ,IAAK,QACDgD,EAAUhD,WAAa6xB,EAAOC,EAC9B,MACJ,IAAK,aACD9uB,EAAUhD,WAAa6xB,EAAOG,EAOtChvB,EAAUqL,SAAU,EACpBrL,EAAUkL,QAA8D,WAAnD+H,EAAKxR,MAAM8pB,MAAMpK,YAAY1hB,kBAClDO,EAAUxD,OAA6D,WAAnDyW,EAAKxR,MAAM8pB,MAAMpK,YAAY1hB,kBACjDO,EAAUmL,UAAW,EAErBnL,EAAUmJ,GAAKnJ,EAAU5F,MACzB4F,EAAUkG,WAAa,GAEnBpL,GACAA,EAAOU,WAAWvB,KAAK+F,QAI/B,GAAIlF,EAAQ,CACR,IAAMy0B,EAAQ,oBAAsBtzB,EAAKE,YAAc,aAAeF,EAAK2C,iBAC3E9D,EAAO+E,OAAO5F,KAAKs1B,MAK/B93B,KAAKw3B,eAAen0B,GAEpBrD,KAAKkK,SAAS,CACV+Q,QAASjb,KAAKgK,MAAMiR,QACpB6Y,MAAO,iDAMCvrB,GACpB,IAAMlF,EAASrD,KAAKy3B,UAAUz3B,KAAKgK,MAAM4pB,kBACzC,GAAIvwB,EAAQ,CACR,IAAMyZ,EAAQzZ,EAAOU,WAAWhD,QAAQwH,GACxClF,EAAOU,WAAWsrB,OAAOvS,EAAO,GAEhC9c,KAAKkK,SAAS,CACV+Q,QAASjb,KAAKgK,MAAMiR,0CAKjB1S,EAAuDjB,EAAWC,GAC7E,IAAMsI,EAAOjL,EAAQkqB,gBACrBjf,EAAK3P,GAAKqI,EAAUrI,GACpB2P,EAAK3M,KAAOqF,EAAUrF,KACtB2M,EAAKvI,EAAIA,EACTuI,EAAKtI,EAAIA,EACT,IAAIlF,EAAO,EACY,YAAnBkG,EAAUrF,OACVb,EAAOzC,EAAMm4B,SAAUxvB,EAAsBlG,OAEjDwN,EAAKpI,OAASpF,EACdwN,EAAKrI,MAAQnF,EAEb,IAAMgB,EAASrD,KAAKy3B,UAAUz3B,KAAKgK,MAAM4pB,kBACrCvwB,GAAUA,EAAO4E,MACjB5E,EAAO4E,IAAIZ,MAAM7E,KAAKqN,GAEtB7P,KAAKkK,SAAS,CACV+Q,QAASjb,KAAKgK,MAAMiR,2CAKhB1S,EAAqDiE,GACjE,IAAMnJ,EAASrD,KAAKy3B,UAAUz3B,KAAKgK,MAAM4pB,kBACzC,GAAIvwB,GAAUA,EAAO4E,IAAK,CACtB,IAAM4H,EAAOxM,EAAO4E,IAAIZ,MAAMjH,KAAK,SAAAwV,GAAC,OAAIA,EAAE1V,KAAOqI,EAAUrI,KAC3D,GAAI2P,EAAM,CACN,OAAQrD,GACJ,IAAK,IACDqD,EAAKtI,GAAK,EACV,MACJ,IAAK,KACDsI,EAAKvI,GAAK,EACVuI,EAAKtI,GAAK,EACV,MACJ,IAAK,IACDsI,EAAKvI,GAAK,EACV,MACJ,IAAK,KACDuI,EAAKvI,GAAK,EACVuI,EAAKtI,GAAK,EACV,MACJ,IAAK,IACDsI,EAAKtI,GAAK,EACV,MACJ,IAAK,KACDsI,EAAKvI,GAAK,EACVuI,EAAKtI,GAAK,EACV,MACJ,IAAK,IACDsI,EAAKvI,GAAK,EACV,MACJ,IAAK,KACDuI,EAAKvI,GAAK,EACVuI,EAAKtI,GAAK,EAOlBvH,KAAKkK,SAAS,CACV+Q,QAASjb,KAAKgK,MAAMiR,8CAMlB1S,GACd,IAAMlF,EAASrD,KAAKy3B,UAAUz3B,KAAKgK,MAAM4pB,kBACzC,GAAIvwB,GAAUA,EAAO4E,IAAK,CACtB,IAAM4H,EAAOxM,EAAO4E,IAAIZ,MAAMjH,KAAK,SAAAwV,GAAC,OAAIA,EAAE1V,KAAOqI,EAAUrI,KAC3D,GAAI2P,EAAM,CACN,IAAMiN,EAAQzZ,EAAO4E,IAAIZ,MAAMtG,QAAQ8O,GACvCxM,EAAO4E,IAAIZ,MAAMgoB,OAAOvS,EAAO,GAE/B9c,KAAKkK,SAAS,CACV+Q,QAASjb,KAAKgK,MAAMiR,4CAMpB1S,GACZ,IAAMlF,EAASrD,KAAKy3B,UAAUz3B,KAAKgK,MAAM4pB,kBACzC,GAAIvwB,EAAQ,CAERA,EAAOU,WAAWvD,OAAO,SAAAq3B,GAAK,OAAIA,EAAMppB,aAAY5N,QAAQ,SAAAg3B,GACxDA,EAAMppB,WAAW5N,QAAQ,SAAAiD,GACrB,GAAIA,EAAER,SACF,OAAQQ,EAAER,SAASJ,MACf,IAAK,QAED,GAAIG,GAAWw0B,EAAM33B,KAAOqI,EAAUrI,IAA6B,QAArB4D,EAAER,SAASO,MAAkB,CACvE,IAAMm0B,EAAmBpzB,EAAQqzB,qBACjCD,EAAiB90B,KAAO,iBACxB80B,EAAiB1vB,KAAOxE,EACxBk0B,EAAiBzvB,UAAYA,EAC7BlF,EAAO8E,cAAc3F,KAAKw1B,GAE9B,MACJ,IAAK,YAED,GAAI30B,GAAWS,EAAER,SAASW,cAAgBsE,EAAUrI,IAA6B,QAArB4D,EAAER,SAASO,MAAkB,CACrF,IAAMc,EAAIkzB,EAAMppB,WAAW1N,QAAQ+C,GACnC+zB,EAAMppB,WAAW4gB,OAAO1qB,EAAG,GAE3B,IAAMuzB,EAAkBtzB,EAAQqzB,qBAChCC,EAAgBh1B,KAAO,gBACvBg1B,EAAgB5vB,KAAOxE,EACvBo0B,EAAgB3vB,UAAYA,EAC5BlF,EAAO8E,cAAc3F,KAAK01B,SAclD,IAAMnzB,EAAS1B,EAAOU,WAAWvD,OAAO,SAAAsD,GACpC,OAAOA,EAAE8P,UAAa9P,EAAE2P,SAAW3P,EAAEiB,SAAWjB,EAAE4P,WAEtD,GAAsB,IAAlB3O,EAAOqG,OAEPpL,KAAK+T,YAAY,MAAM,QACpB,GAAuB,IAAlBhP,EAAOqG,QAAkBrG,EAAO,GAAG2O,SAE3C1T,KAAK+T,YAAY,MAAM,OACpB,CACH,IAAI+I,EAAQ/X,EAAOhE,QAAQwH,GAAa,EACpCqvB,GAAW,EACX9a,GAAS/X,EAAOqG,SAChB0R,EAAQ,EACR8a,GAAW,GAEf53B,KAAK+T,YAAYhP,EAAO+X,GAAQ8a,sCAK3BrvB,EAAgCmJ,EAAYG,GACzDtJ,EAAUmJ,GAAKA,EACfnJ,EAAUpC,OAAS0L,EAEnB7R,KAAKkK,SAAS,CACV+Q,QAASjb,KAAKgK,MAAMiR,+CAIP1S,GACjB,IAAMlF,EAASrD,KAAKy3B,UAAUz3B,KAAKgK,MAAM4pB,kBACzC,GAAIvwB,EAAQ,CACR,IAAMD,EAAYwB,EAAQuzB,kBAC1B/0B,EAAUzB,KAAO,UAEjB3B,KAAKkK,SAAS,CACV4pB,MAAO,CACH5wB,KAAM,gBACNE,UAAWA,EACXmF,UAAWA,EACXlF,OAAQA,sDAOpBrD,KAAKgK,MAAM8pB,MAAMvrB,UAAUkG,WAAWjM,KAAKxC,KAAKgK,MAAM8pB,MAAM1wB,WAE5DpD,KAAKkK,SAAS,CACV+Q,QAASjb,KAAKgK,MAAMiR,QACpB6Y,MAAO,6CAIOvrB,EAAgCnF,GAClD,IAAMC,EAASrD,KAAKy3B,UAAUz3B,KAAKgK,MAAM4pB,kBACrCvwB,GACArD,KAAKkK,SAAS,CACV4pB,MAAO,CACH5wB,KAAM,iBACNE,UAAWA,EACXmF,UAAWA,EACXlF,OAAQA,sDAMS,IAAAsY,EAAA3b,KACvByO,EAA0BzO,KAAKgK,MAAM8pB,MAAMvrB,UAAUkG,WACrDmmB,EAAWnmB,EAAWrO,KAAK,SAAA0D,GAAC,OAAIA,EAAE5D,KAAOyb,EAAK3R,MAAM8pB,MAAM1wB,UAAUlD,KAC1E,GAAI00B,EAAU,CACV,IAAM9X,EAAQrO,EAAW1N,QAAQ6zB,GAEjCnmB,EAAWqO,GAAS9c,KAAKgK,MAAM8pB,MAAM1wB,UAErCpD,KAAKkK,SAAS,CACV+Q,QAASjb,KAAKgK,MAAMiR,QACpB6Y,MAAO,gDAKKvrB,EAAgCuG,GACpD,IAAM1L,EAAYmF,EAAUkG,WAAWrO,KAAK,SAAA0D,GAAC,OAAIA,EAAE5D,KAAO4O,IAC1D,GAAI1L,EAAW,CACX,IAAM0Z,EAAQvU,EAAUkG,WAAW1N,QAAQqC,GAC3CmF,EAAUkG,WAAW4gB,OAAOvS,EAAO,GAEnC9c,KAAKkK,SAAS,CACV+Q,QAASjb,KAAKgK,MAAMiR,kDAKT5X,GACnBA,EAAOU,WAAWxC,KAAK,SAACC,EAAGC,GAEvB,OAAID,EAAE+D,YAAc9D,EAAE8D,YAAe/D,EAAE+D,WAAa9D,EAAE8D,WAAsB,EACxE/D,EAAE+D,YAAc9D,EAAE8D,YAAe/D,EAAE+D,WAAa9D,EAAE8D,YAAuB,EAEzE/D,EAAEG,KAAOF,EAAEE,MAAgB,EAC3BH,EAAEG,KAAOF,EAAEE,KAAe,EACvB,8CAIW+Y,EAA4B7L,GAClD,IAAMxL,EAASrD,KAAKy3B,UAAUz3B,KAAKgK,MAAM4pB,kBACzC,GAAIvwB,EAAQ,CACR,IAAMyZ,EAAQzZ,EAAO8E,cAAcpH,QAAQ2Z,GAG3C,GAFArX,EAAO8E,cAAcknB,OAAOvS,EAAO,GAE/BjO,GAAmB6L,EAAanS,WAAamS,EAAapS,KAAM,CAChE,IAAM8vB,EAAiB1d,EAAanS,UAAUkG,WAAW1N,QAAQ2Z,EAAapS,MAC9EoS,EAAanS,UAAUkG,WAAW4gB,OAAO+I,EAAgB,GAG7Dp4B,KAAKkK,SAAS,CACV+Q,QAASjb,KAAKgK,MAAMiR,2CAOhBwX,GACZzyB,KAAKkK,SAAS,CACVuoB,KAAMA,wCAKVzyB,KAAKkK,SAAS,CACV4pB,MAAO,CACH5wB,KAAM,gDAMdlD,KAAKkK,SAAS,CACV4pB,MAAO,8CAIQt0B,GACnBQ,KAAKkK,SAAS,CACV2pB,mBAAoBr0B,EAASA,EAAOU,GAAK,2CAI7BohB,GAChBthB,KAAKkK,SAAS,CACVspB,gBAAiBlS,EAAQA,EAAMphB,GAAK,kDAIjBH,GACvBC,KAAKkK,SAAS,CACVupB,uBAAwB1zB,EAAQA,EAAMG,GAAK,+CAI3BmE,GACpBrE,KAAKkK,SAAS,CACVwpB,oBAAqBrvB,EAAYA,EAAUnE,GAAK,8CAIjC8lB,GACnBhmB,KAAKkK,SAAS,CACVypB,mBAAoB3N,EAAWA,EAAS9lB,GAAK,wCAIpCA,GACb,OAAOF,KAAKgK,MAAMoY,QAAQhiB,KAAK,SAAAT,GAAC,OAAIA,EAAEO,KAAOA,4CAGzBA,GACpB,OAAOF,KAAKgK,MAAMlK,QAAQM,KAAK,SAAAC,GAAC,OAAIA,EAAEH,KAAOA,yCAG5BA,GACjB,OAAOF,KAAKgK,MAAM2Z,WAAWvjB,KAAK,SAAA6I,GAAC,OAAIA,EAAE/I,KAAOA,wCAGhCA,GAChB,OAAOF,KAAKgK,MAAMwb,UAAUplB,KAAK,SAAAimB,GAAC,OAAIA,EAAEnmB,KAAOA,sCAGjCA,GACd,OAAOF,KAAKgK,MAAMiR,QAAQ7a,KAAK,SAAA0D,GAAC,OAAIA,EAAE5D,KAAOA,uCAG9BwE,EAAqByxB,GACpC,IAAMp2B,EAAQC,KAAKo2B,sBAAsBD,GACzC,GAAIp2B,EACA,OAAOA,EAAMO,SAASF,KAAK,SAAAP,GAAO,OAAIA,EAAQ8B,OAAS+C,kDAMjCyxB,GAC1B,OAAOn2B,KAAKgK,MAAMlK,QAAQM,KAAK,SAAAT,GAAC,OAAIA,EAAEgC,OAASw0B,wCAG/Bt2B,GAChB,OAAOG,KAAKgK,MAAMlK,QAAQM,KAAK,SAAAL,GAAK,OAAIA,EAAMO,SAASC,SAASV,wCAIhEG,KAAKkK,SAAS,CACVkY,QAAS,GACToR,gBAAiB,KACjB1zB,QAAS,GACT2zB,uBAAwB,KACxB9P,WAAY,GACZ+P,oBAAqB,KACrBlO,UAAW,GACXmO,mBAAoB,KACpB1Y,QAAS,GACT2Y,iBAAkB,2CAINrrB,EAAgBrF,EAAcrB,GAC9C,OAAQqB,GACJ,IAAK,KACDrB,EAAQZ,KAAK0Q,IAAI9P,EAAO0G,EAAU5F,OAClCd,EAAQZ,KAAKwQ,IAAI5P,EAAO,GACxB,MACJ,IAAK,SACDA,EAAQZ,KAAKwQ,IAAI5P,EAAO,GACxB,MACJ,IAAK,QACDA,EAAQZ,KAAKwQ,IAAI5P,EAAO,GACxBA,OAA8B8K,IAArBpE,EAAUvD,OAAwB/D,KAAK0Q,IAAI9P,EAAO,IAAMZ,KAAK0Q,IAAI9P,EAAO,GACjF,MACJ,IAAK,QAGL,IAAK,UACDA,EAAQZ,KAAKwQ,IAAI5P,EAAO,GAShC,IAFA,IAAM0V,EAASrU,EAAKtC,MAAM,KACtBy3B,EAAM9vB,EACD5D,EAAI,EAAGA,IAAM4S,EAAOnM,SAAUzG,EAAG,CACtC,IAAM7D,EAAQyW,EAAO5S,GACjBA,IAAM4S,EAAOnM,OAAS,EACtBitB,EAAIv3B,GAASe,EAEbw2B,EAAMA,EAAIv3B,GAQlB,GAJAlB,EAAM2B,KAAKvB,KAAKgK,MAAMoY,SACtBxiB,EAAM2B,KAAKvB,KAAKgK,MAAMlK,SACtBF,EAAM2B,KAAKvB,KAAKgK,MAAM2Z,YAET,eAATzgB,EAAuB,CACvB,IAAMG,EAASrD,KAAKy3B,UAAUz3B,KAAKgK,MAAM4pB,kBACzC5zB,KAAKw3B,eAAen0B,GAGxBrD,KAAKkK,SAAS,CACVkY,QAASpiB,KAAKgK,MAAMoY,QACpBtiB,QAASE,KAAKgK,MAAMlK,QACpB6jB,WAAY3jB,KAAKgK,MAAM2Z,WACvB1I,QAASjb,KAAKgK,MAAMiR,QACpBuY,gBAAiBxzB,KAAKgK,MAAMwpB,gBAC5BC,uBAAwBzzB,KAAKgK,MAAMypB,uBACnCC,oBAAqB1zB,KAAKgK,MAAM0pB,oBAChCE,iBAAkB5zB,KAAKgK,MAAM4pB,iBAC7BzoB,QAASnL,KAAKgK,MAAMmB,QACpB2oB,MAAO9zB,KAAKgK,MAAM8pB,2CAIPvrB,EAAgBrF,EAAcC,GAG7C,IAFA,IAAMoU,EAASrU,EAAKtC,MAAM,KACtBy3B,EAAM9vB,EACD5D,EAAI,EAAGA,IAAM4S,EAAOnM,SAAUzG,EAAG,CACtC,IAAM7D,EAAQyW,EAAO5S,GACrB,GAAIA,IAAM4S,EAAOnM,OAAS,EAAG,CACzB,IAAIvJ,EACJA,EAAmB,cAAVf,EAAyBlB,EAAMqkB,eAAeoU,EAAIzyB,UAAWzC,GAASk1B,EAAIv3B,GAASqC,EAC5FnD,KAAKiQ,YAAY1H,EAAWrF,EAAMrB,QAElCw2B,EAAMA,EAAIv3B,qCAON,IAAAgb,EAAA9b,KACZ,IACI,IAAI4I,EAA8B,KAC9B6G,EAA8B,KAClC,OAAQzP,KAAKgK,MAAMyoB,MACf,IAAK,OACD7pB,EACIE,EAAAtH,EAAAuH,cAACuvB,GAAD,CACIx4B,QAASE,KAAKgK,MAAMlK,QACpBwlB,mBAAoB,kBAAMxJ,EAAKwJ,wBAGvC,MACJ,IAAK,KACD1c,EACIE,EAAAtH,EAAAuH,cAACwvB,GAAD,CACItY,iBAAkBjgB,KAAKgK,MAAM6pB,mBAC7BzZ,SAAUpa,KAAKgK,MAAMmB,QAAQiP,SAC7BwG,aAAc,SAAAphB,GAAM,OAAIsc,EAAK0c,eAAeh5B,MAGpD,MACJ,IAAK,UACDoJ,EACIE,EAAAtH,EAAAuH,cAAC0vB,GAAD,CACIrW,QAASpiB,KAAKgK,MAAMoY,QACpBK,UAAWziB,KAAKs0B,SAASt0B,KAAKgK,MAAMwpB,kBAAoB,KACxDpZ,SAAUpa,KAAKgK,MAAMmB,QAAQiP,SAC7BmI,YAAa,SAAAjB,GAAK,OAAIxF,EAAKyG,YAAYjB,IACvC8H,SAAU,kBAAMtN,EAAKsN,YACrBV,YAAa,kBAAM5M,EAAK4M,eACxBF,MAAO,kBAAM1M,EAAK0M,SAClB1T,SAAU,SAAA6M,GAAE,OAAI7F,EAAKhH,SAAS6M,IAC9B8G,QAAS,kBAAM3M,EAAK2M,WACpBxY,YAAa,SAAC1H,EAAWrF,EAAMrB,GAAlB,OAA4Bia,EAAK7L,YAAY1H,EAAWrF,EAAMrB,IAC3EuL,WAAY,SAAC7E,EAAWrF,EAAMC,GAAlB,OAA4B2Y,EAAK1O,WAAW7E,EAAWrF,EAAMC,MAGjF,MACJ,IAAK,UACDyF,EACIE,EAAAtH,EAAAuH,cAAC2vB,GAAD,CACI54B,QAASE,KAAKgK,MAAMlK,QACpB2iB,UAAWziB,KAAKgkB,gBAAgBhkB,KAAKgK,MAAMypB,yBAA2B,KACtEjzB,OAAQR,KAAKgK,MAAM+pB,cACnB3Z,SAAUpa,KAAKgK,MAAMmB,QAAQiP,SAC7BoN,mBAAoB,SAAAznB,GAAK,OAAI+b,EAAK0L,mBAAmBznB,IACrD4nB,gBAAiB,kBAAM7L,EAAK6L,mBAC5BX,mBAAoB,kBAAMlL,EAAKkL,sBAC/BF,WAAY,kBAAMhL,EAAKgL,cACvB9T,cAAe,SAAAnT,GAAO,OAAIic,EAAK9I,cAAcnT,IAC7CknB,aAAc,kBAAMjL,EAAKiL,gBACzB9W,YAAa,SAAC1H,EAAWrF,EAAMrB,GAAlB,OAA4Bia,EAAK7L,YAAY1H,EAAWrF,EAAMrB,IAC3EuL,WAAY,SAAC7E,EAAWrF,EAAMC,GAAlB,OAA4B2Y,EAAK1O,WAAW7E,EAAWrF,EAAMC,IACzEuP,YAAa,SAAAnK,GAAS,OAAIuT,EAAKpJ,YAAYnK,IAC3CqK,aAAc,SAACrK,EAAW5G,GAAZ,OAAqBma,EAAKlJ,aAAarK,EAAW5G,IAChEoR,YAAa,SAACxK,EAAWmf,GAAZ,OAAwB5L,EAAK/I,YAAYxK,EAAWmf,MAGzE,IAAI5lB,EAAQ,EACZ9B,KAAKgK,MAAMlK,QAAQe,QAAQ,SAAAd,GACvB+B,GAAS/B,EAAMO,SAAS8K,SAExBtJ,EAAQ,IACR2N,EACI3G,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,SACI7F,KAAK,OACLwI,YAAY,SACZ7J,MAAO7B,KAAKgK,MAAM+pB,cAClB9iB,SAAU,SAAAC,GAAK,OAAI4K,EAAK7L,YAAY6L,EAAK9R,MAAO,gBAAiBkH,EAAMC,OAAOtP,WAGtFiH,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,UAAQ2B,QAAS,kBAAMoR,EAAK6c,qBAA5B,mBAKhB,MACJ,IAAK,YACD/vB,EACIE,EAAAtH,EAAAuH,cAAC6vB,GAAD,CACIjV,WAAY3jB,KAAKgK,MAAM2Z,WACvBlB,UAAWziB,KAAKy2B,aAAaz2B,KAAKgK,MAAM0pB,sBAAwB,KAChEtR,QAASpiB,KAAKgK,MAAMoY,QACpBtiB,QAASE,KAAKgK,MAAMlK,QACpBsa,SAAUpa,KAAKgK,MAAMmB,QAAQiP,SAC7BuK,gBAAiB,SAAAtgB,GAAS,OAAIyX,EAAK6I,gBAAgBtgB,IACnD8gB,aAAc,kBAAMrJ,EAAKqJ,gBACzBxC,gBAAiB,kBAAM7G,EAAK6G,mBAC5BD,QAAS,kBAAM5G,EAAK+c,sBACpBhV,WAAY,SAAA5R,GAAI,OAAI6J,EAAK+H,WAAW5R,IACpC+O,WAAY,SAACtc,EAAayxB,GAAd,OAA4Bra,EAAKkF,WAAWtc,EAAayxB,IAAc,MACnF/iB,iBAAkB,SAACvT,EAASgI,GAAV,OAAqBiU,EAAK1I,iBAAiBvT,EAASgI,IACtEoL,oBAAqB,SAACzO,EAAMqD,GAAP,OAAkBiU,EAAK7I,oBAAoBzO,EAAMqD,IACtEuF,WAAY,SAAC5I,EAAMtB,EAAMC,GAAb,OAAuB2Y,EAAK1O,WAAW5I,EAAMtB,EAAMC,IAC/D8M,YAAa,SAAC1H,EAAWrF,EAAMrB,GAAlB,OAA4Bia,EAAK7L,YAAY1H,EAAWrF,EAAMrB,MAGnF,MACJ,IAAK,OACD+G,EACIE,EAAAtH,EAAAuH,cAAC+vB,GAAD,CACItT,UAAWxlB,KAAKgK,MAAMwb,UACtB/C,UAAWziB,KAAK+2B,YAAY/2B,KAAKgK,MAAM2pB,qBAAuB,KAC9DvZ,SAAUpa,KAAKgK,MAAMmB,QAAQiP,SAC7BkM,eAAgB,SAAAC,GAAK,OAAIzK,EAAKwK,eAAeC,IAC7CI,YAAa,kBAAM7K,EAAK6K,eACxBb,eAAgB,kBAAMhK,EAAKgK,kBAC3BD,OAAQ,kBAAM/J,EAAK+J,UACnBH,QAAS,SAAAzd,GAAG,OAAI6T,EAAK4J,QAAQzd,IAC7B0d,UAAW,SAAA1d,GAAG,OAAI6T,EAAK6J,UAAU1d,IACjCgI,YAAa,SAAC3C,EAAQpK,EAAMrB,GAAf,OAAyBia,EAAK7L,YAAY3C,EAAQpK,EAAMrB,MAG7E,MACJ,IAAK,SACD,IAAMwB,EAASrD,KAAKy3B,UAAUz3B,KAAKgK,MAAM4pB,kBAyBzC,GAxBAhrB,EACIE,EAAAtH,EAAAuH,cAACgwB,EAAD,CACI9d,QAASjb,KAAKgK,MAAMiR,QACpB5X,OAAQA,GAAU,KAClB+W,SAAUpa,KAAKgK,MAAMmB,QAAQiP,SAC7BgB,aAAc,kBAAMU,EAAKV,gBACzBD,gBAAiB,SAAA6d,GAAY,OAAIld,EAAKmd,aAAaD,IACnD5rB,WAAY,SAAC7E,EAAWrF,EAAMC,GAAlB,OAA4B2Y,EAAK1O,WAAW7E,EAAWrF,EAAMC,IACzE8M,YAAa,SAAC1H,EAAWrF,EAAMrB,GAAlB,OAA4Bia,EAAK7L,YAAY1H,EAAWrF,EAAMrB,IAC3EkS,YAAa,SAACxL,GAAD,OAAeuT,EAAK/H,YAAYxL,GAAW,IACxDyL,WAAY,SAACzL,GAAD,OAAeuT,EAAK9H,WAAWzL,IAC3CuL,aAAc,SAACvL,GAAD,OAAeuT,EAAKhI,aAAavL,IAC/CoL,gBAAiB,SAACpL,GAAD,OAAeuT,EAAKnI,gBAAgBpL,IACrDwG,aAAc,SAACxG,GAAD,OAAeuT,EAAK/M,aAAaxG,IAC/CqG,cAAe,SAACrG,EAAWnF,GAAZ,OAA0B0Y,EAAKlN,cAAcrG,EAAWnF,IACvEyL,gBAAiB,SAACtG,EAAWuG,GAAZ,OAA4BgN,EAAKjN,gBAAgBtG,EAAWuG,IAC7E0E,OAAQ,SAACjL,EAAWjB,EAAGC,GAAf,OAAqBuU,EAAKtI,OAAOjL,EAAWjB,EAAGC,IACvD+L,QAAS,SAAC/K,EAAWiE,GAAZ,OAAoBsP,EAAKxI,QAAQ/K,EAAWiE,IACrD+G,UAAW,SAAAhL,GAAS,OAAIuT,EAAKvI,UAAUhL,IACvCsL,QAAS,SAACtL,GAAD,OAAeuT,EAAKjI,QAAQtL,IACrCqJ,SAAU,SAACrJ,EAAWmJ,EAAIG,GAAhB,OAAyBiK,EAAKlK,SAASrJ,EAAWmJ,EAAIG,IAChEwH,MAAO,SAACqB,EAAc7L,GAAf,OAAmCiN,EAAKod,kBAAkBxe,EAAc7L,MAGnFxL,EAAQ,CACR,IAAMgB,EAAYrE,KAAKy2B,aAAapzB,EAAOuE,aAC3C,GAAIvD,EAAW,CACX,IAAI2d,EAAK,EACT3e,EAAOU,WAAWvD,OAAO,SAAAsD,GAAC,MAAe,YAAXA,EAAEZ,OAC3BrC,QAAQ,SAAA0H,GACLyZ,GAAMpiB,EAAMqhB,WAAY1Y,EAAkC3C,aAGlE6J,EACI3G,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,QAAf,UAA8B3F,EAAO6E,QAEzCY,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,QAAf,OAA2BgZ,IAE/BlZ,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,UAAUsC,MAAO,CAAE0B,QAAoC,IAA3B3I,EAAU6C,MAAMkE,OAAe,OAAS,KAC/EtC,EAAAtH,EAAAuH,cAAA,UAAQ2B,QAAS,kBAAMoR,EAAKqd,kBAA5B,aAEJrwB,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,UAAQ2B,QAAS,kBAAMoR,EAAKsd,gBAA5B,oBAEJtwB,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,UAAQ2B,QAAS,kBAAMoR,EAAKud,cAA5B,qBAY5B,IAAIvF,EAAQ,KACZ,GAAI9zB,KAAKgK,MAAM8pB,MAAO,CAClB,IAAIwF,EAAa,KACbC,EAAe,KACfC,GAAkB,EAClBC,GAAmB,EACjBC,EAAe,CACjBtjB,KAAM,GACN8L,MAAO,IAGX,OAAQliB,KAAKgK,MAAM8pB,MAAM5wB,MACrB,IAAK,QACDq2B,EACIzwB,EAAAtH,EAAAuH,cAAC4wB,GAAD,CACIxuB,QAASnL,KAAKgK,MAAMmB,QACpBqe,SAAU,kBAAM1N,EAAK0N,YACrBvZ,YAAa,SAAC3C,EAAQpK,EAAMrB,GAAf,OAAyBia,EAAK7L,YAAY3C,EAAQpK,EAAMrB,MAG7E,MACJ,IAAK,eACDy3B,EAAa,eACbC,EACIzwB,EAAAtH,EAAAuH,cAAC6wB,GAAD,CACI95B,QAASE,KAAKgK,MAAMlK,UAG5B,MACJ,IAAK,UACDw5B,EAAa,iBACbC,EACIzwB,EAAAtH,EAAAuH,cAAC8wB,GAAD,CACIh6B,QAASG,KAAKgK,MAAM8pB,MAAMj0B,QAC1BC,QAASE,KAAKgK,MAAMlK,QACpB+xB,aAAc7xB,KAAKgK,MAAM8pB,MAAMjC,eAGvC2H,GAAkB,EAClBC,GAAmB,EACnBC,EAAatjB,KAAO,CAEZtN,EAAAtH,EAAAuH,cAAC0W,GAAD,CACI9T,IAAI,UACJsC,MAAM,mBACN4P,QAAS7d,KAAKgK,MAAM8pB,MAAMjC,aAC1B5hB,YAAa,kBAAM6L,EAAKge,gCAIpCJ,EAAaxX,MAAQ,CACjBpZ,EAAAtH,EAAAuH,cAAA,UAAQ4C,IAAI,OAAOjB,QAAS,kBAAMoR,EAAKie,gBAAvC,QACAjxB,EAAAtH,EAAAuH,cAAA,UAAQ4C,IAAI,SAASjB,QAAS,kBAAMoR,EAAKke,eAAzC,WAEJ,MACJ,IAAK,MACDV,EAAa,aACbC,EACIzwB,EAAAtH,EAAAuH,cAACkxB,GAAD,CACIhyB,IAAKjI,KAAKgK,MAAM8pB,MAAM7rB,MAG9BuxB,GAAkB,EAClBC,GAAmB,EACnBC,EAAaxX,MAAQ,CACjBpZ,EAAAtH,EAAAuH,cAAA,UAAQ4C,IAAI,OAAOjB,QAAS,kBAAMoR,EAAKoe,YAAvC,QACApxB,EAAAtH,EAAAuH,cAAA,UAAQ4C,IAAI,SAASjB,QAAS,kBAAMoR,EAAKke,eAAzC,WAEJ,MACJ,IAAK,eACDV,EAAa,wBACbC,EACIzwB,EAAAtH,EAAAuH,cAACoxB,GAAD,CACIzQ,YAAa1pB,KAAKgK,MAAM8pB,MAAMpK,YAC9BtH,QAASpiB,KAAKgK,MAAMoY,QACpBuB,WAAY3jB,KAAKgK,MAAM2Z,WACvB6B,UAAWxlB,KAAKgK,MAAMwb,UACtBxE,WAAY,SAACtc,EAAayxB,GAAd,OAA4Bra,EAAKkF,WAAWtc,EAAayxB,IAAc,MACnFxM,OAAQ,kBAAM7N,EAAK5R,SAAS,CAAC4pB,MAAOhY,EAAK9R,MAAM8pB,WAGvD0F,GAAkB,EAClBC,GAAmB,EACnBC,EAAaxX,MAAQ,CAEbpZ,EAAAtH,EAAAuH,cAAA,UACI4C,IAAI,kBACJ3C,UAAWhJ,KAAKgK,MAAM8pB,MAAMpK,YAAY/hB,SAAW3H,KAAKgK,MAAM8pB,MAAMpK,YAAY9hB,YAAc,GAAK,WACnG8C,QAAS,kBAAMoR,EAAKse,gBAHxB,mBAQJtxB,EAAAtH,EAAAuH,cAAA,UAAQ4C,IAAI,SAASjB,QAAS,kBAAMoR,EAAKke,eAAzC,WAEJ,MACJ,IAAK,cACDV,EAAa,kBACbC,EACIzwB,EAAAtH,EAAAuH,cAACoxB,GAAD,CACIzQ,YAAa1pB,KAAKgK,MAAM8pB,MAAMpK,YAC9B/F,WAAY3jB,KAAKgK,MAAM2Z,WACvB3C,WAAY,SAACtc,EAAayxB,GAAd,OAA4Bra,EAAKkF,WAAWtc,EAAayxB,IAAc,MACnFxM,OAAQ,kBAAM7N,EAAK5R,SAAS,CAAC4pB,MAAOhY,EAAK9R,MAAM8pB,WAGvD0F,GAAkB,EAClBC,GAAmB,EACnBC,EAAaxX,MAAQ,CAEbpZ,EAAAtH,EAAAuH,cAAA,UACI4C,IAAI,WACJ3C,UAAmD,OAAxChJ,KAAKgK,MAAM8pB,MAAMpK,YAAY7hB,OAAkB,GAAK,WAC/D6C,QAAS,kBAAMoR,EAAKue,oBAHxB,YAQJvxB,EAAAtH,EAAAuH,cAAA,UAAQ4C,IAAI,SAASjB,QAAS,kBAAMoR,EAAKke,eAAzC,WAEJ,MACJ,IAAK,gBACDV,EAAa,kBACbC,EACIzwB,EAAAtH,EAAAuH,cAACuxB,GAAD,CACIl3B,UAAWpD,KAAKgK,MAAM8pB,MAAM1wB,UAC5BmF,UAAWvI,KAAKgK,MAAM8pB,MAAMvrB,UAC5BlF,OAAQrD,KAAKgK,MAAM8pB,MAAMzwB,SAGjCm2B,GAAkB,EAClBC,GAAmB,EACnBC,EAAaxX,MAAQ,CACjBpZ,EAAAtH,EAAAuH,cAAA,UAAQ4C,IAAI,MAAMjB,QAAS,kBAAMoR,EAAKye,0BAAtC,OACAzxB,EAAAtH,EAAAuH,cAAA,UAAQ4C,IAAI,SAASjB,QAAS,kBAAMoR,EAAKke,eAAzC,WAEJ,MACJ,IAAK,iBACDV,EAAa,iBACbC,EACIzwB,EAAAtH,EAAAuH,cAACuxB,GAAD,CACIl3B,UAAWpD,KAAKgK,MAAM8pB,MAAM1wB,UAC5BmF,UAAWvI,KAAKgK,MAAM8pB,MAAMvrB,UAC5BlF,OAAQrD,KAAKgK,MAAM8pB,MAAMzwB,SAGjCm2B,GAAkB,EAClBE,EAAaxX,MAAQ,CACjBpZ,EAAAtH,EAAAuH,cAAA,UAAQ4C,IAAI,OAAOjB,QAAS,kBAAMoR,EAAK0e,2BAAvC,QACA1xB,EAAAtH,EAAAuH,cAAA,UAAQ4C,IAAI,SAASjB,QAAS,kBAAMoR,EAAKke,eAAzC,WAQZlG,EACIhrB,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,WACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,SACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,gBACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,SAASswB,GACvBE,EAAkB1wB,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,QAAQsB,IAAK+O,IAAO7O,IAAI,QAAQE,QAAS,kBAAMoR,EAAKke,gBAAmB,MAE7GlxB,EAAAtH,EAAAuH,cAAA,OAAKC,UAAWywB,EAAmB,2BAA6B,iBAC3DF,GAELzwB,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,gBACXF,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,QAAQ0wB,EAAatjB,MACpCtN,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,SAAS0wB,EAAaxX,UAOzD,OACIpZ,EAAAtH,EAAAuH,cAAA,OAAKC,UAAU,QACXF,EAAAtH,EAAAuH,cAAC0xB,GAAD,CACIhrB,QAASA,EACTwjB,KAAgB,OAAVa,EACNV,SAAU,kBAAMtX,EAAKoX,QAAQ,SAC7BI,UAAW,kBAAMxX,EAAKwX,eAE1BxqB,EAAAtH,EAAAuH,cAAA,OAAKC,UAAsB,OAAV8qB,EAAkB,eAAiB,qBAC/ClrB,GAELE,EAAAtH,EAAAuH,cAAC2xB,GAAD,CACIjI,KAAMzyB,KAAKgK,MAAMyoB,KACjBrQ,QAASpiB,KAAKgK,MAAMoY,QACpBtiB,QAASE,KAAKgK,MAAMlK,QACpB6jB,WAAY3jB,KAAKgK,MAAM2Z,WACvBsP,KAAgB,OAAVa,EACNZ,QAAS,SAAAT,GAAI,OAAI3W,EAAKoX,QAAQT,MAEjCqB,GAGX,MAAO7qB,GACLC,QAAQC,MAAMF,WAt5DQG,IAAMC,WCvDxCsxB,IAASC,OAAO9xB,EAAAtH,EAAAuH,cAAC8xB,GAAD,MAAUC,SAASC,eAAe","file":"static/js/main.009d2da1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/down-arrow-black.a2fc7a1f.svg\";","module.exports = __webpack_public_path__ + \"static/media/down-arrow.697dc1af.svg\";","module.exports = __webpack_public_path__ + \"static/media/close-black.7645a5b9.svg\";","module.exports = __webpack_public_path__ + \"static/media/warning.67a11a95.svg\";","module.exports = __webpack_public_path__ + \"static/media/ellipsis.9650a20f.svg\";","module.exports = __webpack_public_path__ + \"static/media/minus.7003cf50.svg\";","module.exports = __webpack_public_path__ + \"static/media/plus.b60accff.svg\";","module.exports = __webpack_public_path__ + \"static/media/checked.5cbd1005.svg\";","module.exports = __webpack_public_path__ + \"static/media/unchecked.3d4ae2dd.svg\";","module.exports = __webpack_public_path__ + \"static/media/settings.042bb1c2.svg\";","import { Combat } from '../models/combat';\r\nimport { Condition, ConditionDurationCombatant, ConditionDurationRounds, ConditionDurationSaves } from '../models/condition';\r\nimport { Encounter, EncounterWave } from '../models/encounter';\r\nimport { Monster, MonsterGroup } from '../models/monster-group';\r\n\r\nexport default class Utils {\r\n\r\n    // This is an internal dictionary to speed up lookup\r\n    private static monsterIdToGroup: { [id: string]: MonsterGroup } = {};\r\n\r\n    public static getMonsterGroup(monster: Monster, library: MonsterGroup[]): MonsterGroup {\r\n        let group = this.monsterIdToGroup[monster.id];\r\n\r\n        if (!group) {\r\n            const grp = library.find(g => g.monsters.includes(monster));\r\n            if (grp) {\r\n                group = grp;\r\n                this.monsterIdToGroup[monster.id] = group;\r\n            }\r\n        }\r\n\r\n        return group;\r\n    }\r\n\r\n    public static match(filter: string, text: string): boolean {\r\n        if (!filter) {\r\n            return true;\r\n        }\r\n\r\n        let result = true;\r\n\r\n        const tokens = filter.toLowerCase().split(' ');\r\n        tokens.forEach(token => {\r\n            if (text.toLowerCase().indexOf(token) === -1) {\r\n                result = false;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    public static guid(): string {\r\n        const s4 = () => Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\r\n        return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\r\n    }\r\n\r\n    public static sort(collection: any[]): any[] {\r\n        collection.sort((a, b) => {\r\n            const aName = a.name.toLowerCase();\r\n            const bName = b.name.toLowerCase();\r\n            if (aName < bName) { return -1; }\r\n            if (aName > bName) { return 1; }\r\n            return 0;\r\n        });\r\n        return collection;\r\n    }\r\n\r\n    public static sortByValue(collection: any[]): any[] {\r\n        collection.sort((a, b) => {\r\n            if (a.value < b.value) { return -1; }\r\n            if (a.value > b.value) { return 1; }\r\n            return 0;\r\n        });\r\n        return collection;\r\n    }\r\n\r\n    public static sortByCount(collection: any[]): any[] {\r\n        collection.sort((a, b) => {\r\n            if (a.count < b.count) { return 1; }\r\n            if (a.count > b.count) { return -1; }\r\n\r\n            const aValue = a.value.toLowerCase();\r\n            const bValue = b.value.toLowerCase();\r\n            if (aValue < bValue) { return -1; }\r\n            if (aValue > bValue) { return 1; }\r\n\r\n            return 0;\r\n        });\r\n        return collection;\r\n    }\r\n\r\n    public static modifierValue(score: number): number {\r\n        return Math.floor((score - 10) / 2);\r\n    }\r\n\r\n    public static modifier(score: number): string {\r\n        const mod = this.modifierValue(score);\r\n        let str = mod.toString();\r\n        if (mod >= 0) {\r\n            str = '+' + str;\r\n        }\r\n        return str;\r\n    }\r\n\r\n    public static dieRoll(): number {\r\n        return Math.floor(Math.random() * 20) + 1;\r\n    }\r\n\r\n    public static miniSize(size: string): number {\r\n        switch (size) {\r\n            case 'tiny': return 1;\r\n            case 'small': return 1;\r\n            case 'medium': return 1;\r\n            case 'large': return 2;\r\n            case 'huge': return 3;\r\n            case 'gargantuan': return 4;\r\n            default: return 1;\r\n        }\r\n    }\r\n\r\n    public static hitDieType(size: string) {\r\n        switch (size) {\r\n            case 'tiny': return 4;\r\n            case 'small': return 6;\r\n            case 'medium': return 8;\r\n            case 'large': return 10;\r\n            case 'huge': return 12;\r\n            case 'gargantuan': return 20;\r\n            default: return 8;\r\n        }\r\n    }\r\n\r\n    public static challenge(cr: number): string {\r\n        switch (cr) {\r\n            case 0.125: return '1/8';\r\n            case 0.25: return '1/4';\r\n            case 0.5: return '1/2';\r\n            default: return cr.toString();\r\n        }\r\n    }\r\n\r\n    public static parseChallenge(cr: string): number {\r\n        switch (cr) {\r\n            case '1/8': return 0.125;\r\n            case '1/4': return 0.25;\r\n            case '1/2': return 0.5;\r\n            default: return parseInt(cr, 10);\r\n        }\r\n    }\r\n\r\n    public static challengeDetails(): any[] {\r\n        const result: any[] = [];\r\n\r\n        result.push({ cr: 0,        ac: 13,       hpMin: 1, hpMax: 6,       attack: 3,  dmgMin: 0,   dmgMax: 1,   save: 13 });\r\n        result.push({ cr: 0.125,    ac: 13,       hpMin: 7, hpMax: 35,      attack: 3,  dmgMin: 2,   dmgMax: 3,   save: 13 });\r\n        result.push({ cr: 0.25,     ac: 13,       hpMin: 36, hpMax: 49,     attack: 3,  dmgMin: 4,   dmgMax: 5,   save: 13 });\r\n        result.push({ cr: 0.5,      ac: 13,       hpMin: 50, hpMax: 70,     attack: 3,  dmgMin: 6,   dmgMax: 8,   save: 13 });\r\n        result.push({ cr: 1,        ac: 13,       hpMin: 71, hpMax: 85,     attack: 3,  dmgMin: 9,   dmgMax: 14,  save: 13 });\r\n        result.push({ cr: 2,        ac: 13,       hpMin: 86, hpMax: 100,    attack: 3,  dmgMin: 15,  dmgMax: 20,  save: 13 });\r\n        result.push({ cr: 3,        ac: 13,       hpMin: 101, hpMax: 115,   attack: 4,  dmgMin: 21,  dmgMax: 26,  save: 13 });\r\n        result.push({ cr: 4,        ac: 14,       hpMin: 116, hpMax: 130,   attack: 5,  dmgMin: 27,  dmgMax: 32,  save: 14 });\r\n        result.push({ cr: 5,        ac: 15,       hpMin: 131, hpMax: 145,   attack: 6,  dmgMin: 33,  dmgMax: 38,  save: 15 });\r\n        result.push({ cr: 6,        ac: 15,       hpMin: 146, hpMax: 160,   attack: 6,  dmgMin: 39,  dmgMax: 44,  save: 15 });\r\n        result.push({ cr: 7,        ac: 15,       hpMin: 161, hpMax: 175,   attack: 6,  dmgMin: 45,  dmgMax: 50,  save: 15 });\r\n        result.push({ cr: 8,        ac: 16,       hpMin: 176, hpMax: 190,   attack: 7,  dmgMin: 51,  dmgMax: 56,  save: 16 });\r\n        result.push({ cr: 9,        ac: 16,       hpMin: 191, hpMax: 205,   attack: 7,  dmgMin: 57,  dmgMax: 62,  save: 16 });\r\n        result.push({ cr: 10,       ac: 17,       hpMin: 206, hpMax: 220,   attack: 7,  dmgMin: 63,  dmgMax: 68,  save: 16 });\r\n        result.push({ cr: 11,       ac: 17,       hpMin: 221, hpMax: 235,   attack: 8,  dmgMin: 69,  dmgMax: 74,  save: 17 });\r\n        result.push({ cr: 12,       ac: 17,       hpMin: 236, hpMax: 250,   attack: 8,  dmgMin: 75,  dmgMax: 80,  save: 17 });\r\n        result.push({ cr: 13,       ac: 18,       hpMin: 251, hpMax: 265,   attack: 8,  dmgMin: 81,  dmgMax: 86,  save: 18 });\r\n        result.push({ cr: 14,       ac: 18,       hpMin: 266, hpMax: 280,   attack: 8,  dmgMin: 87,  dmgMax: 92,  save: 18 });\r\n        result.push({ cr: 15,       ac: 18,       hpMin: 281, hpMax: 295,   attack: 8,  dmgMin: 93,  dmgMax: 98,  save: 18 });\r\n        result.push({ cr: 16,       ac: 18,       hpMin: 296, hpMax: 310,   attack: 9,  dmgMin: 99,  dmgMax: 104, save: 18 });\r\n        result.push({ cr: 17,       ac: 19,       hpMin: 311, hpMax: 325,   attack: 10, dmgMin: 105, dmgMax: 110, save: 19 });\r\n        result.push({ cr: 18,       ac: 19,       hpMin: 326, hpMax: 340,   attack: 10, dmgMin: 111, dmgMax: 116, save: 19 });\r\n        result.push({ cr: 19,       ac: 19,       hpMin: 341, hpMax: 355,   attack: 10, dmgMin: 117, dmgMax: 122, save: 19 });\r\n        result.push({ cr: 20,       ac: 19,       hpMin: 356, hpMax: 400,   attack: 10, dmgMin: 123, dmgMax: 140, save: 19 });\r\n        result.push({ cr: 21,       ac: 19,       hpMin: 401, hpMax: 445,   attack: 11, dmgMin: 141, dmgMax: 158, save: 20 });\r\n        result.push({ cr: 22,       ac: 19,       hpMin: 446, hpMax: 490,   attack: 11, dmgMin: 159, dmgMax: 176, save: 20 });\r\n        result.push({ cr: 23,       ac: 19,       hpMin: 491, hpMax: 535,   attack: 11, dmgMin: 177, dmgMax: 194, save: 20 });\r\n        result.push({ cr: 24,       ac: 19,       hpMin: 536, hpMax: 580,   attack: 12, dmgMin: 195, dmgMax: 212, save: 21 });\r\n        result.push({ cr: 25,       ac: 19,       hpMin: 581, hpMax: 625,   attack: 12, dmgMin: 213, dmgMax: 230, save: 21 });\r\n        result.push({ cr: 26,       ac: 19,       hpMin: 626, hpMax: 670,   attack: 12, dmgMin: 231, dmgMax: 248, save: 21 });\r\n        result.push({ cr: 27,       ac: 19,       hpMin: 671, hpMax: 715,   attack: 13, dmgMin: 249, dmgMax: 266, save: 22 });\r\n        result.push({ cr: 28,       ac: 19,       hpMin: 716, hpMax: 760,   attack: 13, dmgMin: 267, dmgMax: 284, save: 22 });\r\n        result.push({ cr: 29,       ac: 19,       hpMin: 761, hpMax: 805,   attack: 13, dmgMin: 285, dmgMax: 302, save: 22 });\r\n        result.push({ cr: 30,       ac: 19,       hpMin: 806, hpMax: 850,   attack: 14, dmgMin: 303, dmgMax: 320, save: 23 });\r\n\r\n        return result;\r\n    }\r\n\r\n    public static experience(cr: number): number {\r\n        switch (cr) {\r\n            case 0: return 10;\r\n            case 0.125: return 25;\r\n            case 0.25: return 50;\r\n            case 0.5: return 100;\r\n            case 1: return 200;\r\n            case 2: return 450;\r\n            case 3: return 700;\r\n            case 4: return 1100;\r\n            case 5: return 1800;\r\n            case 6: return 2300;\r\n            case 7: return 2900;\r\n            case 8: return 3900;\r\n            case 9: return 5000;\r\n            case 10: return 5900;\r\n            case 11: return 7200;\r\n            case 12: return 8400;\r\n            case 13: return 10000;\r\n            case 14: return 11500;\r\n            case 15: return 13000;\r\n            case 16: return 15000;\r\n            case 17: return 18000;\r\n            case 18: return 20000;\r\n            case 19: return 22000;\r\n            case 20: return 25000;\r\n            case 21: return 33000;\r\n            case 22: return 41000;\r\n            case 23: return 50000;\r\n            case 24: return 62000;\r\n            case 30: return 155000;\r\n            default: return 0;\r\n        }\r\n    }\r\n\r\n    public static experienceFactor(count: number): number {\r\n        switch (count) {\r\n            case 0:\r\n                return 0;\r\n            case 1:\r\n                return 1;\r\n            case 2:\r\n                return 1.5;\r\n            case 3:\r\n            case 4:\r\n            case 5:\r\n            case 6:\r\n                return 2;\r\n            case 7:\r\n            case 8:\r\n            case 9:\r\n            case 10:\r\n                return 2.5;\r\n            case 11:\r\n            case 12:\r\n            case 13:\r\n            case 14:\r\n                return 3;\r\n            default:\r\n                return 4;\r\n        }\r\n    }\r\n\r\n    public static pcExperience(level: number, difficulty: string): number {\r\n        switch (difficulty) {\r\n            case 'easy':\r\n                switch (level) {\r\n                    case 1: return 25;\r\n                    case 2: return 50;\r\n                    case 3: return 75;\r\n                    case 4: return 125;\r\n                    case 5: return 250;\r\n                    case 6: return 300;\r\n                    case 7: return 350;\r\n                    case 8: return 450;\r\n                    case 9: return 550;\r\n                    case 10: return 600;\r\n                    case 11: return 800;\r\n                    case 12: return 1000;\r\n                    case 13: return 1100;\r\n                    case 14: return 1250;\r\n                    case 15: return 1400;\r\n                    case 16: return 1600;\r\n                    case 17: return 2000;\r\n                    case 18: return 2100;\r\n                    case 19: return 2400;\r\n                    case 20: return 2800;\r\n                    default: return 0;\r\n                }\r\n            case 'medium':\r\n                switch (level) {\r\n                    case 1: return 50;\r\n                    case 2: return 100;\r\n                    case 3: return 150;\r\n                    case 4: return 250;\r\n                    case 5: return 500;\r\n                    case 6: return 600;\r\n                    case 7: return 750;\r\n                    case 8: return 900;\r\n                    case 9: return 1100;\r\n                    case 10: return 1200;\r\n                    case 11: return 1600;\r\n                    case 12: return 2000;\r\n                    case 13: return 2200;\r\n                    case 14: return 2500;\r\n                    case 15: return 2800;\r\n                    case 16: return 3200;\r\n                    case 17: return 3900;\r\n                    case 18: return 4200;\r\n                    case 19: return 4900;\r\n                    case 20: return 5700;\r\n                    default: return 0;\r\n                }\r\n            case 'hard':\r\n                switch (level) {\r\n                    case 1: return 75;\r\n                    case 2: return 150;\r\n                    case 3: return 225;\r\n                    case 4: return 375;\r\n                    case 5: return 750;\r\n                    case 6: return 900;\r\n                    case 7: return 1100;\r\n                    case 8: return 1400;\r\n                    case 9: return 1600;\r\n                    case 10: return 1900;\r\n                    case 11: return 2400;\r\n                    case 12: return 3000;\r\n                    case 13: return 3400;\r\n                    case 14: return 3800;\r\n                    case 15: return 4300;\r\n                    case 16: return 4800;\r\n                    case 17: return 5900;\r\n                    case 18: return 6300;\r\n                    case 19: return 7300;\r\n                    case 20: return 8500;\r\n                    default: return 0;\r\n                }\r\n            case 'deadly':\r\n                switch (level) {\r\n                    case 1: return 100;\r\n                    case 2: return 200;\r\n                    case 3: return 400;\r\n                    case 4: return 500;\r\n                    case 5: return 1100;\r\n                    case 6: return 1400;\r\n                    case 7: return 1700;\r\n                    case 8: return 2100;\r\n                    case 9: return 2400;\r\n                    case 10: return 2800;\r\n                    case 11: return 3600;\r\n                    case 12: return 4500;\r\n                    case 13: return 5100;\r\n                    case 14: return 5700;\r\n                    case 15: return 6400;\r\n                    case 16: return 7200;\r\n                    case 17: return 8800;\r\n                    case 18: return 9500;\r\n                    case 19: return 10900;\r\n                    case 20: return 12700;\r\n                    default: return 0;\r\n                }\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n\r\n    public static traitType(type: string): string {\r\n        switch (type) {\r\n            case 'trait':\r\n                return 'trait';\r\n            case 'action':\r\n                return 'action';\r\n            case 'legendary':\r\n                return 'legendary action';\r\n            case 'lair':\r\n                return 'lair action';\r\n            case 'regional':\r\n                return 'regional effect';\r\n            default:\r\n                return type;\r\n        }\r\n    }\r\n\r\n    public static nudgeChallenge(value: number, delta: number): number {\r\n        let result = 0;\r\n\r\n        switch (value) {\r\n            case 0:\r\n                if (delta === -1) {\r\n                    result = 0;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 0.125;\r\n                }\r\n                break;\r\n            case 0.125:\r\n                if (delta === -1) {\r\n                    result = 0;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 0.25;\r\n                }\r\n                break;\r\n            case 0.25:\r\n                if (delta === -1) {\r\n                    result = 0.125;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 0.5;\r\n                }\r\n                break;\r\n            case 0.5:\r\n                if (delta === -1) {\r\n                    result = 0.25;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 1;\r\n                }\r\n                break;\r\n            case 1:\r\n                if (delta === -1) {\r\n                    result = 0.5;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 2;\r\n                }\r\n                break;\r\n            default:\r\n                result = value + delta;\r\n                break;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public static conditionText(condition: Condition): string[] {\r\n        switch (condition.name) {\r\n            case 'blinded':\r\n                return [\r\n                    'a blinded creature can’t see and automatically fails any ability check that requires sight',\r\n                    'attack rolls against the creature have advantage, and the creature’s attack rolls have disadvantage'\r\n                ];\r\n            case 'charmed':\r\n                return [\r\n                    'a charmed creature can’t attack the charmer or target the charmer with harmful abilities or magical effects',\r\n                    'the charmer has advantage on any ability check to interact socially with the creature'\r\n                ];\r\n            case 'deafened':\r\n                return [\r\n                    'a deafened creature can’t hear and automatically fails any ability check that requires hearing.'\r\n                ];\r\n            case 'exhaustion': {\r\n                switch (condition.level) {\r\n                case 1:\r\n                    return [\r\n                        'disadvantage on ability checks'\r\n                    ];\r\n                case 2:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved'\r\n                    ];\r\n                case 3:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved',\r\n                        'disadvantage on attack rolls and saving throws'\r\n                    ];\r\n                case 4:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved',\r\n                        'disadvantage on attack rolls and saving throws',\r\n                        'hit point maximum halved'\r\n                    ];\r\n                case 5:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved',\r\n                        'disadvantage on attack rolls and saving throws',\r\n                        'hit point maximum halved',\r\n                        'speed reduced to 0'\r\n                    ];\r\n                case 6:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved',\r\n                        'disadvantage on attack rolls and saving throws',\r\n                        'hit point maximum halved',\r\n                        'speed reduced to 0',\r\n                        'death'\r\n                    ];\r\n                default:\r\n                    return [];\r\n                }\r\n            }\r\n            case 'frightened':\r\n                return [\r\n                    'a frightened creature has disadvantage on ability checks and attack rolls while the source of its fear is within line of sight',\r\n                    'the creature can’t willingly move closer to the source of its fear'\r\n                ];\r\n            case 'grappled':\r\n                return [\r\n                    'a grappled creature’s speed becomes 0, and it can’t benefit from any bonus to its speed',\r\n                    'the condition ends if the grappler is incapacitated',\r\n                    'the condition also ends if an effect removes the grappled creature from the reach of the grappler or grappling effect'\r\n                ];\r\n            case 'incapacitated':\r\n                return [\r\n                    'an incapacitated creature can’t take actions or reactions'\r\n                ];\r\n            case 'invisible':\r\n                return [\r\n                    'an invisible creature is impossible to see without the aid of magic or a special sense',\r\n                    'for the purpose of hiding, the creature is heavily obscured',\r\n                    'the creature’s location can be detected by any noise it makes or any tracks it leaves',\r\n                    'attack rolls against the creature have disadvantage, and the creature’s attack rolls have advantage'\r\n                ];\r\n            case 'paralyzed':\r\n                return [\r\n                    'a paralyzed creature is incapacitated (can’t take actions or reactions) and can’t move or speak',\r\n                    'the creature automatically fails strength and dexterity saving throws',\r\n                    'attack rolls against the creature have advantage',\r\n                    'any attack that hits the creature is a critical hit if the attacker is within 5 feet of the creature'\r\n                ];\r\n            case 'petrified':\r\n                return [\r\n                    /* tslint:disable-next-line:max-line-length */\r\n                    'a petrified creature is transformed, along with any nonmagical objects it is wearing or carrying, into a solid inanimate substance (usually stone)',\r\n                    'its weight increases by a factor of ten, and it ceases aging',\r\n                    'the creature is incapacitated (can’t take actions or reactions), can’t move or speak, and is unaware of its surroundings',\r\n                    'attack rolls against the creature have advantage',\r\n                    'the creature automatically fails strength and dexterity saving throws',\r\n                    'the creature has resistance to all damage',\r\n                    'the creature is immune to poison and disease, although a poison or disease already in its system is suspended, not neutralized'\r\n                ];\r\n            case 'poisoned':\r\n                return [\r\n                    'a poisoned creature has disadvantage on attack rolls and ability checks'\r\n                ];\r\n            case 'prone':\r\n                return [\r\n                    'a prone creature’s only movement option is to crawl, unless it stands up and thereby ends the condition',\r\n                    'the creature has disadvantage on attack rolls',\r\n                    /* tslint:disable-next-line:max-line-length */\r\n                    'an attack roll against the creature has advantage if the attacker is Within 5 feet of the creature; otherwise, the attack roll has disadvantage'\r\n                ];\r\n            case 'restrained':\r\n                return [\r\n                    'a restrained creature’s speed becomes 0, and it can’t benefit from any bonus to its speed',\r\n                    'attack rolls against the creature have advantage, and the creature’s attack rolls have disadvantage',\r\n                    'the creature has disadvantage on dexterity saving throws'\r\n                ];\r\n            case 'stunned':\r\n                return [\r\n                    'a stunned creature is incapacitated (can’t take actions or reactions), can’t move, and can speak only falteringly',\r\n                    'the creature automatically fails strength and dexterity saving throws',\r\n                    'attack rolls against the creature have advantage'\r\n                ];\r\n            case 'unconscious':\r\n                return [\r\n                    'an unconscious creature is incapacitated (can’t take actions or reactions), can’t move or speak, and is unaware of its surroundings',\r\n                    'the creature drops whatever its holding and falls prone',\r\n                    'the creature automatically fails strength and dexterity saving throws',\r\n                    'attack rolls against the creature have advantage',\r\n                    'any attack that hits the creature is a critical hit if the attacker is within 5 feet of the creature'\r\n                ];\r\n            case 'custom':\r\n                return [];\r\n            default:\r\n                return [];\r\n        }\r\n    }\r\n\r\n    public static conditionDurationText(condition: Condition, combat: Combat) {\r\n        if (condition.duration !== null) {\r\n            switch (condition.duration.type) {\r\n                case 'saves':\r\n                    const saveDuration = condition.duration as ConditionDurationSaves;\r\n                    let saveType = saveDuration.saveType.toString();\r\n                    if (saveType !== 'death') {\r\n                        saveType = saveType.toUpperCase();\r\n                    }\r\n                    const saves = saveDuration.count > 1 ? 'saves' : 'save';\r\n                    return 'until you make ' + saveDuration.count + ' ' + saveType + ' ' + saves + ' at dc ' + saveDuration.saveDC;\r\n                case 'combatant':\r\n                    const combatantDuration = condition.duration as ConditionDurationCombatant;\r\n                    const point = combatantDuration.point;\r\n                    const c = combat.combatants.find(cmb => cmb.id === combatantDuration.combatantID);\r\n                    const combatant = c ? (c.displayName || c.name || 'unnamed monster') + '\\'s' : 'someone\\'s';\r\n                    return 'until the ' + point + ' of ' + combatant + ' next turn';\r\n                case 'rounds':\r\n                    const roundsDuration = condition.duration as ConditionDurationRounds;\r\n                    const rounds = roundsDuration.count > 1 ? 'rounds' : 'round';\r\n                    return 'for ' + roundsDuration.count + ' ' + rounds;\r\n                default:\r\n                    return null;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public static getMonsterNames(encounter: Encounter | EncounterWave): { id: string, names: string[] }[] {\r\n        const monsterNames: any[] = [];\r\n        if (encounter) {\r\n            encounter.slots.forEach(slot => {\r\n                const names: any[] = [];\r\n                if (slot.count === 1) {\r\n                    names.push(slot.monsterName);\r\n                } else {\r\n                    for (let n = 0; n !== slot.count; ++n) {\r\n                        names.push(slot.monsterName + ' ' + (n + 1));\r\n                    }\r\n                }\r\n\r\n                monsterNames.push({\r\n                    id: slot.id,\r\n                    names: names\r\n                });\r\n            });\r\n        }\r\n\r\n        return monsterNames;\r\n    }\r\n}\r\n","import Utils from './utils';\r\n\r\nimport { Combat, CombatSetup, Notification } from '../models/combat';\r\nimport { Condition, ConditionDurationCombatant, ConditionDurationRounds, ConditionDurationSaves } from '../models/condition';\r\nimport { Encounter, EncounterSlot, EncounterWave } from '../models/encounter';\r\nimport { Map, MapFolio, MapItem } from '../models/map-folio';\r\nimport { Monster, MonsterGroup, Trait } from '../models/monster-group';\r\nimport { Party, PC } from '../models/party';\r\n\r\nexport default class Factory {\r\n\r\n    public static createParty(): Party {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            pcs: []\r\n        };\r\n    }\r\n\r\n    public static createPC(): PC {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'pc',\r\n            active: true,\r\n            player: '',\r\n            name: '',\r\n            race: '',\r\n            classes: '',\r\n            level: 1,\r\n            languages: 'Common',\r\n            passiveInsight: 10,\r\n            passiveInvestigation: 10,\r\n            passivePerception: 10,\r\n            initiative: 10,\r\n            url: ''\r\n        };\r\n    }\r\n\r\n    public static createMonsterGroup(): MonsterGroup {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            monsters: []\r\n        };\r\n    }\r\n\r\n    public static createMonster(): Monster {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'monster',\r\n            name: '',\r\n            size: 'medium',\r\n            category: 'humanoid',\r\n            tag: '',\r\n            alignment: '',\r\n            challenge: 1,\r\n            abilityScores: {\r\n                str: 10,\r\n                dex: 10,\r\n                con: 10,\r\n                int: 10,\r\n                wis: 10,\r\n                cha: 10\r\n            },\r\n            ac: 10,\r\n            hpMax: 4,\r\n            hpTemp: 0,\r\n            hitDice: 1,\r\n            damage: {\r\n                resist: '',\r\n                vulnerable: '',\r\n                immune: ''\r\n            },\r\n            savingThrows: '',\r\n            speed: '',\r\n            skills: '',\r\n            senses: '',\r\n            languages: '',\r\n            equipment: '',\r\n            traits: [],\r\n            conditionImmunities: ''\r\n        };\r\n    }\r\n\r\n    public static createTrait(): Trait {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            usage: '',\r\n            type: 'action',\r\n            text: '',\r\n            uses: 0\r\n        };\r\n    }\r\n\r\n    public static createEncounter(): Encounter {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            slots: [],\r\n            waves: []\r\n        };\r\n    }\r\n\r\n    public static createEncounterSlot(): EncounterSlot {\r\n        return {\r\n            id: Utils.guid(),\r\n            monsterGroupName: '',\r\n            monsterName: '',\r\n            count: 1\r\n        };\r\n    }\r\n\r\n    public static createEncounterWave(): EncounterWave {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            slots: []\r\n        };\r\n    }\r\n\r\n    public static createMapFolio(): MapFolio {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            maps: []\r\n        };\r\n    }\r\n\r\n    public static createMap(): Map {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            items: []\r\n        };\r\n    }\r\n\r\n    public static createMapItem(): MapItem {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'tile',\r\n            x: 0,\r\n            y: 0,\r\n            width: 4,\r\n            height: 4,\r\n            terrain: null\r\n        };\r\n    }\r\n\r\n    public static createCombatSetup(): CombatSetup {\r\n        return {\r\n            partyID: null,\r\n            encounterID: null,\r\n            waveID: null,\r\n            folioID: null,\r\n            mapID: null,\r\n            monsterNames: [],\r\n            encounterInitMode: 'group'\r\n        };\r\n    }\r\n\r\n    public static createCombat(): Combat {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            encounterID: null,\r\n            combatants: [],\r\n            map: null,\r\n            round: 1,\r\n            notifications: [],\r\n            issues: [],\r\n            timestamp: null\r\n        };\r\n    }\r\n\r\n    public static createNotification(): Notification {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'condition-save',\r\n            data: null,\r\n            combatant: null\r\n        };\r\n    }\r\n\r\n    public static createCondition(): Condition {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            level: 1,\r\n            text: null,\r\n            duration: null\r\n        };\r\n    }\r\n\r\n    public static createConditionDurationSaves(): ConditionDurationSaves {\r\n        return {\r\n            type: 'saves',\r\n            count: 1,\r\n            saveType: 'str',\r\n            saveDC: 10,\r\n            point: 'start'\r\n        };\r\n    }\r\n\r\n    public static createConditionDurationCombatant(): ConditionDurationCombatant {\r\n        return {\r\n            type: 'combatant',\r\n            point: 'start',\r\n            combatantID: null\r\n        };\r\n    }\r\n\r\n    public static createConditionDurationRounds(): ConditionDurationRounds {\r\n        return {\r\n            type: 'rounds',\r\n            count: 1\r\n        };\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    getHeading: () => (string | JSX.Element);\r\n    getContent: () => (string | JSX.Element);\r\n}\r\n\r\nexport default class InfoCard extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        getHeading: null,\r\n        getContent: null\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            let heading = null;\r\n            if (this.props.getHeading) {\r\n                heading = this.props.getHeading();\r\n            }\r\n\r\n            let content = null;\r\n            if (this.props.getContent) {\r\n                content = this.props.getContent();\r\n            }\r\n            if (!content) {\r\n                return null;\r\n            }\r\n\r\n            return (\r\n                <div className='card'>\r\n                    {heading}\r\n                    <div className='card-content'>\r\n                        {content}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport InfoCard from '../info-card';\r\n\r\nexport default class CombatManagerCard extends React.Component {\r\n    private getContent() {\r\n        return (\r\n            <div>\r\n                <div className='section'>here you can run a combat encounter by specifying a party and an encounter</div>\r\n                <div className='divider' />\r\n                <div className='section'>below you will see a list of encounters that you have paused</div>\r\n                <div className='section'>you can resume a paused combat by selecting it</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <InfoCard getContent={this.getContent}/>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport warning from '../../resources/images/warning.svg';\r\n\r\ninterface Props {\r\n    text: string;\r\n    callback: () => void;\r\n    details: string;\r\n    disabled: boolean;\r\n}\r\n\r\ninterface State {\r\n    pressed: boolean;\r\n}\r\n\r\nexport default class ConfirmButton extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        details: null,\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            pressed: false\r\n        };\r\n    }\r\n\r\n    private toggle() {\r\n        this.setState({\r\n            pressed: !this.state.pressed\r\n        });\r\n    }\r\n\r\n    private perform() {\r\n        this.toggle();\r\n        this.props.callback();\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let content = null;\r\n            if (this.state.pressed) {\r\n                content = (\r\n                    <div>\r\n                        <div className='title'>{this.props.text} - are you sure?</div>\r\n                        <img className='image' src={warning} alt='warning' />\r\n                        {this.props.details ? <div className='details'>{this.props.details}</div> : null}\r\n                        <div className='confirmation'>\r\n                            <div className='destructive' onClick={() => this.perform()}>yes</div>\r\n                            <div className='non-destructive' onClick={() => this.toggle()}>no</div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                content = (\r\n                    <div>\r\n                        <div className='title'>{this.props.text}</div>\r\n                        <img className='image' src={warning} alt='warning' />\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <button className={this.props.disabled ? 'disabled' : ''} onClick={() => this.toggle()}>\r\n                    {content}\r\n                </button>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport ellipsis from '../../resources/images/ellipsis.svg';\r\n\r\ninterface Props {\r\n    options: { id: string; text: string; disabled?: boolean }[];\r\n    select: (optionID: string) => void;\r\n    selectedID: string;\r\n    placeholder: string;\r\n    disabled: boolean;\r\n}\r\n\r\ninterface State {\r\n    open: boolean;\r\n}\r\n\r\nexport default class Dropdown extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        selectedID: null,\r\n        placeholder: 'select...',\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            open: false\r\n        };\r\n    }\r\n\r\n    private toggleOpen(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        this.setState({\r\n            open: !this.state.open\r\n        });\r\n    }\r\n\r\n    private select(optionID: string) {\r\n        this.setState({\r\n            open: false\r\n        });\r\n        this.props.select(optionID);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            if (this.props.options.length === 0) {\r\n                return null;\r\n            }\r\n\r\n            let style = this.props.disabled ? 'dropdown disabled' : 'dropdown';\r\n            const content = [];\r\n\r\n            let selectedText;\r\n            if (this.props.selectedID) {\r\n                const option: { id: string; text: string; disabled?: boolean } | undefined = this.props.options.find(o => o.id === this.props.selectedID);\r\n                if (option) {\r\n                    selectedText = option.text;\r\n                }\r\n            } else {\r\n                selectedText = /*this.props.text ||*/ this.props.placeholder;\r\n            }\r\n\r\n            content.push(\r\n                <div key='selection' className='dropdown-top' title={selectedText}>\r\n                    <div className='item-text'>{selectedText}</div>\r\n                    <img className='arrow' src={ellipsis} alt='arrow' />\r\n                </div>\r\n            );\r\n\r\n            if (this.state.open) {\r\n                style += ' open';\r\n\r\n                const items = this.props.options.map(option => {\r\n                    if (option.text === null) {\r\n                        return <div key={option.id} className='divider' />;\r\n                    } else {\r\n                        return (\r\n                            <DropdownOption\r\n                                key={option.id}\r\n                                option={option}\r\n                                selected={option.id === this.props.selectedID}\r\n                                select={optionID => this.select(optionID)}\r\n                            />\r\n                        );\r\n                    }\r\n                });\r\n\r\n                content.push(\r\n                    <div key='options' className='dropdown-options'>\r\n                        {items}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={style} onClick={e => this.toggleOpen(e)}>\r\n                    {content}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface DropdownOptionProps {\r\n    option: { id: string; text: string; disabled?: boolean };\r\n    selected: boolean;\r\n    select: (optionID: string) => void;\r\n}\r\n\r\nclass DropdownOption extends React.Component<DropdownOptionProps> {\r\n    private click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (!this.props.option.disabled) {\r\n            this.props.select(this.props.option.id);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'dropdown-option';\r\n            if (this.props.selected) {\r\n                style += ' selected';\r\n            }\r\n            if (this.props.option.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            return (\r\n                <div className={style} title={this.props.option.text} onClick={e => this.click(e)}>\r\n                    {this.props.option.text}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport arrow from '../../resources/images/down-arrow-black.svg';\r\n\r\ninterface Props {\r\n    text: string;\r\n    content: string | JSX.Element;\r\n    disabled: boolean;\r\n}\r\n\r\ninterface State {\r\n    expanded: boolean;\r\n}\r\n\r\nexport default class Expander extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            expanded: false\r\n        };\r\n    }\r\n\r\n    private toggle() {\r\n        this.setState({\r\n            expanded: !this.state.expanded\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = this.props.disabled ? 'expander disabled' : 'expander';\r\n            if (this.state.expanded) {\r\n                style += ' expanded';\r\n            }\r\n\r\n            let content = null;\r\n            if (this.state.expanded) {\r\n                content = (\r\n                    <div className='expander-content'>\r\n                        {this.props.content}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={style}>\r\n                    <div className='expander-header' onClick={() => this.toggle()}>\r\n                        <div className='expander-text'>{this.props.text}</div>\r\n                        <img className='expander-button' src={arrow} alt='arrow' />\r\n                    </div>\r\n                    {content}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport arrow from '../../resources/images/down-arrow-black.svg';\r\n\r\ninterface Props {\r\n    click: (dir: string, dir2: 'in' | 'out' | null) => void;\r\n    direction: 'out' | 'in' | 'both' | 'eight';\r\n    disabled: boolean;\r\n}\r\n\r\nexport default class Radial extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        direction: 'out',\r\n        disabled: false\r\n    };\r\n\r\n    private click(e: React.MouseEvent, dir: string, dir2: 'in' | 'out' | null = null) {\r\n        e.stopPropagation();\r\n        this.props.click(dir, dir2);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'radial ' + (this.props.direction || 'out');\r\n            if (this.props.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            const showOut = (this.props.direction === 'out') || (this.props.direction === 'both') || (this.props.direction === 'eight');\r\n            const showIn = (this.props.direction === 'in') || (this.props.direction === 'both');\r\n            const showDiag = (this.props.direction === 'eight');\r\n\r\n            return (\r\n                <div className={style}>\r\n                    <div className='empty' style={{ display: showDiag ? 'none' : 'inline-block' }} />\r\n                    <div className='btn diag' style={{ display: showDiag ? 'inline-block' : 'none' }}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(135deg)' }}\r\n                            alt='nw'\r\n                            onClick={e => this.click(e, 'NW')}\r\n                        />\r\n                    </div>\r\n                    <div className='btn'>\r\n                        <div>\r\n                            <img\r\n                                src={arrow}\r\n                                style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(180deg)' }}\r\n                                alt='n'\r\n                                onClick={e => this.click(e, 'N', 'out')}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <img\r\n                                src={arrow}\r\n                                style={{ display: showIn ? 'inline-block' : 'none' }}\r\n                                alt='n'\r\n                                onClick={e => this.click(e, 'N', 'in')}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className='empty' style={{ display: showDiag ? 'none' : 'inline-block' }} />\r\n                    <div className='btn diag' style={{ display: showDiag ? 'inline-block' : 'none' }}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(-135deg)' }}\r\n                            alt='ne'\r\n                            onClick={e => this.click(e, 'NE')}\r\n                        />\r\n                    </div>\r\n                    <div className='btn' style={{ padding: (showIn && showOut) ? '10px 0' : '0'}}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(90deg)' }}\r\n                            alt='w'\r\n                            onClick={e => this.click(e, 'W', 'out')}\r\n                        />\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showIn ? 'inline-block' : 'none', transform: 'rotate(-90deg)' }}\r\n                            alt='w'\r\n                            onClick={e => this.click(e, 'W', 'in')}\r\n                        />\r\n                    </div>\r\n                    <div className='empty' />\r\n                    <div className='btn' style={{ padding: (showIn && showOut) ? '10px 0' : '0'}}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showIn ? 'inline-block' : 'none', transform: 'rotate(90deg)' }}\r\n                            alt='e'\r\n                            onClick={e => this.click(e, 'E', 'in')}\r\n                        />\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(-90deg)' }}\r\n                            alt='e'\r\n                            onClick={e => this.click(e, 'E', 'out')}\r\n                        />\r\n                    </div>\r\n                    <div className='empty' style={{ display: showDiag ? 'none' : 'inline-block' }} />\r\n                    <div className='btn diag' style={{ display: showDiag ? 'inline-block' : 'none' }}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(45deg)' }}\r\n                            alt='sw'\r\n                            onClick={e => this.click(e, 'SW')}\r\n                        />\r\n                    </div>\r\n                    <div className='btn'>\r\n                        <div>\r\n                            <img\r\n                                src={arrow}\r\n                                style={{ display: showIn ? 'inline-block' : 'none', transform: 'rotate(180deg)' }}\r\n                                alt='s'\r\n                                onClick={e => this.click(e, 'S', 'in')}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <img\r\n                                src={arrow}\r\n                                style={{ display: showOut ? 'inline-block' : 'none' }}\r\n                                alt='s'\r\n                                onClick={e => this.click(e, 'S', 'out')}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className='empty' style={{ display: showDiag ? 'none' : 'inline-block' }} />\r\n                    <div className='btn diag' style={{ display: showDiag ? 'inline-block' : 'none' }}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(-45deg)' }}\r\n                            alt='se'\r\n                            onClick={e => this.click(e, 'SE')}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport minus from '../../resources/images/minus.svg';\r\nimport plus from '../../resources/images/plus.svg';\r\n\r\ninterface Props {\r\n    source: any;\r\n    name: string;\r\n    nudgeValue: (delta: number) => void;\r\n    label: string;\r\n    disabled: boolean;\r\n    factors: number[];\r\n    display: ((value: number) => string) | null;\r\n}\r\n\r\nexport default class Spin extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        label: null,\r\n        disabled: false,\r\n        factors: null,\r\n        display: null\r\n    };\r\n\r\n    private click(e: React.MouseEvent, delta: number) {\r\n        e.stopPropagation();\r\n        this.props.nudgeValue(delta);\r\n    }\r\n\r\n    private touchEnd(e: React.TouchEvent, delta: number) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        this.props.nudgeValue(delta);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'info-value';\r\n            let value = this.props.source[this.props.name];\r\n            if (value === 0) {\r\n                style += ' dimmed';\r\n            }\r\n\r\n            if (this.props.display) {\r\n                value = this.props.display(value);\r\n            }\r\n\r\n            const minusBtns: JSX.Element[] = [];\r\n            const plusBtns: JSX.Element[] = [];\r\n\r\n            if (this.props.factors) {\r\n                this.props.factors.forEach(factor => {\r\n                    minusBtns.push(\r\n                        <div\r\n                            key={'minus' + factor}\r\n                            className='spin-button factor'\r\n                            onTouchEnd={e => this.touchEnd(e, -1 * factor)}\r\n                            onClick={e => this.click(e, -1 * factor)}\r\n                        >\r\n                            {'-' + factor}\r\n                        </div>\r\n                    );\r\n\r\n                    plusBtns.push(\r\n                        <div\r\n                            key={'plus' + factor}\r\n                            className='spin-button factor'\r\n                            onTouchEnd={e => this.touchEnd(e, +1 * factor)}\r\n                            onClick={e => this.click(e, +1 * factor)}\r\n                        >\r\n                            {'+' + factor}\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                minusBtns.reverse();\r\n            } else {\r\n                minusBtns.push(\r\n                    <div key='minus1' className='spin-button' onTouchEnd={e => this.touchEnd(e, -1)} onClick={e => this.click(e, -1)}>\r\n                        <img className='image' src={minus} alt='minus' />\r\n                    </div>\r\n                );\r\n\r\n                plusBtns.push(\r\n                    <div key='plus1' className='spin-button' onTouchEnd={e => this.touchEnd(e, +1)} onClick={e => this.click(e, +1)}>\r\n                        <img className='image' src={plus} alt='plus' />\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            const infoWidth = 80 * (this.props.factors ? this.props.factors.length : 1);\r\n\r\n            return (\r\n                <div className={this.props.disabled ? 'spin disabled' : 'spin'}>\r\n                    <div className='minus'>\r\n                        {minusBtns}\r\n                    </div>\r\n                    <div className='info' style={{ width: 'calc(100% - ' + infoWidth + 'px)' }}>\r\n                        <div className='info-label'>{this.props.label}</div>\r\n                        <div className={style}>{value}</div>\r\n                    </div>\r\n                    <div className='plus'>\r\n                        {plusBtns}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Monster } from '../../models/monster-group';\r\n\r\nimport Spin from '../controls/spin';\r\n\r\ninterface Props {\r\n    combatant: Monster;\r\n    edit: boolean;\r\n    nudgeValue: (combatant: Monster, field: string, delta: number) => void;\r\n}\r\n\r\ninterface State {\r\n    showAbilityScores: boolean;\r\n}\r\n\r\nexport default class AbilityScorePanel extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        edit: null,\r\n        nudgeValue: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showAbilityScores: false\r\n        };\r\n    }\r\n\r\n    private toggleAbilityScores() {\r\n        this.setState({\r\n            showAbilityScores: !this.state.showAbilityScores\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let result = null;\r\n\r\n            if (this.props.edit) {\r\n                result = (\r\n                    <div>\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='str'\r\n                            label='strength'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.str', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='dex'\r\n                            label='dexterity'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.dex', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='con'\r\n                            label='constitution'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.con', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='int'\r\n                            label='intelligence'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.int', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='wis'\r\n                            label='wisdom'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.wis', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='cha'\r\n                            label='charisma'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.cha', delta)}\r\n                        />\r\n                    </div>\r\n                );\r\n            } else {\r\n                result = (\r\n                    <div className='ability-scores' onClick={() => this.toggleAbilityScores()}>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>str</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.str\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.str)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>dex</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.dex\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.dex)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>con</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.con\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.con)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>int</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.int\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.int)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>wis</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.wis\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.wis)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>cha</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.cha\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.cha)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return result;\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combat, Combatant } from '../../models/combat';\r\nimport { Condition } from '../../models/condition';\r\n\r\nimport Expander from '../controls/expander';\r\nimport Spin from '../controls/spin';\r\n\r\ninterface Props {\r\n    combatant: Combatant;\r\n    combat: Combat;\r\n    nudgeConditionValue: (condition: Condition, field: string, delta: number) => void;\r\n    addCondition: () => void;\r\n    editCondition: (condition: Condition) => void;\r\n    removeCondition: (conditionID: string) => void;\r\n}\r\n\r\nexport default class ConditionsPanel extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const conditions = [];\r\n            if (this.props.combatant.conditions) {\r\n                for (let n = 0; n !== this.props.combatant.conditions.length; ++n) {\r\n                    const c = this.props.combatant.conditions[n];\r\n                    conditions.push(\r\n                        <ConditionPanel\r\n                            key={n}\r\n                            condition={c}\r\n                            combat={this.props.combat}\r\n                            nudgeConditionValue={(condition, type, delta) => this.props.nudgeConditionValue(condition, type, delta)}\r\n                            editCondition={condition => this.props.editCondition(condition)}\r\n                            removeCondition={conditionID => this.props.removeCondition(conditionID)}\r\n                        />\r\n                    );\r\n                }\r\n            }\r\n\r\n            return (\r\n                <div className='section'>\r\n                    {conditions}\r\n                    <button onClick={() => this.props.addCondition()}>add a condition</button>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface ConditionPanelProps {\r\n    condition: Condition;\r\n    combat: Combat;\r\n    nudgeConditionValue: (condition: Condition, field: string, delta: number) => void;\r\n    editCondition: (condition: Condition) => void;\r\n    removeCondition: (conditionID: string) => void;\r\n}\r\n\r\nclass ConditionPanel extends React.Component<ConditionPanelProps> {\r\n    public render() {\r\n        try {\r\n            let name: string = this.props.condition.name || 'condition';\r\n            if (this.props.condition.name === 'exhaustion') {\r\n                name += ' (' + this.props.condition.level + ')';\r\n            }\r\n            if ((this.props.condition.name === 'custom') && (this.props.condition.text !== null)) {\r\n                name = this.props.condition.text;\r\n            }\r\n\r\n            if (this.props.condition.duration !== null) {\r\n                name += ' ' + Utils.conditionDurationText(this.props.condition, this.props.combat);\r\n            }\r\n\r\n            const description = [];\r\n            if (this.props.condition.name === 'exhaustion') {\r\n                description.push(\r\n                    <div key='level' className='section'>\r\n                        <Spin\r\n                            source={this.props.condition}\r\n                            name='level'\r\n                            label='level'\r\n                            nudgeValue={delta => this.props.nudgeConditionValue(this.props.condition, 'level', delta)}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n            const text = Utils.conditionText(this.props.condition);\r\n            for (let n = 0; n !== text.length; ++n) {\r\n                description.push(<div key={n} className='section'>{text[n]}</div>);\r\n            }\r\n\r\n            return (\r\n                <Expander\r\n                    text={name}\r\n                    content={(\r\n                        <div>\r\n                            {description}\r\n                            <div className='divider' />\r\n                            <button onClick={() => this.props.editCondition(this.props.condition)}>edit</button>\r\n                            <button onClick={() => this.props.removeCondition(this.props.condition.id)}>remove</button>\r\n                        </div>\r\n                    )}\r\n                />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Showdown from 'showdown';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combatant } from '../../models/combat';\r\nimport { Monster, Trait } from '../../models/monster-group';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport Expander from '../controls/expander';\r\n\r\nconst showdown = new Showdown.Converter();\r\n\r\ninterface Props {\r\n    combatant: Monster | (Combatant & Monster);\r\n    mode: 'view' | 'edit' | 'template' | 'combat';\r\n    addTrait: (traitType: 'trait' | 'action' | 'legendary' | 'lair' | 'regional') => void;\r\n    copyTrait: (trait: Trait) => void;\r\n    removeTrait: (trait: Trait) => void;\r\n    changeValue: (trait: Trait, field: string, value: any) => void;\r\n}\r\n\r\nexport default class TraitsPanel extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        mode: 'view',\r\n        addTrait: null,\r\n        copyTrait: null,\r\n        removeTrait: null,\r\n        changeValue: null\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            const traits = [];\r\n            const actions = [];\r\n            const legendaryActions = [];\r\n            const lairActions = [];\r\n            const regionalEffects = [];\r\n\r\n            for (let n = 0; n !== this.props.combatant.traits.length; ++n) {\r\n                const a = this.props.combatant.traits[n];\r\n\r\n                const item = (\r\n                    <TraitPanel\r\n                        key={a.id}\r\n                        trait={a}\r\n                        mode={this.props.mode}\r\n                        changeValue={(action, type, value) => this.props.changeValue(action, type, value)}\r\n                        removeTrait={action => this.props.removeTrait(action)}\r\n                        copyTrait={action => this.props.copyTrait(action)}\r\n                    />\r\n                );\r\n\r\n                switch (a.type) {\r\n                    case 'trait':\r\n                        traits.push(item);\r\n                        break;\r\n                    case 'action':\r\n                        actions.push(item);\r\n                        break;\r\n                    case 'legendary':\r\n                        legendaryActions.push(item);\r\n                        break;\r\n                    case 'lair':\r\n                        lairActions.push(item);\r\n                        break;\r\n                    case 'regional':\r\n                        regionalEffects.push(item);\r\n                        break;\r\n                    default:\r\n                        // Do nothing\r\n                        break;\r\n                }\r\n            }\r\n\r\n            if (this.props.mode === 'edit') {\r\n                traits.push(\r\n                    <button key='add' onClick={() => this.props.addTrait('trait')}>add a new trait</button>\r\n                );\r\n                actions.push(\r\n                    <button key='add' onClick={() => this.props.addTrait('action')}>add a new action</button>\r\n                );\r\n                legendaryActions.push(\r\n                    <button key='add' onClick={() => this.props.addTrait('legendary')}>add a new legendary action</button>\r\n                );\r\n                lairActions.push(\r\n                    <button key='add' onClick={() => this.props.addTrait('lair')}>add a new lair action</button>\r\n                );\r\n                regionalEffects.push(\r\n                    <button key='add' onClick={() => this.props.addTrait('regional')}>add a new regional effect</button>\r\n                );\r\n\r\n                return (\r\n                    <div className='row collapse'>\r\n                        <div className='columns small-4 medium-4 large-4 list-column'>\r\n                            <div className='section subheading'>traits</div>\r\n                            {traits}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 list-column'>\r\n                            <div className='section subheading'>actions</div>\r\n                            {actions}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 list-column'>\r\n                            <div className='section subheading'>legendary actions</div>\r\n                            {legendaryActions}\r\n                            <div className='section subheading'>lair actions</div>\r\n                            {lairActions}\r\n                            <div className='section subheading'>regional effects</div>\r\n                            {regionalEffects}\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div>\r\n                    <div style={{ display: traits.length > 0 ? '' : 'none' }}>\r\n                        <div className='section subheading'>traits</div>\r\n                        {traits}\r\n                    </div>\r\n                    <div style={{ display: actions.length > 0 ? '' : 'none' }}>\r\n                        <div className='section subheading'>actions</div>\r\n                        {actions}\r\n                    </div>\r\n                    <div style={{ display: legendaryActions.length > 0 ? '' : 'none' }}>\r\n                        <div className='section subheading'>legendary actions</div>\r\n                        {legendaryActions}\r\n                    </div>\r\n                    <div style={{ display: lairActions.length > 0 ? '' : 'none' }}>\r\n                        <div className='section subheading'>lair actions</div>\r\n                        {lairActions}\r\n                    </div>\r\n                    <div style={{ display: regionalEffects.length > 0 ? '' : 'none' }}>\r\n                        <div className='section subheading'>regional effects</div>\r\n                        {regionalEffects}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface TraitPanelProps {\r\n    trait: Trait;\r\n    mode: 'view' | 'edit' | 'template' | 'combat';\r\n    changeValue: (trait: Trait, field: string, value: any) => void;\r\n    copyTrait: (trait: Trait) => void;\r\n    removeTrait: (trait: Trait) => void;\r\n}\r\n\r\nclass TraitPanel extends React.Component<TraitPanelProps> {\r\n    public render() {\r\n        try {\r\n            let maxUses = 0;\r\n            let heading = this.props.trait.name || 'unnamed ' + Utils.traitType(this.props.trait.type);\r\n\r\n            if (this.props.trait.usage) {\r\n                let used = '';\r\n                if (this.props.trait.usage.toLowerCase().startsWith('recharge ')) {\r\n                    maxUses = 1;\r\n                    if (this.props.trait.uses > 0) {\r\n                        used = '; used';\r\n                    }\r\n                }\r\n                const found = this.props.trait.usage.toLowerCase().match(/(\\d+)\\/day/);\r\n                if (found) {\r\n                    maxUses = parseInt(found[1], 10);\r\n                    if (this.props.trait.uses > 0) {\r\n                        used = '; used ' + this.props.trait.uses;\r\n                    }\r\n                }\r\n                heading += ' *(' + this.props.trait.usage + used + ')*';\r\n            }\r\n            const markdown = '**' + heading + '** ' + this.props.trait.text;\r\n\r\n            switch (this.props.mode) {\r\n                case 'view':\r\n                    return (\r\n                        <div key={this.props.trait.id} className='section trait'>\r\n                            <div dangerouslySetInnerHTML={{ __html: showdown.makeHtml(markdown) }} />\r\n                        </div>\r\n                    );\r\n                case 'edit':\r\n                    const details = (\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='name'\r\n                                value={this.props.trait.name}\r\n                                onChange={event => this.props.changeValue(this.props.trait, 'name', event.target.value)}\r\n                            />\r\n                            <input\r\n                                type='text'\r\n                                placeholder='usage'\r\n                                value={this.props.trait.usage}\r\n                                onChange={event => this.props.changeValue(this.props.trait, 'usage', event.target.value)}\r\n                            />\r\n                            <textarea\r\n                                placeholder='details'\r\n                                value={this.props.trait.text}\r\n                                onChange={event => this.props.changeValue(this.props.trait, 'text', event.target.value)}\r\n                            />\r\n                            <div className='divider' />\r\n                            <ConfirmButton text='delete' callback={() => this.props.removeTrait(this.props.trait)} />\r\n                        </div>\r\n                    );\r\n\r\n                    return (\r\n                        <Expander\r\n                            text={this.props.trait.name || 'unnamed ' + Utils.traitType(this.props.trait.type)}\r\n                            content={details}\r\n                        />\r\n                    );\r\n                case 'template':\r\n                    return (\r\n                        <div key={this.props.trait.id} className='section trait'>\r\n                            <div dangerouslySetInnerHTML={{ __html: showdown.makeHtml(markdown) }} />\r\n                            <button onClick={() => this.props.copyTrait(this.props.trait)}>copy</button>\r\n                        </div>\r\n                    );\r\n                case 'combat':\r\n                    let style = '';\r\n                    let usage = null;\r\n                    if (maxUses > 0) {\r\n                        const isTapped = this.props.trait.uses >= maxUses;\r\n                        if (isTapped) {\r\n                            style = 'strikethrough';\r\n                            usage = <button onClick={() => this.props.changeValue(this.props.trait, 'uses', 0)}>recharge</button>;\r\n                        } else {\r\n                            usage = <button onClick={() => this.props.changeValue(this.props.trait, 'uses', this.props.trait.uses + 1)}>use</button>;\r\n                        }\r\n                    }\r\n                    return (\r\n                        <div key={this.props.trait.id} className='section trait'>\r\n                            <div className={style} dangerouslySetInnerHTML={{ __html: showdown.makeHtml(markdown) }} />\r\n                            {usage}\r\n                        </div>\r\n                    );\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combat, Combatant } from '../../models/combat';\r\nimport { Condition } from '../../models/condition';\r\nimport { Encounter, EncounterSlot, EncounterWave } from '../../models/encounter';\r\nimport { Monster, MonsterGroup, Trait } from '../../models/monster-group';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport Dropdown from '../controls/dropdown';\r\nimport Expander from '../controls/expander';\r\nimport Radial from '../controls/radial';\r\nimport Spin from '../controls/spin';\r\nimport AbilityScorePanel from '../panels/ability-score-panel';\r\nimport ConditionsPanel from '../panels/conditions-panel';\r\nimport TraitsPanel from '../panels/traits-panel';\r\nimport InfoCard from './info-card';\r\n\r\nimport arrow from '../../resources/images/down-arrow.svg';\r\n\r\ninterface Props {\r\n    combatant: Monster | (Monster & Combatant);\r\n    mode: string;\r\n    library: MonsterGroup[];\r\n    changeValue: (monster: any, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, delta: number) => void;\r\n    // Library\r\n    editMonster: (monster: Monster) => void;\r\n    removeMonster: (monster: Monster) => void;\r\n    cloneMonster: (monster: Monster, name: string) => void;\r\n    moveToGroup: (monster: Monster, group: string) => void;\r\n    copyTrait: (trait: Trait) => void;\r\n    // Encounter builder\r\n    encounter: Encounter;\r\n    slot: EncounterSlot;\r\n    addEncounterSlot: (monster: Monster, waveID: string | null) => void;\r\n    removeEncounterSlot: (slot: EncounterSlot) => void;\r\n    // Combat\r\n    combat: Combat;\r\n    makeCurrent: (combatant: Combatant) => void;\r\n    makeActive: (combatant: Combatant) => void;\r\n    makeDefeated: (combatant: Combatant) => void;\r\n    endTurn: (combatant: Combatant) => void;\r\n    mapAdd: (combatant: Combatant) => void;\r\n    mapMove: (combatant: Combatant, dir: string) => void;\r\n    mapRemove: (combatant: Combatant) => void;\r\n    removeCombatant: (combatant: Combatant) => void;\r\n    changeHP: (combatant: Combatant, hp: number, tempHP: number) => void;\r\n    addCondition: (combatant: Combatant) => void;\r\n    editCondition: (combatant: Combatant, condition: Condition) => void;\r\n    removeCondition: (combatant: Combatant, conditionID: string) => void;\r\n    nudgeConditionValue: (condition: Condition, field: string, delta: number) => void;\r\n}\r\n\r\ninterface State {\r\n    showDetails: boolean;\r\n    cloneName: string;\r\n    damageOrHealing: number;\r\n}\r\n\r\nexport default class MonsterCard extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        library: null,\r\n        changeValue: null,\r\n        nudgeValue: null,\r\n        editMonster: null,\r\n        removeMonster: null,\r\n        cloneMonster: null,\r\n        moveToGroup: null,\r\n        copyTrait: null,\r\n        encounter: null,\r\n        slot: null,\r\n        addEncounterSlot: null,\r\n        removeEncounterSlot: null,\r\n        combat: null,\r\n        makeCurrent: null,\r\n        makeActive: null,\r\n        makeDefeated: null,\r\n        endTurn: null,\r\n        mapAdd: null,\r\n        mapMove: null,\r\n        mapRemove: null,\r\n        removeCombatant: null,\r\n        changeHP: null,\r\n        addCondition: null,\r\n        editCondition: null,\r\n        removeCondition: null,\r\n        nudgeConditionValue: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showDetails: false,\r\n            cloneName: props.combatant.name + ' copy',\r\n            damageOrHealing: 0\r\n        };\r\n    }\r\n\r\n    private setCloneName(cloneName: string) {\r\n        this.setState({\r\n            cloneName: cloneName\r\n        });\r\n    }\r\n\r\n    private toggleDetails() {\r\n        this.setState({\r\n            showDetails: !this.state.showDetails\r\n        });\r\n    }\r\n\r\n    private setDamage(value: number) {\r\n        this.setState({\r\n            damageOrHealing: value\r\n        });\r\n    }\r\n\r\n    private nudgeDamage(delta: number) {\r\n        this.setState({\r\n            damageOrHealing: Math.max(this.state.damageOrHealing + delta, 0)\r\n        });\r\n    }\r\n\r\n    private heal() {\r\n        const combatant = this.props.combatant as Combatant;\r\n\r\n        let hp = (combatant.hp ? combatant.hp : 0) + this.state.damageOrHealing;\r\n        hp = Math.min(hp, this.props.combatant.hpMax);\r\n\r\n        this.setState({\r\n            damageOrHealing: 0\r\n        }, () => {\r\n            this.props.changeHP(combatant, hp, this.props.combatant.hpTemp);\r\n        });\r\n    }\r\n\r\n    private damage() {\r\n        const combatant = this.props.combatant as Combatant;\r\n\r\n        let hp = (combatant.hp ? combatant.hp : 0);\r\n        let temp = this.props.combatant.hpTemp;\r\n\r\n        let damage = this.state.damageOrHealing;\r\n\r\n        // Take damage off temp HP first\r\n        const val = Math.min(damage, temp);\r\n        damage -= val;\r\n        temp -= val;\r\n\r\n        // Take the rest off HP\r\n        hp -= damage;\r\n        hp = Math.max(hp, 0);\r\n\r\n        this.setState({\r\n            damageOrHealing: 0\r\n        }, () => {\r\n            this.props.changeHP(combatant, hp, temp);\r\n        });\r\n    }\r\n\r\n    private description() {\r\n        let sizeAndType = (this.props.combatant.size + ' ' + this.props.combatant.category).toLowerCase();\r\n        if (this.props.combatant.tag) {\r\n            sizeAndType += ' (' + this.props.combatant.tag.toLowerCase() + ')';\r\n        }\r\n        sizeAndType += ', ';\r\n\r\n        let align = '';\r\n        if (this.props.combatant.alignment) {\r\n            align = this.props.combatant.alignment.toLowerCase() + ', ';\r\n        }\r\n\r\n        const cr = 'cr ' + Utils.challenge(this.props.combatant.challenge);\r\n\r\n        return sizeAndType + align + cr;\r\n    }\r\n\r\n    private monsterIsInWave(wave: EncounterWave) {\r\n        return wave.slots.some(s => {\r\n            const group = this.props.library.find(g => g.monsters.includes(this.props.combatant));\r\n            return !!group && (s.monsterGroupName === group.name) && (s.monsterName === this.props.combatant.name);\r\n        });\r\n    }\r\n\r\n    private getHP() {\r\n        if (this.props.combatant.hitDice === 0) {\r\n            return this.props.combatant.hpMax;\r\n        }\r\n\r\n        const die = Utils.hitDieType(this.props.combatant.size);\r\n        const conMod = Utils.modifierValue(this.props.combatant.abilityScores.con) * this.props.combatant.hitDice;\r\n        let conModStr = '';\r\n        if (conMod > 0) {\r\n            conModStr = ' +' + conMod;\r\n        }\r\n        if (conMod < 0) {\r\n            conModStr = ' ' + conMod;\r\n        }\r\n        return this.props.combatant.hpMax + ' (' + this.props.combatant.hitDice + 'd' + die + conModStr + ')';\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const options = [];\r\n            if (this.props.mode.indexOf('no-buttons') === -1) {\r\n                if (this.props.mode.indexOf('view') !== -1) {\r\n                    if (this.props.mode.indexOf('editable') !== -1) {\r\n                        options.push(\r\n                            <button key='edit' onClick={() => this.props.editMonster(this.props.combatant)}>edit monster</button>\r\n                        );\r\n\r\n                        options.push(\r\n                            <Expander\r\n                                key='clone'\r\n                                text='clone monster'\r\n                                content={\r\n                                    <div>\r\n                                        <input\r\n                                            type='text'\r\n                                            placeholder='monster name'\r\n                                            value={this.state.cloneName}\r\n                                            onChange={event => this.setCloneName(event.target.value)}\r\n                                        />\r\n                                        <button onClick={() => this.props.cloneMonster(this.props.combatant, this.state.cloneName)}>create copy</button>\r\n                                    </div>\r\n                                }\r\n                            />\r\n                        );\r\n\r\n                        const groupOptions: { id: string, text: string }[] = [];\r\n                        this.props.library.forEach(group => {\r\n                            if (group.monsters.indexOf(this.props.combatant) === -1) {\r\n                                groupOptions.push({\r\n                                    id: group.id,\r\n                                    text: group.name\r\n                                });\r\n                            }\r\n                        });\r\n                        options.push(\r\n                            <Dropdown\r\n                                key='move'\r\n                                options={groupOptions}\r\n                                placeholder='move to group...'\r\n                                select={optionID => this.props.moveToGroup(this.props.combatant, optionID)}\r\n                            />\r\n                        );\r\n\r\n                        options.push(<ConfirmButton key='remove' text='delete monster' callback={() => this.props.removeMonster(this.props.combatant)} />);\r\n                    }\r\n                    if (this.props.mode.indexOf('encounter') !== -1) {\r\n                        if (this.props.slot) {\r\n                            // This card is in an encounter or a wave\r\n                            options.push(\r\n                                <button key='remove' onClick={() => this.props.removeEncounterSlot(this.props.slot)}>\r\n                                    remove from encounter\r\n                                </button>\r\n                            );\r\n                        } else {\r\n                            let canAdd = false;\r\n                            // This card is in the library list\r\n                            if (!this.monsterIsInWave(this.props.encounter)) {\r\n                                options.push(\r\n                                    <button key='add encounter' onClick={() => this.props.addEncounterSlot(this.props.combatant, null)}>\r\n                                        add to encounter\r\n                                    </button>\r\n                                );\r\n                                canAdd = true;\r\n                            }\r\n                            this.props.encounter.waves.forEach(wave => {\r\n                                if (!this.monsterIsInWave(wave)) {\r\n                                    options.push(\r\n                                        <button key={'add ' + wave.id} onClick={() => this.props.addEncounterSlot(this.props.combatant, wave.id)}>\r\n                                            add to {wave.name}\r\n                                        </button>\r\n                                    );\r\n                                    canAdd = true;\r\n                                }\r\n                            });\r\n                            // If we can't add it anywhere, don't show it\r\n                            if (!canAdd) {\r\n                                return (\r\n                                    <InfoCard\r\n                                        getHeading={() => {\r\n                                            return (\r\n                                                <div className='heading'>\r\n                                                    <div className='title'>{this.props.combatant.name}</div>\r\n                                                </div>\r\n                                            );\r\n                                        }}\r\n                                        getContent={() => {\r\n                                            return (\r\n                                                <div className='section centered'>\r\n                                                    <i>this monster is already part of this encounter</i>\r\n                                                </div>\r\n                                            );\r\n                                        }}\r\n                                    />\r\n                                );\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (this.props.mode.indexOf('combat') !== -1) {\r\n                    const combatant = this.props.combatant as Combatant;\r\n\r\n                    if (this.props.mode.indexOf('tactical') !== -1) {\r\n                        if (this.props.mode.indexOf('on-map') !== -1) {\r\n                            options.push(\r\n                                <div key='mapMove' className='section centered'>\r\n                                    <Radial\r\n                                        direction='eight'\r\n                                        click={dir => this.props.mapMove(combatant, dir)}\r\n                                    />\r\n                                </div>\r\n                            );\r\n                            options.push(\r\n                                <Spin\r\n                                    key='altitude'\r\n                                    source={this.props.combatant}\r\n                                    name='altitude'\r\n                                    label='altitude'\r\n                                    display={value => value + ' ft.'}\r\n                                    nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'altitude', delta * 5)}\r\n                                />\r\n                            );\r\n                            options.push(<button key='mapRemove' onClick={() => this.props.mapRemove(combatant)}>remove from map</button>);\r\n                        }\r\n                        if (this.props.mode.indexOf('off-map') !== -1) {\r\n                            options.push(<button key='mapAdd' onClick={() => this.props.mapAdd(combatant)}>add to map</button>);\r\n                        }\r\n                        options.push(<div key='tactical-div' className='divider' />);\r\n                    }\r\n                    if (combatant.pending && !combatant.active && !combatant.defeated) {\r\n                        options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                    }\r\n                    if (!combatant.pending && combatant.active && !combatant.defeated) {\r\n                        if (combatant.current) {\r\n                            options.push(<button key='endTurn' onClick={() => this.props.endTurn(combatant)}>end turn</button>);\r\n                            options.push(<button key='makeDefeated' onClick={() => this.props.makeDefeated(combatant)}>mark as defeated and end turn</button>);\r\n                        } else {\r\n                            options.push(<button key='makeCurrent' onClick={() => this.props.makeCurrent(combatant)}>start turn</button>);\r\n                            options.push(<button key='makeDefeated' onClick={() => this.props.makeDefeated(combatant)}>mark as defeated</button>);\r\n                            options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                        }\r\n                    }\r\n                    if (!combatant.pending && !combatant.active && combatant.defeated) {\r\n                        options.push(<button key='makeActive' onClick={() => this.props.makeActive(combatant)}>mark as active</button>);\r\n                        options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                    }\r\n                    options.push(\r\n                        <Expander\r\n                            key='rename'\r\n                            text='change name'\r\n                            content={(\r\n                                <div>\r\n                                    <input\r\n                                        type='text'\r\n                                        value={combatant.displayName}\r\n                                        onChange={event => this.props.changeValue(this.props.combatant, 'displayName', event.target.value)}\r\n                                    />\r\n                                </div>\r\n                            )}\r\n                        />\r\n                    );\r\n                    options.push(\r\n                        <Expander\r\n                            key='init'\r\n                            text='change initiative score'\r\n                            content={(\r\n                                <div>\r\n                                    <Spin\r\n                                        source={this.props.combatant}\r\n                                        name='initiative'\r\n                                        label='initiative'\r\n                                        nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'initiative', delta)}\r\n                                    />\r\n                                </div>\r\n                            )}\r\n                        />\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf('template') !== -1) {\r\n                    // None\r\n                }\r\n            }\r\n\r\n            let stats = null;\r\n            if (this.props.mode.indexOf('view') !== -1) {\r\n                let slotSection = null;\r\n                if (this.props.slot) {\r\n                    slotSection = (\r\n                        <div>\r\n                            <div className='divider' />\r\n                            <Spin\r\n                                source={this.props.slot}\r\n                                name='count'\r\n                                label='count'\r\n                                nudgeValue={delta => this.props.nudgeValue(this.props.slot, 'count', delta)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                let details = null;\r\n                if (this.state.showDetails) {\r\n                    details = (\r\n                        <div>\r\n                            <div className='divider' />\r\n                            <div className='section'>\r\n                                <b>ac</b> {this.props.combatant.ac}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.hpMax !== 0 ? '' : 'none' }}>\r\n                                <b>hp</b> {this.getHP()}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.speed !== '' ? '' : 'none' }}>\r\n                                <b>speed</b> {this.props.combatant.speed}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <AbilityScorePanel combatant={this.props.combatant} />\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.savingThrows !== '' ? '' : 'none' }}>\r\n                                <b>saving throws</b> {this.props.combatant.savingThrows}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.skills !== '' ? '' : 'none' }}>\r\n                                <b>skills</b> {this.props.combatant.skills}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.damage.resist !== '' ? '' : 'none' }}>\r\n                                <b>damage resistances</b> {this.props.combatant.damage.resist}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.damage.vulnerable !== '' ? '' : 'none' }}>\r\n                                <b>damage vulnerabilities</b> {this.props.combatant.damage.vulnerable}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.damage.immune !== '' ? '' : 'none' }}>\r\n                                <b>damage immunities</b> {this.props.combatant.damage.immune}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.conditionImmunities !== '' ? '' : 'none' }}>\r\n                                <b>condition immunities</b> {this.props.combatant.conditionImmunities}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.senses !== '' ? '' : 'none' }}>\r\n                                <b>senses</b> {this.props.combatant.senses}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.languages !== '' ? '' : 'none' }}>\r\n                                <b>languages</b> {this.props.combatant.languages}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.equipment !== '' ? '' : 'none' }}>\r\n                                <b>equipment</b> {this.props.combatant.equipment}\r\n                            </div>\r\n                            <div className='divider' />\r\n                            <TraitsPanel combatant={this.props.combatant} />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                stats = (\r\n                    <div className='stats'>\r\n                        <div className='section centered'>\r\n                            <i>{this.description()}</i>\r\n                        </div>\r\n                        {slotSection}\r\n                        {details}\r\n                    </div>\r\n                );\r\n            }\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                stats = (\r\n                    <div className='stats'>\r\n                        <div className='section centered'>\r\n                            <i>{this.description()}</i>\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <Spin\r\n                            source={this.props.combatant}\r\n                            name='hp'\r\n                            label='hit points'\r\n                            factors={[1, 10]}\r\n                            nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'hp', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant}\r\n                            name='hpTemp'\r\n                            label='temp hp'\r\n                            factors={[1, 10]}\r\n                            nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'hpTemp', delta)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <Spin\r\n                            source={this.state}\r\n                            name='damageOrHealing'\r\n                            factors={[1, 10]}\r\n                            nudgeValue={delta => this.nudgeDamage(delta)}\r\n                        />\r\n                        <div className={this.state.damageOrHealing > 0 ? '' : 'disabled'}>\r\n                            <button className='damage-btn' onClick={() => this.heal()}>heal</button>\r\n                            <button className='damage-btn' onClick={() => this.setDamage(0)}>reset</button>\r\n                            <button className='damage-btn' onClick={() => this.damage()}>damage</button>\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.damage.resist !== '' ? '' : 'none' }}>\r\n                            <b>damage resistances</b> {this.props.combatant.damage.resist}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.damage.vulnerable !== '' ? '' : 'none' }}>\r\n                            <b>damage vulnerabilities</b> {this.props.combatant.damage.vulnerable}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.damage.immune !== '' ? '' : 'none' }}>\r\n                            <b>damage immunities</b> {this.props.combatant.damage.immune}\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='section'>\r\n                            <AbilityScorePanel combatant={this.props.combatant} />\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.ac !== 0 ? '' : 'none' }}>\r\n                            <b>ac</b> {this.props.combatant.ac}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.savingThrows !== '' ? '' : 'none' }}>\r\n                            <b>saving throws</b> {this.props.combatant.savingThrows}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.skills !== '' ? '' : 'none' }}>\r\n                            <b>skills</b> {this.props.combatant.skills}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.speed !== '' ? '' : 'none' }}>\r\n                            <b>speed</b> {this.props.combatant.speed}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.senses !== '' ? '' : 'none' }}>\r\n                            <b>senses</b> {this.props.combatant.senses}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.languages !== '' ? '' : 'none' }}>\r\n                            <b>languages</b> {this.props.combatant.languages}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.equipment !== '' ? '' : 'none' }}>\r\n                            <b>equipment</b> {this.props.combatant.equipment}\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <TraitsPanel\r\n                            combatant={this.props.combatant}\r\n                            mode='combat'\r\n                            changeValue={(trait, field, value) => this.props.changeValue(trait, field, value)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <div className='section subheading'>\r\n                            conditions\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.conditionImmunities !== '' ? '' : 'none' }}>\r\n                            <b>condition immunities</b> {this.props.combatant.conditionImmunities}\r\n                        </div>\r\n                        <ConditionsPanel\r\n                            combatant={this.props.combatant as Combatant}\r\n                            combat={this.props.combat}\r\n                            addCondition={() => this.props.addCondition(this.props.combatant as Combatant)}\r\n                            editCondition={condition => this.props.editCondition(this.props.combatant as Combatant, condition)}\r\n                            removeCondition={conditionID => this.props.removeCondition(this.props.combatant as Combatant, conditionID)}\r\n                            nudgeConditionValue={(condition, type, delta) => this.props.nudgeConditionValue(condition, type, delta)}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n            if (this.props.mode.indexOf('template') !== -1) {\r\n                if (this.props.mode.indexOf('overview') !== -1) {\r\n                    stats = (\r\n                        <div>\r\n                            <div className='section centered'>\r\n                                <i>{this.description()}</i>\r\n                            </div>\r\n                            <div className='divider' />\r\n                            <div className='section'>\r\n                                <b>speed</b> {this.props.combatant.speed || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>senses</b> {this.props.combatant.senses || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>languages</b> {this.props.combatant.languages || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>equipment</b> {this.props.combatant.equipment || '-'}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf('abilities') !== -1) {\r\n                    stats = (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <AbilityScorePanel combatant={this.props.combatant} />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>saving throws</b> {this.props.combatant.savingThrows || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>skills</b> {this.props.combatant.skills || '-'}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf('cbt-stats') !== -1) {\r\n                    stats = (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <b>ac</b> {this.props.combatant.ac}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>hp</b> {this.getHP()}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>damage immunity</b> {this.props.combatant.damage.immune || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>damage resistance</b> {this.props.combatant.damage.resist || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>damage vulnerability</b> {this.props.combatant.damage.vulnerable || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>condition immunities</b> {this.props.combatant.conditionImmunities || '-'}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf('actions') !== -1) {\r\n                    stats = (\r\n                        <TraitsPanel\r\n                            combatant={this.props.combatant}\r\n                            mode='template'\r\n                            copyTrait={trait => this.props.copyTrait(trait)}\r\n                        />\r\n                    );\r\n                }\r\n            }\r\n\r\n            let toggle = null;\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                // Don't show toggle button for combatant\r\n            } else if (this.props.mode.indexOf('template') !== -1) {\r\n                // Don't show toggle button for template\r\n            } else {\r\n                const imageStyle = this.state.showDetails ? 'image rotate' : 'image';\r\n                toggle = (\r\n                    <img className={imageStyle} src={arrow} alt='arrow' onClick={() => this.toggleDetails()} />\r\n                );\r\n            }\r\n\r\n            const name = (this.props.combatant as Combatant ? (this.props.combatant as Combatant).displayName : null)\r\n                || this.props.combatant.name\r\n                || 'unnamed monster';\r\n\r\n            return (\r\n                <div className='card monster'>\r\n                    <div className='heading'>\r\n                        <div className='title'>{name}</div>\r\n                        {toggle}\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        {stats}\r\n                        <div style={{ display: options.length > 0 ? '' : 'none' }}>\r\n                            <div className='divider' />\r\n                            <div className='section'>{options}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Combatant } from '../../models/combat';\r\nimport { PC } from '../../models/party';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport Expander from '../controls/expander';\r\nimport Radial from '../controls/radial';\r\nimport Spin from '../controls/spin';\r\n\r\nimport arrow from '../../resources/images/down-arrow.svg';\r\n\r\ninterface Props {\r\n    combatant: PC | (PC & Combatant);\r\n    mode: string;\r\n    changeValue: (pc: PC, field: string, value: any) => void;\r\n    nudgeValue: (pc: PC, field: string, delta: number) => void;\r\n    removePC: (pc: PC) => void;\r\n    // Combat\r\n    makeCurrent: (combatant: Combatant) => void;\r\n    makeActive: (combatant: Combatant) => void;\r\n    makeDefeated: (combatant: Combatant) => void;\r\n    endTurn: (combatant: Combatant) => void;\r\n    mapAdd: (combatant: Combatant) => void;\r\n    mapMove: (combatant: Combatant, dir: string) => void;\r\n    mapRemove: (combatant: Combatant) => void;\r\n    removeCombatant: (combatant: Combatant) => void;\r\n}\r\n\r\ninterface State {\r\n    showDetails: boolean;\r\n}\r\n\r\nexport default class PCCard extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        removePC: null,\r\n        makeCurrent: null,\r\n        makeActive: null,\r\n        makeDefeated: null,\r\n        endTurn: null,\r\n        mapAdd: null,\r\n        mapMove: null,\r\n        mapRemove: null,\r\n        removeCombatant: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showDetails: false\r\n        };\r\n    }\r\n\r\n    private toggleDetails() {\r\n        this.setState({\r\n            showDetails: !this.state.showDetails\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const options = [];\r\n            if (this.props.mode.indexOf('edit') !== -1) {\r\n                if (this.props.combatant.active) {\r\n                    options.push(\r\n                        <button key='toggle-active' onClick={() => this.props.changeValue(this.props.combatant, 'active', false)}>\r\n                            mark inactive\r\n                        </button>\r\n                    );\r\n                } else {\r\n                    options.push(\r\n                        <button key='toggle-active' onClick={() => this.props.changeValue(this.props.combatant, 'active', true)}>\r\n                            mark active\r\n                        </button>\r\n                    );\r\n                }\r\n                options.push(<ConfirmButton key='remove' text='delete pc' callback={() => this.props.removePC(this.props.combatant)} />);\r\n            }\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                const combatant = this.props.combatant as Combatant;\r\n\r\n                if (this.props.mode.indexOf('tactical') !== -1) {\r\n                    if (this.props.mode.indexOf('on-map') !== -1) {\r\n                        options.push(\r\n                            <div key='mapMove' className='section centered'>\r\n                                <Radial\r\n                                    direction='eight'\r\n                                    click={dir => this.props.mapMove(combatant, dir)}\r\n                                />\r\n                            </div>\r\n                        );\r\n                        options.push(\r\n                            <Spin\r\n                                key='altitude'\r\n                                source={this.props.combatant}\r\n                                name='altitude'\r\n                                label='altitude'\r\n                                display={value => value + ' ft.'}\r\n                                nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'altitude', delta * 5)}\r\n                            />\r\n                        );\r\n                        options.push(<button key='mapRemove' onClick={() => this.props.mapRemove(combatant)}>remove from map</button>);\r\n                    }\r\n                    if (this.props.mode.indexOf('off-map') !== -1) {\r\n                        options.push(<button key='mapAdd' onClick={() => this.props.mapAdd(combatant)}>add to map</button>);\r\n                    }\r\n                    options.push(<div key='tactical-div' className='divider' />);\r\n                }\r\n                if (combatant.pending && !combatant.active && !combatant.defeated) {\r\n                    options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                }\r\n                if (!combatant.pending && combatant.active && !combatant.defeated) {\r\n                    if (combatant.current) {\r\n                        options.push(<button key='endTurn' onClick={() => this.props.endTurn(combatant)}>end turn</button>);\r\n                        options.push(<button key='makeDefeated' onClick={() => this.props.makeDefeated(combatant)}>mark as defeated and end turn</button>);\r\n                    } else {\r\n                        options.push(<button key='makeCurrent' onClick={() => this.props.makeCurrent(combatant)}>start turn</button>);\r\n                        options.push(<button key='makeDefeated' onClick={() => this.props.makeDefeated(combatant)}>mark as defeated</button>);\r\n                        options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                    }\r\n                    options.push(\r\n                        <Expander\r\n                            key='init'\r\n                            text='change initiative score'\r\n                            content={(\r\n                                <div>\r\n                                    <Spin\r\n                                        source={this.props.combatant}\r\n                                        name='initiative'\r\n                                        label='initiative'\r\n                                        nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'initiative', delta)}\r\n                                    />\r\n                                </div>\r\n                            )}\r\n                        />\r\n                    );\r\n                }\r\n                if (!combatant.pending && !combatant.active && combatant.defeated) {\r\n                    options.push(<button key='makeActive' onClick={() => this.props.makeActive(combatant)}>mark as active</button>);\r\n                    options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                }\r\n            }\r\n\r\n            const desc = (this.props.combatant.race || 'unknown race')\r\n                + ' ' + (this.props.combatant.classes || 'unknown class')\r\n                + ', level ' + this.props.combatant.level;\r\n\r\n            const commonStatBlock = (\r\n                <div className='stats'>\r\n                    <div className='section centered lowercase'>\r\n                        <i>{desc}</i>\r\n                        <div style={{ display: this.props.combatant.url ? '' : 'none' }}>\r\n                            <a href={this.props.combatant.url} target='_blank' rel='noopener noreferrer'>d&d beyond sheet</a>\r\n                        </div>\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section subheading'>languages</div>\r\n                    <div className='section'>\r\n                        {this.props.combatant.languages || '-'}\r\n                    </div>\r\n                    <div className='section subheading'>passive skills</div>\r\n                    <div className='section'>\r\n                        <div><b>insight</b> {this.props.combatant.passiveInsight}</div>\r\n                        <div><b>investigation</b> {this.props.combatant.passiveInvestigation}</div>\r\n                        <div><b>perception</b> {this.props.combatant.passivePerception}</div>\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            let stats = null;\r\n            if (this.props.mode.indexOf('edit') !== -1) {\r\n                if (this.state.showDetails) {\r\n                    stats = (\r\n                        <div className='edit'>\r\n                            <div className='section'>\r\n                                <div className='input-label' style={{ display: this.state.showDetails ? '' : 'none' }}>character name:</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.props.combatant.name}\r\n                                    onChange={event => this.props.changeValue(this.props.combatant, 'name', event.target.value)}\r\n                                />\r\n                                <div className='input-label' style={{ display: this.state.showDetails ? '' : 'none' }}>player name:</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.props.combatant.player}\r\n                                    onChange={event => this.props.changeValue(this.props.combatant, 'player', event.target.value)}\r\n                                />\r\n                                <div className='input-label'>race:</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.props.combatant.race}\r\n                                    onChange={event => this.props.changeValue(this.props.combatant, 'race', event.target.value)}\r\n                                />\r\n                                <div className='input-label'>class:</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.props.combatant.classes}\r\n                                    onChange={event => this.props.changeValue(this.props.combatant, 'classes', event.target.value)}\r\n                                />\r\n                                <div className='input-label'>level:</div>\r\n                                <Spin\r\n                                    source={this.props.combatant}\r\n                                    name='level'\r\n                                    nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'level', delta)}\r\n                                />\r\n                                <div className='input-label'>languages:</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.props.combatant.languages}\r\n                                    onChange={event => this.props.changeValue(this.props.combatant, 'languages', event.target.value)}\r\n                                />\r\n                                <div className='input-label'>d&d beyond link:</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.props.combatant.url}\r\n                                    onChange={event => this.props.changeValue(this.props.combatant, 'url', event.target.value)}\r\n                                />\r\n                            </div>\r\n                            <div className='divider' />\r\n                            <div className='section subheading'>passive skills</div>\r\n                            <Spin\r\n                                source={this.props.combatant}\r\n                                name='passiveInsight'\r\n                                label='insight'\r\n                                nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'passiveInsight', delta)}\r\n                            />\r\n                            <Spin\r\n                                source={this.props.combatant}\r\n                                name='passiveInvestigation'\r\n                                label='investigation'\r\n                                nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'passiveInvestigation', delta)}\r\n                            />\r\n                            <Spin\r\n                                source={this.props.combatant}\r\n                                name='passivePerception'\r\n                                label='perception'\r\n                                nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'passivePerception', delta)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                } else {\r\n                    stats = commonStatBlock;\r\n                }\r\n            }\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                stats = commonStatBlock;\r\n            }\r\n\r\n            let toggle = null;\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                // Don't show toggle button for combatant\r\n            } else {\r\n                const imageStyle = this.state.showDetails ? 'image rotate' : 'image';\r\n                toggle = <img className={imageStyle} src={arrow} alt='arrow' onClick={() => this.toggleDetails()} />;\r\n            }\r\n\r\n            const name = (this.props.combatant as Combatant ? (this.props.combatant as Combatant).displayName : null)\r\n                || this.props.combatant.name\r\n                || 'unnamed pc';\r\n\r\n            return (\r\n                <div className='card pc'>\r\n                    <div className='heading'>\r\n                        <div className='title'>{name}</div>\r\n                        {toggle}\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        {stats}\r\n                        <div style={{ display: options.length > 0 ? '' : 'none' }}>\r\n                            <div className='divider' />\r\n                            <div className='section'>\r\n                                {options}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Combatant } from '../../models/combat';\r\nimport { Monster } from '../../models/monster-group';\r\n\r\ninterface Props {\r\n    combatant: Combatant & Monster;\r\n}\r\n\r\nexport default class HitPointGauge extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const hpCurrent = this.props.combatant.hp || 0;\r\n            const hpMax = this.props.combatant.hpMax + this.props.combatant.hpTemp;\r\n            const hpBloodied = this.props.combatant.hpMax / 2;\r\n            const hpWidth = 100 * Math.max(hpCurrent, 0) / hpMax;\r\n\r\n            let style = '';\r\n            if (hpCurrent >= this.props.combatant.hpMax) {\r\n                style = 'bar unhurt';\r\n            } else if (hpCurrent <= hpBloodied) {\r\n                style = 'bar bloodied';\r\n            } else {\r\n                style = 'bar injured';\r\n            }\r\n\r\n            let hpTempBar = null;\r\n            if (this.props.combatant.hpTemp > 0) {\r\n                const hpTempWidth = 100 * Math.max(this.props.combatant.hpTemp, 0) / hpMax;\r\n                hpTempBar = <div className='bar temp' style={{ width: hpTempWidth + '%' }} />;\r\n            }\r\n\r\n            return (\r\n                <div className='hp-gauge'>\r\n                    <div className={style} style={{ width: hpWidth + '%' }} />\r\n                    {hpTempBar}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Combatant } from '../../models/combat';\r\nimport { Map, MapItem } from '../../models/map-folio';\r\nimport { Monster } from '../../models/monster-group';\r\nimport { PC } from '../../models/party';\r\n\r\nimport HitPointGauge from './hit-point-gauge';\r\n\r\ninterface Props {\r\n    map: Map;\r\n    mode: 'edit' | 'thumbnail' | 'combat';\r\n    combatants: ((Combatant & PC) | (Combatant & Monster))[];\r\n    showOverlay: boolean;\r\n    selectedItemID: string;\r\n    setSelectedItemID: (itemID: string | null) => void;\r\n    addMapTile: (x: number, y: number) => void;\r\n    gridSquareClicked: (x: number, y: number) => void;\r\n}\r\n\r\ninterface MapDimensions {\r\n    minX: number;\r\n    maxX: number;\r\n    minY: number;\r\n    maxY: number;\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\ninterface StyleData {\r\n    left: string;\r\n    top: string;\r\n    width: string;\r\n    height: string;\r\n}\r\n\r\nexport default class MapPanel extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        combatants: null,\r\n        showOverlay: false,\r\n        selectedItemID: null,\r\n        setSelectedItemID: null,\r\n        addMapTile: null,\r\n        gridSquareClicked: null\r\n    };\r\n\r\n    private getMapDimensions(border: number): MapDimensions | null {\r\n        let dimensions: MapDimensions | null = null;\r\n\r\n        this.props.map.items.filter(i => {\r\n            if (this.props.mode === 'edit') {\r\n                return i.type === 'tile';\r\n            }\r\n            return true;\r\n        }).forEach(i => {\r\n            if (!dimensions) {\r\n                dimensions = {\r\n                    minX: i.x,\r\n                    maxX: i.x + i.width - 1,\r\n                    minY: i.y,\r\n                    maxY: i.y + i.height - 1,\r\n                    width: 0,\r\n                    height: 0\r\n                };\r\n            } else {\r\n                dimensions.minX = Math.min(dimensions.minX, i.x);\r\n                dimensions.maxX = Math.max(dimensions.maxX, i.x + i.width - 1);\r\n                dimensions.minY = Math.min(dimensions.minY, i.y);\r\n                dimensions.maxY = Math.max(dimensions.maxY, i.y + i.height - 1);\r\n            }\r\n        });\r\n\r\n        if (!dimensions) {\r\n            // The map is blank\r\n            if (this.props.mode === 'thumbnail') {\r\n                return null;\r\n            }\r\n\r\n            dimensions = {\r\n                minX: 0,\r\n                maxX: 0,\r\n                minY: 0,\r\n                maxY: 0,\r\n                width: 0,\r\n                height: 0\r\n            };\r\n        }\r\n\r\n        // Apply the border\r\n        dimensions.minX -= border;\r\n        dimensions.maxX += border;\r\n        dimensions.minY -= border;\r\n        dimensions.maxY += border;\r\n\r\n        // Set width and height\r\n        dimensions.width = 1 + dimensions.maxX - dimensions.minX;\r\n        dimensions.height = 1 + dimensions.maxY - dimensions.minY;\r\n\r\n        return dimensions;\r\n    }\r\n\r\n    private getSideLength(): number {\r\n        switch (this.props.mode) {\r\n            case 'thumbnail':\r\n                return 5;\r\n            case 'edit':\r\n            case 'combat':\r\n                return 25;\r\n            default:\r\n                return 5;\r\n        }\r\n    }\r\n\r\n    private getStyle(x: number, y: number, width: number, height: number, mapDimensions: MapDimensions): StyleData {\r\n        const sideLength = this.getSideLength();\r\n\r\n        return {\r\n            left: 'calc(' + sideLength + 'px * ' + (x - mapDimensions.minX) + ')',\r\n            top: 'calc(' + sideLength + 'px * ' + (y - mapDimensions.minY) + ')',\r\n            width: 'calc((' + sideLength + 'px * ' + width + ') + 1px)',\r\n            height: 'calc((' + sideLength + 'px * ' + height + ') + 1px)'\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const border = (this.props.mode === 'edit') ? 2 : 0;\r\n            const mapDimensions = this.getMapDimensions(border);\r\n            if (!mapDimensions) {\r\n                return (\r\n                    <div>(blank map)</div>\r\n                );\r\n            }\r\n\r\n            // Draw the grid squares\r\n            const grid = [];\r\n            if (this.props.mode === 'edit') {\r\n                for (let y = mapDimensions.minY; y !== mapDimensions.maxY + 1; ++y) {\r\n                    for (let x = mapDimensions.minX; x !== mapDimensions.maxX + 1; ++x) {\r\n                        const gridStyle = this.getStyle(x, y, 1, 1, mapDimensions);\r\n                        grid.push(\r\n                            <GridSquare\r\n                                key={x + ',' + y}\r\n                                x={x}\r\n                                y={y}\r\n                                style={gridStyle}\r\n                                onClick={() => this.props.setSelectedItemID(null)}\r\n                                onDoubleClick={(posX, posY) => this.props.addMapTile(posX, posY)}\r\n                            />\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Draw the map tiles\r\n            const tiles = this.props.map.items\r\n                .filter(i => i.type === 'tile')\r\n                .map(i => {\r\n                    const tileStyle = this.getStyle(i.x, i.y, i.width, i.height, mapDimensions as MapDimensions);\r\n                    return (\r\n                        <MapTile\r\n                            key={i.id}\r\n                            tile={i}\r\n                            style={tileStyle}\r\n                            selectable={this.props.mode === 'edit'}\r\n                            selected={this.props.selectedItemID === i.id}\r\n                            thumbnail={this.props.mode === 'thumbnail'}\r\n                            select={id => this.props.mode === 'edit' ? this.props.setSelectedItemID(id) : null}\r\n                        />\r\n                    );\r\n                });\r\n\r\n            // Draw the tokens\r\n            let tokens: JSX.Element[] = [];\r\n            if (this.props.mode !== 'edit') {\r\n                tokens = this.props.map.items\r\n                    .filter(i => (i.type === 'monster') || (i.type === 'pc'))\r\n                    .map(i => {\r\n                        const tokenStyle = this.getStyle(i.x, i.y, i.width, i.height, mapDimensions as MapDimensions);\r\n                        const combatant = this.props.combatants.find(c => c.id === i.id);\r\n                        if (combatant) {\r\n                            return (\r\n                                <MapToken\r\n                                    key={i.id}\r\n                                    token={i}\r\n                                    combatant={combatant}\r\n                                    style={tokenStyle}\r\n                                    simple={this.props.mode === 'thumbnail'}\r\n                                    selectable={this.props.mode === 'combat'}\r\n                                    selected={this.props.selectedItemID ===  i.id}\r\n                                    select={id => this.props.setSelectedItemID(id)}\r\n                                />\r\n                            );\r\n                        }\r\n\r\n                        return null;\r\n                    })\r\n                    .filter(mt => mt !== null) as JSX.Element[];\r\n            }\r\n\r\n            // Draw the drag overlay\r\n            const dragOverlay = [];\r\n            if (this.props.showOverlay) {\r\n                for (let yOver = mapDimensions.minY; yOver !== mapDimensions.maxY + 1; ++yOver) {\r\n                    for (let xOver = mapDimensions.minX; xOver !== mapDimensions.maxX + 1; ++xOver) {\r\n                        const overlayStyle = this.getStyle(xOver, yOver, 1, 1, mapDimensions);\r\n                        dragOverlay.push(\r\n                            <GridSquare\r\n                                key={xOver + ',' + yOver}\r\n                                x={xOver}\r\n                                y={yOver}\r\n                                style={overlayStyle}\r\n                                overlay={true}\r\n                                onClick={(posX, posY) => this.props.gridSquareClicked(posX, posY)}\r\n                            />\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n\r\n            const style = 'map-panel ' + this.props.mode;\r\n            return (\r\n                <div className={style} onClick={() => this.props.setSelectedItemID(null)}>\r\n                    <div className='grid' style={{ height: ((this.getSideLength() * mapDimensions.height) + 1) + 'px' }}>\r\n                        {grid}\r\n                        {tiles}\r\n                        {tokens}\r\n                        {dragOverlay}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface GridSquareProps {\r\n    x: number;\r\n    y: number;\r\n    style: StyleData;\r\n    overlay: boolean;\r\n    onClick: (x: number, y: number) => void;\r\n    onDoubleClick: (x: number, y: number) => void;\r\n}\r\n\r\nclass GridSquare extends React.Component<GridSquareProps> {\r\n    public static defaultProps = {\r\n        overlay: false,\r\n        onDoubleClick: null\r\n    };\r\n\r\n    private click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (this.props.onClick) {\r\n            this.props.onClick(this.props.x, this.props.y);\r\n        }\r\n    }\r\n\r\n    private doubleClick(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (this.props.onDoubleClick) {\r\n            this.props.onDoubleClick(this.props.x, this.props.y);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'grid-square';\r\n        if (this.props.overlay) {\r\n            style += ' grid-overlay';\r\n        }\r\n\r\n        return (\r\n            <div\r\n                className={style}\r\n                style={this.props.style}\r\n                onClick={e => this.click(e)}\r\n                onDoubleClick={e => this.doubleClick(e)}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\ninterface MapTileProps {\r\n    tile: MapItem;\r\n    style: StyleData;\r\n    thumbnail: boolean;\r\n    selectable: boolean;\r\n    selected: boolean;\r\n    select: (tileID: string) => void;\r\n}\r\n\r\nclass MapTile extends React.Component<MapTileProps> {\r\n    private select(e: React.MouseEvent) {\r\n        if (this.props.selectable) {\r\n            e.stopPropagation();\r\n            this.props.select(this.props.tile.id);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'tile ' + this.props.tile.terrain;\r\n        if (this.props.selected) {\r\n            style += ' selected';\r\n        }\r\n        if (this.props.thumbnail) {\r\n            style += ' thumbnail';\r\n        }\r\n\r\n        return (\r\n            <div\r\n                className={style}\r\n                style={this.props.style}\r\n                onClick={e => this.select(e)}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\ninterface MapTokenProps {\r\n    token: MapItem;\r\n    combatant: (Combatant & PC) | (Combatant & Monster);\r\n    style: StyleData;\r\n    simple: boolean;\r\n    selectable: boolean;\r\n    selected: boolean;\r\n    select: (tokenID: string) => void;\r\n}\r\n\r\nclass MapToken extends React.Component<MapTokenProps> {\r\n    private select(e: React.MouseEvent) {\r\n        if (this.props.selectable) {\r\n            e.stopPropagation();\r\n            this.props.select(this.props.token.id);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'token ' + this.props.token.type;\r\n        if (this.props.selected) {\r\n            style += ' selected';\r\n        }\r\n        if (this.props.combatant.current) {\r\n            style += ' current';\r\n        }\r\n\r\n        let initials = null;\r\n        let hpGauge = null;\r\n        let altitudeBadge = null;\r\n        let conditionsBadge = null;\r\n        if (!this.props.simple) {\r\n            const name = this.props.combatant.displayName || this.props.combatant.name;\r\n            initials = (\r\n                <div className='initials'>{name.split(' ').map(s => s[0])}</div>\r\n            );\r\n\r\n            if (this.props.combatant.type === 'monster') {\r\n                hpGauge = (\r\n                    <HitPointGauge combatant={this.props.combatant as Combatant & Monster} />\r\n                );\r\n            }\r\n\r\n            if (this.props.combatant.altitude > 0) {\r\n                altitudeBadge = (\r\n                    <div className='badge altitude'>&#9206;</div>\r\n                );\r\n            }\r\n\r\n            if (this.props.combatant.altitude < 0) {\r\n                altitudeBadge = (\r\n                    <div className='badge altitude'>&#9207;</div>\r\n                );\r\n            }\r\n\r\n            if ((this.props.combatant.conditions) && (this.props.combatant.conditions.length > 0)) {\r\n                conditionsBadge = (\r\n                    <div className='badge'>&#9670;</div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div\r\n                title={this.props.combatant.displayName || this.props.combatant.name}\r\n                className={style}\r\n                style={this.props.style}\r\n                onClick={e => this.select(e)}\r\n            >\r\n                {initials}\r\n                {hpGauge}\r\n                {altitudeBadge}\r\n                {conditionsBadge}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Combat } from '../../models/combat';\r\n\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    combat: Combat;\r\n    selected: boolean;\r\n    setSelection: (combat: Combat) => void;\r\n}\r\n\r\nexport default class CombatListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            let map = null;\r\n            if (this.props.combat.map) {\r\n                map = (\r\n                    <MapPanel\r\n                        map={this.props.combat.map}\r\n                        mode='thumbnail'\r\n                        combatants={this.props.combat.combatants}\r\n                    />\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.combat)}>\r\n                    <div className='heading'>{this.props.combat.name || 'unnamed combat'}</div>\r\n                    <div className='text'>paused at {this.props.combat.timestamp}</div>\r\n                    {map}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport close from '../../resources/images/close-black.svg';\r\nimport arrow from '../../resources/images/down-arrow-black.svg';\r\n\r\ninterface Props {\r\n    content: any[];\r\n    heading: string;\r\n    hidden: boolean;\r\n    showClose: boolean;\r\n    showToggle: boolean;\r\n    close: () => void;\r\n}\r\n\r\ninterface State {\r\n    showCards: boolean;\r\n}\r\n\r\nexport default class CardGroup extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        heading: null,\r\n        hidden: false,\r\n        showClose: false,\r\n        showToggle: false,\r\n        close: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showCards: true\r\n        };\r\n    }\r\n\r\n    private toggleCards() {\r\n        this.setState({\r\n            showCards: !this.state.showCards\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            if (this.props.hidden) {\r\n                return null;\r\n            }\r\n\r\n            let heading = null;\r\n            if (this.props.heading) {\r\n                let closeBtn = null;\r\n                if (this.props.showClose) {\r\n                    closeBtn = (\r\n                        <img className='image' src={close} alt='close' onClick={() => this.props.close()} />\r\n                    );\r\n                }\r\n\r\n                let toggle = null;\r\n                if (this.props.showToggle) {\r\n                    const style = this.state.showCards ? 'image rotate' : 'image';\r\n                    toggle = (\r\n                        <img className={style} src={arrow} alt='arrow' onClick={() => this.toggleCards()} />\r\n                    );\r\n                }\r\n\r\n                heading = (\r\n                    <div className='heading'>\r\n                        <div className='title'>{this.props.heading}</div>\r\n                        {toggle}\r\n                        {closeBtn}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            let cards = [];\r\n            if ((this.props.content.length > 0) && this.state.showCards) {\r\n                cards = this.props.content;\r\n            }\r\n\r\n            return (\r\n                <div className='card-group'>\r\n                    {heading}\r\n                    <div className='row small-up-1 medium-up-2 large-up-4 collapse'>\r\n                        {cards}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combat, Combatant, Notification } from '../../models/combat';\r\nimport { Condition, ConditionDurationSaves } from '../../models/condition';\r\nimport { Monster, Trait } from '../../models/monster-group';\r\nimport { PC } from '../../models/party';\r\n\r\nimport InfoCard from '../cards/info-card';\r\nimport CombatManagerCard from '../cards/information/combat-manager-card';\r\nimport MonsterCard from '../cards/monster-card';\r\nimport PCCard from '../cards/pc-card';\r\nimport Spin from '../controls/spin';\r\nimport CombatListItem from '../list-items/combat-list-item';\r\nimport CardGroup from '../panels/card-group';\r\nimport HitPointGauge from '../panels/hit-point-gauge';\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    combats: Combat[];\r\n    combat: Combat | null;\r\n    showHelp: boolean;\r\n    createCombat: () => void;\r\n    resumeEncounter: (combat: Combat) => void;\r\n    close: (notification: Notification, removeCondition: boolean) => void;\r\n    mapAdd: (combatant: (Combatant & PC) | (Combatant & Monster), x: number, y: number) => void;\r\n    makeCurrent: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    makeActive: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    makeDefeated: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    removeCombatant: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    addCondition: (combatant: Combatant & Monster) => void;\r\n    editCondition: (combatant: Combatant & Monster, condition: Condition) => void;\r\n    removeCondition: (combatant: Combatant & Monster, conditionID: string) => void;\r\n    mapMove: (combatant: (Combatant & PC) | (Combatant & Monster), dir: string) => void;\r\n    mapRemove: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    endTurn: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    changeHP: (combatant: Combatant & Monster, hp: number, temp: number) => void;\r\n    changeValue: (source: {}, type: string, value: any) => void;\r\n    nudgeValue: (source: {}, type: string, delta: number) => void;\r\n}\r\n\r\ninterface State {\r\n    selectedTokenID: string | null;\r\n    addingToMapID: string | null;\r\n}\r\n\r\nexport default class CombatManagerScreen extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            selectedTokenID: null,  // The ID of the combatant that's selected\r\n            addingToMapID: null     // The ID of the combatant we're adding to the map\r\n        };\r\n    }\r\n\r\n    private setSelectedTokenID(id: string | null) {\r\n        this.setState({\r\n            selectedTokenID: id\r\n        });\r\n    }\r\n\r\n    private setAddingToMapID(id: string | null) {\r\n        this.setState({\r\n            addingToMapID: id\r\n        });\r\n    }\r\n\r\n    private createCard(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        let mode = 'combat';\r\n        if (this.props.combat && this.props.combat.map) {\r\n            mode += ' tactical';\r\n            const onMap = this.props.combat.map.items.find(i => i.id === combatant.id);\r\n            mode += onMap ? ' on-map' : ' off-map';\r\n        }\r\n\r\n        switch (combatant.type) {\r\n            case 'pc':\r\n                return (\r\n                    <PCCard\r\n                        key='selected'\r\n                        combatant={combatant as Combatant & PC}\r\n                        mode={mode}\r\n                        changeValue={(source, type, value) => this.props.changeValue(source, type, value)}\r\n                        nudgeValue={(source, type, delta) => this.props.nudgeValue(source, type, delta)}\r\n                        makeCurrent={c => this.props.makeCurrent(c as Combatant & PC)}\r\n                        makeActive={c => this.props.makeActive(c as Combatant & PC)}\r\n                        makeDefeated={c => this.props.makeDefeated(c as Combatant & PC)}\r\n                        removeCombatant={c => this.props.removeCombatant(c as Combatant & PC)}\r\n                        mapAdd={c => this.setAddingToMapID(c.id)}\r\n                        mapMove={(c, dir) => this.props.mapMove(c as Combatant & PC, dir)}\r\n                        mapRemove={c => this.props.mapRemove(c as Combatant & PC)}\r\n                        endTurn={c => this.props.endTurn(c as Combatant & PC)}\r\n                    />\r\n                );\r\n            case 'monster':\r\n                return (\r\n                    <MonsterCard\r\n                        key='selected'\r\n                        combatant={combatant as Combatant & Monster}\r\n                        mode={mode}\r\n                        combat={this.props.combat as Combat}\r\n                        changeValue={(c, type, value) => this.props.changeValue(c, type, value)}\r\n                        nudgeValue={(c, type, delta) => this.props.nudgeValue(c, type, delta)}\r\n                        makeCurrent={c => this.props.makeCurrent(c as Combatant & Monster)}\r\n                        makeActive={c => this.props.makeActive(c as Combatant & Monster)}\r\n                        makeDefeated={c => this.props.makeDefeated(c as Combatant & Monster)}\r\n                        removeCombatant={c => this.props.removeCombatant(c as Combatant & Monster)}\r\n                        addCondition={c => this.props.addCondition(c as Combatant & Monster)}\r\n                        editCondition={(c, condition) => this.props.editCondition(c as Combatant & Monster, condition)}\r\n                        removeCondition={(c, conditionID) => this.props.removeCondition(c as Combatant & Monster, conditionID)}\r\n                        nudgeConditionValue={(c, type, delta) => this.props.nudgeValue(c, type, delta)}\r\n                        mapAdd={c => this.setAddingToMapID(c.id)}\r\n                        mapMove={(c, dir) => this.props.mapMove(c as Combatant & Monster, dir)}\r\n                        mapRemove={c => this.props.mapRemove(c as Combatant & Monster)}\r\n                        endTurn={(c) => this.props.endTurn(c as Combatant & Monster)}\r\n                        changeHP={(c, hp, temp) => this.props.changeHP(c as Combatant & Monster, hp, temp)}\r\n                    />\r\n                );\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    private addCombatantToMap(x: number, y: number) {\r\n        if (this.props.combat) {\r\n            const combatant = this.props.combat.combatants.find(c => c.id === this.state.addingToMapID);\r\n            if (combatant) {\r\n                this.props.mapAdd(combatant, x, y);\r\n            }\r\n            this.setAddingToMapID(null);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            if (this.props.combat) {\r\n                const current: JSX.Element[] = [];\r\n                let pending: JSX.Element[] = [];\r\n                let active: JSX.Element[] = [];\r\n                const defeated: JSX.Element[] = [];\r\n\r\n                this.props.combat.combatants.forEach(combatant => {\r\n                    if (combatant.current) {\r\n                        current.push(\r\n                            <div key={combatant.id}>\r\n                                {this.createCard(combatant)}\r\n                            </div>\r\n                        );\r\n                    }\r\n                    if (combatant.pending && !combatant.active && !combatant.defeated) {\r\n                        pending.push(\r\n                            <PendingCombatantRow\r\n                                key={combatant.id}\r\n                                combatant={combatant}\r\n                                select={c => this.setSelectedTokenID(c.id)}\r\n                                selected={combatant.id === this.state.selectedTokenID}\r\n                                nudgeValue={(c, type, delta) => this.props.nudgeValue(c, type, delta)}\r\n                                makeActive={c => this.props.makeActive(c)}\r\n                            />\r\n                        );\r\n                    }\r\n                    if (!combatant.pending && combatant.active && !combatant.defeated) {\r\n                        switch (combatant.type) {\r\n                            case 'pc':\r\n                                active.push(\r\n                                    <PCRow\r\n                                        key={combatant.id}\r\n                                        combatant={combatant as Combatant & PC}\r\n                                        combat={this.props.combat as Combat}\r\n                                        select={c => this.setSelectedTokenID(c.id)}\r\n                                        selected={combatant.id === this.state.selectedTokenID}\r\n                                    />\r\n                                );\r\n                                break;\r\n                            case 'monster':\r\n                                active.push(\r\n                                    <MonsterRow\r\n                                        key={combatant.id}\r\n                                        combatant={combatant as Combatant & Monster}\r\n                                        combat={this.props.combat as Combat}\r\n                                        select={c => this.setSelectedTokenID(c.id)}\r\n                                        selected={combatant.id === this.state.selectedTokenID}\r\n                                    />\r\n                                );\r\n                                break;\r\n                        }\r\n                    }\r\n                    if (!combatant.pending && !combatant.active && combatant.defeated) {\r\n                        switch (combatant.type) {\r\n                            case 'pc':\r\n                                defeated.push(\r\n                                    <PCRow\r\n                                        key={combatant.id}\r\n                                        combatant={combatant as Combatant & PC}\r\n                                        combat={this.props.combat as Combat}\r\n                                        select={c => this.setSelectedTokenID(c.id)}\r\n                                        selected={combatant.id === this.state.selectedTokenID}\r\n                                    />\r\n                                );\r\n                                break;\r\n                            case 'monster':\r\n                                defeated.push(\r\n                                    <MonsterRow\r\n                                        key={combatant.id}\r\n                                        combatant={combatant as Combatant & Monster}\r\n                                        combat={this.props.combat as Combat}\r\n                                        select={c => this.setSelectedTokenID(c.id)}\r\n                                        selected={combatant.id === this.state.selectedTokenID}\r\n                                    />\r\n                                );\r\n                                break;\r\n                        }\r\n                    }\r\n                });\r\n\r\n                if (this.props.showHelp && (pending.length !== 0)) {\r\n                    const pendingHelp = (\r\n                        <div key='pending-help'>\r\n                            <InfoCard\r\n                                getContent={() =>\r\n                                    <div>\r\n                                        <div className='section'>these combatants are not yet part of the encounter</div>\r\n                                        <div className='section'>set initiative on each of them, then add them to the encounter</div>\r\n                                    </div>\r\n                                }\r\n                            />\r\n                        </div>\r\n                    );\r\n                    pending = [pendingHelp].concat(pending);\r\n                }\r\n\r\n                if (this.props.showHelp && (current.length === 0)) {\r\n                    const activeHelp = (\r\n                        /* tslint:disable:max-line-length */\r\n                        <div key='active-help'>\r\n                            <InfoCard\r\n                                getContent={() =>\r\n                                    <div>\r\n                                        <div className='section'>these are the combatants taking part in this encounter; you can select them to see their stat blocks (on the right)</div>\r\n                                        <div className='section'>to begin the encounter, select the first combatant and press the <b>start turn</b> button on their stat block</div>\r\n                                    </div>\r\n                                }\r\n                            />\r\n                        </div>\r\n                        /* tslint:enable:max-line-length */\r\n                    );\r\n                    active = [activeHelp].concat(active);\r\n                }\r\n\r\n                if (current.length === 0) {\r\n                    current.push(\r\n                        <InfoCard\r\n                            key='current'\r\n                            getContent={() =>\r\n                                <div className='section'>the current initiative holder will be displayed here</div>\r\n                            }\r\n                        />\r\n                    );\r\n                }\r\n\r\n                let notificationSection = null;\r\n                if (this.props.combat.notifications.length > 0) {\r\n                    const notifications = this.props.combat.notifications.map(n => (\r\n                        <NotificationPanel\r\n                            key={n.id}\r\n                            notification={n}\r\n                            close={(notification, removeCondition) => this.props.close(notification, removeCondition)}\r\n                        />\r\n                    ));\r\n                    notificationSection = (\r\n                        <div className='notifications'>\r\n                            {notifications}\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                let mapSection = null;\r\n                if (this.props.combat.map) {\r\n                    mapSection = (\r\n                        <MapPanel\r\n                            map={this.props.combat.map}\r\n                            mode='combat'\r\n                            showOverlay={this.state.addingToMapID !== null}\r\n                            combatants={this.props.combat.combatants}\r\n                            selectedItemID={this.state.selectedTokenID ? this.state.selectedTokenID : undefined}\r\n                            setSelectedItemID={id => {\r\n                                if (id) {\r\n                                    this.setSelectedTokenID(id);\r\n                                }\r\n                            }}\r\n                            gridSquareClicked={(x, y) => this.addCombatantToMap(x, y)}\r\n                        />\r\n                    );\r\n                }\r\n\r\n                let selectedCombatant = null;\r\n                if (this.state.selectedTokenID) {\r\n                    const combatant = this.props.combat.combatants.find(c => c.id === this.state.selectedTokenID);\r\n                    if (combatant && !combatant.current) {\r\n                        selectedCombatant = this.createCard(combatant);\r\n                    }\r\n                }\r\n                if (!selectedCombatant) {\r\n                    selectedCombatant = (\r\n                        <InfoCard\r\n                            key='selected'\r\n                            getContent={() =>\r\n                                <div className='section'>select a pc or monster to see its details here</div>\r\n                            }\r\n                        />\r\n                    );\r\n                }\r\n\r\n                return (\r\n                    <div className='combat-manager row collapse'>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable'>\r\n                            <CardGroup\r\n                                heading='initiative holder'\r\n                                content={current}\r\n                            />\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable'>\r\n                            {notificationSection}\r\n                            <CardGroup\r\n                                heading='waiting for intiative to be entered'\r\n                                content={pending}\r\n                                hidden={pending.length === 0}\r\n                                showToggle={true}\r\n                            />\r\n                            {mapSection}\r\n                            <CardGroup\r\n                                heading='combatants in the encounter'\r\n                                content={active}\r\n                                hidden={active.length === 0}\r\n                            />\r\n                            <CardGroup\r\n                                heading='defeated'\r\n                                content={defeated}\r\n                                hidden={defeated.length === 0}\r\n                                showToggle={true}\r\n                            />\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable'>\r\n                            <CardGroup\r\n                                heading='selected combatant'\r\n                                content={[selectedCombatant]}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                let help = null;\r\n                if (this.props.showHelp) {\r\n                    help = (\r\n                        <CombatManagerCard />\r\n                    );\r\n                }\r\n\r\n                const combats: JSX.Element[] = [];\r\n                this.props.combats.forEach(c => {\r\n                    combats.push(\r\n                        <CombatListItem\r\n                            key={c.id}\r\n                            combat={c}\r\n                            selected={false}\r\n                            setSelection={combat => this.props.resumeEncounter(combat)}\r\n                        />\r\n                    );\r\n                });\r\n\r\n                return (\r\n                    <div className='combat-manager row collapse'>\r\n                        <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                            {help}\r\n                            <button onClick={() => this.props.createCombat()}>start a new combat</button>\r\n                            {combats}\r\n                        </div>\r\n                        <div className='columns small-8 medium-8 large-9 scrollable' />\r\n                    </div>\r\n                );\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface NotificationProps {\r\n    notification: Notification;\r\n    close: (notification: Notification, removeCondition: boolean) => void;\r\n}\r\n\r\nclass NotificationPanel extends React.Component<NotificationProps> {\r\n    private success() {\r\n        switch (this.props.notification.type) {\r\n            case 'condition-save':\r\n            case 'condition-end':\r\n                const condition = this.props.notification.data as Condition;\r\n                if (condition.duration) {\r\n                    // Reduce save by 1\r\n                    if ((condition.duration.type === 'saves') || (condition.duration.type === 'rounds')) {\r\n                        condition.duration.count -= 1;\r\n                        if (condition.duration.count === 0) {\r\n                            // Remove the condition\r\n                            this.close(true);\r\n                        } else {\r\n                            this.close();\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            case 'trait-recharge':\r\n                // Mark trait as recharged\r\n                const trait = this.props.notification.data as Trait;\r\n                trait.uses = 0;\r\n                this.close();\r\n                break;\r\n        }\r\n    }\r\n\r\n    private close(removeCondition = false) {\r\n        this.props.close(this.props.notification, removeCondition);\r\n    }\r\n\r\n    public render() {\r\n        const combatant = this.props.notification.combatant as (Combatant & Monster);\r\n        const condition = this.props.notification.data as Condition;\r\n        const trait = this.props.notification.data as Trait;\r\n\r\n        const name = combatant.displayName || combatant.name || 'unnamed monster';\r\n        switch (this.props.notification.type) {\r\n            case 'condition-save':\r\n                const duration = condition.duration as ConditionDurationSaves;\r\n                let saveType = duration.saveType.toString();\r\n                if (saveType !== 'death') {\r\n                    saveType = saveType.toUpperCase();\r\n                }\r\n                return (\r\n                    <div key={this.props.notification.id} className='notification'>\r\n                        <div className='text'>\r\n                            {name} must make a {saveType} save against dc {duration.saveDC}\r\n                        </div>\r\n                        <div className='buttons'>\r\n                            <button onClick={() => this.success()}>success</button>\r\n                            <button onClick={() => this.close()}>close</button>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            case 'condition-end':\r\n                return (\r\n                    <div key={this.props.notification.id} className='notification'>\r\n                        <div className='text'>\r\n                            {name} is no longer affected by condition {condition.name}\r\n                        </div>\r\n                        <div className='buttons'>\r\n                            <button onClick={() => this.close()}>close</button>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            case 'trait-recharge':\r\n                return (\r\n                    <div key={this.props.notification.id} className='notification'>\r\n                        <div className='text'>\r\n                            {name} can attempt to recharge {trait.name} ({trait.usage})\r\n                        </div>\r\n                        <div className='buttons'>\r\n                            <button onClick={() => this.success()}>recharge</button>\r\n                            <button onClick={() => this.close()}>close</button>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface PendingCombatantRowProps {\r\n    combatant: (Combatant & PC) | (Combatant & Monster);\r\n    selected: boolean;\r\n    select: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    nudgeValue: (combatant: (Combatant & PC) | (Combatant & Monster), field: string, delta: number) => void;\r\n    makeActive: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n}\r\n\r\nclass PendingCombatantRow extends React.Component<PendingCombatantRowProps> {\r\n    private getInformationText() {\r\n        if (this.props.selected) {\r\n            return 'selected';\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private onClick(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (this.props.select) {\r\n            this.props.select(this.props.combatant);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'combatant-row ' + this.props.combatant.type;\r\n        if (this.props.combatant.current || this.props.selected) {\r\n            style += ' highlight';\r\n        }\r\n\r\n        return (\r\n            <div className={style} onClick={e => this.onClick(e)}>\r\n                <div className='name'>\r\n                    {this.props.combatant.displayName || this.props.combatant.name || 'combatant'}\r\n                    <span className='info'>{this.getInformationText()}</span>\r\n                </div>\r\n                <div className='content'>\r\n                    <Spin\r\n                        source={this.props.combatant}\r\n                        name='initiative'\r\n                        label='initiative'\r\n                        nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'initiative', delta)}\r\n                    />\r\n                    <button onClick={e => { e.stopPropagation(); this.props.makeActive(this.props.combatant); }}>add to encounter</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface PCRowProps {\r\n    combatant: Combatant & PC;\r\n    combat: Combat;\r\n    selected: boolean;\r\n    select: (combatant: Combatant & PC) => void;\r\n}\r\n\r\nclass PCRow extends React.Component<PCRowProps> {\r\n    private getInformationText() {\r\n        if (this.props.combatant.current) {\r\n            return 'current turn';\r\n        }\r\n\r\n        if (this.props.selected) {\r\n            return 'selected';\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private onClick(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (!this.props.combatant.current && !this.props.selected && this.props.select) {\r\n            this.props.select(this.props.combatant);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'combatant-row ' + this.props.combatant.type;\r\n        if (this.props.combatant.current || this.props.selected) {\r\n            style += ' highlight';\r\n        }\r\n\r\n        const desc = (this.props.combatant.race || 'unknown race')\r\n                + ' ' + (this.props.combatant.classes || 'unknown class')\r\n                + ', level ' + this.props.combatant.level;\r\n\r\n        const notes = [];\r\n        if (this.props.combat.map) {\r\n            if (!this.props.combatant.pending && !this.props.combat.map.items.find(i => i.id === this.props.combatant.id)) {\r\n                notes.push(\r\n                    <div key='not-on-map' className='note'>not on the map</div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className={style} onClick={e => this.onClick(e)}>\r\n                <div className='name'>\r\n                    {this.props.combatant.displayName || this.props.combatant.name || 'combatant'}\r\n                    {this.props.combatant.player ? ' | ' + this.props.combatant.player : ''}\r\n                    <span className='info'>{this.getInformationText()}</span>\r\n                </div>\r\n                <div className='content'>\r\n                    <div className='section lowercase'>\r\n                        {desc}\r\n                    </div>\r\n                    {notes}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface MonsterRowProps {\r\n    combatant: Combatant & Monster;\r\n    combat: Combat;\r\n    selected: boolean;\r\n    select: (combatant: Combatant & Monster) => void;\r\n}\r\n\r\nclass MonsterRow extends React.Component<MonsterRowProps> {\r\n    private getInformationText() {\r\n        if (this.props.combatant.current) {\r\n            return 'current turn';\r\n        }\r\n\r\n        if (this.props.selected) {\r\n            return 'selected';\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private onClick(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (!this.props.combatant.current && !this.props.selected && this.props.select) {\r\n            this.props.select(this.props.combatant);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'combatant-row ' + this.props.combatant.type;\r\n        if (this.props.combatant.current || this.props.selected) {\r\n            style += ' highlight';\r\n        }\r\n\r\n        let hp = (this.props.combatant.hp ? this.props.combatant.hp : 0).toString();\r\n        if (this.props.combatant.hpTemp > 0) {\r\n            hp += '+' + this.props.combatant.hpTemp;\r\n        }\r\n\r\n        let gauge = null;\r\n        if (!this.props.combatant.pending) {\r\n            gauge = (\r\n                <HitPointGauge combatant={this.props.combatant} />\r\n            );\r\n        }\r\n\r\n        let conditions = null;\r\n        if (this.props.combatant.conditions) {\r\n            conditions = this.props.combatant.conditions.map(c => {\r\n                let name = c.name;\r\n                if (c.name === 'exhaustion') {\r\n                    name += ' (' + c.level + ')';\r\n                }\r\n                if ((c.name === 'custom') && (c.text)) {\r\n                    name = c.text;\r\n                }\r\n                if (c.duration) {\r\n                    name += ' ' + Utils.conditionDurationText(c, this.props.combat);\r\n                }\r\n                const description = [];\r\n                const text = Utils.conditionText(c);\r\n                for (let n = 0; n !== text.length; ++n) {\r\n                    description.push(<li key={n} className='condition-text'>{text[n]}</li>);\r\n                }\r\n                return (\r\n                    <div key={c.id} className='condition'>\r\n                        <div className='condition-name'>{name}</div>\r\n                        <ul>\r\n                            {description}\r\n                        </ul>\r\n                    </div>\r\n                );\r\n            });\r\n        }\r\n\r\n        const notes = [];\r\n        if (this.props.combat.map) {\r\n            if (!this.props.combatant.pending && !this.props.combat.map.items.find(i => i.id === this.props.combatant.id)) {\r\n                notes.push(\r\n                    <div key='not-on-map' className='note'>not on the map</div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className={style} onClick={e => this.onClick(e)}>\r\n                <div className='name'>\r\n                    {this.props.combatant.displayName || this.props.combatant.name || 'combatant'}\r\n                    <span className='info'>{this.getInformationText()}</span>\r\n                </div>\r\n                <div className='content'>\r\n                    <div className='section key-stats'>\r\n                        <div className='key-stat'>\r\n                            <div className='stat-label'>ac</div>\r\n                            <div className='stat-value'>{this.props.combatant.ac}</div>\r\n                        </div>\r\n                        <div className='key-stat'>\r\n                            <div className='stat-value'>{hp}</div>\r\n                            <div className='stat-label'>hp</div>\r\n                        </div>\r\n                    </div>\r\n                    {gauge}\r\n                    {conditions}\r\n                    {notes}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport InfoCard from '../info-card';\r\n\r\nexport default class DMScreenCard extends React.Component {\r\n    private getContent() {\r\n        return (\r\n            <div>\r\n                <div className='section'>this is the dm screen</div>\r\n                <div className='section'>it contains a collection of modules which might be useful when you're running the game</div>\r\n                <div className='divider' />\r\n                <div className='section'>click on a module below to open it</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <InfoCard getContent={this.getContent}/>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Showdown from 'showdown';\r\n\r\nconst showdown = new Showdown.Converter();\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    //\r\n}\r\n\r\ninterface State {\r\n    source: string | null;\r\n}\r\n\r\nexport default class ActionsModule extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            source: null\r\n        };\r\n    }\r\n\r\n    private async fetchData() {\r\n        const response = await fetch('./data/actions.md');\r\n        this.setState({\r\n            source: await response.text()\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        if (!this.state.source) {\r\n            this.fetchData();\r\n        }\r\n\r\n        return (\r\n            <div dangerouslySetInnerHTML={{ __html: showdown.makeHtml(this.state.source || '') }} />\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Showdown from 'showdown';\r\n\r\nconst showdown = new Showdown.Converter();\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    //\r\n}\r\n\r\ninterface State {\r\n    source: string | null;\r\n}\r\n\r\nexport default class ConditionsModule extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            source: null\r\n        };\r\n    }\r\n\r\n    private async fetchData() {\r\n        const response = await fetch('./data/conditions.md');\r\n        this.setState({\r\n            source: await response.text()\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        if (!this.state.source) {\r\n            this.fetchData();\r\n        }\r\n\r\n        return (\r\n            <div dangerouslySetInnerHTML={{ __html: showdown.makeHtml(this.state.source || '') }} />\r\n        );\r\n    }\r\n}\r\n","interface ModelLine {\r\n    prev: string;\r\n    freq: ModelChar[];\r\n}\r\n\r\ninterface ModelChar {\r\n    char: string;\r\n    count: number;\r\n}\r\n\r\nexport default class TextGenerator {\r\n\r\n    private static model: ModelLine[] = [];\r\n\r\n    public static initModel(sources: string[]) {\r\n        const model: ModelLine[] = [];\r\n\r\n        sources.forEach(source => {\r\n            const lines = source.split(/\\r?\\n/);\r\n            lines.forEach(line => {\r\n                if (line) {\r\n                    TextGenerator.addLineToModel(line, model);\r\n                }\r\n            });\r\n        });\r\n\r\n        TextGenerator.model = model;\r\n    }\r\n\r\n    private static addLineToModel(line: string, model: ModelLine[]) {\r\n        line = String.fromCharCode(0, 1) + line + String.fromCharCode(2);\r\n\r\n        for (let index = 2; index !== line.length; ++index) {\r\n            const prev = line.substr(index - 2, 2);\r\n            const char = line.substr(index, 1);\r\n\r\n            let item = model.find(x => x.prev === prev);\r\n            if (!item) {\r\n                item = {\r\n                    prev: prev,\r\n                    freq: []\r\n                };\r\n                model.push(item);\r\n            }\r\n\r\n            let freq = item.freq.find(x => x.char === char);\r\n            if (!freq) {\r\n                freq = {\r\n                    char: char,\r\n                    count: 0\r\n                };\r\n                item.freq.push(freq);\r\n            }\r\n\r\n            freq.count += 1;\r\n        }\r\n    }\r\n\r\n    public static generate(requiredResults: number): string[] {\r\n        const lines: string[] = [];\r\n        const allowedFailures = 100;\r\n        let failures = 0;\r\n\r\n        while ((lines.length < requiredResults) && (failures < allowedFailures)) {\r\n            const line = TextGenerator.extractLine();\r\n            if (line && !lines.includes(line)) {\r\n                lines.push(line);\r\n            } else {\r\n                failures += 1;\r\n            }\r\n        }\r\n\r\n        return lines;\r\n    }\r\n\r\n    private static extractLine() {\r\n        let line = String.fromCharCode(0, 1);\r\n\r\n        while (true) {\r\n            const prev = line.substr(line.length - 2, 2);\r\n\r\n            const item = TextGenerator.model.find(x => x.prev === prev);\r\n            if (item) {\r\n                let candidates = '';\r\n                item.freq.forEach(freq => {\r\n                    candidates += freq.char.repeat(freq.count);\r\n                });\r\n\r\n                const index = Math.floor(Math.random() * candidates.length);\r\n                const char = candidates[index];\r\n                if (char === String.fromCharCode(2)) {\r\n                    line = line.substr(2);\r\n                    return line;\r\n                } else {\r\n                    line += char;\r\n                }\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport checked from '../../resources/images/checked.svg';\r\nimport unchecked from '../../resources/images/unchecked.svg';\r\n\r\ninterface Props {\r\n    label: string;\r\n    checked: boolean;\r\n    changeValue: (value: boolean) => void;\r\n    disabled: boolean;\r\n}\r\n\r\nexport default class Checkbox extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        disabled: false\r\n    };\r\n\r\n    private click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        this.props.changeValue(!this.props.checked);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'checkbox';\r\n            if (this.props.checked) {\r\n                style += ' checked';\r\n            }\r\n            if (this.props.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            return (\r\n                <div className={style} onClick={e => this.click(e)}>\r\n                    <img className='image' src={this.props.checked ? checked : unchecked} alt='check' />\r\n                    <div className='checkbox-label'>{this.props.label}</div>\r\n                </div>\r\n            );\r\n\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    options: { id: string; text: string; disabled?: boolean }[];\r\n    selectedID: string | null;\r\n    select: (optionID: string) => void;\r\n    tabs: boolean;\r\n    disabled: boolean;\r\n    itemsPerRow: number;\r\n}\r\n\r\nexport default class Selector extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        tabs: false,\r\n        disabled: false,\r\n        itemsPerRow: null\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            let style = this.props.tabs ? 'selector tabs' : 'selector radio';\r\n            if (this.props.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            const itemsPerRow = this.props.itemsPerRow ? this.props.itemsPerRow : this.props.options.length;\r\n            const rowCount = Math.ceil(this.props.options.length / itemsPerRow);\r\n            const rowContents: JSX.Element[][] = [];\r\n            for (let n = 0; n !== rowCount; ++n) {\r\n                rowContents.push([]);\r\n            }\r\n\r\n            this.props.options.forEach(option => {\r\n                const index = this.props.options.indexOf(option);\r\n                const rowIndex = Math.floor(index / itemsPerRow);\r\n                const row = rowContents[rowIndex];\r\n                row.push(\r\n                    <SelectorOption\r\n                        key={option.id}\r\n                        option={option}\r\n                        selected={option.id === this.props.selectedID}\r\n                        count={itemsPerRow}\r\n                        select={(optionID: string) => this.props.select(optionID)}\r\n                    />\r\n                );\r\n            });\r\n\r\n            const rowSections = rowContents.map(row => {\r\n                const index = rowContents.indexOf(row);\r\n                return <div key={index}>{row}</div>;\r\n            });\r\n\r\n            return (\r\n                <div className={style}>\r\n                    {rowSections}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface SelectorOptionInterface {\r\n    option: { id: string; text: string; disabled?: boolean };\r\n    selected: boolean;\r\n    count: number;\r\n    select: (optionID: string) => void;\r\n}\r\n\r\nclass SelectorOption extends React.Component<SelectorOptionInterface> {\r\n    private click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (!this.props.option.disabled) {\r\n            this.props.select(this.props.option.id);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const width = 'calc(((100% - 1px) / ' + this.props.count + ') - 2px )';\r\n\r\n            let style = 'option';\r\n            if (this.props.selected) {\r\n                style += ' selected';\r\n            }\r\n            if (this.props.option.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            return (\r\n                <div key={this.props.option.id} className={style} style={{ width: width }} title={this.props.option.text} onClick={e => this.click(e)}>\r\n                    {this.props.option.text}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport TextGenerator from '../../utils/text-generation';\r\n\r\nimport Checkbox from '../controls/checkbox';\r\nimport Selector from '../controls/selector';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    //\r\n}\r\n\r\ninterface State {\r\n    sources: { [id: string]: string; };\r\n    output: string[];\r\n}\r\n\r\ninterface Preset {\r\n    name: string;\r\n    languages: string[];\r\n}\r\n\r\nexport default class LanguageModule extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            sources: {},\r\n            output: []\r\n        };\r\n    }\r\n\r\n    private getLanguages(): string[] {\r\n        return [\r\n            'armenian',\r\n            'basque',\r\n            'bulgarian',\r\n            'croatian',\r\n            'czech',\r\n            'danish',\r\n            'dutch',\r\n            'finnish',\r\n            'french',\r\n            'german',\r\n            'greek',\r\n            'hawaiian',\r\n            'hindi',\r\n            'hungarian',\r\n            'icelandic',\r\n            'irish',\r\n            'italian',\r\n            'japanese',\r\n            'kannada',\r\n            'kazakh',\r\n            'korean',\r\n            'kyrgyz',\r\n            'latvian',\r\n            'lithuanian',\r\n            'macedonian',\r\n            'malay',\r\n            'maltese',\r\n            'maori',\r\n            'myanmar',\r\n            'nepalese',\r\n            'norwegian',\r\n            'persian',\r\n            'portuguese',\r\n            'punjabi',\r\n            'romanian',\r\n            'russian',\r\n            'samoan',\r\n            'serbian',\r\n            'shona',\r\n            'somali',\r\n            'spanish',\r\n            'swahili',\r\n            'swedish',\r\n            'thai',\r\n            'turkish',\r\n            'welsh',\r\n            'yiddish',\r\n            'zulu'\r\n        ];\r\n    }\r\n\r\n    private getPresets(): Preset[] {\r\n        return [\r\n            {\r\n                name: 'draconic',\r\n                languages: ['armenian', 'irish', 'maltese']\r\n            },\r\n            {\r\n                name: 'dwarvish',\r\n                languages: ['czech', 'german', 'yiddish']\r\n            },\r\n            {\r\n                name: 'elvish',\r\n                languages: ['finnish', 'spanish', 'welsh']\r\n            },\r\n            {\r\n                name: 'goblin',\r\n                languages: ['hawaiian', 'kyrgyz', 'somali']\r\n            },\r\n            {\r\n                name: 'orc',\r\n                languages: ['macedonian', 'russian', 'turkish']\r\n            }\r\n        ];\r\n    }\r\n\r\n    private async addLanguage(language: string) {\r\n        const response = await fetch('./data/langs/' + language + '.txt');\r\n        this.state.sources[language] = await response.text();\r\n        this.setState({\r\n            sources: this.state.sources\r\n        });\r\n    }\r\n\r\n    private removeLanguage(language: string) {\r\n        delete this.state.sources[language];\r\n        this.setState({\r\n            sources: this.state.sources\r\n        });\r\n    }\r\n\r\n    private usePreset(presetName: string) {\r\n        const preset = this.getPresets().find(p => p.name === presetName);\r\n        if (preset) {\r\n            this.setState({\r\n                sources: {},\r\n                output: []\r\n            }, () => {\r\n                preset.languages.forEach(lang => {\r\n                    this.addLanguage(lang);\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    private generate() {\r\n        const sources: string[] = [];\r\n        Object.keys(this.state.sources).forEach(key => {\r\n            const src = this.state.sources[key];\r\n            sources.push(src);\r\n        });\r\n        TextGenerator.initModel(sources);\r\n        this.setState({\r\n            output: TextGenerator.generate(5)\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        const presetOptions = this.getPresets().map(p => {\r\n            return {\r\n                id: p.name,\r\n                text: p.name\r\n            };\r\n        });\r\n\r\n        let selectedPreset = 'custom';\r\n        this.getPresets().forEach(p => {\r\n            const selected = Object.keys(this.state.sources).sort().join(', ');\r\n            const setting = p.languages.sort().join(', ');\r\n            if (selected === setting) {\r\n                selectedPreset = p.name;\r\n            }\r\n        });\r\n\r\n        const languages = this.getLanguages()\r\n            .map(lang => {\r\n                const selected = Object.keys(this.state.sources).includes(lang);\r\n                return (\r\n                    <div className='column' key={lang}>\r\n                        <Checkbox\r\n                            label={lang}\r\n                            checked={selected}\r\n                            changeValue={value => value ? this.addLanguage(lang) : this.removeLanguage(lang)}\r\n                        />\r\n                    </div>\r\n                );\r\n            });\r\n\r\n        const allowGenerate = Object.keys(this.state.sources).length > 0;\r\n\r\n        const output = [];\r\n        for (let n = 0; n !== this.state.output.length; ++n) {\r\n            output.push(\r\n                <div key={n} className='column small-12 medium-12 large-12 section'>\r\n                    {this.state.output[n]}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className='language'>\r\n                <div className='subheading'>presets</div>\r\n                <Selector\r\n                    options={presetOptions}\r\n                    selectedID={selectedPreset}\r\n                    select={optionID => this.usePreset(optionID)}\r\n                />\r\n                <div className='subheading'>languages</div>\r\n                <div className='row collapse small-up-3 medium-up-4 large-up-6 language-options'>\r\n                    {languages}\r\n                </div>\r\n                <div className='subheading'>output</div>\r\n                <button className={allowGenerate ? '' : 'disabled'} onClick={() => this.generate()}>generate</button>\r\n                <div className='row language-output'>\r\n                    {output}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Showdown from 'showdown';\r\n\r\nconst showdown = new Showdown.Converter();\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    //\r\n}\r\n\r\ninterface State {\r\n    source: string | null;\r\n}\r\n\r\nexport default class SkillsModule extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            source: null\r\n        };\r\n    }\r\n\r\n    private async fetchData() {\r\n        const response = await fetch('./data/skills.md');\r\n        this.setState({\r\n            source: await response.text()\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        if (!this.state.source) {\r\n            this.fetchData();\r\n        }\r\n\r\n        return (\r\n            <div dangerouslySetInnerHTML={{ __html: showdown.makeHtml(this.state.source || '') }} />\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { DMModule } from '../../models/dm-module';\r\n\r\ninterface Props {\r\n    module: DMModule;\r\n    selected: boolean;\r\n    setSelection: (module: DMModule) => void;\r\n}\r\n\r\nexport default class DMModuleListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.module)}>\r\n                    <div className='heading'>{this.props.module.name || 'unnamed module'}</div>\r\n                    <div className='text'>{this.props.module.desc || 'no information'}</div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { DMModule } from '../../models/dm-module';\r\n\r\nimport DMScreenCard from '../cards/information/dm-screen-card';\r\nimport ActionsModule from '../dm-modules/actions-module';\r\nimport ConditionsModule from '../dm-modules/conditions-module';\r\nimport LanguageModule from '../dm-modules/language-module';\r\nimport SkillsModule from '../dm-modules/skills-module';\r\nimport DMModuleListItem from '../list-items/dm-module-list-item';\r\n\r\ninterface Props {\r\n    selectedModuleID: string | null;\r\n    showHelp: boolean;\r\n    selectModule: (module: DMModule | null) => void;\r\n}\r\n\r\nexport default class DMScreen extends React.Component<Props> {\r\n    private getModules(): DMModule[] {\r\n        return [\r\n            {\r\n                id: 'skills',\r\n                name: 'skills',\r\n                desc: 'listing of all the skills in the game'\r\n            },\r\n            {\r\n                id: 'conditions',\r\n                name: 'conditions',\r\n                desc: 'information about conditions and their effects'\r\n            },\r\n            {\r\n                id: 'actions',\r\n                name: 'actions',\r\n                desc: 'list of the available action types and examples'\r\n            },\r\n            {\r\n                id: 'language',\r\n                name: 'language',\r\n                desc: 'this tool allows you to generate unique languages'\r\n            }\r\n        ];\r\n    }\r\n\r\n    private getContent(): JSX.Element | null {\r\n        switch (this.props.selectedModuleID) {\r\n            case 'skills':\r\n                return (\r\n                    <SkillsModule />\r\n                );\r\n            case 'conditions':\r\n                return (\r\n                    <ConditionsModule />\r\n                );\r\n            case 'actions':\r\n                return (\r\n                    <ActionsModule />\r\n                );\r\n            case 'language':\r\n                return (\r\n                    <LanguageModule />\r\n                );\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let help = null;\r\n            if (this.props.showHelp) {\r\n                help = (\r\n                    <DMScreenCard />\r\n                );\r\n            }\r\n\r\n            const modules: DMModule[] = this.getModules();\r\n\r\n            const moduleListItems = [];\r\n            for (let n = 0; n !== modules.length; ++n) {\r\n                const m = modules[n];\r\n                moduleListItems.push(\r\n                    <DMModuleListItem\r\n                        key={m.id}\r\n                        module={m}\r\n                        selected={m.id === this.props.selectedModuleID}\r\n                        setSelection={module => this.props.selectModule(module)}\r\n                    />\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='dm-screen row collapse'>\r\n                    <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                        {help}\r\n                        {moduleListItems}\r\n                    </div>\r\n                    <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                        <div className='dm-module'>\r\n                            {this.getContent()}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Encounter, EncounterSlot } from '../../models/encounter';\r\nimport { Monster } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\ninterface Props {\r\n    encounter: Encounter;\r\n    party: Party | null;\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n}\r\n\r\nexport default class DifficultyChartPanel extends React.Component<Props> {\r\n    public render() {\r\n        let monsterCount = 0;\r\n        let monsterXp = 0;\r\n        let slots: EncounterSlot[] = [];\r\n        slots = slots.concat(this.props.encounter.slots);\r\n        this.props.encounter.waves.forEach(wave => {\r\n            slots = slots.concat(wave.slots);\r\n        });\r\n        slots.forEach(slot => {\r\n            monsterCount += slot.count;\r\n            const monster = this.props.getMonster(slot.monsterName, slot.monsterGroupName);\r\n            if (monster) {\r\n                monsterXp += Utils.experience(monster.challenge) * slot.count;\r\n            }\r\n        });\r\n\r\n        const adjustedXp = monsterXp * Utils.experienceFactor(monsterCount);\r\n\r\n        let xpThresholds;\r\n        let diffSection;\r\n        if (this.props.party) {\r\n            let xpEasy = 0;\r\n            let xpMedium = 0;\r\n            let xpHard = 0;\r\n            let xpDeadly = 0;\r\n\r\n            const pcs = this.props.party.pcs.filter(pc => pc.active);\r\n            pcs.forEach(pc => {\r\n                xpEasy += Utils.pcExperience(pc.level, 'easy');\r\n                xpMedium += Utils.pcExperience(pc.level, 'medium');\r\n                xpHard += Utils.pcExperience(pc.level, 'hard');\r\n                xpDeadly += Utils.pcExperience(pc.level, 'deadly');\r\n            });\r\n\r\n            let difficulty = null;\r\n            let adjustedDifficulty = null;\r\n            if (adjustedXp > 0) {\r\n                difficulty = 'trivial';\r\n                if (adjustedXp >= xpEasy) {\r\n                    difficulty = 'easy';\r\n                }\r\n                if (adjustedXp >= xpMedium) {\r\n                    difficulty = 'medium';\r\n                }\r\n                if (adjustedXp >= xpHard) {\r\n                    difficulty = 'hard';\r\n                }\r\n                if (adjustedXp >= xpDeadly) {\r\n                    difficulty = 'deadly';\r\n                }\r\n                adjustedDifficulty = difficulty;\r\n\r\n                if ((pcs.length < 3) || (pcs.length > 5)) {\r\n                    const small = pcs.length < 3;\r\n                    switch (difficulty) {\r\n                        case 'trivial':\r\n                            adjustedDifficulty = small ? 'easy' : 'trivial';\r\n                            break;\r\n                        case 'easy':\r\n                            adjustedDifficulty = small ? 'medium' : 'trivial';\r\n                            break;\r\n                        case 'medium':\r\n                            adjustedDifficulty = small ? 'hard' : 'easy';\r\n                            break;\r\n                        case 'hard':\r\n                            adjustedDifficulty = small ? 'deadly' : 'medium';\r\n                            break;\r\n                        case 'deadly':\r\n                            adjustedDifficulty = small ? 'deadly' : 'hard';\r\n                            break;\r\n                        default:\r\n                            adjustedDifficulty = '';\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            xpThresholds = (\r\n                <div className='table'>\r\n                    <div>\r\n                        <div className='cell four'><b>easy</b></div>\r\n                        <div className='cell four'><b>medium</b></div>\r\n                        <div className='cell four'><b>hard</b></div>\r\n                        <div className='cell four'><b>deadly</b></div>\r\n                    </div>\r\n                    <div>\r\n                        <div className='cell four'>{xpEasy} xp</div>\r\n                        <div className='cell four'>{xpMedium} xp</div>\r\n                        <div className='cell four'>{xpHard} xp</div>\r\n                        <div className='cell four'>{xpDeadly} xp</div>\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            const getLeft = (xp: number) => {\r\n                const max = Math.max(adjustedXp, (xpDeadly * 1.2));\r\n                return (100 * xp) / max;\r\n            };\r\n\r\n            const getRight = (xp: number) => {\r\n                return 100 - getLeft(xp);\r\n            };\r\n\r\n            diffSection = (\r\n                <div>\r\n                    <div className='difficulty-gauge'>\r\n                        <div className='bar-container'>\r\n                            <div className='bar trivial' style={{ left: '0', right: getRight(xpEasy) + '%' }} />\r\n                        </div>\r\n                        <div className='bar-container'>\r\n                            <div className='bar easy' style={{ left: getLeft(xpEasy) + '%', right: getRight(xpMedium) + '%' }} />\r\n                        </div>\r\n                        <div className='bar-container'>\r\n                            <div className='bar medium' style={{ left: getLeft(xpMedium) + '%', right: getRight(xpHard) + '%' }} />\r\n                        </div>\r\n                        <div className='bar-container'>\r\n                            <div className='bar hard' style={{ left: getLeft(xpHard) + '%', right: getRight(xpDeadly) + '%' }} />\r\n                        </div>\r\n                        <div className='bar-container'>\r\n                            <div className='bar deadly' style={{ left: getLeft(xpDeadly) + '%', right: '0' }} />\r\n                        </div>\r\n                        <div className='encounter-container'>\r\n                            <div className='encounter' style={{ left: (getLeft(adjustedXp) - 0.5) + '%' }} />\r\n                        </div>\r\n                    </div>\r\n                    <div className='subheading'>difficulty</div>\r\n                    <div className='section'>\r\n                        difficulty for this party\r\n                        <div className='right'>{difficulty}</div>\r\n                    </div>\r\n                    <div className='section' style={{ display: (adjustedDifficulty === difficulty) ? 'none' : ''}}>\r\n                        effective difficulty for {pcs.length} pc(s)\r\n                        <div className='right'><b>{adjustedDifficulty}</b></div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='subheading'>xp value</div>\r\n                <div className='section'>\r\n                    xp for this encounter\r\n                    <div className='right'>{monsterXp} xp</div>\r\n                </div>\r\n                <div className='section' style={{ display: (adjustedXp === monsterXp) ? 'none' : ''}}>\r\n                    effective xp for {monsterCount} monster(s)\r\n                    <div className='right'>{adjustedXp} xp</div>\r\n                </div>\r\n                {xpThresholds}\r\n                {diffSection}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Encounter } from '../../models/encounter';\r\nimport { Monster } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport Dropdown from '../controls/dropdown';\r\nimport DifficultyChartPanel from '../panels/difficulty-chart-panel';\r\nimport InfoCard from './info-card';\r\n\r\nimport arrow from '../../resources/images/down-arrow.svg';\r\n\r\ninterface Props {\r\n    selection: Encounter;\r\n    parties: Party[];\r\n    changeValue: (field: string, value: string) => void;\r\n    addWave: () => void;\r\n    removeEncounter: () => void;\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n}\r\n\r\ninterface State {\r\n    showDetails: boolean;\r\n    party: Party | null;\r\n}\r\n\r\nexport default class EncounterCard extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showDetails: false,\r\n            party: null\r\n        };\r\n    }\r\n\r\n    private toggleDetails() {\r\n        this.setState({\r\n            showDetails: !this.state.showDetails\r\n        });\r\n    }\r\n\r\n    private selectParty(partyID: string) {\r\n        const party = this.props.parties.find(p => p.id === partyID);\r\n        this.setState({\r\n            party: party as Party\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const partyOptions = [];\r\n            if (this.props.parties) {\r\n                for (let n = 0; n !== this.props.parties.length; ++n) {\r\n                    const party = this.props.parties[n];\r\n                    partyOptions.push({\r\n                        id: party.id,\r\n                        text: party.name\r\n                    });\r\n                }\r\n            }\r\n\r\n            const difficultySection = (\r\n                <div>\r\n                    <Dropdown\r\n                        options={partyOptions}\r\n                        placeholder='select party...'\r\n                        selectedID={this.state.party ? this.state.party.id : undefined}\r\n                        select={optionID => this.selectParty(optionID)}\r\n                    />\r\n                    <DifficultyChartPanel\r\n                        encounter={this.props.selection}\r\n                        party={this.state.party}\r\n                        getMonster={(monsterName, monsterGroupName) => this.props.getMonster(monsterName, monsterGroupName)}\r\n                    />\r\n                </div>\r\n            );\r\n\r\n            const imageStyle = this.state.showDetails ? 'image rotate' : 'image';\r\n\r\n            const heading = (\r\n                <div className='heading'>\r\n                    <div className='title'>encounter</div>\r\n                    <img className={imageStyle} src={arrow} alt='arrow' onClick={() => this.toggleDetails()} />\r\n                </div>\r\n            );\r\n\r\n            const content = (\r\n                <div>\r\n                    <div className='section'>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='encounter name'\r\n                            value={this.props.selection.name}\r\n                            onChange={event => this.props.changeValue('name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div style={{ display: this.state.showDetails ? '' : 'none' }}>\r\n                        <div className='divider' />\r\n                        {difficultySection}\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <button onClick={() => this.props.addWave()}>add a new wave</button>\r\n                        <ConfirmButton text='delete encounter' callback={() => this.props.removeEncounter()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            return (\r\n                <InfoCard getHeading={() => heading} getContent={() => content} />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    title: string;\r\n    getContent: () => (string | JSX.Element);\r\n}\r\n\r\nexport default class ErrorCard extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        title: null\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            let heading = null;\r\n            if (this.props.title) {\r\n                heading = <div className='heading'><div className='title'>{this.props.title}</div></div>;\r\n            }\r\n\r\n            const content = this.props.getContent();\r\n\r\n            return (\r\n                <div className='card error'>\r\n                    {heading}\r\n                    <div className='card-content'>\r\n                        {content}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n","export interface MonsterGroup {\r\n    id: string;\r\n    name: string;\r\n    monsters: Monster[];\r\n}\r\n\r\nexport interface Monster {\r\n    id: string;\r\n    type: string;\r\n    name: string;\r\n    size: string;\r\n    category: string;\r\n    tag: string;\r\n    alignment: string;\r\n    challenge: number;\r\n    abilityScores: {\r\n        str: number;\r\n        dex: number;\r\n        con: number;\r\n        int: number;\r\n        wis: number;\r\n        cha: number;\r\n    };\r\n    ac: number;\r\n    hpMax: number;\r\n    hpTemp: number;\r\n    hitDice: number;\r\n    damage: {\r\n        resist: string;\r\n        vulnerable: string;\r\n        immune: string;\r\n    };\r\n    savingThrows: string;\r\n    speed: string;\r\n    skills: string;\r\n    senses: string;\r\n    languages: string;\r\n    equipment: string;\r\n    traits: Trait[];\r\n    conditionImmunities: string;\r\n}\r\n\r\nexport interface Trait {\r\n    id: string;\r\n    name: string;\r\n    usage: string;\r\n    type: 'trait' | 'action' | 'legendary' | 'lair' | 'regional';\r\n    text: string;\r\n    uses: number;\r\n}\r\n\r\nexport const SIZE_TYPES = [\r\n    'tiny',\r\n    'small',\r\n    'medium',\r\n    'large',\r\n    'huge',\r\n    'gargantuan'\r\n];\r\n\r\nexport const CATEGORY_TYPES = [\r\n    'aberration',\r\n    'beast',\r\n    'celestial',\r\n    'construct',\r\n    'dragon',\r\n    'elemental',\r\n    'fey',\r\n    'fiend',\r\n    'giant',\r\n    'humanoid',\r\n    'monstrosity',\r\n    'ooze',\r\n    'plant',\r\n    'undead'\r\n];\r\n\r\nexport const TRAIT_TYPES = [\r\n    'trait',\r\n    'action',\r\n    'legendary',\r\n    'lair',\r\n    'regional'\r\n];\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { CATEGORY_TYPES, SIZE_TYPES } from '../../models/monster-group';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport Spin from '../controls/spin';\r\n\r\nimport arrow from '../../resources/images/down-arrow.svg';\r\n\r\ninterface Props {\r\n    filter: {\r\n        name: string,\r\n        challengeMin: number;\r\n        challengeMax: number;\r\n        category: string;\r\n        size: string;\r\n    };\r\n    changeValue: (type: 'name' | 'challengeMin' | 'challengeMax' | 'category' | 'size', value: any) => void;\r\n    nudgeValue: (type: 'challengeMin' | 'challengeMax', delta: number) => void;\r\n    resetFilter: () => void;\r\n}\r\n\r\ninterface State {\r\n    showAll: boolean;\r\n}\r\n\r\nexport default class FilterCard extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showAll: false\r\n        };\r\n    }\r\n\r\n    private toggleAll() {\r\n        this.setState({\r\n            showAll: !this.state.showAll\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const sizes = ['all sizes'].concat(SIZE_TYPES);\r\n            const sizeOptions = sizes.map(size => ({ id: size, text: size }));\r\n\r\n            const categories = ['all types'].concat(CATEGORY_TYPES);\r\n            const catOptions = categories.map(cat => ({ id: cat, text: cat }));\r\n\r\n            let content = null;\r\n            if (this.state.showAll) {\r\n                content = (\r\n                    <div>\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='name'\r\n                                value={this.props.filter.name}\r\n                                onChange={event => this.props.changeValue('name', event.target.value)}\r\n                            />\r\n                        </div>\r\n                        <Spin\r\n                            source={this.props.filter}\r\n                            name='challengeMin'\r\n                            label='min cr'\r\n                            display={value => Utils.challenge(value)}\r\n                            nudgeValue={delta => this.props.nudgeValue('challengeMin', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.filter}\r\n                            name='challengeMax'\r\n                            label='max cr'\r\n                            display={value => Utils.challenge(value)}\r\n                            nudgeValue={delta => this.props.nudgeValue('challengeMax', delta)}\r\n                        />\r\n                        <Dropdown\r\n                            options={sizeOptions}\r\n                            placeholder='filter by size...'\r\n                            selectedID={this.props.filter.size}\r\n                            select={optionID => this.props.changeValue('size', optionID)}\r\n                        />\r\n                        <Dropdown\r\n                            options={catOptions}\r\n                            placeholder='filter by type...'\r\n                            selectedID={this.props.filter.category}\r\n                            select={optionID => this.props.changeValue('category', optionID)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <div className='section'>\r\n                            <button onClick={() => this.props.resetFilter()}>clear filter</button>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                let summary = '';\r\n                if (this.props.filter.size !== 'all sizes') {\r\n                    summary += summary ? ' ' + this.props.filter.size : this.props.filter.size;\r\n                }\r\n                if (this.props.filter.category !== 'all types') {\r\n                    summary += summary ? ' ' + this.props.filter.category : this.props.filter.category;\r\n                }\r\n                summary += ' monsters of cr ' + Utils.challenge(this.props.filter.challengeMin) + ' to ' + Utils.challenge(this.props.filter.challengeMax);\r\n\r\n                content = (\r\n                    <div>\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='name'\r\n                                value={this.props.filter.name}\r\n                                onChange={event => this.props.changeValue('name', event.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div className='section'>showing {summary}</div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='card'>\r\n                    <div className='heading'>\r\n                        <div className='title'>filter</div>\r\n                        <img className={this.state.showAll ? 'image rotate' : 'image'} src={arrow} alt='arrow' onClick={() => this.toggleAll()} />\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        {content}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Encounter } from '../../../models/encounter';\r\n\r\nimport InfoCard from '../info-card';\r\n\r\ninterface Props {\r\n    encounters: Encounter[];\r\n}\r\n\r\nexport default class EncounterBuilderCard extends React.Component<Props> {\r\n    private getContent() {\r\n        let action: JSX.Element | null = null;\r\n        if (this.props.encounters.length === 0) {\r\n            action = (\r\n                <div className='section'>to start building an encounter, press the button below</div>\r\n            );\r\n        } else {\r\n            action = (\r\n                <div className='section'>select an encounter from the list to add monsters to it</div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='section'>on this page you can set up encounters</div>\r\n                <div className='section'>when you have created an encounter you can add monsters to it, then gauge its difficulty for a party of pcs</div>\r\n                <div className='divider'/>\r\n                {action}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            return (\r\n                <InfoCard getContent={() => this.getContent()} />\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { EncounterWave } from '../../models/encounter';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport InfoCard from './info-card';\r\n\r\ninterface Props {\r\n    wave: EncounterWave;\r\n    changeValue: (wave: EncounterWave, field: string, value: string) => void;\r\n    removeWave: (wave: EncounterWave) => void;\r\n}\r\n\r\nexport default class WaveCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const heading = (\r\n                <div className='heading'>\r\n                    <div className='title'>wave</div>\r\n                </div>\r\n            );\r\n\r\n            const content = (\r\n                <div>\r\n                    <div className='section'>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='wave name'\r\n                            value={this.props.wave.name}\r\n                            onChange={event => this.props.changeValue(this.props.wave, 'name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <ConfirmButton text='delete wave' callback={() => this.props.removeWave(this.props.wave)} />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            return (\r\n                <InfoCard getHeading={() => heading} getContent={() => content} />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Encounter } from '../../models/encounter';\r\n\r\ninterface Props {\r\n    encounter: Encounter;\r\n    selected: boolean;\r\n    setSelection: (encounter: Encounter) => void;\r\n}\r\n\r\nexport default class EncounterListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const slots = [];\r\n\r\n            this.props.encounter.slots.forEach(slot => {\r\n                let text = slot.monsterName || 'unnamed monster';\r\n                if (slot.count > 1) {\r\n                    text += ' x' + slot.count;\r\n                }\r\n                slots.push(<div key={slot.id} className='text'>{text}</div>);\r\n            });\r\n\r\n            if (slots.length === 0) {\r\n                slots.push(<div key='empty' className='text'>no monsters</div>);\r\n            }\r\n\r\n            this.props.encounter.waves.forEach(wave => {\r\n                slots.push(<div key={'name ' + wave.id} className='text subheading'>{wave.name || 'unnamed wave'}</div>);\r\n                wave.slots.forEach(slot => {\r\n                    let text = slot.monsterName || 'unnamed monster';\r\n                    if (slot.count > 1) {\r\n                        text += ' x' + slot.count;\r\n                    }\r\n                    slots.push(<div key={slot.id} className='text'>{text}</div>);\r\n                });\r\n                if (slots.length === 0) {\r\n                    slots.push(<div key={'empty ' + wave.id} className='text'>no monsters</div>);\r\n                }\r\n            });\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.encounter)}>\r\n                    <div className='heading'>{this.props.encounter.name || 'unnamed encounter'}</div>\r\n                    {slots}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Encounter, EncounterSlot, EncounterWave } from '../../models/encounter';\r\nimport { Monster, MonsterGroup } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\nimport EncounterCard from '../cards/encounter-card';\r\nimport ErrorCard from '../cards/error-card';\r\nimport FilterCard from '../cards/filter-card';\r\nimport InfoCard from '../cards/info-card';\r\nimport EncounterBuilderCard from '../cards/information/encounter-builder-card';\r\nimport MonsterCard from '../cards/monster-card';\r\nimport WaveCard from '../cards/wave-card';\r\nimport EncounterListItem from '../list-items/encounter-list-item';\r\nimport CardGroup from '../panels/card-group';\r\n\r\ninterface Props {\r\n    encounters: Encounter[];\r\n    selection: Encounter | null;\r\n    parties: Party[];\r\n    library: MonsterGroup[];\r\n    showHelp: boolean;\r\n    selectEncounter: (encounter: Encounter | null) => void;\r\n    addEncounter: () => void;\r\n    removeEncounter: () => void;\r\n    addEncounterSlot: (monster: Monster, waveID: string | null) => void;\r\n    removeEncounterSlot: (encounterSlot: EncounterSlot, waveID: string | null) => void;\r\n    addWave: () => void;\r\n    removeWave: (wave: EncounterWave) => void;\r\n    changeValue: (source: any, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, value: number) => void;\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n}\r\n\r\ninterface State {\r\n    filter: {\r\n        name: string,\r\n        challengeMin: number;\r\n        challengeMax: number;\r\n        category: string;\r\n        size: string;\r\n    };\r\n}\r\n\r\nexport default class EncounterBuilderScreen extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            filter: {\r\n                name: '',\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: 'all types',\r\n                size: 'all sizes'\r\n            }\r\n        };\r\n    }\r\n\r\n    private inEncounter(monster: Monster) {\r\n        let result = false;\r\n\r\n        if (this.props.selection) {\r\n            const group = Utils.getMonsterGroup(monster, this.props.library);\r\n\r\n            this.props.selection.slots.forEach(slot => {\r\n                if ((slot.monsterGroupName === group.name) && (slot.monsterName === monster.name)) {\r\n                    result = true;\r\n                }\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private matchMonster(monster: Monster) {\r\n        if (monster.challenge < this.state.filter.challengeMin) {\r\n            return false;\r\n        }\r\n\r\n        if (monster.challenge > this.state.filter.challengeMax) {\r\n            return false;\r\n        }\r\n\r\n        if (this.state.filter.name !== '') {\r\n            if (!Utils.match(this.state.filter.name, monster.name)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.filter.category !== 'all types') {\r\n            if (monster.category !== this.state.filter.category) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.filter.size !== 'all sizes') {\r\n            if (monster.size !== this.state.filter.size) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private changeFilterValue(type: 'name' | 'challengeMin' | 'challengeMax' | 'category' | 'size', value: any) {\r\n        // eslint-disable-next-line\r\n        this.state.filter[type] = value;\r\n        this.setState({\r\n            filter: this.state.filter\r\n        });\r\n    }\r\n\r\n    private nudgeFilterValue(type: 'challengeMin' | 'challengeMax', delta: number) {\r\n        const value = Utils.nudgeChallenge(this.state.filter[type], delta);\r\n        this.changeFilterValue(type, value);\r\n    }\r\n\r\n    private resetFilter() {\r\n        this.setState({\r\n            filter: {\r\n                name: '',\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: 'all types',\r\n                size: 'all sizes'\r\n            }\r\n        });\r\n    }\r\n\r\n    private getMonsterCards(slots: EncounterSlot[], waveID: string | null) {\r\n        const cards = [];\r\n\r\n        slots.forEach(slot => {\r\n            const monster = this.props.getMonster(slot.monsterName, slot.monsterGroupName);\r\n            if (monster) {\r\n                cards.push(\r\n                    <div className='column' key={monster.id}>\r\n                        <MonsterCard\r\n                            combatant={monster}\r\n                            slot={slot}\r\n                            encounter={this.props.selection as Encounter}\r\n                            mode={'view encounter'}\r\n                            nudgeValue={(source, type, delta) => this.props.nudgeValue(source, type, delta)}\r\n                            removeEncounterSlot={source => this.props.removeEncounterSlot(source, waveID)}\r\n                        />\r\n                    </div>\r\n                );\r\n            } else {\r\n                const index = slots.indexOf(slot);\r\n                const error = 'unknown monster: ' + slot.monsterName + ' in group ' + slot.monsterGroupName;\r\n                cards.push(\r\n                    <div className='column' key={index}>\r\n                        <ErrorCard\r\n                            getContent={() => <div className='section'>{error}</div>}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n        });\r\n\r\n        if (slots.length === 0) {\r\n            cards.push(\r\n                <div className='column' key='empty'>\r\n                    <InfoCard getContent={() => <div className='section'>no monsters</div>} />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return cards;\r\n    }\r\n\r\n    private getLibrarySection() {\r\n        if (!this.props.selection) {\r\n            return null;\r\n        }\r\n\r\n        const libraryCards = [];\r\n        libraryCards.push(\r\n            <div className='column' key='filter'>\r\n                <FilterCard\r\n                    filter={this.state.filter}\r\n                    changeValue={(type, value) => this.changeFilterValue(type, value)}\r\n                    nudgeValue={(type, delta) => this.nudgeFilterValue(type, delta)}\r\n                    resetFilter={() => this.resetFilter()}\r\n                />\r\n            </div>\r\n        );\r\n\r\n        const monsters: Monster[] = [];\r\n        if (this.props.selection) {\r\n            this.props.library.forEach(group => {\r\n                group.monsters.forEach(monster => {\r\n                    if (this.matchMonster(monster)) {\r\n                        monsters.push(monster);\r\n                    }\r\n                });\r\n            });\r\n            monsters.sort((a, b) => {\r\n                if (a.name < b.name) { return -1; }\r\n                if (a.name > b.name) { return 1; }\r\n                return 0;\r\n            });\r\n        }\r\n        monsters.forEach(monster => {\r\n            libraryCards.push(\r\n                <div className='column' key={monster.id}>\r\n                    <MonsterCard\r\n                        key={monster.id}\r\n                        combatant={monster}\r\n                        encounter={this.props.selection as Encounter}\r\n                        library={this.props.library}\r\n                        mode={'view encounter'}\r\n                        addEncounterSlot={(combatant, waveID) => this.props.addEncounterSlot(combatant, waveID)}\r\n                    />\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <CardGroup\r\n                heading='monster library'\r\n                content={libraryCards}\r\n                showToggle={true}\r\n            />\r\n        );\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let help = null;\r\n            if (this.props.showHelp) {\r\n                help = (\r\n                    <EncounterBuilderCard encounters={this.props.encounters} />\r\n                );\r\n            }\r\n\r\n            const encounters = [];\r\n            for (let n = 0; n !== this.props.encounters.length; ++n) {\r\n                const e = this.props.encounters[n];\r\n                encounters.push(\r\n                    <EncounterListItem\r\n                        key={e.id}\r\n                        encounter={e}\r\n                        selected={e === this.props.selection}\r\n                        setSelection={encounter => this.props.selectEncounter(encounter)}\r\n                    />\r\n                );\r\n            }\r\n\r\n            let encounterName;\r\n            const encounterCards = [];\r\n            let waves: JSX.Element[] = [];\r\n\r\n            if (this.props.selection) {\r\n                encounterName = this.props.selection.name || 'unnamed encounter';\r\n\r\n                encounterCards.push(\r\n                    <div className='column' key='info'>\r\n                        <EncounterCard\r\n                            selection={this.props.selection}\r\n                            parties={this.props.parties}\r\n                            changeValue={(type, value) => this.props.changeValue(this.props.selection, type, value)}\r\n                            addWave={() => this.props.addWave()}\r\n                            removeEncounter={() => this.props.removeEncounter()}\r\n                            getMonster={(monsterName, monsterGroupName) => this.props.getMonster(monsterName, monsterGroupName)}\r\n                        />\r\n                    </div>\r\n                );\r\n\r\n                this.getMonsterCards(this.props.selection.slots, null)\r\n                    .forEach(card => encounterCards.push(card));\r\n\r\n                waves = this.props.selection.waves.map(w => {\r\n                    const waveCards = [];\r\n                    waveCards.push(\r\n                        <div className='column' key='info'>\r\n                            <WaveCard\r\n                                wave={w}\r\n                                removeWave={wave => this.props.removeWave(wave)}\r\n                                changeValue={(source, field, value) => this.props.changeValue(source, field, value)}\r\n                            />\r\n                        </div>\r\n                    );\r\n\r\n                    this.getMonsterCards(w.slots, w.id)\r\n                        .forEach(card => waveCards.push(card));\r\n\r\n                    return (\r\n                        <CardGroup\r\n                            key={w.id}\r\n                            heading={w.name || 'unnamed wave'}\r\n                            content={waveCards}\r\n                            showToggle={true}\r\n                        />\r\n                    );\r\n                });\r\n            }\r\n\r\n            return (\r\n                <div className='encounter-builder row collapse'>\r\n                    <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                        {help}\r\n                        <button onClick={() => this.props.addEncounter()}>add a new encounter</button>\r\n                        {encounters}\r\n                    </div>\r\n                    <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                        <CardGroup\r\n                            content={encounterCards}\r\n                            heading={encounterName}\r\n                            showClose={this.props.selection !== null}\r\n                            close={() => this.props.selectEncounter(null)}\r\n                        />\r\n                        {waves}\r\n                        {this.getLibrarySection()}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { MonsterGroup } from '../../models/monster-group';\r\n\r\ninterface Props {\r\n    library: MonsterGroup[];\r\n    addOpenGameContent: () => void;\r\n}\r\n\r\nexport default class HomeScreen extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            let monsters = null;\r\n            if (this.props.library.length === 0) {\r\n                monsters = (\r\n                    <div>\r\n                        <div className='divider' />\r\n                        <div className='text'>\r\n                            <div>\r\n                                since your collection of monsters is empty, you might want to start by pressing the button below to add monsters from the&nbsp;\r\n                                <a href='http://dnd.wizards.com/articles/features/systems-reference-document-srd' target='_blank' rel='noopener noreferrer'>\r\n                                    system reference document\r\n                                </a>\r\n                            </div>\r\n                        </div>\r\n                        <div className='text'>\r\n                            <button onClick={() => this.props.addOpenGameContent()}>add monsters</button>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='home scrollable'>\r\n                    <div className='vertical-center-outer'>\r\n                        <div className='vertical-center-middle'>\r\n                            <div className='vertical-center-inner'>\r\n                                <div className='welcome-panel'>\r\n                                    <div className='heading'>welcome to <b>dojo</b></div>\r\n                                    <div className='text'>\r\n                                        <div><b>dojo</b> is an app for dms of dungeons and dragons fifth edition</div>\r\n                                    </div>\r\n                                    <div className='text'>\r\n                                        <div>\r\n                                            with <b>dojo</b> you can:\r\n                                            <ul>\r\n                                                <li>build unique, challenging monsters</li>\r\n                                                <li>create encounters of just the right difficulty for your players</li>\r\n                                                <li>design intricate tactical maps</li>\r\n                                                <li>run combat without the book-keeping</li>\r\n                                            </ul>\r\n                                        </div>\r\n                                    </div>\r\n                                    {monsters}\r\n                                    <div className='divider' />\r\n                                    <div className='text'>\r\n                                        <div>use the buttons at the bottom of the screen to access the app's features</div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { MapFolio } from '../../../models/map-folio';\r\n\r\nimport InfoCard from '../info-card';\r\n\r\ninterface Props {\r\n    mapFolios: MapFolio[];\r\n}\r\n\r\nexport default class MapFoliosCard extends React.Component<Props> {\r\n    private getContent() {\r\n        let action: JSX.Element | null = null;\r\n        if (this.props.mapFolios.length === 0) {\r\n            action = (\r\n                <div className='section'>to start a new folio, press the button below</div>\r\n            );\r\n        } else {\r\n            action = (\r\n                <div className='section'>select a map folio from the list to see the maps it contains</div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='section'>on this page you can set up folios containing tactical maps</div>\r\n                <div className='section'>when you have created a map you can use it in encounters</div>\r\n                <div className='divider'/>\r\n                {action}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            return (\r\n                <InfoCard getContent={() => this.getContent()} />\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Map } from '../../models/map-folio';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    map: Map;\r\n    changeValue: (map: Map, field: string, value: string) => void;\r\n    editMap: (map: Map) => void;\r\n    removeMap: (map: Map) => void;\r\n}\r\n\r\nexport default class MapCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div className='card map'>\r\n                    <div className='heading'>\r\n                        <div className='title'>{this.props.map.name || 'unnamed map'}</div>\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='map name'\r\n                                value={this.props.map.name}\r\n                                onChange={event => this.props.changeValue(this.props.map, 'name', event.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='section centered'>\r\n                            <MapPanel\r\n                                map={this.props.map}\r\n                                mode='thumbnail'\r\n                            />\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='section'>\r\n                            <button onClick={() => this.props.editMap(this.props.map)}>edit map</button>\r\n                            <ConfirmButton text='delete map' callback={() => this.props.removeMap(this.props.map)} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { MapFolio } from '../../models/map-folio';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport InfoCard from './info-card';\r\n\r\ninterface Props {\r\n    selection: MapFolio;\r\n    changeValue: (source: MapFolio, field: string, value: string) => void;\r\n    addMap: () => void;\r\n    removeMapFolio: () => void;\r\n}\r\n\r\nexport default class MapFolioCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const heading = (\r\n                <div className='heading'>\r\n                    <div className='title'>map folio</div>\r\n                </div>\r\n            );\r\n\r\n            const content = (\r\n                <div>\r\n                    <div className='section'>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='folio name'\r\n                            value={this.props.selection.name}\r\n                            onChange={event => this.props.changeValue(this.props.selection, 'name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <button onClick={() => this.props.addMap()}>add a new map</button>\r\n                        <ConfirmButton text='delete folio' callback={() => this.props.removeMapFolio()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            return (\r\n                <InfoCard getHeading={() => heading} getContent={() => content} />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { MapFolio } from '../../models/map-folio';\r\n\r\ninterface Props {\r\n    mapFolio: MapFolio;\r\n    selected: boolean;\r\n    setSelection: (mapFolio: MapFolio) => void;\r\n}\r\n\r\nexport default class MapFolioListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const maps = [];\r\n            for (let n = 0; n !== this.props.mapFolio.maps.length; ++n) {\r\n                const map = this.props.mapFolio.maps[n];\r\n                const name = map.name || 'unnamed map';\r\n                maps.push(<div key={map.id} className='text'>{name}</div>);\r\n            }\r\n            if (maps.length === 0) {\r\n                maps.push(<div key='empty' className='text'>no maps</div>);\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.mapFolio)}>\r\n                    <div className='heading'>{this.props.mapFolio.name || 'unnamed folio'}</div>\r\n                    {maps}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Map, MapFolio } from '../../models/map-folio';\r\n\r\nimport InfoCard from '../cards/info-card';\r\nimport MapFoliosCard from '../cards/information/map-folios-card';\r\nimport MapCard from '../cards/map-card';\r\nimport MapFolioCard from '../cards/map-folio-card';\r\nimport MapFolioListItem from '../list-items/map-folio-list-item';\r\nimport CardGroup from '../panels/card-group';\r\n\r\ninterface Props {\r\n    mapFolios: MapFolio[];\r\n    selection: MapFolio | null;\r\n    showHelp: boolean;\r\n    selectMapFolio: (mapFolio: MapFolio | null) => void;\r\n    addMapFolio: () => void;\r\n    removeMapFolio: () => void;\r\n    addMap: () => void;\r\n    editMap: (map: Map) => void;\r\n    removeMap: (map: Map) => void;\r\n    changeValue: (source: {}, field: string, value: any) => void;\r\n}\r\n\r\nexport default class MapFoliosScreen extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            let help = null;\r\n            if (this.props.showHelp) {\r\n                help = (\r\n                    <MapFoliosCard mapFolios={this.props.mapFolios} />\r\n                );\r\n            }\r\n\r\n            const folios = [];\r\n            for (let n = 0; n !== this.props.mapFolios.length; ++n) {\r\n                const mapFolio = this.props.mapFolios[n];\r\n                folios.push(\r\n                    <MapFolioListItem\r\n                        key={mapFolio.id}\r\n                        mapFolio={mapFolio}\r\n                        selected={mapFolio === this.props.selection}\r\n                        setSelection={f => this.props.selectMapFolio(f)}\r\n                    />\r\n                );\r\n            }\r\n\r\n            let folio = null;\r\n            if (this.props.selection) {\r\n                const folioCards = [];\r\n\r\n                folioCards.push(\r\n                    <div className='column' key='info'>\r\n                        <MapFolioCard\r\n                            selection={this.props.selection}\r\n                            addMap={() => this.props.addMap()}\r\n                            removeMapFolio={() => this.props.removeMapFolio()}\r\n                            changeValue={(source, field, value) => this.props.changeValue(source, field, value)}\r\n                        />\r\n                    </div>\r\n                );\r\n\r\n                this.props.selection.maps.forEach(m => {\r\n                    folioCards.push(\r\n                        <div className='column' key={m.id}>\r\n                            <MapCard\r\n                                map={m}\r\n                                editMap={map => this.props.editMap(map)}\r\n                                removeMap={map => this.props.removeMap(map)}\r\n                                changeValue={(source, type, value) => this.props.changeValue(source, type, value)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                if (this.props.selection.maps.length === 0) {\r\n                    folioCards.push(\r\n                        <div className='column' key='empty'>\r\n                            <InfoCard getContent={() => <div className='section'>no maps</div>} />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                folio = (\r\n                    <div>\r\n                        <CardGroup\r\n                            content={folioCards}\r\n                            heading={this.props.selection.name || 'unnamed folio'}\r\n                            showClose={this.props.selection !== null}\r\n                            close={() => this.props.selectMapFolio(null)}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='map-builder row collapse'>\r\n                    <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                        {help}\r\n                        <button onClick={() => this.props.addMapFolio()}>add a new map folio</button>\r\n                        {folios}\r\n                    </div>\r\n                    <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                        {folio}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport InfoCard from '../info-card';\r\n\r\nexport default class MonsterLibraryCard extends React.Component {\r\n    private getContent() {\r\n        return (\r\n            <div>\r\n                <div className='section'>you can maintain your menagerie of monsters here</div>\r\n                <div className='divider'/>\r\n                <div className='section'>select a monster group from the list to see stat blocks for monsters in that group</div>\r\n                <div className='section'>to quickly find a monster, type its name into the filter box</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <InfoCard getContent={() => this.getContent()} />\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { MonsterGroup } from '../../models/monster-group';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport InfoCard from './info-card';\r\n\r\ninterface Props {\r\n    selection: MonsterGroup;\r\n    filter: string | null;\r\n    changeValue: (field: string, value: string) => void;\r\n    addMonster: () => void;\r\n    sortMonsters: () => void;\r\n    removeMonsterGroup: () => void;\r\n}\r\n\r\nexport default class MonsterGroupCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const heading = (\r\n                <div className='heading'>\r\n                    <div className='title'>monster group</div>\r\n                </div>\r\n            );\r\n\r\n            const content = (\r\n                <div>\r\n                    <div className='section'>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='group name'\r\n                            value={this.props.selection.name}\r\n                            disabled={!!this.props.filter}\r\n                            onChange={event => this.props.changeValue('name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.addMonster()}>add a new monster</button>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.sortMonsters()}>sort monsters</button>\r\n                        <ConfirmButton text='delete group' callback={() => this.props.removeMonsterGroup()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            return (\r\n                <InfoCard getHeading={() => heading} getContent={() => content} />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { MonsterGroup } from '../../models/monster-group';\r\n\r\ninterface Props {\r\n    group: MonsterGroup;\r\n    selected: boolean;\r\n    filter: string;\r\n    setSelection: (group: MonsterGroup) => void;\r\n}\r\n\r\nexport default class MonsterGroupListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const matchGroup = Utils.match(this.props.filter, this.props.group.name);\r\n\r\n            const monsters = [];\r\n            for (let n = 0; n !== this.props.group.monsters.length; ++n) {\r\n                const monster = this.props.group.monsters[n];\r\n                const matchMonster = Utils.match(this.props.filter, monster.name);\r\n                if (matchGroup || matchMonster) {\r\n                    let name = monster.name;\r\n                    if (!name) {\r\n                        name = 'unnamed monster';\r\n                    }\r\n                    monsters.push(<div key={monster.id} className='text'>{name}</div>);\r\n                }\r\n            }\r\n            if (monsters.length === 0) {\r\n                monsters.push(<div key='empty' className='text'>no monsters</div>);\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.group)}>\r\n                    <div className='heading'>{this.props.group.name || 'unnamed group'}</div>\r\n                    {monsters}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Monster, MonsterGroup } from '../../models/monster-group';\r\n\r\nimport InfoCard from '../cards/info-card';\r\nimport MonsterLibraryCard from '../cards/information/monster-library-card';\r\nimport MonsterCard from '../cards/monster-card';\r\nimport MonsterGroupCard from '../cards/monster-group-card';\r\nimport MonsterGroupListItem from '../list-items/monster-group-list-item';\r\nimport CardGroup from '../panels/card-group';\r\n\r\ninterface Props {\r\n    library: MonsterGroup[];\r\n    selection: MonsterGroup | null;\r\n    showHelp: boolean;\r\n    filter: string;\r\n    selectMonsterGroup: (group: MonsterGroup | null) => void;\r\n    addMonsterGroup: () => void;\r\n    removeMonsterGroup: () => void;\r\n    addMonster: () => void;\r\n    removeMonster: (monster: Monster) => void;\r\n    editMonster: (monster: Monster) => void;\r\n    cloneMonster: (monster: Monster, name: string) => void;\r\n    sortMonsters: () => void;\r\n    moveToGroup: (monster: Monster, groupID: string) => void;\r\n    changeValue: (source: any, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, value: number) => void;\r\n}\r\n\r\nexport default class MonsterLibraryScreen extends React.Component<Props> {\r\n    private showMonsterGroup(group: MonsterGroup) {\r\n        let result = Utils.match(this.props.filter, group.name);\r\n\r\n        if (!result) {\r\n            group.monsters.forEach(monster => {\r\n                result = Utils.match(this.props.filter, monster.name) || result;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let help = null;\r\n            if (this.props.showHelp) {\r\n                help = (\r\n                    <MonsterLibraryCard />\r\n                );\r\n            }\r\n\r\n            const listItems = [];\r\n            for (let n = 0; n !== this.props.library.length; ++n) {\r\n                const group = this.props.library[n];\r\n                if (this.showMonsterGroup(group)) {\r\n                    listItems.push(\r\n                        <MonsterGroupListItem\r\n                            key={group.id}\r\n                            group={group}\r\n                            filter={this.props.filter}\r\n                            selected={group === this.props.selection}\r\n                            setSelection={grp => this.props.selectMonsterGroup(grp)}\r\n                        />\r\n                    );\r\n                }\r\n            }\r\n\r\n            const cards = [];\r\n\r\n            if (this.props.selection) {\r\n                cards.push(\r\n                    <div className='column' key='info'>\r\n                        <MonsterGroupCard\r\n                            selection={this.props.selection}\r\n                            filter={this.props.filter}\r\n                            addMonster={() => this.props.addMonster()}\r\n                            sortMonsters={() => this.props.sortMonsters()}\r\n                            changeValue={(type, value) => this.props.changeValue(this.props.selection, type, value)}\r\n                            removeMonsterGroup={() => this.props.removeMonsterGroup()}\r\n                        />\r\n                    </div>\r\n                );\r\n\r\n                const monsters = this.props.selection.monsters.filter(monster => {\r\n                    return Utils.match(this.props.filter, monster.name);\r\n                });\r\n\r\n                if (monsters.length !== 0) {\r\n                    monsters.forEach(m => {\r\n                        cards.push(\r\n                            <div className='column' key={m.id}>\r\n                                <MonsterCard\r\n                                    combatant={m}\r\n                                    mode={'view editable'}\r\n                                    library={this.props.library}\r\n                                    changeValue={(source, type, value) => this.props.changeValue(source, type, value)}\r\n                                    nudgeValue={(source, type, delta) => this.props.nudgeValue(source, type, delta)}\r\n                                    moveToGroup={(monster, groupID) => this.props.moveToGroup(monster, groupID)}\r\n                                    removeMonster={monster => this.props.removeMonster(monster)}\r\n                                    editMonster={monster => this.props.editMonster(monster)}\r\n                                    cloneMonster={(monster, monsterName) => this.props.cloneMonster(monster, monsterName)}\r\n                                />\r\n                            </div>\r\n                        );\r\n                    });\r\n                } else {\r\n                    cards.push(\r\n                        <div className='column' key='empty'>\r\n                            <InfoCard getContent={() => <div className='section'>no monsters</div>} />\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n\r\n            let name;\r\n            if (this.props.selection) {\r\n                name = this.props.selection.name;\r\n                if (!name) {\r\n                    name = 'unnamed group';\r\n                }\r\n            }\r\n\r\n            return (\r\n                <div className='monster-library row collapse'>\r\n                    <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                        {help}\r\n                        <button onClick={() => this.props.addMonsterGroup()}>add a new monster group</button>\r\n                        {listItems}\r\n                    </div>\r\n                    <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                        <CardGroup\r\n                            content={cards}\r\n                            heading={name}\r\n                            showClose={this.props.selection !== null}\r\n                            close={() => this.props.selectMonsterGroup(null)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Party } from '../../../models/party';\r\n\r\nimport InfoCard from '../info-card';\r\n\r\ninterface Props {\r\n    parties: Party[];\r\n}\r\n\r\nexport default class PartiesCard extends React.Component<Props> {\r\n    private getContent() {\r\n        let action: JSX.Element | null = null;\r\n        if (this.props.parties.length === 0) {\r\n            action = (\r\n                <div className='section'>to start adding a party, press the button below</div>\r\n            );\r\n        } else {\r\n            action = (\r\n                <div className='section'>select a party from the list to see pc details</div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='section'>this page is where you can tell dojo all about your pcs</div>\r\n                <div className='section'>you can add a party for each of your gaming groups</div>\r\n                <div className='divider'/>\r\n                {action}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            return (\r\n                <InfoCard getContent={() => this.getContent()} />\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Party } from '../../models/party';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport InfoCard from './info-card';\r\n\r\ninterface Props {\r\n    selection: Party;\r\n    changeValue: (field: string, value: string) => void;\r\n    addPC: () => void;\r\n    sortPCs: () => void;\r\n    removeParty: () => void;\r\n}\r\n\r\nexport default class PartyCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const activePCs = this.props.selection.pcs.filter(pc => pc.active);\r\n\r\n            const languages = activePCs\r\n                .map(pc => pc.languages)\r\n                .join(', ')\r\n                .split(/[ ,;]+/)\r\n                .reduce((array: string[], value) => {\r\n                    if (array.indexOf(value) === -1) {\r\n                        array.push(value);\r\n                    }\r\n                    return array;\r\n                }, [])\r\n                .sort((a, b) => {\r\n                    if (a === 'Common') {\r\n                        return -1;\r\n                    }\r\n                    if (b === 'Common') {\r\n                        return 1;\r\n                    }\r\n                    return a.localeCompare(b);\r\n                })\r\n                .join(', ');\r\n\r\n            let insightSummary = '-';\r\n            let investigationSummary = '-';\r\n            let perceptionSummary = '-';\r\n\r\n            if (activePCs.length !== 0) {\r\n                const insight: { min: number | null, max: number | null } = { min: null, max: null };\r\n                const invest: { min: number | null, max: number | null } = { min: null, max: null };\r\n                const percep: { min: number | null, max: number | null } = { min: null, max: null };\r\n\r\n                activePCs.forEach(pc => {\r\n                    insight.min = insight.min === null ? pc.passiveInsight : Math.min(insight.min, pc.passiveInsight);\r\n                    insight.max = insight.max === null ? pc.passiveInsight : Math.max(insight.max, pc.passiveInsight);\r\n                    invest.min = invest.min === null ? pc.passiveInvestigation : Math.min(invest.min, pc.passiveInvestigation);\r\n                    invest.max = invest.max === null ? pc.passiveInvestigation : Math.max(invest.max, pc.passiveInvestigation);\r\n                    percep.min = percep.min === null ? pc.passivePerception : Math.min(percep.min, pc.passivePerception);\r\n                    percep.max = percep.max === null ? pc.passivePerception : Math.max(percep.max, pc.passivePerception);\r\n                });\r\n\r\n                insightSummary = insight.min === insight.max ? (insight.min as number).toString() : insight.min + ' - ' + insight.max;\r\n                investigationSummary = invest.min === invest.max ? (invest.min as number).toString() : invest.min + ' - ' + invest.max;\r\n                perceptionSummary = percep.min === percep.max ? (percep.min as number).toString() : percep.min + ' - ' + percep.max;\r\n            }\r\n\r\n            const heading = (\r\n                <div className='heading'>\r\n                    <div className='title'>party</div>\r\n                </div>\r\n            );\r\n\r\n            const content = (\r\n                <div>\r\n                    <div className='section'>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='party name'\r\n                            value={this.props.selection.name}\r\n                            onChange={event => this.props.changeValue('name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section' style={{ display: languages !== '' ? 'block' : 'none' }}>\r\n                        <div className='subheading'>languages</div>\r\n                    </div>\r\n                    <div className='section'>\r\n                        {languages}\r\n                    </div>\r\n                    <div className='section'>\r\n                        <div className='subheading'>passive skills</div>\r\n                    </div>\r\n                    <div className='table'>\r\n                        <div>\r\n                            <div className='cell three'><b>insight</b></div>\r\n                            <div className='cell three'><b>invest.</b></div>\r\n                            <div className='cell three'><b>percep.</b></div>\r\n                        </div>\r\n                        <div>\r\n                            <div className='cell three'>{insightSummary}</div>\r\n                            <div className='cell three'>{investigationSummary}</div>\r\n                            <div className='cell three'>{perceptionSummary}</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                    <button onClick={() => this.props.addPC()}>add a new pc</button>\r\n                        <button onClick={() => this.props.sortPCs()}>sort pcs</button>\r\n                        <ConfirmButton text='delete party' callback={() => this.props.removeParty()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            return (\r\n                <InfoCard getHeading={() => heading} getContent={() => content} />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Party } from '../../models/party';\r\n\r\ninterface Props {\r\n    party: Party;\r\n    selected: boolean;\r\n    setSelection: (party: Party) => void;\r\n}\r\n\r\nexport default class PartyListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const pcs = [];\r\n            for (let n = 0; n !== this.props.party.pcs.length; ++n) {\r\n                const pc = this.props.party.pcs[n];\r\n                let name = pc.name;\r\n                if (pc.player) {\r\n                    name += ' (' + pc.player + ')';\r\n                }\r\n                if (!name) {\r\n                    name = 'unnamed pc';\r\n                }\r\n                pcs.push(<div key={pc.id} className='text'>{name}</div>);\r\n            }\r\n            if (pcs.length === 0) {\r\n                pcs.push(<div key='empty' className='text'>no pcs</div>);\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.party)}>\r\n                    <div className='heading'>{this.props.party.name || 'unnamed party'}</div>\r\n                    {pcs}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Party, PC } from '../../models/party';\r\n\r\nimport InfoCard from '../cards/info-card';\r\nimport PartiesCard from '../cards/information/parties-card';\r\nimport PartyCard from '../cards/party-card';\r\nimport PCCard from '../cards/pc-card';\r\nimport PartyListItem from '../list-items/party-list-item';\r\nimport CardGroup from '../panels/card-group';\r\n\r\ninterface Props {\r\n    parties: Party[];\r\n    selection: Party | null;\r\n    showHelp: boolean;\r\n    selectParty: (party: Party | null) => void;\r\n    addParty: () => void;\r\n    removeParty: () => void;\r\n    addPC: () => void;\r\n    removePC: (pc: PC) => void;\r\n    sortPCs: () => void;\r\n    changeValue: (source: any, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, value: number) => void;\r\n}\r\n\r\nexport default class PartiesScreen extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            let help = null;\r\n            if (this.props.showHelp) {\r\n                help = (\r\n                    <PartiesCard parties={this.props.parties}/>\r\n                );\r\n            }\r\n\r\n            const parties = [];\r\n            for (let n = 0; n !== this.props.parties.length; ++n) {\r\n                const p = this.props.parties[n];\r\n                parties.push(\r\n                    <PartyListItem\r\n                        key={p.id}\r\n                        party={p}\r\n                        selected={p === this.props.selection}\r\n                        setSelection={party => this.props.selectParty(party)}\r\n                    />\r\n                );\r\n            }\r\n\r\n            const activeCards: JSX.Element[] = [];\r\n            const inactiveCards: JSX.Element[] = [];\r\n\r\n            if (this.props.selection) {\r\n                activeCards.push(\r\n                    <div className='column' key='info'>\r\n                        <PartyCard\r\n                            selection={this.props.selection}\r\n                            addPC={() => this.props.addPC()}\r\n                            sortPCs={() => this.props.sortPCs()}\r\n                            changeValue={(type, value) => this.props.changeValue(this.props.selection, type, value)}\r\n                            removeParty={() => this.props.removeParty()}\r\n                        />\r\n                    </div>\r\n                );\r\n\r\n                const activePCs = this.props.selection.pcs.filter(pc => pc.active);\r\n                activePCs.forEach(activePC => {\r\n                    activeCards.push(\r\n                        <div className='column' key={activePC.id}>\r\n                            <PCCard\r\n                                combatant={activePC}\r\n                                mode={'edit'}\r\n                                changeValue={(pc, type, value) => this.props.changeValue(pc, type, value)}\r\n                                nudgeValue={(pc, type, delta) => this.props.nudgeValue(pc, type, delta)}\r\n                                removePC={pc => this.props.removePC(pc)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                const inactivePCs = this.props.selection.pcs.filter(pc => !pc.active);\r\n                inactivePCs.forEach(inactivePC => {\r\n                    inactiveCards.push(\r\n                        <div className='column' key={inactivePC.id}>\r\n                            <PCCard\r\n                                combatant={inactivePC}\r\n                                mode={'edit'}\r\n                                changeValue={(pc, type, value) => this.props.changeValue(pc, type, value)}\r\n                                nudgeValue={(pc, type, delta) => this.props.nudgeValue(pc, type, delta)}\r\n                                removePC={pc => this.props.removePC(pc)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                if (activePCs.length === 0) {\r\n                    activeCards.push(\r\n                        <div className='column' key='empty'>\r\n                            <InfoCard getContent={() => <div className='section'>no pcs</div>} />\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n\r\n            let name;\r\n            if (this.props.selection) {\r\n                name = this.props.selection.name || 'unnamed party';\r\n            }\r\n\r\n            return (\r\n                <div className='parties row collapse'>\r\n                    <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                        {help}\r\n                        <button onClick={() => this.props.addParty()}>add a new party</button>\r\n                        {parties}\r\n                    </div>\r\n                    <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                        <CardGroup\r\n                            content={activeCards}\r\n                            heading={name}\r\n                            showClose={this.props.selection !== null}\r\n                            close={() => this.props.selectParty(null)}\r\n                            hidden={!this.props.selection}\r\n                        />\r\n                        <CardGroup\r\n                            content={inactiveCards}\r\n                            heading='inactive pcs'\r\n                            showClose={false}\r\n                            hidden={inactiveCards.length === 0}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Checkbox from '../controls/checkbox';\r\nimport ConfirmButton from '../controls/confirm-button';\r\n\r\nimport pkg from '../../../package.json';\r\n\r\ninterface Props {\r\n    options: {\r\n        showHelp: boolean;\r\n    };\r\n    resetAll: () => void;\r\n    changeValue: (source: {}, field: string, value: any) => void;\r\n}\r\n\r\nexport default class AboutModal extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            /* tslint:disable:max-line-length */\r\n            return (\r\n                <div className='about'>\r\n                    <div className='row'>\r\n                        <div className='columns small-6 medium-6 large-6 list-column'>\r\n                            <div className='heading'>about</div>\r\n                            <div className='section'>dojo by <a href='mailto:andy.aiken@live.co.uk'>andy aiken</a></div>\r\n                            <div className='section'>version <b>{pkg.version}</b></div>\r\n                            <div className='section'>if you would like to contribut to this project, you can do so <a href='https://github.com/andyaiken/dojo' target='_blank' rel='noopener noreferrer'>here</a></div>\r\n                            <div className='section'>dungeons and dragons copyright wizards of the coast</div>\r\n                        </div>\r\n                        <div className='columns small-6 medium-6 large-6 list-column'>\r\n                            <div className='heading'>options</div>\r\n                            <ConfirmButton text='clear all data' callback={() => this.props.resetAll()} />\r\n                            <Checkbox\r\n                                label='show help cards'\r\n                                checked={this.props.options.showHelp}\r\n                                changeValue={value => this.props.changeValue(this.props.options, 'showHelp', value)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className='row'>\r\n                        <div className='columns small-12 medium-12 large-12 list-column'>\r\n                            <div className='heading'>open game license</div>\r\n                            <div className='section'>The following text is the property of Wizards of the Coast, Inc. and is Copyright 2000 Wizards of the Coast, Inc ('Wizards'). All Rights Reserved.</div>\r\n                            <ol>\r\n                                <li>Definitions: (a)'Contributors' means the copyright and/or trademark owners who have contributed Open Game Content; (b)'Derivative Material' means copyrighted material including derivative works and translations (including into other computer languages), potation, modification, correction, addition, extension, upgrade, improvement, compilation, abridgment or other form in which an existing work may be recast, transformed or adapted; (c) 'Distribute' means to reproduce, license, rent, lease, sell, broadcast, publicly display, transmit or otherwise distribute; (d)'Open Game Content' means the game mechanic and includes the methods, procedures, processes and routines to the extent such content does not embody the Product Identity and is an enhancement over the prior art and any additional content clearly identified as Open Game Content by the Contributor, and means any work covered by this License, including translations and derivative works under copyright law, but specifically excludes Product Identity. (e) 'Product Identity' means product and product line names, logos and identifying marks including trade dress; artifacts; creatures characters; stories, storylines, plots, thematic elements, dialogue, incidents, language, artwork, symbols, designs, depictions, likenesses, formats, poses, concepts, themes and graphic, photographic and other visual or audio representations; names and descriptions of characters, spells, enchantments, personalities, teams, personas, likenesses and special abilities; places, locations, environments, creatures, equipment, magical or supernatural abilities or effects, logos, symbols, or graphic designs; and any other trademark or registered trademark clearly identified as Product identity by the owner of the Product Identity, and which specifically excludes the Open Game Content; (f) 'Trademark' means the logos, names, mark, sign, motto, designs that are used by a Contributor to identify itself or its products or the associated products contributed to the Open Game License by the Contributor (g) 'Use', 'Used' or 'Using' means to use, Distribute, copy, edit, format, modify, translate and otherwise create Derivative Material of Open Game Content. (h) 'You' or 'Your' means the licensee in terms of this agreement.</li>\r\n                                <li>The License: This License applies to any Open Game Content that contains a notice indicating that the Open Game Content may only be Used under and in terms of this License. You must affix such a notice to any Open Game Content that you Use. No terms may be added to or subtracted from this License except as described by the License itself. No other terms or conditions may be applied to any Open Game Content distributed using this License.</li>\r\n                                <li>Offer and Acceptance: By Using the Open Game Content You indicate Your acceptance of the terms of this License.</li>\r\n                                <li>Grant and Consideration: In consideration for agreeing to use this License, the Contributors grant You a perpetual, worldwide, royalty-free, non-exclusive license with the exact terms of this License to Use, the Open Game Content.</li>\r\n                                <li>Representation of Authority to Contribute: If You are contributing original material as Open Game Content, You represent that Your Contributions are Your original creation and/or You have sufficient rights to grant the rights conveyed by this License.</li>\r\n                                <li>Notice of License Copyright: You must update the COPYRIGHT NOTICE portion of this License to include the exact text of the COPYRIGHT NOTICE of any Open Game Content You are copying, modifying or distributing, and You must add the title, the copyright date, and the copyright holder's name to the COPYRIGHT NOTICE of any original Open Game Content you Distribute.</li>\r\n                                <li>Use of Product Identity: You agree not to Use any Product Identity, including as an indication as to compatibility, except as expressly licensed in another, independent Agreement with the owner of each element of that Product Identity. You agree not to indicate compatibility or co-adaptability with any Trademark or Registered Trademark in conjunction with a work containing Open Game Content except as expressly licensed in another, independent Agreement with the owner of such Trademark or Registered Trademark. The use of any Product Identity in Open Game Content does not constitute a challenge to the ownership of that Product Identity. The owner of any Product Identity used in Open Game Content shall retain all rights, title and interest in and to that Product Identity.</li>\r\n                                <li>Identification: If you distribute Open Game Content You must clearly indicate which portions of the work that you are distributing are Open Game Content.</li>\r\n                                <li>Updating the License: Wizards or its designated Agents may publish updated versions of this License. You may use any authorized version of this License to copy, modify and distribute any Open Game Content originally distributed under any version of this License.</li>\r\n                                <li>Copy of this License: You MUST include a copy of this License with every copy of the Open Game Content You Distribute.</li>\r\n                                <li>Use of Contributor Credits: You may not market or advertise the Open Game Content using the name of any Contributor unless You have written permission from the Contributor to do so.</li>\r\n                                <li>Inability to Comply: If it is impossible for You to comply with any of the terms of this License with respect to some or all of the Open Game Content due to statute, judicial order, or governmental regulation then You may not Use any Open Game Material so affected.</li>\r\n                                <li>Termination: This License will terminate automatically if You fail to comply with all terms herein and fail to cure such breach within 30 days of becoming aware of the breach. All sublicenses shall survive the termination of this License.</li>\r\n                                <li>Reformation: If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable.</li>\r\n                                <li>COPYRIGHT NOTICE Open Game License v 1.0 Copyright 2000, Wizards of the Coast, Inc.</li>\r\n                            </ol>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n            /* tslint:enable:max-line-length */\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { CombatSetup } from '../../models/combat';\r\nimport { Encounter, EncounterSlot } from '../../models/encounter';\r\nimport { MapFolio } from '../../models/map-folio';\r\nimport { Monster } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport Selector from '../controls/selector';\r\nimport DifficultyChartPanel from '../panels/difficulty-chart-panel';\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    combatSetup: CombatSetup;\r\n    parties: Party[];\r\n    encounters: Encounter[];\r\n    mapFolios: MapFolio[];\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n    notify: () => void;\r\n}\r\n\r\ninterface State {\r\n    combatSetup: CombatSetup;\r\n}\r\n\r\nexport default class CombatStartModal extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        parties: null,\r\n        mapFolios: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            combatSetup: props.combatSetup\r\n        };\r\n    }\r\n\r\n    private setParty(partyID: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.partyID = partyID;\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        }, () => this.props.notify());\r\n    }\r\n\r\n    private setEncounter(encounterID: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.encounterID = encounterID;\r\n        const enc = this.props.encounters.find(e => e.id === encounterID);\r\n        if (enc) {\r\n            // eslint-disable-next-line\r\n            this.state.combatSetup.monsterNames = Utils.getMonsterNames(enc);\r\n        }\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        }, () => this.props.notify());\r\n    }\r\n\r\n    private setFolioID(id: string) {\r\n        if (id && (id !== '')) {\r\n            const folio = this.props.mapFolios.find(f => f.id === id);\r\n            if (folio) {\r\n                // eslint-disable-next-line\r\n                this.state.combatSetup.folioID = folio.id;\r\n                // eslint-disable-next-line\r\n                this.state.combatSetup.mapID = folio.maps.length === 1 ? folio.maps[0].id : null;\r\n            }\r\n        } else {\r\n            // eslint-disable-next-line\r\n            this.state.combatSetup.folioID = null;\r\n            // eslint-disable-next-line\r\n            this.state.combatSetup.mapID = null;\r\n        }\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        });\r\n    }\r\n\r\n    private setMapID(id: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.mapID = id;\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        });\r\n    }\r\n\r\n    private setWave(waveID: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.waveID = waveID;\r\n        const enc = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n        if (enc) {\r\n            const wave = enc.waves.find(w => w.id === waveID);\r\n            if (wave) {\r\n                // eslint-disable-next-line\r\n                this.state.combatSetup.monsterNames = Utils.getMonsterNames(wave);\r\n            }\r\n        }\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        }, () => this.props.notify());\r\n    }\r\n\r\n    private setEncounterInitMode(mode: 'manual' | 'individual' | 'group') {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.encounterInitMode = mode;\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        });\r\n    }\r\n\r\n    private changeName(slotID: string, index: number, name: string) {\r\n        const slot = this.state.combatSetup.monsterNames.find(s => s.id === slotID);\r\n        if (slot) {\r\n            slot.names[index] = name;\r\n            this.setState({\r\n                combatSetup: this.state.combatSetup\r\n            });\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    private getPartySection() {\r\n        if (this.props.parties.length === 0) {\r\n            return (\r\n                <div className='section'>you have not defined any parties</div>\r\n            );\r\n        }\r\n\r\n        const partyOptions = this.props.parties.map(party => {\r\n            return {\r\n                id: party.id,\r\n                text: party.name || 'unnamed party'\r\n            };\r\n        });\r\n\r\n        let partyContent = null;\r\n        if (this.state.combatSetup.partyID) {\r\n            const selectedParty = this.props.parties.find(p => p.id === this.state.combatSetup.partyID);\r\n            if (selectedParty) {\r\n                const pcs = selectedParty.pcs.filter(pc => pc.active);\r\n\r\n                const pcSections = pcs.map(pc =>\r\n                    (\r\n                        <li key={pc.id}>\r\n                            {pc.name || 'unnamed pc'} (level {pc.level})\r\n                        </li>\r\n                    )\r\n                );\r\n\r\n                if (pcSections.length === 0) {\r\n                    pcSections.push(\r\n                        <li key={'empty'}>no pcs</li>\r\n                    );\r\n                }\r\n\r\n                partyContent = (\r\n                    <div>\r\n                        <div className='subheading'>pcs</div>\r\n                        <ul>{pcSections}</ul>\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='heading'>party</div>\r\n                <Dropdown\r\n                    options={partyOptions}\r\n                    placeholder='select party...'\r\n                    selectedID={this.state.combatSetup.partyID ? this.state.combatSetup.partyID : undefined}\r\n                    select={optionID => this.setParty(optionID)}\r\n                />\r\n                {partyContent}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getEncounterSection() {\r\n        if (this.props.encounters.length === 0) {\r\n            return (\r\n                <div className='section'>you have not built any encounters</div>\r\n            );\r\n        }\r\n\r\n        const encounterOptions = this.props.encounters.map(encounter => {\r\n            return {\r\n                id: encounter.id,\r\n                text: encounter.name || 'unnamed encounter'\r\n            };\r\n        });\r\n\r\n        let encounterContent = null;\r\n        if (this.state.combatSetup.encounterID) {\r\n            const selectedEncounter = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n            if (selectedEncounter) {\r\n                const monsterSections = selectedEncounter.slots.map(slot => {\r\n                    let name = slot.monsterName || 'unnamed monster';\r\n                    if (slot.count > 1) {\r\n                        name += ' (x' + slot.count + ')';\r\n                    }\r\n                    return (\r\n                        <li key={slot.id}>{name}</li>\r\n                    );\r\n                });\r\n\r\n                if (monsterSections.length === 0) {\r\n                    monsterSections.push(\r\n                        <li key={'empty'}>no monsters</li>\r\n                    );\r\n                }\r\n\r\n                const waves = selectedEncounter.waves.map(wave => {\r\n                    if (wave.slots.length === 0) {\r\n                        return null;\r\n                    }\r\n\r\n                    const waveMonsters = wave.slots.map(slot => {\r\n                        let name = slot.monsterName || 'unnamed monster';\r\n                        if (slot.count > 1) {\r\n                            name += ' x' + slot.count;\r\n                        }\r\n                        return (\r\n                            <li key={slot.id}>{name}</li>\r\n                        );\r\n                    });\r\n\r\n                    return (\r\n                        <div key={wave.id}>\r\n                            <div className='subheading'>{wave.name || 'unnamed wave'}</div>\r\n                            <ul>{waveMonsters}</ul>\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                encounterContent = (\r\n                    <div>\r\n                        <div className='subheading'>monsters</div>\r\n                        <ul>{monsterSections}</ul>\r\n                        {waves}\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='heading'>encounter</div>\r\n                <Dropdown\r\n                    options={encounterOptions}\r\n                    placeholder='select encounter...'\r\n                    selectedID={this.state.combatSetup.encounterID ? this.state.combatSetup.encounterID : undefined}\r\n                    select={optionID => this.setEncounter(optionID)}\r\n                />\r\n                {encounterContent}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getMapSection() {\r\n        const folios = this.props.mapFolios.filter(folio => folio.maps.length > 0);\r\n        if (folios.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        const folioOptions = [{\r\n            id: '',\r\n            text: 'none'\r\n        }].concat(folios.map(folio => {\r\n            return {\r\n                id: folio.id,\r\n                text: folio.name || 'unnamed folio'\r\n            };\r\n        }));\r\n\r\n        let selectMapSection = null;\r\n        let thumbnailSection = null;\r\n\r\n        if (this.state.combatSetup.folioID) {\r\n            const folio = this.props.mapFolios.find(f => f.id === this.state.combatSetup.folioID);\r\n            if (folio) {\r\n                const mapOptions = folio.maps.map(m => {\r\n                    return {\r\n                        id: m.id,\r\n                        text: m.name || 'unnamed map'\r\n                    };\r\n                });\r\n\r\n                if (mapOptions.length !== 1) {\r\n                    selectMapSection = (\r\n                        <Selector\r\n                            options={mapOptions}\r\n                            selectedID={this.state.combatSetup.mapID}\r\n                            select={optionID => this.setMapID(optionID)}\r\n                        />\r\n                    );\r\n                }\r\n\r\n                if (this.state.combatSetup.mapID) {\r\n                    const map = folio.maps.find(m => m.id === this.state.combatSetup.mapID);\r\n                    if (map) {\r\n                        thumbnailSection = (\r\n                            <MapPanel\r\n                                map={map}\r\n                                mode='thumbnail'\r\n                            />\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='heading'>map</div>\r\n                <Dropdown\r\n                    options={folioOptions}\r\n                    placeholder='select map folio...'\r\n                    selectedID={this.state.combatSetup.folioID ? this.state.combatSetup.folioID : undefined}\r\n                    select={optionID => this.setFolioID(optionID)}\r\n                />\r\n                {selectMapSection}\r\n                {thumbnailSection}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getWaveSection() {\r\n        if (this.state.combatSetup.encounterID === null) {\r\n            return (\r\n                <div className='section'>you have not selected an encounter</div>\r\n            );\r\n        }\r\n\r\n        const selectedEncounter = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n        if (selectedEncounter) {\r\n            if (selectedEncounter.waves.length === 0) {\r\n                return (\r\n                    <div className='section'>you have not defined any waves</div>\r\n                );\r\n            }\r\n\r\n            const waveOptions = selectedEncounter.waves.map(wave => {\r\n                return {\r\n                    id: wave.id,\r\n                    text: wave.name || 'unnamed wave'\r\n                };\r\n            });\r\n\r\n            let waveContent = null;\r\n            if (this.state.combatSetup.waveID) {\r\n                const selectedWave = selectedEncounter.waves.find(w => w.id === this.state.combatSetup.waveID);\r\n                if (selectedWave) {\r\n                    const monsterSections = selectedWave.slots.map(slot => {\r\n                        let name = slot.monsterName || 'unnamed monster';\r\n                        if (slot.count > 1) {\r\n                            name += ' (x' + slot.count + ')';\r\n                        }\r\n                        return (\r\n                            <li key={slot.id}>{name}</li>\r\n                        );\r\n                    });\r\n\r\n                    if (monsterSections.length === 0) {\r\n                        monsterSections.push(\r\n                            <li key={'empty'}>no monsters</li>\r\n                        );\r\n                    }\r\n\r\n                    waveContent = (\r\n                        <div>\r\n                            <div className='subheading'>monsters</div>\r\n                            <ul>{monsterSections}</ul>\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n\r\n            return (\r\n                <div>\r\n                    <div className='heading'>wave</div>\r\n                    <Dropdown\r\n                        options={waveOptions}\r\n                        placeholder='select wave...'\r\n                        selectedID={this.state.combatSetup.waveID ? this.state.combatSetup.waveID : undefined}\r\n                        select={optionID => this.setWave(optionID)}\r\n                    />\r\n                    {waveContent}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private getDifficultySection() {\r\n        const party = this.props.parties.find(p => p.id === this.state.combatSetup.partyID);\r\n        const encounter = this.props.encounters.find(enc => enc.id === this.state.combatSetup.encounterID);\r\n\r\n        if (party && encounter) {\r\n            return (\r\n                <div>\r\n                    <div className='heading'>encounter difficulty</div>\r\n                    <DifficultyChartPanel\r\n                        party={party}\r\n                        encounter={encounter}\r\n                        getMonster={(monsterName, monsterGroupName) => this.props.getMonster(monsterName, monsterGroupName)}\r\n                    />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='heading'>encounter difficulty</div>\r\n                <div className='section'>select a party and an encounter on the left to see difficulty information.</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getMonsterSection() {\r\n        if (this.state.combatSetup.encounterID === null) {\r\n            return (\r\n                <div>\r\n                    <div className='heading'>monsters</div>\r\n                    <div className='section'>select an encounter to see monster options here.</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (!this.props.parties && this.state.combatSetup.waveID === null) {\r\n            return (\r\n                <div>\r\n                    <div className='heading'>monsters</div>\r\n                    <div className='section'>select a wave to see monster options here.</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        const selectedEncounter = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n        if (selectedEncounter) {\r\n            let slotsContainer: { slots: EncounterSlot[] } = selectedEncounter;\r\n            if (this.state.combatSetup.waveID) {\r\n                const selectedWave = selectedEncounter.waves.find(w => w.id === this.state.combatSetup.waveID);\r\n                if (selectedWave) {\r\n                    slotsContainer = selectedWave;\r\n                }\r\n            }\r\n\r\n            if (slotsContainer.slots.length === 0) {\r\n                return null;\r\n            }\r\n\r\n            const initOptions = [\r\n                {\r\n                    id: 'manual',\r\n                    text: 'enter manually'\r\n                },\r\n                {\r\n                    id: 'individual',\r\n                    text: 'roll individually'\r\n                },\r\n                {\r\n                    id: 'group',\r\n                    text: 'roll in groups'\r\n                }\r\n            ];\r\n\r\n            const names = this.state.combatSetup.monsterNames.map(slotNames => {\r\n                const slot = slotsContainer.slots.find(s => s.id === slotNames.id);\r\n                if (slot) {\r\n                    const inputs = [];\r\n                    for (let n = 0; n !== slotNames.names.length; ++n) {\r\n                        inputs.push(\r\n                            <div key={n}>\r\n                                <MonsterName\r\n                                    value={slotNames.names[n]}\r\n                                    slotID={slot.id}\r\n                                    index={n}\r\n                                    changeName={(slotID, index, value) => this.changeName(slotID, index, value)}\r\n                                />\r\n                            </div>\r\n                        );\r\n                    }\r\n                    return (\r\n                        <div key={slotNames.id} className='name-row'>\r\n                            <div className='name-label'>\r\n                                {slot.monsterName}\r\n                            </div>\r\n                            <div className='name-inputs'>\r\n                                {inputs}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n            });\r\n\r\n            return (\r\n                <div>\r\n                    <div className='heading'>monsters</div>\r\n                    <div className='subheading'>initiative</div>\r\n                    <Selector\r\n                        options={initOptions}\r\n                        selectedID={this.state.combatSetup.encounterInitMode}\r\n                        select={optionID => this.setEncounterInitMode(optionID as 'manual' | 'individual' | 'group')}\r\n                    />\r\n                    <div className='subheading'>names</div>\r\n                    <div>{names}</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    public render() {\r\n        try {\r\n            let leftSection = null;\r\n            let rightSection = null;\r\n\r\n            if (this.props.parties) {\r\n                leftSection = (\r\n                    <div>\r\n                        {this.getPartySection()}\r\n                        {this.getEncounterSection()}\r\n                        {this.getMapSection()}\r\n                    </div>\r\n                );\r\n\r\n                rightSection = (\r\n                    <div>\r\n                        {this.getDifficultySection()}\r\n                        {this.getMonsterSection()}\r\n                    </div>\r\n                );\r\n            } else {\r\n                leftSection = (\r\n                    <div>\r\n                        {this.getWaveSection()}\r\n                    </div>\r\n                );\r\n\r\n                rightSection = (\r\n                    <div>\r\n                        {this.getMonsterSection()}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='row' style={{ height: '100%', margin: '0 -15px' }}>\r\n                    <div className='column small-6 medium-6 large-6 scrollable'>\r\n                        {leftSection}\r\n                    </div>\r\n                    <div className='column small-6 medium-6 large-6 scrollable'>\r\n                        {rightSection}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface MonsterNameProps {\r\n    slotID: string;\r\n    index: number;\r\n    value: string;\r\n    changeName: (slotID: string, index: number, value: string) => void;\r\n}\r\n\r\nclass MonsterName extends React.Component<MonsterNameProps> {\r\n    public render() {\r\n        return (\r\n            <input type='text' value={this.props.value} onChange={event => this.props.changeName(this.props.slotID, this.props.index, event.target.value)} />\r\n        );\r\n    }\r\n}\r\n","export interface Condition {\r\n    id: string;\r\n    name: string;\r\n    level: number;\r\n    text: string | null;\r\n    duration: ConditionDurationSaves | ConditionDurationCombatant | ConditionDurationRounds | null;\r\n}\r\n\r\nexport interface ConditionDurationSaves {\r\n    type: 'saves';\r\n    count: number;\r\n    saveType: 'str' | 'dex' | 'con' | 'int' | 'wis' | 'cha' | 'death';\r\n    saveDC: number;\r\n    point: 'start' | 'end';\r\n}\r\n\r\nexport interface ConditionDurationCombatant {\r\n    type: 'combatant';\r\n    point: 'start' | 'end';\r\n    combatantID: string | null;\r\n}\r\n\r\nexport interface ConditionDurationRounds {\r\n    type: 'rounds';\r\n    count: number;\r\n}\r\n\r\nexport const CONDITION_TYPES = [\r\n    'blinded',\r\n    'charmed',\r\n    'deafened',\r\n    'exhaustion',\r\n    'frightened',\r\n    'grappled',\r\n    'incapacitated',\r\n    'invisible',\r\n    'paralyzed',\r\n    'petrified',\r\n    'poisoned',\r\n    'prone',\r\n    'restrained',\r\n    'stunned',\r\n    'unconscious',\r\n    'custom'\r\n];\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    items: { id: string; text: string; details: JSX.Element | string; disabled?: boolean }[];\r\n    selectedItemID: string | null;\r\n    select: (itemID: string) => void;\r\n}\r\n\r\nexport default class RadioGroup extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        // No default property values\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            const content = this.props.items.map(item => {\r\n                return (\r\n                    <RadioGroupItem\r\n                        key={item.id}\r\n                        item={item}\r\n                        selected={this.props.selectedItemID === item.id}\r\n                        select={(itemID: string) => this.props.select(itemID)}\r\n                    />\r\n                );\r\n            });\r\n\r\n            return (\r\n                <div className='radio-group'>\r\n                    {content}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface RadioGroupItemProps {\r\n    item: { id: string; text: string; details: JSX.Element | string; disabled?: boolean };\r\n    selected: boolean;\r\n    select: (itemID: string) => void;\r\n}\r\n\r\nclass RadioGroupItem extends React.Component<RadioGroupItemProps> {\r\n    public render() {\r\n        let style = 'radio-item';\r\n        let details = null;\r\n\r\n        if (this.props.selected) {\r\n            style += ' selected';\r\n            details = (\r\n                <div className='radio-item-details'>\r\n                    {this.props.item.details}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (this.props.item.disabled) {\r\n            style += ' disabled';\r\n        }\r\n\r\n        return (\r\n            <div className={style} onClick={() => this.props.select(this.props.item.id)}>\r\n                <div className='radio-item-text'>{this.props.item.text}</div>\r\n                {details}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Factory from '../../utils/factory';\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combat, Combatant } from '../../models/combat';\r\nimport { Condition, CONDITION_TYPES, ConditionDurationCombatant, ConditionDurationSaves } from '../../models/condition';\r\nimport { Monster } from '../../models/monster-group';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport RadioGroup from '../controls/radio-group';\r\nimport Selector from '../controls/selector';\r\nimport Spin from '../controls/spin';\r\n\r\ninterface Props {\r\n    condition: Condition;\r\n    combatant: Combatant & Monster;\r\n    combat: Combat;\r\n}\r\n\r\ninterface State {\r\n    condition: Condition;\r\n}\r\n\r\nexport default class ConditionModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            condition: props.condition\r\n        };\r\n    }\r\n\r\n    private setCondition(conditionName: string) {\r\n        // eslint-disable-next-line\r\n        this.state.condition.name = conditionName;\r\n        // eslint-disable-next-line\r\n        this.state.condition.level = 1;\r\n        // eslint-disable-next-line\r\n        this.state.condition.text = conditionName === 'custom' ? 'custom condition' : null;\r\n\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    private setDuration(durationType: 'saves' | 'combatant' | 'rounds') {\r\n        let duration = null;\r\n\r\n        switch (durationType) {\r\n            case 'saves':\r\n                duration = Factory.createConditionDurationSaves();\r\n                break;\r\n            case 'combatant':\r\n                duration = Factory.createConditionDurationCombatant();\r\n                duration.combatantID = this.props.combatant.id;\r\n                break;\r\n            case 'rounds':\r\n                duration = Factory.createConditionDurationRounds();\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        // eslint-disable-next-line\r\n        this.state.condition.duration = duration;\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    private changeValue(object: any, field: string, value: any) {\r\n        object[field] = value;\r\n\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    private nudgeValue(object: any, field: string, delta: number) {\r\n        let value = object[field] + delta;\r\n        if (field === 'level') {\r\n            value = Math.max(value, 1);\r\n            value = Math.min(value, 6);\r\n        }\r\n        if (field === 'count') {\r\n            value = Math.max(value, 1);\r\n        }\r\n        if (field === 'saveDC') {\r\n            value = Math.max(value, 0);\r\n        }\r\n        object[field] = value;\r\n\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const conditions = CONDITION_TYPES.map(condition => {\r\n                const controls = [];\r\n                const description = [];\r\n                if (condition === this.state.condition.name) {\r\n                    if (condition === 'custom') {\r\n                        controls.push(\r\n                            <input\r\n                                type='text'\r\n                                placeholder='custom condition'\r\n                                value={this.state.condition.text ? this.state.condition.text : ''}\r\n                                onChange={event => this.changeValue(this.state.condition, 'text', event.target.value)}\r\n                            />\r\n                        );\r\n                    }\r\n                    if (condition === 'exhaustion') {\r\n                        controls.push(\r\n                            <Spin\r\n                                key='exhaustion-spin'\r\n                                source={this.props.condition}\r\n                                name='level'\r\n                                label='exhaustion'\r\n                                nudgeValue={delta => this.nudgeValue(this.props.condition, 'level', delta)}\r\n                            />\r\n                        );\r\n                    }\r\n                    const text = Utils.conditionText(this.state.condition);\r\n                    for (let n = 0; n !== text.length; ++n) {\r\n                        description.push(<li key={n} className='section'>{text[n]}</li>);\r\n                    }\r\n                }\r\n\r\n                return {\r\n                    id: condition,\r\n                    text: condition,\r\n                    details: (\r\n                        <div key={condition}>\r\n                            {controls}\r\n                            <ul>\r\n                                {description}\r\n                            </ul>\r\n                        </div>\r\n                    ),\r\n                    disabled: this.props.combatant.conditionImmunities ? this.props.combatant.conditionImmunities.indexOf(condition) !== -1 : false\r\n                };\r\n            });\r\n\r\n            const saveOptions = ['str', 'dex', 'con', 'int', 'wis', 'cha', 'death'].map(c => ({ id: c, text: c }));\r\n            const pointOptions = [\r\n                {\r\n                    id: 'start',\r\n                    text: 'start of turn'\r\n                },\r\n                {\r\n                    id: 'end',\r\n                    text: 'end of turn'\r\n                }\r\n            ];\r\n            const combatantOptions = this.props.combat.combatants.map(c => ({ id: c.id, text: (c.displayName || c.name || 'unnamed monster') }));\r\n\r\n            const durations = [\r\n                {\r\n                    id: 'none',\r\n                    text: 'until removed (default)',\r\n                    details: (\r\n                        <div className='section'>\r\n                            <div>the condition persists until it is manually removed</div>\r\n                        </div>\r\n                    )\r\n                },\r\n                {\r\n                    id: 'saves',\r\n                    text: 'until a successful save',\r\n                    details: (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>number of saves required</div>\r\n                                <Spin\r\n                                    source={this.props.condition.duration}\r\n                                    name='count'\r\n                                    nudgeValue={delta => this.nudgeValue(this.props.condition.duration, 'count', delta)}\r\n                                />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>save dc</div>\r\n                                <Spin\r\n                                    source={this.props.condition.duration}\r\n                                    name='saveDC'\r\n                                    nudgeValue={delta => this.nudgeValue(this.props.condition.duration, 'saveDC', delta)}\r\n                                />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>type of save</div>\r\n                                <Selector\r\n                                    options={saveOptions}\r\n                                    selectedID={\r\n                                        (this.props.condition.duration as ConditionDurationSaves)\r\n                                        ? (this.props.condition.duration as ConditionDurationSaves).saveType\r\n                                        : null\r\n                                    }\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, 'saveType', optionID)}\r\n                                />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>make the save at the start or end of the turn</div>\r\n                                <Selector\r\n                                    options={pointOptions}\r\n                                    selectedID={\r\n                                        (this.props.condition.duration as ConditionDurationSaves)\r\n                                        ? (this.props.condition.duration as ConditionDurationSaves).point\r\n                                        : null\r\n                                    }\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, 'point', optionID)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                },\r\n                {\r\n                    id: 'combatant',\r\n                    text: 'until someone\\'s next turn',\r\n                    details: (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>combatant</div>\r\n                                <Dropdown\r\n                                    options={combatantOptions}\r\n                                    selectedID={\r\n                                        (this.props.condition.duration as ConditionDurationCombatant)\r\n                                        ? (this.props.condition.duration as ConditionDurationCombatant).combatantID || undefined\r\n                                        : undefined\r\n                                    }\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, 'combatantID', optionID)}\r\n                                />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>start or end of the turn</div>\r\n                                <Selector\r\n                                    options={pointOptions}\r\n                                    selectedID={\r\n                                        (this.props.condition.duration as ConditionDurationCombatant)\r\n                                        ? (this.props.condition.duration as ConditionDurationCombatant).point\r\n                                        : null\r\n                                    }\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, 'point', optionID)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                },\r\n                {\r\n                    id: 'rounds',\r\n                    text: 'for a number of rounds',\r\n                    details: (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>number of rounds</div>\r\n                                <Spin\r\n                                    source={this.props.condition.duration}\r\n                                    name='count'\r\n                                    nudgeValue={delta => this.nudgeValue(this.props.condition.duration, 'count', delta)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }\r\n            ];\r\n\r\n            return (\r\n                <div className='condition-modal'>\r\n                    <div className='row' style={{ height: '100%' }}>\r\n                        <div className='columns small-6 medium-6 large-6 scrollable'>\r\n                            <div className='heading'>condition</div>\r\n                            <RadioGroup\r\n                                items={conditions}\r\n                                selectedItemID={this.state.condition.name}\r\n                                select={itemID => this.setCondition(itemID)}\r\n                            />\r\n                        </div>\r\n                        <div className='columns small-6 medium-6 large-6 scrollable'>\r\n                            <div className='heading'>duration</div>\r\n                            <RadioGroup\r\n                                items={durations}\r\n                                selectedItemID={this.state.condition.duration ? this.state.condition.duration.type : 'none'}\r\n                                select={itemID => this.setDuration(itemID as 'saves' | 'combatant' | 'rounds')}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { CATEGORY_TYPES, Monster, MonsterGroup, SIZE_TYPES } from '../../models/monster-group';\r\n\r\nimport Selector from '../controls/selector';\r\n\r\ninterface Props {\r\n    library: MonsterGroup[];\r\n}\r\n\r\ninterface State {\r\n    chart: string;\r\n}\r\n\r\nexport default class DemographicsModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            chart: 'challenge'\r\n        };\r\n    }\r\n\r\n    private selectChart(chart: string) {\r\n        this.setState({\r\n            chart: chart\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let demographics = null;\r\n\r\n            const allMonsters: Monster[] = [];\r\n            this.props.library.forEach(group => group.monsters.forEach(monster => allMonsters.push(monster)));\r\n            if (allMonsters.length !== 0) {\r\n                const buckets: { value: any, title: string }[] = [];\r\n                let maxBucketSize = 0;\r\n                const monsters: { [key: string]: Monster[] } = {};\r\n\r\n                switch (this.state.chart) {\r\n                    case 'challenge':\r\n                        const challenges = [\r\n                            0, 0.125, 0.25, 0.5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30\r\n                        ];\r\n                        challenges.forEach(cr => {\r\n                            buckets.push({\r\n                                value: cr,\r\n                                title: 'challenge ' + Utils.challenge(cr)\r\n                            });\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const cr = bucket.value;\r\n                            monsters[cr.toString()] = allMonsters.filter(monster => monster.challenge === cr);\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const cr = bucket.value;\r\n                            maxBucketSize = Math.max(monsters[cr].length, maxBucketSize);\r\n                        });\r\n                        break;\r\n                    case 'size':\r\n                        SIZE_TYPES.forEach(size => {\r\n                            buckets.push({\r\n                                value: size,\r\n                                title: size\r\n                            });\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const size = bucket.value;\r\n                            monsters[size.toString()] = allMonsters.filter(monster => monster.size === size);\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const size = bucket.value;\r\n                            maxBucketSize = Math.max(monsters[size].length, maxBucketSize);\r\n                        });\r\n                        break;\r\n                    case 'type':\r\n                        CATEGORY_TYPES.forEach(type => {\r\n                            buckets.push({\r\n                                value: type,\r\n                                title: type\r\n                            });\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const type = bucket.value;\r\n                            monsters[type.toString()] = allMonsters.filter(monster => monster.category === type);\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const type = bucket.value;\r\n                            maxBucketSize = Math.max(monsters[type].length, maxBucketSize);\r\n                        });\r\n                        break;\r\n                    default:\r\n                        // Do nothing\r\n                        break;\r\n                }\r\n\r\n                const bars = [];\r\n                for (let index = 0; index !== buckets.length; ++index) {\r\n                    const bucket = buckets[index];\r\n                    const set = monsters[bucket.value];\r\n                    const count = set ? set.length : 0;\r\n                    bars.push(\r\n                        <div\r\n                            key={bucket.title}\r\n                            className='bar-container'\r\n                            style={{\r\n                                width: 'calc((100% - 1px) / ' + buckets.length + ')',\r\n                                left: 'calc((100% - 1px) * ' + index + ' / ' + buckets.length + ')'\r\n                            }}\r\n                            title={bucket.title + ': ' + set.length + ' monsters'}\r\n                        >\r\n                            <div\r\n                                className='bar-space'\r\n                                style={{\r\n                                    height: 'calc((100% - 1px) * ' + (maxBucketSize - count) + ' / ' + maxBucketSize + ')'\r\n                                }}\r\n                            />\r\n                            <div\r\n                                className='bar'\r\n                                style={{\r\n                                    height: 'calc((100% - 1px) * ' + count + ' / ' + maxBucketSize + ')'\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                const chartOptions = [\r\n                    {\r\n                        id: 'challenge',\r\n                        text: 'challenge rating'\r\n                    },\r\n                    {\r\n                        id: 'size',\r\n                        text: 'size'\r\n                    },\r\n                    {\r\n                        id: 'type',\r\n                        text: 'type'\r\n                    }\r\n                ];\r\n\r\n                demographics = (\r\n                    <div>\r\n                        <Selector\r\n                            options={chartOptions}\r\n                            selectedID={this.state.chart}\r\n                            select={optionID => this.selectChart(optionID)}\r\n                        />\r\n                        <div className='chart'>\r\n                            <div className='plot'>{bars}</div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return demographics;\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","export interface MapFolio {\r\n    id: string;\r\n    name: string;\r\n    maps: Map[];\r\n}\r\n\r\nexport interface Map {\r\n    id: string;\r\n    name: string;\r\n    items: MapItem[];\r\n}\r\n\r\nexport interface MapItem {\r\n    id: string;\r\n    type: 'tile' | 'pc' | 'monster';\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n    terrain: string | null;\r\n}\r\n\r\nexport const TERRAIN_TYPES = [\r\n    'cavern',\r\n    'dirt',\r\n    'flagstone',\r\n    'floorboard',\r\n    'grassland',\r\n    'pit',\r\n    'sand',\r\n    'snow',\r\n    'water'\r\n];\r\n","import React from 'react';\r\n\r\nimport { MapItem, TERRAIN_TYPES } from '../../models/map-folio';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport Radial from '../controls/radial';\r\n\r\ninterface Props {\r\n    tile: MapItem;\r\n    changeValue: (tile: MapItem, field: string, value: string) => void;\r\n    moveMapItem: (tile: MapItem, dir: string) => void;\r\n    resizeMapItem: (tile: MapItem, dir: string, dir2: 'in' | 'out' | null) => void;\r\n    cloneMapItem: (tile: MapItem) => void;\r\n    removeMapItem: (tile: MapItem) => void;\r\n}\r\n\r\nexport default class MapTileCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const terrainOptions = TERRAIN_TYPES.map(t => {\r\n                return { id: t, text: t };\r\n            });\r\n\r\n            return (\r\n                <div className='card map-tile'>\r\n                    <div className='heading'>\r\n                        <div className='title'>map tile</div>\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        <div className='subheading'>size</div>\r\n                        <div className='section'>{this.props.tile.width} sq x {this.props.tile.height} sq</div>\r\n                        <div className='section'>{this.props.tile.width * 5} ft x {this.props.tile.height * 5} ft</div>\r\n                        <div className='divider' />\r\n                        <div className='subheading'>terrain</div>\r\n                        <Dropdown\r\n                            options={terrainOptions}\r\n                            placeholder='select terrain'\r\n                            selectedID={this.props.tile.terrain ? this.props.tile.terrain : undefined}\r\n                            select={optionID => this.props.changeValue(this.props.tile, 'terrain', optionID)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <div className='subheading'>move</div>\r\n                        <div className='section centered'>\r\n                            <Radial direction='out' click={dir => this.props.moveMapItem(this.props.tile, dir)} />\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='subheading'>resize</div>\r\n                        <div className='section centered'>\r\n                            <Radial direction='both' click={(dir, dir2) => this.props.resizeMapItem(this.props.tile, dir, dir2)} />\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='section'>\r\n                            <button onClick={() => this.props.cloneMapItem(this.props.tile)}>clone tile</button>\r\n                            <button onClick={() => this.props.removeMapItem(this.props.tile)}>remove tile</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Factory from '../../utils/factory';\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Map, MapItem } from '../../models/map-folio';\r\n\r\nimport MapTileCard from '../cards/map-tile-card';\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    map: Map;\r\n}\r\n\r\ninterface State {\r\n    map: Map;\r\n    selectedTileID: string | null;\r\n}\r\n\r\nexport default class MapEditorModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            map: props.map,\r\n            selectedTileID: null\r\n        };\r\n    }\r\n\r\n    private setSelectedTileID(id: string | null) {\r\n        this.setState({\r\n            selectedTileID: id\r\n        });\r\n    }\r\n\r\n    private addMapTile(x: number, y: number) {\r\n        const tile = Factory.createMapItem();\r\n        tile.x = x;\r\n        tile.y = y;\r\n        tile.terrain = 'flagstone';\r\n        this.state.map.items.push(tile);\r\n\r\n        this.setState({\r\n            map: this.state.map,\r\n            selectedTileID: tile.id\r\n        });\r\n    }\r\n\r\n    private moveMapItem(item: MapItem, dir: string) {\r\n        switch (dir) {\r\n            case 'N':\r\n                item.y -= 1;\r\n                break;\r\n            case 'E':\r\n                item.x += 1;\r\n                break;\r\n            case 'S':\r\n                item.y += 1;\r\n                break;\r\n            case 'W':\r\n                item.x -= 1;\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    private bigMapItem(item: MapItem, dir: string) {\r\n        switch (dir) {\r\n            case 'N':\r\n                item.y -= 1;\r\n                item.height += 1;\r\n                break;\r\n            case 'E':\r\n                item.width += 1;\r\n                break;\r\n            case 'S':\r\n                item.height += 1;\r\n                break;\r\n            case 'W':\r\n                item.x -= 1;\r\n                item.width += 1;\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    private smallMapItem(item: MapItem, dir: string) {\r\n        switch (dir) {\r\n            case 'N':\r\n                if (item.height > 1) {\r\n                    item.y += 1;\r\n                    item.height -= 1;\r\n                }\r\n                break;\r\n            case 'E':\r\n                if (item.width > 1) {\r\n                    item.width -= 1;\r\n                }\r\n                break;\r\n            case 'S':\r\n                if (item.height > 1) {\r\n                    item.height -= 1;\r\n                }\r\n                break;\r\n            case 'W':\r\n                if (item.width > 1) {\r\n                    item.x += 1;\r\n                    item.width -= 1;\r\n                }\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    private resizeMapItem(item: MapItem, dir: string, dir2: 'in' | 'out') {\r\n        switch (dir2) {\r\n            case 'in':\r\n                this.smallMapItem(item, dir);\r\n                break;\r\n            case 'out':\r\n                this.bigMapItem(item, dir);\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n    }\r\n\r\n    private cloneMapItem(item: MapItem) {\r\n        const copy = JSON.parse(JSON.stringify(item));\r\n        copy.id = Utils.guid();\r\n        copy.x += 1;\r\n        copy.y += 1;\r\n        this.state.map.items.push(copy);\r\n\r\n        this.setState({\r\n            map: this.state.map,\r\n            selectedTileID: copy.id\r\n        });\r\n    }\r\n\r\n    private removeMapItem(item: MapItem) {\r\n        const index = this.state.map.items.indexOf(item);\r\n        this.state.map.items.splice(index, 1);\r\n\r\n        this.setState({\r\n            map: this.state.map,\r\n            selectedTileID: null\r\n        });\r\n    }\r\n\r\n    private changeValue(source: any, field: string, value: any) {\r\n        source[field] = value;\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let tools = null;\r\n            if (this.state.selectedTileID) {\r\n                const item = this.state.map.items.find(i => i.id === this.state.selectedTileID);\r\n                if (item) {\r\n                    tools = (\r\n                        <div className='tools'>\r\n                            <MapTileCard\r\n                                tile={item}\r\n                                moveMapItem={(mapItem, dir) => this.moveMapItem(mapItem, dir)}\r\n                                resizeMapItem={(mapItem, dir, dir2) => this.resizeMapItem(mapItem, dir, dir2 as 'in' | 'out')}\r\n                                cloneMapItem={mapItem => this.cloneMapItem(mapItem)}\r\n                                removeMapItem={mapItem => this.removeMapItem(mapItem)}\r\n                                changeValue={(source, field, value) => this.changeValue(source, field, value)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                }\r\n            } else {\r\n                tools = (\r\n                    <div className='tools'>\r\n                        <p>to add a new tile to the map, double-click on an empty grid square</p>\r\n                        <p>to edit an existing tile, click on it once to select it</p>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='map-editor'>\r\n                    {tools}\r\n                    <MapPanel\r\n                        map={this.state.map}\r\n                        mode='edit'\r\n                        selectedItemID={this.state.selectedTileID ? this.state.selectedTileID : undefined}\r\n                        setSelectedItemID={id => this.setSelectedTileID(id)}\r\n                        addMapTile={(x, y) => this.addMapTile(x, y)}\r\n                    />\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Factory from '../../utils/factory';\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { CATEGORY_TYPES, Monster, MonsterGroup, SIZE_TYPES, Trait, TRAIT_TYPES } from '../../models/monster-group';\r\n\r\nimport MonsterCard from '../cards/monster-card';\r\nimport Checkbox from '../controls/checkbox';\r\nimport Dropdown from '../controls/dropdown';\r\nimport Selector from '../controls/selector';\r\nimport Spin from '../controls/spin';\r\nimport AbilityScorePanel from '../panels/ability-score-panel';\r\nimport TraitsPanel from '../panels/traits-panel';\r\n\r\nimport arrow from '../../resources/images/down-arrow.svg';\r\n\r\ninterface Props {\r\n    monster: Monster;\r\n    library: MonsterGroup[];\r\n    showMonsters: boolean;\r\n}\r\n\r\ninterface State {\r\n    monster: Monster;\r\n    page: 'overview' | 'abilities' | 'cbt-stats' | 'actions';\r\n    showFilter: boolean;\r\n    helpSection: string;\r\n    filter: {\r\n        size: boolean,\r\n        type: boolean,\r\n        subtype: boolean,\r\n        alignment: boolean,\r\n        challenge: boolean\r\n    };\r\n}\r\n\r\nexport default class MonsterEditorModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            monster: props.monster,\r\n            page: 'overview',\r\n            showFilter: false,\r\n            helpSection: 'speed',\r\n            filter: {\r\n                size: true,\r\n                type: true,\r\n                subtype: false,\r\n                alignment: false,\r\n                challenge: true\r\n            }\r\n        };\r\n    }\r\n\r\n    private setPage(page: 'overview' | 'abilities' | 'cbt-stats' | 'actions') {\r\n        const sections = this.getHelpOptionsForPage(page);\r\n        this.setState({\r\n            page: page,\r\n            helpSection: sections[0]\r\n        });\r\n    }\r\n\r\n    private toggleFilter() {\r\n        this.setState({\r\n            showFilter: !this.state.showFilter\r\n        });\r\n    }\r\n\r\n    private setHelpSection(section: string) {\r\n        this.setState({\r\n            helpSection: section\r\n        });\r\n    }\r\n\r\n    private toggleMatch(type: 'size' | 'type' | 'subtype' | 'alignment' | 'challenge') {\r\n        // eslint-disable-next-line\r\n        this.state.filter[type] = !this.state.filter[type];\r\n        this.setState({\r\n            filter: this.state.filter\r\n        });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Helper methods\r\n\r\n    private getHelpOptionsForPage(page: 'overview' | 'abilities' | 'cbt-stats' | 'actions') {\r\n        switch (page) {\r\n            case 'overview':\r\n                return ['speed', 'senses', 'languages', 'equipment'];\r\n            case 'abilities':\r\n                return ['str', 'dex', 'con', 'int', 'wis', 'cha', 'saves', 'skills'];\r\n            case 'cbt-stats':\r\n                return ['armor class', 'hit dice', 'resistances', 'vulnerabilities', 'immunities', 'conditions'];\r\n            case 'actions':\r\n                return ['actions'];\r\n            default:\r\n                return [];\r\n        }\r\n    }\r\n\r\n    private getMonsters() {\r\n        const monsters: Monster[] = [];\r\n        this.props.library.forEach(group => {\r\n            group.monsters.forEach(monster => {\r\n                let match = true;\r\n\r\n                if (this.state.monster.id === monster.id) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.filter.size && (this.state.monster.size !== monster.size)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.filter.type && (this.state.monster.category !== monster.category)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.filter.subtype && (this.state.monster.tag !== monster.tag)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.filter.alignment && (this.state.monster.alignment !== monster.alignment)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.filter.challenge && (this.state.monster.challenge !== monster.challenge)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (match) {\r\n                    monsters.push(monster);\r\n                }\r\n            });\r\n        });\r\n\r\n        return monsters;\r\n    }\r\n\r\n    private setRandomValue(field: string, monsters: Monster[], notify: boolean) {\r\n        const index = Math.floor(Math.random() * monsters.length);\r\n        const m = monsters[index];\r\n\r\n        let source: any = m;\r\n        let value = null;\r\n        const tokens = field.split('.');\r\n        tokens.forEach(token => {\r\n            if (token === tokens[tokens.length - 1]) {\r\n                value = source[token];\r\n            } else {\r\n                source = source[token];\r\n            }\r\n        });\r\n\r\n        this.changeValue(field, value, notify);\r\n    }\r\n\r\n    private geneSplice(monsters: Monster[]) {\r\n        [\r\n            'speed',\r\n            'senses',\r\n            'languages',\r\n            'equipment',\r\n            'abilityScores.str',\r\n            'abilityScores.dex',\r\n            'abilityScores.con',\r\n            'abilityScores.int',\r\n            'abilityScores.wis',\r\n            'abilityScores.cha',\r\n            'savingThrows',\r\n            'skills',\r\n            'ac',\r\n            'hitDice',\r\n            'damage.resist',\r\n            'damage.vulnerable',\r\n            'damage.immune',\r\n            'conditionImmunities'\r\n        ].forEach(field => {\r\n            this.setRandomValue(field, monsters, false);\r\n        });\r\n\r\n        TRAIT_TYPES.forEach(type => {\r\n            // Clear current traits of this type\r\n            const currentTraits = this.state.monster.traits.filter(t => t.type === type);\r\n            currentTraits.forEach(c => {\r\n                const index = this.state.monster.traits.findIndex(t => t === c);\r\n                this.state.monster.traits.splice(index, 1);\r\n            });\r\n\r\n            // Get all traits of this type\r\n            const traits: Trait[] = [];\r\n            monsters.forEach(m => {\r\n                m.traits.filter(t => t.type === type)\r\n                    .forEach(t => traits.push(t));\r\n            });\r\n\r\n            // Collate by name\r\n            const distinct: { trait: Trait, count: number }[] = [];\r\n            traits.forEach(t => {\r\n                const current = distinct.find(d => d.trait.name === t.name);\r\n                if (current) {\r\n                    current.count += 1;\r\n                } else {\r\n                    distinct.push({\r\n                        trait: t,\r\n                        count: 1\r\n                    });\r\n                }\r\n            });\r\n\r\n            // If any are common to all monsters, copy them and remove from the candidates\r\n            const addedIDs: string[] = [];\r\n            distinct.filter(d => d.count === monsters.length)\r\n                .forEach(d => {\r\n                    this.copyTrait(d.trait);\r\n                    addedIDs.push(d.trait.id);\r\n                });\r\n            addedIDs.forEach(id => {\r\n                const index = distinct.findIndex(d => d.trait.id === id);\r\n                distinct.splice(index, 1);\r\n            });\r\n\r\n            const avg = traits.length / monsters.length;\r\n            while (this.state.monster.traits.filter(t => t.type === type).length < avg) {\r\n                const index = Math.floor(Math.random() * distinct.length);\r\n                const t = distinct[index].trait;\r\n                this.copyTrait(t);\r\n                distinct.splice(index, 1);\r\n            }\r\n        });\r\n\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private addTrait(type: 'trait' | 'action' | 'legendary' | 'lair' | 'regional') {\r\n        const trait = Factory.createTrait();\r\n        trait.type = type;\r\n        trait.name = 'New ' + this.getActionTypeName(type, false).toLowerCase();\r\n        this.state.monster.traits.push(trait);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private addRandomTrait(type: string, monsters: Monster[]) {\r\n        const traits: Trait[] = [];\r\n        monsters.forEach(m => {\r\n            m.traits.filter(t => t.type === type)\r\n                .forEach(t => {\r\n                    traits.push(t);\r\n                });\r\n        });\r\n\r\n        const index = Math.floor(Math.random() * traits.length);\r\n        const trait = traits[index];\r\n\r\n        this.copyTrait(trait);\r\n    }\r\n\r\n    private removeTrait(trait: Trait) {\r\n        const index = this.state.monster.traits.indexOf(trait);\r\n        this.state.monster.traits.splice(index, 1);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private getActionTypeName(type: string, plural: boolean) {\r\n        let name = Utils.traitType(type);\r\n        if (plural) {\r\n            name += 's';\r\n        }\r\n        return name;\r\n    }\r\n\r\n    private copyTrait(trait: Trait) {\r\n        const copy = JSON.parse(JSON.stringify(trait));\r\n        copy.id = Utils.guid();\r\n        this.state.monster.traits.push(copy);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private changeTrait(trait: Trait, field: string, value: any) {\r\n        (trait as any)[field] = value;\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private nudgeValue(field: string, delta: number) {\r\n        let source: any = this.state.monster;\r\n        let value: any = null;\r\n        const tokens = field.split('.');\r\n        tokens.forEach(token => {\r\n            if (token === tokens[tokens.length - 1]) {\r\n                value = source[token];\r\n            } else {\r\n                source = source[token];\r\n            }\r\n        });\r\n\r\n        const newValue = (field === 'challenge') ? Utils.nudgeChallenge(value, delta) : (value ? value : 0) + delta;\r\n        this.changeValue(field, newValue);\r\n    }\r\n\r\n    private changeValue(field: string, value: any, notify = true) {\r\n        let source: any = this.state.monster;\r\n        const tokens = field.split('.');\r\n        tokens.forEach(token => {\r\n            if (token === tokens[tokens.length - 1]) {\r\n                source[token] = value;\r\n\r\n                if ((field === 'abilityScores.con') || (field === 'size') || (field === 'hitDice')) {\r\n                    const sides = Utils.hitDieType(this.state.monster.size);\r\n                    const conMod = Math.floor((this.state.monster.abilityScores.con - 10) / 2);\r\n                    const hpPerDie = ((sides + 1) / 2) + conMod;\r\n                    const hp = Math.floor(this.state.monster.hitDice * hpPerDie);\r\n                    // eslint-disable-next-line\r\n                    this.state.monster.hpMax = hp;\r\n                }\r\n\r\n                if (notify) {\r\n                    this.setState({\r\n                        monster: this.state.monster\r\n                    });\r\n                }\r\n            } else {\r\n                source = source[token];\r\n            }\r\n        });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // HTML render methods\r\n\r\n    private getHelpSection(monsters: Monster[]) {\r\n        switch (this.state.helpSection) {\r\n            case 'speed':\r\n                return this.getValueSection('speed', 'text', monsters);\r\n            case 'senses':\r\n                return this.getValueSection('senses', 'text', monsters);\r\n            case 'languages':\r\n                return this.getValueSection('languages', 'text', monsters);\r\n            case 'equipment':\r\n                return this.getValueSection('equipment', 'text', monsters);\r\n            case 'str':\r\n                return this.getValueSection('abilityScores.str', 'number', monsters);\r\n            case 'dex':\r\n                return this.getValueSection('abilityScores.dex', 'number', monsters);\r\n            case 'con':\r\n                return this.getValueSection('abilityScores.con', 'number', monsters);\r\n            case 'int':\r\n                return this.getValueSection('abilityScores.int', 'number', monsters);\r\n            case 'wis':\r\n                return this.getValueSection('abilityScores.wis', 'number', monsters);\r\n            case 'cha':\r\n                return this.getValueSection('abilityScores.cha', 'number', monsters);\r\n            case 'saves':\r\n                return this.getValueSection('savingThrows', 'text', monsters);\r\n            case 'skills':\r\n                return this.getValueSection('skills', 'text', monsters);\r\n            case 'armor class':\r\n                return this.getValueSection('ac', 'number', monsters);\r\n            case 'hit dice':\r\n                return this.getValueSection('hitDice', 'number', monsters);\r\n            case 'resistances':\r\n                return this.getValueSection('damage.resist', 'text', monsters);\r\n            case 'vulnerabilities':\r\n                return this.getValueSection('damage.vulnerable', 'text', monsters);\r\n            case 'immunities':\r\n                return this.getValueSection('damage.immune', 'text', monsters);\r\n            case 'conditions':\r\n                return this.getValueSection('conditionImmunities', 'text', monsters);\r\n            case 'actions':\r\n                return this.getActionsSection(monsters);\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    private getValueSection(field: string, dataType: 'text' | 'number', monsters: Monster[]) {\r\n        const values: any[] = monsters\r\n            .map(m => {\r\n                const tokens = field.split('.');\r\n                let source: any = m;\r\n                let value = null;\r\n                tokens.forEach(token => {\r\n                    if (token === tokens[tokens.length - 1]) {\r\n                        value = source[token];\r\n                    } else {\r\n                        source = source[token];\r\n                    }\r\n                });\r\n                if ((dataType === 'text') && (value === '')) {\r\n                    value = null;\r\n                }\r\n                return value;\r\n            })\r\n            .filter(v => v !== null);\r\n\r\n        const distinct: { value: any, count: number }[] = [];\r\n        if (dataType === 'number') {\r\n            let min: number | null = null;\r\n            let max: number | null = null;\r\n            values.forEach(v => {\r\n                if ((min === null) || (v < min)) {\r\n                    min = v;\r\n                }\r\n                if ((max === null) || (v > max)) {\r\n                    max = v;\r\n                }\r\n            });\r\n            if ((min !== null) && (max !== null)) {\r\n                for (let n = min; n <= max; ++n) {\r\n                    distinct.push({\r\n                        value: n,\r\n                        count: 0\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        values.forEach(v => {\r\n            const current = distinct.find(d => d.value === v);\r\n            if (current) {\r\n                current.count += 1;\r\n            } else {\r\n                distinct.push({\r\n                    value: v,\r\n                    count: 1\r\n                });\r\n            }\r\n        });\r\n\r\n        switch (dataType) {\r\n            case 'number':\r\n                Utils.sortByValue(distinct);\r\n                break;\r\n            case 'text':\r\n                Utils.sortByCount(distinct);\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        if (dataType === 'text') {\r\n            const count = monsters.length - values.length;\r\n            if (count !== 0) {\r\n                distinct.push({\r\n                    value: '',\r\n                    count: monsters.length - values.length\r\n                });\r\n            }\r\n        }\r\n\r\n        const valueSections = distinct.map(d => {\r\n            const width = 100 * d.count / monsters.length;\r\n            return (\r\n                <div className='row small-up-3 medium-up-3 large-up-3 value-list' key={distinct.indexOf(d)}>\r\n                    <div className='column'>\r\n                        <div className='text-container'>\r\n                            {d.value || '(none specified)'}\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <div className='bar-container'>\r\n                            <div className='bar' style={{ width: width + '%' }} />\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <button onClick={() => this.changeValue(field, d.value)}>use this value</button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                {valueSections}\r\n                <button onClick={() => this.setRandomValue(field, monsters, true)}>select random value</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getActionsSection(monsters: Monster[]) {\r\n        const rows = [];\r\n        rows.push(\r\n            <div className='row small-up-4 medium-up-4 large-up-4 value-list' key='header'>\r\n                <div className='column'>\r\n                    <div className='text-container'>\r\n                        <b>type</b>\r\n                    </div>\r\n                </div>\r\n                <div className='column'>\r\n                    <div className='text-container number'>\r\n                        <b>average number</b>\r\n                    </div>\r\n                </div>\r\n                <div className='column'>\r\n                    <div className='text-container number'>\r\n                        <b>min - max</b>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        TRAIT_TYPES.forEach(type => {\r\n            let min: number | null = null;\r\n            let max: number | null = null;\r\n            let count = 0;\r\n            monsters.forEach(m => {\r\n                const n = m.traits.filter(t => t.type === type).length;\r\n                if ((min === null) || (n < min)) {\r\n                    min = n;\r\n                }\r\n                if ((max === null) || (n > max)) {\r\n                    max = n;\r\n                }\r\n                count += n;\r\n            });\r\n            const avg = Math.round(count / monsters.length);\r\n\r\n            rows.push(\r\n                <div className='row small-up-4 medium-up-4 large-up-4 value-list' key={type}>\r\n                    <div className='column'>\r\n                        <div className={count === 0 ? 'text-container disabled' : 'text-container'}>\r\n                            {this.getActionTypeName(type, true)}\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <div className={count === 0 ? 'text-container number disabled' : 'text-container number'}>\r\n                            {avg}\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <div className={count === 0 ? 'text-container number disabled' : 'text-container number'}>\r\n                            {min} - {max}\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <button className={count === 0 ? 'disabled' : ''} onClick={() => this.addRandomTrait(type, monsters)}>add random</button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                {rows}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getFilterCard(monsters: Monster[]) {\r\n        const criteria: string[] = [];\r\n        if (this.state.filter.size) {\r\n            criteria.push('size');\r\n        }\r\n        if (this.state.filter.type) {\r\n            criteria.push('type');\r\n        }\r\n        if (this.state.filter.subtype) {\r\n            criteria.push('subtype');\r\n        }\r\n        if (this.state.filter.alignment) {\r\n            criteria.push('alignment');\r\n        }\r\n        if (this.state.filter.challenge) {\r\n            criteria.push('challenge rating');\r\n        }\r\n        const criteriaText = (criteria.length > 0) ? 'based on ' + criteria.join(', ') : 'no criteria specified';\r\n        const similar = (\r\n            <div className='section'>\r\n                {monsters.length} similar monsters ({criteriaText})\r\n            </div>\r\n        );\r\n\r\n        let filterContent = null;\r\n        if (this.state.showFilter) {\r\n            filterContent = (\r\n                <div>\r\n                    <Checkbox\r\n                        label={'size ' + this.state.monster.size}\r\n                        checked={this.state.filter.size}\r\n                        changeValue={value => this.toggleMatch('size')}\r\n                    />\r\n                    <Checkbox\r\n                        label={'type ' + this.state.monster.category}\r\n                        checked={this.state.filter.type}\r\n                        changeValue={value => this.toggleMatch('type')}\r\n                    />\r\n                    <Checkbox\r\n                        label={this.state.monster.tag ? 'subtype ' + this.state.monster.tag : 'subtype'}\r\n                        checked={this.state.filter.subtype}\r\n                        disabled={!this.state.monster.tag}\r\n                        changeValue={value => this.toggleMatch('subtype')}\r\n                    />\r\n                    <Checkbox\r\n                        label={this.state.monster.alignment ? 'alignment ' + this.state.monster.alignment : 'alignment'}\r\n                        checked={this.state.filter.alignment}\r\n                        disabled={!this.state.monster.alignment}\r\n                        changeValue={value => this.toggleMatch('alignment')}\r\n                    />\r\n                    <Checkbox\r\n                        label={'challenge rating ' + Utils.challenge(this.state.monster.challenge)}\r\n                        checked={this.state.filter.challenge}\r\n                        changeValue={value => this.toggleMatch('challenge')}\r\n                    />\r\n                    <div className='divider' />\r\n                    <button className={monsters.length < 2 ? 'disabled' : ''} onClick={() => this.geneSplice(monsters)}>build random monster</button>\r\n                    <div className='divider' />\r\n                    {similar}\r\n                </div>\r\n            );\r\n        } else {\r\n            filterContent = (\r\n                <div>\r\n                    {similar}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className='section'>\r\n                <div className='card'>\r\n                    <div className='heading'>\r\n                        <div className='title'>similar monsters</div>\r\n                        <img className={this.state.showFilter ? 'image rotate' : 'image'} src={arrow} alt='arrow' onClick={() => this.toggleFilter()} />\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        {filterContent}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getMonsterCards(monsters: Monster[]) {\r\n        const sorted = Utils.sort(monsters);\r\n        const monsterCards = sorted.map(m => (\r\n            <div className='section' key={m.id}>\r\n                <MonsterCard\r\n                    combatant={m}\r\n                    mode={'template ' + this.state.page}\r\n                    copyTrait={trait => this.copyTrait(trait)}\r\n                />\r\n            </div>\r\n        ));\r\n\r\n        return monsterCards;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    public render() {\r\n        try {\r\n            const pages = [\r\n                {\r\n                    id: 'overview',\r\n                    text: 'overview'\r\n                },\r\n                {\r\n                    id: 'abilities',\r\n                    text: 'abilities'\r\n                },\r\n                {\r\n                    id: 'cbt-stats',\r\n                    text: 'combat'\r\n                },\r\n                {\r\n                    id: 'actions',\r\n                    text: 'actions'\r\n                }\r\n            ];\r\n\r\n            let monsters: Monster[] = [];\r\n            if (this.props.showMonsters) {\r\n                monsters = this.getMonsters();\r\n            }\r\n\r\n            let content = null;\r\n            switch (this.state.page) {\r\n                case 'overview':\r\n                    const catOptions = CATEGORY_TYPES.map(cat => ({ id: cat, text: cat }));\r\n                    const sizeOptions = SIZE_TYPES.map(size => ({ id: size, text: size }));\r\n\r\n                    content = (\r\n                        <div className='row'>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>name</div>\r\n                                <input type='text' value={this.state.monster.name} onChange={event => this.changeValue('name', event.target.value)} />\r\n                                <div className='subheading'>size</div>\r\n                                <Dropdown\r\n                                    options={sizeOptions}\r\n                                    selectedID={this.state.monster.size}\r\n                                    select={optionID => this.changeValue('size', optionID)}\r\n                                />\r\n                                <div className='subheading'>type</div>\r\n                                <Dropdown\r\n                                    options={catOptions}\r\n                                    selectedID={this.state.monster.category}\r\n                                    select={optionID => this.changeValue('category', optionID)}\r\n                                />\r\n                                <div className='subheading'>subtype</div>\r\n                                <input type='text' value={this.state.monster.tag} onChange={event => this.changeValue('tag', event.target.value)} />\r\n                                <div className='subheading'>alignment</div>\r\n                                <input type='text' value={this.state.monster.alignment} onChange={event => this.changeValue('alignment', event.target.value)} />\r\n                            </div>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>challenge rating</div>\r\n                                <Spin\r\n                                    source={this.state.monster}\r\n                                    name='challenge'\r\n                                    display={value => Utils.challenge(value)}\r\n                                    nudgeValue={delta => this.nudgeValue('challenge', delta)}\r\n                                />\r\n                                <div className='subheading'>speed</div>\r\n                                <input type='text' value={this.state.monster.speed} onChange={event => this.changeValue('speed', event.target.value)} />\r\n                                <div className='subheading'>senses</div>\r\n                                <input type='text' value={this.state.monster.senses} onChange={event => this.changeValue('senses', event.target.value)} />\r\n                                <div className='subheading'>languages</div>\r\n                                <input type='text' value={this.state.monster.languages} onChange={event => this.changeValue('languages', event.target.value)} />\r\n                                <div className='subheading'>equipment</div>\r\n                                <input type='text' value={this.state.monster.equipment} onChange={event => this.changeValue('equipment', event.target.value)} />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                    break;\r\n                case 'abilities':\r\n                    content = (\r\n                        <div className='row'>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>ability scores</div>\r\n                                <AbilityScorePanel\r\n                                    edit={true}\r\n                                    combatant={this.state.monster}\r\n                                    nudgeValue={(source, type, delta) => this.nudgeValue(type, delta)}\r\n                                />\r\n                            </div>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>saving throws</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.savingThrows}\r\n                                    onChange={event => this.changeValue('savingThrows', event.target.value)}\r\n                                />\r\n                                <div className='subheading'>skills</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.skills}\r\n                                    onChange={event => this.changeValue('skills', event.target.value)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                    break;\r\n                case 'cbt-stats':\r\n                    content = (\r\n                        <div className='row'>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>armor class</div>\r\n                                <Spin\r\n                                    source={this.state.monster}\r\n                                    name='ac'\r\n                                    nudgeValue={delta => this.nudgeValue('ac', delta)}\r\n                                />\r\n                                <div className='subheading'>hit dice</div>\r\n                                <Spin\r\n                                    source={this.state.monster}\r\n                                    name='hitDice'\r\n                                    display={value => value + 'd' + Utils.hitDieType(this.state.monster.size)}\r\n                                    nudgeValue={delta => this.nudgeValue('hitDice', delta)}\r\n                                />\r\n                                <div className='subheading'>hit points</div>\r\n                                <div className='hp-value'>{this.state.monster.hpMax} hp</div>\r\n                            </div>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>damage resistances</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.damage.resist}\r\n                                    onChange={event => this.changeValue('damage.resist', event.target.value)}\r\n                                />\r\n                                <div className='subheading'>damage vulnerabilities</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.damage.vulnerable}\r\n                                    onChange={event => this.changeValue('damage.vulnerable', event.target.value)}\r\n                                />\r\n                                <div className='subheading'>damage immunities</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.damage.immune}\r\n                                    onChange={event => this.changeValue('damage.immune', event.target.value)}\r\n                                />\r\n                                <div className='subheading'>condition immunities</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.conditionImmunities}\r\n                                    onChange={event => this.changeValue('conditionImmunities', event.target.value)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                    break;\r\n                case 'actions':\r\n                    content = (\r\n                        <TraitsPanel\r\n                            combatant={this.state.monster}\r\n                            mode='edit'\r\n                            addTrait={type => this.addTrait(type)}\r\n                            removeTrait={trait => this.removeTrait(trait)}\r\n                            changeValue={(trait, type, value) => this.changeTrait(trait, type, value)}\r\n                        />\r\n                    );\r\n                    break;\r\n                default:\r\n                    // Do nothing\r\n                    break;\r\n            }\r\n\r\n            let help = null;\r\n            if (this.props.showMonsters && (monsters.length > 1)) {\r\n                let selector = null;\r\n                if (this.getHelpOptionsForPage(this.state.page).length > 1) {\r\n                    const options = this.getHelpOptionsForPage(this.state.page).map(s => {\r\n                        return {\r\n                            id: s,\r\n                            text: s\r\n                        };\r\n                    });\r\n                    selector = (\r\n                        <Selector\r\n                            tabs={false}\r\n                            options={options}\r\n                            selectedID={this.state.helpSection}\r\n                            select={optionID => this.setHelpSection(optionID)}\r\n                        />\r\n                    );\r\n                }\r\n\r\n                help = (\r\n                    <div className='monster-help'>\r\n                        <div className='subheading'>information from similar monsters</div>\r\n                        {selector}\r\n                        {this.getHelpSection(monsters)}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            let monsterList = null;\r\n            if (this.props.showMonsters) {\r\n                monsterList = (\r\n                    <div className='columns small-4 medium-4 large-4 scrollable list-column'>\r\n                        {this.getFilterCard(monsters)}\r\n                        {this.getMonsterCards(monsters)}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='row' style={{ height: '100%', margin: '0 -15px' }}>\r\n                    <div\r\n                        className={\r\n                            this.props.showMonsters\r\n                            ? 'columns small-8 medium-8 large-8 scrollable'\r\n                            : 'columns small-12 medium-12 large-12 scrollable'\r\n                        }\r\n                        style={{ transition: 'none' }}\r\n                    >\r\n                        <div className='section'>\r\n                            <Selector\r\n                                tabs={true}\r\n                                options={pages}\r\n                                selectedID={this.state.page}\r\n                                select={optionID => this.setPage(optionID as 'overview' | 'abilities' | 'cbt-stats' | 'actions')}\r\n                            />\r\n                            {content}\r\n                            {help}\r\n                        </div>\r\n                    </div>\r\n                    {monsterList}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Encounter } from '../../models/encounter';\r\nimport { MonsterGroup } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\ninterface Props {\r\n    view: string;\r\n    blur: boolean;\r\n    library: MonsterGroup[];\r\n    parties: Party[];\r\n    encounters: Encounter[];\r\n    setView: (view: string) => void;\r\n}\r\n\r\nexport default class Navbar extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const dmStyle = this.props.view === 'dm' ? 'navigator-item selected' : 'navigator-item';\r\n            const partiesStyle = this.props.view === 'parties' ? 'navigator-item selected' : 'navigator-item';\r\n            const libraryStyle = this.props.view === 'library' ? 'navigator-item selected' : 'navigator-item';\r\n            let encounterStyle = this.props.view === 'encounter' ? 'navigator-item selected' : 'navigator-item';\r\n            const mapStyle = this.props.view === 'maps' ? 'navigator-item selected' : 'navigator-item';\r\n            let combatStyle = this.props.view === 'combat' ? 'navigator-item selected' : 'navigator-item';\r\n\r\n            const encountersEnabled = this.props.library.length !== 0;\r\n            const combatEnabled = (this.props.parties.length !== 0) && (this.props.encounters.length !== 0);\r\n            if (!encountersEnabled) {\r\n                encounterStyle += ' disabled';\r\n            }\r\n            if (!combatEnabled) {\r\n                combatStyle += ' disabled';\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.blur ? 'navbar blur' : 'navbar'}>\r\n                    <div className={dmStyle} onClick={() => this.props.setView('dm')}>dm screen</div>\r\n                    <div className={partiesStyle} onClick={() => this.props.setView('parties')}>player characters</div>\r\n                    <div className={libraryStyle} onClick={() => this.props.setView('library')}>monster library</div>\r\n                    <div className={encounterStyle} onClick={() => encountersEnabled ? this.props.setView('encounter') : null}>encounter builder</div>\r\n                    <div className={mapStyle} onClick={() => this.props.setView('maps')}>map folios</div>\r\n                    <div className={combatStyle} onClick={() => combatEnabled ? this.props.setView('combat') : null}>combat manager</div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport cog from '../../resources/images/settings.svg';\r\n\r\ninterface Props {\r\n    actions: JSX.Element | null;\r\n    blur: boolean;\r\n    openHome: () => void;\r\n    openAbout: () => void;\r\n}\r\n\r\nexport default class Titlebar extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div className={this.props.blur ? 'titlebar blur' : 'titlebar'}>\r\n                    <div className='app-name' onClick={() => this.props.openHome()}>dojo</div>\r\n                    {this.props.actions}\r\n                    <img className='settings-icon' src={cog} title='about' alt='about' onClick={() => this.props.openAbout()} />\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Factory from '../utils/factory';\r\nimport Utils from '../utils/utils';\r\n\r\nimport { Combat, Combatant, CombatSetup, Notification } from '../models/combat';\r\nimport { Condition } from '../models/condition';\r\nimport { DMModule } from '../models/dm-module';\r\nimport { Encounter, EncounterSlot, EncounterWave } from '../models/encounter';\r\nimport { Map, MapFolio } from '../models/map-folio';\r\nimport { Monster, MonsterGroup, Trait } from '../models/monster-group';\r\nimport { Party, PC } from '../models/party';\r\n\r\nimport CombatManagerScreen from './screens/combat-manager-screen';\r\nimport DMScreen from './screens/dm-screen';\r\nimport EncounterBuilderScreen from './screens/encounter-builder-screen';\r\nimport HomeScreen from './screens/home-screen';\r\nimport MapFoliosScreen from './screens/map-folios-screen';\r\nimport MonsterLibraryScreen from './screens/monster-library-screen';\r\nimport PartiesScreen from './screens/parties-screen';\r\n\r\nimport AboutModal from './modals/about-modal';\r\nimport CombatStartModal from './modals/combat-start-modal';\r\nimport ConditionModal from './modals/condition-modal';\r\nimport DemographicsModal from './modals/demographics-modal';\r\nimport MapEditorModal from './modals/map-editor-modal';\r\nimport MonsterEditorModal from './modals/monster-editor-modal';\r\n\r\nimport Navbar from './panels/navbar';\r\nimport Titlebar from './panels/titlebar';\r\n\r\nimport Checkbox from './controls/checkbox';\r\n\r\nimport close from '../resources/images/close-black.svg';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    // No props; this is the root component\r\n}\r\n\r\ninterface State {\r\n    view: string;\r\n    options: {\r\n        showHelp: boolean;\r\n    };\r\n\r\n    parties: Party[];\r\n    library: MonsterGroup[];\r\n    encounters: Encounter[];\r\n    mapFolios: MapFolio[];\r\n    combats: Combat[];\r\n\r\n    selectedPartyID: string | null;\r\n    selectedMonsterGroupID: string | null;\r\n    selectedEncounterID: string | null;\r\n    selectedMapFolioID: string | null;\r\n    selectedCombatID: string | null;\r\n    selectedDMModuleID: string | null;\r\n\r\n    modal: any;\r\n\r\n    libraryFilter: string;\r\n}\r\n\r\nexport default class Dojo extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            view: 'home',\r\n            options: {\r\n                showHelp: true\r\n            },\r\n            parties: [],\r\n            library: [],\r\n            encounters: [],\r\n            mapFolios: [],\r\n            combats: [],\r\n            selectedPartyID: null,\r\n            selectedMonsterGroupID: null,\r\n            selectedEncounterID: null,\r\n            selectedMapFolioID: null,\r\n            selectedCombatID: null,\r\n            selectedDMModuleID: null,\r\n            modal: null,\r\n            libraryFilter: ''\r\n        };\r\n\r\n        try {\r\n            let data: State | null = null;\r\n\r\n            try {\r\n                const json = window.localStorage.getItem('data');\r\n                if (json) {\r\n                    data = JSON.parse(json);\r\n                }\r\n            } catch (ex) {\r\n                console.error('Could not parse JSON: ', ex);\r\n                data = null;\r\n            }\r\n\r\n            if (data !== null) {\r\n                data.library.forEach(g => {\r\n                    g.monsters.forEach(m => {\r\n                        m.traits.forEach(t => {\r\n                            t.uses = 0;\r\n                        });\r\n                    });\r\n                });\r\n\r\n                data.encounters.forEach(enc => {\r\n                    if (!enc.waves) {\r\n                        enc.waves = [];\r\n                    }\r\n                });\r\n\r\n                if (!data.mapFolios) {\r\n                    data.mapFolios = [];\r\n                    data.selectedMapFolioID = null;\r\n                }\r\n\r\n                data.combats.forEach(combat => {\r\n                    if (!combat.notifications) {\r\n                        combat.notifications = [];\r\n                    }\r\n                    combat.combatants.forEach(c => {\r\n                        if (c.altitude === undefined) {\r\n                            c.altitude = 0;\r\n                        }\r\n\r\n                        if (c.type === 'monster') {\r\n                            const m = c as Combatant & Monster;\r\n                            m.traits.forEach(t => {\r\n                                if (t.uses === undefined) {\r\n                                    t.uses = 0;\r\n                                }\r\n                            });\r\n                        }\r\n                    });\r\n                });\r\n\r\n                data.view = 'home';\r\n                data.modal = null;\r\n                data.libraryFilter = '';\r\n\r\n                this.state = data;\r\n            }\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n\r\n    public componentDidUpdate() {\r\n        let json = null;\r\n        try {\r\n            json = JSON.stringify(this.state);\r\n        } catch (ex) {\r\n            console.error('Could not stringify data: ', ex);\r\n            json = null;\r\n        }\r\n\r\n        if (json !== null) {\r\n            window.localStorage.setItem('data', json);\r\n        }\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////////\r\n    // Party screen\r\n\r\n    private addParty() {\r\n        const party = Factory.createParty();\r\n        party.name = 'new party';\r\n        const parties: Party[] = ([] as Party[]).concat(this.state.parties, [party]);\r\n        Utils.sort(parties);\r\n        this.setState({\r\n            parties: parties,\r\n            selectedPartyID: party.id\r\n        });\r\n    }\r\n\r\n    private removeParty() {\r\n        const party = this.getParty(this.state.selectedPartyID);\r\n        if (party) {\r\n            const index = this.state.parties.indexOf(party);\r\n            this.state.parties.splice(index, 1);\r\n            this.setState({\r\n                parties: this.state.parties,\r\n                selectedPartyID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private addPC() {\r\n        const party = this.getParty(this.state.selectedPartyID);\r\n        if (party) {\r\n            const pc = Factory.createPC();\r\n            pc.name = 'new pc';\r\n            party.pcs.push(pc);\r\n            this.setState({\r\n                parties: this.state.parties\r\n            });\r\n        }\r\n    }\r\n\r\n    private removePC(pc: PC) {\r\n        const party = this.getParty(this.state.selectedPartyID);\r\n        if (party) {\r\n            const index = party.pcs.indexOf(pc);\r\n            party.pcs.splice(index, 1);\r\n            this.setState({\r\n                parties: this.state.parties\r\n            });\r\n        }\r\n    }\r\n\r\n    private sortPCs() {\r\n        const party = this.getParty(this.state.selectedPartyID);\r\n        if (party) {\r\n            Utils.sort(party.pcs);\r\n            this.setState({\r\n                parties: this.state.parties\r\n            });\r\n        }\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////////\r\n    // Library screen\r\n\r\n    private addMonsterGroup() {\r\n        const group = Factory.createMonsterGroup();\r\n        group.name = 'new group';\r\n        const library = ([] as MonsterGroup[]).concat(this.state.library, [group]);\r\n        Utils.sort(library);\r\n        this.setState({\r\n            library: library,\r\n            selectedMonsterGroupID: group.id\r\n        });\r\n    }\r\n\r\n    private removeMonsterGroup() {\r\n        const group = this.getMonsterGroup(this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            const index = this.state.library.indexOf(group);\r\n            this.state.library.splice(index, 1);\r\n            this.setState({\r\n                library: this.state.library,\r\n                selectedMonsterGroupID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private addMonster() {\r\n        const monster = Factory.createMonster();\r\n        monster.name = 'new monster';\r\n        const group = this.getMonsterGroup(this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            group.monsters.push(monster);\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    private removeMonster(monster: Monster) {\r\n        const group = this.getMonsterGroup(this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            const index = group.monsters.indexOf(monster);\r\n            group.monsters.splice(index, 1);\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    private sortMonsters() {\r\n        const group = this.getMonsterGroup(this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            Utils.sort(group.monsters);\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    private moveToGroup(monster: Monster, groupID: string) {\r\n        const sourceGroup = this.findMonster(monster);\r\n        if (sourceGroup) {\r\n            const index = sourceGroup.monsters.indexOf(monster);\r\n\r\n            sourceGroup.monsters.splice(index, 1);\r\n            const group = this.getMonsterGroup(groupID);\r\n            if (group) {\r\n                group.monsters.push(monster);\r\n                Utils.sort(group.monsters);\r\n\r\n                this.setState({\r\n                    library: this.state.library\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private editMonster(monster: Monster) {\r\n        const copy = JSON.parse(JSON.stringify(monster));\r\n        this.setState({\r\n            modal: {\r\n                type: 'monster',\r\n                monster: copy,\r\n                showMonsters: false\r\n            }\r\n        });\r\n    }\r\n\r\n    private saveMonster() {\r\n        const group = this.getMonsterGroup(this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            const original = group.monsters.find(m => m.id === this.state.modal.monster.id);\r\n            if (original) {\r\n                const index = group.monsters.indexOf(original);\r\n                group.monsters[index] = this.state.modal.monster;\r\n                this.setState({\r\n                    library: this.state.library,\r\n                    modal: null\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private toggleShowSimilarMonsters() {\r\n        // eslint-disable-next-line\r\n        this.state.modal.showMonsters = !this.state.modal.showMonsters;\r\n        this.setState({\r\n            modal: this.state.modal\r\n        });\r\n    }\r\n\r\n    private openDemographics() {\r\n        this.setState({\r\n            modal: {\r\n                type: 'demographics'\r\n            }\r\n        });\r\n    }\r\n\r\n    private cloneMonster(monster: Monster, name: string) {\r\n        const group = this.findMonster(monster);\r\n        if (group) {\r\n            const clone = {\r\n                id: Utils.guid(),\r\n                type: 'monster',\r\n                name: name || monster.name + ' copy',\r\n                size: monster.size,\r\n                category: monster.category,\r\n                tag: monster.tag,\r\n                alignment: monster.alignment,\r\n                challenge: monster.challenge,\r\n                abilityScores: {\r\n                    str: monster.abilityScores.str,\r\n                    dex: monster.abilityScores.dex,\r\n                    con: monster.abilityScores.con,\r\n                    int: monster.abilityScores.int,\r\n                    wis: monster.abilityScores.wis,\r\n                    cha: monster.abilityScores.cha\r\n                },\r\n                ac: monster.ac,\r\n                hpMax: monster.hpMax,\r\n                hpTemp: monster.hpTemp,\r\n                hitDice: monster.hitDice,\r\n                damage: {\r\n                    resist: monster.damage.resist,\r\n                    vulnerable: monster.damage.vulnerable,\r\n                    immune: monster.damage.immune\r\n                },\r\n                savingThrows: monster.savingThrows,\r\n                speed: monster.speed,\r\n                skills: monster.skills,\r\n                senses: monster.senses,\r\n                languages: monster.languages,\r\n                equipment: monster.equipment,\r\n                traits: monster.traits.map(trait => {\r\n                    return {\r\n                        id: Utils.guid(),\r\n                        name: trait.name,\r\n                        usage: trait.usage,\r\n                        type: trait.type,\r\n                        text: trait.text,\r\n                        uses: 0\r\n                    };\r\n                }),\r\n                conditionImmunities: monster.conditionImmunities\r\n            };\r\n\r\n            group.monsters.push(clone);\r\n            Utils.sort(group.monsters);\r\n\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    private addOpenGameContent() {\r\n        fetch('./data/monsters.json')\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                json.forEach((data: any) => {\r\n                    try {\r\n                        if (data.name) {\r\n                            const monster = Factory.createMonster();\r\n\r\n                            monster.type = 'monster';\r\n                            monster.name = data.name;\r\n                            monster.size = data.size.toLowerCase();\r\n                            monster.category = data.type;\r\n                            monster.tag = data.subtype;\r\n                            monster.alignment = data.alignment;\r\n                            monster.challenge = Utils.parseChallenge(data.challenge_rating);\r\n                            monster.ac = data.armor_class;\r\n                            monster.hpMax = data.hit_points;\r\n                            monster.speed = data.speed;\r\n                            monster.senses = data.senses;\r\n                            monster.languages = data.languages;\r\n\r\n                            const index = data.hit_dice.indexOf('d');\r\n                            monster.hitDice = parseInt(data.hit_dice.substring(0, index), 10);\r\n\r\n                            monster.abilityScores.str = data.strength;\r\n                            monster.abilityScores.dex = data.dexterity;\r\n                            monster.abilityScores.con = data.constitution;\r\n                            monster.abilityScores.int = data.intelligence;\r\n                            monster.abilityScores.wis = data.wisdom;\r\n                            monster.abilityScores.cha = data.charisma;\r\n\r\n                            monster.damage.resist = data.damage_resistances;\r\n                            monster.damage.vulnerable = data.damage_vulnerabilities;\r\n                            monster.damage.immune = data.damage_immunities;\r\n                            monster.conditionImmunities = data.condition_immunities;\r\n\r\n                            const saves = [\r\n                                {\r\n                                    field: 'strength_save',\r\n                                    text: 'Strength'\r\n                                },\r\n                                {\r\n                                    field: 'dexterity_save',\r\n                                    text: 'Dexterity'\r\n                                },\r\n                                {\r\n                                    field: 'constitution_save',\r\n                                    text: 'Constitution'\r\n                                },\r\n                                {\r\n                                    field: 'intelligence_save',\r\n                                    text: 'Intelligence'\r\n                                },\r\n                                {\r\n                                    field: 'wisdom_save',\r\n                                    text: 'Wisdom'\r\n                                },\r\n                                {\r\n                                    field: 'charisma_save',\r\n                                    text: 'Charisma'\r\n                                }\r\n                            ];\r\n                            saves.forEach(save => {\r\n                                if (data[save.field]) {\r\n                                    const str = save.text + ' ' + data[save.field];\r\n                                    monster.savingThrows += monster.savingThrows === '' ? str : ', ' + str;\r\n                                }\r\n                            });\r\n\r\n                            const skills = [\r\n                                {\r\n                                    field: 'acrobatics',\r\n                                    text: 'Acrobatics'\r\n                                },\r\n                                {\r\n                                    field: 'animal_handling',\r\n                                    text: 'Animal handling'\r\n                                },\r\n                                {\r\n                                    field: 'arcana',\r\n                                    text: 'Arcana'\r\n                                },\r\n                                {\r\n                                    field: 'athletics',\r\n                                    text: 'Athletics'\r\n                                },\r\n                                {\r\n                                    field: 'deception',\r\n                                    text: 'Deception'\r\n                                },\r\n                                {\r\n                                    field: 'history',\r\n                                    text: 'History'\r\n                                },\r\n                                {\r\n                                    field: 'insight',\r\n                                    text: 'Insight'\r\n                                },\r\n                                {\r\n                                    field: 'intimidation',\r\n                                    text: 'Intimidation'\r\n                                },\r\n                                {\r\n                                    field: 'investigation',\r\n                                    text: 'Investigation'\r\n                                },\r\n                                {\r\n                                    field: 'medicine',\r\n                                    text: 'Medicine'\r\n                                },\r\n                                {\r\n                                    field: 'nature',\r\n                                    text: 'Nature'\r\n                                },\r\n                                {\r\n                                    field: 'perception',\r\n                                    text: 'Perception'\r\n                                },\r\n                                {\r\n                                    field: 'performance',\r\n                                    text: 'Performance'\r\n                                },\r\n                                {\r\n                                    field: 'persuasion',\r\n                                    text: 'Persuasion'\r\n                                },\r\n                                {\r\n                                    field: 'religion',\r\n                                    text: 'Religion'\r\n                                },\r\n                                {\r\n                                    field: 'sleight_of_hand',\r\n                                    text: 'Sleight of hand'\r\n                                },\r\n                                {\r\n                                    field: 'stealth',\r\n                                    text: 'Stealth'\r\n                                },\r\n                                {\r\n                                    field: 'survival',\r\n                                    text: 'Survival'\r\n                                }\r\n                            ];\r\n                            skills.forEach(skill => {\r\n                                if (data[skill.field]) {\r\n                                    const str = skill.text + ' ' + data[skill.field];\r\n                                    monster.skills += monster.skills === '' ? str : ', ' + str;\r\n                                }\r\n                            });\r\n\r\n                            if (data.special_abilities) {\r\n                                data.special_abilities.forEach((rawTrait: any) => {\r\n                                    const trait = this.buildTrait(rawTrait, 'trait');\r\n                                    monster.traits.push(trait);\r\n                                });\r\n                            }\r\n                            if (data.actions) {\r\n                                data.actions.forEach((rawTrait: any) => {\r\n                                    const trait = this.buildTrait(rawTrait, 'action');\r\n                                    monster.traits.push(trait);\r\n                                });\r\n                            }\r\n                            if (data.legendary_actions) {\r\n                                data.legendary_actions.forEach((rawTrait: any) => {\r\n                                    const trait = this.buildTrait(rawTrait, 'legendary');\r\n                                    monster.traits.push(trait);\r\n                                });\r\n                            }\r\n\r\n                            let groupName = monster.tag;\r\n                            if (groupName === '') {\r\n                                groupName = monster.category;\r\n                            }\r\n                            if (groupName.indexOf('swarm') === 0) {\r\n                                groupName = 'swarm';\r\n                            }\r\n                            if (groupName === 'any race') {\r\n                                groupName = 'npc';\r\n                            }\r\n\r\n                            let group = this.getMonsterGroupByName(groupName);\r\n                            if (!group) {\r\n                                group = {\r\n                                    id: Utils.guid(),\r\n                                    name: groupName,\r\n                                    monsters: []\r\n                                };\r\n                                this.state.library.push(group);\r\n                            }\r\n                            group.monsters.push(monster);\r\n                        }\r\n                    } catch (e) {\r\n                        console.error(e);\r\n                    }\r\n                });\r\n\r\n                Utils.sort(this.state.library);\r\n\r\n                this.setState({\r\n                    view: 'library',\r\n                    library: this.state.library\r\n                });\r\n            });\r\n    }\r\n\r\n    private buildTrait(rawTrait: any, type: 'trait' | 'action' | 'legendary' | 'lair' | 'regional'): Trait {\r\n        let name = '';\r\n        let usage = '';\r\n\r\n        const openBracket = rawTrait.name.indexOf('(');\r\n        if (openBracket === -1) {\r\n            name = rawTrait.name;\r\n        } else {\r\n            const closeBracket = rawTrait.name.indexOf(')');\r\n            name = rawTrait.name.substring(0, openBracket - 1);\r\n            usage = rawTrait.name.substring(openBracket + 1, closeBracket).toLowerCase();\r\n        }\r\n\r\n        const text = rawTrait.desc.replace(/•/g, '*');\r\n\r\n        return {\r\n            id: Utils.guid(),\r\n            type: type,\r\n            name: name,\r\n            usage: usage,\r\n            text: text,\r\n            uses: 0\r\n        };\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////////\r\n    // Encounter screen\r\n\r\n    private addEncounter() {\r\n        const encounter = Factory.createEncounter();\r\n        encounter.name = 'new encounter';\r\n        const encounters = ([] as Encounter[]).concat(this.state.encounters, [encounter]);\r\n        Utils.sort(encounters);\r\n\r\n        this.setState({\r\n            encounters: encounters,\r\n            selectedEncounterID: encounter.id\r\n        });\r\n    }\r\n\r\n    private removeEncounter() {\r\n        const encounter = this.getEncounter(this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            const index = this.state.encounters.indexOf(encounter);\r\n            this.state.encounters.splice(index, 1);\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters,\r\n                selectedEncounterID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private addEncounterSlot(monster: Monster, waveID: string | null) {\r\n        const group = this.findMonster(monster);\r\n        if (group) {\r\n            const slot = Factory.createEncounterSlot();\r\n            slot.monsterGroupName = group.name;\r\n            slot.monsterName = monster.name;\r\n            const encounter = this.getEncounter(this.state.selectedEncounterID);\r\n            if (encounter) {\r\n                if (waveID !== null) {\r\n                    const wave = encounter.waves.find(w => w.id === waveID);\r\n                    if (wave) {\r\n                        wave.slots.push(slot);\r\n                        this.sortEncounterSlots(wave);\r\n                    }\r\n                } else {\r\n                    encounter.slots.push(slot);\r\n                    this.sortEncounterSlots(encounter);\r\n                }\r\n\r\n                this.setState({\r\n                    encounters: this.state.encounters\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeEncounterSlot(slot: EncounterSlot, waveID: string | null) {\r\n        const encounter = this.getEncounter(this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            if (waveID) {\r\n                const wave = encounter.waves.find(w => w.id === waveID);\r\n                if (wave) {\r\n                    const index = wave.slots.indexOf(slot);\r\n                    wave.slots.splice(index, 1);\r\n                }\r\n            } else {\r\n                const n = encounter.slots.indexOf(slot);\r\n                encounter.slots.splice(n, 1);\r\n            }\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters\r\n            });\r\n        }\r\n    }\r\n\r\n    private sortEncounterSlots(slotContainer: { slots: EncounterSlot[] }) {\r\n        slotContainer.slots.sort((a, b) => {\r\n            const aName = a.monsterName.toLowerCase();\r\n            const bName = b.monsterName.toLowerCase();\r\n            if (aName < bName) { return -1; }\r\n            if (aName > bName) { return 1; }\r\n            return 0;\r\n        });\r\n    }\r\n\r\n    private addWaveToEncounter() {\r\n        const encounter = this.getEncounter(this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            const wave = Factory.createEncounterWave();\r\n            wave.name = 'wave ' + (encounter.waves.length + 2);\r\n            encounter.waves.push(wave);\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters\r\n            });\r\n        }\r\n    }\r\n\r\n    private removeWave(wave: EncounterWave) {\r\n        const encounter = this.getEncounter(this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            const index = encounter.waves.indexOf(wave);\r\n            encounter.waves.splice(index, 1);\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters\r\n            });\r\n        }\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////////\r\n    // Map screen\r\n\r\n    private addMapFolio() {\r\n        const folio = Factory.createMapFolio();\r\n        folio.name = 'new folio';\r\n        const folios = ([] as MapFolio[]).concat(this.state.mapFolios, [folio]);\r\n        Utils.sort(folios);\r\n\r\n        this.setState({\r\n            mapFolios: folios,\r\n            selectedMapFolioID: folio.id\r\n        });\r\n    }\r\n\r\n    private removeMapFolio() {\r\n        const folio = this.getMapFolio(this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            const index = this.state.mapFolios.indexOf(folio);\r\n            this.state.mapFolios.splice(index, 1);\r\n\r\n            this.setState({\r\n                mapFolios: this.state.mapFolios,\r\n                selectedMapFolioID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private addMap() {\r\n        const folio = this.getMapFolio(this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            const map = Factory.createMap();\r\n            map.name = 'new map';\r\n            folio.maps.push(map);\r\n\r\n            this.setState({\r\n                mapFolios: this.state.mapFolios\r\n            });\r\n        }\r\n    }\r\n\r\n    private editMap(map: Map) {\r\n        const copy = JSON.parse(JSON.stringify(map));\r\n        this.setState({\r\n            modal: {\r\n                type: 'map',\r\n                map: copy\r\n            }\r\n        });\r\n    }\r\n\r\n    private saveMap() {\r\n        const folio = this.getMapFolio(this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            const original = folio.maps.find(m => m.id === this.state.modal.map.id);\r\n            if (original) {\r\n                const index = folio.maps.indexOf(original);\r\n                folio.maps[index] = this.state.modal.map;\r\n                this.setState({\r\n                    mapFolios: this.state.mapFolios,\r\n                    modal: null\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeMap(map: Map) {\r\n        const folio = this.getMapFolio(this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            const index = folio.maps.indexOf(map);\r\n            folio.maps.splice(index, 1);\r\n            this.setState({\r\n                mapFolios: this.state.mapFolios\r\n            });\r\n        }\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////////\r\n    // Combat screen\r\n\r\n    private createCombat() {\r\n        const party = this.state.parties.length === 1 ? this.state.parties[0] : null;\r\n        const encounter = this.state.encounters.length === 1 ? this.state.encounters[0] : null;\r\n\r\n        const setup = Factory.createCombatSetup();\r\n        setup.partyID = party ? party.id : null;\r\n        setup.encounterID = encounter ? encounter.id : null;\r\n        if (encounter) {\r\n            setup.monsterNames = Utils.getMonsterNames(encounter);\r\n        }\r\n\r\n        this.setState({\r\n            modal: {\r\n                type: 'combat-start',\r\n                combatSetup: setup\r\n            }\r\n        });\r\n    }\r\n\r\n    private startCombat() {\r\n        const combatSetup: CombatSetup = this.state.modal.combatSetup;\r\n        const party = this.getParty(combatSetup.partyID);\r\n        const encounter = this.getEncounter(combatSetup.encounterID);\r\n        if (party && encounter) {\r\n            const partyName = party.name || 'unnamed party';\r\n            const encounterName = encounter.name || 'unnamed encounter';\r\n\r\n            const combat = Factory.createCombat();\r\n            combat.name = partyName + ' vs ' + encounterName;\r\n            combat.encounterID = encounter.id;\r\n\r\n            // Add a copy of each PC to the encounter\r\n            party.pcs.filter(pc => pc.active).forEach(pc => {\r\n                const combatant = JSON.parse(JSON.stringify(pc));\r\n\r\n                combatant.current = false;\r\n                combatant.pending = true;\r\n                combatant.active = false;\r\n                combatant.defeated = false;\r\n\r\n                combatant.displayName = pc.name;\r\n                combatant.initiative = 10;\r\n                combatant.hp = null;\r\n                combatant.conditions = [];\r\n                combatant.altitude = 0;\r\n\r\n                combat.combatants.push(combatant);\r\n            });\r\n\r\n            encounter.slots.forEach(slot => {\r\n                const monster = this.getMonster(slot.monsterName, slot.monsterGroupName);\r\n                if (monster) {\r\n                    const init = parseInt(Utils.modifier(monster.abilityScores.dex), 10);\r\n                    const groupRoll = Utils.dieRoll();\r\n\r\n                    for (let n = 0; n !== slot.count; ++n) {\r\n                        const singleRoll = Utils.dieRoll();\r\n\r\n                        const combatant = JSON.parse(JSON.stringify(monster));\r\n                        combatant.id = Utils.guid();\r\n\r\n                        combatant.displayName = null;\r\n                        if (combatSetup.monsterNames) {\r\n                            const slotNames = combatSetup.monsterNames.find(names => names.id === slot.id);\r\n                            if (slotNames) {\r\n                                combatant.displayName = slotNames.names[n];\r\n                            }\r\n                        }\r\n\r\n                        switch (combatSetup.encounterInitMode) {\r\n                            case 'manual':\r\n                                combatant.initiative = 10;\r\n                                break;\r\n                            case 'group':\r\n                                combatant.initiative = init + groupRoll;\r\n                                break;\r\n                            case 'individual':\r\n                                combatant.initiative = init + singleRoll;\r\n                                break;\r\n                            default:\r\n                                // Do nothing\r\n                                break;\r\n                        }\r\n\r\n                        combatant.current = false;\r\n                        combatant.pending = (combatSetup.encounterInitMode === 'manual');\r\n                        combatant.active = (combatSetup.encounterInitMode !== 'manual');\r\n                        combatant.defeated = false;\r\n\r\n                        combatant.hp = combatant.hpMax;\r\n                        combatant.conditions = [];\r\n                        combatant.altitude = 0;\r\n\r\n                        combat.combatants.push(combatant);\r\n                    }\r\n                } else {\r\n                    combat.issues.push('unknown monster: ' + slot.monsterName + ' in group ' + slot.monsterGroupName);\r\n                }\r\n            });\r\n\r\n            combat.combatants.forEach(c => c.altitude = 0);\r\n\r\n            this.sortCombatants(combat);\r\n\r\n            if (combatSetup.folioID && combatSetup.mapID) {\r\n                const folio = this.getMapFolio(combatSetup.folioID);\r\n                if (folio) {\r\n                    const map = folio.maps.find(m => m.id === combatSetup.mapID);\r\n                    if (map) {\r\n                        combat.map = JSON.parse(JSON.stringify(map));\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.setState({\r\n                combats: ([] as Combat[]).concat(this.state.combats, [combat]),\r\n                selectedCombatID: combat.id,\r\n                modal: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private openWaveModal() {\r\n        const combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat) {\r\n            const encounter = this.getEncounter(combat.encounterID);\r\n            if (encounter) {\r\n                const setup = Factory.createCombatSetup();\r\n                setup.encounterID = combat.encounterID;\r\n                setup.monsterNames = Utils.getMonsterNames(encounter);\r\n\r\n                this.setState({\r\n                    modal: {\r\n                        type: 'combat-wave',\r\n                        combatSetup: setup\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private pauseCombat() {\r\n        const combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat) {\r\n            combat.timestamp = new Date().toLocaleString();\r\n            this.setState({\r\n                combats: this.state.combats,\r\n                selectedCombatID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private resumeCombat(combat: Combat) {\r\n        this.setState({\r\n            selectedCombatID: combat.id\r\n        });\r\n    }\r\n\r\n    private endCombat() {\r\n        const combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat) {\r\n            const index = this.state.combats.indexOf(combat);\r\n            this.state.combats.splice(index, 1);\r\n            this.setState({\r\n                combats: this.state.combats,\r\n                selectedCombatID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private makeCurrent(combatant: (Combatant & PC) | (Combatant & Monster) | null, newRound: boolean) {\r\n        const combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat) {\r\n            // Handle start-of-turn conditions\r\n            combat.combatants.filter(actor => actor.conditions).forEach(actor => {\r\n                actor.conditions.forEach(c => {\r\n                    if (c.duration) {\r\n                        switch (c.duration.type) {\r\n                            case 'saves':\r\n                                // If it's my condition, and point is START, notify the user\r\n                                if (combat && combatant && (actor.id === combatant.id) && (c.duration.point === 'start')) {\r\n                                    combat.notifications.push({\r\n                                        id: Utils.guid(),\r\n                                        type: 'condition-save',\r\n                                        data: c,\r\n                                        combatant: combatant as Combatant & Monster\r\n                                    });\r\n                                }\r\n                                break;\r\n                            case 'combatant':\r\n                                // If this refers to me, and point is START, remove it\r\n                                if (combat && combatant && (c.duration.combatantID === combatant.id) && (c.duration.point === 'start')) {\r\n                                    const index = actor.conditions.indexOf(c);\r\n                                    actor.conditions.splice(index, 1);\r\n                                    // Notify the user\r\n                                    combat.notifications.push({\r\n                                        id: Utils.guid(),\r\n                                        type: 'condition-end',\r\n                                        data: c,\r\n                                        combatant: combatant as Combatant & Monster\r\n                                    });\r\n                                }\r\n                                break;\r\n                            case 'rounds':\r\n                                // If it's my condition, decrement the condition\r\n                                if (combatant && (actor.id === combatant.id)) {\r\n                                    c.duration.count -= 1;\r\n                                }\r\n                                // If it's now at 0, remove it\r\n                                if (c.duration.count === 0) {\r\n                                    const n = actor.conditions.indexOf(c);\r\n                                    actor.conditions.splice(n, 1);\r\n                                    if (combat) {\r\n                                        // Notify the user\r\n                                        combat.notifications.push({\r\n                                            id: Utils.guid(),\r\n                                            type: 'condition-end',\r\n                                            data: c,\r\n                                            combatant: combatant as Combatant & Monster\r\n                                        });\r\n                                    }\r\n                                }\r\n                                break;\r\n                            default:\r\n                                // Do nothing\r\n                                break;\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n\r\n            // Handle recharging traits\r\n            if (combatant && (combatant.type === 'monster')) {\r\n                (combatant as Monster).traits\r\n                    .filter(t => (t.uses > 1) && t.usage.toLowerCase().startsWith('recharge '))\r\n                    .forEach(t => {\r\n                        combat.notifications.push({\r\n                            id: Utils.guid(),\r\n                            type: 'trait-recharge',\r\n                            data: t,\r\n                            combatant: combatant as Combatant & Monster\r\n                        });\r\n                    });\r\n            }\r\n\r\n            combat.combatants.forEach(c => {\r\n                c.current = false;\r\n            });\r\n            if (combatant) {\r\n                combatant.current = true;\r\n            }\r\n\r\n            if (newRound) {\r\n                combat.round += 1;\r\n            }\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private makeActive(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        const combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat) {\r\n            combatant.pending = false;\r\n            combatant.active = true;\r\n            combatant.defeated = false;\r\n\r\n            this.sortCombatants(combat);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private makeDefeated(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        combatant.pending = false;\r\n        combatant.active = false;\r\n        combatant.defeated = true;\r\n\r\n        if (combatant.current) {\r\n            this.endTurn(combatant);\r\n        } else {\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private addWaveToCombat() {\r\n        const combatSetup: CombatSetup = this.state.modal.combatSetup;\r\n        const encounter = this.getEncounter(combatSetup.encounterID);\r\n        const combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combatSetup && encounter && combat) {\r\n            const wave = encounter.waves.find(w => w.id === combatSetup.waveID);\r\n            if (wave) {\r\n                wave.slots.forEach(slot => {\r\n                    const monster = this.getMonster(slot.monsterName, slot.monsterGroupName);\r\n                    if (monster) {\r\n                        const init = parseInt(Utils.modifier(monster.abilityScores.dex), 10);\r\n                        const groupRoll = Utils.dieRoll();\r\n\r\n                        for (let n = 0; n !== slot.count; ++n) {\r\n                            const singleRoll = Utils.dieRoll();\r\n\r\n                            const combatant = JSON.parse(JSON.stringify(monster));\r\n                            combatant.id = Utils.guid();\r\n\r\n                            combatant.displayName = null;\r\n                            if (combatSetup.monsterNames) {\r\n                                const slotNames = combatSetup.monsterNames.find(names => names.id === slot.id);\r\n                                if (slotNames) {\r\n                                    combatant.displayName = slotNames.names[n];\r\n                                }\r\n                            }\r\n\r\n                            switch (combatSetup.encounterInitMode) {\r\n                                case 'manual':\r\n                                    combatant.initiative = 10;\r\n                                    break;\r\n                                case 'group':\r\n                                    combatant.initiative = init + groupRoll;\r\n                                    break;\r\n                                case 'individual':\r\n                                    combatant.initiative = init + singleRoll;\r\n                                    break;\r\n                                default:\r\n                                    // Do nothing\r\n                                    break;\r\n                            }\r\n\r\n                            combatant.current = false;\r\n                            combatant.pending = (this.state.modal.combatSetup.encounterInitMode === 'manual');\r\n                            combatant.active = (this.state.modal.combatSetup.encounterInitMode !== 'manual');\r\n                            combatant.defeated = false;\r\n\r\n                            combatant.hp = combatant.hpMax;\r\n                            combatant.conditions = [];\r\n\r\n                            if (combat) {\r\n                                combat.combatants.push(combatant);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (combat) {\r\n                            const issue = 'unknown monster: ' + slot.monsterName + ' in group ' + slot.monsterGroupName;\r\n                            combat.issues.push(issue);\r\n                        }\r\n                    }\r\n                });\r\n\r\n                this.sortCombatants(combat);\r\n\r\n                this.setState({\r\n                    combats: this.state.combats,\r\n                    modal: null\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeCombatant(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        const combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat) {\r\n            const index = combat.combatants.indexOf(combatant);\r\n            combat.combatants.splice(index, 1);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private mapAdd(combatant: ((Combatant & PC) | (Combatant & Monster)), x: number, y: number) {\r\n        const item = Factory.createMapItem();\r\n        item.id = combatant.id;\r\n        item.type = combatant.type as 'pc' | 'monster';\r\n        item.x = x;\r\n        item.y = y;\r\n        let size = 1;\r\n        if (combatant.type === 'monster') {\r\n            size = Utils.miniSize((combatant as Monster).size);\r\n        }\r\n        item.height = size;\r\n        item.width = size;\r\n\r\n        const combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat && combat.map) {\r\n            combat.map.items.push(item);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private mapMove(combatant: (Combatant & PC) | (Combatant & Monster), dir: string) {\r\n        const combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat && combat.map) {\r\n            const item = combat.map.items.find(i => i.id === combatant.id);\r\n            if (item) {\r\n                switch (dir) {\r\n                    case 'N':\r\n                        item.y -= 1;\r\n                        break;\r\n                    case 'NE':\r\n                        item.x += 1;\r\n                        item.y -= 1;\r\n                        break;\r\n                    case 'E':\r\n                        item.x += 1;\r\n                        break;\r\n                    case 'SE':\r\n                        item.x += 1;\r\n                        item.y += 1;\r\n                        break;\r\n                    case 'S':\r\n                        item.y += 1;\r\n                        break;\r\n                    case 'SW':\r\n                        item.x -= 1;\r\n                        item.y += 1;\r\n                        break;\r\n                    case 'W':\r\n                        item.x -= 1;\r\n                        break;\r\n                    case 'NW':\r\n                        item.x -= 1;\r\n                        item.y -= 1;\r\n                        break;\r\n                    default:\r\n                        // Do nothing\r\n                        break;\r\n                }\r\n\r\n                this.setState({\r\n                    combats: this.state.combats\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private mapRemove(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        const combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat && combat.map) {\r\n            const item = combat.map.items.find(i => i.id === combatant.id);\r\n            if (item) {\r\n                const index = combat.map.items.indexOf(item);\r\n                combat.map.items.splice(index, 1);\r\n\r\n                this.setState({\r\n                    combats: this.state.combats\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private endTurn(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        const combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat) {\r\n            // Handle end-of-turn conditions\r\n            combat.combatants.filter(actor => actor.conditions).forEach(actor => {\r\n                actor.conditions.forEach(c => {\r\n                    if (c.duration) {\r\n                        switch (c.duration.type) {\r\n                            case 'saves':\r\n                                // If it's my condition, and point is END, notify the user\r\n                                if (combat && (actor.id === combatant.id) && (c.duration.point === 'end')) {\r\n                                    const saveNotification = Factory.createNotification();\r\n                                    saveNotification.type = 'condition-save';\r\n                                    saveNotification.data = c;\r\n                                    saveNotification.combatant = combatant as Combatant & Monster;\r\n                                    combat.notifications.push(saveNotification);\r\n                                }\r\n                                break;\r\n                            case 'combatant':\r\n                                // If this refers to me, and point is END, remove it\r\n                                if (combat && (c.duration.combatantID === combatant.id) && (c.duration.point === 'end')) {\r\n                                    const n = actor.conditions.indexOf(c);\r\n                                    actor.conditions.splice(n, 1);\r\n                                    // Notify the user\r\n                                    const endNotification = Factory.createNotification();\r\n                                    endNotification.type = 'condition-end';\r\n                                    endNotification.data = c;\r\n                                    endNotification.combatant = combatant as Combatant & Monster;\r\n                                    combat.notifications.push(endNotification);\r\n                                }\r\n                                break;\r\n                            case 'rounds':\r\n                                // We check this at the beginning of each turn, not at the end\r\n                                break;\r\n                            default:\r\n                                // Do nothing\r\n                                break;\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n\r\n            const active = combat.combatants.filter(c => {\r\n                return c.current || (!c.pending && c.active && !c.defeated);\r\n            });\r\n            if (active.length === 0) {\r\n                // There's no-one left in the fight\r\n                this.makeCurrent(null, false);\r\n            } else if ((active.length === 1) && (active[0].defeated)) {\r\n                // The only person in the fight is me, and I'm defeated\r\n                this.makeCurrent(null, false);\r\n            } else {\r\n                let index = active.indexOf(combatant) + 1;\r\n                let newRound = false;\r\n                if (index >= active.length) {\r\n                    index = 0;\r\n                    newRound = true;\r\n                }\r\n                this.makeCurrent(active[index], newRound);\r\n            }\r\n        }\r\n    }\r\n\r\n    private changeHP(combatant: Combatant & Monster, hp: number, temp: number) {\r\n        combatant.hp = hp;\r\n        combatant.hpTemp = temp;\r\n\r\n        this.setState({\r\n            combats: this.state.combats\r\n        });\r\n    }\r\n\r\n    private addCondition(combatant: Combatant & Monster) {\r\n        const combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat) {\r\n            const condition = Factory.createCondition();\r\n            condition.name = 'blinded';\r\n\r\n            this.setState({\r\n                modal: {\r\n                    type: 'condition-add',\r\n                    condition: condition,\r\n                    combatant: combatant,\r\n                    combat: combat\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private addConditionFromModal() {\r\n        this.state.modal.combatant.conditions.push(this.state.modal.condition);\r\n\r\n        this.setState({\r\n            combats: this.state.combats,\r\n            modal: null\r\n        });\r\n    }\r\n\r\n    private editCondition(combatant: Combatant & Monster, condition: Condition) {\r\n        const combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat) {\r\n            this.setState({\r\n                modal: {\r\n                    type: 'condition-edit',\r\n                    condition: condition,\r\n                    combatant: combatant,\r\n                    combat: combat\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private editConditionFromModal() {\r\n        const conditions: Condition[] = this.state.modal.combatant.conditions;\r\n        const original = conditions.find(c => c.id === this.state.modal.condition.id);\r\n        if (original) {\r\n            const index = conditions.indexOf(original);\r\n            // eslint-disable-next-line\r\n            conditions[index] = this.state.modal.condition;\r\n\r\n            this.setState({\r\n                combats: this.state.combats,\r\n                modal: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private removeCondition(combatant: Combatant & Monster, conditionID: string) {\r\n        const condition = combatant.conditions.find(c => c.id === conditionID);\r\n        if (condition) {\r\n            const index = combatant.conditions.indexOf(condition);\r\n            combatant.conditions.splice(index, 1);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private sortCombatants(combat: Combat) {\r\n        combat.combatants.sort((a, b) => {\r\n            // First sort by initiative, descending\r\n            if (a.initiative && b.initiative && (a.initiative < b.initiative)) { return 1; }\r\n            if (a.initiative && b.initiative && (a.initiative > b.initiative)) { return -1; }\r\n            // Then sort by name, ascending\r\n            if (a.name < b.name) { return -1; }\r\n            if (a.name > b.name) { return 1; }\r\n            return 0;\r\n        });\r\n    }\r\n\r\n    private closeNotification(notification: Notification, removeCondition: boolean) {\r\n        const combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat) {\r\n            const index = combat.notifications.indexOf(notification);\r\n            combat.notifications.splice(index, 1);\r\n\r\n            if (removeCondition && notification.combatant && notification.data) {\r\n                const conditionIndex = notification.combatant.conditions.indexOf(notification.data as Condition);\r\n                notification.combatant.conditions.splice(conditionIndex, 1);\r\n            }\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////////\r\n\r\n    private setView(view: string) {\r\n        this.setState({\r\n            view: view\r\n        });\r\n    }\r\n\r\n    private openAbout() {\r\n        this.setState({\r\n            modal: {\r\n                type: 'about'\r\n            }\r\n        });\r\n    }\r\n\r\n    private closeModal() {\r\n        this.setState({\r\n            modal: null\r\n        });\r\n    }\r\n\r\n    private selectDMModule(module: DMModule | null) {\r\n        this.setState({\r\n            selectedDMModuleID: module ? module.id : null\r\n        });\r\n    }\r\n\r\n    private selectParty(party: Party | null) {\r\n        this.setState({\r\n            selectedPartyID: party ? party.id : null\r\n        });\r\n    }\r\n\r\n    private selectMonsterGroup(group: MonsterGroup | null) {\r\n        this.setState({\r\n            selectedMonsterGroupID: group ? group.id : null\r\n        });\r\n    }\r\n\r\n    private selectEncounter(encounter: Encounter | null) {\r\n        this.setState({\r\n            selectedEncounterID: encounter ? encounter.id : null\r\n        });\r\n    }\r\n\r\n    private selectMapFolio(mapFolio: MapFolio | null) {\r\n        this.setState({\r\n            selectedMapFolioID: mapFolio ? mapFolio.id : null\r\n        });\r\n    }\r\n\r\n    private getParty(id: string | null) {\r\n        return this.state.parties.find(p => p.id === id);\r\n    }\r\n\r\n    private getMonsterGroup(id: string | null) {\r\n        return this.state.library.find(g => g.id === id);\r\n    }\r\n\r\n    private getEncounter(id: string | null) {\r\n        return this.state.encounters.find(e => e.id === id);\r\n    }\r\n\r\n    private getMapFolio(id: string | null) {\r\n        return this.state.mapFolios.find(f => f.id === id);\r\n    }\r\n\r\n    private getCombat(id: string | null) {\r\n        return this.state.combats.find(c => c.id === id);\r\n    }\r\n\r\n    private getMonster(monsterName: string, groupName: string) {\r\n        const group = this.getMonsterGroupByName(groupName);\r\n        if (group) {\r\n            return group.monsters.find(monster => monster.name === monsterName);\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    private getMonsterGroupByName(groupName: string) {\r\n        return this.state.library.find(p => p.name === groupName);\r\n    }\r\n\r\n    private findMonster(monster: Monster) {\r\n        return this.state.library.find(group => group.monsters.includes(monster));\r\n    }\r\n\r\n    private resetAll() {\r\n        this.setState({\r\n            parties: [],\r\n            selectedPartyID: null,\r\n            library: [],\r\n            selectedMonsterGroupID: null,\r\n            encounters: [],\r\n            selectedEncounterID: null,\r\n            mapFolios: [],\r\n            selectedMapFolioID: null,\r\n            combats: [],\r\n            selectedCombatID: null\r\n        });\r\n    }\r\n\r\n    private changeValue(combatant: any, type: string, value: any) {\r\n        switch (type) {\r\n            case 'hp':\r\n                value = Math.min(value, combatant.hpMax);\r\n                value = Math.max(value, 0);\r\n                break;\r\n            case 'hpTemp':\r\n                value = Math.max(value, 0);\r\n                break;\r\n            case 'level':\r\n                value = Math.max(value, 1);\r\n                value = (combatant.player !== undefined) ? Math.min(value, 20) : Math.min(value, 6);\r\n                break;\r\n            case 'count':\r\n                value = Math.max(value, 1);\r\n                break;\r\n            case 'hitDice':\r\n                value = Math.max(value, 1);\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        const tokens = type.split('.');\r\n        let obj = combatant;\r\n        for (let n = 0; n !== tokens.length; ++n) {\r\n            const token = tokens[n];\r\n            if (n === tokens.length - 1) {\r\n                obj[token] = value;\r\n            } else {\r\n                obj = obj[token];\r\n            }\r\n        }\r\n\r\n        Utils.sort(this.state.parties);\r\n        Utils.sort(this.state.library);\r\n        Utils.sort(this.state.encounters);\r\n\r\n        if (type === 'initiative') {\r\n            const combat = this.getCombat(this.state.selectedCombatID);\r\n            this.sortCombatants(combat as Combat);\r\n        }\r\n\r\n        this.setState({\r\n            parties: this.state.parties,\r\n            library: this.state.library,\r\n            encounters: this.state.encounters,\r\n            combats: this.state.combats,\r\n            selectedPartyID: this.state.selectedPartyID,\r\n            selectedMonsterGroupID: this.state.selectedMonsterGroupID,\r\n            selectedEncounterID: this.state.selectedEncounterID,\r\n            selectedCombatID: this.state.selectedCombatID,\r\n            options: this.state.options,\r\n            modal: this.state.modal\r\n        });\r\n    }\r\n\r\n    private nudgeValue(combatant: any, type: string, delta: number) {\r\n        const tokens = type.split('.');\r\n        let obj = combatant;\r\n        for (let n = 0; n !== tokens.length; ++n) {\r\n            const token = tokens[n];\r\n            if (n === tokens.length - 1) {\r\n                let value = null;\r\n                value = (token === 'challenge') ? Utils.nudgeChallenge(obj.challenge, delta) : obj[token] + delta;\r\n                this.changeValue(combatant, type, value);\r\n            } else {\r\n                obj = obj[token];\r\n            }\r\n        }\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////////\r\n\r\n    public render() {\r\n        try {\r\n            let content: JSX.Element | null = null;\r\n            let actions: JSX.Element | null = null;\r\n            switch (this.state.view) {\r\n                case 'home':\r\n                    content = (\r\n                        <HomeScreen\r\n                            library={this.state.library}\r\n                            addOpenGameContent={() => this.addOpenGameContent()}\r\n                        />\r\n                    );\r\n                    break;\r\n                case 'dm':\r\n                    content = (\r\n                        <DMScreen\r\n                            selectedModuleID={this.state.selectedDMModuleID}\r\n                            showHelp={this.state.options.showHelp}\r\n                            selectModule={module => this.selectDMModule(module)}\r\n                        />\r\n                    );\r\n                    break;\r\n                case 'parties':\r\n                    content = (\r\n                        <PartiesScreen\r\n                            parties={this.state.parties}\r\n                            selection={this.getParty(this.state.selectedPartyID) || null}\r\n                            showHelp={this.state.options.showHelp}\r\n                            selectParty={party => this.selectParty(party)}\r\n                            addParty={() => this.addParty()}\r\n                            removeParty={() => this.removeParty()}\r\n                            addPC={() => this.addPC()}\r\n                            removePC={pc => this.removePC(pc)}\r\n                            sortPCs={() => this.sortPCs()}\r\n                            changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                            nudgeValue={(combatant, type, delta) => this.nudgeValue(combatant, type, delta)}\r\n                        />\r\n                    );\r\n                    break;\r\n                case 'library':\r\n                    content = (\r\n                        <MonsterLibraryScreen\r\n                            library={this.state.library}\r\n                            selection={this.getMonsterGroup(this.state.selectedMonsterGroupID) || null}\r\n                            filter={this.state.libraryFilter}\r\n                            showHelp={this.state.options.showHelp}\r\n                            selectMonsterGroup={group => this.selectMonsterGroup(group)}\r\n                            addMonsterGroup={() => this.addMonsterGroup()}\r\n                            removeMonsterGroup={() => this.removeMonsterGroup()}\r\n                            addMonster={() => this.addMonster()}\r\n                            removeMonster={monster => this.removeMonster(monster)}\r\n                            sortMonsters={() => this.sortMonsters()}\r\n                            changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                            nudgeValue={(combatant, type, delta) => this.nudgeValue(combatant, type, delta)}\r\n                            editMonster={combatant => this.editMonster(combatant)}\r\n                            cloneMonster={(combatant, name) => this.cloneMonster(combatant, name)}\r\n                            moveToGroup={(combatant, groupID) => this.moveToGroup(combatant, groupID)}\r\n                        />\r\n                    );\r\n                    let count = 0;\r\n                    this.state.library.forEach(group => {\r\n                        count += group.monsters.length;\r\n                    });\r\n                    if (count > 0) {\r\n                        actions = (\r\n                            <div className='actions'>\r\n                                <div className='section'>\r\n                                    <input\r\n                                        type='text'\r\n                                        placeholder='filter'\r\n                                        value={this.state.libraryFilter}\r\n                                        onChange={event => this.changeValue(this.state, 'libraryFilter', event.target.value)}\r\n                                    />\r\n                                </div>\r\n                                <div className='section'>\r\n                                    <button onClick={() => this.openDemographics()}>demographics</button>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    }\r\n                    break;\r\n                case 'encounter':\r\n                    content = (\r\n                        <EncounterBuilderScreen\r\n                            encounters={this.state.encounters}\r\n                            selection={this.getEncounter(this.state.selectedEncounterID) || null}\r\n                            parties={this.state.parties}\r\n                            library={this.state.library}\r\n                            showHelp={this.state.options.showHelp}\r\n                            selectEncounter={encounter => this.selectEncounter(encounter)}\r\n                            addEncounter={() => this.addEncounter()}\r\n                            removeEncounter={() => this.removeEncounter()}\r\n                            addWave={() => this.addWaveToEncounter()}\r\n                            removeWave={wave => this.removeWave(wave)}\r\n                            getMonster={(monsterName, groupName) => this.getMonster(monsterName, groupName) || null}\r\n                            addEncounterSlot={(monster, waveID) => this.addEncounterSlot(monster, waveID)}\r\n                            removeEncounterSlot={(slot, waveID) => this.removeEncounterSlot(slot, waveID)}\r\n                            nudgeValue={(slot, type, delta) => this.nudgeValue(slot, type, delta)}\r\n                            changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                        />\r\n                    );\r\n                    break;\r\n                case 'maps':\r\n                    content = (\r\n                        <MapFoliosScreen\r\n                            mapFolios={this.state.mapFolios}\r\n                            selection={this.getMapFolio(this.state.selectedMapFolioID) || null}\r\n                            showHelp={this.state.options.showHelp}\r\n                            selectMapFolio={folio => this.selectMapFolio(folio)}\r\n                            addMapFolio={() => this.addMapFolio()}\r\n                            removeMapFolio={() => this.removeMapFolio()}\r\n                            addMap={() => this.addMap()}\r\n                            editMap={map => this.editMap(map)}\r\n                            removeMap={map => this.removeMap(map)}\r\n                            changeValue={(source, type, value) => this.changeValue(source, type, value)}\r\n                        />\r\n                    );\r\n                    break;\r\n                case 'combat':\r\n                    const combat = this.getCombat(this.state.selectedCombatID);\r\n                    content = (\r\n                        <CombatManagerScreen\r\n                            combats={this.state.combats}\r\n                            combat={combat || null}\r\n                            showHelp={this.state.options.showHelp}\r\n                            createCombat={() => this.createCombat()}\r\n                            resumeEncounter={pausedCombat => this.resumeCombat(pausedCombat)}\r\n                            nudgeValue={(combatant, type, delta) => this.nudgeValue(combatant, type, delta)}\r\n                            changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                            makeCurrent={(combatant) => this.makeCurrent(combatant, false)}\r\n                            makeActive={(combatant) => this.makeActive(combatant)}\r\n                            makeDefeated={(combatant) => this.makeDefeated(combatant)}\r\n                            removeCombatant={(combatant) => this.removeCombatant(combatant)}\r\n                            addCondition={(combatant) => this.addCondition(combatant)}\r\n                            editCondition={(combatant, condition) => this.editCondition(combatant, condition)}\r\n                            removeCondition={(combatant, conditionID) => this.removeCondition(combatant, conditionID)}\r\n                            mapAdd={(combatant, x, y) => this.mapAdd(combatant, x, y)}\r\n                            mapMove={(combatant, dir) => this.mapMove(combatant, dir)}\r\n                            mapRemove={combatant => this.mapRemove(combatant)}\r\n                            endTurn={(combatant) => this.endTurn(combatant)}\r\n                            changeHP={(combatant, hp, temp) => this.changeHP(combatant, hp, temp)}\r\n                            close={(notification, removeCondition) => this.closeNotification(notification, removeCondition)}\r\n                        />\r\n                    );\r\n                    if (combat) {\r\n                        const encounter = this.getEncounter(combat.encounterID);\r\n                        if (encounter) {\r\n                            let xp = 0;\r\n                            combat.combatants.filter(c => c.type === 'monster')\r\n                                .forEach(combatant => {\r\n                                    xp += Utils.experience((combatant as Combatant & Monster).challenge);\r\n                                });\r\n\r\n                            actions = (\r\n                                <div className='actions'>\r\n                                    <div className='section'>\r\n                                        <div className='text'>round: {combat.round}</div>\r\n                                    </div>\r\n                                    <div className='section'>\r\n                                        <div className='text'>xp: {xp}</div>\r\n                                    </div>\r\n                                    <div className='section' style={{ display: encounter.waves.length === 0 ? 'none' : ''}}>\r\n                                        <button onClick={() => this.openWaveModal()}>add wave</button>\r\n                                    </div>\r\n                                    <div className='section'>\r\n                                        <button onClick={() => this.pauseCombat()}>pause encounter</button>\r\n                                    </div>\r\n                                    <div className='section'>\r\n                                        <button onClick={() => this.endCombat()}>end encounter</button>\r\n                                    </div>\r\n                                </div>\r\n                            );\r\n                        }\r\n                    }\r\n                    break;\r\n                default:\r\n                    // Do nothing\r\n                    break;\r\n            }\r\n\r\n            let modal = null;\r\n            if (this.state.modal) {\r\n                let modalTitle = null;\r\n                let modalContent = null;\r\n                let modalAllowClose = true;\r\n                let modalAllowScroll = true;\r\n                const modalButtons = {\r\n                    left: [] as JSX.Element[],\r\n                    right: [] as JSX.Element[]\r\n                };\r\n\r\n                switch (this.state.modal.type) {\r\n                    case 'about':\r\n                        modalContent = (\r\n                            <AboutModal\r\n                                options={this.state.options}\r\n                                resetAll={() => this.resetAll()}\r\n                                changeValue={(source, type, value) => this.changeValue(source, type, value)}\r\n                            />\r\n                        );\r\n                        break;\r\n                    case 'demographics':\r\n                        modalTitle = 'demographics';\r\n                        modalContent = (\r\n                            <DemographicsModal\r\n                                library={this.state.library}\r\n                            />\r\n                        );\r\n                        break;\r\n                    case 'monster':\r\n                        modalTitle = 'monster editor';\r\n                        modalContent = (\r\n                            <MonsterEditorModal\r\n                                monster={this.state.modal.monster}\r\n                                library={this.state.library}\r\n                                showMonsters={this.state.modal.showMonsters}\r\n                            />\r\n                        );\r\n                        modalAllowClose = false;\r\n                        modalAllowScroll = false;\r\n                        modalButtons.left = [\r\n                            (\r\n                                <Checkbox\r\n                                    key='similar'\r\n                                    label='similar monsters'\r\n                                    checked={this.state.modal.showMonsters}\r\n                                    changeValue={() => this.toggleShowSimilarMonsters()}\r\n                                />\r\n                            )\r\n                        ];\r\n                        modalButtons.right = [\r\n                            <button key='save' onClick={() => this.saveMonster()}>save</button>,\r\n                            <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                        ];\r\n                        break;\r\n                    case 'map':\r\n                        modalTitle = 'map editor';\r\n                        modalContent = (\r\n                            <MapEditorModal\r\n                                map={this.state.modal.map}\r\n                            />\r\n                        );\r\n                        modalAllowClose = false;\r\n                        modalAllowScroll = false;\r\n                        modalButtons.right = [\r\n                            <button key='save' onClick={() => this.saveMap()}>save</button>,\r\n                            <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                        ];\r\n                        break;\r\n                    case 'combat-start':\r\n                        modalTitle = 'start a new encounter';\r\n                        modalContent = (\r\n                            <CombatStartModal\r\n                                combatSetup={this.state.modal.combatSetup}\r\n                                parties={this.state.parties}\r\n                                encounters={this.state.encounters}\r\n                                mapFolios={this.state.mapFolios}\r\n                                getMonster={(monsterName, groupName) => this.getMonster(monsterName, groupName) || null}\r\n                                notify={() => this.setState({modal: this.state.modal})}\r\n                            />\r\n                        );\r\n                        modalAllowClose = false;\r\n                        modalAllowScroll = false;\r\n                        modalButtons.right = [\r\n                            (\r\n                                <button\r\n                                    key='start encounter'\r\n                                    className={this.state.modal.combatSetup.partyID && this.state.modal.combatSetup.encounterID ? '' : 'disabled'}\r\n                                    onClick={() => this.startCombat()}\r\n                                >\r\n                                    start encounter\r\n                                </button>\r\n                            ),\r\n                            <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                        ];\r\n                        break;\r\n                    case 'combat-wave':\r\n                        modalTitle = 'encounter waves';\r\n                        modalContent = (\r\n                            <CombatStartModal\r\n                                combatSetup={this.state.modal.combatSetup}\r\n                                encounters={this.state.encounters}\r\n                                getMonster={(monsterName, groupName) => this.getMonster(monsterName, groupName) || null}\r\n                                notify={() => this.setState({modal: this.state.modal})}\r\n                            />\r\n                        );\r\n                        modalAllowClose = false;\r\n                        modalAllowScroll = false;\r\n                        modalButtons.right = [\r\n                            (\r\n                                <button\r\n                                    key='add wave'\r\n                                    className={this.state.modal.combatSetup.waveID !== null ? '' : 'disabled'}\r\n                                    onClick={() => this.addWaveToCombat()}\r\n                                >\r\n                                    add wave\r\n                                </button>\r\n                            ),\r\n                            <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                        ];\r\n                        break;\r\n                    case 'condition-add':\r\n                        modalTitle = 'add a condition';\r\n                        modalContent = (\r\n                            <ConditionModal\r\n                                condition={this.state.modal.condition}\r\n                                combatant={this.state.modal.combatant}\r\n                                combat={this.state.modal.combat}\r\n                            />\r\n                        );\r\n                        modalAllowClose = false;\r\n                        modalAllowScroll = false;\r\n                        modalButtons.right = [\r\n                            <button key='add' onClick={() => this.addConditionFromModal()}>add</button>,\r\n                            <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                        ];\r\n                        break;\r\n                    case 'condition-edit':\r\n                        modalTitle = 'edit condition';\r\n                        modalContent = (\r\n                            <ConditionModal\r\n                                condition={this.state.modal.condition}\r\n                                combatant={this.state.modal.combatant}\r\n                                combat={this.state.modal.combat}\r\n                            />\r\n                        );\r\n                        modalAllowClose = false;\r\n                        modalButtons.right = [\r\n                            <button key='save' onClick={() => this.editConditionFromModal()}>save</button>,\r\n                            <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                        ];\r\n                        break;\r\n                    default:\r\n                        // Do nothing\r\n                        break;\r\n                }\r\n\r\n                modal = (\r\n                    <div className='overlay'>\r\n                        <div className='modal'>\r\n                            <div className='modal-header'>\r\n                                <div className='title'>{modalTitle}</div>\r\n                                {modalAllowClose ? <img className='image' src={close} alt='close' onClick={() => this.closeModal()} /> : null}\r\n                            </div>\r\n                            <div className={modalAllowScroll ? 'modal-content scrollable' : 'modal-content'}>\r\n                                {modalContent}\r\n                            </div>\r\n                            <div className='modal-footer'>\r\n                                <div className='left'>{modalButtons.left}</div>\r\n                                <div className='right'>{modalButtons.right}</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='dojo'>\r\n                    <Titlebar\r\n                        actions={actions}\r\n                        blur={modal !== null}\r\n                        openHome={() => this.setView('home')}\r\n                        openAbout={() => this.openAbout()}\r\n                    />\r\n                    <div className={(modal === null) ? 'page-content' : 'page-content blur'}>\r\n                        {content}\r\n                    </div>\r\n                    <Navbar\r\n                        view={this.state.view}\r\n                        parties={this.state.parties}\r\n                        library={this.state.library}\r\n                        encounters={this.state.encounters}\r\n                        blur={modal !== null}\r\n                        setView={view => this.setView(view)}\r\n                    />\r\n                    {modal}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './style/css/foundation.css';\r\nimport './style/scss/app.scss';\r\nimport './style/scss/controls.scss';\r\n\r\nimport Dojo from './components/dojo';\r\n\r\nReactDOM.render(<Dojo />, document.getElementById('root'));\r\n"],"sourceRoot":""}