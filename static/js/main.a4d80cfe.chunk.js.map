{"version":3,"sources":["resources/images/down-arrow-black.svg","resources/images/down-arrow.svg","resources/images/close-black.svg","resources/images/warning.svg","resources/images/plus.svg","resources/images/minus.svg","resources/images/ellipsis.svg","resources/images/checked.svg","resources/images/unchecked.svg","resources/images/settings.svg","utils.ts","models/factory.ts","components/screens/home-screen.tsx","components/cards/info-card.tsx","components/cards/information/parties-card.tsx","components/list-items/party-list-item.tsx","components/controls/confirm-button.tsx","components/cards/party-card.tsx","components/controls/radial.tsx","components/controls/spin.tsx","components/cards/pc-card.tsx","components/panels/card-group.tsx","components/screens/parties-screen.tsx","components/cards/information/monster-library-card.tsx","components/list-items/monster-group-list-item.tsx","components/cards/monster-group-card.tsx","components/controls/expander.tsx","components/controls/dropdown.tsx","components/panels/ability-score-panel.tsx","components/panels/traits-panel.tsx","components/panels/conditions-panel.tsx","components/cards/monster-card.tsx","components/screens/monster-library-screen.tsx","components/cards/error-card.tsx","models/models.ts","components/cards/filter-card.tsx","components/cards/wave-card.tsx","components/cards/information/encounter-builder-card.tsx","components/panels/difficulty-chart-panel.tsx","components/cards/encounter-card.tsx","components/list-items/encounter-list-item.tsx","components/screens/encounter-builder-screen.tsx","components/cards/information/map-folios-card.tsx","components/list-items/map-folio-list-item.tsx","components/cards/map-folio-card.tsx","components/panels/hit-point-gauge.tsx","components/panels/map-panel.tsx","components/cards/map-card.tsx","components/screens/map-folios-screen.tsx","components/cards/information/combat-manager-card.tsx","components/list-items/combat-list-item.tsx","components/screens/combat-manager-screen.tsx","components/controls/checkbox.tsx","components/modals/about-modal.tsx","components/controls/selector.tsx","components/modals/demographics-modal.tsx","components/modals/monster-editor-modal.tsx","components/cards/map-tile-card.tsx","components/modals/map-editor-modal.tsx","components/modals/combat-start-modal.tsx","components/controls/radio-group.tsx","components/modals/condition-modal.tsx","components/panels/titlebar.tsx","components/panels/navbar.tsx","components/dojo.tsx","index.js"],"names":["module","exports","__webpack_require__","p","monsterIdToGroup","match","filter","text","result","toLowerCase","split","forEach","token","indexOf","ex","console","log","guid","s4","Math","floor","random","toString","substring","sort","collection","a","b","aName","name","bName","modifier","score","mod","str","dieRoll","hitDieType","size","challenge","cr","experience","pcExperience","level","difficulty","traitType","type","nudgeChallenge","value","delta","conditionText","condition","conditionDurationText","combat","duration","saveDuration","saveType","toUpperCase","saves","count","saveDC","combatantDuration","point","c","combatants","find","id","combatantID","displayName","roundsDuration","rounds","getMonsterNames","encounter","monsterNames","slots","slot","names","push","monsterName","n","Factory","utils","pcs","active","player","race","classes","background","languages","passiveInsight","passiveInvestigation","passivePerception","initiative","url","monsters","category","tag","alignment","abilityScores","dex","con","int","wis","cha","ac","hpMax","hpTemp","hitDice","damage","resist","vulnerable","immune","savingThrows","speed","skills","senses","equipment","traits","conditionImmunities","usage","waves","monsterGroupName","maps","items","x","y","width","height","terrain","partyID","encounterID","waveID","folioID","mapID","encounterInitMode","map","round","notifications","issues","timestamp","combatant","HomeScreen","_this","this","props","library","length","react_default","createElement","className","href","target","rel","onClick","addOpenGameContent","e","error","React","Component","InfoCard","heading","getHeading","content","getContent","defaultProps","PartiesCard","action","parties","info_card_InfoCard","PartyListItem","party","pc","key","selected","setSelection","ConfirmButton","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","pressed","setState","toggle","callback","_this2","src","warning","alt","details","perform","disabled","PartyCard","activePCs","selection","join","reduce","array","localeCompare","insightSummary","investigationSummary","perceptionSummary","insight","min","max","investigation","perception","placeholder","onChange","event","changeValue","addPC","sortPCs","confirm_button_ConfirmButton","removeParty","Radial","dir","dir2","arguments","undefined","stopPropagation","click","style","direction","showOut","showIn","showDiag","display","arrow","transform","padding","Spin","nudgeValue","preventDefault","source","minusBtns","plusBtns","factors","factor","onTouchEnd","touchEnd","reverse","minus","plus","infoWidth","label","PCCard","showDetails","options","mode","removePC","radial_Radial","mapMove","spin_Spin","mapRemove","mapAdd","pending","defeated","removeCombatant","current","endTurn","makeDefeated","makeCurrent","makeActive","commonStatBlock","stats","imageStyle","toggleDetails","CardGroup","showCards","hidden","closeBtn","showClose","close","showToggle","toggleCards","cards","PartiesScreen","help","showHelp","parties_card_PartiesCard","party_list_item_PartyListItem","selectParty","activeCards","inactiveCards","party_card_PartyCard","pc_card_PCCard","addParty","card_group_CardGroup","MonsterLibraryCard","MonsterGroupListItem","matchGroup","group","monster","matchMonster","MonsterGroupCard","addMonster","sortMonsters","removeMonsterGroup","Expander","expanded","Dropdown","open","optionID","select","selectedText","selectedID","option","o","title","ellipsis","dropdown_DropdownOption","toggleOpen","DropdownOption","_this3","AbilityScorePanel","showAbilityScores","edit","toggleAbilityScores","TraitsPanel","actions","legendaryActions","lairActions","regionalEffects","item","traits_panel_TraitPanel","trait","changeTrait","removeTrait","copyTrait","addTrait","TraitPanel","expander_Expander","ConditionsPanel","conditions","conditions_panel_ConditionPanel","nudgeConditionValue","editCondition","removeCondition","conditionID","addCondition","ConditionPanel","description","MonsterCard","cloneName","damageOrHealing","hp","changeHP","temp","val","sizeAndType","align","wave","_this4","some","s","g","includes","_this5","editMonster","setCloneName","cloneMonster","groupOptions","dropdown_Dropdown","moveToGroup","removeMonster","removeEncounterSlot","canAdd","monsterIsInWave","addEncounterSlot","slotSection","ability_score_panel_AbilityScorePanel","traits_panel_TraitsPanel","nudgeDamage","heal","setDamage","conditions_panel_ConditionsPanel","MonsterLibraryScreen","monster_library_card_MonsterLibraryCard","listItems","showMonsterGroup","monster_group_list_item_MonsterGroupListItem","selectMonsterGroup","monster_group_card_MonsterGroupCard","monster_card_MonsterCard","groupID","addMonsterGroup","ErrorCard","SIZE_TYPES","CATEGORY_TYPES","TRAIT_TYPES","CONDITION_TYPES","TERRAIN_TYPES","FilterCard","showAll","sizeOptions","concat","catOptions","cat","resetFilter","summary","challengeMin","challengeMax","toggleAll","WaveCard","removeWave","EncounterBuilderCard","encounters","DifficultyChartPanel","monsterCount","monsterXp","getMonster","xpThresholds","diffSection","adjustedXp","xpEasy","xpMedium","xpHard","xpDeadly","adjustedDifficulty","small","getLeft","xp","getRight","left","right","EncounterCard","partyOptions","difficultySection","difficulty_chart_panel_DifficultyChartPanel","addWave","removeEncounter","EncounterListItem","EncounterBuilderScreen","changeFilterValue","index","error_card_ErrorCard","libraryCards","filter_card_FilterCard","nudgeFilterValue","encounter_builder_card_EncounterBuilderCard","encounter_list_item_EncounterListItem","selectEncounter","encounterName","encounterCards","encounter_card_EncounterCard","getMonsterCards","card","waveCards","wave_card_WaveCard","field","addEncounter","getLibrarySection","MapFoliosCard","mapFolios","MapFolioListItem","mapFolio","MapFolioCard","addMap","removeMapFolio","HitPointGauge","hpCurrent","hpBloodied","hpWidth","hpTempBar","hpTempWidth","MapPanel","border","dimensions","i","minX","maxX","minY","maxY","mapDimensions","sideLength","getSideLength","top","getMapDimensions","grid","pos","getPosition","map_panel_GridSquare","position","setSelectedItemID","onDoubleClick","addMapTile","tiles","map_panel_MapTile","tile","selectable","selectedItemID","thumbnail","tokens","map_panel_MapToken","simple","mt","dragOverlay","showOverlay","yOver","xOver","posOver","overlay","gridSquareClicked","GridSquare","doubleClick","MapTile","MapToken","initials","hpGauge","altitudeBadge","conditionsBadge","hit_point_gauge_HitPointGauge","altitude","MapCard","map_panel_MapPanel","editMap","removeMap","MapFoliosScreen","map_folios_card_MapFoliosCard","folios","map_folio_list_item_MapFolioListItem","selectMapFolio","folio","folioCards","map_folio_card_MapFolioCard","map_card_MapCard","addMapFolio","CombatManagerCard","CombatListItem","CombatManagerScreen","selectedTokenID","addingToMapID","setAddingToMapID","leftPaneContent","centrePaneContent","rightPaneContent","createCard","combat_manager_screen_PendingCombatantRow","setSelectedTokenID","combat_manager_screen_CombatantRow","pendingHelp","activeHelp","combat_manager_screen_NotificationPanel","notification","mapSection","addCombatantToMap","selectedCombatant","combat_manager_card_CombatManagerCard","combats","combat_list_item_CombatListItem","resumeEncounter","createCombat","NotificationPanel","saveSuccess","PendingCombatantRow","_this6","getInformationText","CombatantRow","notes","_this7","gauge","_this8","getContentPC","getContentMonster","Checkbox","checked","unchecked","AboutModal","resetAll","checkbox_Checkbox","Selector","tabs","itemsPerRow","rowCount","ceil","rowContents","rowIndex","selector_SelectorOption","rowSections","row","SelectorOption","DemographicsModal","chart","demographics","allMonsters","buckets","maxBucketSize","bucket","bars","set","selector_Selector","selectChart","MonsterEditorModal","page","showFilter","helpSection","subtype","sections","getHelpOptionsForPage","section","notify","setRandomValue","t","findIndex","splice","m","distinct","d","addedIDs","avg","createTrait","getActionTypeName","plural","copy","JSON","parse","stringify","newValue","hpPerDie","getValueSection","getActionsSection","dataType","values","v","aValue","bValue","valueSections","rows","addRandomTrait","similar","filterContent","toggleMatch","geneSplice","toggleFilter","_this9","showMonsters","getMonsters","selector","setHelpSection","getHelpSection","monsterList","getFilterCard","margin","transition","setPage","MapTileCard","terrainOptions","moveMapItem","resizeMapItem","cloneMapItem","removeMapItem","MapEditorModal","selectedTileID","createMapItem","smallMapItem","bigMapItem","tools","map_tile_card_MapTileCard","setSelectedTileID","CombatStartModal","combatSetup","enc","f","w","slotID","partyContent","selectedParty","pcSections","setParty","encounterOptions","encounterContent","selectedEncounter","monsterSections","waveMonsters","setEncounter","folioOptions","selectMapSection","thumbnailSection","mapOptions","setMapID","setFolioID","waveOptions","waveContent","selectedWave","setWave","_this10","slotsContainer","slotNames","inputs","combat_start_modal_MonsterName","changeName","setEncounterInitMode","leftSection","rightSection","getPartySection","getEncounterSection","getMapSection","getDifficultySection","getMonsterSection","getWaveSection","MonsterName","_this11","RadioGroup","radio_group_RadioGroupItem","itemID","RadioGroupItem","ConditionModal","conditionName","durationType","createConditionDurationSaves","createConditionDurationCombatant","createConditionDurationRounds","object","controls","saveOptions","pointOptions","combatantOptions","durations","radio_group_RadioGroup","setCondition","setDuration","Titlebar","blur","openHome","cog","openAbout","Navbar","partiesStyle","view","libraryStyle","encounterStyle","mapStyle","combatStyle","encountersEnabled","combatEnabled","setView","Dojo","selectedPartyID","selectedMonsterGroupID","selectedEncounterID","selectedMapFolioID","selectedCombatID","modal","libraryFilter","data","json","window","localStorage","getItem","setItem","createParty","getParty","createPC","createMonsterGroup","getMonsterGroup","createMonster","sourceGroup","findMonster","original","clone","parseInt","challenge_rating","armor_class","hit_points","hit_dice","strength","dexterity","constitution","intelligence","wisdom","charisma","damage_resistances","damage_vulnerabilities","damage_immunities","condition_immunities","save","skill","special_abilities","rawTrait","buildTrait","legendary_actions","groupName","getMonsterGroupByName","openBracket","closeBracket","desc","createEncounter","getEncounter","createEncounterSlot","sortEncounterSlots","slotContainer","createEncounterWave","createMapFolio","getMapFolio","createMap","setup","createCombatSetup","partyName","init","groupRoll","singleRoll","sortCombatants","getCombat","Date","toLocaleString","newRound","actor","issue","saveNotification","createNotification","endNotification","createCondition","conditionIndex","obj","home_screen_HomeScreen","parties_screen_PartiesScreen","monster_library_screen_MonsterLibraryScreen","openDemographics","encounter_builder_screen_EncounterBuilderScreen","addWaveToEncounter","map_folios_screen_MapFoliosScreen","combat_manager_screen_CombatManagerScreen","resumeCombat","closeNotification","openWaveModal","pauseCombat","endCombat","modalTitle","modalContent","modalAllowClose","modalAllowScroll","modalButtons","about_modal_AboutModal","demographics_modal_DemographicsModal","monster_editor_modal_MonsterEditorModal","toggleShowSimilarMonsters","saveMonster","closeModal","map_editor_modal_MapEditorModal","saveMap","combat_start_modal_CombatStartModal","startCombat","addWaveToCombat","condition_modal_ConditionModal","addConditionFromModal","editConditionFromModal","titlebar_Titlebar","navbar_Navbar","ReactDOM","render","dojo_Dojo","document","getElementById"],"mappings":"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","file":"static/js/main.a4d80cfe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/down-arrow-black.a2fc7a1f.svg\";","module.exports = __webpack_public_path__ + \"static/media/down-arrow.697dc1af.svg\";","module.exports = __webpack_public_path__ + \"static/media/close-black.7645a5b9.svg\";","module.exports = __webpack_public_path__ + \"static/media/warning.67a11a95.svg\";","module.exports = __webpack_public_path__ + \"static/media/plus.b60accff.svg\";","module.exports = __webpack_public_path__ + \"static/media/minus.7003cf50.svg\";","module.exports = __webpack_public_path__ + \"static/media/ellipsis.9650a20f.svg\";","module.exports = __webpack_public_path__ + \"static/media/checked.5cbd1005.svg\";","module.exports = __webpack_public_path__ + \"static/media/unchecked.3d4ae2dd.svg\";","module.exports = __webpack_public_path__ + \"static/media/settings.042bb1c2.svg\";","import { Monster, MonsterGroup, Combat, Encounter, Condition, EncounterWave, ConditionDurationSaves, ConditionDurationCombatant, ConditionDurationRounds } from \"./models/models\";\r\n\r\n// This is an internal dictionary to speed up lookup\r\nvar monsterIdToGroup: { [id: string]: MonsterGroup } = {}\r\n\r\nexport function getMonsterGroup(monster: Monster, library: MonsterGroup[]): MonsterGroup {\r\n    var group = monsterIdToGroup[monster.id];\r\n\r\n    if (!group) {\r\n        var g = library.find(g => g.monsters.includes(monster));\r\n        if (g) {\r\n            group = g;\r\n            monsterIdToGroup[monster.id] = group;\r\n        }\r\n    }\r\n\r\n    return group;\r\n}\r\n\r\nexport function match(filter: string, text: string): boolean {\r\n    if (!filter) {\r\n        return true;\r\n    }\r\n\r\n    var result = true;\r\n\r\n    try {\r\n        var tokens = filter.toLowerCase().split(' ');\r\n        tokens.forEach(token => {\r\n            if (text.toLowerCase().indexOf(token) === -1) {\r\n                result = false;\r\n            }\r\n        });\r\n    } catch (ex) {\r\n        console.log(ex);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function guid(): string {\r\n    var s4 = () => {\r\n        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\r\n    };\r\n    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\r\n}\r\n\r\nexport function sort(collection: any[]): any[] {\r\n    collection.sort((a, b) => {\r\n        var aName = a.name.toLowerCase();\r\n        var bName = b.name.toLowerCase();\r\n        if (aName < bName) return -1;\r\n        if (aName > bName) return 1;\r\n        return 0;\r\n    });\r\n    return collection;\r\n}\r\n\r\nexport function sortByValue(collection: any[]): any[] {\r\n    collection.sort((a, b) => {\r\n        if (a.value < b.value) return -1;\r\n        if (a.value > b.value) return 1;\r\n        return 0;\r\n    });\r\n    return collection;\r\n}\r\n\r\nexport function sortByCount(collection: any[]): any[] {\r\n    collection.sort((a, b) => {\r\n        if (a.count < b.count) return 1;\r\n        if (a.count > b.count) return -1;\r\n\r\n        var aValue = a.value.toLowerCase();\r\n        var bValue = b.value.toLowerCase();\r\n        if (aValue < bValue) return -1;\r\n        if (aValue > bValue) return 1;\r\n\r\n        return 0;\r\n    });\r\n    return collection;\r\n}\r\n\r\nexport function modifier(score: number): string {\r\n    var mod = Math.floor((score - 10) / 2);\r\n    var str = mod.toString();\r\n    if (mod >= 0) {\r\n        str = '+' + str;\r\n    }\r\n    return str;\r\n}\r\n\r\nexport function dieRoll(): number {\r\n    return Math.floor(Math.random() * 20) + 1;\r\n}\r\n\r\nexport function miniSize(size: string): number {\r\n    switch (size) {\r\n        case 'tiny': return 1;\r\n        case 'small': return 1;\r\n        case 'medium': return 1;\r\n        case 'large': return 2;\r\n        case 'huge': return 3;\r\n        case 'gargantuan': return 4;\r\n        default: return 1;\r\n    }\r\n}\r\n\r\nexport function hitDieType(size: string) {\r\n    switch (size) {\r\n        case 'tiny': return 4;\r\n        case 'small': return 6;\r\n        case 'medium': return 8;\r\n        case 'large': return 10;\r\n        case 'huge': return 12;\r\n        case 'gargantuan': return 20;\r\n        default: return 8;\r\n    }\r\n}\r\n\r\nexport function challenge(cr: number): string {\r\n    switch (cr) {\r\n        case 0.125: return '1/8';\r\n        case 0.25: return '1/4';\r\n        case 0.5: return '1/2';\r\n        default: return cr.toString();\r\n    }\r\n}\r\n\r\nexport function parseChallenge(cr: string): number {\r\n    switch (cr) {\r\n        case '1/8': return 0.125;\r\n        case '1/4': return 0.25;\r\n        case '1/2': return 0.5;\r\n        default: return parseInt(cr);\r\n    }\r\n}\r\n\r\nexport function challengeDetails(): any[] {\r\n    var result: any[] = [];\r\n\r\n    result.push({ cr: 0,        ac: 13,       hpMin: 1, hpMax: 6,       attack: 3,  dmgMin: 0,   dmgMax: 1,   save: 13 });\r\n    result.push({ cr: 0.125,    ac: 13,       hpMin: 7, hpMax: 35,      attack: 3,  dmgMin: 2,   dmgMax: 3,   save: 13 });\r\n    result.push({ cr: 0.25,     ac: 13,       hpMin: 36, hpMax: 49,     attack: 3,  dmgMin: 4,   dmgMax: 5,   save: 13 });\r\n    result.push({ cr: 0.5,      ac: 13,       hpMin: 50, hpMax: 70,     attack: 3,  dmgMin: 6,   dmgMax: 8,   save: 13 });\r\n    result.push({ cr: 1,        ac: 13,       hpMin: 71, hpMax: 85,     attack: 3,  dmgMin: 9,   dmgMax: 14,  save: 13 });\r\n    result.push({ cr: 2,        ac: 13,       hpMin: 86, hpMax: 100,    attack: 3,  dmgMin: 15,  dmgMax: 20,  save: 13 });\r\n    result.push({ cr: 3,        ac: 13,       hpMin: 101, hpMax: 115,   attack: 4,  dmgMin: 21,  dmgMax: 26,  save: 13 });\r\n    result.push({ cr: 4,        ac: 14,       hpMin: 116, hpMax: 130,   attack: 5,  dmgMin: 27,  dmgMax: 32,  save: 14 });\r\n    result.push({ cr: 5,        ac: 15,       hpMin: 131, hpMax: 145,   attack: 6,  dmgMin: 33,  dmgMax: 38,  save: 15 });\r\n    result.push({ cr: 6,        ac: 15,       hpMin: 146, hpMax: 160,   attack: 6,  dmgMin: 39,  dmgMax: 44,  save: 15 });\r\n    result.push({ cr: 7,        ac: 15,       hpMin: 161, hpMax: 175,   attack: 6,  dmgMin: 45,  dmgMax: 50,  save: 15 });\r\n    result.push({ cr: 8,        ac: 16,       hpMin: 176, hpMax: 190,   attack: 7,  dmgMin: 51,  dmgMax: 56,  save: 16 });\r\n    result.push({ cr: 9,        ac: 16,       hpMin: 191, hpMax: 205,   attack: 7,  dmgMin: 57,  dmgMax: 62,  save: 16 });\r\n    result.push({ cr: 10,       ac: 17,       hpMin: 206, hpMax: 220,   attack: 7,  dmgMin: 63,  dmgMax: 68,  save: 16 });\r\n    result.push({ cr: 11,       ac: 17,       hpMin: 221, hpMax: 235,   attack: 8,  dmgMin: 69,  dmgMax: 74,  save: 17 });\r\n    result.push({ cr: 12,       ac: 17,       hpMin: 236, hpMax: 250,   attack: 8,  dmgMin: 75,  dmgMax: 80,  save: 17 });\r\n    result.push({ cr: 13,       ac: 18,       hpMin: 251, hpMax: 265,   attack: 8,  dmgMin: 81,  dmgMax: 86,  save: 18 });\r\n    result.push({ cr: 14,       ac: 18,       hpMin: 266, hpMax: 280,   attack: 8,  dmgMin: 87,  dmgMax: 92,  save: 18 });\r\n    result.push({ cr: 15,       ac: 18,       hpMin: 281, hpMax: 295,   attack: 8,  dmgMin: 93,  dmgMax: 98,  save: 18 });\r\n    result.push({ cr: 16,       ac: 18,       hpMin: 296, hpMax: 310,   attack: 9,  dmgMin: 99,  dmgMax: 104, save: 18 });\r\n    result.push({ cr: 17,       ac: 19,       hpMin: 311, hpMax: 325,   attack: 10, dmgMin: 105, dmgMax: 110, save: 19 });\r\n    result.push({ cr: 18,       ac: 19,       hpMin: 326, hpMax: 340,   attack: 10, dmgMin: 111, dmgMax: 116, save: 19 });\r\n    result.push({ cr: 19,       ac: 19,       hpMin: 341, hpMax: 355,   attack: 10, dmgMin: 117, dmgMax: 122, save: 19 });\r\n    result.push({ cr: 20,       ac: 19,       hpMin: 356, hpMax: 400,   attack: 10, dmgMin: 123, dmgMax: 140, save: 19 });\r\n    result.push({ cr: 21,       ac: 19,       hpMin: 401, hpMax: 445,   attack: 11, dmgMin: 141, dmgMax: 158, save: 20 });\r\n    result.push({ cr: 22,       ac: 19,       hpMin: 446, hpMax: 490,   attack: 11, dmgMin: 159, dmgMax: 176, save: 20 });\r\n    result.push({ cr: 23,       ac: 19,       hpMin: 491, hpMax: 535,   attack: 11, dmgMin: 177, dmgMax: 194, save: 20 });\r\n    result.push({ cr: 24,       ac: 19,       hpMin: 536, hpMax: 580,   attack: 12, dmgMin: 195, dmgMax: 212, save: 21 });\r\n    result.push({ cr: 25,       ac: 19,       hpMin: 581, hpMax: 625,   attack: 12, dmgMin: 213, dmgMax: 230, save: 21 });\r\n    result.push({ cr: 26,       ac: 19,       hpMin: 626, hpMax: 670,   attack: 12, dmgMin: 231, dmgMax: 248, save: 21 });\r\n    result.push({ cr: 27,       ac: 19,       hpMin: 671, hpMax: 715,   attack: 13, dmgMin: 249, dmgMax: 266, save: 22 });\r\n    result.push({ cr: 28,       ac: 19,       hpMin: 716, hpMax: 760,   attack: 13, dmgMin: 267, dmgMax: 284, save: 22 });\r\n    result.push({ cr: 29,       ac: 19,       hpMin: 761, hpMax: 805,   attack: 13, dmgMin: 285, dmgMax: 302, save: 22 });\r\n    result.push({ cr: 30,       ac: 19,       hpMin: 806, hpMax: 850,   attack: 14, dmgMin: 303, dmgMax: 320, save: 23 });\r\n\r\n    return result;\r\n}\r\n\r\nexport function experience(cr: number): number {\r\n    switch (cr) {\r\n        case 0: return 10;\r\n        case 0.125: return 25;\r\n        case 0.25: return 50;\r\n        case 0.5: return 100;\r\n        case 1: return 200;\r\n        case 2: return 450;\r\n        case 3: return 700;\r\n        case 4: return 1100;\r\n        case 5: return 1800;\r\n        case 6: return 2300;\r\n        case 7: return 2900;\r\n        case 8: return 3900;\r\n        case 9: return 5000;\r\n        case 10: return 5900;\r\n        case 11: return 7200;\r\n        case 12: return 8400;\r\n        case 13: return 10000;\r\n        case 14: return 11500;\r\n        case 15: return 13000;\r\n        case 16: return 15000;\r\n        case 17: return 18000;\r\n        case 18: return 20000;\r\n        case 19: return 22000;\r\n        case 20: return 25000;\r\n        case 21: return 33000;\r\n        case 22: return 41000;\r\n        case 23: return 50000;\r\n        case 24: return 62000;\r\n        case 30: return 155000;\r\n        default: return 0;\r\n    }\r\n}\r\n\r\nexport function experienceFactor(count: number): number {\r\n    switch (count) {\r\n        case 0:\r\n            return 0;\r\n        case 1:\r\n            return 1;\r\n        case 2:\r\n            return 1.5;\r\n        case 3:\r\n        case 4:\r\n        case 5:\r\n        case 6:\r\n            return 2;\r\n        case 7:\r\n        case 8:\r\n        case 9:\r\n        case 10:\r\n            return 2.5;\r\n        case 11:\r\n        case 12:\r\n        case 13:\r\n        case 14:\r\n            return 3;\r\n        default:\r\n            return 4;\r\n    }\r\n}\r\n\r\nexport function pcExperience(level: number, difficulty: string): number {\r\n    switch (difficulty) {\r\n        case 'easy':\r\n            switch (level) {\r\n                case 1: return 25;\r\n                case 2: return 50;\r\n                case 3: return 75;\r\n                case 4: return 125;\r\n                case 5: return 250;\r\n                case 6: return 300;\r\n                case 7: return 350;\r\n                case 8: return 450;\r\n                case 9: return 550;\r\n                case 10: return 600;\r\n                case 11: return 800;\r\n                case 12: return 1000;\r\n                case 13: return 1100;\r\n                case 14: return 1250;\r\n                case 15: return 1400;\r\n                case 16: return 1600;\r\n                case 17: return 2000;\r\n                case 18: return 2100;\r\n                case 19: return 2400;\r\n                case 20: return 2800;\r\n                default: return 0;\r\n            }\r\n        case 'medium':\r\n            switch (level) {\r\n                case 1: return 50;\r\n                case 2: return 100;\r\n                case 3: return 150;\r\n                case 4: return 250;\r\n                case 5: return 500;\r\n                case 6: return 600;\r\n                case 7: return 750;\r\n                case 8: return 900;\r\n                case 9: return 1100;\r\n                case 10: return 1200;\r\n                case 11: return 1600;\r\n                case 12: return 2000;\r\n                case 13: return 2200;\r\n                case 14: return 2500;\r\n                case 15: return 2800;\r\n                case 16: return 3200;\r\n                case 17: return 3900;\r\n                case 18: return 4200;\r\n                case 19: return 4900;\r\n                case 20: return 5700;\r\n                default: return 0;\r\n            }\r\n        case 'hard':\r\n            switch (level) {\r\n                case 1: return 75;\r\n                case 2: return 150;\r\n                case 3: return 225;\r\n                case 4: return 375;\r\n                case 5: return 750;\r\n                case 6: return 900;\r\n                case 7: return 1100;\r\n                case 8: return 1400;\r\n                case 9: return 1600;\r\n                case 10: return 1900;\r\n                case 11: return 2400;\r\n                case 12: return 3000;\r\n                case 13: return 3400;\r\n                case 14: return 3800;\r\n                case 15: return 4300;\r\n                case 16: return 4800;\r\n                case 17: return 5900;\r\n                case 18: return 6300;\r\n                case 19: return 7300;\r\n                case 20: return 8500;\r\n                default: return 0;\r\n            }\r\n        case 'deadly':\r\n            switch (level) {\r\n                case 1: return 100;\r\n                case 2: return 200;\r\n                case 3: return 400;\r\n                case 4: return 500;\r\n                case 5: return 1100;\r\n                case 6: return 1400;\r\n                case 7: return 1700;\r\n                case 8: return 2100;\r\n                case 9: return 2400;\r\n                case 10: return 2800;\r\n                case 11: return 3600;\r\n                case 12: return 4500;\r\n                case 13: return 5100;\r\n                case 14: return 5700;\r\n                case 15: return 6400;\r\n                case 16: return 7200;\r\n                case 17: return 8800;\r\n                case 18: return 9500;\r\n                case 19: return 10900;\r\n                case 20: return 12700;\r\n                default: return 0;\r\n            }\r\n        default:\r\n            return 0;\r\n    }\r\n}\r\n\r\nexport function traitType(type: string): string {\r\n    switch (type) {\r\n        case 'trait':\r\n            return 'trait';\r\n        case 'action':\r\n            return 'action';\r\n        case 'legendary':\r\n            return 'legendary action';\r\n        case 'lair':\r\n            return 'lair action';\r\n        case 'regional':\r\n            return 'regional effect';\r\n        default:\r\n            return type;\r\n    }\r\n}\r\n\r\nexport function nudgeChallenge(value: number, delta: number): number {\r\n    var result = 0;\r\n\r\n    switch (value) {\r\n        case 0:\r\n            if (delta === -1) {\r\n                result = 0;\r\n            }\r\n            if (delta === +1) {\r\n                result = 0.125;\r\n            }\r\n            break;\r\n        case 0.125:\r\n            if (delta === -1) {\r\n                result = 0;\r\n            }\r\n            if (delta === +1) {\r\n                result = 0.25;\r\n            }\r\n            break;\r\n        case 0.25:\r\n            if (delta === -1) {\r\n                result = 0.125;\r\n            }\r\n            if (delta === +1) {\r\n                result = 0.5;\r\n            }\r\n            break;\r\n        case 0.5:\r\n            if (delta === -1) {\r\n                result = 0.25;\r\n            }\r\n            if (delta === +1) {\r\n                result = 1;\r\n            }\r\n            break;\r\n        case 1:\r\n            if (delta === -1) {\r\n                result = 0.5;\r\n            }\r\n            if (delta === +1) {\r\n                result = 2;\r\n            }\r\n            break;\r\n        default:\r\n            result = value + delta;\r\n            break;\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function conditionText(condition: Condition): string[] {\r\n    switch (condition.name) {\r\n        case 'blinded':\r\n            return [\r\n                'a blinded creature can’t see and automatically fails any ability check that requires sight',\r\n                'attack rolls against the creature have advantage, and the creature’s attack rolls have disadvantage'\r\n            ];\r\n        case 'charmed':\r\n            return [\r\n                'a charmed creature can’t attack the charmer or target the charmer with harmful abilities or magical effects',\r\n                'the charmer has advantage on any ability check to interact socially with the creature'\r\n            ];\r\n        case 'deafened':\r\n            return [\r\n                'a deafened creature can’t hear and automatically fails any ability check that requires hearing.'\r\n            ];\r\n        case 'exhaustion': {\r\n            switch (condition.level) {\r\n            case 1:\r\n                return [\r\n                    'disadvantage on ability checks'\r\n                ];\r\n            case 2:\r\n                return [\r\n                    'disadvantage on ability checks',\r\n                    'speed halved'\r\n                ];\r\n            case 3:\r\n                return [\r\n                    'disadvantage on ability checks',\r\n                    'speed halved',\r\n                    'disadvantage on attack rolls and saving throws'\r\n                ];\r\n            case 4:\r\n                return [\r\n                    'disadvantage on ability checks',\r\n                    'speed halved',\r\n                    'disadvantage on attack rolls and saving throws',\r\n                    'hit point maximum halved'\r\n                ];\r\n            case 5:\r\n                return [\r\n                    'disadvantage on ability checks',\r\n                    'speed halved',\r\n                    'disadvantage on attack rolls and saving throws',\r\n                    'hit point maximum halved',\r\n                    'speed reduced to 0'\r\n                ];\r\n            case 6:\r\n                return [\r\n                    'disadvantage on ability checks',\r\n                    'speed halved',\r\n                    'disadvantage on attack rolls and saving throws',\r\n                    'hit point maximum halved',\r\n                    'speed reduced to 0',\r\n                    'death'\r\n                ];\r\n            default:\r\n                return [];\r\n            }\r\n        }\r\n        case 'frightened':\r\n            return [\r\n                'a frightened creature has disadvantage on ability checks and attack rolls while the source of its fear is within line of sight',\r\n                'the creature can’t willingly move closer to the source of its fear'\r\n            ];\r\n        case 'grappled':\r\n            return [\r\n                'a grappled creature’s speed becomes 0, and it can’t benefit from any bonus to its speed',\r\n                'the condition ends if the grappler is incapacitated',\r\n                'the condition also ends if an effect removes the grappled creature from the reach of the grappler or grappling effect'\r\n            ];\r\n        case 'incapacitated':\r\n            return [\r\n                'an incapacitated creature can’t take actions or reactions'\r\n            ];\r\n        case 'invisible':\r\n            return [\r\n                'an invisible creature is impossible to see without the aid of magic or a special sense',\r\n                'for the purpose of hiding, the creature is heavily obscured',\r\n                'the creature’s location can be detected by any noise it makes or any tracks it leaves',\r\n                'attack rolls against the creature have disadvantage, and the creature’s attack rolls have advantage'\r\n            ];\r\n        case 'paralyzed':\r\n            return [\r\n                'a paralyzed creature is incapacitated (can’t take actions or reactions) and can’t move or speak',\r\n                'the creature automatically fails strength and dexterity saving throws',\r\n                'attack rolls against the creature have advantage',\r\n                'any attack that hits the creature is a critical hit if the attacker is within 5 feet of the creature'\r\n            ];\r\n        case 'petrified':\r\n            return [\r\n                'a petrified creature is transformed, along with any nonmagical object it is wearing or carrying, into a solid inanimate substance (usually stone)',\r\n                'its weight increases by a factor of ten, and it ceases aging',\r\n                'the creature is incapacitated (can’t take actions or reactions), can’t move or speak, and is unaware of its surroundings',\r\n                'attack rolls against the creature have advantage',\r\n                'the creature automatically fails strength and dexterity saving throws',\r\n                'the creature has resistance to all damage',\r\n                'the creature is immune to poison and disease, although a poison or disease already in its system is suspended, not neutralized'\r\n            ];\r\n        case 'poisoned':\r\n            return [\r\n                'a poisoned creature has disadvantage on attack rolls and ability checks'\r\n            ];\r\n        case 'prone':\r\n            return [\r\n                'a prone creature’s only movement option is to crawl, unless it stands up and thereby ends the condition',\r\n                'the creature has disadvantage on attack rolls',\r\n                'an attack roll against the creature has advantage if the attacker is Within 5 feet of the creature; otherwise, the attack roll has disadvantage'\r\n            ];\r\n        case 'restrained':\r\n            return [\r\n                'a restrained creature’s speed becomes 0, and it can’t benefit from any bonus to its speed',\r\n                'attack rolls against the creature have advantage, and the creature’s attack rolls have disadvantage',\r\n                'the creature has disadvantage on dexterity saving throws'\r\n            ];\r\n        case 'stunned':\r\n            return [\r\n                'a stunned creature is incapacitated (can’t take actions or reactions), can’t move, and can speak only falteringly',\r\n                'the creature automatically fails strength and dexterity saving throws',\r\n                'attack rolls against the creature have advantage'\r\n            ];\r\n        case 'unconscious':\r\n            return [\r\n                'an unconscious creature is incapacitated (can’t take actions or reactions), can’t move or speak, and is unaware of its surroundings',\r\n                'the creature drops whatever its holding and falls prone',\r\n                'the creature automatically fails strength and dexterity saving throws',\r\n                'attack rolls against the creature have advantage',\r\n                'any attack that hits the creature is a critical hit if the attacker is within 5 feet of the creature'\r\n            ];\r\n        case \"custom\":\r\n            return [];\r\n        default:\r\n            return [];\r\n    }\r\n}\r\n\r\nexport function conditionDurationText(condition: Condition, combat: Combat) {\r\n    if (condition.duration !== null) {\r\n        switch (condition.duration.type) {\r\n            case \"saves\":\r\n                var saveDuration = condition.duration as ConditionDurationSaves;\r\n                var saveType = saveDuration.saveType;\r\n                if (saveType !== \"death\") {\r\n                    saveType = saveType.toUpperCase();\r\n                }\r\n                var saves = saveDuration.count > 1 ? \"saves\" : \"save\";\r\n                return \"until you make \" + saveDuration.count + \" \" + saveType + \" \" + saves + \" at dc \" + saveDuration.saveDC;\r\n            case \"combatant\":\r\n                var combatantDuration = condition.duration as ConditionDurationCombatant;\r\n                var point = combatantDuration.point;\r\n                var c = combat.combatants.find(c => c.id == combatantDuration.combatantID);\r\n                var combatant = c ? (c.displayName || c.name || \"unnamed monster\") + \"'s\" : \"someone's\";\r\n                return \"until the \" + point + \" of \" + combatant + \" next turn\";\r\n            case \"rounds\":\r\n                var roundsDuration = condition.duration as ConditionDurationRounds;\r\n                var rounds = roundsDuration.count > 1 ? \"rounds\" : \"round\";\r\n                return \"for \" + roundsDuration.count + \" \" + rounds;\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport function getMonsterNames(encounter: Encounter | EncounterWave): { id: string, names: string[] }[] {\r\n    var monsterNames: any[] = [];\r\n    if (encounter) {\r\n        encounter.slots.forEach(slot => {\r\n            var names: any[] = [];\r\n            if (slot.count === 1) {\r\n                names.push(slot.monsterName);\r\n            } else {\r\n                for (var n = 0; n !== slot.count; ++n) {\r\n                    names.push(slot.monsterName + \" \" + (n + 1));\r\n                }\r\n            }\r\n\r\n            monsterNames.push({\r\n                id: slot.id,\r\n                names: names\r\n            });\r\n        });\r\n    }\r\n\r\n    return monsterNames;\r\n}","import * as utils from '../utils';\r\n\r\nimport {\r\n    Party, PC,\r\n    MonsterGroup, Monster, Trait,\r\n    Encounter, EncounterSlot, EncounterWave,\r\n    MapFolio, Map, MapItem,\r\n    CombatSetup, Combat, Notification, Condition, ConditionDurationSaves, ConditionDurationCombatant, ConditionDurationRounds\r\n} from './models';\r\n\r\nexport default class Factory {\r\n\r\n    public static createParty(): Party {\r\n        return {\r\n            id: utils.guid(),\r\n            name: \"\",\r\n            pcs: []\r\n        };\r\n    }\r\n\r\n    public static createPC(): PC {\r\n        return {\r\n            id: utils.guid(),\r\n            type: \"pc\",\r\n            active: true,\r\n            player: \"\",\r\n            name: \"\",\r\n            race: \"\",\r\n            classes: \"\",\r\n            background: \"\",\r\n            level: 1,\r\n            languages: \"Common\",\r\n            passiveInsight: 10,\r\n            passiveInvestigation: 10,\r\n            passivePerception: 10,\r\n            initiative: 10,\r\n            url: \"\"\r\n        };\r\n    }\r\n\r\n    public static createMonsterGroup(): MonsterGroup {\r\n        return {\r\n            id: utils.guid(),\r\n            name: \"\",\r\n            monsters: []\r\n        };\r\n    }\r\n\r\n    public static createMonster(): Monster {\r\n        return {\r\n            id: utils.guid(),\r\n            type: \"monster\",\r\n            name: \"\",\r\n            size: \"medium\",\r\n            category: \"humanoid\",\r\n            tag: \"\",\r\n            alignment: \"\",\r\n            challenge: 1,\r\n            abilityScores: {\r\n                str: 10,\r\n                dex: 10,\r\n                con: 10,\r\n                int: 10,\r\n                wis: 10,\r\n                cha: 10\r\n            },\r\n            ac: 10,\r\n            hpMax: 4,\r\n            hpTemp: 0,\r\n            hitDice: 1,\r\n            damage: {\r\n                resist: \"\",\r\n                vulnerable: \"\",\r\n                immune: \"\"\r\n            },\r\n            savingThrows: \"\",\r\n            speed: \"\",\r\n            skills: \"\",\r\n            senses: \"\",\r\n            languages: \"\",\r\n            equipment: \"\",\r\n            traits: [],\r\n            conditionImmunities: \"\"\r\n        };\r\n    }\r\n\r\n    public static createTrait(): Trait {\r\n        return {\r\n            id: utils.guid(),\r\n            name: \"\",\r\n            usage: \"\",\r\n            type: \"action\",\r\n            text: \"\"\r\n        };\r\n    }\r\n\r\n    public static createEncounter(): Encounter {\r\n        return {\r\n            id: utils.guid(),\r\n            name: \"\",\r\n            slots: [],\r\n            waves: []\r\n        };\r\n    }\r\n\r\n    public static createEncounterSlot(): EncounterSlot {\r\n        return {\r\n            id: utils.guid(),\r\n            monsterGroupName: \"\",\r\n            monsterName: \"\",\r\n            count: 1\r\n        };\r\n    }\r\n\r\n    public static createEncounterWave(): EncounterWave {\r\n        return {\r\n            id: utils.guid(),\r\n            name: \"\",\r\n            slots: []\r\n        };\r\n    }\r\n\r\n    public static createMapFolio(): MapFolio {\r\n        return {\r\n            id: utils.guid(),\r\n            name: \"\",\r\n            maps: []\r\n        };\r\n    }\r\n\r\n    public static createMap(): Map {\r\n        return {\r\n            id: utils.guid(),\r\n            name: \"\",\r\n            items: []\r\n        };\r\n    }\r\n\r\n    public static createMapItem(): MapItem {\r\n        return {\r\n            id: utils.guid(),\r\n            type: \"tile\",\r\n            x: 0,\r\n            y: 0,\r\n            width: 4,\r\n            height: 4,\r\n            terrain: null\r\n        };\r\n    }\r\n\r\n    public static createCombatSetup(): CombatSetup {\r\n        return {\r\n            partyID: null,\r\n            encounterID: null,\r\n            waveID: null,\r\n            folioID: null,\r\n            mapID: null,\r\n            monsterNames: [],\r\n            encounterInitMode: 'group'\r\n        };\r\n    }\r\n\r\n    public static createCombat(): Combat {\r\n        return {\r\n            id: utils.guid(),\r\n            name: \"\",\r\n            encounterID: null,\r\n            combatants: [],\r\n            map: null,\r\n            round: 1,\r\n            notifications: [],\r\n            issues: [],\r\n            timestamp: null\r\n        };\r\n    }\r\n\r\n    public static createNotification(): Notification {\r\n        return {\r\n            id: utils.guid(),\r\n            type: 'condition-save',\r\n            condition: null,\r\n            combatant: null\r\n        };\r\n    }\r\n\r\n    public static createCondition(): Condition {\r\n        return {\r\n            id: utils.guid(),\r\n            name: \"\",\r\n            level: 1,\r\n            text: null,\r\n            duration: null\r\n        };\r\n    }\r\n\r\n    public static createConditionDurationSaves(): ConditionDurationSaves {\r\n        return {\r\n            type: 'saves',\r\n            count: 1,\r\n            saveType: 'str',\r\n            saveDC: 10,\r\n            point: 'start'\r\n        };\r\n    }\r\n\r\n    public static createConditionDurationCombatant(): ConditionDurationCombatant {\r\n        return {\r\n            type: 'combatant',\r\n            point: 'start',\r\n            combatantID: null\r\n        };\r\n    }\r\n\r\n    public static createConditionDurationRounds(): ConditionDurationRounds {\r\n        return {\r\n            type: 'rounds',\r\n            count: 1\r\n        };\r\n    }\r\n}","import React from 'react';\r\n\r\nimport { MonsterGroup } from '../../models/models';\r\n\r\ninterface Props {\r\n    library: MonsterGroup[];\r\n    addOpenGameContent: () => void;\r\n}\r\n\r\nexport default class HomeScreen extends React.Component<Props> {\r\n    render() {\r\n        try {\r\n            var monsters = null;\r\n            if (this.props.library.length === 0) {\r\n                monsters = (\r\n                    <div>\r\n                        <div className=\"divider\"></div>\r\n                        <div className=\"text\">\r\n                            <div>since your collection of monsters is empty, you might want to start by pressing the button below to add monsters from the <a href=\"http://dnd.wizards.com/articles/features/systems-reference-document-srd\" target=\"_blank\" rel=\"noopener noreferrer\">system reference document</a></div>\r\n                        </div>\r\n                        <div className=\"text\">\r\n                            <button onClick={() => this.props.addOpenGameContent()}>add monsters</button>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className=\"home scrollable\">\r\n                <div className=\"vertical-center-outer\">\r\n                    <div className=\"vertical-center-middle\">\r\n                        <div className=\"vertical-center-inner\">\r\n                            <div className=\"welcome-panel\">\r\n                                <div className=\"heading\">welcome to <b>dojo</b></div>\r\n                                <div className=\"text\">\r\n                                    <div><b>dojo</b> is an app for dms of dungeons and dragons fifth edition</div>\r\n                                </div>\r\n                                <div className=\"text\">\r\n                                    <div>\r\n                                        with <b>dojo</b> you can:\r\n                                        <ul>\r\n                                            <li>build unique, challenging monsters</li>\r\n                                            <li>create encounters of just the right difficulty for your players</li>\r\n                                            <li>design intricate tactical maps</li>\r\n                                            <li>run combat without the book-keeping</li>\r\n                                        </ul>\r\n                                    </div>\r\n                                </div>\r\n                                {monsters}\r\n                                <div className=\"divider\"></div>\r\n                                <div className=\"text\">\r\n                                    <div>use the buttons at the bottom of the screen to access the app's features</div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    };\r\n}","import React from 'react';\r\n\r\ninterface Props {\r\n    getHeading: () => (string | JSX.Element);\r\n    getContent: () => (string | JSX.Element);\r\n}\r\n\r\nexport default class InfoCard extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        getHeading: null,\r\n        getContent: null\r\n    };\r\n\r\n    render() {\r\n        try {\r\n            var heading = null;\r\n            if (this.props.getHeading) {\r\n                heading = this.props.getHeading();\r\n            }\r\n\r\n            var content = null;\r\n            if (this.props.getContent) {\r\n                content = this.props.getContent();\r\n            }\r\n            if (!content) {\r\n                return null;\r\n            }\r\n\r\n            return (\r\n                <div className=\"card\">\r\n                    {heading}\r\n                    <div className=\"card-content\">\r\n                        {content}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport { Party } from '../../../models/models';\r\n\r\nimport InfoCard from '../info-card';\r\n\r\ninterface Props {\r\n    parties: Party[];\r\n}\r\n\r\nexport default class PartiesCard extends React.Component<Props> {\r\n    render() {\r\n        try {\r\n            var action: JSX.Element | null = null;\r\n            if (this.props.parties.length === 0) {\r\n                action = (\r\n                    <div className=\"section\">to start adding a party, press the button below</div>\r\n                );\r\n            } else {\r\n                action = (\r\n                    <div className=\"section\">select a party from the list to see pc details</div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <InfoCard\r\n                    getContent={() => (\r\n                        <div>\r\n                            <div className=\"section\">\r\n                                <div>this page is where you can tell dojo all about your pcs</div>\r\n                            </div>\r\n                            <div className=\"section\">\r\n                                <div>you can add a party for each of your gaming groups</div>\r\n                            </div>\r\n                            <div className=\"divider\"></div>\r\n                            {action}\r\n                        </div>\r\n                    )}\r\n                />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    };\r\n}","import React from 'react';\r\n\r\nimport { Party } from '../../models/models';\r\n\r\ninterface Props {\r\n    party: Party;\r\n    selected: boolean;\r\n    setSelection: (party: Party) => void;\r\n}\r\n\r\nexport default class PartyListItem extends React.Component<Props> {\r\n    render() {\r\n        try {\r\n            var pcs = [];\r\n            for (var n = 0; n !== this.props.party.pcs.length; ++n) {\r\n                var pc = this.props.party.pcs[n];\r\n                var name = pc.name;\r\n                if (pc.player) {\r\n                    name += \" (\" + pc.player + \")\";\r\n                }\r\n                if (!name) {\r\n                    name = \"unnamed pc\";\r\n                }\r\n                pcs.push(<div key={pc.id} className=\"text\">{name}</div>);\r\n            }\r\n            if (pcs.length === 0) {\r\n                pcs.push(<div key=\"empty\" className=\"text\">no pcs</div>);\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? \"list-item selected\" : \"list-item\"} onClick={() => this.props.setSelection(this.props.party)}>\r\n                    <div className=\"heading\">{this.props.party.name || \"unnamed party\"}</div>\r\n                    {pcs}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport warning from \"../../resources/images/warning.svg\";\r\n\r\ninterface Props {\r\n    text: string;\r\n    callback: () => void;\r\n    details: string;\r\n    disabled: boolean;\r\n}\r\n\r\ninterface State {\r\n    pressed: boolean;\r\n}\r\n\r\nexport default class ConfirmButton extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        details: null,\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            pressed: false\r\n        };\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({\r\n            pressed: !this.state.pressed\r\n        });\r\n    }\r\n\r\n    perform() {\r\n        this.toggle();\r\n        this.props.callback();\r\n    }\r\n\r\n    render() {\r\n        try {\r\n            var content = null;\r\n            if (this.state.pressed) {\r\n                content = (\r\n                    <div>\r\n                        <div className=\"title\">{this.props.text} - are you sure?</div>\r\n                        <img className=\"image\" src={warning} alt=\"warning\" />\r\n                        {this.props.details ? <div className=\"details\">{this.props.details}</div> : null}\r\n                        <div className=\"confirmation\">\r\n                            <div className=\"destructive\" onClick={() => this.perform()}>yes</div>\r\n                            <div className=\"non-destructive\" onClick={() => this.toggle()}>no</div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                content = (\r\n                    <div>\r\n                        <div className=\"title\">{this.props.text}</div>\r\n                        <img className=\"image\" src={warning} alt=\"warning\" />\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <button className={this.props.disabled ? \"disabled\" : \"\"} onClick={() => this.toggle()}>\r\n                    {content}\r\n                </button>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport { Party } from '../../models/models';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport InfoCard from './info-card';\r\n\r\ninterface Props {\r\n    selection: Party;\r\n    changeValue: (field: string, value: string) => void;\r\n    addPC: () => void;\r\n    sortPCs: () => void;\r\n    removeParty: () => void;\r\n}\r\n\r\nexport default class PartyCard extends React.Component<Props> {\r\n    render() {\r\n        try {\r\n            var activePCs = this.props.selection.pcs.filter(pc => pc.active);\r\n\r\n            var languages = activePCs\r\n                .map(pc => pc.languages)\r\n                .join(\", \")\r\n                .split(/[ ,;]+/)\r\n                .reduce((array: string[], value) => {\r\n                    if (array.indexOf(value) === -1) {\r\n                        array.push(value);\r\n                    }\r\n                    return array;\r\n                }, [])\r\n                .sort((a, b) => {\r\n                    if (a === \"Common\") {\r\n                        return -1;\r\n                    }\r\n                    if (b === \"Common\") {\r\n                        return 1;\r\n                    }\r\n                    return a.localeCompare(b);\r\n                })\r\n                .join(\", \");\r\n\r\n            var insightSummary = \"-\";\r\n            var investigationSummary = \"-\";\r\n            var perceptionSummary = \"-\";\r\n\r\n            if (activePCs.length !== 0) {\r\n                var insight: { min: number | null, max: number | null } = { min: null, max: null };\r\n                var investigation: { min: number | null, max: number | null } = { min: null, max: null };\r\n                var perception: { min: number | null, max: number | null } = { min: null, max: null };\r\n\r\n                activePCs.forEach(pc => {\r\n                    insight.min = insight.min === null ? pc.passiveInsight : Math.min(insight.min, pc.passiveInsight);\r\n                    insight.max = insight.max === null ? pc.passiveInsight : Math.max(insight.max, pc.passiveInsight);\r\n                    investigation.min = investigation.min === null ? pc.passiveInvestigation : Math.min(investigation.min, pc.passiveInvestigation);\r\n                    investigation.max = investigation.max === null ? pc.passiveInvestigation : Math.max(investigation.max, pc.passiveInvestigation);\r\n                    perception.min = perception.min === null ? pc.passivePerception : Math.min(perception.min, pc.passivePerception);\r\n                    perception.max = perception.max === null ? pc.passivePerception : Math.max(perception.max, pc.passivePerception);\r\n                });\r\n\r\n                insightSummary = insight.min === insight.max ? (insight.min as number).toString() : insight.min + \" - \" + insight.max;\r\n                investigationSummary = investigation.min === investigation.max ? (investigation.min as number).toString() : investigation.min + \" - \" + investigation.max;\r\n                perceptionSummary = perception.min === perception.max ? (perception.min as number).toString() : perception.min + \" - \" + perception.max;\r\n            }\r\n\r\n            var heading = (\r\n                <div className=\"heading\">\r\n                    <div className=\"title\">party</div>\r\n                </div>\r\n            );\r\n\r\n            var content = (\r\n                <div>\r\n                    <div className=\"section\">\r\n                        <input type=\"text\" placeholder=\"party name\" value={this.props.selection.name} onChange={event => this.props.changeValue(\"name\", event.target.value)} />\r\n                    </div>\r\n                    <div className=\"divider\"></div>\r\n                    <div className=\"section\">\r\n                        <div className=\"subheading\">languages</div>\r\n                    </div>\r\n                    <div className=\"section\">\r\n                        {languages}\r\n                    </div>\r\n                    <div className=\"section\">\r\n                        <div className=\"subheading\">passive skills</div>\r\n                    </div>\r\n                    <div className=\"table\">\r\n                        <div>\r\n                            <div className=\"cell three\"><b>insight</b></div>\r\n                            <div className=\"cell three\"><b>invest.</b></div>\r\n                            <div className=\"cell three\"><b>percep.</b></div>\r\n                        </div>\r\n                        <div>\r\n                            <div className=\"cell three\">{insightSummary}</div>\r\n                            <div className=\"cell three\">{investigationSummary}</div>\r\n                            <div className=\"cell three\">{perceptionSummary}</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"divider\"></div>\r\n                    <div className=\"section\">\r\n                    <button onClick={() => this.props.addPC()}>add a new pc</button>\r\n                        <button onClick={() => this.props.sortPCs()}>sort pcs</button>\r\n                        <ConfirmButton text=\"delete party\" callback={() => this.props.removeParty()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            return (\r\n                <InfoCard getHeading={() => heading} getContent={() => content} />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    };\r\n}","import React from 'react';\r\n\r\nimport arrow from \"../../resources/images/down-arrow-black.svg\";\r\n\r\ninterface Props {\r\n    click: (dir: string, dir2: 'in' | 'out' | null) => void;\r\n    direction: 'out' | 'in' | 'both' | 'eight';\r\n    disabled: boolean;\r\n}\r\n\r\nexport default class Radial extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        direction: 'out',\r\n        disabled: false\r\n    };\r\n\r\n    click(e: React.MouseEvent, dir: string, dir2: 'in' | 'out' | null = null) {\r\n        e.stopPropagation();\r\n        this.props.click(dir, dir2);\r\n    }\r\n\r\n    render() {\r\n        try {\r\n            var style = \"radial \"+ (this.props.direction || \"out\");\r\n            if (this.props.disabled) {\r\n                style += \" disabled\";\r\n            }\r\n\r\n            var showOut = (this.props.direction === \"out\") || (this.props.direction === \"both\") || (this.props.direction === \"eight\");\r\n            var showIn = (this.props.direction === \"in\") || (this.props.direction === \"both\");\r\n            var showDiag = (this.props.direction === \"eight\");\r\n\r\n            return (\r\n                <div className={style}>\r\n                    <div className=\"empty\" style={{ display: showDiag ? \"none\" : \"inline-block\" }}></div>\r\n                    <div className=\"btn diag\" style={{ display: showDiag ? \"inline-block\" : \"none\" }}>\r\n                        <img src={arrow} style={{ display: showOut ? \"inline-block\" : \"none\", transform: \"rotate(135deg)\" }} alt=\"nw\" onClick={e => this.click(e, \"NW\")}/>\r\n                    </div>\r\n                    <div className=\"btn\">\r\n                        <div>\r\n                            <img src={arrow} style={{ display: showOut ? \"inline-block\" : \"none\", transform: \"rotate(180deg)\" }} alt=\"n\" onClick={e => this.click(e, \"N\", \"out\")}/>\r\n                        </div>\r\n                        <div>\r\n                            <img src={arrow} style={{ display: showIn ? \"inline-block\" : \"none\" }} alt=\"n\" onClick={e => this.click(e, \"N\", \"in\")}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"empty\" style={{ display: showDiag ? \"none\" : \"inline-block\" }}></div>\r\n                    <div className=\"btn diag\" style={{ display: showDiag ? \"inline-block\" : \"none\" }}>\r\n                        <img src={arrow} style={{ display: showOut ? \"inline-block\" : \"none\", transform: \"rotate(-135deg)\" }} alt=\"ne\" onClick={e => this.click(e, \"NE\")}/>\r\n                    </div>\r\n                    <div className=\"btn\" style={{ padding: (showIn && showOut) ? \"10px 0\" : \"0\"}}>\r\n                        <img src={arrow} style={{ display: showOut ? \"inline-block\" : \"none\", transform: \"rotate(90deg)\" }} alt=\"w\" onClick={e => this.click(e, \"W\", \"out\")}/>\r\n                        <img src={arrow} style={{ display: showIn ? \"inline-block\" : \"none\", transform: \"rotate(-90deg)\" }} alt=\"w\" onClick={e => this.click(e, \"W\", \"in\")}/>\r\n                    </div>\r\n                    <div className=\"empty\"></div>\r\n                    <div className=\"btn\" style={{ padding: (showIn && showOut) ? \"10px 0\" : \"0\"}}>\r\n                        <img src={arrow} style={{ display: showIn ? \"inline-block\" : \"none\", transform: \"rotate(90deg)\" }} alt=\"e\" onClick={e => this.click(e, \"E\", \"in\")}/>\r\n                        <img src={arrow} style={{ display: showOut ? \"inline-block\" : \"none\", transform: \"rotate(-90deg)\" }} alt=\"e\" onClick={e => this.click(e, \"E\", \"out\")}/>\r\n                    </div>\r\n                    <div className=\"empty\" style={{ display: showDiag ? \"none\" : \"inline-block\" }}></div>\r\n                    <div className=\"btn diag\" style={{ display: showDiag ? \"inline-block\" : \"none\" }}>\r\n                        <img src={arrow} style={{ display: showOut ? \"inline-block\" : \"none\", transform: \"rotate(45deg)\" }} alt=\"sw\" onClick={e => this.click(e, \"SW\")}/>\r\n                    </div>\r\n                    <div className=\"btn\">\r\n                        <div>\r\n                            <img src={arrow} style={{ display: showIn ? \"inline-block\" : \"none\", transform: \"rotate(180deg)\" }} alt=\"s\" onClick={e => this.click(e, \"S\", \"in\")}/>\r\n                        </div>\r\n                        <div>\r\n                            <img src={arrow} style={{ display: showOut ? \"inline-block\" : \"none\" }} alt=\"s\" onClick={e => this.click(e, \"S\", \"out\")}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"empty\" style={{ display: showDiag ? \"none\" : \"inline-block\" }}></div>\r\n                    <div className=\"btn diag\" style={{ display: showDiag ? \"inline-block\" : \"none\" }}>\r\n                        <img src={arrow} style={{ display: showOut ? \"inline-block\" : \"none\", transform: \"rotate(-45deg)\" }} alt=\"se\" onClick={e => this.click(e, \"SE\")}/>\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport plus from \"../../resources/images/plus.svg\";\r\nimport minus from \"../../resources/images/minus.svg\";\r\n\r\ninterface Props {\r\n    source: any;\r\n    name: string;\r\n    nudgeValue: (delta: number) => void;\r\n    label: string;\r\n    disabled: boolean;\r\n    factors: number[];\r\n    display: ((value: number) => string) | null;\r\n}\r\n\r\nexport default class Spin extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        label: null,\r\n        disabled: false,\r\n        factors: null,\r\n        display: null\r\n    };\r\n\r\n    click(e: React.MouseEvent, delta: number) {\r\n        e.stopPropagation();\r\n        this.props.nudgeValue(delta);\r\n    }\r\n\r\n    touchEnd(e: React.TouchEvent, delta: number) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        this.props.nudgeValue(delta);\r\n    }\r\n\r\n    render() {\r\n        try {\r\n            var style = \"info-value\";\r\n            var value = this.props.source[this.props.name];\r\n            if (value === 0) {\r\n                style += \" dimmed\";\r\n            }\r\n\r\n            if (this.props.display) {\r\n                value = this.props.display(value);\r\n            }\r\n\r\n            var minusBtns: JSX.Element[] = [];\r\n            var plusBtns: JSX.Element[] = [];\r\n\r\n            if (this.props.factors) {\r\n                this.props.factors.forEach(factor => {\r\n                    minusBtns.push(\r\n                        <div key={\"minus\" + factor} className=\"spin-button factor\" onTouchEnd={e => this.touchEnd(e, -1 * factor)} onClick={e => this.click(e, -1 * factor)}>\r\n                            {\"-\" + factor}\r\n                        </div>\r\n                    );\r\n        \r\n                    plusBtns.push(\r\n                        <div key={\"plus\" + factor} className=\"spin-button factor\" onTouchEnd={e => this.touchEnd(e, +1 * factor)} onClick={e => this.click(e, +1 * factor)}>\r\n                            {\"+\" + factor}\r\n                        </div>\r\n                    );        \r\n                });\r\n\r\n                minusBtns.reverse();\r\n            } else {\r\n                minusBtns.push(\r\n                    <div key=\"minus1\" className=\"spin-button\" onTouchEnd={e => this.touchEnd(e, -1)} onClick={e => this.click(e, -1)}>\r\n                        <img className=\"image\" src={minus} alt=\"minus\" />\r\n                    </div>\r\n                );\r\n    \r\n                plusBtns.push(\r\n                    <div key=\"plus1\" className=\"spin-button\" onTouchEnd={e => this.touchEnd(e, +1)} onClick={e => this.click(e, +1)}>\r\n                        <img className=\"image\" src={plus} alt=\"plus\" />\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            var infoWidth = 80 * (this.props.factors? this.props.factors.length : 1);\r\n\r\n            return (\r\n                <div className={this.props.disabled ? \"spin disabled\" : \"spin\"}>\r\n                    <div className=\"minus\">\r\n                        {minusBtns}\r\n                    </div>\r\n                    <div className=\"info\" style={{ width: \"calc(100% - \" + infoWidth + \"px)\" }}>\r\n                        <div className=\"info-label\">{this.props.label}</div>\r\n                        <div className={style}>{value}</div>\r\n                    </div>\r\n                    <div className=\"plus\">\r\n                        {plusBtns}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport { PC, Combatant } from '../../models/models';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport Radial from '../controls/radial';\r\nimport Spin from '../controls/spin';\r\n\r\nimport arrow from \"../../resources/images/down-arrow.svg\";\r\n\r\ninterface Props {\r\n    combatant: PC | (PC & Combatant);\r\n    mode: string;\r\n    changeValue: (pc: PC, field: string, value: any) => void;\r\n    nudgeValue: (pc: PC, field: string, delta: number) => void;\r\n    removePC: (pc: PC) => void;\r\n    // Combat\r\n    makeCurrent: (combatant: Combatant) => void;\r\n    makeActive: (combatant: Combatant) => void;\r\n    makeDefeated: (combatant: Combatant) => void;\r\n    endTurn: (combatant: Combatant) => void;\r\n    mapAdd: (combatant: Combatant) => void;\r\n    mapMove: (combatant: Combatant, dir: string) => void;\r\n    mapRemove: (combatant: Combatant) => void;\r\n    removeCombatant: (combatant: Combatant) => void;\r\n}\r\n\r\ninterface State {\r\n    showDetails: boolean;\r\n}\r\n\r\nexport default class PCCard extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        removePC: null,\r\n        makeCurrent: null,\r\n        makeActive: null,\r\n        makeDefeated: null,\r\n        endTurn: null,\r\n        mapAdd: null,\r\n        mapMove: null,\r\n        mapRemove: null,\r\n        removeCombatant: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showDetails: false\r\n        };\r\n    }\r\n\r\n    toggleDetails() {\r\n        this.setState({\r\n            showDetails: !this.state.showDetails\r\n        })\r\n    }\r\n\r\n    render() {\r\n        try {\r\n            var options = [];\r\n            if (this.props.mode.indexOf(\"edit\") !== -1) {\r\n                if (this.props.combatant.active) {\r\n                    options.push(<button key=\"toggle-active\" onClick={() => this.props.changeValue(this.props.combatant, \"active\", false)}>mark inactive</button>);\r\n                } else {\r\n                    options.push(<button key=\"toggle-active\" onClick={() => this.props.changeValue(this.props.combatant, \"active\", true)}>mark active</button>);\r\n                }\r\n                options.push(<ConfirmButton key=\"remove\" text=\"delete pc\" callback={() => this.props.removePC(this.props.combatant)} />);\r\n            }\r\n            if (this.props.mode.indexOf(\"combat\") !== -1) {\r\n                var combatant = this.props.combatant as Combatant;\r\n\r\n                if (this.props.mode.indexOf(\"tactical\") !== -1) {\r\n                    if (this.props.mode.indexOf(\"on-map\") !== -1) {\r\n                        options.push(\r\n                            <div key=\"mapMove\" className=\"section centered\">\r\n                                <Radial\r\n                                    direction=\"eight\"\r\n                                    click={dir => this.props.mapMove(combatant, dir)}\r\n                                />\r\n                            </div>\r\n                        );\r\n                        options.push(\r\n                            <Spin\r\n                                key=\"altitude\"\r\n                                source={this.props.combatant}\r\n                                name=\"altitude\"\r\n                                label=\"altitude\"\r\n                                display={value => value + \" ft.\"}\r\n                                nudgeValue={delta => this.props.nudgeValue(this.props.combatant, \"altitude\", delta * 5)}\r\n                            />\r\n                        );\r\n                        options.push(<button key=\"mapRemove\" onClick={() => this.props.mapRemove(combatant)}>remove from map</button>);\r\n                    }\r\n                    if (this.props.mode.indexOf(\"off-map\") !== -1) {\r\n                        options.push(<button key=\"mapAdd\" onClick={() => this.props.mapAdd(combatant)}>add to map</button>);\r\n                    }\r\n                    options.push(<div key=\"tactical-div\" className=\"divider\"></div>);\r\n                }\r\n                if (combatant.pending && !combatant.active && !combatant.defeated) {\r\n                    options.push(<ConfirmButton key=\"remove\" text=\"remove from encounter\" callback={() => this.props.removeCombatant(combatant)} />);\r\n                }\r\n                if (!combatant.pending && combatant.active && !combatant.defeated) {\r\n                    if (combatant.current) {\r\n                        options.push(<button key=\"endTurn\" onClick={() => this.props.endTurn(combatant)}>end turn</button>);\r\n                        options.push(<button key=\"makeDefeated\" onClick={() => this.props.makeDefeated(combatant)}>mark as defeated and end turn</button>);\r\n                    } else {\r\n                        options.push(<button key=\"makeCurrent\" onClick={() => this.props.makeCurrent(combatant)}>start turn</button>);\r\n                        options.push(<button key=\"makeDefeated\" onClick={() => this.props.makeDefeated(combatant)}>mark as defeated</button>);\r\n                        options.push(<ConfirmButton key=\"remove\" text=\"remove from encounter\" callback={() => this.props.removeCombatant(combatant)} />);\r\n                    }\r\n                }\r\n                if (!combatant.pending && !combatant.active && combatant.defeated) {\r\n                    options.push(<button key=\"makeActive\" onClick={() => this.props.makeActive(combatant)}>mark as active</button>);\r\n                    options.push(<ConfirmButton key=\"remove\" text=\"remove from encounter\" callback={() => this.props.removeCombatant(combatant)} />);\r\n                }\r\n            }\r\n\r\n            var commonStatBlock = (\r\n                <div className=\"stats\">\r\n                    <div className=\"section centered\">\r\n                        <div className=\"lowercase\">\r\n                            <i>\r\n                                <span>{this.props.combatant.race || 'race'} {this.props.combatant.classes || 'class'}</span>,\r\n                                <span>level {this.props.combatant.level}</span>\r\n                            </i>\r\n                        </div>\r\n                        <div style={{ display: this.props.combatant.url ? \"\" : \"none\" }}>\r\n                            <a href={this.props.combatant.url} target=\"_blank\" rel=\"noopener noreferrer\">d&d beyond sheet</a>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"divider\"></div>\r\n                    <div className=\"section subheading\">languages</div>\r\n                    <div className=\"section\">\r\n                        {this.props.combatant.languages || \"-\"}\r\n                    </div>\r\n                    <div className=\"section subheading\">passive skills</div>\r\n                    <div className=\"table\">\r\n                        <div>\r\n                            <div className=\"cell three\"><b>insight</b></div>\r\n                            <div className=\"cell three\"><b>invest.</b></div>\r\n                            <div className=\"cell three\"><b>percep.</b></div>\r\n                        </div>\r\n                        <div>\r\n                            <div className=\"cell three\">{this.props.combatant.passiveInsight}</div>\r\n                            <div className=\"cell three\">{this.props.combatant.passiveInvestigation}</div>\r\n                            <div className=\"cell three\">{this.props.combatant.passivePerception}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            var stats = null;\r\n            if (this.props.mode.indexOf(\"edit\") !== -1) {\r\n                if (this.state.showDetails) {\r\n                    stats = (\r\n                        <div className=\"edit\">\r\n                            <div className=\"section\">\r\n                                <div className=\"input-label\" style={{ display: this.state.showDetails ? \"\" : \"none\" }}>character name:</div>\r\n                                <input type=\"text\" value={this.props.combatant.name} onChange={event => this.props.changeValue(this.props.combatant, \"name\", event.target.value)} />\r\n                                <div className=\"input-label\" style={{ display: this.state.showDetails ? \"\" : \"none\" }}>player name:</div>\r\n                                <input type=\"text\" value={this.props.combatant.player} onChange={event => this.props.changeValue(this.props.combatant, \"player\", event.target.value)} />\r\n                                <div className=\"input-label\">race:</div>\r\n                                <input type=\"text\" value={this.props.combatant.race} onChange={event => this.props.changeValue(this.props.combatant, \"race\", event.target.value)} />\r\n                                <div className=\"input-label\">class:</div>\r\n                                <input type=\"text\" value={this.props.combatant.classes} onChange={event => this.props.changeValue(this.props.combatant, \"classes\", event.target.value)} />\r\n                                <div className=\"input-label\">level:</div>\r\n                                <Spin\r\n                                    source={this.props.combatant}\r\n                                    name=\"level\"\r\n                                    nudgeValue={delta => this.props.nudgeValue(this.props.combatant, \"level\", delta)}\r\n                                />\r\n                                <div className=\"input-label\">languages:</div>\r\n                                <input type=\"text\" value={this.props.combatant.languages} onChange={event => this.props.changeValue(this.props.combatant, \"languages\", event.target.value)} />\r\n                                <div className=\"input-label\">d&d beyond link:</div>\r\n                                <input type=\"text\" value={this.props.combatant.url} onChange={event => this.props.changeValue(this.props.combatant, \"url\", event.target.value)} />\r\n                            </div>\r\n                            <div className=\"divider\"></div>\r\n                            <div className=\"section subheading\">passive skills</div>\r\n                            <Spin\r\n                                source={this.props.combatant}\r\n                                name=\"passiveInsight\"\r\n                                label=\"insight\"\r\n                                nudgeValue={delta => this.props.nudgeValue(this.props.combatant, \"passiveInsight\", delta)}\r\n                            />\r\n                            <Spin\r\n                                source={this.props.combatant}\r\n                                name=\"passiveInvestigation\"\r\n                                label=\"investigation\"\r\n                                nudgeValue={delta => this.props.nudgeValue(this.props.combatant, \"passiveInvestigation\", delta)}\r\n                            />\r\n                            <Spin\r\n                                source={this.props.combatant}\r\n                                name=\"passivePerception\"\r\n                                label=\"perception\"\r\n                                nudgeValue={delta => this.props.nudgeValue(this.props.combatant, \"passivePerception\", delta)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                } else {\r\n                    stats = commonStatBlock;\r\n                }\r\n            }\r\n            if (this.props.mode.indexOf(\"combat\") !== -1) {\r\n                stats = commonStatBlock;\r\n            }\r\n\r\n            var toggle = null;\r\n            if (this.props.mode.indexOf(\"combat\") !== -1) {\r\n                // Don't show toggle button for combatant\r\n            } else {\r\n                var imageStyle = this.state.showDetails ? \"image rotate\" : \"image\";\r\n                toggle = <img className={imageStyle} src={arrow} alt=\"arrow\" onClick={() => this.toggleDetails()} />\r\n            }\r\n\r\n            return (\r\n                <div className=\"card pc\">\r\n                    <div className=\"heading\">\r\n                        <div className=\"title\">{(this.props.combatant as Combatant ? (this.props.combatant as Combatant).displayName : null) || this.props.combatant.name || \"unnamed pc\"}</div>\r\n                        {toggle}\r\n                    </div>\r\n                    <div className=\"card-content\">\r\n                        {stats}\r\n                        <div style={{ display: options.length > 0 ? \"\" : \"none\" }}>\r\n                            <div className=\"divider\"></div>\r\n                            <div className=\"section\">\r\n                                {options}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport arrow from \"../../resources/images/down-arrow-black.svg\";\r\nimport close from \"../../resources/images/close-black.svg\";\r\n\r\ninterface Props {\r\n    content: any[];\r\n    heading: string;\r\n    hidden: boolean;\r\n    showClose: boolean;\r\n    showToggle: boolean;\r\n    close: () => void;\r\n}\r\n\r\ninterface State {\r\n    showCards: boolean;\r\n}\r\n\r\nexport default class CardGroup extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        heading: null,\r\n        hidden: false,\r\n        showClose: false,\r\n        showToggle: false,\r\n        close: null\r\n    }\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showCards: true\r\n        }\r\n    }\r\n\r\n    toggleCards() {\r\n        this.setState({\r\n            showCards: !this.state.showCards\r\n        });\r\n    }\r\n\r\n    render() {\r\n        try {\r\n            if (this.props.hidden) {\r\n                return null;\r\n            }\r\n\r\n            var heading = null;\r\n            if (this.props.heading) {\r\n                var closeBtn = null;\r\n                if (this.props.showClose) {\r\n                    closeBtn = (\r\n                        <img className=\"image\" src={close} alt=\"close\" onClick={() => this.props.close()} />\r\n                    );\r\n                }\r\n\r\n                var toggle = null;\r\n                if (this.props.showToggle) {\r\n                    var style = this.state.showCards ? \"image rotate\" : \"image\";\r\n                    toggle = (\r\n                        <img className={style} src={arrow} alt=\"arrow\" onClick={() => this.toggleCards()} />\r\n                    );\r\n                }\r\n\r\n                heading = (\r\n                    <div className=\"heading\">\r\n                        <div className=\"title\">{this.props.heading}</div>\r\n                        {toggle}\r\n                        {closeBtn}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            var cards = [];\r\n            if ((this.props.content.length > 0) && this.state.showCards) {\r\n                cards = this.props.content;\r\n            }\r\n\r\n            return (\r\n                <div className=\"card-group\">\r\n                    {heading}\r\n                    <div className=\"row small-up-1 medium-up-2 large-up-4 collapse\">\r\n                        {cards}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport { Party, PC } from '../../models/models';\r\n\r\nimport PartiesCard from '../cards/information/parties-card';\r\nimport PartyListItem from '../list-items/party-list-item';\r\nimport PartyCard from '../cards/party-card';\r\nimport PCCard from '../cards/pc-card';\r\nimport InfoCard from '../cards/info-card';\r\nimport CardGroup from '../panels/card-group';\r\n\r\ninterface Props {\r\n    parties: Party[];\r\n    selection: Party | null;\r\n    showHelp: boolean;\r\n    selectParty: (party: Party | null) => void;\r\n    addParty: () => void;\r\n    removeParty: () => void;\r\n    addPC: () => void;\r\n    removePC: (pc: PC) => void;\r\n    sortPCs: () => void;\r\n    changeValue: (source: any, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, value: number) => void;\r\n}\r\n\r\nexport default class PartiesScreen extends React.Component<Props> {\r\n    render() {\r\n        try {\r\n            var help = null;\r\n            if (this.props.showHelp) {\r\n                help = (\r\n                    <PartiesCard parties={this.props.parties}/>\r\n                );\r\n            }\r\n\r\n            var parties = [];\r\n            for (var n = 0; n !== this.props.parties.length; ++n) {\r\n                var party = this.props.parties[n];\r\n                parties.push(\r\n                    <PartyListItem\r\n                        key={party.id}\r\n                        party={party}\r\n                        selected={party === this.props.selection}\r\n                        setSelection={party => this.props.selectParty(party)}\r\n                    />\r\n                );\r\n            };\r\n\r\n            var activeCards: JSX.Element[] = [];\r\n            var inactiveCards: JSX.Element[] = [];\r\n\r\n            if (this.props.selection) {\r\n                activeCards.push(\r\n                    <div className=\"column\" key=\"info\">\r\n                        <PartyCard\r\n                            selection={this.props.selection}\r\n                            addPC={() => this.props.addPC()}\r\n                            sortPCs={() => this.props.sortPCs()}\r\n                            changeValue={(type, value) => this.props.changeValue(this.props.selection, type, value)}\r\n                            removeParty={() => this.props.removeParty()}\r\n                        />\r\n                    </div>\r\n                );\r\n\r\n                var activePCs = this.props.selection.pcs.filter(pc => pc.active);\r\n                activePCs.forEach(pc => {\r\n                    activeCards.push(\r\n                        <div className=\"column\" key={pc.id}>\r\n                            <PCCard\r\n                                combatant={pc}\r\n                                mode={\"edit\"}\r\n                                changeValue={(pc, type, value) => this.props.changeValue(pc, type, value)}\r\n                                nudgeValue={(pc, type, delta) => this.props.nudgeValue(pc, type, delta)}\r\n                                removePC={pc => this.props.removePC(pc)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                var inactivePCs = this.props.selection.pcs.filter(pc => !pc.active);\r\n                inactivePCs.forEach(pc => {\r\n                    inactiveCards.push(\r\n                        <div className=\"column\" key={pc.id}>\r\n                            <PCCard\r\n                                combatant={pc}\r\n                                mode={\"edit\"}\r\n                                changeValue={(pc, type, value) => this.props.changeValue(pc, type, value)}\r\n                                nudgeValue={(pc, type, delta) => this.props.nudgeValue(pc, type, delta)}\r\n                                removePC={pc => this.props.removePC(pc)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                if (activePCs.length === 0) {\r\n                    activeCards.push(\r\n                        <div className=\"column\" key=\"empty\">\r\n                            <InfoCard getContent={() => <div className=\"section\">no pcs</div>} />\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n\r\n            var name = undefined;\r\n            if (this.props.selection) {\r\n                name = this.props.selection.name || \"unnamed party\";\r\n            }\r\n\r\n            return (\r\n                <div className=\"parties row collapse\">\r\n                    <div className=\"columns small-4 medium-4 large-3 scrollable list-column\">\r\n                        {help}\r\n                        <button onClick={() => this.props.addParty()}>add a new party</button>\r\n                        {parties}\r\n                    </div>\r\n                    <div className=\"columns small-8 medium-8 large-9 scrollable\">\r\n                        <CardGroup\r\n                            content={activeCards}\r\n                            heading={name}\r\n                            showClose={this.props.selection !== null}\r\n                            close={() => this.props.selectParty(null)}\r\n                            hidden={!this.props.selection}\r\n                        />\r\n                        <CardGroup\r\n                            content={inactiveCards}\r\n                            heading=\"inactive pcs\"\r\n                            showClose={false}\r\n                            hidden={inactiveCards.length === 0}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport InfoCard from '../info-card';\r\n\r\nexport default class MonsterLibraryCard extends React.Component {\r\n    render() {\r\n        return (\r\n            <InfoCard\r\n                getContent={() => (\r\n                    <div>\r\n                        <div className=\"section\">you can maintain your menagerie of monsters here</div>\r\n                        <div className=\"divider\"></div>\r\n                        <div className=\"section\">select a monster group from the list to see stat blocks for monsters in that group</div>\r\n                        <div className=\"section\">to quickly find a monster, type its name into the filter box</div>\r\n                    </div>\r\n                )}\r\n            />\r\n        );\r\n    };\r\n}","import React from 'react';\r\n\r\nimport * as utils from '../../utils';\r\n\r\nimport { MonsterGroup } from '../../models/models';\r\n\r\ninterface Props {\r\n    group: MonsterGroup;\r\n    selected: boolean;\r\n    filter: string;\r\n    setSelection: (group: MonsterGroup) => void;\r\n}\r\n\r\nexport default class MonsterGroupListItem extends React.Component<Props> {\r\n    render() {\r\n        try {\r\n            var matchGroup = utils.match(this.props.filter, this.props.group.name);\r\n\r\n            var monsters = [];\r\n            for (var n = 0; n !== this.props.group.monsters.length; ++n) {\r\n                var monster = this.props.group.monsters[n];\r\n                var matchMonster = utils.match(this.props.filter, monster.name);\r\n                if (matchGroup || matchMonster) {\r\n                    var name = monster.name;\r\n                    if (!name) {\r\n                        name = \"unnamed monster\";\r\n                    }\r\n                    monsters.push(<div key={monster.id} className=\"text\">{name}</div>);\r\n                }\r\n            }\r\n            if (monsters.length === 0) {\r\n                monsters.push(<div key=\"empty\" className=\"text\">no monsters</div>);\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? \"list-item selected\" : \"list-item\"} onClick={() => this.props.setSelection(this.props.group)}>\r\n                    <div className=\"heading\">{this.props.group.name || \"unnamed group\"}</div>\r\n                    {monsters}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport { MonsterGroup } from '../../models/models';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport InfoCard from './info-card';\r\n\r\ninterface Props {\r\n    selection: MonsterGroup;\r\n    filter: string | null;\r\n    changeValue: (field: string, value: string) => void;\r\n    addMonster: () => void;\r\n    sortMonsters: () => void;\r\n    removeMonsterGroup: () => void;\r\n}\r\n\r\nexport default class MonsterGroupCard extends React.Component<Props> {\r\n    render() {\r\n        try {\r\n            var heading = (\r\n                <div className=\"heading\">\r\n                    <div className=\"title\">monster group</div>\r\n                </div>\r\n            );\r\n\r\n            var content = (\r\n                <div>\r\n                    <div className=\"section\">\r\n                        <input type=\"text\" placeholder=\"group name\" value={this.props.selection.name} disabled={!!this.props.filter} onChange={event => this.props.changeValue(\"name\", event.target.value)} />\r\n                    </div>\r\n                    <div className=\"divider\"></div>\r\n                    <div className=\"section\">\r\n                        <button className={this.props.filter ? \"disabled\" : \"\"} onClick={() => this.props.addMonster()}>add a new monster</button>\r\n                        <button className={this.props.filter ? \"disabled\" : \"\"} onClick={() => this.props.sortMonsters()}>sort monsters</button>\r\n                        <ConfirmButton text=\"delete group\" callback={() => this.props.removeMonsterGroup()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            return (\r\n                <InfoCard getHeading={() => heading} getContent={() => content} />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    };\r\n}","import React from 'react';\r\n\r\nimport arrow from \"../../resources/images/down-arrow-black.svg\";\r\n\r\ninterface Props {\r\n    text: string;\r\n    content: string | JSX.Element;\r\n    disabled: boolean;\r\n}\r\n\r\ninterface State {\r\n    expanded: boolean;\r\n}\r\n\r\nexport default class Expander extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            expanded: false\r\n        }\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({\r\n            expanded: !this.state.expanded\r\n        });\r\n    }\r\n\r\n    render() {\r\n        try {\r\n            var style = this.props.disabled ? \"expander disabled\" : \"expander\";\r\n            if (this.state.expanded) {\r\n                style += \" expanded\";\r\n            }\r\n\r\n            var content = null;\r\n            if (this.state.expanded) {\r\n                content = (\r\n                    <div className=\"expander-content\">\r\n                        {this.props.content}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={style}>\r\n                    <div className=\"expander-header\" onClick={() => this.toggle()}>\r\n                        <div className=\"expander-text\">{this.props.text}</div>\r\n                        <img className=\"expander-button\" src={arrow} alt=\"arrow\" />\r\n                    </div>\r\n                    {content}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport ellipsis from \"../../resources/images/ellipsis.svg\";\r\n\r\ninterface Props {\r\n    options: { id: string; text: string; disabled?: boolean }[];\r\n    select: (optionID: string) => void;\r\n    selectedID: string;\r\n    placeholder: string;\r\n    disabled: boolean;\r\n}\r\n\r\ninterface State {\r\n    open: boolean;\r\n}\r\n\r\nexport default class Dropdown extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        selectedID: null,\r\n        placeholder: \"select...\",\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            open: false\r\n        };\r\n    }\r\n\r\n    toggleOpen(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        this.setState({\r\n            open: !this.state.open\r\n        });\r\n    }\r\n\r\n    select(optionID: string) {\r\n        this.setState({\r\n            open: false\r\n        });\r\n        this.props.select(optionID);\r\n    }\r\n\r\n    render() {\r\n        try {\r\n            if (this.props.options.length === 0) {\r\n                return null;\r\n            }\r\n\r\n            var style = this.props.disabled ? \"dropdown disabled\" : \"dropdown\";\r\n            var content = [];\r\n\r\n            var selectedText = undefined;\r\n            if (this.props.selectedID) {\r\n                var option: { id: string; text: string; disabled?: boolean } | undefined = this.props.options.find(o => o.id === this.props.selectedID);\r\n                if (option) {\r\n                    selectedText = option.text;\r\n                }\r\n            } else {\r\n                selectedText = /*this.props.text ||*/ this.props.placeholder;\r\n            }\r\n\r\n            content.push(\r\n                <div key=\"selection\" className=\"dropdown-top\" title={selectedText}>\r\n                    <div className=\"item-text\">{selectedText}</div>\r\n                    <img className=\"arrow\" src={ellipsis} alt=\"arrow\" />\r\n                </div>\r\n            );\r\n\r\n            if (this.state.open) {\r\n                style += \" open\";\r\n\r\n                var items = this.props.options.map(option => {\r\n                    if (option.text === null) {\r\n                        return <div key={option.id} className=\"divider\"></div>\r\n                    } else {\r\n                        return (\r\n                            <DropdownOption\r\n                                key={option.id}\r\n                                option={option}\r\n                                selected={option.id === this.props.selectedID}\r\n                                select={optionID => this.select(optionID)}\r\n                            />\r\n                        );\r\n                    }\r\n                });\r\n\r\n                content.push(\r\n                    <div key=\"options\" className=\"dropdown-options\">\r\n                        {items}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={style} onClick={e => this.toggleOpen(e)}>\r\n                    {content}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface DropdownOptionProps {\r\n    option: { id: string; text: string; disabled?: boolean };\r\n    selected: boolean;\r\n    select: (optionID: string) => void;\r\n}\r\n\r\nclass DropdownOption extends React.Component<DropdownOptionProps> {\r\n    click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (!this.props.option.disabled) {\r\n            this.props.select(this.props.option.id);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        try {\r\n            var style = \"dropdown-option\";\r\n            if (this.props.selected) {\r\n                style += \" selected\";\r\n            }\r\n            if (this.props.option.disabled) {\r\n                style += \" disabled\";\r\n            }\r\n\r\n            return (\r\n                <div className={style} title={this.props.option.text} onClick={e => this.click(e)}>\r\n                    {this.props.option.text}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport * as utils from '../../utils';\r\n\r\nimport Spin from '../controls/spin';\r\nimport { Monster } from '../../models/models';\r\n\r\ninterface Props {\r\n    combatant: Monster;\r\n    edit: boolean;\r\n    nudgeValue: (combatant: Monster, field: string, delta: number) => void;\r\n}\r\n\r\ninterface State {\r\n    showAbilityScores: boolean;\r\n}\r\n\r\nexport default class AbilityScorePanel extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        edit: null,\r\n        nudgeValue: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showAbilityScores: false\r\n        };\r\n    }\r\n\r\n    toggleAbilityScores() {\r\n        this.setState({\r\n            showAbilityScores: !this.state.showAbilityScores\r\n        });\r\n    }\r\n\r\n    render() {\r\n        try {\r\n            var result = null;\r\n\r\n            if (this.props.edit) {\r\n                result = (\r\n                    <div>\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name=\"str\"\r\n                            label=\"strength\"\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, \"abilityScores.str\", delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name=\"dex\"\r\n                            label=\"dexterity\"\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, \"abilityScores.dex\", delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name=\"con\"\r\n                            label=\"constitution\"\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, \"abilityScores.con\", delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name=\"int\"\r\n                            label=\"intelligence\"\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, \"abilityScores.int\", delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name=\"wis\"\r\n                            label=\"wisdom\"\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, \"abilityScores.wis\", delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name=\"cha\"\r\n                            label=\"charisma\"\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, \"abilityScores.cha\", delta)}\r\n                        />\r\n                    </div>\r\n                );\r\n            } else {\r\n                result = (\r\n                    <div className=\"ability-scores\" onClick={() => this.toggleAbilityScores()}>\r\n                        <div className=\"ability-score\">\r\n                            <div className=\"ability-heading\">str</div>\r\n                            <div className=\"ability-value\">{this.state.showAbilityScores ? this.props.combatant.abilityScores.str : utils.modifier(this.props.combatant.abilityScores.str)}</div>\r\n                        </div>\r\n                        <div className=\"ability-score\">\r\n                            <div className=\"ability-heading\">dex</div>\r\n                            <div className=\"ability-value\">{this.state.showAbilityScores ? this.props.combatant.abilityScores.dex : utils.modifier(this.props.combatant.abilityScores.dex)}</div>\r\n                        </div>\r\n                        <div className=\"ability-score\">\r\n                            <div className=\"ability-heading\">con</div>\r\n                            <div className=\"ability-value\">{this.state.showAbilityScores ? this.props.combatant.abilityScores.con : utils.modifier(this.props.combatant.abilityScores.con)}</div>\r\n                        </div>\r\n                        <div className=\"ability-score\">\r\n                            <div className=\"ability-heading\">int</div>\r\n                            <div className=\"ability-value\">{this.state.showAbilityScores ? this.props.combatant.abilityScores.int : utils.modifier(this.props.combatant.abilityScores.int)}</div>\r\n                        </div>\r\n                        <div className=\"ability-score\">\r\n                            <div className=\"ability-heading\">wis</div>\r\n                            <div className=\"ability-value\">{this.state.showAbilityScores ? this.props.combatant.abilityScores.wis : utils.modifier(this.props.combatant.abilityScores.wis)}</div>\r\n                        </div>\r\n                        <div className=\"ability-score\">\r\n                            <div className=\"ability-heading\">cha</div>\r\n                            <div className=\"ability-value\">{this.state.showAbilityScores ? this.props.combatant.abilityScores.cha : utils.modifier(this.props.combatant.abilityScores.cha)}</div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return result;\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    };\r\n}","import React from 'react';\r\n\r\nimport * as utils from '../../utils';\r\n\r\nimport { Trait, Monster } from '../../models/models';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport Expander from '../controls/expander';\r\n\r\ninterface Props {\r\n    combatant: Monster;\r\n    mode: 'view' | 'edit' | 'template';\r\n    addTrait: (traitType: 'trait' | 'action' | 'legendary' | 'lair' | 'regional') => void;\r\n    copyTrait: (trait: Trait) => void;\r\n    removeTrait: (trait: Trait) => void;\r\n    changeTrait: (trait: Trait, field: 'name' | 'usage' | 'text', value: string) => void;\r\n}\r\n\r\nexport default class TraitsPanel extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        mode: 'view',\r\n        addTrait: null,\r\n        copyTrait: null,\r\n        removeTrait: null,\r\n        changeTrait: null\r\n    };\r\n\r\n    render() {\r\n        try {\r\n            var traits = [];\r\n            var actions = [];\r\n            var legendaryActions = [];\r\n            var lairActions = [];\r\n            var regionalEffects = [];\r\n\r\n            for (var n = 0; n !== this.props.combatant.traits.length; ++n) {\r\n                var action = this.props.combatant.traits[n];\r\n                var item = (\r\n                    <TraitPanel\r\n                        key={action.id}\r\n                        trait={action}\r\n                        mode={this.props.mode}\r\n                        changeTrait={(action, type, value) => this.props.changeTrait(action, type, value)}\r\n                        removeTrait={action => this.props.removeTrait(action)}\r\n                        copyTrait={action => this.props.copyTrait(action)}\r\n                    />\r\n                );\r\n\r\n                switch (action.type) {\r\n                    case \"trait\":\r\n                        traits.push(item);\r\n                        break;\r\n                    case \"action\":\r\n                        actions.push(item);\r\n                        break;\r\n                    case \"legendary\":\r\n                        legendaryActions.push(item);\r\n                        break;\r\n                    case \"lair\":\r\n                        lairActions.push(item);\r\n                        break;\r\n                    case \"regional\":\r\n                        regionalEffects.push(item);\r\n                        break;\r\n                    default:\r\n                        // Do nothing\r\n                        break;\r\n                }\r\n            }\r\n\r\n            if (this.props.mode === 'edit') {\r\n                traits.push(\r\n                    <button key=\"add\" onClick={() => this.props.addTrait(\"trait\")}>add a new trait</button>\r\n                );\r\n                actions.push(\r\n                    <button key=\"add\" onClick={() => this.props.addTrait(\"action\")}>add a new action</button>\r\n                );\r\n                legendaryActions.push(\r\n                    <button key=\"add\" onClick={() => this.props.addTrait(\"legendary\")}>add a new legendary action</button>\r\n                );\r\n                lairActions.push(\r\n                    <button key=\"add\" onClick={() => this.props.addTrait(\"lair\")}>add a new lair action</button>\r\n                );\r\n                regionalEffects.push(\r\n                    <button key=\"add\" onClick={() => this.props.addTrait(\"regional\")}>add a new regional effect</button>\r\n                );\r\n\r\n                return (\r\n                    <div className=\"row collapse\">\r\n                        <div className=\"columns small-4 medium-4 large-4 list-column\">\r\n                            <div className=\"section subheading\">traits</div>\r\n                            {traits}\r\n                        </div>\r\n                        <div className=\"columns small-4 medium-4 large-4 list-column\">\r\n                            <div className=\"section subheading\">actions</div>\r\n                            {actions}\r\n                        </div>\r\n                        <div className=\"columns small-4 medium-4 large-4 list-column\">\r\n                            <div className=\"section subheading\">legendary actions</div>\r\n                            {legendaryActions}\r\n                            <div className=\"section subheading\">lair actions</div>\r\n                            {lairActions}\r\n                            <div className=\"section subheading\">regional effects</div>\r\n                            {regionalEffects}\r\n                        </div>\r\n                    </div>\r\n                );    \r\n            }\r\n\r\n            return (\r\n                <div>\r\n                    <div style={{ display: traits.length > 0 ? \"\" : \"none\" }}>\r\n                        <div className=\"section subheading\">traits</div>\r\n                        {traits}\r\n                    </div>\r\n                    <div style={{ display: actions.length > 0 ? \"\" : \"none\" }}>\r\n                        <div className=\"section subheading\">actions</div>\r\n                        {actions}\r\n                    </div>\r\n                    <div style={{ display: legendaryActions.length > 0 ? \"\" : \"none\" }}>\r\n                        <div className=\"section subheading\">legendary actions</div>\r\n                        {legendaryActions}\r\n                    </div>\r\n                    <div style={{ display: lairActions.length > 0 ? \"\" : \"none\" }}>\r\n                        <div className=\"section subheading\">lair actions</div>\r\n                        {lairActions}\r\n                    </div>\r\n                    <div style={{ display: regionalEffects.length > 0 ? \"\" : \"none\" }}>\r\n                        <div className=\"section subheading\">regional effects</div>\r\n                        {regionalEffects}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    };\r\n}\r\n\r\ninterface TraitPanelProps {\r\n    trait: Trait;\r\n    mode: 'view' | 'edit' | 'template';\r\n    changeTrait: (trait: Trait, field: 'name' | 'usage' | 'text', value: string) => void;\r\n    copyTrait: (trait: Trait) => void;\r\n    removeTrait: (trait: Trait) => void;\r\n}\r\n\r\nclass TraitPanel extends React.Component<TraitPanelProps> {\r\n    render() {\r\n        try {\r\n            var heading = this.props.trait.name || \"unnamed \" + utils.traitType(this.props.trait.type);\r\n            if (this.props.trait.usage) {\r\n                heading += \" (\" + this.props.trait.usage + \")\";\r\n            }\r\n\r\n            switch (this.props.mode) {\r\n                case 'view':\r\n                    return (\r\n                        <div key={this.props.trait.id} className=\"section trait\">\r\n                            <b>{heading}</b> {this.props.trait.text}\r\n                        </div>\r\n                    );\r\n                case 'edit':\r\n                    var details = (\r\n                        <div className=\"section\">\r\n                            <input type=\"text\" placeholder=\"name\" value={this.props.trait.name} onChange={event => this.props.changeTrait(this.props.trait, \"name\", event.target.value)} />\r\n                            <input type=\"text\" placeholder=\"usage\" value={this.props.trait.usage} onChange={event => this.props.changeTrait(this.props.trait, \"usage\", event.target.value)} />\r\n                            <textarea placeholder=\"details\" value={this.props.trait.text} onChange={event => this.props.changeTrait(this.props.trait, \"text\", event.target.value)} />\r\n                            <div className=\"divider\"></div>\r\n                            <ConfirmButton text=\"delete\" callback={() => this.props.removeTrait(this.props.trait)} />\r\n                        </div>\r\n                    );\r\n        \r\n                    return (\r\n                        <Expander\r\n                            text={this.props.trait.name || \"unnamed \" + utils.traitType(this.props.trait.type)}\r\n                            content={details}\r\n                        />\r\n                    );\r\n                case 'template':\r\n                    return (\r\n                        <div key={this.props.trait.id} className=\"section trait\">\r\n                            <b>{heading}</b> {this.props.trait.text}\r\n                            <button onClick={() => this.props.copyTrait(this.props.trait)}>copy</button>\r\n                        </div>\r\n                    );\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport * as utils from '../../utils';\r\n\r\nimport { Combatant, Condition, Combat } from '../../models/models';\r\n\r\nimport Spin from '../controls/spin';\r\nimport Expander from '../controls/expander';\r\n\r\ninterface Props {\r\n    combatant: Combatant;\r\n    combat: Combat;\r\n    nudgeConditionValue: (condition: Condition, field: string, delta: number) => void;\r\n    addCondition: () => void;\r\n    editCondition: (condition: Condition) => void;\r\n    removeCondition: (conditionID: string) => void;\r\n}\r\n\r\nexport default class ConditionsPanel extends React.Component<Props> {\r\n    render() {\r\n        try {\r\n            var conditions = [];\r\n            if (this.props.combatant.conditions) {\r\n                for (var n = 0; n !== this.props.combatant.conditions.length; ++n) {\r\n                    var condition = this.props.combatant.conditions[n];\r\n                    conditions.push(\r\n                        <ConditionPanel\r\n                            key={n}\r\n                            condition={condition}\r\n                            combat={this.props.combat}\r\n                            nudgeConditionValue={(condition, type, delta) => this.props.nudgeConditionValue(condition, type, delta)}\r\n                            editCondition={condition => this.props.editCondition(condition)}\r\n                            removeCondition={conditionID => this.props.removeCondition(conditionID)}\r\n                        />\r\n                    );\r\n                }\r\n            }\r\n\r\n            return (\r\n                <div className=\"section\">\r\n                    {conditions}\r\n                    <button onClick={() => this.props.addCondition()}>add a condition</button>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    };\r\n}\r\n\r\ninterface ConditionPanelProps {\r\n    condition: Condition;\r\n    combat: Combat;\r\n    nudgeConditionValue: (condition: Condition, field: string, delta: number) => void;\r\n    editCondition: (condition: Condition) => void;\r\n    removeCondition: (conditionID: string) => void;\r\n}\r\n\r\nclass ConditionPanel extends React.Component<ConditionPanelProps> {\r\n    render() {\r\n        try {\r\n            var name: string = this.props.condition.name || \"condition\";\r\n            if (this.props.condition.name === \"exhaustion\") {\r\n                name += \" (\" + this.props.condition.level + \")\";\r\n            }\r\n            if ((this.props.condition.name === \"custom\") && (this.props.condition.text !== null)) {\r\n                name = this.props.condition.text;\r\n            }\r\n\r\n            if (this.props.condition.duration !== null) {\r\n                name += \" \" + utils.conditionDurationText(this.props.condition, this.props.combat);\r\n            }\r\n\r\n            var description = [];\r\n            if (this.props.condition.name === \"exhaustion\") {\r\n                description.push(\r\n                    <div key=\"level\" className=\"section\">\r\n                        <Spin\r\n                            source={this.props.condition}\r\n                            name=\"level\"\r\n                            label=\"level\"\r\n                            nudgeValue={delta => this.props.nudgeConditionValue(this.props.condition, \"level\", delta)}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n            var text = utils.conditionText(this.props.condition);\r\n            for (var n = 0; n !== text.length; ++n) {\r\n                description.push(<div key={n} className=\"section\">{text[n]}</div>);\r\n            }\r\n\r\n            return (\r\n                <Expander\r\n                    text={name}\r\n                    content={(\r\n                        <div>\r\n                            {description}\r\n                            <div className=\"divider\"></div>\r\n                            <button onClick={() => this.props.editCondition(this.props.condition)}>edit</button>\r\n                            <button onClick={() => this.props.removeCondition(this.props.condition.id)}>remove</button>\r\n                        </div>\r\n                    )}\r\n                />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport * as utils from '../../utils';\r\n\r\nimport { Monster, Combatant, EncounterSlot, Combat, Trait, EncounterWave, MonsterGroup, Condition, Encounter } from '../../models/models';\r\n\r\nimport Expander from '../controls/expander';\r\nimport Dropdown from '../controls/dropdown';\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport Radial from '../controls/radial';\r\nimport Spin from '../controls/spin';\r\nimport InfoCard from './info-card';\r\nimport AbilityScorePanel from '../panels/ability-score-panel';\r\nimport TraitsPanel from '../panels/traits-panel';\r\nimport ConditionsPanel from '../panels/conditions-panel';\r\n\r\nimport arrow from \"../../resources/images/down-arrow.svg\";\r\n\r\ninterface Props {\r\n    combatant: Monster | (Monster & Combatant);\r\n    mode: string;\r\n    library: MonsterGroup[];\r\n    changeValue: (monster: Monster, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, delta: number) => void;\r\n    // Library\r\n    editMonster: (monster: Monster) => void;\r\n    removeMonster: (monster: Monster) => void;\r\n    cloneMonster: (monster: Monster, name: string) => void;\r\n    moveToGroup: (monster: Monster, group: string) => void;\r\n    copyTrait: (trait: Trait) => void;\r\n    // Encounter builder\r\n    encounter: Encounter;\r\n    slot: EncounterSlot;\r\n    addEncounterSlot: (monster: Monster, waveID: string | null) => void;\r\n    removeEncounterSlot: (slot: EncounterSlot) => void;\r\n    // Combat\r\n    combat: Combat;\r\n    makeCurrent: (combatant: Combatant) => void;\r\n    makeActive: (combatant: Combatant) => void;\r\n    makeDefeated: (combatant: Combatant) => void;\r\n    endTurn: (combatant: Combatant) => void;\r\n    mapAdd: (combatant: Combatant) => void;\r\n    mapMove: (combatant: Combatant, dir: string) => void;\r\n    mapRemove: (combatant: Combatant) => void;\r\n    removeCombatant: (combatant: Combatant) => void;\r\n    changeHP: (combatant: Combatant, hp: number, tempHP: number) => void;\r\n    addCondition: (combatant: Combatant) => void;\r\n    editCondition: (combatant: Combatant, condition: Condition) => void;\r\n    removeCondition: (combatant: Combatant, conditionID: string) => void;\r\n    nudgeConditionValue: (condition: Condition, field: string, delta: number) => void;\r\n}\r\n\r\ninterface State {\r\n    showDetails: boolean;\r\n    cloneName: string;\r\n    damageOrHealing: number;\r\n}\r\n\r\nexport default class MonsterCard extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        library: null,\r\n        changeValue: null,\r\n        nudgeValue: null,\r\n        editMonster: null,\r\n        removeMonster: null,\r\n        cloneMonster: null,\r\n        moveToGroup: null,\r\n        copyTrait: null,\r\n        encounter: null,\r\n        slot: null,\r\n        addEncounterSlot: null,\r\n        removeEncounterSlot: null,\r\n        combat: null,\r\n        makeCurrent: null,\r\n        makeActive: null,\r\n        makeDefeated: null,\r\n        endTurn: null,\r\n        mapAdd: null,\r\n        mapMove: null,\r\n        mapRemove: null,\r\n        removeCombatant: null,\r\n        changeHP: null,\r\n        addCondition: null,\r\n        editCondition: null,\r\n        removeCondition: null,\r\n        nudgeConditionValue: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showDetails: false,\r\n            cloneName: props.combatant.name + \" copy\",\r\n            damageOrHealing: 0\r\n        };\r\n    }\r\n\r\n    setCloneName(cloneName: string) {\r\n        this.setState({\r\n            cloneName: cloneName\r\n        });\r\n    }\r\n\r\n    toggleDetails() {\r\n        this.setState({\r\n            showDetails: !this.state.showDetails\r\n        })\r\n    }\r\n\r\n    setDamage(value: number) {\r\n        this.setState({\r\n            damageOrHealing: value\r\n        });\r\n    }\r\n\r\n    nudgeDamage(delta: number) {\r\n        this.setState({\r\n            damageOrHealing: Math.max(this.state.damageOrHealing + delta, 0)\r\n        });\r\n    }\r\n\r\n    heal() {\r\n        var combatant = this.props.combatant as Combatant;\r\n\r\n        var hp = (combatant.hp ? combatant.hp : 0) + this.state.damageOrHealing;\r\n        hp = Math.min(hp, this.props.combatant.hpMax);\r\n\r\n        this.setState({\r\n            damageOrHealing: 0\r\n        }, () => {\r\n            this.props.changeHP(combatant, hp, this.props.combatant.hpTemp);\r\n        });\r\n    }\r\n\r\n    damage() {\r\n        var combatant = this.props.combatant as Combatant;\r\n\r\n        var hp = (combatant.hp ? combatant.hp : 0);\r\n        var temp = this.props.combatant.hpTemp;\r\n\r\n        var damage = this.state.damageOrHealing;\r\n\r\n        // Take damage off temp HP first\r\n        var val = Math.min(damage, temp);\r\n        damage -= val;\r\n        temp -= val;\r\n\r\n        // Take the rest off HP\r\n        hp -= damage;\r\n        hp = Math.max(hp, 0);\r\n\r\n        this.setState({\r\n            damageOrHealing: 0\r\n        }, () => {\r\n            this.props.changeHP(combatant, hp, temp);\r\n        });\r\n    }\r\n\r\n    description() {\r\n        var sizeAndType = (this.props.combatant.size + \" \" + this.props.combatant.category).toLowerCase();\r\n        if (this.props.combatant.tag) {\r\n            sizeAndType += \" (\" + this.props.combatant.tag.toLowerCase() + \")\";\r\n        }\r\n        sizeAndType += \", \";\r\n\r\n        var align = \"\";\r\n        if (this.props.combatant.alignment) {\r\n            align = this.props.combatant.alignment.toLowerCase() + \", \";\r\n        }\r\n\r\n        var cr = \"cr \" + utils.challenge(this.props.combatant.challenge);\r\n\r\n        return sizeAndType + align + cr;\r\n    }\r\n\r\n    monsterIsInWave(wave: EncounterWave) {\r\n        return wave.slots.some(s => {\r\n            var group = this.props.library.find(g => g.monsters.includes(this.props.combatant));\r\n            return !!group && (s.monsterGroupName === group.name) && (s.monsterName === this.props.combatant.name)\r\n        });\r\n    }\r\n\r\n    render() {\r\n        try {\r\n            var options = [];\r\n            if (this.props.mode.indexOf(\"no-buttons\") === -1) {\r\n                if (this.props.mode.indexOf(\"view\") !== -1) {\r\n                    if (this.props.mode.indexOf(\"editable\") !== -1) {\r\n                        options.push(\r\n                            <button key=\"edit\" onClick={() => this.props.editMonster(this.props.combatant)}>edit monster</button>\r\n                        );\r\n\r\n                        options.push(\r\n                            <Expander\r\n                                key=\"clone\"\r\n                                text=\"clone monster\"\r\n                                content={\r\n                                    <div>\r\n                                        <input type=\"text\" placeholder=\"monster name\" value={this.state.cloneName} onChange={event => this.setCloneName(event.target.value)} />\r\n                                        <button onClick={() => this.props.cloneMonster(this.props.combatant, this.state.cloneName)}>create copy</button>\r\n                                    </div>\r\n                                }\r\n                            />\r\n                        );\r\n\r\n                        var groupOptions: { id: string, text: string }[] = [];\r\n                        this.props.library.forEach(group => {\r\n                            if (group.monsters.indexOf(this.props.combatant) === -1) {\r\n                                groupOptions.push({\r\n                                    id: group.id,\r\n                                    text: group.name\r\n                                });\r\n                            }\r\n                        });\r\n                        options.push(\r\n                            <Dropdown\r\n                                key=\"move\"\r\n                                options={groupOptions}\r\n                                placeholder=\"move to group...\"\r\n                                select={optionID => this.props.moveToGroup(this.props.combatant, optionID)}\r\n                            />\r\n                        );\r\n\r\n                        options.push(<ConfirmButton key=\"remove\" text=\"delete monster\" callback={() => this.props.removeMonster(this.props.combatant)} />);\r\n                    }\r\n                    if (this.props.mode.indexOf(\"encounter\") !== -1) {\r\n                        if (this.props.slot) {\r\n                            // This card is in an encounter or a wave\r\n                            options.push(<button key=\"remove\" onClick={() => this.props.removeEncounterSlot(this.props.slot)}>remove from encounter</button>);\r\n                        } else {\r\n                            var canAdd = false;\r\n                            // This card is in the library list\r\n                            if (!this.monsterIsInWave(this.props.encounter)) {\r\n                                options.push(<button key=\"add encounter\" onClick={() => this.props.addEncounterSlot(this.props.combatant, null)}>add to encounter</button>);\r\n                                canAdd = true;\r\n                            }\r\n                            this.props.encounter.waves.forEach(wave => {\r\n                                if (!this.monsterIsInWave(wave)) {\r\n                                    options.push(<button key={\"add \" + wave.id} onClick={() => this.props.addEncounterSlot(this.props.combatant, wave.id)}>add to {wave.name}</button>);\r\n                                    canAdd = true;\r\n                                }\r\n                            });\r\n                            // If we can't add it anywhere, don't show it\r\n                            if (!canAdd) {\r\n                                return (\r\n                                    <InfoCard\r\n                                        getHeading={() => {\r\n                                            return (\r\n                                                <div className=\"heading\">\r\n                                                    <div className=\"title\">{this.props.combatant.name}</div>\r\n                                                </div>\r\n                                            );\r\n                                        }}\r\n                                        getContent={() => {\r\n                                            return (\r\n                                                <div className=\"section centered\">\r\n                                                    <i>this monster is already part of this encounter</i>\r\n                                                </div>\r\n                                            );\r\n                                        }}\r\n                                    />\r\n                                );\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (this.props.mode.indexOf(\"combat\") !== -1) {\r\n                    var combatant = this.props.combatant as Combatant;\r\n\r\n                    if (this.props.mode.indexOf(\"tactical\") !== -1) {\r\n                        if (this.props.mode.indexOf(\"on-map\") !== -1) {\r\n                            options.push(\r\n                                <div key=\"mapMove\" className=\"section centered\">\r\n                                    <Radial\r\n                                        direction=\"eight\"\r\n                                        click={dir => this.props.mapMove(combatant, dir)}\r\n                                    />\r\n                                </div>\r\n                            );\r\n                            options.push(\r\n                                <Spin\r\n                                    key=\"altitude\"\r\n                                    source={this.props.combatant}\r\n                                    name=\"altitude\"\r\n                                    label=\"altitude\"\r\n                                    display={value => value + \" ft.\"}\r\n                                    nudgeValue={delta => this.props.nudgeValue(this.props.combatant, \"altitude\", delta * 5)}\r\n                                />\r\n                            );\r\n                            options.push(<button key=\"mapRemove\" onClick={() => this.props.mapRemove(combatant)}>remove from map</button>);\r\n                        }\r\n                        if (this.props.mode.indexOf(\"off-map\") !== -1) {\r\n                            options.push(<button key=\"mapAdd\" onClick={() => this.props.mapAdd(combatant)}>add to map</button>);\r\n                        }\r\n                        options.push(<div key=\"tactical-div\" className=\"divider\"></div>);\r\n                    }\r\n                    if (combatant.pending && !combatant.active && !combatant.defeated) {\r\n                        options.push(<ConfirmButton key=\"remove\" text=\"remove from encounter\" callback={() => this.props.removeCombatant(combatant)} />);\r\n                    }\r\n                    if (!combatant.pending && combatant.active && !combatant.defeated) {\r\n                        if (combatant.current) {\r\n                            options.push(<button key=\"endTurn\" onClick={() => this.props.endTurn(combatant)}>end turn</button>);\r\n                            options.push(<button key=\"makeDefeated\" onClick={() => this.props.makeDefeated(combatant)}>mark as defeated and end turn</button>);\r\n                        } else {\r\n                            options.push(<button key=\"makeCurrent\" onClick={() => this.props.makeCurrent(combatant)}>start turn</button>);\r\n                            options.push(<button key=\"makeDefeated\" onClick={() => this.props.makeDefeated(combatant)}>mark as defeated</button>);\r\n                            options.push(<ConfirmButton key=\"remove\" text=\"remove from encounter\" callback={() => this.props.removeCombatant(combatant)} />);\r\n                        }\r\n                    }\r\n                    if (!combatant.pending && !combatant.active && combatant.defeated) {\r\n                        options.push(<button key=\"makeActive\" onClick={() => this.props.makeActive(combatant)}>mark as active</button>);\r\n                        options.push(<ConfirmButton key=\"remove\" text=\"remove from encounter\" callback={() => this.props.removeCombatant(combatant)} />);\r\n                    }\r\n                    options.push(\r\n                        <Expander\r\n                            key=\"rename\"\r\n                            text=\"change name\"\r\n                            content={(\r\n                                <div>\r\n                                    <input type=\"text\" value={combatant.displayName} onChange={event => this.props.changeValue(this.props.combatant, \"displayName\", event.target.value)} />\r\n                                </div>\r\n                            )}\r\n                        />\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf(\"template\") !== -1) {\r\n                    // None\r\n                }\r\n            }\r\n\r\n            var stats = null;\r\n            if (this.props.mode.indexOf(\"view\") !== -1) {\r\n                var slotSection = null;\r\n                if (this.props.slot) {\r\n                    slotSection = (\r\n                        <div>\r\n                            <div className=\"divider\"></div>\r\n                            <Spin\r\n                                source={this.props.slot}\r\n                                name=\"count\"\r\n                                label=\"count\"\r\n                                nudgeValue={delta => this.props.nudgeValue(this.props.slot, \"count\", delta)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                var details = null;\r\n                if (this.state.showDetails) {\r\n                    details = (\r\n                        <div>\r\n                            <div className=\"divider\"></div>\r\n                            <div className=\"section\">\r\n                                <b>ac</b> {this.props.combatant.ac}\r\n                            </div>\r\n                            <div className=\"section\" style={{ display: this.props.combatant.hpMax !== 0 ? \"\" : \"none\" }}>\r\n                                <b>hp</b> {this.props.combatant.hitDice !== 0 ? this.props.combatant.hpMax + \" (\" + this.props.combatant.hitDice + \"d\" + utils.hitDieType(this.props.combatant.size) + \")\" : this.props.combatant.hpMax}\r\n                            </div>\r\n                            <div className=\"section\" style={{ display: this.props.combatant.speed !== \"\" ? \"\" : \"none\" }}>\r\n                                <b>speed</b> {this.props.combatant.speed}\r\n                            </div>\r\n                            <div className=\"section\">\r\n                                <AbilityScorePanel combatant={this.props.combatant} />\r\n                            </div>\r\n                            <div className=\"section\" style={{ display: this.props.combatant.savingThrows !== \"\" ? \"\" : \"none\" }}>\r\n                                <b>saving throws</b> {this.props.combatant.savingThrows}\r\n                            </div>\r\n                            <div className=\"section\" style={{ display: this.props.combatant.skills !== \"\" ? \"\" : \"none\" }}>\r\n                                <b>skills</b> {this.props.combatant.skills}\r\n                            </div>\r\n                            <div className=\"section\" style={{ display: this.props.combatant.damage.resist !== \"\" ? \"\" : \"none\" }}>\r\n                                <b>damage resistances</b> {this.props.combatant.damage.resist}\r\n                            </div>\r\n                            <div className=\"section\" style={{ display: this.props.combatant.damage.vulnerable !== \"\" ? \"\" : \"none\" }}>\r\n                                <b>damage vulnerabilities</b> {this.props.combatant.damage.vulnerable}\r\n                            </div>\r\n                            <div className=\"section\" style={{ display: this.props.combatant.damage.immune !== \"\" ? \"\" : \"none\" }}>\r\n                                <b>damage immunities</b> {this.props.combatant.damage.immune}\r\n                            </div>\r\n                            <div className=\"section\" style={{ display: this.props.combatant.conditionImmunities !== \"\" ? \"\" : \"none\" }}>\r\n                                <b>condition immunities</b> {this.props.combatant.conditionImmunities}\r\n                            </div>\r\n                            <div className=\"section\" style={{ display: this.props.combatant.senses !== \"\" ? \"\" : \"none\" }}>\r\n                                <b>senses</b> {this.props.combatant.senses}\r\n                            </div>\r\n                            <div className=\"section\" style={{ display: this.props.combatant.languages !== \"\" ? \"\" : \"none\" }}>\r\n                                <b>languages</b> {this.props.combatant.languages}\r\n                            </div>\r\n                            <div className=\"section\" style={{ display: this.props.combatant.equipment !== \"\" ? \"\" : \"none\" }}>\r\n                                <b>equipment</b> {this.props.combatant.equipment}\r\n                            </div>\r\n                            <div className=\"divider\"></div>\r\n                            <TraitsPanel combatant={this.props.combatant} />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                stats = (\r\n                    <div className=\"stats\">\r\n                        <div className=\"section centered\">\r\n                            <i>{this.description()}</i>\r\n                        </div>\r\n                        {slotSection}\r\n                        {details}\r\n                    </div>\r\n                );\r\n            }\r\n            if (this.props.mode.indexOf(\"combat\") !== -1) {\r\n                stats = (\r\n                    <div className=\"stats\">\r\n                        <div className=\"section centered\">\r\n                            <i>{this.description()}</i>\r\n                        </div>\r\n                        <div className=\"divider\"></div>\r\n                        <Spin\r\n                            source={this.props.combatant}\r\n                            name=\"hp\"\r\n                            label=\"hit points\"\r\n                            factors={[1, 10]}\r\n                            nudgeValue={delta => this.props.nudgeValue(this.props.combatant, \"hp\", delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant}\r\n                            name=\"hpTemp\"\r\n                            label=\"temp hp\"\r\n                            factors={[1, 10]}\r\n                            nudgeValue={delta => this.props.nudgeValue(this.props.combatant, \"hpTemp\", delta)}\r\n                        />\r\n                        <div className=\"divider\"></div>\r\n                        <Spin\r\n                            source={this.state}\r\n                            name=\"damage\"\r\n                            factors={[1, 10]}\r\n                            nudgeValue={delta => this.nudgeDamage(delta)}\r\n                        />\r\n                        <div className={this.state.damageOrHealing > 0 ? \"\" : \"disabled\"}>\r\n                            <button className=\"damage-btn\" onClick={() => this.heal()}>heal</button>\r\n                            <button className=\"damage-btn\" onClick={() => this.setDamage(0)}>reset</button>\r\n                            <button className=\"damage-btn\" onClick={() => this.damage()}>damage</button>\r\n                        </div>\r\n                        <div className=\"section\" style={{ display: this.props.combatant.damage.resist !== \"\" ? \"\" : \"none\" }}>\r\n                            <b>damage resistances</b> {this.props.combatant.damage.resist}\r\n                        </div>\r\n                        <div className=\"section\" style={{ display: this.props.combatant.damage.vulnerable !== \"\" ? \"\" : \"none\" }}>\r\n                            <b>damage vulnerabilities</b> {this.props.combatant.damage.vulnerable}\r\n                        </div>\r\n                        <div className=\"section\" style={{ display: this.props.combatant.damage.immune !== \"\" ? \"\" : \"none\" }}>\r\n                            <b>damage immunities</b> {this.props.combatant.damage.immune}\r\n                        </div>\r\n                        <div className=\"divider\"></div>\r\n                        <div className=\"section\">\r\n                            <AbilityScorePanel combatant={this.props.combatant} />\r\n                        </div>\r\n                        <div className=\"section\" style={{ display: this.props.combatant.ac !== 0 ? \"\" : \"none\" }}>\r\n                            <b>ac</b> {this.props.combatant.ac}\r\n                        </div>\r\n                        <div className=\"section\" style={{ display: this.props.combatant.savingThrows !== \"\" ? \"\" : \"none\" }}>\r\n                            <b>saving throws</b> {this.props.combatant.savingThrows}\r\n                        </div>\r\n                        <div className=\"section\" style={{ display: this.props.combatant.skills !== \"\" ? \"\" : \"none\" }}>\r\n                            <b>skills</b> {this.props.combatant.skills}\r\n                        </div>\r\n                        <div className=\"section\" style={{ display: this.props.combatant.speed !== \"\" ? \"\" : \"none\" }}>\r\n                            <b>speed</b> {this.props.combatant.speed}\r\n                        </div>\r\n                        <div className=\"section\" style={{ display: this.props.combatant.senses !== \"\" ? \"\" : \"none\" }}>\r\n                            <b>senses</b> {this.props.combatant.senses}\r\n                        </div>\r\n                        <div className=\"section\" style={{ display: this.props.combatant.languages !== \"\" ? \"\" : \"none\" }}>\r\n                            <b>languages</b> {this.props.combatant.languages}\r\n                        </div>\r\n                        <div className=\"section\" style={{ display: this.props.combatant.equipment !== \"\" ? \"\" : \"none\" }}>\r\n                            <b>equipment</b> {this.props.combatant.equipment}\r\n                        </div>\r\n                        <div className=\"divider\"></div>\r\n                        <TraitsPanel combatant={this.props.combatant} />\r\n                        <div className=\"divider\"></div>\r\n                        <div className=\"section subheading\">\r\n                            conditions\r\n                        </div>\r\n                        <div className=\"section\" style={{ display: this.props.combatant.conditionImmunities !== \"\" ? \"\" : \"none\" }}>\r\n                            <b>condition immunities</b> {this.props.combatant.conditionImmunities}\r\n                        </div>\r\n                        <ConditionsPanel\r\n                            combatant={this.props.combatant as Combatant}\r\n                            combat={this.props.combat}\r\n                            addCondition={() => this.props.addCondition(this.props.combatant as Combatant)}\r\n                            editCondition={condition => this.props.editCondition(this.props.combatant as Combatant, condition)}\r\n                            removeCondition={conditionID => this.props.removeCondition(this.props.combatant as Combatant, conditionID)}\r\n                            nudgeConditionValue={(condition, type, delta) => this.props.nudgeConditionValue(condition, type, delta)}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n            if (this.props.mode.indexOf(\"template\") !== -1) {\r\n                if (this.props.mode.indexOf(\"overview\") !== -1) {\r\n                    stats = (\r\n                        <div>\r\n                            <div className=\"section centered\">\r\n                                <i>{this.description()}</i>\r\n                            </div>\r\n                            <div className=\"divider\"></div>\r\n                            <div className=\"section\">\r\n                                <b>speed</b> {this.props.combatant.speed || \"-\"}\r\n                            </div>\r\n                            <div className=\"section\">\r\n                                <b>senses</b> {this.props.combatant.senses || \"-\"}\r\n                            </div>\r\n                            <div className=\"section\">\r\n                                <b>languages</b> {this.props.combatant.languages || \"-\"}\r\n                            </div>\r\n                            <div className=\"section\">\r\n                                <b>equipment</b> {this.props.combatant.equipment || \"-\"}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf(\"abilities\") !== -1) {\r\n                    stats = (\r\n                        <div>\r\n                            <div className=\"section\">\r\n                                <AbilityScorePanel combatant={this.props.combatant} />\r\n                            </div>\r\n                            <div className=\"section\">\r\n                                <b>saving throws</b> {this.props.combatant.savingThrows || \"-\"}\r\n                            </div>\r\n                            <div className=\"section\">\r\n                                <b>skills</b> {this.props.combatant.skills || \"-\"}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf(\"combat\") !== -1) {\r\n                    stats = (\r\n                        <div>\r\n                            <div className=\"section\">\r\n                                <b>ac</b> {this.props.combatant.ac}\r\n                            </div>\r\n                            <div className=\"section\">\r\n                                <b>hp</b> {this.props.combatant.hitDice !== 0 ? this.props.combatant.hpMax + \" (\" + this.props.combatant.hitDice + \"d\" + utils.hitDieType(this.props.combatant.size) + \")\" : this.props.combatant.hpMax}\r\n                            </div>\r\n                            <div className=\"section\">\r\n                                <b>damage immunity</b> {this.props.combatant.damage.immune || \"-\"}\r\n                            </div>\r\n                            <div className=\"section\">\r\n                                <b>damage resistance</b> {this.props.combatant.damage.resist || \"-\"}\r\n                            </div>\r\n                            <div className=\"section\">\r\n                                <b>damage vulnerability</b> {this.props.combatant.damage.vulnerable || \"-\"}\r\n                            </div>\r\n                            <div className=\"section\">\r\n                                <b>condition immunities</b> {this.props.combatant.conditionImmunities || \"-\"}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf(\"actions\") !== -1) {\r\n                    stats = (\r\n                        <TraitsPanel\r\n                            combatant={this.props.combatant}\r\n                            mode='template'\r\n                            copyTrait={trait => this.props.copyTrait(trait)}\r\n                        />\r\n                    );\r\n                }\r\n            }\r\n\r\n            var toggle = null;\r\n            if (this.props.mode.indexOf(\"combat\") !== -1) {\r\n                // Don't show toggle button for combatant\r\n            } else if (this.props.mode.indexOf(\"template\") !== -1) {\r\n                // Don't show toggle button for template\r\n            } else {\r\n                var imageStyle = this.state.showDetails ? \"image rotate\" : \"image\";\r\n                toggle = <img className={imageStyle} src={arrow} alt=\"arrow\" onClick={() => this.toggleDetails()} />\r\n            }\r\n\r\n            return (\r\n                <div className=\"card monster\">\r\n                    <div className=\"heading\">\r\n                        <div className=\"title\">{(this.props.combatant as Combatant ? (this.props.combatant as Combatant).displayName : null) || this.props.combatant.name || \"unnamed monster\"}</div>\r\n                        {toggle}\r\n                    </div>\r\n                    <div className=\"card-content\">\r\n                        {stats}\r\n                        <div style={{ display: options.length > 0 ? \"\" : \"none\" }}>\r\n                            <div className=\"divider\"></div>\r\n                            <div className=\"section\">{options}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport * as utils from '../../utils';\r\n\r\nimport { MonsterGroup, Monster } from '../../models/models';\r\n\r\nimport MonsterLibraryCard from '../cards/information/monster-library-card';\r\nimport MonsterGroupListItem from '../list-items/monster-group-list-item';\r\nimport MonsterGroupCard from '../cards/monster-group-card';\r\nimport MonsterCard from '../cards/monster-card';\r\nimport InfoCard from '../cards/info-card';\r\nimport CardGroup from '../panels/card-group';\r\n\r\ninterface Props {\r\n    library: MonsterGroup[];\r\n    selection: MonsterGroup | null;\r\n    showHelp: boolean;\r\n    filter: string;\r\n    selectMonsterGroup: (group: MonsterGroup | null) => void;\r\n    addMonsterGroup: () => void;\r\n    removeMonsterGroup: () => void;\r\n    addMonster: () => void;\r\n    removeMonster: (monster: Monster) => void;\r\n    editMonster: (monster: Monster) => void;\r\n    cloneMonster: (monster: Monster, name: string) => void;\r\n    sortMonsters: () => void;\r\n    moveToGroup: (monster: Monster, groupID: string) => void;\r\n    changeValue: (source: any, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, value: number) => void;\r\n}\r\n\r\nexport default class MonsterLibraryScreen extends React.Component<Props> {\r\n    showMonsterGroup(group: MonsterGroup) {\r\n        var result = utils.match(this.props.filter, group.name);\r\n\r\n        if (!result) {\r\n            group.monsters.forEach(monster => {\r\n                result = utils.match(this.props.filter, monster.name) || result;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    render() {\r\n        try {\r\n            var help = null;\r\n            if (this.props.showHelp) {\r\n                help = (\r\n                    <MonsterLibraryCard />\r\n                );\r\n            }\r\n            \r\n            var listItems = [];\r\n            for (var n = 0; n !== this.props.library.length; ++n) {\r\n                var group = this.props.library[n];\r\n                if (this.showMonsterGroup(group)) {\r\n                    listItems.push(\r\n                        <MonsterGroupListItem\r\n                            key={group.id}\r\n                            group={group}\r\n                            filter={this.props.filter}\r\n                            selected={group === this.props.selection}\r\n                            setSelection={group => this.props.selectMonsterGroup(group)}\r\n                        />\r\n                    );\r\n                }\r\n            };\r\n\r\n            var cards = [];\r\n\r\n            if (this.props.selection) {\r\n                cards.push(\r\n                    <div className=\"column\" key=\"info\">\r\n                        <MonsterGroupCard\r\n                            selection={this.props.selection}\r\n                            filter={this.props.filter}\r\n                            addMonster={() => this.props.addMonster()}\r\n                            sortMonsters={() => this.props.sortMonsters()}\r\n                            changeValue={(type, value) => this.props.changeValue(this.props.selection, type, value)}\r\n                            removeMonsterGroup={() => this.props.removeMonsterGroup()}\r\n                        />\r\n                    </div>\r\n                );\r\n\r\n                var monsters = this.props.selection.monsters.filter(monster => {\r\n                    return utils.match(this.props.filter, monster.name);\r\n                });\r\n\r\n                if (monsters.length !== 0) {\r\n                    monsters.forEach(monster => {\r\n                        cards.push(\r\n                            <div className=\"column\" key={monster.id}>\r\n                                <MonsterCard\r\n                                    combatant={monster}\r\n                                    mode={\"view editable\"}\r\n                                    library={this.props.library}\r\n                                    changeValue={(monster, type, value) => this.props.changeValue(monster, type, value)}\r\n                                    nudgeValue={(monster, type, delta) => this.props.nudgeValue(monster, type, delta)}\r\n                                    moveToGroup={(monster, groupID) => this.props.moveToGroup(monster, groupID)}\r\n                                    removeMonster={monster => this.props.removeMonster(monster)}\r\n                                    editMonster={monster => this.props.editMonster(monster)}\r\n                                    cloneMonster={(monster, name) => this.props.cloneMonster(monster, name)}\r\n                                />\r\n                            </div>\r\n                        );\r\n                    });\r\n                } else {\r\n                    cards.push(\r\n                        <div className=\"column\" key=\"empty\">\r\n                            <InfoCard getContent={() => <div className=\"section\">no monsters</div>} />\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n\r\n            var name = undefined;\r\n            if (this.props.selection) {\r\n                name = this.props.selection.name;\r\n                if (!name) {\r\n                    name = \"unnamed group\";\r\n                }\r\n            }\r\n\r\n            return (\r\n                <div className=\"monster-library row collapse\">\r\n                    <div className=\"columns small-4 medium-4 large-3 scrollable list-column\">\r\n                        {help}\r\n                        <button onClick={() => this.props.addMonsterGroup()}>add a new monster group</button>\r\n                        {listItems}\r\n                    </div>\r\n                    <div className=\"columns small-8 medium-8 large-9 scrollable\">\r\n                        <CardGroup\r\n                            content={cards}\r\n                            heading={name}\r\n                            showClose={this.props.selection !== null}\r\n                            close={() => this.props.selectMonsterGroup(null)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\ninterface Props {\r\n    title: string;\r\n    getContent: () => (string | JSX.Element);\r\n}\r\n\r\nexport default class ErrorCard extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        title: null\r\n    };\r\n\r\n    render() {\r\n        try {\r\n            var heading = null;\r\n            if (this.props.title) {\r\n                heading = <div className=\"heading\"><div className=\"title\">{this.props.title}</div></div>;\r\n            }\r\n\r\n            var content = this.props.getContent();\r\n\r\n            return (\r\n                <div className=\"card error\">\r\n                    {heading}\r\n                    <div className=\"card-content\">\r\n                        {content}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}","export interface Party {\r\n    id: string;\r\n    name: string;\r\n    pcs: PC[];\r\n}\r\n\r\nexport interface PC {\r\n    id: string;\r\n    type: string;\r\n    active: boolean;\r\n    player: string;\r\n    name: string;\r\n    race: string;\r\n    classes: string;\r\n    background: string;\r\n    level: number;\r\n    languages: string;\r\n    passiveInsight: number;\r\n    passiveInvestigation: number;\r\n    passivePerception: number;\r\n    initiative: number;\r\n    url: string;\r\n}\r\n\r\nexport interface MonsterGroup {\r\n    id: string;\r\n    name: string;\r\n    monsters: Monster[];\r\n}\r\n\r\nexport interface Monster {\r\n    id: string;\r\n    type: string;\r\n    name: string;\r\n    size: string;\r\n    category: string;\r\n    tag: string;\r\n    alignment: string;\r\n    challenge: number;\r\n    abilityScores: {\r\n        str: number;\r\n        dex: number;\r\n        con: number;\r\n        int: number;\r\n        wis: number;\r\n        cha: number;\r\n    };\r\n    ac: number;\r\n    hpMax: number;\r\n    hpTemp: number;\r\n    hitDice: number;\r\n    damage: {\r\n        resist: string;\r\n        vulnerable: string;\r\n        immune: string;\r\n    };\r\n    savingThrows: string;\r\n    speed: string;\r\n    skills: string;\r\n    senses: string;\r\n    languages: string;\r\n    equipment: string;\r\n    traits: Trait[];\r\n    conditionImmunities: string;\r\n}\r\n\r\nexport interface Trait {\r\n    id: string;\r\n    name: string;\r\n    usage: string;\r\n    type: 'trait' | 'action' | 'legendary' | 'lair' | 'regional';\r\n    text: string;\r\n}\r\n\r\nexport interface Encounter {\r\n    id: string;\r\n    name: string;\r\n    slots: EncounterSlot[];\r\n    waves: EncounterWave[];\r\n}\r\n\r\nexport interface EncounterSlot {\r\n    id: string;\r\n    monsterGroupName: string;\r\n    monsterName: string;\r\n    count: number;\r\n}\r\n\r\nexport interface EncounterWave {\r\n    id: string;\r\n    name: string;\r\n    slots: EncounterSlot[];\r\n}\r\n\r\nexport interface MapFolio {\r\n    id: string;\r\n    name: string;\r\n    maps: Map[];\r\n}\r\n\r\nexport interface Map {\r\n    id: string;\r\n    name: string;\r\n    items: MapItem[];\r\n}\r\n\r\nexport interface MapItem {\r\n    id: string;\r\n    type: \"tile\" | \"pc\" | \"monster\";\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n    terrain: string | null;\r\n}\r\n\r\nexport interface CombatSetup {\r\n    partyID: string | null;\r\n    encounterID: string | null;\r\n    waveID: string | null;\r\n    folioID: string | null;\r\n    mapID: string | null;\r\n    monsterNames: { id: string, names: string[] }[];\r\n    encounterInitMode: 'manual' | 'individual' | 'group';\r\n}\r\n\r\nexport interface Combat {\r\n    id: string;\r\n    name: string;\r\n    encounterID: string | null;\r\n    combatants: ((Combatant & PC) | (Combatant & Monster))[];\r\n    map: Map | null;\r\n    round: number;\r\n    notifications: Notification[];\r\n    issues: string[];\r\n    timestamp: string | null;\r\n}\r\n\r\nexport interface Combatant {\r\n    id: string;\r\n    displayName: string;\r\n    current: boolean;\r\n    pending: boolean;\r\n    active: boolean;\r\n    defeated: boolean;\r\n    initiative: number | null;\r\n    hp: number | null;\r\n    conditions: Condition[];\r\n    altitude: number;\r\n}\r\n\r\nexport interface Notification {\r\n    id: string;\r\n    type: 'condition-save' | 'condition-end';\r\n    condition: Condition | null;\r\n    combatant: (Combatant & Monster) | null;\r\n}\r\n\r\nexport interface Condition {\r\n    id: string;\r\n    name: string;\r\n    level: number;\r\n    text: string | null;\r\n    duration: ConditionDurationSaves | ConditionDurationCombatant | ConditionDurationRounds | null;\r\n}\r\n\r\nexport interface ConditionDurationSaves {\r\n    type: 'saves';\r\n    count: number;\r\n    saveType: string; // TODO\r\n    saveDC: number;\r\n    point: 'start' | 'end';\r\n}\r\n\r\nexport interface ConditionDurationCombatant {\r\n    type: 'combatant';\r\n    point: 'start' | 'end';\r\n    combatantID: string | null;\r\n}\r\n\r\nexport interface ConditionDurationRounds {\r\n    type: 'rounds';\r\n    count: number;\r\n}\r\n\r\nexport const SIZE_TYPES = [\r\n    \"tiny\",\r\n    \"small\",\r\n    \"medium\",\r\n    \"large\",\r\n    \"huge\",\r\n    \"gargantuan\"\r\n];\r\n\r\nexport const CATEGORY_TYPES = [\r\n    \"aberration\",\r\n    \"beast\",\r\n    \"celestial\",\r\n    \"construct\",\r\n    \"dragon\",\r\n    \"elemental\",\r\n    \"fey\",\r\n    \"fiend\",\r\n    \"giant\",\r\n    \"humanoid\",\r\n    \"monstrosity\",\r\n    \"ooze\",\r\n    \"plant\",\r\n    \"undead\"\r\n];\r\n\r\nexport const TRAIT_TYPES = [\r\n    \"trait\",\r\n    \"action\",\r\n    \"legendary\",\r\n    \"lair\",\r\n    \"regional\"\r\n];\r\n\r\nexport const CONDITION_TYPES = [\r\n    \"blinded\",\r\n    \"charmed\",\r\n    \"deafened\",\r\n    \"exhaustion\",\r\n    \"frightened\",\r\n    \"grappled\",\r\n    \"incapacitated\",\r\n    \"invisible\",\r\n    \"paralyzed\",\r\n    \"petrified\",\r\n    \"poisoned\",\r\n    \"prone\",\r\n    \"restrained\",\r\n    \"stunned\",\r\n    \"unconscious\",\r\n    \"custom\"\r\n];\r\n\r\nexport const TERRAIN_TYPES = [\r\n    \"cavern\",\r\n    \"dirt\",\r\n    \"flagstone\",\r\n    \"floorboard\",\r\n    \"grassland\",\r\n    \"pit\",\r\n    \"sand\",\r\n    \"snow\",\r\n    \"water\"\r\n];","import React from 'react';\r\n\r\nimport * as utils from '../../utils';\r\nimport { CATEGORY_TYPES, SIZE_TYPES } from '../../models/models';\r\n\r\nimport Spin from '../controls/spin';\r\nimport Dropdown from '../controls/dropdown';\r\n\r\nimport arrow from \"../../resources/images/down-arrow.svg\";\r\n\r\ninterface Props {\r\n    filter: {\r\n        name: string,\r\n        challengeMin: number;\r\n        challengeMax: number;\r\n        category: string;\r\n        size: string;\r\n    };\r\n    changeValue: (type: 'name' | 'challengeMin' | 'challengeMax' | 'category' | 'size', value: any) => void;\r\n    nudgeValue: (type: 'challengeMin' | 'challengeMax', delta: number) => void;\r\n    resetFilter: () => void;\r\n}\r\n\r\ninterface State {\r\n    showAll: boolean;\r\n}\r\n\r\nexport default class FilterCard extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showAll: false\r\n        };\r\n    }\r\n\r\n    toggleAll() {\r\n        this.setState({\r\n            showAll: !this.state.showAll\r\n        });\r\n    }\r\n\r\n    render() {\r\n        try {\r\n            var sizes = [\"all sizes\"].concat(SIZE_TYPES);\r\n            var sizeOptions = sizes.map(size => { return { id: size, text: size }; });\r\n            \r\n            var categories = [\"all types\"].concat(CATEGORY_TYPES);\r\n            var catOptions = categories.map(cat => { return { id: cat, text: cat }; });\r\n\r\n            var content = null;\r\n            if (this.state.showAll) {\r\n                content = (\r\n                    <div>\r\n                        <div className=\"section\">\r\n                            <input type=\"text\" placeholder=\"name\" value={this.props.filter.name} onChange={event => this.props.changeValue(\"name\", event.target.value)} />\r\n                        </div>\r\n                        <Spin\r\n                            source={this.props.filter}\r\n                            name=\"challengeMin\"\r\n                            label=\"min cr\"\r\n                            display={value => utils.challenge(value)}\r\n                            nudgeValue={delta => this.props.nudgeValue(\"challengeMin\", delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.filter}\r\n                            name=\"challengeMax\"\r\n                            label=\"max cr\"\r\n                            display={value => utils.challenge(value)}\r\n                            nudgeValue={delta => this.props.nudgeValue(\"challengeMax\", delta)}\r\n                        />\r\n                        <Dropdown\r\n                            options={sizeOptions}\r\n                            placeholder=\"filter by size...\"\r\n                            selectedID={this.props.filter.size}\r\n                            select={optionID => this.props.changeValue(\"size\", optionID)}\r\n                        />\r\n                        <Dropdown\r\n                            options={catOptions}\r\n                            placeholder=\"filter by type...\"\r\n                            selectedID={this.props.filter.category}\r\n                            select={optionID => this.props.changeValue(\"category\", optionID)}\r\n                        />\r\n                        <div className=\"divider\"></div>\r\n                        <div className=\"section\">\r\n                            <button onClick={() => this.props.resetFilter()}>clear filter</button>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                var summary = \"\";\r\n                if (this.props.filter.size !== \"all sizes\") {\r\n                    summary += summary ? \" \" + this.props.filter.size : this.props.filter.size;\r\n                }\r\n                if (this.props.filter.category !== \"all types\") {\r\n                    summary += summary ? \" \" + this.props.filter.category : this.props.filter.category;\r\n                }\r\n                summary += \" monsters of cr \" + utils.challenge(this.props.filter.challengeMin) + \" to \" + utils.challenge(this.props.filter.challengeMax);\r\n\r\n                content = (\r\n                    <div>\r\n                        <div className=\"section\">\r\n                            <input type=\"text\" placeholder=\"name\" value={this.props.filter.name} onChange={event => this.props.changeValue(\"name\", event.target.value)} />\r\n                        </div>\r\n                        <div className=\"section\">showing {summary}</div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className=\"card\">\r\n                    <div className=\"heading\">\r\n                        <div className=\"title\">filter</div>\r\n                        <img className={this.state.showAll ? \"image rotate\" : \"image\"} src={arrow} alt=\"arrow\" onClick={() => this.toggleAll()} />\r\n                    </div>\r\n                    <div className=\"card-content\">\r\n                        {content}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport InfoCard from './info-card';\r\nimport { EncounterWave } from '../../models/models';\r\n\r\ninterface Props {\r\n    wave: EncounterWave;\r\n    changeValue: (wave: EncounterWave, field: string, value: string) => void;\r\n    removeWave: (wave: EncounterWave) => void;\r\n}\r\n\r\nexport default class WaveCard extends React.Component<Props> {\r\n    render() {\r\n        try {\r\n            var heading = (\r\n                <div className=\"heading\">\r\n                    <div className=\"title\">wave</div>\r\n                </div>\r\n            );\r\n\r\n            var content = (\r\n                <div>\r\n                    <div className=\"section\">\r\n                        <input type=\"text\" placeholder=\"wave name\" value={this.props.wave.name} onChange={event => this.props.changeValue(this.props.wave, \"name\", event.target.value)} />\r\n                    </div>\r\n                    <div className=\"divider\"></div>\r\n                    <div className=\"section\">\r\n                        <ConfirmButton text=\"delete wave\" callback={() => this.props.removeWave(this.props.wave)} />\r\n                    </div>\r\n                </div>\r\n            )\r\n\r\n            return (\r\n                <InfoCard getHeading={() => heading} getContent={() => content} />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    };\r\n}","import React from 'react';\r\n\r\nimport { Encounter } from '../../../models/models';\r\n\r\nimport InfoCard from '../info-card';\r\n\r\ninterface Props {\r\n    encounters: Encounter[];\r\n}\r\n\r\nexport default class EncounterBuilderCard extends React.Component<Props> {\r\n    render() {\r\n        try {\r\n            var action: JSX.Element | null = null;\r\n            if (this.props.encounters.length === 0) {\r\n                action = (\r\n                    <div className=\"section\">to start building an encounter, press the button below</div>\r\n                );\r\n            } else {\r\n                action = (\r\n                    <div className=\"section\">select an encounter from the list to add monsters to it</div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <InfoCard\r\n                    getContent={() => (\r\n                        <div>\r\n                            <div className=\"section\">on this page you can set up encounters</div>\r\n                            <div className=\"section\">when you have created an encounter you can add monsters to it, then gauge its difficulty for a party of pcs</div>\r\n                            <div className=\"divider\"></div>\r\n                            {action}\r\n                        </div>\r\n                    )}\r\n                />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    };\r\n}","import React from 'react';\r\n\r\nimport * as utils from '../../utils';\r\n\r\nimport { Party, Monster, Encounter, EncounterSlot } from '../../models/models';\r\n\r\ninterface Props {\r\n    encounter: Encounter;\r\n    party: Party | null;\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null\r\n}\r\n\r\nexport default class DifficultyChartPanel extends React.Component<Props> {\r\n    render() {\r\n        var monsterCount = 0;\r\n        var monsterXp = 0;\r\n        var slots: EncounterSlot[] = [];\r\n        slots = slots.concat(this.props.encounter.slots);\r\n        this.props.encounter.waves.forEach(wave => {\r\n            slots = slots.concat(wave.slots);\r\n        })\r\n        slots.forEach(slot => {\r\n            monsterCount += slot.count;\r\n            var monster = this.props.getMonster(slot.monsterName, slot.monsterGroupName);\r\n            if (monster) {\r\n                monsterXp += utils.experience(monster.challenge) * slot.count;\r\n            }\r\n        });\r\n\r\n        var adjustedXp = monsterXp * utils.experienceFactor(monsterCount);\r\n\r\n        var xpThresholds;\r\n        var diffSection;\r\n        if (this.props.party) {\r\n            var xpEasy = 0;\r\n            var xpMedium = 0;\r\n            var xpHard = 0;\r\n            var xpDeadly = 0;\r\n    \r\n            var pcs = this.props.party.pcs.filter(pc => pc.active);\r\n            pcs.forEach(pc => {\r\n                xpEasy += utils.pcExperience(pc.level, \"easy\");\r\n                xpMedium += utils.pcExperience(pc.level, \"medium\");\r\n                xpHard += utils.pcExperience(pc.level, \"hard\");\r\n                xpDeadly += utils.pcExperience(pc.level, \"deadly\");\r\n            });\r\n        \r\n            var difficulty = null;\r\n            var adjustedDifficulty = null;\r\n            if (adjustedXp > 0) {\r\n                difficulty = \"trivial\";\r\n                if (adjustedXp >= xpEasy) {\r\n                    difficulty = \"easy\";\r\n                }\r\n                if (adjustedXp >= xpMedium) {\r\n                    difficulty = \"medium\";\r\n                }\r\n                if (adjustedXp >= xpHard) {\r\n                    difficulty = \"hard\";\r\n                }\r\n                if (adjustedXp >= xpDeadly) {\r\n                    difficulty = \"deadly\";\r\n                }\r\n                adjustedDifficulty = difficulty;\r\n\r\n                if ((pcs.length < 3) || (pcs.length > 5)) {\r\n                    var small = pcs.length < 3;\r\n                    switch (difficulty) {\r\n                        case \"trivial\":\r\n                            adjustedDifficulty = small ? \"easy\" : \"trivial\";\r\n                            break;\r\n                        case \"easy\":\r\n                            adjustedDifficulty = small ? \"medium\" : \"trivial\";\r\n                            break;\r\n                        case \"medium\":\r\n                            adjustedDifficulty = small ? \"hard\" : \"easy\";\r\n                            break;\r\n                        case \"hard\":\r\n                            adjustedDifficulty = small ? \"deadly\" : \"medium\";\r\n                            break;\r\n                        case \"deadly\":\r\n                            adjustedDifficulty = small ? \"deadly\" : \"hard\";\r\n                            break;\r\n                        default:\r\n                            adjustedDifficulty = \"\";\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            xpThresholds = (\r\n                <div className=\"table\">\r\n                    <div>\r\n                        <div className=\"cell four\"><b>easy</b></div>\r\n                        <div className=\"cell four\"><b>medium</b></div>\r\n                        <div className=\"cell four\"><b>hard</b></div>\r\n                        <div className=\"cell four\"><b>deadly</b></div>\r\n                    </div>\r\n                    <div>\r\n                        <div className=\"cell four\">{xpEasy} xp</div>\r\n                        <div className=\"cell four\">{xpMedium} xp</div>\r\n                        <div className=\"cell four\">{xpHard} xp</div>\r\n                        <div className=\"cell four\">{xpDeadly} xp</div>\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            var getLeft = (xp: number) => {\r\n                var max = Math.max(adjustedXp, (xpDeadly * 1.2));\r\n                return (100 * xp) / max;\r\n            };\r\n\r\n            var getRight = (xp: number) => {\r\n                return 100 - getLeft(xp);\r\n            };\r\n\r\n            diffSection = (\r\n                <div>\r\n                    <div className=\"difficulty-gauge\">\r\n                        <div className=\"bar-container\">\r\n                            <div className=\"bar trivial\" style={{ left: \"0\", right: getRight(xpEasy) + \"%\" }}></div>\r\n                        </div>\r\n                        <div className=\"bar-container\">\r\n                            <div className=\"bar easy\" style={{ left: getLeft(xpEasy) + \"%\", right: getRight(xpMedium) + \"%\" }}></div>\r\n                        </div>\r\n                        <div className=\"bar-container\">\r\n                            <div className=\"bar medium\" style={{ left: getLeft(xpMedium) + \"%\", right: getRight(xpHard) + \"%\" }}></div>\r\n                        </div>\r\n                        <div className=\"bar-container\">\r\n                            <div className=\"bar hard\" style={{ left: getLeft(xpHard) + \"%\", right: getRight(xpDeadly) + \"%\" }}></div>\r\n                        </div>\r\n                        <div className=\"bar-container\">\r\n                            <div className=\"bar deadly\" style={{ left: getLeft(xpDeadly) + \"%\", right: \"0\" }}></div>\r\n                        </div>\r\n                        <div className=\"encounter-container\">\r\n                            <div className=\"encounter\" style={{ left: (getLeft(adjustedXp) - 0.5) + \"%\" }}></div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"subheading\">difficulty</div>\r\n                    <div className=\"section\">\r\n                        difficulty for this party\r\n                        <div className=\"right\">{difficulty}</div>\r\n                    </div>\r\n                    <div className=\"section\" style={{ display: (adjustedDifficulty === difficulty) ? \"none\" : \"\"}}>\r\n                        effective difficulty for {pcs.length} pc(s)\r\n                        <div className=\"right\"><b>{adjustedDifficulty}</b></div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"subheading\">xp value</div>\r\n                <div className=\"section\">\r\n                    xp for this encounter\r\n                    <div className=\"right\">{monsterXp} xp</div>\r\n                </div>\r\n                <div className=\"section\" style={{ display: (adjustedXp === monsterXp) ? \"none\" : \"\"}}>\r\n                    effective xp for {monsterCount} monster(s)\r\n                    <div className=\"right\">{adjustedXp} xp</div>\r\n                </div>\r\n                {xpThresholds}\r\n                {diffSection}\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nimport { Encounter, Party, Monster } from '../../models/models';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport DifficultyChartPanel from '../panels/difficulty-chart-panel';\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport InfoCard from './info-card';\r\n\r\nimport arrow from \"../../resources/images/down-arrow.svg\";\r\n\r\ninterface Props {\r\n    selection: Encounter;\r\n    parties: Party[];\r\n    changeValue: (field: string, value: string) => void;\r\n    addWave: () => void;\r\n    removeEncounter: () => void;\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n}\r\n\r\ninterface State {\r\n    showDetails: boolean;\r\n    party: Party | null;\r\n}\r\n\r\nexport default class EncounterCard extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showDetails: false,\r\n            party: null\r\n        };\r\n    }\r\n\r\n    toggleDetails() {\r\n        this.setState({\r\n            showDetails: !this.state.showDetails\r\n        })\r\n    }\r\n\r\n    selectParty(partyID: string) {\r\n        var party = this.props.parties.find(p => p.id === partyID);\r\n        this.setState({\r\n            party: party as Party\r\n        });\r\n    }\r\n\r\n    render() {\r\n        try {\r\n            var partyOptions = [];\r\n            if (this.props.parties) {\r\n                for (var n = 0; n !== this.props.parties.length; ++n) {\r\n                    var party = this.props.parties[n];\r\n                    partyOptions.push({\r\n                        id: party.id,\r\n                        text: party.name\r\n                    });\r\n                }\r\n            }\r\n\r\n            var difficultySection = (\r\n                <div>\r\n                    <Dropdown\r\n                        options={partyOptions}\r\n                        placeholder=\"select party...\"\r\n                        selectedID={this.state.party ? this.state.party.id : undefined}\r\n                        select={optionID => this.selectParty(optionID)}\r\n                    />\r\n                    <DifficultyChartPanel\r\n                        encounter={this.props.selection}\r\n                        party={this.state.party}\r\n                        getMonster={(monsterName, monsterGroupName) => this.props.getMonster(monsterName, monsterGroupName)}\r\n                    />\r\n                </div>\r\n            );\r\n\r\n            var imageStyle = this.state.showDetails ? \"image rotate\" : \"image\";\r\n\r\n            var heading = (\r\n                <div className=\"heading\">\r\n                    <div className=\"title\">encounter</div>\r\n                    <img className={imageStyle} src={arrow} alt=\"arrow\" onClick={() => this.toggleDetails()} />\r\n                </div>\r\n            );\r\n\r\n            var content = (\r\n                <div>\r\n                    <div className=\"section\">\r\n                        <input type=\"text\" placeholder=\"encounter name\" value={this.props.selection.name} onChange={event => this.props.changeValue(\"name\", event.target.value)} />\r\n                    </div>\r\n                    <div style={{ display: this.state.showDetails ? \"\" : \"none\" }}>\r\n                        <div className=\"divider\"></div>\r\n                        {difficultySection}\r\n                    </div>\r\n                    <div className=\"divider\"></div>\r\n                    <div className=\"section\">\r\n                        <button onClick={() => this.props.addWave()}>add a new wave</button>\r\n                        <ConfirmButton text=\"delete encounter\" callback={() => this.props.removeEncounter()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            return (\r\n                <InfoCard getHeading={() => heading} getContent={() => content} />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    };\r\n}","import React from 'react';\r\n\r\nimport { Encounter } from '../../models/models';\r\n\r\ninterface Props {\r\n    encounter: Encounter;\r\n    selected: boolean;\r\n    setSelection: (encounter: Encounter) => void;\r\n}\r\n\r\nexport default class EncounterListItem extends React.Component<Props> {\r\n    render() {\r\n        try {\r\n            var slots = [];\r\n\r\n            this.props.encounter.slots.forEach(slot => {\r\n                var text = slot.monsterName || \"unnamed monster\";\r\n                if (slot.count > 1) {\r\n                    text += \" x\" + slot.count;\r\n                }\r\n                slots.push(<div key={slot.id} className=\"text\">{text}</div>);\r\n            });\r\n\r\n            if (slots.length === 0) {\r\n                slots.push(<div key=\"empty\" className=\"text\">no monsters</div>);\r\n            }\r\n\r\n            this.props.encounter.waves.forEach(wave => {\r\n                slots.push(<div key={\"name \" + wave.id} className=\"text subheading\">{wave.name || \"unnamed wave\"}</div>);\r\n                wave.slots.forEach(slot => {\r\n                    var text = slot.monsterName || \"unnamed monster\";\r\n                    if (slot.count > 1) {\r\n                        text += \" x\" + slot.count;\r\n                    }\r\n                    slots.push(<div key={slot.id} className=\"text\">{text}</div>);\r\n                });\r\n                if (slots.length === 0) {\r\n                    slots.push(<div key={\"empty \" + wave.id} className=\"text\">no monsters</div>);\r\n                }\r\n            });\r\n\r\n            return (\r\n                <div className={this.props.selected ? \"list-item selected\" : \"list-item\"} onClick={() => this.props.setSelection(this.props.encounter)}>\r\n                    <div className=\"heading\">{this.props.encounter.name || \"unnamed encounter\"}</div>\r\n                    {slots}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport * as utils from '../../utils';\r\n\r\nimport { Encounter, EncounterSlot, MonsterGroup, Monster, Party, EncounterWave } from '../../models/models';\r\n\r\nimport MonsterCard from '../cards/monster-card';\r\nimport ErrorCard from '../cards/error-card';\r\nimport InfoCard from '../cards/info-card';\r\nimport FilterCard from '../cards/filter-card';\r\nimport WaveCard from '../cards/wave-card';\r\nimport CardGroup from '../panels/card-group';\r\nimport EncounterBuilderCard from '../cards/information/encounter-builder-card';\r\nimport EncounterCard from '../cards/encounter-card';\r\nimport EncounterListItem from '../list-items/encounter-list-item';\r\n\r\ninterface Props {\r\n    encounters: Encounter[];\r\n    selection: Encounter | null;\r\n    parties: Party[];\r\n    library: MonsterGroup[];\r\n    showHelp: boolean;\r\n    selectEncounter: (encounter: Encounter | null) => void;\r\n    addEncounter: () => void;\r\n    removeEncounter: () => void;\r\n    addEncounterSlot: (monster: Monster, waveID: string | null) => void;\r\n    removeEncounterSlot: (encounterSlot: EncounterSlot, waveID: string | null) => void;\r\n    addWave: () => void;\r\n    removeWave: (wave: EncounterWave) => void;\r\n    changeValue: (source: any, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, value: number) => void;\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n}\r\n\r\ninterface State {\r\n    filter: {\r\n        name: string,\r\n        challengeMin: number;\r\n        challengeMax: number;\r\n        category: string;\r\n        size: string;\r\n    };\r\n}\r\n\r\nexport default class EncounterBuilderScreen extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            filter: {\r\n                name: \"\",\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: \"all types\",\r\n                size: \"all sizes\"\r\n            }\r\n        };\r\n    }\r\n\r\n    inEncounter(monster: Monster) {\r\n        var result = false;\r\n\r\n        if (this.props.selection) {\r\n            var group = utils.getMonsterGroup(monster, this.props.library);\r\n\r\n            this.props.selection.slots.forEach(slot => {\r\n                if ((slot.monsterGroupName === group.name) && (slot.monsterName === monster.name)) {\r\n                    result = true;\r\n                }\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    matchMonster(monster: Monster) {\r\n        if (monster.challenge < this.state.filter.challengeMin) {\r\n            return false;\r\n        }\r\n\r\n        if (monster.challenge > this.state.filter.challengeMax) {\r\n            return false;\r\n        }\r\n\r\n        if (this.state.filter.name !== \"\") {\r\n            if (!utils.match(this.state.filter.name, monster.name)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.filter.category !== \"all types\") {\r\n            if (monster.category !== this.state.filter.category) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.filter.size !== \"all sizes\") {\r\n            if (monster.size !== this.state.filter.size) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    changeFilterValue(type: 'name' | 'challengeMin' | 'challengeMax' | 'category' | 'size', value: any) {\r\n        // eslint-disable-next-line\r\n        this.state.filter[type] = value;\r\n        this.setState({\r\n            filter: this.state.filter\r\n        });\r\n    }\r\n\r\n    nudgeFilterValue(type: 'challengeMin' | 'challengeMax', delta: number) {\r\n        var value = utils.nudgeChallenge(this.state.filter[type], delta);\r\n        this.changeFilterValue(type, value);\r\n    }\r\n\r\n    resetFilter() {\r\n        this.setState({\r\n            filter: {\r\n                name: \"\",\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: \"all types\",\r\n                size: \"all sizes\"\r\n            }\r\n        });\r\n    }\r\n\r\n    getMonsterCards(slots: EncounterSlot[], waveID: string | null) {\r\n        var cards = [];\r\n\r\n        slots.forEach(slot => {\r\n            var monster = this.props.getMonster(slot.monsterName, slot.monsterGroupName);\r\n            if (monster) {\r\n                cards.push(\r\n                    <div className=\"column\" key={monster.id}>\r\n                        <MonsterCard\r\n                            combatant={monster}\r\n                            slot={slot}\r\n                            encounter={this.props.selection as Encounter}\r\n                            mode={\"view encounter\"}\r\n                            nudgeValue={(slot, type, delta) => this.props.nudgeValue(slot, type, delta)}\r\n                            removeEncounterSlot={slot => this.props.removeEncounterSlot(slot, waveID)}\r\n                        />\r\n                    </div>\r\n                );\r\n            } else {\r\n                var index = slots.indexOf(slot);\r\n                var error = \"unknown monster: \" + slot.monsterName + \" in group \" + slot.monsterGroupName;\r\n                cards.push(\r\n                    <div className=\"column\" key={index}>\r\n                        <ErrorCard\r\n                            getContent={() => <div className=\"section\">{error}</div>}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n        });\r\n\r\n        if (slots.length === 0) {\r\n            cards.push(\r\n                <div className=\"column\" key=\"empty\">\r\n                    <InfoCard getContent={() => <div className=\"section\">no monsters</div>} />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return cards;\r\n    }\r\n\r\n    getLibrarySection() {\r\n        if (!this.props.selection) {\r\n            return null;\r\n        }\r\n\r\n        var libraryCards = [];\r\n        libraryCards.push(\r\n            <div className=\"column\" key=\"filter\">\r\n                <FilterCard\r\n                    filter={this.state.filter}\r\n                    changeValue={(type, value) => this.changeFilterValue(type, value)}\r\n                    nudgeValue={(type, delta) => this.nudgeFilterValue(type, delta)}\r\n                    resetFilter={() => this.resetFilter()}\r\n                />\r\n            </div>\r\n        );\r\n\r\n        var monsters: Monster[] = [];\r\n        if (this.props.selection) {\r\n            this.props.library.forEach(group => {\r\n                group.monsters.forEach(monster => {\r\n                    if (this.matchMonster(monster)) {\r\n                        monsters.push(monster);\r\n                    }\r\n                });\r\n            });\r\n            monsters.sort((a, b) => {\r\n                if (a.name < b.name) return -1;\r\n                if (a.name > b.name) return 1;\r\n                return 0;\r\n            });\r\n        }\r\n        monsters.forEach(monster => {\r\n            libraryCards.push(\r\n                <div className=\"column\" key={monster.id}>\r\n                    <MonsterCard\r\n                        key={monster.id}\r\n                        combatant={monster}\r\n                        encounter={this.props.selection as Encounter}\r\n                        library={this.props.library}\r\n                        mode={\"view encounter\"}\r\n                        addEncounterSlot={(combatant, waveID) => this.props.addEncounterSlot(combatant, waveID)}\r\n                    />\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <CardGroup\r\n                heading=\"monster library\"\r\n                content={libraryCards}\r\n                showToggle={true}\r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        try {\r\n            var help = null;\r\n            if (this.props.showHelp) {\r\n                help = (\r\n                    <EncounterBuilderCard encounters={this.props.encounters} />\r\n                );\r\n            }\r\n\r\n            var encounters = [];\r\n            for (var n = 0; n !== this.props.encounters.length; ++n) {\r\n                var encounter = this.props.encounters[n];\r\n                encounters.push(\r\n                    <EncounterListItem\r\n                        key={encounter.id}\r\n                        encounter={encounter}\r\n                        selected={encounter === this.props.selection}\r\n                        setSelection={encounter => this.props.selectEncounter(encounter)}\r\n                    />\r\n                );\r\n            };\r\n\r\n            var encounterName = undefined;\r\n            var encounterCards = [];\r\n            var waves: JSX.Element[] = [];\r\n\r\n            if (this.props.selection) {\r\n                encounterName = this.props.selection.name || \"unnamed encounter\";\r\n\r\n                encounterCards.push(\r\n                    <div className=\"column\" key=\"info\">\r\n                        <EncounterCard\r\n                            selection={this.props.selection}\r\n                            parties={this.props.parties}\r\n                            changeValue={(type, value) => this.props.changeValue(this.props.selection, type, value)}\r\n                            addWave={() => this.props.addWave()}\r\n                            removeEncounter={() => this.props.removeEncounter()}\r\n                            getMonster={(monsterName, monsterGroupName) => this.props.getMonster(monsterName, monsterGroupName)}\r\n                        />\r\n                    </div>\r\n                );\r\n\r\n                this.getMonsterCards(this.props.selection.slots, null)\r\n                    .forEach(card => encounterCards.push(card));\r\n                    \r\n                waves = this.props.selection.waves.map(wave => {\r\n                    var waveCards = [];\r\n                    waveCards.push(\r\n                        <div className=\"column\" key=\"info\">\r\n                            <WaveCard\r\n                                wave={wave}\r\n                                removeWave={wave => this.props.removeWave(wave)}\r\n                                changeValue={(wave, field, value) => this.props.changeValue(wave, field, value)}\r\n                            />\r\n                        </div>\r\n                    );\r\n\r\n                    this.getMonsterCards(wave.slots, wave.id)\r\n                        .forEach(card => waveCards.push(card));\r\n\r\n                    return (\r\n                        <CardGroup\r\n                            key={wave.id}\r\n                            heading={wave.name || \"unnamed wave\"}\r\n                            content={waveCards}\r\n                            showToggle={true}\r\n                        />\r\n                    );\r\n                });\r\n            }\r\n\r\n            return (\r\n                <div className=\"encounter-builder row collapse\">\r\n                    <div className=\"columns small-4 medium-4 large-3 scrollable list-column\">\r\n                        {help}\r\n                        <button onClick={() => this.props.addEncounter()}>add a new encounter</button>\r\n                        {encounters}\r\n                    </div>\r\n                    <div className=\"columns small-8 medium-8 large-9 scrollable\">\r\n                        <CardGroup\r\n                            content={encounterCards}\r\n                            heading={encounterName}\r\n                            showClose={this.props.selection !== null}\r\n                            close={() => this.props.selectEncounter(null)}\r\n                        />\r\n                        {waves}\r\n                        {this.getLibrarySection()}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport { MapFolio } from '../../../models/models';\r\n\r\nimport InfoCard from '../info-card';\r\n\r\ninterface Props {\r\n    mapFolios: MapFolio[];\r\n}\r\n\r\nexport default class MapFoliosCard extends React.Component<Props> {\r\n    render() {\r\n        try {\r\n            var action: JSX.Element | null = null;\r\n            if (this.props.mapFolios.length === 0) {\r\n                action = (\r\n                    <div className=\"section\">to start a new folio, press the button below</div>\r\n                );\r\n            } else {\r\n                action = (\r\n                    <div className=\"section\">select a map folio from the list to see the maps it contains</div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <InfoCard\r\n                    getContent={() => (\r\n                        <div>\r\n                            <div className=\"section\">on this page you can set up folios containing tactical maps</div>\r\n                            <div className=\"section\">when you have created a map you can use it in encounters</div>\r\n                            <div className=\"divider\"></div>\r\n                            {action}\r\n                        </div>\r\n                    )}\r\n                />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    };\r\n}","import React from 'react';\r\n\r\nimport { MapFolio } from '../../models/models';\r\n\r\ninterface Props {\r\n    mapFolio: MapFolio;\r\n    selected: boolean;\r\n    setSelection: (mapFolio: MapFolio) => void;\r\n}\r\n\r\nexport default class MapFolioListItem extends React.Component<Props> {\r\n    render() {\r\n        try {\r\n            var maps = [];\r\n            for (var n = 0; n !== this.props.mapFolio.maps.length; ++n) {\r\n                var map = this.props.mapFolio.maps[n];\r\n                var name = map.name || \"unnamed map\";\r\n                maps.push(<div key={map.id} className=\"text\">{name}</div>);\r\n            }\r\n            if (maps.length === 0) {\r\n                maps.push(<div key=\"empty\" className=\"text\">no maps</div>);\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? \"list-item selected\" : \"list-item\"} onClick={() => this.props.setSelection(this.props.mapFolio)}>\r\n                    <div className=\"heading\">{this.props.mapFolio.name || \"unnamed folio\"}</div>\r\n                    {maps}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport { MapFolio } from '../../models/models';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport InfoCard from './info-card';\r\n\r\ninterface Props {\r\n    selection: MapFolio;\r\n    changeValue: (source: MapFolio, field: string, value: string) => void;\r\n    addMap: () => void;\r\n    removeMapFolio: () => void;\r\n}\r\n\r\nexport default class MapFolioCard extends React.Component<Props> {\r\n    render() {\r\n        try {\r\n            var heading = (\r\n                <div className=\"heading\">\r\n                    <div className=\"title\">map folio</div>\r\n                </div>\r\n            );\r\n\r\n            var content = (\r\n                <div>\r\n                    <div className=\"section\">\r\n                        <input type=\"text\" placeholder=\"folio name\" value={this.props.selection.name} onChange={event => this.props.changeValue(this.props.selection, \"name\", event.target.value)} />\r\n                    </div>\r\n                    <div className=\"divider\"></div>\r\n                    <div className=\"section\">\r\n                        <button onClick={() => this.props.addMap()}>add a new map</button>\r\n                        <ConfirmButton text=\"delete folio\" callback={() => this.props.removeMapFolio()} />\r\n                    </div>\r\n                </div>\r\n            )\r\n\r\n            return (\r\n                <InfoCard getHeading={() => heading} getContent={() => content} />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    };\r\n}","import React from 'react';\r\n\r\nimport { Combatant, Monster } from '../../models/models';\r\n\r\ninterface Props {\r\n    combatant: Combatant & Monster;\r\n}\r\n\r\nexport default class HitPointGauge extends React.Component<Props> {\r\n    render() {\r\n        try {\r\n            var hpCurrent = this.props.combatant.hp || 0;\r\n            var hpMax = this.props.combatant.hpMax + this.props.combatant.hpTemp;\r\n            var hpBloodied = this.props.combatant.hpMax / 2;\r\n            var hpWidth = 100 * Math.max(hpCurrent, 0) / hpMax;\r\n\r\n            var style = \"\";\r\n            if (hpCurrent >= this.props.combatant.hpMax) {\r\n                style = \"bar unhurt\";\r\n            } else if (hpCurrent <= hpBloodied) {\r\n                style = \"bar bloodied\";\r\n            } else {\r\n                style = \"bar injured\";\r\n            }\r\n\r\n            var hpTempBar = null;\r\n            if (this.props.combatant.hpTemp > 0) {\r\n                var hpTempWidth = 100 * Math.max(this.props.combatant.hpTemp, 0) / hpMax;\r\n                hpTempBar = <div className=\"bar temp\" style={{ width: hpTempWidth + \"%\" }}></div>\r\n            }\r\n\r\n            return (\r\n                <div className=\"hp-gauge\">\r\n                    <div className={style} style={{ width: hpWidth + \"%\" }}></div>\r\n                    {hpTempBar}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    };\r\n}","import React from 'react';\r\n\r\nimport HitPointGauge from './hit-point-gauge';\r\nimport { Combatant, MapItem, PC, Monster, Map } from '../../models/models';\r\n\r\ninterface Props {\r\n    map: Map;\r\n    mode: 'edit' | 'thumbnail' | 'combat';\r\n    combatants: ((Combatant & PC) | (Combatant & Monster))[];\r\n    showOverlay: boolean;\r\n    selectedItemID: string;\r\n    setSelectedItemID: (itemID: string | null) => void;\r\n    addMapTile: (x: number, y: number) => void;\r\n    gridSquareClicked: (x: number, y: number) => void;\r\n}\r\n\r\ninterface MapDimensions {\r\n    minX: number;\r\n    maxX: number;\r\n    minY: number;\r\n    maxY: number;\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\nexport default class MapPanel extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        combatants: null,\r\n        showOverlay: false,\r\n        selectedItemID: null,\r\n        setSelectedItemID: null,\r\n        addMapTile: null,\r\n        gridSquareClicked: null\r\n    };\r\n\r\n    getMapDimensions(border: number): MapDimensions | null {\r\n        var dimensions: MapDimensions | null = null;\r\n\r\n        this.props.map.items.filter(i => {\r\n            if (this.props.mode === \"edit\") {\r\n                return i.type === \"tile\";\r\n            }\r\n            return true;\r\n        }).forEach(i => {\r\n            if (!dimensions) {\r\n                dimensions = {\r\n                    minX: i.x,\r\n                    maxX: i.x + i.width - 1,\r\n                    minY: i.y,\r\n                    maxY: i.y + i.height - 1,\r\n                    width: 0,\r\n                    height: 0\r\n                };\r\n            } else {\r\n                dimensions.minX = Math.min(dimensions.minX, i.x);\r\n                dimensions.maxX = Math.max(dimensions.maxX, i.x + i.width - 1);\r\n                dimensions.minY = Math.min(dimensions.minY, i.y);\r\n                dimensions.maxY = Math.max(dimensions.maxY, i.y + i.height - 1);\r\n            }\r\n        });\r\n\r\n        if (!dimensions) {\r\n            // The map is blank\r\n            if (this.props.mode === 'thumbnail') {\r\n                return null;\r\n            }\r\n\r\n            dimensions = {\r\n                minX: 0,\r\n                maxX: 0,\r\n                minY: 0,\r\n                maxY: 0,\r\n                width: 0,\r\n                height: 0\r\n            };\r\n        }\r\n\r\n        // Apply the border\r\n        dimensions.minX -= border;\r\n        dimensions.maxX += border;\r\n        dimensions.minY -= border;\r\n        dimensions.maxY += border;\r\n\r\n        // Set width and height\r\n        dimensions.width = 1 + dimensions.maxX - dimensions.minX;\r\n        dimensions.height = 1 + dimensions.maxY - dimensions.minY;\r\n\r\n        return dimensions;\r\n    }\r\n\r\n    getSideLength(): number {\r\n        switch (this.props.mode) {\r\n            case \"thumbnail\":\r\n                return 5;\r\n            case \"edit\":\r\n            case \"combat\":\r\n                return 25;\r\n            default:\r\n                return 5;\r\n        }\r\n    }\r\n\r\n    getPosition(x: number, y: number, width: number, height: number, mapDimensions: MapDimensions): { left: string; top: string; width: string; height: string } {\r\n        var sideLength = this.getSideLength();\r\n\r\n        return {\r\n            left: \"calc(\" + sideLength + \"px * \" + (x - mapDimensions.minX) + \")\",\r\n            top: \"calc(\" + sideLength + \"px * \" + (y - mapDimensions.minY) + \")\",\r\n            width: \"calc((\" + sideLength + \"px * \" + width + \") + 1px)\",\r\n            height: \"calc((\" + sideLength + \"px * \" + height + \") + 1px)\"\r\n        };\r\n    }\r\n\r\n    render() {\r\n        try {\r\n            var border = (this.props.mode === \"edit\") ? 2 : 0;\r\n            var mapDimensions = this.getMapDimensions(border);\r\n            if (!mapDimensions) {\r\n                return (\r\n                    <div>(blank map)</div>\r\n                );\r\n            }\r\n\r\n            // Draw the grid squares\r\n            var grid = [];\r\n            if (this.props.mode === \"edit\") {\r\n                for (var y = mapDimensions.minY; y !== mapDimensions.maxY + 1; ++y) {\r\n                    for (var x = mapDimensions.minX; x !== mapDimensions.maxX + 1; ++x) {\r\n                        var pos = this.getPosition(x, y, 1, 1, mapDimensions);\r\n                        grid.push(\r\n                            <GridSquare\r\n                                key={x + \",\" + y}\r\n                                x={x}\r\n                                y={y}\r\n                                position={pos}\r\n                                onClick={() => this.props.setSelectedItemID(null)}\r\n                                onDoubleClick={(x, y) => this.props.addMapTile(x, y)}\r\n                            />\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Draw the map tiles\r\n            var tiles = this.props.map.items\r\n                .filter(i => i.type === \"tile\")\r\n                .map(i => {\r\n                    var pos = this.getPosition(i.x, i.y, i.width, i.height, mapDimensions as MapDimensions);\r\n                    return (\r\n                        <MapTile\r\n                            key={i.id}\r\n                            tile={i}\r\n                            position={pos}\r\n                            selectable={this.props.mode === \"edit\"}\r\n                            selected={this.props.selectedItemID === i.id}\r\n                            thumbnail={this.props.mode === \"thumbnail\"}\r\n                            select={id => this.props.mode === \"edit\" ? this.props.setSelectedItemID(id) : null}\r\n                        />\r\n                    );\r\n                });\r\n\r\n            // Draw the tokens\r\n            var tokens: JSX.Element[] = [];\r\n            if (this.props.mode !== \"edit\") {\r\n                tokens = this.props.map.items\r\n                    .filter(i => (i.type === \"monster\") || (i.type === \"pc\"))\r\n                    .map(i => {\r\n                        var pos = this.getPosition(i.x, i.y, i.width, i.height, mapDimensions as MapDimensions);\r\n                        var combatant = this.props.combatants.find(c => c.id === i.id);\r\n                        if (combatant) {\r\n                            return (\r\n                                <MapToken\r\n                                    key={i.id}\r\n                                    token={i}\r\n                                    combatant={combatant}\r\n                                    position={pos}\r\n                                    simple={this.props.mode === \"thumbnail\"}\r\n                                    selectable={this.props.mode === \"combat\"}\r\n                                    selected={this.props.selectedItemID ===  i.id}\r\n                                    select={id => this.props.setSelectedItemID(id)}\r\n                                />\r\n                            );\r\n                        }\r\n\r\n                        return null;\r\n                    })\r\n                    .filter(mt => mt !== null) as JSX.Element[];\r\n            }\r\n\r\n            // Draw the drag overlay\r\n            var dragOverlay = [];\r\n            if (this.props.showOverlay) {\r\n                for (var yOver = mapDimensions.minY; yOver !== mapDimensions.maxY + 1; ++yOver) {\r\n                    for (var xOver = mapDimensions.minX; xOver !== mapDimensions.maxX + 1; ++xOver) {\r\n                        var posOver = this.getPosition(xOver, yOver, 1, 1, mapDimensions);\r\n                        dragOverlay.push(\r\n                            <GridSquare\r\n                                key={xOver + \",\" + yOver}\r\n                                x={xOver}\r\n                                y={yOver}\r\n                                position={posOver}\r\n                                overlay={true}\r\n                                onClick={(x, y) => this.props.gridSquareClicked(x, y)}\r\n                            />\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n\r\n            var style = \"map-panel \" + this.props.mode;\r\n            return (\r\n                <div className={style} onClick={() => this.props.setSelectedItemID(null)}>\r\n                    <div className=\"grid\" style={{ height: ((this.getSideLength() * mapDimensions.height) + 1) + \"px\" }}>\r\n                        {grid}\r\n                        {tiles}\r\n                        {tokens}\r\n                        {dragOverlay}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface GridSquareProps {\r\n    x: number;\r\n    y: number;\r\n    position: { left: string; top: string; width: string; height: string };\r\n    overlay: boolean;\r\n    onClick: (x: number, y: number) => void;\r\n    onDoubleClick: (x: number, y: number) => void;\r\n}\r\n\r\nclass GridSquare extends React.Component<GridSquareProps> {\r\n    public static defaultProps = {\r\n        overlay: false,\r\n        onDoubleClick: null\r\n    };\r\n\r\n    click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (this.props.onClick) {\r\n            this.props.onClick(this.props.x, this.props.y);\r\n        }\r\n    }\r\n\r\n    doubleClick(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (this.props.onDoubleClick) {\r\n            this.props.onDoubleClick(this.props.x, this.props.y);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        var style = \"grid-square\";\r\n        if (this.props.overlay) {\r\n            style += \" grid-overlay\";\r\n        }\r\n\r\n        return (\r\n            <div\r\n                className={style}\r\n                style={this.props.position}\r\n                onClick={e => this.click(e)}\r\n                onDoubleClick={e => this.doubleClick(e)}\r\n            >\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface MapTileProps {\r\n    tile: MapItem;\r\n    position: { left: string; top: string; width: string; height: string };\r\n    thumbnail: boolean;\r\n    selectable: boolean;\r\n    selected: boolean;\r\n    select: (tileID: string) => void;\r\n}\r\n\r\nclass MapTile extends React.Component<MapTileProps> {\r\n    select(e: React.MouseEvent) {\r\n        if (this.props.selectable) {\r\n            e.stopPropagation();\r\n            this.props.select(this.props.tile.id);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        var style = \"tile \" + this.props.tile.terrain;\r\n        if (this.props.selected) {\r\n            style += \" selected\";\r\n        }\r\n        if (this.props.thumbnail) {\r\n            style += \" thumbnail\";\r\n        }\r\n\r\n        return (\r\n            <div\r\n                className={style}\r\n                style={this.props.position}\r\n                onClick={e => this.select(e)}>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface MapTokenProps {\r\n    token: MapItem;\r\n    combatant: (Combatant & PC) | (Combatant & Monster);\r\n    position: { left: string; top: string; width: string; height: string };\r\n    simple: boolean;\r\n    selectable: boolean;\r\n    selected: boolean;\r\n    select: (tokenID: string) => void;\r\n}\r\n\r\nclass MapToken extends React.Component<MapTokenProps> {\r\n    select(e: React.MouseEvent) {\r\n        if (this.props.selectable) {\r\n            e.stopPropagation();\r\n            this.props.select(this.props.token.id);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        var style = \"token \" + this.props.token.type;\r\n        if (this.props.selected) {\r\n            style += \" selected\";\r\n        }\r\n        if (this.props.combatant.current) {\r\n            style += \" current\";\r\n        }\r\n\r\n        var initials = null;\r\n        var hpGauge = null;\r\n        var altitudeBadge = null;\r\n        var conditionsBadge = null;\r\n        if (!this.props.simple) {\r\n            var name = this.props.combatant.displayName || this.props.combatant.name;\r\n            initials = (\r\n                <div className=\"initials\">{name.split(' ').map(s => s[0])}</div>\r\n            );\r\n\r\n            if (this.props.combatant.type === \"monster\") {\r\n                hpGauge = (\r\n                    <HitPointGauge combatant={this.props.combatant as Combatant & Monster} />\r\n                );\r\n            }\r\n\r\n            if (this.props.combatant.altitude > 0) {\r\n                altitudeBadge = (\r\n                    <div className=\"badge altitude\">&#9206;</div>\r\n                );\r\n            }\r\n\r\n            if (this.props.combatant.altitude < 0) {\r\n                altitudeBadge = (\r\n                    <div className=\"badge altitude\">&#9207;</div>\r\n                );\r\n            }\r\n\r\n            if ((this.props.combatant.conditions) && (this.props.combatant.conditions.length > 0)) {\r\n                conditionsBadge = (\r\n                    <div className=\"badge\">&#9670;</div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div\r\n                title={this.props.combatant.displayName || this.props.combatant.name}\r\n                className={style}\r\n                style={this.props.position}\r\n                onClick={e => this.select(e)}\r\n            >\r\n                {initials}\r\n                {hpGauge}\r\n                {altitudeBadge}\r\n                {conditionsBadge}\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nimport MapPanel from '../panels/map-panel';\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport { Map } from '../../models/models';\r\n\r\ninterface Props {\r\n    map: Map;\r\n    changeValue: (map: Map, field: string, value: string) => void,\r\n    editMap: (map: Map) => void;\r\n    removeMap: (map: Map) => void;\r\n}\r\n\r\nexport default class MapCard extends React.Component<Props> {\r\n    render() {\r\n        try {\r\n            return (\r\n                <div className=\"card map\">\r\n                    <div className=\"heading\">\r\n                        <div className=\"title\">{this.props.map.name || \"unnamed map\"}</div>\r\n                    </div>\r\n                    <div className=\"card-content\">\r\n                        <div className=\"section\">\r\n                            <input type=\"text\" placeholder=\"map name\" value={this.props.map.name} onChange={event => this.props.changeValue(this.props.map, \"name\", event.target.value)} />\r\n                        </div>\r\n                        <div className=\"divider\"></div>\r\n                        <div className=\"section centered\">\r\n                            <MapPanel\r\n                                map={this.props.map}\r\n                                mode=\"thumbnail\"\r\n                            />\r\n                        </div>\r\n                        <div className=\"divider\"></div>\r\n                        <div className=\"section\">\r\n                            <button onClick={() => this.props.editMap(this.props.map)}>edit map</button>\r\n                            <ConfirmButton text=\"delete map\" callback={() => this.props.removeMap(this.props.map)} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    };\r\n}","import React from 'react';\r\n\r\nimport { MapFolio, Map } from '../../models/models';\r\n\r\nimport MapFoliosCard from '../cards/information/map-folios-card';\r\nimport MapFolioListItem from '../list-items/map-folio-list-item';\r\nimport MapFolioCard from '../cards/map-folio-card';\r\nimport MapCard from '../cards/map-card';\r\nimport InfoCard from '../cards/info-card';\r\nimport CardGroup from '../panels/card-group';\r\n\r\ninterface Props {\r\n    mapFolios: MapFolio[];\r\n    selection: MapFolio | null;\r\n    showHelp: boolean;\r\n    selectMapFolio: (mapFolio: MapFolio | null) => void;\r\n    addMapFolio: () => void;\r\n    removeMapFolio: () => void;\r\n    addMap: () => void;\r\n    editMap: (map: Map) => void;\r\n    removeMap: (map: Map) => void;\r\n    changeValue: (source: {}, field: string, value: any) => void;\r\n}\r\n\r\nexport default class MapFoliosScreen extends React.Component<Props> {\r\n    render() {\r\n        try {\r\n            var help = null;\r\n            if (this.props.showHelp) {\r\n                help = (\r\n                    <MapFoliosCard mapFolios={this.props.mapFolios} />\r\n                );\r\n            }\r\n\r\n            var folios = [];\r\n            for (var n = 0; n !== this.props.mapFolios.length; ++n) {\r\n                var mapFolio = this.props.mapFolios[n];\r\n                folios.push(\r\n                    <MapFolioListItem\r\n                        key={mapFolio.id}\r\n                        mapFolio={mapFolio}\r\n                        selected={mapFolio === this.props.selection}\r\n                        setSelection={mapFolio => this.props.selectMapFolio(mapFolio)}\r\n                    />\r\n                );\r\n            };\r\n\r\n            var folio = null;\r\n            if (this.props.selection) {\r\n                var folioCards = [];\r\n\r\n                folioCards.push(\r\n                    <div className=\"column\" key=\"info\">\r\n                        <MapFolioCard\r\n                            selection={this.props.selection}\r\n                            addMap={() => this.props.addMap()}\r\n                            removeMapFolio={() => this.props.removeMapFolio()}\r\n                            changeValue={(source, field, value) => this.props.changeValue(source, field, value)}\r\n                        />\r\n                    </div>\r\n                );\r\n\r\n                this.props.selection.maps.forEach(map => {\r\n                    folioCards.push(\r\n                        <div className=\"column\" key={map.id}>\r\n                            <MapCard\r\n                                map={map}\r\n                                editMap={map => this.props.editMap(map)}\r\n                                removeMap={map => this.props.removeMap(map)}\r\n                                changeValue={(source, type, value) => this.props.changeValue(source, type, value)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                if (this.props.selection.maps.length === 0) {\r\n                    folioCards.push(\r\n                        <div className=\"column\" key=\"empty\">\r\n                            <InfoCard getContent={() => <div className=\"section\">no maps</div>} />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                folio = (\r\n                    <div>\r\n                        <CardGroup\r\n                            content={folioCards}\r\n                            heading={this.props.selection.name || \"unnamed folio\"}\r\n                            showClose={this.props.selection !== null}\r\n                            close={() => this.props.selectMapFolio(null)}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className=\"map-builder row collapse\">\r\n                    <div className=\"columns small-4 medium-4 large-3 scrollable list-column\">\r\n                        {help}\r\n                        <button onClick={() => this.props.addMapFolio()}>add a new map folio</button>\r\n                        {folios}\r\n                    </div>\r\n                    <div className=\"columns small-8 medium-8 large-9 scrollable\">\r\n                        {folio}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport InfoCard from '../info-card';\r\n\r\nexport default class CombatManagerCard extends React.Component {\r\n    render() {\r\n        return (\r\n            <InfoCard\r\n                getContent={() => (\r\n                    <div>\r\n                        <div className=\"section\">here you can run a combat encounter by specifying a party and an encounter</div>\r\n                        <div className=\"divider\"></div>\r\n                        <div className=\"section\">below you will see a list of encounters that you have paused</div>\r\n                        <div className=\"section\">you can resume a paused combat by selecting it</div>\r\n                    </div>\r\n                )}\r\n            />\r\n        );\r\n    };\r\n}","import React from 'react';\r\n\r\nimport { Combat } from '../../models/models';\r\n\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    combat: Combat;\r\n    selected: boolean;\r\n    setSelection: (combat: Combat) => void;\r\n}\r\n\r\nexport default class CombatListItem extends React.Component<Props> {\r\n    render() {\r\n        try {\r\n            var map = null;\r\n            if (this.props.combat.map) {\r\n                map = (\r\n                    <MapPanel\r\n                        map={this.props.combat.map}\r\n                        mode=\"thumbnail\"\r\n                        combatants={this.props.combat.combatants}\r\n                    />\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? \"list-item selected\" : \"list-item\"} onClick={() => this.props.setSelection(this.props.combat)}>\r\n                    <div className=\"heading\">{this.props.combat.name || \"unnamed combat\"}</div>\r\n                    <div className=\"text\">paused at {this.props.combat.timestamp}</div>\r\n                    {map}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport * as utils from '../../utils';\r\n\r\nimport { Combat, Combatant, Monster, PC, Notification, Condition, ConditionDurationSaves } from '../../models/models';\r\n\r\nimport PCCard from '../cards/pc-card';\r\nimport MonsterCard from '../cards/monster-card';\r\nimport InfoCard from '../cards/info-card';\r\nimport MapPanel from '../panels/map-panel';\r\nimport CardGroup from '../panels/card-group';\r\nimport CombatManagerCard from '../cards/information/combat-manager-card';\r\nimport CombatListItem from '../list-items/combat-list-item';\r\nimport Spin from '../controls/spin';\r\nimport HitPointGauge from '../panels/hit-point-gauge';\r\n\r\ninterface Props {\r\n    combats: Combat[];\r\n    combat: Combat | null;\r\n    showHelp: boolean;\r\n    createCombat: () => void;\r\n    resumeEncounter: (combat: Combat) => void;\r\n    close: (notification: Notification, removeCondition: boolean) => void;\r\n    mapAdd: (combatant: (Combatant & PC) | (Combatant & Monster), x: number, y: number) => void;\r\n    makeCurrent: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    makeActive: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    makeDefeated: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    removeCombatant: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    addCondition: (combatant: Combatant & Monster) => void;\r\n    editCondition: (combatant: Combatant & Monster, condition: Condition) => void;\r\n    removeCondition: (combatant: Combatant & Monster, conditionID: string) => void;\r\n    mapMove: (combatant: (Combatant & PC) | (Combatant & Monster), dir: string) => void;\r\n    mapRemove: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    endTurn: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    changeHP: (combatant: Combatant & Monster, hp: number, temp: number) => void;\r\n    changeValue: (source: {}, type: string, value: any) => void;\r\n    nudgeValue: (source: {}, type: string, delta: number) => void;\r\n}\r\n\r\ninterface State {\r\n    selectedTokenID: string | null;\r\n    addingToMapID: string | null;\r\n}\r\n\r\nexport default class CombatManagerScreen extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            selectedTokenID: null,  // The ID of the combatant that's selected\r\n            addingToMapID: null     // The ID of the combatant we're adding to the map\r\n        };\r\n    }\r\n\r\n    setSelectedTokenID(id: string | null) {\r\n        this.setState({\r\n            selectedTokenID: id\r\n        });\r\n    }\r\n\r\n    setAddingToMapID(id: string | null) {\r\n        this.setState({\r\n            addingToMapID: id\r\n        });\r\n    }\r\n\r\n    createCard(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        var mode = \"combat\";\r\n        if (this.props.combat && this.props.combat.map) {\r\n            mode += \" tactical\";\r\n            var onMap = this.props.combat.map.items.find(i => i.id === combatant.id);\r\n            mode += onMap ? \" on-map\" : \" off-map\";\r\n        }\r\n\r\n        switch (combatant.type) {\r\n            case \"pc\":\r\n                return (\r\n                    <PCCard\r\n                        key=\"selected\"\r\n                        combatant={combatant as Combatant & PC}\r\n                        mode={mode}\r\n                        changeValue={(combatant, type, value) => this.props.changeValue(combatant, type, value)}\r\n                        nudgeValue={(combatant, type, delta) => this.props.nudgeValue(combatant, type, delta)}\r\n                        makeCurrent={combatant => this.props.makeCurrent(combatant as Combatant & PC)}\r\n                        makeActive={combatant => this.props.makeActive(combatant as Combatant & PC)}\r\n                        makeDefeated={combatant => this.props.makeDefeated(combatant as Combatant & PC)}\r\n                        removeCombatant={combatant => this.props.removeCombatant(combatant as Combatant & PC)}\r\n                        mapAdd={combatant => this.setAddingToMapID(combatant.id)}\r\n                        mapMove={(combatant, dir) => this.props.mapMove(combatant as Combatant & PC, dir)}\r\n                        mapRemove={combatant => this.props.mapRemove(combatant as Combatant & PC)}\r\n                        endTurn={combatant => this.props.endTurn(combatant as Combatant & PC)}\r\n                    />\r\n                );\r\n            case \"monster\":\r\n                return (\r\n                    <MonsterCard\r\n                        key=\"selected\"\r\n                        combatant={combatant as Combatant & Monster}\r\n                        mode={mode}\r\n                        combat={this.props.combat as Combat}\r\n                        changeValue={(combatant, type, value) => this.props.changeValue(combatant, type, value)}\r\n                        nudgeValue={(combatant, type, delta) => this.props.nudgeValue(combatant, type, delta)}\r\n                        makeCurrent={combatant => this.props.makeCurrent(combatant as Combatant & Monster)}\r\n                        makeActive={combatant => this.props.makeActive(combatant as Combatant & Monster)}\r\n                        makeDefeated={combatant => this.props.makeDefeated(combatant as Combatant & Monster)}\r\n                        removeCombatant={combatant => this.props.removeCombatant(combatant as Combatant & Monster)}\r\n                        addCondition={(combatant) => this.props.addCondition(combatant as Combatant & Monster)}\r\n                        editCondition={(combatant, condition) => this.props.editCondition(combatant as Combatant & Monster, condition)}\r\n                        removeCondition={(combatant, conditionID) => this.props.removeCondition(combatant as Combatant & Monster, conditionID)}\r\n                        nudgeConditionValue={(condition, type, delta) => this.props.nudgeValue(condition, type, delta)}\r\n                        mapAdd={combatant => this.setAddingToMapID(combatant.id)}\r\n                        mapMove={(combatant, dir) => this.props.mapMove(combatant as Combatant & Monster, dir)}\r\n                        mapRemove={combatant => this.props.mapRemove(combatant as Combatant & Monster)}\r\n                        endTurn={(combatant) => this.props.endTurn(combatant as Combatant & Monster)}\r\n                        changeHP={(combatant, hp, temp) => this.props.changeHP(combatant as Combatant & Monster, hp, temp)}\r\n                    />\r\n                );\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    addCombatantToMap(x: number, y: number) {\r\n        if (this.props.combat) {\r\n            var combatant = this.props.combat.combatants.find(c => c.id === this.state.addingToMapID);\r\n            if (combatant) {\r\n                this.props.mapAdd(combatant, x, y);\r\n            }\r\n            this.setAddingToMapID(null);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        try {\r\n            var leftPaneContent = null;\r\n            var centrePaneContent = null;\r\n            var rightPaneContent = null;\r\n\r\n            if (this.props.combat) {\r\n                var current: JSX.Element[] = [];\r\n                var pending: JSX.Element[] = [];\r\n                var active: JSX.Element[] = [];\r\n                var defeated: JSX.Element[] = [];\r\n\r\n                this.props.combat.combatants.forEach(combatant => {\r\n                    if (combatant.current) {\r\n                        current.push(\r\n                            <div key={combatant.id}>\r\n                                {this.createCard(combatant)}\r\n                            </div>\r\n                        );\r\n                    }\r\n                    if (combatant.pending && !combatant.active && !combatant.defeated) {\r\n                        pending.push(\r\n                            <PendingCombatantRow\r\n                                key={combatant.id}\r\n                                combatant={combatant}\r\n                                select={combatant => this.setSelectedTokenID(combatant.id)}\r\n                                selected={combatant.id === this.state.selectedTokenID}\r\n                                nudgeValue={(combatant, type, delta) => this.props.nudgeValue(combatant, type, delta)}\r\n                                makeActive={combatant => this.props.makeActive(combatant)}\r\n                            />\r\n                        );\r\n                    }\r\n                    if (!combatant.pending && combatant.active && !combatant.defeated) {\r\n                        active.push(\r\n                            <CombatantRow\r\n                                key={combatant.id}\r\n                                combatant={combatant}\r\n                                combat={this.props.combat as Combat}\r\n                                select={combatant => this.setSelectedTokenID(combatant.id)}\r\n                                selected={combatant.id === this.state.selectedTokenID}\r\n                            />\r\n                        );\r\n                    }\r\n                    if (!combatant.pending && !combatant.active && combatant.defeated) {\r\n                        defeated.push(\r\n                            <CombatantRow\r\n                                key={combatant.id}\r\n                                combatant={combatant}\r\n                                combat={this.props.combat as Combat}\r\n                                select={combatant => this.setSelectedTokenID(combatant.id)}\r\n                                selected={combatant.id === this.state.selectedTokenID}\r\n                            />\r\n                        );\r\n                    }\r\n                });\r\n\r\n                if (this.props.showHelp && (pending.length !== 0)) {\r\n                    var pendingHelp = (\r\n                        <div key=\"pending-help\">\r\n                            <InfoCard\r\n                                getContent={() =>\r\n                                    <div>\r\n                                        <div className=\"section\">these combatants are not yet part of the encounter</div>\r\n                                        <div className=\"section\">set initiative on each of them, then add them to the encounter</div>\r\n                                    </div>\r\n                                }\r\n                            />\r\n                        </div>\r\n                    );\r\n                    pending = [pendingHelp].concat(pending);\r\n                }\r\n\r\n                if (this.props.showHelp && (current.length === 0)) {\r\n                    var activeHelp = (\r\n                        <div key=\"active-help\">\r\n                            <InfoCard\r\n                                getContent={() =>\r\n                                    <div>\r\n                                        <div className=\"section\">these are the combatants taking part in this encounter; you can select them to see their stat blocks (on the right)</div>\r\n                                        <div className=\"section\">to begin the encounter, select the first combatant and press the <b>start turn</b> button on their stat block</div>\r\n                                    </div>\r\n                                }\r\n                            />\r\n                        </div>\r\n                    );\r\n                    active = [activeHelp].concat(active);\r\n                }\r\n\r\n                if (current.length === 0) {\r\n                    current.push(\r\n                        <InfoCard\r\n                            key=\"current\"\r\n                            getContent={() =>\r\n                                <div className=\"section\">the current initiative holder will be displayed here</div>\r\n                            }\r\n                        />\r\n                    );\r\n                }\r\n\r\n                var notifications = this.props.combat.notifications.map(n =>\r\n                    <NotificationPanel\r\n                        key={n.id}\r\n                        notification={n}\r\n                        close={(notification, removeCondition) => this.props.close(notification, removeCondition)}\r\n                    />\r\n                );\r\n\r\n                var mapSection = null;\r\n                if (this.props.combat.map) {\r\n                    mapSection = (\r\n                        <MapPanel\r\n                            map={this.props.combat.map}\r\n                            mode=\"combat\"\r\n                            showOverlay={this.state.addingToMapID !== null}\r\n                            combatants={this.props.combat.combatants}\r\n                            selectedItemID={this.state.selectedTokenID ? this.state.selectedTokenID : undefined}\r\n                            setSelectedItemID={id => {\r\n                                if (id) {\r\n                                    this.setSelectedTokenID(id);\r\n                                }\r\n                            }}\r\n                            gridSquareClicked={(x, y) => this.addCombatantToMap(x, y)}\r\n                        />\r\n                    );\r\n                }\r\n\r\n                var selectedCombatant = null;\r\n                if (this.state.selectedTokenID) {\r\n                    var combatant = this.props.combat.combatants.find(c => c.id === this.state.selectedTokenID);\r\n                    if (combatant && !combatant.current) {\r\n                        selectedCombatant = this.createCard(combatant);\r\n                    }\r\n                }\r\n                if (!selectedCombatant) {\r\n                    selectedCombatant = (\r\n                        <InfoCard\r\n                            key=\"selected\"\r\n                            getContent={() =>\r\n                                <div className=\"section\">select a pc or monster to see its details here</div>\r\n                            }\r\n                        />\r\n                    );\r\n                }\r\n\r\n                leftPaneContent = (\r\n                    <div className=\"combat-left\">\r\n                        <CardGroup\r\n                            heading=\"initiative holder\"\r\n                            content={current}\r\n                        />\r\n                    </div>\r\n                );\r\n\r\n                centrePaneContent = (\r\n                    <div className=\"combat-centre\">\r\n                        {notifications}\r\n                        <CardGroup\r\n                            heading=\"waiting for intiative to be entered\"\r\n                            content={pending}\r\n                            hidden={pending.length === 0}\r\n                            showToggle={true}\r\n                        />\r\n                        {mapSection}\r\n                        <CardGroup\r\n                            heading=\"combatants in the encounter\"\r\n                            content={active}\r\n                            hidden={active.length === 0}\r\n                        />\r\n                        <CardGroup\r\n                            heading=\"defeated\"\r\n                            content={defeated}\r\n                            hidden={defeated.length === 0}\r\n                            showToggle={true}\r\n                        />\r\n                    </div>\r\n                );\r\n\r\n                rightPaneContent = (\r\n                    <div className=\"combat-right\">\r\n                        <CardGroup\r\n                            heading=\"selected combatant\"\r\n                            content={[selectedCombatant]}\r\n                        />\r\n                    </div>\r\n                );\r\n            } else {\r\n                var help = null;\r\n                if (this.props.showHelp) {\r\n                    help = (\r\n                        <CombatManagerCard />\r\n                    );\r\n                }\r\n\r\n                var combats: JSX.Element[] = [];\r\n                this.props.combats.forEach(combat => {\r\n                    combats.push(\r\n                        <CombatListItem\r\n                            key={combat.id}\r\n                            combat={combat}\r\n                            selected={false}\r\n                            setSelection={combat => this.props.resumeEncounter(combat)}\r\n                        />\r\n                    );\r\n                });\r\n\r\n                leftPaneContent = (\r\n                    <div className=\"combat-left\">\r\n                        {help}\r\n                        <button onClick={() => this.props.createCombat()}>start a new combat</button>\r\n                        {combats}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className=\"combat-manager row collapse\">\r\n                    <div className=\"columns small-4 medium-4 large-3 scrollable list-column\">\r\n                        {leftPaneContent}\r\n                    </div>\r\n                    <div className=\"columns small-4 medium-4 large-6 scrollable list-column\">\r\n                        {centrePaneContent}\r\n                    </div>\r\n                    <div className=\"columns small-4 medium-4 large-3 scrollable list-column\">\r\n                        {rightPaneContent}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface NotificationProps {\r\n    notification: Notification;\r\n    close: (notification: Notification, removeCondition: boolean) => void;\r\n}\r\n\r\nclass NotificationPanel extends React.Component<NotificationProps> {\r\n    saveSuccess(notification: Notification) {\r\n        // Reduce save by 1\r\n        var condition = this.props.notification.condition as Condition;\r\n        if (condition && condition.duration) {\r\n            if ((condition.duration.type === 'saves') || (condition.duration.type === 'rounds')) {\r\n                condition.duration.count -= 1;\r\n                if (condition.duration.count === 0) {\r\n                    // Remove the condition\r\n                    this.close(notification, true);\r\n                } else {\r\n                    this.close(notification);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    close(notification: Notification, removeCondition = false) {\r\n        this.props.close(notification, removeCondition);\r\n    }\r\n\r\n    render() {\r\n        var combatant = this.props.notification.combatant as (Combatant & Monster);\r\n        var condition = this.props.notification.condition as Condition;\r\n\r\n        var name = combatant.displayName || combatant.name || \"unnamed monster\";\r\n        switch (this.props.notification.type) {\r\n            case \"condition-save\":\r\n                var duration = condition.duration as ConditionDurationSaves;\r\n                return (\r\n                    <div key={this.props.notification.id} className=\"notification\">\r\n                        <div className=\"text\">\r\n                            {name} must make a {duration.saveType} save against dc {duration.saveDC}\r\n                        </div>\r\n                        <div className=\"buttons\">\r\n                            <button onClick={() => this.saveSuccess(this.props.notification)}>success</button>\r\n                            <button onClick={() => this.close(this.props.notification)}>ok</button>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            case \"condition-end\":\r\n                return (\r\n                    <div key={this.props.notification.id} className=\"notification\">\r\n                        <div className=\"text\">\r\n                            {name} is no longer affected by condition {condition.name}\r\n                        </div>\r\n                        <div className=\"buttons\">\r\n                            <button onClick={() => this.close(this.props.notification)}>ok</button>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface PendingCombatantRowProps {\r\n    combatant: (Combatant & PC) | (Combatant & Monster);\r\n    selected: boolean;\r\n    select: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    nudgeValue: (combatant: (Combatant & PC) | (Combatant & Monster), field: string, delta: number) => void;\r\n    makeActive: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n}\r\n\r\nclass PendingCombatantRow extends React.Component<PendingCombatantRowProps> {\r\n    getInformationText() {\r\n        if (this.props.selected) {\r\n            return \"selected\";\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    onClick(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (this.props.select) {\r\n            this.props.select(this.props.combatant);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        var style = \"combatant-row \" + this.props.combatant.type;\r\n        if (this.props.combatant.current || this.props.selected) {\r\n            style += \" highlight\";\r\n        }\r\n\r\n        return (\r\n            <div className={style} onClick={e => this.onClick(e)}>\r\n                <div className=\"name\">\r\n                    {this.props.combatant.displayName || this.props.combatant.name || \"combatant\"}\r\n                    <span className=\"info\">{this.getInformationText()}</span>\r\n                </div>\r\n                <div className=\"content\">\r\n                    <Spin\r\n                        source={this.props.combatant}\r\n                        name=\"initiative\"\r\n                        label=\"initiative\"\r\n                        nudgeValue={delta => this.props.nudgeValue(this.props.combatant, \"initiative\", delta)}\r\n                    />\r\n                    <button onClick={e => { e.stopPropagation(); this.props.makeActive(this.props.combatant); }}>add to encounter</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface CombatantRowProps {\r\n    combatant: (Combatant & PC) | (Combatant & Monster);\r\n    combat: Combat;\r\n    selected: boolean;\r\n    select: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n}\r\n\r\nclass CombatantRow extends React.Component<CombatantRowProps> {\r\n    getInformationText() {\r\n        if (this.props.combatant.current) {\r\n            return \"current turn\";\r\n        }\r\n\r\n        if (this.props.selected) {\r\n            return \"selected\";\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    onClick(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (this.props.select) {\r\n            this.props.select(this.props.combatant);\r\n        }\r\n    }\r\n\r\n    getContentPC(pc: Combatant & PC, notes: JSX.Element[]) {\r\n        return (\r\n            <div className=\"content\">\r\n                <div className=\"section key-stats\">\r\n                    <div className=\"key-stat\">\r\n                        <div className=\"stat-value\">{pc.initiative}</div>\r\n                        <div className=\"stat-label\">init</div>\r\n                    </div>\r\n                    <div className=\"key-stat wide\">\r\n                        <div className=\"stat-value\">{pc.player ? pc.player : \"-\"}</div>\r\n                    </div>\r\n                </div>\r\n                {notes}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    getContentMonster(monster: Combatant & Monster, notes: JSX.Element[]) {\r\n        var hp = (monster.hp ? monster.hp : 0).toString();\r\n        if (monster.hpTemp > 0) {\r\n            hp += \"+\" + monster.hpTemp;\r\n        }\r\n        var gauge = null;\r\n        if (!monster.pending) {\r\n            gauge = (\r\n                <HitPointGauge combatant={monster} />\r\n            );\r\n        }\r\n\r\n        var conditions = null;\r\n        if (this.props.combatant.conditions) {\r\n            conditions = this.props.combatant.conditions.map(c => {\r\n                var name = c.name;\r\n                if (c.name === \"exhaustion\") {\r\n                    name += \" (\" + c.level + \")\";\r\n                }\r\n                if ((c.name === \"custom\") && (c.text)) {\r\n                    name = c.text;\r\n                }\r\n                if (c.duration) {\r\n                    name += \" \" + utils.conditionDurationText(c, this.props.combat);\r\n                }\r\n                var description = [];\r\n                var text = utils.conditionText(c);\r\n                for (var n = 0; n !== text.length; ++n) {\r\n                    description.push(<li key={n} className=\"condition-text\">{text[n]}</li>);\r\n                }\r\n                return (\r\n                    <div key={c.id} className=\"condition\">\r\n                        <div className=\"condition-name\">{name}</div>\r\n                        <ul>\r\n                            {description}\r\n                        </ul>\r\n                    </div>\r\n                );\r\n            });\r\n        }\r\n\r\n        return (\r\n            <div className=\"content\">\r\n                <div className=\"section key-stats\">\r\n                    <div className=\"key-stat\">\r\n                        <div className=\"stat-value\">{monster.initiative}</div>\r\n                        <div className=\"stat-label\">init</div>\r\n                    </div>\r\n                    <div className=\"key-stat\">\r\n                        <div className=\"stat-value\">{monster.ac}</div>\r\n                        <div className=\"stat-label\">ac</div>\r\n                    </div>\r\n                    <div className=\"key-stat\">\r\n                        <div className=\"stat-value\">{hp}</div>\r\n                        <div className=\"stat-label\">hp</div>\r\n                    </div>\r\n                </div>\r\n                {gauge}\r\n                {conditions}\r\n                {notes}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        var notes = [];\r\n        if (this.props.combat.map) {\r\n            if (!this.props.combatant.pending && !this.props.combat.map.items.find(i => i.id === this.props.combatant.id)) {\r\n                notes.push(\r\n                    <div key=\"not-on-map\" className=\"note\">not on the map</div>\r\n                );\r\n            }\r\n        }\r\n\r\n        var content = null;\r\n\r\n        switch (this.props.combatant.type) {\r\n            case \"pc\":\r\n                content = this.getContentPC(this.props.combatant as Combatant & PC, notes);\r\n                break;\r\n            case \"monster\":\r\n                content = this.getContentMonster(this.props.combatant as Combatant & Monster, notes);\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        var style = \"combatant-row \" + this.props.combatant.type;\r\n        if (this.props.combatant.current || this.props.selected) {\r\n            style += \" highlight\";\r\n        }\r\n\r\n        return (\r\n            <div className={style} onClick={e => this.onClick(e)}>\r\n                <div className=\"name\">\r\n                    {this.props.combatant.displayName || this.props.combatant.name || \"combatant\"}\r\n                    <span className=\"info\">{this.getInformationText()}</span>\r\n                </div>\r\n                {content}\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nimport checked from \"../../resources/images/checked.svg\";\r\nimport unchecked from \"../../resources/images/unchecked.svg\";\r\n\r\ninterface Props {\r\n    label: string;\r\n    checked: boolean;\r\n    changeValue: (value: boolean) => void;\r\n    disabled: boolean;\r\n}\r\n\r\nexport default class Checkbox extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        disabled: false\r\n    };\r\n\r\n    click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        this.props.changeValue(!this.props.checked);\r\n    }\r\n\r\n    render() {\r\n        try {\r\n            return (\r\n                <div className={this.props.disabled ? \"checkbox disabled\" : \"checkbox\"} onClick={e => this.click(e)}>\r\n                    <img className=\"image\" src={this.props.checked ? checked : unchecked} alt=\"check\" />\r\n                    <div className=\"checkbox-label\">{this.props.label}</div>\r\n                </div>\r\n            );\r\n\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport Checkbox from '../controls/checkbox';\r\n\r\ninterface Props {\r\n    options: {\r\n        showHelp: boolean;\r\n    };\r\n    resetAll: () => void;\r\n    changeValue: (source: {}, field: string, value: any) => void;\r\n}\r\n\r\nexport default class AboutModal extends React.Component<Props> {\r\n    render() {\r\n        try {\r\n            return (\r\n                <div className=\"about\">\r\n                    <div className=\"row\">\r\n                        <div className=\"columns small-6 medium-6 large-6 list-column\">\r\n                            <div className=\"heading\">about</div>\r\n                            <div className=\"section\">dojo by <a href=\"mailto:andy.aiken@live.co.uk\">andy aiken</a></div>\r\n                            <div className=\"section\">if you would like to contribut to this project, you can do so <a href=\"https://github.com/andyaiken/dojo\" target=\"_blank\" rel=\"noopener noreferrer\">here</a></div>\r\n                            <div className=\"section\">dungeons and dragons copyright wizards of the coast</div>\r\n                        </div>\r\n                        <div className=\"columns small-6 medium-6 large-6 list-column\">\r\n                            <div className=\"heading\">options</div>\r\n                            <ConfirmButton text=\"clear all data\" callback={() => this.props.resetAll()} />\r\n                            <Checkbox\r\n                                label=\"show help cards\"\r\n                                checked={this.props.options.showHelp}\r\n                                changeValue={value => this.props.changeValue(this.props.options, \"showHelp\", value)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"columns small-12 medium-12 large-12 list-column\">\r\n                            <div className=\"heading\">open game license</div>\r\n                            <div className=\"section\">The following text is the property of Wizards of the Coast, Inc. and is Copyright 2000 Wizards of the Coast, Inc (\"Wizards\"). All Rights Reserved.</div>\r\n                            <ol>\r\n                                <li>Definitions: (a)\"Contributors\" means the copyright and/or trademark owners who have contributed Open Game Content; (b)\"Derivative Material\" means copyrighted material including derivative works and translations (including into other computer languages), potation, modification, correction, addition, extension, upgrade, improvement, compilation, abridgment or other form in which an existing work may be recast, transformed or adapted; (c) \"Distribute\" means to reproduce, license, rent, lease, sell, broadcast, publicly display, transmit or otherwise distribute; (d)\"Open Game Content\" means the game mechanic and includes the methods, procedures, processes and routines to the extent such content does not embody the Product Identity and is an enhancement over the prior art and any additional content clearly identified as Open Game Content by the Contributor, and means any work covered by this License, including translations and derivative works under copyright law, but specifically excludes Product Identity. (e) \"Product Identity\" means product and product line names, logos and identifying marks including trade dress; artifacts; creatures characters; stories, storylines, plots, thematic elements, dialogue, incidents, language, artwork, symbols, designs, depictions, likenesses, formats, poses, concepts, themes and graphic, photographic and other visual or audio representations; names and descriptions of characters, spells, enchantments, personalities, teams, personas, likenesses and special abilities; places, locations, environments, creatures, equipment, magical or supernatural abilities or effects, logos, symbols, or graphic designs; and any other trademark or registered trademark clearly identified as Product identity by the owner of the Product Identity, and which specifically excludes the Open Game Content; (f) \"Trademark\" means the logos, names, mark, sign, motto, designs that are used by a Contributor to identify itself or its products or the associated products contributed to the Open Game License by the Contributor (g) \"Use\", \"Used\" or \"Using\" means to use, Distribute, copy, edit, format, modify, translate and otherwise create Derivative Material of Open Game Content. (h) \"You\" or \"Your\" means the licensee in terms of this agreement.</li>\r\n                                <li>The License: This License applies to any Open Game Content that contains a notice indicating that the Open Game Content may only be Used under and in terms of this License. You must affix such a notice to any Open Game Content that you Use. No terms may be added to or subtracted from this License except as described by the License itself. No other terms or conditions may be applied to any Open Game Content distributed using this License.</li>\r\n                                <li>Offer and Acceptance: By Using the Open Game Content You indicate Your acceptance of the terms of this License.</li>\r\n                                <li>Grant and Consideration: In consideration for agreeing to use this License, the Contributors grant You a perpetual, worldwide, royalty-free, non-exclusive license with the exact terms of this License to Use, the Open Game Content.</li>\r\n                                <li>Representation of Authority to Contribute: If You are contributing original material as Open Game Content, You represent that Your Contributions are Your original creation and/or You have sufficient rights to grant the rights conveyed by this License.</li>\r\n                                <li>Notice of License Copyright: You must update the COPYRIGHT NOTICE portion of this License to include the exact text of the COPYRIGHT NOTICE of any Open Game Content You are copying, modifying or distributing, and You must add the title, the copyright date, and the copyright holder's name to the COPYRIGHT NOTICE of any original Open Game Content you Distribute.</li>\r\n                                <li>Use of Product Identity: You agree not to Use any Product Identity, including as an indication as to compatibility, except as expressly licensed in another, independent Agreement with the owner of each element of that Product Identity. You agree not to indicate compatibility or co-adaptability with any Trademark or Registered Trademark in conjunction with a work containing Open Game Content except as expressly licensed in another, independent Agreement with the owner of such Trademark or Registered Trademark. The use of any Product Identity in Open Game Content does not constitute a challenge to the ownership of that Product Identity. The owner of any Product Identity used in Open Game Content shall retain all rights, title and interest in and to that Product Identity.</li>\r\n                                <li>Identification: If you distribute Open Game Content You must clearly indicate which portions of the work that you are distributing are Open Game Content.</li>\r\n                                <li>Updating the License: Wizards or its designated Agents may publish updated versions of this License. You may use any authorized version of this License to copy, modify and distribute any Open Game Content originally distributed under any version of this License.</li>\r\n                                <li>Copy of this License: You MUST include a copy of this License with every copy of the Open Game Content You Distribute.</li>\r\n                                <li>Use of Contributor Credits: You may not market or advertise the Open Game Content using the name of any Contributor unless You have written permission from the Contributor to do so.</li>\r\n                                <li>Inability to Comply: If it is impossible for You to comply with any of the terms of this License with respect to some or all of the Open Game Content due to statute, judicial order, or governmental regulation then You may not Use any Open Game Material so affected.</li>\r\n                                <li>Termination: This License will terminate automatically if You fail to comply with all terms herein and fail to cure such breach within 30 days of becoming aware of the breach. All sublicenses shall survive the termination of this License.</li>\r\n                                <li>Reformation: If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable.</li>\r\n                                <li>COPYRIGHT NOTICE Open Game License v 1.0 Copyright 2000, Wizards of the Coast, Inc.</li>\r\n                            </ol>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\ninterface Props {\r\n    options: { id: string; text: string; disabled?: boolean }[];\r\n    selectedID: string | null;\r\n    select: (optionID: string) => void;\r\n    tabs: boolean;\r\n    disabled: boolean;\r\n    itemsPerRow: number;\r\n}\r\n\r\nexport default class Selector extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        tabs: false,\r\n        disabled: false,\r\n        itemsPerRow: null\r\n    };\r\n\r\n    render() {\r\n        try {\r\n            var style = this.props.tabs ? \"selector tabs\" : \"selector radio\";\r\n            if (this.props.disabled) {\r\n                style += \" disabled\";\r\n            }\r\n\r\n            var itemsPerRow = this.props.itemsPerRow ? this.props.itemsPerRow : this.props.options.length;\r\n            var rowCount = Math.ceil(this.props.options.length / itemsPerRow);\r\n            var rowContents: JSX.Element[][] = [];\r\n            for (var n = 0; n !== rowCount; ++n) {\r\n                rowContents.push([]);\r\n            }\r\n\r\n            this.props.options.forEach(option => {\r\n                var index = this.props.options.indexOf(option);\r\n                var rowIndex = Math.floor(index / itemsPerRow);\r\n                var row = rowContents[rowIndex];\r\n                row.push(\r\n                    <SelectorOption\r\n                        key={option.id}\r\n                        option={option}\r\n                        selected={option.id === this.props.selectedID}\r\n                        count={itemsPerRow}\r\n                        select={(optionID: string) => this.props.select(optionID)}\r\n                    />\r\n                );\r\n            });\r\n\r\n            var rowSections = rowContents.map(row => {\r\n                var index = rowContents.indexOf(row);\r\n                return <div key={index}>{row}</div>;\r\n            });\r\n\r\n            return (\r\n                <div className={style}>\r\n                    {rowSections}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface SelectorOptionInterface {\r\n    option: { id: string; text: string; disabled?: boolean };\r\n    selected: boolean;\r\n    count: number;\r\n    select: (optionID: string) => void;\r\n}\r\n\r\nclass SelectorOption extends React.Component<SelectorOptionInterface> {\r\n    click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (!this.props.option.disabled) {\r\n            this.props.select(this.props.option.id);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        try {\r\n            var width = \"calc(((100% - 1px) / \" + this.props.count + \") - 2px )\";\r\n\r\n            var style = \"option\";\r\n            if (this.props.selected) {\r\n                style += \" selected\";\r\n            }\r\n            if (this.props.option.disabled) {\r\n                style += \" disabled\";\r\n            }\r\n\r\n            return (\r\n                <div key={this.props.option.id} className={style} style={{ width: width }} title={this.props.option.text} onClick={e => this.click(e)}>\r\n                    {this.props.option.text}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport * as utils from '../../utils';\r\nimport { CATEGORY_TYPES, SIZE_TYPES, MonsterGroup, Monster } from '../../models/models';\r\n\r\nimport Selector from '../controls/selector';\r\n\r\ninterface Props {\r\n    library: MonsterGroup[];\r\n}\r\n\r\ninterface State {\r\n    chart: string;\r\n}\r\n\r\nexport default class DemographicsModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            chart: \"challenge\"\r\n        };\r\n    }\r\n\r\n    selectChart(chart: string) {\r\n        this.setState({\r\n            chart: chart\r\n        });\r\n    }\r\n\r\n    render() {\r\n        try {\r\n            var demographics = null;\r\n\r\n            var allMonsters: Monster[] = [];\r\n            this.props.library.forEach(group => group.monsters.forEach(monster => allMonsters.push(monster)));\r\n            if (allMonsters.length !== 0) {\r\n                var buckets: { value: any, title: string }[] = [];\r\n                var maxBucketSize = 0;\r\n                var monsters: { [key: string]: Monster[] } = {};\r\n\r\n                switch (this.state.chart) {\r\n                    case \"challenge\":\r\n                        var challenges = [0, 0.125, 0.25, 0.5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30];\r\n                        challenges.forEach(cr => {\r\n                            buckets.push({\r\n                                value: cr,\r\n                                title: \"challenge \" + utils.challenge(cr)\r\n                            })\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            var cr = bucket.value;\r\n                            monsters[cr.toString()] = allMonsters.filter(monster => monster.challenge === cr);\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            var cr = bucket.value;\r\n                            maxBucketSize = Math.max(monsters[cr].length, maxBucketSize);\r\n                        });\r\n                        break;\r\n                    case \"size\":\r\n                        SIZE_TYPES.forEach(size => {\r\n                            buckets.push({\r\n                                value: size,\r\n                                title: size\r\n                            })\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            var size = bucket.value;\r\n                            monsters[size.toString()] = allMonsters.filter(monster => monster.size === size);\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            var size = bucket.value;\r\n                            maxBucketSize = Math.max(monsters[size].length, maxBucketSize);\r\n                        });\r\n                        break;\r\n                    case \"type\":\r\n                        CATEGORY_TYPES.forEach(type => {\r\n                            buckets.push({\r\n                                value: type,\r\n                                title: type\r\n                            })\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            var type = bucket.value;\r\n                            monsters[type.toString()] = allMonsters.filter(monster => monster.category === type);\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            var type = bucket.value;\r\n                            maxBucketSize = Math.max(monsters[type].length, maxBucketSize);\r\n                        });\r\n                        break;\r\n                    default:\r\n                        // Do nothing\r\n                        break;\r\n                }\r\n\r\n                var bars = [];\r\n                for (var index = 0; index !== buckets.length; ++index) {\r\n                    var bucket = buckets[index];\r\n                    var set = monsters[bucket.value];\r\n                    var count = set ? set.length : 0;\r\n                    bars.push(\r\n                        <div\r\n                            key={bucket.title}\r\n                            className=\"bar-container\"\r\n                            style={{\r\n                                width: \"calc((100% - 1px) / \" + buckets.length + \")\",\r\n                                left: \"calc((100% - 1px) * \" + index + \" / \" + buckets.length + \")\"\r\n                            }}\r\n                            title={bucket.title + \": \" + set.length + \" monsters\"}>\r\n                            <div\r\n                                className=\"bar-space\"\r\n                                style={{\r\n                                    height: \"calc((100% - 1px) * \" + (maxBucketSize - count) + \" / \" + maxBucketSize + \")\"\r\n                                }}>\r\n                            </div>\r\n                            <div\r\n                                className=\"bar\"\r\n                                style={{\r\n                                    height: \"calc((100% - 1px) * \" + count + \" / \" + maxBucketSize + \")\"\r\n                                }}>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                };\r\n\r\n                var chartOptions = [\r\n                    {\r\n                        id: \"challenge\",\r\n                        text: \"challenge rating\"\r\n                    },\r\n                    {\r\n                        id: \"size\",\r\n                        text: \"size\"\r\n                    },\r\n                    {\r\n                        id: \"type\",\r\n                        text: \"type\"\r\n                    }\r\n                ]\r\n\r\n                demographics = (\r\n                    <div>\r\n                        <Selector\r\n                            options={chartOptions}\r\n                            selectedID={this.state.chart}\r\n                            select={optionID => this.selectChart(optionID)}\r\n                        />\r\n                        <div className=\"chart\">\r\n                            <div className=\"plot\">{bars}</div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return demographics;\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    };\r\n}","import React from 'react';\r\n\r\nimport * as utils from '../../utils';\r\nimport Factory from '../../models/factory';\r\n\r\nimport { TRAIT_TYPES, CATEGORY_TYPES, SIZE_TYPES, Monster, MonsterGroup, Trait } from '../../models/models';\r\n\r\nimport Checkbox from '../controls/checkbox';\r\nimport Dropdown from '../controls/dropdown';\r\nimport MonsterCard from '../cards/monster-card';\r\nimport Spin from '../controls/spin';\r\nimport AbilityScorePanel from '../panels/ability-score-panel';\r\nimport TraitsPanel from '../panels/traits-panel';\r\nimport Selector from '../controls/selector';\r\n\r\nimport arrow from \"../../resources/images/down-arrow.svg\";\r\n\r\ninterface Props {\r\n    monster: Monster;\r\n    library: MonsterGroup[];\r\n    showMonsters: boolean;\r\n}\r\n\r\ninterface State {\r\n    monster: Monster;\r\n    page: 'overview' | 'abilities' | 'combat' | 'actions';\r\n    showFilter: boolean;\r\n    helpSection: string;\r\n    filter: {\r\n        size: boolean,\r\n        type: boolean,\r\n        subtype: boolean,\r\n        alignment: boolean,\r\n        challenge: boolean\r\n    };\r\n}\r\n\r\nexport default class MonsterEditorModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            monster: props.monster,\r\n            page: \"overview\",\r\n            showFilter: false,\r\n            helpSection: \"speed\",\r\n            filter: {\r\n                size: true,\r\n                type: true,\r\n                subtype: false,\r\n                alignment: false,\r\n                challenge: true,\r\n            }\r\n        };\r\n    }\r\n\r\n    setPage(page: 'overview' | 'abilities' | 'combat' | 'actions') {\r\n        var sections = this.getHelpOptionsForPage(page);\r\n        this.setState({\r\n            page: page,\r\n            helpSection: sections[0]\r\n        });\r\n    }\r\n\r\n    toggleFilter() {\r\n        this.setState({\r\n            showFilter: !this.state.showFilter\r\n        });\r\n    }\r\n\r\n    setHelpSection(section: string) {\r\n        this.setState({\r\n            helpSection: section\r\n        });\r\n    }\r\n\r\n    toggleMatch(type: 'size' | 'type' | 'subtype' | 'alignment' | 'challenge') {\r\n        // eslint-disable-next-line\r\n        this.state.filter[type] = !this.state.filter[type];\r\n        this.setState({\r\n            filter: this.state.filter\r\n        });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Helper methods\r\n\r\n    getHelpOptionsForPage(page: 'overview' | 'abilities' | 'combat' | 'actions') {\r\n        switch (page) {\r\n            case \"overview\":\r\n                return [\"speed\", \"senses\", \"languages\", \"equipment\"];\r\n            case \"abilities\":\r\n                return [\"str\", \"dex\", \"con\", \"int\", \"wis\", \"cha\", \"saves\", \"skills\"];\r\n            case \"combat\":\r\n                return [\"armor class\", \"hit dice\", \"resistances\", \"vulnerabilities\", \"immunities\", \"conditions\"];\r\n            case \"actions\":\r\n                return [\"actions\"];\r\n            default:\r\n                return [];\r\n        }\r\n    }\r\n\r\n    getMonsters() {\r\n        var monsters: Monster[] = [];\r\n        this.props.library.forEach(group => {\r\n            group.monsters.forEach(monster => {\r\n                var match = true;\r\n\r\n                if (this.state.monster.id === monster.id) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.filter.size && (this.state.monster.size !== monster.size)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.filter.type && (this.state.monster.category !== monster.category)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.filter.subtype && (this.state.monster.tag !== monster.tag)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.filter.alignment && (this.state.monster.alignment !== monster.alignment)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.filter.challenge && (this.state.monster.challenge !== monster.challenge)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (match) {\r\n                    monsters.push(monster);\r\n                }\r\n            })\r\n        });\r\n\r\n        return monsters;\r\n    }\r\n\r\n    setRandomValue(field: string, monsters: Monster[], notify: boolean) {\r\n        var index = Math.floor(Math.random() * monsters.length);\r\n        var m = monsters[index];\r\n\r\n        var source: any = m;\r\n        var value = null;\r\n        var tokens = field.split(\".\");\r\n        tokens.forEach(token => {\r\n            if (token === tokens[tokens.length - 1]) {\r\n                value = source[token];\r\n            } else {\r\n                source = source[token];\r\n            }\r\n        });\r\n\r\n        this.changeValue(field, value, notify);\r\n    }\r\n\r\n    geneSplice(monsters: Monster[]) {\r\n        [\r\n            \"speed\",\r\n            \"senses\",\r\n            \"languages\",\r\n            \"equipment\",\r\n            \"abilityScores.str\",\r\n            \"abilityScores.dex\",\r\n            \"abilityScores.con\",\r\n            \"abilityScores.int\",\r\n            \"abilityScores.wis\",\r\n            \"abilityScores.cha\",\r\n            \"savingThrows\",\r\n            \"skills\",\r\n            \"ac\",\r\n            \"hitDice\",\r\n            \"damage.resist\",\r\n            \"damage.vulnerable\",\r\n            \"damage.immune\",\r\n            \"conditionImmunities\"\r\n        ].forEach(field => {\r\n            this.setRandomValue(field, monsters, false);\r\n        });\r\n\r\n        TRAIT_TYPES.forEach(type => {\r\n            // Clear current traits of this type\r\n            var current = this.state.monster.traits.filter(t => t.type === type);\r\n            current.forEach(c => {\r\n                var index = this.state.monster.traits.findIndex(t => t === c);\r\n                this.state.monster.traits.splice(index, 1);\r\n            })\r\n\r\n            // Get all traits of this type\r\n            var traits: Trait[] = [];\r\n            monsters.forEach(m => {\r\n                m.traits.filter(t => t.type === type)\r\n                    .forEach(t => traits.push(t));\r\n            });\r\n\r\n            // Collate by name\r\n            var distinct: { trait: Trait, count: number }[] = [];\r\n            traits.forEach(t => {\r\n                var current = distinct.find(d => d.trait.name === t.name);\r\n                if (current) {\r\n                    current.count += 1;\r\n                } else {\r\n                    distinct.push({\r\n                        trait: t,\r\n                        count: 1\r\n                    });\r\n                }\r\n            });\r\n\r\n            // If any are common to all monsters, copy them and remove from the candidates\r\n            var addedIDs: string[] = [];\r\n            distinct.filter(d => d.count === monsters.length)\r\n                .forEach(d => {\r\n                    this.copyTrait(d.trait);\r\n                    addedIDs.push(d.trait.id);\r\n                });\r\n            addedIDs.forEach(id => {\r\n                var index = distinct.findIndex(d => d.trait.id === id);\r\n                distinct.splice(index, 1);\r\n            });\r\n\r\n            var avg = traits.length / monsters.length;\r\n            while (this.state.monster.traits.filter(t => t.type === type).length < avg) {\r\n                var index = Math.floor(Math.random() * distinct.length);\r\n                var t = distinct[index].trait;\r\n                this.copyTrait(t);\r\n                distinct.splice(index, 1);\r\n            }\r\n        });\r\n\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    addTrait(type: 'trait' | 'action' | 'legendary' | 'lair' | 'regional') {\r\n        var trait = Factory.createTrait();\r\n        trait.type = type;\r\n        trait.name = \"New \" + this.getActionTypeName(type, false).toLowerCase();\r\n        this.state.monster.traits.push(trait);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    addRandomTrait(type: string, monsters: Monster[]) {\r\n        var traits: Trait[] = [];\r\n        monsters.forEach(m => {\r\n            m.traits.filter(t => t.type === type)\r\n                .forEach(t => {\r\n                    traits.push(t);\r\n                });\r\n        });\r\n\r\n        var index = Math.floor(Math.random() * traits.length);\r\n        var trait = traits[index];\r\n\r\n        this.copyTrait(trait);\r\n    }\r\n\r\n    removeTrait(trait: Trait) {\r\n        var index = this.state.monster.traits.indexOf(trait);\r\n        this.state.monster.traits.splice(index, 1);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    getActionTypeName(type: string, plural: boolean) {\r\n        var name = utils.traitType(type);\r\n        if (plural) {\r\n            name += \"s\";\r\n        }\r\n        return name;\r\n    }\r\n\r\n    copyTrait(trait: Trait) {\r\n        var copy = JSON.parse(JSON.stringify(trait));\r\n        copy.id = utils.guid();\r\n        this.state.monster.traits.push(copy);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    changeTrait(trait: Trait, field: 'name' | 'usage' | 'type' | 'text', value: string) {\r\n        trait[field] = value;\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    nudgeValue(field: string, delta: number) {\r\n        var source: any = this.state.monster;\r\n        var value: any = null;\r\n        var tokens = field.split(\".\");\r\n        tokens.forEach(token => {\r\n            if (token === tokens[tokens.length - 1]) {\r\n                value = source[token];\r\n            } else {\r\n                source = source[token];\r\n            }\r\n        });\r\n\r\n        var newValue = null;\r\n        if (field === \"challenge\") {\r\n            newValue = utils.nudgeChallenge(value, delta);\r\n        } else {\r\n            newValue = (value ? value : 0) + delta;\r\n        }\r\n\r\n        this.changeValue(field, newValue);\r\n    }\r\n\r\n    changeValue(field: string, value: any, notify = true) {\r\n        var source: any = this.state.monster;\r\n        var tokens = field.split(\".\");\r\n        tokens.forEach(token => {\r\n            if (token === tokens[tokens.length - 1]) {\r\n                source[token] = value;\r\n\r\n                if ((field === \"abilityScores.con\") || (field === \"size\") || (field === \"hitDice\")) {\r\n                    var sides = utils.hitDieType(this.state.monster.size);\r\n                    var conMod = Math.floor((this.state.monster.abilityScores.con - 10) / 2)\r\n                    var hpPerDie = ((sides + 1) / 2) + conMod;\r\n                    var hp = Math.floor(this.state.monster.hitDice * hpPerDie);\r\n                    // eslint-disable-next-line\r\n                    this.state.monster.hpMax = hp;\r\n                }  \r\n\r\n                if (notify) {\r\n                    this.setState({\r\n                        monster: this.state.monster\r\n                    });\r\n                }\r\n            } else {\r\n                source = source[token];\r\n            }\r\n        });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // HTML render methods\r\n\r\n    getHelpSection(monsters: Monster[]) {\r\n        switch (this.state.helpSection) {\r\n            case \"speed\":\r\n                return this.getValueSection(\"speed\", \"text\", monsters);\r\n            case \"senses\":\r\n                return this.getValueSection(\"senses\", \"text\", monsters);\r\n            case \"languages\":\r\n                return this.getValueSection(\"languages\", \"text\", monsters);\r\n            case \"equipment\":\r\n                return this.getValueSection(\"equipment\", \"text\", monsters);\r\n            case \"str\":\r\n                return this.getValueSection(\"abilityScores.str\", \"number\", monsters);\r\n            case \"dex\":\r\n                return this.getValueSection(\"abilityScores.dex\", \"number\", monsters);\r\n            case \"con\":\r\n                return this.getValueSection(\"abilityScores.con\", \"number\", monsters);\r\n            case \"int\":\r\n                return this.getValueSection(\"abilityScores.int\", \"number\", monsters);\r\n            case \"wis\":\r\n                return this.getValueSection(\"abilityScores.wis\", \"number\", monsters);\r\n            case \"cha\":\r\n                return this.getValueSection(\"abilityScores.cha\", \"number\", monsters);\r\n            case \"saves\":\r\n                return this.getValueSection(\"savingThrows\", \"text\", monsters);\r\n            case \"skills\":\r\n                return this.getValueSection(\"skills\", \"text\", monsters);\r\n            case \"armor class\":\r\n                return this.getValueSection(\"ac\", \"number\", monsters);\r\n            case \"hit dice\":\r\n                return this.getValueSection(\"hitDice\", \"number\", monsters);\r\n            case \"resistances\":\r\n                return this.getValueSection(\"damage.resist\", \"text\", monsters);\r\n            case \"vulnerabilities\":\r\n                return this.getValueSection(\"damage.vulnerable\", \"text\", monsters);\r\n            case \"immunities\":\r\n                return this.getValueSection(\"damage.immune\", \"text\", monsters);\r\n            case \"conditions\":\r\n                return this.getValueSection(\"conditionImmunities\", \"text\", monsters);\r\n            case \"actions\":\r\n                return this.getActionsSection(monsters);\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    getValueSection(field: string, dataType: 'text' | 'number', monsters: Monster[]) {\r\n        var values: any[] = monsters\r\n            .map(m => {\r\n                var tokens = field.split(\".\");\r\n                var source: any = m;\r\n                var value = null;\r\n                tokens.forEach(token => {\r\n                    if (token === tokens[tokens.length - 1]) {\r\n                        value = source[token];\r\n                    } else {\r\n                        source = source[token];\r\n                    }\r\n                });\r\n                if ((dataType === \"text\") && (value === \"\")) {\r\n                    value = null;\r\n                }\r\n                return value;\r\n            })\r\n            .filter(v => v !== null);\r\n\r\n        var distinct: { value: any, count: number }[] = [];\r\n        if (dataType === \"number\") {\r\n            var min: number | null = null;\r\n            var max: number | null = null;\r\n            values.forEach(v => {\r\n                if ((min === null) || (v < min)) {\r\n                    min = v;\r\n                }\r\n                if ((max === null) || (v > max)) {\r\n                    max = v;\r\n                }\r\n            });\r\n            if ((min !== null) && (max !== null)) {\r\n                for (var n = min; n <= max; ++n) {\r\n                    distinct.push({\r\n                        value: n,\r\n                        count: 0\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        values.forEach(v => {\r\n            var current = distinct.find(d => d.value === v);\r\n            if (current) {\r\n                current.count += 1;\r\n            } else {\r\n                distinct.push({\r\n                    value: v,\r\n                    count: 1\r\n                });\r\n            }\r\n        });\r\n\r\n        switch (dataType) {\r\n            case \"number\":\r\n                utils.sortByValue(distinct);\r\n                break;\r\n            case \"text\":\r\n                utils.sortByCount(distinct);\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        if (dataType === \"text\") {\r\n            var count = monsters.length - values.length;\r\n            if (count !== 0) {\r\n                distinct.push({\r\n                    value: \"\",\r\n                    count: monsters.length - values.length\r\n                });\r\n            }\r\n        }\r\n\r\n        var valueSections = distinct.map(d => {\r\n            var width = 100 * d.count / monsters.length;\r\n            return (\r\n                <div className=\"row small-up-3 medium-up-3 large-up-3 value-list\" key={distinct.indexOf(d)}>\r\n                    <div className=\"column\">\r\n                        <div className=\"text-container\">\r\n                            {d.value || \"(none specified)\"}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"column\">\r\n                        <div className=\"bar-container\">\r\n                            <div className=\"bar\" style={{ width: width + \"%\" }}></div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"column\">\r\n                        <button onClick={() => this.changeValue(field, d.value)}>use this value</button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                {valueSections}\r\n                <button onClick={() => this.setRandomValue(field, monsters, true)}>select random value</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    getActionsSection(monsters: Monster[]) {\r\n        var rows = [];\r\n        rows.push(\r\n            <div className=\"row small-up-3 medium-up-3 large-up-3 value-list\" key=\"header\">\r\n                <div className=\"column\">\r\n                    <div className=\"text-container\">\r\n                        <b>type</b>\r\n                    </div>\r\n                </div>\r\n                <div className=\"column\">\r\n                    <div className=\"text-container number\">\r\n                        <b>average number</b>\r\n                    </div>\r\n                </div>\r\n                <div className=\"column\">\r\n                    <div className=\"text-container number\">\r\n                        <b>min - max</b>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        TRAIT_TYPES.forEach(type => {\r\n            var min: number | null = null;\r\n            var max: number | null = null;\r\n            var count = 0;\r\n            monsters.forEach(m => {\r\n                var n = m.traits.filter(t => t.type === type).length;\r\n                if ((min === null) || (n < min)) {\r\n                    min = n;\r\n                }\r\n                if ((max === null) || (n > max)) {\r\n                    max = n;\r\n                }\r\n                count += n;\r\n            });\r\n            var avg = Math.round(count / monsters.length);    \r\n\r\n            rows.push(\r\n                <div className=\"row small-up-4 medium-up-4 large-up-4 value-list\" key={type}>\r\n                    <div className=\"column\">\r\n                        <div className={count === 0 ? \"text-container disabled\" : \"text-container\"}>\r\n                            {this.getActionTypeName(type, true)}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"column\">\r\n                        <div className={count === 0 ? \"text-container number disabled\" : \"text-container number\"}>\r\n                            {avg}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"column\">\r\n                        <div className={count === 0 ? \"text-container number disabled\" : \"text-container number\"}>\r\n                            {min} - {max}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"column\">\r\n                        <button className={count === 0 ? \"disabled\" : \"\"} onClick={() => this.addRandomTrait(type, monsters)}>add random</button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                {rows}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    getFilterCard(monsters: Monster[]) {\r\n        var similar = (\r\n            <div className=\"section\">\r\n                {monsters.length} similar monsters\r\n            </div>\r\n        );\r\n\r\n        var filterContent = null;\r\n        if (this.state.showFilter) {\r\n            filterContent = (\r\n                <div>\r\n                    <Checkbox\r\n                        label={\"size \" + this.state.monster.size}\r\n                        checked={this.state.filter.size}\r\n                        changeValue={value => this.toggleMatch(\"size\")}\r\n                    />\r\n                    <Checkbox\r\n                        label={\"type \" + this.state.monster.category}\r\n                        checked={this.state.filter.type}\r\n                        changeValue={value => this.toggleMatch(\"type\")}\r\n                    />\r\n                    <Checkbox\r\n                        label={this.state.monster.tag ? \"subtype \" + this.state.monster.tag : \"subtype\"}\r\n                        checked={this.state.filter.subtype}\r\n                        disabled={!this.state.monster.tag}\r\n                        changeValue={value => this.toggleMatch(\"subtype\")}\r\n                    />\r\n                    <Checkbox\r\n                        label={this.state.monster.alignment ? \"alignment \" + this.state.monster.alignment : \"alignment\"}\r\n                        checked={this.state.filter.alignment}\r\n                        disabled={!this.state.monster.alignment}\r\n                        changeValue={value => this.toggleMatch(\"alignment\")}\r\n                    />\r\n                    <Checkbox\r\n                        label={\"challenge rating \" + utils.challenge(this.state.monster.challenge)}\r\n                        checked={this.state.filter.challenge}\r\n                        changeValue={value => this.toggleMatch(\"challenge\")}\r\n                    />\r\n                    <div className=\"divider\"></div>\r\n                    <button className={monsters.length < 2 ? \"disabled\" : \"\"} onClick={() => this.geneSplice(monsters)}>build random monster</button>\r\n                    <div className=\"divider\"></div>\r\n                    {similar}\r\n                </div>\r\n            );\r\n        } else {\r\n            filterContent = (\r\n                <div>\r\n                    {similar}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className=\"section\">\r\n                <div className=\"card\">\r\n                    <div className=\"heading\">\r\n                        <div className=\"title\">similar monsters</div>\r\n                        <img className={this.state.showFilter ? \"image rotate\" : \"image\"} src={arrow} alt=\"arrow\" onClick={() => this.toggleFilter()} />\r\n                    </div>\r\n                    <div className=\"card-content\">\r\n                        {filterContent}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    getMonsterCards(monsters: Monster[]) {\r\n        var sorted = utils.sort(monsters);\r\n        var monsterCards = sorted.map(m => (\r\n            <div className=\"section\" key={m.id}>\r\n                <MonsterCard\r\n                    combatant={m}\r\n                    mode={\"template \" + this.state.page}\r\n                    copyTrait={trait => this.copyTrait(trait)}\r\n                />\r\n            </div>\r\n        ));\r\n\r\n        return monsterCards;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    render() {\r\n        try {\r\n            var pages = [\r\n                {\r\n                    id: 'overview',\r\n                    text: 'overview'\r\n                },\r\n                {\r\n                    id: 'abilities',\r\n                    text: 'abilities'\r\n                },\r\n                {\r\n                    id: 'combat',\r\n                    text: 'combat'\r\n                },\r\n                {\r\n                    id: 'actions',\r\n                    text: 'actions'\r\n                },\r\n            ];\r\n\r\n            var monsters: Monster[] = [];\r\n            if (this.props.showMonsters) {\r\n                monsters = this.getMonsters();\r\n            }\r\n\r\n            var content = null;\r\n            switch (this.state.page) {\r\n                case 'overview':\r\n                    var catOptions = CATEGORY_TYPES.map(cat => { return { id: cat, text: cat }; });\r\n                    var sizeOptions = SIZE_TYPES.map(size => { return { id: size, text: size }; });\r\n\r\n                    content = (\r\n                        <div className=\"row\">\r\n                            <div className=\"columns small-6 medium-6 large-6\">\r\n                                <div className=\"subheading\">name</div>\r\n                                <input type=\"text\" value={this.state.monster.name} onChange={event => this.changeValue(\"name\", event.target.value)} />\r\n                                <div className=\"subheading\">size</div>\r\n                                <Dropdown\r\n                                    options={sizeOptions}\r\n                                    selectedID={this.state.monster.size}\r\n                                    select={optionID => this.changeValue(\"size\", optionID)}\r\n                                />\r\n                                <div className=\"subheading\">type</div>\r\n                                <Dropdown\r\n                                    options={catOptions}\r\n                                    selectedID={this.state.monster.category}\r\n                                    select={optionID => this.changeValue(\"category\", optionID)}\r\n                                />\r\n                                <div className=\"subheading\">subtype</div>\r\n                                <input type=\"text\" value={this.state.monster.tag} onChange={event => this.changeValue(\"tag\", event.target.value)} />\r\n                                <div className=\"subheading\">alignment</div>\r\n                                <input type=\"text\" value={this.state.monster.alignment} onChange={event => this.changeValue(\"alignment\", event.target.value)} />\r\n                            </div>\r\n                            <div className=\"columns small-6 medium-6 large-6\">\r\n                                <div className=\"subheading\">challenge rating</div>\r\n                                <Spin\r\n                                    source={this.state.monster}\r\n                                    name=\"challenge\"\r\n                                    display={value => utils.challenge(value)}\r\n                                    nudgeValue={delta => this.nudgeValue(\"challenge\", delta)}\r\n                                />\r\n                                <div className=\"subheading\">speed</div>\r\n                                <input type=\"text\" value={this.state.monster.speed} onChange={event => this.changeValue(\"speed\", event.target.value)} />\r\n                                <div className=\"subheading\">senses</div>\r\n                                <input type=\"text\" value={this.state.monster.senses} onChange={event => this.changeValue(\"senses\", event.target.value)} />\r\n                                <div className=\"subheading\">languages</div>\r\n                                <input type=\"text\" value={this.state.monster.languages} onChange={event => this.changeValue(\"languages\", event.target.value)} />\r\n                                <div className=\"subheading\">equipment</div>\r\n                                <input type=\"text\" value={this.state.monster.equipment} onChange={event => this.changeValue(\"equipment\", event.target.value)} />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                    break;\r\n                case 'abilities':\r\n                    content = (\r\n                        <div className=\"row\">\r\n                            <div className=\"columns small-6 medium-6 large-6\">\r\n                                <div className=\"subheading\">ability scores</div>\r\n                                <AbilityScorePanel\r\n                                    edit={true}\r\n                                    combatant={this.state.monster}\r\n                                    nudgeValue={(source, type, delta) => this.nudgeValue(type, delta)}\r\n                                />\r\n                            </div>\r\n                            <div className=\"columns small-6 medium-6 large-6\">\r\n                                <div className=\"subheading\">saving throws</div>\r\n                                <input type=\"text\" value={this.state.monster.savingThrows} onChange={event => this.changeValue(\"savingThrows\", event.target.value)} />\r\n                                <div className=\"subheading\">skills</div>\r\n                                <input type=\"text\" value={this.state.monster.skills} onChange={event => this.changeValue(\"skills\", event.target.value)} />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                    break;\r\n                case 'combat':\r\n                    content = (\r\n                        <div className=\"row\">\r\n                            <div className=\"columns small-6 medium-6 large-6\">\r\n                                <div className=\"subheading\">armor class</div>\r\n                                <Spin\r\n                                    source={this.state.monster}\r\n                                    name=\"ac\"\r\n                                    nudgeValue={delta => this.nudgeValue(\"ac\", delta)}\r\n                                />\r\n                                <div className=\"subheading\">hit dice</div>\r\n                                <Spin\r\n                                    source={this.state.monster}\r\n                                    name=\"hitDice\"\r\n                                    display={value => value + \"d\" + utils.hitDieType(this.state.monster.size)}\r\n                                    nudgeValue={delta => this.nudgeValue(\"hitDice\", delta)}\r\n                                />\r\n                                <div className=\"subheading\">hit points</div>\r\n                                <div className=\"hp-value\">{this.state.monster.hpMax} hp</div>\r\n                            </div>\r\n                            <div className=\"columns small-6 medium-6 large-6\">\r\n                                <div className=\"subheading\">damage resistances</div>\r\n                                <input type=\"text\" value={this.state.monster.damage.resist} onChange={event => this.changeValue(\"damage.resist\", event.target.value)} />\r\n                                <div className=\"subheading\">damage vulnerabilities</div>\r\n                                <input type=\"text\" value={this.state.monster.damage.vulnerable} onChange={event => this.changeValue(\"damage.vulnerable\", event.target.value)} />\r\n                                <div className=\"subheading\">damage immunities</div>\r\n                                <input type=\"text\" value={this.state.monster.damage.immune} onChange={event => this.changeValue(\"damage.immune\", event.target.value)} />\r\n                                <div className=\"subheading\">condition immunities</div>\r\n                                <input type=\"text\" value={this.state.monster.conditionImmunities} onChange={event => this.changeValue(\"conditionImmunities\", event.target.value)} />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                    break;\r\n                case 'actions':\r\n                    content = (\r\n                        <TraitsPanel\r\n                            combatant={this.state.monster}\r\n                            mode='edit'\r\n                            addTrait={type => this.addTrait(type)}\r\n                            removeTrait={trait => this.removeTrait(trait)}\r\n                            changeTrait={(trait, type, value) => this.changeTrait(trait, type, value)}\r\n                        />\r\n                    );\r\n                    break;\r\n                default:\r\n                    // Do nothing\r\n                    break;\r\n            }\r\n\r\n            var help = null;\r\n            if (this.props.showMonsters && (monsters.length > 1)) {\r\n                var selector = null;\r\n                if (this.getHelpOptionsForPage(this.state.page).length > 1) {\r\n                    var options = this.getHelpOptionsForPage(this.state.page).map(s => {\r\n                        return {\r\n                            id: s,\r\n                            text: s\r\n                        };\r\n                    });\r\n                    selector = (\r\n                        <Selector\r\n                            tabs={false}\r\n                            options={options}\r\n                            selectedID={this.state.helpSection}\r\n                            select={optionID => this.setHelpSection(optionID)}\r\n                        />\r\n                    );\r\n                }\r\n\r\n                help = (\r\n                    <div className=\"monster-help\">\r\n                        <div className=\"subheading\">information from similar monsters</div>\r\n                        {selector}\r\n                        {this.getHelpSection(monsters)}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            var monsterList = null;\r\n            if (this.props.showMonsters) {\r\n                monsterList = (\r\n                    <div className=\"columns small-4 medium-4 large-4 scrollable\">\r\n                        {this.getFilterCard(monsters)}\r\n                        {this.getMonsterCards(monsters)}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className=\"row\" style={{ height: \"100%\", margin: \"0 -15px\" }}>\r\n                    <div className={this.props.showMonsters ? \"columns small-8 medium-8 large-8 scrollable\" : \"columns small-12 medium-12 large-12 scrollable\"} style={{ transition: \"none\" }}>\r\n                        <div className=\"section\">\r\n                            <Selector\r\n                                tabs={true}\r\n                                options={pages}\r\n                                selectedID={this.state.page}\r\n                                select={optionID => this.setPage(optionID as 'overview' | 'abilities' | 'combat' | 'actions')}\r\n                            />\r\n                            {content}\r\n                            {help}\r\n                        </div>\r\n                    </div>\r\n                    {monsterList}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport { TERRAIN_TYPES, MapItem } from '../../models/models';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport Radial from '../controls/radial';\r\n\r\ninterface Props {\r\n    tile: MapItem;\r\n    changeValue: (tile: MapItem, field: string, value: string) => void;\r\n    moveMapItem: (tile: MapItem, dir: string) => void;\r\n    resizeMapItem: (tile: MapItem, dir: string, dir2: 'in' | 'out' | null) => void;\r\n    cloneMapItem: (tile: MapItem) => void;\r\n    removeMapItem: (tile: MapItem) => void;\r\n}\r\n\r\nexport default class MapTileCard extends React.Component<Props> {\r\n    render() {\r\n        try {\r\n            var terrainOptions = TERRAIN_TYPES.map(function (t) {\r\n                return { id: t, text: t };\r\n            });\r\n\r\n            return (\r\n                <div className=\"card map-tile\">\r\n                    <div className=\"heading\">\r\n                        <div className=\"title\">map tile</div>\r\n                    </div>\r\n                    <div className=\"card-content\">\r\n                        <div className=\"subheading\">size</div>\r\n                        <div className=\"section\">{this.props.tile.width} sq x {this.props.tile.height} sq</div>\r\n                        <div className=\"section\">{this.props.tile.width * 5} ft x {this.props.tile.height * 5} ft</div>\r\n                        <div className=\"divider\"></div>\r\n                        <div className=\"subheading\">terrain</div>\r\n                        <Dropdown\r\n                            options={terrainOptions}\r\n                            placeholder=\"select terrain\"\r\n                            selectedID={this.props.tile.terrain ? this.props.tile.terrain : undefined}\r\n                            select={optionID => this.props.changeValue(this.props.tile, \"terrain\", optionID)}\r\n                        />\r\n                        <div className=\"divider\"></div>\r\n                        <div className=\"subheading\">move</div>\r\n                        <div className=\"section centered\">\r\n                            <Radial direction=\"out\" click={dir => this.props.moveMapItem(this.props.tile, dir)} />\r\n                        </div>\r\n                        <div className=\"divider\"></div>\r\n                        <div className=\"subheading\">resize</div>\r\n                        <div className=\"section centered\">\r\n                            <Radial direction=\"both\" click={(dir, dir2) => this.props.resizeMapItem(this.props.tile, dir, dir2)} />\r\n                        </div>\r\n                        <div className=\"divider\"></div>\r\n                        <div className=\"section\">\r\n                            <button onClick={() => this.props.cloneMapItem(this.props.tile)}>clone tile</button>\r\n                            <button onClick={() => this.props.removeMapItem(this.props.tile)}>remove tile</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    };\r\n}","import React from 'react';\r\n\r\nimport * as utils from '../../utils';\r\nimport Factory from '../../models/factory';\r\n\r\nimport { Map, MapItem } from '../../models/models';\r\n\r\nimport MapTileCard from '../cards/map-tile-card';\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    map: Map;\r\n}\r\n\r\ninterface State {\r\n    map: Map;\r\n    selectedTileID: string | null;\r\n}\r\n\r\nexport default class MapEditorModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            map: props.map,\r\n            selectedTileID: null\r\n        };\r\n    }\r\n\r\n    setSelectedTileID(id: string | null) {\r\n        this.setState({\r\n            selectedTileID: id\r\n        });\r\n    }\r\n\r\n    addMapTile(x: number, y: number) {\r\n        var tile = Factory.createMapItem();\r\n        tile.x = x;\r\n        tile.y = y;\r\n        tile.terrain = \"flagstone\";\r\n        this.state.map.items.push(tile);\r\n\r\n        this.setState({\r\n            map: this.state.map,\r\n            selectedTileID: tile.id\r\n        });\r\n    }\r\n\r\n    moveMapItem(item: MapItem, dir: string) {\r\n        switch (dir) {\r\n            case \"N\":\r\n                item.y -= 1;\r\n                break;\r\n            case \"E\":\r\n                item.x += 1;\r\n                break;\r\n            case \"S\":\r\n                item.y += 1;\r\n                break;\r\n            case \"W\":\r\n                item.x -= 1;\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    bigMapItem(item: MapItem, dir: string) {\r\n        switch (dir) {\r\n            case \"N\":\r\n                item.y -= 1;\r\n                item.height += 1;\r\n                break;\r\n            case \"E\":\r\n                item.width += 1;\r\n                break;\r\n            case \"S\":\r\n                item.height += 1;\r\n                break;\r\n            case \"W\":\r\n                item.x -= 1;\r\n                item.width += 1;\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    smallMapItem(item: MapItem, dir: string) {\r\n        switch (dir) {\r\n            case \"N\":\r\n                if (item.height > 1) {\r\n                    item.y += 1;\r\n                    item.height -= 1;\r\n                }\r\n                break;\r\n            case \"E\":\r\n                if (item.width > 1) {\r\n                    item.width -= 1;\r\n                }\r\n                break;\r\n            case \"S\":\r\n                if (item.height > 1) {\r\n                    item.height -= 1;\r\n                }\r\n                break;\r\n            case \"W\":\r\n                if (item.width > 1) {\r\n                    item.x += 1;\r\n                    item.width -= 1;\r\n                }\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    resizeMapItem(item: MapItem, dir: string, dir2: 'in' | 'out') {\r\n        switch (dir2) {\r\n            case \"in\":\r\n                this.smallMapItem(item, dir);\r\n                break;\r\n            case \"out\":\r\n                this.bigMapItem(item, dir);\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n    }\r\n\r\n    cloneMapItem(item: MapItem) {\r\n        var copy = JSON.parse(JSON.stringify(item));\r\n        copy.id = utils.guid();\r\n        copy.x += 1;\r\n        copy.y += 1;\r\n        this.state.map.items.push(copy);\r\n\r\n        this.setState({\r\n            map: this.state.map,\r\n            selectedTileID: copy.id\r\n        });\r\n    }\r\n\r\n    removeMapItem(item: MapItem) {\r\n        var index = this.state.map.items.indexOf(item);\r\n        this.state.map.items.splice(index, 1);\r\n\r\n        this.setState({\r\n            map: this.state.map,\r\n            selectedTileID: null\r\n        });\r\n    }\r\n\r\n    changeValue(source: any, field: string, value: any) {\r\n        source[field] = value;\r\n        \r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    render() {\r\n        try {\r\n            var tools = null;\r\n            if (this.state.selectedTileID) {\r\n                var item = this.state.map.items.find(i => i.id === this.state.selectedTileID);\r\n                if (item) {\r\n                    tools = (\r\n                        <div className=\"tools\">\r\n                            <MapTileCard\r\n                                tile={item}\r\n                                moveMapItem={(item, dir) => this.moveMapItem(item, dir)}\r\n                                resizeMapItem={(item, dir, dir2) => this.resizeMapItem(item, dir, dir2 as 'in' | 'out')}\r\n                                cloneMapItem={item => this.cloneMapItem(item)}\r\n                                removeMapItem={item => this.removeMapItem(item)}\r\n                                changeValue={(source, field, value) => this.changeValue(source, field, value)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                }\r\n            } else {\r\n                tools = (\r\n                    <div className=\"tools\">\r\n                        <p>to add a new tile to the map, double-click on an empty grid square</p>\r\n                        <p>to edit an existing tile, click on it once to select it</p>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className=\"map-editor\">\r\n                    {tools}\r\n                    <MapPanel\r\n                        map={this.state.map}\r\n                        mode=\"edit\"\r\n                        selectedItemID={this.state.selectedTileID ? this.state.selectedTileID : undefined}\r\n                        setSelectedItemID={id => this.setSelectedTileID(id)}\r\n                        addMapTile={(x, y) => this.addMapTile(x, y)}\r\n                    />\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport * as utils from '../../utils';\r\n\r\nimport { CombatSetup, Encounter, Party, MapFolio, Monster, EncounterWave, EncounterSlot } from '../../models/models';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport Selector from '../controls/selector';\r\nimport MapPanel from '../panels/map-panel';\r\nimport DifficultyChartPanel from '../panels/difficulty-chart-panel';\r\n\r\ninterface Props {\r\n    combatSetup: CombatSetup;\r\n    parties: Party[];\r\n    encounters: Encounter[];\r\n    mapFolios: MapFolio[];\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n    notify: () => void;\r\n}\r\n\r\ninterface State {\r\n    combatSetup: CombatSetup;\r\n}\r\n\r\nexport default class CombatStartModal extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        parties: null,\r\n        mapFolios: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            combatSetup: props.combatSetup\r\n        }\r\n    }\r\n\r\n    setParty(partyID: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.partyID = partyID;\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        }, () => this.props.notify());\r\n    }\r\n\r\n    setEncounter(encounterID: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.encounterID = encounterID;\r\n        var enc = this.props.encounters.find(enc => enc.id === encounterID);\r\n        if (enc) {\r\n            // eslint-disable-next-line\r\n            this.state.combatSetup.monsterNames = utils.getMonsterNames(enc);\r\n        }\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        }, () => this.props.notify());\r\n    }\r\n\r\n    setFolioID(id: string) {\r\n        if (id && (id !== '')) {\r\n            var folio = this.props.mapFolios.find(f => f.id === id);\r\n            if (folio) {\r\n                // eslint-disable-next-line\r\n                this.state.combatSetup.folioID = folio.id;\r\n                // eslint-disable-next-line\r\n                this.state.combatSetup.mapID = folio.maps.length === 1 ? folio.maps[0].id : null;\r\n            }\r\n        } else {\r\n            // eslint-disable-next-line\r\n            this.state.combatSetup.folioID = null;\r\n            // eslint-disable-next-line\r\n            this.state.combatSetup.mapID = null;    \r\n        }\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        });\r\n    }\r\n\r\n    setMapID(id: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.mapID = id;\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        });\r\n    }\r\n\r\n    setWave(waveID: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.waveID = waveID;\r\n        var enc = this.props.encounters.find(enc => enc.id === this.state.combatSetup.encounterID);\r\n        if (enc) {\r\n            var wave = enc.waves.find(w => w.id === waveID);\r\n            if (wave) {\r\n                // eslint-disable-next-line\r\n                this.state.combatSetup.monsterNames = utils.getMonsterNames(wave);\r\n            }\r\n        }\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        }, () => this.props.notify());\r\n    }\r\n\r\n    setEncounterInitMode(mode: 'manual' | 'individual' | 'group') {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.encounterInitMode = mode;\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        });\r\n    }\r\n\r\n    changeName(slotID: string, index: number, name: string) {\r\n        var slot = this.state.combatSetup.monsterNames.find(s => s.id === slotID);\r\n        if (slot) {\r\n            slot.names[index] = name;\r\n            this.setState({\r\n                combatSetup: this.state.combatSetup\r\n            });\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    getPartySection() {\r\n        if (this.props.parties.length === 0) {\r\n            return (\r\n                <div className=\"section\">you have not defined any parties</div>\r\n            );\r\n        }\r\n\r\n        var partyOptions = this.props.parties.map(party => {\r\n            return {\r\n                id: party.id,\r\n                text: party.name || \"unnamed party\"\r\n            };\r\n        });\r\n\r\n        var partyContent = null;\r\n        if (this.state.combatSetup.partyID) {\r\n            var selectedParty = this.props.parties.find(p => p.id === this.state.combatSetup.partyID);\r\n            if (selectedParty) {\r\n                var pcs = selectedParty.pcs.filter(pc => pc.active);\r\n\r\n                var pcSections = pcs.map(pc => \r\n                    <li key={pc.id}>\r\n                        {pc.name || \"unnamed pc\"} (level {pc.level})\r\n                    </li>\r\n                );\r\n\r\n                if (pcSections.length === 0) {\r\n                    pcSections.push(\r\n                        <li key={\"empty\"}>no pcs</li>\r\n                    );\r\n                }\r\n        \r\n                partyContent = (\r\n                    <div>\r\n                        <div className=\"subheading\">pcs</div>\r\n                        <ul>{pcSections}</ul>\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"heading\">party</div>\r\n                <Dropdown\r\n                    options={partyOptions}\r\n                    placeholder=\"select party...\"\r\n                    selectedID={this.state.combatSetup.partyID ? this.state.combatSetup.partyID : undefined}\r\n                    select={optionID => this.setParty(optionID)}\r\n                />\r\n                {partyContent}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    getEncounterSection() {\r\n        if (this.props.encounters.length === 0) {\r\n            return (\r\n                <div className=\"section\">you have not built any encounters</div>\r\n            );\r\n        }\r\n\r\n        var encounterOptions = this.props.encounters.map(encounter => {\r\n            return {\r\n                id: encounter.id,\r\n                text: encounter.name || \"unnamed encounter\"\r\n            }\r\n        });\r\n\r\n        var encounterContent = null;\r\n        if (this.state.combatSetup.encounterID) {\r\n            var selectedEncounter = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n            if (selectedEncounter) {\r\n                var monsterSections = selectedEncounter.slots.map(slot => {\r\n                    var name = slot.monsterName || \"unnamed monster\";\r\n                    if (slot.count > 1) {\r\n                        name += \" (x\" + slot.count + \")\";\r\n                    }\r\n                    return (\r\n                        <li key={slot.id}>{name}</li>\r\n                    );\r\n                });\r\n\r\n                if (monsterSections.length === 0) {\r\n                    monsterSections.push(\r\n                        <li key={\"empty\"}>no monsters</li>\r\n                    );\r\n                }\r\n\r\n                var waves = selectedEncounter.waves.map(wave => {\r\n                    if (wave.slots.length === 0) {\r\n                        return null;\r\n                    }\r\n\r\n                    var waveMonsters = wave.slots.map(slot => {\r\n                        var name = slot.monsterName || \"unnamed monster\";\r\n                        if (slot.count > 1) {\r\n                            name += \" x\" + slot.count;\r\n                        }\r\n                        return (\r\n                            <li key={slot.id}>{name}</li>\r\n                        );\r\n                    });\r\n        \r\n                    return (\r\n                        <div key={wave.id}>\r\n                            <div className=\"subheading\">{wave.name || \"unnamed wave\"}</div>\r\n                            <ul>{waveMonsters}</ul>\r\n                        </div>\r\n                    );\r\n                });\r\n        \r\n                encounterContent = (\r\n                    <div>\r\n                        <div className=\"subheading\">monsters</div>\r\n                        <ul>{monsterSections}</ul>\r\n                        {waves}\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"heading\">encounter</div>\r\n                <Dropdown\r\n                    options={encounterOptions}\r\n                    placeholder=\"select encounter...\"\r\n                    selectedID={this.state.combatSetup.encounterID ? this.state.combatSetup.encounterID : undefined}\r\n                    select={optionID => this.setEncounter(optionID)}\r\n                />\r\n                {encounterContent}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    getMapSection() {\r\n        var folios = this.props.mapFolios.filter(folio => folio.maps.length > 0);\r\n        if (folios.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        var folioOptions = [{\r\n            id: '',\r\n            text: \"none\"\r\n        }].concat(folios.map(folio => {\r\n            return {\r\n                id: folio.id,\r\n                text:folio.name || \"unnamed folio\"\r\n            };\r\n        }));\r\n\r\n        var selectMapSection = null;\r\n        var thumbnailSection = null;\r\n\r\n        if (this.state.combatSetup.folioID) {\r\n            var folio = this.props.mapFolios.find(f => f.id === this.state.combatSetup.folioID);\r\n            if (folio) {\r\n                var mapOptions = folio.maps.map(m => {\r\n                    return {\r\n                        id: m.id,\r\n                        text: m.name || \"unnamed map\"\r\n                    };\r\n                });            \r\n\r\n                if (mapOptions.length !== 1) {\r\n                    selectMapSection = (\r\n                        <Selector\r\n                            options={mapOptions}\r\n                            selectedID={this.state.combatSetup.mapID}\r\n                            select={optionID => this.setMapID(optionID)}\r\n                        />\r\n                    );\r\n                }\r\n\r\n                if (this.state.combatSetup.mapID) {\r\n                    var map = folio.maps.find(m => m.id === this.state.combatSetup.mapID);\r\n                    if (map) {\r\n                        thumbnailSection = (\r\n                            <MapPanel\r\n                                map={map}\r\n                                mode=\"thumbnail\"\r\n                            />\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"heading\">map</div>\r\n                <Dropdown\r\n                    options={folioOptions}\r\n                    placeholder=\"select map folio...\"\r\n                    selectedID={this.state.combatSetup.folioID ? this.state.combatSetup.folioID : undefined}\r\n                    select={optionID => this.setFolioID(optionID)}\r\n                />\r\n                {selectMapSection}\r\n                {thumbnailSection}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    getWaveSection() {\r\n        if (this.state.combatSetup.encounterID === null) {\r\n            return (\r\n                <div className=\"section\">you have not selected an encounter</div>\r\n            );\r\n        }\r\n\r\n        var selectedEncounter = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n        if (selectedEncounter) {\r\n            if (selectedEncounter.waves.length === 0) {\r\n                return (\r\n                    <div className=\"section\">you have not defined any waves</div>\r\n                );\r\n            }\r\n\r\n            var waveOptions = selectedEncounter.waves.map(wave => {\r\n                return {\r\n                    id: wave.id,\r\n                    text: wave.name || \"unnamed wave\"\r\n                };\r\n            });\r\n\r\n            var waveContent = null;\r\n            if (this.state.combatSetup.waveID) {\r\n                var selectedWave = selectedEncounter.waves.find(w => w.id === this.state.combatSetup.waveID);\r\n                if (selectedWave) {\r\n                    var monsterSections = selectedWave.slots.map(slot => {\r\n                        var name = slot.monsterName || \"unnamed monster\";\r\n                        if (slot.count > 1) {\r\n                            name += \" (x\" + slot.count + \")\";\r\n                        }\r\n                        return (\r\n                            <li key={slot.id}>{name}</li>\r\n                        );\r\n                    });\r\n\r\n                    if (monsterSections.length === 0) {\r\n                        monsterSections.push(\r\n                            <li key={\"empty\"}>no monsters</li>\r\n                        );\r\n                    }\r\n            \r\n                    waveContent = (\r\n                        <div>\r\n                            <div className=\"subheading\">monsters</div>\r\n                            <ul>{monsterSections}</ul>\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n\r\n            return (\r\n                <div>\r\n                    <div className=\"heading\">wave</div>\r\n                    <Dropdown\r\n                        options={waveOptions}\r\n                        placeholder=\"select wave...\"\r\n                        selectedID={this.state.combatSetup.waveID ? this.state.combatSetup.waveID : undefined}\r\n                        select={optionID => this.setWave(optionID)}\r\n                    />\r\n                    {waveContent}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    getDifficultySection() {\r\n        var party = this.props.parties.find(p => p.id === this.state.combatSetup.partyID);\r\n        var encounter = this.props.encounters.find(enc => enc.id === this.state.combatSetup.encounterID);\r\n\r\n        if (party && encounter) {\r\n            return (\r\n                <div>\r\n                    <div className=\"heading\">encounter difficulty</div>\r\n                    <DifficultyChartPanel\r\n                        party={party}\r\n                        encounter={encounter}\r\n                        getMonster={(monsterName, monsterGroupName) => this.props.getMonster(monsterName, monsterGroupName)}\r\n                    />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"heading\">encounter difficulty</div>\r\n                <div className=\"section\">select a party and an encounter on the left to see difficulty information.</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    getMonsterSection() {\r\n        if (this.state.combatSetup.encounterID === null) {\r\n            return (\r\n                <div>\r\n                    <div className=\"heading\">monsters</div>\r\n                    <div className=\"section\">select an encounter to see monster options here.</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (!this.props.parties && this.state.combatSetup.waveID === null) {\r\n            return (\r\n                <div>\r\n                    <div className=\"heading\">monsters</div>\r\n                    <div className=\"section\">select a wave to see monster options here.</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        var selectedEncounter = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n        if (selectedEncounter) {\r\n            var slotsContainer: { slots: EncounterSlot[] } = selectedEncounter;\r\n            if (this.state.combatSetup.waveID) {\r\n                var selectedWave = selectedEncounter.waves.find(w => w.id === this.state.combatSetup.waveID);\r\n                if (selectedWave) {\r\n                    slotsContainer = selectedWave;\r\n                }\r\n            }\r\n\r\n            if (slotsContainer.slots.length === 0) {\r\n                return null;\r\n            }\r\n\r\n            var initOptions = [\r\n                {\r\n                    id: \"manual\",\r\n                    text: \"enter manually\"\r\n                },\r\n                {\r\n                    id: \"individual\",\r\n                    text: \"roll individually\"\r\n                },\r\n                {\r\n                    id: \"group\",\r\n                    text: \"roll in groups\"\r\n                }\r\n            ];\r\n\r\n            var names = this.state.combatSetup.monsterNames.map(slotNames => {\r\n                var slot = slotsContainer.slots.find(s => s.id === slotNames.id);\r\n                if (slot) {\r\n                    var inputs = [];\r\n                    for (var n = 0; n !== slotNames.names.length; ++n) {\r\n                        inputs.push(\r\n                            <div key={n}>\r\n                                <MonsterName\r\n                                    value={slotNames.names[n]}\r\n                                    slotID={slot.id}\r\n                                    index={n}\r\n                                    changeName={(slotID, index, value) => this.changeName(slotID, index, value)}\r\n                                />\r\n                            </div>\r\n                        );\r\n                    }\r\n                    return (\r\n                        <div key={slotNames.id} className=\"name-row\">\r\n                            <div className=\"name-label\">\r\n                                {slot.monsterName}\r\n                            </div>\r\n                            <div className=\"name-inputs\">\r\n                                {inputs}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n            });\r\n\r\n            return (\r\n                <div>\r\n                    <div className=\"heading\">monsters</div>\r\n                    <div className=\"subheading\">initiative</div>\r\n                    <Selector\r\n                        options={initOptions}\r\n                        selectedID={this.state.combatSetup.encounterInitMode}\r\n                        select={optionID => this.setEncounterInitMode(optionID as 'manual' | 'individual' | 'group')}\r\n                    />\r\n                    <div className=\"subheading\">names</div>\r\n                    <div>{names}</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    render() {\r\n        try {\r\n            var leftSection = null;\r\n            var rightSection = null;\r\n\r\n            if (this.props.parties) {\r\n                leftSection = (\r\n                    <div>\r\n                        {this.getPartySection()}\r\n                        {this.getEncounterSection()}\r\n                        {this.getMapSection()}\r\n                    </div>\r\n                );\r\n    \r\n                rightSection = (\r\n                    <div>\r\n                        {this.getDifficultySection()}\r\n                        {this.getMonsterSection()}\r\n                    </div>\r\n                );\r\n            } else {\r\n                leftSection = (\r\n                    <div>\r\n                        {this.getWaveSection()}\r\n                    </div>\r\n                );\r\n    \r\n                rightSection = (\r\n                    <div>\r\n                        {this.getMonsterSection()}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className=\"row\" style={{ height: \"100%\", margin: \"0 -15px\" }}>\r\n                    <div className=\"column small-6 medium-6 large-6 scrollable\">\r\n                        {leftSection}\r\n                    </div>\r\n                    <div className=\"column small-6 medium-6 large-6 scrollable\">\r\n                        {rightSection}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface MonsterNameProps {\r\n    slotID: string;\r\n    index: number;\r\n    value: string;\r\n    changeName: (slotID: string, index: number, value: string) => void;\r\n}\r\n\r\nclass MonsterName extends React.Component<MonsterNameProps> {\r\n    render() {\r\n        return (\r\n            <input type=\"text\" value={this.props.value} onChange={event => this.props.changeName(this.props.slotID, this.props.index, event.target.value)} />\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\ninterface Props {\r\n    items: { id: string; text: string; details: JSX.Element | string; disabled?: boolean }[];\r\n    selectedItemID: string | null;\r\n    select: (itemID: string) => void;\r\n}\r\n\r\nexport default class RadioGroup extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        // No default property values\r\n    };\r\n\r\n    render() {\r\n        try {\r\n            var content = this.props.items.map(item => {\r\n                return (\r\n                    <RadioGroupItem\r\n                        key={item.id}\r\n                        item={item}\r\n                        selected={this.props.selectedItemID === item.id}\r\n                        select={(itemID: string) => this.props.select(itemID)}\r\n                    />\r\n                );\r\n            });\r\n\r\n            return (\r\n                <div className=\"radio-group\">\r\n                    {content}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface RadioGroupItemProps {\r\n    item: { id: string; text: string; details: JSX.Element | string; disabled?: boolean };\r\n    selected: boolean;\r\n    select: (itemID: string) => void;\r\n}\r\n\r\nclass RadioGroupItem extends React.Component<RadioGroupItemProps> {\r\n    render() {\r\n        var style = \"radio-item\";\r\n        var details = null;\r\n\r\n        if (this.props.selected) {\r\n            style += \" selected\";\r\n            details = (\r\n                <div className=\"radio-item-details\">\r\n                    {this.props.item.details}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (this.props.item.disabled) {\r\n            style += \" disabled\";\r\n        }\r\n\r\n        return (\r\n            <div className={style} onClick={() => this.props.select(this.props.item.id)}>\r\n                <div className=\"radio-item-text\">{this.props.item.text}</div>\r\n                {details}\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nimport * as utils from '../../utils';\r\nimport Factory from '../../models/factory';\r\n\r\nimport { CONDITION_TYPES, Condition, Monster, Combatant, Combat, ConditionDurationSaves, ConditionDurationCombatant } from '../../models/models';\r\n\r\nimport Spin from '../controls/spin';\r\nimport Selector from '../controls/selector';\r\nimport Dropdown from '../controls/dropdown';\r\nimport RadioGroup from '../controls/radio-group';\r\n\r\ninterface Props {\r\n    condition: Condition;\r\n    combatant: Combatant & Monster;\r\n    combat: Combat;\r\n}\r\n\r\ninterface State {\r\n    condition: Condition;\r\n}\r\n\r\nexport default class ConditionModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            condition: props.condition,\r\n        };\r\n    }\r\n\r\n    setCondition(conditionName: string) {\r\n        // eslint-disable-next-line\r\n        this.state.condition.name = conditionName;\r\n        // eslint-disable-next-line\r\n        this.state.condition.level = 1;\r\n        // eslint-disable-next-line\r\n        this.state.condition.text = conditionName === \"custom\" ? \"custom condition\" : null;\r\n\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    setDuration(durationType: 'saves' | 'combatant' | 'rounds') {\r\n        var duration = null;\r\n\r\n        switch (durationType) {\r\n            case \"saves\":\r\n                duration = Factory.createConditionDurationSaves();\r\n                break;\r\n            case \"combatant\":\r\n                duration = Factory.createConditionDurationCombatant();\r\n                break;\r\n            case \"rounds\":\r\n                duration = Factory.createConditionDurationRounds();\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        // eslint-disable-next-line\r\n        this.state.condition.duration = duration;\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    changeValue(object: any, field: string, value: any) {\r\n        object[field] = value;\r\n\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    nudgeValue(object: any, field: string, delta: number) {\r\n        var value = object[field] + delta;\r\n        if (field === \"level\") {\r\n            value = Math.max(value, 1);\r\n            value = Math.min(value, 6);\r\n        }\r\n        if (field === \"count\") {\r\n            value = Math.max(value, 1);\r\n        }\r\n        if (field === \"saveDC\") {\r\n            value = Math.max(value, 0);\r\n        }\r\n        object[field] = value;\r\n\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    render() {\r\n        try {\r\n            var conditions = CONDITION_TYPES.map(condition => {\r\n                var controls = [];\r\n                var description = [];\r\n                if (condition === this.state.condition.name) {\r\n                    if (condition === \"custom\") {\r\n                        controls.push(\r\n                            <input type=\"text\" placeholder=\"custom condition\" value={this.state.condition.text ? this.state.condition.text : ''} onChange={event => this.changeValue(this.state.condition, \"text\", event.target.value)} />\r\n                        );\r\n                    }\r\n                    if (condition === \"exhaustion\") {\r\n                        controls.push(\r\n                            <Spin\r\n                                key=\"exhaustion-spin\"\r\n                                source={this.props.condition}\r\n                                name=\"level\"\r\n                                label=\"exhaustion\"\r\n                                nudgeValue={delta => this.nudgeValue(this.props.condition, \"level\", delta)}\r\n                            />\r\n                        );\r\n                    }\r\n                    var text = utils.conditionText(this.state.condition);\r\n                    for (var n = 0; n !== text.length; ++n) {\r\n                        description.push(<li key={n} className=\"section\">{text[n]}</li>);\r\n                    }\r\n                }\r\n\r\n                return {\r\n                    id: condition,\r\n                    text: condition,\r\n                    details: (\r\n                        <div key={condition}>\r\n                            {controls}\r\n                            <ul>\r\n                                {description}\r\n                            </ul>\r\n                        </div>\r\n                    ),\r\n                    disabled: this.props.combatant.conditionImmunities ? this.props.combatant.conditionImmunities.indexOf(condition) !== -1 : false\r\n                };\r\n            });\r\n\r\n            var saveOptions = [\"str\", \"dex\", \"con\", \"int\", \"wis\", \"cha\", \"death\"].map(c => { return { id: c, text: c }; });\r\n            var pointOptions = [\r\n                {\r\n                    id: \"start\",\r\n                    text: \"start of turn\"\r\n                },\r\n                {\r\n                    id: \"end\",\r\n                    text: \"end of turn\"\r\n                }\r\n            ]\r\n            var combatantOptions = this.props.combat.combatants.map(c => { return { id: c.id, text: (c.displayName || c.name || \"unnamed monster\") }; });\r\n\r\n            var durations = [\r\n                {\r\n                    id: \"none\",\r\n                    text: \"until removed (default)\",\r\n                    details: (\r\n                        <div className=\"section\">\r\n                            <div>the condition persists until it is manually removed</div>\r\n                        </div>\r\n                    )\r\n                },\r\n                {\r\n                    id: \"saves\",\r\n                    text: \"until a successful save\",\r\n                    details: (\r\n                        <div>\r\n                            <div className=\"section\">\r\n                                <div className=\"subheading\">number of saves required</div>\r\n                                <Spin\r\n                                    source={this.props.condition.duration}\r\n                                    name=\"count\"\r\n                                    nudgeValue={delta => this.nudgeValue(this.props.condition.duration, \"count\", delta)}\r\n                                />\r\n                            </div>\r\n                            <div className=\"section\">\r\n                                <div className=\"subheading\">save dc</div>\r\n                                <Spin\r\n                                    source={this.props.condition.duration}\r\n                                    name=\"saveDC\"\r\n                                    nudgeValue={delta => this.nudgeValue(this.props.condition.duration, \"saveDC\", delta)}\r\n                                />\r\n                            </div>\r\n                            <div className=\"section\">\r\n                                <div className=\"subheading\">type of save</div>\r\n                                <Selector\r\n                                    options={saveOptions}\r\n                                    selectedID={(this.props.condition.duration as ConditionDurationSaves) ? (this.props.condition.duration as ConditionDurationSaves).saveType : null}\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, \"saveType\", optionID)}\r\n                                />\r\n                            </div>\r\n                            <div className=\"section\">\r\n                                <div className=\"subheading\">make the save at the start or end of the turn</div>\r\n                                <Selector\r\n                                    options={pointOptions}\r\n                                    selectedID={(this.props.condition.duration as ConditionDurationSaves) ? (this.props.condition.duration as ConditionDurationSaves).point : null}\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, \"point\", optionID)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                },\r\n                {\r\n                    id: \"combatant\",\r\n                    text: \"until someone's next turn\",\r\n                    details: (\r\n                        <div>\r\n                            <div className=\"section\">\r\n                                <div className=\"subheading\">combatant</div>\r\n                                <Dropdown\r\n                                    options={combatantOptions}\r\n                                    selectedID={(this.props.condition.duration as ConditionDurationCombatant) ? (this.props.condition.duration as ConditionDurationCombatant).combatantID || undefined : undefined}\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, \"combatantID\", optionID)}\r\n                                />\r\n                            </div>\r\n                            <div className=\"section\">\r\n                                <div className=\"subheading\">start or end of the turn</div>\r\n                                <Selector\r\n                                    options={pointOptions}\r\n                                    selectedID={(this.props.condition.duration as ConditionDurationCombatant) ? (this.props.condition.duration as ConditionDurationCombatant).point : null}\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, \"point\", optionID)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                },\r\n                {\r\n                    id: \"rounds\",\r\n                    text: \"for a number of rounds\",\r\n                    details: (\r\n                        <div>\r\n                            <div className=\"section\">\r\n                                <div className=\"subheading\">number of rounds</div>\r\n                                <Spin\r\n                                    source={this.props.condition.duration}\r\n                                    name=\"count\"\r\n                                    nudgeValue={delta => this.nudgeValue(this.props.condition.duration, \"count\", delta)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }\r\n            ];\r\n\r\n            return (\r\n                <div className=\"condition-modal\">\r\n                    <div className=\"row\" style={{ height: \"100%\" }}>\r\n                        <div className=\"columns small-6 medium-6 large-6 scrollable\">\r\n                            <div className=\"heading\">condition</div>\r\n                            <RadioGroup\r\n                                items={conditions}\r\n                                selectedItemID={this.state.condition.name}\r\n                                select={itemID => this.setCondition(itemID)}\r\n                            />\r\n                        </div>\r\n                        <div className=\"columns small-6 medium-6 large-6 scrollable\">\r\n                            <div className=\"heading\">duration</div>\r\n                            <RadioGroup\r\n                                items={durations}\r\n                                selectedItemID={this.state.condition.duration ? this.state.condition.duration.type : \"none\"}\r\n                                select={itemID => this.setDuration(itemID as 'saves' | 'combatant' | 'rounds')}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nimport cog from '../../resources/images/settings.svg';\r\n\r\ninterface Props {\r\n    actions: JSX.Element | null;\r\n    blur: boolean;\r\n    openHome: () => void;\r\n    openAbout: () => void;\r\n}\r\n\r\nexport default class Titlebar extends React.Component<Props> {\r\n    render() {\r\n        try {\r\n            return (\r\n                <div className={this.props.blur ? \"titlebar blur\" : \"titlebar\"}>\r\n                    <div className=\"app-name\" onClick={() => this.props.openHome()}>dojo</div>\r\n                    {this.props.actions}\r\n                    <img className=\"settings-icon\" src={cog} title=\"about\" alt=\"about\" onClick={() => this.props.openAbout()} />\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    };\r\n}","import React from 'react';\r\nimport { Party, MonsterGroup, Encounter } from '../../models/models';\r\n\r\ninterface Props {\r\n    view: string;\r\n    blur: boolean;\r\n    library: MonsterGroup[];\r\n    parties: Party[];\r\n    encounters: Encounter[];\r\n    setView: (view: string) => void;\r\n}\r\n\r\nexport default class Navbar extends React.Component<Props> {\r\n    render() {\r\n        try {\r\n            var partiesStyle = this.props.view === \"parties\" ? \"navigator-item selected\" : \"navigator-item\";\r\n            var libraryStyle = this.props.view === \"library\" ? \"navigator-item selected\" : \"navigator-item\";\r\n            var encounterStyle = this.props.view === \"encounter\" ? \"navigator-item selected\" : \"navigator-item\";\r\n            var mapStyle = this.props.view === \"maps\" ? \"navigator-item selected\" : \"navigator-item\";\r\n            var combatStyle = this.props.view === \"combat\" ? \"navigator-item selected\" : \"navigator-item\";\r\n\r\n            var encountersEnabled = this.props.library.length !== 0;\r\n            var combatEnabled = (this.props.parties.length !== 0) && (this.props.encounters.length !== 0);\r\n            if (!encountersEnabled) {\r\n                encounterStyle += \" disabled\";\r\n            }\r\n            if (!combatEnabled) {\r\n                combatStyle += \" disabled\";\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.blur ? \"navbar blur\" : \"navbar\"}>\r\n                    <div className={partiesStyle} onClick={() => this.props.setView(\"parties\")}>player characters</div>\r\n                    <div className={libraryStyle} onClick={() => this.props.setView(\"library\")}>monster library</div>\r\n                    <div className={encounterStyle} onClick={() => encountersEnabled ? this.props.setView(\"encounter\") : null}>encounter builder</div>\r\n                    <div className={mapStyle} onClick={() => this.props.setView(\"maps\")}>map folios</div>\r\n                    <div className={combatStyle} onClick={() => combatEnabled ? this.props.setView(\"combat\") : null}>combat manager</div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    };\r\n}","import React from 'react';\r\n\r\nimport * as utils from '../utils';\r\nimport Factory from '../models/factory';\r\n\r\nimport {\r\n    Party, PC,\r\n    MonsterGroup, Monster, Trait,\r\n    Encounter, EncounterSlot, EncounterWave,\r\n    MapFolio, Map,\r\n    CombatSetup, Combat, Combatant, Notification, Condition\r\n} from '../models/models';\r\n\r\nimport HomeScreen from './screens/home-screen';\r\nimport PartiesScreen from './screens/parties-screen';\r\nimport MonsterLibraryScreen from './screens/monster-library-screen';\r\nimport EncounterBuilderScreen from './screens/encounter-builder-screen';\r\nimport MapFoliosScreen from './screens/map-folios-screen';\r\nimport CombatManagerScreen from './screens/combat-manager-screen';\r\n\r\nimport AboutModal from './modals/about-modal';\r\nimport DemographicsModal from './modals/demographics-modal';\r\nimport MonsterEditorModal from './modals/monster-editor-modal';\r\nimport MapEditorModal from './modals/map-editor-modal';\r\nimport CombatStartModal from './modals/combat-start-modal';\r\nimport ConditionModal from './modals/condition-modal';\r\n\r\nimport Titlebar from './panels/titlebar';\r\nimport Navbar from './panels/navbar';\r\n\r\nimport Checkbox from './controls/checkbox';\r\n\r\nimport close from \"../resources/images/close-black.svg\";\r\nimport monsters from '../resources/data/monsters.json';\r\n\r\ninterface Props {\r\n    // No props; this is the root component\r\n}\r\n\r\ninterface State {\r\n    view: string;\r\n    options: {\r\n        showHelp: boolean;\r\n    };\r\n\r\n    parties: Party[];\r\n    library: MonsterGroup[];\r\n    encounters: Encounter[];\r\n    mapFolios: MapFolio[];\r\n    combats: Combat[];\r\n\r\n    selectedPartyID: string | null;\r\n    selectedMonsterGroupID: string | null;\r\n    selectedEncounterID: string | null;\r\n    selectedMapFolioID: string | null;\r\n    selectedCombatID: string | null;\r\n\r\n    modal: any;\r\n\r\n    libraryFilter: string;\r\n}\r\n\r\nexport default class Dojo extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            view: \"home\",\r\n            options: {\r\n                showHelp: true\r\n            },\r\n            parties: [],\r\n            library: [],\r\n            encounters: [],\r\n            mapFolios: [],\r\n            combats: [],\r\n            selectedPartyID: null,\r\n            selectedMonsterGroupID: null,\r\n            selectedEncounterID: null,\r\n            selectedMapFolioID: null,\r\n            selectedCombatID: null,\r\n            modal: null,\r\n            libraryFilter: ''\r\n        };\r\n\r\n        try {\r\n            var data: State | null = null;\r\n\r\n            try {\r\n                var json = window.localStorage.getItem('data');\r\n                if (json) {\r\n                    data = JSON.parse(json);\r\n                }\r\n            } catch (ex) {\r\n                console.error(\"Could not parse JSON: \", ex);\r\n                data = null;\r\n            }\r\n\r\n            if (data !== null) {\r\n                if (!data.mapFolios) {\r\n                    data.mapFolios = [];\r\n                    data.selectedMapFolioID = null;\r\n                }\r\n\r\n                data.encounters.forEach(enc => {\r\n                    if (!enc.waves) {\r\n                        enc.waves = [];\r\n                    }\r\n                });\r\n\r\n                data.combats.forEach(c => {\r\n                    if (!c.notifications) {\r\n                        c.notifications = [];\r\n                    }\r\n                    c.combatants.forEach(c => {\r\n                        if (c.altitude === undefined) {\r\n                            c.altitude = 0;\r\n                        }\r\n                    });\r\n                });\r\n\r\n                data.view = 'home';\r\n                data.modal = null;\r\n                data.libraryFilter = '';\r\n\r\n                this.state = data;\r\n            }\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            /*\r\n            this.state.parties = [];\r\n            this.state.library = [];\r\n            this.state.encounters = [];\r\n            this.state.mapFolios = [];\r\n            this.state.combats = [];\r\n            this.state.selectedPartyID = null;\r\n            this.state.selectedMonsterGroupID = null;\r\n            this.state.selectedEncounterID = null;\r\n            this.state.selectedMapFolioID = null;\r\n            this.state.selectedCombatID = null;\r\n            */\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        var json = null;\r\n        try {\r\n            json = JSON.stringify(this.state);\r\n        } catch (ex) {\r\n            console.error(\"Could not stringify data: \", ex);\r\n            json = null;\r\n        }\r\n\r\n        if (json !== null) {\r\n            window.localStorage.setItem('data', json);\r\n        }\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////////\r\n    // Party screen\r\n\r\n    addParty() {\r\n        var party = Factory.createParty();\r\n        party.name = 'new party';\r\n        var parties: Party[] = ([] as Party[]).concat(this.state.parties, [party]);\r\n        utils.sort(parties);\r\n        this.setState({\r\n            parties: parties,\r\n            selectedPartyID: party.id\r\n        });\r\n    }\r\n\r\n    removeParty() {\r\n        var party = this.getParty(this.state.selectedPartyID);\r\n        if (party) {\r\n            var index = this.state.parties.indexOf(party);\r\n            this.state.parties.splice(index, 1);\r\n            this.setState({\r\n                parties: this.state.parties,\r\n                selectedPartyID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    addPC() {\r\n        var party = this.getParty(this.state.selectedPartyID);\r\n        if (party) {\r\n            var pc = Factory.createPC();\r\n            pc.name = 'new pc';\r\n            party.pcs.push(pc);\r\n            this.setState({\r\n                parties: this.state.parties\r\n            });\r\n        }\r\n    }\r\n\r\n    removePC(pc: PC) {\r\n        var party = this.getParty(this.state.selectedPartyID);\r\n        if (party) {\r\n            var index = party.pcs.indexOf(pc);\r\n            party.pcs.splice(index, 1);\r\n            this.setState({\r\n                parties: this.state.parties\r\n            });\r\n        }\r\n    }\r\n\r\n    sortPCs() {\r\n        var party = this.getParty(this.state.selectedPartyID);\r\n        if (party) {\r\n            utils.sort(party.pcs);\r\n            this.setState({\r\n                parties: this.state.parties\r\n            });\r\n        }\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////////\r\n    // Library screen\r\n\r\n    addMonsterGroup() {\r\n        var group = Factory.createMonsterGroup();\r\n        group.name = 'new group';\r\n        var library = ([] as MonsterGroup[]).concat(this.state.library, [group]);\r\n        utils.sort(library);\r\n        this.setState({\r\n            library: library,\r\n            selectedMonsterGroupID: group.id\r\n        });\r\n    }\r\n\r\n    removeMonsterGroup() {\r\n        var group = this.getMonsterGroup(this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            var index = this.state.library.indexOf(group);\r\n            this.state.library.splice(index, 1);\r\n            this.setState({\r\n                library: this.state.library,\r\n                selectedMonsterGroupID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    addMonster() {\r\n        var monster = Factory.createMonster();\r\n        monster.name = 'new monster';\r\n        var group = this.getMonsterGroup(this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            group.monsters.push(monster);\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    removeMonster(monster: Monster) {\r\n        var group = this.getMonsterGroup(this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            var index = group.monsters.indexOf(monster);\r\n            group.monsters.splice(index, 1);\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    sortMonsters() {\r\n        var group = this.getMonsterGroup(this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            utils.sort(group.monsters);\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    moveToGroup(monster: Monster, groupID: string) {\r\n        var sourceGroup = this.findMonster(monster);\r\n        if (sourceGroup) {\r\n            var index = sourceGroup.monsters.indexOf(monster);\r\n\r\n            sourceGroup.monsters.splice(index, 1);\r\n            var group = this.getMonsterGroup(groupID);\r\n            if (group) {\r\n                group.monsters.push(monster);\r\n                utils.sort(group.monsters);\r\n\r\n                this.setState({\r\n                    library: this.state.library\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    editMonster(monster: Monster) {\r\n        var copy = JSON.parse(JSON.stringify(monster));\r\n        this.setState({\r\n            modal: {\r\n                type: \"monster\",\r\n                monster: copy,\r\n                showMonsters: false\r\n            }\r\n        });\r\n    }\r\n\r\n    saveMonster() {\r\n        var group = this.getMonsterGroup(this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            var original = group.monsters.find(m => m.id === this.state.modal.monster.id);\r\n            if (original) {\r\n                var index = group.monsters.indexOf(original);\r\n                group.monsters[index] = this.state.modal.monster;\r\n                this.setState({\r\n                    library: this.state.library,\r\n                    modal: null\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    toggleShowSimilarMonsters() {\r\n        // eslint-disable-next-line\r\n        this.state.modal.showMonsters = !this.state.modal.showMonsters;\r\n        this.setState({\r\n            modal: this.state.modal\r\n        });\r\n    }\r\n\r\n    openDemographics() {\r\n        this.setState({\r\n            modal: {\r\n                type: \"demographics\"\r\n            }\r\n        });\r\n    }\r\n\r\n    cloneMonster(monster: Monster, name: string) {\r\n        var group = this.findMonster(monster);\r\n        if (group) {\r\n            var clone = {\r\n                id: utils.guid(),\r\n                type: \"monster\",\r\n                name: name || monster.name + \" copy\",\r\n                size: monster.size,\r\n                category: monster.category,\r\n                tag: monster.tag,\r\n                alignment: monster.alignment,\r\n                challenge: monster.challenge,\r\n                abilityScores: {\r\n                    str: monster.abilityScores.str,\r\n                    dex: monster.abilityScores.dex,\r\n                    con: monster.abilityScores.con,\r\n                    int: monster.abilityScores.int,\r\n                    wis: monster.abilityScores.wis,\r\n                    cha: monster.abilityScores.cha\r\n                },\r\n                ac: monster.ac,\r\n                hpMax: monster.hpMax,\r\n                hpTemp: monster.hpTemp,\r\n                hitDice: monster.hitDice,\r\n                damage: {\r\n                    resist: monster.damage.resist,\r\n                    vulnerable: monster.damage.vulnerable,\r\n                    immune: monster.damage.immune\r\n                },\r\n                savingThrows: monster.savingThrows,\r\n                speed: monster.speed,\r\n                skills: monster.skills,\r\n                senses: monster.senses,\r\n                languages: monster.languages,\r\n                equipment: monster.equipment,\r\n                traits: monster.traits.map(trait => {\r\n                    return {\r\n                        id: utils.guid(),\r\n                        name: trait.name,\r\n                        usage: trait.usage,\r\n                        type: trait.type,\r\n                        text: trait.text\r\n                    };\r\n                }),\r\n                conditionImmunities: monster.conditionImmunities\r\n            };\r\n\r\n            group.monsters.push(clone);\r\n            utils.sort(group.monsters);\r\n\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    addOpenGameContent() {\r\n        monsters.forEach((data: any) => {\r\n            try {\r\n                if (data.name) {\r\n                    var monster = Factory.createMonster();\r\n\r\n                    monster.type = \"monster\";\r\n                    monster.name = data.name;\r\n                    monster.size = data.size.toLowerCase();\r\n                    monster.category = data.type;\r\n                    monster.tag = data.subtype;\r\n                    monster.alignment = data.alignment;\r\n                    monster.challenge = utils.parseChallenge(data.challenge_rating);\r\n                    monster.ac = data.armor_class;\r\n                    monster.hpMax = data.hit_points;\r\n                    monster.speed = data.speed;\r\n                    monster.senses = data.senses;\r\n                    monster.languages = data.languages;\r\n\r\n                    var index = data.hit_dice.indexOf(\"d\");\r\n                    monster.hitDice = parseInt(data.hit_dice.substring(0, index));\r\n\r\n                    monster.abilityScores.str = data.strength;\r\n                    monster.abilityScores.dex = data.dexterity;\r\n                    monster.abilityScores.con = data.constitution;\r\n                    monster.abilityScores.int = data.intelligence;\r\n                    monster.abilityScores.wis = data.wisdom;\r\n                    monster.abilityScores.cha = data.charisma;\r\n\r\n                    monster.damage.resist = data.damage_resistances;\r\n                    monster.damage.vulnerable = data.damage_vulnerabilities;\r\n                    monster.damage.immune = data.damage_immunities;\r\n                    monster.conditionImmunities = data.condition_immunities;\r\n\r\n                    var saves = [\r\n                        {\r\n                            field: \"strength_save\",\r\n                            text: \"Strength\"\r\n                        },\r\n                        {\r\n                            field: \"dexterity_save\",\r\n                            text: \"Dexterity\"\r\n                        },\r\n                        {\r\n                            field: \"constitution_save\",\r\n                            text: \"Constitution\"\r\n                        },\r\n                        {\r\n                            field: \"intelligence_save\",\r\n                            text: \"Intelligence\"\r\n                        },\r\n                        {\r\n                            field: \"wisdom_save\",\r\n                            text: \"Wisdom\"\r\n                        },\r\n                        {\r\n                            field: \"charisma_save\",\r\n                            text: \"Charisma\"\r\n                        }\r\n                    ];\r\n                    saves.forEach(save => {\r\n                        if (data[save.field]) {\r\n                            var str = save.text + \" \" + data[save.field];\r\n                            monster.savingThrows += monster.savingThrows === \"\" ? str : \", \" + str;\r\n                        }\r\n                    });\r\n\r\n                    var skills = [\r\n                        {\r\n                            field: \"acrobatics\",\r\n                            text: \"Acrobatics\"\r\n                        },\r\n                        {\r\n                            field: \"animal_handling\",\r\n                            text: \"Animal handling\"\r\n                        },\r\n                        {\r\n                            field: \"arcana\",\r\n                            text: \"Arcana\"\r\n                        },\r\n                        {\r\n                            field: \"athletics\",\r\n                            text: \"Athletics\"\r\n                        },\r\n                        {\r\n                            field: \"deception\",\r\n                            text: \"Deception\"\r\n                        },\r\n                        {\r\n                            field: \"history\",\r\n                            text: \"History\"\r\n                        },\r\n                        {\r\n                            field: \"insight\",\r\n                            text: \"Insight\"\r\n                        },\r\n                        {\r\n                            field: \"intimidation\",\r\n                            text: \"Intimidation\"\r\n                        },\r\n                        {\r\n                            field: \"investigation\",\r\n                            text: \"Investigation\"\r\n                        },\r\n                        {\r\n                            field: \"medicine\",\r\n                            text: \"Medicine\"\r\n                        },\r\n                        {\r\n                            field: \"nature\",\r\n                            text: \"Nature\"\r\n                        },\r\n                        {\r\n                            field: \"perception\",\r\n                            text: \"Perception\"\r\n                        },\r\n                        {\r\n                            field: \"performance\",\r\n                            text: \"Performance\"\r\n                        },\r\n                        {\r\n                            field: \"persuasion\",\r\n                            text: \"Persuasion\"\r\n                        },\r\n                        {\r\n                            field: \"religion\",\r\n                            text: \"Religion\"\r\n                        },\r\n                        {\r\n                            field: \"sleight_of_hand\",\r\n                            text: \"Sleight of hand\"\r\n                        },\r\n                        {\r\n                            field: \"stealth\",\r\n                            text: \"Stealth\"\r\n                        },\r\n                        {\r\n                            field: \"survival\",\r\n                            text: \"Survival\"\r\n                        }\r\n                    ];\r\n                    skills.forEach(skill => {\r\n                        if (data[skill.field]) {\r\n                            var str = skill.text + \" \" + data[skill.field];\r\n                            monster.skills += monster.skills === \"\" ? str : \", \" + str;\r\n                        }\r\n                    });\r\n\r\n                    if (data.special_abilities) {\r\n                        data.special_abilities.forEach((rawTrait: any) => {\r\n                            var trait = this.buildTrait(rawTrait, \"trait\");\r\n                            monster.traits.push(trait);\r\n                        });\r\n                    }\r\n                    if (data.actions) {\r\n                        data.actions.forEach((rawTrait: any) => {\r\n                            var trait = this.buildTrait(rawTrait, \"action\");\r\n                            monster.traits.push(trait);\r\n                        });\r\n                    }\r\n                    if (data.legendary_actions) {\r\n                        data.legendary_actions.forEach((rawTrait: any) => {\r\n                            var trait = this.buildTrait(rawTrait, \"legendary\");\r\n                            monster.traits.push(trait);\r\n                        });\r\n                    }\r\n\r\n                    var groupName = monster.tag;\r\n                    if (groupName === \"\") {\r\n                        groupName = monster.category;\r\n                    }\r\n                    if (groupName.indexOf(\"swarm\") === 0) {\r\n                        groupName = \"swarm\";\r\n                    }\r\n                    if (groupName === \"any race\") {\r\n                        groupName = \"npc\";\r\n                    }\r\n\r\n                    var group = this.getMonsterGroupByName(groupName);\r\n                    if (!group) {\r\n                        group = {\r\n                            id: utils.guid(),\r\n                            name: groupName,\r\n                            monsters: []\r\n                        };\r\n                        this.state.library.push(group);\r\n                    }\r\n                    group.monsters.push(monster);\r\n                }\r\n            } catch (e) {\r\n                console.log(e);\r\n            }\r\n        });\r\n\r\n        utils.sort(this.state.library);\r\n\r\n        this.setState({\r\n            view: \"library\",\r\n            library: this.state.library\r\n        });\r\n    }\r\n\r\n    buildTrait(rawTrait: any, type: 'trait' | 'action' | 'legendary' | 'lair' | 'regional'): Trait {\r\n        var name = \"\";\r\n        var usage = \"\";\r\n\r\n        var openBracket = rawTrait.name.indexOf(\"(\");\r\n        if (openBracket === -1) {\r\n            name = rawTrait.name;\r\n        } else {\r\n            var closeBracket = rawTrait.name.indexOf(\")\");\r\n            name = rawTrait.name.substring(0, openBracket - 1);\r\n            usage = rawTrait.name.substring(openBracket + 1, closeBracket);\r\n        }\r\n\r\n        return {\r\n            id: utils.guid(),\r\n            type: type,\r\n            name: name,\r\n            usage: usage,\r\n            text: rawTrait.desc\r\n        };\r\n    };\r\n\r\n    /////////////////////////////////////////////////////////////////////////////\r\n    // Encounter screen\r\n\r\n    addEncounter() {\r\n        var encounter = Factory.createEncounter();\r\n        encounter.name = 'new encounter';\r\n        var encounters = ([] as Encounter[]).concat(this.state.encounters, [encounter]);\r\n        utils.sort(encounters);\r\n\r\n        this.setState({\r\n            encounters: encounters,\r\n            selectedEncounterID: encounter.id\r\n        });\r\n    }\r\n\r\n    removeEncounter() {\r\n        var encounter = this.getEncounter(this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            var index = this.state.encounters.indexOf(encounter);\r\n            this.state.encounters.splice(index, 1);\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters,\r\n                selectedEncounterID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    addEncounterSlot(monster: Monster, waveID: string | null) {\r\n        var group = this.findMonster(monster);\r\n        if (group) {\r\n            var slot = Factory.createEncounterSlot();\r\n            slot.monsterGroupName = group.name;\r\n            slot.monsterName = monster.name;\r\n            var encounter = this.getEncounter(this.state.selectedEncounterID);\r\n            if (encounter) {\r\n                if (waveID !== null) {\r\n                    var wave = encounter.waves.find(w => w.id === waveID);\r\n                    if (wave) {\r\n                        wave.slots.push(slot);\r\n                        this.sortEncounterSlots(wave);\r\n                    }\r\n                } else {\r\n                    encounter.slots.push(slot);\r\n                    this.sortEncounterSlots(encounter);\r\n                }\r\n\r\n                this.setState({\r\n                    encounters: this.state.encounters\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    removeEncounterSlot(slot: EncounterSlot, waveID: string | null) {\r\n        var encounter = this.getEncounter(this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            if (waveID) {\r\n                var wave = encounter.waves.find(w => w.id === waveID);\r\n                if (wave) {\r\n                    var index = wave.slots.indexOf(slot);\r\n                    wave.slots.splice(index, 1);\r\n                }\r\n            } else {\r\n                var n = encounter.slots.indexOf(slot);\r\n                encounter.slots.splice(n, 1);\r\n            }\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters\r\n            });\r\n        }\r\n    }\r\n\r\n    sortEncounterSlots(slotContainer: { slots: EncounterSlot[] }) {\r\n        slotContainer.slots.sort((a, b) => {\r\n            var aName = a.monsterName.toLowerCase();\r\n            var bName = b.monsterName.toLowerCase();\r\n            if (aName < bName) return -1;\r\n            if (aName > bName) return 1;\r\n            return 0;\r\n        });\r\n    }\r\n\r\n    addWaveToEncounter() {\r\n        var encounter = this.getEncounter(this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            var wave = Factory.createEncounterWave();\r\n            wave.name = \"wave \" + (encounter.waves.length + 2);\r\n            encounter.waves.push(wave);\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters\r\n            });\r\n        }\r\n    }\r\n\r\n    removeWave(wave: EncounterWave) {\r\n        var encounter = this.getEncounter(this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            var index = encounter.waves.indexOf(wave);\r\n            encounter.waves.splice(index, 1);\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters\r\n            });\r\n        }\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////////\r\n    // Map screen\r\n\r\n    addMapFolio() {\r\n        var folio = Factory.createMapFolio();\r\n        folio.name = 'new folio';\r\n        var folios = ([] as MapFolio[]).concat(this.state.mapFolios, [folio]);\r\n        utils.sort(folios);\r\n\r\n        this.setState({\r\n            mapFolios: folios,\r\n            selectedMapFolioID: folio.id\r\n        });\r\n    }\r\n\r\n    removeMapFolio() {\r\n        var folio = this.getMapFolio(this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            var index = this.state.mapFolios.indexOf(folio);\r\n            this.state.mapFolios.splice(index, 1);\r\n\r\n            this.setState({\r\n                mapFolios: this.state.mapFolios,\r\n                selectedMapFolioID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    addMap() {\r\n        var folio = this.getMapFolio(this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            var map = Factory.createMap();\r\n            map.name = 'new map';\r\n            folio.maps.push(map);\r\n\r\n            this.setState({\r\n                mapFolios: this.state.mapFolios\r\n            });\r\n        }\r\n    }\r\n\r\n    editMap(map: Map) {\r\n        var copy = JSON.parse(JSON.stringify(map));\r\n        this.setState({\r\n            modal: {\r\n                type: \"map\",\r\n                map: copy\r\n            }\r\n        });\r\n    }\r\n\r\n    saveMap() {\r\n        var folio = this.getMapFolio(this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            var original = folio.maps.find(m => m.id === this.state.modal.map.id);\r\n            if (original) {\r\n                var index = folio.maps.indexOf(original);\r\n                folio.maps[index] = this.state.modal.map;\r\n                this.setState({\r\n                    mapFolios: this.state.mapFolios,\r\n                    modal: null\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    removeMap(map: Map) {\r\n        var folio = this.getMapFolio(this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            var index = folio.maps.indexOf(map);\r\n            folio.maps.splice(index, 1);\r\n            this.setState({\r\n                mapFolios: this.state.mapFolios\r\n            });\r\n        }\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////////\r\n    // Combat screen\r\n\r\n    createCombat() {\r\n        var party = this.state.parties.length === 1 ? this.state.parties[0] : null;\r\n        var encounter = this.state.encounters.length === 1 ? this.state.encounters[0] : null;\r\n\r\n        var setup = Factory.createCombatSetup();\r\n        setup.partyID = party ? party.id : null;\r\n        setup.encounterID = encounter ? encounter.id : null;\r\n        if (encounter) {\r\n            setup.monsterNames = utils.getMonsterNames(encounter);\r\n        }\r\n\r\n        this.setState({\r\n            modal: {\r\n                type: \"combat-start\",\r\n                combatSetup: setup\r\n            }\r\n        });\r\n    }\r\n\r\n    startCombat() {\r\n        var combatSetup: CombatSetup = this.state.modal.combatSetup;\r\n        var party = this.getParty(combatSetup.partyID);\r\n        var encounter = this.getEncounter(combatSetup.encounterID);\r\n        if (party && encounter) {\r\n            var partyName = party.name || \"unnamed party\";\r\n            var encounterName = encounter.name || \"unnamed encounter\";\r\n\r\n            var combat = Factory.createCombat();\r\n            combat.name = partyName + \" vs \" + encounterName;\r\n            combat.encounterID = encounter.id;\r\n\r\n            // Add a copy of each PC to the encounter\r\n            party.pcs.filter(pc => pc.active).forEach(pc => {\r\n                var combatant = JSON.parse(JSON.stringify(pc));\r\n\r\n                combatant.current = false;\r\n                combatant.pending = true;\r\n                combatant.active = false;\r\n                combatant.defeated = false;\r\n\r\n                combatant.displayName = pc.name;\r\n                combatant.initiative = null;\r\n                combatant.hp = null;\r\n                combatant.conditions = [];\r\n                combatant.altitude = 0;\r\n\r\n                combat.combatants.push(combatant);\r\n            });\r\n\r\n            encounter.slots.forEach(slot => {\r\n                var monster = this.getMonster(slot.monsterName, slot.monsterGroupName);\r\n                if (monster) {\r\n                    var init = parseInt(utils.modifier(monster.abilityScores.dex));\r\n                    var groupRoll = utils.dieRoll();\r\n\r\n                    for (var n = 0; n !== slot.count; ++n) {\r\n                        var singleRoll = utils.dieRoll();\r\n\r\n                        var combatant = JSON.parse(JSON.stringify(monster));\r\n                        combatant.id = utils.guid();\r\n\r\n                        combatant.displayName = null;\r\n                        if (combatSetup.monsterNames) {\r\n                            var slotNames = combatSetup.monsterNames.find(names => names.id === slot.id);\r\n                            if (slotNames) {\r\n                                combatant.displayName = slotNames.names[n];\r\n                            }\r\n                        }\r\n\r\n                        switch (combatSetup.encounterInitMode) {\r\n                            case \"manual\":\r\n                                combatant.initiative = 10;\r\n                                break;\r\n                            case \"group\":\r\n                                combatant.initiative = init + groupRoll;\r\n                                break;\r\n                            case \"individual\":\r\n                                combatant.initiative = init + singleRoll;\r\n                                break;\r\n                            default:\r\n                                // Do nothing\r\n                                break;\r\n                        }\r\n\r\n                        combatant.current = false;\r\n                        combatant.pending = (combatSetup.encounterInitMode === \"manual\");\r\n                        combatant.active = (combatSetup.encounterInitMode !== \"manual\");\r\n                        combatant.defeated = false;\r\n            \r\n                        combatant.hp = combatant.hpMax;\r\n                        combatant.conditions = [];\r\n                        combatant.altitude = 0;\r\n\r\n                        combat.combatants.push(combatant);\r\n                    }\r\n                } else {\r\n                    combat.issues.push(\"unknown monster: \" + slot.monsterName + \" in group \" + slot.monsterGroupName);\r\n                }\r\n            });\r\n\r\n            combat.combatants.forEach(c => c.altitude = 0);\r\n\r\n            this.sortCombatants(combat);\r\n\r\n            if (combatSetup.folioID && combatSetup.mapID) {\r\n                var folio = this.getMapFolio(combatSetup.folioID);\r\n                if (folio) {\r\n                    var map = folio.maps.find(m => m.id === combatSetup.mapID);\r\n                    if (map) {\r\n                        combat.map = JSON.parse(JSON.stringify(map));\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.setState({\r\n                combats: ([] as Combat[]).concat(this.state.combats, [combat]),\r\n                selectedCombatID: combat.id,\r\n                modal: null\r\n            });\r\n        }\r\n    }\r\n\r\n    openWaveModal() {\r\n        var combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat) {\r\n            var encounter = this.getEncounter(combat.encounterID);\r\n            if (encounter) {\r\n                var setup = Factory.createCombatSetup();\r\n                setup.encounterID = combat.encounterID;\r\n                setup.monsterNames = utils.getMonsterNames(encounter);\r\n\r\n                this.setState({\r\n                    modal: {\r\n                        type: \"combat-wave\",\r\n                        combatSetup: setup\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    pauseCombat() {\r\n        var combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat) {\r\n            combat.timestamp = new Date().toLocaleString();\r\n            this.setState({\r\n                combats: this.state.combats,\r\n                selectedCombatID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    resumeCombat(combat: Combat) {\r\n        this.setState({\r\n            selectedCombatID: combat.id\r\n        });\r\n    }\r\n\r\n    endCombat() {\r\n        var combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat) {\r\n            var index = this.state.combats.indexOf(combat);\r\n            this.state.combats.splice(index, 1);\r\n            this.setState({\r\n                combats: this.state.combats,\r\n                selectedCombatID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    makeCurrent(combatant: (Combatant & PC) | (Combatant & Monster) | null, newRound: boolean) {\r\n        var combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat) {\r\n            // Handle start-of-turn conditions\r\n            combat.combatants.filter(actor => actor.conditions).forEach(actor => {\r\n                actor.conditions.forEach(c => {\r\n                    if (c.duration) {\r\n                        switch (c.duration.type) {\r\n                            case \"saves\":\r\n                                // If it's my condition, and point is START, notify the user\r\n                                if (combat && combatant && (actor.id === combatant.id) && (c.duration.point === \"start\")) {\r\n                                    combat.notifications.push({\r\n                                        id: utils.guid(),\r\n                                        type: \"condition-save\",\r\n                                        condition: c,\r\n                                        combatant: combatant as Combatant & Monster\r\n                                    });\r\n                                }\r\n                                break;\r\n                            case \"combatant\":\r\n                                // If this refers to me, and point is START, remove it\r\n                                if (combat && combatant && (c.duration.combatantID === combatant.id) && (c.duration.point === \"start\")) {\r\n                                    var index = actor.conditions.indexOf(c);\r\n                                    actor.conditions.splice(index, 1);\r\n                                    // Notify the user\r\n                                    combat.notifications.push({\r\n                                        id: utils.guid(),\r\n                                        type: \"condition-end\",\r\n                                        condition: c,\r\n                                        combatant: combatant as Combatant & Monster\r\n                                    });\r\n                                }\r\n                                break;\r\n                            case \"rounds\":\r\n                                // If it's my condition, decrement the condition\r\n                                if (combatant && (actor.id === combatant.id)) {\r\n                                    c.duration.count -= 1;\r\n                                }\r\n                                // If it's now at 0, remove it\r\n                                if (c.duration.count === 0) {\r\n                                    var n = actor.conditions.indexOf(c);\r\n                                    actor.conditions.splice(n, 1);\r\n                                    if (combat) {\r\n                                        // Notify the user\r\n                                        combat.notifications.push({\r\n                                            id: utils.guid(),\r\n                                            type: \"condition-end\",\r\n                                            condition: c,\r\n                                            combatant: combatant as Combatant & Monster\r\n                                        });\r\n                                    }\r\n                                }\r\n                                break;\r\n                            default:\r\n                                // Do nothing\r\n                                break;\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n\r\n            combat.combatants.forEach(combatant => {\r\n                combatant.current = false;\r\n            });\r\n            if (combatant) {\r\n                combatant.current = true;\r\n            }\r\n\r\n            if (newRound) {\r\n                combat.round += 1;\r\n            }\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    makeActive(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        var combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat) {\r\n            combatant.pending = false;\r\n            combatant.active = true;\r\n            combatant.defeated = false;\r\n\r\n            this.sortCombatants(combat);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    makeDefeated(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        combatant.pending = false;\r\n        combatant.active = false;\r\n        combatant.defeated = true;\r\n\r\n        if (combatant.current) {\r\n            this.endTurn(combatant);\r\n        } else {\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    addWaveToCombat() {\r\n        var combatSetup: CombatSetup = this.state.modal.combat;\r\n        var encounter = this.getEncounter(combatSetup.encounterID);\r\n        var combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combatSetup && encounter && combat) {\r\n            var wave = encounter.waves.find(w => w.id === combatSetup.waveID);\r\n            if (wave) {\r\n                wave.slots.forEach(slot => {\r\n                    var monster = this.getMonster(slot.monsterName, slot.monsterGroupName);\r\n                    if (monster) {\r\n                        var init = parseInt(utils.modifier(monster.abilityScores.dex));\r\n                        var groupRoll = utils.dieRoll();\r\n\r\n                        for (var n = 0; n !== slot.count; ++n) {\r\n                            var singleRoll = utils.dieRoll();\r\n\r\n                            var combatant = JSON.parse(JSON.stringify(monster));\r\n                            combatant.id = utils.guid();\r\n\r\n                            combatant.displayName = null;\r\n                            if (combatSetup.monsterNames) {\r\n                                var slotNames = combatSetup.monsterNames.find(names => names.id === slot.id);\r\n                                if (slotNames) {\r\n                                    combatant.displayName = slotNames.names[n];\r\n                                }\r\n                            }\r\n\r\n                            switch (combatSetup.encounterInitMode) {\r\n                                case \"manual\":\r\n                                    combatant.initiative = 10;\r\n                                    break;\r\n                                case \"group\":\r\n                                    combatant.initiative = init + groupRoll;\r\n                                    break;\r\n                                case \"individual\":\r\n                                    combatant.initiative = init + singleRoll;\r\n                                    break;\r\n                                default:\r\n                                    // Do nothing\r\n                                    break;\r\n                            }\r\n\r\n                            combatant.current = false;\r\n                            combatant.pending = (this.state.modal.combat.encounterInitMode === \"manual\");\r\n                            combatant.active = (this.state.modal.combat.encounterInitMode !== \"manual\");\r\n                            combatant.defeated = false;\r\n                \r\n                            combatant.hp = combatant.hpMax;\r\n                            combatant.conditions = [];\r\n\r\n                            if (combat) {\r\n                                combat.combatants.push(combatant);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (combat) {\r\n                            var issue = \"unknown monster: \" + slot.monsterName + \" in group \" + slot.monsterGroupName;\r\n                            combat.issues.push(issue);\r\n                        }\r\n                    }\r\n                });\r\n\r\n                this.sortCombatants(combat);\r\n\r\n                this.setState({\r\n                    combats: this.state.combats,\r\n                    modal: null\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    removeCombatant(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        var combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat) {\r\n            var index = combat.combatants.indexOf(combatant);\r\n            combat.combatants.splice(index, 1);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    mapAdd(combatant: ((Combatant & PC) | (Combatant & Monster)), x: number, y: number) {\r\n        var item = Factory.createMapItem();\r\n        item.id = combatant.id;\r\n        item.type = combatant.type as 'pc' | 'monster';\r\n        item.x = x;\r\n        item.y = y;\r\n        var size = 1;\r\n        if (combatant.type === 'monster') {\r\n            size = utils.miniSize((combatant as Monster).size);\r\n        }\r\n        item.height = size;\r\n        item.width = size;\r\n\r\n        var combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat && combat.map) {\r\n            combat.map.items.push(item);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    mapMove(combatant: (Combatant & PC) | (Combatant & Monster), dir: string) {\r\n        var combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat && combat.map) {\r\n            var item = combat.map.items.find(i => i.id === combatant.id);\r\n            if (item) {\r\n                switch (dir) {\r\n                    case 'N':\r\n                        item.y -= 1;\r\n                        break;\r\n                    case 'NE':\r\n                        item.x += 1;\r\n                        item.y -= 1;\r\n                        break;\r\n                    case 'E':\r\n                        item.x += 1;\r\n                        break;\r\n                    case 'SE':\r\n                        item.x += 1;\r\n                        item.y += 1;\r\n                        break;\r\n                    case 'S':\r\n                        item.y += 1;\r\n                        break;\r\n                    case 'SW':\r\n                        item.x -= 1;\r\n                        item.y += 1;\r\n                        break;\r\n                    case 'W':\r\n                        item.x -= 1;\r\n                        break;\r\n                    case 'NW':\r\n                        item.x -= 1;\r\n                        item.y -= 1;\r\n                        break;\r\n                    default:\r\n                        // Do nothing\r\n                        break;\r\n                }\r\n\r\n                this.setState({\r\n                    combats: this.state.combats\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    mapRemove(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        var combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat && combat.map) {\r\n            var item = combat.map.items.find(i => i.id === combatant.id);\r\n            if (item) {\r\n                var index = combat.map.items.indexOf(item);\r\n                combat.map.items.splice(index, 1);\r\n\r\n                this.setState({\r\n                    combats: this.state.combats\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    endTurn(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        var combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat) {\r\n            // Handle end-of-turn conditions\r\n            combat.combatants.filter(actor => actor.conditions).forEach(actor => {\r\n                actor.conditions.forEach(c => {\r\n                    if (c.duration) {\r\n                        switch (c.duration.type) {\r\n                            case \"saves\":\r\n                                // If it's my condition, and point is END, notify the user\r\n                                if (combat && (actor.id === combatant.id) && (c.duration.point === \"end\")) {\r\n                                    var saveNotification = Factory.createNotification();\r\n                                    saveNotification.type = \"condition-save\";\r\n                                    saveNotification.condition = c;\r\n                                    saveNotification.combatant = combatant as Combatant & Monster;\r\n                                    combat.notifications.push(saveNotification);\r\n                                }\r\n                                break;\r\n                            case \"combatant\":\r\n                                // If this refers to me, and point is END, remove it\r\n                                if (combat && (c.duration.combatantID === combatant.id) && (c.duration.point === \"end\")) {\r\n                                    var index = actor.conditions.indexOf(c);\r\n                                    actor.conditions.splice(index, 1);\r\n                                    // Notify the user\r\n                                    var endNotification = Factory.createNotification();\r\n                                    endNotification.type = \"condition-end\";\r\n                                    endNotification.condition = c;\r\n                                    endNotification.combatant = combatant as Combatant & Monster;\r\n                                    combat.notifications.push(endNotification);\r\n                                }\r\n                                break;\r\n                            case \"rounds\":\r\n                                // We check this at the beginning of each turn, not at the end\r\n                                break;\r\n                            default:\r\n                                // Do nothing\r\n                                break;\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n\r\n            var active = combat.combatants.filter(combatant => {\r\n                return combatant.current || (!combatant.pending && combatant.active && !combatant.defeated);\r\n            });\r\n            if (active.length === 0) {\r\n                // There's no-one left in the fight\r\n                this.makeCurrent(null, false);\r\n            } else if ((active.length === 1) && (active[0].defeated)) {\r\n                // The only person in the fight is me, and I'm defeated\r\n                this.makeCurrent(null, false);\r\n            } else {\r\n                var index = active.indexOf(combatant) + 1;\r\n                var newRound = false;\r\n                if (index >= active.length) {\r\n                    index = 0;\r\n                    newRound = true;\r\n                }\r\n                this.makeCurrent(active[index], newRound);\r\n            }\r\n        }\r\n    }\r\n\r\n    changeHP(combatant: Combatant & Monster, hp: number, temp: number) {\r\n        combatant.hp = hp;\r\n        combatant.hpTemp = temp;\r\n\r\n        this.setState({\r\n            combats: this.state.combats\r\n        });\r\n    }\r\n\r\n    addCondition(combatant: Combatant & Monster) {\r\n        var combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat) {\r\n            var condition = Factory.createCondition();\r\n            condition.name = \"blinded\";\r\n\r\n            this.setState({\r\n                modal: {\r\n                    type: \"condition-add\",\r\n                    condition: condition,\r\n                    combatant: combatant,\r\n                    combat: combat\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    addConditionFromModal() {\r\n        this.state.modal.combatant.conditions.push(this.state.modal.condition);\r\n\r\n        this.setState({\r\n            combats: this.state.combats,\r\n            modal: null\r\n        });\r\n    }\r\n\r\n    editCondition(combatant: Combatant & Monster, condition: Condition) {\r\n        var combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat) {\r\n            this.setState({\r\n                modal: {\r\n                    type: \"condition-edit\",\r\n                    condition: condition,\r\n                    combatant: combatant,\r\n                    combat: combat\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    editConditionFromModal() {\r\n        var conditions: Condition[] = this.state.modal.combatant.conditions;\r\n        var original = conditions.find(c => c.id === this.state.modal.condition.id);\r\n        if (original) {\r\n            var index = conditions.indexOf(original);\r\n            // eslint-disable-next-line\r\n            conditions[index] = this.state.modal.condition;\r\n\r\n            this.setState({\r\n                combats: this.state.combats,\r\n                modal: null\r\n            });\r\n        }\r\n    }\r\n\r\n    removeCondition(combatant: Combatant & Monster, conditionID: string) {\r\n        var condition = combatant.conditions.find(c => c.id === conditionID);\r\n        if (condition) {\r\n            var index = combatant.conditions.indexOf(condition);\r\n            combatant.conditions.splice(index, 1);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    sortCombatants(combat: Combat) {\r\n        combat.combatants.sort((a, b) => {\r\n            // First sort by initiative, descending\r\n            if (a.initiative && b.initiative && (a.initiative < b.initiative)) return 1;\r\n            if (a.initiative && b.initiative && (a.initiative > b.initiative)) return -1;\r\n            // Then sort by name, ascending\r\n            if (a.name < b.name) return -1;\r\n            if (a.name > b.name) return 1;\r\n            return 0;\r\n        });\r\n    }\r\n\r\n    closeNotification(notification: Notification, removeCondition: boolean) {\r\n        var combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat) {\r\n            var index = combat.notifications.indexOf(notification);\r\n            combat.notifications.splice(index, 1);\r\n\r\n            if (removeCondition && notification.combatant && notification.condition) {\r\n                var conditionIndex = notification.combatant.conditions.indexOf(notification.condition);\r\n                notification.combatant.conditions.splice(conditionIndex, 1);\r\n            }\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////////\r\n\r\n    setView(view: string) {\r\n        this.setState({\r\n            view: view\r\n        });\r\n    }\r\n\r\n    openAbout() {\r\n        this.setState({\r\n            modal: {\r\n                type: \"about\"\r\n            }\r\n        });\r\n    }\r\n\r\n    closeModal() {\r\n        this.setState({\r\n            modal: null\r\n        });\r\n    }\r\n\r\n    selectParty(party: Party | null) {\r\n        this.setState({\r\n            selectedPartyID: party ? party.id : null\r\n        });\r\n    }\r\n\r\n    selectMonsterGroup(group: MonsterGroup | null) {\r\n        this.setState({\r\n            selectedMonsterGroupID: group ? group.id : null\r\n        });\r\n    }\r\n\r\n    selectEncounter(encounter: Encounter | null) {\r\n        this.setState({\r\n            selectedEncounterID: encounter ? encounter.id : null\r\n        });\r\n    }\r\n\r\n    selectMapFolio(mapFolio: MapFolio | null) {\r\n        this.setState({\r\n            selectedMapFolioID: mapFolio ? mapFolio.id : null\r\n        });\r\n    }\r\n\r\n    getParty(id: string | null) {\r\n        return this.state.parties.find(p => p.id === id);\r\n    }\r\n\r\n    getMonsterGroup(id: string | null) {\r\n        return this.state.library.find(g => g.id === id);\r\n    }\r\n\r\n    getEncounter(id: string | null) {\r\n        return this.state.encounters.find(e => e.id === id);\r\n    }\r\n\r\n    getMapFolio(id: string | null) {\r\n        return this.state.mapFolios.find(f => f.id === id);\r\n    }\r\n\r\n    getCombat(id: string | null) {\r\n        return this.state.combats.find(c => c.id === id);\r\n    }\r\n\r\n    getMonster(monsterName: string, groupName: string) {\r\n        var group = this.getMonsterGroupByName(groupName);\r\n        if (group) {\r\n            return group.monsters.find(monster => monster.name === monsterName);\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    getMonsterGroupByName(groupName: string) {\r\n        return this.state.library.find(p => p.name === groupName);\r\n    }\r\n\r\n    /*\r\n    getMonster(monsterName: string, monsterGroup: MonsterGroup): Monster | undefined {\r\n        return monsterGroup.monsters.find(monster => monster.name === monsterName);\r\n    }\r\n    */\r\n\r\n    findMonster(monster: Monster) {\r\n        return this.state.library.find(group => group.monsters.includes(monster));\r\n    }\r\n\r\n    resetAll() {\r\n        this.setState({\r\n            parties: [],\r\n            selectedPartyID: null,\r\n            library: [],\r\n            selectedMonsterGroupID: null,\r\n            encounters: [],\r\n            selectedEncounterID: null,\r\n            mapFolios: [],\r\n            selectedMapFolioID: null,\r\n            combats: [],\r\n            selectedCombatID: null\r\n        });\r\n    }\r\n\r\n    changeValue(combatant: any, type: string, value: any) {\r\n        switch (type) {\r\n            case \"hp\":\r\n                value = Math.min(value, combatant.hpMax);\r\n                value = Math.max(value, 0);\r\n                break;\r\n            case \"hpTemp\":\r\n                value = Math.max(value, 0);\r\n                break;\r\n            case \"level\":\r\n                value = Math.max(value, 1);\r\n                if (combatant.player !== undefined) {\r\n                    value = Math.min(value, 20)\r\n                } else {\r\n                    value = Math.min(value, 6);\r\n                }\r\n                break;\r\n            case \"count\":\r\n                value = Math.max(value, 1);\r\n                break;\r\n            case \"hitDice\":\r\n                value = Math.max(value, 1);\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        var tokens = type.split(\".\");\r\n        var obj = combatant;\r\n        for (var n = 0; n !== tokens.length; ++n) {\r\n            var token = tokens[n];\r\n            if (n === tokens.length - 1) {\r\n                obj[token] = value;\r\n            } else {\r\n                obj = obj[token];\r\n            }\r\n        }\r\n\r\n        utils.sort(this.state.parties);\r\n        utils.sort(this.state.library);\r\n        utils.sort(this.state.encounters);\r\n\r\n        this.setState({\r\n            parties: this.state.parties,\r\n            library: this.state.library,\r\n            encounters: this.state.encounters,\r\n            combats: this.state.combats,\r\n            selectedPartyID: this.state.selectedPartyID,\r\n            selectedMonsterGroupID: this.state.selectedMonsterGroupID,\r\n            selectedEncounterID: this.state.selectedEncounterID,\r\n            selectedCombatID: this.state.selectedCombatID,\r\n            options: this.state.options,\r\n            modal: this.state.modal\r\n        });\r\n    }\r\n\r\n    nudgeValue(combatant: any, type: string, delta: number) {\r\n        var tokens = type.split(\".\");\r\n        var obj = combatant;\r\n        for (var n = 0; n !== tokens.length; ++n) {\r\n            var token = tokens[n];\r\n            if (n === tokens.length - 1) {\r\n                var value = null;\r\n                if (token === \"challenge\") {\r\n                    value = utils.nudgeChallenge(obj.challenge, delta);\r\n                } else {\r\n                    value = obj[token] + delta;\r\n                }\r\n                this.changeValue(combatant, type, value);\r\n            } else {\r\n                obj = obj[token];\r\n            }\r\n        }\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////////\r\n\r\n    render() {\r\n        try {\r\n            var content: JSX.Element | null = null;\r\n            var actions: JSX.Element | null = null;\r\n            switch (this.state.view) {\r\n                case \"home\":\r\n                    content = (\r\n                        <HomeScreen\r\n                            library={this.state.library}\r\n                            addOpenGameContent={() => this.addOpenGameContent()}\r\n                        />\r\n                    );\r\n                    break;\r\n                case \"parties\":\r\n                    content = (\r\n                        <PartiesScreen\r\n                            parties={this.state.parties}\r\n                            selection={this.getParty(this.state.selectedPartyID) || null}\r\n                            showHelp={this.state.options.showHelp}\r\n                            selectParty={party => this.selectParty(party)}\r\n                            addParty={() => this.addParty()}\r\n                            removeParty={() => this.removeParty()}\r\n                            addPC={() => this.addPC()}\r\n                            removePC={pc => this.removePC(pc)}\r\n                            sortPCs={() => this.sortPCs()}\r\n                            changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                            nudgeValue={(combatant, type, delta) => this.nudgeValue(combatant, type, delta)}\r\n                        />\r\n                    );\r\n                    break;\r\n                case \"library\":\r\n                    content = (\r\n                        <MonsterLibraryScreen\r\n                            library={this.state.library}\r\n                            selection={this.getMonsterGroup(this.state.selectedMonsterGroupID) || null}\r\n                            filter={this.state.libraryFilter}\r\n                            showHelp={this.state.options.showHelp}\r\n                            selectMonsterGroup={group => this.selectMonsterGroup(group)}\r\n                            addMonsterGroup={() => this.addMonsterGroup()}\r\n                            removeMonsterGroup={() => this.removeMonsterGroup()}\r\n                            addMonster={() => this.addMonster()}\r\n                            removeMonster={monster => this.removeMonster(monster)}\r\n                            sortMonsters={() => this.sortMonsters()}\r\n                            changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                            nudgeValue={(combatant, type, delta) => this.nudgeValue(combatant, type, delta)}\r\n                            editMonster={combatant => this.editMonster(combatant)}\r\n                            cloneMonster={(combatant, name) => this.cloneMonster(combatant, name)}\r\n                            moveToGroup={(combatant, groupID) => this.moveToGroup(combatant, groupID)}\r\n                        />\r\n                    );\r\n                    var count = 0;\r\n                    this.state.library.forEach(group => {\r\n                        count += group.monsters.length;\r\n                    });\r\n                    if (count > 0) {\r\n                        actions = (\r\n                            <div className=\"actions\">\r\n                                <div className=\"section\">\r\n                                    <input type=\"text\" placeholder=\"filter\" value={this.state.libraryFilter} onChange={event => this.changeValue(this.state, \"libraryFilter\", event.target.value)} />\r\n                                </div>\r\n                                <div className=\"section\">\r\n                                    <button onClick={() => this.openDemographics()}>demographics</button>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    }\r\n                    break;\r\n                case \"encounter\":\r\n                    content = (\r\n                        <EncounterBuilderScreen\r\n                            encounters={this.state.encounters}\r\n                            selection={this.getEncounter(this.state.selectedEncounterID) || null}\r\n                            parties={this.state.parties}\r\n                            library={this.state.library}\r\n                            showHelp={this.state.options.showHelp}\r\n                            selectEncounter={encounter => this.selectEncounter(encounter)}\r\n                            addEncounter={() => this.addEncounter()}\r\n                            removeEncounter={() => this.removeEncounter()}\r\n                            addWave={() => this.addWaveToEncounter()}\r\n                            removeWave={wave => this.removeWave(wave)}\r\n                            getMonster={(monsterName, groupName) => this.getMonster(monsterName, groupName) || null}\r\n                            addEncounterSlot={(monster, waveID) => this.addEncounterSlot(monster, waveID)}\r\n                            removeEncounterSlot={(slot, waveID) => this.removeEncounterSlot(slot, waveID)}\r\n                            nudgeValue={(slot, type, delta) => this.nudgeValue(slot, type, delta)}\r\n                            changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                        />\r\n                    );\r\n                    break;\r\n                case \"maps\":\r\n                    content = (\r\n                        <MapFoliosScreen\r\n                            mapFolios={this.state.mapFolios}\r\n                            selection={this.getMapFolio(this.state.selectedMapFolioID) || null}\r\n                            showHelp={this.state.options.showHelp}\r\n                            selectMapFolio={folio => this.selectMapFolio(folio)}\r\n                            addMapFolio={() => this.addMapFolio()}\r\n                            removeMapFolio={() => this.removeMapFolio()}\r\n                            addMap={() => this.addMap()}\r\n                            editMap={map => this.editMap(map)}\r\n                            removeMap={map => this.removeMap(map)}\r\n                            changeValue={(source, type, value) => this.changeValue(source, type, value)}\r\n                        />\r\n                    );\r\n                    break;\r\n                case \"combat\":\r\n                    var combat = this.getCombat(this.state.selectedCombatID);\r\n                    content = (\r\n                        <CombatManagerScreen\r\n                            combats={this.state.combats}\r\n                            combat={combat || null}\r\n                            showHelp={this.state.options.showHelp}\r\n                            createCombat={() => this.createCombat()}\r\n                            resumeEncounter={combat => this.resumeCombat(combat)}\r\n                            nudgeValue={(combatant, type, delta) => this.nudgeValue(combatant, type, delta)}\r\n                            changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                            makeCurrent={(combatant) => this.makeCurrent(combatant, false)}\r\n                            makeActive={(combatant) => this.makeActive(combatant)}\r\n                            makeDefeated={(combatant) => this.makeDefeated(combatant)}\r\n                            removeCombatant={(combatant) => this.removeCombatant(combatant)}\r\n                            addCondition={(combatant) => this.addCondition(combatant)}\r\n                            editCondition={(combatant, condition) => this.editCondition(combatant, condition)}\r\n                            removeCondition={(combatant, conditionID) => this.removeCondition(combatant, conditionID)}\r\n                            mapAdd={(combatant, x, y) => this.mapAdd(combatant, x, y)}\r\n                            mapMove={(combatant, dir) => this.mapMove(combatant, dir)}\r\n                            mapRemove={combatant => this.mapRemove(combatant)}\r\n                            endTurn={(combatant) => this.endTurn(combatant)}\r\n                            changeHP={(combatant, hp, temp) => this.changeHP(combatant, hp, temp)}\r\n                            close={(notification, removeCondition) => this.closeNotification(notification, removeCondition)}\r\n                        />\r\n                    );\r\n                    if (combat) {\r\n                        var encounter = this.getEncounter(combat.encounterID);\r\n                        if (encounter) {\r\n                            var xp = 0;\r\n                            combat.combatants.filter(c => c.type === \"monster\")\r\n                                .forEach(combatant => {\r\n                                    xp += utils.experience((combatant as Combatant & Monster).challenge);\r\n                                });\r\n\r\n                            actions = (\r\n                                <div className=\"actions\">\r\n                                    <div className=\"section\">\r\n                                        <div className=\"text\">round: {combat.round}</div>\r\n                                    </div>\r\n                                    <div className=\"section\">\r\n                                        <div className=\"text\">xp: {xp}</div>\r\n                                    </div>\r\n                                    <div className=\"section\" style={{ display: encounter.waves.length === 0 ? \"none\" : \"\"}}>\r\n                                        <button onClick={() => this.openWaveModal()}>add wave</button>\r\n                                    </div>\r\n                                    <div className=\"section\">\r\n                                        <button onClick={() => this.pauseCombat()}>pause encounter</button>\r\n                                    </div>\r\n                                    <div className=\"section\">\r\n                                        <button onClick={() => this.endCombat()}>end encounter</button>\r\n                                    </div>\r\n                                </div>\r\n                            );\r\n                        }\r\n                    }\r\n                    break;\r\n                default:\r\n                    // Do nothing\r\n                    break;\r\n            }\r\n\r\n            var modal = null;\r\n            if (this.state.modal) {\r\n                var modalTitle = null;\r\n                var modalContent = null;\r\n                var modalAllowClose = true;\r\n                var modalAllowScroll = true;\r\n                var modalButtons = {\r\n                    left: [] as JSX.Element[],\r\n                    right: [] as JSX.Element[]\r\n                };\r\n\r\n                switch (this.state.modal.type) {\r\n                    case \"about\":\r\n                        modalContent = (\r\n                            <AboutModal\r\n                                options={this.state.options}\r\n                                resetAll={() => this.resetAll()}\r\n                                changeValue={(source, type, value) => this.changeValue(source, type, value)}\r\n                            />\r\n                        );\r\n                        break;\r\n                    case \"demographics\":\r\n                        modalTitle = \"demographics\";\r\n                        modalContent = (\r\n                            <DemographicsModal\r\n                                library={this.state.library}\r\n                            />\r\n                        );\r\n                        break;\r\n                    case \"monster\":\r\n                        modalTitle = \"monster editor\";\r\n                        modalContent = (\r\n                            <MonsterEditorModal\r\n                                monster={this.state.modal.monster}\r\n                                library={this.state.library}\r\n                                showMonsters={this.state.modal.showMonsters}\r\n                            />\r\n                        );\r\n                        modalAllowClose = false;\r\n                        modalAllowScroll = false;\r\n                        modalButtons.left = [\r\n                            <Checkbox\r\n                                key=\"similar\"\r\n                                label=\"similar monsters\"\r\n                                checked={this.state.modal.showMonsters}\r\n                                changeValue={() => this.toggleShowSimilarMonsters()}\r\n                            /> \r\n                        ];\r\n                        modalButtons.right = [\r\n                            <button key=\"save\" onClick={() => this.saveMonster()}>save</button>,\r\n                            <button key=\"cancel\" onClick={() => this.closeModal()}>cancel</button>\r\n                        ];\r\n                        break;\r\n                    case \"map\":\r\n                        modalTitle = \"map editor\";\r\n                        modalContent = (\r\n                            <MapEditorModal\r\n                                map={this.state.modal.map}\r\n                            />\r\n                        );\r\n                        modalAllowClose = false;\r\n                        modalAllowScroll = false;\r\n                        modalButtons.right = [\r\n                            <button key=\"save\" onClick={() => this.saveMap()}>save</button>,\r\n                            <button key=\"cancel\" onClick={() => this.closeModal()}>cancel</button>\r\n                        ];\r\n                        break;\r\n                    case \"combat-start\":\r\n                        modalTitle = \"start a new encounter\";\r\n                        modalContent = (\r\n                            <CombatStartModal\r\n                                combatSetup={this.state.modal.combatSetup}\r\n                                parties={this.state.parties}\r\n                                encounters={this.state.encounters}\r\n                                mapFolios={this.state.mapFolios}\r\n                                getMonster={(monsterName, groupName) => this.getMonster(monsterName, groupName) || null}\r\n                                notify={() => this.setState({modal: this.state.modal})}\r\n                            />\r\n                        );\r\n                        modalAllowClose = false;\r\n                        modalAllowScroll = false;\r\n                        modalButtons.right = [\r\n                            <button key=\"start encounter\" className={this.state.modal.combatSetup.partyID && this.state.modal.combatSetup.encounterID ? \"\" : \"disabled\"} onClick={() => this.startCombat()}>start encounter</button>,\r\n                            <button key=\"cancel\" onClick={() => this.closeModal()}>cancel</button>\r\n                        ];\r\n                        break;\r\n                    case \"combat-wave\":\r\n                        modalTitle = \"encounter waves\";\r\n                        modalContent = (\r\n                            <CombatStartModal\r\n                                combatSetup={this.state.modal.combatSetup}\r\n                                encounters={this.state.encounters}\r\n                                getMonster={(monsterName, groupName) => this.getMonster(monsterName, groupName) || null}\r\n                                notify={() => this.setState({modal: this.state.modal})}\r\n                            />\r\n                        );\r\n                        modalAllowClose = false;\r\n                        modalAllowScroll = false;\r\n                        modalButtons.right = [\r\n                            <button key=\"add wave\" className={this.state.modal.combatSetup.waveID !== null ? \"\" : \"disabled\"} onClick={() => this.addWaveToCombat()}>add wave</button>,\r\n                            <button key=\"cancel\" onClick={() => this.closeModal()}>cancel</button>\r\n                        ];\r\n                        break;\r\n                    case \"condition-add\":\r\n                        modalTitle = \"add a condition\";\r\n                        modalContent = (\r\n                            <ConditionModal\r\n                                condition={this.state.modal.condition}\r\n                                combatant={this.state.modal.combatant}\r\n                                combat={this.state.modal.combat}\r\n                            />\r\n                        );\r\n                        modalAllowClose = false;\r\n                        modalAllowScroll = false;\r\n                        modalButtons.right = [\r\n                            <button key=\"add\" onClick={() => this.addConditionFromModal()}>add</button>,\r\n                            <button key=\"cancel\" onClick={() => this.closeModal()}>cancel</button>\r\n                        ];\r\n                        break;\r\n                    case \"condition-edit\":\r\n                        modalTitle = \"edit condition\";\r\n                        modalContent = (\r\n                            <ConditionModal\r\n                                condition={this.state.modal.condition}\r\n                                combatant={this.state.modal.combatant}\r\n                                combat={this.state.modal.combat}\r\n                            />\r\n                        );\r\n                        modalAllowClose = false;\r\n                        modalButtons.right = [\r\n                            <button key=\"save\" onClick={() => this.editConditionFromModal()}>save</button>,\r\n                            <button key=\"cancel\" onClick={() => this.closeModal()}>cancel</button>\r\n                        ];\r\n                        break;\r\n                    default:\r\n                        // Do nothing\r\n                        break;\r\n                }\r\n\r\n                modal = (\r\n                    <div className=\"overlay\">\r\n                        <div className=\"modal\">\r\n                            <div className=\"modal-header\">\r\n                                <div className=\"title\">{modalTitle}</div>\r\n                                {modalAllowClose ? <img className=\"image\" src={close} alt=\"close\" onClick={() => this.closeModal()} /> : null}\r\n                            </div>\r\n                            <div className={modalAllowScroll ? \"modal-content scrollable\" : \"modal-content\"}>\r\n                                {modalContent}\r\n                            </div>\r\n                            <div className=\"modal-footer\">\r\n                                <div className=\"left\">{modalButtons.left}</div>\r\n                                <div className=\"right\">{modalButtons.right}</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className=\"dojo\">\r\n                    <Titlebar\r\n                        actions={actions}\r\n                        blur={modal !== null}\r\n                        openHome={() => this.setView(\"home\")}\r\n                        openAbout={() => this.openAbout()}\r\n                    />\r\n                    <div className={(modal === null) ? \"page-content\" : \"page-content blur\"}>\r\n                        {content}\r\n                    </div>\r\n                    <Navbar\r\n                        view={this.state.view}\r\n                        parties={this.state.parties}\r\n                        library={this.state.library}\r\n                        encounters={this.state.encounters}\r\n                        blur={modal !== null}\r\n                        setView={view => this.setView(view)}\r\n                    />\r\n                    {modal}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './style/css/foundation.css';\r\nimport './style/scss/app.scss';\r\nimport './style/scss/controls.scss';\r\n\r\nimport Dojo from './components/dojo';\r\n\r\nReactDOM.render(<Dojo />, document.getElementById('root'));\r\n"],"sourceRoot":""}