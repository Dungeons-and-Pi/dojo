{"version":3,"sources":["resources/images/down-arrow-black.svg","resources/images/down-arrow.svg","resources/images/close-black.svg","resources/images/warning.svg","resources/images/ellipsis.svg","resources/images/minus.svg","resources/images/plus.svg","resources/images/checked.svg","resources/images/unchecked.svg","resources/images/settings.svg","utils/utils.ts","utils/factory.ts","components/cards/info-card.tsx","components/cards/information/combat-manager-card.tsx","components/controls/confirm-button.tsx","components/controls/dropdown.tsx","components/controls/expander.tsx","components/controls/radial.tsx","components/controls/spin.tsx","components/panels/ability-score-panel.tsx","components/panels/conditions-panel.tsx","components/panels/traits-panel.tsx","components/cards/monster-card.tsx","components/cards/pc-card.tsx","components/panels/hit-point-gauge.tsx","components/panels/map-panel.tsx","components/list-items/combat-list-item.tsx","components/panels/card-group.tsx","components/screens/combat-manager-screen.tsx","components/panels/difficulty-chart-panel.tsx","components/cards/encounter-card.tsx","components/cards/error-card.tsx","models/monster-group.ts","components/cards/filter-card.tsx","components/cards/information/encounter-builder-card.tsx","components/cards/wave-card.tsx","components/list-items/encounter-list-item.tsx","components/screens/encounter-builder-screen.tsx","components/screens/home-screen.tsx","components/cards/information/map-folios-card.tsx","components/cards/map-card.tsx","components/cards/map-folio-card.tsx","components/list-items/map-folio-list-item.tsx","components/screens/map-folios-screen.tsx","components/cards/information/monster-library-card.tsx","components/cards/monster-group-card.tsx","components/list-items/monster-group-list-item.tsx","components/screens/monster-library-screen.tsx","components/cards/information/parties-card.tsx","components/cards/party-card.tsx","components/list-items/party-list-item.tsx","components/screens/parties-screen.tsx","components/controls/checkbox.tsx","components/modals/about-modal.tsx","components/controls/selector.tsx","components/modals/combat-start-modal.tsx","models/condition.ts","components/controls/radio-group.tsx","components/modals/condition-modal.tsx","components/modals/demographics-modal.tsx","models/map-folio.ts","components/cards/map-tile-card.tsx","components/modals/map-editor-modal.tsx","components/modals/monster-editor-modal.tsx","components/panels/navbar.tsx","components/panels/titlebar.tsx","components/dojo.tsx","index.js"],"names":["module","exports","__webpack_require__","p","Utils","monster","library","group","this","monsterIdToGroup","id","grp","find","g","monsters","includes","filter","text","result","toLowerCase","split","forEach","token","indexOf","s4","Math","floor","random","toString","substring","collection","sort","a","b","aName","name","bName","value","count","aValue","bValue","score","mod","modifierValue","str","size","cr","parseInt","push","ac","hpMin","hpMax","attack","dmgMin","dmgMax","save","level","difficulty","type","delta","condition","combat","duration","saveDuration","saveType","toUpperCase","saves","saveDC","combatantDuration","point","c","combatants","cmb","combatantID","displayName","roundsDuration","rounds","encounter","monsterNames","slots","slot","names","monsterName","n","Factory","guid","pcs","active","player","race","classes","languages","passiveInsight","passiveInvestigation","passivePerception","initiative","url","category","tag","alignment","challenge","abilityScores","dex","con","int","wis","cha","hpTemp","hitDice","damage","resist","vulnerable","immune","savingThrows","speed","skills","senses","equipment","traits","conditionImmunities","usage","waves","monsterGroupName","maps","items","x","y","width","height","terrain","partyID","encounterID","waveID","folioID","mapID","encounterInitMode","map","round","notifications","issues","timestamp","combatant","InfoCard","heading","props","getHeading","content","getContent","react_default","createElement","className","e","console","error","React","Component","defaultProps","CombatManagerCard","info_card_InfoCard","ConfirmButton","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","pressed","setState","toggle","callback","_this2","src","warning","alt","details","onClick","perform","disabled","ex","Dropdown","open","stopPropagation","optionID","select","options","length","selectedText","style","selectedID","option","o","placeholder","key","title","ellipsis","dropdown_DropdownOption","selected","toggleOpen","DropdownOption","_this3","click","Expander","expanded","arrow","Radial","dir","dir2","arguments","undefined","direction","showOut","showIn","showDiag","display","transform","padding","Spin","nudgeValue","preventDefault","source","minusBtns","plusBtns","factors","factor","onTouchEnd","touchEnd","reverse","minus","plus","infoWidth","label","AbilityScorePanel","showAbilityScores","edit","spin_Spin","toggleAbilityScores","modifier","ConditionsPanel","conditions","conditions_panel_ConditionPanel","nudgeConditionValue","editCondition","removeCondition","conditionID","addCondition","ConditionPanel","conditionDurationText","description","conditionText","expander_Expander","TraitsPanel","actions","legendaryActions","lairActions","regionalEffects","item","traits_panel_TraitPanel","trait","mode","changeTrait","action","removeTrait","copyTrait","addTrait","TraitPanel","traitType","onChange","event","target","confirm_button_ConfirmButton","MonsterCard","showDetails","cloneName","damageOrHealing","max","hp","min","changeHP","temp","val","sizeAndType","align","wave","_this4","some","s","die","hitDieType","conMod","conModStr","_this5","editMonster","setCloneName","cloneMonster","groupOptions","dropdown_Dropdown","moveToGroup","removeMonster","removeEncounterSlot","canAdd","monsterIsInWave","addEncounterSlot","radial_Radial","mapMove","mapRemove","mapAdd","pending","defeated","removeCombatant","current","endTurn","makeDefeated","makeCurrent","makeActive","changeValue","stats","slotSection","getHP","ability_score_panel_AbilityScorePanel","traits_panel_TraitsPanel","nudgeDamage","heal","setDamage","conditions_panel_ConditionsPanel","imageStyle","toggleDetails","PCCard","removePC","commonStatBlock","href","rel","HitPointGauge","hpCurrent","hpBloodied","hpWidth","hpTempBar","hpTempWidth","MapPanel","border","dimensions","i","minX","maxX","minY","maxY","mapDimensions","sideLength","getSideLength","left","top","getMapDimensions","grid","gridStyle","getStyle","map_panel_GridSquare","setSelectedItemID","onDoubleClick","posX","posY","addMapTile","tiles","tileStyle","map_panel_MapTile","tile","selectable","selectedItemID","thumbnail","tokens","tokenStyle","map_panel_MapToken","simple","mt","dragOverlay","showOverlay","yOver","xOver","overlayStyle","overlay","gridSquareClicked","GridSquare","doubleClick","MapTile","MapToken","initials","hpGauge","altitudeBadge","conditionsBadge","hit_point_gauge_HitPointGauge","altitude","CombatListItem","map_panel_MapPanel","setSelection","CardGroup","showCards","hidden","closeBtn","showClose","close","showToggle","toggleCards","cards","CombatManagerScreen","selectedTokenID","addingToMapID","pc_card_PCCard","setAddingToMapID","monster_card_MonsterCard","createCard","combat_manager_screen_PendingCombatantRow","setSelectedTokenID","combat_manager_screen_CombatantRow","showHelp","pendingHelp","concat","activeHelp","combat_manager_screen_NotificationPanel","notification","mapSection","addCombatantToMap","selectedCombatant","card_group_CardGroup","help","combat_manager_card_CombatManagerCard","combats","combat_list_item_CombatListItem","resumeEncounter","createCombat","NotificationPanel","saveSuccess","PendingCombatantRow","_this6","getInformationText","CombatantRow","pc","notes","_this7","gauge","_this8","getContentPC","getContentMonster","DifficultyChartPanel","monsterCount","monsterXp","getMonster","experience","xpThresholds","diffSection","adjustedXp","experienceFactor","party","xpEasy","xpMedium","xpHard","xpDeadly","pcExperience","adjustedDifficulty","small","getLeft","xp","getRight","right","EncounterCard","parties","partyOptions","difficultySection","selectParty","difficulty_chart_panel_DifficultyChartPanel","selection","addWave","removeEncounter","ErrorCard","SIZE_TYPES","CATEGORY_TYPES","TRAIT_TYPES","FilterCard","showAll","sizeOptions","catOptions","cat","resetFilter","summary","challengeMin","challengeMax","toggleAll","EncounterBuilderCard","encounters","WaveCard","removeWave","EncounterListItem","EncounterBuilderScreen","getMonsterGroup","match","nudgeChallenge","changeFilterValue","index","error_card_ErrorCard","libraryCards","filter_card_FilterCard","nudgeFilterValue","matchMonster","encounter_builder_card_EncounterBuilderCard","encounterName","encounter_list_item_EncounterListItem","selectEncounter","encounterCards","encounter_card_EncounterCard","getMonsterCards","card","w","waveCards","wave_card_WaveCard","field","addEncounter","getLibrarySection","HomeScreen","addOpenGameContent","MapFoliosCard","mapFolios","MapCard","editMap","removeMap","MapFolioCard","addMap","removeMapFolio","MapFolioListItem","mapFolio","MapFoliosScreen","map_folios_card_MapFoliosCard","folios","map_folio_list_item_MapFolioListItem","f","selectMapFolio","folio","folioCards","map_folio_card_MapFolioCard","m","map_card_MapCard","addMapFolio","MonsterLibraryCard","MonsterGroupCard","addMonster","sortMonsters","removeMonsterGroup","MonsterGroupListItem","matchGroup","MonsterLibraryScreen","monster_library_card_MonsterLibraryCard","listItems","showMonsterGroup","monster_group_list_item_MonsterGroupListItem","selectMonsterGroup","monster_group_card_MonsterGroupCard","groupID","addMonsterGroup","PartiesCard","PartyCard","activePCs","join","reduce","array","localeCompare","insightSummary","investigationSummary","perceptionSummary","insight","invest","percep","addPC","sortPCs","removeParty","PartyListItem","PartiesScreen","parties_card_PartiesCard","party_list_item_PartyListItem","activeCards","inactiveCards","party_card_PartyCard","activePC","inactivePC","addParty","Checkbox","checked","unchecked","AboutModal","pkg","version","resetAll","checkbox_Checkbox","Selector","tabs","itemsPerRow","rowCount","ceil","rowContents","rowIndex","selector_SelectorOption","rowSections","row","SelectorOption","CombatStartModal","combatSetup","notify","enc","getMonsterNames","slotID","partyContent","selectedParty","pcSections","setParty","encounterOptions","encounterContent","selectedEncounter","monsterSections","waveMonsters","setEncounter","folioOptions","selectMapSection","thumbnailSection","mapOptions","selector_Selector","setMapID","setFolioID","waveOptions","waveContent","selectedWave","setWave","_this9","_this10","slotsContainer","slotNames","inputs","combat_start_modal_MonsterName","changeName","setEncounterInitMode","leftSection","rightSection","getPartySection","getEncounterSection","getMapSection","getDifficultySection","getMonsterSection","getWaveSection","margin","MonsterName","_this11","CONDITION_TYPES","RadioGroup","radio_group_RadioGroupItem","itemID","RadioGroupItem","ConditionModal","conditionName","durationType","createConditionDurationSaves","createConditionDurationCombatant","createConditionDurationRounds","object","controls","saveOptions","pointOptions","combatantOptions","durations","radio_group_RadioGroup","setCondition","setDuration","DemographicsModal","chart","demographics","allMonsters","buckets","maxBucketSize","bucket","bars","set","selectChart","TERRAIN_TYPES","MapTileCard","terrainOptions","t","moveMapItem","resizeMapItem","cloneMapItem","removeMapItem","MapEditorModal","selectedTileID","createMapItem","smallMapItem","bigMapItem","copy","JSON","parse","stringify","splice","tools","map_tile_card_MapTileCard","mapItem","setSelectedTileID","MonsterEditorModal","page","showFilter","helpSection","subtype","sections","getHelpOptionsForPage","section","setRandomValue","findIndex","distinct","d","addedIDs","avg","createTrait","getActionTypeName","plural","newValue","hpPerDie","getValueSection","getActionsSection","dataType","values","v","sortByValue","sortByCount","valueSections","rows","addRandomTrait","criteria","criteriaText","similar","filterContent","toggleMatch","geneSplice","toggleFilter","showMonsters","getMonsters","selector","setHelpSection","getHelpSection","monsterList","getFilterCard","transition","setPage","Navbar","partiesStyle","view","libraryStyle","encounterStyle","mapStyle","combatStyle","encountersEnabled","combatEnabled","blur","setView","Titlebar","openHome","cog","openAbout","Dojo","selectedPartyID","selectedMonsterGroupID","selectedEncounterID","selectedMapFolioID","selectedCombatID","modal","libraryFilter","data","json","window","localStorage","getItem","setItem","createParty","getParty","createPC","createMonsterGroup","createMonster","sourceGroup","findMonster","original","clone","parseChallenge","challenge_rating","armor_class","hit_points","hit_dice","strength","dexterity","constitution","intelligence","wisdom","charisma","damage_resistances","damage_vulnerabilities","damage_immunities","condition_immunities","skill","special_abilities","rawTrait","buildTrait","legendary_actions","groupName","getMonsterGroupByName","openBracket","closeBracket","desc","createEncounter","getEncounter","createEncounterSlot","sortEncounterSlots","slotContainer","createEncounterWave","createMapFolio","getMapFolio","createMap","setup","createCombatSetup","partyName","init","groupRoll","dieRoll","singleRoll","sortCombatants","getCombat","Date","toLocaleString","newRound","actor","issue","miniSize","saveNotification","createNotification","endNotification","createCondition","conditionIndex","obj","home_screen_HomeScreen","parties_screen_PartiesScreen","monster_library_screen_MonsterLibraryScreen","openDemographics","encounter_builder_screen_EncounterBuilderScreen","addWaveToEncounter","map_folios_screen_MapFoliosScreen","combat_manager_screen_CombatManagerScreen","pausedCombat","resumeCombat","closeNotification","openWaveModal","pauseCombat","endCombat","modalTitle","modalContent","modalAllowClose","modalAllowScroll","modalButtons","about_modal_AboutModal","demographics_modal_DemographicsModal","monster_editor_modal_MonsterEditorModal","toggleShowSimilarMonsters","saveMonster","closeModal","map_editor_modal_MapEditorModal","saveMap","combat_start_modal_CombatStartModal","startCombat","addWaveToCombat","condition_modal_ConditionModal","addConditionFromModal","editConditionFromModal","titlebar_Titlebar","navbar_Navbar","ReactDOM","render","dojo_Dojo","document","getElementById"],"mappings":"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","file":"static/js/main.799e543c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/down-arrow-black.a2fc7a1f.svg\";","module.exports = __webpack_public_path__ + \"static/media/down-arrow.697dc1af.svg\";","module.exports = __webpack_public_path__ + \"static/media/close-black.7645a5b9.svg\";","module.exports = __webpack_public_path__ + \"static/media/warning.67a11a95.svg\";","module.exports = __webpack_public_path__ + \"static/media/ellipsis.9650a20f.svg\";","module.exports = __webpack_public_path__ + \"static/media/minus.7003cf50.svg\";","module.exports = __webpack_public_path__ + \"static/media/plus.b60accff.svg\";","module.exports = __webpack_public_path__ + \"static/media/checked.5cbd1005.svg\";","module.exports = __webpack_public_path__ + \"static/media/unchecked.3d4ae2dd.svg\";","module.exports = __webpack_public_path__ + \"static/media/settings.042bb1c2.svg\";","import { Combat } from '../models/combat';\r\nimport { Condition, ConditionDurationCombatant, ConditionDurationRounds, ConditionDurationSaves } from '../models/condition';\r\nimport { Encounter, EncounterWave } from '../models/encounter';\r\nimport { Monster, MonsterGroup } from '../models/monster-group';\r\n\r\nexport default class Utils {\r\n\r\n    // This is an internal dictionary to speed up lookup\r\n    private static monsterIdToGroup: { [id: string]: MonsterGroup } = {};\r\n\r\n    public static getMonsterGroup(monster: Monster, library: MonsterGroup[]): MonsterGroup {\r\n        let group = this.monsterIdToGroup[monster.id];\r\n\r\n        if (!group) {\r\n            const grp = library.find(g => g.monsters.includes(monster));\r\n            if (grp) {\r\n                group = grp;\r\n                this.monsterIdToGroup[monster.id] = group;\r\n            }\r\n        }\r\n\r\n        return group;\r\n    }\r\n\r\n    public static match(filter: string, text: string): boolean {\r\n        if (!filter) {\r\n            return true;\r\n        }\r\n\r\n        let result = true;\r\n\r\n        const tokens = filter.toLowerCase().split(' ');\r\n        tokens.forEach(token => {\r\n            if (text.toLowerCase().indexOf(token) === -1) {\r\n                result = false;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    public static guid(): string {\r\n        const s4 = () => Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\r\n        return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\r\n    }\r\n\r\n    public static sort(collection: any[]): any[] {\r\n        collection.sort((a, b) => {\r\n            const aName = a.name.toLowerCase();\r\n            const bName = b.name.toLowerCase();\r\n            if (aName < bName) { return -1; }\r\n            if (aName > bName) { return 1; }\r\n            return 0;\r\n        });\r\n        return collection;\r\n    }\r\n\r\n    public static sortByValue(collection: any[]): any[] {\r\n        collection.sort((a, b) => {\r\n            if (a.value < b.value) { return -1; }\r\n            if (a.value > b.value) { return 1; }\r\n            return 0;\r\n        });\r\n        return collection;\r\n    }\r\n\r\n    public static sortByCount(collection: any[]): any[] {\r\n        collection.sort((a, b) => {\r\n            if (a.count < b.count) { return 1; }\r\n            if (a.count > b.count) { return -1; }\r\n\r\n            const aValue = a.value.toLowerCase();\r\n            const bValue = b.value.toLowerCase();\r\n            if (aValue < bValue) { return -1; }\r\n            if (aValue > bValue) { return 1; }\r\n\r\n            return 0;\r\n        });\r\n        return collection;\r\n    }\r\n\r\n    public static modifierValue(score: number): number {\r\n        return Math.floor((score - 10) / 2);\r\n    }\r\n\r\n    public static modifier(score: number): string {\r\n        const mod = this.modifierValue(score);\r\n        let str = mod.toString();\r\n        if (mod >= 0) {\r\n            str = '+' + str;\r\n        }\r\n        return str;\r\n    }\r\n\r\n    public static dieRoll(): number {\r\n        return Math.floor(Math.random() * 20) + 1;\r\n    }\r\n\r\n    public static miniSize(size: string): number {\r\n        switch (size) {\r\n            case 'tiny': return 1;\r\n            case 'small': return 1;\r\n            case 'medium': return 1;\r\n            case 'large': return 2;\r\n            case 'huge': return 3;\r\n            case 'gargantuan': return 4;\r\n            default: return 1;\r\n        }\r\n    }\r\n\r\n    public static hitDieType(size: string) {\r\n        switch (size) {\r\n            case 'tiny': return 4;\r\n            case 'small': return 6;\r\n            case 'medium': return 8;\r\n            case 'large': return 10;\r\n            case 'huge': return 12;\r\n            case 'gargantuan': return 20;\r\n            default: return 8;\r\n        }\r\n    }\r\n\r\n    public static challenge(cr: number): string {\r\n        switch (cr) {\r\n            case 0.125: return '1/8';\r\n            case 0.25: return '1/4';\r\n            case 0.5: return '1/2';\r\n            default: return cr.toString();\r\n        }\r\n    }\r\n\r\n    public static parseChallenge(cr: string): number {\r\n        switch (cr) {\r\n            case '1/8': return 0.125;\r\n            case '1/4': return 0.25;\r\n            case '1/2': return 0.5;\r\n            default: return parseInt(cr, 10);\r\n        }\r\n    }\r\n\r\n    public static challengeDetails(): any[] {\r\n        const result: any[] = [];\r\n\r\n        result.push({ cr: 0,        ac: 13,       hpMin: 1, hpMax: 6,       attack: 3,  dmgMin: 0,   dmgMax: 1,   save: 13 });\r\n        result.push({ cr: 0.125,    ac: 13,       hpMin: 7, hpMax: 35,      attack: 3,  dmgMin: 2,   dmgMax: 3,   save: 13 });\r\n        result.push({ cr: 0.25,     ac: 13,       hpMin: 36, hpMax: 49,     attack: 3,  dmgMin: 4,   dmgMax: 5,   save: 13 });\r\n        result.push({ cr: 0.5,      ac: 13,       hpMin: 50, hpMax: 70,     attack: 3,  dmgMin: 6,   dmgMax: 8,   save: 13 });\r\n        result.push({ cr: 1,        ac: 13,       hpMin: 71, hpMax: 85,     attack: 3,  dmgMin: 9,   dmgMax: 14,  save: 13 });\r\n        result.push({ cr: 2,        ac: 13,       hpMin: 86, hpMax: 100,    attack: 3,  dmgMin: 15,  dmgMax: 20,  save: 13 });\r\n        result.push({ cr: 3,        ac: 13,       hpMin: 101, hpMax: 115,   attack: 4,  dmgMin: 21,  dmgMax: 26,  save: 13 });\r\n        result.push({ cr: 4,        ac: 14,       hpMin: 116, hpMax: 130,   attack: 5,  dmgMin: 27,  dmgMax: 32,  save: 14 });\r\n        result.push({ cr: 5,        ac: 15,       hpMin: 131, hpMax: 145,   attack: 6,  dmgMin: 33,  dmgMax: 38,  save: 15 });\r\n        result.push({ cr: 6,        ac: 15,       hpMin: 146, hpMax: 160,   attack: 6,  dmgMin: 39,  dmgMax: 44,  save: 15 });\r\n        result.push({ cr: 7,        ac: 15,       hpMin: 161, hpMax: 175,   attack: 6,  dmgMin: 45,  dmgMax: 50,  save: 15 });\r\n        result.push({ cr: 8,        ac: 16,       hpMin: 176, hpMax: 190,   attack: 7,  dmgMin: 51,  dmgMax: 56,  save: 16 });\r\n        result.push({ cr: 9,        ac: 16,       hpMin: 191, hpMax: 205,   attack: 7,  dmgMin: 57,  dmgMax: 62,  save: 16 });\r\n        result.push({ cr: 10,       ac: 17,       hpMin: 206, hpMax: 220,   attack: 7,  dmgMin: 63,  dmgMax: 68,  save: 16 });\r\n        result.push({ cr: 11,       ac: 17,       hpMin: 221, hpMax: 235,   attack: 8,  dmgMin: 69,  dmgMax: 74,  save: 17 });\r\n        result.push({ cr: 12,       ac: 17,       hpMin: 236, hpMax: 250,   attack: 8,  dmgMin: 75,  dmgMax: 80,  save: 17 });\r\n        result.push({ cr: 13,       ac: 18,       hpMin: 251, hpMax: 265,   attack: 8,  dmgMin: 81,  dmgMax: 86,  save: 18 });\r\n        result.push({ cr: 14,       ac: 18,       hpMin: 266, hpMax: 280,   attack: 8,  dmgMin: 87,  dmgMax: 92,  save: 18 });\r\n        result.push({ cr: 15,       ac: 18,       hpMin: 281, hpMax: 295,   attack: 8,  dmgMin: 93,  dmgMax: 98,  save: 18 });\r\n        result.push({ cr: 16,       ac: 18,       hpMin: 296, hpMax: 310,   attack: 9,  dmgMin: 99,  dmgMax: 104, save: 18 });\r\n        result.push({ cr: 17,       ac: 19,       hpMin: 311, hpMax: 325,   attack: 10, dmgMin: 105, dmgMax: 110, save: 19 });\r\n        result.push({ cr: 18,       ac: 19,       hpMin: 326, hpMax: 340,   attack: 10, dmgMin: 111, dmgMax: 116, save: 19 });\r\n        result.push({ cr: 19,       ac: 19,       hpMin: 341, hpMax: 355,   attack: 10, dmgMin: 117, dmgMax: 122, save: 19 });\r\n        result.push({ cr: 20,       ac: 19,       hpMin: 356, hpMax: 400,   attack: 10, dmgMin: 123, dmgMax: 140, save: 19 });\r\n        result.push({ cr: 21,       ac: 19,       hpMin: 401, hpMax: 445,   attack: 11, dmgMin: 141, dmgMax: 158, save: 20 });\r\n        result.push({ cr: 22,       ac: 19,       hpMin: 446, hpMax: 490,   attack: 11, dmgMin: 159, dmgMax: 176, save: 20 });\r\n        result.push({ cr: 23,       ac: 19,       hpMin: 491, hpMax: 535,   attack: 11, dmgMin: 177, dmgMax: 194, save: 20 });\r\n        result.push({ cr: 24,       ac: 19,       hpMin: 536, hpMax: 580,   attack: 12, dmgMin: 195, dmgMax: 212, save: 21 });\r\n        result.push({ cr: 25,       ac: 19,       hpMin: 581, hpMax: 625,   attack: 12, dmgMin: 213, dmgMax: 230, save: 21 });\r\n        result.push({ cr: 26,       ac: 19,       hpMin: 626, hpMax: 670,   attack: 12, dmgMin: 231, dmgMax: 248, save: 21 });\r\n        result.push({ cr: 27,       ac: 19,       hpMin: 671, hpMax: 715,   attack: 13, dmgMin: 249, dmgMax: 266, save: 22 });\r\n        result.push({ cr: 28,       ac: 19,       hpMin: 716, hpMax: 760,   attack: 13, dmgMin: 267, dmgMax: 284, save: 22 });\r\n        result.push({ cr: 29,       ac: 19,       hpMin: 761, hpMax: 805,   attack: 13, dmgMin: 285, dmgMax: 302, save: 22 });\r\n        result.push({ cr: 30,       ac: 19,       hpMin: 806, hpMax: 850,   attack: 14, dmgMin: 303, dmgMax: 320, save: 23 });\r\n\r\n        return result;\r\n    }\r\n\r\n    public static experience(cr: number): number {\r\n        switch (cr) {\r\n            case 0: return 10;\r\n            case 0.125: return 25;\r\n            case 0.25: return 50;\r\n            case 0.5: return 100;\r\n            case 1: return 200;\r\n            case 2: return 450;\r\n            case 3: return 700;\r\n            case 4: return 1100;\r\n            case 5: return 1800;\r\n            case 6: return 2300;\r\n            case 7: return 2900;\r\n            case 8: return 3900;\r\n            case 9: return 5000;\r\n            case 10: return 5900;\r\n            case 11: return 7200;\r\n            case 12: return 8400;\r\n            case 13: return 10000;\r\n            case 14: return 11500;\r\n            case 15: return 13000;\r\n            case 16: return 15000;\r\n            case 17: return 18000;\r\n            case 18: return 20000;\r\n            case 19: return 22000;\r\n            case 20: return 25000;\r\n            case 21: return 33000;\r\n            case 22: return 41000;\r\n            case 23: return 50000;\r\n            case 24: return 62000;\r\n            case 30: return 155000;\r\n            default: return 0;\r\n        }\r\n    }\r\n\r\n    public static experienceFactor(count: number): number {\r\n        switch (count) {\r\n            case 0:\r\n                return 0;\r\n            case 1:\r\n                return 1;\r\n            case 2:\r\n                return 1.5;\r\n            case 3:\r\n            case 4:\r\n            case 5:\r\n            case 6:\r\n                return 2;\r\n            case 7:\r\n            case 8:\r\n            case 9:\r\n            case 10:\r\n                return 2.5;\r\n            case 11:\r\n            case 12:\r\n            case 13:\r\n            case 14:\r\n                return 3;\r\n            default:\r\n                return 4;\r\n        }\r\n    }\r\n\r\n    public static pcExperience(level: number, difficulty: string): number {\r\n        switch (difficulty) {\r\n            case 'easy':\r\n                switch (level) {\r\n                    case 1: return 25;\r\n                    case 2: return 50;\r\n                    case 3: return 75;\r\n                    case 4: return 125;\r\n                    case 5: return 250;\r\n                    case 6: return 300;\r\n                    case 7: return 350;\r\n                    case 8: return 450;\r\n                    case 9: return 550;\r\n                    case 10: return 600;\r\n                    case 11: return 800;\r\n                    case 12: return 1000;\r\n                    case 13: return 1100;\r\n                    case 14: return 1250;\r\n                    case 15: return 1400;\r\n                    case 16: return 1600;\r\n                    case 17: return 2000;\r\n                    case 18: return 2100;\r\n                    case 19: return 2400;\r\n                    case 20: return 2800;\r\n                    default: return 0;\r\n                }\r\n            case 'medium':\r\n                switch (level) {\r\n                    case 1: return 50;\r\n                    case 2: return 100;\r\n                    case 3: return 150;\r\n                    case 4: return 250;\r\n                    case 5: return 500;\r\n                    case 6: return 600;\r\n                    case 7: return 750;\r\n                    case 8: return 900;\r\n                    case 9: return 1100;\r\n                    case 10: return 1200;\r\n                    case 11: return 1600;\r\n                    case 12: return 2000;\r\n                    case 13: return 2200;\r\n                    case 14: return 2500;\r\n                    case 15: return 2800;\r\n                    case 16: return 3200;\r\n                    case 17: return 3900;\r\n                    case 18: return 4200;\r\n                    case 19: return 4900;\r\n                    case 20: return 5700;\r\n                    default: return 0;\r\n                }\r\n            case 'hard':\r\n                switch (level) {\r\n                    case 1: return 75;\r\n                    case 2: return 150;\r\n                    case 3: return 225;\r\n                    case 4: return 375;\r\n                    case 5: return 750;\r\n                    case 6: return 900;\r\n                    case 7: return 1100;\r\n                    case 8: return 1400;\r\n                    case 9: return 1600;\r\n                    case 10: return 1900;\r\n                    case 11: return 2400;\r\n                    case 12: return 3000;\r\n                    case 13: return 3400;\r\n                    case 14: return 3800;\r\n                    case 15: return 4300;\r\n                    case 16: return 4800;\r\n                    case 17: return 5900;\r\n                    case 18: return 6300;\r\n                    case 19: return 7300;\r\n                    case 20: return 8500;\r\n                    default: return 0;\r\n                }\r\n            case 'deadly':\r\n                switch (level) {\r\n                    case 1: return 100;\r\n                    case 2: return 200;\r\n                    case 3: return 400;\r\n                    case 4: return 500;\r\n                    case 5: return 1100;\r\n                    case 6: return 1400;\r\n                    case 7: return 1700;\r\n                    case 8: return 2100;\r\n                    case 9: return 2400;\r\n                    case 10: return 2800;\r\n                    case 11: return 3600;\r\n                    case 12: return 4500;\r\n                    case 13: return 5100;\r\n                    case 14: return 5700;\r\n                    case 15: return 6400;\r\n                    case 16: return 7200;\r\n                    case 17: return 8800;\r\n                    case 18: return 9500;\r\n                    case 19: return 10900;\r\n                    case 20: return 12700;\r\n                    default: return 0;\r\n                }\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n\r\n    public static traitType(type: string): string {\r\n        switch (type) {\r\n            case 'trait':\r\n                return 'trait';\r\n            case 'action':\r\n                return 'action';\r\n            case 'legendary':\r\n                return 'legendary action';\r\n            case 'lair':\r\n                return 'lair action';\r\n            case 'regional':\r\n                return 'regional effect';\r\n            default:\r\n                return type;\r\n        }\r\n    }\r\n\r\n    public static nudgeChallenge(value: number, delta: number): number {\r\n        let result = 0;\r\n\r\n        switch (value) {\r\n            case 0:\r\n                if (delta === -1) {\r\n                    result = 0;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 0.125;\r\n                }\r\n                break;\r\n            case 0.125:\r\n                if (delta === -1) {\r\n                    result = 0;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 0.25;\r\n                }\r\n                break;\r\n            case 0.25:\r\n                if (delta === -1) {\r\n                    result = 0.125;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 0.5;\r\n                }\r\n                break;\r\n            case 0.5:\r\n                if (delta === -1) {\r\n                    result = 0.25;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 1;\r\n                }\r\n                break;\r\n            case 1:\r\n                if (delta === -1) {\r\n                    result = 0.5;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 2;\r\n                }\r\n                break;\r\n            default:\r\n                result = value + delta;\r\n                break;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public static conditionText(condition: Condition): string[] {\r\n        switch (condition.name) {\r\n            case 'blinded':\r\n                return [\r\n                    'a blinded creature can’t see and automatically fails any ability check that requires sight',\r\n                    'attack rolls against the creature have advantage, and the creature’s attack rolls have disadvantage'\r\n                ];\r\n            case 'charmed':\r\n                return [\r\n                    'a charmed creature can’t attack the charmer or target the charmer with harmful abilities or magical effects',\r\n                    'the charmer has advantage on any ability check to interact socially with the creature'\r\n                ];\r\n            case 'deafened':\r\n                return [\r\n                    'a deafened creature can’t hear and automatically fails any ability check that requires hearing.'\r\n                ];\r\n            case 'exhaustion': {\r\n                switch (condition.level) {\r\n                case 1:\r\n                    return [\r\n                        'disadvantage on ability checks'\r\n                    ];\r\n                case 2:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved'\r\n                    ];\r\n                case 3:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved',\r\n                        'disadvantage on attack rolls and saving throws'\r\n                    ];\r\n                case 4:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved',\r\n                        'disadvantage on attack rolls and saving throws',\r\n                        'hit point maximum halved'\r\n                    ];\r\n                case 5:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved',\r\n                        'disadvantage on attack rolls and saving throws',\r\n                        'hit point maximum halved',\r\n                        'speed reduced to 0'\r\n                    ];\r\n                case 6:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved',\r\n                        'disadvantage on attack rolls and saving throws',\r\n                        'hit point maximum halved',\r\n                        'speed reduced to 0',\r\n                        'death'\r\n                    ];\r\n                default:\r\n                    return [];\r\n                }\r\n            }\r\n            case 'frightened':\r\n                return [\r\n                    'a frightened creature has disadvantage on ability checks and attack rolls while the source of its fear is within line of sight',\r\n                    'the creature can’t willingly move closer to the source of its fear'\r\n                ];\r\n            case 'grappled':\r\n                return [\r\n                    'a grappled creature’s speed becomes 0, and it can’t benefit from any bonus to its speed',\r\n                    'the condition ends if the grappler is incapacitated',\r\n                    'the condition also ends if an effect removes the grappled creature from the reach of the grappler or grappling effect'\r\n                ];\r\n            case 'incapacitated':\r\n                return [\r\n                    'an incapacitated creature can’t take actions or reactions'\r\n                ];\r\n            case 'invisible':\r\n                return [\r\n                    'an invisible creature is impossible to see without the aid of magic or a special sense',\r\n                    'for the purpose of hiding, the creature is heavily obscured',\r\n                    'the creature’s location can be detected by any noise it makes or any tracks it leaves',\r\n                    'attack rolls against the creature have disadvantage, and the creature’s attack rolls have advantage'\r\n                ];\r\n            case 'paralyzed':\r\n                return [\r\n                    'a paralyzed creature is incapacitated (can’t take actions or reactions) and can’t move or speak',\r\n                    'the creature automatically fails strength and dexterity saving throws',\r\n                    'attack rolls against the creature have advantage',\r\n                    'any attack that hits the creature is a critical hit if the attacker is within 5 feet of the creature'\r\n                ];\r\n            case 'petrified':\r\n                return [\r\n                    /* tslint:disable-next-line:max-line-length */\r\n                    'a petrified creature is transformed, along with any nonmagical objects it is wearing or carrying, into a solid inanimate substance (usually stone)',\r\n                    'its weight increases by a factor of ten, and it ceases aging',\r\n                    'the creature is incapacitated (can’t take actions or reactions), can’t move or speak, and is unaware of its surroundings',\r\n                    'attack rolls against the creature have advantage',\r\n                    'the creature automatically fails strength and dexterity saving throws',\r\n                    'the creature has resistance to all damage',\r\n                    'the creature is immune to poison and disease, although a poison or disease already in its system is suspended, not neutralized'\r\n                ];\r\n            case 'poisoned':\r\n                return [\r\n                    'a poisoned creature has disadvantage on attack rolls and ability checks'\r\n                ];\r\n            case 'prone':\r\n                return [\r\n                    'a prone creature’s only movement option is to crawl, unless it stands up and thereby ends the condition',\r\n                    'the creature has disadvantage on attack rolls',\r\n                    /* tslint:disable-next-line:max-line-length */\r\n                    'an attack roll against the creature has advantage if the attacker is Within 5 feet of the creature; otherwise, the attack roll has disadvantage'\r\n                ];\r\n            case 'restrained':\r\n                return [\r\n                    'a restrained creature’s speed becomes 0, and it can’t benefit from any bonus to its speed',\r\n                    'attack rolls against the creature have advantage, and the creature’s attack rolls have disadvantage',\r\n                    'the creature has disadvantage on dexterity saving throws'\r\n                ];\r\n            case 'stunned':\r\n                return [\r\n                    'a stunned creature is incapacitated (can’t take actions or reactions), can’t move, and can speak only falteringly',\r\n                    'the creature automatically fails strength and dexterity saving throws',\r\n                    'attack rolls against the creature have advantage'\r\n                ];\r\n            case 'unconscious':\r\n                return [\r\n                    'an unconscious creature is incapacitated (can’t take actions or reactions), can’t move or speak, and is unaware of its surroundings',\r\n                    'the creature drops whatever its holding and falls prone',\r\n                    'the creature automatically fails strength and dexterity saving throws',\r\n                    'attack rolls against the creature have advantage',\r\n                    'any attack that hits the creature is a critical hit if the attacker is within 5 feet of the creature'\r\n                ];\r\n            case 'custom':\r\n                return [];\r\n            default:\r\n                return [];\r\n        }\r\n    }\r\n\r\n    public static conditionDurationText(condition: Condition, combat: Combat) {\r\n        if (condition.duration !== null) {\r\n            switch (condition.duration.type) {\r\n                case 'saves':\r\n                    const saveDuration = condition.duration as ConditionDurationSaves;\r\n                    let saveType = saveDuration.saveType.toString();\r\n                    if (saveType !== 'death') {\r\n                        saveType = saveType.toUpperCase();\r\n                    }\r\n                    const saves = saveDuration.count > 1 ? 'saves' : 'save';\r\n                    return 'until you make ' + saveDuration.count + ' ' + saveType + ' ' + saves + ' at dc ' + saveDuration.saveDC;\r\n                case 'combatant':\r\n                    const combatantDuration = condition.duration as ConditionDurationCombatant;\r\n                    const point = combatantDuration.point;\r\n                    const c = combat.combatants.find(cmb => cmb.id === combatantDuration.combatantID);\r\n                    const combatant = c ? (c.displayName || c.name || 'unnamed monster') + '\\'s' : 'someone\\'s';\r\n                    return 'until the ' + point + ' of ' + combatant + ' next turn';\r\n                case 'rounds':\r\n                    const roundsDuration = condition.duration as ConditionDurationRounds;\r\n                    const rounds = roundsDuration.count > 1 ? 'rounds' : 'round';\r\n                    return 'for ' + roundsDuration.count + ' ' + rounds;\r\n                default:\r\n                    return null;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public static getMonsterNames(encounter: Encounter | EncounterWave): { id: string, names: string[] }[] {\r\n        const monsterNames: any[] = [];\r\n        if (encounter) {\r\n            encounter.slots.forEach(slot => {\r\n                const names: any[] = [];\r\n                if (slot.count === 1) {\r\n                    names.push(slot.monsterName);\r\n                } else {\r\n                    for (let n = 0; n !== slot.count; ++n) {\r\n                        names.push(slot.monsterName + ' ' + (n + 1));\r\n                    }\r\n                }\r\n\r\n                monsterNames.push({\r\n                    id: slot.id,\r\n                    names: names\r\n                });\r\n            });\r\n        }\r\n\r\n        return monsterNames;\r\n    }\r\n}\r\n","import Utils from './utils';\r\n\r\nimport { Combat, CombatSetup, Notification } from '../models/combat';\r\nimport { Condition, ConditionDurationCombatant, ConditionDurationRounds, ConditionDurationSaves } from '../models/condition';\r\nimport { Encounter, EncounterSlot, EncounterWave } from '../models/encounter';\r\nimport { Map, MapFolio, MapItem } from '../models/map-folio';\r\nimport { Monster, MonsterGroup, Trait } from '../models/monster-group';\r\nimport { Party, PC } from '../models/party';\r\n\r\nexport default class Factory {\r\n\r\n    public static createParty(): Party {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            pcs: []\r\n        };\r\n    }\r\n\r\n    public static createPC(): PC {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'pc',\r\n            active: true,\r\n            player: '',\r\n            name: '',\r\n            race: '',\r\n            classes: '',\r\n            level: 1,\r\n            languages: 'Common',\r\n            passiveInsight: 10,\r\n            passiveInvestigation: 10,\r\n            passivePerception: 10,\r\n            initiative: 10,\r\n            url: ''\r\n        };\r\n    }\r\n\r\n    public static createMonsterGroup(): MonsterGroup {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            monsters: []\r\n        };\r\n    }\r\n\r\n    public static createMonster(): Monster {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'monster',\r\n            name: '',\r\n            size: 'medium',\r\n            category: 'humanoid',\r\n            tag: '',\r\n            alignment: '',\r\n            challenge: 1,\r\n            abilityScores: {\r\n                str: 10,\r\n                dex: 10,\r\n                con: 10,\r\n                int: 10,\r\n                wis: 10,\r\n                cha: 10\r\n            },\r\n            ac: 10,\r\n            hpMax: 4,\r\n            hpTemp: 0,\r\n            hitDice: 1,\r\n            damage: {\r\n                resist: '',\r\n                vulnerable: '',\r\n                immune: ''\r\n            },\r\n            savingThrows: '',\r\n            speed: '',\r\n            skills: '',\r\n            senses: '',\r\n            languages: '',\r\n            equipment: '',\r\n            traits: [],\r\n            conditionImmunities: ''\r\n        };\r\n    }\r\n\r\n    public static createTrait(): Trait {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            usage: '',\r\n            type: 'action',\r\n            text: ''\r\n        };\r\n    }\r\n\r\n    public static createEncounter(): Encounter {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            slots: [],\r\n            waves: []\r\n        };\r\n    }\r\n\r\n    public static createEncounterSlot(): EncounterSlot {\r\n        return {\r\n            id: Utils.guid(),\r\n            monsterGroupName: '',\r\n            monsterName: '',\r\n            count: 1\r\n        };\r\n    }\r\n\r\n    public static createEncounterWave(): EncounterWave {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            slots: []\r\n        };\r\n    }\r\n\r\n    public static createMapFolio(): MapFolio {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            maps: []\r\n        };\r\n    }\r\n\r\n    public static createMap(): Map {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            items: []\r\n        };\r\n    }\r\n\r\n    public static createMapItem(): MapItem {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'tile',\r\n            x: 0,\r\n            y: 0,\r\n            width: 4,\r\n            height: 4,\r\n            terrain: null\r\n        };\r\n    }\r\n\r\n    public static createCombatSetup(): CombatSetup {\r\n        return {\r\n            partyID: null,\r\n            encounterID: null,\r\n            waveID: null,\r\n            folioID: null,\r\n            mapID: null,\r\n            monsterNames: [],\r\n            encounterInitMode: 'group'\r\n        };\r\n    }\r\n\r\n    public static createCombat(): Combat {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            encounterID: null,\r\n            combatants: [],\r\n            map: null,\r\n            round: 1,\r\n            notifications: [],\r\n            issues: [],\r\n            timestamp: null\r\n        };\r\n    }\r\n\r\n    public static createNotification(): Notification {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'condition-save',\r\n            condition: null,\r\n            combatant: null\r\n        };\r\n    }\r\n\r\n    public static createCondition(): Condition {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            level: 1,\r\n            text: null,\r\n            duration: null\r\n        };\r\n    }\r\n\r\n    public static createConditionDurationSaves(): ConditionDurationSaves {\r\n        return {\r\n            type: 'saves',\r\n            count: 1,\r\n            saveType: 'str',\r\n            saveDC: 10,\r\n            point: 'start'\r\n        };\r\n    }\r\n\r\n    public static createConditionDurationCombatant(): ConditionDurationCombatant {\r\n        return {\r\n            type: 'combatant',\r\n            point: 'start',\r\n            combatantID: null\r\n        };\r\n    }\r\n\r\n    public static createConditionDurationRounds(): ConditionDurationRounds {\r\n        return {\r\n            type: 'rounds',\r\n            count: 1\r\n        };\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    getHeading: () => (string | JSX.Element);\r\n    getContent: () => (string | JSX.Element);\r\n}\r\n\r\nexport default class InfoCard extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        getHeading: null,\r\n        getContent: null\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            let heading = null;\r\n            if (this.props.getHeading) {\r\n                heading = this.props.getHeading();\r\n            }\r\n\r\n            let content = null;\r\n            if (this.props.getContent) {\r\n                content = this.props.getContent();\r\n            }\r\n            if (!content) {\r\n                return null;\r\n            }\r\n\r\n            return (\r\n                <div className='card'>\r\n                    {heading}\r\n                    <div className='card-content'>\r\n                        {content}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport InfoCard from '../info-card';\r\n\r\nexport default class CombatManagerCard extends React.Component {\r\n    private getContent() {\r\n        return (\r\n            <div>\r\n                <div className='section'>here you can run a combat encounter by specifying a party and an encounter</div>\r\n                <div className='divider' />\r\n                <div className='section'>below you will see a list of encounters that you have paused</div>\r\n                <div className='section'>you can resume a paused combat by selecting it</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <InfoCard getContent={this.getContent}/>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport warning from '../../resources/images/warning.svg';\r\n\r\ninterface Props {\r\n    text: string;\r\n    callback: () => void;\r\n    details: string;\r\n    disabled: boolean;\r\n}\r\n\r\ninterface State {\r\n    pressed: boolean;\r\n}\r\n\r\nexport default class ConfirmButton extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        details: null,\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            pressed: false\r\n        };\r\n    }\r\n\r\n    private toggle() {\r\n        this.setState({\r\n            pressed: !this.state.pressed\r\n        });\r\n    }\r\n\r\n    private perform() {\r\n        this.toggle();\r\n        this.props.callback();\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let content = null;\r\n            if (this.state.pressed) {\r\n                content = (\r\n                    <div>\r\n                        <div className='title'>{this.props.text} - are you sure?</div>\r\n                        <img className='image' src={warning} alt='warning' />\r\n                        {this.props.details ? <div className='details'>{this.props.details}</div> : null}\r\n                        <div className='confirmation'>\r\n                            <div className='destructive' onClick={() => this.perform()}>yes</div>\r\n                            <div className='non-destructive' onClick={() => this.toggle()}>no</div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                content = (\r\n                    <div>\r\n                        <div className='title'>{this.props.text}</div>\r\n                        <img className='image' src={warning} alt='warning' />\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <button className={this.props.disabled ? 'disabled' : ''} onClick={() => this.toggle()}>\r\n                    {content}\r\n                </button>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport ellipsis from '../../resources/images/ellipsis.svg';\r\n\r\ninterface Props {\r\n    options: { id: string; text: string; disabled?: boolean }[];\r\n    select: (optionID: string) => void;\r\n    selectedID: string;\r\n    placeholder: string;\r\n    disabled: boolean;\r\n}\r\n\r\ninterface State {\r\n    open: boolean;\r\n}\r\n\r\nexport default class Dropdown extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        selectedID: null,\r\n        placeholder: 'select...',\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            open: false\r\n        };\r\n    }\r\n\r\n    private toggleOpen(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        this.setState({\r\n            open: !this.state.open\r\n        });\r\n    }\r\n\r\n    private select(optionID: string) {\r\n        this.setState({\r\n            open: false\r\n        });\r\n        this.props.select(optionID);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            if (this.props.options.length === 0) {\r\n                return null;\r\n            }\r\n\r\n            let style = this.props.disabled ? 'dropdown disabled' : 'dropdown';\r\n            const content = [];\r\n\r\n            let selectedText;\r\n            if (this.props.selectedID) {\r\n                const option: { id: string; text: string; disabled?: boolean } | undefined = this.props.options.find(o => o.id === this.props.selectedID);\r\n                if (option) {\r\n                    selectedText = option.text;\r\n                }\r\n            } else {\r\n                selectedText = /*this.props.text ||*/ this.props.placeholder;\r\n            }\r\n\r\n            content.push(\r\n                <div key='selection' className='dropdown-top' title={selectedText}>\r\n                    <div className='item-text'>{selectedText}</div>\r\n                    <img className='arrow' src={ellipsis} alt='arrow' />\r\n                </div>\r\n            );\r\n\r\n            if (this.state.open) {\r\n                style += ' open';\r\n\r\n                const items = this.props.options.map(option => {\r\n                    if (option.text === null) {\r\n                        return <div key={option.id} className='divider' />;\r\n                    } else {\r\n                        return (\r\n                            <DropdownOption\r\n                                key={option.id}\r\n                                option={option}\r\n                                selected={option.id === this.props.selectedID}\r\n                                select={optionID => this.select(optionID)}\r\n                            />\r\n                        );\r\n                    }\r\n                });\r\n\r\n                content.push(\r\n                    <div key='options' className='dropdown-options'>\r\n                        {items}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={style} onClick={e => this.toggleOpen(e)}>\r\n                    {content}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface DropdownOptionProps {\r\n    option: { id: string; text: string; disabled?: boolean };\r\n    selected: boolean;\r\n    select: (optionID: string) => void;\r\n}\r\n\r\nclass DropdownOption extends React.Component<DropdownOptionProps> {\r\n    private click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (!this.props.option.disabled) {\r\n            this.props.select(this.props.option.id);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'dropdown-option';\r\n            if (this.props.selected) {\r\n                style += ' selected';\r\n            }\r\n            if (this.props.option.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            return (\r\n                <div className={style} title={this.props.option.text} onClick={e => this.click(e)}>\r\n                    {this.props.option.text}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport arrow from '../../resources/images/down-arrow-black.svg';\r\n\r\ninterface Props {\r\n    text: string;\r\n    content: string | JSX.Element;\r\n    disabled: boolean;\r\n}\r\n\r\ninterface State {\r\n    expanded: boolean;\r\n}\r\n\r\nexport default class Expander extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            expanded: false\r\n        };\r\n    }\r\n\r\n    private toggle() {\r\n        this.setState({\r\n            expanded: !this.state.expanded\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = this.props.disabled ? 'expander disabled' : 'expander';\r\n            if (this.state.expanded) {\r\n                style += ' expanded';\r\n            }\r\n\r\n            let content = null;\r\n            if (this.state.expanded) {\r\n                content = (\r\n                    <div className='expander-content'>\r\n                        {this.props.content}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={style}>\r\n                    <div className='expander-header' onClick={() => this.toggle()}>\r\n                        <div className='expander-text'>{this.props.text}</div>\r\n                        <img className='expander-button' src={arrow} alt='arrow' />\r\n                    </div>\r\n                    {content}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport arrow from '../../resources/images/down-arrow-black.svg';\r\n\r\ninterface Props {\r\n    click: (dir: string, dir2: 'in' | 'out' | null) => void;\r\n    direction: 'out' | 'in' | 'both' | 'eight';\r\n    disabled: boolean;\r\n}\r\n\r\nexport default class Radial extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        direction: 'out',\r\n        disabled: false\r\n    };\r\n\r\n    private click(e: React.MouseEvent, dir: string, dir2: 'in' | 'out' | null = null) {\r\n        e.stopPropagation();\r\n        this.props.click(dir, dir2);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'radial ' + (this.props.direction || 'out');\r\n            if (this.props.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            const showOut = (this.props.direction === 'out') || (this.props.direction === 'both') || (this.props.direction === 'eight');\r\n            const showIn = (this.props.direction === 'in') || (this.props.direction === 'both');\r\n            const showDiag = (this.props.direction === 'eight');\r\n\r\n            return (\r\n                <div className={style}>\r\n                    <div className='empty' style={{ display: showDiag ? 'none' : 'inline-block' }} />\r\n                    <div className='btn diag' style={{ display: showDiag ? 'inline-block' : 'none' }}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(135deg)' }}\r\n                            alt='nw'\r\n                            onClick={e => this.click(e, 'NW')}\r\n                        />\r\n                    </div>\r\n                    <div className='btn'>\r\n                        <div>\r\n                            <img\r\n                                src={arrow}\r\n                                style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(180deg)' }}\r\n                                alt='n'\r\n                                onClick={e => this.click(e, 'N', 'out')}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <img\r\n                                src={arrow}\r\n                                style={{ display: showIn ? 'inline-block' : 'none' }}\r\n                                alt='n'\r\n                                onClick={e => this.click(e, 'N', 'in')}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className='empty' style={{ display: showDiag ? 'none' : 'inline-block' }} />\r\n                    <div className='btn diag' style={{ display: showDiag ? 'inline-block' : 'none' }}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(-135deg)' }}\r\n                            alt='ne'\r\n                            onClick={e => this.click(e, 'NE')}\r\n                        />\r\n                    </div>\r\n                    <div className='btn' style={{ padding: (showIn && showOut) ? '10px 0' : '0'}}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(90deg)' }}\r\n                            alt='w'\r\n                            onClick={e => this.click(e, 'W', 'out')}\r\n                        />\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showIn ? 'inline-block' : 'none', transform: 'rotate(-90deg)' }}\r\n                            alt='w'\r\n                            onClick={e => this.click(e, 'W', 'in')}\r\n                        />\r\n                    </div>\r\n                    <div className='empty' />\r\n                    <div className='btn' style={{ padding: (showIn && showOut) ? '10px 0' : '0'}}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showIn ? 'inline-block' : 'none', transform: 'rotate(90deg)' }}\r\n                            alt='e'\r\n                            onClick={e => this.click(e, 'E', 'in')}\r\n                        />\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(-90deg)' }}\r\n                            alt='e'\r\n                            onClick={e => this.click(e, 'E', 'out')}\r\n                        />\r\n                    </div>\r\n                    <div className='empty' style={{ display: showDiag ? 'none' : 'inline-block' }} />\r\n                    <div className='btn diag' style={{ display: showDiag ? 'inline-block' : 'none' }}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(45deg)' }}\r\n                            alt='sw'\r\n                            onClick={e => this.click(e, 'SW')}\r\n                        />\r\n                    </div>\r\n                    <div className='btn'>\r\n                        <div>\r\n                            <img\r\n                                src={arrow}\r\n                                style={{ display: showIn ? 'inline-block' : 'none', transform: 'rotate(180deg)' }}\r\n                                alt='s'\r\n                                onClick={e => this.click(e, 'S', 'in')}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <img\r\n                                src={arrow}\r\n                                style={{ display: showOut ? 'inline-block' : 'none' }}\r\n                                alt='s'\r\n                                onClick={e => this.click(e, 'S', 'out')}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className='empty' style={{ display: showDiag ? 'none' : 'inline-block' }} />\r\n                    <div className='btn diag' style={{ display: showDiag ? 'inline-block' : 'none' }}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(-45deg)' }}\r\n                            alt='se'\r\n                            onClick={e => this.click(e, 'SE')}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport minus from '../../resources/images/minus.svg';\r\nimport plus from '../../resources/images/plus.svg';\r\n\r\ninterface Props {\r\n    source: any;\r\n    name: string;\r\n    nudgeValue: (delta: number) => void;\r\n    label: string;\r\n    disabled: boolean;\r\n    factors: number[];\r\n    display: ((value: number) => string) | null;\r\n}\r\n\r\nexport default class Spin extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        label: null,\r\n        disabled: false,\r\n        factors: null,\r\n        display: null\r\n    };\r\n\r\n    private click(e: React.MouseEvent, delta: number) {\r\n        e.stopPropagation();\r\n        this.props.nudgeValue(delta);\r\n    }\r\n\r\n    private touchEnd(e: React.TouchEvent, delta: number) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        this.props.nudgeValue(delta);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'info-value';\r\n            let value = this.props.source[this.props.name];\r\n            if (value === 0) {\r\n                style += ' dimmed';\r\n            }\r\n\r\n            if (this.props.display) {\r\n                value = this.props.display(value);\r\n            }\r\n\r\n            const minusBtns: JSX.Element[] = [];\r\n            const plusBtns: JSX.Element[] = [];\r\n\r\n            if (this.props.factors) {\r\n                this.props.factors.forEach(factor => {\r\n                    minusBtns.push(\r\n                        <div\r\n                            key={'minus' + factor}\r\n                            className='spin-button factor'\r\n                            onTouchEnd={e => this.touchEnd(e, -1 * factor)}\r\n                            onClick={e => this.click(e, -1 * factor)}\r\n                        >\r\n                            {'-' + factor}\r\n                        </div>\r\n                    );\r\n\r\n                    plusBtns.push(\r\n                        <div\r\n                            key={'plus' + factor}\r\n                            className='spin-button factor'\r\n                            onTouchEnd={e => this.touchEnd(e, +1 * factor)}\r\n                            onClick={e => this.click(e, +1 * factor)}\r\n                        >\r\n                            {'+' + factor}\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                minusBtns.reverse();\r\n            } else {\r\n                minusBtns.push(\r\n                    <div key='minus1' className='spin-button' onTouchEnd={e => this.touchEnd(e, -1)} onClick={e => this.click(e, -1)}>\r\n                        <img className='image' src={minus} alt='minus' />\r\n                    </div>\r\n                );\r\n\r\n                plusBtns.push(\r\n                    <div key='plus1' className='spin-button' onTouchEnd={e => this.touchEnd(e, +1)} onClick={e => this.click(e, +1)}>\r\n                        <img className='image' src={plus} alt='plus' />\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            const infoWidth = 80 * (this.props.factors ? this.props.factors.length : 1);\r\n\r\n            return (\r\n                <div className={this.props.disabled ? 'spin disabled' : 'spin'}>\r\n                    <div className='minus'>\r\n                        {minusBtns}\r\n                    </div>\r\n                    <div className='info' style={{ width: 'calc(100% - ' + infoWidth + 'px)' }}>\r\n                        <div className='info-label'>{this.props.label}</div>\r\n                        <div className={style}>{value}</div>\r\n                    </div>\r\n                    <div className='plus'>\r\n                        {plusBtns}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Monster } from '../../models/monster-group';\r\n\r\nimport Spin from '../controls/spin';\r\n\r\ninterface Props {\r\n    combatant: Monster;\r\n    edit: boolean;\r\n    nudgeValue: (combatant: Monster, field: string, delta: number) => void;\r\n}\r\n\r\ninterface State {\r\n    showAbilityScores: boolean;\r\n}\r\n\r\nexport default class AbilityScorePanel extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        edit: null,\r\n        nudgeValue: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showAbilityScores: false\r\n        };\r\n    }\r\n\r\n    private toggleAbilityScores() {\r\n        this.setState({\r\n            showAbilityScores: !this.state.showAbilityScores\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let result = null;\r\n\r\n            if (this.props.edit) {\r\n                result = (\r\n                    <div>\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='str'\r\n                            label='strength'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.str', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='dex'\r\n                            label='dexterity'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.dex', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='con'\r\n                            label='constitution'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.con', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='int'\r\n                            label='intelligence'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.int', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='wis'\r\n                            label='wisdom'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.wis', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='cha'\r\n                            label='charisma'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.cha', delta)}\r\n                        />\r\n                    </div>\r\n                );\r\n            } else {\r\n                result = (\r\n                    <div className='ability-scores' onClick={() => this.toggleAbilityScores()}>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>str</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.str\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.str)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>dex</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.dex\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.dex)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>con</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.con\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.con)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>int</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.int\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.int)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>wis</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.wis\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.wis)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>cha</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.cha\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.cha)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return result;\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combat, Combatant } from '../../models/combat';\r\nimport { Condition } from '../../models/condition';\r\n\r\nimport Expander from '../controls/expander';\r\nimport Spin from '../controls/spin';\r\n\r\ninterface Props {\r\n    combatant: Combatant;\r\n    combat: Combat;\r\n    nudgeConditionValue: (condition: Condition, field: string, delta: number) => void;\r\n    addCondition: () => void;\r\n    editCondition: (condition: Condition) => void;\r\n    removeCondition: (conditionID: string) => void;\r\n}\r\n\r\nexport default class ConditionsPanel extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const conditions = [];\r\n            if (this.props.combatant.conditions) {\r\n                for (let n = 0; n !== this.props.combatant.conditions.length; ++n) {\r\n                    const c = this.props.combatant.conditions[n];\r\n                    conditions.push(\r\n                        <ConditionPanel\r\n                            key={n}\r\n                            condition={c}\r\n                            combat={this.props.combat}\r\n                            nudgeConditionValue={(condition, type, delta) => this.props.nudgeConditionValue(condition, type, delta)}\r\n                            editCondition={condition => this.props.editCondition(condition)}\r\n                            removeCondition={conditionID => this.props.removeCondition(conditionID)}\r\n                        />\r\n                    );\r\n                }\r\n            }\r\n\r\n            return (\r\n                <div className='section'>\r\n                    {conditions}\r\n                    <button onClick={() => this.props.addCondition()}>add a condition</button>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface ConditionPanelProps {\r\n    condition: Condition;\r\n    combat: Combat;\r\n    nudgeConditionValue: (condition: Condition, field: string, delta: number) => void;\r\n    editCondition: (condition: Condition) => void;\r\n    removeCondition: (conditionID: string) => void;\r\n}\r\n\r\nclass ConditionPanel extends React.Component<ConditionPanelProps> {\r\n    public render() {\r\n        try {\r\n            let name: string = this.props.condition.name || 'condition';\r\n            if (this.props.condition.name === 'exhaustion') {\r\n                name += ' (' + this.props.condition.level + ')';\r\n            }\r\n            if ((this.props.condition.name === 'custom') && (this.props.condition.text !== null)) {\r\n                name = this.props.condition.text;\r\n            }\r\n\r\n            if (this.props.condition.duration !== null) {\r\n                name += ' ' + Utils.conditionDurationText(this.props.condition, this.props.combat);\r\n            }\r\n\r\n            const description = [];\r\n            if (this.props.condition.name === 'exhaustion') {\r\n                description.push(\r\n                    <div key='level' className='section'>\r\n                        <Spin\r\n                            source={this.props.condition}\r\n                            name='level'\r\n                            label='level'\r\n                            nudgeValue={delta => this.props.nudgeConditionValue(this.props.condition, 'level', delta)}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n            const text = Utils.conditionText(this.props.condition);\r\n            for (let n = 0; n !== text.length; ++n) {\r\n                description.push(<div key={n} className='section'>{text[n]}</div>);\r\n            }\r\n\r\n            return (\r\n                <Expander\r\n                    text={name}\r\n                    content={(\r\n                        <div>\r\n                            {description}\r\n                            <div className='divider' />\r\n                            <button onClick={() => this.props.editCondition(this.props.condition)}>edit</button>\r\n                            <button onClick={() => this.props.removeCondition(this.props.condition.id)}>remove</button>\r\n                        </div>\r\n                    )}\r\n                />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Monster, Trait } from '../../models/monster-group';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport Expander from '../controls/expander';\r\n\r\ninterface Props {\r\n    combatant: Monster;\r\n    mode: 'view' | 'edit' | 'template';\r\n    addTrait: (traitType: 'trait' | 'action' | 'legendary' | 'lair' | 'regional') => void;\r\n    copyTrait: (trait: Trait) => void;\r\n    removeTrait: (trait: Trait) => void;\r\n    changeTrait: (trait: Trait, field: 'name' | 'usage' | 'text', value: string) => void;\r\n}\r\n\r\nexport default class TraitsPanel extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        mode: 'view',\r\n        addTrait: null,\r\n        copyTrait: null,\r\n        removeTrait: null,\r\n        changeTrait: null\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            const traits = [];\r\n            const actions = [];\r\n            const legendaryActions = [];\r\n            const lairActions = [];\r\n            const regionalEffects = [];\r\n\r\n            for (let n = 0; n !== this.props.combatant.traits.length; ++n) {\r\n                const a = this.props.combatant.traits[n];\r\n                const item = (\r\n                    <TraitPanel\r\n                        key={a.id}\r\n                        trait={a}\r\n                        mode={this.props.mode}\r\n                        changeTrait={(action, type, value) => this.props.changeTrait(action, type, value)}\r\n                        removeTrait={action => this.props.removeTrait(action)}\r\n                        copyTrait={action => this.props.copyTrait(action)}\r\n                    />\r\n                );\r\n\r\n                switch (a.type) {\r\n                    case 'trait':\r\n                        traits.push(item);\r\n                        break;\r\n                    case 'action':\r\n                        actions.push(item);\r\n                        break;\r\n                    case 'legendary':\r\n                        legendaryActions.push(item);\r\n                        break;\r\n                    case 'lair':\r\n                        lairActions.push(item);\r\n                        break;\r\n                    case 'regional':\r\n                        regionalEffects.push(item);\r\n                        break;\r\n                    default:\r\n                        // Do nothing\r\n                        break;\r\n                }\r\n            }\r\n\r\n            if (this.props.mode === 'edit') {\r\n                traits.push(\r\n                    <button key='add' onClick={() => this.props.addTrait('trait')}>add a new trait</button>\r\n                );\r\n                actions.push(\r\n                    <button key='add' onClick={() => this.props.addTrait('action')}>add a new action</button>\r\n                );\r\n                legendaryActions.push(\r\n                    <button key='add' onClick={() => this.props.addTrait('legendary')}>add a new legendary action</button>\r\n                );\r\n                lairActions.push(\r\n                    <button key='add' onClick={() => this.props.addTrait('lair')}>add a new lair action</button>\r\n                );\r\n                regionalEffects.push(\r\n                    <button key='add' onClick={() => this.props.addTrait('regional')}>add a new regional effect</button>\r\n                );\r\n\r\n                return (\r\n                    <div className='row collapse'>\r\n                        <div className='columns small-4 medium-4 large-4 list-column'>\r\n                            <div className='section subheading'>traits</div>\r\n                            {traits}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 list-column'>\r\n                            <div className='section subheading'>actions</div>\r\n                            {actions}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 list-column'>\r\n                            <div className='section subheading'>legendary actions</div>\r\n                            {legendaryActions}\r\n                            <div className='section subheading'>lair actions</div>\r\n                            {lairActions}\r\n                            <div className='section subheading'>regional effects</div>\r\n                            {regionalEffects}\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div>\r\n                    <div style={{ display: traits.length > 0 ? '' : 'none' }}>\r\n                        <div className='section subheading'>traits</div>\r\n                        {traits}\r\n                    </div>\r\n                    <div style={{ display: actions.length > 0 ? '' : 'none' }}>\r\n                        <div className='section subheading'>actions</div>\r\n                        {actions}\r\n                    </div>\r\n                    <div style={{ display: legendaryActions.length > 0 ? '' : 'none' }}>\r\n                        <div className='section subheading'>legendary actions</div>\r\n                        {legendaryActions}\r\n                    </div>\r\n                    <div style={{ display: lairActions.length > 0 ? '' : 'none' }}>\r\n                        <div className='section subheading'>lair actions</div>\r\n                        {lairActions}\r\n                    </div>\r\n                    <div style={{ display: regionalEffects.length > 0 ? '' : 'none' }}>\r\n                        <div className='section subheading'>regional effects</div>\r\n                        {regionalEffects}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface TraitPanelProps {\r\n    trait: Trait;\r\n    mode: 'view' | 'edit' | 'template';\r\n    changeTrait: (trait: Trait, field: 'name' | 'usage' | 'text', value: string) => void;\r\n    copyTrait: (trait: Trait) => void;\r\n    removeTrait: (trait: Trait) => void;\r\n}\r\n\r\nclass TraitPanel extends React.Component<TraitPanelProps> {\r\n    public render() {\r\n        try {\r\n            let heading = this.props.trait.name || 'unnamed ' + Utils.traitType(this.props.trait.type);\r\n            if (this.props.trait.usage) {\r\n                heading += ' (' + this.props.trait.usage + ')';\r\n            }\r\n\r\n            switch (this.props.mode) {\r\n                case 'view':\r\n                    return (\r\n                        <div key={this.props.trait.id} className='section trait'>\r\n                            <b>{heading}</b> {this.props.trait.text}\r\n                        </div>\r\n                    );\r\n                case 'edit':\r\n                    const details = (\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='name'\r\n                                value={this.props.trait.name}\r\n                                onChange={event => this.props.changeTrait(this.props.trait, 'name', event.target.value)}\r\n                            />\r\n                            <input\r\n                                type='text'\r\n                                placeholder='usage'\r\n                                value={this.props.trait.usage}\r\n                                onChange={event => this.props.changeTrait(this.props.trait, 'usage', event.target.value)}\r\n                            />\r\n                            <textarea\r\n                                placeholder='details'\r\n                                value={this.props.trait.text}\r\n                                onChange={event => this.props.changeTrait(this.props.trait, 'text', event.target.value)}\r\n                            />\r\n                            <div className='divider' />\r\n                            <ConfirmButton text='delete' callback={() => this.props.removeTrait(this.props.trait)} />\r\n                        </div>\r\n                    );\r\n\r\n                    return (\r\n                        <Expander\r\n                            text={this.props.trait.name || 'unnamed ' + Utils.traitType(this.props.trait.type)}\r\n                            content={details}\r\n                        />\r\n                    );\r\n                case 'template':\r\n                    return (\r\n                        <div key={this.props.trait.id} className='section trait'>\r\n                            <b>{heading}</b> {this.props.trait.text}\r\n                            <button onClick={() => this.props.copyTrait(this.props.trait)}>copy</button>\r\n                        </div>\r\n                    );\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combat, Combatant } from '../../models/combat';\r\nimport { Condition } from '../../models/condition';\r\nimport { Encounter, EncounterSlot, EncounterWave } from '../../models/encounter';\r\nimport { Monster, MonsterGroup, Trait } from '../../models/monster-group';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport Dropdown from '../controls/dropdown';\r\nimport Expander from '../controls/expander';\r\nimport Radial from '../controls/radial';\r\nimport Spin from '../controls/spin';\r\nimport AbilityScorePanel from '../panels/ability-score-panel';\r\nimport ConditionsPanel from '../panels/conditions-panel';\r\nimport TraitsPanel from '../panels/traits-panel';\r\nimport InfoCard from './info-card';\r\n\r\nimport arrow from '../../resources/images/down-arrow.svg';\r\n\r\ninterface Props {\r\n    combatant: Monster | (Monster & Combatant);\r\n    mode: string;\r\n    library: MonsterGroup[];\r\n    changeValue: (monster: Monster, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, delta: number) => void;\r\n    // Library\r\n    editMonster: (monster: Monster) => void;\r\n    removeMonster: (monster: Monster) => void;\r\n    cloneMonster: (monster: Monster, name: string) => void;\r\n    moveToGroup: (monster: Monster, group: string) => void;\r\n    copyTrait: (trait: Trait) => void;\r\n    // Encounter builder\r\n    encounter: Encounter;\r\n    slot: EncounterSlot;\r\n    addEncounterSlot: (monster: Monster, waveID: string | null) => void;\r\n    removeEncounterSlot: (slot: EncounterSlot) => void;\r\n    // Combat\r\n    combat: Combat;\r\n    makeCurrent: (combatant: Combatant) => void;\r\n    makeActive: (combatant: Combatant) => void;\r\n    makeDefeated: (combatant: Combatant) => void;\r\n    endTurn: (combatant: Combatant) => void;\r\n    mapAdd: (combatant: Combatant) => void;\r\n    mapMove: (combatant: Combatant, dir: string) => void;\r\n    mapRemove: (combatant: Combatant) => void;\r\n    removeCombatant: (combatant: Combatant) => void;\r\n    changeHP: (combatant: Combatant, hp: number, tempHP: number) => void;\r\n    addCondition: (combatant: Combatant) => void;\r\n    editCondition: (combatant: Combatant, condition: Condition) => void;\r\n    removeCondition: (combatant: Combatant, conditionID: string) => void;\r\n    nudgeConditionValue: (condition: Condition, field: string, delta: number) => void;\r\n}\r\n\r\ninterface State {\r\n    showDetails: boolean;\r\n    cloneName: string;\r\n    damageOrHealing: number;\r\n}\r\n\r\nexport default class MonsterCard extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        library: null,\r\n        changeValue: null,\r\n        nudgeValue: null,\r\n        editMonster: null,\r\n        removeMonster: null,\r\n        cloneMonster: null,\r\n        moveToGroup: null,\r\n        copyTrait: null,\r\n        encounter: null,\r\n        slot: null,\r\n        addEncounterSlot: null,\r\n        removeEncounterSlot: null,\r\n        combat: null,\r\n        makeCurrent: null,\r\n        makeActive: null,\r\n        makeDefeated: null,\r\n        endTurn: null,\r\n        mapAdd: null,\r\n        mapMove: null,\r\n        mapRemove: null,\r\n        removeCombatant: null,\r\n        changeHP: null,\r\n        addCondition: null,\r\n        editCondition: null,\r\n        removeCondition: null,\r\n        nudgeConditionValue: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showDetails: false,\r\n            cloneName: props.combatant.name + ' copy',\r\n            damageOrHealing: 0\r\n        };\r\n    }\r\n\r\n    private setCloneName(cloneName: string) {\r\n        this.setState({\r\n            cloneName: cloneName\r\n        });\r\n    }\r\n\r\n    private toggleDetails() {\r\n        this.setState({\r\n            showDetails: !this.state.showDetails\r\n        });\r\n    }\r\n\r\n    private setDamage(value: number) {\r\n        this.setState({\r\n            damageOrHealing: value\r\n        });\r\n    }\r\n\r\n    private nudgeDamage(delta: number) {\r\n        this.setState({\r\n            damageOrHealing: Math.max(this.state.damageOrHealing + delta, 0)\r\n        });\r\n    }\r\n\r\n    private heal() {\r\n        const combatant = this.props.combatant as Combatant;\r\n\r\n        let hp = (combatant.hp ? combatant.hp : 0) + this.state.damageOrHealing;\r\n        hp = Math.min(hp, this.props.combatant.hpMax);\r\n\r\n        this.setState({\r\n            damageOrHealing: 0\r\n        }, () => {\r\n            this.props.changeHP(combatant, hp, this.props.combatant.hpTemp);\r\n        });\r\n    }\r\n\r\n    private damage() {\r\n        const combatant = this.props.combatant as Combatant;\r\n\r\n        let hp = (combatant.hp ? combatant.hp : 0);\r\n        let temp = this.props.combatant.hpTemp;\r\n\r\n        let damage = this.state.damageOrHealing;\r\n\r\n        // Take damage off temp HP first\r\n        const val = Math.min(damage, temp);\r\n        damage -= val;\r\n        temp -= val;\r\n\r\n        // Take the rest off HP\r\n        hp -= damage;\r\n        hp = Math.max(hp, 0);\r\n\r\n        this.setState({\r\n            damageOrHealing: 0\r\n        }, () => {\r\n            this.props.changeHP(combatant, hp, temp);\r\n        });\r\n    }\r\n\r\n    private description() {\r\n        let sizeAndType = (this.props.combatant.size + ' ' + this.props.combatant.category).toLowerCase();\r\n        if (this.props.combatant.tag) {\r\n            sizeAndType += ' (' + this.props.combatant.tag.toLowerCase() + ')';\r\n        }\r\n        sizeAndType += ', ';\r\n\r\n        let align = '';\r\n        if (this.props.combatant.alignment) {\r\n            align = this.props.combatant.alignment.toLowerCase() + ', ';\r\n        }\r\n\r\n        const cr = 'cr ' + Utils.challenge(this.props.combatant.challenge);\r\n\r\n        return sizeAndType + align + cr;\r\n    }\r\n\r\n    private monsterIsInWave(wave: EncounterWave) {\r\n        return wave.slots.some(s => {\r\n            const group = this.props.library.find(g => g.monsters.includes(this.props.combatant));\r\n            return !!group && (s.monsterGroupName === group.name) && (s.monsterName === this.props.combatant.name);\r\n        });\r\n    }\r\n\r\n    private getHP() {\r\n        if (this.props.combatant.hitDice === 0) {\r\n            return this.props.combatant.hpMax;\r\n        }\r\n\r\n        const die = Utils.hitDieType(this.props.combatant.size);\r\n        const conMod = Utils.modifierValue(this.props.combatant.abilityScores.con) * this.props.combatant.hitDice;\r\n        let conModStr = '';\r\n        if (conMod > 0) {\r\n            conModStr = ' +' + conMod;\r\n        }\r\n        if (conMod < 0) {\r\n            conModStr = ' ' + conMod;\r\n        }\r\n        return this.props.combatant.hpMax + ' (' + this.props.combatant.hitDice + 'd' + die + conModStr + ')';\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const options = [];\r\n            if (this.props.mode.indexOf('no-buttons') === -1) {\r\n                if (this.props.mode.indexOf('view') !== -1) {\r\n                    if (this.props.mode.indexOf('editable') !== -1) {\r\n                        options.push(\r\n                            <button key='edit' onClick={() => this.props.editMonster(this.props.combatant)}>edit monster</button>\r\n                        );\r\n\r\n                        options.push(\r\n                            <Expander\r\n                                key='clone'\r\n                                text='clone monster'\r\n                                content={\r\n                                    <div>\r\n                                        <input\r\n                                            type='text'\r\n                                            placeholder='monster name'\r\n                                            value={this.state.cloneName}\r\n                                            onChange={event => this.setCloneName(event.target.value)}\r\n                                        />\r\n                                        <button onClick={() => this.props.cloneMonster(this.props.combatant, this.state.cloneName)}>create copy</button>\r\n                                    </div>\r\n                                }\r\n                            />\r\n                        );\r\n\r\n                        const groupOptions: { id: string, text: string }[] = [];\r\n                        this.props.library.forEach(group => {\r\n                            if (group.monsters.indexOf(this.props.combatant) === -1) {\r\n                                groupOptions.push({\r\n                                    id: group.id,\r\n                                    text: group.name\r\n                                });\r\n                            }\r\n                        });\r\n                        options.push(\r\n                            <Dropdown\r\n                                key='move'\r\n                                options={groupOptions}\r\n                                placeholder='move to group...'\r\n                                select={optionID => this.props.moveToGroup(this.props.combatant, optionID)}\r\n                            />\r\n                        );\r\n\r\n                        options.push(<ConfirmButton key='remove' text='delete monster' callback={() => this.props.removeMonster(this.props.combatant)} />);\r\n                    }\r\n                    if (this.props.mode.indexOf('encounter') !== -1) {\r\n                        if (this.props.slot) {\r\n                            // This card is in an encounter or a wave\r\n                            options.push(\r\n                                <button key='remove' onClick={() => this.props.removeEncounterSlot(this.props.slot)}>\r\n                                    remove from encounter\r\n                                </button>\r\n                            );\r\n                        } else {\r\n                            let canAdd = false;\r\n                            // This card is in the library list\r\n                            if (!this.monsterIsInWave(this.props.encounter)) {\r\n                                options.push(\r\n                                    <button key='add encounter' onClick={() => this.props.addEncounterSlot(this.props.combatant, null)}>\r\n                                        add to encounter\r\n                                    </button>\r\n                                );\r\n                                canAdd = true;\r\n                            }\r\n                            this.props.encounter.waves.forEach(wave => {\r\n                                if (!this.monsterIsInWave(wave)) {\r\n                                    options.push(\r\n                                        <button key={'add ' + wave.id} onClick={() => this.props.addEncounterSlot(this.props.combatant, wave.id)}>\r\n                                            add to {wave.name}\r\n                                        </button>\r\n                                    );\r\n                                    canAdd = true;\r\n                                }\r\n                            });\r\n                            // If we can't add it anywhere, don't show it\r\n                            if (!canAdd) {\r\n                                return (\r\n                                    <InfoCard\r\n                                        getHeading={() => {\r\n                                            return (\r\n                                                <div className='heading'>\r\n                                                    <div className='title'>{this.props.combatant.name}</div>\r\n                                                </div>\r\n                                            );\r\n                                        }}\r\n                                        getContent={() => {\r\n                                            return (\r\n                                                <div className='section centered'>\r\n                                                    <i>this monster is already part of this encounter</i>\r\n                                                </div>\r\n                                            );\r\n                                        }}\r\n                                    />\r\n                                );\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (this.props.mode.indexOf('combat') !== -1) {\r\n                    const combatant = this.props.combatant as Combatant;\r\n\r\n                    if (this.props.mode.indexOf('tactical') !== -1) {\r\n                        if (this.props.mode.indexOf('on-map') !== -1) {\r\n                            options.push(\r\n                                <div key='mapMove' className='section centered'>\r\n                                    <Radial\r\n                                        direction='eight'\r\n                                        click={dir => this.props.mapMove(combatant, dir)}\r\n                                    />\r\n                                </div>\r\n                            );\r\n                            options.push(\r\n                                <Spin\r\n                                    key='altitude'\r\n                                    source={this.props.combatant}\r\n                                    name='altitude'\r\n                                    label='altitude'\r\n                                    display={value => value + ' ft.'}\r\n                                    nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'altitude', delta * 5)}\r\n                                />\r\n                            );\r\n                            options.push(<button key='mapRemove' onClick={() => this.props.mapRemove(combatant)}>remove from map</button>);\r\n                        }\r\n                        if (this.props.mode.indexOf('off-map') !== -1) {\r\n                            options.push(<button key='mapAdd' onClick={() => this.props.mapAdd(combatant)}>add to map</button>);\r\n                        }\r\n                        options.push(<div key='tactical-div' className='divider' />);\r\n                    }\r\n                    if (combatant.pending && !combatant.active && !combatant.defeated) {\r\n                        options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                    }\r\n                    if (!combatant.pending && combatant.active && !combatant.defeated) {\r\n                        if (combatant.current) {\r\n                            options.push(<button key='endTurn' onClick={() => this.props.endTurn(combatant)}>end turn</button>);\r\n                            options.push(<button key='makeDefeated' onClick={() => this.props.makeDefeated(combatant)}>mark as defeated and end turn</button>);\r\n                        } else {\r\n                            options.push(<button key='makeCurrent' onClick={() => this.props.makeCurrent(combatant)}>start turn</button>);\r\n                            options.push(<button key='makeDefeated' onClick={() => this.props.makeDefeated(combatant)}>mark as defeated</button>);\r\n                            options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                        }\r\n                    }\r\n                    if (!combatant.pending && !combatant.active && combatant.defeated) {\r\n                        options.push(<button key='makeActive' onClick={() => this.props.makeActive(combatant)}>mark as active</button>);\r\n                        options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                    }\r\n                    options.push(\r\n                        <Expander\r\n                            key='rename'\r\n                            text='change name'\r\n                            content={(\r\n                                <div>\r\n                                    <input\r\n                                        type='text'\r\n                                        value={combatant.displayName}\r\n                                        onChange={event => this.props.changeValue(this.props.combatant, 'displayName', event.target.value)}\r\n                                    />\r\n                                </div>\r\n                            )}\r\n                        />\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf('template') !== -1) {\r\n                    // None\r\n                }\r\n            }\r\n\r\n            let stats = null;\r\n            if (this.props.mode.indexOf('view') !== -1) {\r\n                let slotSection = null;\r\n                if (this.props.slot) {\r\n                    slotSection = (\r\n                        <div>\r\n                            <div className='divider' />\r\n                            <Spin\r\n                                source={this.props.slot}\r\n                                name='count'\r\n                                label='count'\r\n                                nudgeValue={delta => this.props.nudgeValue(this.props.slot, 'count', delta)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                let details = null;\r\n                if (this.state.showDetails) {\r\n                    details = (\r\n                        <div>\r\n                            <div className='divider' />\r\n                            <div className='section'>\r\n                                <b>ac</b> {this.props.combatant.ac}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.hpMax !== 0 ? '' : 'none' }}>\r\n                                <b>hp</b> {this.getHP()}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.speed !== '' ? '' : 'none' }}>\r\n                                <b>speed</b> {this.props.combatant.speed}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <AbilityScorePanel combatant={this.props.combatant} />\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.savingThrows !== '' ? '' : 'none' }}>\r\n                                <b>saving throws</b> {this.props.combatant.savingThrows}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.skills !== '' ? '' : 'none' }}>\r\n                                <b>skills</b> {this.props.combatant.skills}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.damage.resist !== '' ? '' : 'none' }}>\r\n                                <b>damage resistances</b> {this.props.combatant.damage.resist}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.damage.vulnerable !== '' ? '' : 'none' }}>\r\n                                <b>damage vulnerabilities</b> {this.props.combatant.damage.vulnerable}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.damage.immune !== '' ? '' : 'none' }}>\r\n                                <b>damage immunities</b> {this.props.combatant.damage.immune}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.conditionImmunities !== '' ? '' : 'none' }}>\r\n                                <b>condition immunities</b> {this.props.combatant.conditionImmunities}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.senses !== '' ? '' : 'none' }}>\r\n                                <b>senses</b> {this.props.combatant.senses}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.languages !== '' ? '' : 'none' }}>\r\n                                <b>languages</b> {this.props.combatant.languages}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.equipment !== '' ? '' : 'none' }}>\r\n                                <b>equipment</b> {this.props.combatant.equipment}\r\n                            </div>\r\n                            <div className='divider' />\r\n                            <TraitsPanel combatant={this.props.combatant} />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                stats = (\r\n                    <div className='stats'>\r\n                        <div className='section centered'>\r\n                            <i>{this.description()}</i>\r\n                        </div>\r\n                        {slotSection}\r\n                        {details}\r\n                    </div>\r\n                );\r\n            }\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                stats = (\r\n                    <div className='stats'>\r\n                        <div className='section centered'>\r\n                            <i>{this.description()}</i>\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <Spin\r\n                            source={this.props.combatant}\r\n                            name='hp'\r\n                            label='hit points'\r\n                            factors={[1, 10]}\r\n                            nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'hp', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant}\r\n                            name='hpTemp'\r\n                            label='temp hp'\r\n                            factors={[1, 10]}\r\n                            nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'hpTemp', delta)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <Spin\r\n                            source={this.state}\r\n                            name='damageOrHealing'\r\n                            factors={[1, 10]}\r\n                            nudgeValue={delta => this.nudgeDamage(delta)}\r\n                        />\r\n                        <div className={this.state.damageOrHealing > 0 ? '' : 'disabled'}>\r\n                            <button className='damage-btn' onClick={() => this.heal()}>heal</button>\r\n                            <button className='damage-btn' onClick={() => this.setDamage(0)}>reset</button>\r\n                            <button className='damage-btn' onClick={() => this.damage()}>damage</button>\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.damage.resist !== '' ? '' : 'none' }}>\r\n                            <b>damage resistances</b> {this.props.combatant.damage.resist}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.damage.vulnerable !== '' ? '' : 'none' }}>\r\n                            <b>damage vulnerabilities</b> {this.props.combatant.damage.vulnerable}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.damage.immune !== '' ? '' : 'none' }}>\r\n                            <b>damage immunities</b> {this.props.combatant.damage.immune}\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='section'>\r\n                            <AbilityScorePanel combatant={this.props.combatant} />\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.ac !== 0 ? '' : 'none' }}>\r\n                            <b>ac</b> {this.props.combatant.ac}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.savingThrows !== '' ? '' : 'none' }}>\r\n                            <b>saving throws</b> {this.props.combatant.savingThrows}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.skills !== '' ? '' : 'none' }}>\r\n                            <b>skills</b> {this.props.combatant.skills}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.speed !== '' ? '' : 'none' }}>\r\n                            <b>speed</b> {this.props.combatant.speed}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.senses !== '' ? '' : 'none' }}>\r\n                            <b>senses</b> {this.props.combatant.senses}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.languages !== '' ? '' : 'none' }}>\r\n                            <b>languages</b> {this.props.combatant.languages}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.equipment !== '' ? '' : 'none' }}>\r\n                            <b>equipment</b> {this.props.combatant.equipment}\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <TraitsPanel combatant={this.props.combatant} />\r\n                        <div className='divider' />\r\n                        <div className='section subheading'>\r\n                            conditions\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.conditionImmunities !== '' ? '' : 'none' }}>\r\n                            <b>condition immunities</b> {this.props.combatant.conditionImmunities}\r\n                        </div>\r\n                        <ConditionsPanel\r\n                            combatant={this.props.combatant as Combatant}\r\n                            combat={this.props.combat}\r\n                            addCondition={() => this.props.addCondition(this.props.combatant as Combatant)}\r\n                            editCondition={condition => this.props.editCondition(this.props.combatant as Combatant, condition)}\r\n                            removeCondition={conditionID => this.props.removeCondition(this.props.combatant as Combatant, conditionID)}\r\n                            nudgeConditionValue={(condition, type, delta) => this.props.nudgeConditionValue(condition, type, delta)}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n            if (this.props.mode.indexOf('template') !== -1) {\r\n                if (this.props.mode.indexOf('overview') !== -1) {\r\n                    stats = (\r\n                        <div>\r\n                            <div className='section centered'>\r\n                                <i>{this.description()}</i>\r\n                            </div>\r\n                            <div className='divider' />\r\n                            <div className='section'>\r\n                                <b>speed</b> {this.props.combatant.speed || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>senses</b> {this.props.combatant.senses || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>languages</b> {this.props.combatant.languages || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>equipment</b> {this.props.combatant.equipment || '-'}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf('abilities') !== -1) {\r\n                    stats = (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <AbilityScorePanel combatant={this.props.combatant} />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>saving throws</b> {this.props.combatant.savingThrows || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>skills</b> {this.props.combatant.skills || '-'}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf('combat') !== -1) {\r\n                    stats = (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <b>ac</b> {this.props.combatant.ac}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>hp</b> {this.getHP()}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>damage immunity</b> {this.props.combatant.damage.immune || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>damage resistance</b> {this.props.combatant.damage.resist || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>damage vulnerability</b> {this.props.combatant.damage.vulnerable || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>condition immunities</b> {this.props.combatant.conditionImmunities || '-'}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf('actions') !== -1) {\r\n                    stats = (\r\n                        <TraitsPanel\r\n                            combatant={this.props.combatant}\r\n                            mode='template'\r\n                            copyTrait={trait => this.props.copyTrait(trait)}\r\n                        />\r\n                    );\r\n                }\r\n            }\r\n\r\n            let toggle = null;\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                // Don't show toggle button for combatant\r\n            } else if (this.props.mode.indexOf('template') !== -1) {\r\n                // Don't show toggle button for template\r\n            } else {\r\n                const imageStyle = this.state.showDetails ? 'image rotate' : 'image';\r\n                toggle = (\r\n                    <img className={imageStyle} src={arrow} alt='arrow' onClick={() => this.toggleDetails()} />\r\n                );\r\n            }\r\n\r\n            const name = (this.props.combatant as Combatant ? (this.props.combatant as Combatant).displayName : null)\r\n                || this.props.combatant.name\r\n                || 'unnamed monster';\r\n\r\n            return (\r\n                <div className='card monster'>\r\n                    <div className='heading'>\r\n                        <div className='title'>{name}</div>\r\n                        {toggle}\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        {stats}\r\n                        <div style={{ display: options.length > 0 ? '' : 'none' }}>\r\n                            <div className='divider' />\r\n                            <div className='section'>{options}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Combatant } from '../../models/combat';\r\nimport { PC } from '../../models/party';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport Radial from '../controls/radial';\r\nimport Spin from '../controls/spin';\r\n\r\nimport arrow from '../../resources/images/down-arrow.svg';\r\n\r\ninterface Props {\r\n    combatant: PC | (PC & Combatant);\r\n    mode: string;\r\n    changeValue: (pc: PC, field: string, value: any) => void;\r\n    nudgeValue: (pc: PC, field: string, delta: number) => void;\r\n    removePC: (pc: PC) => void;\r\n    // Combat\r\n    makeCurrent: (combatant: Combatant) => void;\r\n    makeActive: (combatant: Combatant) => void;\r\n    makeDefeated: (combatant: Combatant) => void;\r\n    endTurn: (combatant: Combatant) => void;\r\n    mapAdd: (combatant: Combatant) => void;\r\n    mapMove: (combatant: Combatant, dir: string) => void;\r\n    mapRemove: (combatant: Combatant) => void;\r\n    removeCombatant: (combatant: Combatant) => void;\r\n}\r\n\r\ninterface State {\r\n    showDetails: boolean;\r\n}\r\n\r\nexport default class PCCard extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        removePC: null,\r\n        makeCurrent: null,\r\n        makeActive: null,\r\n        makeDefeated: null,\r\n        endTurn: null,\r\n        mapAdd: null,\r\n        mapMove: null,\r\n        mapRemove: null,\r\n        removeCombatant: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showDetails: false\r\n        };\r\n    }\r\n\r\n    private toggleDetails() {\r\n        this.setState({\r\n            showDetails: !this.state.showDetails\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const options = [];\r\n            if (this.props.mode.indexOf('edit') !== -1) {\r\n                if (this.props.combatant.active) {\r\n                    options.push(\r\n                        <button key='toggle-active' onClick={() => this.props.changeValue(this.props.combatant, 'active', false)}>\r\n                            mark inactive\r\n                        </button>\r\n                    );\r\n                } else {\r\n                    options.push(\r\n                        <button key='toggle-active' onClick={() => this.props.changeValue(this.props.combatant, 'active', true)}>\r\n                            mark active\r\n                        </button>\r\n                    );\r\n                }\r\n                options.push(<ConfirmButton key='remove' text='delete pc' callback={() => this.props.removePC(this.props.combatant)} />);\r\n            }\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                const combatant = this.props.combatant as Combatant;\r\n\r\n                if (this.props.mode.indexOf('tactical') !== -1) {\r\n                    if (this.props.mode.indexOf('on-map') !== -1) {\r\n                        options.push(\r\n                            <div key='mapMove' className='section centered'>\r\n                                <Radial\r\n                                    direction='eight'\r\n                                    click={dir => this.props.mapMove(combatant, dir)}\r\n                                />\r\n                            </div>\r\n                        );\r\n                        options.push(\r\n                            <Spin\r\n                                key='altitude'\r\n                                source={this.props.combatant}\r\n                                name='altitude'\r\n                                label='altitude'\r\n                                display={value => value + ' ft.'}\r\n                                nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'altitude', delta * 5)}\r\n                            />\r\n                        );\r\n                        options.push(<button key='mapRemove' onClick={() => this.props.mapRemove(combatant)}>remove from map</button>);\r\n                    }\r\n                    if (this.props.mode.indexOf('off-map') !== -1) {\r\n                        options.push(<button key='mapAdd' onClick={() => this.props.mapAdd(combatant)}>add to map</button>);\r\n                    }\r\n                    options.push(<div key='tactical-div' className='divider' />);\r\n                }\r\n                if (combatant.pending && !combatant.active && !combatant.defeated) {\r\n                    options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                }\r\n                if (!combatant.pending && combatant.active && !combatant.defeated) {\r\n                    if (combatant.current) {\r\n                        options.push(<button key='endTurn' onClick={() => this.props.endTurn(combatant)}>end turn</button>);\r\n                        options.push(<button key='makeDefeated' onClick={() => this.props.makeDefeated(combatant)}>mark as defeated and end turn</button>);\r\n                    } else {\r\n                        options.push(<button key='makeCurrent' onClick={() => this.props.makeCurrent(combatant)}>start turn</button>);\r\n                        options.push(<button key='makeDefeated' onClick={() => this.props.makeDefeated(combatant)}>mark as defeated</button>);\r\n                        options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                    }\r\n                }\r\n                if (!combatant.pending && !combatant.active && combatant.defeated) {\r\n                    options.push(<button key='makeActive' onClick={() => this.props.makeActive(combatant)}>mark as active</button>);\r\n                    options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                }\r\n            }\r\n\r\n            const commonStatBlock = (\r\n                <div className='stats'>\r\n                    <div className='section centered'>\r\n                        <div className='lowercase'>\r\n                            <i>\r\n                                <span>{this.props.combatant.race || 'race'} {this.props.combatant.classes || 'class'}</span>,\r\n                                <span>level {this.props.combatant.level}</span>\r\n                            </i>\r\n                        </div>\r\n                        <div style={{ display: this.props.combatant.url ? '' : 'none' }}>\r\n                            <a href={this.props.combatant.url} target='_blank' rel='noopener noreferrer'>d&d beyond sheet</a>\r\n                        </div>\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section subheading'>languages</div>\r\n                    <div className='section'>\r\n                        {this.props.combatant.languages || '-'}\r\n                    </div>\r\n                    <div className='section subheading'>passive skills</div>\r\n                    <div className='table'>\r\n                        <div>\r\n                            <div className='cell three'><b>insight</b></div>\r\n                            <div className='cell three'><b>invest.</b></div>\r\n                            <div className='cell three'><b>percep.</b></div>\r\n                        </div>\r\n                        <div>\r\n                            <div className='cell three'>{this.props.combatant.passiveInsight}</div>\r\n                            <div className='cell three'>{this.props.combatant.passiveInvestigation}</div>\r\n                            <div className='cell three'>{this.props.combatant.passivePerception}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            let stats = null;\r\n            if (this.props.mode.indexOf('edit') !== -1) {\r\n                if (this.state.showDetails) {\r\n                    stats = (\r\n                        <div className='edit'>\r\n                            <div className='section'>\r\n                                <div className='input-label' style={{ display: this.state.showDetails ? '' : 'none' }}>character name:</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.props.combatant.name}\r\n                                    onChange={event => this.props.changeValue(this.props.combatant, 'name', event.target.value)}\r\n                                />\r\n                                <div className='input-label' style={{ display: this.state.showDetails ? '' : 'none' }}>player name:</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.props.combatant.player}\r\n                                    onChange={event => this.props.changeValue(this.props.combatant, 'player', event.target.value)}\r\n                                />\r\n                                <div className='input-label'>race:</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.props.combatant.race}\r\n                                    onChange={event => this.props.changeValue(this.props.combatant, 'race', event.target.value)}\r\n                                />\r\n                                <div className='input-label'>class:</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.props.combatant.classes}\r\n                                    onChange={event => this.props.changeValue(this.props.combatant, 'classes', event.target.value)}\r\n                                />\r\n                                <div className='input-label'>level:</div>\r\n                                <Spin\r\n                                    source={this.props.combatant}\r\n                                    name='level'\r\n                                    nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'level', delta)}\r\n                                />\r\n                                <div className='input-label'>languages:</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.props.combatant.languages}\r\n                                    onChange={event => this.props.changeValue(this.props.combatant, 'languages', event.target.value)}\r\n                                />\r\n                                <div className='input-label'>d&d beyond link:</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.props.combatant.url}\r\n                                    onChange={event => this.props.changeValue(this.props.combatant, 'url', event.target.value)}\r\n                                />\r\n                            </div>\r\n                            <div className='divider' />\r\n                            <div className='section subheading'>passive skills</div>\r\n                            <Spin\r\n                                source={this.props.combatant}\r\n                                name='passiveInsight'\r\n                                label='insight'\r\n                                nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'passiveInsight', delta)}\r\n                            />\r\n                            <Spin\r\n                                source={this.props.combatant}\r\n                                name='passiveInvestigation'\r\n                                label='investigation'\r\n                                nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'passiveInvestigation', delta)}\r\n                            />\r\n                            <Spin\r\n                                source={this.props.combatant}\r\n                                name='passivePerception'\r\n                                label='perception'\r\n                                nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'passivePerception', delta)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                } else {\r\n                    stats = commonStatBlock;\r\n                }\r\n            }\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                stats = commonStatBlock;\r\n            }\r\n\r\n            let toggle = null;\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                // Don't show toggle button for combatant\r\n            } else {\r\n                const imageStyle = this.state.showDetails ? 'image rotate' : 'image';\r\n                toggle = <img className={imageStyle} src={arrow} alt='arrow' onClick={() => this.toggleDetails()} />;\r\n            }\r\n\r\n            const name = (this.props.combatant as Combatant ? (this.props.combatant as Combatant).displayName : null)\r\n                || this.props.combatant.name\r\n                || 'unnamed pc';\r\n\r\n            return (\r\n                <div className='card pc'>\r\n                    <div className='heading'>\r\n                        <div className='title'>{name}</div>\r\n                        {toggle}\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        {stats}\r\n                        <div style={{ display: options.length > 0 ? '' : 'none' }}>\r\n                            <div className='divider' />\r\n                            <div className='section'>\r\n                                {options}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Combatant } from '../../models/combat';\r\nimport { Monster } from '../../models/monster-group';\r\n\r\ninterface Props {\r\n    combatant: Combatant & Monster;\r\n}\r\n\r\nexport default class HitPointGauge extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const hpCurrent = this.props.combatant.hp || 0;\r\n            const hpMax = this.props.combatant.hpMax + this.props.combatant.hpTemp;\r\n            const hpBloodied = this.props.combatant.hpMax / 2;\r\n            const hpWidth = 100 * Math.max(hpCurrent, 0) / hpMax;\r\n\r\n            let style = '';\r\n            if (hpCurrent >= this.props.combatant.hpMax) {\r\n                style = 'bar unhurt';\r\n            } else if (hpCurrent <= hpBloodied) {\r\n                style = 'bar bloodied';\r\n            } else {\r\n                style = 'bar injured';\r\n            }\r\n\r\n            let hpTempBar = null;\r\n            if (this.props.combatant.hpTemp > 0) {\r\n                const hpTempWidth = 100 * Math.max(this.props.combatant.hpTemp, 0) / hpMax;\r\n                hpTempBar = <div className='bar temp' style={{ width: hpTempWidth + '%' }} />;\r\n            }\r\n\r\n            return (\r\n                <div className='hp-gauge'>\r\n                    <div className={style} style={{ width: hpWidth + '%' }} />\r\n                    {hpTempBar}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Combatant } from '../../models/combat';\r\nimport { Map, MapItem } from '../../models/map-folio';\r\nimport { Monster } from '../../models/monster-group';\r\nimport { PC } from '../../models/party';\r\n\r\nimport HitPointGauge from './hit-point-gauge';\r\n\r\ninterface Props {\r\n    map: Map;\r\n    mode: 'edit' | 'thumbnail' | 'combat';\r\n    combatants: ((Combatant & PC) | (Combatant & Monster))[];\r\n    showOverlay: boolean;\r\n    selectedItemID: string;\r\n    setSelectedItemID: (itemID: string | null) => void;\r\n    addMapTile: (x: number, y: number) => void;\r\n    gridSquareClicked: (x: number, y: number) => void;\r\n}\r\n\r\ninterface MapDimensions {\r\n    minX: number;\r\n    maxX: number;\r\n    minY: number;\r\n    maxY: number;\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\ninterface StyleData {\r\n    left: string;\r\n    top: string;\r\n    width: string;\r\n    height: string;\r\n}\r\n\r\nexport default class MapPanel extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        combatants: null,\r\n        showOverlay: false,\r\n        selectedItemID: null,\r\n        setSelectedItemID: null,\r\n        addMapTile: null,\r\n        gridSquareClicked: null\r\n    };\r\n\r\n    private getMapDimensions(border: number): MapDimensions | null {\r\n        let dimensions: MapDimensions | null = null;\r\n\r\n        this.props.map.items.filter(i => {\r\n            if (this.props.mode === 'edit') {\r\n                return i.type === 'tile';\r\n            }\r\n            return true;\r\n        }).forEach(i => {\r\n            if (!dimensions) {\r\n                dimensions = {\r\n                    minX: i.x,\r\n                    maxX: i.x + i.width - 1,\r\n                    minY: i.y,\r\n                    maxY: i.y + i.height - 1,\r\n                    width: 0,\r\n                    height: 0\r\n                };\r\n            } else {\r\n                dimensions.minX = Math.min(dimensions.minX, i.x);\r\n                dimensions.maxX = Math.max(dimensions.maxX, i.x + i.width - 1);\r\n                dimensions.minY = Math.min(dimensions.minY, i.y);\r\n                dimensions.maxY = Math.max(dimensions.maxY, i.y + i.height - 1);\r\n            }\r\n        });\r\n\r\n        if (!dimensions) {\r\n            // The map is blank\r\n            if (this.props.mode === 'thumbnail') {\r\n                return null;\r\n            }\r\n\r\n            dimensions = {\r\n                minX: 0,\r\n                maxX: 0,\r\n                minY: 0,\r\n                maxY: 0,\r\n                width: 0,\r\n                height: 0\r\n            };\r\n        }\r\n\r\n        // Apply the border\r\n        dimensions.minX -= border;\r\n        dimensions.maxX += border;\r\n        dimensions.minY -= border;\r\n        dimensions.maxY += border;\r\n\r\n        // Set width and height\r\n        dimensions.width = 1 + dimensions.maxX - dimensions.minX;\r\n        dimensions.height = 1 + dimensions.maxY - dimensions.minY;\r\n\r\n        return dimensions;\r\n    }\r\n\r\n    private getSideLength(): number {\r\n        switch (this.props.mode) {\r\n            case 'thumbnail':\r\n                return 5;\r\n            case 'edit':\r\n            case 'combat':\r\n                return 25;\r\n            default:\r\n                return 5;\r\n        }\r\n    }\r\n\r\n    private getStyle(x: number, y: number, width: number, height: number, mapDimensions: MapDimensions): StyleData {\r\n        const sideLength = this.getSideLength();\r\n\r\n        return {\r\n            left: 'calc(' + sideLength + 'px * ' + (x - mapDimensions.minX) + ')',\r\n            top: 'calc(' + sideLength + 'px * ' + (y - mapDimensions.minY) + ')',\r\n            width: 'calc((' + sideLength + 'px * ' + width + ') + 1px)',\r\n            height: 'calc((' + sideLength + 'px * ' + height + ') + 1px)'\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const border = (this.props.mode === 'edit') ? 2 : 0;\r\n            const mapDimensions = this.getMapDimensions(border);\r\n            if (!mapDimensions) {\r\n                return (\r\n                    <div>(blank map)</div>\r\n                );\r\n            }\r\n\r\n            // Draw the grid squares\r\n            const grid = [];\r\n            if (this.props.mode === 'edit') {\r\n                for (let y = mapDimensions.minY; y !== mapDimensions.maxY + 1; ++y) {\r\n                    for (let x = mapDimensions.minX; x !== mapDimensions.maxX + 1; ++x) {\r\n                        const gridStyle = this.getStyle(x, y, 1, 1, mapDimensions);\r\n                        grid.push(\r\n                            <GridSquare\r\n                                key={x + ',' + y}\r\n                                x={x}\r\n                                y={y}\r\n                                style={gridStyle}\r\n                                onClick={() => this.props.setSelectedItemID(null)}\r\n                                onDoubleClick={(posX, posY) => this.props.addMapTile(posX, posY)}\r\n                            />\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Draw the map tiles\r\n            const tiles = this.props.map.items\r\n                .filter(i => i.type === 'tile')\r\n                .map(i => {\r\n                    const tileStyle = this.getStyle(i.x, i.y, i.width, i.height, mapDimensions as MapDimensions);\r\n                    return (\r\n                        <MapTile\r\n                            key={i.id}\r\n                            tile={i}\r\n                            style={tileStyle}\r\n                            selectable={this.props.mode === 'edit'}\r\n                            selected={this.props.selectedItemID === i.id}\r\n                            thumbnail={this.props.mode === 'thumbnail'}\r\n                            select={id => this.props.mode === 'edit' ? this.props.setSelectedItemID(id) : null}\r\n                        />\r\n                    );\r\n                });\r\n\r\n            // Draw the tokens\r\n            let tokens: JSX.Element[] = [];\r\n            if (this.props.mode !== 'edit') {\r\n                tokens = this.props.map.items\r\n                    .filter(i => (i.type === 'monster') || (i.type === 'pc'))\r\n                    .map(i => {\r\n                        const tokenStyle = this.getStyle(i.x, i.y, i.width, i.height, mapDimensions as MapDimensions);\r\n                        const combatant = this.props.combatants.find(c => c.id === i.id);\r\n                        if (combatant) {\r\n                            return (\r\n                                <MapToken\r\n                                    key={i.id}\r\n                                    token={i}\r\n                                    combatant={combatant}\r\n                                    style={tokenStyle}\r\n                                    simple={this.props.mode === 'thumbnail'}\r\n                                    selectable={this.props.mode === 'combat'}\r\n                                    selected={this.props.selectedItemID ===  i.id}\r\n                                    select={id => this.props.setSelectedItemID(id)}\r\n                                />\r\n                            );\r\n                        }\r\n\r\n                        return null;\r\n                    })\r\n                    .filter(mt => mt !== null) as JSX.Element[];\r\n            }\r\n\r\n            // Draw the drag overlay\r\n            const dragOverlay = [];\r\n            if (this.props.showOverlay) {\r\n                for (let yOver = mapDimensions.minY; yOver !== mapDimensions.maxY + 1; ++yOver) {\r\n                    for (let xOver = mapDimensions.minX; xOver !== mapDimensions.maxX + 1; ++xOver) {\r\n                        const overlayStyle = this.getStyle(xOver, yOver, 1, 1, mapDimensions);\r\n                        dragOverlay.push(\r\n                            <GridSquare\r\n                                key={xOver + ',' + yOver}\r\n                                x={xOver}\r\n                                y={yOver}\r\n                                style={overlayStyle}\r\n                                overlay={true}\r\n                                onClick={(posX, posY) => this.props.gridSquareClicked(posX, posY)}\r\n                            />\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n\r\n            const style = 'map-panel ' + this.props.mode;\r\n            return (\r\n                <div className={style} onClick={() => this.props.setSelectedItemID(null)}>\r\n                    <div className='grid' style={{ height: ((this.getSideLength() * mapDimensions.height) + 1) + 'px' }}>\r\n                        {grid}\r\n                        {tiles}\r\n                        {tokens}\r\n                        {dragOverlay}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface GridSquareProps {\r\n    x: number;\r\n    y: number;\r\n    style: StyleData;\r\n    overlay: boolean;\r\n    onClick: (x: number, y: number) => void;\r\n    onDoubleClick: (x: number, y: number) => void;\r\n}\r\n\r\nclass GridSquare extends React.Component<GridSquareProps> {\r\n    public static defaultProps = {\r\n        overlay: false,\r\n        onDoubleClick: null\r\n    };\r\n\r\n    private click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (this.props.onClick) {\r\n            this.props.onClick(this.props.x, this.props.y);\r\n        }\r\n    }\r\n\r\n    private doubleClick(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (this.props.onDoubleClick) {\r\n            this.props.onDoubleClick(this.props.x, this.props.y);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'grid-square';\r\n        if (this.props.overlay) {\r\n            style += ' grid-overlay';\r\n        }\r\n\r\n        return (\r\n            <div\r\n                className={style}\r\n                style={this.props.style}\r\n                onClick={e => this.click(e)}\r\n                onDoubleClick={e => this.doubleClick(e)}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\ninterface MapTileProps {\r\n    tile: MapItem;\r\n    style: StyleData;\r\n    thumbnail: boolean;\r\n    selectable: boolean;\r\n    selected: boolean;\r\n    select: (tileID: string) => void;\r\n}\r\n\r\nclass MapTile extends React.Component<MapTileProps> {\r\n    private select(e: React.MouseEvent) {\r\n        if (this.props.selectable) {\r\n            e.stopPropagation();\r\n            this.props.select(this.props.tile.id);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'tile ' + this.props.tile.terrain;\r\n        if (this.props.selected) {\r\n            style += ' selected';\r\n        }\r\n        if (this.props.thumbnail) {\r\n            style += ' thumbnail';\r\n        }\r\n\r\n        return (\r\n            <div\r\n                className={style}\r\n                style={this.props.style}\r\n                onClick={e => this.select(e)}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\ninterface MapTokenProps {\r\n    token: MapItem;\r\n    combatant: (Combatant & PC) | (Combatant & Monster);\r\n    style: StyleData;\r\n    simple: boolean;\r\n    selectable: boolean;\r\n    selected: boolean;\r\n    select: (tokenID: string) => void;\r\n}\r\n\r\nclass MapToken extends React.Component<MapTokenProps> {\r\n    private select(e: React.MouseEvent) {\r\n        if (this.props.selectable) {\r\n            e.stopPropagation();\r\n            this.props.select(this.props.token.id);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'token ' + this.props.token.type;\r\n        if (this.props.selected) {\r\n            style += ' selected';\r\n        }\r\n        if (this.props.combatant.current) {\r\n            style += ' current';\r\n        }\r\n\r\n        let initials = null;\r\n        let hpGauge = null;\r\n        let altitudeBadge = null;\r\n        let conditionsBadge = null;\r\n        if (!this.props.simple) {\r\n            const name = this.props.combatant.displayName || this.props.combatant.name;\r\n            initials = (\r\n                <div className='initials'>{name.split(' ').map(s => s[0])}</div>\r\n            );\r\n\r\n            if (this.props.combatant.type === 'monster') {\r\n                hpGauge = (\r\n                    <HitPointGauge combatant={this.props.combatant as Combatant & Monster} />\r\n                );\r\n            }\r\n\r\n            if (this.props.combatant.altitude > 0) {\r\n                altitudeBadge = (\r\n                    <div className='badge altitude'>&#9206;</div>\r\n                );\r\n            }\r\n\r\n            if (this.props.combatant.altitude < 0) {\r\n                altitudeBadge = (\r\n                    <div className='badge altitude'>&#9207;</div>\r\n                );\r\n            }\r\n\r\n            if ((this.props.combatant.conditions) && (this.props.combatant.conditions.length > 0)) {\r\n                conditionsBadge = (\r\n                    <div className='badge'>&#9670;</div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div\r\n                title={this.props.combatant.displayName || this.props.combatant.name}\r\n                className={style}\r\n                style={this.props.style}\r\n                onClick={e => this.select(e)}\r\n            >\r\n                {initials}\r\n                {hpGauge}\r\n                {altitudeBadge}\r\n                {conditionsBadge}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Combat } from '../../models/combat';\r\n\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    combat: Combat;\r\n    selected: boolean;\r\n    setSelection: (combat: Combat) => void;\r\n}\r\n\r\nexport default class CombatListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            let map = null;\r\n            if (this.props.combat.map) {\r\n                map = (\r\n                    <MapPanel\r\n                        map={this.props.combat.map}\r\n                        mode='thumbnail'\r\n                        combatants={this.props.combat.combatants}\r\n                    />\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.combat)}>\r\n                    <div className='heading'>{this.props.combat.name || 'unnamed combat'}</div>\r\n                    <div className='text'>paused at {this.props.combat.timestamp}</div>\r\n                    {map}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport close from '../../resources/images/close-black.svg';\r\nimport arrow from '../../resources/images/down-arrow-black.svg';\r\n\r\ninterface Props {\r\n    content: any[];\r\n    heading: string;\r\n    hidden: boolean;\r\n    showClose: boolean;\r\n    showToggle: boolean;\r\n    close: () => void;\r\n}\r\n\r\ninterface State {\r\n    showCards: boolean;\r\n}\r\n\r\nexport default class CardGroup extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        heading: null,\r\n        hidden: false,\r\n        showClose: false,\r\n        showToggle: false,\r\n        close: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showCards: true\r\n        };\r\n    }\r\n\r\n    private toggleCards() {\r\n        this.setState({\r\n            showCards: !this.state.showCards\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            if (this.props.hidden) {\r\n                return null;\r\n            }\r\n\r\n            let heading = null;\r\n            if (this.props.heading) {\r\n                let closeBtn = null;\r\n                if (this.props.showClose) {\r\n                    closeBtn = (\r\n                        <img className='image' src={close} alt='close' onClick={() => this.props.close()} />\r\n                    );\r\n                }\r\n\r\n                let toggle = null;\r\n                if (this.props.showToggle) {\r\n                    const style = this.state.showCards ? 'image rotate' : 'image';\r\n                    toggle = (\r\n                        <img className={style} src={arrow} alt='arrow' onClick={() => this.toggleCards()} />\r\n                    );\r\n                }\r\n\r\n                heading = (\r\n                    <div className='heading'>\r\n                        <div className='title'>{this.props.heading}</div>\r\n                        {toggle}\r\n                        {closeBtn}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            let cards = [];\r\n            if ((this.props.content.length > 0) && this.state.showCards) {\r\n                cards = this.props.content;\r\n            }\r\n\r\n            return (\r\n                <div className='card-group'>\r\n                    {heading}\r\n                    <div className='row small-up-1 medium-up-2 large-up-4 collapse'>\r\n                        {cards}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combat, Combatant, Notification } from '../../models/combat';\r\nimport { Condition, ConditionDurationSaves } from '../../models/condition';\r\nimport { Monster } from '../../models/monster-group';\r\nimport { PC } from '../../models/party';\r\n\r\nimport InfoCard from '../cards/info-card';\r\nimport CombatManagerCard from '../cards/information/combat-manager-card';\r\nimport MonsterCard from '../cards/monster-card';\r\nimport PCCard from '../cards/pc-card';\r\nimport Spin from '../controls/spin';\r\nimport CombatListItem from '../list-items/combat-list-item';\r\nimport CardGroup from '../panels/card-group';\r\nimport HitPointGauge from '../panels/hit-point-gauge';\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    combats: Combat[];\r\n    combat: Combat | null;\r\n    showHelp: boolean;\r\n    createCombat: () => void;\r\n    resumeEncounter: (combat: Combat) => void;\r\n    close: (notification: Notification, removeCondition: boolean) => void;\r\n    mapAdd: (combatant: (Combatant & PC) | (Combatant & Monster), x: number, y: number) => void;\r\n    makeCurrent: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    makeActive: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    makeDefeated: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    removeCombatant: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    addCondition: (combatant: Combatant & Monster) => void;\r\n    editCondition: (combatant: Combatant & Monster, condition: Condition) => void;\r\n    removeCondition: (combatant: Combatant & Monster, conditionID: string) => void;\r\n    mapMove: (combatant: (Combatant & PC) | (Combatant & Monster), dir: string) => void;\r\n    mapRemove: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    endTurn: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    changeHP: (combatant: Combatant & Monster, hp: number, temp: number) => void;\r\n    changeValue: (source: {}, type: string, value: any) => void;\r\n    nudgeValue: (source: {}, type: string, delta: number) => void;\r\n}\r\n\r\ninterface State {\r\n    selectedTokenID: string | null;\r\n    addingToMapID: string | null;\r\n}\r\n\r\nexport default class CombatManagerScreen extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            selectedTokenID: null,  // The ID of the combatant that's selected\r\n            addingToMapID: null     // The ID of the combatant we're adding to the map\r\n        };\r\n    }\r\n\r\n    private setSelectedTokenID(id: string | null) {\r\n        this.setState({\r\n            selectedTokenID: id\r\n        });\r\n    }\r\n\r\n    private setAddingToMapID(id: string | null) {\r\n        this.setState({\r\n            addingToMapID: id\r\n        });\r\n    }\r\n\r\n    private createCard(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        let mode = 'combat';\r\n        if (this.props.combat && this.props.combat.map) {\r\n            mode += ' tactical';\r\n            const onMap = this.props.combat.map.items.find(i => i.id === combatant.id);\r\n            mode += onMap ? ' on-map' : ' off-map';\r\n        }\r\n\r\n        switch (combatant.type) {\r\n            case 'pc':\r\n                return (\r\n                    <PCCard\r\n                        key='selected'\r\n                        combatant={combatant as Combatant & PC}\r\n                        mode={mode}\r\n                        changeValue={(source, type, value) => this.props.changeValue(source, type, value)}\r\n                        nudgeValue={(source, type, delta) => this.props.nudgeValue(source, type, delta)}\r\n                        makeCurrent={c => this.props.makeCurrent(c as Combatant & PC)}\r\n                        makeActive={c => this.props.makeActive(c as Combatant & PC)}\r\n                        makeDefeated={c => this.props.makeDefeated(c as Combatant & PC)}\r\n                        removeCombatant={c => this.props.removeCombatant(c as Combatant & PC)}\r\n                        mapAdd={c => this.setAddingToMapID(c.id)}\r\n                        mapMove={(c, dir) => this.props.mapMove(c as Combatant & PC, dir)}\r\n                        mapRemove={c => this.props.mapRemove(c as Combatant & PC)}\r\n                        endTurn={c => this.props.endTurn(c as Combatant & PC)}\r\n                    />\r\n                );\r\n            case 'monster':\r\n                return (\r\n                    <MonsterCard\r\n                        key='selected'\r\n                        combatant={combatant as Combatant & Monster}\r\n                        mode={mode}\r\n                        combat={this.props.combat as Combat}\r\n                        changeValue={(c, type, value) => this.props.changeValue(c, type, value)}\r\n                        nudgeValue={(c, type, delta) => this.props.nudgeValue(c, type, delta)}\r\n                        makeCurrent={c => this.props.makeCurrent(c as Combatant & Monster)}\r\n                        makeActive={c => this.props.makeActive(c as Combatant & Monster)}\r\n                        makeDefeated={c => this.props.makeDefeated(c as Combatant & Monster)}\r\n                        removeCombatant={c => this.props.removeCombatant(c as Combatant & Monster)}\r\n                        addCondition={c => this.props.addCondition(c as Combatant & Monster)}\r\n                        editCondition={(c, condition) => this.props.editCondition(c as Combatant & Monster, condition)}\r\n                        removeCondition={(c, conditionID) => this.props.removeCondition(c as Combatant & Monster, conditionID)}\r\n                        nudgeConditionValue={(c, type, delta) => this.props.nudgeValue(c, type, delta)}\r\n                        mapAdd={c => this.setAddingToMapID(c.id)}\r\n                        mapMove={(c, dir) => this.props.mapMove(c as Combatant & Monster, dir)}\r\n                        mapRemove={c => this.props.mapRemove(c as Combatant & Monster)}\r\n                        endTurn={(c) => this.props.endTurn(c as Combatant & Monster)}\r\n                        changeHP={(c, hp, temp) => this.props.changeHP(c as Combatant & Monster, hp, temp)}\r\n                    />\r\n                );\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    private addCombatantToMap(x: number, y: number) {\r\n        if (this.props.combat) {\r\n            const combatant = this.props.combat.combatants.find(c => c.id === this.state.addingToMapID);\r\n            if (combatant) {\r\n                this.props.mapAdd(combatant, x, y);\r\n            }\r\n            this.setAddingToMapID(null);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            if (this.props.combat) {\r\n                const current: JSX.Element[] = [];\r\n                let pending: JSX.Element[] = [];\r\n                let active: JSX.Element[] = [];\r\n                const defeated: JSX.Element[] = [];\r\n\r\n                this.props.combat.combatants.forEach(combatant => {\r\n                    if (combatant.current) {\r\n                        current.push(\r\n                            <div key={combatant.id}>\r\n                                {this.createCard(combatant)}\r\n                            </div>\r\n                        );\r\n                    }\r\n                    if (combatant.pending && !combatant.active && !combatant.defeated) {\r\n                        pending.push(\r\n                            <PendingCombatantRow\r\n                                key={combatant.id}\r\n                                combatant={combatant}\r\n                                select={c => this.setSelectedTokenID(c.id)}\r\n                                selected={combatant.id === this.state.selectedTokenID}\r\n                                nudgeValue={(c, type, delta) => this.props.nudgeValue(c, type, delta)}\r\n                                makeActive={c => this.props.makeActive(c)}\r\n                            />\r\n                        );\r\n                    }\r\n                    if (!combatant.pending && combatant.active && !combatant.defeated) {\r\n                        active.push(\r\n                            <CombatantRow\r\n                                key={combatant.id}\r\n                                combatant={combatant}\r\n                                combat={this.props.combat as Combat}\r\n                                select={c => this.setSelectedTokenID(c.id)}\r\n                                selected={combatant.id === this.state.selectedTokenID}\r\n                            />\r\n                        );\r\n                    }\r\n                    if (!combatant.pending && !combatant.active && combatant.defeated) {\r\n                        defeated.push(\r\n                            <CombatantRow\r\n                                key={combatant.id}\r\n                                combatant={combatant}\r\n                                combat={this.props.combat as Combat}\r\n                                select={c => this.setSelectedTokenID(c.id)}\r\n                                selected={combatant.id === this.state.selectedTokenID}\r\n                            />\r\n                        );\r\n                    }\r\n                });\r\n\r\n                if (this.props.showHelp && (pending.length !== 0)) {\r\n                    const pendingHelp = (\r\n                        <div key='pending-help'>\r\n                            <InfoCard\r\n                                getContent={() =>\r\n                                    <div>\r\n                                        <div className='section'>these combatants are not yet part of the encounter</div>\r\n                                        <div className='section'>set initiative on each of them, then add them to the encounter</div>\r\n                                    </div>\r\n                                }\r\n                            />\r\n                        </div>\r\n                    );\r\n                    pending = [pendingHelp].concat(pending);\r\n                }\r\n\r\n                if (this.props.showHelp && (current.length === 0)) {\r\n                    const activeHelp = (\r\n                        /* tslint:disable:max-line-length */\r\n                        <div key='active-help'>\r\n                            <InfoCard\r\n                                getContent={() =>\r\n                                    <div>\r\n                                        <div className='section'>these are the combatants taking part in this encounter; you can select them to see their stat blocks (on the right)</div>\r\n                                        <div className='section'>to begin the encounter, select the first combatant and press the <b>start turn</b> button on their stat block</div>\r\n                                    </div>\r\n                                }\r\n                            />\r\n                        </div>\r\n                        /* tslint:enable:max-line-length */\r\n                    );\r\n                    active = [activeHelp].concat(active);\r\n                }\r\n\r\n                if (current.length === 0) {\r\n                    current.push(\r\n                        <InfoCard\r\n                            key='current'\r\n                            getContent={() =>\r\n                                <div className='section'>the current initiative holder will be displayed here</div>\r\n                            }\r\n                        />\r\n                    );\r\n                }\r\n\r\n                const notifications = this.props.combat.notifications.map(n => (\r\n                    <NotificationPanel\r\n                        key={n.id}\r\n                        notification={n}\r\n                        close={(notification, removeCondition) => this.props.close(notification, removeCondition)}\r\n                    />\r\n                ));\r\n\r\n                let mapSection = null;\r\n                if (this.props.combat.map) {\r\n                    mapSection = (\r\n                        <MapPanel\r\n                            map={this.props.combat.map}\r\n                            mode='combat'\r\n                            showOverlay={this.state.addingToMapID !== null}\r\n                            combatants={this.props.combat.combatants}\r\n                            selectedItemID={this.state.selectedTokenID ? this.state.selectedTokenID : undefined}\r\n                            setSelectedItemID={id => {\r\n                                if (id) {\r\n                                    this.setSelectedTokenID(id);\r\n                                }\r\n                            }}\r\n                            gridSquareClicked={(x, y) => this.addCombatantToMap(x, y)}\r\n                        />\r\n                    );\r\n                }\r\n\r\n                let selectedCombatant = null;\r\n                if (this.state.selectedTokenID) {\r\n                    const combatant = this.props.combat.combatants.find(c => c.id === this.state.selectedTokenID);\r\n                    if (combatant && !combatant.current) {\r\n                        selectedCombatant = this.createCard(combatant);\r\n                    }\r\n                }\r\n                if (!selectedCombatant) {\r\n                    selectedCombatant = (\r\n                        <InfoCard\r\n                            key='selected'\r\n                            getContent={() =>\r\n                                <div className='section'>select a pc or monster to see its details here</div>\r\n                            }\r\n                        />\r\n                    );\r\n                }\r\n\r\n                return (\r\n                    <div className='combat-manager row collapse'>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable list-column'>\r\n                            <CardGroup\r\n                                heading='initiative holder'\r\n                                content={current}\r\n                            />\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable list-column'>\r\n                            {notifications}\r\n                            <CardGroup\r\n                                heading='waiting for intiative to be entered'\r\n                                content={pending}\r\n                                hidden={pending.length === 0}\r\n                                showToggle={true}\r\n                            />\r\n                            {mapSection}\r\n                            <CardGroup\r\n                                heading='combatants in the encounter'\r\n                                content={active}\r\n                                hidden={active.length === 0}\r\n                            />\r\n                            <CardGroup\r\n                                heading='defeated'\r\n                                content={defeated}\r\n                                hidden={defeated.length === 0}\r\n                                showToggle={true}\r\n                            />\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable list-column'>\r\n                            <CardGroup\r\n                                heading='selected combatant'\r\n                                content={[selectedCombatant]}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                let help = null;\r\n                if (this.props.showHelp) {\r\n                    help = (\r\n                        <CombatManagerCard />\r\n                    );\r\n                }\r\n\r\n                const combats: JSX.Element[] = [];\r\n                this.props.combats.forEach(c => {\r\n                    combats.push(\r\n                        <CombatListItem\r\n                            key={c.id}\r\n                            combat={c}\r\n                            selected={false}\r\n                            setSelection={combat => this.props.resumeEncounter(combat)}\r\n                        />\r\n                    );\r\n                });\r\n\r\n                return (\r\n                    <div className='combat-manager row collapse'>\r\n                        <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                            {help}\r\n                            <button onClick={() => this.props.createCombat()}>start a new combat</button>\r\n                            {combats}\r\n                        </div>\r\n                        <div className='columns small-8 medium-8 large-9 scrollable list-column' />\r\n                    </div>\r\n                );\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface NotificationProps {\r\n    notification: Notification;\r\n    close: (notification: Notification, removeCondition: boolean) => void;\r\n}\r\n\r\nclass NotificationPanel extends React.Component<NotificationProps> {\r\n    private saveSuccess(notification: Notification) {\r\n        // Reduce save by 1\r\n        const condition = this.props.notification.condition as Condition;\r\n        if (condition && condition.duration) {\r\n            if ((condition.duration.type === 'saves') || (condition.duration.type === 'rounds')) {\r\n                condition.duration.count -= 1;\r\n                if (condition.duration.count === 0) {\r\n                    // Remove the condition\r\n                    this.close(notification, true);\r\n                } else {\r\n                    this.close(notification);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private close(notification: Notification, removeCondition = false) {\r\n        this.props.close(notification, removeCondition);\r\n    }\r\n\r\n    public render() {\r\n        const combatant = this.props.notification.combatant as (Combatant & Monster);\r\n        const condition = this.props.notification.condition as Condition;\r\n\r\n        const name = combatant.displayName || combatant.name || 'unnamed monster';\r\n        switch (this.props.notification.type) {\r\n            case 'condition-save':\r\n                const duration = condition.duration as ConditionDurationSaves;\r\n                let saveType = duration.saveType.toString();\r\n                if (saveType !== 'death') {\r\n                    saveType = saveType.toUpperCase();\r\n                }\r\n                return (\r\n                    <div key={this.props.notification.id} className='notification'>\r\n                        <div className='text'>\r\n                            {name} must make a {saveType} save against dc {duration.saveDC}\r\n                        </div>\r\n                        <div className='buttons'>\r\n                            <button onClick={() => this.saveSuccess(this.props.notification)}>success</button>\r\n                            <button onClick={() => this.close(this.props.notification)}>ok</button>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            case 'condition-end':\r\n                return (\r\n                    <div key={this.props.notification.id} className='notification'>\r\n                        <div className='text'>\r\n                            {name} is no longer affected by condition {condition.name}\r\n                        </div>\r\n                        <div className='buttons'>\r\n                            <button onClick={() => this.close(this.props.notification)}>ok</button>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface PendingCombatantRowProps {\r\n    combatant: (Combatant & PC) | (Combatant & Monster);\r\n    selected: boolean;\r\n    select: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    nudgeValue: (combatant: (Combatant & PC) | (Combatant & Monster), field: string, delta: number) => void;\r\n    makeActive: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n}\r\n\r\nclass PendingCombatantRow extends React.Component<PendingCombatantRowProps> {\r\n    private getInformationText() {\r\n        if (this.props.selected) {\r\n            return 'selected';\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private onClick(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (this.props.select) {\r\n            this.props.select(this.props.combatant);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'combatant-row ' + this.props.combatant.type;\r\n        if (this.props.combatant.current || this.props.selected) {\r\n            style += ' highlight';\r\n        }\r\n\r\n        return (\r\n            <div className={style} onClick={e => this.onClick(e)}>\r\n                <div className='name'>\r\n                    {this.props.combatant.displayName || this.props.combatant.name || 'combatant'}\r\n                    <span className='info'>{this.getInformationText()}</span>\r\n                </div>\r\n                <div className='content'>\r\n                    <Spin\r\n                        source={this.props.combatant}\r\n                        name='initiative'\r\n                        label='initiative'\r\n                        nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'initiative', delta)}\r\n                    />\r\n                    <button onClick={e => { e.stopPropagation(); this.props.makeActive(this.props.combatant); }}>add to encounter</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface CombatantRowProps {\r\n    combatant: (Combatant & PC) | (Combatant & Monster);\r\n    combat: Combat;\r\n    selected: boolean;\r\n    select: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n}\r\n\r\nclass CombatantRow extends React.Component<CombatantRowProps> {\r\n    private getInformationText() {\r\n        if (this.props.combatant.current) {\r\n            return 'current turn';\r\n        }\r\n\r\n        if (this.props.selected) {\r\n            return 'selected';\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private onClick(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (this.props.select) {\r\n            this.props.select(this.props.combatant);\r\n        }\r\n    }\r\n\r\n    private getContentPC(pc: Combatant & PC, notes: JSX.Element[]) {\r\n        return (\r\n            <div className='content'>\r\n                <div className='section key-stats'>\r\n                    <div className='key-stat'>\r\n                        <div className='stat-value'>{pc.initiative}</div>\r\n                        <div className='stat-label'>init</div>\r\n                    </div>\r\n                    <div className='key-stat wide'>\r\n                        <div className='stat-value'>{pc.player ? pc.player : '-'}</div>\r\n                    </div>\r\n                </div>\r\n                {notes}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getContentMonster(monster: Combatant & Monster, notes: JSX.Element[]) {\r\n        let hp = (monster.hp ? monster.hp : 0).toString();\r\n        if (monster.hpTemp > 0) {\r\n            hp += '+' + monster.hpTemp;\r\n        }\r\n        let gauge = null;\r\n        if (!monster.pending) {\r\n            gauge = (\r\n                <HitPointGauge combatant={monster} />\r\n            );\r\n        }\r\n\r\n        let conditions = null;\r\n        if (this.props.combatant.conditions) {\r\n            conditions = this.props.combatant.conditions.map(c => {\r\n                let name = c.name;\r\n                if (c.name === 'exhaustion') {\r\n                    name += ' (' + c.level + ')';\r\n                }\r\n                if ((c.name === 'custom') && (c.text)) {\r\n                    name = c.text;\r\n                }\r\n                if (c.duration) {\r\n                    name += ' ' + Utils.conditionDurationText(c, this.props.combat);\r\n                }\r\n                const description = [];\r\n                const text = Utils.conditionText(c);\r\n                for (let n = 0; n !== text.length; ++n) {\r\n                    description.push(<li key={n} className='condition-text'>{text[n]}</li>);\r\n                }\r\n                return (\r\n                    <div key={c.id} className='condition'>\r\n                        <div className='condition-name'>{name}</div>\r\n                        <ul>\r\n                            {description}\r\n                        </ul>\r\n                    </div>\r\n                );\r\n            });\r\n        }\r\n\r\n        return (\r\n            <div className='content'>\r\n                <div className='section key-stats'>\r\n                    <div className='key-stat'>\r\n                        <div className='stat-value'>{monster.initiative}</div>\r\n                        <div className='stat-label'>init</div>\r\n                    </div>\r\n                    <div className='key-stat'>\r\n                        <div className='stat-value'>{monster.ac}</div>\r\n                        <div className='stat-label'>ac</div>\r\n                    </div>\r\n                    <div className='key-stat'>\r\n                        <div className='stat-value'>{hp}</div>\r\n                        <div className='stat-label'>hp</div>\r\n                    </div>\r\n                </div>\r\n                {gauge}\r\n                {conditions}\r\n                {notes}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public render() {\r\n        const notes = [];\r\n        if (this.props.combat.map) {\r\n            if (!this.props.combatant.pending && !this.props.combat.map.items.find(i => i.id === this.props.combatant.id)) {\r\n                notes.push(\r\n                    <div key='not-on-map' className='note'>not on the map</div>\r\n                );\r\n            }\r\n        }\r\n\r\n        let content = null;\r\n\r\n        switch (this.props.combatant.type) {\r\n            case 'pc':\r\n                content = this.getContentPC(this.props.combatant as Combatant & PC, notes);\r\n                break;\r\n            case 'monster':\r\n                content = this.getContentMonster(this.props.combatant as Combatant & Monster, notes);\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        let style = 'combatant-row ' + this.props.combatant.type;\r\n        if (this.props.combatant.current || this.props.selected) {\r\n            style += ' highlight';\r\n        }\r\n\r\n        return (\r\n            <div className={style} onClick={e => this.onClick(e)}>\r\n                <div className='name'>\r\n                    {this.props.combatant.displayName || this.props.combatant.name || 'combatant'}\r\n                    <span className='info'>{this.getInformationText()}</span>\r\n                </div>\r\n                {content}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Encounter, EncounterSlot } from '../../models/encounter';\r\nimport { Monster } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\ninterface Props {\r\n    encounter: Encounter;\r\n    party: Party | null;\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n}\r\n\r\nexport default class DifficultyChartPanel extends React.Component<Props> {\r\n    public render() {\r\n        let monsterCount = 0;\r\n        let monsterXp = 0;\r\n        let slots: EncounterSlot[] = [];\r\n        slots = slots.concat(this.props.encounter.slots);\r\n        this.props.encounter.waves.forEach(wave => {\r\n            slots = slots.concat(wave.slots);\r\n        });\r\n        slots.forEach(slot => {\r\n            monsterCount += slot.count;\r\n            const monster = this.props.getMonster(slot.monsterName, slot.monsterGroupName);\r\n            if (monster) {\r\n                monsterXp += Utils.experience(monster.challenge) * slot.count;\r\n            }\r\n        });\r\n\r\n        const adjustedXp = monsterXp * Utils.experienceFactor(monsterCount);\r\n\r\n        let xpThresholds;\r\n        let diffSection;\r\n        if (this.props.party) {\r\n            let xpEasy = 0;\r\n            let xpMedium = 0;\r\n            let xpHard = 0;\r\n            let xpDeadly = 0;\r\n\r\n            const pcs = this.props.party.pcs.filter(pc => pc.active);\r\n            pcs.forEach(pc => {\r\n                xpEasy += Utils.pcExperience(pc.level, 'easy');\r\n                xpMedium += Utils.pcExperience(pc.level, 'medium');\r\n                xpHard += Utils.pcExperience(pc.level, 'hard');\r\n                xpDeadly += Utils.pcExperience(pc.level, 'deadly');\r\n            });\r\n\r\n            let difficulty = null;\r\n            let adjustedDifficulty = null;\r\n            if (adjustedXp > 0) {\r\n                difficulty = 'trivial';\r\n                if (adjustedXp >= xpEasy) {\r\n                    difficulty = 'easy';\r\n                }\r\n                if (adjustedXp >= xpMedium) {\r\n                    difficulty = 'medium';\r\n                }\r\n                if (adjustedXp >= xpHard) {\r\n                    difficulty = 'hard';\r\n                }\r\n                if (adjustedXp >= xpDeadly) {\r\n                    difficulty = 'deadly';\r\n                }\r\n                adjustedDifficulty = difficulty;\r\n\r\n                if ((pcs.length < 3) || (pcs.length > 5)) {\r\n                    const small = pcs.length < 3;\r\n                    switch (difficulty) {\r\n                        case 'trivial':\r\n                            adjustedDifficulty = small ? 'easy' : 'trivial';\r\n                            break;\r\n                        case 'easy':\r\n                            adjustedDifficulty = small ? 'medium' : 'trivial';\r\n                            break;\r\n                        case 'medium':\r\n                            adjustedDifficulty = small ? 'hard' : 'easy';\r\n                            break;\r\n                        case 'hard':\r\n                            adjustedDifficulty = small ? 'deadly' : 'medium';\r\n                            break;\r\n                        case 'deadly':\r\n                            adjustedDifficulty = small ? 'deadly' : 'hard';\r\n                            break;\r\n                        default:\r\n                            adjustedDifficulty = '';\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            xpThresholds = (\r\n                <div className='table'>\r\n                    <div>\r\n                        <div className='cell four'><b>easy</b></div>\r\n                        <div className='cell four'><b>medium</b></div>\r\n                        <div className='cell four'><b>hard</b></div>\r\n                        <div className='cell four'><b>deadly</b></div>\r\n                    </div>\r\n                    <div>\r\n                        <div className='cell four'>{xpEasy} xp</div>\r\n                        <div className='cell four'>{xpMedium} xp</div>\r\n                        <div className='cell four'>{xpHard} xp</div>\r\n                        <div className='cell four'>{xpDeadly} xp</div>\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            const getLeft = (xp: number) => {\r\n                const max = Math.max(adjustedXp, (xpDeadly * 1.2));\r\n                return (100 * xp) / max;\r\n            };\r\n\r\n            const getRight = (xp: number) => {\r\n                return 100 - getLeft(xp);\r\n            };\r\n\r\n            diffSection = (\r\n                <div>\r\n                    <div className='difficulty-gauge'>\r\n                        <div className='bar-container'>\r\n                            <div className='bar trivial' style={{ left: '0', right: getRight(xpEasy) + '%' }} />\r\n                        </div>\r\n                        <div className='bar-container'>\r\n                            <div className='bar easy' style={{ left: getLeft(xpEasy) + '%', right: getRight(xpMedium) + '%' }} />\r\n                        </div>\r\n                        <div className='bar-container'>\r\n                            <div className='bar medium' style={{ left: getLeft(xpMedium) + '%', right: getRight(xpHard) + '%' }} />\r\n                        </div>\r\n                        <div className='bar-container'>\r\n                            <div className='bar hard' style={{ left: getLeft(xpHard) + '%', right: getRight(xpDeadly) + '%' }} />\r\n                        </div>\r\n                        <div className='bar-container'>\r\n                            <div className='bar deadly' style={{ left: getLeft(xpDeadly) + '%', right: '0' }} />\r\n                        </div>\r\n                        <div className='encounter-container'>\r\n                            <div className='encounter' style={{ left: (getLeft(adjustedXp) - 0.5) + '%' }} />\r\n                        </div>\r\n                    </div>\r\n                    <div className='subheading'>difficulty</div>\r\n                    <div className='section'>\r\n                        difficulty for this party\r\n                        <div className='right'>{difficulty}</div>\r\n                    </div>\r\n                    <div className='section' style={{ display: (adjustedDifficulty === difficulty) ? 'none' : ''}}>\r\n                        effective difficulty for {pcs.length} pc(s)\r\n                        <div className='right'><b>{adjustedDifficulty}</b></div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='subheading'>xp value</div>\r\n                <div className='section'>\r\n                    xp for this encounter\r\n                    <div className='right'>{monsterXp} xp</div>\r\n                </div>\r\n                <div className='section' style={{ display: (adjustedXp === monsterXp) ? 'none' : ''}}>\r\n                    effective xp for {monsterCount} monster(s)\r\n                    <div className='right'>{adjustedXp} xp</div>\r\n                </div>\r\n                {xpThresholds}\r\n                {diffSection}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Encounter } from '../../models/encounter';\r\nimport { Monster } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport Dropdown from '../controls/dropdown';\r\nimport DifficultyChartPanel from '../panels/difficulty-chart-panel';\r\nimport InfoCard from './info-card';\r\n\r\nimport arrow from '../../resources/images/down-arrow.svg';\r\n\r\ninterface Props {\r\n    selection: Encounter;\r\n    parties: Party[];\r\n    changeValue: (field: string, value: string) => void;\r\n    addWave: () => void;\r\n    removeEncounter: () => void;\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n}\r\n\r\ninterface State {\r\n    showDetails: boolean;\r\n    party: Party | null;\r\n}\r\n\r\nexport default class EncounterCard extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showDetails: false,\r\n            party: null\r\n        };\r\n    }\r\n\r\n    private toggleDetails() {\r\n        this.setState({\r\n            showDetails: !this.state.showDetails\r\n        });\r\n    }\r\n\r\n    private selectParty(partyID: string) {\r\n        const party = this.props.parties.find(p => p.id === partyID);\r\n        this.setState({\r\n            party: party as Party\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const partyOptions = [];\r\n            if (this.props.parties) {\r\n                for (let n = 0; n !== this.props.parties.length; ++n) {\r\n                    const party = this.props.parties[n];\r\n                    partyOptions.push({\r\n                        id: party.id,\r\n                        text: party.name\r\n                    });\r\n                }\r\n            }\r\n\r\n            const difficultySection = (\r\n                <div>\r\n                    <Dropdown\r\n                        options={partyOptions}\r\n                        placeholder='select party...'\r\n                        selectedID={this.state.party ? this.state.party.id : undefined}\r\n                        select={optionID => this.selectParty(optionID)}\r\n                    />\r\n                    <DifficultyChartPanel\r\n                        encounter={this.props.selection}\r\n                        party={this.state.party}\r\n                        getMonster={(monsterName, monsterGroupName) => this.props.getMonster(monsterName, monsterGroupName)}\r\n                    />\r\n                </div>\r\n            );\r\n\r\n            const imageStyle = this.state.showDetails ? 'image rotate' : 'image';\r\n\r\n            const heading = (\r\n                <div className='heading'>\r\n                    <div className='title'>encounter</div>\r\n                    <img className={imageStyle} src={arrow} alt='arrow' onClick={() => this.toggleDetails()} />\r\n                </div>\r\n            );\r\n\r\n            const content = (\r\n                <div>\r\n                    <div className='section'>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='encounter name'\r\n                            value={this.props.selection.name}\r\n                            onChange={event => this.props.changeValue('name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div style={{ display: this.state.showDetails ? '' : 'none' }}>\r\n                        <div className='divider' />\r\n                        {difficultySection}\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <button onClick={() => this.props.addWave()}>add a new wave</button>\r\n                        <ConfirmButton text='delete encounter' callback={() => this.props.removeEncounter()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            return (\r\n                <InfoCard getHeading={() => heading} getContent={() => content} />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    title: string;\r\n    getContent: () => (string | JSX.Element);\r\n}\r\n\r\nexport default class ErrorCard extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        title: null\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            let heading = null;\r\n            if (this.props.title) {\r\n                heading = <div className='heading'><div className='title'>{this.props.title}</div></div>;\r\n            }\r\n\r\n            const content = this.props.getContent();\r\n\r\n            return (\r\n                <div className='card error'>\r\n                    {heading}\r\n                    <div className='card-content'>\r\n                        {content}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n","export interface MonsterGroup {\r\n    id: string;\r\n    name: string;\r\n    monsters: Monster[];\r\n}\r\n\r\nexport interface Monster {\r\n    id: string;\r\n    type: string;\r\n    name: string;\r\n    size: string;\r\n    category: string;\r\n    tag: string;\r\n    alignment: string;\r\n    challenge: number;\r\n    abilityScores: {\r\n        str: number;\r\n        dex: number;\r\n        con: number;\r\n        int: number;\r\n        wis: number;\r\n        cha: number;\r\n    };\r\n    ac: number;\r\n    hpMax: number;\r\n    hpTemp: number;\r\n    hitDice: number;\r\n    damage: {\r\n        resist: string;\r\n        vulnerable: string;\r\n        immune: string;\r\n    };\r\n    savingThrows: string;\r\n    speed: string;\r\n    skills: string;\r\n    senses: string;\r\n    languages: string;\r\n    equipment: string;\r\n    traits: Trait[];\r\n    conditionImmunities: string;\r\n}\r\n\r\nexport interface Trait {\r\n    id: string;\r\n    name: string;\r\n    usage: string;\r\n    type: 'trait' | 'action' | 'legendary' | 'lair' | 'regional';\r\n    text: string;\r\n}\r\n\r\nexport const SIZE_TYPES = [\r\n    'tiny',\r\n    'small',\r\n    'medium',\r\n    'large',\r\n    'huge',\r\n    'gargantuan'\r\n];\r\n\r\nexport const CATEGORY_TYPES = [\r\n    'aberration',\r\n    'beast',\r\n    'celestial',\r\n    'construct',\r\n    'dragon',\r\n    'elemental',\r\n    'fey',\r\n    'fiend',\r\n    'giant',\r\n    'humanoid',\r\n    'monstrosity',\r\n    'ooze',\r\n    'plant',\r\n    'undead'\r\n];\r\n\r\nexport const TRAIT_TYPES = [\r\n    'trait',\r\n    'action',\r\n    'legendary',\r\n    'lair',\r\n    'regional'\r\n];\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { CATEGORY_TYPES, SIZE_TYPES } from '../../models/monster-group';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport Spin from '../controls/spin';\r\n\r\nimport arrow from '../../resources/images/down-arrow.svg';\r\n\r\ninterface Props {\r\n    filter: {\r\n        name: string,\r\n        challengeMin: number;\r\n        challengeMax: number;\r\n        category: string;\r\n        size: string;\r\n    };\r\n    changeValue: (type: 'name' | 'challengeMin' | 'challengeMax' | 'category' | 'size', value: any) => void;\r\n    nudgeValue: (type: 'challengeMin' | 'challengeMax', delta: number) => void;\r\n    resetFilter: () => void;\r\n}\r\n\r\ninterface State {\r\n    showAll: boolean;\r\n}\r\n\r\nexport default class FilterCard extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showAll: false\r\n        };\r\n    }\r\n\r\n    private toggleAll() {\r\n        this.setState({\r\n            showAll: !this.state.showAll\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const sizes = ['all sizes'].concat(SIZE_TYPES);\r\n            const sizeOptions = sizes.map(size => ({ id: size, text: size }));\r\n\r\n            const categories = ['all types'].concat(CATEGORY_TYPES);\r\n            const catOptions = categories.map(cat => ({ id: cat, text: cat }));\r\n\r\n            let content = null;\r\n            if (this.state.showAll) {\r\n                content = (\r\n                    <div>\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='name'\r\n                                value={this.props.filter.name}\r\n                                onChange={event => this.props.changeValue('name', event.target.value)}\r\n                            />\r\n                        </div>\r\n                        <Spin\r\n                            source={this.props.filter}\r\n                            name='challengeMin'\r\n                            label='min cr'\r\n                            display={value => Utils.challenge(value)}\r\n                            nudgeValue={delta => this.props.nudgeValue('challengeMin', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.filter}\r\n                            name='challengeMax'\r\n                            label='max cr'\r\n                            display={value => Utils.challenge(value)}\r\n                            nudgeValue={delta => this.props.nudgeValue('challengeMax', delta)}\r\n                        />\r\n                        <Dropdown\r\n                            options={sizeOptions}\r\n                            placeholder='filter by size...'\r\n                            selectedID={this.props.filter.size}\r\n                            select={optionID => this.props.changeValue('size', optionID)}\r\n                        />\r\n                        <Dropdown\r\n                            options={catOptions}\r\n                            placeholder='filter by type...'\r\n                            selectedID={this.props.filter.category}\r\n                            select={optionID => this.props.changeValue('category', optionID)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <div className='section'>\r\n                            <button onClick={() => this.props.resetFilter()}>clear filter</button>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                let summary = '';\r\n                if (this.props.filter.size !== 'all sizes') {\r\n                    summary += summary ? ' ' + this.props.filter.size : this.props.filter.size;\r\n                }\r\n                if (this.props.filter.category !== 'all types') {\r\n                    summary += summary ? ' ' + this.props.filter.category : this.props.filter.category;\r\n                }\r\n                summary += ' monsters of cr ' + Utils.challenge(this.props.filter.challengeMin) + ' to ' + Utils.challenge(this.props.filter.challengeMax);\r\n\r\n                content = (\r\n                    <div>\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='name'\r\n                                value={this.props.filter.name}\r\n                                onChange={event => this.props.changeValue('name', event.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div className='section'>showing {summary}</div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='card'>\r\n                    <div className='heading'>\r\n                        <div className='title'>filter</div>\r\n                        <img className={this.state.showAll ? 'image rotate' : 'image'} src={arrow} alt='arrow' onClick={() => this.toggleAll()} />\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        {content}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Encounter } from '../../../models/encounter';\r\n\r\nimport InfoCard from '../info-card';\r\n\r\ninterface Props {\r\n    encounters: Encounter[];\r\n}\r\n\r\nexport default class EncounterBuilderCard extends React.Component<Props> {\r\n    private getContent() {\r\n        let action: JSX.Element | null = null;\r\n        if (this.props.encounters.length === 0) {\r\n            action = (\r\n                <div className='section'>to start building an encounter, press the button below</div>\r\n            );\r\n        } else {\r\n            action = (\r\n                <div className='section'>select an encounter from the list to add monsters to it</div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='section'>on this page you can set up encounters</div>\r\n                <div className='section'>when you have created an encounter you can add monsters to it, then gauge its difficulty for a party of pcs</div>\r\n                <div className='divider'/>\r\n                {action}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            return (\r\n                <InfoCard getContent={() => this.getContent()} />\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { EncounterWave } from '../../models/encounter';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport InfoCard from './info-card';\r\n\r\ninterface Props {\r\n    wave: EncounterWave;\r\n    changeValue: (wave: EncounterWave, field: string, value: string) => void;\r\n    removeWave: (wave: EncounterWave) => void;\r\n}\r\n\r\nexport default class WaveCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const heading = (\r\n                <div className='heading'>\r\n                    <div className='title'>wave</div>\r\n                </div>\r\n            );\r\n\r\n            const content = (\r\n                <div>\r\n                    <div className='section'>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='wave name'\r\n                            value={this.props.wave.name}\r\n                            onChange={event => this.props.changeValue(this.props.wave, 'name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <ConfirmButton text='delete wave' callback={() => this.props.removeWave(this.props.wave)} />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            return (\r\n                <InfoCard getHeading={() => heading} getContent={() => content} />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Encounter } from '../../models/encounter';\r\n\r\ninterface Props {\r\n    encounter: Encounter;\r\n    selected: boolean;\r\n    setSelection: (encounter: Encounter) => void;\r\n}\r\n\r\nexport default class EncounterListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const slots = [];\r\n\r\n            this.props.encounter.slots.forEach(slot => {\r\n                let text = slot.monsterName || 'unnamed monster';\r\n                if (slot.count > 1) {\r\n                    text += ' x' + slot.count;\r\n                }\r\n                slots.push(<div key={slot.id} className='text'>{text}</div>);\r\n            });\r\n\r\n            if (slots.length === 0) {\r\n                slots.push(<div key='empty' className='text'>no monsters</div>);\r\n            }\r\n\r\n            this.props.encounter.waves.forEach(wave => {\r\n                slots.push(<div key={'name ' + wave.id} className='text subheading'>{wave.name || 'unnamed wave'}</div>);\r\n                wave.slots.forEach(slot => {\r\n                    let text = slot.monsterName || 'unnamed monster';\r\n                    if (slot.count > 1) {\r\n                        text += ' x' + slot.count;\r\n                    }\r\n                    slots.push(<div key={slot.id} className='text'>{text}</div>);\r\n                });\r\n                if (slots.length === 0) {\r\n                    slots.push(<div key={'empty ' + wave.id} className='text'>no monsters</div>);\r\n                }\r\n            });\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.encounter)}>\r\n                    <div className='heading'>{this.props.encounter.name || 'unnamed encounter'}</div>\r\n                    {slots}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Encounter, EncounterSlot, EncounterWave } from '../../models/encounter';\r\nimport { Monster, MonsterGroup } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\nimport EncounterCard from '../cards/encounter-card';\r\nimport ErrorCard from '../cards/error-card';\r\nimport FilterCard from '../cards/filter-card';\r\nimport InfoCard from '../cards/info-card';\r\nimport EncounterBuilderCard from '../cards/information/encounter-builder-card';\r\nimport MonsterCard from '../cards/monster-card';\r\nimport WaveCard from '../cards/wave-card';\r\nimport EncounterListItem from '../list-items/encounter-list-item';\r\nimport CardGroup from '../panels/card-group';\r\n\r\ninterface Props {\r\n    encounters: Encounter[];\r\n    selection: Encounter | null;\r\n    parties: Party[];\r\n    library: MonsterGroup[];\r\n    showHelp: boolean;\r\n    selectEncounter: (encounter: Encounter | null) => void;\r\n    addEncounter: () => void;\r\n    removeEncounter: () => void;\r\n    addEncounterSlot: (monster: Monster, waveID: string | null) => void;\r\n    removeEncounterSlot: (encounterSlot: EncounterSlot, waveID: string | null) => void;\r\n    addWave: () => void;\r\n    removeWave: (wave: EncounterWave) => void;\r\n    changeValue: (source: any, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, value: number) => void;\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n}\r\n\r\ninterface State {\r\n    filter: {\r\n        name: string,\r\n        challengeMin: number;\r\n        challengeMax: number;\r\n        category: string;\r\n        size: string;\r\n    };\r\n}\r\n\r\nexport default class EncounterBuilderScreen extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            filter: {\r\n                name: '',\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: 'all types',\r\n                size: 'all sizes'\r\n            }\r\n        };\r\n    }\r\n\r\n    private inEncounter(monster: Monster) {\r\n        let result = false;\r\n\r\n        if (this.props.selection) {\r\n            const group = Utils.getMonsterGroup(monster, this.props.library);\r\n\r\n            this.props.selection.slots.forEach(slot => {\r\n                if ((slot.monsterGroupName === group.name) && (slot.monsterName === monster.name)) {\r\n                    result = true;\r\n                }\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private matchMonster(monster: Monster) {\r\n        if (monster.challenge < this.state.filter.challengeMin) {\r\n            return false;\r\n        }\r\n\r\n        if (monster.challenge > this.state.filter.challengeMax) {\r\n            return false;\r\n        }\r\n\r\n        if (this.state.filter.name !== '') {\r\n            if (!Utils.match(this.state.filter.name, monster.name)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.filter.category !== 'all types') {\r\n            if (monster.category !== this.state.filter.category) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.filter.size !== 'all sizes') {\r\n            if (monster.size !== this.state.filter.size) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private changeFilterValue(type: 'name' | 'challengeMin' | 'challengeMax' | 'category' | 'size', value: any) {\r\n        // eslint-disable-next-line\r\n        this.state.filter[type] = value;\r\n        this.setState({\r\n            filter: this.state.filter\r\n        });\r\n    }\r\n\r\n    private nudgeFilterValue(type: 'challengeMin' | 'challengeMax', delta: number) {\r\n        const value = Utils.nudgeChallenge(this.state.filter[type], delta);\r\n        this.changeFilterValue(type, value);\r\n    }\r\n\r\n    private resetFilter() {\r\n        this.setState({\r\n            filter: {\r\n                name: '',\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: 'all types',\r\n                size: 'all sizes'\r\n            }\r\n        });\r\n    }\r\n\r\n    private getMonsterCards(slots: EncounterSlot[], waveID: string | null) {\r\n        const cards = [];\r\n\r\n        slots.forEach(slot => {\r\n            const monster = this.props.getMonster(slot.monsterName, slot.monsterGroupName);\r\n            if (monster) {\r\n                cards.push(\r\n                    <div className='column' key={monster.id}>\r\n                        <MonsterCard\r\n                            combatant={monster}\r\n                            slot={slot}\r\n                            encounter={this.props.selection as Encounter}\r\n                            mode={'view encounter'}\r\n                            nudgeValue={(source, type, delta) => this.props.nudgeValue(source, type, delta)}\r\n                            removeEncounterSlot={source => this.props.removeEncounterSlot(source, waveID)}\r\n                        />\r\n                    </div>\r\n                );\r\n            } else {\r\n                const index = slots.indexOf(slot);\r\n                const error = 'unknown monster: ' + slot.monsterName + ' in group ' + slot.monsterGroupName;\r\n                cards.push(\r\n                    <div className='column' key={index}>\r\n                        <ErrorCard\r\n                            getContent={() => <div className='section'>{error}</div>}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n        });\r\n\r\n        if (slots.length === 0) {\r\n            cards.push(\r\n                <div className='column' key='empty'>\r\n                    <InfoCard getContent={() => <div className='section'>no monsters</div>} />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return cards;\r\n    }\r\n\r\n    private getLibrarySection() {\r\n        if (!this.props.selection) {\r\n            return null;\r\n        }\r\n\r\n        const libraryCards = [];\r\n        libraryCards.push(\r\n            <div className='column' key='filter'>\r\n                <FilterCard\r\n                    filter={this.state.filter}\r\n                    changeValue={(type, value) => this.changeFilterValue(type, value)}\r\n                    nudgeValue={(type, delta) => this.nudgeFilterValue(type, delta)}\r\n                    resetFilter={() => this.resetFilter()}\r\n                />\r\n            </div>\r\n        );\r\n\r\n        const monsters: Monster[] = [];\r\n        if (this.props.selection) {\r\n            this.props.library.forEach(group => {\r\n                group.monsters.forEach(monster => {\r\n                    if (this.matchMonster(monster)) {\r\n                        monsters.push(monster);\r\n                    }\r\n                });\r\n            });\r\n            monsters.sort((a, b) => {\r\n                if (a.name < b.name) { return -1; }\r\n                if (a.name > b.name) { return 1; }\r\n                return 0;\r\n            });\r\n        }\r\n        monsters.forEach(monster => {\r\n            libraryCards.push(\r\n                <div className='column' key={monster.id}>\r\n                    <MonsterCard\r\n                        key={monster.id}\r\n                        combatant={monster}\r\n                        encounter={this.props.selection as Encounter}\r\n                        library={this.props.library}\r\n                        mode={'view encounter'}\r\n                        addEncounterSlot={(combatant, waveID) => this.props.addEncounterSlot(combatant, waveID)}\r\n                    />\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <CardGroup\r\n                heading='monster library'\r\n                content={libraryCards}\r\n                showToggle={true}\r\n            />\r\n        );\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let help = null;\r\n            if (this.props.showHelp) {\r\n                help = (\r\n                    <EncounterBuilderCard encounters={this.props.encounters} />\r\n                );\r\n            }\r\n\r\n            const encounters = [];\r\n            for (let n = 0; n !== this.props.encounters.length; ++n) {\r\n                const e = this.props.encounters[n];\r\n                encounters.push(\r\n                    <EncounterListItem\r\n                        key={e.id}\r\n                        encounter={e}\r\n                        selected={e === this.props.selection}\r\n                        setSelection={encounter => this.props.selectEncounter(encounter)}\r\n                    />\r\n                );\r\n            }\r\n\r\n            let encounterName;\r\n            const encounterCards = [];\r\n            let waves: JSX.Element[] = [];\r\n\r\n            if (this.props.selection) {\r\n                encounterName = this.props.selection.name || 'unnamed encounter';\r\n\r\n                encounterCards.push(\r\n                    <div className='column' key='info'>\r\n                        <EncounterCard\r\n                            selection={this.props.selection}\r\n                            parties={this.props.parties}\r\n                            changeValue={(type, value) => this.props.changeValue(this.props.selection, type, value)}\r\n                            addWave={() => this.props.addWave()}\r\n                            removeEncounter={() => this.props.removeEncounter()}\r\n                            getMonster={(monsterName, monsterGroupName) => this.props.getMonster(monsterName, monsterGroupName)}\r\n                        />\r\n                    </div>\r\n                );\r\n\r\n                this.getMonsterCards(this.props.selection.slots, null)\r\n                    .forEach(card => encounterCards.push(card));\r\n\r\n                waves = this.props.selection.waves.map(w => {\r\n                    const waveCards = [];\r\n                    waveCards.push(\r\n                        <div className='column' key='info'>\r\n                            <WaveCard\r\n                                wave={w}\r\n                                removeWave={wave => this.props.removeWave(wave)}\r\n                                changeValue={(source, field, value) => this.props.changeValue(source, field, value)}\r\n                            />\r\n                        </div>\r\n                    );\r\n\r\n                    this.getMonsterCards(w.slots, w.id)\r\n                        .forEach(card => waveCards.push(card));\r\n\r\n                    return (\r\n                        <CardGroup\r\n                            key={w.id}\r\n                            heading={w.name || 'unnamed wave'}\r\n                            content={waveCards}\r\n                            showToggle={true}\r\n                        />\r\n                    );\r\n                });\r\n            }\r\n\r\n            return (\r\n                <div className='encounter-builder row collapse'>\r\n                    <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                        {help}\r\n                        <button onClick={() => this.props.addEncounter()}>add a new encounter</button>\r\n                        {encounters}\r\n                    </div>\r\n                    <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                        <CardGroup\r\n                            content={encounterCards}\r\n                            heading={encounterName}\r\n                            showClose={this.props.selection !== null}\r\n                            close={() => this.props.selectEncounter(null)}\r\n                        />\r\n                        {waves}\r\n                        {this.getLibrarySection()}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { MonsterGroup } from '../../models/monster-group';\r\n\r\ninterface Props {\r\n    library: MonsterGroup[];\r\n    addOpenGameContent: () => void;\r\n}\r\n\r\nexport default class HomeScreen extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            let monsters = null;\r\n            if (this.props.library.length === 0) {\r\n                monsters = (\r\n                    <div>\r\n                        <div className='divider' />\r\n                        <div className='text'>\r\n                            <div>\r\n                                since your collection of monsters is empty, you might want to start by pressing the button below to add monsters from the\r\n                                <a href='http://dnd.wizards.com/articles/features/systems-reference-document-srd' target='_blank' rel='noopener noreferrer'>\r\n                                    system reference document\r\n                                </a>\r\n                            </div>\r\n                        </div>\r\n                        <div className='text'>\r\n                            <button onClick={() => this.props.addOpenGameContent()}>add monsters</button>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='home scrollable'>\r\n                <div className='vertical-center-outer'>\r\n                    <div className='vertical-center-middle'>\r\n                        <div className='vertical-center-inner'>\r\n                            <div className='welcome-panel'>\r\n                                <div className='heading'>welcome to <b>dojo</b></div>\r\n                                <div className='text'>\r\n                                    <div><b>dojo</b> is an app for dms of dungeons and dragons fifth edition</div>\r\n                                </div>\r\n                                <div className='text'>\r\n                                    <div>\r\n                                        with <b>dojo</b> you can:\r\n                                        <ul>\r\n                                            <li>build unique, challenging monsters</li>\r\n                                            <li>create encounters of just the right difficulty for your players</li>\r\n                                            <li>design intricate tactical maps</li>\r\n                                            <li>run combat without the book-keeping</li>\r\n                                        </ul>\r\n                                    </div>\r\n                                </div>\r\n                                {monsters}\r\n                                <div className='divider' />\r\n                                <div className='text'>\r\n                                    <div>use the buttons at the bottom of the screen to access the app's features</div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { MapFolio } from '../../../models/map-folio';\r\n\r\nimport InfoCard from '../info-card';\r\n\r\ninterface Props {\r\n    mapFolios: MapFolio[];\r\n}\r\n\r\nexport default class MapFoliosCard extends React.Component<Props> {\r\n    private getContent() {\r\n        let action: JSX.Element | null = null;\r\n        if (this.props.mapFolios.length === 0) {\r\n            action = (\r\n                <div className='section'>to start a new folio, press the button below</div>\r\n            );\r\n        } else {\r\n            action = (\r\n                <div className='section'>select a map folio from the list to see the maps it contains</div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='section'>on this page you can set up folios containing tactical maps</div>\r\n                <div className='section'>when you have created a map you can use it in encounters</div>\r\n                <div className='divider'/>\r\n                {action}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            return (\r\n                <InfoCard getContent={() => this.getContent()} />\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Map } from '../../models/map-folio';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    map: Map;\r\n    changeValue: (map: Map, field: string, value: string) => void;\r\n    editMap: (map: Map) => void;\r\n    removeMap: (map: Map) => void;\r\n}\r\n\r\nexport default class MapCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div className='card map'>\r\n                    <div className='heading'>\r\n                        <div className='title'>{this.props.map.name || 'unnamed map'}</div>\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='map name'\r\n                                value={this.props.map.name}\r\n                                onChange={event => this.props.changeValue(this.props.map, 'name', event.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='section centered'>\r\n                            <MapPanel\r\n                                map={this.props.map}\r\n                                mode='thumbnail'\r\n                            />\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='section'>\r\n                            <button onClick={() => this.props.editMap(this.props.map)}>edit map</button>\r\n                            <ConfirmButton text='delete map' callback={() => this.props.removeMap(this.props.map)} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { MapFolio } from '../../models/map-folio';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport InfoCard from './info-card';\r\n\r\ninterface Props {\r\n    selection: MapFolio;\r\n    changeValue: (source: MapFolio, field: string, value: string) => void;\r\n    addMap: () => void;\r\n    removeMapFolio: () => void;\r\n}\r\n\r\nexport default class MapFolioCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const heading = (\r\n                <div className='heading'>\r\n                    <div className='title'>map folio</div>\r\n                </div>\r\n            );\r\n\r\n            const content = (\r\n                <div>\r\n                    <div className='section'>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='folio name'\r\n                            value={this.props.selection.name}\r\n                            onChange={event => this.props.changeValue(this.props.selection, 'name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <button onClick={() => this.props.addMap()}>add a new map</button>\r\n                        <ConfirmButton text='delete folio' callback={() => this.props.removeMapFolio()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            return (\r\n                <InfoCard getHeading={() => heading} getContent={() => content} />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { MapFolio } from '../../models/map-folio';\r\n\r\ninterface Props {\r\n    mapFolio: MapFolio;\r\n    selected: boolean;\r\n    setSelection: (mapFolio: MapFolio) => void;\r\n}\r\n\r\nexport default class MapFolioListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const maps = [];\r\n            for (let n = 0; n !== this.props.mapFolio.maps.length; ++n) {\r\n                const map = this.props.mapFolio.maps[n];\r\n                const name = map.name || 'unnamed map';\r\n                maps.push(<div key={map.id} className='text'>{name}</div>);\r\n            }\r\n            if (maps.length === 0) {\r\n                maps.push(<div key='empty' className='text'>no maps</div>);\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.mapFolio)}>\r\n                    <div className='heading'>{this.props.mapFolio.name || 'unnamed folio'}</div>\r\n                    {maps}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Map, MapFolio } from '../../models/map-folio';\r\n\r\nimport InfoCard from '../cards/info-card';\r\nimport MapFoliosCard from '../cards/information/map-folios-card';\r\nimport MapCard from '../cards/map-card';\r\nimport MapFolioCard from '../cards/map-folio-card';\r\nimport MapFolioListItem from '../list-items/map-folio-list-item';\r\nimport CardGroup from '../panels/card-group';\r\n\r\ninterface Props {\r\n    mapFolios: MapFolio[];\r\n    selection: MapFolio | null;\r\n    showHelp: boolean;\r\n    selectMapFolio: (mapFolio: MapFolio | null) => void;\r\n    addMapFolio: () => void;\r\n    removeMapFolio: () => void;\r\n    addMap: () => void;\r\n    editMap: (map: Map) => void;\r\n    removeMap: (map: Map) => void;\r\n    changeValue: (source: {}, field: string, value: any) => void;\r\n}\r\n\r\nexport default class MapFoliosScreen extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            let help = null;\r\n            if (this.props.showHelp) {\r\n                help = (\r\n                    <MapFoliosCard mapFolios={this.props.mapFolios} />\r\n                );\r\n            }\r\n\r\n            const folios = [];\r\n            for (let n = 0; n !== this.props.mapFolios.length; ++n) {\r\n                const mapFolio = this.props.mapFolios[n];\r\n                folios.push(\r\n                    <MapFolioListItem\r\n                        key={mapFolio.id}\r\n                        mapFolio={mapFolio}\r\n                        selected={mapFolio === this.props.selection}\r\n                        setSelection={f => this.props.selectMapFolio(f)}\r\n                    />\r\n                );\r\n            }\r\n\r\n            let folio = null;\r\n            if (this.props.selection) {\r\n                const folioCards = [];\r\n\r\n                folioCards.push(\r\n                    <div className='column' key='info'>\r\n                        <MapFolioCard\r\n                            selection={this.props.selection}\r\n                            addMap={() => this.props.addMap()}\r\n                            removeMapFolio={() => this.props.removeMapFolio()}\r\n                            changeValue={(source, field, value) => this.props.changeValue(source, field, value)}\r\n                        />\r\n                    </div>\r\n                );\r\n\r\n                this.props.selection.maps.forEach(m => {\r\n                    folioCards.push(\r\n                        <div className='column' key={m.id}>\r\n                            <MapCard\r\n                                map={m}\r\n                                editMap={map => this.props.editMap(map)}\r\n                                removeMap={map => this.props.removeMap(map)}\r\n                                changeValue={(source, type, value) => this.props.changeValue(source, type, value)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                if (this.props.selection.maps.length === 0) {\r\n                    folioCards.push(\r\n                        <div className='column' key='empty'>\r\n                            <InfoCard getContent={() => <div className='section'>no maps</div>} />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                folio = (\r\n                    <div>\r\n                        <CardGroup\r\n                            content={folioCards}\r\n                            heading={this.props.selection.name || 'unnamed folio'}\r\n                            showClose={this.props.selection !== null}\r\n                            close={() => this.props.selectMapFolio(null)}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='map-builder row collapse'>\r\n                    <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                        {help}\r\n                        <button onClick={() => this.props.addMapFolio()}>add a new map folio</button>\r\n                        {folios}\r\n                    </div>\r\n                    <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                        {folio}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport InfoCard from '../info-card';\r\n\r\nexport default class MonsterLibraryCard extends React.Component {\r\n    private getContent() {\r\n        return (\r\n            <div>\r\n                <div className='section'>you can maintain your menagerie of monsters here</div>\r\n                <div className='divider'/>\r\n                <div className='section'>select a monster group from the list to see stat blocks for monsters in that group</div>\r\n                <div className='section'>to quickly find a monster, type its name into the filter box</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <InfoCard getContent={() => this.getContent()} />\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { MonsterGroup } from '../../models/monster-group';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport InfoCard from './info-card';\r\n\r\ninterface Props {\r\n    selection: MonsterGroup;\r\n    filter: string | null;\r\n    changeValue: (field: string, value: string) => void;\r\n    addMonster: () => void;\r\n    sortMonsters: () => void;\r\n    removeMonsterGroup: () => void;\r\n}\r\n\r\nexport default class MonsterGroupCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const heading = (\r\n                <div className='heading'>\r\n                    <div className='title'>monster group</div>\r\n                </div>\r\n            );\r\n\r\n            const content = (\r\n                <div>\r\n                    <div className='section'>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='group name'\r\n                            value={this.props.selection.name}\r\n                            disabled={!!this.props.filter}\r\n                            onChange={event => this.props.changeValue('name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.addMonster()}>add a new monster</button>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.sortMonsters()}>sort monsters</button>\r\n                        <ConfirmButton text='delete group' callback={() => this.props.removeMonsterGroup()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            return (\r\n                <InfoCard getHeading={() => heading} getContent={() => content} />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { MonsterGroup } from '../../models/monster-group';\r\n\r\ninterface Props {\r\n    group: MonsterGroup;\r\n    selected: boolean;\r\n    filter: string;\r\n    setSelection: (group: MonsterGroup) => void;\r\n}\r\n\r\nexport default class MonsterGroupListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const matchGroup = Utils.match(this.props.filter, this.props.group.name);\r\n\r\n            const monsters = [];\r\n            for (let n = 0; n !== this.props.group.monsters.length; ++n) {\r\n                const monster = this.props.group.monsters[n];\r\n                const matchMonster = Utils.match(this.props.filter, monster.name);\r\n                if (matchGroup || matchMonster) {\r\n                    let name = monster.name;\r\n                    if (!name) {\r\n                        name = 'unnamed monster';\r\n                    }\r\n                    monsters.push(<div key={monster.id} className='text'>{name}</div>);\r\n                }\r\n            }\r\n            if (monsters.length === 0) {\r\n                monsters.push(<div key='empty' className='text'>no monsters</div>);\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.group)}>\r\n                    <div className='heading'>{this.props.group.name || 'unnamed group'}</div>\r\n                    {monsters}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Monster, MonsterGroup } from '../../models/monster-group';\r\n\r\nimport InfoCard from '../cards/info-card';\r\nimport MonsterLibraryCard from '../cards/information/monster-library-card';\r\nimport MonsterCard from '../cards/monster-card';\r\nimport MonsterGroupCard from '../cards/monster-group-card';\r\nimport MonsterGroupListItem from '../list-items/monster-group-list-item';\r\nimport CardGroup from '../panels/card-group';\r\n\r\ninterface Props {\r\n    library: MonsterGroup[];\r\n    selection: MonsterGroup | null;\r\n    showHelp: boolean;\r\n    filter: string;\r\n    selectMonsterGroup: (group: MonsterGroup | null) => void;\r\n    addMonsterGroup: () => void;\r\n    removeMonsterGroup: () => void;\r\n    addMonster: () => void;\r\n    removeMonster: (monster: Monster) => void;\r\n    editMonster: (monster: Monster) => void;\r\n    cloneMonster: (monster: Monster, name: string) => void;\r\n    sortMonsters: () => void;\r\n    moveToGroup: (monster: Monster, groupID: string) => void;\r\n    changeValue: (source: any, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, value: number) => void;\r\n}\r\n\r\nexport default class MonsterLibraryScreen extends React.Component<Props> {\r\n    private showMonsterGroup(group: MonsterGroup) {\r\n        let result = Utils.match(this.props.filter, group.name);\r\n\r\n        if (!result) {\r\n            group.monsters.forEach(monster => {\r\n                result = Utils.match(this.props.filter, monster.name) || result;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let help = null;\r\n            if (this.props.showHelp) {\r\n                help = (\r\n                    <MonsterLibraryCard />\r\n                );\r\n            }\r\n\r\n            const listItems = [];\r\n            for (let n = 0; n !== this.props.library.length; ++n) {\r\n                const group = this.props.library[n];\r\n                if (this.showMonsterGroup(group)) {\r\n                    listItems.push(\r\n                        <MonsterGroupListItem\r\n                            key={group.id}\r\n                            group={group}\r\n                            filter={this.props.filter}\r\n                            selected={group === this.props.selection}\r\n                            setSelection={grp => this.props.selectMonsterGroup(grp)}\r\n                        />\r\n                    );\r\n                }\r\n            }\r\n\r\n            const cards = [];\r\n\r\n            if (this.props.selection) {\r\n                cards.push(\r\n                    <div className='column' key='info'>\r\n                        <MonsterGroupCard\r\n                            selection={this.props.selection}\r\n                            filter={this.props.filter}\r\n                            addMonster={() => this.props.addMonster()}\r\n                            sortMonsters={() => this.props.sortMonsters()}\r\n                            changeValue={(type, value) => this.props.changeValue(this.props.selection, type, value)}\r\n                            removeMonsterGroup={() => this.props.removeMonsterGroup()}\r\n                        />\r\n                    </div>\r\n                );\r\n\r\n                const monsters = this.props.selection.monsters.filter(monster => {\r\n                    return Utils.match(this.props.filter, monster.name);\r\n                });\r\n\r\n                if (monsters.length !== 0) {\r\n                    monsters.forEach(m => {\r\n                        cards.push(\r\n                            <div className='column' key={m.id}>\r\n                                <MonsterCard\r\n                                    combatant={m}\r\n                                    mode={'view editable'}\r\n                                    library={this.props.library}\r\n                                    changeValue={(source, type, value) => this.props.changeValue(source, type, value)}\r\n                                    nudgeValue={(source, type, delta) => this.props.nudgeValue(source, type, delta)}\r\n                                    moveToGroup={(monster, groupID) => this.props.moveToGroup(monster, groupID)}\r\n                                    removeMonster={monster => this.props.removeMonster(monster)}\r\n                                    editMonster={monster => this.props.editMonster(monster)}\r\n                                    cloneMonster={(monster, monsterName) => this.props.cloneMonster(monster, monsterName)}\r\n                                />\r\n                            </div>\r\n                        );\r\n                    });\r\n                } else {\r\n                    cards.push(\r\n                        <div className='column' key='empty'>\r\n                            <InfoCard getContent={() => <div className='section'>no monsters</div>} />\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n\r\n            let name;\r\n            if (this.props.selection) {\r\n                name = this.props.selection.name;\r\n                if (!name) {\r\n                    name = 'unnamed group';\r\n                }\r\n            }\r\n\r\n            return (\r\n                <div className='monster-library row collapse'>\r\n                    <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                        {help}\r\n                        <button onClick={() => this.props.addMonsterGroup()}>add a new monster group</button>\r\n                        {listItems}\r\n                    </div>\r\n                    <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                        <CardGroup\r\n                            content={cards}\r\n                            heading={name}\r\n                            showClose={this.props.selection !== null}\r\n                            close={() => this.props.selectMonsterGroup(null)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Party } from '../../../models/party';\r\n\r\nimport InfoCard from '../info-card';\r\n\r\ninterface Props {\r\n    parties: Party[];\r\n}\r\n\r\nexport default class PartiesCard extends React.Component<Props> {\r\n    private getContent() {\r\n        let action: JSX.Element | null = null;\r\n        if (this.props.parties.length === 0) {\r\n            action = (\r\n                <div className='section'>to start adding a party, press the button below</div>\r\n            );\r\n        } else {\r\n            action = (\r\n                <div className='section'>select a party from the list to see pc details</div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='section'>this page is where you can tell dojo all about your pcs</div>\r\n                <div className='section'>you can add a party for each of your gaming groups</div>\r\n                <div className='divider'/>\r\n                {action}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            return (\r\n                <InfoCard getContent={() => this.getContent()} />\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Party } from '../../models/party';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport InfoCard from './info-card';\r\n\r\ninterface Props {\r\n    selection: Party;\r\n    changeValue: (field: string, value: string) => void;\r\n    addPC: () => void;\r\n    sortPCs: () => void;\r\n    removeParty: () => void;\r\n}\r\n\r\nexport default class PartyCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const activePCs = this.props.selection.pcs.filter(pc => pc.active);\r\n\r\n            const languages = activePCs\r\n                .map(pc => pc.languages)\r\n                .join(', ')\r\n                .split(/[ ,;]+/)\r\n                .reduce((array: string[], value) => {\r\n                    if (array.indexOf(value) === -1) {\r\n                        array.push(value);\r\n                    }\r\n                    return array;\r\n                }, [])\r\n                .sort((a, b) => {\r\n                    if (a === 'Common') {\r\n                        return -1;\r\n                    }\r\n                    if (b === 'Common') {\r\n                        return 1;\r\n                    }\r\n                    return a.localeCompare(b);\r\n                })\r\n                .join(', ');\r\n\r\n            let insightSummary = '-';\r\n            let investigationSummary = '-';\r\n            let perceptionSummary = '-';\r\n\r\n            if (activePCs.length !== 0) {\r\n                const insight: { min: number | null, max: number | null } = { min: null, max: null };\r\n                const invest: { min: number | null, max: number | null } = { min: null, max: null };\r\n                const percep: { min: number | null, max: number | null } = { min: null, max: null };\r\n\r\n                activePCs.forEach(pc => {\r\n                    insight.min = insight.min === null ? pc.passiveInsight : Math.min(insight.min, pc.passiveInsight);\r\n                    insight.max = insight.max === null ? pc.passiveInsight : Math.max(insight.max, pc.passiveInsight);\r\n                    invest.min = invest.min === null ? pc.passiveInvestigation : Math.min(invest.min, pc.passiveInvestigation);\r\n                    invest.max = invest.max === null ? pc.passiveInvestigation : Math.max(invest.max, pc.passiveInvestigation);\r\n                    percep.min = percep.min === null ? pc.passivePerception : Math.min(percep.min, pc.passivePerception);\r\n                    percep.max = percep.max === null ? pc.passivePerception : Math.max(percep.max, pc.passivePerception);\r\n                });\r\n\r\n                insightSummary = insight.min === insight.max ? (insight.min as number).toString() : insight.min + ' - ' + insight.max;\r\n                investigationSummary = invest.min === invest.max ? (invest.min as number).toString() : invest.min + ' - ' + invest.max;\r\n                perceptionSummary = percep.min === percep.max ? (percep.min as number).toString() : percep.min + ' - ' + percep.max;\r\n            }\r\n\r\n            const heading = (\r\n                <div className='heading'>\r\n                    <div className='title'>party</div>\r\n                </div>\r\n            );\r\n\r\n            const content = (\r\n                <div>\r\n                    <div className='section'>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='party name'\r\n                            value={this.props.selection.name}\r\n                            onChange={event => this.props.changeValue('name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <div className='subheading'>languages</div>\r\n                    </div>\r\n                    <div className='section'>\r\n                        {languages}\r\n                    </div>\r\n                    <div className='section'>\r\n                        <div className='subheading'>passive skills</div>\r\n                    </div>\r\n                    <div className='table'>\r\n                        <div>\r\n                            <div className='cell three'><b>insight</b></div>\r\n                            <div className='cell three'><b>invest.</b></div>\r\n                            <div className='cell three'><b>percep.</b></div>\r\n                        </div>\r\n                        <div>\r\n                            <div className='cell three'>{insightSummary}</div>\r\n                            <div className='cell three'>{investigationSummary}</div>\r\n                            <div className='cell three'>{perceptionSummary}</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                    <button onClick={() => this.props.addPC()}>add a new pc</button>\r\n                        <button onClick={() => this.props.sortPCs()}>sort pcs</button>\r\n                        <ConfirmButton text='delete party' callback={() => this.props.removeParty()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            return (\r\n                <InfoCard getHeading={() => heading} getContent={() => content} />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Party } from '../../models/party';\r\n\r\ninterface Props {\r\n    party: Party;\r\n    selected: boolean;\r\n    setSelection: (party: Party) => void;\r\n}\r\n\r\nexport default class PartyListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const pcs = [];\r\n            for (let n = 0; n !== this.props.party.pcs.length; ++n) {\r\n                const pc = this.props.party.pcs[n];\r\n                let name = pc.name;\r\n                if (pc.player) {\r\n                    name += ' (' + pc.player + ')';\r\n                }\r\n                if (!name) {\r\n                    name = 'unnamed pc';\r\n                }\r\n                pcs.push(<div key={pc.id} className='text'>{name}</div>);\r\n            }\r\n            if (pcs.length === 0) {\r\n                pcs.push(<div key='empty' className='text'>no pcs</div>);\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.party)}>\r\n                    <div className='heading'>{this.props.party.name || 'unnamed party'}</div>\r\n                    {pcs}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Party, PC } from '../../models/party';\r\n\r\nimport InfoCard from '../cards/info-card';\r\nimport PartiesCard from '../cards/information/parties-card';\r\nimport PartyCard from '../cards/party-card';\r\nimport PCCard from '../cards/pc-card';\r\nimport PartyListItem from '../list-items/party-list-item';\r\nimport CardGroup from '../panels/card-group';\r\n\r\ninterface Props {\r\n    parties: Party[];\r\n    selection: Party | null;\r\n    showHelp: boolean;\r\n    selectParty: (party: Party | null) => void;\r\n    addParty: () => void;\r\n    removeParty: () => void;\r\n    addPC: () => void;\r\n    removePC: (pc: PC) => void;\r\n    sortPCs: () => void;\r\n    changeValue: (source: any, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, value: number) => void;\r\n}\r\n\r\nexport default class PartiesScreen extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            let help = null;\r\n            if (this.props.showHelp) {\r\n                help = (\r\n                    <PartiesCard parties={this.props.parties}/>\r\n                );\r\n            }\r\n\r\n            const parties = [];\r\n            for (let n = 0; n !== this.props.parties.length; ++n) {\r\n                const p = this.props.parties[n];\r\n                parties.push(\r\n                    <PartyListItem\r\n                        key={p.id}\r\n                        party={p}\r\n                        selected={p === this.props.selection}\r\n                        setSelection={party => this.props.selectParty(party)}\r\n                    />\r\n                );\r\n            }\r\n\r\n            const activeCards: JSX.Element[] = [];\r\n            const inactiveCards: JSX.Element[] = [];\r\n\r\n            if (this.props.selection) {\r\n                activeCards.push(\r\n                    <div className='column' key='info'>\r\n                        <PartyCard\r\n                            selection={this.props.selection}\r\n                            addPC={() => this.props.addPC()}\r\n                            sortPCs={() => this.props.sortPCs()}\r\n                            changeValue={(type, value) => this.props.changeValue(this.props.selection, type, value)}\r\n                            removeParty={() => this.props.removeParty()}\r\n                        />\r\n                    </div>\r\n                );\r\n\r\n                const activePCs = this.props.selection.pcs.filter(pc => pc.active);\r\n                activePCs.forEach(activePC => {\r\n                    activeCards.push(\r\n                        <div className='column' key={activePC.id}>\r\n                            <PCCard\r\n                                combatant={activePC}\r\n                                mode={'edit'}\r\n                                changeValue={(pc, type, value) => this.props.changeValue(pc, type, value)}\r\n                                nudgeValue={(pc, type, delta) => this.props.nudgeValue(pc, type, delta)}\r\n                                removePC={pc => this.props.removePC(pc)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                const inactivePCs = this.props.selection.pcs.filter(pc => !pc.active);\r\n                inactivePCs.forEach(inactivePC => {\r\n                    inactiveCards.push(\r\n                        <div className='column' key={inactivePC.id}>\r\n                            <PCCard\r\n                                combatant={inactivePC}\r\n                                mode={'edit'}\r\n                                changeValue={(pc, type, value) => this.props.changeValue(pc, type, value)}\r\n                                nudgeValue={(pc, type, delta) => this.props.nudgeValue(pc, type, delta)}\r\n                                removePC={pc => this.props.removePC(pc)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                if (activePCs.length === 0) {\r\n                    activeCards.push(\r\n                        <div className='column' key='empty'>\r\n                            <InfoCard getContent={() => <div className='section'>no pcs</div>} />\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n\r\n            let name;\r\n            if (this.props.selection) {\r\n                name = this.props.selection.name || 'unnamed party';\r\n            }\r\n\r\n            return (\r\n                <div className='parties row collapse'>\r\n                    <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                        {help}\r\n                        <button onClick={() => this.props.addParty()}>add a new party</button>\r\n                        {parties}\r\n                    </div>\r\n                    <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                        <CardGroup\r\n                            content={activeCards}\r\n                            heading={name}\r\n                            showClose={this.props.selection !== null}\r\n                            close={() => this.props.selectParty(null)}\r\n                            hidden={!this.props.selection}\r\n                        />\r\n                        <CardGroup\r\n                            content={inactiveCards}\r\n                            heading='inactive pcs'\r\n                            showClose={false}\r\n                            hidden={inactiveCards.length === 0}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport checked from '../../resources/images/checked.svg';\r\nimport unchecked from '../../resources/images/unchecked.svg';\r\n\r\ninterface Props {\r\n    label: string;\r\n    checked: boolean;\r\n    changeValue: (value: boolean) => void;\r\n    disabled: boolean;\r\n}\r\n\r\nexport default class Checkbox extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        disabled: false\r\n    };\r\n\r\n    private click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        this.props.changeValue(!this.props.checked);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div className={this.props.disabled ? 'checkbox disabled' : 'checkbox'} onClick={e => this.click(e)}>\r\n                    <img className='image' src={this.props.checked ? checked : unchecked} alt='check' />\r\n                    <div className='checkbox-label'>{this.props.label}</div>\r\n                </div>\r\n            );\r\n\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Checkbox from '../controls/checkbox';\r\nimport ConfirmButton from '../controls/confirm-button';\r\n\r\nimport pkg from '../../../package.json';\r\n\r\ninterface Props {\r\n    options: {\r\n        showHelp: boolean;\r\n    };\r\n    resetAll: () => void;\r\n    changeValue: (source: {}, field: string, value: any) => void;\r\n}\r\n\r\nexport default class AboutModal extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            /* tslint:disable:max-line-length */\r\n            return (\r\n                <div className='about'>\r\n                    <div className='row'>\r\n                        <div className='columns small-6 medium-6 large-6 list-column'>\r\n                            <div className='heading'>about</div>\r\n                            <div className='section'>dojo by <a href='mailto:andy.aiken@live.co.uk'>andy aiken</a></div>\r\n                            <div className='section'>version <b>{pkg.version}</b></div>\r\n                            <div className='section'>if you would like to contribut to this project, you can do so <a href='https://github.com/andyaiken/dojo' target='_blank' rel='noopener noreferrer'>here</a></div>\r\n                            <div className='section'>dungeons and dragons copyright wizards of the coast</div>\r\n                        </div>\r\n                        <div className='columns small-6 medium-6 large-6 list-column'>\r\n                            <div className='heading'>options</div>\r\n                            <ConfirmButton text='clear all data' callback={() => this.props.resetAll()} />\r\n                            <Checkbox\r\n                                label='show help cards'\r\n                                checked={this.props.options.showHelp}\r\n                                changeValue={value => this.props.changeValue(this.props.options, 'showHelp', value)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className='row'>\r\n                        <div className='columns small-12 medium-12 large-12 list-column'>\r\n                            <div className='heading'>open game license</div>\r\n                            <div className='section'>The following text is the property of Wizards of the Coast, Inc. and is Copyright 2000 Wizards of the Coast, Inc ('Wizards'). All Rights Reserved.</div>\r\n                            <ol>\r\n                                <li>Definitions: (a)'Contributors' means the copyright and/or trademark owners who have contributed Open Game Content; (b)'Derivative Material' means copyrighted material including derivative works and translations (including into other computer languages), potation, modification, correction, addition, extension, upgrade, improvement, compilation, abridgment or other form in which an existing work may be recast, transformed or adapted; (c) 'Distribute' means to reproduce, license, rent, lease, sell, broadcast, publicly display, transmit or otherwise distribute; (d)'Open Game Content' means the game mechanic and includes the methods, procedures, processes and routines to the extent such content does not embody the Product Identity and is an enhancement over the prior art and any additional content clearly identified as Open Game Content by the Contributor, and means any work covered by this License, including translations and derivative works under copyright law, but specifically excludes Product Identity. (e) 'Product Identity' means product and product line names, logos and identifying marks including trade dress; artifacts; creatures characters; stories, storylines, plots, thematic elements, dialogue, incidents, language, artwork, symbols, designs, depictions, likenesses, formats, poses, concepts, themes and graphic, photographic and other visual or audio representations; names and descriptions of characters, spells, enchantments, personalities, teams, personas, likenesses and special abilities; places, locations, environments, creatures, equipment, magical or supernatural abilities or effects, logos, symbols, or graphic designs; and any other trademark or registered trademark clearly identified as Product identity by the owner of the Product Identity, and which specifically excludes the Open Game Content; (f) 'Trademark' means the logos, names, mark, sign, motto, designs that are used by a Contributor to identify itself or its products or the associated products contributed to the Open Game License by the Contributor (g) 'Use', 'Used' or 'Using' means to use, Distribute, copy, edit, format, modify, translate and otherwise create Derivative Material of Open Game Content. (h) 'You' or 'Your' means the licensee in terms of this agreement.</li>\r\n                                <li>The License: This License applies to any Open Game Content that contains a notice indicating that the Open Game Content may only be Used under and in terms of this License. You must affix such a notice to any Open Game Content that you Use. No terms may be added to or subtracted from this License except as described by the License itself. No other terms or conditions may be applied to any Open Game Content distributed using this License.</li>\r\n                                <li>Offer and Acceptance: By Using the Open Game Content You indicate Your acceptance of the terms of this License.</li>\r\n                                <li>Grant and Consideration: In consideration for agreeing to use this License, the Contributors grant You a perpetual, worldwide, royalty-free, non-exclusive license with the exact terms of this License to Use, the Open Game Content.</li>\r\n                                <li>Representation of Authority to Contribute: If You are contributing original material as Open Game Content, You represent that Your Contributions are Your original creation and/or You have sufficient rights to grant the rights conveyed by this License.</li>\r\n                                <li>Notice of License Copyright: You must update the COPYRIGHT NOTICE portion of this License to include the exact text of the COPYRIGHT NOTICE of any Open Game Content You are copying, modifying or distributing, and You must add the title, the copyright date, and the copyright holder's name to the COPYRIGHT NOTICE of any original Open Game Content you Distribute.</li>\r\n                                <li>Use of Product Identity: You agree not to Use any Product Identity, including as an indication as to compatibility, except as expressly licensed in another, independent Agreement with the owner of each element of that Product Identity. You agree not to indicate compatibility or co-adaptability with any Trademark or Registered Trademark in conjunction with a work containing Open Game Content except as expressly licensed in another, independent Agreement with the owner of such Trademark or Registered Trademark. The use of any Product Identity in Open Game Content does not constitute a challenge to the ownership of that Product Identity. The owner of any Product Identity used in Open Game Content shall retain all rights, title and interest in and to that Product Identity.</li>\r\n                                <li>Identification: If you distribute Open Game Content You must clearly indicate which portions of the work that you are distributing are Open Game Content.</li>\r\n                                <li>Updating the License: Wizards or its designated Agents may publish updated versions of this License. You may use any authorized version of this License to copy, modify and distribute any Open Game Content originally distributed under any version of this License.</li>\r\n                                <li>Copy of this License: You MUST include a copy of this License with every copy of the Open Game Content You Distribute.</li>\r\n                                <li>Use of Contributor Credits: You may not market or advertise the Open Game Content using the name of any Contributor unless You have written permission from the Contributor to do so.</li>\r\n                                <li>Inability to Comply: If it is impossible for You to comply with any of the terms of this License with respect to some or all of the Open Game Content due to statute, judicial order, or governmental regulation then You may not Use any Open Game Material so affected.</li>\r\n                                <li>Termination: This License will terminate automatically if You fail to comply with all terms herein and fail to cure such breach within 30 days of becoming aware of the breach. All sublicenses shall survive the termination of this License.</li>\r\n                                <li>Reformation: If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable.</li>\r\n                                <li>COPYRIGHT NOTICE Open Game License v 1.0 Copyright 2000, Wizards of the Coast, Inc.</li>\r\n                            </ol>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n            /* tslint:enable:max-line-length */\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    options: { id: string; text: string; disabled?: boolean }[];\r\n    selectedID: string | null;\r\n    select: (optionID: string) => void;\r\n    tabs: boolean;\r\n    disabled: boolean;\r\n    itemsPerRow: number;\r\n}\r\n\r\nexport default class Selector extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        tabs: false,\r\n        disabled: false,\r\n        itemsPerRow: null\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            let style = this.props.tabs ? 'selector tabs' : 'selector radio';\r\n            if (this.props.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            const itemsPerRow = this.props.itemsPerRow ? this.props.itemsPerRow : this.props.options.length;\r\n            const rowCount = Math.ceil(this.props.options.length / itemsPerRow);\r\n            const rowContents: JSX.Element[][] = [];\r\n            for (let n = 0; n !== rowCount; ++n) {\r\n                rowContents.push([]);\r\n            }\r\n\r\n            this.props.options.forEach(option => {\r\n                const index = this.props.options.indexOf(option);\r\n                const rowIndex = Math.floor(index / itemsPerRow);\r\n                const row = rowContents[rowIndex];\r\n                row.push(\r\n                    <SelectorOption\r\n                        key={option.id}\r\n                        option={option}\r\n                        selected={option.id === this.props.selectedID}\r\n                        count={itemsPerRow}\r\n                        select={(optionID: string) => this.props.select(optionID)}\r\n                    />\r\n                );\r\n            });\r\n\r\n            const rowSections = rowContents.map(row => {\r\n                const index = rowContents.indexOf(row);\r\n                return <div key={index}>{row}</div>;\r\n            });\r\n\r\n            return (\r\n                <div className={style}>\r\n                    {rowSections}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface SelectorOptionInterface {\r\n    option: { id: string; text: string; disabled?: boolean };\r\n    selected: boolean;\r\n    count: number;\r\n    select: (optionID: string) => void;\r\n}\r\n\r\nclass SelectorOption extends React.Component<SelectorOptionInterface> {\r\n    private click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (!this.props.option.disabled) {\r\n            this.props.select(this.props.option.id);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const width = 'calc(((100% - 1px) / ' + this.props.count + ') - 2px )';\r\n\r\n            let style = 'option';\r\n            if (this.props.selected) {\r\n                style += ' selected';\r\n            }\r\n            if (this.props.option.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            return (\r\n                <div key={this.props.option.id} className={style} style={{ width: width }} title={this.props.option.text} onClick={e => this.click(e)}>\r\n                    {this.props.option.text}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { CombatSetup } from '../../models/combat';\r\nimport { Encounter, EncounterSlot } from '../../models/encounter';\r\nimport { MapFolio } from '../../models/map-folio';\r\nimport { Monster } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport Selector from '../controls/selector';\r\nimport DifficultyChartPanel from '../panels/difficulty-chart-panel';\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    combatSetup: CombatSetup;\r\n    parties: Party[];\r\n    encounters: Encounter[];\r\n    mapFolios: MapFolio[];\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n    notify: () => void;\r\n}\r\n\r\ninterface State {\r\n    combatSetup: CombatSetup;\r\n}\r\n\r\nexport default class CombatStartModal extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        parties: null,\r\n        mapFolios: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            combatSetup: props.combatSetup\r\n        };\r\n    }\r\n\r\n    private setParty(partyID: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.partyID = partyID;\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        }, () => this.props.notify());\r\n    }\r\n\r\n    private setEncounter(encounterID: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.encounterID = encounterID;\r\n        const enc = this.props.encounters.find(e => e.id === encounterID);\r\n        if (enc) {\r\n            // eslint-disable-next-line\r\n            this.state.combatSetup.monsterNames = Utils.getMonsterNames(enc);\r\n        }\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        }, () => this.props.notify());\r\n    }\r\n\r\n    private setFolioID(id: string) {\r\n        if (id && (id !== '')) {\r\n            const folio = this.props.mapFolios.find(f => f.id === id);\r\n            if (folio) {\r\n                // eslint-disable-next-line\r\n                this.state.combatSetup.folioID = folio.id;\r\n                // eslint-disable-next-line\r\n                this.state.combatSetup.mapID = folio.maps.length === 1 ? folio.maps[0].id : null;\r\n            }\r\n        } else {\r\n            // eslint-disable-next-line\r\n            this.state.combatSetup.folioID = null;\r\n            // eslint-disable-next-line\r\n            this.state.combatSetup.mapID = null;\r\n        }\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        });\r\n    }\r\n\r\n    private setMapID(id: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.mapID = id;\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        });\r\n    }\r\n\r\n    private setWave(waveID: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.waveID = waveID;\r\n        const enc = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n        if (enc) {\r\n            const wave = enc.waves.find(w => w.id === waveID);\r\n            if (wave) {\r\n                // eslint-disable-next-line\r\n                this.state.combatSetup.monsterNames = Utils.getMonsterNames(wave);\r\n            }\r\n        }\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        }, () => this.props.notify());\r\n    }\r\n\r\n    private setEncounterInitMode(mode: 'manual' | 'individual' | 'group') {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.encounterInitMode = mode;\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        });\r\n    }\r\n\r\n    private changeName(slotID: string, index: number, name: string) {\r\n        const slot = this.state.combatSetup.monsterNames.find(s => s.id === slotID);\r\n        if (slot) {\r\n            slot.names[index] = name;\r\n            this.setState({\r\n                combatSetup: this.state.combatSetup\r\n            });\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    private getPartySection() {\r\n        if (this.props.parties.length === 0) {\r\n            return (\r\n                <div className='section'>you have not defined any parties</div>\r\n            );\r\n        }\r\n\r\n        const partyOptions = this.props.parties.map(party => {\r\n            return {\r\n                id: party.id,\r\n                text: party.name || 'unnamed party'\r\n            };\r\n        });\r\n\r\n        let partyContent = null;\r\n        if (this.state.combatSetup.partyID) {\r\n            const selectedParty = this.props.parties.find(p => p.id === this.state.combatSetup.partyID);\r\n            if (selectedParty) {\r\n                const pcs = selectedParty.pcs.filter(pc => pc.active);\r\n\r\n                const pcSections = pcs.map(pc =>\r\n                    (\r\n                        <li key={pc.id}>\r\n                            {pc.name || 'unnamed pc'} (level {pc.level})\r\n                        </li>\r\n                    )\r\n                );\r\n\r\n                if (pcSections.length === 0) {\r\n                    pcSections.push(\r\n                        <li key={'empty'}>no pcs</li>\r\n                    );\r\n                }\r\n\r\n                partyContent = (\r\n                    <div>\r\n                        <div className='subheading'>pcs</div>\r\n                        <ul>{pcSections}</ul>\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='heading'>party</div>\r\n                <Dropdown\r\n                    options={partyOptions}\r\n                    placeholder='select party...'\r\n                    selectedID={this.state.combatSetup.partyID ? this.state.combatSetup.partyID : undefined}\r\n                    select={optionID => this.setParty(optionID)}\r\n                />\r\n                {partyContent}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getEncounterSection() {\r\n        if (this.props.encounters.length === 0) {\r\n            return (\r\n                <div className='section'>you have not built any encounters</div>\r\n            );\r\n        }\r\n\r\n        const encounterOptions = this.props.encounters.map(encounter => {\r\n            return {\r\n                id: encounter.id,\r\n                text: encounter.name || 'unnamed encounter'\r\n            };\r\n        });\r\n\r\n        let encounterContent = null;\r\n        if (this.state.combatSetup.encounterID) {\r\n            const selectedEncounter = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n            if (selectedEncounter) {\r\n                const monsterSections = selectedEncounter.slots.map(slot => {\r\n                    let name = slot.monsterName || 'unnamed monster';\r\n                    if (slot.count > 1) {\r\n                        name += ' (x' + slot.count + ')';\r\n                    }\r\n                    return (\r\n                        <li key={slot.id}>{name}</li>\r\n                    );\r\n                });\r\n\r\n                if (monsterSections.length === 0) {\r\n                    monsterSections.push(\r\n                        <li key={'empty'}>no monsters</li>\r\n                    );\r\n                }\r\n\r\n                const waves = selectedEncounter.waves.map(wave => {\r\n                    if (wave.slots.length === 0) {\r\n                        return null;\r\n                    }\r\n\r\n                    const waveMonsters = wave.slots.map(slot => {\r\n                        let name = slot.monsterName || 'unnamed monster';\r\n                        if (slot.count > 1) {\r\n                            name += ' x' + slot.count;\r\n                        }\r\n                        return (\r\n                            <li key={slot.id}>{name}</li>\r\n                        );\r\n                    });\r\n\r\n                    return (\r\n                        <div key={wave.id}>\r\n                            <div className='subheading'>{wave.name || 'unnamed wave'}</div>\r\n                            <ul>{waveMonsters}</ul>\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                encounterContent = (\r\n                    <div>\r\n                        <div className='subheading'>monsters</div>\r\n                        <ul>{monsterSections}</ul>\r\n                        {waves}\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='heading'>encounter</div>\r\n                <Dropdown\r\n                    options={encounterOptions}\r\n                    placeholder='select encounter...'\r\n                    selectedID={this.state.combatSetup.encounterID ? this.state.combatSetup.encounterID : undefined}\r\n                    select={optionID => this.setEncounter(optionID)}\r\n                />\r\n                {encounterContent}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getMapSection() {\r\n        const folios = this.props.mapFolios.filter(folio => folio.maps.length > 0);\r\n        if (folios.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        const folioOptions = [{\r\n            id: '',\r\n            text: 'none'\r\n        }].concat(folios.map(folio => {\r\n            return {\r\n                id: folio.id,\r\n                text: folio.name || 'unnamed folio'\r\n            };\r\n        }));\r\n\r\n        let selectMapSection = null;\r\n        let thumbnailSection = null;\r\n\r\n        if (this.state.combatSetup.folioID) {\r\n            const folio = this.props.mapFolios.find(f => f.id === this.state.combatSetup.folioID);\r\n            if (folio) {\r\n                const mapOptions = folio.maps.map(m => {\r\n                    return {\r\n                        id: m.id,\r\n                        text: m.name || 'unnamed map'\r\n                    };\r\n                });\r\n\r\n                if (mapOptions.length !== 1) {\r\n                    selectMapSection = (\r\n                        <Selector\r\n                            options={mapOptions}\r\n                            selectedID={this.state.combatSetup.mapID}\r\n                            select={optionID => this.setMapID(optionID)}\r\n                        />\r\n                    );\r\n                }\r\n\r\n                if (this.state.combatSetup.mapID) {\r\n                    const map = folio.maps.find(m => m.id === this.state.combatSetup.mapID);\r\n                    if (map) {\r\n                        thumbnailSection = (\r\n                            <MapPanel\r\n                                map={map}\r\n                                mode='thumbnail'\r\n                            />\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='heading'>map</div>\r\n                <Dropdown\r\n                    options={folioOptions}\r\n                    placeholder='select map folio...'\r\n                    selectedID={this.state.combatSetup.folioID ? this.state.combatSetup.folioID : undefined}\r\n                    select={optionID => this.setFolioID(optionID)}\r\n                />\r\n                {selectMapSection}\r\n                {thumbnailSection}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getWaveSection() {\r\n        if (this.state.combatSetup.encounterID === null) {\r\n            return (\r\n                <div className='section'>you have not selected an encounter</div>\r\n            );\r\n        }\r\n\r\n        const selectedEncounter = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n        if (selectedEncounter) {\r\n            if (selectedEncounter.waves.length === 0) {\r\n                return (\r\n                    <div className='section'>you have not defined any waves</div>\r\n                );\r\n            }\r\n\r\n            const waveOptions = selectedEncounter.waves.map(wave => {\r\n                return {\r\n                    id: wave.id,\r\n                    text: wave.name || 'unnamed wave'\r\n                };\r\n            });\r\n\r\n            let waveContent = null;\r\n            if (this.state.combatSetup.waveID) {\r\n                const selectedWave = selectedEncounter.waves.find(w => w.id === this.state.combatSetup.waveID);\r\n                if (selectedWave) {\r\n                    const monsterSections = selectedWave.slots.map(slot => {\r\n                        let name = slot.monsterName || 'unnamed monster';\r\n                        if (slot.count > 1) {\r\n                            name += ' (x' + slot.count + ')';\r\n                        }\r\n                        return (\r\n                            <li key={slot.id}>{name}</li>\r\n                        );\r\n                    });\r\n\r\n                    if (monsterSections.length === 0) {\r\n                        monsterSections.push(\r\n                            <li key={'empty'}>no monsters</li>\r\n                        );\r\n                    }\r\n\r\n                    waveContent = (\r\n                        <div>\r\n                            <div className='subheading'>monsters</div>\r\n                            <ul>{monsterSections}</ul>\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n\r\n            return (\r\n                <div>\r\n                    <div className='heading'>wave</div>\r\n                    <Dropdown\r\n                        options={waveOptions}\r\n                        placeholder='select wave...'\r\n                        selectedID={this.state.combatSetup.waveID ? this.state.combatSetup.waveID : undefined}\r\n                        select={optionID => this.setWave(optionID)}\r\n                    />\r\n                    {waveContent}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private getDifficultySection() {\r\n        const party = this.props.parties.find(p => p.id === this.state.combatSetup.partyID);\r\n        const encounter = this.props.encounters.find(enc => enc.id === this.state.combatSetup.encounterID);\r\n\r\n        if (party && encounter) {\r\n            return (\r\n                <div>\r\n                    <div className='heading'>encounter difficulty</div>\r\n                    <DifficultyChartPanel\r\n                        party={party}\r\n                        encounter={encounter}\r\n                        getMonster={(monsterName, monsterGroupName) => this.props.getMonster(monsterName, monsterGroupName)}\r\n                    />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='heading'>encounter difficulty</div>\r\n                <div className='section'>select a party and an encounter on the left to see difficulty information.</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getMonsterSection() {\r\n        if (this.state.combatSetup.encounterID === null) {\r\n            return (\r\n                <div>\r\n                    <div className='heading'>monsters</div>\r\n                    <div className='section'>select an encounter to see monster options here.</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (!this.props.parties && this.state.combatSetup.waveID === null) {\r\n            return (\r\n                <div>\r\n                    <div className='heading'>monsters</div>\r\n                    <div className='section'>select a wave to see monster options here.</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        const selectedEncounter = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n        if (selectedEncounter) {\r\n            let slotsContainer: { slots: EncounterSlot[] } = selectedEncounter;\r\n            if (this.state.combatSetup.waveID) {\r\n                const selectedWave = selectedEncounter.waves.find(w => w.id === this.state.combatSetup.waveID);\r\n                if (selectedWave) {\r\n                    slotsContainer = selectedWave;\r\n                }\r\n            }\r\n\r\n            if (slotsContainer.slots.length === 0) {\r\n                return null;\r\n            }\r\n\r\n            const initOptions = [\r\n                {\r\n                    id: 'manual',\r\n                    text: 'enter manually'\r\n                },\r\n                {\r\n                    id: 'individual',\r\n                    text: 'roll individually'\r\n                },\r\n                {\r\n                    id: 'group',\r\n                    text: 'roll in groups'\r\n                }\r\n            ];\r\n\r\n            const names = this.state.combatSetup.monsterNames.map(slotNames => {\r\n                const slot = slotsContainer.slots.find(s => s.id === slotNames.id);\r\n                if (slot) {\r\n                    const inputs = [];\r\n                    for (let n = 0; n !== slotNames.names.length; ++n) {\r\n                        inputs.push(\r\n                            <div key={n}>\r\n                                <MonsterName\r\n                                    value={slotNames.names[n]}\r\n                                    slotID={slot.id}\r\n                                    index={n}\r\n                                    changeName={(slotID, index, value) => this.changeName(slotID, index, value)}\r\n                                />\r\n                            </div>\r\n                        );\r\n                    }\r\n                    return (\r\n                        <div key={slotNames.id} className='name-row'>\r\n                            <div className='name-label'>\r\n                                {slot.monsterName}\r\n                            </div>\r\n                            <div className='name-inputs'>\r\n                                {inputs}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n            });\r\n\r\n            return (\r\n                <div>\r\n                    <div className='heading'>monsters</div>\r\n                    <div className='subheading'>initiative</div>\r\n                    <Selector\r\n                        options={initOptions}\r\n                        selectedID={this.state.combatSetup.encounterInitMode}\r\n                        select={optionID => this.setEncounterInitMode(optionID as 'manual' | 'individual' | 'group')}\r\n                    />\r\n                    <div className='subheading'>names</div>\r\n                    <div>{names}</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    public render() {\r\n        try {\r\n            let leftSection = null;\r\n            let rightSection = null;\r\n\r\n            if (this.props.parties) {\r\n                leftSection = (\r\n                    <div>\r\n                        {this.getPartySection()}\r\n                        {this.getEncounterSection()}\r\n                        {this.getMapSection()}\r\n                    </div>\r\n                );\r\n\r\n                rightSection = (\r\n                    <div>\r\n                        {this.getDifficultySection()}\r\n                        {this.getMonsterSection()}\r\n                    </div>\r\n                );\r\n            } else {\r\n                leftSection = (\r\n                    <div>\r\n                        {this.getWaveSection()}\r\n                    </div>\r\n                );\r\n\r\n                rightSection = (\r\n                    <div>\r\n                        {this.getMonsterSection()}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='row' style={{ height: '100%', margin: '0 -15px' }}>\r\n                    <div className='column small-6 medium-6 large-6 scrollable'>\r\n                        {leftSection}\r\n                    </div>\r\n                    <div className='column small-6 medium-6 large-6 scrollable'>\r\n                        {rightSection}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface MonsterNameProps {\r\n    slotID: string;\r\n    index: number;\r\n    value: string;\r\n    changeName: (slotID: string, index: number, value: string) => void;\r\n}\r\n\r\nclass MonsterName extends React.Component<MonsterNameProps> {\r\n    public render() {\r\n        return (\r\n            <input type='text' value={this.props.value} onChange={event => this.props.changeName(this.props.slotID, this.props.index, event.target.value)} />\r\n        );\r\n    }\r\n}\r\n","export interface Condition {\r\n    id: string;\r\n    name: string;\r\n    level: number;\r\n    text: string | null;\r\n    duration: ConditionDurationSaves | ConditionDurationCombatant | ConditionDurationRounds | null;\r\n}\r\n\r\nexport interface ConditionDurationSaves {\r\n    type: 'saves';\r\n    count: number;\r\n    saveType: 'str' | 'dex' | 'con' | 'int' | 'wis' | 'cha' | 'death';\r\n    saveDC: number;\r\n    point: 'start' | 'end';\r\n}\r\n\r\nexport interface ConditionDurationCombatant {\r\n    type: 'combatant';\r\n    point: 'start' | 'end';\r\n    combatantID: string | null;\r\n}\r\n\r\nexport interface ConditionDurationRounds {\r\n    type: 'rounds';\r\n    count: number;\r\n}\r\n\r\nexport const CONDITION_TYPES = [\r\n    'blinded',\r\n    'charmed',\r\n    'deafened',\r\n    'exhaustion',\r\n    'frightened',\r\n    'grappled',\r\n    'incapacitated',\r\n    'invisible',\r\n    'paralyzed',\r\n    'petrified',\r\n    'poisoned',\r\n    'prone',\r\n    'restrained',\r\n    'stunned',\r\n    'unconscious',\r\n    'custom'\r\n];\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    items: { id: string; text: string; details: JSX.Element | string; disabled?: boolean }[];\r\n    selectedItemID: string | null;\r\n    select: (itemID: string) => void;\r\n}\r\n\r\nexport default class RadioGroup extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        // No default property values\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            const content = this.props.items.map(item => {\r\n                return (\r\n                    <RadioGroupItem\r\n                        key={item.id}\r\n                        item={item}\r\n                        selected={this.props.selectedItemID === item.id}\r\n                        select={(itemID: string) => this.props.select(itemID)}\r\n                    />\r\n                );\r\n            });\r\n\r\n            return (\r\n                <div className='radio-group'>\r\n                    {content}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface RadioGroupItemProps {\r\n    item: { id: string; text: string; details: JSX.Element | string; disabled?: boolean };\r\n    selected: boolean;\r\n    select: (itemID: string) => void;\r\n}\r\n\r\nclass RadioGroupItem extends React.Component<RadioGroupItemProps> {\r\n    public render() {\r\n        let style = 'radio-item';\r\n        let details = null;\r\n\r\n        if (this.props.selected) {\r\n            style += ' selected';\r\n            details = (\r\n                <div className='radio-item-details'>\r\n                    {this.props.item.details}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (this.props.item.disabled) {\r\n            style += ' disabled';\r\n        }\r\n\r\n        return (\r\n            <div className={style} onClick={() => this.props.select(this.props.item.id)}>\r\n                <div className='radio-item-text'>{this.props.item.text}</div>\r\n                {details}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Factory from '../../utils/factory';\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combat, Combatant } from '../../models/combat';\r\nimport { Condition, CONDITION_TYPES, ConditionDurationCombatant, ConditionDurationSaves } from '../../models/condition';\r\nimport { Monster } from '../../models/monster-group';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport RadioGroup from '../controls/radio-group';\r\nimport Selector from '../controls/selector';\r\nimport Spin from '../controls/spin';\r\n\r\ninterface Props {\r\n    condition: Condition;\r\n    combatant: Combatant & Monster;\r\n    combat: Combat;\r\n}\r\n\r\ninterface State {\r\n    condition: Condition;\r\n}\r\n\r\nexport default class ConditionModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            condition: props.condition\r\n        };\r\n    }\r\n\r\n    private setCondition(conditionName: string) {\r\n        // eslint-disable-next-line\r\n        this.state.condition.name = conditionName;\r\n        // eslint-disable-next-line\r\n        this.state.condition.level = 1;\r\n        // eslint-disable-next-line\r\n        this.state.condition.text = conditionName === 'custom' ? 'custom condition' : null;\r\n\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    private setDuration(durationType: 'saves' | 'combatant' | 'rounds') {\r\n        let duration = null;\r\n\r\n        switch (durationType) {\r\n            case 'saves':\r\n                duration = Factory.createConditionDurationSaves();\r\n                break;\r\n            case 'combatant':\r\n                duration = Factory.createConditionDurationCombatant();\r\n                break;\r\n            case 'rounds':\r\n                duration = Factory.createConditionDurationRounds();\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        // eslint-disable-next-line\r\n        this.state.condition.duration = duration;\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    private changeValue(object: any, field: string, value: any) {\r\n        object[field] = value;\r\n\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    private nudgeValue(object: any, field: string, delta: number) {\r\n        let value = object[field] + delta;\r\n        if (field === 'level') {\r\n            value = Math.max(value, 1);\r\n            value = Math.min(value, 6);\r\n        }\r\n        if (field === 'count') {\r\n            value = Math.max(value, 1);\r\n        }\r\n        if (field === 'saveDC') {\r\n            value = Math.max(value, 0);\r\n        }\r\n        object[field] = value;\r\n\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const conditions = CONDITION_TYPES.map(condition => {\r\n                const controls = [];\r\n                const description = [];\r\n                if (condition === this.state.condition.name) {\r\n                    if (condition === 'custom') {\r\n                        controls.push(\r\n                            <input\r\n                                type='text'\r\n                                placeholder='custom condition'\r\n                                value={this.state.condition.text ? this.state.condition.text : ''}\r\n                                onChange={event => this.changeValue(this.state.condition, 'text', event.target.value)}\r\n                            />\r\n                        );\r\n                    }\r\n                    if (condition === 'exhaustion') {\r\n                        controls.push(\r\n                            <Spin\r\n                                key='exhaustion-spin'\r\n                                source={this.props.condition}\r\n                                name='level'\r\n                                label='exhaustion'\r\n                                nudgeValue={delta => this.nudgeValue(this.props.condition, 'level', delta)}\r\n                            />\r\n                        );\r\n                    }\r\n                    const text = Utils.conditionText(this.state.condition);\r\n                    for (let n = 0; n !== text.length; ++n) {\r\n                        description.push(<li key={n} className='section'>{text[n]}</li>);\r\n                    }\r\n                }\r\n\r\n                return {\r\n                    id: condition,\r\n                    text: condition,\r\n                    details: (\r\n                        <div key={condition}>\r\n                            {controls}\r\n                            <ul>\r\n                                {description}\r\n                            </ul>\r\n                        </div>\r\n                    ),\r\n                    disabled: this.props.combatant.conditionImmunities ? this.props.combatant.conditionImmunities.indexOf(condition) !== -1 : false\r\n                };\r\n            });\r\n\r\n            const saveOptions = ['str', 'dex', 'con', 'int', 'wis', 'cha', 'death'].map(c => ({ id: c, text: c }));\r\n            const pointOptions = [\r\n                {\r\n                    id: 'start',\r\n                    text: 'start of turn'\r\n                },\r\n                {\r\n                    id: 'end',\r\n                    text: 'end of turn'\r\n                }\r\n            ];\r\n            const combatantOptions = this.props.combat.combatants.map(c => ({ id: c.id, text: (c.displayName || c.name || 'unnamed monster') }));\r\n\r\n            const durations = [\r\n                {\r\n                    id: 'none',\r\n                    text: 'until removed (default)',\r\n                    details: (\r\n                        <div className='section'>\r\n                            <div>the condition persists until it is manually removed</div>\r\n                        </div>\r\n                    )\r\n                },\r\n                {\r\n                    id: 'saves',\r\n                    text: 'until a successful save',\r\n                    details: (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>number of saves required</div>\r\n                                <Spin\r\n                                    source={this.props.condition.duration}\r\n                                    name='count'\r\n                                    nudgeValue={delta => this.nudgeValue(this.props.condition.duration, 'count', delta)}\r\n                                />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>save dc</div>\r\n                                <Spin\r\n                                    source={this.props.condition.duration}\r\n                                    name='saveDC'\r\n                                    nudgeValue={delta => this.nudgeValue(this.props.condition.duration, 'saveDC', delta)}\r\n                                />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>type of save</div>\r\n                                <Selector\r\n                                    options={saveOptions}\r\n                                    selectedID={\r\n                                        (this.props.condition.duration as ConditionDurationSaves)\r\n                                        ? (this.props.condition.duration as ConditionDurationSaves).saveType\r\n                                        : null\r\n                                    }\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, 'saveType', optionID)}\r\n                                />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>make the save at the start or end of the turn</div>\r\n                                <Selector\r\n                                    options={pointOptions}\r\n                                    selectedID={\r\n                                        (this.props.condition.duration as ConditionDurationSaves)\r\n                                        ? (this.props.condition.duration as ConditionDurationSaves).point\r\n                                        : null\r\n                                    }\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, 'point', optionID)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                },\r\n                {\r\n                    id: 'combatant',\r\n                    text: 'until someone\\'s next turn',\r\n                    details: (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>combatant</div>\r\n                                <Dropdown\r\n                                    options={combatantOptions}\r\n                                    selectedID={\r\n                                        (this.props.condition.duration as ConditionDurationCombatant)\r\n                                        ? (this.props.condition.duration as ConditionDurationCombatant).combatantID || undefined\r\n                                        : undefined\r\n                                    }\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, 'combatantID', optionID)}\r\n                                />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>start or end of the turn</div>\r\n                                <Selector\r\n                                    options={pointOptions}\r\n                                    selectedID={\r\n                                        (this.props.condition.duration as ConditionDurationCombatant)\r\n                                        ? (this.props.condition.duration as ConditionDurationCombatant).point\r\n                                        : null\r\n                                    }\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, 'point', optionID)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                },\r\n                {\r\n                    id: 'rounds',\r\n                    text: 'for a number of rounds',\r\n                    details: (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>number of rounds</div>\r\n                                <Spin\r\n                                    source={this.props.condition.duration}\r\n                                    name='count'\r\n                                    nudgeValue={delta => this.nudgeValue(this.props.condition.duration, 'count', delta)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }\r\n            ];\r\n\r\n            return (\r\n                <div className='condition-modal'>\r\n                    <div className='row' style={{ height: '100%' }}>\r\n                        <div className='columns small-6 medium-6 large-6 scrollable'>\r\n                            <div className='heading'>condition</div>\r\n                            <RadioGroup\r\n                                items={conditions}\r\n                                selectedItemID={this.state.condition.name}\r\n                                select={itemID => this.setCondition(itemID)}\r\n                            />\r\n                        </div>\r\n                        <div className='columns small-6 medium-6 large-6 scrollable'>\r\n                            <div className='heading'>duration</div>\r\n                            <RadioGroup\r\n                                items={durations}\r\n                                selectedItemID={this.state.condition.duration ? this.state.condition.duration.type : 'none'}\r\n                                select={itemID => this.setDuration(itemID as 'saves' | 'combatant' | 'rounds')}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { CATEGORY_TYPES, Monster, MonsterGroup, SIZE_TYPES } from '../../models/monster-group';\r\n\r\nimport Selector from '../controls/selector';\r\n\r\ninterface Props {\r\n    library: MonsterGroup[];\r\n}\r\n\r\ninterface State {\r\n    chart: string;\r\n}\r\n\r\nexport default class DemographicsModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            chart: 'challenge'\r\n        };\r\n    }\r\n\r\n    private selectChart(chart: string) {\r\n        this.setState({\r\n            chart: chart\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let demographics = null;\r\n\r\n            const allMonsters: Monster[] = [];\r\n            this.props.library.forEach(group => group.monsters.forEach(monster => allMonsters.push(monster)));\r\n            if (allMonsters.length !== 0) {\r\n                const buckets: { value: any, title: string }[] = [];\r\n                let maxBucketSize = 0;\r\n                const monsters: { [key: string]: Monster[] } = {};\r\n\r\n                switch (this.state.chart) {\r\n                    case 'challenge':\r\n                        const challenges = [\r\n                            0, 0.125, 0.25, 0.5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30\r\n                        ];\r\n                        challenges.forEach(cr => {\r\n                            buckets.push({\r\n                                value: cr,\r\n                                title: 'challenge ' + Utils.challenge(cr)\r\n                            });\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const cr = bucket.value;\r\n                            monsters[cr.toString()] = allMonsters.filter(monster => monster.challenge === cr);\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const cr = bucket.value;\r\n                            maxBucketSize = Math.max(monsters[cr].length, maxBucketSize);\r\n                        });\r\n                        break;\r\n                    case 'size':\r\n                        SIZE_TYPES.forEach(size => {\r\n                            buckets.push({\r\n                                value: size,\r\n                                title: size\r\n                            });\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const size = bucket.value;\r\n                            monsters[size.toString()] = allMonsters.filter(monster => monster.size === size);\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const size = bucket.value;\r\n                            maxBucketSize = Math.max(monsters[size].length, maxBucketSize);\r\n                        });\r\n                        break;\r\n                    case 'type':\r\n                        CATEGORY_TYPES.forEach(type => {\r\n                            buckets.push({\r\n                                value: type,\r\n                                title: type\r\n                            });\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const type = bucket.value;\r\n                            monsters[type.toString()] = allMonsters.filter(monster => monster.category === type);\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const type = bucket.value;\r\n                            maxBucketSize = Math.max(monsters[type].length, maxBucketSize);\r\n                        });\r\n                        break;\r\n                    default:\r\n                        // Do nothing\r\n                        break;\r\n                }\r\n\r\n                const bars = [];\r\n                for (let index = 0; index !== buckets.length; ++index) {\r\n                    const bucket = buckets[index];\r\n                    const set = monsters[bucket.value];\r\n                    const count = set ? set.length : 0;\r\n                    bars.push(\r\n                        <div\r\n                            key={bucket.title}\r\n                            className='bar-container'\r\n                            style={{\r\n                                width: 'calc((100% - 1px) / ' + buckets.length + ')',\r\n                                left: 'calc((100% - 1px) * ' + index + ' / ' + buckets.length + ')'\r\n                            }}\r\n                            title={bucket.title + ': ' + set.length + ' monsters'}\r\n                        >\r\n                            <div\r\n                                className='bar-space'\r\n                                style={{\r\n                                    height: 'calc((100% - 1px) * ' + (maxBucketSize - count) + ' / ' + maxBucketSize + ')'\r\n                                }}\r\n                            />\r\n                            <div\r\n                                className='bar'\r\n                                style={{\r\n                                    height: 'calc((100% - 1px) * ' + count + ' / ' + maxBucketSize + ')'\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                const chartOptions = [\r\n                    {\r\n                        id: 'challenge',\r\n                        text: 'challenge rating'\r\n                    },\r\n                    {\r\n                        id: 'size',\r\n                        text: 'size'\r\n                    },\r\n                    {\r\n                        id: 'type',\r\n                        text: 'type'\r\n                    }\r\n                ];\r\n\r\n                demographics = (\r\n                    <div>\r\n                        <Selector\r\n                            options={chartOptions}\r\n                            selectedID={this.state.chart}\r\n                            select={optionID => this.selectChart(optionID)}\r\n                        />\r\n                        <div className='chart'>\r\n                            <div className='plot'>{bars}</div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return demographics;\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","export interface MapFolio {\r\n    id: string;\r\n    name: string;\r\n    maps: Map[];\r\n}\r\n\r\nexport interface Map {\r\n    id: string;\r\n    name: string;\r\n    items: MapItem[];\r\n}\r\n\r\nexport interface MapItem {\r\n    id: string;\r\n    type: 'tile' | 'pc' | 'monster';\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n    terrain: string | null;\r\n}\r\n\r\nexport const TERRAIN_TYPES = [\r\n    'cavern',\r\n    'dirt',\r\n    'flagstone',\r\n    'floorboard',\r\n    'grassland',\r\n    'pit',\r\n    'sand',\r\n    'snow',\r\n    'water'\r\n];\r\n","import React from 'react';\r\n\r\nimport { MapItem, TERRAIN_TYPES } from '../../models/map-folio';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport Radial from '../controls/radial';\r\n\r\ninterface Props {\r\n    tile: MapItem;\r\n    changeValue: (tile: MapItem, field: string, value: string) => void;\r\n    moveMapItem: (tile: MapItem, dir: string) => void;\r\n    resizeMapItem: (tile: MapItem, dir: string, dir2: 'in' | 'out' | null) => void;\r\n    cloneMapItem: (tile: MapItem) => void;\r\n    removeMapItem: (tile: MapItem) => void;\r\n}\r\n\r\nexport default class MapTileCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const terrainOptions = TERRAIN_TYPES.map(t => {\r\n                return { id: t, text: t };\r\n            });\r\n\r\n            return (\r\n                <div className='card map-tile'>\r\n                    <div className='heading'>\r\n                        <div className='title'>map tile</div>\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        <div className='subheading'>size</div>\r\n                        <div className='section'>{this.props.tile.width} sq x {this.props.tile.height} sq</div>\r\n                        <div className='section'>{this.props.tile.width * 5} ft x {this.props.tile.height * 5} ft</div>\r\n                        <div className='divider' />\r\n                        <div className='subheading'>terrain</div>\r\n                        <Dropdown\r\n                            options={terrainOptions}\r\n                            placeholder='select terrain'\r\n                            selectedID={this.props.tile.terrain ? this.props.tile.terrain : undefined}\r\n                            select={optionID => this.props.changeValue(this.props.tile, 'terrain', optionID)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <div className='subheading'>move</div>\r\n                        <div className='section centered'>\r\n                            <Radial direction='out' click={dir => this.props.moveMapItem(this.props.tile, dir)} />\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='subheading'>resize</div>\r\n                        <div className='section centered'>\r\n                            <Radial direction='both' click={(dir, dir2) => this.props.resizeMapItem(this.props.tile, dir, dir2)} />\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='section'>\r\n                            <button onClick={() => this.props.cloneMapItem(this.props.tile)}>clone tile</button>\r\n                            <button onClick={() => this.props.removeMapItem(this.props.tile)}>remove tile</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Factory from '../../utils/factory';\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Map, MapItem } from '../../models/map-folio';\r\n\r\nimport MapTileCard from '../cards/map-tile-card';\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    map: Map;\r\n}\r\n\r\ninterface State {\r\n    map: Map;\r\n    selectedTileID: string | null;\r\n}\r\n\r\nexport default class MapEditorModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            map: props.map,\r\n            selectedTileID: null\r\n        };\r\n    }\r\n\r\n    private setSelectedTileID(id: string | null) {\r\n        this.setState({\r\n            selectedTileID: id\r\n        });\r\n    }\r\n\r\n    private addMapTile(x: number, y: number) {\r\n        const tile = Factory.createMapItem();\r\n        tile.x = x;\r\n        tile.y = y;\r\n        tile.terrain = 'flagstone';\r\n        this.state.map.items.push(tile);\r\n\r\n        this.setState({\r\n            map: this.state.map,\r\n            selectedTileID: tile.id\r\n        });\r\n    }\r\n\r\n    private moveMapItem(item: MapItem, dir: string) {\r\n        switch (dir) {\r\n            case 'N':\r\n                item.y -= 1;\r\n                break;\r\n            case 'E':\r\n                item.x += 1;\r\n                break;\r\n            case 'S':\r\n                item.y += 1;\r\n                break;\r\n            case 'W':\r\n                item.x -= 1;\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    private bigMapItem(item: MapItem, dir: string) {\r\n        switch (dir) {\r\n            case 'N':\r\n                item.y -= 1;\r\n                item.height += 1;\r\n                break;\r\n            case 'E':\r\n                item.width += 1;\r\n                break;\r\n            case 'S':\r\n                item.height += 1;\r\n                break;\r\n            case 'W':\r\n                item.x -= 1;\r\n                item.width += 1;\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    private smallMapItem(item: MapItem, dir: string) {\r\n        switch (dir) {\r\n            case 'N':\r\n                if (item.height > 1) {\r\n                    item.y += 1;\r\n                    item.height -= 1;\r\n                }\r\n                break;\r\n            case 'E':\r\n                if (item.width > 1) {\r\n                    item.width -= 1;\r\n                }\r\n                break;\r\n            case 'S':\r\n                if (item.height > 1) {\r\n                    item.height -= 1;\r\n                }\r\n                break;\r\n            case 'W':\r\n                if (item.width > 1) {\r\n                    item.x += 1;\r\n                    item.width -= 1;\r\n                }\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    private resizeMapItem(item: MapItem, dir: string, dir2: 'in' | 'out') {\r\n        switch (dir2) {\r\n            case 'in':\r\n                this.smallMapItem(item, dir);\r\n                break;\r\n            case 'out':\r\n                this.bigMapItem(item, dir);\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n    }\r\n\r\n    private cloneMapItem(item: MapItem) {\r\n        const copy = JSON.parse(JSON.stringify(item));\r\n        copy.id = Utils.guid();\r\n        copy.x += 1;\r\n        copy.y += 1;\r\n        this.state.map.items.push(copy);\r\n\r\n        this.setState({\r\n            map: this.state.map,\r\n            selectedTileID: copy.id\r\n        });\r\n    }\r\n\r\n    private removeMapItem(item: MapItem) {\r\n        const index = this.state.map.items.indexOf(item);\r\n        this.state.map.items.splice(index, 1);\r\n\r\n        this.setState({\r\n            map: this.state.map,\r\n            selectedTileID: null\r\n        });\r\n    }\r\n\r\n    private changeValue(source: any, field: string, value: any) {\r\n        source[field] = value;\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let tools = null;\r\n            if (this.state.selectedTileID) {\r\n                const item = this.state.map.items.find(i => i.id === this.state.selectedTileID);\r\n                if (item) {\r\n                    tools = (\r\n                        <div className='tools'>\r\n                            <MapTileCard\r\n                                tile={item}\r\n                                moveMapItem={(mapItem, dir) => this.moveMapItem(mapItem, dir)}\r\n                                resizeMapItem={(mapItem, dir, dir2) => this.resizeMapItem(mapItem, dir, dir2 as 'in' | 'out')}\r\n                                cloneMapItem={mapItem => this.cloneMapItem(mapItem)}\r\n                                removeMapItem={mapItem => this.removeMapItem(mapItem)}\r\n                                changeValue={(source, field, value) => this.changeValue(source, field, value)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                }\r\n            } else {\r\n                tools = (\r\n                    <div className='tools'>\r\n                        <p>to add a new tile to the map, double-click on an empty grid square</p>\r\n                        <p>to edit an existing tile, click on it once to select it</p>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='map-editor'>\r\n                    {tools}\r\n                    <MapPanel\r\n                        map={this.state.map}\r\n                        mode='edit'\r\n                        selectedItemID={this.state.selectedTileID ? this.state.selectedTileID : undefined}\r\n                        setSelectedItemID={id => this.setSelectedTileID(id)}\r\n                        addMapTile={(x, y) => this.addMapTile(x, y)}\r\n                    />\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Factory from '../../utils/factory';\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { CATEGORY_TYPES, Monster, MonsterGroup, SIZE_TYPES, Trait, TRAIT_TYPES } from '../../models/monster-group';\r\n\r\nimport MonsterCard from '../cards/monster-card';\r\nimport Checkbox from '../controls/checkbox';\r\nimport Dropdown from '../controls/dropdown';\r\nimport Selector from '../controls/selector';\r\nimport Spin from '../controls/spin';\r\nimport AbilityScorePanel from '../panels/ability-score-panel';\r\nimport TraitsPanel from '../panels/traits-panel';\r\n\r\nimport arrow from '../../resources/images/down-arrow.svg';\r\n\r\ninterface Props {\r\n    monster: Monster;\r\n    library: MonsterGroup[];\r\n    showMonsters: boolean;\r\n}\r\n\r\ninterface State {\r\n    monster: Monster;\r\n    page: 'overview' | 'abilities' | 'combat' | 'actions';\r\n    showFilter: boolean;\r\n    helpSection: string;\r\n    filter: {\r\n        size: boolean,\r\n        type: boolean,\r\n        subtype: boolean,\r\n        alignment: boolean,\r\n        challenge: boolean\r\n    };\r\n}\r\n\r\nexport default class MonsterEditorModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            monster: props.monster,\r\n            page: 'overview',\r\n            showFilter: false,\r\n            helpSection: 'speed',\r\n            filter: {\r\n                size: true,\r\n                type: true,\r\n                subtype: false,\r\n                alignment: false,\r\n                challenge: true\r\n            }\r\n        };\r\n    }\r\n\r\n    private setPage(page: 'overview' | 'abilities' | 'combat' | 'actions') {\r\n        const sections = this.getHelpOptionsForPage(page);\r\n        this.setState({\r\n            page: page,\r\n            helpSection: sections[0]\r\n        });\r\n    }\r\n\r\n    private toggleFilter() {\r\n        this.setState({\r\n            showFilter: !this.state.showFilter\r\n        });\r\n    }\r\n\r\n    private setHelpSection(section: string) {\r\n        this.setState({\r\n            helpSection: section\r\n        });\r\n    }\r\n\r\n    private toggleMatch(type: 'size' | 'type' | 'subtype' | 'alignment' | 'challenge') {\r\n        // eslint-disable-next-line\r\n        this.state.filter[type] = !this.state.filter[type];\r\n        this.setState({\r\n            filter: this.state.filter\r\n        });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Helper methods\r\n\r\n    private getHelpOptionsForPage(page: 'overview' | 'abilities' | 'combat' | 'actions') {\r\n        switch (page) {\r\n            case 'overview':\r\n                return ['speed', 'senses', 'languages', 'equipment'];\r\n            case 'abilities':\r\n                return ['str', 'dex', 'con', 'int', 'wis', 'cha', 'saves', 'skills'];\r\n            case 'combat':\r\n                return ['armor class', 'hit dice', 'resistances', 'vulnerabilities', 'immunities', 'conditions'];\r\n            case 'actions':\r\n                return ['actions'];\r\n            default:\r\n                return [];\r\n        }\r\n    }\r\n\r\n    private getMonsters() {\r\n        const monsters: Monster[] = [];\r\n        this.props.library.forEach(group => {\r\n            group.monsters.forEach(monster => {\r\n                let match = true;\r\n\r\n                if (this.state.monster.id === monster.id) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.filter.size && (this.state.monster.size !== monster.size)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.filter.type && (this.state.monster.category !== monster.category)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.filter.subtype && (this.state.monster.tag !== monster.tag)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.filter.alignment && (this.state.monster.alignment !== monster.alignment)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.filter.challenge && (this.state.monster.challenge !== monster.challenge)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (match) {\r\n                    monsters.push(monster);\r\n                }\r\n            });\r\n        });\r\n\r\n        return monsters;\r\n    }\r\n\r\n    private setRandomValue(field: string, monsters: Monster[], notify: boolean) {\r\n        const index = Math.floor(Math.random() * monsters.length);\r\n        const m = monsters[index];\r\n\r\n        let source: any = m;\r\n        let value = null;\r\n        const tokens = field.split('.');\r\n        tokens.forEach(token => {\r\n            if (token === tokens[tokens.length - 1]) {\r\n                value = source[token];\r\n            } else {\r\n                source = source[token];\r\n            }\r\n        });\r\n\r\n        this.changeValue(field, value, notify);\r\n    }\r\n\r\n    private geneSplice(monsters: Monster[]) {\r\n        [\r\n            'speed',\r\n            'senses',\r\n            'languages',\r\n            'equipment',\r\n            'abilityScores.str',\r\n            'abilityScores.dex',\r\n            'abilityScores.con',\r\n            'abilityScores.int',\r\n            'abilityScores.wis',\r\n            'abilityScores.cha',\r\n            'savingThrows',\r\n            'skills',\r\n            'ac',\r\n            'hitDice',\r\n            'damage.resist',\r\n            'damage.vulnerable',\r\n            'damage.immune',\r\n            'conditionImmunities'\r\n        ].forEach(field => {\r\n            this.setRandomValue(field, monsters, false);\r\n        });\r\n\r\n        TRAIT_TYPES.forEach(type => {\r\n            // Clear current traits of this type\r\n            const currentTraits = this.state.monster.traits.filter(t => t.type === type);\r\n            currentTraits.forEach(c => {\r\n                const index = this.state.monster.traits.findIndex(t => t === c);\r\n                this.state.monster.traits.splice(index, 1);\r\n            });\r\n\r\n            // Get all traits of this type\r\n            const traits: Trait[] = [];\r\n            monsters.forEach(m => {\r\n                m.traits.filter(t => t.type === type)\r\n                    .forEach(t => traits.push(t));\r\n            });\r\n\r\n            // Collate by name\r\n            const distinct: { trait: Trait, count: number }[] = [];\r\n            traits.forEach(t => {\r\n                const current = distinct.find(d => d.trait.name === t.name);\r\n                if (current) {\r\n                    current.count += 1;\r\n                } else {\r\n                    distinct.push({\r\n                        trait: t,\r\n                        count: 1\r\n                    });\r\n                }\r\n            });\r\n\r\n            // If any are common to all monsters, copy them and remove from the candidates\r\n            const addedIDs: string[] = [];\r\n            distinct.filter(d => d.count === monsters.length)\r\n                .forEach(d => {\r\n                    this.copyTrait(d.trait);\r\n                    addedIDs.push(d.trait.id);\r\n                });\r\n            addedIDs.forEach(id => {\r\n                const index = distinct.findIndex(d => d.trait.id === id);\r\n                distinct.splice(index, 1);\r\n            });\r\n\r\n            const avg = traits.length / monsters.length;\r\n            while (this.state.monster.traits.filter(t => t.type === type).length < avg) {\r\n                const index = Math.floor(Math.random() * distinct.length);\r\n                const t = distinct[index].trait;\r\n                this.copyTrait(t);\r\n                distinct.splice(index, 1);\r\n            }\r\n        });\r\n\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private addTrait(type: 'trait' | 'action' | 'legendary' | 'lair' | 'regional') {\r\n        const trait = Factory.createTrait();\r\n        trait.type = type;\r\n        trait.name = 'New ' + this.getActionTypeName(type, false).toLowerCase();\r\n        this.state.monster.traits.push(trait);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private addRandomTrait(type: string, monsters: Monster[]) {\r\n        const traits: Trait[] = [];\r\n        monsters.forEach(m => {\r\n            m.traits.filter(t => t.type === type)\r\n                .forEach(t => {\r\n                    traits.push(t);\r\n                });\r\n        });\r\n\r\n        const index = Math.floor(Math.random() * traits.length);\r\n        const trait = traits[index];\r\n\r\n        this.copyTrait(trait);\r\n    }\r\n\r\n    private removeTrait(trait: Trait) {\r\n        const index = this.state.monster.traits.indexOf(trait);\r\n        this.state.monster.traits.splice(index, 1);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private getActionTypeName(type: string, plural: boolean) {\r\n        let name = Utils.traitType(type);\r\n        if (plural) {\r\n            name += 's';\r\n        }\r\n        return name;\r\n    }\r\n\r\n    private copyTrait(trait: Trait) {\r\n        const copy = JSON.parse(JSON.stringify(trait));\r\n        copy.id = Utils.guid();\r\n        this.state.monster.traits.push(copy);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private changeTrait(trait: Trait, field: 'name' | 'usage' | 'type' | 'text', value: string) {\r\n        trait[field] = value;\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private nudgeValue(field: string, delta: number) {\r\n        let source: any = this.state.monster;\r\n        let value: any = null;\r\n        const tokens = field.split('.');\r\n        tokens.forEach(token => {\r\n            if (token === tokens[tokens.length - 1]) {\r\n                value = source[token];\r\n            } else {\r\n                source = source[token];\r\n            }\r\n        });\r\n\r\n        const newValue = (field === 'challenge') ? Utils.nudgeChallenge(value, delta) : (value ? value : 0) + delta;\r\n        this.changeValue(field, newValue);\r\n    }\r\n\r\n    private changeValue(field: string, value: any, notify = true) {\r\n        let source: any = this.state.monster;\r\n        const tokens = field.split('.');\r\n        tokens.forEach(token => {\r\n            if (token === tokens[tokens.length - 1]) {\r\n                source[token] = value;\r\n\r\n                if ((field === 'abilityScores.con') || (field === 'size') || (field === 'hitDice')) {\r\n                    const sides = Utils.hitDieType(this.state.monster.size);\r\n                    const conMod = Math.floor((this.state.monster.abilityScores.con - 10) / 2);\r\n                    const hpPerDie = ((sides + 1) / 2) + conMod;\r\n                    const hp = Math.floor(this.state.monster.hitDice * hpPerDie);\r\n                    // eslint-disable-next-line\r\n                    this.state.monster.hpMax = hp;\r\n                }\r\n\r\n                if (notify) {\r\n                    this.setState({\r\n                        monster: this.state.monster\r\n                    });\r\n                }\r\n            } else {\r\n                source = source[token];\r\n            }\r\n        });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // HTML render methods\r\n\r\n    private getHelpSection(monsters: Monster[]) {\r\n        switch (this.state.helpSection) {\r\n            case 'speed':\r\n                return this.getValueSection('speed', 'text', monsters);\r\n            case 'senses':\r\n                return this.getValueSection('senses', 'text', monsters);\r\n            case 'languages':\r\n                return this.getValueSection('languages', 'text', monsters);\r\n            case 'equipment':\r\n                return this.getValueSection('equipment', 'text', monsters);\r\n            case 'str':\r\n                return this.getValueSection('abilityScores.str', 'number', monsters);\r\n            case 'dex':\r\n                return this.getValueSection('abilityScores.dex', 'number', monsters);\r\n            case 'con':\r\n                return this.getValueSection('abilityScores.con', 'number', monsters);\r\n            case 'int':\r\n                return this.getValueSection('abilityScores.int', 'number', monsters);\r\n            case 'wis':\r\n                return this.getValueSection('abilityScores.wis', 'number', monsters);\r\n            case 'cha':\r\n                return this.getValueSection('abilityScores.cha', 'number', monsters);\r\n            case 'saves':\r\n                return this.getValueSection('savingThrows', 'text', monsters);\r\n            case 'skills':\r\n                return this.getValueSection('skills', 'text', monsters);\r\n            case 'armor class':\r\n                return this.getValueSection('ac', 'number', monsters);\r\n            case 'hit dice':\r\n                return this.getValueSection('hitDice', 'number', monsters);\r\n            case 'resistances':\r\n                return this.getValueSection('damage.resist', 'text', monsters);\r\n            case 'vulnerabilities':\r\n                return this.getValueSection('damage.vulnerable', 'text', monsters);\r\n            case 'immunities':\r\n                return this.getValueSection('damage.immune', 'text', monsters);\r\n            case 'conditions':\r\n                return this.getValueSection('conditionImmunities', 'text', monsters);\r\n            case 'actions':\r\n                return this.getActionsSection(monsters);\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    private getValueSection(field: string, dataType: 'text' | 'number', monsters: Monster[]) {\r\n        const values: any[] = monsters\r\n            .map(m => {\r\n                const tokens = field.split('.');\r\n                let source: any = m;\r\n                let value = null;\r\n                tokens.forEach(token => {\r\n                    if (token === tokens[tokens.length - 1]) {\r\n                        value = source[token];\r\n                    } else {\r\n                        source = source[token];\r\n                    }\r\n                });\r\n                if ((dataType === 'text') && (value === '')) {\r\n                    value = null;\r\n                }\r\n                return value;\r\n            })\r\n            .filter(v => v !== null);\r\n\r\n        const distinct: { value: any, count: number }[] = [];\r\n        if (dataType === 'number') {\r\n            let min: number | null = null;\r\n            let max: number | null = null;\r\n            values.forEach(v => {\r\n                if ((min === null) || (v < min)) {\r\n                    min = v;\r\n                }\r\n                if ((max === null) || (v > max)) {\r\n                    max = v;\r\n                }\r\n            });\r\n            if ((min !== null) && (max !== null)) {\r\n                for (let n = min; n <= max; ++n) {\r\n                    distinct.push({\r\n                        value: n,\r\n                        count: 0\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        values.forEach(v => {\r\n            const current = distinct.find(d => d.value === v);\r\n            if (current) {\r\n                current.count += 1;\r\n            } else {\r\n                distinct.push({\r\n                    value: v,\r\n                    count: 1\r\n                });\r\n            }\r\n        });\r\n\r\n        switch (dataType) {\r\n            case 'number':\r\n                Utils.sortByValue(distinct);\r\n                break;\r\n            case 'text':\r\n                Utils.sortByCount(distinct);\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        if (dataType === 'text') {\r\n            const count = monsters.length - values.length;\r\n            if (count !== 0) {\r\n                distinct.push({\r\n                    value: '',\r\n                    count: monsters.length - values.length\r\n                });\r\n            }\r\n        }\r\n\r\n        const valueSections = distinct.map(d => {\r\n            const width = 100 * d.count / monsters.length;\r\n            return (\r\n                <div className='row small-up-3 medium-up-3 large-up-3 value-list' key={distinct.indexOf(d)}>\r\n                    <div className='column'>\r\n                        <div className='text-container'>\r\n                            {d.value || '(none specified)'}\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <div className='bar-container'>\r\n                            <div className='bar' style={{ width: width + '%' }} />\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <button onClick={() => this.changeValue(field, d.value)}>use this value</button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                {valueSections}\r\n                <button onClick={() => this.setRandomValue(field, monsters, true)}>select random value</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getActionsSection(monsters: Monster[]) {\r\n        const rows = [];\r\n        rows.push(\r\n            <div className='row small-up-3 medium-up-3 large-up-3 value-list' key='header'>\r\n                <div className='column'>\r\n                    <div className='text-container'>\r\n                        <b>type</b>\r\n                    </div>\r\n                </div>\r\n                <div className='column'>\r\n                    <div className='text-container number'>\r\n                        <b>average number</b>\r\n                    </div>\r\n                </div>\r\n                <div className='column'>\r\n                    <div className='text-container number'>\r\n                        <b>min - max</b>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        TRAIT_TYPES.forEach(type => {\r\n            let min: number | null = null;\r\n            let max: number | null = null;\r\n            let count = 0;\r\n            monsters.forEach(m => {\r\n                const n = m.traits.filter(t => t.type === type).length;\r\n                if ((min === null) || (n < min)) {\r\n                    min = n;\r\n                }\r\n                if ((max === null) || (n > max)) {\r\n                    max = n;\r\n                }\r\n                count += n;\r\n            });\r\n            const avg = Math.round(count / monsters.length);\r\n\r\n            rows.push(\r\n                <div className='row small-up-4 medium-up-4 large-up-4 value-list' key={type}>\r\n                    <div className='column'>\r\n                        <div className={count === 0 ? 'text-container disabled' : 'text-container'}>\r\n                            {this.getActionTypeName(type, true)}\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <div className={count === 0 ? 'text-container number disabled' : 'text-container number'}>\r\n                            {avg}\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <div className={count === 0 ? 'text-container number disabled' : 'text-container number'}>\r\n                            {min} - {max}\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <button className={count === 0 ? 'disabled' : ''} onClick={() => this.addRandomTrait(type, monsters)}>add random</button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                {rows}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getFilterCard(monsters: Monster[]) {\r\n        const criteria: string[] = [];\r\n        if (this.state.filter.size) {\r\n            criteria.push('size');\r\n        }\r\n        if (this.state.filter.type) {\r\n            criteria.push('type');\r\n        }\r\n        if (this.state.filter.subtype) {\r\n            criteria.push('subtype');\r\n        }\r\n        if (this.state.filter.alignment) {\r\n            criteria.push('alignment');\r\n        }\r\n        if (this.state.filter.challenge) {\r\n            criteria.push('challenge rating');\r\n        }\r\n        const criteriaText = (criteria.length > 0) ? 'based on ' + criteria.join(', ') : 'no criteria specified';\r\n        const similar = (\r\n            <div className='section'>\r\n                {monsters.length} similar monsters ({criteriaText})\r\n            </div>\r\n        );\r\n\r\n        let filterContent = null;\r\n        if (this.state.showFilter) {\r\n            filterContent = (\r\n                <div>\r\n                    <Checkbox\r\n                        label={'size ' + this.state.monster.size}\r\n                        checked={this.state.filter.size}\r\n                        changeValue={value => this.toggleMatch('size')}\r\n                    />\r\n                    <Checkbox\r\n                        label={'type ' + this.state.monster.category}\r\n                        checked={this.state.filter.type}\r\n                        changeValue={value => this.toggleMatch('type')}\r\n                    />\r\n                    <Checkbox\r\n                        label={this.state.monster.tag ? 'subtype ' + this.state.monster.tag : 'subtype'}\r\n                        checked={this.state.filter.subtype}\r\n                        disabled={!this.state.monster.tag}\r\n                        changeValue={value => this.toggleMatch('subtype')}\r\n                    />\r\n                    <Checkbox\r\n                        label={this.state.monster.alignment ? 'alignment ' + this.state.monster.alignment : 'alignment'}\r\n                        checked={this.state.filter.alignment}\r\n                        disabled={!this.state.monster.alignment}\r\n                        changeValue={value => this.toggleMatch('alignment')}\r\n                    />\r\n                    <Checkbox\r\n                        label={'challenge rating ' + Utils.challenge(this.state.monster.challenge)}\r\n                        checked={this.state.filter.challenge}\r\n                        changeValue={value => this.toggleMatch('challenge')}\r\n                    />\r\n                    <div className='divider' />\r\n                    <button className={monsters.length < 2 ? 'disabled' : ''} onClick={() => this.geneSplice(monsters)}>build random monster</button>\r\n                    <div className='divider' />\r\n                    {similar}\r\n                </div>\r\n            );\r\n        } else {\r\n            filterContent = (\r\n                <div>\r\n                    {similar}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className='section'>\r\n                <div className='card'>\r\n                    <div className='heading'>\r\n                        <div className='title'>similar monsters</div>\r\n                        <img className={this.state.showFilter ? 'image rotate' : 'image'} src={arrow} alt='arrow' onClick={() => this.toggleFilter()} />\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        {filterContent}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getMonsterCards(monsters: Monster[]) {\r\n        const sorted = Utils.sort(monsters);\r\n        const monsterCards = sorted.map(m => (\r\n            <div className='section' key={m.id}>\r\n                <MonsterCard\r\n                    combatant={m}\r\n                    mode={'template ' + this.state.page}\r\n                    copyTrait={trait => this.copyTrait(trait)}\r\n                />\r\n            </div>\r\n        ));\r\n\r\n        return monsterCards;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    public render() {\r\n        try {\r\n            const pages = [\r\n                {\r\n                    id: 'overview',\r\n                    text: 'overview'\r\n                },\r\n                {\r\n                    id: 'abilities',\r\n                    text: 'abilities'\r\n                },\r\n                {\r\n                    id: 'combat',\r\n                    text: 'combat'\r\n                },\r\n                {\r\n                    id: 'actions',\r\n                    text: 'actions'\r\n                }\r\n            ];\r\n\r\n            let monsters: Monster[] = [];\r\n            if (this.props.showMonsters) {\r\n                monsters = this.getMonsters();\r\n            }\r\n\r\n            let content = null;\r\n            switch (this.state.page) {\r\n                case 'overview':\r\n                    const catOptions = CATEGORY_TYPES.map(cat => ({ id: cat, text: cat }));\r\n                    const sizeOptions = SIZE_TYPES.map(size => ({ id: size, text: size }));\r\n\r\n                    content = (\r\n                        <div className='row'>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>name</div>\r\n                                <input type='text' value={this.state.monster.name} onChange={event => this.changeValue('name', event.target.value)} />\r\n                                <div className='subheading'>size</div>\r\n                                <Dropdown\r\n                                    options={sizeOptions}\r\n                                    selectedID={this.state.monster.size}\r\n                                    select={optionID => this.changeValue('size', optionID)}\r\n                                />\r\n                                <div className='subheading'>type</div>\r\n                                <Dropdown\r\n                                    options={catOptions}\r\n                                    selectedID={this.state.monster.category}\r\n                                    select={optionID => this.changeValue('category', optionID)}\r\n                                />\r\n                                <div className='subheading'>subtype</div>\r\n                                <input type='text' value={this.state.monster.tag} onChange={event => this.changeValue('tag', event.target.value)} />\r\n                                <div className='subheading'>alignment</div>\r\n                                <input type='text' value={this.state.monster.alignment} onChange={event => this.changeValue('alignment', event.target.value)} />\r\n                            </div>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>challenge rating</div>\r\n                                <Spin\r\n                                    source={this.state.monster}\r\n                                    name='challenge'\r\n                                    display={value => Utils.challenge(value)}\r\n                                    nudgeValue={delta => this.nudgeValue('challenge', delta)}\r\n                                />\r\n                                <div className='subheading'>speed</div>\r\n                                <input type='text' value={this.state.monster.speed} onChange={event => this.changeValue('speed', event.target.value)} />\r\n                                <div className='subheading'>senses</div>\r\n                                <input type='text' value={this.state.monster.senses} onChange={event => this.changeValue('senses', event.target.value)} />\r\n                                <div className='subheading'>languages</div>\r\n                                <input type='text' value={this.state.monster.languages} onChange={event => this.changeValue('languages', event.target.value)} />\r\n                                <div className='subheading'>equipment</div>\r\n                                <input type='text' value={this.state.monster.equipment} onChange={event => this.changeValue('equipment', event.target.value)} />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                    break;\r\n                case 'abilities':\r\n                    content = (\r\n                        <div className='row'>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>ability scores</div>\r\n                                <AbilityScorePanel\r\n                                    edit={true}\r\n                                    combatant={this.state.monster}\r\n                                    nudgeValue={(source, type, delta) => this.nudgeValue(type, delta)}\r\n                                />\r\n                            </div>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>saving throws</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.savingThrows}\r\n                                    onChange={event => this.changeValue('savingThrows', event.target.value)}\r\n                                />\r\n                                <div className='subheading'>skills</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.skills}\r\n                                    onChange={event => this.changeValue('skills', event.target.value)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                    break;\r\n                case 'combat':\r\n                    content = (\r\n                        <div className='row'>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>armor class</div>\r\n                                <Spin\r\n                                    source={this.state.monster}\r\n                                    name='ac'\r\n                                    nudgeValue={delta => this.nudgeValue('ac', delta)}\r\n                                />\r\n                                <div className='subheading'>hit dice</div>\r\n                                <Spin\r\n                                    source={this.state.monster}\r\n                                    name='hitDice'\r\n                                    display={value => value + 'd' + Utils.hitDieType(this.state.monster.size)}\r\n                                    nudgeValue={delta => this.nudgeValue('hitDice', delta)}\r\n                                />\r\n                                <div className='subheading'>hit points</div>\r\n                                <div className='hp-value'>{this.state.monster.hpMax} hp</div>\r\n                            </div>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>damage resistances</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.damage.resist}\r\n                                    onChange={event => this.changeValue('damage.resist', event.target.value)}\r\n                                />\r\n                                <div className='subheading'>damage vulnerabilities</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.damage.vulnerable}\r\n                                    onChange={event => this.changeValue('damage.vulnerable', event.target.value)}\r\n                                />\r\n                                <div className='subheading'>damage immunities</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.damage.immune}\r\n                                    onChange={event => this.changeValue('damage.immune', event.target.value)}\r\n                                />\r\n                                <div className='subheading'>condition immunities</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.conditionImmunities}\r\n                                    onChange={event => this.changeValue('conditionImmunities', event.target.value)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                    break;\r\n                case 'actions':\r\n                    content = (\r\n                        <TraitsPanel\r\n                            combatant={this.state.monster}\r\n                            mode='edit'\r\n                            addTrait={type => this.addTrait(type)}\r\n                            removeTrait={trait => this.removeTrait(trait)}\r\n                            changeTrait={(trait, type, value) => this.changeTrait(trait, type, value)}\r\n                        />\r\n                    );\r\n                    break;\r\n                default:\r\n                    // Do nothing\r\n                    break;\r\n            }\r\n\r\n            let help = null;\r\n            if (this.props.showMonsters && (monsters.length > 1)) {\r\n                let selector = null;\r\n                if (this.getHelpOptionsForPage(this.state.page).length > 1) {\r\n                    const options = this.getHelpOptionsForPage(this.state.page).map(s => {\r\n                        return {\r\n                            id: s,\r\n                            text: s\r\n                        };\r\n                    });\r\n                    selector = (\r\n                        <Selector\r\n                            tabs={false}\r\n                            options={options}\r\n                            selectedID={this.state.helpSection}\r\n                            select={optionID => this.setHelpSection(optionID)}\r\n                        />\r\n                    );\r\n                }\r\n\r\n                help = (\r\n                    <div className='monster-help'>\r\n                        <div className='subheading'>information from similar monsters</div>\r\n                        {selector}\r\n                        {this.getHelpSection(monsters)}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            let monsterList = null;\r\n            if (this.props.showMonsters) {\r\n                monsterList = (\r\n                    <div className='columns small-4 medium-4 large-4 scrollable list-column'>\r\n                        {this.getFilterCard(monsters)}\r\n                        {this.getMonsterCards(monsters)}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='row' style={{ height: '100%', margin: '0 -15px' }}>\r\n                    <div\r\n                        className={\r\n                            this.props.showMonsters\r\n                            ? 'columns small-8 medium-8 large-8 scrollable'\r\n                            : 'columns small-12 medium-12 large-12 scrollable'\r\n                        }\r\n                        style={{ transition: 'none' }}\r\n                    >\r\n                        <div className='section'>\r\n                            <Selector\r\n                                tabs={true}\r\n                                options={pages}\r\n                                selectedID={this.state.page}\r\n                                select={optionID => this.setPage(optionID as 'overview' | 'abilities' | 'combat' | 'actions')}\r\n                            />\r\n                            {content}\r\n                            {help}\r\n                        </div>\r\n                    </div>\r\n                    {monsterList}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Encounter } from '../../models/encounter';\r\nimport { MonsterGroup } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\ninterface Props {\r\n    view: string;\r\n    blur: boolean;\r\n    library: MonsterGroup[];\r\n    parties: Party[];\r\n    encounters: Encounter[];\r\n    setView: (view: string) => void;\r\n}\r\n\r\nexport default class Navbar extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const partiesStyle = this.props.view === 'parties' ? 'navigator-item selected' : 'navigator-item';\r\n            const libraryStyle = this.props.view === 'library' ? 'navigator-item selected' : 'navigator-item';\r\n            let encounterStyle = this.props.view === 'encounter' ? 'navigator-item selected' : 'navigator-item';\r\n            const mapStyle = this.props.view === 'maps' ? 'navigator-item selected' : 'navigator-item';\r\n            let combatStyle = this.props.view === 'combat' ? 'navigator-item selected' : 'navigator-item';\r\n\r\n            const encountersEnabled = this.props.library.length !== 0;\r\n            const combatEnabled = (this.props.parties.length !== 0) && (this.props.encounters.length !== 0);\r\n            if (!encountersEnabled) {\r\n                encounterStyle += ' disabled';\r\n            }\r\n            if (!combatEnabled) {\r\n                combatStyle += ' disabled';\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.blur ? 'navbar blur' : 'navbar'}>\r\n                    <div className={partiesStyle} onClick={() => this.props.setView('parties')}>player characters</div>\r\n                    <div className={libraryStyle} onClick={() => this.props.setView('library')}>monster library</div>\r\n                    <div className={encounterStyle} onClick={() => encountersEnabled ? this.props.setView('encounter') : null}>encounter builder</div>\r\n                    <div className={mapStyle} onClick={() => this.props.setView('maps')}>map folios</div>\r\n                    <div className={combatStyle} onClick={() => combatEnabled ? this.props.setView('combat') : null}>combat manager</div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport cog from '../../resources/images/settings.svg';\r\n\r\ninterface Props {\r\n    actions: JSX.Element | null;\r\n    blur: boolean;\r\n    openHome: () => void;\r\n    openAbout: () => void;\r\n}\r\n\r\nexport default class Titlebar extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div className={this.props.blur ? 'titlebar blur' : 'titlebar'}>\r\n                    <div className='app-name' onClick={() => this.props.openHome()}>dojo</div>\r\n                    {this.props.actions}\r\n                    <img className='settings-icon' src={cog} title='about' alt='about' onClick={() => this.props.openAbout()} />\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Factory from '../utils/factory';\r\nimport Utils from '../utils/utils';\r\n\r\nimport { Combat, Combatant, CombatSetup, Notification } from '../models/combat';\r\nimport { Condition } from '../models/condition';\r\nimport { Encounter, EncounterSlot, EncounterWave } from '../models/encounter';\r\nimport { Map, MapFolio } from '../models/map-folio';\r\nimport { Monster, MonsterGroup, Trait } from '../models/monster-group';\r\nimport { Party, PC } from '../models/party';\r\n\r\nimport CombatManagerScreen from './screens/combat-manager-screen';\r\nimport EncounterBuilderScreen from './screens/encounter-builder-screen';\r\nimport HomeScreen from './screens/home-screen';\r\nimport MapFoliosScreen from './screens/map-folios-screen';\r\nimport MonsterLibraryScreen from './screens/monster-library-screen';\r\nimport PartiesScreen from './screens/parties-screen';\r\n\r\nimport AboutModal from './modals/about-modal';\r\nimport CombatStartModal from './modals/combat-start-modal';\r\nimport ConditionModal from './modals/condition-modal';\r\nimport DemographicsModal from './modals/demographics-modal';\r\nimport MapEditorModal from './modals/map-editor-modal';\r\nimport MonsterEditorModal from './modals/monster-editor-modal';\r\n\r\nimport Navbar from './panels/navbar';\r\nimport Titlebar from './panels/titlebar';\r\n\r\nimport Checkbox from './controls/checkbox';\r\n\r\nimport close from '../resources/images/close-black.svg';\r\n\r\nimport monsters from '../resources/data/monsters.json';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    // No props; this is the root component\r\n}\r\n\r\ninterface State {\r\n    view: string;\r\n    options: {\r\n        showHelp: boolean;\r\n    };\r\n\r\n    parties: Party[];\r\n    library: MonsterGroup[];\r\n    encounters: Encounter[];\r\n    mapFolios: MapFolio[];\r\n    combats: Combat[];\r\n\r\n    selectedPartyID: string | null;\r\n    selectedMonsterGroupID: string | null;\r\n    selectedEncounterID: string | null;\r\n    selectedMapFolioID: string | null;\r\n    selectedCombatID: string | null;\r\n\r\n    modal: any;\r\n\r\n    libraryFilter: string;\r\n}\r\n\r\nexport default class Dojo extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            view: 'home',\r\n            options: {\r\n                showHelp: true\r\n            },\r\n            parties: [],\r\n            library: [],\r\n            encounters: [],\r\n            mapFolios: [],\r\n            combats: [],\r\n            selectedPartyID: null,\r\n            selectedMonsterGroupID: null,\r\n            selectedEncounterID: null,\r\n            selectedMapFolioID: null,\r\n            selectedCombatID: null,\r\n            modal: null,\r\n            libraryFilter: ''\r\n        };\r\n\r\n        try {\r\n            let data: State | null = null;\r\n\r\n            try {\r\n                const json = window.localStorage.getItem('data');\r\n                if (json) {\r\n                    data = JSON.parse(json);\r\n                }\r\n            } catch (ex) {\r\n                console.error('Could not parse JSON: ', ex);\r\n                data = null;\r\n            }\r\n\r\n            if (data !== null) {\r\n                if (!data.mapFolios) {\r\n                    data.mapFolios = [];\r\n                    data.selectedMapFolioID = null;\r\n                }\r\n\r\n                data.encounters.forEach(enc => {\r\n                    if (!enc.waves) {\r\n                        enc.waves = [];\r\n                    }\r\n                });\r\n\r\n                data.combats.forEach(combat => {\r\n                    if (!combat.notifications) {\r\n                        combat.notifications = [];\r\n                    }\r\n                    combat.combatants.forEach(c => {\r\n                        if (c.altitude === undefined) {\r\n                            c.altitude = 0;\r\n                        }\r\n                    });\r\n                });\r\n\r\n                data.view = 'home';\r\n                data.modal = null;\r\n                data.libraryFilter = '';\r\n\r\n                this.state = data;\r\n            }\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n\r\n    public componentDidUpdate() {\r\n        let json = null;\r\n        try {\r\n            json = JSON.stringify(this.state);\r\n        } catch (ex) {\r\n            console.error('Could not stringify data: ', ex);\r\n            json = null;\r\n        }\r\n\r\n        if (json !== null) {\r\n            window.localStorage.setItem('data', json);\r\n        }\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////////\r\n    // Party screen\r\n\r\n    private addParty() {\r\n        const party = Factory.createParty();\r\n        party.name = 'new party';\r\n        const parties: Party[] = ([] as Party[]).concat(this.state.parties, [party]);\r\n        Utils.sort(parties);\r\n        this.setState({\r\n            parties: parties,\r\n            selectedPartyID: party.id\r\n        });\r\n    }\r\n\r\n    private removeParty() {\r\n        const party = this.getParty(this.state.selectedPartyID);\r\n        if (party) {\r\n            const index = this.state.parties.indexOf(party);\r\n            this.state.parties.splice(index, 1);\r\n            this.setState({\r\n                parties: this.state.parties,\r\n                selectedPartyID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private addPC() {\r\n        const party = this.getParty(this.state.selectedPartyID);\r\n        if (party) {\r\n            const pc = Factory.createPC();\r\n            pc.name = 'new pc';\r\n            party.pcs.push(pc);\r\n            this.setState({\r\n                parties: this.state.parties\r\n            });\r\n        }\r\n    }\r\n\r\n    private removePC(pc: PC) {\r\n        const party = this.getParty(this.state.selectedPartyID);\r\n        if (party) {\r\n            const index = party.pcs.indexOf(pc);\r\n            party.pcs.splice(index, 1);\r\n            this.setState({\r\n                parties: this.state.parties\r\n            });\r\n        }\r\n    }\r\n\r\n    private sortPCs() {\r\n        const party = this.getParty(this.state.selectedPartyID);\r\n        if (party) {\r\n            Utils.sort(party.pcs);\r\n            this.setState({\r\n                parties: this.state.parties\r\n            });\r\n        }\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////////\r\n    // Library screen\r\n\r\n    private addMonsterGroup() {\r\n        const group = Factory.createMonsterGroup();\r\n        group.name = 'new group';\r\n        const library = ([] as MonsterGroup[]).concat(this.state.library, [group]);\r\n        Utils.sort(library);\r\n        this.setState({\r\n            library: library,\r\n            selectedMonsterGroupID: group.id\r\n        });\r\n    }\r\n\r\n    private removeMonsterGroup() {\r\n        const group = this.getMonsterGroup(this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            const index = this.state.library.indexOf(group);\r\n            this.state.library.splice(index, 1);\r\n            this.setState({\r\n                library: this.state.library,\r\n                selectedMonsterGroupID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private addMonster() {\r\n        const monster = Factory.createMonster();\r\n        monster.name = 'new monster';\r\n        const group = this.getMonsterGroup(this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            group.monsters.push(monster);\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    private removeMonster(monster: Monster) {\r\n        const group = this.getMonsterGroup(this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            const index = group.monsters.indexOf(monster);\r\n            group.monsters.splice(index, 1);\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    private sortMonsters() {\r\n        const group = this.getMonsterGroup(this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            Utils.sort(group.monsters);\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    private moveToGroup(monster: Monster, groupID: string) {\r\n        const sourceGroup = this.findMonster(monster);\r\n        if (sourceGroup) {\r\n            const index = sourceGroup.monsters.indexOf(monster);\r\n\r\n            sourceGroup.monsters.splice(index, 1);\r\n            const group = this.getMonsterGroup(groupID);\r\n            if (group) {\r\n                group.monsters.push(monster);\r\n                Utils.sort(group.monsters);\r\n\r\n                this.setState({\r\n                    library: this.state.library\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private editMonster(monster: Monster) {\r\n        const copy = JSON.parse(JSON.stringify(monster));\r\n        this.setState({\r\n            modal: {\r\n                type: 'monster',\r\n                monster: copy,\r\n                showMonsters: false\r\n            }\r\n        });\r\n    }\r\n\r\n    private saveMonster() {\r\n        const group = this.getMonsterGroup(this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            const original = group.monsters.find(m => m.id === this.state.modal.monster.id);\r\n            if (original) {\r\n                const index = group.monsters.indexOf(original);\r\n                group.monsters[index] = this.state.modal.monster;\r\n                this.setState({\r\n                    library: this.state.library,\r\n                    modal: null\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private toggleShowSimilarMonsters() {\r\n        // eslint-disable-next-line\r\n        this.state.modal.showMonsters = !this.state.modal.showMonsters;\r\n        this.setState({\r\n            modal: this.state.modal\r\n        });\r\n    }\r\n\r\n    private openDemographics() {\r\n        this.setState({\r\n            modal: {\r\n                type: 'demographics'\r\n            }\r\n        });\r\n    }\r\n\r\n    private cloneMonster(monster: Monster, name: string) {\r\n        const group = this.findMonster(monster);\r\n        if (group) {\r\n            const clone = {\r\n                id: Utils.guid(),\r\n                type: 'monster',\r\n                name: name || monster.name + ' copy',\r\n                size: monster.size,\r\n                category: monster.category,\r\n                tag: monster.tag,\r\n                alignment: monster.alignment,\r\n                challenge: monster.challenge,\r\n                abilityScores: {\r\n                    str: monster.abilityScores.str,\r\n                    dex: monster.abilityScores.dex,\r\n                    con: monster.abilityScores.con,\r\n                    int: monster.abilityScores.int,\r\n                    wis: monster.abilityScores.wis,\r\n                    cha: monster.abilityScores.cha\r\n                },\r\n                ac: monster.ac,\r\n                hpMax: monster.hpMax,\r\n                hpTemp: monster.hpTemp,\r\n                hitDice: monster.hitDice,\r\n                damage: {\r\n                    resist: monster.damage.resist,\r\n                    vulnerable: monster.damage.vulnerable,\r\n                    immune: monster.damage.immune\r\n                },\r\n                savingThrows: monster.savingThrows,\r\n                speed: monster.speed,\r\n                skills: monster.skills,\r\n                senses: monster.senses,\r\n                languages: monster.languages,\r\n                equipment: monster.equipment,\r\n                traits: monster.traits.map(trait => {\r\n                    return {\r\n                        id: Utils.guid(),\r\n                        name: trait.name,\r\n                        usage: trait.usage,\r\n                        type: trait.type,\r\n                        text: trait.text\r\n                    };\r\n                }),\r\n                conditionImmunities: monster.conditionImmunities\r\n            };\r\n\r\n            group.monsters.push(clone);\r\n            Utils.sort(group.monsters);\r\n\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    private addOpenGameContent() {\r\n        monsters.forEach((data: any) => {\r\n            try {\r\n                if (data.name) {\r\n                    const monster = Factory.createMonster();\r\n\r\n                    monster.type = 'monster';\r\n                    monster.name = data.name;\r\n                    monster.size = data.size.toLowerCase();\r\n                    monster.category = data.type;\r\n                    monster.tag = data.subtype;\r\n                    monster.alignment = data.alignment;\r\n                    monster.challenge = Utils.parseChallenge(data.challenge_rating);\r\n                    monster.ac = data.armor_class;\r\n                    monster.hpMax = data.hit_points;\r\n                    monster.speed = data.speed;\r\n                    monster.senses = data.senses;\r\n                    monster.languages = data.languages;\r\n\r\n                    const index = data.hit_dice.indexOf('d');\r\n                    monster.hitDice = parseInt(data.hit_dice.substring(0, index), 10);\r\n\r\n                    monster.abilityScores.str = data.strength;\r\n                    monster.abilityScores.dex = data.dexterity;\r\n                    monster.abilityScores.con = data.constitution;\r\n                    monster.abilityScores.int = data.intelligence;\r\n                    monster.abilityScores.wis = data.wisdom;\r\n                    monster.abilityScores.cha = data.charisma;\r\n\r\n                    monster.damage.resist = data.damage_resistances;\r\n                    monster.damage.vulnerable = data.damage_vulnerabilities;\r\n                    monster.damage.immune = data.damage_immunities;\r\n                    monster.conditionImmunities = data.condition_immunities;\r\n\r\n                    const saves = [\r\n                        {\r\n                            field: 'strength_save',\r\n                            text: 'Strength'\r\n                        },\r\n                        {\r\n                            field: 'dexterity_save',\r\n                            text: 'Dexterity'\r\n                        },\r\n                        {\r\n                            field: 'constitution_save',\r\n                            text: 'Constitution'\r\n                        },\r\n                        {\r\n                            field: 'intelligence_save',\r\n                            text: 'Intelligence'\r\n                        },\r\n                        {\r\n                            field: 'wisdom_save',\r\n                            text: 'Wisdom'\r\n                        },\r\n                        {\r\n                            field: 'charisma_save',\r\n                            text: 'Charisma'\r\n                        }\r\n                    ];\r\n                    saves.forEach(save => {\r\n                        if (data[save.field]) {\r\n                            const str = save.text + ' ' + data[save.field];\r\n                            monster.savingThrows += monster.savingThrows === '' ? str : ', ' + str;\r\n                        }\r\n                    });\r\n\r\n                    const skills = [\r\n                        {\r\n                            field: 'acrobatics',\r\n                            text: 'Acrobatics'\r\n                        },\r\n                        {\r\n                            field: 'animal_handling',\r\n                            text: 'Animal handling'\r\n                        },\r\n                        {\r\n                            field: 'arcana',\r\n                            text: 'Arcana'\r\n                        },\r\n                        {\r\n                            field: 'athletics',\r\n                            text: 'Athletics'\r\n                        },\r\n                        {\r\n                            field: 'deception',\r\n                            text: 'Deception'\r\n                        },\r\n                        {\r\n                            field: 'history',\r\n                            text: 'History'\r\n                        },\r\n                        {\r\n                            field: 'insight',\r\n                            text: 'Insight'\r\n                        },\r\n                        {\r\n                            field: 'intimidation',\r\n                            text: 'Intimidation'\r\n                        },\r\n                        {\r\n                            field: 'investigation',\r\n                            text: 'Investigation'\r\n                        },\r\n                        {\r\n                            field: 'medicine',\r\n                            text: 'Medicine'\r\n                        },\r\n                        {\r\n                            field: 'nature',\r\n                            text: 'Nature'\r\n                        },\r\n                        {\r\n                            field: 'perception',\r\n                            text: 'Perception'\r\n                        },\r\n                        {\r\n                            field: 'performance',\r\n                            text: 'Performance'\r\n                        },\r\n                        {\r\n                            field: 'persuasion',\r\n                            text: 'Persuasion'\r\n                        },\r\n                        {\r\n                            field: 'religion',\r\n                            text: 'Religion'\r\n                        },\r\n                        {\r\n                            field: 'sleight_of_hand',\r\n                            text: 'Sleight of hand'\r\n                        },\r\n                        {\r\n                            field: 'stealth',\r\n                            text: 'Stealth'\r\n                        },\r\n                        {\r\n                            field: 'survival',\r\n                            text: 'Survival'\r\n                        }\r\n                    ];\r\n                    skills.forEach(skill => {\r\n                        if (data[skill.field]) {\r\n                            const str = skill.text + ' ' + data[skill.field];\r\n                            monster.skills += monster.skills === '' ? str : ', ' + str;\r\n                        }\r\n                    });\r\n\r\n                    if (data.special_abilities) {\r\n                        data.special_abilities.forEach((rawTrait: any) => {\r\n                            const trait = this.buildTrait(rawTrait, 'trait');\r\n                            monster.traits.push(trait);\r\n                        });\r\n                    }\r\n                    if (data.actions) {\r\n                        data.actions.forEach((rawTrait: any) => {\r\n                            const trait = this.buildTrait(rawTrait, 'action');\r\n                            monster.traits.push(trait);\r\n                        });\r\n                    }\r\n                    if (data.legendary_actions) {\r\n                        data.legendary_actions.forEach((rawTrait: any) => {\r\n                            const trait = this.buildTrait(rawTrait, 'legendary');\r\n                            monster.traits.push(trait);\r\n                        });\r\n                    }\r\n\r\n                    let groupName = monster.tag;\r\n                    if (groupName === '') {\r\n                        groupName = monster.category;\r\n                    }\r\n                    if (groupName.indexOf('swarm') === 0) {\r\n                        groupName = 'swarm';\r\n                    }\r\n                    if (groupName === 'any race') {\r\n                        groupName = 'npc';\r\n                    }\r\n\r\n                    let group = this.getMonsterGroupByName(groupName);\r\n                    if (!group) {\r\n                        group = {\r\n                            id: Utils.guid(),\r\n                            name: groupName,\r\n                            monsters: []\r\n                        };\r\n                        this.state.library.push(group);\r\n                    }\r\n                    group.monsters.push(monster);\r\n                }\r\n            } catch (e) {\r\n                console.error(e);\r\n            }\r\n        });\r\n\r\n        Utils.sort(this.state.library);\r\n\r\n        this.setState({\r\n            view: 'library',\r\n            library: this.state.library\r\n        });\r\n    }\r\n\r\n    private buildTrait(rawTrait: any, type: 'trait' | 'action' | 'legendary' | 'lair' | 'regional'): Trait {\r\n        let name = '';\r\n        let usage = '';\r\n\r\n        const openBracket = rawTrait.name.indexOf('(');\r\n        if (openBracket === -1) {\r\n            name = rawTrait.name;\r\n        } else {\r\n            const closeBracket = rawTrait.name.indexOf(')');\r\n            name = rawTrait.name.substring(0, openBracket - 1);\r\n            usage = rawTrait.name.substring(openBracket + 1, closeBracket);\r\n        }\r\n\r\n        return {\r\n            id: Utils.guid(),\r\n            type: type,\r\n            name: name,\r\n            usage: usage,\r\n            text: rawTrait.desc\r\n        };\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////////\r\n    // Encounter screen\r\n\r\n    private addEncounter() {\r\n        const encounter = Factory.createEncounter();\r\n        encounter.name = 'new encounter';\r\n        const encounters = ([] as Encounter[]).concat(this.state.encounters, [encounter]);\r\n        Utils.sort(encounters);\r\n\r\n        this.setState({\r\n            encounters: encounters,\r\n            selectedEncounterID: encounter.id\r\n        });\r\n    }\r\n\r\n    private removeEncounter() {\r\n        const encounter = this.getEncounter(this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            const index = this.state.encounters.indexOf(encounter);\r\n            this.state.encounters.splice(index, 1);\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters,\r\n                selectedEncounterID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private addEncounterSlot(monster: Monster, waveID: string | null) {\r\n        const group = this.findMonster(monster);\r\n        if (group) {\r\n            const slot = Factory.createEncounterSlot();\r\n            slot.monsterGroupName = group.name;\r\n            slot.monsterName = monster.name;\r\n            const encounter = this.getEncounter(this.state.selectedEncounterID);\r\n            if (encounter) {\r\n                if (waveID !== null) {\r\n                    const wave = encounter.waves.find(w => w.id === waveID);\r\n                    if (wave) {\r\n                        wave.slots.push(slot);\r\n                        this.sortEncounterSlots(wave);\r\n                    }\r\n                } else {\r\n                    encounter.slots.push(slot);\r\n                    this.sortEncounterSlots(encounter);\r\n                }\r\n\r\n                this.setState({\r\n                    encounters: this.state.encounters\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeEncounterSlot(slot: EncounterSlot, waveID: string | null) {\r\n        const encounter = this.getEncounter(this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            if (waveID) {\r\n                const wave = encounter.waves.find(w => w.id === waveID);\r\n                if (wave) {\r\n                    const index = wave.slots.indexOf(slot);\r\n                    wave.slots.splice(index, 1);\r\n                }\r\n            } else {\r\n                const n = encounter.slots.indexOf(slot);\r\n                encounter.slots.splice(n, 1);\r\n            }\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters\r\n            });\r\n        }\r\n    }\r\n\r\n    private sortEncounterSlots(slotContainer: { slots: EncounterSlot[] }) {\r\n        slotContainer.slots.sort((a, b) => {\r\n            const aName = a.monsterName.toLowerCase();\r\n            const bName = b.monsterName.toLowerCase();\r\n            if (aName < bName) { return -1; }\r\n            if (aName > bName) { return 1; }\r\n            return 0;\r\n        });\r\n    }\r\n\r\n    private addWaveToEncounter() {\r\n        const encounter = this.getEncounter(this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            const wave = Factory.createEncounterWave();\r\n            wave.name = 'wave ' + (encounter.waves.length + 2);\r\n            encounter.waves.push(wave);\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters\r\n            });\r\n        }\r\n    }\r\n\r\n    private removeWave(wave: EncounterWave) {\r\n        const encounter = this.getEncounter(this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            const index = encounter.waves.indexOf(wave);\r\n            encounter.waves.splice(index, 1);\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters\r\n            });\r\n        }\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////////\r\n    // Map screen\r\n\r\n    private addMapFolio() {\r\n        const folio = Factory.createMapFolio();\r\n        folio.name = 'new folio';\r\n        const folios = ([] as MapFolio[]).concat(this.state.mapFolios, [folio]);\r\n        Utils.sort(folios);\r\n\r\n        this.setState({\r\n            mapFolios: folios,\r\n            selectedMapFolioID: folio.id\r\n        });\r\n    }\r\n\r\n    private removeMapFolio() {\r\n        const folio = this.getMapFolio(this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            const index = this.state.mapFolios.indexOf(folio);\r\n            this.state.mapFolios.splice(index, 1);\r\n\r\n            this.setState({\r\n                mapFolios: this.state.mapFolios,\r\n                selectedMapFolioID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private addMap() {\r\n        const folio = this.getMapFolio(this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            const map = Factory.createMap();\r\n            map.name = 'new map';\r\n            folio.maps.push(map);\r\n\r\n            this.setState({\r\n                mapFolios: this.state.mapFolios\r\n            });\r\n        }\r\n    }\r\n\r\n    private editMap(map: Map) {\r\n        const copy = JSON.parse(JSON.stringify(map));\r\n        this.setState({\r\n            modal: {\r\n                type: 'map',\r\n                map: copy\r\n            }\r\n        });\r\n    }\r\n\r\n    private saveMap() {\r\n        const folio = this.getMapFolio(this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            const original = folio.maps.find(m => m.id === this.state.modal.map.id);\r\n            if (original) {\r\n                const index = folio.maps.indexOf(original);\r\n                folio.maps[index] = this.state.modal.map;\r\n                this.setState({\r\n                    mapFolios: this.state.mapFolios,\r\n                    modal: null\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeMap(map: Map) {\r\n        const folio = this.getMapFolio(this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            const index = folio.maps.indexOf(map);\r\n            folio.maps.splice(index, 1);\r\n            this.setState({\r\n                mapFolios: this.state.mapFolios\r\n            });\r\n        }\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////////\r\n    // Combat screen\r\n\r\n    private createCombat() {\r\n        const party = this.state.parties.length === 1 ? this.state.parties[0] : null;\r\n        const encounter = this.state.encounters.length === 1 ? this.state.encounters[0] : null;\r\n\r\n        const setup = Factory.createCombatSetup();\r\n        setup.partyID = party ? party.id : null;\r\n        setup.encounterID = encounter ? encounter.id : null;\r\n        if (encounter) {\r\n            setup.monsterNames = Utils.getMonsterNames(encounter);\r\n        }\r\n\r\n        this.setState({\r\n            modal: {\r\n                type: 'combat-start',\r\n                combatSetup: setup\r\n            }\r\n        });\r\n    }\r\n\r\n    private startCombat() {\r\n        const combatSetup: CombatSetup = this.state.modal.combatSetup;\r\n        const party = this.getParty(combatSetup.partyID);\r\n        const encounter = this.getEncounter(combatSetup.encounterID);\r\n        if (party && encounter) {\r\n            const partyName = party.name || 'unnamed party';\r\n            const encounterName = encounter.name || 'unnamed encounter';\r\n\r\n            const combat = Factory.createCombat();\r\n            combat.name = partyName + ' vs ' + encounterName;\r\n            combat.encounterID = encounter.id;\r\n\r\n            // Add a copy of each PC to the encounter\r\n            party.pcs.filter(pc => pc.active).forEach(pc => {\r\n                const combatant = JSON.parse(JSON.stringify(pc));\r\n\r\n                combatant.current = false;\r\n                combatant.pending = true;\r\n                combatant.active = false;\r\n                combatant.defeated = false;\r\n\r\n                combatant.displayName = pc.name;\r\n                combatant.initiative = 10;\r\n                combatant.hp = null;\r\n                combatant.conditions = [];\r\n                combatant.altitude = 0;\r\n\r\n                combat.combatants.push(combatant);\r\n            });\r\n\r\n            encounter.slots.forEach(slot => {\r\n                const monster = this.getMonster(slot.monsterName, slot.monsterGroupName);\r\n                if (monster) {\r\n                    const init = parseInt(Utils.modifier(monster.abilityScores.dex), 10);\r\n                    const groupRoll = Utils.dieRoll();\r\n\r\n                    for (let n = 0; n !== slot.count; ++n) {\r\n                        const singleRoll = Utils.dieRoll();\r\n\r\n                        const combatant = JSON.parse(JSON.stringify(monster));\r\n                        combatant.id = Utils.guid();\r\n\r\n                        combatant.displayName = null;\r\n                        if (combatSetup.monsterNames) {\r\n                            const slotNames = combatSetup.monsterNames.find(names => names.id === slot.id);\r\n                            if (slotNames) {\r\n                                combatant.displayName = slotNames.names[n];\r\n                            }\r\n                        }\r\n\r\n                        switch (combatSetup.encounterInitMode) {\r\n                            case 'manual':\r\n                                combatant.initiative = 10;\r\n                                break;\r\n                            case 'group':\r\n                                combatant.initiative = init + groupRoll;\r\n                                break;\r\n                            case 'individual':\r\n                                combatant.initiative = init + singleRoll;\r\n                                break;\r\n                            default:\r\n                                // Do nothing\r\n                                break;\r\n                        }\r\n\r\n                        combatant.current = false;\r\n                        combatant.pending = (combatSetup.encounterInitMode === 'manual');\r\n                        combatant.active = (combatSetup.encounterInitMode !== 'manual');\r\n                        combatant.defeated = false;\r\n\r\n                        combatant.hp = combatant.hpMax;\r\n                        combatant.conditions = [];\r\n                        combatant.altitude = 0;\r\n\r\n                        combat.combatants.push(combatant);\r\n                    }\r\n                } else {\r\n                    combat.issues.push('unknown monster: ' + slot.monsterName + ' in group ' + slot.monsterGroupName);\r\n                }\r\n            });\r\n\r\n            combat.combatants.forEach(c => c.altitude = 0);\r\n\r\n            this.sortCombatants(combat);\r\n\r\n            if (combatSetup.folioID && combatSetup.mapID) {\r\n                const folio = this.getMapFolio(combatSetup.folioID);\r\n                if (folio) {\r\n                    const map = folio.maps.find(m => m.id === combatSetup.mapID);\r\n                    if (map) {\r\n                        combat.map = JSON.parse(JSON.stringify(map));\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.setState({\r\n                combats: ([] as Combat[]).concat(this.state.combats, [combat]),\r\n                selectedCombatID: combat.id,\r\n                modal: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private openWaveModal() {\r\n        const combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat) {\r\n            const encounter = this.getEncounter(combat.encounterID);\r\n            if (encounter) {\r\n                const setup = Factory.createCombatSetup();\r\n                setup.encounterID = combat.encounterID;\r\n                setup.monsterNames = Utils.getMonsterNames(encounter);\r\n\r\n                this.setState({\r\n                    modal: {\r\n                        type: 'combat-wave',\r\n                        combatSetup: setup\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private pauseCombat() {\r\n        const combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat) {\r\n            combat.timestamp = new Date().toLocaleString();\r\n            this.setState({\r\n                combats: this.state.combats,\r\n                selectedCombatID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private resumeCombat(combat: Combat) {\r\n        this.setState({\r\n            selectedCombatID: combat.id\r\n        });\r\n    }\r\n\r\n    private endCombat() {\r\n        const combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat) {\r\n            const index = this.state.combats.indexOf(combat);\r\n            this.state.combats.splice(index, 1);\r\n            this.setState({\r\n                combats: this.state.combats,\r\n                selectedCombatID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private makeCurrent(combatant: (Combatant & PC) | (Combatant & Monster) | null, newRound: boolean) {\r\n        const combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat) {\r\n            // Handle start-of-turn conditions\r\n            combat.combatants.filter(actor => actor.conditions).forEach(actor => {\r\n                actor.conditions.forEach(c => {\r\n                    if (c.duration) {\r\n                        switch (c.duration.type) {\r\n                            case 'saves':\r\n                                // If it's my condition, and point is START, notify the user\r\n                                if (combat && combatant && (actor.id === combatant.id) && (c.duration.point === 'start')) {\r\n                                    combat.notifications.push({\r\n                                        id: Utils.guid(),\r\n                                        type: 'condition-save',\r\n                                        condition: c,\r\n                                        combatant: combatant as Combatant & Monster\r\n                                    });\r\n                                }\r\n                                break;\r\n                            case 'combatant':\r\n                                // If this refers to me, and point is START, remove it\r\n                                if (combat && combatant && (c.duration.combatantID === combatant.id) && (c.duration.point === 'start')) {\r\n                                    const index = actor.conditions.indexOf(c);\r\n                                    actor.conditions.splice(index, 1);\r\n                                    // Notify the user\r\n                                    combat.notifications.push({\r\n                                        id: Utils.guid(),\r\n                                        type: 'condition-end',\r\n                                        condition: c,\r\n                                        combatant: combatant as Combatant & Monster\r\n                                    });\r\n                                }\r\n                                break;\r\n                            case 'rounds':\r\n                                // If it's my condition, decrement the condition\r\n                                if (combatant && (actor.id === combatant.id)) {\r\n                                    c.duration.count -= 1;\r\n                                }\r\n                                // If it's now at 0, remove it\r\n                                if (c.duration.count === 0) {\r\n                                    const n = actor.conditions.indexOf(c);\r\n                                    actor.conditions.splice(n, 1);\r\n                                    if (combat) {\r\n                                        // Notify the user\r\n                                        combat.notifications.push({\r\n                                            id: Utils.guid(),\r\n                                            type: 'condition-end',\r\n                                            condition: c,\r\n                                            combatant: combatant as Combatant & Monster\r\n                                        });\r\n                                    }\r\n                                }\r\n                                break;\r\n                            default:\r\n                                // Do nothing\r\n                                break;\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n\r\n            combat.combatants.forEach(c => {\r\n                c.current = false;\r\n            });\r\n            if (combatant) {\r\n                combatant.current = true;\r\n            }\r\n\r\n            if (newRound) {\r\n                combat.round += 1;\r\n            }\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private makeActive(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        const combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat) {\r\n            combatant.pending = false;\r\n            combatant.active = true;\r\n            combatant.defeated = false;\r\n\r\n            this.sortCombatants(combat);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private makeDefeated(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        combatant.pending = false;\r\n        combatant.active = false;\r\n        combatant.defeated = true;\r\n\r\n        if (combatant.current) {\r\n            this.endTurn(combatant);\r\n        } else {\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private addWaveToCombat() {\r\n        const combatSetup: CombatSetup = this.state.modal.combat;\r\n        const encounter = this.getEncounter(combatSetup.encounterID);\r\n        const combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combatSetup && encounter && combat) {\r\n            const wave = encounter.waves.find(w => w.id === combatSetup.waveID);\r\n            if (wave) {\r\n                wave.slots.forEach(slot => {\r\n                    const monster = this.getMonster(slot.monsterName, slot.monsterGroupName);\r\n                    if (monster) {\r\n                        const init = parseInt(Utils.modifier(monster.abilityScores.dex), 10);\r\n                        const groupRoll = Utils.dieRoll();\r\n\r\n                        for (let n = 0; n !== slot.count; ++n) {\r\n                            const singleRoll = Utils.dieRoll();\r\n\r\n                            const combatant = JSON.parse(JSON.stringify(monster));\r\n                            combatant.id = Utils.guid();\r\n\r\n                            combatant.displayName = null;\r\n                            if (combatSetup.monsterNames) {\r\n                                const slotNames = combatSetup.monsterNames.find(names => names.id === slot.id);\r\n                                if (slotNames) {\r\n                                    combatant.displayName = slotNames.names[n];\r\n                                }\r\n                            }\r\n\r\n                            switch (combatSetup.encounterInitMode) {\r\n                                case 'manual':\r\n                                    combatant.initiative = 10;\r\n                                    break;\r\n                                case 'group':\r\n                                    combatant.initiative = init + groupRoll;\r\n                                    break;\r\n                                case 'individual':\r\n                                    combatant.initiative = init + singleRoll;\r\n                                    break;\r\n                                default:\r\n                                    // Do nothing\r\n                                    break;\r\n                            }\r\n\r\n                            combatant.current = false;\r\n                            combatant.pending = (this.state.modal.combat.encounterInitMode === 'manual');\r\n                            combatant.active = (this.state.modal.combat.encounterInitMode !== 'manual');\r\n                            combatant.defeated = false;\r\n\r\n                            combatant.hp = combatant.hpMax;\r\n                            combatant.conditions = [];\r\n\r\n                            if (combat) {\r\n                                combat.combatants.push(combatant);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (combat) {\r\n                            const issue = 'unknown monster: ' + slot.monsterName + ' in group ' + slot.monsterGroupName;\r\n                            combat.issues.push(issue);\r\n                        }\r\n                    }\r\n                });\r\n\r\n                this.sortCombatants(combat);\r\n\r\n                this.setState({\r\n                    combats: this.state.combats,\r\n                    modal: null\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeCombatant(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        const combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat) {\r\n            const index = combat.combatants.indexOf(combatant);\r\n            combat.combatants.splice(index, 1);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private mapAdd(combatant: ((Combatant & PC) | (Combatant & Monster)), x: number, y: number) {\r\n        const item = Factory.createMapItem();\r\n        item.id = combatant.id;\r\n        item.type = combatant.type as 'pc' | 'monster';\r\n        item.x = x;\r\n        item.y = y;\r\n        let size = 1;\r\n        if (combatant.type === 'monster') {\r\n            size = Utils.miniSize((combatant as Monster).size);\r\n        }\r\n        item.height = size;\r\n        item.width = size;\r\n\r\n        const combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat && combat.map) {\r\n            combat.map.items.push(item);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private mapMove(combatant: (Combatant & PC) | (Combatant & Monster), dir: string) {\r\n        const combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat && combat.map) {\r\n            const item = combat.map.items.find(i => i.id === combatant.id);\r\n            if (item) {\r\n                switch (dir) {\r\n                    case 'N':\r\n                        item.y -= 1;\r\n                        break;\r\n                    case 'NE':\r\n                        item.x += 1;\r\n                        item.y -= 1;\r\n                        break;\r\n                    case 'E':\r\n                        item.x += 1;\r\n                        break;\r\n                    case 'SE':\r\n                        item.x += 1;\r\n                        item.y += 1;\r\n                        break;\r\n                    case 'S':\r\n                        item.y += 1;\r\n                        break;\r\n                    case 'SW':\r\n                        item.x -= 1;\r\n                        item.y += 1;\r\n                        break;\r\n                    case 'W':\r\n                        item.x -= 1;\r\n                        break;\r\n                    case 'NW':\r\n                        item.x -= 1;\r\n                        item.y -= 1;\r\n                        break;\r\n                    default:\r\n                        // Do nothing\r\n                        break;\r\n                }\r\n\r\n                this.setState({\r\n                    combats: this.state.combats\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private mapRemove(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        const combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat && combat.map) {\r\n            const item = combat.map.items.find(i => i.id === combatant.id);\r\n            if (item) {\r\n                const index = combat.map.items.indexOf(item);\r\n                combat.map.items.splice(index, 1);\r\n\r\n                this.setState({\r\n                    combats: this.state.combats\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private endTurn(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        const combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat) {\r\n            // Handle end-of-turn conditions\r\n            combat.combatants.filter(actor => actor.conditions).forEach(actor => {\r\n                actor.conditions.forEach(c => {\r\n                    if (c.duration) {\r\n                        switch (c.duration.type) {\r\n                            case 'saves':\r\n                                // If it's my condition, and point is END, notify the user\r\n                                if (combat && (actor.id === combatant.id) && (c.duration.point === 'end')) {\r\n                                    const saveNotification = Factory.createNotification();\r\n                                    saveNotification.type = 'condition-save';\r\n                                    saveNotification.condition = c;\r\n                                    saveNotification.combatant = combatant as Combatant & Monster;\r\n                                    combat.notifications.push(saveNotification);\r\n                                }\r\n                                break;\r\n                            case 'combatant':\r\n                                // If this refers to me, and point is END, remove it\r\n                                if (combat && (c.duration.combatantID === combatant.id) && (c.duration.point === 'end')) {\r\n                                    const n = actor.conditions.indexOf(c);\r\n                                    actor.conditions.splice(n, 1);\r\n                                    // Notify the user\r\n                                    const endNotification = Factory.createNotification();\r\n                                    endNotification.type = 'condition-end';\r\n                                    endNotification.condition = c;\r\n                                    endNotification.combatant = combatant as Combatant & Monster;\r\n                                    combat.notifications.push(endNotification);\r\n                                }\r\n                                break;\r\n                            case 'rounds':\r\n                                // We check this at the beginning of each turn, not at the end\r\n                                break;\r\n                            default:\r\n                                // Do nothing\r\n                                break;\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n\r\n            const active = combat.combatants.filter(c => {\r\n                return c.current || (!c.pending && c.active && !c.defeated);\r\n            });\r\n            if (active.length === 0) {\r\n                // There's no-one left in the fight\r\n                this.makeCurrent(null, false);\r\n            } else if ((active.length === 1) && (active[0].defeated)) {\r\n                // The only person in the fight is me, and I'm defeated\r\n                this.makeCurrent(null, false);\r\n            } else {\r\n                let index = active.indexOf(combatant) + 1;\r\n                let newRound = false;\r\n                if (index >= active.length) {\r\n                    index = 0;\r\n                    newRound = true;\r\n                }\r\n                this.makeCurrent(active[index], newRound);\r\n            }\r\n        }\r\n    }\r\n\r\n    private changeHP(combatant: Combatant & Monster, hp: number, temp: number) {\r\n        combatant.hp = hp;\r\n        combatant.hpTemp = temp;\r\n\r\n        this.setState({\r\n            combats: this.state.combats\r\n        });\r\n    }\r\n\r\n    private addCondition(combatant: Combatant & Monster) {\r\n        const combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat) {\r\n            const condition = Factory.createCondition();\r\n            condition.name = 'blinded';\r\n\r\n            this.setState({\r\n                modal: {\r\n                    type: 'condition-add',\r\n                    condition: condition,\r\n                    combatant: combatant,\r\n                    combat: combat\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private addConditionFromModal() {\r\n        this.state.modal.combatant.conditions.push(this.state.modal.condition);\r\n\r\n        this.setState({\r\n            combats: this.state.combats,\r\n            modal: null\r\n        });\r\n    }\r\n\r\n    private editCondition(combatant: Combatant & Monster, condition: Condition) {\r\n        const combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat) {\r\n            this.setState({\r\n                modal: {\r\n                    type: 'condition-edit',\r\n                    condition: condition,\r\n                    combatant: combatant,\r\n                    combat: combat\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private editConditionFromModal() {\r\n        const conditions: Condition[] = this.state.modal.combatant.conditions;\r\n        const original = conditions.find(c => c.id === this.state.modal.condition.id);\r\n        if (original) {\r\n            const index = conditions.indexOf(original);\r\n            // eslint-disable-next-line\r\n            conditions[index] = this.state.modal.condition;\r\n\r\n            this.setState({\r\n                combats: this.state.combats,\r\n                modal: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private removeCondition(combatant: Combatant & Monster, conditionID: string) {\r\n        const condition = combatant.conditions.find(c => c.id === conditionID);\r\n        if (condition) {\r\n            const index = combatant.conditions.indexOf(condition);\r\n            combatant.conditions.splice(index, 1);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private sortCombatants(combat: Combat) {\r\n        combat.combatants.sort((a, b) => {\r\n            // First sort by initiative, descending\r\n            if (a.initiative && b.initiative && (a.initiative < b.initiative)) { return 1; }\r\n            if (a.initiative && b.initiative && (a.initiative > b.initiative)) { return -1; }\r\n            // Then sort by name, ascending\r\n            if (a.name < b.name) { return -1; }\r\n            if (a.name > b.name) { return 1; }\r\n            return 0;\r\n        });\r\n    }\r\n\r\n    private closeNotification(notification: Notification, removeCondition: boolean) {\r\n        const combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat) {\r\n            const index = combat.notifications.indexOf(notification);\r\n            combat.notifications.splice(index, 1);\r\n\r\n            if (removeCondition && notification.combatant && notification.condition) {\r\n                const conditionIndex = notification.combatant.conditions.indexOf(notification.condition);\r\n                notification.combatant.conditions.splice(conditionIndex, 1);\r\n            }\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////////\r\n\r\n    private setView(view: string) {\r\n        this.setState({\r\n            view: view\r\n        });\r\n    }\r\n\r\n    private openAbout() {\r\n        this.setState({\r\n            modal: {\r\n                type: 'about'\r\n            }\r\n        });\r\n    }\r\n\r\n    private closeModal() {\r\n        this.setState({\r\n            modal: null\r\n        });\r\n    }\r\n\r\n    private selectParty(party: Party | null) {\r\n        this.setState({\r\n            selectedPartyID: party ? party.id : null\r\n        });\r\n    }\r\n\r\n    private selectMonsterGroup(group: MonsterGroup | null) {\r\n        this.setState({\r\n            selectedMonsterGroupID: group ? group.id : null\r\n        });\r\n    }\r\n\r\n    private selectEncounter(encounter: Encounter | null) {\r\n        this.setState({\r\n            selectedEncounterID: encounter ? encounter.id : null\r\n        });\r\n    }\r\n\r\n    private selectMapFolio(mapFolio: MapFolio | null) {\r\n        this.setState({\r\n            selectedMapFolioID: mapFolio ? mapFolio.id : null\r\n        });\r\n    }\r\n\r\n    private getParty(id: string | null) {\r\n        return this.state.parties.find(p => p.id === id);\r\n    }\r\n\r\n    private getMonsterGroup(id: string | null) {\r\n        return this.state.library.find(g => g.id === id);\r\n    }\r\n\r\n    private getEncounter(id: string | null) {\r\n        return this.state.encounters.find(e => e.id === id);\r\n    }\r\n\r\n    private getMapFolio(id: string | null) {\r\n        return this.state.mapFolios.find(f => f.id === id);\r\n    }\r\n\r\n    private getCombat(id: string | null) {\r\n        return this.state.combats.find(c => c.id === id);\r\n    }\r\n\r\n    private getMonster(monsterName: string, groupName: string) {\r\n        const group = this.getMonsterGroupByName(groupName);\r\n        if (group) {\r\n            return group.monsters.find(monster => monster.name === monsterName);\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    private getMonsterGroupByName(groupName: string) {\r\n        return this.state.library.find(p => p.name === groupName);\r\n    }\r\n\r\n    private findMonster(monster: Monster) {\r\n        return this.state.library.find(group => group.monsters.includes(monster));\r\n    }\r\n\r\n    private resetAll() {\r\n        this.setState({\r\n            parties: [],\r\n            selectedPartyID: null,\r\n            library: [],\r\n            selectedMonsterGroupID: null,\r\n            encounters: [],\r\n            selectedEncounterID: null,\r\n            mapFolios: [],\r\n            selectedMapFolioID: null,\r\n            combats: [],\r\n            selectedCombatID: null\r\n        });\r\n    }\r\n\r\n    private changeValue(combatant: any, type: string, value: any) {\r\n        switch (type) {\r\n            case 'hp':\r\n                value = Math.min(value, combatant.hpMax);\r\n                value = Math.max(value, 0);\r\n                break;\r\n            case 'hpTemp':\r\n                value = Math.max(value, 0);\r\n                break;\r\n            case 'level':\r\n                value = Math.max(value, 1);\r\n                value = (combatant.player !== undefined) ? Math.min(value, 20) : Math.min(value, 6);\r\n                break;\r\n            case 'count':\r\n                value = Math.max(value, 1);\r\n                break;\r\n            case 'hitDice':\r\n                value = Math.max(value, 1);\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        const tokens = type.split('.');\r\n        let obj = combatant;\r\n        for (let n = 0; n !== tokens.length; ++n) {\r\n            const token = tokens[n];\r\n            if (n === tokens.length - 1) {\r\n                obj[token] = value;\r\n            } else {\r\n                obj = obj[token];\r\n            }\r\n        }\r\n\r\n        Utils.sort(this.state.parties);\r\n        Utils.sort(this.state.library);\r\n        Utils.sort(this.state.encounters);\r\n\r\n        this.setState({\r\n            parties: this.state.parties,\r\n            library: this.state.library,\r\n            encounters: this.state.encounters,\r\n            combats: this.state.combats,\r\n            selectedPartyID: this.state.selectedPartyID,\r\n            selectedMonsterGroupID: this.state.selectedMonsterGroupID,\r\n            selectedEncounterID: this.state.selectedEncounterID,\r\n            selectedCombatID: this.state.selectedCombatID,\r\n            options: this.state.options,\r\n            modal: this.state.modal\r\n        });\r\n    }\r\n\r\n    private nudgeValue(combatant: any, type: string, delta: number) {\r\n        const tokens = type.split('.');\r\n        let obj = combatant;\r\n        for (let n = 0; n !== tokens.length; ++n) {\r\n            const token = tokens[n];\r\n            if (n === tokens.length - 1) {\r\n                let value = null;\r\n                value = (token === 'challenge') ? Utils.nudgeChallenge(obj.challenge, delta) : obj[token] + delta;\r\n                this.changeValue(combatant, type, value);\r\n            } else {\r\n                obj = obj[token];\r\n            }\r\n        }\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////////\r\n\r\n    public render() {\r\n        try {\r\n            let content: JSX.Element | null = null;\r\n            let actions: JSX.Element | null = null;\r\n            switch (this.state.view) {\r\n                case 'home':\r\n                    content = (\r\n                        <HomeScreen\r\n                            library={this.state.library}\r\n                            addOpenGameContent={() => this.addOpenGameContent()}\r\n                        />\r\n                    );\r\n                    break;\r\n                case 'parties':\r\n                    content = (\r\n                        <PartiesScreen\r\n                            parties={this.state.parties}\r\n                            selection={this.getParty(this.state.selectedPartyID) || null}\r\n                            showHelp={this.state.options.showHelp}\r\n                            selectParty={party => this.selectParty(party)}\r\n                            addParty={() => this.addParty()}\r\n                            removeParty={() => this.removeParty()}\r\n                            addPC={() => this.addPC()}\r\n                            removePC={pc => this.removePC(pc)}\r\n                            sortPCs={() => this.sortPCs()}\r\n                            changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                            nudgeValue={(combatant, type, delta) => this.nudgeValue(combatant, type, delta)}\r\n                        />\r\n                    );\r\n                    break;\r\n                case 'library':\r\n                    content = (\r\n                        <MonsterLibraryScreen\r\n                            library={this.state.library}\r\n                            selection={this.getMonsterGroup(this.state.selectedMonsterGroupID) || null}\r\n                            filter={this.state.libraryFilter}\r\n                            showHelp={this.state.options.showHelp}\r\n                            selectMonsterGroup={group => this.selectMonsterGroup(group)}\r\n                            addMonsterGroup={() => this.addMonsterGroup()}\r\n                            removeMonsterGroup={() => this.removeMonsterGroup()}\r\n                            addMonster={() => this.addMonster()}\r\n                            removeMonster={monster => this.removeMonster(monster)}\r\n                            sortMonsters={() => this.sortMonsters()}\r\n                            changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                            nudgeValue={(combatant, type, delta) => this.nudgeValue(combatant, type, delta)}\r\n                            editMonster={combatant => this.editMonster(combatant)}\r\n                            cloneMonster={(combatant, name) => this.cloneMonster(combatant, name)}\r\n                            moveToGroup={(combatant, groupID) => this.moveToGroup(combatant, groupID)}\r\n                        />\r\n                    );\r\n                    let count = 0;\r\n                    this.state.library.forEach(group => {\r\n                        count += group.monsters.length;\r\n                    });\r\n                    if (count > 0) {\r\n                        actions = (\r\n                            <div className='actions'>\r\n                                <div className='section'>\r\n                                    <input\r\n                                        type='text'\r\n                                        placeholder='filter'\r\n                                        value={this.state.libraryFilter}\r\n                                        onChange={event => this.changeValue(this.state, 'libraryFilter', event.target.value)}\r\n                                    />\r\n                                </div>\r\n                                <div className='section'>\r\n                                    <button onClick={() => this.openDemographics()}>demographics</button>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    }\r\n                    break;\r\n                case 'encounter':\r\n                    content = (\r\n                        <EncounterBuilderScreen\r\n                            encounters={this.state.encounters}\r\n                            selection={this.getEncounter(this.state.selectedEncounterID) || null}\r\n                            parties={this.state.parties}\r\n                            library={this.state.library}\r\n                            showHelp={this.state.options.showHelp}\r\n                            selectEncounter={encounter => this.selectEncounter(encounter)}\r\n                            addEncounter={() => this.addEncounter()}\r\n                            removeEncounter={() => this.removeEncounter()}\r\n                            addWave={() => this.addWaveToEncounter()}\r\n                            removeWave={wave => this.removeWave(wave)}\r\n                            getMonster={(monsterName, groupName) => this.getMonster(monsterName, groupName) || null}\r\n                            addEncounterSlot={(monster, waveID) => this.addEncounterSlot(monster, waveID)}\r\n                            removeEncounterSlot={(slot, waveID) => this.removeEncounterSlot(slot, waveID)}\r\n                            nudgeValue={(slot, type, delta) => this.nudgeValue(slot, type, delta)}\r\n                            changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                        />\r\n                    );\r\n                    break;\r\n                case 'maps':\r\n                    content = (\r\n                        <MapFoliosScreen\r\n                            mapFolios={this.state.mapFolios}\r\n                            selection={this.getMapFolio(this.state.selectedMapFolioID) || null}\r\n                            showHelp={this.state.options.showHelp}\r\n                            selectMapFolio={folio => this.selectMapFolio(folio)}\r\n                            addMapFolio={() => this.addMapFolio()}\r\n                            removeMapFolio={() => this.removeMapFolio()}\r\n                            addMap={() => this.addMap()}\r\n                            editMap={map => this.editMap(map)}\r\n                            removeMap={map => this.removeMap(map)}\r\n                            changeValue={(source, type, value) => this.changeValue(source, type, value)}\r\n                        />\r\n                    );\r\n                    break;\r\n                case 'combat':\r\n                    const combat = this.getCombat(this.state.selectedCombatID);\r\n                    content = (\r\n                        <CombatManagerScreen\r\n                            combats={this.state.combats}\r\n                            combat={combat || null}\r\n                            showHelp={this.state.options.showHelp}\r\n                            createCombat={() => this.createCombat()}\r\n                            resumeEncounter={pausedCombat => this.resumeCombat(pausedCombat)}\r\n                            nudgeValue={(combatant, type, delta) => this.nudgeValue(combatant, type, delta)}\r\n                            changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                            makeCurrent={(combatant) => this.makeCurrent(combatant, false)}\r\n                            makeActive={(combatant) => this.makeActive(combatant)}\r\n                            makeDefeated={(combatant) => this.makeDefeated(combatant)}\r\n                            removeCombatant={(combatant) => this.removeCombatant(combatant)}\r\n                            addCondition={(combatant) => this.addCondition(combatant)}\r\n                            editCondition={(combatant, condition) => this.editCondition(combatant, condition)}\r\n                            removeCondition={(combatant, conditionID) => this.removeCondition(combatant, conditionID)}\r\n                            mapAdd={(combatant, x, y) => this.mapAdd(combatant, x, y)}\r\n                            mapMove={(combatant, dir) => this.mapMove(combatant, dir)}\r\n                            mapRemove={combatant => this.mapRemove(combatant)}\r\n                            endTurn={(combatant) => this.endTurn(combatant)}\r\n                            changeHP={(combatant, hp, temp) => this.changeHP(combatant, hp, temp)}\r\n                            close={(notification, removeCondition) => this.closeNotification(notification, removeCondition)}\r\n                        />\r\n                    );\r\n                    if (combat) {\r\n                        const encounter = this.getEncounter(combat.encounterID);\r\n                        if (encounter) {\r\n                            let xp = 0;\r\n                            combat.combatants.filter(c => c.type === 'monster')\r\n                                .forEach(combatant => {\r\n                                    xp += Utils.experience((combatant as Combatant & Monster).challenge);\r\n                                });\r\n\r\n                            actions = (\r\n                                <div className='actions'>\r\n                                    <div className='section'>\r\n                                        <div className='text'>round: {combat.round}</div>\r\n                                    </div>\r\n                                    <div className='section'>\r\n                                        <div className='text'>xp: {xp}</div>\r\n                                    </div>\r\n                                    <div className='section' style={{ display: encounter.waves.length === 0 ? 'none' : ''}}>\r\n                                        <button onClick={() => this.openWaveModal()}>add wave</button>\r\n                                    </div>\r\n                                    <div className='section'>\r\n                                        <button onClick={() => this.pauseCombat()}>pause encounter</button>\r\n                                    </div>\r\n                                    <div className='section'>\r\n                                        <button onClick={() => this.endCombat()}>end encounter</button>\r\n                                    </div>\r\n                                </div>\r\n                            );\r\n                        }\r\n                    }\r\n                    break;\r\n                default:\r\n                    // Do nothing\r\n                    break;\r\n            }\r\n\r\n            let modal = null;\r\n            if (this.state.modal) {\r\n                let modalTitle = null;\r\n                let modalContent = null;\r\n                let modalAllowClose = true;\r\n                let modalAllowScroll = true;\r\n                const modalButtons = {\r\n                    left: [] as JSX.Element[],\r\n                    right: [] as JSX.Element[]\r\n                };\r\n\r\n                switch (this.state.modal.type) {\r\n                    case 'about':\r\n                        modalContent = (\r\n                            <AboutModal\r\n                                options={this.state.options}\r\n                                resetAll={() => this.resetAll()}\r\n                                changeValue={(source, type, value) => this.changeValue(source, type, value)}\r\n                            />\r\n                        );\r\n                        break;\r\n                    case 'demographics':\r\n                        modalTitle = 'demographics';\r\n                        modalContent = (\r\n                            <DemographicsModal\r\n                                library={this.state.library}\r\n                            />\r\n                        );\r\n                        break;\r\n                    case 'monster':\r\n                        modalTitle = 'monster editor';\r\n                        modalContent = (\r\n                            <MonsterEditorModal\r\n                                monster={this.state.modal.monster}\r\n                                library={this.state.library}\r\n                                showMonsters={this.state.modal.showMonsters}\r\n                            />\r\n                        );\r\n                        modalAllowClose = false;\r\n                        modalAllowScroll = false;\r\n                        modalButtons.left = [\r\n                            (\r\n                                <Checkbox\r\n                                    key='similar'\r\n                                    label='similar monsters'\r\n                                    checked={this.state.modal.showMonsters}\r\n                                    changeValue={() => this.toggleShowSimilarMonsters()}\r\n                                />\r\n                            )\r\n                        ];\r\n                        modalButtons.right = [\r\n                            <button key='save' onClick={() => this.saveMonster()}>save</button>,\r\n                            <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                        ];\r\n                        break;\r\n                    case 'map':\r\n                        modalTitle = 'map editor';\r\n                        modalContent = (\r\n                            <MapEditorModal\r\n                                map={this.state.modal.map}\r\n                            />\r\n                        );\r\n                        modalAllowClose = false;\r\n                        modalAllowScroll = false;\r\n                        modalButtons.right = [\r\n                            <button key='save' onClick={() => this.saveMap()}>save</button>,\r\n                            <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                        ];\r\n                        break;\r\n                    case 'combat-start':\r\n                        modalTitle = 'start a new encounter';\r\n                        modalContent = (\r\n                            <CombatStartModal\r\n                                combatSetup={this.state.modal.combatSetup}\r\n                                parties={this.state.parties}\r\n                                encounters={this.state.encounters}\r\n                                mapFolios={this.state.mapFolios}\r\n                                getMonster={(monsterName, groupName) => this.getMonster(monsterName, groupName) || null}\r\n                                notify={() => this.setState({modal: this.state.modal})}\r\n                            />\r\n                        );\r\n                        modalAllowClose = false;\r\n                        modalAllowScroll = false;\r\n                        modalButtons.right = [\r\n                            (\r\n                                <button\r\n                                    key='start encounter'\r\n                                    className={this.state.modal.combatSetup.partyID && this.state.modal.combatSetup.encounterID ? '' : 'disabled'}\r\n                                    onClick={() => this.startCombat()}\r\n                                >\r\n                                    start encounter\r\n                                </button>\r\n                            ),\r\n                            <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                        ];\r\n                        break;\r\n                    case 'combat-wave':\r\n                        modalTitle = 'encounter waves';\r\n                        modalContent = (\r\n                            <CombatStartModal\r\n                                combatSetup={this.state.modal.combatSetup}\r\n                                encounters={this.state.encounters}\r\n                                getMonster={(monsterName, groupName) => this.getMonster(monsterName, groupName) || null}\r\n                                notify={() => this.setState({modal: this.state.modal})}\r\n                            />\r\n                        );\r\n                        modalAllowClose = false;\r\n                        modalAllowScroll = false;\r\n                        modalButtons.right = [\r\n                            (\r\n                                <button\r\n                                    key='add wave'\r\n                                    className={this.state.modal.combatSetup.waveID !== null ? '' : 'disabled'}\r\n                                    onClick={() => this.addWaveToCombat()}\r\n                                >\r\n                                    add wave\r\n                                </button>\r\n                            ),\r\n                            <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                        ];\r\n                        break;\r\n                    case 'condition-add':\r\n                        modalTitle = 'add a condition';\r\n                        modalContent = (\r\n                            <ConditionModal\r\n                                condition={this.state.modal.condition}\r\n                                combatant={this.state.modal.combatant}\r\n                                combat={this.state.modal.combat}\r\n                            />\r\n                        );\r\n                        modalAllowClose = false;\r\n                        modalAllowScroll = false;\r\n                        modalButtons.right = [\r\n                            <button key='add' onClick={() => this.addConditionFromModal()}>add</button>,\r\n                            <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                        ];\r\n                        break;\r\n                    case 'condition-edit':\r\n                        modalTitle = 'edit condition';\r\n                        modalContent = (\r\n                            <ConditionModal\r\n                                condition={this.state.modal.condition}\r\n                                combatant={this.state.modal.combatant}\r\n                                combat={this.state.modal.combat}\r\n                            />\r\n                        );\r\n                        modalAllowClose = false;\r\n                        modalButtons.right = [\r\n                            <button key='save' onClick={() => this.editConditionFromModal()}>save</button>,\r\n                            <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                        ];\r\n                        break;\r\n                    default:\r\n                        // Do nothing\r\n                        break;\r\n                }\r\n\r\n                modal = (\r\n                    <div className='overlay'>\r\n                        <div className='modal'>\r\n                            <div className='modal-header'>\r\n                                <div className='title'>{modalTitle}</div>\r\n                                {modalAllowClose ? <img className='image' src={close} alt='close' onClick={() => this.closeModal()} /> : null}\r\n                            </div>\r\n                            <div className={modalAllowScroll ? 'modal-content scrollable' : 'modal-content'}>\r\n                                {modalContent}\r\n                            </div>\r\n                            <div className='modal-footer'>\r\n                                <div className='left'>{modalButtons.left}</div>\r\n                                <div className='right'>{modalButtons.right}</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='dojo'>\r\n                    <Titlebar\r\n                        actions={actions}\r\n                        blur={modal !== null}\r\n                        openHome={() => this.setView('home')}\r\n                        openAbout={() => this.openAbout()}\r\n                    />\r\n                    <div className={(modal === null) ? 'page-content' : 'page-content blur'}>\r\n                        {content}\r\n                    </div>\r\n                    <Navbar\r\n                        view={this.state.view}\r\n                        parties={this.state.parties}\r\n                        library={this.state.library}\r\n                        encounters={this.state.encounters}\r\n                        blur={modal !== null}\r\n                        setView={view => this.setView(view)}\r\n                    />\r\n                    {modal}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './style/css/foundation.css';\r\nimport './style/scss/app.scss';\r\nimport './style/scss/controls.scss';\r\n\r\nimport Dojo from './components/dojo';\r\n\r\nReactDOM.render(<Dojo />, document.getElementById('root'));\r\n"],"sourceRoot":""}