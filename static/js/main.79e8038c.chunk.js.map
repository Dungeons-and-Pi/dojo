{"version":3,"sources":["resources/images/down-arrow-black.svg","resources/images/down-arrow.svg","resources/images/close-black.svg","resources/images/warning.svg","resources/images/ellipsis.svg","resources/images/minus.svg","resources/images/plus.svg","resources/images/checked.svg","resources/images/unchecked.svg","resources/images/settings.svg","utils/utils.ts","utils/factory.ts","models/monster-group.ts","utils/frankenstein.ts","components/controls/confirm-button.tsx","components/controls/control-row.tsx","components/controls/dropdown.tsx","components/controls/expander.tsx","components/controls/radial.tsx","components/controls/spin.tsx","components/panels/ability-score-panel.tsx","components/panels/conditions-panel.tsx","components/panels/traits-panel.tsx","components/cards/info-card.tsx","components/cards/monster-card.tsx","components/cards/pc-card.tsx","components/panels/hit-point-gauge.tsx","components/panels/map-panel.tsx","components/list-items/combat-list-item.tsx","components/panels/card-group.tsx","components/panels/readaloud.tsx","components/screens/combat-manager-screen.tsx","components/panels/difficulty-chart-panel.tsx","components/cards/encounter-card.tsx","components/cards/error-card.tsx","components/cards/filter-card.tsx","components/cards/wave-card.tsx","components/list-items/encounter-list-item.tsx","components/screens/encounter-builder-screen.tsx","components/screens/home-screen.tsx","components/cards/map-card.tsx","components/cards/map-folio-card.tsx","components/list-items/map-folio-list-item.tsx","components/screens/map-folios-screen.tsx","components/cards/monster-group-card.tsx","components/list-items/monster-group-list-item.tsx","components/screens/monster-library-screen.tsx","components/cards/party-card.tsx","components/list-items/party-list-item.tsx","components/screens/parties-screen.tsx","components/controls/checkbox.tsx","components/controls/selector.tsx","utils/text-generation.ts","components/dm-modules/language-module.tsx","components/dm-modules/name-module.tsx","components/dm-modules/reference-module.tsx","components/modals/about-modal.tsx","components/modals/combat-start-modal.tsx","models/condition.ts","components/controls/radio-group.tsx","components/modals/condition-modal.tsx","components/modals/demographics-modal.tsx","models/map-folio.ts","components/cards/map-tile-card.tsx","components/modals/map-editor-modal.tsx","components/modals/monster-editor-modal.tsx","components/panels/navbar.tsx","components/panels/titlebar.tsx","components/modals/random-monster-modal.tsx","components/dojo.tsx","index.js"],"names":["module","exports","__webpack_require__","p","Utils","monster","library","group","this","monsterIdToGroup","id","grp","find","g","monsters","includes","filter","text","result","toLowerCase","split","forEach","token","indexOf","s4","Math","floor","random","toString","substring","collection","sort","a","b","aName","name","bName","value","count","aValue","bValue","score","mod","modifierValue","str","size","cr","parseInt","push","ac","hpMin","hpMax","attack","dmgMin","dmgMax","save","level","difficulty","type","plural","delta","condition","combat","duration","saveDuration","saveType","toUpperCase","saves","saveDC","combatantDuration","point","c","combatants","cmb","combatantID","displayName","roundsDuration","rounds","encounter","monsterNames","slots","slot","names","monsterName","n","Factory","guid","pcs","active","player","race","classes","languages","passiveInsight","passiveInvestigation","passivePerception","initiative","url","category","tag","alignment","challenge","abilityScores","dex","con","int","wis","cha","hpTemp","hitDice","damage","resist","vulnerable","immune","savingThrows","speed","skills","senses","equipment","traits","conditionImmunities","usage","uses","waves","monsterGroupName","maps","items","x","y","width","height","terrain","partyID","encounterID","waveID","folioID","mapID","encounterInitMode","map","round","notifications","issues","timestamp","data","combatant","SIZE_TYPES","CATEGORY_TYPES","TRAIT_TYPES","Frankenstein","target","field","source","tokens","length","newValue","nudgeChallenge","changeValue","hpPerDie","hitDieType","hp","trait","_this","createMonster","subtype","parseChallenge","challenge_rating","armor_class","hit_points","index","hit_dice","strength","dexterity","constitution","intelligence","wisdom","charisma","damage_resistances","damage_vulnerabilities","damage_immunities","condition_immunities","skill","special_abilities","rawTrait","buildTrait","actions","legendary_actions","openBracket","closeBracket","desc","replace","copy","JSON","parse","stringify","createTrait","traitType","splice","t1","t2","index1","index2","_this2","setRandomValue","m","t","distinct","current","d","addedIDs","copyTrait","findIndex","avg","ConfirmButton","props","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","pressed","setState","toggle","callback","content","react_default","createElement","className","src","warning","alt","details","onClick","perform","disabled","ex","console","error","React","Component","defaultProps","ControlRow","style","controls","Dropdown","open","e","stopPropagation","optionID","select","options","selectedText","selectedID","option","o","placeholder","key","title","ellipsis","dropdown_DropdownOption","selected","toggleOpen","DropdownOption","_this3","click","Expander","expanded","arrow","Radial","dir","dir2","arguments","undefined","direction","showOut","showIn","showDiag","display","transform","padding","Spin","nudgeValue","preventDefault","minusBtns","plusBtns","factors","factor","onTouchEnd","touchEnd","reverse","minus","plus","infoWidth","label","AbilityScorePanel","showAbilityScores","edit","spin_Spin","toggleAbilityScores","modifier","ConditionsPanel","conditions","conditions_panel_ConditionPanel","nudgeConditionValue","editCondition","removeCondition","conditionID","addCondition","ConditionPanel","conditionDurationText","description","conditionText","expander_Expander","showdown","Showdown","Converter","TraitsPanel","prevTrait","nextTrait","traits_panel_TraitPanel","mode","action","removeTrait","swapTraits","traitsByType","match","list","createTraitPanel","addTrait","createSection","TraitPanel","maxUses","heading","used","startsWith","found","markdown","dangerouslySetInnerHTML","__html","makeHtml","onChange","event","control_row_ControlRow","confirm_button_ConfirmButton","InfoCard","MonsterCard","showDetails","cloneName","damageOrHealing","max","min","changeHP","temp","val","sizeAndType","align","wave","_this4","some","s","die","conMod","conModStr","_this5","editMonster","setCloneName","cloneMonster","groupOptions","dropdown_Dropdown","moveToGroup","removeMonster","removeEncounterSlot","canAdd","monsterIsInWave","addEncounterSlot","info_card_InfoCard","selectMonster","deselectMonster","radial_Radial","mapMove","mapRemove","mapAdd","pending","defeated","removeCombatant","endTurn","makeDefeated","makeCurrent","makeActive","stats","slotSection","getHP","ability_score_panel_AbilityScorePanel","traits_panel_TraitsPanel","nudgeDamage","heal","setDamage","conditions_panel_ConditionsPanel","imageStyle","toggleDetails","PCCard","removePC","commonStatBlock","href","rel","HitPointGauge","hpCurrent","hpBloodied","hpWidth","hpTempBar","hpTempWidth","MapPanel","border","dimensions","i","minX","maxX","minY","maxY","mapDimensions","sideLength","getSideLength","left","top","getMapDimensions","grid","gridStyle","getStyle","map_panel_GridSquare","setSelectedItemID","onDoubleClick","posX","posY","addMapTile","tiles","tileStyle","map_panel_MapTile","tile","selectable","selectedItemID","thumbnail","tokenStyle","map_panel_MapToken","simple","mt","dragOverlay","showOverlay","yOver","xOver","overlayStyle","overlay","gridSquareClicked","GridSquare","doubleClick","MapTile","MapToken","initials","hpGauge","altitudeBadge","conditionsBadge","hit_point_gauge_HitPointGauge","altitude","CombatListItem","map_panel_MapPanel","setSelection","CardGroup","showCards","hidden","closeBtn","showClose","close","showToggle","toggleCards","cards","Readaloud","CombatManagerScreen","selectedTokenID","addingToMapID","pc_card_PCCard","setAddingToMapID","monster_card_MonsterCard","createCard","combat_manager_screen_PendingCombatantRow","setSelectedTokenID","combat_manager_screen_PCRow","combat_manager_screen_MonsterRow","showHelp","pendingHelp","readaloud_Readaloud","concat","activeHelp","notificationSection","combat_manager_screen_NotificationPanel","notification","mapSection","addCombatantToMap","selectedCombatant","card_group_CardGroup","help","combat_manager_screen_HelpCard","combats","showCombat","combat_list_item_CombatListItem","resumeEncounter","createCombat","HelpCard","NotificationPanel","success","PendingCombatantRow","_this6","getInformationText","PCRow","_this7","notes","MonsterRow","_this8","gauge","DifficultyChartPanel","monsterCount","monsterXp","getMonster","experience","xpThresholds","diffSection","adjustedXp","experienceFactor","party","xpEasy","xpMedium","xpHard","xpDeadly","pc","pcExperience","adjustedDifficulty","small","getLeft","xp","getRight","right","EncounterCard","parties","partyOptions","difficultySection","selectParty","difficulty_chart_panel_DifficultyChartPanel","selection","addWave","removeEncounter","ErrorCard","getContent","FilterCard","showAll","sizeOptions","catOptions","cat","resetFilter","summary","challengeMin","challengeMax","toggleAll","WaveCard","removeWave","EncounterListItem","EncounterBuilderScreen","changeFilterValue","error_card_ErrorCard","libraryCards","filter_card_FilterCard","nudgeFilterValue","matchMonster","enc","encounter_builder_screen_HelpCard","encounters","encounterName","showEncounter","encounter_list_item_EncounterListItem","selectEncounter","encounterCards","encounter_card_EncounterCard","getMonsterCards","card","w","waveCards","wave_card_WaveCard","addEncounter","getLibrarySection","HomeScreen","addOpenGameContent","MapCard","editMap","removeMap","MapFolioCard","addMap","removeMapFolio","MapFolioListItem","matchFolio","mapFolio","MapFoliosScreen","folio","map_folios_screen_HelpCard","mapFolios","folios","f","showMapFolio","map_folio_list_item_MapFolioListItem","selectMapFolio","folioCards","map_folio_card_MapFolioCard","map_card_MapCard","addMapFolio","MonsterGroupCard","addMonster","generateMonster","sortMonsters","removeMonsterGroup","MonsterGroupListItem","matchGroup","MonsterLibraryScreen","monster_library_screen_HelpCard","listItems","showMonsterGroup","monster_group_list_item_MonsterGroupListItem","selectMonsterGroup","monster_group_card_MonsterGroupCard","groupID","addMonsterGroup","PartyCard","activePCs","join","reduce","array","localeCompare","insightSummary","investigationSummary","perceptionSummary","insight","invest","percep","addPC","sortPCs","removeParty","PartyListItem","matchParty","PartiesScreen","parties_screen_HelpCard","showParty","party_list_item_PartyListItem","activeCards","inactiveCards","party_card_PartyCard","activePC","inactivePC","addParty","Checkbox","checked","check","showCheck","unchecked","Selector","tabs","itemsPerRow","rowCount","ceil","rowContents","rowIndex","selector_SelectorOption","rowSections","row","SelectorOption","TextGenerator","sources","model","line","addLineToModel","String","fromCharCode","_loop","prev","substr","char","item","freq","requiredResults","lines","failures","extractLine","_loop2","v","candidates","repeat","_ret","LanguageModule","output","language","fetch","response","presetName","preset","getPresets","lang","addLanguage","getLanguages","keys","initModel","generate","presetOptions","selectedPreset","selectedLanguages","isSelected","checkbox_Checkbox","removeLanguage","allowGenerate","allowReset","selector_Selector","usePreset","reset","NameModule","male","female","surname","input","setOption","ReferenceModule","view","fetchData","setView","AboutModal","reference_module_ReferenceModule","language_module_LanguageModule","name_module_NameModule","moduleID","setModule","pkg","version","resetAll","getTools","getAbout","CombatStartModal","combatSetup","notify","getMonsterNames","slotID","partyContent","selectedParty","pcSections","setParty","encounterOptions","encounterContent","selectedEncounter","monsterSections","waveMonsters","setEncounter","folioOptions","selectMapSection","thumbnailSection","mapOptions","setMapID","setFolioID","waveOptions","waveContent","selectedWave","setWave","_this9","_this10","slotsContainer","slotNames","inputs","combat_start_modal_MonsterName","changeName","setEncounterInitMode","leftSection","rightSection","getPartySection","getEncounterSection","getMapSection","getDifficultySection","getMonsterSection","getWaveSection","margin","MonsterName","_this11","CONDITION_TYPES","RadioGroup","radio_group_RadioGroupItem","itemID","RadioGroupItem","ConditionModal","conditionName","durationType","createConditionDurationSaves","createConditionDurationCombatant","createConditionDurationRounds","object","saveOptions","pointOptions","combatantOptions","durations","radio_group_RadioGroup","setCondition","setDuration","DemographicsModal","chart","demographics","allMonsters","buckets","maxBucketSize","bucket","bars","set","selectChart","TERRAIN_TYPES","MapTileCard","terrainOptions","moveMapItem","resizeMapItem","cloneMapItem","removeMapItem","MapEditorModal","selectedTileID","createMapItem","smallMapItem","bigMapItem","tools","map_tile_card_MapTileCard","mapItem","setSelectedTileID","MonsterEditorModal","page","showFilter","helpSection","sections","getHelpOptionsForPage","section","spliceMonsters","addRandomTrait","getValueSection","getActionsSection","dataType","values","sortByValue","sortByCount","valueSections","rows","criteria","criteriaText","similar","filterContent","toggleMatch","toggleFilter","showMonsters","getMonsters","changeTrait","selector","setHelpSection","getHelpSection","monsterList","searchBox","setFilterText","getFilterCard","transition","setPage","Navbar","partiesStyle","libraryStyle","encounterStyle","mapStyle","combatStyle","encountersEnabled","combatEnabled","blur","Titlebar","openHome","cog","openAbout","RandomMonsterModal","selectedMonsters","selectedMonstersInfo","selectAll","Dojo","selectedPartyID","selectedMonsterGroupID","selectedEncounterID","selectedMapFolioID","selectedCombatID","modal","json","window","localStorage","getItem","setItem","createParty","createPC","createMonsterGroup","sourceGroup","original","clone","then","createFromJSON","groupName","createEncounter","_this12","_this13","createEncounterSlot","sortEncounterSlots","_this14","slotContainer","_this15","createEncounterWave","_this16","createMapFolio","_this17","_this18","createMap","_this19","_this20","setup","createCombatSetup","_this21","partyName","init","groupRoll","dieRoll","singleRoll","sortCombatants","_this22","_this23","Date","toLocaleString","_this24","newRound","_this25","actor","_this26","_this27","issue","_this28","_this29","miniSize","_this30","_this31","_this32","saveNotification","createNotification","endNotification","_this33","createCondition","_this34","_this35","_this36","conditionIndex","_this37","obj","_this38","openDemographics","openWaveModal","pauseCombat","endCombat","_this39","home_screen_HomeScreen","parties_screen_PartiesScreen","monster_library_screen_MonsterLibraryScreen","encounter_builder_screen_EncounterBuilderScreen","addWaveToEncounter","map_folios_screen_MapFoliosScreen","combat_manager_screen_CombatManagerScreen","pausedCombat","resumeCombat","closeNotification","_this40","modalSidebar","modalTitle","modalContent","modalAllowScroll","modalButtons","closeModal","about_modal_AboutModal","demographics_modal_DemographicsModal","monster_editor_modal_MonsterEditorModal","toggleShowSimilarMonsters","saveMonster","random_monster_modal_RandomMonsterModal","map_editor_modal_MapEditorModal","saveMap","combat_start_modal_CombatStartModal","startCombat","addWaveToCombat","condition_modal_ConditionModal","addConditionFromModal","editConditionFromModal","_this41","getActions","getModal","titlebar_Titlebar","navbar_Navbar","ReactDOM","render","dojo_Dojo","document","getElementById"],"mappings":"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","file":"static/js/main.79e8038c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/down-arrow-black.a2fc7a1f.svg\";","module.exports = __webpack_public_path__ + \"static/media/down-arrow.697dc1af.svg\";","module.exports = __webpack_public_path__ + \"static/media/close-black.7645a5b9.svg\";","module.exports = __webpack_public_path__ + \"static/media/warning.67a11a95.svg\";","module.exports = __webpack_public_path__ + \"static/media/ellipsis.9650a20f.svg\";","module.exports = __webpack_public_path__ + \"static/media/minus.7003cf50.svg\";","module.exports = __webpack_public_path__ + \"static/media/plus.b60accff.svg\";","module.exports = __webpack_public_path__ + \"static/media/checked.5cbd1005.svg\";","module.exports = __webpack_public_path__ + \"static/media/unchecked.3d4ae2dd.svg\";","module.exports = __webpack_public_path__ + \"static/media/settings.042bb1c2.svg\";","import { Combat } from '../models/combat';\r\nimport { Condition, ConditionDurationCombatant, ConditionDurationRounds, ConditionDurationSaves } from '../models/condition';\r\nimport { Encounter, EncounterWave } from '../models/encounter';\r\nimport { Monster, MonsterGroup } from '../models/monster-group';\r\n\r\nexport default class Utils {\r\n\r\n    // This is an internal dictionary to speed up lookup\r\n    private static monsterIdToGroup: { [id: string]: MonsterGroup } = {};\r\n\r\n    public static getMonsterGroup(monster: Monster, library: MonsterGroup[]): MonsterGroup {\r\n        let group = this.monsterIdToGroup[monster.id];\r\n\r\n        if (!group) {\r\n            const grp = library.find(g => g.monsters.includes(monster));\r\n            if (grp) {\r\n                group = grp;\r\n                this.monsterIdToGroup[monster.id] = group;\r\n            }\r\n        }\r\n\r\n        return group;\r\n    }\r\n\r\n    public static match(filter: string, text: string): boolean {\r\n        if (!filter) {\r\n            return true;\r\n        }\r\n\r\n        let result = true;\r\n\r\n        const tokens = filter.toLowerCase().split(' ');\r\n        tokens.forEach(token => {\r\n            if (text.toLowerCase().indexOf(token) === -1) {\r\n                result = false;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    public static guid(): string {\r\n        const s4 = () => Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\r\n        return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\r\n    }\r\n\r\n    public static sort(collection: any[]): any[] {\r\n        collection.sort((a, b) => {\r\n            const aName = a.name.toLowerCase();\r\n            const bName = b.name.toLowerCase();\r\n            if (aName < bName) { return -1; }\r\n            if (aName > bName) { return 1; }\r\n            return 0;\r\n        });\r\n        return collection;\r\n    }\r\n\r\n    public static sortByValue(collection: any[]): any[] {\r\n        collection.sort((a, b) => {\r\n            if (a.value < b.value) { return -1; }\r\n            if (a.value > b.value) { return 1; }\r\n            return 0;\r\n        });\r\n        return collection;\r\n    }\r\n\r\n    public static sortByCount(collection: any[]): any[] {\r\n        collection.sort((a, b) => {\r\n            if (a.count < b.count) { return 1; }\r\n            if (a.count > b.count) { return -1; }\r\n\r\n            const aValue = a.value.toLowerCase();\r\n            const bValue = b.value.toLowerCase();\r\n            if (aValue < bValue) { return -1; }\r\n            if (aValue > bValue) { return 1; }\r\n\r\n            return 0;\r\n        });\r\n        return collection;\r\n    }\r\n\r\n    public static modifierValue(score: number): number {\r\n        return Math.floor((score - 10) / 2);\r\n    }\r\n\r\n    public static modifier(score: number): string {\r\n        const mod = this.modifierValue(score);\r\n        let str = mod.toString();\r\n        if (mod >= 0) {\r\n            str = '+' + str;\r\n        }\r\n        return str;\r\n    }\r\n\r\n    public static dieRoll(): number {\r\n        return Math.floor(Math.random() * 20) + 1;\r\n    }\r\n\r\n    public static miniSize(size: string): number {\r\n        switch (size) {\r\n            case 'tiny': return 1;\r\n            case 'small': return 1;\r\n            case 'medium': return 1;\r\n            case 'large': return 2;\r\n            case 'huge': return 3;\r\n            case 'gargantuan': return 4;\r\n            default: return 1;\r\n        }\r\n    }\r\n\r\n    public static hitDieType(size: string) {\r\n        switch (size) {\r\n            case 'tiny': return 4;\r\n            case 'small': return 6;\r\n            case 'medium': return 8;\r\n            case 'large': return 10;\r\n            case 'huge': return 12;\r\n            case 'gargantuan': return 20;\r\n            default: return 8;\r\n        }\r\n    }\r\n\r\n    public static challenge(cr: number): string {\r\n        switch (cr) {\r\n            case 0.125: return '1/8';\r\n            case 0.25: return '1/4';\r\n            case 0.5: return '1/2';\r\n            default: return cr.toString();\r\n        }\r\n    }\r\n\r\n    public static parseChallenge(cr: string): number {\r\n        switch (cr) {\r\n            case '1/8': return 0.125;\r\n            case '1/4': return 0.25;\r\n            case '1/2': return 0.5;\r\n            default: return parseInt(cr, 10);\r\n        }\r\n    }\r\n\r\n    public static challengeDetails(): any[] {\r\n        const result: any[] = [];\r\n\r\n        result.push({ cr: 0,        ac: 13,       hpMin: 1, hpMax: 6,       attack: 3,  dmgMin: 0,   dmgMax: 1,   save: 13 });\r\n        result.push({ cr: 0.125,    ac: 13,       hpMin: 7, hpMax: 35,      attack: 3,  dmgMin: 2,   dmgMax: 3,   save: 13 });\r\n        result.push({ cr: 0.25,     ac: 13,       hpMin: 36, hpMax: 49,     attack: 3,  dmgMin: 4,   dmgMax: 5,   save: 13 });\r\n        result.push({ cr: 0.5,      ac: 13,       hpMin: 50, hpMax: 70,     attack: 3,  dmgMin: 6,   dmgMax: 8,   save: 13 });\r\n        result.push({ cr: 1,        ac: 13,       hpMin: 71, hpMax: 85,     attack: 3,  dmgMin: 9,   dmgMax: 14,  save: 13 });\r\n        result.push({ cr: 2,        ac: 13,       hpMin: 86, hpMax: 100,    attack: 3,  dmgMin: 15,  dmgMax: 20,  save: 13 });\r\n        result.push({ cr: 3,        ac: 13,       hpMin: 101, hpMax: 115,   attack: 4,  dmgMin: 21,  dmgMax: 26,  save: 13 });\r\n        result.push({ cr: 4,        ac: 14,       hpMin: 116, hpMax: 130,   attack: 5,  dmgMin: 27,  dmgMax: 32,  save: 14 });\r\n        result.push({ cr: 5,        ac: 15,       hpMin: 131, hpMax: 145,   attack: 6,  dmgMin: 33,  dmgMax: 38,  save: 15 });\r\n        result.push({ cr: 6,        ac: 15,       hpMin: 146, hpMax: 160,   attack: 6,  dmgMin: 39,  dmgMax: 44,  save: 15 });\r\n        result.push({ cr: 7,        ac: 15,       hpMin: 161, hpMax: 175,   attack: 6,  dmgMin: 45,  dmgMax: 50,  save: 15 });\r\n        result.push({ cr: 8,        ac: 16,       hpMin: 176, hpMax: 190,   attack: 7,  dmgMin: 51,  dmgMax: 56,  save: 16 });\r\n        result.push({ cr: 9,        ac: 16,       hpMin: 191, hpMax: 205,   attack: 7,  dmgMin: 57,  dmgMax: 62,  save: 16 });\r\n        result.push({ cr: 10,       ac: 17,       hpMin: 206, hpMax: 220,   attack: 7,  dmgMin: 63,  dmgMax: 68,  save: 16 });\r\n        result.push({ cr: 11,       ac: 17,       hpMin: 221, hpMax: 235,   attack: 8,  dmgMin: 69,  dmgMax: 74,  save: 17 });\r\n        result.push({ cr: 12,       ac: 17,       hpMin: 236, hpMax: 250,   attack: 8,  dmgMin: 75,  dmgMax: 80,  save: 17 });\r\n        result.push({ cr: 13,       ac: 18,       hpMin: 251, hpMax: 265,   attack: 8,  dmgMin: 81,  dmgMax: 86,  save: 18 });\r\n        result.push({ cr: 14,       ac: 18,       hpMin: 266, hpMax: 280,   attack: 8,  dmgMin: 87,  dmgMax: 92,  save: 18 });\r\n        result.push({ cr: 15,       ac: 18,       hpMin: 281, hpMax: 295,   attack: 8,  dmgMin: 93,  dmgMax: 98,  save: 18 });\r\n        result.push({ cr: 16,       ac: 18,       hpMin: 296, hpMax: 310,   attack: 9,  dmgMin: 99,  dmgMax: 104, save: 18 });\r\n        result.push({ cr: 17,       ac: 19,       hpMin: 311, hpMax: 325,   attack: 10, dmgMin: 105, dmgMax: 110, save: 19 });\r\n        result.push({ cr: 18,       ac: 19,       hpMin: 326, hpMax: 340,   attack: 10, dmgMin: 111, dmgMax: 116, save: 19 });\r\n        result.push({ cr: 19,       ac: 19,       hpMin: 341, hpMax: 355,   attack: 10, dmgMin: 117, dmgMax: 122, save: 19 });\r\n        result.push({ cr: 20,       ac: 19,       hpMin: 356, hpMax: 400,   attack: 10, dmgMin: 123, dmgMax: 140, save: 19 });\r\n        result.push({ cr: 21,       ac: 19,       hpMin: 401, hpMax: 445,   attack: 11, dmgMin: 141, dmgMax: 158, save: 20 });\r\n        result.push({ cr: 22,       ac: 19,       hpMin: 446, hpMax: 490,   attack: 11, dmgMin: 159, dmgMax: 176, save: 20 });\r\n        result.push({ cr: 23,       ac: 19,       hpMin: 491, hpMax: 535,   attack: 11, dmgMin: 177, dmgMax: 194, save: 20 });\r\n        result.push({ cr: 24,       ac: 19,       hpMin: 536, hpMax: 580,   attack: 12, dmgMin: 195, dmgMax: 212, save: 21 });\r\n        result.push({ cr: 25,       ac: 19,       hpMin: 581, hpMax: 625,   attack: 12, dmgMin: 213, dmgMax: 230, save: 21 });\r\n        result.push({ cr: 26,       ac: 19,       hpMin: 626, hpMax: 670,   attack: 12, dmgMin: 231, dmgMax: 248, save: 21 });\r\n        result.push({ cr: 27,       ac: 19,       hpMin: 671, hpMax: 715,   attack: 13, dmgMin: 249, dmgMax: 266, save: 22 });\r\n        result.push({ cr: 28,       ac: 19,       hpMin: 716, hpMax: 760,   attack: 13, dmgMin: 267, dmgMax: 284, save: 22 });\r\n        result.push({ cr: 29,       ac: 19,       hpMin: 761, hpMax: 805,   attack: 13, dmgMin: 285, dmgMax: 302, save: 22 });\r\n        result.push({ cr: 30,       ac: 19,       hpMin: 806, hpMax: 850,   attack: 14, dmgMin: 303, dmgMax: 320, save: 23 });\r\n\r\n        return result;\r\n    }\r\n\r\n    public static experience(cr: number): number {\r\n        switch (cr) {\r\n            case 0: return 10;\r\n            case 0.125: return 25;\r\n            case 0.25: return 50;\r\n            case 0.5: return 100;\r\n            case 1: return 200;\r\n            case 2: return 450;\r\n            case 3: return 700;\r\n            case 4: return 1100;\r\n            case 5: return 1800;\r\n            case 6: return 2300;\r\n            case 7: return 2900;\r\n            case 8: return 3900;\r\n            case 9: return 5000;\r\n            case 10: return 5900;\r\n            case 11: return 7200;\r\n            case 12: return 8400;\r\n            case 13: return 10000;\r\n            case 14: return 11500;\r\n            case 15: return 13000;\r\n            case 16: return 15000;\r\n            case 17: return 18000;\r\n            case 18: return 20000;\r\n            case 19: return 22000;\r\n            case 20: return 25000;\r\n            case 21: return 33000;\r\n            case 22: return 41000;\r\n            case 23: return 50000;\r\n            case 24: return 62000;\r\n            case 30: return 155000;\r\n            default: return 0;\r\n        }\r\n    }\r\n\r\n    public static experienceFactor(count: number): number {\r\n        switch (count) {\r\n            case 0:\r\n                return 0;\r\n            case 1:\r\n                return 1;\r\n            case 2:\r\n                return 1.5;\r\n            case 3:\r\n            case 4:\r\n            case 5:\r\n            case 6:\r\n                return 2;\r\n            case 7:\r\n            case 8:\r\n            case 9:\r\n            case 10:\r\n                return 2.5;\r\n            case 11:\r\n            case 12:\r\n            case 13:\r\n            case 14:\r\n                return 3;\r\n            default:\r\n                return 4;\r\n        }\r\n    }\r\n\r\n    public static pcExperience(level: number, difficulty: string): number {\r\n        switch (difficulty) {\r\n            case 'easy':\r\n                switch (level) {\r\n                    case 1: return 25;\r\n                    case 2: return 50;\r\n                    case 3: return 75;\r\n                    case 4: return 125;\r\n                    case 5: return 250;\r\n                    case 6: return 300;\r\n                    case 7: return 350;\r\n                    case 8: return 450;\r\n                    case 9: return 550;\r\n                    case 10: return 600;\r\n                    case 11: return 800;\r\n                    case 12: return 1000;\r\n                    case 13: return 1100;\r\n                    case 14: return 1250;\r\n                    case 15: return 1400;\r\n                    case 16: return 1600;\r\n                    case 17: return 2000;\r\n                    case 18: return 2100;\r\n                    case 19: return 2400;\r\n                    case 20: return 2800;\r\n                    default: return 0;\r\n                }\r\n            case 'medium':\r\n                switch (level) {\r\n                    case 1: return 50;\r\n                    case 2: return 100;\r\n                    case 3: return 150;\r\n                    case 4: return 250;\r\n                    case 5: return 500;\r\n                    case 6: return 600;\r\n                    case 7: return 750;\r\n                    case 8: return 900;\r\n                    case 9: return 1100;\r\n                    case 10: return 1200;\r\n                    case 11: return 1600;\r\n                    case 12: return 2000;\r\n                    case 13: return 2200;\r\n                    case 14: return 2500;\r\n                    case 15: return 2800;\r\n                    case 16: return 3200;\r\n                    case 17: return 3900;\r\n                    case 18: return 4200;\r\n                    case 19: return 4900;\r\n                    case 20: return 5700;\r\n                    default: return 0;\r\n                }\r\n            case 'hard':\r\n                switch (level) {\r\n                    case 1: return 75;\r\n                    case 2: return 150;\r\n                    case 3: return 225;\r\n                    case 4: return 375;\r\n                    case 5: return 750;\r\n                    case 6: return 900;\r\n                    case 7: return 1100;\r\n                    case 8: return 1400;\r\n                    case 9: return 1600;\r\n                    case 10: return 1900;\r\n                    case 11: return 2400;\r\n                    case 12: return 3000;\r\n                    case 13: return 3400;\r\n                    case 14: return 3800;\r\n                    case 15: return 4300;\r\n                    case 16: return 4800;\r\n                    case 17: return 5900;\r\n                    case 18: return 6300;\r\n                    case 19: return 7300;\r\n                    case 20: return 8500;\r\n                    default: return 0;\r\n                }\r\n            case 'deadly':\r\n                switch (level) {\r\n                    case 1: return 100;\r\n                    case 2: return 200;\r\n                    case 3: return 400;\r\n                    case 4: return 500;\r\n                    case 5: return 1100;\r\n                    case 6: return 1400;\r\n                    case 7: return 1700;\r\n                    case 8: return 2100;\r\n                    case 9: return 2400;\r\n                    case 10: return 2800;\r\n                    case 11: return 3600;\r\n                    case 12: return 4500;\r\n                    case 13: return 5100;\r\n                    case 14: return 5700;\r\n                    case 15: return 6400;\r\n                    case 16: return 7200;\r\n                    case 17: return 8800;\r\n                    case 18: return 9500;\r\n                    case 19: return 10900;\r\n                    case 20: return 12700;\r\n                    default: return 0;\r\n                }\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n\r\n    public static traitType(type: string, plural: boolean): string {\r\n        let str = '';\r\n        switch (type) {\r\n            case 'trait':\r\n                str = 'trait';\r\n                break;\r\n            case 'action':\r\n                str = 'action';\r\n                break;\r\n            case 'legendary':\r\n                str = 'legendary action';\r\n                break;\r\n            case 'lair':\r\n                str = 'lair action';\r\n                break;\r\n            case 'regional':\r\n                str = 'regional effect';\r\n                break;\r\n        }\r\n\r\n        if (plural) {\r\n            str += 's';\r\n        }\r\n\r\n        return str;\r\n    }\r\n\r\n    public static nudgeChallenge(value: number, delta: number): number {\r\n        let result = 0;\r\n\r\n        switch (value) {\r\n            case 0:\r\n                if (delta === -1) {\r\n                    result = 0;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 0.125;\r\n                }\r\n                break;\r\n            case 0.125:\r\n                if (delta === -1) {\r\n                    result = 0;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 0.25;\r\n                }\r\n                break;\r\n            case 0.25:\r\n                if (delta === -1) {\r\n                    result = 0.125;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 0.5;\r\n                }\r\n                break;\r\n            case 0.5:\r\n                if (delta === -1) {\r\n                    result = 0.25;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 1;\r\n                }\r\n                break;\r\n            case 1:\r\n                if (delta === -1) {\r\n                    result = 0.5;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 2;\r\n                }\r\n                break;\r\n            default:\r\n                result = value + delta;\r\n                break;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public static conditionText(condition: Condition): string[] {\r\n        switch (condition.name) {\r\n            case 'blinded':\r\n                return [\r\n                    'a blinded creature can’t see and automatically fails any ability check that requires sight',\r\n                    'attack rolls against the creature have advantage, and the creature’s attack rolls have disadvantage'\r\n                ];\r\n            case 'charmed':\r\n                return [\r\n                    'a charmed creature can’t attack the charmer or target the charmer with harmful abilities or magical effects',\r\n                    'the charmer has advantage on any ability check to interact socially with the creature'\r\n                ];\r\n            case 'deafened':\r\n                return [\r\n                    'a deafened creature can’t hear and automatically fails any ability check that requires hearing.'\r\n                ];\r\n            case 'exhaustion': {\r\n                switch (condition.level) {\r\n                case 1:\r\n                    return [\r\n                        'disadvantage on ability checks'\r\n                    ];\r\n                case 2:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved'\r\n                    ];\r\n                case 3:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved',\r\n                        'disadvantage on attack rolls and saving throws'\r\n                    ];\r\n                case 4:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved',\r\n                        'disadvantage on attack rolls and saving throws',\r\n                        'hit point maximum halved'\r\n                    ];\r\n                case 5:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved',\r\n                        'disadvantage on attack rolls and saving throws',\r\n                        'hit point maximum halved',\r\n                        'speed reduced to 0'\r\n                    ];\r\n                case 6:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved',\r\n                        'disadvantage on attack rolls and saving throws',\r\n                        'hit point maximum halved',\r\n                        'speed reduced to 0',\r\n                        'death'\r\n                    ];\r\n                default:\r\n                    return [];\r\n                }\r\n            }\r\n            case 'frightened':\r\n                return [\r\n                    'a frightened creature has disadvantage on ability checks and attack rolls while the source of its fear is within line of sight',\r\n                    'the creature can’t willingly move closer to the source of its fear'\r\n                ];\r\n            case 'grappled':\r\n                return [\r\n                    'a grappled creature’s speed becomes 0, and it can’t benefit from any bonus to its speed',\r\n                    'the condition ends if the grappler is incapacitated',\r\n                    'the condition also ends if an effect removes the grappled creature from the reach of the grappler or grappling effect'\r\n                ];\r\n            case 'incapacitated':\r\n                return [\r\n                    'an incapacitated creature can’t take actions or reactions'\r\n                ];\r\n            case 'invisible':\r\n                return [\r\n                    'an invisible creature is impossible to see without the aid of magic or a special sense',\r\n                    'for the purpose of hiding, the creature is heavily obscured',\r\n                    'the creature’s location can be detected by any noise it makes or any tracks it leaves',\r\n                    'attack rolls against the creature have disadvantage, and the creature’s attack rolls have advantage'\r\n                ];\r\n            case 'paralyzed':\r\n                return [\r\n                    'a paralyzed creature is incapacitated (can’t take actions or reactions) and can’t move or speak',\r\n                    'the creature automatically fails strength and dexterity saving throws',\r\n                    'attack rolls against the creature have advantage',\r\n                    'any attack that hits the creature is a critical hit if the attacker is within 5 feet of the creature'\r\n                ];\r\n            case 'petrified':\r\n                return [\r\n                    /* tslint:disable-next-line:max-line-length */\r\n                    'a petrified creature is transformed, along with any nonmagical objects it is wearing or carrying, into a solid inanimate substance (usually stone)',\r\n                    'its weight increases by a factor of ten, and it ceases aging',\r\n                    'the creature is incapacitated (can’t take actions or reactions), can’t move or speak, and is unaware of its surroundings',\r\n                    'attack rolls against the creature have advantage',\r\n                    'the creature automatically fails strength and dexterity saving throws',\r\n                    'the creature has resistance to all damage',\r\n                    'the creature is immune to poison and disease, although a poison or disease already in its system is suspended, not neutralized'\r\n                ];\r\n            case 'poisoned':\r\n                return [\r\n                    'a poisoned creature has disadvantage on attack rolls and ability checks'\r\n                ];\r\n            case 'prone':\r\n                return [\r\n                    'a prone creature’s only movement option is to crawl, unless it stands up and thereby ends the condition',\r\n                    'the creature has disadvantage on attack rolls',\r\n                    /* tslint:disable-next-line:max-line-length */\r\n                    'an attack roll against the creature has advantage if the attacker is Within 5 feet of the creature; otherwise, the attack roll has disadvantage'\r\n                ];\r\n            case 'restrained':\r\n                return [\r\n                    'a restrained creature’s speed becomes 0, and it can’t benefit from any bonus to its speed',\r\n                    'attack rolls against the creature have advantage, and the creature’s attack rolls have disadvantage',\r\n                    'the creature has disadvantage on dexterity saving throws'\r\n                ];\r\n            case 'stunned':\r\n                return [\r\n                    'a stunned creature is incapacitated (can’t take actions or reactions), can’t move, and can speak only falteringly',\r\n                    'the creature automatically fails strength and dexterity saving throws',\r\n                    'attack rolls against the creature have advantage'\r\n                ];\r\n            case 'unconscious':\r\n                return [\r\n                    'an unconscious creature is incapacitated (can’t take actions or reactions), can’t move or speak, and is unaware of its surroundings',\r\n                    'the creature drops whatever its holding and falls prone',\r\n                    'the creature automatically fails strength and dexterity saving throws',\r\n                    'attack rolls against the creature have advantage',\r\n                    'any attack that hits the creature is a critical hit if the attacker is within 5 feet of the creature'\r\n                ];\r\n            case 'custom':\r\n                return [];\r\n            default:\r\n                return [];\r\n        }\r\n    }\r\n\r\n    public static conditionDurationText(condition: Condition, combat: Combat) {\r\n        if (condition.duration !== null) {\r\n            switch (condition.duration.type) {\r\n                case 'saves':\r\n                    const saveDuration = condition.duration as ConditionDurationSaves;\r\n                    let saveType = saveDuration.saveType.toString();\r\n                    if (saveType !== 'death') {\r\n                        saveType = saveType.toUpperCase();\r\n                    }\r\n                    const saves = saveDuration.count > 1 ? 'saves' : 'save';\r\n                    return 'until you make ' + saveDuration.count + ' ' + saveType + ' ' + saves + ' at dc ' + saveDuration.saveDC;\r\n                case 'combatant':\r\n                    const combatantDuration = condition.duration as ConditionDurationCombatant;\r\n                    const point = combatantDuration.point;\r\n                    const c = combat.combatants.find(cmb => cmb.id === combatantDuration.combatantID);\r\n                    const combatant = c ? (c.displayName || c.name || 'unnamed monster') + '\\'s' : 'someone\\'s';\r\n                    return 'until the ' + point + ' of ' + combatant + ' next turn';\r\n                case 'rounds':\r\n                    const roundsDuration = condition.duration as ConditionDurationRounds;\r\n                    const rounds = roundsDuration.count > 1 ? 'rounds' : 'round';\r\n                    return 'for ' + roundsDuration.count + ' ' + rounds;\r\n                default:\r\n                    return null;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public static getMonsterNames(encounter: Encounter | EncounterWave): { id: string, names: string[] }[] {\r\n        const monsterNames: any[] = [];\r\n        if (encounter) {\r\n            encounter.slots.forEach(slot => {\r\n                const names: any[] = [];\r\n                if (slot.count === 1) {\r\n                    names.push(slot.monsterName);\r\n                } else {\r\n                    for (let n = 0; n !== slot.count; ++n) {\r\n                        names.push(slot.monsterName + ' ' + (n + 1));\r\n                    }\r\n                }\r\n\r\n                monsterNames.push({\r\n                    id: slot.id,\r\n                    names: names\r\n                });\r\n            });\r\n        }\r\n\r\n        return monsterNames;\r\n    }\r\n}\r\n","import Utils from './utils';\r\n\r\nimport { Combat, CombatSetup, Notification } from '../models/combat';\r\nimport { Condition, ConditionDurationCombatant, ConditionDurationRounds, ConditionDurationSaves } from '../models/condition';\r\nimport { Encounter, EncounterSlot, EncounterWave } from '../models/encounter';\r\nimport { Map, MapFolio, MapItem } from '../models/map-folio';\r\nimport { Monster, MonsterGroup, Trait } from '../models/monster-group';\r\nimport { Party, PC } from '../models/party';\r\n\r\nexport default class Factory {\r\n\r\n    public static createParty(): Party {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            pcs: []\r\n        };\r\n    }\r\n\r\n    public static createPC(): PC {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'pc',\r\n            active: true,\r\n            player: '',\r\n            name: '',\r\n            race: '',\r\n            classes: '',\r\n            level: 1,\r\n            languages: 'Common',\r\n            passiveInsight: 10,\r\n            passiveInvestigation: 10,\r\n            passivePerception: 10,\r\n            initiative: 10,\r\n            url: ''\r\n        };\r\n    }\r\n\r\n    public static createMonsterGroup(): MonsterGroup {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            monsters: []\r\n        };\r\n    }\r\n\r\n    public static createMonster(): Monster {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'monster',\r\n            name: '',\r\n            size: 'medium',\r\n            category: 'humanoid',\r\n            tag: '',\r\n            alignment: '',\r\n            challenge: 1,\r\n            abilityScores: {\r\n                str: 10,\r\n                dex: 10,\r\n                con: 10,\r\n                int: 10,\r\n                wis: 10,\r\n                cha: 10\r\n            },\r\n            ac: 10,\r\n            hpMax: 4,\r\n            hpTemp: 0,\r\n            hitDice: 1,\r\n            damage: {\r\n                resist: '',\r\n                vulnerable: '',\r\n                immune: ''\r\n            },\r\n            savingThrows: '',\r\n            speed: '',\r\n            skills: '',\r\n            senses: '',\r\n            languages: '',\r\n            equipment: '',\r\n            traits: [],\r\n            conditionImmunities: ''\r\n        };\r\n    }\r\n\r\n    public static createTrait(): Trait {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            usage: '',\r\n            type: 'action',\r\n            text: '',\r\n            uses: 0\r\n        };\r\n    }\r\n\r\n    public static createEncounter(): Encounter {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            slots: [],\r\n            waves: []\r\n        };\r\n    }\r\n\r\n    public static createEncounterSlot(): EncounterSlot {\r\n        return {\r\n            id: Utils.guid(),\r\n            monsterGroupName: '',\r\n            monsterName: '',\r\n            count: 1\r\n        };\r\n    }\r\n\r\n    public static createEncounterWave(): EncounterWave {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            slots: []\r\n        };\r\n    }\r\n\r\n    public static createMapFolio(): MapFolio {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            maps: []\r\n        };\r\n    }\r\n\r\n    public static createMap(): Map {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            items: []\r\n        };\r\n    }\r\n\r\n    public static createMapItem(): MapItem {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'tile',\r\n            x: 0,\r\n            y: 0,\r\n            width: 4,\r\n            height: 4,\r\n            terrain: null\r\n        };\r\n    }\r\n\r\n    public static createCombatSetup(): CombatSetup {\r\n        return {\r\n            partyID: null,\r\n            encounterID: null,\r\n            waveID: null,\r\n            folioID: null,\r\n            mapID: null,\r\n            monsterNames: [],\r\n            encounterInitMode: 'group'\r\n        };\r\n    }\r\n\r\n    public static createCombat(): Combat {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            encounterID: null,\r\n            combatants: [],\r\n            map: null,\r\n            round: 1,\r\n            notifications: [],\r\n            issues: [],\r\n            timestamp: null\r\n        };\r\n    }\r\n\r\n    public static createNotification(): Notification {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'condition-save',\r\n            data: null,\r\n            combatant: null\r\n        };\r\n    }\r\n\r\n    public static createCondition(): Condition {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            level: 1,\r\n            text: null,\r\n            duration: null\r\n        };\r\n    }\r\n\r\n    public static createConditionDurationSaves(): ConditionDurationSaves {\r\n        return {\r\n            type: 'saves',\r\n            count: 1,\r\n            saveType: 'str',\r\n            saveDC: 10,\r\n            point: 'start'\r\n        };\r\n    }\r\n\r\n    public static createConditionDurationCombatant(): ConditionDurationCombatant {\r\n        return {\r\n            type: 'combatant',\r\n            point: 'start',\r\n            combatantID: null\r\n        };\r\n    }\r\n\r\n    public static createConditionDurationRounds(): ConditionDurationRounds {\r\n        return {\r\n            type: 'rounds',\r\n            count: 1\r\n        };\r\n    }\r\n}\r\n","export interface MonsterGroup {\r\n    id: string;\r\n    name: string;\r\n    monsters: Monster[];\r\n}\r\n\r\nexport interface Monster {\r\n    id: string;\r\n    type: string;\r\n    name: string;\r\n    size: string;\r\n    category: string;\r\n    tag: string;\r\n    alignment: string;\r\n    challenge: number;\r\n    abilityScores: {\r\n        str: number;\r\n        dex: number;\r\n        con: number;\r\n        int: number;\r\n        wis: number;\r\n        cha: number;\r\n    };\r\n    ac: number;\r\n    hpMax: number;\r\n    hpTemp: number;\r\n    hitDice: number;\r\n    damage: {\r\n        resist: string;\r\n        vulnerable: string;\r\n        immune: string;\r\n    };\r\n    savingThrows: string;\r\n    speed: string;\r\n    skills: string;\r\n    senses: string;\r\n    languages: string;\r\n    equipment: string;\r\n    traits: Trait[];\r\n    conditionImmunities: string;\r\n}\r\n\r\nexport interface Trait {\r\n    id: string;\r\n    name: string;\r\n    usage: string;\r\n    type: 'trait' | 'action' | 'legendary' | 'lair' | 'regional';\r\n    text: string;\r\n    uses: number;\r\n}\r\n\r\nexport const SIZE_TYPES = [\r\n    'tiny',\r\n    'small',\r\n    'medium',\r\n    'large',\r\n    'huge',\r\n    'gargantuan'\r\n];\r\n\r\nexport const CATEGORY_TYPES = [\r\n    'aberration',\r\n    'beast',\r\n    'celestial',\r\n    'construct',\r\n    'dragon',\r\n    'elemental',\r\n    'fey',\r\n    'fiend',\r\n    'giant',\r\n    'humanoid',\r\n    'monstrosity',\r\n    'ooze',\r\n    'plant',\r\n    'undead'\r\n];\r\n\r\nexport const TRAIT_TYPES = [\r\n    'trait',\r\n    'action',\r\n    'legendary',\r\n    'lair',\r\n    'regional'\r\n];\r\n","import Factory from './factory';\r\nimport Utils from './utils';\r\n\r\nimport { Monster, Trait, TRAIT_TYPES } from '../models/monster-group';\r\n\r\nexport default class Frankenstein {\r\n    public static nudgeValue(target: Monster, field: string, delta: number) {\r\n        let source: any = target;\r\n        let value: any = null;\r\n        const tokens = field.split('.');\r\n        tokens.forEach(token => {\r\n            if (token === tokens[tokens.length - 1]) {\r\n                value = source[token];\r\n            } else {\r\n                source = source[token];\r\n            }\r\n        });\r\n\r\n        const newValue = (field === 'challenge') ? Utils.nudgeChallenge(value, delta) : (value ? value : 0) + delta;\r\n        Frankenstein.changeValue(target, field, newValue);\r\n    }\r\n\r\n    public static changeValue(target: Monster, field: string, value: any) {\r\n        let source: any = target;\r\n        const tokens = field.split('.');\r\n        tokens.forEach(token => {\r\n            if (token === tokens[tokens.length - 1]) {\r\n                source[token] = value;\r\n\r\n                if ((field === 'abilityScores.con') || (field === 'size') || (field === 'hitDice')) {\r\n                    const sides = Utils.hitDieType(target.size);\r\n                    const conMod = Math.floor((target.abilityScores.con - 10) / 2);\r\n                    const hpPerDie = ((sides + 1) / 2) + conMod;\r\n                    const hp = Math.floor(target.hitDice * hpPerDie);\r\n                    target.hpMax = hp;\r\n                }\r\n            } else {\r\n                source = source[token];\r\n            }\r\n        });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Monster creation\r\n\r\n    public static clone(monster: Monster, name: string): Monster {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'monster',\r\n            name: name || (monster.name + ' copy'),\r\n            size: monster.size,\r\n            category: monster.category,\r\n            tag: monster.tag,\r\n            alignment: monster.alignment,\r\n            challenge: monster.challenge,\r\n            abilityScores: {\r\n                str: monster.abilityScores.str,\r\n                dex: monster.abilityScores.dex,\r\n                con: monster.abilityScores.con,\r\n                int: monster.abilityScores.int,\r\n                wis: monster.abilityScores.wis,\r\n                cha: monster.abilityScores.cha\r\n            },\r\n            ac: monster.ac,\r\n            hpMax: monster.hpMax,\r\n            hpTemp: monster.hpTemp,\r\n            hitDice: monster.hitDice,\r\n            damage: {\r\n                resist: monster.damage.resist,\r\n                vulnerable: monster.damage.vulnerable,\r\n                immune: monster.damage.immune\r\n            },\r\n            savingThrows: monster.savingThrows,\r\n            speed: monster.speed,\r\n            skills: monster.skills,\r\n            senses: monster.senses,\r\n            languages: monster.languages,\r\n            equipment: monster.equipment,\r\n            traits: monster.traits.map(trait => {\r\n                return {\r\n                    id: Utils.guid(),\r\n                    name: trait.name,\r\n                    usage: trait.usage,\r\n                    type: trait.type,\r\n                    text: trait.text,\r\n                    uses: 0\r\n                };\r\n            }),\r\n            conditionImmunities: monster.conditionImmunities\r\n        };\r\n    }\r\n\r\n    public static createFromJSON(data: any): Monster {\r\n        const monster = Factory.createMonster();\r\n\r\n        monster.type = 'monster';\r\n        monster.name = data.name;\r\n        monster.size = data.size.toLowerCase();\r\n        monster.category = data.type;\r\n        monster.tag = data.subtype;\r\n        monster.alignment = data.alignment;\r\n        monster.challenge = Utils.parseChallenge(data.challenge_rating);\r\n        monster.ac = data.armor_class;\r\n        monster.hpMax = data.hit_points;\r\n        monster.speed = data.speed;\r\n        monster.senses = data.senses;\r\n        monster.languages = data.languages;\r\n\r\n        const index = data.hit_dice.indexOf('d');\r\n        monster.hitDice = parseInt(data.hit_dice.substring(0, index), 10);\r\n\r\n        monster.abilityScores.str = data.strength;\r\n        monster.abilityScores.dex = data.dexterity;\r\n        monster.abilityScores.con = data.constitution;\r\n        monster.abilityScores.int = data.intelligence;\r\n        monster.abilityScores.wis = data.wisdom;\r\n        monster.abilityScores.cha = data.charisma;\r\n\r\n        monster.damage.resist = data.damage_resistances;\r\n        monster.damage.vulnerable = data.damage_vulnerabilities;\r\n        monster.damage.immune = data.damage_immunities;\r\n        monster.conditionImmunities = data.condition_immunities;\r\n\r\n        const saves = [\r\n            {\r\n                field: 'strength_save',\r\n                text: 'Strength'\r\n            },\r\n            {\r\n                field: 'dexterity_save',\r\n                text: 'Dexterity'\r\n            },\r\n            {\r\n                field: 'constitution_save',\r\n                text: 'Constitution'\r\n            },\r\n            {\r\n                field: 'intelligence_save',\r\n                text: 'Intelligence'\r\n            },\r\n            {\r\n                field: 'wisdom_save',\r\n                text: 'Wisdom'\r\n            },\r\n            {\r\n                field: 'charisma_save',\r\n                text: 'Charisma'\r\n            }\r\n        ];\r\n        saves.forEach(save => {\r\n            if (data[save.field]) {\r\n                const str = save.text + ' ' + data[save.field];\r\n                monster.savingThrows += monster.savingThrows === '' ? str : ', ' + str;\r\n            }\r\n        });\r\n\r\n        const skills = [\r\n            {\r\n                field: 'acrobatics',\r\n                text: 'Acrobatics'\r\n            },\r\n            {\r\n                field: 'animal_handling',\r\n                text: 'Animal handling'\r\n            },\r\n            {\r\n                field: 'arcana',\r\n                text: 'Arcana'\r\n            },\r\n            {\r\n                field: 'athletics',\r\n                text: 'Athletics'\r\n            },\r\n            {\r\n                field: 'deception',\r\n                text: 'Deception'\r\n            },\r\n            {\r\n                field: 'history',\r\n                text: 'History'\r\n            },\r\n            {\r\n                field: 'insight',\r\n                text: 'Insight'\r\n            },\r\n            {\r\n                field: 'intimidation',\r\n                text: 'Intimidation'\r\n            },\r\n            {\r\n                field: 'investigation',\r\n                text: 'Investigation'\r\n            },\r\n            {\r\n                field: 'medicine',\r\n                text: 'Medicine'\r\n            },\r\n            {\r\n                field: 'nature',\r\n                text: 'Nature'\r\n            },\r\n            {\r\n                field: 'perception',\r\n                text: 'Perception'\r\n            },\r\n            {\r\n                field: 'performance',\r\n                text: 'Performance'\r\n            },\r\n            {\r\n                field: 'persuasion',\r\n                text: 'Persuasion'\r\n            },\r\n            {\r\n                field: 'religion',\r\n                text: 'Religion'\r\n            },\r\n            {\r\n                field: 'sleight_of_hand',\r\n                text: 'Sleight of hand'\r\n            },\r\n            {\r\n                field: 'stealth',\r\n                text: 'Stealth'\r\n            },\r\n            {\r\n                field: 'survival',\r\n                text: 'Survival'\r\n            }\r\n        ];\r\n        skills.forEach(skill => {\r\n            if (data[skill.field]) {\r\n                const str = skill.text + ' ' + data[skill.field];\r\n                monster.skills += monster.skills === '' ? str : ', ' + str;\r\n            }\r\n        });\r\n\r\n        if (data.special_abilities) {\r\n            data.special_abilities.forEach((rawTrait: any) => {\r\n                const trait = this.buildTrait(rawTrait, 'trait');\r\n                monster.traits.push(trait);\r\n            });\r\n        }\r\n        if (data.actions) {\r\n            data.actions.forEach((rawTrait: any) => {\r\n                const trait = this.buildTrait(rawTrait, 'action');\r\n                monster.traits.push(trait);\r\n            });\r\n        }\r\n        if (data.legendary_actions) {\r\n            data.legendary_actions.forEach((rawTrait: any) => {\r\n                const trait = this.buildTrait(rawTrait, 'legendary');\r\n                monster.traits.push(trait);\r\n            });\r\n        }\r\n\r\n        return monster;\r\n    }\r\n\r\n    private static buildTrait(rawTrait: any, type: 'trait' | 'action' | 'legendary' | 'lair' | 'regional'): Trait {\r\n        let name = '';\r\n        let usage = '';\r\n\r\n        const openBracket = rawTrait.name.indexOf('(');\r\n        if (openBracket === -1) {\r\n            name = rawTrait.name;\r\n        } else {\r\n            const closeBracket = rawTrait.name.indexOf(')');\r\n            name = rawTrait.name.substring(0, openBracket - 1);\r\n            usage = rawTrait.name.substring(openBracket + 1, closeBracket).toLowerCase();\r\n        }\r\n\r\n        const text = rawTrait.desc.replace(/•/g, '*');\r\n\r\n        return {\r\n            id: Utils.guid(),\r\n            type: type,\r\n            name: name,\r\n            usage: usage,\r\n            text: text,\r\n            uses: 0\r\n        };\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Traits\r\n\r\n    public static copyTrait(target: Monster, trait: Trait) {\r\n        const copy = JSON.parse(JSON.stringify(trait));\r\n        copy.id = Utils.guid();\r\n        target.traits.push(copy);\r\n    }\r\n\r\n    public static addTrait(target: Monster, type: 'trait' | 'action' | 'legendary' | 'lair' | 'regional') {\r\n        const trait = Factory.createTrait();\r\n        trait.type = type;\r\n        trait.name = 'New ' + Utils.traitType(type, false).toLowerCase();\r\n        target.traits.push(trait);\r\n    }\r\n\r\n    public static removeTrait(target: Monster, trait: Trait) {\r\n        const index = target.traits.indexOf(trait);\r\n        target.traits.splice(index, 1);\r\n    }\r\n\r\n    public static swapTraits(target: Monster, t1: Trait, t2: Trait) {\r\n        const index1 = target.traits.indexOf(t1);\r\n        const index2 = target.traits.indexOf(t2);\r\n        target.traits[index2] = t1;\r\n        target.traits[index1] = t2;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Randomisation\r\n\r\n    public static spliceMonsters(target: Monster, monsters: Monster[]) {\r\n        const fields = [\r\n            'size',\r\n            'category',\r\n            'tag',\r\n            'alignment',\r\n            'challenge',\r\n            'speed',\r\n            'senses',\r\n            'languages',\r\n            'equipment',\r\n            'abilityScores.str',\r\n            'abilityScores.dex',\r\n            'abilityScores.con',\r\n            'abilityScores.int',\r\n            'abilityScores.wis',\r\n            'abilityScores.cha',\r\n            'savingThrows',\r\n            'skills',\r\n            'ac',\r\n            'hitDice',\r\n            'damage.resist',\r\n            'damage.vulnerable',\r\n            'damage.immune',\r\n            'conditionImmunities'\r\n        ];\r\n        fields.forEach(field => {\r\n            this.setRandomValue(target, field, monsters);\r\n        });\r\n\r\n        target.traits = [];\r\n\r\n        TRAIT_TYPES.forEach(type => {\r\n            // Get all traits of this type\r\n            const traits: Trait[] = [];\r\n            monsters.forEach(m => {\r\n                m.traits.filter(t => t.type === type)\r\n                    .forEach(t => traits.push(t));\r\n            });\r\n\r\n            // Collate by name\r\n            const distinct: { trait: Trait, count: number }[] = [];\r\n            traits.forEach(t => {\r\n                const current = distinct.find(d => d.trait.name === t.name);\r\n                if (current) {\r\n                    current.count += 1;\r\n                } else {\r\n                    distinct.push({\r\n                        trait: t,\r\n                        count: 1\r\n                    });\r\n                }\r\n            });\r\n\r\n            // If any are common to all monsters, copy them and remove from the candidates\r\n            const addedIDs: string[] = [];\r\n            distinct.filter(d => d.count === monsters.length)\r\n                .forEach(d => {\r\n                    this.copyTrait(target, d.trait);\r\n                    addedIDs.push(d.trait.id);\r\n                });\r\n            addedIDs.forEach(id => {\r\n                const index = distinct.findIndex(d => d.trait.id === id);\r\n                distinct.splice(index, 1);\r\n            });\r\n\r\n            const avg = traits.length / monsters.length;\r\n            while (target.traits.filter(t => t.type === type).length < avg) {\r\n                const index = Math.floor(Math.random() * distinct.length);\r\n                const t = distinct[index].trait;\r\n                this.copyTrait(target, t);\r\n                distinct.splice(index, 1);\r\n            }\r\n        });\r\n    }\r\n\r\n    public static setRandomValue(target: Monster, field: string, monsters: Monster[]) {\r\n        const index = Math.floor(Math.random() * monsters.length);\r\n        const m = monsters[index];\r\n\r\n        let source: any = m;\r\n        let value = null;\r\n        const tokens = field.split('.');\r\n        tokens.forEach(token => {\r\n            if (token === tokens[tokens.length - 1]) {\r\n                value = source[token];\r\n            } else {\r\n                source = source[token];\r\n            }\r\n        });\r\n\r\n        this.changeValue(target, field, value);\r\n    }\r\n\r\n    public static addRandomTrait(target: Monster, type: string, monsters: Monster[]) {\r\n        const traits: Trait[] = [];\r\n        monsters.forEach(m => {\r\n            m.traits.filter(t => t.type === type)\r\n                .forEach(t => {\r\n                    traits.push(t);\r\n                });\r\n        });\r\n\r\n        const index = Math.floor(Math.random() * traits.length);\r\n        const trait = traits[index];\r\n\r\n        this.copyTrait(target, trait);\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport warning from '../../resources/images/warning.svg';\r\n\r\ninterface Props {\r\n    text: string;\r\n    callback: () => void;\r\n    details: string;\r\n    disabled: boolean;\r\n}\r\n\r\ninterface State {\r\n    pressed: boolean;\r\n}\r\n\r\nexport default class ConfirmButton extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        details: null,\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            pressed: false\r\n        };\r\n    }\r\n\r\n    private toggle() {\r\n        this.setState({\r\n            pressed: !this.state.pressed\r\n        });\r\n    }\r\n\r\n    private perform() {\r\n        this.toggle();\r\n        this.props.callback();\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let content = null;\r\n            if (this.state.pressed) {\r\n                content = (\r\n                    <div>\r\n                        <div className='title'>{this.props.text} - are you sure?</div>\r\n                        <img className='image' src={warning} alt='warning' />\r\n                        {this.props.details ? <div className='details'>{this.props.details}</div> : null}\r\n                        <div className='confirmation'>\r\n                            <div className='destructive' onClick={() => this.perform()}>yes</div>\r\n                            <div className='non-destructive' onClick={() => this.toggle()}>no</div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                content = (\r\n                    <div>\r\n                        <div className='title'>{this.props.text}</div>\r\n                        <img className='image' src={warning} alt='warning' />\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <button className={this.props.disabled ? 'disabled' : ''} onClick={() => this.toggle()}>\r\n                    {content}\r\n                </button>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    controls: JSX.Element[];\r\n    disabled: boolean;\r\n}\r\n\r\nexport default class ControlRow extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        disabled: false\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'control-row';\r\n            if (this.props.disabled) {\r\n                style += ' disabled';\r\n            }\r\n            switch (this.props.controls.length) {\r\n                case 1:\r\n                    style += ' one';\r\n                    break;\r\n                case 2:\r\n                    style += ' two';\r\n                    break;\r\n                case 3:\r\n                    style += ' three';\r\n                    break;\r\n                case 4:\r\n                    style += ' four';\r\n                    break;\r\n                case 5:\r\n                    style += ' five';\r\n                    break;\r\n            }\r\n\r\n            return (\r\n                <div className={style}>\r\n                    {this.props.controls}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport ellipsis from '../../resources/images/ellipsis.svg';\r\n\r\ninterface Props {\r\n    options: { id: string; text: string; disabled?: boolean }[];\r\n    select: (optionID: string) => void;\r\n    selectedID: string;\r\n    placeholder: string;\r\n    disabled: boolean;\r\n}\r\n\r\ninterface State {\r\n    open: boolean;\r\n}\r\n\r\nexport default class Dropdown extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        selectedID: null,\r\n        placeholder: 'select...',\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            open: false\r\n        };\r\n    }\r\n\r\n    private toggleOpen(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        this.setState({\r\n            open: !this.state.open\r\n        });\r\n    }\r\n\r\n    private select(optionID: string) {\r\n        this.setState({\r\n            open: false\r\n        });\r\n        this.props.select(optionID);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            if (this.props.options.length === 0) {\r\n                return null;\r\n            }\r\n\r\n            let style = this.props.disabled ? 'dropdown disabled' : 'dropdown';\r\n            const content = [];\r\n\r\n            let selectedText;\r\n            if (this.props.selectedID) {\r\n                const option: { id: string; text: string; disabled?: boolean } | undefined = this.props.options.find(o => o.id === this.props.selectedID);\r\n                if (option) {\r\n                    selectedText = option.text;\r\n                }\r\n            } else {\r\n                selectedText = /*this.props.text ||*/ this.props.placeholder;\r\n            }\r\n\r\n            content.push(\r\n                <div key='selection' className='dropdown-top' title={selectedText}>\r\n                    <div className='item-text'>{selectedText}</div>\r\n                    <img className='arrow' src={ellipsis} alt='arrow' />\r\n                </div>\r\n            );\r\n\r\n            if (this.state.open) {\r\n                style += ' open';\r\n\r\n                const items = this.props.options.map(option => {\r\n                    if (option.text === null) {\r\n                        return <div key={option.id} className='divider' />;\r\n                    } else {\r\n                        return (\r\n                            <DropdownOption\r\n                                key={option.id}\r\n                                option={option}\r\n                                selected={option.id === this.props.selectedID}\r\n                                select={optionID => this.select(optionID)}\r\n                            />\r\n                        );\r\n                    }\r\n                });\r\n\r\n                content.push(\r\n                    <div key='options' className='dropdown-options'>\r\n                        {items}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={style} onClick={e => this.toggleOpen(e)}>\r\n                    {content}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface DropdownOptionProps {\r\n    option: { id: string; text: string; disabled?: boolean };\r\n    selected: boolean;\r\n    select: (optionID: string) => void;\r\n}\r\n\r\nclass DropdownOption extends React.Component<DropdownOptionProps> {\r\n    private click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (!this.props.option.disabled) {\r\n            this.props.select(this.props.option.id);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'dropdown-option';\r\n            if (this.props.selected) {\r\n                style += ' selected';\r\n            }\r\n            if (this.props.option.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            return (\r\n                <div className={style} title={this.props.option.text} onClick={e => this.click(e)}>\r\n                    {this.props.option.text}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport arrow from '../../resources/images/down-arrow-black.svg';\r\n\r\ninterface Props {\r\n    text: string;\r\n    content: string | JSX.Element;\r\n    disabled: boolean;\r\n}\r\n\r\ninterface State {\r\n    expanded: boolean;\r\n}\r\n\r\nexport default class Expander extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            expanded: false\r\n        };\r\n    }\r\n\r\n    private toggle() {\r\n        this.setState({\r\n            expanded: !this.state.expanded\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = this.props.disabled ? 'expander disabled' : 'expander';\r\n            if (this.state.expanded) {\r\n                style += ' expanded';\r\n            }\r\n\r\n            let content = null;\r\n            if (this.state.expanded) {\r\n                content = (\r\n                    <div className='expander-content'>\r\n                        {this.props.content}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={style}>\r\n                    <div className='expander-header' onClick={() => this.toggle()}>\r\n                        <div className='expander-text'>{this.props.text}</div>\r\n                        <img className='expander-button' src={arrow} alt='arrow' />\r\n                    </div>\r\n                    {content}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport arrow from '../../resources/images/down-arrow-black.svg';\r\n\r\ninterface Props {\r\n    click: (dir: string, dir2: 'in' | 'out' | null) => void;\r\n    direction: 'out' | 'in' | 'both' | 'eight';\r\n    disabled: boolean;\r\n}\r\n\r\nexport default class Radial extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        direction: 'out',\r\n        disabled: false\r\n    };\r\n\r\n    private click(e: React.MouseEvent, dir: string, dir2: 'in' | 'out' | null = null) {\r\n        e.stopPropagation();\r\n        this.props.click(dir, dir2);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'radial ' + (this.props.direction || 'out');\r\n            if (this.props.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            const showOut = (this.props.direction === 'out') || (this.props.direction === 'both') || (this.props.direction === 'eight');\r\n            const showIn = (this.props.direction === 'in') || (this.props.direction === 'both');\r\n            const showDiag = (this.props.direction === 'eight');\r\n\r\n            return (\r\n                <div className={style}>\r\n                    <div className='empty' style={{ display: showDiag ? 'none' : 'inline-block' }} />\r\n                    <div className='btn diag' style={{ display: showDiag ? 'inline-block' : 'none' }}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(135deg)' }}\r\n                            alt='nw'\r\n                            onClick={e => this.click(e, 'NW')}\r\n                        />\r\n                    </div>\r\n                    <div className='btn'>\r\n                        <div>\r\n                            <img\r\n                                src={arrow}\r\n                                style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(180deg)' }}\r\n                                alt='n'\r\n                                onClick={e => this.click(e, 'N', 'out')}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <img\r\n                                src={arrow}\r\n                                style={{ display: showIn ? 'inline-block' : 'none' }}\r\n                                alt='n'\r\n                                onClick={e => this.click(e, 'N', 'in')}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className='empty' style={{ display: showDiag ? 'none' : 'inline-block' }} />\r\n                    <div className='btn diag' style={{ display: showDiag ? 'inline-block' : 'none' }}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(-135deg)' }}\r\n                            alt='ne'\r\n                            onClick={e => this.click(e, 'NE')}\r\n                        />\r\n                    </div>\r\n                    <div className='btn' style={{ padding: (showIn && showOut) ? '10px 0' : '0'}}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(90deg)' }}\r\n                            alt='w'\r\n                            onClick={e => this.click(e, 'W', 'out')}\r\n                        />\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showIn ? 'inline-block' : 'none', transform: 'rotate(-90deg)' }}\r\n                            alt='w'\r\n                            onClick={e => this.click(e, 'W', 'in')}\r\n                        />\r\n                    </div>\r\n                    <div className='empty' />\r\n                    <div className='btn' style={{ padding: (showIn && showOut) ? '10px 0' : '0'}}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showIn ? 'inline-block' : 'none', transform: 'rotate(90deg)' }}\r\n                            alt='e'\r\n                            onClick={e => this.click(e, 'E', 'in')}\r\n                        />\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(-90deg)' }}\r\n                            alt='e'\r\n                            onClick={e => this.click(e, 'E', 'out')}\r\n                        />\r\n                    </div>\r\n                    <div className='empty' style={{ display: showDiag ? 'none' : 'inline-block' }} />\r\n                    <div className='btn diag' style={{ display: showDiag ? 'inline-block' : 'none' }}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(45deg)' }}\r\n                            alt='sw'\r\n                            onClick={e => this.click(e, 'SW')}\r\n                        />\r\n                    </div>\r\n                    <div className='btn'>\r\n                        <div>\r\n                            <img\r\n                                src={arrow}\r\n                                style={{ display: showIn ? 'inline-block' : 'none', transform: 'rotate(180deg)' }}\r\n                                alt='s'\r\n                                onClick={e => this.click(e, 'S', 'in')}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <img\r\n                                src={arrow}\r\n                                style={{ display: showOut ? 'inline-block' : 'none' }}\r\n                                alt='s'\r\n                                onClick={e => this.click(e, 'S', 'out')}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className='empty' style={{ display: showDiag ? 'none' : 'inline-block' }} />\r\n                    <div className='btn diag' style={{ display: showDiag ? 'inline-block' : 'none' }}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(-45deg)' }}\r\n                            alt='se'\r\n                            onClick={e => this.click(e, 'SE')}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport minus from '../../resources/images/minus.svg';\r\nimport plus from '../../resources/images/plus.svg';\r\n\r\ninterface Props {\r\n    source: any;\r\n    name: string;\r\n    nudgeValue: (delta: number) => void;\r\n    label: string;\r\n    disabled: boolean;\r\n    factors: number[];\r\n    display: ((value: number) => string) | null;\r\n}\r\n\r\nexport default class Spin extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        label: null,\r\n        disabled: false,\r\n        factors: null,\r\n        display: null\r\n    };\r\n\r\n    private click(e: React.MouseEvent, delta: number) {\r\n        e.stopPropagation();\r\n        this.props.nudgeValue(delta);\r\n    }\r\n\r\n    private touchEnd(e: React.TouchEvent, delta: number) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        this.props.nudgeValue(delta);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'info-value';\r\n            let value = this.props.source[this.props.name];\r\n            if (value === 0) {\r\n                style += ' dimmed';\r\n            }\r\n\r\n            if (this.props.display) {\r\n                value = this.props.display(value);\r\n            }\r\n\r\n            const minusBtns: JSX.Element[] = [];\r\n            const plusBtns: JSX.Element[] = [];\r\n\r\n            if (this.props.factors) {\r\n                this.props.factors.forEach(factor => {\r\n                    minusBtns.push(\r\n                        <div\r\n                            key={'minus' + factor}\r\n                            className='spin-button factor'\r\n                            onTouchEnd={e => this.touchEnd(e, -1 * factor)}\r\n                            onClick={e => this.click(e, -1 * factor)}\r\n                        >\r\n                            {'-' + factor}\r\n                        </div>\r\n                    );\r\n\r\n                    plusBtns.push(\r\n                        <div\r\n                            key={'plus' + factor}\r\n                            className='spin-button factor'\r\n                            onTouchEnd={e => this.touchEnd(e, +1 * factor)}\r\n                            onClick={e => this.click(e, +1 * factor)}\r\n                        >\r\n                            {'+' + factor}\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                minusBtns.reverse();\r\n            } else {\r\n                minusBtns.push(\r\n                    <div key='minus1' className='spin-button' onTouchEnd={e => this.touchEnd(e, -1)} onClick={e => this.click(e, -1)}>\r\n                        <img className='image' src={minus} alt='minus' />\r\n                    </div>\r\n                );\r\n\r\n                plusBtns.push(\r\n                    <div key='plus1' className='spin-button' onTouchEnd={e => this.touchEnd(e, +1)} onClick={e => this.click(e, +1)}>\r\n                        <img className='image' src={plus} alt='plus' />\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            const infoWidth = 80 * (this.props.factors ? this.props.factors.length : 1);\r\n\r\n            return (\r\n                <div className={this.props.disabled ? 'spin disabled' : 'spin'}>\r\n                    <div className='minus'>\r\n                        {minusBtns}\r\n                    </div>\r\n                    <div className='info' style={{ width: 'calc(100% - ' + infoWidth + 'px)' }}>\r\n                        <div className='info-label'>{this.props.label}</div>\r\n                        <div className={style}>{value}</div>\r\n                    </div>\r\n                    <div className='plus'>\r\n                        {plusBtns}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Monster } from '../../models/monster-group';\r\n\r\nimport Spin from '../controls/spin';\r\n\r\ninterface Props {\r\n    combatant: Monster;\r\n    edit: boolean;\r\n    nudgeValue: (combatant: Monster, field: string, delta: number) => void;\r\n}\r\n\r\ninterface State {\r\n    showAbilityScores: boolean;\r\n}\r\n\r\nexport default class AbilityScorePanel extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        edit: null,\r\n        nudgeValue: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showAbilityScores: false\r\n        };\r\n    }\r\n\r\n    private toggleAbilityScores() {\r\n        this.setState({\r\n            showAbilityScores: !this.state.showAbilityScores\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let result = null;\r\n\r\n            if (this.props.edit) {\r\n                result = (\r\n                    <div>\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='str'\r\n                            label='strength'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.str', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='dex'\r\n                            label='dexterity'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.dex', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='con'\r\n                            label='constitution'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.con', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='int'\r\n                            label='intelligence'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.int', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='wis'\r\n                            label='wisdom'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.wis', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='cha'\r\n                            label='charisma'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.cha', delta)}\r\n                        />\r\n                    </div>\r\n                );\r\n            } else {\r\n                result = (\r\n                    <div className='ability-scores' onClick={() => this.toggleAbilityScores()}>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>str</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.str\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.str)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>dex</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.dex\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.dex)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>con</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.con\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.con)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>int</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.int\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.int)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>wis</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.wis\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.wis)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>cha</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.cha\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.cha)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return result;\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combat, Combatant } from '../../models/combat';\r\nimport { Condition } from '../../models/condition';\r\n\r\nimport Expander from '../controls/expander';\r\nimport Spin from '../controls/spin';\r\n\r\ninterface Props {\r\n    combatant: Combatant;\r\n    combat: Combat;\r\n    nudgeConditionValue: (condition: Condition, field: string, delta: number) => void;\r\n    addCondition: () => void;\r\n    editCondition: (condition: Condition) => void;\r\n    removeCondition: (conditionID: string) => void;\r\n}\r\n\r\nexport default class ConditionsPanel extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const conditions = [];\r\n            if (this.props.combatant.conditions) {\r\n                for (let n = 0; n !== this.props.combatant.conditions.length; ++n) {\r\n                    const c = this.props.combatant.conditions[n];\r\n                    conditions.push(\r\n                        <ConditionPanel\r\n                            key={n}\r\n                            condition={c}\r\n                            combat={this.props.combat}\r\n                            nudgeConditionValue={(condition, type, delta) => this.props.nudgeConditionValue(condition, type, delta)}\r\n                            editCondition={condition => this.props.editCondition(condition)}\r\n                            removeCondition={conditionID => this.props.removeCondition(conditionID)}\r\n                        />\r\n                    );\r\n                }\r\n            }\r\n\r\n            return (\r\n                <div className='section'>\r\n                    {conditions}\r\n                    <button onClick={() => this.props.addCondition()}>add a condition</button>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface ConditionPanelProps {\r\n    condition: Condition;\r\n    combat: Combat;\r\n    nudgeConditionValue: (condition: Condition, field: string, delta: number) => void;\r\n    editCondition: (condition: Condition) => void;\r\n    removeCondition: (conditionID: string) => void;\r\n}\r\n\r\nclass ConditionPanel extends React.Component<ConditionPanelProps> {\r\n    public render() {\r\n        try {\r\n            let name: string = this.props.condition.name || 'condition';\r\n            if (this.props.condition.name === 'exhaustion') {\r\n                name += ' (' + this.props.condition.level + ')';\r\n            }\r\n            if ((this.props.condition.name === 'custom') && (this.props.condition.text !== null)) {\r\n                name = this.props.condition.text;\r\n            }\r\n\r\n            if (this.props.condition.duration !== null) {\r\n                name += ' ' + Utils.conditionDurationText(this.props.condition, this.props.combat);\r\n            }\r\n\r\n            const description = [];\r\n            if (this.props.condition.name === 'exhaustion') {\r\n                description.push(\r\n                    <div key='level' className='section'>\r\n                        <Spin\r\n                            source={this.props.condition}\r\n                            name='level'\r\n                            label='level'\r\n                            nudgeValue={delta => this.props.nudgeConditionValue(this.props.condition, 'level', delta)}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n            const text = Utils.conditionText(this.props.condition);\r\n            for (let n = 0; n !== text.length; ++n) {\r\n                description.push(<div key={n} className='section'>{text[n]}</div>);\r\n            }\r\n\r\n            return (\r\n                <Expander\r\n                    text={name}\r\n                    content={(\r\n                        <div>\r\n                            {description}\r\n                            <div className='divider' />\r\n                            <button onClick={() => this.props.editCondition(this.props.condition)}>edit</button>\r\n                            <button onClick={() => this.props.removeCondition(this.props.condition.id)}>remove</button>\r\n                        </div>\r\n                    )}\r\n                />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Showdown from 'showdown';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combatant } from '../../models/combat';\r\nimport { Monster, Trait, TRAIT_TYPES } from '../../models/monster-group';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport ControlRow from '../controls/control-row';\r\nimport Expander from '../controls/expander';\r\n\r\nconst showdown = new Showdown.Converter();\r\n\r\ninterface Props {\r\n    combatant: Monster | (Combatant & Monster);\r\n    mode: 'view' | 'edit' | 'template' | 'combat';\r\n    filter: string;\r\n    addTrait: (traitType: 'trait' | 'action' | 'legendary' | 'lair' | 'regional') => void;\r\n    copyTrait: (trait: Trait) => void;\r\n    removeTrait: (trait: Trait) => void;\r\n    changeValue: (trait: Trait, field: string, value: any) => void;\r\n    swapTraits: (t1: Trait, t2: Trait) => void;\r\n}\r\n\r\nexport default class TraitsPanel extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        mode: 'view',\r\n        filter: '',\r\n        addTrait: null,\r\n        copyTrait: null,\r\n        removeTrait: null,\r\n        changeValue: null,\r\n        swapTraits: null\r\n    };\r\n\r\n    private createTraitPanel(trait: Trait, prevTrait: Trait | null, nextTrait: Trait | null) {\r\n        return (\r\n            <TraitPanel\r\n                key={trait.id}\r\n                trait={trait}\r\n                mode={this.props.mode}\r\n                prevTrait={prevTrait}\r\n                nextTrait={nextTrait}\r\n                changeValue={(action, type, value) => this.props.changeValue(action, type, value)}\r\n                removeTrait={action => this.props.removeTrait(action)}\r\n                copyTrait={action => this.props.copyTrait(action)}\r\n                swapTraits={(t1, t2) => this.props.swapTraits(t1, t2)}\r\n            />\r\n        );\r\n    }\r\n\r\n    private createSection(traitsByType: { [id: string]: JSX.Element[] }, type: string) {\r\n        const traits = traitsByType[type];\r\n        if (traits.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='section subheading'>{Utils.traitType(type, true)}</div>\r\n                {traits}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const traitsByType: { [id: string]: JSX.Element[] } = {};\r\n\r\n            TRAIT_TYPES.forEach(type => {\r\n                const traits = this.props.combatant.traits\r\n                    .filter(t => t.type === type)\r\n                    .filter(t => Utils.match(this.props.filter, t.name));\r\n\r\n                const list: JSX.Element[] = [];\r\n                for (let n = 0; n !== traits.length; ++n) {\r\n                    const trait = traits[n];\r\n                    const prevTrait = n !== 0 ? traits[n - 1] : null;\r\n                    const nextTrait = n !== traits.length - 1 ? traits[n + 1] : null;\r\n                    list.push(this.createTraitPanel(trait, prevTrait, nextTrait));\r\n                }\r\n\r\n                if (this.props.mode === 'edit') {\r\n                    list.push(\r\n                        <button key='add' onClick={() => this.props.addTrait(type as 'trait' | 'action' | 'legendary' | 'lair' | 'regional')}>\r\n                            add a new {Utils.traitType(type, false)}\r\n                        </button>\r\n                    );\r\n                }\r\n\r\n                traitsByType[type] = list;\r\n            });\r\n\r\n            if (this.props.mode === 'edit') {\r\n                return (\r\n                    <div className='row collapse'>\r\n                        <div className='columns small-4 medium-4 large-4 list-column'>\r\n                            {this.createSection(traitsByType, 'trait')}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 list-column'>\r\n                            {this.createSection(traitsByType, 'action')}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 list-column'>\r\n                            {this.createSection(traitsByType, 'legendary')}\r\n                            {this.createSection(traitsByType, 'lair')}\r\n                            {this.createSection(traitsByType, 'regional')}\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            if (this.props.combatant.traits.length === 0) {\r\n                return (\r\n                    <div><i>no traits or actions</i></div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div>\r\n                    {this.createSection(traitsByType, 'trait')}\r\n                    {this.createSection(traitsByType, 'action')}\r\n                    {this.createSection(traitsByType, 'legendary')}\r\n                    {this.createSection(traitsByType, 'lair')}\r\n                    {this.createSection(traitsByType, 'regional')}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface TraitPanelProps {\r\n    trait: Trait;\r\n    mode: 'view' | 'edit' | 'template' | 'combat';\r\n    prevTrait: Trait | null;\r\n    nextTrait: Trait | null;\r\n    changeValue: (trait: Trait, field: string, value: any) => void;\r\n    copyTrait: (trait: Trait) => void;\r\n    removeTrait: (trait: Trait) => void;\r\n    swapTraits: (t1: Trait, t2: Trait) => void;\r\n}\r\n\r\nclass TraitPanel extends React.Component<TraitPanelProps> {\r\n    public render() {\r\n        try {\r\n            let maxUses = 0;\r\n            let heading = this.props.trait.name || 'unnamed ' + Utils.traitType(this.props.trait.type, false);\r\n\r\n            if (this.props.trait.usage) {\r\n                let used = '';\r\n                if (this.props.trait.usage.toLowerCase().startsWith('recharge ')) {\r\n                    maxUses = 1;\r\n                    if (this.props.trait.uses > 0) {\r\n                        used = '; used';\r\n                    }\r\n                }\r\n                const found = this.props.trait.usage.toLowerCase().match(/(\\d+)\\s*\\/\\s*day/);\r\n                if (found) {\r\n                    maxUses = parseInt(found[1], 10);\r\n                    if (this.props.trait.uses > 0) {\r\n                        used = '; used ' + this.props.trait.uses;\r\n                    }\r\n                }\r\n                heading += ' *(' + this.props.trait.usage + used + ')*';\r\n            }\r\n            const markdown = '**' + heading + '** ' + this.props.trait.text;\r\n\r\n            switch (this.props.mode) {\r\n                case 'view':\r\n                    return (\r\n                        <div key={this.props.trait.id} className='section trait'>\r\n                            <div dangerouslySetInnerHTML={{ __html: showdown.makeHtml(markdown) }} />\r\n                        </div>\r\n                    );\r\n                case 'edit':\r\n                    const details = (\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='name'\r\n                                value={this.props.trait.name}\r\n                                onChange={event => this.props.changeValue(this.props.trait, 'name', event.target.value)}\r\n                            />\r\n                            <input\r\n                                type='text'\r\n                                placeholder='usage'\r\n                                value={this.props.trait.usage}\r\n                                onChange={event => this.props.changeValue(this.props.trait, 'usage', event.target.value)}\r\n                            />\r\n                            <textarea\r\n                                placeholder='details'\r\n                                value={this.props.trait.text}\r\n                                onChange={event => this.props.changeValue(this.props.trait, 'text', event.target.value)}\r\n                            />\r\n                            <div className='divider' />\r\n                            <ControlRow\r\n                                controls={[\r\n                                    <button\r\n                                        key='up'\r\n                                        className={this.props.prevTrait ? '' : 'disabled'}\r\n                                        onClick={() => this.props.swapTraits(this.props.trait, this.props.prevTrait as Trait)}\r\n                                    >\r\n                                        move up\r\n                                    </button>,\r\n                                    <button\r\n                                        key='down'\r\n                                        className={this.props.nextTrait ? '' : 'disabled'}\r\n                                        onClick={() => this.props.swapTraits(this.props.trait, this.props.nextTrait as Trait)}\r\n                                    >\r\n                                        move down\r\n                                    </button>\r\n                                ]}\r\n                            />\r\n                            <ConfirmButton text='delete' callback={() => this.props.removeTrait(this.props.trait)} />\r\n                        </div>\r\n                    );\r\n\r\n                    return (\r\n                        <Expander\r\n                            text={this.props.trait.name || 'unnamed ' + Utils.traitType(this.props.trait.type, false)}\r\n                            content={details}\r\n                        />\r\n                    );\r\n                case 'template':\r\n                    return (\r\n                        <div key={this.props.trait.id} className='section trait'>\r\n                            <div dangerouslySetInnerHTML={{ __html: showdown.makeHtml(markdown) }} />\r\n                            <button onClick={() => this.props.copyTrait(this.props.trait)}>copy</button>\r\n                        </div>\r\n                    );\r\n                case 'combat':\r\n                    let style = '';\r\n                    let usage = null;\r\n                    if (maxUses > 0) {\r\n                        const isTapped = this.props.trait.uses >= maxUses;\r\n                        if (isTapped) {\r\n                            style = 'strikethrough';\r\n                            usage = <button onClick={() => this.props.changeValue(this.props.trait, 'uses', 0)}>recharge</button>;\r\n                        } else {\r\n                            usage = <button onClick={() => this.props.changeValue(this.props.trait, 'uses', this.props.trait.uses + 1)}>use</button>;\r\n                        }\r\n                    }\r\n                    return (\r\n                        <div key={this.props.trait.id} className='section trait'>\r\n                            <div className={style} dangerouslySetInnerHTML={{ __html: showdown.makeHtml(markdown) }} />\r\n                            {usage}\r\n                        </div>\r\n                    );\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    heading: string | JSX.Element | JSX.Element[];\r\n    content: string | JSX.Element | JSX.Element[];\r\n}\r\n\r\nexport default class InfoCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div className='card'>\r\n                    {this.props.heading}\r\n                    <div className='card-content'>\r\n                        {this.props.content}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combat, Combatant } from '../../models/combat';\r\nimport { Condition } from '../../models/condition';\r\nimport { Encounter, EncounterSlot, EncounterWave } from '../../models/encounter';\r\nimport { Monster, MonsterGroup, Trait } from '../../models/monster-group';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport ControlRow from '../controls/control-row';\r\nimport Dropdown from '../controls/dropdown';\r\nimport Expander from '../controls/expander';\r\nimport Radial from '../controls/radial';\r\nimport Spin from '../controls/spin';\r\nimport AbilityScorePanel from '../panels/ability-score-panel';\r\nimport ConditionsPanel from '../panels/conditions-panel';\r\nimport TraitsPanel from '../panels/traits-panel';\r\nimport InfoCard from './info-card';\r\n\r\nimport arrow from '../../resources/images/down-arrow.svg';\r\n\r\ninterface Props {\r\n    combatant: Monster | (Monster & Combatant);\r\n    mode: string;\r\n    library: MonsterGroup[];\r\n    changeValue: (monster: any, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, delta: number) => void;\r\n    // Library\r\n    filter: string;\r\n    editMonster: (monster: Monster) => void;\r\n    removeMonster: (monster: Monster) => void;\r\n    cloneMonster: (monster: Monster, name: string) => void;\r\n    moveToGroup: (monster: Monster, group: string) => void;\r\n    copyTrait: (trait: Trait) => void;\r\n    selectMonster: (monster: Monster) => void;\r\n    deselectMonster: (monster: Monster) => void;\r\n    // Encounter builder\r\n    encounter: Encounter;\r\n    slot: EncounterSlot;\r\n    addEncounterSlot: (monster: Monster, waveID: string | null) => void;\r\n    removeEncounterSlot: (slot: EncounterSlot) => void;\r\n    // Combat\r\n    combat: Combat;\r\n    makeCurrent: (combatant: Combatant) => void;\r\n    makeActive: (combatant: Combatant) => void;\r\n    makeDefeated: (combatant: Combatant) => void;\r\n    endTurn: (combatant: Combatant) => void;\r\n    mapAdd: (combatant: Combatant) => void;\r\n    mapMove: (combatant: Combatant, dir: string) => void;\r\n    mapRemove: (combatant: Combatant) => void;\r\n    removeCombatant: (combatant: Combatant) => void;\r\n    changeHP: (combatant: Combatant, hp: number, tempHP: number) => void;\r\n    addCondition: (combatant: Combatant) => void;\r\n    editCondition: (combatant: Combatant, condition: Condition) => void;\r\n    removeCondition: (combatant: Combatant, conditionID: string) => void;\r\n    nudgeConditionValue: (condition: Condition, field: string, delta: number) => void;\r\n}\r\n\r\ninterface State {\r\n    showDetails: boolean;\r\n    cloneName: string;\r\n    damageOrHealing: number;\r\n}\r\n\r\nexport default class MonsterCard extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        library: null,\r\n        changeValue: null,\r\n        nudgeValue: null,\r\n        filter: '',\r\n        editMonster: null,\r\n        removeMonster: null,\r\n        cloneMonster: null,\r\n        moveToGroup: null,\r\n        copyTrait: null,\r\n        selectMonster: null,\r\n        deselectMonster: null,\r\n        encounter: null,\r\n        slot: null,\r\n        addEncounterSlot: null,\r\n        removeEncounterSlot: null,\r\n        combat: null,\r\n        makeCurrent: null,\r\n        makeActive: null,\r\n        makeDefeated: null,\r\n        endTurn: null,\r\n        mapAdd: null,\r\n        mapMove: null,\r\n        mapRemove: null,\r\n        removeCombatant: null,\r\n        changeHP: null,\r\n        addCondition: null,\r\n        editCondition: null,\r\n        removeCondition: null,\r\n        nudgeConditionValue: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showDetails: false,\r\n            cloneName: props.combatant.name + ' copy',\r\n            damageOrHealing: 0\r\n        };\r\n    }\r\n\r\n    private setCloneName(cloneName: string) {\r\n        this.setState({\r\n            cloneName: cloneName\r\n        });\r\n    }\r\n\r\n    private toggleDetails() {\r\n        this.setState({\r\n            showDetails: !this.state.showDetails\r\n        });\r\n    }\r\n\r\n    private setDamage(value: number) {\r\n        this.setState({\r\n            damageOrHealing: value\r\n        });\r\n    }\r\n\r\n    private nudgeDamage(delta: number) {\r\n        this.setState({\r\n            damageOrHealing: Math.max(this.state.damageOrHealing + delta, 0)\r\n        });\r\n    }\r\n\r\n    private heal() {\r\n        const combatant = this.props.combatant as Combatant;\r\n\r\n        let hp = (combatant.hp ? combatant.hp : 0) + this.state.damageOrHealing;\r\n        hp = Math.min(hp, this.props.combatant.hpMax);\r\n\r\n        this.setState({\r\n            damageOrHealing: 0\r\n        }, () => {\r\n            this.props.changeHP(combatant, hp, this.props.combatant.hpTemp);\r\n        });\r\n    }\r\n\r\n    private damage() {\r\n        const combatant = this.props.combatant as Combatant;\r\n\r\n        let hp = (combatant.hp ? combatant.hp : 0);\r\n        let temp = this.props.combatant.hpTemp;\r\n\r\n        let damage = this.state.damageOrHealing;\r\n\r\n        // Take damage off temp HP first\r\n        const val = Math.min(damage, temp);\r\n        damage -= val;\r\n        temp -= val;\r\n\r\n        // Take the rest off HP\r\n        hp -= damage;\r\n        hp = Math.max(hp, 0);\r\n\r\n        this.setState({\r\n            damageOrHealing: 0\r\n        }, () => {\r\n            this.props.changeHP(combatant, hp, temp);\r\n        });\r\n    }\r\n\r\n    private description() {\r\n        let sizeAndType = (this.props.combatant.size + ' ' + this.props.combatant.category).toLowerCase();\r\n        if (this.props.combatant.tag) {\r\n            sizeAndType += ' (' + this.props.combatant.tag.toLowerCase() + ')';\r\n        }\r\n        sizeAndType += ', ';\r\n\r\n        let align = '';\r\n        if (this.props.combatant.alignment) {\r\n            align = this.props.combatant.alignment.toLowerCase() + ', ';\r\n        }\r\n\r\n        const cr = 'cr ' + Utils.challenge(this.props.combatant.challenge);\r\n\r\n        return sizeAndType + align + cr;\r\n    }\r\n\r\n    private monsterIsInWave(wave: EncounterWave) {\r\n        return wave.slots.some(s => {\r\n            const group = this.props.library.find(g => g.monsters.includes(this.props.combatant));\r\n            return !!group && (s.monsterGroupName === group.name) && (s.monsterName === this.props.combatant.name);\r\n        });\r\n    }\r\n\r\n    private getHP() {\r\n        if (this.props.combatant.hitDice === 0) {\r\n            return this.props.combatant.hpMax;\r\n        }\r\n\r\n        const die = Utils.hitDieType(this.props.combatant.size);\r\n        const conMod = Utils.modifierValue(this.props.combatant.abilityScores.con) * this.props.combatant.hitDice;\r\n        let conModStr = '';\r\n        if (conMod > 0) {\r\n            conModStr = ' +' + conMod;\r\n        }\r\n        if (conMod < 0) {\r\n            conModStr = ' ' + conMod;\r\n        }\r\n        return this.props.combatant.hpMax + ' (' + this.props.combatant.hitDice + 'd' + die + conModStr + ')';\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const options = [];\r\n            if (this.props.mode.indexOf('no-buttons') === -1) {\r\n                if (this.props.mode.indexOf('view') !== -1) {\r\n                    if (this.props.mode.indexOf('editable') !== -1) {\r\n                        options.push(\r\n                            <button key='edit' onClick={() => this.props.editMonster(this.props.combatant)}>edit monster</button>\r\n                        );\r\n\r\n                        options.push(\r\n                            <Expander\r\n                                key='clone'\r\n                                text='clone monster'\r\n                                content={\r\n                                    <div>\r\n                                        <input\r\n                                            type='text'\r\n                                            placeholder='monster name'\r\n                                            value={this.state.cloneName}\r\n                                            onChange={event => this.setCloneName(event.target.value)}\r\n                                        />\r\n                                        <button onClick={() => this.props.cloneMonster(this.props.combatant, this.state.cloneName)}>create copy</button>\r\n                                    </div>\r\n                                }\r\n                            />\r\n                        );\r\n\r\n                        const groupOptions: { id: string, text: string }[] = [];\r\n                        this.props.library.forEach(group => {\r\n                            if (group.monsters.indexOf(this.props.combatant) === -1) {\r\n                                groupOptions.push({\r\n                                    id: group.id,\r\n                                    text: group.name\r\n                                });\r\n                            }\r\n                        });\r\n                        options.push(\r\n                            <Dropdown\r\n                                key='move'\r\n                                options={groupOptions}\r\n                                placeholder='move to group...'\r\n                                select={optionID => this.props.moveToGroup(this.props.combatant, optionID)}\r\n                            />\r\n                        );\r\n\r\n                        options.push(<ConfirmButton key='remove' text='delete monster' callback={() => this.props.removeMonster(this.props.combatant)} />);\r\n                    }\r\n                    if (this.props.mode.indexOf('encounter') !== -1) {\r\n                        if (this.props.slot) {\r\n                            // This card is in an encounter or a wave\r\n                            options.push(\r\n                                <button key='remove' onClick={() => this.props.removeEncounterSlot(this.props.slot)}>\r\n                                    remove from encounter\r\n                                </button>\r\n                            );\r\n                        } else {\r\n                            let canAdd = false;\r\n                            // This card is in the library list\r\n                            if (!this.monsterIsInWave(this.props.encounter)) {\r\n                                options.push(\r\n                                    <button key='add encounter' onClick={() => this.props.addEncounterSlot(this.props.combatant, null)}>\r\n                                        add to encounter\r\n                                    </button>\r\n                                );\r\n                                canAdd = true;\r\n                            }\r\n                            this.props.encounter.waves.forEach(wave => {\r\n                                if (!this.monsterIsInWave(wave)) {\r\n                                    options.push(\r\n                                        <button key={'add ' + wave.id} onClick={() => this.props.addEncounterSlot(this.props.combatant, wave.id)}>\r\n                                            add to {wave.name}\r\n                                        </button>\r\n                                    );\r\n                                    canAdd = true;\r\n                                }\r\n                            });\r\n                            // If we can't add it anywhere, don't show it\r\n                            if (!canAdd) {\r\n                                return (\r\n                                    <InfoCard\r\n                                        heading={\r\n                                            (\r\n                                                <div className='heading'>\r\n                                                    <div className='title'>{this.props.combatant.name}</div>\r\n                                                </div>\r\n                                            )\r\n                                        }\r\n                                        content={\r\n                                            (\r\n                                                <div className='section centered'>\r\n                                                    <i>this monster is already part of this encounter</i>\r\n                                                </div>\r\n                                            )\r\n                                        }\r\n                                    />\r\n                                );\r\n                            }\r\n                        }\r\n                    }\r\n                    if (this.props.mode.indexOf('candidate') !== -1) {\r\n                        if (this.props.mode.indexOf('selected') === -1) {\r\n                            options.push(\r\n                                <button key='select' onClick={() => this.props.selectMonster(this.props.combatant)}>select monster</button>\r\n                            );\r\n                        } else {\r\n                            options.push(\r\n                                <button key='deselect' onClick={() => this.props.deselectMonster(this.props.combatant)}>deselect monster</button>\r\n                            );\r\n                        }\r\n                    }\r\n                }\r\n                if (this.props.mode.indexOf('combat') !== -1) {\r\n                    const combatant = this.props.combatant as Combatant;\r\n\r\n                    if (this.props.mode.indexOf('tactical') !== -1) {\r\n                        if (this.props.mode.indexOf('on-map') !== -1) {\r\n                            options.push(\r\n                                <div key='mapMove' className='section centered'>\r\n                                    <Radial\r\n                                        direction='eight'\r\n                                        click={dir => this.props.mapMove(combatant, dir)}\r\n                                    />\r\n                                </div>\r\n                            );\r\n                            options.push(\r\n                                <Spin\r\n                                    key='altitude'\r\n                                    source={this.props.combatant}\r\n                                    name='altitude'\r\n                                    label='altitude'\r\n                                    display={value => value + ' ft.'}\r\n                                    nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'altitude', delta * 5)}\r\n                                />\r\n                            );\r\n                            options.push(<button key='mapRemove' onClick={() => this.props.mapRemove(combatant)}>remove from map</button>);\r\n                        }\r\n                        if (this.props.mode.indexOf('off-map') !== -1) {\r\n                            options.push(<button key='mapAdd' onClick={() => this.props.mapAdd(combatant)}>add to map</button>);\r\n                        }\r\n                        options.push(<div key='tactical-div' className='divider' />);\r\n                    }\r\n                    if (combatant.pending && !combatant.active && !combatant.defeated) {\r\n                        options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                    }\r\n                    if (!combatant.pending && combatant.active && !combatant.defeated) {\r\n                        if (combatant.current) {\r\n                            options.push(<button key='endTurn' onClick={() => this.props.endTurn(combatant)}>end turn</button>);\r\n                            options.push(<button key='makeDefeated' onClick={() => this.props.makeDefeated(combatant)}>mark as defeated and end turn</button>);\r\n                        } else {\r\n                            options.push(<button key='makeCurrent' onClick={() => this.props.makeCurrent(combatant)}>start turn</button>);\r\n                            options.push(<button key='makeDefeated' onClick={() => this.props.makeDefeated(combatant)}>mark as defeated</button>);\r\n                            options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                        }\r\n                    }\r\n                    if (!combatant.pending && !combatant.active && combatant.defeated) {\r\n                        options.push(<button key='makeActive' onClick={() => this.props.makeActive(combatant)}>mark as active</button>);\r\n                        options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                    }\r\n                    options.push(\r\n                        <Expander\r\n                            key='rename'\r\n                            text='change name'\r\n                            content={(\r\n                                <div>\r\n                                    <input\r\n                                        type='text'\r\n                                        value={combatant.displayName}\r\n                                        onChange={event => this.props.changeValue(this.props.combatant, 'displayName', event.target.value)}\r\n                                    />\r\n                                </div>\r\n                            )}\r\n                        />\r\n                    );\r\n                    options.push(\r\n                        <Expander\r\n                            key='init'\r\n                            text='change initiative score'\r\n                            content={(\r\n                                <div>\r\n                                    <Spin\r\n                                        source={this.props.combatant}\r\n                                        name='initiative'\r\n                                        label='initiative'\r\n                                        nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'initiative', delta)}\r\n                                    />\r\n                                </div>\r\n                            )}\r\n                        />\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf('template') !== -1) {\r\n                    // None\r\n                }\r\n            }\r\n\r\n            let stats = null;\r\n            if (this.props.mode.indexOf('view') !== -1) {\r\n                let slotSection = null;\r\n                if (this.props.slot) {\r\n                    slotSection = (\r\n                        <div>\r\n                            <div className='divider' />\r\n                            <Spin\r\n                                source={this.props.slot}\r\n                                name='count'\r\n                                label='count'\r\n                                nudgeValue={delta => this.props.nudgeValue(this.props.slot, 'count', delta)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                let details = null;\r\n                if (this.state.showDetails || (this.props.mode.indexOf('generated') !== -1)) {\r\n                    details = (\r\n                        <div>\r\n                            <div className='divider' />\r\n                            <div className='section'>\r\n                                <b>ac</b> {this.props.combatant.ac}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.hpMax !== 0 ? '' : 'none' }}>\r\n                                <b>hp</b> {this.getHP()}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.speed !== '' ? '' : 'none' }}>\r\n                                <b>speed</b> {this.props.combatant.speed}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <AbilityScorePanel combatant={this.props.combatant} />\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.savingThrows !== '' ? '' : 'none' }}>\r\n                                <b>saving throws</b> {this.props.combatant.savingThrows}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.skills !== '' ? '' : 'none' }}>\r\n                                <b>skills</b> {this.props.combatant.skills}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.damage.resist !== '' ? '' : 'none' }}>\r\n                                <b>damage resistances</b> {this.props.combatant.damage.resist}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.damage.vulnerable !== '' ? '' : 'none' }}>\r\n                                <b>damage vulnerabilities</b> {this.props.combatant.damage.vulnerable}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.damage.immune !== '' ? '' : 'none' }}>\r\n                                <b>damage immunities</b> {this.props.combatant.damage.immune}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.conditionImmunities !== '' ? '' : 'none' }}>\r\n                                <b>condition immunities</b> {this.props.combatant.conditionImmunities}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.senses !== '' ? '' : 'none' }}>\r\n                                <b>senses</b> {this.props.combatant.senses}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.languages !== '' ? '' : 'none' }}>\r\n                                <b>languages</b> {this.props.combatant.languages}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.equipment !== '' ? '' : 'none' }}>\r\n                                <b>equipment</b> {this.props.combatant.equipment}\r\n                            </div>\r\n                            <div className='divider' />\r\n                            <TraitsPanel combatant={this.props.combatant} />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                stats = (\r\n                    <div className='stats'>\r\n                        <div className='section centered'>\r\n                            <i>{this.description()}</i>\r\n                        </div>\r\n                        {slotSection}\r\n                        {details}\r\n                    </div>\r\n                );\r\n            }\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                stats = (\r\n                    <div className='stats'>\r\n                        <div className='section centered'>\r\n                            <i>{this.description()}</i>\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <Spin\r\n                            source={this.props.combatant}\r\n                            name='hp'\r\n                            label='hit points'\r\n                            factors={[1, 10]}\r\n                            nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'hp', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant}\r\n                            name='hpTemp'\r\n                            label='temp hp'\r\n                            factors={[1, 10]}\r\n                            nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'hpTemp', delta)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <Spin\r\n                            source={this.state}\r\n                            name='damageOrHealing'\r\n                            factors={[1, 10]}\r\n                            nudgeValue={delta => this.nudgeDamage(delta)}\r\n                        />\r\n                        <ControlRow\r\n                            controls={[\r\n                                <button key='heal' onClick={() => this.heal()}>heal</button>,\r\n                                <button key='reset' onClick={() => this.setDamage(0)}>reset</button>,\r\n                                <button key='damage' onClick={() => this.damage()}>damage</button>\r\n                            ]}\r\n                            disabled={this.state.damageOrHealing === 0}\r\n                        />\r\n                        <div className='section' style={{ display: this.props.combatant.damage.resist !== '' ? '' : 'none' }}>\r\n                            <b>damage resistances</b> {this.props.combatant.damage.resist}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.damage.vulnerable !== '' ? '' : 'none' }}>\r\n                            <b>damage vulnerabilities</b> {this.props.combatant.damage.vulnerable}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.damage.immune !== '' ? '' : 'none' }}>\r\n                            <b>damage immunities</b> {this.props.combatant.damage.immune}\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='section'>\r\n                            <AbilityScorePanel combatant={this.props.combatant} />\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.ac !== 0 ? '' : 'none' }}>\r\n                            <b>ac</b> {this.props.combatant.ac}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.savingThrows !== '' ? '' : 'none' }}>\r\n                            <b>saving throws</b> {this.props.combatant.savingThrows}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.skills !== '' ? '' : 'none' }}>\r\n                            <b>skills</b> {this.props.combatant.skills}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.speed !== '' ? '' : 'none' }}>\r\n                            <b>speed</b> {this.props.combatant.speed}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.senses !== '' ? '' : 'none' }}>\r\n                            <b>senses</b> {this.props.combatant.senses}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.languages !== '' ? '' : 'none' }}>\r\n                            <b>languages</b> {this.props.combatant.languages}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.equipment !== '' ? '' : 'none' }}>\r\n                            <b>equipment</b> {this.props.combatant.equipment}\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <TraitsPanel\r\n                            combatant={this.props.combatant}\r\n                            mode='combat'\r\n                            changeValue={(trait, field, value) => this.props.changeValue(trait, field, value)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <div className='section subheading'>\r\n                            conditions\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.conditionImmunities !== '' ? '' : 'none' }}>\r\n                            <b>condition immunities</b> {this.props.combatant.conditionImmunities}\r\n                        </div>\r\n                        <ConditionsPanel\r\n                            combatant={this.props.combatant as Combatant}\r\n                            combat={this.props.combat}\r\n                            addCondition={() => this.props.addCondition(this.props.combatant as Combatant)}\r\n                            editCondition={condition => this.props.editCondition(this.props.combatant as Combatant, condition)}\r\n                            removeCondition={conditionID => this.props.removeCondition(this.props.combatant as Combatant, conditionID)}\r\n                            nudgeConditionValue={(condition, type, delta) => this.props.nudgeConditionValue(condition, type, delta)}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n            if (this.props.mode.indexOf('template') !== -1) {\r\n                if (this.props.mode.indexOf('overview') !== -1) {\r\n                    stats = (\r\n                        <div>\r\n                            <div className='section centered'>\r\n                                <i>{this.description()}</i>\r\n                            </div>\r\n                            <div className='divider' />\r\n                            <div className='section'>\r\n                                <b>speed</b> {this.props.combatant.speed || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>senses</b> {this.props.combatant.senses || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>languages</b> {this.props.combatant.languages || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>equipment</b> {this.props.combatant.equipment || '-'}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf('abilities') !== -1) {\r\n                    stats = (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <AbilityScorePanel combatant={this.props.combatant} />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>saving throws</b> {this.props.combatant.savingThrows || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>skills</b> {this.props.combatant.skills || '-'}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf('cbt-stats') !== -1) {\r\n                    stats = (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <b>ac</b> {this.props.combatant.ac}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>hp</b> {this.getHP()}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>damage immunity</b> {this.props.combatant.damage.immune || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>damage resistance</b> {this.props.combatant.damage.resist || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>damage vulnerability</b> {this.props.combatant.damage.vulnerable || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>condition immunities</b> {this.props.combatant.conditionImmunities || '-'}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf('actions') !== -1) {\r\n                    stats = (\r\n                        <TraitsPanel\r\n                            combatant={this.props.combatant}\r\n                            mode='template'\r\n                            filter={this.props.filter}\r\n                            copyTrait={trait => this.props.copyTrait(trait)}\r\n                        />\r\n                    );\r\n                }\r\n            }\r\n\r\n            let toggle = null;\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                // Don't show toggle button for combatant\r\n            } else if (this.props.mode.indexOf('template') !== -1) {\r\n                // Don't show toggle button for template\r\n            } else if (this.props.mode.indexOf('view generated') !== -1) {\r\n                // Don't show toggle button for generated monster\r\n            } else {\r\n                const imageStyle = this.state.showDetails ? 'image rotate' : 'image';\r\n                toggle = (\r\n                    <img className={imageStyle} src={arrow} alt='arrow' onClick={() => this.toggleDetails()} />\r\n                );\r\n            }\r\n\r\n            const name = (this.props.combatant as Combatant ? (this.props.combatant as Combatant).displayName : null)\r\n                || this.props.combatant.name\r\n                || 'unnamed monster';\r\n\r\n            return (\r\n                <div className='card monster'>\r\n                    <div className='heading'>\r\n                        <div className='title'>{name}</div>\r\n                        {toggle}\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        {stats}\r\n                        <div style={{ display: options.length > 0 ? '' : 'none' }}>\r\n                            <div className='divider' />\r\n                            <div className='section'>{options}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Combatant } from '../../models/combat';\r\nimport { PC } from '../../models/party';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport Expander from '../controls/expander';\r\nimport Radial from '../controls/radial';\r\nimport Spin from '../controls/spin';\r\n\r\nimport arrow from '../../resources/images/down-arrow.svg';\r\n\r\ninterface Props {\r\n    combatant: PC | (PC & Combatant);\r\n    mode: string;\r\n    changeValue: (pc: PC, field: string, value: any) => void;\r\n    nudgeValue: (pc: PC, field: string, delta: number) => void;\r\n    removePC: (pc: PC) => void;\r\n    // Combat\r\n    makeCurrent: (combatant: Combatant) => void;\r\n    makeActive: (combatant: Combatant) => void;\r\n    makeDefeated: (combatant: Combatant) => void;\r\n    endTurn: (combatant: Combatant) => void;\r\n    mapAdd: (combatant: Combatant) => void;\r\n    mapMove: (combatant: Combatant, dir: string) => void;\r\n    mapRemove: (combatant: Combatant) => void;\r\n    removeCombatant: (combatant: Combatant) => void;\r\n}\r\n\r\ninterface State {\r\n    showDetails: boolean;\r\n}\r\n\r\nexport default class PCCard extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        removePC: null,\r\n        makeCurrent: null,\r\n        makeActive: null,\r\n        makeDefeated: null,\r\n        endTurn: null,\r\n        mapAdd: null,\r\n        mapMove: null,\r\n        mapRemove: null,\r\n        removeCombatant: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showDetails: false\r\n        };\r\n    }\r\n\r\n    private toggleDetails() {\r\n        this.setState({\r\n            showDetails: !this.state.showDetails\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const options = [];\r\n            if (this.props.mode.indexOf('edit') !== -1) {\r\n                if (this.props.combatant.active) {\r\n                    options.push(\r\n                        <button key='toggle-active' onClick={() => this.props.changeValue(this.props.combatant, 'active', false)}>\r\n                            mark inactive\r\n                        </button>\r\n                    );\r\n                } else {\r\n                    options.push(\r\n                        <button key='toggle-active' onClick={() => this.props.changeValue(this.props.combatant, 'active', true)}>\r\n                            mark active\r\n                        </button>\r\n                    );\r\n                }\r\n                options.push(<ConfirmButton key='remove' text='delete pc' callback={() => this.props.removePC(this.props.combatant)} />);\r\n            }\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                const combatant = this.props.combatant as Combatant;\r\n\r\n                if (this.props.mode.indexOf('tactical') !== -1) {\r\n                    if (this.props.mode.indexOf('on-map') !== -1) {\r\n                        options.push(\r\n                            <div key='mapMove' className='section centered'>\r\n                                <Radial\r\n                                    direction='eight'\r\n                                    click={dir => this.props.mapMove(combatant, dir)}\r\n                                />\r\n                            </div>\r\n                        );\r\n                        options.push(\r\n                            <Spin\r\n                                key='altitude'\r\n                                source={this.props.combatant}\r\n                                name='altitude'\r\n                                label='altitude'\r\n                                display={value => value + ' ft.'}\r\n                                nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'altitude', delta * 5)}\r\n                            />\r\n                        );\r\n                        options.push(<button key='mapRemove' onClick={() => this.props.mapRemove(combatant)}>remove from map</button>);\r\n                    }\r\n                    if (this.props.mode.indexOf('off-map') !== -1) {\r\n                        options.push(<button key='mapAdd' onClick={() => this.props.mapAdd(combatant)}>add to map</button>);\r\n                    }\r\n                    options.push(<div key='tactical-div' className='divider' />);\r\n                }\r\n                if (combatant.pending && !combatant.active && !combatant.defeated) {\r\n                    options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                }\r\n                if (!combatant.pending && combatant.active && !combatant.defeated) {\r\n                    if (combatant.current) {\r\n                        options.push(<button key='endTurn' onClick={() => this.props.endTurn(combatant)}>end turn</button>);\r\n                        options.push(<button key='makeDefeated' onClick={() => this.props.makeDefeated(combatant)}>mark as defeated and end turn</button>);\r\n                    } else {\r\n                        options.push(<button key='makeCurrent' onClick={() => this.props.makeCurrent(combatant)}>start turn</button>);\r\n                        options.push(<button key='makeDefeated' onClick={() => this.props.makeDefeated(combatant)}>mark as defeated</button>);\r\n                        options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                    }\r\n                    options.push(\r\n                        <Expander\r\n                            key='init'\r\n                            text='change initiative score'\r\n                            content={(\r\n                                <div>\r\n                                    <Spin\r\n                                        source={this.props.combatant}\r\n                                        name='initiative'\r\n                                        label='initiative'\r\n                                        nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'initiative', delta)}\r\n                                    />\r\n                                </div>\r\n                            )}\r\n                        />\r\n                    );\r\n                }\r\n                if (!combatant.pending && !combatant.active && combatant.defeated) {\r\n                    options.push(<button key='makeActive' onClick={() => this.props.makeActive(combatant)}>mark as active</button>);\r\n                    options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                }\r\n            }\r\n\r\n            const desc = (this.props.combatant.race || 'unknown race')\r\n                + ' ' + (this.props.combatant.classes || 'unknown class')\r\n                + ', level ' + this.props.combatant.level;\r\n\r\n            const commonStatBlock = (\r\n                <div className='stats'>\r\n                    <div className='section centered lowercase'>\r\n                        <i>{desc}</i>\r\n                        <div style={{ display: this.props.combatant.url ? '' : 'none' }}>\r\n                            <a href={this.props.combatant.url} target='_blank' rel='noopener noreferrer'>d&d beyond sheet</a>\r\n                        </div>\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section subheading'>languages</div>\r\n                    <div className='section'>\r\n                        {this.props.combatant.languages || '-'}\r\n                    </div>\r\n                    <div className='section subheading'>passive skills</div>\r\n                    <div className='section'>\r\n                        <div><b>insight</b> {this.props.combatant.passiveInsight}</div>\r\n                        <div><b>investigation</b> {this.props.combatant.passiveInvestigation}</div>\r\n                        <div><b>perception</b> {this.props.combatant.passivePerception}</div>\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            let stats = null;\r\n            if (this.props.mode.indexOf('edit') !== -1) {\r\n                if (this.state.showDetails) {\r\n                    stats = (\r\n                        <div className='edit'>\r\n                            <div className='section'>\r\n                                <div className='input-label' style={{ display: this.state.showDetails ? '' : 'none' }}>character name:</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.props.combatant.name}\r\n                                    onChange={event => this.props.changeValue(this.props.combatant, 'name', event.target.value)}\r\n                                />\r\n                                <div className='input-label' style={{ display: this.state.showDetails ? '' : 'none' }}>player name:</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.props.combatant.player}\r\n                                    onChange={event => this.props.changeValue(this.props.combatant, 'player', event.target.value)}\r\n                                />\r\n                                <div className='input-label'>race:</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.props.combatant.race}\r\n                                    onChange={event => this.props.changeValue(this.props.combatant, 'race', event.target.value)}\r\n                                />\r\n                                <div className='input-label'>class:</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.props.combatant.classes}\r\n                                    onChange={event => this.props.changeValue(this.props.combatant, 'classes', event.target.value)}\r\n                                />\r\n                                <div className='input-label'>level:</div>\r\n                                <Spin\r\n                                    source={this.props.combatant}\r\n                                    name='level'\r\n                                    nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'level', delta)}\r\n                                />\r\n                                <div className='input-label'>languages:</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.props.combatant.languages}\r\n                                    onChange={event => this.props.changeValue(this.props.combatant, 'languages', event.target.value)}\r\n                                />\r\n                                <div className='input-label'>d&d beyond link:</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.props.combatant.url}\r\n                                    onChange={event => this.props.changeValue(this.props.combatant, 'url', event.target.value)}\r\n                                />\r\n                            </div>\r\n                            <div className='divider' />\r\n                            <div className='section subheading'>passive skills</div>\r\n                            <Spin\r\n                                source={this.props.combatant}\r\n                                name='passiveInsight'\r\n                                label='insight'\r\n                                nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'passiveInsight', delta)}\r\n                            />\r\n                            <Spin\r\n                                source={this.props.combatant}\r\n                                name='passiveInvestigation'\r\n                                label='investigation'\r\n                                nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'passiveInvestigation', delta)}\r\n                            />\r\n                            <Spin\r\n                                source={this.props.combatant}\r\n                                name='passivePerception'\r\n                                label='perception'\r\n                                nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'passivePerception', delta)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                } else {\r\n                    stats = commonStatBlock;\r\n                }\r\n            }\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                stats = commonStatBlock;\r\n            }\r\n\r\n            let toggle = null;\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                // Don't show toggle button for combatant\r\n            } else {\r\n                const imageStyle = this.state.showDetails ? 'image rotate' : 'image';\r\n                toggle = <img className={imageStyle} src={arrow} alt='arrow' onClick={() => this.toggleDetails()} />;\r\n            }\r\n\r\n            const name = (this.props.combatant as Combatant ? (this.props.combatant as Combatant).displayName : null)\r\n                || this.props.combatant.name\r\n                || 'unnamed pc';\r\n\r\n            return (\r\n                <div className='card pc'>\r\n                    <div className='heading'>\r\n                        <div className='title'>{name}</div>\r\n                        {toggle}\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        {stats}\r\n                        <div style={{ display: options.length > 0 ? '' : 'none' }}>\r\n                            <div className='divider' />\r\n                            <div className='section'>\r\n                                {options}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Combatant } from '../../models/combat';\r\nimport { Monster } from '../../models/monster-group';\r\n\r\ninterface Props {\r\n    combatant: Combatant & Monster;\r\n}\r\n\r\nexport default class HitPointGauge extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const hpCurrent = this.props.combatant.hp || 0;\r\n            const hpMax = this.props.combatant.hpMax + this.props.combatant.hpTemp;\r\n            const hpBloodied = this.props.combatant.hpMax / 2;\r\n            const hpWidth = 100 * Math.max(hpCurrent, 0) / hpMax;\r\n\r\n            let style = '';\r\n            if (hpCurrent >= this.props.combatant.hpMax) {\r\n                style = 'bar unhurt';\r\n            } else if (hpCurrent <= hpBloodied) {\r\n                style = 'bar bloodied';\r\n            } else {\r\n                style = 'bar injured';\r\n            }\r\n\r\n            let hpTempBar = null;\r\n            if (this.props.combatant.hpTemp > 0) {\r\n                const hpTempWidth = 100 * Math.max(this.props.combatant.hpTemp, 0) / hpMax;\r\n                hpTempBar = <div className='bar temp' style={{ width: hpTempWidth + '%' }} />;\r\n            }\r\n\r\n            return (\r\n                <div className='hp-gauge'>\r\n                    <div className={style} style={{ width: hpWidth + '%' }} />\r\n                    {hpTempBar}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Combatant } from '../../models/combat';\r\nimport { Map, MapItem } from '../../models/map-folio';\r\nimport { Monster } from '../../models/monster-group';\r\nimport { PC } from '../../models/party';\r\n\r\nimport HitPointGauge from './hit-point-gauge';\r\n\r\ninterface Props {\r\n    map: Map;\r\n    mode: 'edit' | 'thumbnail' | 'combat';\r\n    combatants: ((Combatant & PC) | (Combatant & Monster))[];\r\n    showOverlay: boolean;\r\n    selectedItemID: string;\r\n    setSelectedItemID: (itemID: string | null) => void;\r\n    addMapTile: (x: number, y: number) => void;\r\n    gridSquareClicked: (x: number, y: number) => void;\r\n}\r\n\r\ninterface MapDimensions {\r\n    minX: number;\r\n    maxX: number;\r\n    minY: number;\r\n    maxY: number;\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\ninterface StyleData {\r\n    left: string;\r\n    top: string;\r\n    width: string;\r\n    height: string;\r\n}\r\n\r\nexport default class MapPanel extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        combatants: null,\r\n        showOverlay: false,\r\n        selectedItemID: null,\r\n        setSelectedItemID: null,\r\n        addMapTile: null,\r\n        gridSquareClicked: null\r\n    };\r\n\r\n    private getMapDimensions(border: number): MapDimensions | null {\r\n        let dimensions: MapDimensions | null = null;\r\n\r\n        this.props.map.items.filter(i => {\r\n            if (this.props.mode === 'edit') {\r\n                return i.type === 'tile';\r\n            }\r\n            return true;\r\n        }).forEach(i => {\r\n            if (!dimensions) {\r\n                dimensions = {\r\n                    minX: i.x,\r\n                    maxX: i.x + i.width - 1,\r\n                    minY: i.y,\r\n                    maxY: i.y + i.height - 1,\r\n                    width: 0,\r\n                    height: 0\r\n                };\r\n            } else {\r\n                dimensions.minX = Math.min(dimensions.minX, i.x);\r\n                dimensions.maxX = Math.max(dimensions.maxX, i.x + i.width - 1);\r\n                dimensions.minY = Math.min(dimensions.minY, i.y);\r\n                dimensions.maxY = Math.max(dimensions.maxY, i.y + i.height - 1);\r\n            }\r\n        });\r\n\r\n        if (!dimensions) {\r\n            // The map is blank\r\n            if (this.props.mode === 'thumbnail') {\r\n                return null;\r\n            }\r\n\r\n            dimensions = {\r\n                minX: 0,\r\n                maxX: 0,\r\n                minY: 0,\r\n                maxY: 0,\r\n                width: 0,\r\n                height: 0\r\n            };\r\n        }\r\n\r\n        // Apply the border\r\n        dimensions.minX -= border;\r\n        dimensions.maxX += border;\r\n        dimensions.minY -= border;\r\n        dimensions.maxY += border;\r\n\r\n        // Set width and height\r\n        dimensions.width = 1 + dimensions.maxX - dimensions.minX;\r\n        dimensions.height = 1 + dimensions.maxY - dimensions.minY;\r\n\r\n        return dimensions;\r\n    }\r\n\r\n    private getSideLength(): number {\r\n        switch (this.props.mode) {\r\n            case 'thumbnail':\r\n                return 5;\r\n            case 'edit':\r\n            case 'combat':\r\n                return 25;\r\n            default:\r\n                return 5;\r\n        }\r\n    }\r\n\r\n    private getStyle(x: number, y: number, width: number, height: number, mapDimensions: MapDimensions): StyleData {\r\n        const sideLength = this.getSideLength();\r\n\r\n        return {\r\n            left: 'calc(' + sideLength + 'px * ' + (x - mapDimensions.minX) + ')',\r\n            top: 'calc(' + sideLength + 'px * ' + (y - mapDimensions.minY) + ')',\r\n            width: 'calc((' + sideLength + 'px * ' + width + ') + 1px)',\r\n            height: 'calc((' + sideLength + 'px * ' + height + ') + 1px)'\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const border = (this.props.mode === 'edit') ? 2 : 0;\r\n            const mapDimensions = this.getMapDimensions(border);\r\n            if (!mapDimensions) {\r\n                return (\r\n                    <div>(blank map)</div>\r\n                );\r\n            }\r\n\r\n            // Draw the grid squares\r\n            const grid = [];\r\n            if (this.props.mode === 'edit') {\r\n                for (let y = mapDimensions.minY; y !== mapDimensions.maxY + 1; ++y) {\r\n                    for (let x = mapDimensions.minX; x !== mapDimensions.maxX + 1; ++x) {\r\n                        const gridStyle = this.getStyle(x, y, 1, 1, mapDimensions);\r\n                        grid.push(\r\n                            <GridSquare\r\n                                key={x + ',' + y}\r\n                                x={x}\r\n                                y={y}\r\n                                style={gridStyle}\r\n                                onClick={() => this.props.setSelectedItemID(null)}\r\n                                onDoubleClick={(posX, posY) => this.props.addMapTile(posX, posY)}\r\n                            />\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Draw the map tiles\r\n            const tiles = this.props.map.items\r\n                .filter(i => i.type === 'tile')\r\n                .map(i => {\r\n                    const tileStyle = this.getStyle(i.x, i.y, i.width, i.height, mapDimensions as MapDimensions);\r\n                    return (\r\n                        <MapTile\r\n                            key={i.id}\r\n                            tile={i}\r\n                            style={tileStyle}\r\n                            selectable={this.props.mode === 'edit'}\r\n                            selected={this.props.selectedItemID === i.id}\r\n                            thumbnail={this.props.mode === 'thumbnail'}\r\n                            select={id => this.props.mode === 'edit' ? this.props.setSelectedItemID(id) : null}\r\n                        />\r\n                    );\r\n                });\r\n\r\n            // Draw the tokens\r\n            let tokens: JSX.Element[] = [];\r\n            if (this.props.mode !== 'edit') {\r\n                tokens = this.props.map.items\r\n                    .filter(i => (i.type === 'monster') || (i.type === 'pc'))\r\n                    .map(i => {\r\n                        const tokenStyle = this.getStyle(i.x, i.y, i.width, i.height, mapDimensions as MapDimensions);\r\n                        const combatant = this.props.combatants.find(c => c.id === i.id);\r\n                        if (combatant) {\r\n                            return (\r\n                                <MapToken\r\n                                    key={i.id}\r\n                                    token={i}\r\n                                    combatant={combatant}\r\n                                    style={tokenStyle}\r\n                                    simple={this.props.mode === 'thumbnail'}\r\n                                    selectable={this.props.mode === 'combat'}\r\n                                    selected={this.props.selectedItemID ===  i.id}\r\n                                    select={id => this.props.setSelectedItemID(id)}\r\n                                />\r\n                            );\r\n                        }\r\n\r\n                        return null;\r\n                    })\r\n                    .filter(mt => mt !== null) as JSX.Element[];\r\n            }\r\n\r\n            // Draw the drag overlay\r\n            const dragOverlay = [];\r\n            if (this.props.showOverlay) {\r\n                for (let yOver = mapDimensions.minY; yOver !== mapDimensions.maxY + 1; ++yOver) {\r\n                    for (let xOver = mapDimensions.minX; xOver !== mapDimensions.maxX + 1; ++xOver) {\r\n                        const overlayStyle = this.getStyle(xOver, yOver, 1, 1, mapDimensions);\r\n                        dragOverlay.push(\r\n                            <GridSquare\r\n                                key={xOver + ',' + yOver}\r\n                                x={xOver}\r\n                                y={yOver}\r\n                                style={overlayStyle}\r\n                                overlay={true}\r\n                                onClick={(posX, posY) => this.props.gridSquareClicked(posX, posY)}\r\n                            />\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n\r\n            const style = 'map-panel ' + this.props.mode;\r\n            return (\r\n                <div className={style} onClick={() => this.props.setSelectedItemID(null)}>\r\n                    <div className='grid' style={{ height: ((this.getSideLength() * mapDimensions.height) + 1) + 'px' }}>\r\n                        {grid}\r\n                        {tiles}\r\n                        {tokens}\r\n                        {dragOverlay}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface GridSquareProps {\r\n    x: number;\r\n    y: number;\r\n    style: StyleData;\r\n    overlay: boolean;\r\n    onClick: (x: number, y: number) => void;\r\n    onDoubleClick: (x: number, y: number) => void;\r\n}\r\n\r\nclass GridSquare extends React.Component<GridSquareProps> {\r\n    public static defaultProps = {\r\n        overlay: false,\r\n        onDoubleClick: null\r\n    };\r\n\r\n    private click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (this.props.onClick) {\r\n            this.props.onClick(this.props.x, this.props.y);\r\n        }\r\n    }\r\n\r\n    private doubleClick(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (this.props.onDoubleClick) {\r\n            this.props.onDoubleClick(this.props.x, this.props.y);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'grid-square';\r\n        if (this.props.overlay) {\r\n            style += ' grid-overlay';\r\n        }\r\n\r\n        return (\r\n            <div\r\n                className={style}\r\n                style={this.props.style}\r\n                onClick={e => this.click(e)}\r\n                onDoubleClick={e => this.doubleClick(e)}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\ninterface MapTileProps {\r\n    tile: MapItem;\r\n    style: StyleData;\r\n    thumbnail: boolean;\r\n    selectable: boolean;\r\n    selected: boolean;\r\n    select: (tileID: string) => void;\r\n}\r\n\r\nclass MapTile extends React.Component<MapTileProps> {\r\n    private select(e: React.MouseEvent) {\r\n        if (this.props.selectable) {\r\n            e.stopPropagation();\r\n            this.props.select(this.props.tile.id);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'tile ' + this.props.tile.terrain;\r\n        if (this.props.selected) {\r\n            style += ' selected';\r\n        }\r\n        if (this.props.thumbnail) {\r\n            style += ' thumbnail';\r\n        }\r\n\r\n        return (\r\n            <div\r\n                className={style}\r\n                style={this.props.style}\r\n                onClick={e => this.select(e)}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\ninterface MapTokenProps {\r\n    token: MapItem;\r\n    combatant: (Combatant & PC) | (Combatant & Monster);\r\n    style: StyleData;\r\n    simple: boolean;\r\n    selectable: boolean;\r\n    selected: boolean;\r\n    select: (tokenID: string) => void;\r\n}\r\n\r\nclass MapToken extends React.Component<MapTokenProps> {\r\n    private select(e: React.MouseEvent) {\r\n        if (this.props.selectable) {\r\n            e.stopPropagation();\r\n            this.props.select(this.props.token.id);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'token ' + this.props.token.type;\r\n        if (this.props.selected) {\r\n            style += ' selected';\r\n        }\r\n        if (this.props.combatant.current) {\r\n            style += ' current';\r\n        }\r\n\r\n        let initials = null;\r\n        let hpGauge = null;\r\n        let altitudeBadge = null;\r\n        let conditionsBadge = null;\r\n        if (!this.props.simple) {\r\n            const name = this.props.combatant.displayName || this.props.combatant.name;\r\n            initials = (\r\n                <div className='initials'>{name.split(' ').map(s => s[0])}</div>\r\n            );\r\n\r\n            if (this.props.combatant.type === 'monster') {\r\n                hpGauge = (\r\n                    <HitPointGauge combatant={this.props.combatant as Combatant & Monster} />\r\n                );\r\n            }\r\n\r\n            if (this.props.combatant.altitude > 0) {\r\n                altitudeBadge = (\r\n                    <div className='badge altitude'>&#9206;</div>\r\n                );\r\n            }\r\n\r\n            if (this.props.combatant.altitude < 0) {\r\n                altitudeBadge = (\r\n                    <div className='badge altitude'>&#9207;</div>\r\n                );\r\n            }\r\n\r\n            if ((this.props.combatant.conditions) && (this.props.combatant.conditions.length > 0)) {\r\n                conditionsBadge = (\r\n                    <div className='badge'>&#9670;</div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div\r\n                title={this.props.combatant.displayName || this.props.combatant.name}\r\n                className={style}\r\n                style={this.props.style}\r\n                onClick={e => this.select(e)}\r\n            >\r\n                {initials}\r\n                {hpGauge}\r\n                {altitudeBadge}\r\n                {conditionsBadge}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Combat } from '../../models/combat';\r\n\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    combat: Combat;\r\n    selected: boolean;\r\n    setSelection: (combat: Combat) => void;\r\n}\r\n\r\nexport default class CombatListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            let map = null;\r\n            if (this.props.combat.map) {\r\n                map = (\r\n                    <MapPanel\r\n                        map={this.props.combat.map}\r\n                        mode='thumbnail'\r\n                        combatants={this.props.combat.combatants}\r\n                    />\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.combat)}>\r\n                    <div className='heading'>{this.props.combat.name || 'unnamed combat'}</div>\r\n                    <div className='text'>paused at {this.props.combat.timestamp}</div>\r\n                    {map}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport close from '../../resources/images/close-black.svg';\r\nimport arrow from '../../resources/images/down-arrow-black.svg';\r\n\r\ninterface Props {\r\n    content: any[];\r\n    heading: string;\r\n    hidden: boolean;\r\n    showClose: boolean;\r\n    showToggle: boolean;\r\n    close: () => void;\r\n}\r\n\r\ninterface State {\r\n    showCards: boolean;\r\n}\r\n\r\nexport default class CardGroup extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        heading: null,\r\n        hidden: false,\r\n        showClose: false,\r\n        showToggle: false,\r\n        close: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showCards: true\r\n        };\r\n    }\r\n\r\n    private toggleCards() {\r\n        this.setState({\r\n            showCards: !this.state.showCards\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            if (this.props.hidden) {\r\n                return null;\r\n            }\r\n\r\n            let heading = null;\r\n            if (this.props.heading) {\r\n                let closeBtn = null;\r\n                if (this.props.showClose) {\r\n                    closeBtn = (\r\n                        <img className='image' src={close} alt='close' onClick={() => this.props.close()} />\r\n                    );\r\n                }\r\n\r\n                let toggle = null;\r\n                if (this.props.showToggle) {\r\n                    const style = this.state.showCards ? 'image rotate' : 'image';\r\n                    toggle = (\r\n                        <img className={style} src={arrow} alt='arrow' onClick={() => this.toggleCards()} />\r\n                    );\r\n                }\r\n\r\n                heading = (\r\n                    <div className='heading'>\r\n                        <div className='title'>{this.props.heading}</div>\r\n                        {toggle}\r\n                        {closeBtn}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            let cards = [];\r\n            if ((this.props.content.length > 0) && this.state.showCards) {\r\n                cards = this.props.content;\r\n            }\r\n\r\n            return (\r\n                <div className='card-group'>\r\n                    {heading}\r\n                    <div className='row small-up-1 medium-up-2 large-up-3 collapse'>\r\n                        {cards}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    content: string | JSX.Element | JSX.Element[];\r\n}\r\n\r\nexport default class Readaloud extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div className='readaloud'>\r\n                    {this.props.content}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combat, Combatant, Notification } from '../../models/combat';\r\nimport { Condition, ConditionDurationSaves } from '../../models/condition';\r\nimport { Monster, Trait } from '../../models/monster-group';\r\nimport { PC } from '../../models/party';\r\n\r\nimport MonsterCard from '../cards/monster-card';\r\nimport PCCard from '../cards/pc-card';\r\nimport ControlRow from '../controls/control-row';\r\nimport Spin from '../controls/spin';\r\nimport CombatListItem from '../list-items/combat-list-item';\r\nimport CardGroup from '../panels/card-group';\r\nimport HitPointGauge from '../panels/hit-point-gauge';\r\nimport MapPanel from '../panels/map-panel';\r\nimport Readaloud from '../panels/readaloud';\r\n\r\ninterface Props {\r\n    combats: Combat[];\r\n    combat: Combat | null;\r\n    filter: string;\r\n    showHelp: boolean;\r\n    createCombat: () => void;\r\n    resumeEncounter: (combat: Combat) => void;\r\n    close: (notification: Notification, removeCondition: boolean) => void;\r\n    mapAdd: (combatant: (Combatant & PC) | (Combatant & Monster), x: number, y: number) => void;\r\n    makeCurrent: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    makeActive: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    makeDefeated: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    removeCombatant: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    addCondition: (combatant: Combatant & Monster) => void;\r\n    editCondition: (combatant: Combatant & Monster, condition: Condition) => void;\r\n    removeCondition: (combatant: Combatant & Monster, conditionID: string) => void;\r\n    mapMove: (combatant: (Combatant & PC) | (Combatant & Monster), dir: string) => void;\r\n    mapRemove: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    endTurn: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    changeHP: (combatant: Combatant & Monster, hp: number, temp: number) => void;\r\n    changeValue: (source: {}, type: string, value: any) => void;\r\n    nudgeValue: (source: {}, type: string, delta: number) => void;\r\n}\r\n\r\ninterface State {\r\n    selectedTokenID: string | null;\r\n    addingToMapID: string | null;\r\n}\r\n\r\nexport default class CombatManagerScreen extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            selectedTokenID: null,  // The ID of the combatant that's selected\r\n            addingToMapID: null     // The ID of the combatant we're adding to the map\r\n        };\r\n    }\r\n\r\n    private setSelectedTokenID(id: string | null) {\r\n        this.setState({\r\n            selectedTokenID: id\r\n        });\r\n    }\r\n\r\n    private setAddingToMapID(id: string | null) {\r\n        this.setState({\r\n            addingToMapID: id\r\n        });\r\n    }\r\n\r\n    private createCard(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        let mode = 'combat';\r\n        if (this.props.combat && this.props.combat.map) {\r\n            mode += ' tactical';\r\n            const onMap = this.props.combat.map.items.find(i => i.id === combatant.id);\r\n            mode += onMap ? ' on-map' : ' off-map';\r\n        }\r\n\r\n        switch (combatant.type) {\r\n            case 'pc':\r\n                return (\r\n                    <PCCard\r\n                        key='selected'\r\n                        combatant={combatant as Combatant & PC}\r\n                        mode={mode}\r\n                        changeValue={(source, type, value) => this.props.changeValue(source, type, value)}\r\n                        nudgeValue={(source, type, delta) => this.props.nudgeValue(source, type, delta)}\r\n                        makeCurrent={c => this.props.makeCurrent(c as Combatant & PC)}\r\n                        makeActive={c => this.props.makeActive(c as Combatant & PC)}\r\n                        makeDefeated={c => this.props.makeDefeated(c as Combatant & PC)}\r\n                        removeCombatant={c => this.props.removeCombatant(c as Combatant & PC)}\r\n                        mapAdd={c => this.setAddingToMapID(c.id)}\r\n                        mapMove={(c, dir) => this.props.mapMove(c as Combatant & PC, dir)}\r\n                        mapRemove={c => this.props.mapRemove(c as Combatant & PC)}\r\n                        endTurn={c => this.props.endTurn(c as Combatant & PC)}\r\n                    />\r\n                );\r\n            case 'monster':\r\n                return (\r\n                    <MonsterCard\r\n                        key='selected'\r\n                        combatant={combatant as Combatant & Monster}\r\n                        mode={mode}\r\n                        combat={this.props.combat as Combat}\r\n                        changeValue={(c, type, value) => this.props.changeValue(c, type, value)}\r\n                        nudgeValue={(c, type, delta) => this.props.nudgeValue(c, type, delta)}\r\n                        makeCurrent={c => this.props.makeCurrent(c as Combatant & Monster)}\r\n                        makeActive={c => this.props.makeActive(c as Combatant & Monster)}\r\n                        makeDefeated={c => this.props.makeDefeated(c as Combatant & Monster)}\r\n                        removeCombatant={c => this.props.removeCombatant(c as Combatant & Monster)}\r\n                        addCondition={c => this.props.addCondition(c as Combatant & Monster)}\r\n                        editCondition={(c, condition) => this.props.editCondition(c as Combatant & Monster, condition)}\r\n                        removeCondition={(c, conditionID) => this.props.removeCondition(c as Combatant & Monster, conditionID)}\r\n                        nudgeConditionValue={(c, type, delta) => this.props.nudgeValue(c, type, delta)}\r\n                        mapAdd={c => this.setAddingToMapID(c.id)}\r\n                        mapMove={(c, dir) => this.props.mapMove(c as Combatant & Monster, dir)}\r\n                        mapRemove={c => this.props.mapRemove(c as Combatant & Monster)}\r\n                        endTurn={(c) => this.props.endTurn(c as Combatant & Monster)}\r\n                        changeHP={(c, hp, temp) => this.props.changeHP(c as Combatant & Monster, hp, temp)}\r\n                    />\r\n                );\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    private addCombatantToMap(x: number, y: number) {\r\n        if (this.props.combat) {\r\n            const combatant = this.props.combat.combatants.find(c => c.id === this.state.addingToMapID);\r\n            if (combatant) {\r\n                this.props.mapAdd(combatant, x, y);\r\n            }\r\n            this.setAddingToMapID(null);\r\n        }\r\n    }\r\n\r\n    private showCombat(combat: Combat) {\r\n        return Utils.match(this.props.filter, combat.name);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            if (this.props.combat) {\r\n                const current: JSX.Element[] = [];\r\n                let pending: JSX.Element[] = [];\r\n                let active: JSX.Element[] = [];\r\n                const defeated: JSX.Element[] = [];\r\n\r\n                this.props.combat.combatants.forEach(combatant => {\r\n                    if (combatant.current) {\r\n                        current.push(\r\n                            <div key={combatant.id}>\r\n                                {this.createCard(combatant)}\r\n                            </div>\r\n                        );\r\n                    }\r\n                    if (combatant.pending && !combatant.active && !combatant.defeated) {\r\n                        pending.push(\r\n                            <PendingCombatantRow\r\n                                key={combatant.id}\r\n                                combatant={combatant}\r\n                                select={c => this.setSelectedTokenID(c.id)}\r\n                                selected={combatant.id === this.state.selectedTokenID}\r\n                                nudgeValue={(c, type, delta) => this.props.nudgeValue(c, type, delta)}\r\n                                makeActive={c => this.props.makeActive(c)}\r\n                            />\r\n                        );\r\n                    }\r\n                    if (!combatant.pending && combatant.active && !combatant.defeated) {\r\n                        switch (combatant.type) {\r\n                            case 'pc':\r\n                                active.push(\r\n                                    <PCRow\r\n                                        key={combatant.id}\r\n                                        combatant={combatant as Combatant & PC}\r\n                                        combat={this.props.combat as Combat}\r\n                                        select={c => this.setSelectedTokenID(c.id)}\r\n                                        selected={combatant.id === this.state.selectedTokenID}\r\n                                    />\r\n                                );\r\n                                break;\r\n                            case 'monster':\r\n                                active.push(\r\n                                    <MonsterRow\r\n                                        key={combatant.id}\r\n                                        combatant={combatant as Combatant & Monster}\r\n                                        combat={this.props.combat as Combat}\r\n                                        select={c => this.setSelectedTokenID(c.id)}\r\n                                        selected={combatant.id === this.state.selectedTokenID}\r\n                                    />\r\n                                );\r\n                                break;\r\n                        }\r\n                    }\r\n                    if (!combatant.pending && !combatant.active && combatant.defeated) {\r\n                        switch (combatant.type) {\r\n                            case 'pc':\r\n                                defeated.push(\r\n                                    <PCRow\r\n                                        key={combatant.id}\r\n                                        combatant={combatant as Combatant & PC}\r\n                                        combat={this.props.combat as Combat}\r\n                                        select={c => this.setSelectedTokenID(c.id)}\r\n                                        selected={combatant.id === this.state.selectedTokenID}\r\n                                    />\r\n                                );\r\n                                break;\r\n                            case 'monster':\r\n                                defeated.push(\r\n                                    <MonsterRow\r\n                                        key={combatant.id}\r\n                                        combatant={combatant as Combatant & Monster}\r\n                                        combat={this.props.combat as Combat}\r\n                                        select={c => this.setSelectedTokenID(c.id)}\r\n                                        selected={combatant.id === this.state.selectedTokenID}\r\n                                    />\r\n                                );\r\n                                break;\r\n                        }\r\n                    }\r\n                });\r\n\r\n                if (this.props.showHelp && (pending.length !== 0)) {\r\n                    const pendingHelp = (\r\n                        <div key='pending-help'>\r\n                            <Readaloud\r\n                                content={\r\n                                    <div>\r\n                                        <div className='section'>these combatants are not yet part of the encounter</div>\r\n                                        <div className='section'>set initiative on each of them, then add them to the encounter</div>\r\n                                    </div>\r\n                                }\r\n                            />\r\n                        </div>\r\n                    );\r\n                    pending = [pendingHelp].concat(pending);\r\n                }\r\n\r\n                if (this.props.showHelp && (current.length === 0)) {\r\n                    const activeHelp = (\r\n                        /* tslint:disable:max-line-length */\r\n                        <div key='active-help'>\r\n                            <Readaloud\r\n                                content={\r\n                                    <div>\r\n                                        <div className='section'>these are the combatants taking part in this encounter; you can select them to see their stat blocks (on the right)</div>\r\n                                        <div className='section'>to begin the encounter, select the first combatant and press the <b>start turn</b> button on their stat block</div>\r\n                                    </div>\r\n                                }\r\n                            />\r\n                        </div>\r\n                        /* tslint:enable:max-line-length */\r\n                    );\r\n                    active = [activeHelp].concat(active);\r\n                }\r\n\r\n                if (current.length === 0) {\r\n                    current.push(\r\n                        <Readaloud\r\n                            key='current'\r\n                            content={\r\n                                <div className='section'>\r\n                                    the current initiative holder will be displayed here\r\n                                </div>\r\n                            }\r\n                        />\r\n                    );\r\n                }\r\n\r\n                let notificationSection = null;\r\n                if (this.props.combat.notifications.length > 0) {\r\n                    const notifications = this.props.combat.notifications.map(n => (\r\n                        <NotificationPanel\r\n                            key={n.id}\r\n                            notification={n}\r\n                            close={(notification, removeCondition) => this.props.close(notification, removeCondition)}\r\n                        />\r\n                    ));\r\n                    notificationSection = (\r\n                        <div className='notifications'>\r\n                            {notifications}\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                let mapSection = null;\r\n                if (this.props.combat.map) {\r\n                    mapSection = (\r\n                        <MapPanel\r\n                            map={this.props.combat.map}\r\n                            mode='combat'\r\n                            showOverlay={this.state.addingToMapID !== null}\r\n                            combatants={this.props.combat.combatants}\r\n                            selectedItemID={this.state.selectedTokenID ? this.state.selectedTokenID : undefined}\r\n                            setSelectedItemID={id => {\r\n                                if (id) {\r\n                                    this.setSelectedTokenID(id);\r\n                                }\r\n                            }}\r\n                            gridSquareClicked={(x, y) => this.addCombatantToMap(x, y)}\r\n                        />\r\n                    );\r\n                }\r\n\r\n                let selectedCombatant = null;\r\n                if (this.state.selectedTokenID) {\r\n                    const combatant = this.props.combat.combatants.find(c => c.id === this.state.selectedTokenID);\r\n                    if (combatant && !combatant.current) {\r\n                        selectedCombatant = this.createCard(combatant);\r\n                    }\r\n                }\r\n                if (!selectedCombatant) {\r\n                    selectedCombatant = (\r\n                        <Readaloud\r\n                            key='selected'\r\n                            content={\r\n                                <div className='section'>\r\n                                    select a pc or monster from the central list to see its details here\r\n                                </div>\r\n                            }\r\n                        />\r\n                    );\r\n                }\r\n\r\n                return (\r\n                    <div className='combat-manager row collapse'>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable'>\r\n                            <CardGroup\r\n                                heading='initiative holder'\r\n                                content={current}\r\n                            />\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable'>\r\n                            {notificationSection}\r\n                            <CardGroup\r\n                                heading='waiting for intiative to be entered'\r\n                                content={pending}\r\n                                hidden={pending.length === 0}\r\n                                showToggle={true}\r\n                            />\r\n                            {mapSection}\r\n                            <CardGroup\r\n                                heading='combatants in the encounter'\r\n                                content={active}\r\n                                hidden={active.length === 0}\r\n                            />\r\n                            <CardGroup\r\n                                heading='defeated'\r\n                                content={defeated}\r\n                                hidden={defeated.length === 0}\r\n                                showToggle={true}\r\n                            />\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable'>\r\n                            <CardGroup\r\n                                heading='selected combatant'\r\n                                content={[selectedCombatant]}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                let help = null;\r\n                if (this.props.showHelp) {\r\n                    help = (\r\n                        <HelpCard combats={this.props.combats} />\r\n                    );\r\n                }\r\n\r\n                const combats = this.props.combats.filter(c => this.showCombat(c)).map(c => {\r\n                    return (\r\n                        <CombatListItem\r\n                            key={c.id}\r\n                            combat={c}\r\n                            selected={false}\r\n                            setSelection={combat => this.props.resumeEncounter(combat)}\r\n                        />\r\n                    );\r\n                });\r\n\r\n                return (\r\n                    <div className='combat-manager row collapse'>\r\n                        <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                            {help}\r\n                            <button onClick={() => this.props.createCombat()}>start a new combat</button>\r\n                            {combats}\r\n                        </div>\r\n                        <div className='columns small-8 medium-8 large-9 scrollable' />\r\n                    </div>\r\n                );\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface HelpCardProps {\r\n    combats: Combat[];\r\n}\r\n\r\nclass HelpCard extends React.Component<HelpCardProps> {\r\n    public render() {\r\n        let action: JSX.Element | null = null;\r\n        if (this.props.combats.length === 0) {\r\n            action = (\r\n                <div className='section'>to start a combat encounter, press the button below</div>\r\n            );\r\n        } else {\r\n            action = (\r\n                <div>\r\n                    <div className='section'>below you will see a list of encounters that you have paused</div>\r\n                    <div className='section'>you can resume a paused combat by selecting it</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Readaloud\r\n                content={\r\n                    <div>\r\n                        <div className='section'>here you can run a combat encounter by specifying a party and an encounter</div>\r\n                        <div className='divider' />\r\n                        {action}\r\n                    </div>\r\n                }\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\ninterface NotificationProps {\r\n    notification: Notification;\r\n    close: (notification: Notification, removeCondition: boolean) => void;\r\n}\r\n\r\nclass NotificationPanel extends React.Component<NotificationProps> {\r\n    private success() {\r\n        switch (this.props.notification.type) {\r\n            case 'condition-save':\r\n            case 'condition-end':\r\n                const condition = this.props.notification.data as Condition;\r\n                if (condition.duration) {\r\n                    // Reduce save by 1\r\n                    if ((condition.duration.type === 'saves') || (condition.duration.type === 'rounds')) {\r\n                        condition.duration.count -= 1;\r\n                        if (condition.duration.count === 0) {\r\n                            // Remove the condition\r\n                            this.close(true);\r\n                        } else {\r\n                            this.close();\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            case 'trait-recharge':\r\n                // Mark trait as recharged\r\n                const trait = this.props.notification.data as Trait;\r\n                trait.uses = 0;\r\n                this.close();\r\n                break;\r\n        }\r\n    }\r\n\r\n    private close(removeCondition = false) {\r\n        this.props.close(this.props.notification, removeCondition);\r\n    }\r\n\r\n    public render() {\r\n        const combatant = this.props.notification.combatant as (Combatant & Monster);\r\n        const condition = this.props.notification.data as Condition;\r\n        const trait = this.props.notification.data as Trait;\r\n\r\n        const name = combatant.displayName || combatant.name || 'unnamed monster';\r\n        switch (this.props.notification.type) {\r\n            case 'condition-save':\r\n                const duration = condition.duration as ConditionDurationSaves;\r\n                let saveType = duration.saveType.toString();\r\n                if (saveType !== 'death') {\r\n                    saveType = saveType.toUpperCase();\r\n                }\r\n                return (\r\n                    <div key={this.props.notification.id} className='notification'>\r\n                        <div className='text'>\r\n                            {name} must make a {saveType} save against dc {duration.saveDC}\r\n                        </div>\r\n                        <ControlRow\r\n                            controls={[\r\n                                <button key='success' onClick={() => this.success()}>success</button>,\r\n                                <button key='close' onClick={() => this.close()}>close</button>\r\n                            ]}\r\n                        />\r\n                    </div>\r\n                );\r\n            case 'condition-end':\r\n                return (\r\n                    <div key={this.props.notification.id} className='notification'>\r\n                        <div className='text'>\r\n                            {name} is no longer affected by condition {condition.name}\r\n                        </div>\r\n                        <ControlRow\r\n                            controls={[\r\n                                <button key='close' onClick={() => this.close()}>close</button>\r\n                            ]}\r\n                        />\r\n                    </div>\r\n                );\r\n            case 'trait-recharge':\r\n                return (\r\n                    <div key={this.props.notification.id} className='notification'>\r\n                        <div className='text'>\r\n                            {name} can attempt to recharge {trait.name} ({trait.usage})\r\n                        </div>\r\n                        <ControlRow\r\n                            controls={[\r\n                                <button key='recharge' onClick={() => this.success()}>recharge</button>,\r\n                                <button key='close' onClick={() => this.close()}>close</button>\r\n                            ]}\r\n                        />\r\n                    </div>\r\n                );\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface PendingCombatantRowProps {\r\n    combatant: (Combatant & PC) | (Combatant & Monster);\r\n    selected: boolean;\r\n    select: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    nudgeValue: (combatant: (Combatant & PC) | (Combatant & Monster), field: string, delta: number) => void;\r\n    makeActive: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n}\r\n\r\nclass PendingCombatantRow extends React.Component<PendingCombatantRowProps> {\r\n    private getInformationText() {\r\n        if (this.props.selected) {\r\n            return 'selected';\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private onClick(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (this.props.select) {\r\n            this.props.select(this.props.combatant);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'combatant-row ' + this.props.combatant.type;\r\n        if (this.props.combatant.current || this.props.selected) {\r\n            style += ' highlight';\r\n        }\r\n\r\n        return (\r\n            <div className={style} onClick={e => this.onClick(e)}>\r\n                <div className='name'>\r\n                    {this.props.combatant.displayName || this.props.combatant.name || 'combatant'}\r\n                    <span className='info'>{this.getInformationText()}</span>\r\n                </div>\r\n                <div className='content'>\r\n                    <Spin\r\n                        source={this.props.combatant}\r\n                        name='initiative'\r\n                        label='initiative'\r\n                        nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'initiative', delta)}\r\n                    />\r\n                    <button onClick={e => { e.stopPropagation(); this.props.makeActive(this.props.combatant); }}>add to encounter</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface PCRowProps {\r\n    combatant: Combatant & PC;\r\n    combat: Combat;\r\n    selected: boolean;\r\n    select: (combatant: Combatant & PC) => void;\r\n}\r\n\r\nclass PCRow extends React.Component<PCRowProps> {\r\n    private getInformationText() {\r\n        if (this.props.combatant.current) {\r\n            return 'current turn';\r\n        }\r\n\r\n        if (this.props.selected) {\r\n            return 'selected';\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private onClick(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (!this.props.combatant.current && !this.props.selected && this.props.select) {\r\n            this.props.select(this.props.combatant);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'combatant-row ' + this.props.combatant.type;\r\n        if (this.props.combatant.current || this.props.selected) {\r\n            style += ' highlight';\r\n        }\r\n\r\n        const desc = (this.props.combatant.race || 'unknown race')\r\n                + ' ' + (this.props.combatant.classes || 'unknown class')\r\n                + ', level ' + this.props.combatant.level;\r\n\r\n        const notes = [];\r\n        if (this.props.combat.map) {\r\n            if (!this.props.combatant.pending && !this.props.combat.map.items.find(i => i.id === this.props.combatant.id)) {\r\n                notes.push(\r\n                    <div key='not-on-map' className='note'>not on the map</div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className={style} onClick={e => this.onClick(e)}>\r\n                <div className='name'>\r\n                    {this.props.combatant.displayName || this.props.combatant.name || 'combatant'}\r\n                    {this.props.combatant.player ? ' | ' + this.props.combatant.player : ''}\r\n                    <span className='info'>{this.getInformationText()}</span>\r\n                </div>\r\n                <div className='content'>\r\n                    <div className='section lowercase'>\r\n                        {desc}\r\n                    </div>\r\n                    {notes}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface MonsterRowProps {\r\n    combatant: Combatant & Monster;\r\n    combat: Combat;\r\n    selected: boolean;\r\n    select: (combatant: Combatant & Monster) => void;\r\n}\r\n\r\nclass MonsterRow extends React.Component<MonsterRowProps> {\r\n    private getInformationText() {\r\n        if (this.props.combatant.current) {\r\n            return 'current turn';\r\n        }\r\n\r\n        if (this.props.selected) {\r\n            return 'selected';\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private onClick(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (!this.props.combatant.current && !this.props.selected && this.props.select) {\r\n            this.props.select(this.props.combatant);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'combatant-row ' + this.props.combatant.type;\r\n        if (this.props.combatant.current || this.props.selected) {\r\n            style += ' highlight';\r\n        }\r\n\r\n        let hp = (this.props.combatant.hp ? this.props.combatant.hp : 0).toString();\r\n        if (this.props.combatant.hpTemp > 0) {\r\n            hp += '+' + this.props.combatant.hpTemp;\r\n        }\r\n\r\n        let gauge = null;\r\n        if (!this.props.combatant.pending) {\r\n            gauge = (\r\n                <HitPointGauge combatant={this.props.combatant} />\r\n            );\r\n        }\r\n\r\n        let conditions = null;\r\n        if (this.props.combatant.conditions) {\r\n            conditions = this.props.combatant.conditions.map(c => {\r\n                let name = c.name;\r\n                if (c.name === 'exhaustion') {\r\n                    name += ' (' + c.level + ')';\r\n                }\r\n                if ((c.name === 'custom') && (c.text)) {\r\n                    name = c.text;\r\n                }\r\n                if (c.duration) {\r\n                    name += ' ' + Utils.conditionDurationText(c, this.props.combat);\r\n                }\r\n                const description = [];\r\n                const text = Utils.conditionText(c);\r\n                for (let n = 0; n !== text.length; ++n) {\r\n                    description.push(<li key={n} className='condition-text'>{text[n]}</li>);\r\n                }\r\n                return (\r\n                    <div key={c.id} className='condition'>\r\n                        <div className='condition-name'>{name}</div>\r\n                        <ul>\r\n                            {description}\r\n                        </ul>\r\n                    </div>\r\n                );\r\n            });\r\n        }\r\n\r\n        const notes = [];\r\n        if (this.props.combat.map) {\r\n            if (!this.props.combatant.pending && !this.props.combat.map.items.find(i => i.id === this.props.combatant.id)) {\r\n                notes.push(\r\n                    <div key='not-on-map' className='note'>not on the map</div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className={style} onClick={e => this.onClick(e)}>\r\n                <div className='name'>\r\n                    {this.props.combatant.displayName || this.props.combatant.name || 'combatant'}\r\n                    <span className='info'>{this.getInformationText()}</span>\r\n                </div>\r\n                <div className='content'>\r\n                    <div className='section key-stats'>\r\n                        <div className='key-stat'>\r\n                            <div className='stat-label'>ac</div>\r\n                            <div className='stat-value'>{this.props.combatant.ac}</div>\r\n                        </div>\r\n                        <div className='key-stat'>\r\n                            <div className='stat-value'>{hp}</div>\r\n                            <div className='stat-label'>hp</div>\r\n                        </div>\r\n                    </div>\r\n                    {gauge}\r\n                    {conditions}\r\n                    {notes}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Encounter, EncounterSlot } from '../../models/encounter';\r\nimport { Monster } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\ninterface Props {\r\n    encounter: Encounter;\r\n    party: Party | null;\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n}\r\n\r\nexport default class DifficultyChartPanel extends React.Component<Props> {\r\n    public render() {\r\n        let monsterCount = 0;\r\n        let monsterXp = 0;\r\n        let slots: EncounterSlot[] = [];\r\n        slots = slots.concat(this.props.encounter.slots);\r\n        this.props.encounter.waves.forEach(wave => {\r\n            slots = slots.concat(wave.slots);\r\n        });\r\n        slots.forEach(slot => {\r\n            monsterCount += slot.count;\r\n            const monster = this.props.getMonster(slot.monsterName, slot.monsterGroupName);\r\n            if (monster) {\r\n                monsterXp += Utils.experience(monster.challenge) * slot.count;\r\n            }\r\n        });\r\n\r\n        const adjustedXp = monsterXp * Utils.experienceFactor(monsterCount);\r\n\r\n        let xpThresholds;\r\n        let diffSection;\r\n        if (this.props.party) {\r\n            let xpEasy = 0;\r\n            let xpMedium = 0;\r\n            let xpHard = 0;\r\n            let xpDeadly = 0;\r\n\r\n            const pcs = this.props.party.pcs.filter(pc => pc.active);\r\n            pcs.forEach(pc => {\r\n                xpEasy += Utils.pcExperience(pc.level, 'easy');\r\n                xpMedium += Utils.pcExperience(pc.level, 'medium');\r\n                xpHard += Utils.pcExperience(pc.level, 'hard');\r\n                xpDeadly += Utils.pcExperience(pc.level, 'deadly');\r\n            });\r\n\r\n            let difficulty = null;\r\n            let adjustedDifficulty = null;\r\n            if (adjustedXp > 0) {\r\n                difficulty = 'trivial';\r\n                if (adjustedXp >= xpEasy) {\r\n                    difficulty = 'easy';\r\n                }\r\n                if (adjustedXp >= xpMedium) {\r\n                    difficulty = 'medium';\r\n                }\r\n                if (adjustedXp >= xpHard) {\r\n                    difficulty = 'hard';\r\n                }\r\n                if (adjustedXp >= xpDeadly) {\r\n                    difficulty = 'deadly';\r\n                }\r\n                adjustedDifficulty = difficulty;\r\n\r\n                if ((pcs.length < 3) || (pcs.length > 5)) {\r\n                    const small = pcs.length < 3;\r\n                    switch (difficulty) {\r\n                        case 'trivial':\r\n                            adjustedDifficulty = small ? 'easy' : 'trivial';\r\n                            break;\r\n                        case 'easy':\r\n                            adjustedDifficulty = small ? 'medium' : 'trivial';\r\n                            break;\r\n                        case 'medium':\r\n                            adjustedDifficulty = small ? 'hard' : 'easy';\r\n                            break;\r\n                        case 'hard':\r\n                            adjustedDifficulty = small ? 'deadly' : 'medium';\r\n                            break;\r\n                        case 'deadly':\r\n                            adjustedDifficulty = small ? 'deadly' : 'hard';\r\n                            break;\r\n                        default:\r\n                            adjustedDifficulty = '';\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            xpThresholds = (\r\n                <div className='table'>\r\n                    <div>\r\n                        <div className='cell four'><b>easy</b></div>\r\n                        <div className='cell four'><b>medium</b></div>\r\n                        <div className='cell four'><b>hard</b></div>\r\n                        <div className='cell four'><b>deadly</b></div>\r\n                    </div>\r\n                    <div>\r\n                        <div className='cell four'>{xpEasy} xp</div>\r\n                        <div className='cell four'>{xpMedium} xp</div>\r\n                        <div className='cell four'>{xpHard} xp</div>\r\n                        <div className='cell four'>{xpDeadly} xp</div>\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            const getLeft = (xp: number) => {\r\n                const max = Math.max(adjustedXp, (xpDeadly * 1.2));\r\n                return (100 * xp) / max;\r\n            };\r\n\r\n            const getRight = (xp: number) => {\r\n                return 100 - getLeft(xp);\r\n            };\r\n\r\n            diffSection = (\r\n                <div>\r\n                    <div className='difficulty-gauge'>\r\n                        <div className='bar-container'>\r\n                            <div className='bar trivial' style={{ left: '0', right: getRight(xpEasy) + '%' }} />\r\n                        </div>\r\n                        <div className='bar-container'>\r\n                            <div className='bar easy' style={{ left: getLeft(xpEasy) + '%', right: getRight(xpMedium) + '%' }} />\r\n                        </div>\r\n                        <div className='bar-container'>\r\n                            <div className='bar medium' style={{ left: getLeft(xpMedium) + '%', right: getRight(xpHard) + '%' }} />\r\n                        </div>\r\n                        <div className='bar-container'>\r\n                            <div className='bar hard' style={{ left: getLeft(xpHard) + '%', right: getRight(xpDeadly) + '%' }} />\r\n                        </div>\r\n                        <div className='bar-container'>\r\n                            <div className='bar deadly' style={{ left: getLeft(xpDeadly) + '%', right: '0' }} />\r\n                        </div>\r\n                        <div className='encounter-container'>\r\n                            <div className='encounter' style={{ left: (getLeft(adjustedXp) - 0.5) + '%' }} />\r\n                        </div>\r\n                    </div>\r\n                    <div className='subheading'>difficulty</div>\r\n                    <div className='section'>\r\n                        difficulty for this party\r\n                        <div className='right'>{difficulty}</div>\r\n                    </div>\r\n                    <div className='section' style={{ display: (adjustedDifficulty === difficulty) ? 'none' : ''}}>\r\n                        effective difficulty for {pcs.length} pc(s)\r\n                        <div className='right'><b>{adjustedDifficulty}</b></div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='subheading'>xp value</div>\r\n                <div className='section'>\r\n                    xp for this encounter\r\n                    <div className='right'>{monsterXp} xp</div>\r\n                </div>\r\n                <div className='section' style={{ display: (adjustedXp === monsterXp) ? 'none' : ''}}>\r\n                    effective xp for {monsterCount} monster(s)\r\n                    <div className='right'>{adjustedXp} xp</div>\r\n                </div>\r\n                {xpThresholds}\r\n                {diffSection}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Encounter } from '../../models/encounter';\r\nimport { Monster } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport Dropdown from '../controls/dropdown';\r\nimport DifficultyChartPanel from '../panels/difficulty-chart-panel';\r\nimport InfoCard from './info-card';\r\n\r\nimport arrow from '../../resources/images/down-arrow.svg';\r\n\r\ninterface Props {\r\n    selection: Encounter;\r\n    parties: Party[];\r\n    filter: string;\r\n    changeValue: (field: string, value: string) => void;\r\n    addWave: () => void;\r\n    removeEncounter: () => void;\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n}\r\n\r\ninterface State {\r\n    showDetails: boolean;\r\n    party: Party | null;\r\n}\r\n\r\nexport default class EncounterCard extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showDetails: false,\r\n            party: null\r\n        };\r\n    }\r\n\r\n    private toggleDetails() {\r\n        this.setState({\r\n            showDetails: !this.state.showDetails\r\n        });\r\n    }\r\n\r\n    private selectParty(partyID: string) {\r\n        const party = this.props.parties.find(p => p.id === partyID);\r\n        this.setState({\r\n            party: party as Party\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const partyOptions = [];\r\n            if (this.props.parties) {\r\n                for (let n = 0; n !== this.props.parties.length; ++n) {\r\n                    const party = this.props.parties[n];\r\n                    partyOptions.push({\r\n                        id: party.id,\r\n                        text: party.name\r\n                    });\r\n                }\r\n            }\r\n\r\n            const difficultySection = (\r\n                <div>\r\n                    <Dropdown\r\n                        options={partyOptions}\r\n                        placeholder='select party...'\r\n                        selectedID={this.state.party ? this.state.party.id : undefined}\r\n                        select={optionID => this.selectParty(optionID)}\r\n                    />\r\n                    <DifficultyChartPanel\r\n                        encounter={this.props.selection}\r\n                        party={this.state.party}\r\n                        getMonster={(monsterName, monsterGroupName) => this.props.getMonster(monsterName, monsterGroupName)}\r\n                    />\r\n                </div>\r\n            );\r\n\r\n            const imageStyle = this.state.showDetails ? 'image rotate' : 'image';\r\n\r\n            const heading = (\r\n                <div className='heading'>\r\n                    <div className='title'>encounter</div>\r\n                    <img className={imageStyle} src={arrow} alt='arrow' onClick={() => this.toggleDetails()} />\r\n                </div>\r\n            );\r\n\r\n            const content = (\r\n                <div>\r\n                    <div className='section'>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='encounter name'\r\n                            value={this.props.selection.name}\r\n                            disabled={!!this.props.filter}\r\n                            onChange={event => this.props.changeValue('name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div style={{ display: this.state.showDetails ? '' : 'none' }}>\r\n                        <div className='divider' />\r\n                        {difficultySection}\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.addWave()}>add a new wave</button>\r\n                        <ConfirmButton text='delete encounter' callback={() => this.props.removeEncounter()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            return (\r\n                <InfoCard heading={heading} content={content} />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    title: string;\r\n    getContent: () => (string | JSX.Element);\r\n}\r\n\r\nexport default class ErrorCard extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        title: null\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            let heading = null;\r\n            if (this.props.title) {\r\n                heading = <div className='heading'><div className='title'>{this.props.title}</div></div>;\r\n            }\r\n\r\n            const content = this.props.getContent();\r\n\r\n            return (\r\n                <div className='card error'>\r\n                    {heading}\r\n                    <div className='card-content'>\r\n                        {content}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { CATEGORY_TYPES, SIZE_TYPES } from '../../models/monster-group';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport Spin from '../controls/spin';\r\n\r\nimport arrow from '../../resources/images/down-arrow.svg';\r\n\r\ninterface Props {\r\n    filter: {\r\n        name: string,\r\n        challengeMin: number;\r\n        challengeMax: number;\r\n        category: string;\r\n        size: string;\r\n    };\r\n    changeValue: (type: 'name' | 'challengeMin' | 'challengeMax' | 'category' | 'size', value: any) => void;\r\n    nudgeValue: (type: 'challengeMin' | 'challengeMax', delta: number) => void;\r\n    resetFilter: () => void;\r\n}\r\n\r\ninterface State {\r\n    showAll: boolean;\r\n}\r\n\r\nexport default class FilterCard extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showAll: false\r\n        };\r\n    }\r\n\r\n    private toggleAll() {\r\n        this.setState({\r\n            showAll: !this.state.showAll\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const sizes = ['all sizes'].concat(SIZE_TYPES);\r\n            const sizeOptions = sizes.map(size => ({ id: size, text: size }));\r\n\r\n            const categories = ['all types'].concat(CATEGORY_TYPES);\r\n            const catOptions = categories.map(cat => ({ id: cat, text: cat }));\r\n\r\n            let content = null;\r\n            if (this.state.showAll) {\r\n                content = (\r\n                    <div>\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='name'\r\n                                value={this.props.filter.name}\r\n                                onChange={event => this.props.changeValue('name', event.target.value)}\r\n                            />\r\n                        </div>\r\n                        <Spin\r\n                            source={this.props.filter}\r\n                            name='challengeMin'\r\n                            label='min cr'\r\n                            display={value => Utils.challenge(value)}\r\n                            nudgeValue={delta => this.props.nudgeValue('challengeMin', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.filter}\r\n                            name='challengeMax'\r\n                            label='max cr'\r\n                            display={value => Utils.challenge(value)}\r\n                            nudgeValue={delta => this.props.nudgeValue('challengeMax', delta)}\r\n                        />\r\n                        <Dropdown\r\n                            options={sizeOptions}\r\n                            placeholder='filter by size...'\r\n                            selectedID={this.props.filter.size}\r\n                            select={optionID => this.props.changeValue('size', optionID)}\r\n                        />\r\n                        <Dropdown\r\n                            options={catOptions}\r\n                            placeholder='filter by type...'\r\n                            selectedID={this.props.filter.category}\r\n                            select={optionID => this.props.changeValue('category', optionID)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <div className='section'>\r\n                            <button onClick={() => this.props.resetFilter()}>clear filter</button>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                let summary = '';\r\n                if (this.props.filter.size !== 'all sizes') {\r\n                    summary += summary ? ' ' + this.props.filter.size : this.props.filter.size;\r\n                }\r\n                if (this.props.filter.category !== 'all types') {\r\n                    summary += summary ? ' ' + this.props.filter.category : this.props.filter.category;\r\n                }\r\n                summary += ' monsters of cr ' + Utils.challenge(this.props.filter.challengeMin) + ' to ' + Utils.challenge(this.props.filter.challengeMax);\r\n\r\n                content = (\r\n                    <div>\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='name'\r\n                                value={this.props.filter.name}\r\n                                onChange={event => this.props.changeValue('name', event.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div className='section'>showing {summary}</div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='card'>\r\n                    <div className='heading'>\r\n                        <div className='title'>filter</div>\r\n                        <img className={this.state.showAll ? 'image rotate' : 'image'} src={arrow} alt='arrow' onClick={() => this.toggleAll()} />\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        {content}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { EncounterWave } from '../../models/encounter';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport InfoCard from './info-card';\r\n\r\ninterface Props {\r\n    wave: EncounterWave;\r\n    changeValue: (wave: EncounterWave, field: string, value: string) => void;\r\n    removeWave: (wave: EncounterWave) => void;\r\n}\r\n\r\nexport default class WaveCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const heading = (\r\n                <div className='heading'>\r\n                    <div className='title'>wave</div>\r\n                </div>\r\n            );\r\n\r\n            const content = (\r\n                <div>\r\n                    <div className='section'>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='wave name'\r\n                            value={this.props.wave.name}\r\n                            onChange={event => this.props.changeValue(this.props.wave, 'name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <ConfirmButton text='delete wave' callback={() => this.props.removeWave(this.props.wave)} />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            return (\r\n                <InfoCard heading={heading} content={content} />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Encounter } from '../../models/encounter';\r\n\r\ninterface Props {\r\n    encounter: Encounter;\r\n    selected: boolean;\r\n    setSelection: (encounter: Encounter) => void;\r\n}\r\n\r\nexport default class EncounterListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const slots = [];\r\n\r\n            this.props.encounter.slots.forEach(slot => {\r\n                let text = slot.monsterName || 'unnamed monster';\r\n                if (slot.count > 1) {\r\n                    text += ' x' + slot.count;\r\n                }\r\n                slots.push(<div key={slot.id} className='text'>{text}</div>);\r\n            });\r\n\r\n            if (slots.length === 0) {\r\n                slots.push(<div key='empty' className='text'>no monsters</div>);\r\n            }\r\n\r\n            this.props.encounter.waves.forEach(wave => {\r\n                slots.push(<div key={'name ' + wave.id} className='text subheading'>{wave.name || 'unnamed wave'}</div>);\r\n                wave.slots.forEach(slot => {\r\n                    let text = slot.monsterName || 'unnamed monster';\r\n                    if (slot.count > 1) {\r\n                        text += ' x' + slot.count;\r\n                    }\r\n                    slots.push(<div key={slot.id} className='text'>{text}</div>);\r\n                });\r\n                if (slots.length === 0) {\r\n                    slots.push(<div key={'empty ' + wave.id} className='text'>no monsters</div>);\r\n                }\r\n            });\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.encounter)}>\r\n                    <div className='heading'>{this.props.encounter.name || 'unnamed encounter'}</div>\r\n                    {slots}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Encounter, EncounterSlot, EncounterWave } from '../../models/encounter';\r\nimport { Monster, MonsterGroup } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\nimport EncounterCard from '../cards/encounter-card';\r\nimport ErrorCard from '../cards/error-card';\r\nimport FilterCard from '../cards/filter-card';\r\nimport MonsterCard from '../cards/monster-card';\r\nimport WaveCard from '../cards/wave-card';\r\nimport EncounterListItem from '../list-items/encounter-list-item';\r\nimport CardGroup from '../panels/card-group';\r\nimport Readaloud from '../panels/readaloud';\r\n\r\ninterface Props {\r\n    encounters: Encounter[];\r\n    selection: Encounter | null;\r\n    parties: Party[];\r\n    library: MonsterGroup[];\r\n    filter: string;\r\n    showHelp: boolean;\r\n    selectEncounter: (encounter: Encounter | null) => void;\r\n    addEncounter: () => void;\r\n    removeEncounter: () => void;\r\n    addEncounterSlot: (monster: Monster, waveID: string | null) => void;\r\n    removeEncounterSlot: (encounterSlot: EncounterSlot, waveID: string | null) => void;\r\n    addWave: () => void;\r\n    removeWave: (wave: EncounterWave) => void;\r\n    changeValue: (source: any, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, value: number) => void;\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n}\r\n\r\ninterface State {\r\n    filter: {\r\n        name: string,\r\n        challengeMin: number;\r\n        challengeMax: number;\r\n        category: string;\r\n        size: string;\r\n    };\r\n}\r\n\r\nexport default class EncounterBuilderScreen extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            filter: {\r\n                name: '',\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: 'all types',\r\n                size: 'all sizes'\r\n            }\r\n        };\r\n    }\r\n\r\n    private matchMonster(monster: Monster) {\r\n        if (monster.challenge < this.state.filter.challengeMin) {\r\n            return false;\r\n        }\r\n\r\n        if (monster.challenge > this.state.filter.challengeMax) {\r\n            return false;\r\n        }\r\n\r\n        if (this.state.filter.name !== '') {\r\n            if (!Utils.match(this.state.filter.name, monster.name)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.filter.category !== 'all types') {\r\n            if (monster.category !== this.state.filter.category) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.filter.size !== 'all sizes') {\r\n            if (monster.size !== this.state.filter.size) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private changeFilterValue(type: 'name' | 'challengeMin' | 'challengeMax' | 'category' | 'size', value: any) {\r\n        // eslint-disable-next-line\r\n        this.state.filter[type] = value;\r\n        this.setState({\r\n            filter: this.state.filter\r\n        });\r\n    }\r\n\r\n    private nudgeFilterValue(type: 'challengeMin' | 'challengeMax', delta: number) {\r\n        const value = Utils.nudgeChallenge(this.state.filter[type], delta);\r\n        this.changeFilterValue(type, value);\r\n    }\r\n\r\n    private resetFilter() {\r\n        this.setState({\r\n            filter: {\r\n                name: '',\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: 'all types',\r\n                size: 'all sizes'\r\n            }\r\n        });\r\n    }\r\n\r\n    private getMonsterCards(slots: EncounterSlot[], waveID: string | null) {\r\n        const cards = [];\r\n\r\n        slots.forEach(slot => {\r\n            const monster = this.props.getMonster(slot.monsterName, slot.monsterGroupName);\r\n            if (monster) {\r\n                cards.push(\r\n                    <div className='column' key={monster.id}>\r\n                        <MonsterCard\r\n                            combatant={monster}\r\n                            slot={slot}\r\n                            encounter={this.props.selection as Encounter}\r\n                            mode={'view encounter'}\r\n                            nudgeValue={(source, type, delta) => this.props.nudgeValue(source, type, delta)}\r\n                            removeEncounterSlot={source => this.props.removeEncounterSlot(source, waveID)}\r\n                        />\r\n                    </div>\r\n                );\r\n            } else {\r\n                const index = slots.indexOf(slot);\r\n                const error = 'unknown monster: ' + slot.monsterName + ' in group ' + slot.monsterGroupName;\r\n                cards.push(\r\n                    <div className='column' key={index}>\r\n                        <ErrorCard\r\n                            getContent={() => <div className='section'>{error}</div>}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n        });\r\n\r\n        if (slots.length === 0) {\r\n            cards.push(\r\n                <div className='column' key='empty'>\r\n                    <Readaloud content={<div className='section'>there are no monsters in this {waveID ? 'wave' : 'encounter'}</div>} />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return cards;\r\n    }\r\n\r\n    private getLibrarySection() {\r\n        if (!this.props.selection) {\r\n            return null;\r\n        }\r\n\r\n        const libraryCards = [];\r\n        libraryCards.push(\r\n            <div className='column' key='filter'>\r\n                <FilterCard\r\n                    filter={this.state.filter}\r\n                    changeValue={(type, value) => this.changeFilterValue(type, value)}\r\n                    nudgeValue={(type, delta) => this.nudgeFilterValue(type, delta)}\r\n                    resetFilter={() => this.resetFilter()}\r\n                />\r\n            </div>\r\n        );\r\n\r\n        const monsters: Monster[] = [];\r\n        if (this.props.selection) {\r\n            this.props.library.forEach(group => {\r\n                group.monsters.forEach(monster => {\r\n                    if (this.matchMonster(monster)) {\r\n                        monsters.push(monster);\r\n                    }\r\n                });\r\n            });\r\n            monsters.sort((a, b) => {\r\n                if (a.name < b.name) { return -1; }\r\n                if (a.name > b.name) { return 1; }\r\n                return 0;\r\n            });\r\n        }\r\n        monsters.forEach(monster => {\r\n            libraryCards.push(\r\n                <div className='column' key={monster.id}>\r\n                    <MonsterCard\r\n                        key={monster.id}\r\n                        combatant={monster}\r\n                        encounter={this.props.selection as Encounter}\r\n                        library={this.props.library}\r\n                        mode={'view encounter'}\r\n                        addEncounterSlot={(combatant, waveID) => this.props.addEncounterSlot(combatant, waveID)}\r\n                    />\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <CardGroup\r\n                heading='monster library'\r\n                content={libraryCards}\r\n                showToggle={true}\r\n            />\r\n        );\r\n    }\r\n\r\n    private showEncounter(enc: Encounter) {\r\n        return Utils.match(this.props.filter, enc.name);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let help = null;\r\n            if (this.props.showHelp) {\r\n                help = (\r\n                    <HelpCard encounters={this.props.encounters} />\r\n                );\r\n            }\r\n\r\n            const encounters = this.props.encounters.filter(e => this.showEncounter(e)).map(e => {\r\n                return (\r\n                    <EncounterListItem\r\n                        key={e.id}\r\n                        encounter={e}\r\n                        selected={e === this.props.selection}\r\n                        setSelection={encounter => this.props.selectEncounter(encounter)}\r\n                    />\r\n                );\r\n            });\r\n\r\n            let encounterName;\r\n            const encounterCards = [];\r\n            let waves: JSX.Element[] = [];\r\n\r\n            if (this.props.selection) {\r\n                encounterName = this.props.selection.name || 'unnamed encounter';\r\n\r\n                encounterCards.push(\r\n                    <div className='column' key='info'>\r\n                        <EncounterCard\r\n                            selection={this.props.selection}\r\n                            parties={this.props.parties}\r\n                            filter={this.props.filter}\r\n                            changeValue={(type, value) => this.props.changeValue(this.props.selection, type, value)}\r\n                            addWave={() => this.props.addWave()}\r\n                            removeEncounter={() => this.props.removeEncounter()}\r\n                            getMonster={(monsterName, monsterGroupName) => this.props.getMonster(monsterName, monsterGroupName)}\r\n                        />\r\n                    </div>\r\n                );\r\n\r\n                this.getMonsterCards(this.props.selection.slots, null)\r\n                    .forEach(card => encounterCards.push(card));\r\n\r\n                waves = this.props.selection.waves.map(w => {\r\n                    const waveCards = [];\r\n                    waveCards.push(\r\n                        <div className='column' key='info'>\r\n                            <WaveCard\r\n                                wave={w}\r\n                                removeWave={wave => this.props.removeWave(wave)}\r\n                                changeValue={(source, field, value) => this.props.changeValue(source, field, value)}\r\n                            />\r\n                        </div>\r\n                    );\r\n\r\n                    this.getMonsterCards(w.slots, w.id)\r\n                        .forEach(card => waveCards.push(card));\r\n\r\n                    return (\r\n                        <CardGroup\r\n                            key={w.id}\r\n                            heading={w.name || 'unnamed wave'}\r\n                            content={waveCards}\r\n                            showToggle={true}\r\n                        />\r\n                    );\r\n                });\r\n            }\r\n\r\n            return (\r\n                <div className='encounter-builder row collapse'>\r\n                    <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                        {help}\r\n                        <button onClick={() => this.props.addEncounter()}>add a new encounter</button>\r\n                        {encounters}\r\n                    </div>\r\n                    <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                        <CardGroup\r\n                            content={encounterCards}\r\n                            heading={encounterName}\r\n                            showClose={this.props.selection !== null}\r\n                            close={() => this.props.selectEncounter(null)}\r\n                        />\r\n                        {waves}\r\n                        {this.getLibrarySection()}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface HelpCardProps {\r\n    encounters: Encounter[];\r\n}\r\n\r\nclass HelpCard extends React.Component<HelpCardProps> {\r\n    public render() {\r\n        try {\r\n            let action: JSX.Element | null = null;\r\n            if (this.props.encounters.length === 0) {\r\n                action = (\r\n                    <div className='section'>to start building an encounter, press the button below</div>\r\n                );\r\n            } else {\r\n                action = (\r\n                    <div className='section'>select an encounter from the list to add monsters to it</div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <Readaloud\r\n                    content={\r\n                        <div>\r\n                            <div className='section'>on this page you can set up encounters</div>\r\n                            <div className='section'>\r\n                                when you have created an encounter you can add monsters to it, then gauge its difficulty for a party of pcs\r\n                            </div>\r\n                            <div className='divider'/>\r\n                            {action}\r\n                        </div>\r\n                    }\r\n                />\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { MonsterGroup } from '../../models/monster-group';\r\nimport Readaloud from '../panels/readaloud';\r\n\r\ninterface Props {\r\n    library: MonsterGroup[];\r\n    addOpenGameContent: () => void;\r\n}\r\n\r\nexport default class HomeScreen extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            let monsters = null;\r\n            if (this.props.library.length === 0) {\r\n                monsters = (\r\n                    <div>\r\n                        <div className='divider' />\r\n                        <div className='text'>\r\n                            since your collection of monsters is empty, you might want to start by pressing the button below to add monsters from the&nbsp;\r\n                            <a href='http://dnd.wizards.com/articles/features/systems-reference-document-srd' target='_blank' rel='noopener noreferrer'>\r\n                                system reference document\r\n                            </a>\r\n                        </div>\r\n                        <div className='text'>\r\n                            <button onClick={() => this.props.addOpenGameContent()}>add monsters</button>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            const content = (\r\n                <Readaloud\r\n                    content={(\r\n                        <div>\r\n                            <div className='heading'>welcome to <b>dojo</b></div>\r\n                            <div className='divider' />\r\n                            <div className='text'>\r\n                                <b>dojo</b> is an app for dms of dungeons and dragons fifth edition\r\n                            </div>\r\n                            <div className='text'>\r\n                                with <b>dojo</b> you can:\r\n                                <ul>\r\n                                    <li>build unique, challenging monsters</li>\r\n                                    <li>create encounters of just the right difficulty for your players</li>\r\n                                    <li>design intricate tactical maps</li>\r\n                                    <li>run combat without the book-keeping</li>\r\n                                </ul>\r\n                            </div>\r\n                            {monsters}\r\n                            <div className='divider' />\r\n                            <div className='text'>\r\n                                use the buttons at the bottom of the screen to access the app's features\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                />\r\n            );\r\n\r\n            return (\r\n                <div className='home scrollable'>\r\n                    <div className='vertical-center-outer'>\r\n                        <div className='vertical-center-middle'>\r\n                            <div className='vertical-center-inner'>\r\n                                {content}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Map } from '../../models/map-folio';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    map: Map;\r\n    changeValue: (map: Map, field: string, value: string) => void;\r\n    editMap: (map: Map) => void;\r\n    removeMap: (map: Map) => void;\r\n}\r\n\r\nexport default class MapCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div className='card map'>\r\n                    <div className='heading'>\r\n                        <div className='title'>{this.props.map.name || 'unnamed map'}</div>\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='map name'\r\n                                value={this.props.map.name}\r\n                                onChange={event => this.props.changeValue(this.props.map, 'name', event.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='section centered'>\r\n                            <MapPanel\r\n                                map={this.props.map}\r\n                                mode='thumbnail'\r\n                            />\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='section'>\r\n                            <button onClick={() => this.props.editMap(this.props.map)}>edit map</button>\r\n                            <ConfirmButton text='delete map' callback={() => this.props.removeMap(this.props.map)} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { MapFolio } from '../../models/map-folio';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport InfoCard from './info-card';\r\n\r\ninterface Props {\r\n    selection: MapFolio;\r\n    filter: string | null;\r\n    changeValue: (source: MapFolio, field: string, value: string) => void;\r\n    addMap: () => void;\r\n    removeMapFolio: () => void;\r\n}\r\n\r\nexport default class MapFolioCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const heading = (\r\n                <div className='heading'>\r\n                    <div className='title'>map folio</div>\r\n                </div>\r\n            );\r\n\r\n            const content = (\r\n                <div>\r\n                    <div className='section'>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='folio name'\r\n                            value={this.props.selection.name}\r\n                            disabled={!!this.props.filter}\r\n                            onChange={event => this.props.changeValue(this.props.selection, 'name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.addMap()}>add a new map</button>\r\n                        <ConfirmButton text='delete folio' callback={() => this.props.removeMapFolio()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            return (\r\n                <InfoCard heading={heading} content={content} />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { MapFolio } from '../../models/map-folio';\r\n\r\ninterface Props {\r\n    mapFolio: MapFolio;\r\n    selected: boolean;\r\n    filter: string;\r\n    setSelection: (mapFolio: MapFolio) => void;\r\n}\r\n\r\nexport default class MapFolioListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const matchFolio = Utils.match(this.props.filter, this.props.mapFolio.name);\r\n\r\n            const maps = [];\r\n            for (let n = 0; n !== this.props.mapFolio.maps.length; ++n) {\r\n                const map = this.props.mapFolio.maps[n];\r\n                const name = map.name || 'unnamed map';\r\n                if (matchFolio || Utils.match(this.props.filter, name)) {\r\n                    maps.push(<div key={map.id} className='text'>{name}</div>);\r\n                }\r\n            }\r\n            if (maps.length === 0) {\r\n                maps.push(<div key='empty' className='text'>no maps</div>);\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.mapFolio)}>\r\n                    <div className='heading'>{this.props.mapFolio.name || 'unnamed folio'}</div>\r\n                    {maps}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Map, MapFolio } from '../../models/map-folio';\r\n\r\nimport MapCard from '../cards/map-card';\r\nimport MapFolioCard from '../cards/map-folio-card';\r\nimport MapFolioListItem from '../list-items/map-folio-list-item';\r\nimport CardGroup from '../panels/card-group';\r\nimport Readaloud from '../panels/readaloud';\r\n\r\ninterface Props {\r\n    mapFolios: MapFolio[];\r\n    selection: MapFolio | null;\r\n    filter: string;\r\n    showHelp: boolean;\r\n    selectMapFolio: (mapFolio: MapFolio | null) => void;\r\n    addMapFolio: () => void;\r\n    removeMapFolio: () => void;\r\n    addMap: () => void;\r\n    editMap: (map: Map) => void;\r\n    removeMap: (map: Map) => void;\r\n    changeValue: (source: {}, field: string, value: any) => void;\r\n}\r\n\r\nexport default class MapFoliosScreen extends React.Component<Props> {\r\n    private showMapFolio(folio: MapFolio) {\r\n        let result = Utils.match(this.props.filter, folio.name);\r\n\r\n        if (!result) {\r\n            folio.maps.forEach(map => {\r\n                result = Utils.match(this.props.filter, map.name) || result;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let help = null;\r\n            if (this.props.showHelp) {\r\n                help = (\r\n                    <HelpCard mapFolios={this.props.mapFolios} />\r\n                );\r\n            }\r\n\r\n            const folios = this.props.mapFolios.filter(f => this.showMapFolio(f)).map(mapFolio => {\r\n                return (\r\n                    <MapFolioListItem\r\n                        key={mapFolio.id}\r\n                        mapFolio={mapFolio}\r\n                        filter={this.props.filter}\r\n                        selected={mapFolio === this.props.selection}\r\n                        setSelection={f => this.props.selectMapFolio(f)}\r\n                    />\r\n                );\r\n            });\r\n\r\n            let folio = null;\r\n            if (this.props.selection) {\r\n                const folioCards = [];\r\n\r\n                folioCards.push(\r\n                    <div className='column' key='info'>\r\n                        <MapFolioCard\r\n                            selection={this.props.selection}\r\n                            filter={this.props.filter}\r\n                            addMap={() => this.props.addMap()}\r\n                            removeMapFolio={() => this.props.removeMapFolio()}\r\n                            changeValue={(source, field, value) => this.props.changeValue(source, field, value)}\r\n                        />\r\n                    </div>\r\n                );\r\n\r\n                this.props.selection.maps.filter(m => Utils.match(this.props.filter, m.name)).forEach(m => {\r\n                    folioCards.push(\r\n                        <div className='column' key={m.id}>\r\n                            <MapCard\r\n                                map={m}\r\n                                editMap={map => this.props.editMap(map)}\r\n                                removeMap={map => this.props.removeMap(map)}\r\n                                changeValue={(source, type, value) => this.props.changeValue(source, type, value)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                if (folioCards.length === 0) {\r\n                    folioCards.push(\r\n                        <div className='column' key='empty'>\r\n                            <Readaloud content={<div className='section'>there are no maps in this folio</div>} />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                folio = (\r\n                    <div>\r\n                        <CardGroup\r\n                            content={folioCards}\r\n                            heading={this.props.selection.name || 'unnamed folio'}\r\n                            showClose={this.props.selection !== null}\r\n                            close={() => this.props.selectMapFolio(null)}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='map-builder row collapse'>\r\n                    <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                        {help}\r\n                        <button onClick={() => this.props.addMapFolio()}>add a new map folio</button>\r\n                        {folios}\r\n                    </div>\r\n                    <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                        {folio}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface HelpCardProps {\r\n    mapFolios: MapFolio[];\r\n}\r\n\r\nclass HelpCard extends React.Component<HelpCardProps> {\r\n    public render() {\r\n        try {\r\n            let action: JSX.Element | null = null;\r\n            if (this.props.mapFolios.length === 0) {\r\n                action = (\r\n                    <div className='section'>to start a new folio, press the button below</div>\r\n                );\r\n            } else {\r\n                action = (\r\n                    <div className='section'>select a map folio from the list to see the maps it contains</div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <Readaloud\r\n                    content={\r\n                        <div>\r\n                            <div className='section'>on this page you can set up folios containing tactical maps</div>\r\n                            <div className='section'>when you have created a map you can use it in encounters</div>\r\n                            <div className='divider'/>\r\n                            {action}\r\n                        </div>\r\n                    }\r\n                />\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { MonsterGroup } from '../../models/monster-group';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport InfoCard from './info-card';\r\n\r\ninterface Props {\r\n    selection: MonsterGroup;\r\n    filter: string | null;\r\n    changeValue: (field: string, value: string) => void;\r\n    addMonster: () => void;\r\n    generateMonster: () => void;\r\n    sortMonsters: () => void;\r\n    removeMonsterGroup: () => void;\r\n}\r\n\r\nexport default class MonsterGroupCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const heading = (\r\n                <div className='heading'>\r\n                    <div className='title'>monster group</div>\r\n                </div>\r\n            );\r\n\r\n            const content = (\r\n                <div>\r\n                    <div className='section'>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='group name'\r\n                            value={this.props.selection.name}\r\n                            disabled={!!this.props.filter}\r\n                            onChange={event => this.props.changeValue('name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.addMonster()}>add a new blank monster</button>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.generateMonster()}>generate a random monster</button>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.sortMonsters()}>sort monsters</button>\r\n                        <ConfirmButton text='delete group' callback={() => this.props.removeMonsterGroup()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            return (\r\n                <InfoCard heading={heading} content={content} />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { MonsterGroup } from '../../models/monster-group';\r\n\r\ninterface Props {\r\n    group: MonsterGroup;\r\n    selected: boolean;\r\n    filter: string;\r\n    setSelection: (group: MonsterGroup) => void;\r\n}\r\n\r\nexport default class MonsterGroupListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const matchGroup = Utils.match(this.props.filter, this.props.group.name);\r\n\r\n            const monsters = [];\r\n            for (let n = 0; n !== this.props.group.monsters.length; ++n) {\r\n                const monster = this.props.group.monsters[n];\r\n                const name = monster.name || 'unnamed monster';\r\n                if (matchGroup || Utils.match(this.props.filter, name)) {\r\n                    monsters.push(<div key={monster.id} className='text'>{name}</div>);\r\n                }\r\n            }\r\n            if (monsters.length === 0) {\r\n                monsters.push(<div key='empty' className='text'>no monsters</div>);\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.group)}>\r\n                    <div className='heading'>{this.props.group.name || 'unnamed group'}</div>\r\n                    {monsters}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Monster, MonsterGroup } from '../../models/monster-group';\r\n\r\nimport MonsterCard from '../cards/monster-card';\r\nimport MonsterGroupCard from '../cards/monster-group-card';\r\nimport MonsterGroupListItem from '../list-items/monster-group-list-item';\r\nimport CardGroup from '../panels/card-group';\r\nimport Readaloud from '../panels/readaloud';\r\n\r\ninterface Props {\r\n    library: MonsterGroup[];\r\n    selection: MonsterGroup | null;\r\n    showHelp: boolean;\r\n    filter: string;\r\n    selectMonsterGroup: (group: MonsterGroup | null) => void;\r\n    addMonsterGroup: () => void;\r\n    removeMonsterGroup: () => void;\r\n    addMonster: () => void;\r\n    generateMonster: () => void;\r\n    removeMonster: (monster: Monster) => void;\r\n    editMonster: (monster: Monster) => void;\r\n    cloneMonster: (monster: Monster, name: string) => void;\r\n    sortMonsters: () => void;\r\n    moveToGroup: (monster: Monster, groupID: string) => void;\r\n    changeValue: (source: any, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, value: number) => void;\r\n}\r\n\r\nexport default class MonsterLibraryScreen extends React.Component<Props> {\r\n    private showMonsterGroup(group: MonsterGroup) {\r\n        let result = Utils.match(this.props.filter, group.name);\r\n\r\n        if (!result) {\r\n            group.monsters.forEach(monster => {\r\n                result = Utils.match(this.props.filter, monster.name) || result;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let help = null;\r\n            if (this.props.showHelp) {\r\n                help = (\r\n                    <HelpCard library={this.props.library} />\r\n                );\r\n            }\r\n\r\n            const listItems = this.props.library.filter(group => this.showMonsterGroup(group)).map(group => {\r\n                return (\r\n                    <MonsterGroupListItem\r\n                        key={group.id}\r\n                        group={group}\r\n                        filter={this.props.filter}\r\n                        selected={group === this.props.selection}\r\n                        setSelection={grp => this.props.selectMonsterGroup(grp)}\r\n                    />\r\n                );\r\n            });\r\n\r\n            const cards = [];\r\n\r\n            if (this.props.selection) {\r\n                cards.push(\r\n                    <div className='column' key='info'>\r\n                        <MonsterGroupCard\r\n                            selection={this.props.selection}\r\n                            filter={this.props.filter}\r\n                            addMonster={() => this.props.addMonster()}\r\n                            generateMonster={() => this.props.generateMonster()}\r\n                            sortMonsters={() => this.props.sortMonsters()}\r\n                            changeValue={(type, value) => this.props.changeValue(this.props.selection, type, value)}\r\n                            removeMonsterGroup={() => this.props.removeMonsterGroup()}\r\n                        />\r\n                    </div>\r\n                );\r\n\r\n                const monsters = this.props.selection.monsters.filter(monster => {\r\n                    return Utils.match(this.props.filter, monster.name);\r\n                });\r\n\r\n                if (monsters.length !== 0) {\r\n                    monsters.forEach(m => {\r\n                        cards.push(\r\n                            <div className='column' key={m.id}>\r\n                                <MonsterCard\r\n                                    combatant={m}\r\n                                    mode={'view editable'}\r\n                                    library={this.props.library}\r\n                                    changeValue={(source, type, value) => this.props.changeValue(source, type, value)}\r\n                                    nudgeValue={(source, type, delta) => this.props.nudgeValue(source, type, delta)}\r\n                                    moveToGroup={(monster, groupID) => this.props.moveToGroup(monster, groupID)}\r\n                                    removeMonster={monster => this.props.removeMonster(monster)}\r\n                                    editMonster={monster => this.props.editMonster(monster)}\r\n                                    cloneMonster={(monster, monsterName) => this.props.cloneMonster(monster, monsterName)}\r\n                                />\r\n                            </div>\r\n                        );\r\n                    });\r\n                } else {\r\n                    cards.push(\r\n                        <div className='column' key='empty'>\r\n                            <Readaloud content={<div className='section'>there are no monsters in this group</div>} />\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n\r\n            let name;\r\n            if (this.props.selection) {\r\n                name = this.props.selection.name;\r\n                if (!name) {\r\n                    name = 'unnamed group';\r\n                }\r\n            }\r\n\r\n            return (\r\n                <div className='monster-library row collapse'>\r\n                    <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                        {help}\r\n                        <button onClick={() => this.props.addMonsterGroup()}>add a new monster group</button>\r\n                        {listItems}\r\n                    </div>\r\n                    <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                        <CardGroup\r\n                            content={cards}\r\n                            heading={name}\r\n                            showClose={this.props.selection !== null}\r\n                            close={() => this.props.selectMonsterGroup(null)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface HelpCardProps {\r\n    library: MonsterGroup[];\r\n}\r\n\r\nclass HelpCard extends React.Component<HelpCardProps> {\r\n    public render() {\r\n        let action: JSX.Element | null = null;\r\n        if (this.props.library.length === 0) {\r\n            action = (\r\n                <div className='section'>to start adding monsters, press the button below</div>\r\n            );\r\n        } else {\r\n            action = (\r\n                <div className='section'>select a monster group from the list to see stat blocks for monsters in that group</div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Readaloud\r\n                content={\r\n                    <div>\r\n                        <div className='section'>you can maintain your menagerie of monsters here</div>\r\n                        <div className='divider'/>\r\n                        {action}\r\n                    </div>\r\n                }\r\n            />\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Party } from '../../models/party';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport InfoCard from './info-card';\r\n\r\ninterface Props {\r\n    selection: Party;\r\n    filter: string | null;\r\n    changeValue: (field: string, value: string) => void;\r\n    addPC: () => void;\r\n    sortPCs: () => void;\r\n    removeParty: () => void;\r\n}\r\n\r\nexport default class PartyCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const activePCs = this.props.selection.pcs.filter(pc => pc.active);\r\n\r\n            const languages = activePCs\r\n                .map(pc => pc.languages)\r\n                .join(', ')\r\n                .split(/[ ,;]+/)\r\n                .reduce((array: string[], value) => {\r\n                    if (array.indexOf(value) === -1) {\r\n                        array.push(value);\r\n                    }\r\n                    return array;\r\n                }, [])\r\n                .sort((a, b) => {\r\n                    if (a === 'Common') {\r\n                        return -1;\r\n                    }\r\n                    if (b === 'Common') {\r\n                        return 1;\r\n                    }\r\n                    return a.localeCompare(b);\r\n                })\r\n                .join(', ');\r\n\r\n            let insightSummary = '-';\r\n            let investigationSummary = '-';\r\n            let perceptionSummary = '-';\r\n\r\n            if (activePCs.length !== 0) {\r\n                const insight: { min: number | null, max: number | null } = { min: null, max: null };\r\n                const invest: { min: number | null, max: number | null } = { min: null, max: null };\r\n                const percep: { min: number | null, max: number | null } = { min: null, max: null };\r\n\r\n                activePCs.forEach(pc => {\r\n                    insight.min = insight.min === null ? pc.passiveInsight : Math.min(insight.min, pc.passiveInsight);\r\n                    insight.max = insight.max === null ? pc.passiveInsight : Math.max(insight.max, pc.passiveInsight);\r\n                    invest.min = invest.min === null ? pc.passiveInvestigation : Math.min(invest.min, pc.passiveInvestigation);\r\n                    invest.max = invest.max === null ? pc.passiveInvestigation : Math.max(invest.max, pc.passiveInvestigation);\r\n                    percep.min = percep.min === null ? pc.passivePerception : Math.min(percep.min, pc.passivePerception);\r\n                    percep.max = percep.max === null ? pc.passivePerception : Math.max(percep.max, pc.passivePerception);\r\n                });\r\n\r\n                insightSummary = insight.min === insight.max ? (insight.min as number).toString() : insight.min + ' - ' + insight.max;\r\n                investigationSummary = invest.min === invest.max ? (invest.min as number).toString() : invest.min + ' - ' + invest.max;\r\n                perceptionSummary = percep.min === percep.max ? (percep.min as number).toString() : percep.min + ' - ' + percep.max;\r\n            }\r\n\r\n            const heading = (\r\n                <div className='heading'>\r\n                    <div className='title'>party</div>\r\n                </div>\r\n            );\r\n\r\n            const content = (\r\n                <div>\r\n                    <div className='section'>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='party name'\r\n                            value={this.props.selection.name}\r\n                            disabled={!!this.props.filter}\r\n                            onChange={event => this.props.changeValue('name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section' style={{ display: languages !== '' ? 'block' : 'none' }}>\r\n                        <div className='subheading'>languages</div>\r\n                    </div>\r\n                    <div className='section'>\r\n                        {languages}\r\n                    </div>\r\n                    <div className='section'>\r\n                        <div className='subheading'>passive skills</div>\r\n                    </div>\r\n                    <div className='table'>\r\n                        <div>\r\n                            <div className='cell three'><b>insight</b></div>\r\n                            <div className='cell three'><b>invest.</b></div>\r\n                            <div className='cell three'><b>percep.</b></div>\r\n                        </div>\r\n                        <div>\r\n                            <div className='cell three'>{insightSummary}</div>\r\n                            <div className='cell three'>{investigationSummary}</div>\r\n                            <div className='cell three'>{perceptionSummary}</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.addPC()}>add a new pc</button>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.sortPCs()}>sort pcs</button>\r\n                        <ConfirmButton text='delete party' callback={() => this.props.removeParty()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            return (\r\n                <InfoCard heading={heading} content={content} />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Party } from '../../models/party';\r\n\r\ninterface Props {\r\n    party: Party;\r\n    selected: boolean;\r\n    filter: string;\r\n    setSelection: (party: Party) => void;\r\n}\r\n\r\nexport default class PartyListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const matchParty = Utils.match(this.props.filter, this.props.party.name);\r\n\r\n            const pcs = [];\r\n            for (let n = 0; n !== this.props.party.pcs.length; ++n) {\r\n                const pc = this.props.party.pcs[n];\r\n                let name = pc.name || 'unnamed pc';\r\n                if (pc.player) {\r\n                    name += ' (' + pc.player + ')';\r\n                }\r\n                if (matchParty || Utils.match(this.props.filter, name)) {\r\n                    pcs.push(<div key={pc.id} className='text'>{name}</div>);\r\n                }\r\n            }\r\n            if (pcs.length === 0) {\r\n                pcs.push(<div key='empty' className='text'>no pcs</div>);\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.party)}>\r\n                    <div className='heading'>{this.props.party.name || 'unnamed party'}</div>\r\n                    {pcs}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Party, PC } from '../../models/party';\r\n\r\nimport PartyCard from '../cards/party-card';\r\nimport PCCard from '../cards/pc-card';\r\nimport PartyListItem from '../list-items/party-list-item';\r\nimport CardGroup from '../panels/card-group';\r\nimport Readaloud from '../panels/readaloud';\r\n\r\ninterface Props {\r\n    parties: Party[];\r\n    selection: Party | null;\r\n    filter: string;\r\n    showHelp: boolean;\r\n    selectParty: (party: Party | null) => void;\r\n    addParty: () => void;\r\n    removeParty: () => void;\r\n    addPC: () => void;\r\n    removePC: (pc: PC) => void;\r\n    sortPCs: () => void;\r\n    changeValue: (source: any, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, value: number) => void;\r\n}\r\n\r\nexport default class PartiesScreen extends React.Component<Props> {\r\n    private showParty(party: Party) {\r\n        let result = Utils.match(this.props.filter, party.name);\r\n\r\n        if (!result) {\r\n            party.pcs.forEach(pc => {\r\n                result = Utils.match(this.props.filter, pc.name) || result;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let help = null;\r\n            if (this.props.showHelp) {\r\n                help = (\r\n                    <HelpCard parties={this.props.parties}/>\r\n                );\r\n            }\r\n\r\n            const parties = this.props.parties.filter(p => this.showParty(p)).map(p => {\r\n                return (\r\n                    <PartyListItem\r\n                        key={p.id}\r\n                        party={p}\r\n                        filter={this.props.filter}\r\n                        selected={p === this.props.selection}\r\n                        setSelection={party => this.props.selectParty(party)}\r\n                    />\r\n                );\r\n            });\r\n\r\n            const activeCards: JSX.Element[] = [];\r\n            const inactiveCards: JSX.Element[] = [];\r\n\r\n            if (this.props.selection) {\r\n                activeCards.push(\r\n                    <div className='column' key='info'>\r\n                        <PartyCard\r\n                            selection={this.props.selection}\r\n                            filter={this.props.filter}\r\n                            addPC={() => this.props.addPC()}\r\n                            sortPCs={() => this.props.sortPCs()}\r\n                            changeValue={(type, value) => this.props.changeValue(this.props.selection, type, value)}\r\n                            removeParty={() => this.props.removeParty()}\r\n                        />\r\n                    </div>\r\n                );\r\n\r\n                const pcs = this.props.selection.pcs.filter(pc => {\r\n                    return Utils.match(this.props.filter, pc.name);\r\n                });\r\n\r\n                const activePCs = pcs.filter(pc => pc.active);\r\n                activePCs.forEach(activePC => {\r\n                    activeCards.push(\r\n                        <div className='column' key={activePC.id}>\r\n                            <PCCard\r\n                                combatant={activePC}\r\n                                mode={'edit'}\r\n                                changeValue={(pc, type, value) => this.props.changeValue(pc, type, value)}\r\n                                nudgeValue={(pc, type, delta) => this.props.nudgeValue(pc, type, delta)}\r\n                                removePC={pc => this.props.removePC(pc)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                const inactivePCs = pcs.filter(pc => !pc.active);\r\n                inactivePCs.forEach(inactivePC => {\r\n                    inactiveCards.push(\r\n                        <div className='column' key={inactivePC.id}>\r\n                            <PCCard\r\n                                combatant={inactivePC}\r\n                                mode={'edit'}\r\n                                changeValue={(pc, type, value) => this.props.changeValue(pc, type, value)}\r\n                                nudgeValue={(pc, type, delta) => this.props.nudgeValue(pc, type, delta)}\r\n                                removePC={pc => this.props.removePC(pc)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                if (activePCs.length === 0) {\r\n                    activeCards.push(\r\n                        <div className='column' key='empty'>\r\n                            <Readaloud content={<div className='section'>there are no pcs in this party</div>} />\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n\r\n            let name;\r\n            if (this.props.selection) {\r\n                name = this.props.selection.name || 'unnamed party';\r\n            }\r\n\r\n            return (\r\n                <div className='parties row collapse'>\r\n                    <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                        {help}\r\n                        <button onClick={() => this.props.addParty()}>add a new party</button>\r\n                        {parties}\r\n                    </div>\r\n                    <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                        <CardGroup\r\n                            content={activeCards}\r\n                            heading={name}\r\n                            showClose={this.props.selection !== null}\r\n                            close={() => this.props.selectParty(null)}\r\n                            hidden={!this.props.selection}\r\n                        />\r\n                        <CardGroup\r\n                            content={inactiveCards}\r\n                            heading='inactive pcs'\r\n                            showClose={false}\r\n                            hidden={inactiveCards.length === 0}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface HelpCardProps {\r\n    parties: Party[];\r\n}\r\n\r\nclass HelpCard extends React.Component<HelpCardProps> {\r\n    public render() {\r\n        try {\r\n            let action: JSX.Element | null = null;\r\n            if (this.props.parties.length === 0) {\r\n                action = (\r\n                    <div className='section'>to start adding a party, press the button below</div>\r\n                );\r\n            } else {\r\n                action = (\r\n                    <div className='section'>select a party from the list to see pc details</div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <Readaloud\r\n                    content={\r\n                        <div>\r\n                            <div className='section'>this page is where you can tell dojo all about your pcs</div>\r\n                            <div className='section'>you can add a party for each of your gaming groups</div>\r\n                            <div className='divider'/>\r\n                            {action}\r\n                        </div>\r\n                    }\r\n                />\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport checked from '../../resources/images/checked.svg';\r\nimport unchecked from '../../resources/images/unchecked.svg';\r\n\r\ninterface Props {\r\n    label: string;\r\n    checked: boolean;\r\n    changeValue: (value: boolean) => void;\r\n    showCheck: boolean;\r\n    disabled: boolean;\r\n}\r\n\r\nexport default class Checkbox extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        showCheck: true,\r\n        disabled: false\r\n    };\r\n\r\n    private click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        this.props.changeValue(!this.props.checked);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'checkbox';\r\n            if (this.props.checked) {\r\n                style += ' checked';\r\n            }\r\n            if (this.props.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            let check = null;\r\n            if (this.props.showCheck) {\r\n                check = (\r\n                    <img className='image' src={this.props.checked ? checked : unchecked} alt='check' />\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={style} onClick={e => this.click(e)}>\r\n                    {check}\r\n                    <div className='checkbox-label'>{this.props.label}</div>\r\n                </div>\r\n            );\r\n\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    options: { id: string; text: string; disabled?: boolean }[];\r\n    selectedID: string | null;\r\n    select: (optionID: string) => void;\r\n    tabs: boolean;\r\n    disabled: boolean;\r\n    itemsPerRow: number;\r\n}\r\n\r\nexport default class Selector extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        tabs: false,\r\n        disabled: false,\r\n        itemsPerRow: null\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            let style = this.props.tabs ? 'selector tabs' : 'selector radio';\r\n            if (this.props.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            const itemsPerRow = this.props.itemsPerRow ? this.props.itemsPerRow : this.props.options.length;\r\n            const rowCount = Math.ceil(this.props.options.length / itemsPerRow);\r\n            const rowContents: JSX.Element[][] = [];\r\n            for (let n = 0; n !== rowCount; ++n) {\r\n                rowContents.push([]);\r\n            }\r\n\r\n            this.props.options.forEach(option => {\r\n                const index = this.props.options.indexOf(option);\r\n                const rowIndex = Math.floor(index / itemsPerRow);\r\n                const row = rowContents[rowIndex];\r\n                row.push(\r\n                    <SelectorOption\r\n                        key={option.id}\r\n                        option={option}\r\n                        selected={option.id === this.props.selectedID}\r\n                        count={itemsPerRow}\r\n                        select={(optionID: string) => this.props.select(optionID)}\r\n                    />\r\n                );\r\n            });\r\n\r\n            const rowSections = rowContents.map(row => {\r\n                const index = rowContents.indexOf(row);\r\n                return <div key={index}>{row}</div>;\r\n            });\r\n\r\n            return (\r\n                <div className={style}>\r\n                    {rowSections}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface SelectorOptionInterface {\r\n    option: { id: string; text: string; disabled?: boolean };\r\n    selected: boolean;\r\n    count: number;\r\n    select: (optionID: string) => void;\r\n}\r\n\r\nclass SelectorOption extends React.Component<SelectorOptionInterface> {\r\n    private click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (!this.props.option.disabled) {\r\n            this.props.select(this.props.option.id);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const width = 'calc(((100% - 1px) / ' + this.props.count + ') - 2px )';\r\n\r\n            let style = 'option';\r\n            if (this.props.selected) {\r\n                style += ' selected';\r\n            }\r\n            if (this.props.option.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            return (\r\n                <div key={this.props.option.id} className={style} style={{ width: width }} title={this.props.option.text} onClick={e => this.click(e)}>\r\n                    {this.props.option.text}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","interface ModelLine {\r\n    prev: string;\r\n    freq: ModelChar[];\r\n}\r\n\r\ninterface ModelChar {\r\n    char: string;\r\n    count: number;\r\n}\r\n\r\nexport default class TextGenerator {\r\n\r\n    private static model: ModelLine[] = [];\r\n\r\n    public static initModel(sources: string[]) {\r\n        const model: ModelLine[] = [];\r\n\r\n        sources.forEach(source => {\r\n            const lines = source.split(/\\r?\\n/);\r\n            lines.forEach(line => {\r\n                if (line) {\r\n                    TextGenerator.addLineToModel(line, model);\r\n                }\r\n            });\r\n        });\r\n\r\n        TextGenerator.model = model;\r\n    }\r\n\r\n    private static addLineToModel(line: string, model: ModelLine[]) {\r\n        line = String.fromCharCode(0, 1) + line + String.fromCharCode(2);\r\n\r\n        for (let index = 2; index !== line.length; ++index) {\r\n            const prev = line.substr(index - 2, 2);\r\n            const char = line.substr(index, 1);\r\n\r\n            let item = model.find(x => x.prev === prev);\r\n            if (!item) {\r\n                item = {\r\n                    prev: prev,\r\n                    freq: []\r\n                };\r\n                model.push(item);\r\n            }\r\n\r\n            let freq = item.freq.find(x => x.char === char);\r\n            if (!freq) {\r\n                freq = {\r\n                    char: char,\r\n                    count: 0\r\n                };\r\n                item.freq.push(freq);\r\n            }\r\n\r\n            freq.count += 1;\r\n        }\r\n    }\r\n\r\n    public static generate(requiredResults: number): string[] {\r\n        const lines: string[] = [];\r\n        const allowedFailures = 100;\r\n        let failures = 0;\r\n\r\n        while ((lines.length < requiredResults) && (failures < allowedFailures)) {\r\n            const line = TextGenerator.extractLine();\r\n            if (line && !lines.includes(line)) {\r\n                lines.push(line);\r\n            } else {\r\n                failures += 1;\r\n            }\r\n        }\r\n\r\n        return lines;\r\n    }\r\n\r\n    private static extractLine() {\r\n        let line = String.fromCharCode(0, 1);\r\n\r\n        while (true) {\r\n            const prev = line.substr(line.length - 2, 2);\r\n\r\n            const item = TextGenerator.model.find(x => x.prev === prev);\r\n            if (item) {\r\n                let candidates = '';\r\n                item.freq.forEach(freq => {\r\n                    candidates += freq.char.repeat(freq.count);\r\n                });\r\n\r\n                const index = Math.floor(Math.random() * candidates.length);\r\n                const char = candidates[index];\r\n                if (char === String.fromCharCode(2)) {\r\n                    line = line.substr(2);\r\n                    return line;\r\n                } else {\r\n                    line += char;\r\n                }\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport TextGenerator from '../../utils/text-generation';\r\n\r\nimport Checkbox from '../controls/checkbox';\r\nimport ControlRow from '../controls/control-row';\r\nimport Expander from '../controls/expander';\r\nimport Selector from '../controls/selector';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    //\r\n}\r\n\r\ninterface State {\r\n    sources: { [id: string]: string; };\r\n    output: string[];\r\n}\r\n\r\ninterface Preset {\r\n    name: string;\r\n    languages: string[];\r\n}\r\n\r\nexport default class LanguageModule extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            sources: {},\r\n            output: []\r\n        };\r\n    }\r\n\r\n    private getLanguages(): string[] {\r\n        return [\r\n            'afrikaans',\r\n            'amharic',\r\n            'armenian',\r\n            'basque',\r\n            'belarusian',\r\n            'bulgarian',\r\n            'chichewa',\r\n            'chinese',\r\n            'croatian',\r\n            'czech',\r\n            'danish',\r\n            'dutch',\r\n            'english',\r\n            'finnish',\r\n            'french',\r\n            'german',\r\n            'greek',\r\n            'hawaiian',\r\n            'hindi',\r\n            'hungarian',\r\n            'icelandic',\r\n            'irish',\r\n            'italian',\r\n            'japanese',\r\n            'kannada',\r\n            'kazakh',\r\n            'korean',\r\n            'kyrgyz',\r\n            'latvian',\r\n            'lithuanian',\r\n            'macedonian',\r\n            'malay',\r\n            'maltese',\r\n            'maori',\r\n            'myanmar',\r\n            'nepalese',\r\n            'norwegian',\r\n            'persian',\r\n            'portuguese',\r\n            'punjabi',\r\n            'romanian',\r\n            'russian',\r\n            'samoan',\r\n            'serbian',\r\n            'shona',\r\n            'somali',\r\n            'spanish',\r\n            'swahili',\r\n            'swedish',\r\n            'thai',\r\n            'turkish',\r\n            'welsh',\r\n            'yiddish',\r\n            'zulu'\r\n        ];\r\n    }\r\n\r\n    private getPresets(): Preset[] {\r\n        return [\r\n            {\r\n                name: 'draconic',\r\n                languages: ['armenian', 'irish', 'maltese']\r\n            },\r\n            {\r\n                name: 'dwarvish',\r\n                languages: ['czech', 'german', 'yiddish']\r\n            },\r\n            {\r\n                name: 'elvish',\r\n                languages: ['finnish', 'spanish', 'welsh']\r\n            },\r\n            {\r\n                name: 'goblin',\r\n                languages: ['hawaiian', 'kyrgyz', 'somali']\r\n            },\r\n            {\r\n                name: 'orc',\r\n                languages: ['macedonian', 'russian', 'turkish']\r\n            }\r\n        ];\r\n    }\r\n\r\n    private async addLanguage(language: string) {\r\n        const response = await fetch('./data/langs/' + language + '.txt');\r\n        this.state.sources[language] = await response.text();\r\n        this.setState({\r\n            sources: this.state.sources\r\n        });\r\n    }\r\n\r\n    private removeLanguage(language: string) {\r\n        delete this.state.sources[language];\r\n        this.setState({\r\n            sources: this.state.sources\r\n        });\r\n    }\r\n\r\n    private usePreset(presetName: string) {\r\n        const preset = this.getPresets().find(p => p.name === presetName);\r\n        if (preset) {\r\n            this.setState({\r\n                sources: {},\r\n                output: []\r\n            }, () => {\r\n                preset.languages.forEach(lang => {\r\n                    this.addLanguage(lang);\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    private random() {\r\n        const languages = this.getLanguages();\r\n\r\n        const selection: string[] = [];\r\n        while (selection.length !== 3) {\r\n            const n = Math.floor(Math.random() * languages.length);\r\n            const lang = languages[n];\r\n            if (!selection.includes(lang)) {\r\n                selection.push(lang);\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            sources: {},\r\n            output: []\r\n        }, () => {\r\n            selection.forEach(lang => {\r\n                this.addLanguage(lang);\r\n            });\r\n        });\r\n    }\r\n\r\n    private generate() {\r\n        const sources: string[] = [];\r\n        Object.keys(this.state.sources).forEach(key => {\r\n            const src = this.state.sources[key];\r\n            sources.push(src);\r\n        });\r\n        TextGenerator.initModel(sources);\r\n        this.setState({\r\n            output: TextGenerator.generate(5)\r\n        });\r\n    }\r\n\r\n    private reset() {\r\n        this.setState({\r\n            sources: {},\r\n            output: []\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        const presetOptions = this.getPresets().map(p => {\r\n            return {\r\n                id: p.name,\r\n                text: p.name\r\n            };\r\n        });\r\n\r\n        let selectedPreset = '';\r\n        this.getPresets().forEach(p => {\r\n            const selected = Object.keys(this.state.sources).sort().join(', ');\r\n            const setting = p.languages.sort().join(', ');\r\n            if (selected === setting) {\r\n                selectedPreset = p.name;\r\n            }\r\n        });\r\n\r\n        let selectedLanguages = Object.keys(this.state.sources).sort().join(', ');\r\n        if (selectedLanguages === '') {\r\n            selectedLanguages = 'none';\r\n        }\r\n\r\n        const languages = this.getLanguages()\r\n            .map(lang => {\r\n                const isSelected = Object.keys(this.state.sources).includes(lang);\r\n                return (\r\n                    <div className='column' key={lang}>\r\n                        <Checkbox\r\n                            label={lang}\r\n                            checked={isSelected}\r\n                            showCheck={false}\r\n                            changeValue={value => value ? this.addLanguage(lang) : this.removeLanguage(lang)}\r\n                        />\r\n                    </div>\r\n                );\r\n            });\r\n\r\n        const allowGenerate = Object.keys(this.state.sources).length > 0;\r\n        const allowReset = allowGenerate || this.state.output.length > 0;\r\n\r\n        const output = [];\r\n        if (this.state.output.length > 0) {\r\n            output.push(\r\n                <div key='div' className='divider' />\r\n            );\r\n        }\r\n        for (let n = 0; n !== this.state.output.length; ++n) {\r\n            output.push(\r\n                <div key={n} className='section'>\r\n                    {this.state.output[n].toLowerCase()}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className='language'>\r\n                <div className='heading'>presets</div>\r\n                <Selector\r\n                    options={presetOptions}\r\n                    selectedID={selectedPreset}\r\n                    select={optionID => this.usePreset(optionID)}\r\n                />\r\n                <div className='divider' />\r\n                <Expander\r\n                    text={'selected languages: ' + selectedLanguages}\r\n                    content={\r\n                        <div className='row collapse small-up-1 medium-up-2 large-up-3 language-options'>\r\n                            {languages}\r\n                        </div>\r\n                    }\r\n                />\r\n                <div className='divider' />\r\n                <ControlRow\r\n                    controls={[\r\n                        <button key='generate' className={allowGenerate ? '' : 'disabled'} onClick={() => this.generate()}>generate text</button>,\r\n                        <button key='reset' className={allowReset ? '' : 'disabled'} onClick={() => this.reset()}>reset</button>,\r\n                        <button key='random' onClick={() => this.random()}>random sources</button>\r\n                    ]}\r\n                />\r\n                <div className='language-output'>\r\n                    {output}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport TextGenerator from '../../utils/text-generation';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    //\r\n}\r\n\r\ninterface State {\r\n    output: {\r\n        male: string[],\r\n        female: string[],\r\n        surname: string[]\r\n    };\r\n}\r\n\r\nexport default class NameModule extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            output: {\r\n                male: [],\r\n                female: [],\r\n                surname: []\r\n            }\r\n        };\r\n    }\r\n\r\n    private async generate(type: 'male' | 'female' | 'surname') {\r\n        const response = await fetch('./data/names/' + type + '.txt');\r\n        const input = await response.text();\r\n\r\n        TextGenerator.initModel([input]);\r\n        const names = TextGenerator.generate(10).sort();\r\n\r\n        this.state.output[type] = names;\r\n        this.setState({\r\n            output: this.state.output\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        const male = [];\r\n        for (let n = 0; n !== this.state.output.male.length; ++n) {\r\n            male.push(\r\n                <div key={n} className='section'>\r\n                    {this.state.output.male[n].toLowerCase()}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        const female = [];\r\n        for (let n = 0; n !== this.state.output.female.length; ++n) {\r\n            female.push(\r\n                <div key={n} className='section'>\r\n                    {this.state.output.female[n].toLowerCase()}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        const surname = [];\r\n        for (let n = 0; n !== this.state.output.surname.length; ++n) {\r\n            surname.push(\r\n                <div key={n} className='section'>\r\n                    {this.state.output.surname[n].toLowerCase()}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className='name'>\r\n                <div className='name-output'>\r\n                    <div className='row'>\r\n                        <div className='columns small-4 medium-4 large-4'>\r\n                            <div className='heading'>male names</div>\r\n                            <button onClick={() => this.generate('male')}>generate</button>\r\n                            {male}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4'>\r\n                            <div className='heading'>female names</div>\r\n                            <button onClick={() => this.generate('female')}>generate</button>\r\n                            {female}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4'>\r\n                            <div className='heading'>surnames</div>\r\n                            <button onClick={() => this.generate('surname')}>generate</button>\r\n                            {surname}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Showdown from 'showdown';\r\n\r\nimport Selector from '../controls/selector';\r\n\r\nconst showdown = new Showdown.Converter();\r\nshowdown.setOption('tables', true);\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    //\r\n}\r\n\r\ninterface State {\r\n    view: string;\r\n    source: string | null;\r\n}\r\n\r\nexport default class ReferenceModule extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            view: 'skills',\r\n            source: null\r\n        };\r\n    }\r\n\r\n    private setView(view: string) {\r\n        this.setState({\r\n            view: view,\r\n            source: null\r\n        });\r\n    }\r\n\r\n    private async fetchData() {\r\n        const response = await fetch('./data/' + this.state.view + '.md');\r\n        const text = await response.text();\r\n        this.setState({\r\n            source: text\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        if (this.state.view && !this.state.source) {\r\n            this.fetchData();\r\n        }\r\n\r\n        const options = [\r\n            {\r\n                id: 'skills',\r\n                text: 'skills'\r\n            },\r\n            {\r\n                id: 'conditions',\r\n                text: 'conditions'\r\n            },\r\n            {\r\n                id: 'actions',\r\n                text: 'actions'\r\n            }\r\n        ];\r\n\r\n        return (\r\n            <div>\r\n                <Selector\r\n                    options={options}\r\n                    selectedID={this.state.view}\r\n                    select={optionID => this.setView(optionID)}\r\n                />\r\n                <div dangerouslySetInnerHTML={{ __html: showdown.makeHtml(this.state.source || '') }} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Checkbox from '../controls/checkbox';\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport Selector from '../controls/selector';\r\nimport LanguageModule from '../dm-modules/language-module';\r\nimport NameModule from '../dm-modules/name-module';\r\nimport ReferenceModule from '../dm-modules/reference-module';\r\nimport Readaloud from '../panels/readaloud';\r\n\r\nimport pkg from '../../../package.json';\r\n\r\ninterface Props {\r\n    options: {\r\n        showHelp: boolean;\r\n    };\r\n    resetAll: () => void;\r\n    changeValue: (source: {}, field: string, value: any) => void;\r\n}\r\n\r\ninterface State {\r\n    view: string;\r\n    module: string | null;\r\n}\r\n\r\nexport default class AboutModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            view: 'dm',\r\n            module: null\r\n        };\r\n    }\r\n\r\n    private setView(view: string) {\r\n        this.setState({\r\n            view: view\r\n        });\r\n    }\r\n\r\n    private setModule(module: string) {\r\n        this.setState({\r\n            module: module\r\n        });\r\n    }\r\n\r\n    private getTools() {\r\n        if (this.state.view !== 'dm') {\r\n            return null;\r\n        }\r\n\r\n        const modules = [\r\n            {\r\n                id: 'reference',\r\n                text: 'd&d reference'\r\n            },\r\n            {\r\n                id: 'language',\r\n                text: 'language generator'\r\n            },\r\n            {\r\n                id: 'names',\r\n                text: 'name generator'\r\n            }\r\n        ];\r\n\r\n        let module = (\r\n            <Readaloud\r\n                content={(\r\n                    <div className='section'>\r\n                        <b>dojo</b> includes several dm tools; select one of them above\r\n                    </div>\r\n                )}\r\n            />\r\n        );\r\n\r\n        switch (this.state.module) {\r\n            case 'reference':\r\n                module = (\r\n                    <ReferenceModule />\r\n                );\r\n                break;\r\n            case 'language':\r\n                module = (\r\n                    <LanguageModule />\r\n                );\r\n                break;\r\n            case 'names':\r\n                module = (\r\n                    <NameModule />\r\n                );\r\n                break;\r\n        }\r\n\r\n        return (\r\n            <div className='dm-screen'>\r\n                <Selector\r\n                    options={modules}\r\n                    selectedID={this.state.module}\r\n                    select={moduleID => this.setModule(moduleID)}\r\n                />\r\n                <div className='divider' />\r\n                <div className='dm-module'>\r\n                    {module}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getAbout() {\r\n        if (this.state.view !== 'about') {\r\n            return null;\r\n        }\r\n\r\n        /* tslint:disable:max-line-length */\r\n        return (\r\n            <div>\r\n                <div className='section'>dojo by <a href='mailto:andy.aiken@live.co.uk'>andy aiken</a></div>\r\n                <div className='section'>version <b>{pkg.version}</b></div>\r\n                <div className='section'>if you would like to contribut to this project, you can do so <a href='https://github.com/andyaiken/dojo' target='_blank' rel='noopener noreferrer'>here</a></div>\r\n                <div className='section'>dungeons and dragons copyright wizards of the coast</div>\r\n                <div className='heading'>options</div>\r\n                <ConfirmButton text='clear all data' callback={() => this.props.resetAll()} />\r\n                <Checkbox\r\n                    label='show help cards'\r\n                    checked={this.props.options.showHelp}\r\n                    changeValue={value => this.props.changeValue(this.props.options, 'showHelp', value)}\r\n                />\r\n                <div className='heading'>open game license</div>\r\n                <div className='section'>The following text is the property of Wizards of the Coast, Inc. and is Copyright 2000 Wizards of the Coast, Inc ('Wizards'). All Rights Reserved.</div>\r\n                <ol>\r\n                    <li>Definitions: (a)'Contributors' means the copyright and/or trademark owners who have contributed Open Game Content; (b)'Derivative Material' means copyrighted material including derivative works and translations (including into other computer languages), potation, modification, correction, addition, extension, upgrade, improvement, compilation, abridgment or other form in which an existing work may be recast, transformed or adapted; (c) 'Distribute' means to reproduce, license, rent, lease, sell, broadcast, publicly display, transmit or otherwise distribute; (d)'Open Game Content' means the game mechanic and includes the methods, procedures, processes and routines to the extent such content does not embody the Product Identity and is an enhancement over the prior art and any additional content clearly identified as Open Game Content by the Contributor, and means any work covered by this License, including translations and derivative works under copyright law, but specifically excludes Product Identity. (e) 'Product Identity' means product and product line names, logos and identifying marks including trade dress; artifacts; creatures characters; stories, storylines, plots, thematic elements, dialogue, incidents, language, artwork, symbols, designs, depictions, likenesses, formats, poses, concepts, themes and graphic, photographic and other visual or audio representations; names and descriptions of characters, spells, enchantments, personalities, teams, personas, likenesses and special abilities; places, locations, environments, creatures, equipment, magical or supernatural abilities or effects, logos, symbols, or graphic designs; and any other trademark or registered trademark clearly identified as Product identity by the owner of the Product Identity, and which specifically excludes the Open Game Content; (f) 'Trademark' means the logos, names, mark, sign, motto, designs that are used by a Contributor to identify itself or its products or the associated products contributed to the Open Game License by the Contributor (g) 'Use', 'Used' or 'Using' means to use, Distribute, copy, edit, format, modify, translate and otherwise create Derivative Material of Open Game Content. (h) 'You' or 'Your' means the licensee in terms of this agreement.</li>\r\n                    <li>The License: This License applies to any Open Game Content that contains a notice indicating that the Open Game Content may only be Used under and in terms of this License. You must affix such a notice to any Open Game Content that you Use. No terms may be added to or subtracted from this License except as described by the License itself. No other terms or conditions may be applied to any Open Game Content distributed using this License.</li>\r\n                    <li>Offer and Acceptance: By Using the Open Game Content You indicate Your acceptance of the terms of this License.</li>\r\n                    <li>Grant and Consideration: In consideration for agreeing to use this License, the Contributors grant You a perpetual, worldwide, royalty-free, non-exclusive license with the exact terms of this License to Use, the Open Game Content.</li>\r\n                    <li>Representation of Authority to Contribute: If You are contributing original material as Open Game Content, You represent that Your Contributions are Your original creation and/or You have sufficient rights to grant the rights conveyed by this License.</li>\r\n                    <li>Notice of License Copyright: You must update the COPYRIGHT NOTICE portion of this License to include the exact text of the COPYRIGHT NOTICE of any Open Game Content You are copying, modifying or distributing, and You must add the title, the copyright date, and the copyright holder's name to the COPYRIGHT NOTICE of any original Open Game Content you Distribute.</li>\r\n                    <li>Use of Product Identity: You agree not to Use any Product Identity, including as an indication as to compatibility, except as expressly licensed in another, independent Agreement with the owner of each element of that Product Identity. You agree not to indicate compatibility or co-adaptability with any Trademark or Registered Trademark in conjunction with a work containing Open Game Content except as expressly licensed in another, independent Agreement with the owner of such Trademark or Registered Trademark. The use of any Product Identity in Open Game Content does not constitute a challenge to the ownership of that Product Identity. The owner of any Product Identity used in Open Game Content shall retain all rights, title and interest in and to that Product Identity.</li>\r\n                    <li>Identification: If you distribute Open Game Content You must clearly indicate which portions of the work that you are distributing are Open Game Content.</li>\r\n                    <li>Updating the License: Wizards or its designated Agents may publish updated versions of this License. You may use any authorized version of this License to copy, modify and distribute any Open Game Content originally distributed under any version of this License.</li>\r\n                    <li>Copy of this License: You MUST include a copy of this License with every copy of the Open Game Content You Distribute.</li>\r\n                    <li>Use of Contributor Credits: You may not market or advertise the Open Game Content using the name of any Contributor unless You have written permission from the Contributor to do so.</li>\r\n                    <li>Inability to Comply: If it is impossible for You to comply with any of the terms of this License with respect to some or all of the Open Game Content due to statute, judicial order, or governmental regulation then You may not Use any Open Game Material so affected.</li>\r\n                    <li>Termination: This License will terminate automatically if You fail to comply with all terms herein and fail to cure such breach within 30 days of becoming aware of the breach. All sublicenses shall survive the termination of this License.</li>\r\n                    <li>Reformation: If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable.</li>\r\n                    <li>COPYRIGHT NOTICE Open Game License v 1.0 Copyright 2000, Wizards of the Coast, Inc.</li>\r\n                </ol>\r\n            </div>\r\n        );\r\n        /* tslint:enable:max-line-length */\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const viewOptions = [\r\n                {\r\n                    id: 'dm',\r\n                    text: 'dm tools'\r\n                },\r\n                {\r\n                    id: 'about',\r\n                    text: 'about'\r\n                }\r\n            ];\r\n\r\n            return (\r\n                <div className='about'>\r\n                    <Selector\r\n                        tabs={true}\r\n                        options={viewOptions}\r\n                        selectedID={this.state.view}\r\n                        select={optionID => this.setView(optionID)}\r\n                    />\r\n                    {this.getTools()}\r\n                    {this.getAbout()}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { CombatSetup } from '../../models/combat';\r\nimport { Encounter, EncounterSlot } from '../../models/encounter';\r\nimport { MapFolio } from '../../models/map-folio';\r\nimport { Monster } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport Selector from '../controls/selector';\r\nimport DifficultyChartPanel from '../panels/difficulty-chart-panel';\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    combatSetup: CombatSetup;\r\n    parties: Party[];\r\n    encounters: Encounter[];\r\n    mapFolios: MapFolio[];\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n    notify: () => void;\r\n}\r\n\r\ninterface State {\r\n    combatSetup: CombatSetup;\r\n}\r\n\r\nexport default class CombatStartModal extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        parties: null,\r\n        mapFolios: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            combatSetup: props.combatSetup\r\n        };\r\n    }\r\n\r\n    private setParty(partyID: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.partyID = partyID;\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        }, () => this.props.notify());\r\n    }\r\n\r\n    private setEncounter(encounterID: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.encounterID = encounterID;\r\n        const enc = this.props.encounters.find(e => e.id === encounterID);\r\n        if (enc) {\r\n            // eslint-disable-next-line\r\n            this.state.combatSetup.monsterNames = Utils.getMonsterNames(enc);\r\n        }\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        }, () => this.props.notify());\r\n    }\r\n\r\n    private setFolioID(id: string) {\r\n        if (id && (id !== '')) {\r\n            const folio = this.props.mapFolios.find(f => f.id === id);\r\n            if (folio) {\r\n                // eslint-disable-next-line\r\n                this.state.combatSetup.folioID = folio.id;\r\n                // eslint-disable-next-line\r\n                this.state.combatSetup.mapID = folio.maps.length === 1 ? folio.maps[0].id : null;\r\n            }\r\n        } else {\r\n            // eslint-disable-next-line\r\n            this.state.combatSetup.folioID = null;\r\n            // eslint-disable-next-line\r\n            this.state.combatSetup.mapID = null;\r\n        }\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        });\r\n    }\r\n\r\n    private setMapID(id: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.mapID = id;\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        });\r\n    }\r\n\r\n    private setWave(waveID: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.waveID = waveID;\r\n        const enc = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n        if (enc) {\r\n            const wave = enc.waves.find(w => w.id === waveID);\r\n            if (wave) {\r\n                // eslint-disable-next-line\r\n                this.state.combatSetup.monsterNames = Utils.getMonsterNames(wave);\r\n            }\r\n        }\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        }, () => this.props.notify());\r\n    }\r\n\r\n    private setEncounterInitMode(mode: 'manual' | 'individual' | 'group') {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.encounterInitMode = mode;\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        });\r\n    }\r\n\r\n    private changeName(slotID: string, index: number, name: string) {\r\n        const slot = this.state.combatSetup.monsterNames.find(s => s.id === slotID);\r\n        if (slot) {\r\n            slot.names[index] = name;\r\n            this.setState({\r\n                combatSetup: this.state.combatSetup\r\n            });\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    private getPartySection() {\r\n        if (this.props.parties.length === 0) {\r\n            return (\r\n                <div className='section'>you have not defined any parties</div>\r\n            );\r\n        }\r\n\r\n        const partyOptions = this.props.parties.map(party => {\r\n            return {\r\n                id: party.id,\r\n                text: party.name || 'unnamed party'\r\n            };\r\n        });\r\n\r\n        let partyContent = null;\r\n        if (this.state.combatSetup.partyID) {\r\n            const selectedParty = this.props.parties.find(p => p.id === this.state.combatSetup.partyID);\r\n            if (selectedParty) {\r\n                const pcs = selectedParty.pcs.filter(pc => pc.active);\r\n\r\n                const pcSections = pcs.map(pc =>\r\n                    (\r\n                        <li key={pc.id}>\r\n                            {pc.name || 'unnamed pc'} (level {pc.level})\r\n                        </li>\r\n                    )\r\n                );\r\n\r\n                if (pcSections.length === 0) {\r\n                    pcSections.push(\r\n                        <li key={'empty'}>no pcs</li>\r\n                    );\r\n                }\r\n\r\n                partyContent = (\r\n                    <div>\r\n                        <div className='subheading'>pcs</div>\r\n                        <ul>{pcSections}</ul>\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='heading'>party</div>\r\n                <Dropdown\r\n                    options={partyOptions}\r\n                    placeholder='select party...'\r\n                    selectedID={this.state.combatSetup.partyID ? this.state.combatSetup.partyID : undefined}\r\n                    select={optionID => this.setParty(optionID)}\r\n                />\r\n                {partyContent}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getEncounterSection() {\r\n        if (this.props.encounters.length === 0) {\r\n            return (\r\n                <div className='section'>you have not built any encounters</div>\r\n            );\r\n        }\r\n\r\n        const encounterOptions = this.props.encounters.map(encounter => {\r\n            return {\r\n                id: encounter.id,\r\n                text: encounter.name || 'unnamed encounter'\r\n            };\r\n        });\r\n\r\n        let encounterContent = null;\r\n        if (this.state.combatSetup.encounterID) {\r\n            const selectedEncounter = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n            if (selectedEncounter) {\r\n                const monsterSections = selectedEncounter.slots.map(slot => {\r\n                    let name = slot.monsterName || 'unnamed monster';\r\n                    if (slot.count > 1) {\r\n                        name += ' (x' + slot.count + ')';\r\n                    }\r\n                    return (\r\n                        <li key={slot.id}>{name}</li>\r\n                    );\r\n                });\r\n\r\n                if (monsterSections.length === 0) {\r\n                    monsterSections.push(\r\n                        <li key={'empty'}>no monsters</li>\r\n                    );\r\n                }\r\n\r\n                const waves = selectedEncounter.waves.map(wave => {\r\n                    if (wave.slots.length === 0) {\r\n                        return null;\r\n                    }\r\n\r\n                    const waveMonsters = wave.slots.map(slot => {\r\n                        let name = slot.monsterName || 'unnamed monster';\r\n                        if (slot.count > 1) {\r\n                            name += ' x' + slot.count;\r\n                        }\r\n                        return (\r\n                            <li key={slot.id}>{name}</li>\r\n                        );\r\n                    });\r\n\r\n                    return (\r\n                        <div key={wave.id}>\r\n                            <div className='subheading'>{wave.name || 'unnamed wave'}</div>\r\n                            <ul>{waveMonsters}</ul>\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                encounterContent = (\r\n                    <div>\r\n                        <div className='subheading'>monsters</div>\r\n                        <ul>{monsterSections}</ul>\r\n                        {waves}\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='heading'>encounter</div>\r\n                <Dropdown\r\n                    options={encounterOptions}\r\n                    placeholder='select encounter...'\r\n                    selectedID={this.state.combatSetup.encounterID ? this.state.combatSetup.encounterID : undefined}\r\n                    select={optionID => this.setEncounter(optionID)}\r\n                />\r\n                {encounterContent}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getMapSection() {\r\n        const folios = this.props.mapFolios.filter(folio => folio.maps.length > 0);\r\n        if (folios.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        const folioOptions = [{\r\n            id: '',\r\n            text: 'none'\r\n        }].concat(folios.map(folio => {\r\n            return {\r\n                id: folio.id,\r\n                text: folio.name || 'unnamed folio'\r\n            };\r\n        }));\r\n\r\n        let selectMapSection = null;\r\n        let thumbnailSection = null;\r\n\r\n        if (this.state.combatSetup.folioID) {\r\n            const folio = this.props.mapFolios.find(f => f.id === this.state.combatSetup.folioID);\r\n            if (folio) {\r\n                const mapOptions = folio.maps.map(m => {\r\n                    return {\r\n                        id: m.id,\r\n                        text: m.name || 'unnamed map'\r\n                    };\r\n                });\r\n\r\n                if (mapOptions.length !== 1) {\r\n                    selectMapSection = (\r\n                        <Selector\r\n                            options={mapOptions}\r\n                            selectedID={this.state.combatSetup.mapID}\r\n                            select={optionID => this.setMapID(optionID)}\r\n                        />\r\n                    );\r\n                }\r\n\r\n                if (this.state.combatSetup.mapID) {\r\n                    const map = folio.maps.find(m => m.id === this.state.combatSetup.mapID);\r\n                    if (map) {\r\n                        thumbnailSection = (\r\n                            <MapPanel\r\n                                map={map}\r\n                                mode='thumbnail'\r\n                            />\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='heading'>map</div>\r\n                <Dropdown\r\n                    options={folioOptions}\r\n                    placeholder='select map folio...'\r\n                    selectedID={this.state.combatSetup.folioID ? this.state.combatSetup.folioID : undefined}\r\n                    select={optionID => this.setFolioID(optionID)}\r\n                />\r\n                {selectMapSection}\r\n                {thumbnailSection}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getWaveSection() {\r\n        if (this.state.combatSetup.encounterID === null) {\r\n            return (\r\n                <div className='section'>you have not selected an encounter</div>\r\n            );\r\n        }\r\n\r\n        const selectedEncounter = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n        if (selectedEncounter) {\r\n            if (selectedEncounter.waves.length === 0) {\r\n                return (\r\n                    <div className='section'>you have not defined any waves</div>\r\n                );\r\n            }\r\n\r\n            const waveOptions = selectedEncounter.waves.map(wave => {\r\n                return {\r\n                    id: wave.id,\r\n                    text: wave.name || 'unnamed wave'\r\n                };\r\n            });\r\n\r\n            let waveContent = null;\r\n            if (this.state.combatSetup.waveID) {\r\n                const selectedWave = selectedEncounter.waves.find(w => w.id === this.state.combatSetup.waveID);\r\n                if (selectedWave) {\r\n                    const monsterSections = selectedWave.slots.map(slot => {\r\n                        let name = slot.monsterName || 'unnamed monster';\r\n                        if (slot.count > 1) {\r\n                            name += ' (x' + slot.count + ')';\r\n                        }\r\n                        return (\r\n                            <li key={slot.id}>{name}</li>\r\n                        );\r\n                    });\r\n\r\n                    if (monsterSections.length === 0) {\r\n                        monsterSections.push(\r\n                            <li key={'empty'}>no monsters</li>\r\n                        );\r\n                    }\r\n\r\n                    waveContent = (\r\n                        <div>\r\n                            <div className='subheading'>monsters</div>\r\n                            <ul>{monsterSections}</ul>\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n\r\n            return (\r\n                <div>\r\n                    <div className='heading'>wave</div>\r\n                    <Dropdown\r\n                        options={waveOptions}\r\n                        placeholder='select wave...'\r\n                        selectedID={this.state.combatSetup.waveID ? this.state.combatSetup.waveID : undefined}\r\n                        select={optionID => this.setWave(optionID)}\r\n                    />\r\n                    {waveContent}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private getDifficultySection() {\r\n        const party = this.props.parties.find(p => p.id === this.state.combatSetup.partyID);\r\n        const encounter = this.props.encounters.find(enc => enc.id === this.state.combatSetup.encounterID);\r\n\r\n        if (party && encounter) {\r\n            return (\r\n                <div>\r\n                    <div className='heading'>encounter difficulty</div>\r\n                    <DifficultyChartPanel\r\n                        party={party}\r\n                        encounter={encounter}\r\n                        getMonster={(monsterName, monsterGroupName) => this.props.getMonster(monsterName, monsterGroupName)}\r\n                    />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='heading'>encounter difficulty</div>\r\n                <div className='section'>select a party and an encounter on the left to see difficulty information.</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getMonsterSection() {\r\n        if (this.state.combatSetup.encounterID === null) {\r\n            return (\r\n                <div>\r\n                    <div className='heading'>monsters</div>\r\n                    <div className='section'>select an encounter to see monster options here.</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (!this.props.parties && this.state.combatSetup.waveID === null) {\r\n            return (\r\n                <div>\r\n                    <div className='heading'>monsters</div>\r\n                    <div className='section'>select a wave to see monster options here.</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        const selectedEncounter = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n        if (selectedEncounter) {\r\n            let slotsContainer: { slots: EncounterSlot[] } = selectedEncounter;\r\n            if (this.state.combatSetup.waveID) {\r\n                const selectedWave = selectedEncounter.waves.find(w => w.id === this.state.combatSetup.waveID);\r\n                if (selectedWave) {\r\n                    slotsContainer = selectedWave;\r\n                }\r\n            }\r\n\r\n            if (slotsContainer.slots.length === 0) {\r\n                return null;\r\n            }\r\n\r\n            const initOptions = [\r\n                {\r\n                    id: 'manual',\r\n                    text: 'enter manually'\r\n                },\r\n                {\r\n                    id: 'individual',\r\n                    text: 'roll individually'\r\n                },\r\n                {\r\n                    id: 'group',\r\n                    text: 'roll in groups'\r\n                }\r\n            ];\r\n\r\n            const names = this.state.combatSetup.monsterNames.map(slotNames => {\r\n                const slot = slotsContainer.slots.find(s => s.id === slotNames.id);\r\n                if (slot) {\r\n                    const inputs = [];\r\n                    for (let n = 0; n !== slotNames.names.length; ++n) {\r\n                        inputs.push(\r\n                            <div key={n}>\r\n                                <MonsterName\r\n                                    value={slotNames.names[n]}\r\n                                    slotID={slot.id}\r\n                                    index={n}\r\n                                    changeName={(slotID, index, value) => this.changeName(slotID, index, value)}\r\n                                />\r\n                            </div>\r\n                        );\r\n                    }\r\n                    return (\r\n                        <div key={slotNames.id} className='name-row'>\r\n                            <div className='name-label'>\r\n                                {slot.monsterName}\r\n                            </div>\r\n                            <div className='name-inputs'>\r\n                                {inputs}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n            });\r\n\r\n            return (\r\n                <div>\r\n                    <div className='heading'>monsters</div>\r\n                    <div className='subheading'>initiative</div>\r\n                    <Selector\r\n                        options={initOptions}\r\n                        selectedID={this.state.combatSetup.encounterInitMode}\r\n                        select={optionID => this.setEncounterInitMode(optionID as 'manual' | 'individual' | 'group')}\r\n                    />\r\n                    <div className='subheading'>names</div>\r\n                    <div>{names}</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    public render() {\r\n        try {\r\n            let leftSection = null;\r\n            let rightSection = null;\r\n\r\n            if (this.props.parties) {\r\n                leftSection = (\r\n                    <div>\r\n                        {this.getPartySection()}\r\n                        {this.getEncounterSection()}\r\n                        {this.getMapSection()}\r\n                    </div>\r\n                );\r\n\r\n                rightSection = (\r\n                    <div>\r\n                        {this.getDifficultySection()}\r\n                        {this.getMonsterSection()}\r\n                    </div>\r\n                );\r\n            } else {\r\n                leftSection = (\r\n                    <div>\r\n                        {this.getWaveSection()}\r\n                    </div>\r\n                );\r\n\r\n                rightSection = (\r\n                    <div>\r\n                        {this.getMonsterSection()}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='row' style={{ height: '100%', margin: '0 -15px' }}>\r\n                    <div className='column small-6 medium-6 large-6 scrollable'>\r\n                        {leftSection}\r\n                    </div>\r\n                    <div className='column small-6 medium-6 large-6 scrollable'>\r\n                        {rightSection}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface MonsterNameProps {\r\n    slotID: string;\r\n    index: number;\r\n    value: string;\r\n    changeName: (slotID: string, index: number, value: string) => void;\r\n}\r\n\r\nclass MonsterName extends React.Component<MonsterNameProps> {\r\n    public render() {\r\n        return (\r\n            <input type='text' value={this.props.value} onChange={event => this.props.changeName(this.props.slotID, this.props.index, event.target.value)} />\r\n        );\r\n    }\r\n}\r\n","export interface Condition {\r\n    id: string;\r\n    name: string;\r\n    level: number;\r\n    text: string | null;\r\n    duration: ConditionDurationSaves | ConditionDurationCombatant | ConditionDurationRounds | null;\r\n}\r\n\r\nexport interface ConditionDurationSaves {\r\n    type: 'saves';\r\n    count: number;\r\n    saveType: 'str' | 'dex' | 'con' | 'int' | 'wis' | 'cha' | 'death';\r\n    saveDC: number;\r\n    point: 'start' | 'end';\r\n}\r\n\r\nexport interface ConditionDurationCombatant {\r\n    type: 'combatant';\r\n    point: 'start' | 'end';\r\n    combatantID: string | null;\r\n}\r\n\r\nexport interface ConditionDurationRounds {\r\n    type: 'rounds';\r\n    count: number;\r\n}\r\n\r\nexport const CONDITION_TYPES = [\r\n    'blinded',\r\n    'charmed',\r\n    'deafened',\r\n    'exhaustion',\r\n    'frightened',\r\n    'grappled',\r\n    'incapacitated',\r\n    'invisible',\r\n    'paralyzed',\r\n    'petrified',\r\n    'poisoned',\r\n    'prone',\r\n    'restrained',\r\n    'stunned',\r\n    'unconscious',\r\n    'custom'\r\n];\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    items: { id: string; text: string; details: JSX.Element | string; disabled?: boolean }[];\r\n    selectedItemID: string | null;\r\n    select: (itemID: string) => void;\r\n}\r\n\r\nexport default class RadioGroup extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        // No default property values\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            const content = this.props.items.map(item => {\r\n                return (\r\n                    <RadioGroupItem\r\n                        key={item.id}\r\n                        item={item}\r\n                        selected={this.props.selectedItemID === item.id}\r\n                        select={(itemID: string) => this.props.select(itemID)}\r\n                    />\r\n                );\r\n            });\r\n\r\n            return (\r\n                <div className='radio-group'>\r\n                    {content}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface RadioGroupItemProps {\r\n    item: { id: string; text: string; details: JSX.Element | string; disabled?: boolean };\r\n    selected: boolean;\r\n    select: (itemID: string) => void;\r\n}\r\n\r\nclass RadioGroupItem extends React.Component<RadioGroupItemProps> {\r\n    public render() {\r\n        let style = 'radio-item';\r\n        let details = null;\r\n\r\n        if (this.props.selected) {\r\n            style += ' selected';\r\n            details = (\r\n                <div className='radio-item-details'>\r\n                    {this.props.item.details}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (this.props.item.disabled) {\r\n            style += ' disabled';\r\n        }\r\n\r\n        return (\r\n            <div className={style} onClick={() => this.props.select(this.props.item.id)}>\r\n                <div className='radio-item-text'>{this.props.item.text}</div>\r\n                {details}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Factory from '../../utils/factory';\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combat, Combatant } from '../../models/combat';\r\nimport { Condition, CONDITION_TYPES, ConditionDurationCombatant, ConditionDurationSaves } from '../../models/condition';\r\nimport { Monster } from '../../models/monster-group';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport RadioGroup from '../controls/radio-group';\r\nimport Selector from '../controls/selector';\r\nimport Spin from '../controls/spin';\r\n\r\ninterface Props {\r\n    condition: Condition;\r\n    combatant: Combatant & Monster;\r\n    combat: Combat;\r\n}\r\n\r\ninterface State {\r\n    condition: Condition;\r\n}\r\n\r\nexport default class ConditionModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            condition: props.condition\r\n        };\r\n    }\r\n\r\n    private setCondition(conditionName: string) {\r\n        // eslint-disable-next-line\r\n        this.state.condition.name = conditionName;\r\n        // eslint-disable-next-line\r\n        this.state.condition.level = 1;\r\n        // eslint-disable-next-line\r\n        this.state.condition.text = conditionName === 'custom' ? 'custom condition' : null;\r\n\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    private setDuration(durationType: 'saves' | 'combatant' | 'rounds') {\r\n        let duration = null;\r\n\r\n        switch (durationType) {\r\n            case 'saves':\r\n                duration = Factory.createConditionDurationSaves();\r\n                break;\r\n            case 'combatant':\r\n                duration = Factory.createConditionDurationCombatant();\r\n                duration.combatantID = this.props.combatant.id;\r\n                break;\r\n            case 'rounds':\r\n                duration = Factory.createConditionDurationRounds();\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        // eslint-disable-next-line\r\n        this.state.condition.duration = duration;\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    private changeValue(object: any, field: string, value: any) {\r\n        object[field] = value;\r\n\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    private nudgeValue(object: any, field: string, delta: number) {\r\n        let value = object[field] + delta;\r\n        if (field === 'level') {\r\n            value = Math.max(value, 1);\r\n            value = Math.min(value, 6);\r\n        }\r\n        if (field === 'count') {\r\n            value = Math.max(value, 1);\r\n        }\r\n        if (field === 'saveDC') {\r\n            value = Math.max(value, 0);\r\n        }\r\n        object[field] = value;\r\n\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const conditions = CONDITION_TYPES.map(condition => {\r\n                const controls = [];\r\n                const description = [];\r\n                if (condition === this.state.condition.name) {\r\n                    if (condition === 'custom') {\r\n                        controls.push(\r\n                            <input\r\n                                type='text'\r\n                                placeholder='custom condition'\r\n                                value={this.state.condition.text ? this.state.condition.text : ''}\r\n                                onChange={event => this.changeValue(this.state.condition, 'text', event.target.value)}\r\n                            />\r\n                        );\r\n                    }\r\n                    if (condition === 'exhaustion') {\r\n                        controls.push(\r\n                            <Spin\r\n                                key='exhaustion-spin'\r\n                                source={this.props.condition}\r\n                                name='level'\r\n                                label='exhaustion'\r\n                                nudgeValue={delta => this.nudgeValue(this.props.condition, 'level', delta)}\r\n                            />\r\n                        );\r\n                    }\r\n                    const text = Utils.conditionText(this.state.condition);\r\n                    for (let n = 0; n !== text.length; ++n) {\r\n                        description.push(<li key={n} className='section'>{text[n]}</li>);\r\n                    }\r\n                }\r\n\r\n                return {\r\n                    id: condition,\r\n                    text: condition,\r\n                    details: (\r\n                        <div key={condition}>\r\n                            {controls}\r\n                            <ul>\r\n                                {description}\r\n                            </ul>\r\n                        </div>\r\n                    ),\r\n                    disabled: this.props.combatant.conditionImmunities ? this.props.combatant.conditionImmunities.indexOf(condition) !== -1 : false\r\n                };\r\n            });\r\n\r\n            const saveOptions = ['str', 'dex', 'con', 'int', 'wis', 'cha', 'death'].map(c => ({ id: c, text: c }));\r\n            const pointOptions = [\r\n                {\r\n                    id: 'start',\r\n                    text: 'start of turn'\r\n                },\r\n                {\r\n                    id: 'end',\r\n                    text: 'end of turn'\r\n                }\r\n            ];\r\n            const combatantOptions = this.props.combat.combatants.map(c => ({ id: c.id, text: (c.displayName || c.name || 'unnamed monster') }));\r\n\r\n            const durations = [\r\n                {\r\n                    id: 'none',\r\n                    text: 'until removed (default)',\r\n                    details: (\r\n                        <div className='section'>\r\n                            <div>the condition persists until it is manually removed</div>\r\n                        </div>\r\n                    )\r\n                },\r\n                {\r\n                    id: 'saves',\r\n                    text: 'until a successful save',\r\n                    details: (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>number of saves required</div>\r\n                                <Spin\r\n                                    source={this.props.condition.duration}\r\n                                    name='count'\r\n                                    nudgeValue={delta => this.nudgeValue(this.props.condition.duration, 'count', delta)}\r\n                                />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>save dc</div>\r\n                                <Spin\r\n                                    source={this.props.condition.duration}\r\n                                    name='saveDC'\r\n                                    nudgeValue={delta => this.nudgeValue(this.props.condition.duration, 'saveDC', delta)}\r\n                                />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>type of save</div>\r\n                                <Selector\r\n                                    options={saveOptions}\r\n                                    selectedID={\r\n                                        (this.props.condition.duration as ConditionDurationSaves)\r\n                                        ? (this.props.condition.duration as ConditionDurationSaves).saveType\r\n                                        : null\r\n                                    }\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, 'saveType', optionID)}\r\n                                />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>make the save at the start or end of the turn</div>\r\n                                <Selector\r\n                                    options={pointOptions}\r\n                                    selectedID={\r\n                                        (this.props.condition.duration as ConditionDurationSaves)\r\n                                        ? (this.props.condition.duration as ConditionDurationSaves).point\r\n                                        : null\r\n                                    }\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, 'point', optionID)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                },\r\n                {\r\n                    id: 'combatant',\r\n                    text: 'until someone\\'s next turn',\r\n                    details: (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>combatant</div>\r\n                                <Dropdown\r\n                                    options={combatantOptions}\r\n                                    selectedID={\r\n                                        (this.props.condition.duration as ConditionDurationCombatant)\r\n                                        ? (this.props.condition.duration as ConditionDurationCombatant).combatantID || undefined\r\n                                        : undefined\r\n                                    }\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, 'combatantID', optionID)}\r\n                                />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>start or end of the turn</div>\r\n                                <Selector\r\n                                    options={pointOptions}\r\n                                    selectedID={\r\n                                        (this.props.condition.duration as ConditionDurationCombatant)\r\n                                        ? (this.props.condition.duration as ConditionDurationCombatant).point\r\n                                        : null\r\n                                    }\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, 'point', optionID)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                },\r\n                {\r\n                    id: 'rounds',\r\n                    text: 'for a number of rounds',\r\n                    details: (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>number of rounds</div>\r\n                                <Spin\r\n                                    source={this.props.condition.duration}\r\n                                    name='count'\r\n                                    nudgeValue={delta => this.nudgeValue(this.props.condition.duration, 'count', delta)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }\r\n            ];\r\n\r\n            return (\r\n                <div className='condition-modal'>\r\n                    <div className='row' style={{ height: '100%' }}>\r\n                        <div className='columns small-6 medium-6 large-6 scrollable'>\r\n                            <div className='heading'>condition</div>\r\n                            <RadioGroup\r\n                                items={conditions}\r\n                                selectedItemID={this.state.condition.name}\r\n                                select={itemID => this.setCondition(itemID)}\r\n                            />\r\n                        </div>\r\n                        <div className='columns small-6 medium-6 large-6 scrollable'>\r\n                            <div className='heading'>duration</div>\r\n                            <RadioGroup\r\n                                items={durations}\r\n                                selectedItemID={this.state.condition.duration ? this.state.condition.duration.type : 'none'}\r\n                                select={itemID => this.setDuration(itemID as 'saves' | 'combatant' | 'rounds')}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { CATEGORY_TYPES, Monster, MonsterGroup, SIZE_TYPES } from '../../models/monster-group';\r\n\r\nimport Selector from '../controls/selector';\r\n\r\ninterface Props {\r\n    library: MonsterGroup[];\r\n}\r\n\r\ninterface State {\r\n    chart: string;\r\n}\r\n\r\nexport default class DemographicsModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            chart: 'challenge'\r\n        };\r\n    }\r\n\r\n    private selectChart(chart: string) {\r\n        this.setState({\r\n            chart: chart\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let demographics = null;\r\n\r\n            const allMonsters: Monster[] = [];\r\n            this.props.library.forEach(group => group.monsters.forEach(monster => allMonsters.push(monster)));\r\n            if (allMonsters.length !== 0) {\r\n                const buckets: { value: any, title: string }[] = [];\r\n                let maxBucketSize = 0;\r\n                const monsters: { [key: string]: Monster[] } = {};\r\n\r\n                switch (this.state.chart) {\r\n                    case 'challenge':\r\n                        const challenges = [\r\n                            0, 0.125, 0.25, 0.5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30\r\n                        ];\r\n                        challenges.forEach(cr => {\r\n                            buckets.push({\r\n                                value: cr,\r\n                                title: 'challenge ' + Utils.challenge(cr)\r\n                            });\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const cr = bucket.value;\r\n                            monsters[cr.toString()] = allMonsters.filter(monster => monster.challenge === cr);\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const cr = bucket.value;\r\n                            maxBucketSize = Math.max(monsters[cr].length, maxBucketSize);\r\n                        });\r\n                        break;\r\n                    case 'size':\r\n                        SIZE_TYPES.forEach(size => {\r\n                            buckets.push({\r\n                                value: size,\r\n                                title: size\r\n                            });\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const size = bucket.value;\r\n                            monsters[size.toString()] = allMonsters.filter(monster => monster.size === size);\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const size = bucket.value;\r\n                            maxBucketSize = Math.max(monsters[size].length, maxBucketSize);\r\n                        });\r\n                        break;\r\n                    case 'type':\r\n                        CATEGORY_TYPES.forEach(type => {\r\n                            buckets.push({\r\n                                value: type,\r\n                                title: type\r\n                            });\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const type = bucket.value;\r\n                            monsters[type.toString()] = allMonsters.filter(monster => monster.category === type);\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const type = bucket.value;\r\n                            maxBucketSize = Math.max(monsters[type].length, maxBucketSize);\r\n                        });\r\n                        break;\r\n                    default:\r\n                        // Do nothing\r\n                        break;\r\n                }\r\n\r\n                const bars = [];\r\n                for (let index = 0; index !== buckets.length; ++index) {\r\n                    const bucket = buckets[index];\r\n                    const set = monsters[bucket.value];\r\n                    const count = set ? set.length : 0;\r\n                    bars.push(\r\n                        <div\r\n                            key={bucket.title}\r\n                            className='bar-container'\r\n                            title={bucket.title + ': ' + set.length + ' monsters'}\r\n                        >\r\n                            <div\r\n                                className='bar'\r\n                                style={{\r\n                                    width: 'calc((100% - 1px) * ' + count + ' / ' + maxBucketSize + ')'\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                const chartOptions = [\r\n                    {\r\n                        id: 'challenge',\r\n                        text: 'challenge rating'\r\n                    },\r\n                    {\r\n                        id: 'size',\r\n                        text: 'size'\r\n                    },\r\n                    {\r\n                        id: 'type',\r\n                        text: 'type'\r\n                    }\r\n                ];\r\n\r\n                demographics = (\r\n                    <div>\r\n                        <div className='heading'>monster demographics</div>\r\n                        <Selector\r\n                            options={chartOptions}\r\n                            selectedID={this.state.chart}\r\n                            select={optionID => this.selectChart(optionID)}\r\n                        />\r\n                        <div className='chart'>\r\n                            <div className='plot'>{bars}</div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return demographics;\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","export interface MapFolio {\r\n    id: string;\r\n    name: string;\r\n    maps: Map[];\r\n}\r\n\r\nexport interface Map {\r\n    id: string;\r\n    name: string;\r\n    items: MapItem[];\r\n}\r\n\r\nexport interface MapItem {\r\n    id: string;\r\n    type: 'tile' | 'pc' | 'monster';\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n    terrain: string | null;\r\n}\r\n\r\nexport const TERRAIN_TYPES = [\r\n    'cavern',\r\n    'dirt',\r\n    'flagstone',\r\n    'floorboard',\r\n    'grassland',\r\n    'pit',\r\n    'sand',\r\n    'snow',\r\n    'water'\r\n];\r\n","import React from 'react';\r\n\r\nimport { MapItem, TERRAIN_TYPES } from '../../models/map-folio';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport Radial from '../controls/radial';\r\n\r\ninterface Props {\r\n    tile: MapItem;\r\n    changeValue: (tile: MapItem, field: string, value: string) => void;\r\n    moveMapItem: (tile: MapItem, dir: string) => void;\r\n    resizeMapItem: (tile: MapItem, dir: string, dir2: 'in' | 'out' | null) => void;\r\n    cloneMapItem: (tile: MapItem) => void;\r\n    removeMapItem: (tile: MapItem) => void;\r\n}\r\n\r\nexport default class MapTileCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const terrainOptions = TERRAIN_TYPES.map(t => {\r\n                return { id: t, text: t };\r\n            });\r\n\r\n            return (\r\n                <div className='card map-tile'>\r\n                    <div className='heading'>\r\n                        <div className='title'>map tile</div>\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        <div className='subheading'>size</div>\r\n                        <div className='section'>{this.props.tile.width} sq x {this.props.tile.height} sq</div>\r\n                        <div className='section'>{this.props.tile.width * 5} ft x {this.props.tile.height * 5} ft</div>\r\n                        <div className='divider' />\r\n                        <div className='subheading'>terrain</div>\r\n                        <Dropdown\r\n                            options={terrainOptions}\r\n                            placeholder='select terrain'\r\n                            selectedID={this.props.tile.terrain ? this.props.tile.terrain : undefined}\r\n                            select={optionID => this.props.changeValue(this.props.tile, 'terrain', optionID)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <div className='subheading'>move</div>\r\n                        <div className='section centered'>\r\n                            <Radial direction='out' click={dir => this.props.moveMapItem(this.props.tile, dir)} />\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='subheading'>resize</div>\r\n                        <div className='section centered'>\r\n                            <Radial direction='both' click={(dir, dir2) => this.props.resizeMapItem(this.props.tile, dir, dir2)} />\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='section'>\r\n                            <button onClick={() => this.props.cloneMapItem(this.props.tile)}>clone tile</button>\r\n                            <button onClick={() => this.props.removeMapItem(this.props.tile)}>remove tile</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Factory from '../../utils/factory';\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Map, MapItem } from '../../models/map-folio';\r\n\r\nimport MapTileCard from '../cards/map-tile-card';\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    map: Map;\r\n}\r\n\r\ninterface State {\r\n    map: Map;\r\n    selectedTileID: string | null;\r\n}\r\n\r\nexport default class MapEditorModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            map: props.map,\r\n            selectedTileID: null\r\n        };\r\n    }\r\n\r\n    private setSelectedTileID(id: string | null) {\r\n        this.setState({\r\n            selectedTileID: id\r\n        });\r\n    }\r\n\r\n    private addMapTile(x: number, y: number) {\r\n        const tile = Factory.createMapItem();\r\n        tile.x = x;\r\n        tile.y = y;\r\n        tile.terrain = 'flagstone';\r\n        this.state.map.items.push(tile);\r\n\r\n        this.setState({\r\n            map: this.state.map,\r\n            selectedTileID: tile.id\r\n        });\r\n    }\r\n\r\n    private moveMapItem(item: MapItem, dir: string) {\r\n        switch (dir) {\r\n            case 'N':\r\n                item.y -= 1;\r\n                break;\r\n            case 'E':\r\n                item.x += 1;\r\n                break;\r\n            case 'S':\r\n                item.y += 1;\r\n                break;\r\n            case 'W':\r\n                item.x -= 1;\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    private bigMapItem(item: MapItem, dir: string) {\r\n        switch (dir) {\r\n            case 'N':\r\n                item.y -= 1;\r\n                item.height += 1;\r\n                break;\r\n            case 'E':\r\n                item.width += 1;\r\n                break;\r\n            case 'S':\r\n                item.height += 1;\r\n                break;\r\n            case 'W':\r\n                item.x -= 1;\r\n                item.width += 1;\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    private smallMapItem(item: MapItem, dir: string) {\r\n        switch (dir) {\r\n            case 'N':\r\n                if (item.height > 1) {\r\n                    item.y += 1;\r\n                    item.height -= 1;\r\n                }\r\n                break;\r\n            case 'E':\r\n                if (item.width > 1) {\r\n                    item.width -= 1;\r\n                }\r\n                break;\r\n            case 'S':\r\n                if (item.height > 1) {\r\n                    item.height -= 1;\r\n                }\r\n                break;\r\n            case 'W':\r\n                if (item.width > 1) {\r\n                    item.x += 1;\r\n                    item.width -= 1;\r\n                }\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    private resizeMapItem(item: MapItem, dir: string, dir2: 'in' | 'out') {\r\n        switch (dir2) {\r\n            case 'in':\r\n                this.smallMapItem(item, dir);\r\n                break;\r\n            case 'out':\r\n                this.bigMapItem(item, dir);\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n    }\r\n\r\n    private cloneMapItem(item: MapItem) {\r\n        const copy = JSON.parse(JSON.stringify(item));\r\n        copy.id = Utils.guid();\r\n        copy.x += 1;\r\n        copy.y += 1;\r\n        this.state.map.items.push(copy);\r\n\r\n        this.setState({\r\n            map: this.state.map,\r\n            selectedTileID: copy.id\r\n        });\r\n    }\r\n\r\n    private removeMapItem(item: MapItem) {\r\n        const index = this.state.map.items.indexOf(item);\r\n        this.state.map.items.splice(index, 1);\r\n\r\n        this.setState({\r\n            map: this.state.map,\r\n            selectedTileID: null\r\n        });\r\n    }\r\n\r\n    private changeValue(source: any, field: string, value: any) {\r\n        source[field] = value;\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let tools = null;\r\n            if (this.state.selectedTileID) {\r\n                const item = this.state.map.items.find(i => i.id === this.state.selectedTileID);\r\n                if (item) {\r\n                    tools = (\r\n                        <div className='tools'>\r\n                            <MapTileCard\r\n                                tile={item}\r\n                                moveMapItem={(mapItem, dir) => this.moveMapItem(mapItem, dir)}\r\n                                resizeMapItem={(mapItem, dir, dir2) => this.resizeMapItem(mapItem, dir, dir2 as 'in' | 'out')}\r\n                                cloneMapItem={mapItem => this.cloneMapItem(mapItem)}\r\n                                removeMapItem={mapItem => this.removeMapItem(mapItem)}\r\n                                changeValue={(source, field, value) => this.changeValue(source, field, value)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                }\r\n            } else {\r\n                tools = (\r\n                    <div className='tools'>\r\n                        <p>to add a new tile to the map, double-click on an empty grid square</p>\r\n                        <p>to edit an existing tile, click on it once to select it</p>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='map-editor'>\r\n                    {tools}\r\n                    <MapPanel\r\n                        map={this.state.map}\r\n                        mode='edit'\r\n                        selectedItemID={this.state.selectedTileID ? this.state.selectedTileID : undefined}\r\n                        setSelectedItemID={id => this.setSelectedTileID(id)}\r\n                        addMapTile={(x, y) => this.addMapTile(x, y)}\r\n                    />\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Factory from '../../utils/factory';\r\nimport Frankenstein from '../../utils/frankenstein';\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { CATEGORY_TYPES, Monster, MonsterGroup, SIZE_TYPES, Trait, TRAIT_TYPES } from '../../models/monster-group';\r\n\r\nimport MonsterCard from '../cards/monster-card';\r\nimport Checkbox from '../controls/checkbox';\r\nimport Dropdown from '../controls/dropdown';\r\nimport Selector from '../controls/selector';\r\nimport Spin from '../controls/spin';\r\nimport AbilityScorePanel from '../panels/ability-score-panel';\r\nimport TraitsPanel from '../panels/traits-panel';\r\n\r\nimport arrow from '../../resources/images/down-arrow.svg';\r\n\r\ninterface Props {\r\n    monster: Monster;\r\n    library: MonsterGroup[];\r\n    showMonsters: boolean;\r\n}\r\n\r\ninterface State {\r\n    monster: Monster;\r\n    page: 'overview' | 'abilities' | 'cbt-stats' | 'actions';\r\n    showFilter: boolean;\r\n    helpSection: string;\r\n    filter: {\r\n        size: boolean,\r\n        type: boolean,\r\n        subtype: boolean,\r\n        alignment: boolean,\r\n        challenge: boolean,\r\n        text: string\r\n    };\r\n}\r\n\r\nexport default class MonsterEditorModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            monster: props.monster,\r\n            page: 'overview',\r\n            showFilter: false,\r\n            helpSection: 'speed',\r\n            filter: {\r\n                size: true,\r\n                type: true,\r\n                subtype: false,\r\n                alignment: false,\r\n                challenge: true,\r\n                text: ''\r\n            }\r\n        };\r\n    }\r\n\r\n    private setPage(page: 'overview' | 'abilities' | 'cbt-stats' | 'actions') {\r\n        const sections = this.getHelpOptionsForPage(page);\r\n        this.setState({\r\n            page: page,\r\n            helpSection: sections[0]\r\n        });\r\n    }\r\n\r\n    private toggleFilter() {\r\n        this.setState({\r\n            showFilter: !this.state.showFilter\r\n        });\r\n    }\r\n\r\n    private setHelpSection(section: string) {\r\n        this.setState({\r\n            helpSection: section\r\n        });\r\n    }\r\n\r\n    private toggleMatch(type: 'size' | 'type' | 'subtype' | 'alignment' | 'challenge') {\r\n        // eslint-disable-next-line\r\n        this.state.filter[type] = !this.state.filter[type];\r\n        this.setState({\r\n            filter: this.state.filter\r\n        });\r\n    }\r\n\r\n    private setFilterText(value: string) {\r\n        // eslint-disable-next-line\r\n        this.state.filter.text = value;\r\n        this.setState({\r\n            filter: this.state.filter\r\n        });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Helper methods\r\n\r\n    private getHelpOptionsForPage(page: 'overview' | 'abilities' | 'cbt-stats' | 'actions') {\r\n        switch (page) {\r\n            case 'overview':\r\n                return ['speed', 'senses', 'languages', 'equipment'];\r\n            case 'abilities':\r\n                return ['str', 'dex', 'con', 'int', 'wis', 'cha', 'saves', 'skills'];\r\n            case 'cbt-stats':\r\n                return ['armor class', 'hit dice', 'resistances', 'vulnerabilities', 'immunities', 'conditions'];\r\n            case 'actions':\r\n                return ['actions'];\r\n            default:\r\n                return [];\r\n        }\r\n    }\r\n\r\n    private getMonsters() {\r\n        const monsters: Monster[] = [];\r\n        this.props.library.forEach(group => {\r\n            group.monsters.forEach(monster => {\r\n                let match = true;\r\n\r\n                if (this.state.monster.id === monster.id) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.filter.size && (this.state.monster.size !== monster.size)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.filter.type && (this.state.monster.category !== monster.category)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.filter.subtype && (this.state.monster.tag !== monster.tag)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.filter.alignment && (this.state.monster.alignment !== monster.alignment)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.filter.challenge && (this.state.monster.challenge !== monster.challenge)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (match) {\r\n                    monsters.push(monster);\r\n                }\r\n            });\r\n        });\r\n\r\n        return monsters;\r\n    }\r\n\r\n    private setRandomValue(field: string, monsters: Monster[]) {\r\n        Frankenstein.setRandomValue(this.state.monster, field, monsters);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private spliceMonsters(monsters: Monster[]) {\r\n        Frankenstein.spliceMonsters(this.state.monster, monsters);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private addTrait(type: 'trait' | 'action' | 'legendary' | 'lair' | 'regional') {\r\n        Frankenstein.addTrait(this.state.monster, type);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private addRandomTrait(type: string, monsters: Monster[]) {\r\n        Frankenstein.addRandomTrait(this.state.monster, type, monsters);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private removeTrait(trait: Trait) {\r\n        Frankenstein.removeTrait(this.state.monster, trait);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private swapTraits(t1: Trait, t2: Trait) {\r\n        Frankenstein.swapTraits(this.state.monster, t1, t2);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private copyTrait(trait: Trait) {\r\n        Frankenstein.copyTrait(this.state.monster, trait);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private changeTrait(trait: Trait, field: string, value: any) {\r\n        (trait as any)[field] = value;\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private nudgeValue(field: string, delta: number) {\r\n        Frankenstein.nudgeValue(this.state.monster, field, delta);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private changeValue(field: string, value: any) {\r\n        Frankenstein.changeValue(this.state.monster, field, value);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // HTML render methods\r\n\r\n    private getHelpSection(monsters: Monster[]) {\r\n        switch (this.state.helpSection) {\r\n            case 'speed':\r\n                return this.getValueSection('speed', 'text', monsters);\r\n            case 'senses':\r\n                return this.getValueSection('senses', 'text', monsters);\r\n            case 'languages':\r\n                return this.getValueSection('languages', 'text', monsters);\r\n            case 'equipment':\r\n                return this.getValueSection('equipment', 'text', monsters);\r\n            case 'str':\r\n                return this.getValueSection('abilityScores.str', 'number', monsters);\r\n            case 'dex':\r\n                return this.getValueSection('abilityScores.dex', 'number', monsters);\r\n            case 'con':\r\n                return this.getValueSection('abilityScores.con', 'number', monsters);\r\n            case 'int':\r\n                return this.getValueSection('abilityScores.int', 'number', monsters);\r\n            case 'wis':\r\n                return this.getValueSection('abilityScores.wis', 'number', monsters);\r\n            case 'cha':\r\n                return this.getValueSection('abilityScores.cha', 'number', monsters);\r\n            case 'saves':\r\n                return this.getValueSection('savingThrows', 'text', monsters);\r\n            case 'skills':\r\n                return this.getValueSection('skills', 'text', monsters);\r\n            case 'armor class':\r\n                return this.getValueSection('ac', 'number', monsters);\r\n            case 'hit dice':\r\n                return this.getValueSection('hitDice', 'number', monsters);\r\n            case 'resistances':\r\n                return this.getValueSection('damage.resist', 'text', monsters);\r\n            case 'vulnerabilities':\r\n                return this.getValueSection('damage.vulnerable', 'text', monsters);\r\n            case 'immunities':\r\n                return this.getValueSection('damage.immune', 'text', monsters);\r\n            case 'conditions':\r\n                return this.getValueSection('conditionImmunities', 'text', monsters);\r\n            case 'actions':\r\n                return this.getActionsSection(monsters);\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    private getValueSection(field: string, dataType: 'text' | 'number', monsters: Monster[]) {\r\n        const values: any[] = monsters\r\n            .map(m => {\r\n                const tokens = field.split('.');\r\n                let source: any = m;\r\n                let value = null;\r\n                tokens.forEach(token => {\r\n                    if (token === tokens[tokens.length - 1]) {\r\n                        value = source[token];\r\n                    } else {\r\n                        source = source[token];\r\n                    }\r\n                });\r\n                if ((dataType === 'text') && (value === '')) {\r\n                    value = null;\r\n                }\r\n                return value;\r\n            })\r\n            .filter(v => v !== null);\r\n\r\n        const distinct: { value: any, count: number }[] = [];\r\n        if (dataType === 'number') {\r\n            let min: number | null = null;\r\n            let max: number | null = null;\r\n            values.forEach(v => {\r\n                if ((min === null) || (v < min)) {\r\n                    min = v;\r\n                }\r\n                if ((max === null) || (v > max)) {\r\n                    max = v;\r\n                }\r\n            });\r\n            if ((min !== null) && (max !== null)) {\r\n                for (let n = min; n <= max; ++n) {\r\n                    distinct.push({\r\n                        value: n,\r\n                        count: 0\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        values.forEach(v => {\r\n            const current = distinct.find(d => d.value === v);\r\n            if (current) {\r\n                current.count += 1;\r\n            } else {\r\n                distinct.push({\r\n                    value: v,\r\n                    count: 1\r\n                });\r\n            }\r\n        });\r\n\r\n        switch (dataType) {\r\n            case 'number':\r\n                Utils.sortByValue(distinct);\r\n                break;\r\n            case 'text':\r\n                Utils.sortByCount(distinct);\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        if (dataType === 'text') {\r\n            const count = monsters.length - values.length;\r\n            if (count !== 0) {\r\n                distinct.push({\r\n                    value: '',\r\n                    count: monsters.length - values.length\r\n                });\r\n            }\r\n        }\r\n\r\n        const valueSections = distinct.map(d => {\r\n            const width = 100 * d.count / monsters.length;\r\n            return (\r\n                <div className='row small-up-3 medium-up-3 large-up-3 value-list' key={distinct.indexOf(d)}>\r\n                    <div className='column'>\r\n                        <div className='text-container'>\r\n                            {d.value || '(none specified)'}\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <div className='bar-container'>\r\n                            <div className='bar' style={{ width: width + '%' }} />\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <button onClick={() => this.changeValue(field, d.value)}>use this value</button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                {valueSections}\r\n                <button onClick={() => this.setRandomValue(field, monsters)}>select random value</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getActionsSection(monsters: Monster[]) {\r\n        const rows = [];\r\n        rows.push(\r\n            <div className='row small-up-4 medium-up-4 large-up-4 value-list' key='header'>\r\n                <div className='column'>\r\n                    <div className='text-container'>\r\n                        <b>type</b>\r\n                    </div>\r\n                </div>\r\n                <div className='column'>\r\n                    <div className='text-container number'>\r\n                        <b>average number</b>\r\n                    </div>\r\n                </div>\r\n                <div className='column'>\r\n                    <div className='text-container number'>\r\n                        <b>min - max</b>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        TRAIT_TYPES.forEach(type => {\r\n            let min: number | null = null;\r\n            let max: number | null = null;\r\n            let count = 0;\r\n            monsters.forEach(m => {\r\n                const n = m.traits.filter(t => t.type === type).length;\r\n                if ((min === null) || (n < min)) {\r\n                    min = n;\r\n                }\r\n                if ((max === null) || (n > max)) {\r\n                    max = n;\r\n                }\r\n                count += n;\r\n            });\r\n            const avg = Math.round(count / monsters.length);\r\n\r\n            rows.push(\r\n                <div className='row small-up-4 medium-up-4 large-up-4 value-list' key={type}>\r\n                    <div className='column'>\r\n                        <div className={count === 0 ? 'text-container disabled' : 'text-container'}>\r\n                            {Utils.traitType(type, true)}\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <div className={count === 0 ? 'text-container number disabled' : 'text-container number'}>\r\n                            {avg}\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <div className={count === 0 ? 'text-container number disabled' : 'text-container number'}>\r\n                            {min} - {max}\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <button className={count === 0 ? 'disabled' : ''} onClick={() => this.addRandomTrait(type, monsters)}>add random</button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                {rows}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getFilterCard(monsters: Monster[]) {\r\n        const criteria: string[] = [];\r\n        if (this.state.filter.size) {\r\n            criteria.push('size');\r\n        }\r\n        if (this.state.filter.type) {\r\n            criteria.push('type');\r\n        }\r\n        if (this.state.filter.subtype) {\r\n            criteria.push('subtype');\r\n        }\r\n        if (this.state.filter.alignment) {\r\n            criteria.push('alignment');\r\n        }\r\n        if (this.state.filter.challenge) {\r\n            criteria.push('challenge rating');\r\n        }\r\n        const criteriaText = (criteria.length > 0) ? 'based on ' + criteria.join(', ') : 'no criteria specified';\r\n        const similar = (\r\n            <div className='section'>\r\n                {monsters.length} similar monsters ({criteriaText})\r\n            </div>\r\n        );\r\n\r\n        let filterContent = null;\r\n        if (this.state.showFilter) {\r\n            filterContent = (\r\n                <div>\r\n                    <Checkbox\r\n                        label={'size ' + this.state.monster.size}\r\n                        checked={this.state.filter.size}\r\n                        changeValue={value => this.toggleMatch('size')}\r\n                    />\r\n                    <Checkbox\r\n                        label={'type ' + this.state.monster.category}\r\n                        checked={this.state.filter.type}\r\n                        changeValue={value => this.toggleMatch('type')}\r\n                    />\r\n                    <Checkbox\r\n                        label={this.state.monster.tag ? 'subtype ' + this.state.monster.tag : 'subtype'}\r\n                        checked={this.state.filter.subtype}\r\n                        disabled={!this.state.monster.tag}\r\n                        changeValue={value => this.toggleMatch('subtype')}\r\n                    />\r\n                    <Checkbox\r\n                        label={this.state.monster.alignment ? 'alignment ' + this.state.monster.alignment : 'alignment'}\r\n                        checked={this.state.filter.alignment}\r\n                        disabled={!this.state.monster.alignment}\r\n                        changeValue={value => this.toggleMatch('alignment')}\r\n                    />\r\n                    <Checkbox\r\n                        label={'challenge rating ' + Utils.challenge(this.state.monster.challenge)}\r\n                        checked={this.state.filter.challenge}\r\n                        changeValue={value => this.toggleMatch('challenge')}\r\n                    />\r\n                    <div className='divider' />\r\n                    <button className={monsters.length < 2 ? 'disabled' : ''} onClick={() => this.spliceMonsters(monsters)}>build random monster</button>\r\n                    <div className='divider' />\r\n                    {similar}\r\n                </div>\r\n            );\r\n        } else {\r\n            filterContent = (\r\n                <div>\r\n                    {similar}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className='section'>\r\n                <div className='card'>\r\n                    <div className='heading'>\r\n                        <div className='title'>similar monsters</div>\r\n                        <img className={this.state.showFilter ? 'image rotate' : 'image'} src={arrow} alt='arrow' onClick={() => this.toggleFilter()} />\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        {filterContent}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getMonsterCards(monsters: Monster[]) {\r\n        const sorted = Utils.sort(monsters);\r\n        const monsterCards = sorted.map(m => {\r\n            const showMonster = m.traits.some((t: Trait) => Utils.match(this.state.filter.text, t.name));\r\n            if (showMonster) {\r\n                return (\r\n                    <div className='section' key={m.id}>\r\n                        <MonsterCard\r\n                            combatant={m}\r\n                            mode={'template ' + this.state.page}\r\n                            filter={this.state.filter.text}\r\n                            copyTrait={trait => this.copyTrait(trait)}\r\n                        />\r\n                    </div>\r\n                );\r\n            } else {\r\n                return null;\r\n            }\r\n        }).filter(m => !!m);\r\n\r\n        return monsterCards;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    public render() {\r\n        try {\r\n            const pages = [\r\n                {\r\n                    id: 'overview',\r\n                    text: 'overview'\r\n                },\r\n                {\r\n                    id: 'abilities',\r\n                    text: 'abilities'\r\n                },\r\n                {\r\n                    id: 'cbt-stats',\r\n                    text: 'combat'\r\n                },\r\n                {\r\n                    id: 'actions',\r\n                    text: 'actions'\r\n                }\r\n            ];\r\n\r\n            let monsters: Monster[] = [];\r\n            if (this.props.showMonsters) {\r\n                monsters = this.getMonsters();\r\n            }\r\n\r\n            let content = null;\r\n            switch (this.state.page) {\r\n                case 'overview':\r\n                    const catOptions = CATEGORY_TYPES.map(cat => ({ id: cat, text: cat }));\r\n                    const sizeOptions = SIZE_TYPES.map(size => ({ id: size, text: size }));\r\n\r\n                    content = (\r\n                        <div className='row'>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>name</div>\r\n                                <input type='text' value={this.state.monster.name} onChange={event => this.changeValue('name', event.target.value)} />\r\n                                <div className='subheading'>size</div>\r\n                                <Dropdown\r\n                                    options={sizeOptions}\r\n                                    selectedID={this.state.monster.size}\r\n                                    select={optionID => this.changeValue('size', optionID)}\r\n                                />\r\n                                <div className='subheading'>type</div>\r\n                                <Dropdown\r\n                                    options={catOptions}\r\n                                    selectedID={this.state.monster.category}\r\n                                    select={optionID => this.changeValue('category', optionID)}\r\n                                />\r\n                                <div className='subheading'>subtype</div>\r\n                                <input type='text' value={this.state.monster.tag} onChange={event => this.changeValue('tag', event.target.value)} />\r\n                                <div className='subheading'>alignment</div>\r\n                                <input type='text' value={this.state.monster.alignment} onChange={event => this.changeValue('alignment', event.target.value)} />\r\n                            </div>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>challenge rating</div>\r\n                                <Spin\r\n                                    source={this.state.monster}\r\n                                    name='challenge'\r\n                                    display={value => Utils.challenge(value)}\r\n                                    nudgeValue={delta => this.nudgeValue('challenge', delta)}\r\n                                />\r\n                                <div className='subheading'>speed</div>\r\n                                <input type='text' value={this.state.monster.speed} onChange={event => this.changeValue('speed', event.target.value)} />\r\n                                <div className='subheading'>senses</div>\r\n                                <input type='text' value={this.state.monster.senses} onChange={event => this.changeValue('senses', event.target.value)} />\r\n                                <div className='subheading'>languages</div>\r\n                                <input type='text' value={this.state.monster.languages} onChange={event => this.changeValue('languages', event.target.value)} />\r\n                                <div className='subheading'>equipment</div>\r\n                                <input type='text' value={this.state.monster.equipment} onChange={event => this.changeValue('equipment', event.target.value)} />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                    break;\r\n                case 'abilities':\r\n                    content = (\r\n                        <div className='row'>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>ability scores</div>\r\n                                <AbilityScorePanel\r\n                                    edit={true}\r\n                                    combatant={this.state.monster}\r\n                                    nudgeValue={(source, type, delta) => this.nudgeValue(type, delta)}\r\n                                />\r\n                            </div>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>saving throws</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.savingThrows}\r\n                                    onChange={event => this.changeValue('savingThrows', event.target.value)}\r\n                                />\r\n                                <div className='subheading'>skills</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.skills}\r\n                                    onChange={event => this.changeValue('skills', event.target.value)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                    break;\r\n                case 'cbt-stats':\r\n                    content = (\r\n                        <div className='row'>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>armor class</div>\r\n                                <Spin\r\n                                    source={this.state.monster}\r\n                                    name='ac'\r\n                                    nudgeValue={delta => this.nudgeValue('ac', delta)}\r\n                                />\r\n                                <div className='subheading'>hit dice</div>\r\n                                <Spin\r\n                                    source={this.state.monster}\r\n                                    name='hitDice'\r\n                                    display={value => value + 'd' + Utils.hitDieType(this.state.monster.size)}\r\n                                    nudgeValue={delta => this.nudgeValue('hitDice', delta)}\r\n                                />\r\n                                <div className='subheading'>hit points</div>\r\n                                <div className='hp-value'>{this.state.monster.hpMax} hp</div>\r\n                            </div>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>damage resistances</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.damage.resist}\r\n                                    onChange={event => this.changeValue('damage.resist', event.target.value)}\r\n                                />\r\n                                <div className='subheading'>damage vulnerabilities</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.damage.vulnerable}\r\n                                    onChange={event => this.changeValue('damage.vulnerable', event.target.value)}\r\n                                />\r\n                                <div className='subheading'>damage immunities</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.damage.immune}\r\n                                    onChange={event => this.changeValue('damage.immune', event.target.value)}\r\n                                />\r\n                                <div className='subheading'>condition immunities</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.conditionImmunities}\r\n                                    onChange={event => this.changeValue('conditionImmunities', event.target.value)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                    break;\r\n                case 'actions':\r\n                    content = (\r\n                        <TraitsPanel\r\n                            combatant={this.state.monster}\r\n                            mode='edit'\r\n                            addTrait={type => this.addTrait(type)}\r\n                            removeTrait={trait => this.removeTrait(trait)}\r\n                            swapTraits={(t1, t2) => this.swapTraits(t1, t2)}\r\n                            changeValue={(trait, type, value) => this.changeTrait(trait, type, value)}\r\n                        />\r\n                    );\r\n                    break;\r\n                default:\r\n                    // Do nothing\r\n                    break;\r\n            }\r\n\r\n            let help = null;\r\n            if (this.props.showMonsters && (monsters.length > 1)) {\r\n                let selector = null;\r\n                if (this.getHelpOptionsForPage(this.state.page).length > 1) {\r\n                    const options = this.getHelpOptionsForPage(this.state.page).map(s => {\r\n                        return {\r\n                            id: s,\r\n                            text: s\r\n                        };\r\n                    });\r\n                    selector = (\r\n                        <Selector\r\n                            tabs={false}\r\n                            options={options}\r\n                            selectedID={this.state.helpSection}\r\n                            select={optionID => this.setHelpSection(optionID)}\r\n                        />\r\n                    );\r\n                }\r\n\r\n                help = (\r\n                    <div className='monster-help'>\r\n                        <div className='subheading'>information from similar monsters</div>\r\n                        {selector}\r\n                        {this.getHelpSection(monsters)}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            let monsterList = null;\r\n            if (this.props.showMonsters) {\r\n                let searchBox = null;\r\n                if ((this.state.page === 'actions') && (monsters.length > 0)) {\r\n                    searchBox = (\r\n                        <input\r\n                            type='text'\r\n                            placeholder='search for traits and actions'\r\n                            value={this.state.filter.text}\r\n                            onChange={event => this.setFilterText(event.target.value)}\r\n                        />\r\n                    );\r\n                }\r\n                monsterList = (\r\n                    <div className='columns small-4 medium-4 large-4 scrollable list-column'>\r\n                        {this.getFilterCard(monsters)}\r\n                        {searchBox}\r\n                        {this.getMonsterCards(monsters)}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='row' style={{ height: '100%', margin: '0 -15px' }}>\r\n                    <div\r\n                        className={\r\n                            this.props.showMonsters\r\n                            ? 'columns small-8 medium-8 large-8 scrollable'\r\n                            : 'columns small-12 medium-12 large-12 scrollable'\r\n                        }\r\n                        style={{ transition: 'none' }}\r\n                    >\r\n                        <div className='section'>\r\n                            <Selector\r\n                                tabs={true}\r\n                                options={pages}\r\n                                selectedID={this.state.page}\r\n                                select={optionID => this.setPage(optionID as 'overview' | 'abilities' | 'cbt-stats' | 'actions')}\r\n                            />\r\n                            {content}\r\n                            {help}\r\n                        </div>\r\n                    </div>\r\n                    {monsterList}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Encounter } from '../../models/encounter';\r\nimport { MonsterGroup } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\ninterface Props {\r\n    view: string;\r\n    blur: boolean;\r\n    library: MonsterGroup[];\r\n    parties: Party[];\r\n    encounters: Encounter[];\r\n    setView: (view: string) => void;\r\n}\r\n\r\nexport default class Navbar extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const partiesStyle = this.props.view === 'parties' ? 'navigator-item selected' : 'navigator-item';\r\n            const libraryStyle = this.props.view === 'library' ? 'navigator-item selected' : 'navigator-item';\r\n            let encounterStyle = this.props.view === 'encounter' ? 'navigator-item selected' : 'navigator-item';\r\n            const mapStyle = this.props.view === 'maps' ? 'navigator-item selected' : 'navigator-item';\r\n            let combatStyle = this.props.view === 'combat' ? 'navigator-item selected' : 'navigator-item';\r\n\r\n            const encountersEnabled = this.props.library.length !== 0;\r\n            const combatEnabled = (this.props.parties.length !== 0) && (this.props.encounters.length !== 0);\r\n            if (!encountersEnabled) {\r\n                encounterStyle += ' disabled';\r\n            }\r\n            if (!combatEnabled) {\r\n                combatStyle += ' disabled';\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.blur ? 'navbar blur' : 'navbar'}>\r\n                    <div className={partiesStyle} onClick={() => this.props.setView('parties')}>player characters</div>\r\n                    <div className={libraryStyle} onClick={() => this.props.setView('library')}>monster library</div>\r\n                    <div className={encounterStyle} onClick={() => encountersEnabled ? this.props.setView('encounter') : null}>encounter builder</div>\r\n                    <div className={mapStyle} onClick={() => this.props.setView('maps')}>map folios</div>\r\n                    <div className={combatStyle} onClick={() => combatEnabled ? this.props.setView('combat') : null}>combat manager</div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport cog from '../../resources/images/settings.svg';\r\n\r\ninterface Props {\r\n    actions: JSX.Element | null;\r\n    blur: boolean;\r\n    openHome: () => void;\r\n    openAbout: () => void;\r\n}\r\n\r\nexport default class Titlebar extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div className={this.props.blur ? 'titlebar blur' : 'titlebar'}>\r\n                    <div className='app-name' onClick={() => this.props.openHome()}>dojo</div>\r\n                    {this.props.actions}\r\n                    <img className='settings-icon' src={cog} title='about' alt='about' onClick={() => this.props.openAbout()} />\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Frankenstein from '../../utils/frankenstein';\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Monster, MonsterGroup } from '../../models/monster-group';\r\n\r\nimport FilterCard from '../cards/filter-card';\r\nimport MonsterCard from '../cards/monster-card';\r\nimport Readaloud from '../panels/readaloud';\r\n\r\ninterface Props {\r\n    monster: Monster;\r\n    library: MonsterGroup[];\r\n}\r\n\r\ninterface State {\r\n    monster: Monster;\r\n    filter: {\r\n        name: string,\r\n        challengeMin: number;\r\n        challengeMax: number;\r\n        category: string;\r\n        size: string;\r\n    };\r\n    selectedMonsters: Monster[];\r\n}\r\n\r\nexport default class RandomMonsterModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            monster: this.props.monster,\r\n            filter: {\r\n                name: '',\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: 'all types',\r\n                size: 'all sizes'\r\n            },\r\n            selectedMonsters: []\r\n        };\r\n    }\r\n\r\n    private generateMonster() {\r\n        Frankenstein.spliceMonsters(this.state.monster, this.state.selectedMonsters);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private changeFilterValue(type: 'name' | 'challengeMin' | 'challengeMax' | 'category' | 'size', value: any) {\r\n        // eslint-disable-next-line\r\n        this.state.filter[type] = value;\r\n        this.setState({\r\n            filter: this.state.filter\r\n        });\r\n    }\r\n\r\n    private nudgeFilterValue(type: 'challengeMin' | 'challengeMax', delta: number) {\r\n        const value = Utils.nudgeChallenge(this.state.filter[type], delta);\r\n        this.changeFilterValue(type, value);\r\n    }\r\n\r\n    private resetFilter() {\r\n        this.setState({\r\n            filter: {\r\n                name: '',\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: 'all types',\r\n                size: 'all sizes'\r\n            }\r\n        });\r\n    }\r\n\r\n    private matchMonster(monster: Monster) {\r\n        if (monster.challenge < this.state.filter.challengeMin) {\r\n            return false;\r\n        }\r\n\r\n        if (monster.challenge > this.state.filter.challengeMax) {\r\n            return false;\r\n        }\r\n\r\n        if (this.state.filter.name !== '') {\r\n            if (!Utils.match(this.state.filter.name, monster.name)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.filter.category !== 'all types') {\r\n            if (monster.category !== this.state.filter.category) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.filter.size !== 'all sizes') {\r\n            if (monster.size !== this.state.filter.size) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private selectMonster(monster: Monster) {\r\n        this.state.selectedMonsters.push(monster);\r\n        this.state.selectedMonsters.sort((a, b) => {\r\n            if (a.name < b.name) { return -1; }\r\n            if (a.name > b.name) { return 1; }\r\n            return 0;\r\n        });\r\n        this.setState({\r\n            selectedMonsters: this.state.selectedMonsters\r\n        });\r\n    }\r\n\r\n    private deselectMonster(monster: Monster) {\r\n        const index = this.state.selectedMonsters.indexOf(monster);\r\n        this.state.selectedMonsters.splice(index, 1);\r\n        this.setState({\r\n            selectedMonsters: this.state.selectedMonsters\r\n        });\r\n    }\r\n\r\n    private selectAll() {\r\n        this.props.library.forEach(group => {\r\n            group.monsters.forEach(monster => {\r\n                if (this.matchMonster(monster)) {\r\n                    this.state.selectedMonsters.push(monster);\r\n                }\r\n            });\r\n        });\r\n        this.state.selectedMonsters.sort((a, b) => {\r\n            if (a.name < b.name) { return -1; }\r\n            if (a.name > b.name) { return 1; }\r\n            return 0;\r\n        });\r\n        this.setState({\r\n            selectedMonsters: this.state.selectedMonsters\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const monsters: Monster[] = [];\r\n            this.props.library.forEach(group => {\r\n                group.monsters.forEach(monster => {\r\n                    if (this.matchMonster(monster)) {\r\n                        monsters.push(monster);\r\n                    }\r\n                });\r\n            });\r\n            monsters.sort((a, b) => {\r\n                if (a.name < b.name) { return -1; }\r\n                if (a.name > b.name) { return 1; }\r\n                return 0;\r\n            });\r\n            let allMonsters: JSX.Element | JSX.Element[] = monsters.filter(m => !this.state.selectedMonsters.includes(m)).map(m => {\r\n                return (\r\n                    <MonsterCard key={m.id} combatant={m} mode='view candidate' selectMonster={monster => this.selectMonster(monster)} />\r\n                );\r\n            });\r\n            if (allMonsters.length === 0) {\r\n                allMonsters = (\r\n                    <Readaloud\r\n                        content={(\r\n                            <div className='section'>\r\n                                there are no monsters that match the above criteria (or you have already selected them all)\r\n                            </div>\r\n                        )}\r\n                    />\r\n                );\r\n            }\r\n\r\n            const selectedMonsters: JSX.Element | JSX.Element[] = this.state.selectedMonsters.map(m => {\r\n                return (\r\n                    <MonsterCard key={m.id} combatant={m} mode='view candidate selected' deselectMonster={monster => this.deselectMonster(monster)} />\r\n                );\r\n            });\r\n            let selectedMonstersInfo = null;\r\n            if (selectedMonsters.length < 2) {\r\n                selectedMonstersInfo = (\r\n                    <Readaloud\r\n                        content={(\r\n                            <div>\r\n                                <div className='section'>\r\n                                    in order to generate a random monster, select at least two source monsters from the list on the left\r\n                                </div>\r\n                                <button onClick={() => this.selectAll()}>select all monsters</button>\r\n                            </div>\r\n                        )}\r\n                    />\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='random-monster-modal'>\r\n                    <div className='row' style={{ height: '100%' }}>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable'>\r\n                            <div className='heading'>all monsters</div>\r\n                            <FilterCard\r\n                                filter={this.state.filter}\r\n                                changeValue={(type, value) => this.changeFilterValue(type, value)}\r\n                                nudgeValue={(type, delta) => this.nudgeFilterValue(type, delta)}\r\n                                resetFilter={() => this.resetFilter()}\r\n                            />\r\n                            <div className='divider' />\r\n                            {allMonsters}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable'>\r\n                            <div className='heading'>selected monsters</div>\r\n                            <button\r\n                                className={this.state.selectedMonsters.length < 2 ? 'disabled' : ''}\r\n                                onClick={() => this.generateMonster()}\r\n                            >\r\n                                randomly generate monster\r\n                            </button>\r\n                            <div className='divider' />\r\n                            {selectedMonstersInfo}\r\n                            {selectedMonsters}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable'>\r\n                            <div className='heading'>output</div>\r\n                            <MonsterCard\r\n                                combatant={this.state.monster}\r\n                                mode='view generated'\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Factory from '../utils/factory';\r\nimport Frankenstein from '../utils/frankenstein';\r\nimport Utils from '../utils/utils';\r\n\r\nimport { Combat, Combatant, CombatSetup, Notification } from '../models/combat';\r\nimport { Condition } from '../models/condition';\r\nimport { Encounter, EncounterSlot, EncounterWave } from '../models/encounter';\r\nimport { Map, MapFolio } from '../models/map-folio';\r\nimport { Monster, MonsterGroup, Trait } from '../models/monster-group';\r\nimport { Party, PC } from '../models/party';\r\n\r\nimport CombatManagerScreen from './screens/combat-manager-screen';\r\nimport EncounterBuilderScreen from './screens/encounter-builder-screen';\r\nimport HomeScreen from './screens/home-screen';\r\nimport MapFoliosScreen from './screens/map-folios-screen';\r\nimport MonsterLibraryScreen from './screens/monster-library-screen';\r\nimport PartiesScreen from './screens/parties-screen';\r\n\r\nimport AboutModal from './modals/about-modal';\r\nimport CombatStartModal from './modals/combat-start-modal';\r\nimport ConditionModal from './modals/condition-modal';\r\nimport DemographicsModal from './modals/demographics-modal';\r\nimport MapEditorModal from './modals/map-editor-modal';\r\nimport MonsterEditorModal from './modals/monster-editor-modal';\r\n\r\nimport Navbar from './panels/navbar';\r\nimport Titlebar from './panels/titlebar';\r\n\r\nimport Checkbox from './controls/checkbox';\r\n\r\nimport close from '../resources/images/close-black.svg';\r\nimport RandomMonsterModal from './modals/random-monster-modal';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    // No props; this is the root component\r\n}\r\n\r\ninterface State {\r\n    view: string;\r\n    options: {\r\n        showHelp: boolean;\r\n    };\r\n\r\n    parties: Party[];\r\n    library: MonsterGroup[];\r\n    encounters: Encounter[];\r\n    mapFolios: MapFolio[];\r\n    combats: Combat[];\r\n\r\n    selectedPartyID: string | null;\r\n    selectedMonsterGroupID: string | null;\r\n    selectedEncounterID: string | null;\r\n    selectedMapFolioID: string | null;\r\n    selectedCombatID: string | null;\r\n\r\n    modal: any;\r\n\r\n    filter: string;\r\n}\r\n\r\nexport default class Dojo extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            view: 'home',\r\n            options: {\r\n                showHelp: true\r\n            },\r\n            parties: [],\r\n            library: [],\r\n            encounters: [],\r\n            mapFolios: [],\r\n            combats: [],\r\n            selectedPartyID: null,\r\n            selectedMonsterGroupID: null,\r\n            selectedEncounterID: null,\r\n            selectedMapFolioID: null,\r\n            selectedCombatID: null,\r\n            modal: null,\r\n            filter: ''\r\n        };\r\n\r\n        try {\r\n            let data: State | null = null;\r\n\r\n            try {\r\n                const json = window.localStorage.getItem('data');\r\n                if (json) {\r\n                    data = JSON.parse(json);\r\n                }\r\n            } catch (ex) {\r\n                console.error('Could not parse JSON: ', ex);\r\n                data = null;\r\n            }\r\n\r\n            if (data !== null) {\r\n                data.library.forEach(g => {\r\n                    g.monsters.forEach(m => {\r\n                        m.traits.forEach(t => {\r\n                            t.uses = 0;\r\n                        });\r\n                    });\r\n                });\r\n\r\n                data.encounters.forEach(enc => {\r\n                    if (!enc.waves) {\r\n                        enc.waves = [];\r\n                    }\r\n                });\r\n\r\n                if (!data.mapFolios) {\r\n                    data.mapFolios = [];\r\n                    data.selectedMapFolioID = null;\r\n                }\r\n\r\n                data.combats.forEach(combat => {\r\n                    if (!combat.notifications) {\r\n                        combat.notifications = [];\r\n                    }\r\n                    combat.combatants.forEach(c => {\r\n                        if (c.altitude === undefined) {\r\n                            c.altitude = 0;\r\n                        }\r\n\r\n                        if (c.type === 'monster') {\r\n                            const m = c as Combatant & Monster;\r\n                            m.traits.forEach(t => {\r\n                                if (t.uses === undefined) {\r\n                                    t.uses = 0;\r\n                                }\r\n                            });\r\n                        }\r\n                    });\r\n                });\r\n\r\n                data.view = 'home';\r\n                data.modal = null;\r\n                data.filter = '';\r\n\r\n                this.state = data;\r\n            }\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n\r\n    public componentDidUpdate() {\r\n        let json = null;\r\n        try {\r\n            json = JSON.stringify(this.state);\r\n        } catch (ex) {\r\n            console.error('Could not stringify data: ', ex);\r\n            json = null;\r\n        }\r\n\r\n        if (json !== null) {\r\n            window.localStorage.setItem('data', json);\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Party screen\r\n\r\n    private addParty() {\r\n        const party = Factory.createParty();\r\n        party.name = 'new party';\r\n        const parties: Party[] = ([] as Party[]).concat(this.state.parties, [party]);\r\n        Utils.sort(parties);\r\n        this.setState({\r\n            parties: parties,\r\n            selectedPartyID: party.id\r\n        });\r\n    }\r\n\r\n    private removeParty() {\r\n        const party = this.state.parties.find(p => p.id === this.state.selectedPartyID);\r\n        if (party) {\r\n            const index = this.state.parties.indexOf(party);\r\n            this.state.parties.splice(index, 1);\r\n            this.setState({\r\n                parties: this.state.parties,\r\n                selectedPartyID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private addPC() {\r\n        const party = this.state.parties.find(p => p.id === this.state.selectedPartyID);\r\n        if (party) {\r\n            const pc = Factory.createPC();\r\n            pc.name = 'new pc';\r\n            party.pcs.push(pc);\r\n            this.setState({\r\n                parties: this.state.parties\r\n            });\r\n        }\r\n    }\r\n\r\n    private removePC(pc: PC) {\r\n        const party = this.state.parties.find(p => p.id === this.state.selectedPartyID);\r\n        if (party) {\r\n            const index = party.pcs.indexOf(pc);\r\n            party.pcs.splice(index, 1);\r\n            this.setState({\r\n                parties: this.state.parties\r\n            });\r\n        }\r\n    }\r\n\r\n    private sortPCs() {\r\n        const party = this.state.parties.find(p => p.id === this.state.selectedPartyID);\r\n        if (party) {\r\n            Utils.sort(party.pcs);\r\n            this.setState({\r\n                parties: this.state.parties\r\n            });\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Library screen\r\n\r\n    private addMonsterGroup() {\r\n        const group = Factory.createMonsterGroup();\r\n        group.name = 'new group';\r\n        const library = ([] as MonsterGroup[]).concat(this.state.library, [group]);\r\n        Utils.sort(library);\r\n        this.setState({\r\n            library: library,\r\n            selectedMonsterGroupID: group.id\r\n        });\r\n    }\r\n\r\n    private removeMonsterGroup() {\r\n        const group = this.state.library.find(g => g.id === this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            const index = this.state.library.indexOf(group);\r\n            this.state.library.splice(index, 1);\r\n            this.setState({\r\n                library: this.state.library,\r\n                selectedMonsterGroupID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private addMonster() {\r\n        const monster = Factory.createMonster();\r\n        monster.name = 'new monster';\r\n        const group = this.state.library.find(g => g.id === this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            group.monsters.push(monster);\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    private generateMonster() {\r\n        const monster = Factory.createMonster();\r\n        monster.name = 'generated monster';\r\n        this.setState({\r\n            modal: {\r\n                type: 'random-monster',\r\n                monster: monster\r\n            }\r\n        });\r\n    }\r\n\r\n    private removeMonster(monster: Monster) {\r\n        const group = this.state.library.find(g => g.id === this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            const index = group.monsters.indexOf(monster);\r\n            group.monsters.splice(index, 1);\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    private sortMonsters() {\r\n        const group = this.state.library.find(g => g.id === this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            Utils.sort(group.monsters);\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    private moveToGroup(monster: Monster, groupID: string) {\r\n        const sourceGroup = this.state.library.find(group => group.monsters.includes(monster));\r\n        if (sourceGroup) {\r\n            const index = sourceGroup.monsters.indexOf(monster);\r\n            sourceGroup.monsters.splice(index, 1);\r\n\r\n            const group = this.state.library.find(g => g.id === groupID);\r\n            if (group) {\r\n                group.monsters.push(monster);\r\n                Utils.sort(group.monsters);\r\n\r\n                this.setState({\r\n                    library: this.state.library\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private editMonster(monster: Monster) {\r\n        const copy = JSON.parse(JSON.stringify(monster));\r\n        this.setState({\r\n            modal: {\r\n                type: 'monster',\r\n                monster: copy,\r\n                showMonsters: false\r\n            }\r\n        });\r\n    }\r\n\r\n    private saveMonster() {\r\n        const group = this.state.library.find(g => g.id === this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            const original = group.monsters.find(m => m.id === this.state.modal.monster.id);\r\n            if (original) {\r\n                // We are editing a monster\r\n                const index = group.monsters.indexOf(original);\r\n                group.monsters[index] = this.state.modal.monster;\r\n                this.setState({\r\n                    library: this.state.library,\r\n                    modal: null\r\n                });\r\n            } else {\r\n                // We are adding a new monster\r\n                group.monsters.push(this.state.modal.monster);\r\n                this.setState({\r\n                    library: this.state.library,\r\n                    modal: null\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private toggleShowSimilarMonsters() {\r\n        // eslint-disable-next-line\r\n        this.state.modal.showMonsters = !this.state.modal.showMonsters;\r\n        this.setState({\r\n            modal: this.state.modal\r\n        });\r\n    }\r\n\r\n    private openDemographics() {\r\n        this.setState({\r\n            modal: {\r\n                type: 'demographics'\r\n            }\r\n        });\r\n    }\r\n\r\n    private cloneMonster(monster: Monster, name: string) {\r\n        const group = this.state.library.find(g => g.monsters.includes(monster));\r\n        if (group) {\r\n            const clone = Frankenstein.clone(monster, name);\r\n            group.monsters.push(clone);\r\n            Utils.sort(group.monsters);\r\n\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    private addOpenGameContent() {\r\n        fetch('./data/monsters.json')\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                json.forEach((data: any) => {\r\n                    try {\r\n                        if (data.name) {\r\n                            const monster = Frankenstein.createFromJSON(data);\r\n\r\n                            let groupName = monster.tag || monster.category;\r\n                            if (groupName.indexOf('swarm') === 0) {\r\n                                groupName = 'swarm';\r\n                            }\r\n                            if (groupName === 'any race') {\r\n                                groupName = 'npc';\r\n                            }\r\n\r\n                            let group = this.state.library.find(p => p.name === groupName);\r\n                            if (!group) {\r\n                                group = {\r\n                                    id: Utils.guid(),\r\n                                    name: groupName,\r\n                                    monsters: []\r\n                                };\r\n                                this.state.library.push(group);\r\n                            }\r\n                            group.monsters.push(monster);\r\n                        }\r\n                    } catch (e) {\r\n                        console.error(e);\r\n                    }\r\n                });\r\n\r\n                Utils.sort(this.state.library);\r\n\r\n                this.setState({\r\n                    view: 'library',\r\n                    library: this.state.library\r\n                });\r\n            });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Encounter screen\r\n\r\n    private addEncounter() {\r\n        const encounter = Factory.createEncounter();\r\n        encounter.name = 'new encounter';\r\n        const encounters = ([] as Encounter[]).concat(this.state.encounters, [encounter]);\r\n        Utils.sort(encounters);\r\n\r\n        this.setState({\r\n            encounters: encounters,\r\n            selectedEncounterID: encounter.id\r\n        });\r\n    }\r\n\r\n    private removeEncounter() {\r\n        const encounter = this.state.encounters.find(e => e.id === this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            const index = this.state.encounters.indexOf(encounter);\r\n            this.state.encounters.splice(index, 1);\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters,\r\n                selectedEncounterID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private addEncounterSlot(monster: Monster, waveID: string | null) {\r\n        const group = this.state.library.find(g => g.monsters.includes(monster));\r\n        if (group) {\r\n            const slot = Factory.createEncounterSlot();\r\n            slot.monsterGroupName = group.name;\r\n            slot.monsterName = monster.name;\r\n            const encounter = this.state.encounters.find(e => e.id === this.state.selectedEncounterID);\r\n            if (encounter) {\r\n                if (waveID !== null) {\r\n                    const wave = encounter.waves.find(w => w.id === waveID);\r\n                    if (wave) {\r\n                        wave.slots.push(slot);\r\n                        this.sortEncounterSlots(wave);\r\n                    }\r\n                } else {\r\n                    encounter.slots.push(slot);\r\n                    this.sortEncounterSlots(encounter);\r\n                }\r\n\r\n                this.setState({\r\n                    encounters: this.state.encounters\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeEncounterSlot(slot: EncounterSlot, waveID: string | null) {\r\n        const encounter = this.state.encounters.find(e => e.id === this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            if (waveID) {\r\n                const wave = encounter.waves.find(w => w.id === waveID);\r\n                if (wave) {\r\n                    const index = wave.slots.indexOf(slot);\r\n                    wave.slots.splice(index, 1);\r\n                }\r\n            } else {\r\n                const n = encounter.slots.indexOf(slot);\r\n                encounter.slots.splice(n, 1);\r\n            }\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters\r\n            });\r\n        }\r\n    }\r\n\r\n    private sortEncounterSlots(slotContainer: { slots: EncounterSlot[] }) {\r\n        slotContainer.slots.sort((a, b) => {\r\n            const aName = a.monsterName.toLowerCase();\r\n            const bName = b.monsterName.toLowerCase();\r\n            if (aName < bName) { return -1; }\r\n            if (aName > bName) { return 1; }\r\n            return 0;\r\n        });\r\n    }\r\n\r\n    private addWaveToEncounter() {\r\n        const encounter = this.state.encounters.find(e => e.id === this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            const wave = Factory.createEncounterWave();\r\n            wave.name = 'wave ' + (encounter.waves.length + 2);\r\n            encounter.waves.push(wave);\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters\r\n            });\r\n        }\r\n    }\r\n\r\n    private removeWave(wave: EncounterWave) {\r\n        const encounter = this.state.encounters.find(e => e.id === this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            const index = encounter.waves.indexOf(wave);\r\n            encounter.waves.splice(index, 1);\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters\r\n            });\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Map screen\r\n\r\n    private addMapFolio() {\r\n        const folio = Factory.createMapFolio();\r\n        folio.name = 'new folio';\r\n        const folios = ([] as MapFolio[]).concat(this.state.mapFolios, [folio]);\r\n        Utils.sort(folios);\r\n\r\n        this.setState({\r\n            mapFolios: folios,\r\n            selectedMapFolioID: folio.id\r\n        });\r\n    }\r\n\r\n    private removeMapFolio() {\r\n        const folio = this.state.mapFolios.find(f => f.id === this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            const index = this.state.mapFolios.indexOf(folio);\r\n            this.state.mapFolios.splice(index, 1);\r\n\r\n            this.setState({\r\n                mapFolios: this.state.mapFolios,\r\n                selectedMapFolioID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private addMap() {\r\n        const folio = this.state.mapFolios.find(f => f.id === this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            const map = Factory.createMap();\r\n            map.name = 'new map';\r\n            folio.maps.push(map);\r\n\r\n            this.setState({\r\n                mapFolios: this.state.mapFolios\r\n            });\r\n        }\r\n    }\r\n\r\n    private editMap(map: Map) {\r\n        const copy = JSON.parse(JSON.stringify(map));\r\n        this.setState({\r\n            modal: {\r\n                type: 'map',\r\n                map: copy\r\n            }\r\n        });\r\n    }\r\n\r\n    private saveMap() {\r\n        const folio = this.state.mapFolios.find(f => f.id === this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            const original = folio.maps.find(m => m.id === this.state.modal.map.id);\r\n            if (original) {\r\n                const index = folio.maps.indexOf(original);\r\n                folio.maps[index] = this.state.modal.map;\r\n                this.setState({\r\n                    mapFolios: this.state.mapFolios,\r\n                    modal: null\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeMap(map: Map) {\r\n        const folio = this.state.mapFolios.find(f => f.id === this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            const index = folio.maps.indexOf(map);\r\n            folio.maps.splice(index, 1);\r\n            this.setState({\r\n                mapFolios: this.state.mapFolios\r\n            });\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Combat screen\r\n\r\n    private createCombat() {\r\n        const party = this.state.parties.length === 1 ? this.state.parties[0] : null;\r\n        const encounter = this.state.encounters.length === 1 ? this.state.encounters[0] : null;\r\n\r\n        const setup = Factory.createCombatSetup();\r\n        setup.partyID = party ? party.id : null;\r\n        setup.encounterID = encounter ? encounter.id : null;\r\n        if (encounter) {\r\n            setup.monsterNames = Utils.getMonsterNames(encounter);\r\n        }\r\n\r\n        this.setState({\r\n            modal: {\r\n                type: 'combat-start',\r\n                combatSetup: setup\r\n            }\r\n        });\r\n    }\r\n\r\n    private startCombat() {\r\n        const combatSetup: CombatSetup = this.state.modal.combatSetup;\r\n        const party = this.state.parties.find(p => p.id === combatSetup.partyID);\r\n        const encounter = this.state.encounters.find(e => e.id === combatSetup.encounterID);\r\n        if (party && encounter) {\r\n            const partyName = party.name || 'unnamed party';\r\n            const encounterName = encounter.name || 'unnamed encounter';\r\n\r\n            const combat = Factory.createCombat();\r\n            combat.name = partyName + ' vs ' + encounterName;\r\n            combat.encounterID = encounter.id;\r\n\r\n            // Add a copy of each PC to the encounter\r\n            party.pcs.filter(pc => pc.active).forEach(pc => {\r\n                const combatant = JSON.parse(JSON.stringify(pc));\r\n\r\n                combatant.current = false;\r\n                combatant.pending = true;\r\n                combatant.active = false;\r\n                combatant.defeated = false;\r\n\r\n                combatant.displayName = pc.name;\r\n                combatant.initiative = 10;\r\n                combatant.hp = null;\r\n                combatant.conditions = [];\r\n                combatant.altitude = 0;\r\n\r\n                combat.combatants.push(combatant);\r\n            });\r\n\r\n            encounter.slots.forEach(slot => {\r\n                const monster = this.getMonster(slot.monsterName, slot.monsterGroupName);\r\n                if (monster) {\r\n                    const init = parseInt(Utils.modifier(monster.abilityScores.dex), 10);\r\n                    const groupRoll = Utils.dieRoll();\r\n\r\n                    for (let n = 0; n !== slot.count; ++n) {\r\n                        const singleRoll = Utils.dieRoll();\r\n\r\n                        const combatant = JSON.parse(JSON.stringify(monster));\r\n                        combatant.id = Utils.guid();\r\n\r\n                        combatant.displayName = null;\r\n                        if (combatSetup.monsterNames) {\r\n                            const slotNames = combatSetup.monsterNames.find(names => names.id === slot.id);\r\n                            if (slotNames) {\r\n                                combatant.displayName = slotNames.names[n];\r\n                            }\r\n                        }\r\n\r\n                        switch (combatSetup.encounterInitMode) {\r\n                            case 'manual':\r\n                                combatant.initiative = 10;\r\n                                break;\r\n                            case 'group':\r\n                                combatant.initiative = init + groupRoll;\r\n                                break;\r\n                            case 'individual':\r\n                                combatant.initiative = init + singleRoll;\r\n                                break;\r\n                            default:\r\n                                // Do nothing\r\n                                break;\r\n                        }\r\n\r\n                        combatant.current = false;\r\n                        combatant.pending = (combatSetup.encounterInitMode === 'manual');\r\n                        combatant.active = (combatSetup.encounterInitMode !== 'manual');\r\n                        combatant.defeated = false;\r\n\r\n                        combatant.hp = combatant.hpMax;\r\n                        combatant.conditions = [];\r\n                        combatant.altitude = 0;\r\n\r\n                        combat.combatants.push(combatant);\r\n                    }\r\n                } else {\r\n                    combat.issues.push('unknown monster: ' + slot.monsterName + ' in group ' + slot.monsterGroupName);\r\n                }\r\n            });\r\n\r\n            combat.combatants.forEach(c => c.altitude = 0);\r\n\r\n            this.sortCombatants(combat);\r\n\r\n            if (combatSetup.folioID && combatSetup.mapID) {\r\n                const folio = this.state.mapFolios.find(f => f.id === combatSetup.folioID);\r\n                if (folio) {\r\n                    const map = folio.maps.find(m => m.id === combatSetup.mapID);\r\n                    if (map) {\r\n                        combat.map = JSON.parse(JSON.stringify(map));\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.setState({\r\n                combats: ([] as Combat[]).concat(this.state.combats, [combat]),\r\n                selectedCombatID: combat.id,\r\n                modal: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private openWaveModal() {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            const encounter = this.state.encounters.find(e => e.id === combat.encounterID);\r\n            if (encounter) {\r\n                const setup = Factory.createCombatSetup();\r\n                setup.encounterID = combat.encounterID;\r\n                setup.monsterNames = Utils.getMonsterNames(encounter);\r\n\r\n                this.setState({\r\n                    modal: {\r\n                        type: 'combat-wave',\r\n                        combatSetup: setup\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private pauseCombat() {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            combat.timestamp = new Date().toLocaleString();\r\n            this.setState({\r\n                combats: this.state.combats,\r\n                selectedCombatID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private resumeCombat(combat: Combat) {\r\n        this.setState({\r\n            selectedCombatID: combat.id\r\n        });\r\n    }\r\n\r\n    private endCombat() {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            const index = this.state.combats.indexOf(combat);\r\n            this.state.combats.splice(index, 1);\r\n            this.setState({\r\n                combats: this.state.combats,\r\n                selectedCombatID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private makeCurrent(combatant: (Combatant & PC) | (Combatant & Monster) | null, newRound: boolean) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            // Handle start-of-turn conditions\r\n            combat.combatants.filter(actor => actor.conditions).forEach(actor => {\r\n                actor.conditions.forEach(c => {\r\n                    if (c.duration) {\r\n                        switch (c.duration.type) {\r\n                            case 'saves':\r\n                                // If it's my condition, and point is START, notify the user\r\n                                if (combat && combatant && (actor.id === combatant.id) && (c.duration.point === 'start')) {\r\n                                    combat.notifications.push({\r\n                                        id: Utils.guid(),\r\n                                        type: 'condition-save',\r\n                                        data: c,\r\n                                        combatant: combatant as Combatant & Monster\r\n                                    });\r\n                                }\r\n                                break;\r\n                            case 'combatant':\r\n                                // If this refers to me, and point is START, remove it\r\n                                if (combat && combatant && (c.duration.combatantID === combatant.id) && (c.duration.point === 'start')) {\r\n                                    const index = actor.conditions.indexOf(c);\r\n                                    actor.conditions.splice(index, 1);\r\n                                    // Notify the user\r\n                                    combat.notifications.push({\r\n                                        id: Utils.guid(),\r\n                                        type: 'condition-end',\r\n                                        data: c,\r\n                                        combatant: combatant as Combatant & Monster\r\n                                    });\r\n                                }\r\n                                break;\r\n                            case 'rounds':\r\n                                // If it's my condition, decrement the condition\r\n                                if (combatant && (actor.id === combatant.id)) {\r\n                                    c.duration.count -= 1;\r\n                                }\r\n                                // If it's now at 0, remove it\r\n                                if (c.duration.count === 0) {\r\n                                    const n = actor.conditions.indexOf(c);\r\n                                    actor.conditions.splice(n, 1);\r\n                                    if (combat) {\r\n                                        // Notify the user\r\n                                        combat.notifications.push({\r\n                                            id: Utils.guid(),\r\n                                            type: 'condition-end',\r\n                                            data: c,\r\n                                            combatant: combatant as Combatant & Monster\r\n                                        });\r\n                                    }\r\n                                }\r\n                                break;\r\n                            default:\r\n                                // Do nothing\r\n                                break;\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n\r\n            // Handle recharging traits\r\n            if (combatant && (combatant.type === 'monster')) {\r\n                (combatant as Monster).traits\r\n                    .filter(t => (t.uses > 0) && t.usage.toLowerCase().startsWith('recharge '))\r\n                    .forEach(t => {\r\n                        combat.notifications.push({\r\n                            id: Utils.guid(),\r\n                            type: 'trait-recharge',\r\n                            data: t,\r\n                            combatant: combatant as Combatant & Monster\r\n                        });\r\n                    });\r\n            }\r\n\r\n            combat.combatants.forEach(c => {\r\n                c.current = false;\r\n            });\r\n            if (combatant) {\r\n                combatant.current = true;\r\n            }\r\n\r\n            if (newRound) {\r\n                combat.round += 1;\r\n            }\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private makeActive(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            combatant.pending = false;\r\n            combatant.active = true;\r\n            combatant.defeated = false;\r\n\r\n            this.sortCombatants(combat);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private makeDefeated(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        combatant.pending = false;\r\n        combatant.active = false;\r\n        combatant.defeated = true;\r\n\r\n        if (combatant.current) {\r\n            this.endTurn(combatant);\r\n        } else {\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private addWaveToCombat() {\r\n        const combatSetup: CombatSetup = this.state.modal.combatSetup;\r\n        const encounter = this.state.encounters.find(e => e.id === combatSetup.encounterID);\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combatSetup && encounter && combat) {\r\n            const wave = encounter.waves.find(w => w.id === combatSetup.waveID);\r\n            if (wave) {\r\n                wave.slots.forEach(slot => {\r\n                    const monster = this.getMonster(slot.monsterName, slot.monsterGroupName);\r\n                    if (monster) {\r\n                        const init = parseInt(Utils.modifier(monster.abilityScores.dex), 10);\r\n                        const groupRoll = Utils.dieRoll();\r\n\r\n                        for (let n = 0; n !== slot.count; ++n) {\r\n                            const singleRoll = Utils.dieRoll();\r\n\r\n                            const combatant = JSON.parse(JSON.stringify(monster));\r\n                            combatant.id = Utils.guid();\r\n\r\n                            combatant.displayName = null;\r\n                            if (combatSetup.monsterNames) {\r\n                                const slotNames = combatSetup.monsterNames.find(names => names.id === slot.id);\r\n                                if (slotNames) {\r\n                                    combatant.displayName = slotNames.names[n];\r\n                                }\r\n                            }\r\n\r\n                            switch (combatSetup.encounterInitMode) {\r\n                                case 'manual':\r\n                                    combatant.initiative = 10;\r\n                                    break;\r\n                                case 'group':\r\n                                    combatant.initiative = init + groupRoll;\r\n                                    break;\r\n                                case 'individual':\r\n                                    combatant.initiative = init + singleRoll;\r\n                                    break;\r\n                                default:\r\n                                    // Do nothing\r\n                                    break;\r\n                            }\r\n\r\n                            combatant.current = false;\r\n                            combatant.pending = (this.state.modal.combatSetup.encounterInitMode === 'manual');\r\n                            combatant.active = (this.state.modal.combatSetup.encounterInitMode !== 'manual');\r\n                            combatant.defeated = false;\r\n\r\n                            combatant.hp = combatant.hpMax;\r\n                            combatant.conditions = [];\r\n\r\n                            if (combat) {\r\n                                combat.combatants.push(combatant);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (combat) {\r\n                            const issue = 'unknown monster: ' + slot.monsterName + ' in group ' + slot.monsterGroupName;\r\n                            combat.issues.push(issue);\r\n                        }\r\n                    }\r\n                });\r\n\r\n                this.sortCombatants(combat);\r\n\r\n                this.setState({\r\n                    combats: this.state.combats,\r\n                    modal: null\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeCombatant(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            const index = combat.combatants.indexOf(combatant);\r\n            combat.combatants.splice(index, 1);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private mapAdd(combatant: ((Combatant & PC) | (Combatant & Monster)), x: number, y: number) {\r\n        const item = Factory.createMapItem();\r\n        item.id = combatant.id;\r\n        item.type = combatant.type as 'pc' | 'monster';\r\n        item.x = x;\r\n        item.y = y;\r\n        let size = 1;\r\n        if (combatant.type === 'monster') {\r\n            size = Utils.miniSize((combatant as Monster).size);\r\n        }\r\n        item.height = size;\r\n        item.width = size;\r\n\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat && combat.map) {\r\n            combat.map.items.push(item);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private mapMove(combatant: (Combatant & PC) | (Combatant & Monster), dir: string) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat && combat.map) {\r\n            const item = combat.map.items.find(i => i.id === combatant.id);\r\n            if (item) {\r\n                switch (dir) {\r\n                    case 'N':\r\n                        item.y -= 1;\r\n                        break;\r\n                    case 'NE':\r\n                        item.x += 1;\r\n                        item.y -= 1;\r\n                        break;\r\n                    case 'E':\r\n                        item.x += 1;\r\n                        break;\r\n                    case 'SE':\r\n                        item.x += 1;\r\n                        item.y += 1;\r\n                        break;\r\n                    case 'S':\r\n                        item.y += 1;\r\n                        break;\r\n                    case 'SW':\r\n                        item.x -= 1;\r\n                        item.y += 1;\r\n                        break;\r\n                    case 'W':\r\n                        item.x -= 1;\r\n                        break;\r\n                    case 'NW':\r\n                        item.x -= 1;\r\n                        item.y -= 1;\r\n                        break;\r\n                    default:\r\n                        // Do nothing\r\n                        break;\r\n                }\r\n\r\n                this.setState({\r\n                    combats: this.state.combats\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private mapRemove(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat && combat.map) {\r\n            const item = combat.map.items.find(i => i.id === combatant.id);\r\n            if (item) {\r\n                const index = combat.map.items.indexOf(item);\r\n                combat.map.items.splice(index, 1);\r\n\r\n                this.setState({\r\n                    combats: this.state.combats\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private endTurn(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            // Handle end-of-turn conditions\r\n            combat.combatants.filter(actor => actor.conditions).forEach(actor => {\r\n                actor.conditions.forEach(c => {\r\n                    if (c.duration) {\r\n                        switch (c.duration.type) {\r\n                            case 'saves':\r\n                                // If it's my condition, and point is END, notify the user\r\n                                if (combat && (actor.id === combatant.id) && (c.duration.point === 'end')) {\r\n                                    const saveNotification = Factory.createNotification();\r\n                                    saveNotification.type = 'condition-save';\r\n                                    saveNotification.data = c;\r\n                                    saveNotification.combatant = combatant as Combatant & Monster;\r\n                                    combat.notifications.push(saveNotification);\r\n                                }\r\n                                break;\r\n                            case 'combatant':\r\n                                // If this refers to me, and point is END, remove it\r\n                                if (combat && (c.duration.combatantID === combatant.id) && (c.duration.point === 'end')) {\r\n                                    const n = actor.conditions.indexOf(c);\r\n                                    actor.conditions.splice(n, 1);\r\n                                    // Notify the user\r\n                                    const endNotification = Factory.createNotification();\r\n                                    endNotification.type = 'condition-end';\r\n                                    endNotification.data = c;\r\n                                    endNotification.combatant = combatant as Combatant & Monster;\r\n                                    combat.notifications.push(endNotification);\r\n                                }\r\n                                break;\r\n                            case 'rounds':\r\n                                // We check this at the beginning of each turn, not at the end\r\n                                break;\r\n                            default:\r\n                                // Do nothing\r\n                                break;\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n\r\n            const active = combat.combatants.filter(c => {\r\n                return c.current || (!c.pending && c.active && !c.defeated);\r\n            });\r\n            if (active.length === 0) {\r\n                // There's no-one left in the fight\r\n                this.makeCurrent(null, false);\r\n            } else if ((active.length === 1) && (active[0].defeated)) {\r\n                // The only person in the fight is me, and I'm defeated\r\n                this.makeCurrent(null, false);\r\n            } else {\r\n                let index = active.indexOf(combatant) + 1;\r\n                let newRound = false;\r\n                if (index >= active.length) {\r\n                    index = 0;\r\n                    newRound = true;\r\n                }\r\n                this.makeCurrent(active[index], newRound);\r\n            }\r\n        }\r\n    }\r\n\r\n    private changeHP(combatant: Combatant & Monster, hp: number, temp: number) {\r\n        combatant.hp = hp;\r\n        combatant.hpTemp = temp;\r\n\r\n        this.setState({\r\n            combats: this.state.combats\r\n        });\r\n    }\r\n\r\n    private addCondition(combatant: Combatant & Monster) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            const condition = Factory.createCondition();\r\n            condition.name = 'blinded';\r\n\r\n            this.setState({\r\n                modal: {\r\n                    type: 'condition-add',\r\n                    condition: condition,\r\n                    combatant: combatant,\r\n                    combat: combat\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private addConditionFromModal() {\r\n        this.state.modal.combatant.conditions.push(this.state.modal.condition);\r\n\r\n        this.setState({\r\n            combats: this.state.combats,\r\n            modal: null\r\n        });\r\n    }\r\n\r\n    private editCondition(combatant: Combatant & Monster, condition: Condition) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            this.setState({\r\n                modal: {\r\n                    type: 'condition-edit',\r\n                    condition: condition,\r\n                    combatant: combatant,\r\n                    combat: combat\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private editConditionFromModal() {\r\n        const conditions: Condition[] = this.state.modal.combatant.conditions;\r\n        const original = conditions.find(c => c.id === this.state.modal.condition.id);\r\n        if (original) {\r\n            const index = conditions.indexOf(original);\r\n            // eslint-disable-next-line\r\n            conditions[index] = this.state.modal.condition;\r\n\r\n            this.setState({\r\n                combats: this.state.combats,\r\n                modal: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private removeCondition(combatant: Combatant & Monster, conditionID: string) {\r\n        const condition = combatant.conditions.find(c => c.id === conditionID);\r\n        if (condition) {\r\n            const index = combatant.conditions.indexOf(condition);\r\n            combatant.conditions.splice(index, 1);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private sortCombatants(combat: Combat) {\r\n        combat.combatants.sort((a, b) => {\r\n            // First sort by initiative, descending\r\n            if (a.initiative && b.initiative && (a.initiative < b.initiative)) { return 1; }\r\n            if (a.initiative && b.initiative && (a.initiative > b.initiative)) { return -1; }\r\n            // Then sort by name, ascending\r\n            if (a.name < b.name) { return -1; }\r\n            if (a.name > b.name) { return 1; }\r\n            return 0;\r\n        });\r\n    }\r\n\r\n    private closeNotification(notification: Notification, removeCondition: boolean) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            const index = combat.notifications.indexOf(notification);\r\n            combat.notifications.splice(index, 1);\r\n\r\n            if (removeCondition && notification.combatant && notification.data) {\r\n                const conditionIndex = notification.combatant.conditions.indexOf(notification.data as Condition);\r\n                notification.combatant.conditions.splice(conditionIndex, 1);\r\n            }\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    private setView(view: string) {\r\n        this.setState({\r\n            view: view\r\n        });\r\n    }\r\n\r\n    private openAbout() {\r\n        this.setState({\r\n            modal: {\r\n                type: 'about'\r\n            }\r\n        });\r\n    }\r\n\r\n    private closeModal() {\r\n        this.setState({\r\n            modal: null\r\n        });\r\n    }\r\n\r\n    private selectParty(party: Party | null) {\r\n        this.setState({\r\n            selectedPartyID: party ? party.id : null\r\n        });\r\n    }\r\n\r\n    private selectMonsterGroup(group: MonsterGroup | null) {\r\n        this.setState({\r\n            selectedMonsterGroupID: group ? group.id : null\r\n        });\r\n    }\r\n\r\n    private selectEncounter(encounter: Encounter | null) {\r\n        this.setState({\r\n            selectedEncounterID: encounter ? encounter.id : null\r\n        });\r\n    }\r\n\r\n    private selectMapFolio(mapFolio: MapFolio | null) {\r\n        this.setState({\r\n            selectedMapFolioID: mapFolio ? mapFolio.id : null\r\n        });\r\n    }\r\n\r\n    private resetAll() {\r\n        this.setState({\r\n            parties: [],\r\n            selectedPartyID: null,\r\n            library: [],\r\n            selectedMonsterGroupID: null,\r\n            encounters: [],\r\n            selectedEncounterID: null,\r\n            mapFolios: [],\r\n            selectedMapFolioID: null,\r\n            combats: [],\r\n            selectedCombatID: null\r\n        });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    private getMonster(monsterName: string, groupName: string) {\r\n        const group = this.state.library.find(p => p.name === groupName);\r\n        if (group) {\r\n            return group.monsters.find(monster => monster.name === monsterName);\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    private changeValue(combatant: any, type: string, value: any) {\r\n        switch (type) {\r\n            case 'hp':\r\n                value = Math.min(value, combatant.hpMax);\r\n                value = Math.max(value, 0);\r\n                break;\r\n            case 'hpTemp':\r\n                value = Math.max(value, 0);\r\n                break;\r\n            case 'level':\r\n                value = Math.max(value, 1);\r\n                value = (combatant.player !== undefined) ? Math.min(value, 20) : Math.min(value, 6);\r\n                break;\r\n            case 'count':\r\n                value = Math.max(value, 1);\r\n                break;\r\n            case 'hitDice':\r\n                value = Math.max(value, 1);\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        const tokens = type.split('.');\r\n        let obj = combatant;\r\n        for (let n = 0; n !== tokens.length; ++n) {\r\n            const token = tokens[n];\r\n            if (n === tokens.length - 1) {\r\n                obj[token] = value;\r\n            } else {\r\n                obj = obj[token];\r\n            }\r\n        }\r\n\r\n        Utils.sort(this.state.parties);\r\n        Utils.sort(this.state.library);\r\n        Utils.sort(this.state.encounters);\r\n\r\n        if (type === 'initiative') {\r\n            if (!(combatant as Combatant).pending) {\r\n                const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n                this.sortCombatants(combat as Combat);\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            parties: this.state.parties,\r\n            library: this.state.library,\r\n            encounters: this.state.encounters,\r\n            combats: this.state.combats,\r\n            selectedPartyID: this.state.selectedPartyID,\r\n            selectedMonsterGroupID: this.state.selectedMonsterGroupID,\r\n            selectedEncounterID: this.state.selectedEncounterID,\r\n            selectedCombatID: this.state.selectedCombatID,\r\n            options: this.state.options,\r\n            modal: this.state.modal\r\n        });\r\n    }\r\n\r\n    private nudgeValue(combatant: any, type: string, delta: number) {\r\n        const tokens = type.split('.');\r\n        let obj = combatant;\r\n        for (let n = 0; n !== tokens.length; ++n) {\r\n            const token = tokens[n];\r\n            if (n === tokens.length - 1) {\r\n                let value = null;\r\n                value = (token === 'challenge') ? Utils.nudgeChallenge(obj.challenge, delta) : obj[token] + delta;\r\n                this.changeValue(combatant, type, value);\r\n            } else {\r\n                obj = obj[token];\r\n            }\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    private getActions() {\r\n        switch (this.state.view) {\r\n            case 'parties':\r\n            case 'encounter':\r\n            case 'maps':\r\n                return (\r\n                    <div className='actions'>\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='search'\r\n                                value={this.state.filter}\r\n                                onChange={event => this.changeValue(this.state, 'filter', event.target.value)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                );\r\n            case 'library':\r\n                return (\r\n                    <div className='actions'>\r\n                        <div className='section'>\r\n                            <button onClick={() => this.openDemographics()}>demographics</button>\r\n                        </div>\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='search'\r\n                                value={this.state.filter}\r\n                                onChange={event => this.changeValue(this.state, 'filter', event.target.value)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                );\r\n            case 'combat':\r\n                const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n                if (combat) {\r\n                    const encounter = this.state.encounters.find(e => e.id === combat.encounterID);\r\n                    if (encounter) {\r\n                        let xp = 0;\r\n                        combat.combatants.filter(c => c.type === 'monster')\r\n                            .forEach(combatant => {\r\n                                xp += Utils.experience((combatant as Combatant & Monster).challenge);\r\n                            });\r\n\r\n                        return (\r\n                            <div className='actions'>\r\n                                <div className='section'>\r\n                                    <div className='text'>round: {combat.round}</div>\r\n                                </div>\r\n                                <div className='section'>\r\n                                    <div className='text'>xp: {xp}</div>\r\n                                </div>\r\n                                <div className='section' style={{ display: encounter.waves.length === 0 ? 'none' : ''}}>\r\n                                    <button onClick={() => this.openWaveModal()}>add wave</button>\r\n                                </div>\r\n                                <div className='section'>\r\n                                    <button onClick={() => this.pauseCombat()}>pause encounter</button>\r\n                                </div>\r\n                                <div className='section'>\r\n                                    <button onClick={() => this.endCombat()}>end encounter</button>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    }\r\n                } else {\r\n                    return (\r\n                        <div className='actions'>\r\n                            <div className='section'>\r\n                                <input\r\n                                    type='text'\r\n                                    placeholder='search'\r\n                                    value={this.state.filter}\r\n                                    onChange={event => this.changeValue(this.state, 'filter', event.target.value)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private getContent() {\r\n        switch (this.state.view) {\r\n            case 'home':\r\n                return (\r\n                    <HomeScreen\r\n                        library={this.state.library}\r\n                        addOpenGameContent={() => this.addOpenGameContent()}\r\n                    />\r\n                );\r\n            case 'parties':\r\n                return (\r\n                    <PartiesScreen\r\n                        parties={this.state.parties}\r\n                        selection={this.state.parties.find(p => p.id === this.state.selectedPartyID) || null}\r\n                        filter={this.state.filter}\r\n                        showHelp={this.state.options.showHelp}\r\n                        selectParty={party => this.selectParty(party)}\r\n                        addParty={() => this.addParty()}\r\n                        removeParty={() => this.removeParty()}\r\n                        addPC={() => this.addPC()}\r\n                        removePC={pc => this.removePC(pc)}\r\n                        sortPCs={() => this.sortPCs()}\r\n                        changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                        nudgeValue={(combatant, type, delta) => this.nudgeValue(combatant, type, delta)}\r\n                    />\r\n                );\r\n            case 'library':\r\n                return (\r\n                    <MonsterLibraryScreen\r\n                        library={this.state.library}\r\n                        selection={this.state.library.find(g => g.id === this.state.selectedMonsterGroupID) || null}\r\n                        filter={this.state.filter}\r\n                        showHelp={this.state.options.showHelp}\r\n                        selectMonsterGroup={group => this.selectMonsterGroup(group)}\r\n                        addMonsterGroup={() => this.addMonsterGroup()}\r\n                        removeMonsterGroup={() => this.removeMonsterGroup()}\r\n                        addMonster={() => this.addMonster()}\r\n                        generateMonster={() => this.generateMonster()}\r\n                        removeMonster={monster => this.removeMonster(monster)}\r\n                        sortMonsters={() => this.sortMonsters()}\r\n                        changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                        nudgeValue={(combatant, type, delta) => this.nudgeValue(combatant, type, delta)}\r\n                        editMonster={combatant => this.editMonster(combatant)}\r\n                        cloneMonster={(combatant, name) => this.cloneMonster(combatant, name)}\r\n                        moveToGroup={(combatant, groupID) => this.moveToGroup(combatant, groupID)}\r\n                    />\r\n                );\r\n            case 'encounter':\r\n                return (\r\n                    <EncounterBuilderScreen\r\n                        encounters={this.state.encounters}\r\n                        selection={this.state.encounters.find(e => e.id === this.state.selectedEncounterID) || null}\r\n                        filter={this.state.filter}\r\n                        parties={this.state.parties}\r\n                        library={this.state.library}\r\n                        showHelp={this.state.options.showHelp}\r\n                        selectEncounter={encounter => this.selectEncounter(encounter)}\r\n                        addEncounter={() => this.addEncounter()}\r\n                        removeEncounter={() => this.removeEncounter()}\r\n                        addWave={() => this.addWaveToEncounter()}\r\n                        removeWave={wave => this.removeWave(wave)}\r\n                        getMonster={(monsterName, groupName) => this.getMonster(monsterName, groupName) || null}\r\n                        addEncounterSlot={(monster, waveID) => this.addEncounterSlot(monster, waveID)}\r\n                        removeEncounterSlot={(slot, waveID) => this.removeEncounterSlot(slot, waveID)}\r\n                        nudgeValue={(slot, type, delta) => this.nudgeValue(slot, type, delta)}\r\n                        changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                    />\r\n                );\r\n            case 'maps':\r\n                return (\r\n                    <MapFoliosScreen\r\n                        mapFolios={this.state.mapFolios}\r\n                        selection={this.state.mapFolios.find(f => f.id === this.state.selectedMapFolioID) || null}\r\n                        filter={this.state.filter}\r\n                        showHelp={this.state.options.showHelp}\r\n                        selectMapFolio={folio => this.selectMapFolio(folio)}\r\n                        addMapFolio={() => this.addMapFolio()}\r\n                        removeMapFolio={() => this.removeMapFolio()}\r\n                        addMap={() => this.addMap()}\r\n                        editMap={map => this.editMap(map)}\r\n                        removeMap={map => this.removeMap(map)}\r\n                        changeValue={(source, type, value) => this.changeValue(source, type, value)}\r\n                    />\r\n                );\r\n            case 'combat':\r\n                return (\r\n                    <CombatManagerScreen\r\n                        combats={this.state.combats}\r\n                        combat={this.state.combats.find(c => c.id === this.state.selectedCombatID) || null}\r\n                        filter={this.state.filter}\r\n                        showHelp={this.state.options.showHelp}\r\n                        createCombat={() => this.createCombat()}\r\n                        resumeEncounter={pausedCombat => this.resumeCombat(pausedCombat)}\r\n                        nudgeValue={(combatant, type, delta) => this.nudgeValue(combatant, type, delta)}\r\n                        changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                        makeCurrent={(combatant) => this.makeCurrent(combatant, false)}\r\n                        makeActive={(combatant) => this.makeActive(combatant)}\r\n                        makeDefeated={(combatant) => this.makeDefeated(combatant)}\r\n                        removeCombatant={(combatant) => this.removeCombatant(combatant)}\r\n                        addCondition={(combatant) => this.addCondition(combatant)}\r\n                        editCondition={(combatant, condition) => this.editCondition(combatant, condition)}\r\n                        removeCondition={(combatant, conditionID) => this.removeCondition(combatant, conditionID)}\r\n                        mapAdd={(combatant, x, y) => this.mapAdd(combatant, x, y)}\r\n                        mapMove={(combatant, dir) => this.mapMove(combatant, dir)}\r\n                        mapRemove={combatant => this.mapRemove(combatant)}\r\n                        endTurn={(combatant) => this.endTurn(combatant)}\r\n                        changeHP={(combatant, hp, temp) => this.changeHP(combatant, hp, temp)}\r\n                        close={(notification, removeCondition) => this.closeNotification(notification, removeCondition)}\r\n                    />\r\n                );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private getModal() {\r\n        if (this.state.modal) {\r\n            let modalSidebar = false;\r\n            let modalTitle = null;\r\n            let modalContent = null;\r\n            let modalAllowScroll = true;\r\n\r\n            const modalButtons = {\r\n                left: [] as JSX.Element[],\r\n                right: [\r\n                    <button key='close' onClick={() => this.closeModal()}>close</button>\r\n                ] as JSX.Element[]\r\n            };\r\n\r\n            switch (this.state.modal.type) {\r\n                case 'about':\r\n                    modalSidebar = true;\r\n                    modalContent = (\r\n                        <AboutModal\r\n                            options={this.state.options}\r\n                            resetAll={() => this.resetAll()}\r\n                            changeValue={(source, type, value) => this.changeValue(source, type, value)}\r\n                        />\r\n                    );\r\n                    modalButtons.right = [];\r\n                    break;\r\n                case 'demographics':\r\n                    modalSidebar = true;\r\n                    modalContent = (\r\n                        <DemographicsModal\r\n                            library={this.state.library}\r\n                        />\r\n                    );\r\n                    modalButtons.right = [];\r\n                    break;\r\n                case 'monster':\r\n                    modalTitle = 'monster editor';\r\n                    modalContent = (\r\n                        <MonsterEditorModal\r\n                            monster={this.state.modal.monster}\r\n                            library={this.state.library}\r\n                            showMonsters={this.state.modal.showMonsters}\r\n                        />\r\n                    );\r\n                    modalAllowScroll = false;\r\n                    modalButtons.left = [\r\n                        (\r\n                            <Checkbox\r\n                                key='similar'\r\n                                label='similar monsters'\r\n                                checked={this.state.modal.showMonsters}\r\n                                changeValue={() => this.toggleShowSimilarMonsters()}\r\n                            />\r\n                        )\r\n                    ];\r\n                    modalButtons.right = [\r\n                        <button key='save' onClick={() => this.saveMonster()}>save</button>,\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                case 'random-monster':\r\n                    modalTitle = 'random monster generator';\r\n                    modalContent = (\r\n                        <RandomMonsterModal\r\n                            monster={this.state.modal.monster}\r\n                            library={this.state.library}\r\n                        />\r\n                    );\r\n                    modalAllowScroll = false;\r\n                    modalButtons.right = [\r\n                        <button key='save' onClick={() => this.saveMonster()}>save</button>,\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                case 'map':\r\n                    modalTitle = 'map editor';\r\n                    modalContent = (\r\n                        <MapEditorModal\r\n                            map={this.state.modal.map}\r\n                        />\r\n                    );\r\n                    modalAllowScroll = false;\r\n                    modalButtons.right = [\r\n                        <button key='save' onClick={() => this.saveMap()}>save</button>,\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                case 'combat-start':\r\n                    modalTitle = 'start a new encounter';\r\n                    modalContent = (\r\n                        <CombatStartModal\r\n                            combatSetup={this.state.modal.combatSetup}\r\n                            parties={this.state.parties}\r\n                            encounters={this.state.encounters}\r\n                            mapFolios={this.state.mapFolios}\r\n                            getMonster={(monsterName, groupName) => this.getMonster(monsterName, groupName) || null}\r\n                            notify={() => this.setState({modal: this.state.modal})}\r\n                        />\r\n                    );\r\n                    modalAllowScroll = false;\r\n                    modalButtons.right = [\r\n                        (\r\n                            <button\r\n                                key='start encounter'\r\n                                className={this.state.modal.combatSetup.partyID && this.state.modal.combatSetup.encounterID ? '' : 'disabled'}\r\n                                onClick={() => this.startCombat()}\r\n                            >\r\n                                start encounter\r\n                            </button>\r\n                        ),\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                case 'combat-wave':\r\n                    modalTitle = 'encounter waves';\r\n                    modalContent = (\r\n                        <CombatStartModal\r\n                            combatSetup={this.state.modal.combatSetup}\r\n                            encounters={this.state.encounters}\r\n                            getMonster={(monsterName, groupName) => this.getMonster(monsterName, groupName) || null}\r\n                            notify={() => this.setState({modal: this.state.modal})}\r\n                        />\r\n                    );\r\n                    modalAllowScroll = false;\r\n                    modalButtons.right = [\r\n                        (\r\n                            <button\r\n                                key='add wave'\r\n                                className={this.state.modal.combatSetup.waveID !== null ? '' : 'disabled'}\r\n                                onClick={() => this.addWaveToCombat()}\r\n                            >\r\n                                add wave\r\n                            </button>\r\n                        ),\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                case 'condition-add':\r\n                    modalTitle = 'add a condition';\r\n                    modalContent = (\r\n                        <ConditionModal\r\n                            condition={this.state.modal.condition}\r\n                            combatant={this.state.modal.combatant}\r\n                            combat={this.state.modal.combat}\r\n                        />\r\n                    );\r\n                    modalAllowScroll = false;\r\n                    modalButtons.right = [\r\n                        <button key='add' onClick={() => this.addConditionFromModal()}>add</button>,\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                case 'condition-edit':\r\n                    modalTitle = 'edit condition';\r\n                    modalContent = (\r\n                        <ConditionModal\r\n                            condition={this.state.modal.condition}\r\n                            combatant={this.state.modal.combatant}\r\n                            combat={this.state.modal.combat}\r\n                        />\r\n                    );\r\n                    modalButtons.right = [\r\n                        <button key='save' onClick={() => this.editConditionFromModal()}>save</button>,\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                default:\r\n                    // Do nothing\r\n                    break;\r\n            }\r\n\r\n            return (\r\n                <div className='overlay' onClick={() => modalSidebar ? this.closeModal() : null}>\r\n                    <div className={modalSidebar ? 'modal sidebar' : 'modal'} onClick={e => e.stopPropagation()}>\r\n                        <div className='modal-header'>\r\n                            <div className='title'>{modalTitle}</div>\r\n                            {modalSidebar ? <img className='image' src={close} alt='close' onClick={() => this.closeModal()} /> : null}\r\n                        </div>\r\n                        <div className={modalAllowScroll ? 'modal-content scrollable' : 'modal-content'}>\r\n                            {modalContent}\r\n                        </div>\r\n                        <div className='modal-footer'>\r\n                            <div className='left'>{modalButtons.left}</div>\r\n                            <div className='right'>{modalButtons.right}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const content = this.getContent();\r\n            const actions = this.getActions();\r\n            const modal = this.getModal();\r\n\r\n            return (\r\n                <div className='dojo'>\r\n                    <Titlebar\r\n                        actions={actions}\r\n                        blur={modal !== null}\r\n                        openHome={() => this.setView('home')}\r\n                        openAbout={() => this.openAbout()}\r\n                    />\r\n                    <div className={(modal === null) ? 'page-content' : 'page-content blur'}>\r\n                        {content}\r\n                    </div>\r\n                    <Navbar\r\n                        view={this.state.view}\r\n                        parties={this.state.parties}\r\n                        library={this.state.library}\r\n                        encounters={this.state.encounters}\r\n                        blur={modal !== null}\r\n                        setView={view => this.setView(view)}\r\n                    />\r\n                    {modal}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './style/css/foundation.css';\r\nimport './style/scss/app.scss';\r\nimport './style/scss/controls.scss';\r\n\r\nimport Dojo from './components/dojo';\r\n\r\nReactDOM.render(<Dojo />, document.getElementById('root'));\r\n"],"sourceRoot":""}