{"version":3,"sources":["resources/images/down-arrow-black.svg","resources/images/down-arrow.svg","resources/images/close-black.svg","resources/images/warning.svg","resources/images/ellipsis.svg","resources/images/minus.svg","resources/images/plus.svg","resources/images/checked.svg","resources/images/unchecked.svg","resources/images/settings.svg","utils/utils.ts","utils/factory.ts","models/monster-group.ts","utils/frankenstein.ts","components/controls/confirm-button.tsx","components/controls/control-row.tsx","components/controls/dropdown.tsx","components/controls/expander.tsx","components/controls/radial.tsx","components/controls/spin.tsx","components/panels/ability-score-panel.tsx","components/panels/conditions-panel.tsx","components/panels/traits-panel.tsx","components/cards/info-card.tsx","components/cards/monster-card.tsx","components/cards/pc-card.tsx","components/panels/hit-point-gauge.tsx","components/panels/map-panel.tsx","components/list-items/combat-list-item.tsx","components/panels/card-group.tsx","components/panels/note.tsx","components/screens/combat-manager-screen.tsx","components/panels/difficulty-chart-panel.tsx","components/cards/encounter-card.tsx","components/cards/error-card.tsx","components/cards/filter-card.tsx","components/cards/wave-card.tsx","components/list-items/encounter-list-item.tsx","components/screens/encounter-builder-screen.tsx","components/panels/readaloud.tsx","components/screens/home-screen.tsx","components/cards/map-card.tsx","components/cards/map-folio-card.tsx","components/list-items/map-folio-list-item.tsx","components/screens/map-folios-screen.tsx","components/cards/monster-group-card.tsx","components/list-items/monster-group-list-item.tsx","components/screens/monster-library-screen.tsx","components/cards/party-card.tsx","components/list-items/party-list-item.tsx","components/screens/parties-screen.tsx","components/controls/checkbox.tsx","components/controls/selector.tsx","utils/text-generation.ts","components/dm-modules/language-module.tsx","components/dm-modules/name-module.tsx","components/dm-modules/reference-module.tsx","components/modals/about-modal.tsx","components/modals/combat-start-modal.tsx","models/condition.ts","components/controls/radio-group.tsx","components/modals/condition-modal.tsx","components/modals/demographics-modal.tsx","models/map-folio.ts","components/cards/map-tile-card.tsx","components/modals/map-editor-modal.tsx","components/modals/monster-editor-modal.tsx","components/panels/navbar.tsx","components/panels/titlebar.tsx","components/modals/random-monster-modal.tsx","components/dojo.tsx","index.js"],"names":["module","exports","__webpack_require__","p","Utils","monster","library","group","this","monsterIdToGroup","id","grp","find","g","monsters","includes","filter","text","result","toLowerCase","split","forEach","token","indexOf","s4","Math","floor","random","toString","substring","collection","sorts","arguments","length","undefined","field","dir","sort","a","b","order","fn","score","mod","modifierValue","str","size","cr","parseInt","push","ac","hpMin","hpMax","attack","dmgMin","dmgMax","save","count","level","difficulty","type","plural","value","delta","condition","name","combat","duration","saveDuration","saveType","toUpperCase","saves","saveDC","combatantDuration","point","c","combatants","cmb","combatantID","displayName","roundsDuration","rounds","encounter","monsterNames","slots","slot","names","monsterName","n","Factory","guid","pcs","active","player","race","classes","languages","passiveInsight","passiveInvestigation","passivePerception","initiative","url","category","tag","alignment","challenge","abilityScores","dex","con","int","wis","cha","hpTemp","hitDice","damage","resist","vulnerable","immune","savingThrows","speed","skills","senses","equipment","traits","conditionImmunities","usage","uses","waves","monsterGroupName","maps","items","x","y","width","height","terrain","partyID","encounterID","waveID","folioID","mapID","encounterInitMode","map","round","notifications","issues","timestamp","data","combatant","SIZE_TYPES","CATEGORY_TYPES","TRAIT_TYPES","Frankenstein","target","source","tokens","newValue","nudgeChallenge","changeValue","hpPerDie","hitDieType","hp","trait","_this","createMonster","subtype","parseChallenge","challenge_rating","armor_class","hit_points","index","hit_dice","strength","dexterity","constitution","intelligence","wisdom","charisma","damage_resistances","damage_vulnerabilities","damage_immunities","condition_immunities","skill","special_abilities","rawTrait","buildTrait","actions","legendary_actions","openBracket","closeBracket","desc","replace","copy","JSON","parse","stringify","createTrait","traitType","splice","t1","t2","index1","index2","_this2","setRandomValue","m","t","distinct","current","d","addedIDs","copyTrait","findIndex","avg","ConfirmButton","props","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","pressed","setState","toggle","callback","content","react_default","createElement","className","src","warning","alt","details","onClick","perform","disabled","ex","console","error","React","Component","defaultProps","ControlRow","style","controls","Dropdown","open","e","stopPropagation","optionID","select","options","selectedText","selectedID","option","o","placeholder","key","title","ellipsis","dropdown_DropdownOption","selected","toggleOpen","DropdownOption","_this3","click","Expander","expanded","arrow","Radial","dir2","direction","showOut","showIn","showDiag","display","transform","padding","Spin","nudgeValue","preventDefault","minusBtns","plusBtns","factors","factor","onTouchEnd","touchEnd","reverse","minus","plus","infoWidth","label","AbilityScorePanel","showAbilityScores","edit","spin_Spin","toggleAbilityScores","modifier","ConditionsPanel","conditions","conditions_panel_ConditionPanel","nudgeConditionValue","editCondition","removeCondition","conditionID","addCondition","ConditionPanel","conditionDurationText","description","conditionText","expander_Expander","showdown","Showdown","Converter","TraitsPanel","prevTrait","nextTrait","traits_panel_TraitPanel","mode","action","removeTrait","swapTraits","traitsByType","match","list","createTraitPanel","addTrait","createSection","TraitPanel","maxUses","heading","used","startsWith","found","markdown","dangerouslySetInnerHTML","__html","makeHtml","onChange","event","control_row_ControlRow","confirm_button_ConfirmButton","InfoCard","MonsterCard","showDetails","cloneName","damageOrHealing","max","min","changeHP","temp","val","sizeAndType","align","wave","_this4","some","s","die","conMod","conModStr","_this5","editMonster","setCloneName","cloneMonster","groupOptions","dropdown_Dropdown","moveToGroup","removeMonster","removeEncounterSlot","canAdd","monsterIsInWave","addEncounterSlot","info_card_InfoCard","selectMonster","deselectMonster","radial_Radial","mapMove","mapRemove","mapAdd","pending","defeated","removeCombatant","endTurn","makeDefeated","makeCurrent","makeActive","stats","slotSection","getHP","ability_score_panel_AbilityScorePanel","traits_panel_TraitsPanel","nudgeDamage","heal","setDamage","conditions_panel_ConditionsPanel","imageStyle","toggleDetails","PCCard","removePC","commonStatBlock","href","rel","HitPointGauge","hpCurrent","hpBloodied","hpWidth","hpTempBar","hpTempWidth","MapPanel","border","dimensions","i","minX","maxX","minY","maxY","mapDimensions","sideLength","getSideLength","left","top","getMapDimensions","grid","gridStyle","getStyle","map_panel_GridSquare","setSelectedItemID","onDoubleClick","posX","posY","addMapTile","tiles","tileStyle","map_panel_MapTile","tile","selectable","selectedItemID","thumbnail","tokenStyle","map_panel_MapToken","simple","mt","dragOverlay","showOverlay","yOver","xOver","overlayStyle","overlay","gridSquareClicked","GridSquare","doubleClick","MapTile","MapToken","initials","hpGauge","altitudeBadge","conditionsBadge","hit_point_gauge_HitPointGauge","altitude","CombatListItem","map_panel_MapPanel","setSelection","CardGroup","showCards","hidden","closeBtn","showClose","close","showToggle","toggleCards","cards","Note","white","CombatManagerScreen","selectedTokenID","addingToMapID","pc_card_PCCard","setAddingToMapID","monster_card_MonsterCard","createCard","combat_manager_screen_PendingCombatantRow","setSelectedTokenID","combat_manager_screen_PCRow","combat_manager_screen_MonsterRow","showHelp","pendingHelp","note_Note","concat","activeHelp","notificationSection","combat_manager_screen_NotificationPanel","notification","mapSection","addCombatantToMap","selectedCombatant","card_group_CardGroup","help","combat_manager_screen_HelpCard","combats","showCombat","combat_list_item_CombatListItem","resumeEncounter","createCombat","HelpCard","NotificationPanel","success","PendingCombatantRow","_this6","getInformationText","PCRow","_this7","notes","MonsterRow","_this8","gauge","DifficultyChartPanel","monsterCount","monsterXp","getMonster","experience","xpThresholds","diffSection","adjustedXp","experienceFactor","party","xpEasy","xpMedium","xpHard","xpDeadly","pc","pcExperience","adjustedDifficulty","small","getLeft","xp","getRight","right","EncounterCard","parties","partyOptions","difficultySection","selectParty","difficulty_chart_panel_DifficultyChartPanel","selection","addWave","removeEncounter","ErrorCard","getContent","FilterCard","showAll","sizeOptions","catOptions","cat","resetFilter","summary","challengeMin","challengeMax","toggleAll","WaveCard","removeWave","EncounterListItem","EncounterBuilderScreen","changeFilterValue","error_card_ErrorCard","libraryCards","filter_card_FilterCard","nudgeFilterValue","matchMonster","enc","encounter_builder_screen_HelpCard","encounters","encounterName","showEncounter","encounter_list_item_EncounterListItem","selectEncounter","encounterCards","encounter_card_EncounterCard","getMonsterCards","card","w","waveCards","wave_card_WaveCard","addEncounter","getLibrarySection","Readaloud","HomeScreen","addOpenGameContent","readaloud_Readaloud","MapCard","editMap","removeMap","MapFolioCard","addMap","removeMapFolio","MapFolioListItem","matchFolio","mapFolio","MapFoliosScreen","folio","map_folios_screen_HelpCard","mapFolios","folios","f","showMapFolio","map_folio_list_item_MapFolioListItem","selectMapFolio","folioCards","map_folio_card_MapFolioCard","map_card_MapCard","addMapFolio","MonsterGroupCard","addMonster","generateMonster","sortMonsters","removeMonsterGroup","MonsterGroupListItem","matchGroup","MonsterLibraryScreen","monster_library_screen_HelpCard","listItems","showMonsterGroup","monster_group_list_item_MonsterGroupListItem","selectMonsterGroup","monster_group_card_MonsterGroupCard","groupID","addMonsterGroup","PartyCard","activePCs","join","reduce","array","localeCompare","insightSummary","investigationSummary","perceptionSummary","insight","invest","percep","addPC","sortPCs","removeParty","PartyListItem","matchParty","PartiesScreen","parties_screen_HelpCard","showParty","party_list_item_PartyListItem","activeCards","inactiveCards","party_card_PartyCard","activePC","inactivePC","addParty","Checkbox","checked","check","showCheck","unchecked","Selector","tabs","itemsPerRow","rowCount","ceil","rowContents","rowIndex","selector_SelectorOption","rowSections","row","SelectorOption","TextGenerator","sources","model","maxLength","line","addLineToModel","String","fromCharCode","_loop","prev","substr","char","item","freq","requiredResults","lines","failures","extractLine","l","fit","_loop2","v","candidates","repeat","dieRoll","_ret","values","_loop3","ch","mc","maxCount","sum","LanguageModule","output","language","fetch","response","presetName","preset","getPresets","lang","addLanguage","getLanguages","keys","initModel","generate","presetOptions","selectedPreset","selectedLanguages","isSelected","checkbox_Checkbox","removeLanguage","allowGenerate","allowReset","selector_Selector","usePreset","reset","NameModule","male","female","surname","input","setOption","ReferenceModule","view","fetchData","setView","AboutModal","reference_module_ReferenceModule","language_module_LanguageModule","name_module_NameModule","moduleID","setModule","pkg","version","resetAll","getTools","getAbout","CombatStartModal","combatSetup","notify","getMonsterNames","slotID","partyContent","selectedParty","pcSections","setParty","encounterOptions","encounterContent","selectedEncounter","monsterSections","waveMonsters","setEncounter","folioOptions","selectMapSection","thumbnailSection","mapOptions","setMapID","setFolioID","waveOptions","waveContent","selectedWave","setWave","_this9","_this10","slotsContainer","slotNames","inputs","combat_start_modal_MonsterName","changeName","setEncounterInitMode","leftSection","rightSection","getPartySection","getEncounterSection","getMapSection","getDifficultySection","getMonsterSection","getWaveSection","margin","MonsterName","_this11","CONDITION_TYPES","RadioGroup","radio_group_RadioGroupItem","itemID","RadioGroupItem","ConditionModal","conditionName","durationType","createConditionDurationSaves","createConditionDurationCombatant","createConditionDurationRounds","object","saveOptions","pointOptions","combatantOptions","durations","radio_group_RadioGroup","setCondition","setDuration","DemographicsModal","chart","demographics","allMonsters","buckets","maxBucketSize","bucket","bars","set","selectChart","TERRAIN_TYPES","MapTileCard","terrainOptions","moveMapItem","resizeMapItem","cloneMapItem","removeMapItem","MapEditorModal","selectedTileID","createMapItem","smallMapItem","bigMapItem","tools","map_tile_card_MapTileCard","mapItem","setSelectedTileID","MonsterEditorModal","page","showFilter","helpSection","sections","getHelpOptionsForPage","section","spliceMonsters","addRandomTrait","getValueSection","getActionsSection","dataType","valueSections","rows","criteria","criteriaText","similar","filterContent","toggleMatch","toggleFilter","showMonsters","getMonsters","changeTrait","selector","setHelpSection","getHelpSection","monsterList","searchBox","setFilterText","getFilterCard","transition","setPage","Navbar","partiesStyle","libraryStyle","encounterStyle","mapStyle","combatStyle","encountersEnabled","combatEnabled","blur","Titlebar","openHome","cog","openAbout","RandomMonsterModal","selectedMonsters","selectedMonstersInfo","selectAll","Dojo","selectedPartyID","selectedMonsterGroupID","selectedEncounterID","selectedMapFolioID","selectedCombatID","modal","json","window","localStorage","getItem","setItem","createParty","createPC","createMonsterGroup","sourceGroup","original","clone","then","createFromJSON","groupName","createEncounter","_this12","_this13","createEncounterSlot","sortEncounterSlots","_this14","slotContainer","aName","bName","_this15","createEncounterWave","_this16","createMapFolio","_this17","_this18","createMap","_this19","_this20","setup","createCombatSetup","_this21","partyName","init","groupRoll","singleRoll","sortCombatants","_this22","_this23","Date","toLocaleString","_this24","newRound","_this25","actor","_this26","_this27","issue","_this28","_this29","miniSize","_this30","_this31","_this32","saveNotification","createNotification","endNotification","_this33","createCondition","_this34","_this35","_this36","conditionIndex","_this37","obj","_this38","openDemographics","openWaveModal","pauseCombat","endCombat","_this39","home_screen_HomeScreen","parties_screen_PartiesScreen","monster_library_screen_MonsterLibraryScreen","encounter_builder_screen_EncounterBuilderScreen","addWaveToEncounter","map_folios_screen_MapFoliosScreen","combat_manager_screen_CombatManagerScreen","pausedCombat","resumeCombat","closeNotification","_this40","modalSidebar","modalTitle","modalContent","modalAllowScroll","modalButtons","closeModal","about_modal_AboutModal","demographics_modal_DemographicsModal","monster_editor_modal_MonsterEditorModal","toggleShowSimilarMonsters","saveMonster","random_monster_modal_RandomMonsterModal","map_editor_modal_MapEditorModal","saveMap","combat_start_modal_CombatStartModal","startCombat","addWaveToCombat","condition_modal_ConditionModal","addConditionFromModal","editConditionFromModal","_this41","getActions","getModal","titlebar_Titlebar","navbar_Navbar","ReactDOM","render","dojo_Dojo","document","getElementById"],"mappings":"+EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,2DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,uDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,kDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,qDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,ktBCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oQCKnBC,+GAKaC,EAAkBC,GAC5C,IAAIC,EAAQC,KAAKC,iBAAiBJ,EAAQK,IAE1C,IAAKH,EAAO,CACR,IAAMI,EAAML,EAAQM,KAAK,SAAAC,GAAC,OAAIA,EAAEC,SAASC,SAASV,KAC9CM,IACAJ,EAAQI,EACRH,KAAKC,iBAAiBJ,EAAQK,IAAMH,GAI5C,OAAOA,gCAGSS,EAAgBC,GAChC,IAAKD,EACD,OAAO,EAGX,IAAIE,GAAS,EASb,OAPeF,EAAOG,cAAcC,MAAM,KACnCC,QAAQ,SAAAC,IACgC,IAAvCL,EAAKE,cAAcI,QAAQD,KAC3BJ,GAAS,KAIVA,iCAIP,IAAMM,EAAK,kBAAMC,KAAKC,MAA4B,OAArB,EAAID,KAAKE,WAAqBC,SAAS,IAAIC,UAAU,IAClF,OAAOL,IAAOA,IAAO,IAAMA,IAAO,IAAMA,IAAO,IAAMA,IAAO,IAAMA,IAAOA,IAAOA,iCAGjEM,GAAgF,IAA7DC,EAA6DC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAX,GAC/D,IAAjBD,EAAME,SACNF,EAAQ,CAAC,CAAEI,MAAO,OAAQC,IAAK,SAqBnC,OAVAN,EAAWO,KAAK,SAACC,EAAGC,GAChB,IAAIC,EAAQ,EAMZ,OALAT,EAAMV,QAAQ,SAAAgB,GACI,IAAVG,IACAA,EAZD,SAACF,EAAQC,EAAQJ,GACxB,QAAkBD,IAAbI,EAAEH,SAAuCD,IAAbK,EAAEJ,GAAuB,CACtD,GAAIG,EAAEH,GAASI,EAAEJ,GAAU,OAAQ,EACnC,GAAIG,EAAEH,GAASI,EAAEJ,GAAU,OAAO,EAEtC,OAAO,EAOSM,CAAGH,EAAGC,EAAGF,EAAKF,QAAuB,QAAbE,EAAKD,IAAgB,GAAK,MAG3DI,IAGJV,wCAGiBY,GACxB,OAAOjB,KAAKC,OAAOgB,EAAQ,IAAM,oCAGdA,GACnB,IAAMC,EAAMnC,KAAKoC,cAAcF,GAC3BG,EAAMF,EAAIf,WAId,OAHIe,GAAO,IACPE,EAAM,IAAMA,GAETA,oCAIP,OAAOpB,KAAKC,MAAsB,GAAhBD,KAAKE,UAAiB,mCAGrBmB,GACnB,OAAQA,GACJ,IAAK,OACL,IAAK,QACL,IAAK,SAAU,OAAO,EACtB,IAAK,QAAS,OAAO,EACrB,IAAK,OAAQ,OAAO,EACpB,IAAK,aAAc,OAAO,EAC1B,QAAS,OAAO,sCAICA,GACrB,OAAQA,GACJ,IAAK,OAAQ,OAAO,EACpB,IAAK,QAAS,OAAO,EACrB,IAAK,SAAU,OAAO,EACtB,IAAK,QAAS,OAAO,GACrB,IAAK,OAAQ,OAAO,GACpB,IAAK,aAAc,OAAO,GAC1B,QAAS,OAAO,qCAIAC,GACpB,OAAQA,GACJ,IAAK,KAAO,MAAO,MACnB,IAAK,IAAM,MAAO,MAClB,IAAK,GAAK,MAAO,MACjB,QAAS,OAAOA,EAAGnB,mDAIEmB,GACzB,OAAQA,GACJ,IAAK,MAAO,MAAO,KACnB,IAAK,MAAO,MAAO,IACnB,IAAK,MAAO,MAAO,GACnB,QAAS,OAAOC,SAASD,EAAI,gDAKjC,IAAM7B,EAAgB,GAqCtB,OAnCAA,EAAO+B,KAAK,CAAEF,GAAI,EAAUG,GAAI,GAAUC,MAAO,EAAGC,MAAO,EAASC,OAAQ,EAAIC,OAAQ,EAAKC,OAAQ,EAAKC,KAAM,KAChHtC,EAAO+B,KAAK,CAAEF,GAAI,KAAUG,GAAI,GAAUC,MAAO,EAAGC,MAAO,GAASC,OAAQ,EAAIC,OAAQ,EAAKC,OAAQ,EAAKC,KAAM,KAChHtC,EAAO+B,KAAK,CAAEF,GAAI,IAAUG,GAAI,GAAUC,MAAO,GAAIC,MAAO,GAAQC,OAAQ,EAAIC,OAAQ,EAAKC,OAAQ,EAAKC,KAAM,KAChHtC,EAAO+B,KAAK,CAAEF,GAAI,GAAUG,GAAI,GAAUC,MAAO,GAAIC,MAAO,GAAQC,OAAQ,EAAIC,OAAQ,EAAKC,OAAQ,EAAKC,KAAM,KAChHtC,EAAO+B,KAAK,CAAEF,GAAI,EAAUG,GAAI,GAAUC,MAAO,GAAIC,MAAO,GAAQC,OAAQ,EAAIC,OAAQ,EAAKC,OAAQ,GAAKC,KAAM,KAChHtC,EAAO+B,KAAK,CAAEF,GAAI,EAAUG,GAAI,GAAUC,MAAO,GAAIC,MAAO,IAAQC,OAAQ,EAAIC,OAAQ,GAAKC,OAAQ,GAAKC,KAAM,KAChHtC,EAAO+B,KAAK,CAAEF,GAAI,EAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,EAAIC,OAAQ,GAAKC,OAAQ,GAAKC,KAAM,KAChHtC,EAAO+B,KAAK,CAAEF,GAAI,EAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,EAAIC,OAAQ,GAAKC,OAAQ,GAAKC,KAAM,KAChHtC,EAAO+B,KAAK,CAAEF,GAAI,EAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,EAAIC,OAAQ,GAAKC,OAAQ,GAAKC,KAAM,KAChHtC,EAAO+B,KAAK,CAAEF,GAAI,EAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,EAAIC,OAAQ,GAAKC,OAAQ,GAAKC,KAAM,KAChHtC,EAAO+B,KAAK,CAAEF,GAAI,EAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,EAAIC,OAAQ,GAAKC,OAAQ,GAAKC,KAAM,KAChHtC,EAAO+B,KAAK,CAAEF,GAAI,EAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,EAAIC,OAAQ,GAAKC,OAAQ,GAAKC,KAAM,KAChHtC,EAAO+B,KAAK,CAAEF,GAAI,EAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,EAAIC,OAAQ,GAAKC,OAAQ,GAAKC,KAAM,KAChHtC,EAAO+B,KAAK,CAAEF,GAAI,GAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,EAAIC,OAAQ,GAAKC,OAAQ,GAAKC,KAAM,KAChHtC,EAAO+B,KAAK,CAAEF,GAAI,GAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,EAAIC,OAAQ,GAAKC,OAAQ,GAAKC,KAAM,KAChHtC,EAAO+B,KAAK,CAAEF,GAAI,GAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,EAAIC,OAAQ,GAAKC,OAAQ,GAAKC,KAAM,KAChHtC,EAAO+B,KAAK,CAAEF,GAAI,GAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,EAAIC,OAAQ,GAAKC,OAAQ,GAAKC,KAAM,KAChHtC,EAAO+B,KAAK,CAAEF,GAAI,GAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,EAAIC,OAAQ,GAAKC,OAAQ,GAAKC,KAAM,KAChHtC,EAAO+B,KAAK,CAAEF,GAAI,GAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,EAAIC,OAAQ,GAAKC,OAAQ,GAAKC,KAAM,KAChHtC,EAAO+B,KAAK,CAAEF,GAAI,GAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,EAAIC,OAAQ,GAAKC,OAAQ,IAAKC,KAAM,KAChHtC,EAAO+B,KAAK,CAAEF,GAAI,GAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,GAAIC,OAAQ,IAAKC,OAAQ,IAAKC,KAAM,KAChHtC,EAAO+B,KAAK,CAAEF,GAAI,GAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,GAAIC,OAAQ,IAAKC,OAAQ,IAAKC,KAAM,KAChHtC,EAAO+B,KAAK,CAAEF,GAAI,GAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,GAAIC,OAAQ,IAAKC,OAAQ,IAAKC,KAAM,KAChHtC,EAAO+B,KAAK,CAAEF,GAAI,GAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,GAAIC,OAAQ,IAAKC,OAAQ,IAAKC,KAAM,KAChHtC,EAAO+B,KAAK,CAAEF,GAAI,GAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,GAAIC,OAAQ,IAAKC,OAAQ,IAAKC,KAAM,KAChHtC,EAAO+B,KAAK,CAAEF,GAAI,GAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,GAAIC,OAAQ,IAAKC,OAAQ,IAAKC,KAAM,KAChHtC,EAAO+B,KAAK,CAAEF,GAAI,GAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,GAAIC,OAAQ,IAAKC,OAAQ,IAAKC,KAAM,KAChHtC,EAAO+B,KAAK,CAAEF,GAAI,GAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,GAAIC,OAAQ,IAAKC,OAAQ,IAAKC,KAAM,KAChHtC,EAAO+B,KAAK,CAAEF,GAAI,GAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,GAAIC,OAAQ,IAAKC,OAAQ,IAAKC,KAAM,KAChHtC,EAAO+B,KAAK,CAAEF,GAAI,GAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,GAAIC,OAAQ,IAAKC,OAAQ,IAAKC,KAAM,KAChHtC,EAAO+B,KAAK,CAAEF,GAAI,GAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,GAAIC,OAAQ,IAAKC,OAAQ,IAAKC,KAAM,KAChHtC,EAAO+B,KAAK,CAAEF,GAAI,GAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,GAAIC,OAAQ,IAAKC,OAAQ,IAAKC,KAAM,KAChHtC,EAAO+B,KAAK,CAAEF,GAAI,GAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,GAAIC,OAAQ,IAAKC,OAAQ,IAAKC,KAAM,KAChHtC,EAAO+B,KAAK,CAAEF,GAAI,GAAUG,GAAI,GAAUC,MAAO,IAAKC,MAAO,IAAOC,OAAQ,GAAIC,OAAQ,IAAKC,OAAQ,IAAKC,KAAM,KAEzGtC,qCAGc6B,GACrB,OAAQA,GACJ,KAAK,EAAG,OAAO,GACf,IAAK,KAAO,OAAO,GACnB,IAAK,IAAM,OAAO,GAClB,IAAK,GAAK,OAAO,IACjB,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,KACf,KAAK,EAAG,OAAO,KACf,KAAK,EAAG,OAAO,KACf,KAAK,EAAG,OAAO,KACf,KAAK,EAAG,OAAO,KACf,KAAK,EAAG,OAAO,IACf,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,IAChB,KAAK,GAAI,OAAO,MAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,IAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,IAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,MAChB,QAAS,OAAO,4CAIOU,GAC3B,OAAQA,GACJ,KAAK,EACD,OAAO,EACX,KAAK,EACD,OAAO,EACX,KAAK,EACD,OAAO,IACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACD,OAAO,EACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACD,OAAO,IACX,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACD,OAAO,EACX,QACI,OAAO,wCAIQC,EAAeC,GACtC,OAAQA,GACJ,IAAK,OACD,OAAQD,GACJ,KAAK,EAAG,OAAO,GACf,KAAK,EAAG,OAAO,GACf,KAAK,EAAG,OAAO,GACf,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,IACf,KAAK,GAAI,OAAO,IAChB,KAAK,GAAI,OAAO,IAChB,KAAK,GAAI,OAAO,IAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,IAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,QAAS,OAAO,EAExB,IAAK,SACD,OAAQA,GACJ,KAAK,EAAG,OAAO,GACf,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,KACf,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,IAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,QAAS,OAAO,EAExB,IAAK,OACD,OAAQA,GACJ,KAAK,EAAG,OAAO,GACf,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,KACf,KAAK,EAAG,OAAO,KACf,KAAK,EAAG,OAAO,KACf,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,IAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,QAAS,OAAO,EAExB,IAAK,SACD,OAAQA,GACJ,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,KACf,KAAK,EAAG,OAAO,KACf,KAAK,EAAG,OAAO,KACf,KAAK,EAAG,OAAO,KACf,KAAK,EAAG,OAAO,KACf,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,KAChB,KAAK,GAAI,OAAO,MAChB,KAAK,GAAI,OAAO,MAChB,QAAS,OAAO,EAExB,QACI,OAAO,qCAIKE,EAAcC,GAClC,IAAIhB,EAAM,GACV,OAAQe,GACJ,IAAK,QACDf,EAAM,QACN,MACJ,IAAK,SACDA,EAAM,SACN,MACJ,IAAK,YACDA,EAAM,mBACN,MACJ,IAAK,OACDA,EAAM,cACN,MACJ,IAAK,WACDA,EAAM,kBAQd,OAJIgB,IACAhB,GAAO,KAGJA,yCAGkBiB,EAAeC,GACxC,IAAI7C,EAAS,EAEb,OAAQ4C,GACJ,KAAK,GACc,IAAXC,IACA7C,EAAS,GAEC,IAAV6C,IACA7C,EAAS,MAEb,MACJ,IAAK,MACc,IAAX6C,IACA7C,EAAS,GAEC,IAAV6C,IACA7C,EAAS,KAEb,MACJ,IAAK,KACc,IAAX6C,IACA7C,EAAS,MAEC,IAAV6C,IACA7C,EAAS,IAEb,MACJ,IAAK,IACc,IAAX6C,IACA7C,EAAS,KAEC,IAAV6C,IACA7C,EAAS,GAEb,MACJ,KAAK,GACc,IAAX6C,IACA7C,EAAS,IAEC,IAAV6C,IACA7C,EAAS,GAEb,MACJ,QACIA,EAAS4C,EAAQC,EAIzB,OAAO7C,wCAGiB8C,GACxB,OAAQA,EAAUC,MACd,IAAK,UACD,MAAO,CACH,kGACA,4GAER,IAAK,UACD,MAAO,CACH,mHACA,yFAER,IAAK,WACD,MAAO,CACH,wGAER,IAAK,aACD,OAAQD,EAAUN,OAClB,KAAK,EACD,MAAO,CACH,kCAER,KAAK,EACD,MAAO,CACH,iCACA,gBAER,KAAK,EACD,MAAO,CACH,iCACA,eACA,kDAER,KAAK,EACD,MAAO,CACH,iCACA,eACA,iDACA,4BAER,KAAK,EACD,MAAO,CACH,iCACA,eACA,iDACA,2BACA,sBAER,KAAK,EACD,MAAO,CACH,iCACA,eACA,iDACA,2BACA,qBACA,SAER,QACI,MAAO,GAGf,IAAK,aACD,MAAO,CACH,iIACA,2EAER,IAAK,WACD,MAAO,CACH,oGACA,sDACA,yHAER,IAAK,gBACD,MAAO,CACH,kEAER,IAAK,YACD,MAAO,CACH,yFACA,8DACA,6FACA,4GAER,IAAK,YACD,MAAO,CACH,4GACA,wEACA,mDACA,wGAER,IAAK,YACD,MAAO,CAEH,qJACA,+DACA,qIACA,mDACA,wEACA,4CACA,kIAER,IAAK,WACD,MAAO,CACH,2EAER,IAAK,QACD,MAAO,CACH,+GACA,gDAEA,mJAER,IAAK,aACD,MAAO,CACH,sGACA,2GACA,4DAER,IAAK,UACD,MAAO,CACH,8HACA,wEACA,oDAER,IAAK,cACD,MAAO,CACH,gJACA,0DACA,wEACA,mDACA,wGAER,IAAK,SAEL,QACI,MAAO,kDAIiBM,EAAsBE,GACtD,GAA2B,OAAvBF,EAAUG,SACV,OAAQH,EAAUG,SAASP,MACvB,IAAK,QACD,IAAMQ,EAAeJ,EAAUG,SAC3BE,EAAWD,EAAaC,SAASzC,WACpB,UAAbyC,IACAA,EAAWA,EAASC,eAExB,IAAMC,EAAQH,EAAaX,MAAQ,EAAI,QAAU,OACjD,MAAO,kBAAoBW,EAAaX,MAAQ,IAAMY,EAAW,IAAME,EAAQ,UAAYH,EAAaI,OAC5G,IAAK,YACD,IAAMC,EAAoBT,EAAUG,SAC9BO,EAAQD,EAAkBC,MAC1BC,EAAIT,EAAOU,WAAWhE,KAAK,SAAAiE,GAAG,OAAIA,EAAInE,KAAO+D,EAAkBK,cAErE,MAAO,aAAeJ,EAAQ,QADZC,GAAKA,EAAEI,aAAeJ,EAAEV,MAAQ,mBAAqB,KAAQ,aAC5B,aACvD,IAAK,SACD,IAAMe,EAAiBhB,EAAUG,SAC3Bc,EAASD,EAAevB,MAAQ,EAAI,SAAW,QACrD,MAAO,OAASuB,EAAevB,MAAQ,IAAMwB,EACjD,QACI,OAAO,KAInB,OAAO,6CAGmBC,GAC1B,IAAMC,EAAsB,GAmB5B,OAlBID,GACAA,EAAUE,MAAM/D,QAAQ,SAAAgE,GACpB,IAAMC,EAAe,GACrB,GAAmB,IAAfD,EAAK5B,MACL6B,EAAMrC,KAAKoC,EAAKE,kBAEhB,IAAK,IAAIC,EAAI,EAAGA,IAAMH,EAAK5B,QAAS+B,EAChCF,EAAMrC,KAAKoC,EAAKE,YAAc,KAAOC,EAAI,IAIjDL,EAAalC,KAAK,CACdvC,GAAI2E,EAAK3E,GACT4E,MAAOA,MAKZH,WAxlBM/E,EAGFK,iBAAmD,OCCjDgF,6GAGb,MAAO,CACH/E,GAAIN,EAAMsF,OACVzB,KAAM,GACN0B,IAAK,uCAKT,MAAO,CACHjF,GAAIN,EAAMsF,OACV9B,KAAM,KACNgC,QAAQ,EACRC,OAAQ,GACR5B,KAAM,GACN6B,KAAM,GACNC,QAAS,GACTrC,MAAO,EACPsC,UAAW,SACXC,eAAgB,GAChBC,qBAAsB,GACtBC,kBAAmB,GACnBC,WAAY,GACZC,IAAK,iDAKT,MAAO,CACH3F,GAAIN,EAAMsF,OACVzB,KAAM,GACNnD,SAAU,4CAKd,MAAO,CACHJ,GAAIN,EAAMsF,OACV9B,KAAM,UACNK,KAAM,GACNnB,KAAM,SACNwD,SAAU,WACVC,IAAK,GACLC,UAAW,GACXC,UAAW,EACXC,cAAe,CACX7D,IAAK,GACL8D,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,IAET7D,GAAI,GACJE,MAAO,EACP4D,OAAQ,EACRC,QAAS,EACTC,OAAQ,CACJC,OAAQ,GACRC,WAAY,GACZC,OAAQ,IAEZC,aAAc,GACdC,MAAO,GACPC,OAAQ,GACRC,OAAQ,GACRzB,UAAW,GACX0B,UAAW,GACXC,OAAQ,GACRC,oBAAqB,0CAKzB,MAAO,CACHlH,GAAIN,EAAMsF,OACVzB,KAAM,GACN4D,MAAO,GACPjE,KAAM,SACN3C,KAAM,GACN6G,KAAM,6CAKV,MAAO,CACHpH,GAAIN,EAAMsF,OACVzB,KAAM,GACNmB,MAAO,GACP2C,MAAO,kDAKX,MAAO,CACHrH,GAAIN,EAAMsF,OACVsC,iBAAkB,GAClBzC,YAAa,GACb9B,MAAO,iDAKX,MAAO,CACH/C,GAAIN,EAAMsF,OACVzB,KAAM,GACNmB,MAAO,6CAKX,MAAO,CACH1E,GAAIN,EAAMsF,OACVzB,KAAM,GACNgE,KAAM,wCAKV,MAAO,CACHvH,GAAIN,EAAMsF,OACVzB,KAAM,GACNiE,MAAO,4CAKX,MAAO,CACHxH,GAAIN,EAAMsF,OACV9B,KAAM,OACNuE,EAAG,EACHC,EAAG,EACHC,MAAO,EACPC,OAAQ,EACRC,QAAS,kDAKb,MAAO,CACHC,QAAS,KACTC,YAAa,KACbC,OAAQ,KACRC,QAAS,KACTC,MAAO,KACPzD,aAAc,GACd0D,kBAAmB,gDAKvB,MAAO,CACHnI,GAAIN,EAAMsF,OACVzB,KAAM,GACNwE,YAAa,KACb7D,WAAY,GACZkE,IAAK,KACLC,MAAO,EACPC,cAAe,GACfC,OAAQ,GACRC,UAAW,mDAKf,MAAO,CACHxI,GAAIN,EAAMsF,OACV9B,KAAM,iBACNuF,KAAM,KACNC,UAAW,gDAKf,MAAO,CACH1I,GAAIN,EAAMsF,OACVzB,KAAM,GACNP,MAAO,EACPzC,KAAM,KACNkD,SAAU,6DAKd,MAAO,CACHP,KAAM,QACNH,MAAO,EACPY,SAAU,MACVG,OAAQ,GACRE,MAAO,oEAKX,MAAO,CACHd,KAAM,YACNc,MAAO,QACPI,YAAa,8DAKjB,MAAO,CACHlB,KAAM,SACNH,MAAO,YCpKN4F,EAAa,CACtB,OACA,QACA,SACA,QACA,OACA,cAGSC,EAAiB,CAC1B,aACA,QACA,YACA,YACA,SACA,YACA,MACA,QACA,QACA,WACA,cACA,OACA,QACA,UAGSC,EAAc,CACvB,QACA,SACA,YACA,OACA,YC7EiBC,0GACQC,EAAiBtH,EAAe4B,GACrD,IAAI2F,EAAcD,EACd3F,EAAa,KACX6F,EAASxH,EAAMf,MAAM,KAC3BuI,EAAOtI,QAAQ,SAAAC,GACPA,IAAUqI,EAAOA,EAAO1H,OAAS,GACjC6B,EAAQ4F,EAAOpI,GAEfoI,EAASA,EAAOpI,KAIxB,IAAMsI,EAAsB,cAAVzH,EAAyB/B,EAAMyJ,eAAe/F,EAAOC,IAAUD,GAAgB,GAAKC,EACtGyF,EAAaM,YAAYL,EAAQtH,EAAOyH,uCAGlBH,EAAiBtH,EAAe2B,GACtD,IAAI4F,EAAcD,EACZE,EAASxH,EAAMf,MAAM,KAC3BuI,EAAOtI,QAAQ,SAAAC,GACX,GAAIA,IAAUqI,EAAOA,EAAO1H,OAAS,IAGjC,GAFAyH,EAAOpI,GAASwC,EAED,sBAAV3B,GAA6C,SAAVA,GAAgC,YAAVA,EAAsB,CAChF,IAEM4H,GAFQ3J,EAAM4J,WAAWP,EAAO3G,MAEX,GAAK,EADjBrB,KAAKC,OAAO+H,EAAO/C,cAAcE,IAAM,IAAM,GAEtDqD,EAAKxI,KAAKC,MAAM+H,EAAOxC,QAAU8C,GACvCN,EAAOrG,MAAQ6G,QAGnBP,EAASA,EAAOpI,mCAQRjB,EAAkB4D,GAClC,MAAO,CACHvD,GAAIN,EAAMsF,OACV9B,KAAM,UACNK,KAAMA,GAAS5D,EAAQ4D,KAAO,QAC9BnB,KAAMzC,EAAQyC,KACdwD,SAAUjG,EAAQiG,SAClBC,IAAKlG,EAAQkG,IACbC,UAAWnG,EAAQmG,UACnBC,UAAWpG,EAAQoG,UACnBC,cAAe,CACX7D,IAAKxC,EAAQqG,cAAc7D,IAC3B8D,IAAKtG,EAAQqG,cAAcC,IAC3BC,IAAKvG,EAAQqG,cAAcE,IAC3BC,IAAKxG,EAAQqG,cAAcG,IAC3BC,IAAKzG,EAAQqG,cAAcI,IAC3BC,IAAK1G,EAAQqG,cAAcK,KAE/B7D,GAAI7C,EAAQ6C,GACZE,MAAO/C,EAAQ+C,MACf4D,OAAQ3G,EAAQ2G,OAChBC,QAAS5G,EAAQ4G,QACjBC,OAAQ,CACJC,OAAQ9G,EAAQ6G,OAAOC,OACvBC,WAAY/G,EAAQ6G,OAAOE,WAC3BC,OAAQhH,EAAQ6G,OAAOG,QAE3BC,aAAcjH,EAAQiH,aACtBC,MAAOlH,EAAQkH,MACfC,OAAQnH,EAAQmH,OAChBC,OAAQpH,EAAQoH,OAChBzB,UAAW3F,EAAQ2F,UACnB0B,UAAWrH,EAAQqH,UACnBC,OAAQtH,EAAQsH,OAAOmB,IAAI,SAAAoB,GACvB,MAAO,CACHxJ,GAAIN,EAAMsF,OACVzB,KAAMiG,EAAMjG,KACZ4D,MAAOqC,EAAMrC,MACbjE,KAAMsG,EAAMtG,KACZ3C,KAAMiJ,EAAMjJ,KACZ6G,KAAM,KAGdF,oBAAqBvH,EAAQuH,4DAIRuB,GAAoB,IAAAgB,EAAA3J,KACvCH,EAAUoF,EAAQ2E,gBAExB/J,EAAQuD,KAAO,UACfvD,EAAQ4D,KAAOkF,EAAKlF,KACpB5D,EAAQyC,KAAOqG,EAAKrG,KAAK3B,cACzBd,EAAQiG,SAAW6C,EAAKvF,KACxBvD,EAAQkG,IAAM4C,EAAKkB,QACnBhK,EAAQmG,UAAY2C,EAAK3C,UACzBnG,EAAQoG,UAAYrG,EAAMkK,eAAenB,EAAKoB,kBAC9ClK,EAAQ6C,GAAKiG,EAAKqB,YAClBnK,EAAQ+C,MAAQ+F,EAAKsB,WACrBpK,EAAQkH,MAAQ4B,EAAK5B,MACrBlH,EAAQoH,OAAS0B,EAAK1B,OACtBpH,EAAQ2F,UAAYmD,EAAKnD,UAEzB,IAAM0E,EAAQvB,EAAKwB,SAASpJ,QAAQ,KACpClB,EAAQ4G,QAAUjE,SAASmG,EAAKwB,SAAS9I,UAAU,EAAG6I,GAAQ,IAE9DrK,EAAQqG,cAAc7D,IAAMsG,EAAKyB,SACjCvK,EAAQqG,cAAcC,IAAMwC,EAAK0B,UACjCxK,EAAQqG,cAAcE,IAAMuC,EAAK2B,aACjCzK,EAAQqG,cAAcG,IAAMsC,EAAK4B,aACjC1K,EAAQqG,cAAcI,IAAMqC,EAAK6B,OACjC3K,EAAQqG,cAAcK,IAAMoC,EAAK8B,SAEjC5K,EAAQ6G,OAAOC,OAASgC,EAAK+B,mBAC7B7K,EAAQ6G,OAAOE,WAAa+B,EAAKgC,uBACjC9K,EAAQ6G,OAAOG,OAAS8B,EAAKiC,kBAC7B/K,EAAQuH,oBAAsBuB,EAAKkC,qBAErB,CACV,CACIlJ,MAAO,gBACPlB,KAAM,YAEV,CACIkB,MAAO,iBACPlB,KAAM,aAEV,CACIkB,MAAO,oBACPlB,KAAM,gBAEV,CACIkB,MAAO,oBACPlB,KAAM,gBAEV,CACIkB,MAAO,cACPlB,KAAM,UAEV,CACIkB,MAAO,gBACPlB,KAAM,aAGRI,QAAQ,SAAAmC,GACV,GAAI2F,EAAK3F,EAAKrB,OAAQ,CAClB,IAAMU,EAAMW,EAAKvC,KAAO,IAAMkI,EAAK3F,EAAKrB,OACxC9B,EAAQiH,cAAyC,KAAzBjH,EAAQiH,aAAsBzE,EAAM,KAAOA,KAwG3E,MApGe,CACX,CACIV,MAAO,aACPlB,KAAM,cAEV,CACIkB,MAAO,kBACPlB,KAAM,mBAEV,CACIkB,MAAO,SACPlB,KAAM,UAEV,CACIkB,MAAO,YACPlB,KAAM,aAEV,CACIkB,MAAO,YACPlB,KAAM,aAEV,CACIkB,MAAO,UACPlB,KAAM,WAEV,CACIkB,MAAO,UACPlB,KAAM,WAEV,CACIkB,MAAO,eACPlB,KAAM,gBAEV,CACIkB,MAAO,gBACPlB,KAAM,iBAEV,CACIkB,MAAO,WACPlB,KAAM,YAEV,CACIkB,MAAO,SACPlB,KAAM,UAEV,CACIkB,MAAO,aACPlB,KAAM,cAEV,CACIkB,MAAO,cACPlB,KAAM,eAEV,CACIkB,MAAO,aACPlB,KAAM,cAEV,CACIkB,MAAO,WACPlB,KAAM,YAEV,CACIkB,MAAO,kBACPlB,KAAM,mBAEV,CACIkB,MAAO,UACPlB,KAAM,WAEV,CACIkB,MAAO,WACPlB,KAAM,aAGPI,QAAQ,SAAAiK,GACX,GAAInC,EAAKmC,EAAMnJ,OAAQ,CACnB,IAAMU,EAAMyI,EAAMrK,KAAO,IAAMkI,EAAKmC,EAAMnJ,OAC1C9B,EAAQmH,QAA6B,KAAnBnH,EAAQmH,OAAgB3E,EAAM,KAAOA,KAI3DsG,EAAKoC,mBACLpC,EAAKoC,kBAAkBlK,QAAQ,SAACmK,GAC5B,IAAMtB,EAAQC,EAAKsB,WAAWD,EAAU,SACxCnL,EAAQsH,OAAO1E,KAAKiH,KAGxBf,EAAKuC,SACLvC,EAAKuC,QAAQrK,QAAQ,SAACmK,GAClB,IAAMtB,EAAQC,EAAKsB,WAAWD,EAAU,UACxCnL,EAAQsH,OAAO1E,KAAKiH,KAGxBf,EAAKwC,mBACLxC,EAAKwC,kBAAkBtK,QAAQ,SAACmK,GAC5B,IAAMtB,EAAQC,EAAKsB,WAAWD,EAAU,aACxCnL,EAAQsH,OAAO1E,KAAKiH,KAIrB7J,qCAGemL,EAAe5H,GACrC,IAAIK,EAAO,GACP4D,EAAQ,GAEN+D,EAAcJ,EAASvH,KAAK1C,QAAQ,KAC1C,IAAqB,IAAjBqK,EACA3H,EAAOuH,EAASvH,SACb,CACH,IAAM4H,EAAeL,EAASvH,KAAK1C,QAAQ,KAC3C0C,EAAOuH,EAASvH,KAAKpC,UAAU,EAAG+J,EAAc,GAChD/D,EAAQ2D,EAASvH,KAAKpC,UAAU+J,EAAc,EAAGC,GAAc1K,cAGnE,IAAMF,EAAOuK,EAASM,KAAKC,QAAQ,UAAM,KAEzC,MAAO,CACHrL,GAAIN,EAAMsF,OACV9B,KAAMA,EACNK,KAAMA,EACN4D,MAAOA,EACP5G,KAAMA,EACN6G,KAAM,qCAOU2B,EAAiBS,GACrC,IAAM8B,EAAOC,KAAKC,MAAMD,KAAKE,UAAUjC,IACvC8B,EAAKtL,GAAKN,EAAMsF,OAChB+D,EAAO9B,OAAO1E,KAAK+I,oCAGAvC,EAAiB7F,GACpC,IAAMsG,EAAQzE,EAAQ2G,cACtBlC,EAAMtG,KAAOA,EACbsG,EAAMjG,KAAO,OAAS7D,EAAMiM,UAAUzI,GAAM,GAAOzC,cACnDsI,EAAO9B,OAAO1E,KAAKiH,uCAGGT,EAAiBS,GACvC,IAAMQ,EAAQjB,EAAO9B,OAAOpG,QAAQ2I,GACpCT,EAAO9B,OAAO2E,OAAO5B,EAAO,sCAGPjB,EAAiB8C,EAAWC,GACjD,IAAMC,EAAShD,EAAO9B,OAAOpG,QAAQgL,GAC/BG,EAASjD,EAAO9B,OAAOpG,QAAQiL,GACrC/C,EAAO9B,OAAO+E,GAAUH,EACxB9C,EAAO9B,OAAO8E,GAAUD,yCAMC/C,EAAiB3I,GAAqB,IAAA6L,EAAAnM,KAChD,CACX,OACA,WACA,MACA,YACA,YACA,QACA,SACA,YACA,YACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,eACA,SACA,KACA,UACA,gBACA,oBACA,gBACA,uBAEGa,QAAQ,SAAAc,GACXwK,EAAKC,eAAenD,EAAQtH,EAAOrB,KAGvC2I,EAAO9B,OAAS,GAEhB4B,EAAYlI,QAAQ,SAAAuC,GAEhB,IAAM+D,EAAkB,GACxB7G,EAASO,QAAQ,SAAAwL,GACbA,EAAElF,OAAO3G,OAAO,SAAA8L,GAAC,OAAIA,EAAElJ,OAASA,IAC3BvC,QAAQ,SAAAyL,GAAC,OAAInF,EAAO1E,KAAK6J,OAIlC,IAAMC,EAA8C,GACpDpF,EAAOtG,QAAQ,SAAAyL,GACX,IAAME,EAAUD,EAASnM,KAAK,SAAAqM,GAAC,OAAIA,EAAE/C,MAAMjG,OAAS6I,EAAE7I,OAClD+I,EACAA,EAAQvJ,OAAS,EAEjBsJ,EAAS9J,KAAK,CACViH,MAAO4C,EACPrJ,MAAO,MAMnB,IAAMyJ,EAAqB,GAC3BH,EAAS/L,OAAO,SAAAiM,GAAC,OAAIA,EAAExJ,QAAU3C,EAASmB,SACrCZ,QAAQ,SAAA4L,GACLN,EAAKQ,UAAU1D,EAAQwD,EAAE/C,OACzBgD,EAASjK,KAAKgK,EAAE/C,MAAMxJ,MAE9BwM,EAAS7L,QAAQ,SAAAX,GACb,IAAMgK,EAAQqC,EAASK,UAAU,SAAAH,GAAC,OAAIA,EAAE/C,MAAMxJ,KAAOA,IACrDqM,EAAST,OAAO5B,EAAO,KAI3B,IADA,IAAM2C,EAAM1F,EAAO1F,OAASnB,EAASmB,OAC9BwH,EAAO9B,OAAO3G,OAAO,SAAA8L,GAAC,OAAIA,EAAElJ,OAASA,IAAM3B,OAASoL,GAAK,CAC5D,IAAM3C,EAAQjJ,KAAKC,MAAMD,KAAKE,SAAWoL,EAAS9K,QAC5C6K,EAAIC,EAASrC,GAAOR,MAC1ByC,EAAKQ,UAAU1D,EAAQqD,GACvBC,EAAST,OAAO5B,EAAO,6CAKNjB,EAAiBtH,EAAerB,GACzD,IAGI4I,EAFM5I,EADIW,KAAKC,MAAMD,KAAKE,SAAWb,EAASmB,SAI9C6B,EAAQ,KACN6F,EAASxH,EAAMf,MAAM,KAC3BuI,EAAOtI,QAAQ,SAAAC,GACPA,IAAUqI,EAAOA,EAAO1H,OAAS,GACjC6B,EAAQ4F,EAAOpI,GAEfoI,EAASA,EAAOpI,KAIxBd,KAAKsJ,YAAYL,EAAQtH,EAAO2B,0CAGP2F,EAAiB7F,EAAc9C,GACxD,IAAM6G,EAAkB,GACxB7G,EAASO,QAAQ,SAAAwL,GACbA,EAAElF,OAAO3G,OAAO,SAAA8L,GAAC,OAAIA,EAAElJ,OAASA,IAC3BvC,QAAQ,SAAAyL,GACLnF,EAAO1E,KAAK6J,OAIxB,IAAMpC,EAAQjJ,KAAKC,MAAMD,KAAKE,SAAWgG,EAAO1F,QAC1CiI,EAAQvC,EAAO+C,GAErBlK,KAAK2M,UAAU1D,EAAQS,6BCtZVoD,cAMjB,SAAAA,EAAYC,GAAc,IAAApD,EAAA,OAAAqD,OAAAC,EAAA,EAAAD,CAAAhN,KAAA8M,IACtBnD,EAAAqD,OAAAE,EAAA,EAAAF,CAAAhN,KAAAgN,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAApN,KAAM+M,KACDM,MAAQ,CACTC,SAAS,GAHS3D,wEAQtB3J,KAAKuN,SAAS,CACVD,SAAUtN,KAAKqN,MAAMC,4CAKzBtN,KAAKwN,SACLxN,KAAK+M,MAAMU,4CAGC,IAAAtB,EAAAnM,KACZ,IACI,IAAI0N,EAAU,KAsBd,OApBIA,EADA1N,KAAKqN,MAAMC,QAEPK,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,SAAS7N,KAAK+M,MAAMtM,KAAnC,oBACAkN,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,QAAQC,IAAKC,IAASC,IAAI,YACxChO,KAAK+M,MAAMkB,QAAUN,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAW7N,KAAK+M,MAAMkB,SAAiB,KAC5EN,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,gBACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAcK,QAAS,kBAAM/B,EAAKgC,YAAjD,OACAR,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,kBAAkBK,QAAS,kBAAM/B,EAAKqB,WAArD,QAMRG,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,SAAS7N,KAAK+M,MAAMtM,MACnCkN,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,QAAQC,IAAKC,IAASC,IAAI,aAMjDL,EAAA7L,EAAA8L,cAAA,UAAQC,UAAW7N,KAAK+M,MAAMqB,SAAW,WAAa,GAAIF,QAAS,kBAAM/B,EAAKqB,WACzEE,GAGX,MAAOW,GAEL,OADAC,QAAQC,MAAMF,GACP,aAvDwBG,IAAMC,WAA5B3B,EACH4B,aAAe,CACzBT,QAAS,KACTG,UAAU,OCXGO,mLAMb,IACI,IAAIC,EAAQ,cAIZ,OAHI5O,KAAK+M,MAAMqB,WACXQ,GAAS,aAEL5O,KAAK+M,MAAM8B,SAASpN,QACxB,KAAK,EACDmN,GAAS,OACT,MACJ,KAAK,EACDA,GAAS,OACT,MACJ,KAAK,EACDA,GAAS,SACT,MACJ,KAAK,EACDA,GAAS,QACT,MACJ,KAAK,EACDA,GAAS,QAIjB,OACIjB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAWe,GACX5O,KAAK+M,MAAM8B,UAGtB,MAAOR,GAEL,OADAC,QAAQC,MAAMF,GACP,aApCqBG,IAAMC,WAAzBE,EACHD,aAAe,CACzBN,UAAU,wBCOGU,cAOjB,SAAAA,EAAY/B,GAAc,IAAApD,EAAA,OAAAqD,OAAAC,EAAA,EAAAD,CAAAhN,KAAA8O,IACtBnF,EAAAqD,OAAAE,EAAA,EAAAF,CAAAhN,KAAAgN,OAAAG,EAAA,EAAAH,CAAA8B,GAAA1B,KAAApN,KAAM+M,KAEDM,MAAQ,CACT0B,MAAM,GAJYpF,0EAQPqF,GACfA,EAAEC,kBACFjP,KAAKuN,SAAS,CACVwB,MAAO/O,KAAKqN,MAAM0B,sCAIXG,GACXlP,KAAKuN,SAAS,CACVwB,MAAM,IAEV/O,KAAK+M,MAAMoC,OAAOD,oCAGN,IAAA/C,EAAAnM,KACZ,IACI,GAAkC,IAA9BA,KAAK+M,MAAMqC,QAAQ3N,OACnB,OAAO,KAGX,IAGI4N,EAHAT,EAAQ5O,KAAK+M,MAAMqB,SAAW,oBAAsB,WAClDV,EAAU,GAGhB,GAAI1N,KAAK+M,MAAMuC,WAAY,CACvB,IAAMC,EAAuEvP,KAAK+M,MAAMqC,QAAQhP,KAAK,SAAAoP,GAAC,OAAIA,EAAEtP,KAAOiM,EAAKY,MAAMuC,aAC1HC,IACAF,EAAeE,EAAO9O,WAG1B4O,EAAsCrP,KAAK+M,MAAM0C,YAUrD,GAPA/B,EAAQjL,KACJkL,EAAA7L,EAAA8L,cAAA,OAAK8B,IAAI,YAAY7B,UAAU,eAAe8B,MAAON,GACjD1B,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,aAAawB,GAC5B1B,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,QAAQC,IAAK8B,IAAU5B,IAAI,YAI9ChO,KAAKqN,MAAM0B,KAAM,CACjBH,GAAS,QAET,IAAMlH,EAAQ1H,KAAK+M,MAAMqC,QAAQ9G,IAAI,SAAAiH,GACjC,OAAoB,OAAhBA,EAAO9O,KACAkN,EAAA7L,EAAA8L,cAAA,OAAK8B,IAAKH,EAAOrP,GAAI2N,UAAU,YAGlCF,EAAA7L,EAAA8L,cAACiC,EAAD,CACIH,IAAKH,EAAOrP,GACZqP,OAAQA,EACRO,SAAUP,EAAOrP,KAAOiM,EAAKY,MAAMuC,WACnCH,OAAQ,SAAAD,GAAQ,OAAI/C,EAAKgD,OAAOD,QAMhDxB,EAAQjL,KACJkL,EAAA7L,EAAA8L,cAAA,OAAK8B,IAAI,UAAU7B,UAAU,oBACxBnG,IAKb,OACIiG,EAAA7L,EAAA8L,cAAA,OAAKC,UAAWe,EAAOV,QAAS,SAAAc,GAAC,OAAI7C,EAAK4D,WAAWf,KAChDtB,GAGX,MAAOW,GAEL,OADAC,QAAQC,MAAMF,GACP,aAvFmBG,IAAMC,WAAvBK,EACHJ,aAAe,CACzBY,WAAY,KACZG,YAAa,YACbrB,UAAU,OA8FZ4B,gLACYhB,GACVA,EAAEC,kBACGjP,KAAK+M,MAAMwC,OAAOnB,UACnBpO,KAAK+M,MAAMoC,OAAOnP,KAAK+M,MAAMwC,OAAOrP,qCAI5B,IAAA+P,EAAAjQ,KACZ,IACI,IAAI4O,EAAQ,kBAQZ,OAPI5O,KAAK+M,MAAM+C,WACXlB,GAAS,aAET5O,KAAK+M,MAAMwC,OAAOnB,WAClBQ,GAAS,aAITjB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAWe,EAAOe,MAAO3P,KAAK+M,MAAMwC,OAAO9O,KAAMyN,QAAS,SAAAc,GAAC,OAAIiB,EAAKC,MAAMlB,KAC1EhP,KAAK+M,MAAMwC,OAAO9O,MAG7B,MAAO4N,GAEL,OADAC,QAAQC,MAAMF,GACP,aAzBUG,IAAMC,2BCpGd0B,cAKjB,SAAAA,EAAYpD,GAAc,IAAApD,EAAA,OAAAqD,OAAAC,EAAA,EAAAD,CAAAhN,KAAAmQ,IACtBxG,EAAAqD,OAAAE,EAAA,EAAAF,CAAAhN,KAAAgN,OAAAG,EAAA,EAAAH,CAAAmD,GAAA/C,KAAApN,KAAM+M,KAEDM,MAAQ,CACT+C,UAAU,GAJQzG,wEAStB3J,KAAKuN,SAAS,CACV6C,UAAWpQ,KAAKqN,MAAM+C,4CAId,IAAAjE,EAAAnM,KACZ,IACI,IAAI4O,EAAQ5O,KAAK+M,MAAMqB,SAAW,oBAAsB,WACpDpO,KAAKqN,MAAM+C,WACXxB,GAAS,aAGb,IAAIlB,EAAU,KASd,OARI1N,KAAKqN,MAAM+C,WACX1C,EACIC,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,oBACV7N,KAAK+M,MAAMW,UAMpBC,EAAA7L,EAAA8L,cAAA,OAAKC,UAAWe,GACZjB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,kBAAkBK,QAAS,kBAAM/B,EAAKqB,WACjDG,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,iBAAiB7N,KAAK+M,MAAMtM,MAC3CkN,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,kBAAkBC,IAAKuC,IAAOrC,IAAI,WAEpDN,GAGX,MAAOW,GAEL,OADAC,QAAQC,MAAMF,GACP,aA9CmBG,IAAMC,WAAvB0B,EACHzB,aAAe,CACzBN,UAAU,OCNGkC,gLAMHtB,EAAqBpN,GAA+C,IAAlC2O,EAAkC/O,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAN,KACxEwN,EAAEC,kBACFjP,KAAK+M,MAAMmD,MAAMtO,EAAK2O,oCAGV,IAAA5G,EAAA3J,KACZ,IACI,IAAI4O,EAAQ,WAAa5O,KAAK+M,MAAMyD,WAAa,OAC7CxQ,KAAK+M,MAAMqB,WACXQ,GAAS,aAGb,IAAM6B,EAAoC,QAAzBzQ,KAAK+M,MAAMyD,WAAkD,SAAzBxQ,KAAK+M,MAAMyD,WAAmD,UAAzBxQ,KAAK+M,MAAMyD,UAC/FE,EAAmC,OAAzB1Q,KAAK+M,MAAMyD,WAAiD,SAAzBxQ,KAAK+M,MAAMyD,UACxDG,EAAqC,UAAzB3Q,KAAK+M,MAAMyD,UAE7B,OACI7C,EAAA7L,EAAA8L,cAAA,OAAKC,UAAWe,GACZjB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,QAAQe,MAAO,CAAEgC,QAASD,EAAW,OAAS,kBAC7DhD,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAWe,MAAO,CAAEgC,QAASD,EAAW,eAAiB,SACpEhD,EAAA7L,EAAA8L,cAAA,OACIE,IAAKuC,IACLzB,MAAO,CAAEgC,QAASH,EAAU,eAAiB,OAAQI,UAAW,kBAChE7C,IAAI,KACJE,QAAS,SAAAc,GAAC,OAAIrF,EAAKuG,MAAMlB,EAAG,UAGpCrB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,OACXF,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OACIE,IAAKuC,IACLzB,MAAO,CAAEgC,QAASH,EAAU,eAAiB,OAAQI,UAAW,kBAChE7C,IAAI,IACJE,QAAS,SAAAc,GAAC,OAAIrF,EAAKuG,MAAMlB,EAAG,IAAK,WAGzCrB,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OACIE,IAAKuC,IACLzB,MAAO,CAAEgC,QAASF,EAAS,eAAiB,QAC5C1C,IAAI,IACJE,QAAS,SAAAc,GAAC,OAAIrF,EAAKuG,MAAMlB,EAAG,IAAK,WAI7CrB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,QAAQe,MAAO,CAAEgC,QAASD,EAAW,OAAS,kBAC7DhD,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAWe,MAAO,CAAEgC,QAASD,EAAW,eAAiB,SACpEhD,EAAA7L,EAAA8L,cAAA,OACIE,IAAKuC,IACLzB,MAAO,CAAEgC,QAASH,EAAU,eAAiB,OAAQI,UAAW,mBAChE7C,IAAI,KACJE,QAAS,SAAAc,GAAC,OAAIrF,EAAKuG,MAAMlB,EAAG,UAGpCrB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,MAAMe,MAAO,CAAEkC,QAAUJ,GAAUD,EAAW,SAAW,MACpE9C,EAAA7L,EAAA8L,cAAA,OACIE,IAAKuC,IACLzB,MAAO,CAAEgC,QAASH,EAAU,eAAiB,OAAQI,UAAW,iBAChE7C,IAAI,IACJE,QAAS,SAAAc,GAAC,OAAIrF,EAAKuG,MAAMlB,EAAG,IAAK,UAErCrB,EAAA7L,EAAA8L,cAAA,OACIE,IAAKuC,IACLzB,MAAO,CAAEgC,QAASF,EAAS,eAAiB,OAAQG,UAAW,kBAC/D7C,IAAI,IACJE,QAAS,SAAAc,GAAC,OAAIrF,EAAKuG,MAAMlB,EAAG,IAAK,UAGzCrB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,UACfF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,MAAMe,MAAO,CAAEkC,QAAUJ,GAAUD,EAAW,SAAW,MACpE9C,EAAA7L,EAAA8L,cAAA,OACIE,IAAKuC,IACLzB,MAAO,CAAEgC,QAASF,EAAS,eAAiB,OAAQG,UAAW,iBAC/D7C,IAAI,IACJE,QAAS,SAAAc,GAAC,OAAIrF,EAAKuG,MAAMlB,EAAG,IAAK,SAErCrB,EAAA7L,EAAA8L,cAAA,OACIE,IAAKuC,IACLzB,MAAO,CAAEgC,QAASH,EAAU,eAAiB,OAAQI,UAAW,kBAChE7C,IAAI,IACJE,QAAS,SAAAc,GAAC,OAAIrF,EAAKuG,MAAMlB,EAAG,IAAK,WAGzCrB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,QAAQe,MAAO,CAAEgC,QAASD,EAAW,OAAS,kBAC7DhD,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAWe,MAAO,CAAEgC,QAASD,EAAW,eAAiB,SACpEhD,EAAA7L,EAAA8L,cAAA,OACIE,IAAKuC,IACLzB,MAAO,CAAEgC,QAASH,EAAU,eAAiB,OAAQI,UAAW,iBAChE7C,IAAI,KACJE,QAAS,SAAAc,GAAC,OAAIrF,EAAKuG,MAAMlB,EAAG,UAGpCrB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,OACXF,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OACIE,IAAKuC,IACLzB,MAAO,CAAEgC,QAASF,EAAS,eAAiB,OAAQG,UAAW,kBAC/D7C,IAAI,IACJE,QAAS,SAAAc,GAAC,OAAIrF,EAAKuG,MAAMlB,EAAG,IAAK,UAGzCrB,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OACIE,IAAKuC,IACLzB,MAAO,CAAEgC,QAASH,EAAU,eAAiB,QAC7CzC,IAAI,IACJE,QAAS,SAAAc,GAAC,OAAIrF,EAAKuG,MAAMlB,EAAG,IAAK,YAI7CrB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,QAAQe,MAAO,CAAEgC,QAASD,EAAW,OAAS,kBAC7DhD,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAWe,MAAO,CAAEgC,QAASD,EAAW,eAAiB,SACpEhD,EAAA7L,EAAA8L,cAAA,OACIE,IAAKuC,IACLzB,MAAO,CAAEgC,QAASH,EAAU,eAAiB,OAAQI,UAAW,kBAChE7C,IAAI,KACJE,QAAS,SAAAc,GAAC,OAAIrF,EAAKuG,MAAMlB,EAAG,WAM9C,MAAOX,GAEL,OADAC,QAAQC,MAAMF,GACP,aAlIiBG,IAAMC,WAArB6B,EACH5B,aAAe,CACzB8B,UAAW,MACXpC,UAAU,yCCEG2C,gLAQH/B,EAAqBzL,GAC/ByL,EAAEC,kBACFjP,KAAK+M,MAAMiE,WAAWzN,oCAGTyL,EAAqBzL,GAClCyL,EAAEiC,iBACFjC,EAAEC,kBACFjP,KAAK+M,MAAMiE,WAAWzN,oCAGV,IAAAoG,EAAA3J,KACZ,IACI,IAAI4O,EAAQ,aACRtL,EAAQtD,KAAK+M,MAAM7D,OAAOlJ,KAAK+M,MAAMtJ,MAC3B,IAAVH,IACAsL,GAAS,WAGT5O,KAAK+M,MAAM6D,UACXtN,EAAQtD,KAAK+M,MAAM6D,QAAQtN,IAG/B,IAAM4N,EAA2B,GAC3BC,EAA0B,GAE5BnR,KAAK+M,MAAMqE,SACXpR,KAAK+M,MAAMqE,QAAQvQ,QAAQ,SAAAwQ,GACvBH,EAAUzO,KACNkL,EAAA7L,EAAA8L,cAAA,OACI8B,IAAK,QAAU2B,EACfxD,UAAU,qBACVyD,WAAY,SAAAtC,GAAC,OAAIrF,EAAK4H,SAASvC,GAAI,EAAIqC,IACvCnD,QAAS,SAAAc,GAAC,OAAIrF,EAAKuG,MAAMlB,GAAI,EAAIqC,KAEhC,IAAMA,IAIfF,EAAS1O,KACLkL,EAAA7L,EAAA8L,cAAA,OACI8B,IAAK,OAAS2B,EACdxD,UAAU,qBACVyD,WAAY,SAAAtC,GAAC,OAAIrF,EAAK4H,SAASvC,EAAG,EAAKqC,IACvCnD,QAAS,SAAAc,GAAC,OAAIrF,EAAKuG,MAAMlB,EAAG,EAAKqC,KAEhC,IAAMA,MAKnBH,EAAUM,YAEVN,EAAUzO,KACNkL,EAAA7L,EAAA8L,cAAA,OAAK8B,IAAI,SAAS7B,UAAU,cAAcyD,WAAY,SAAAtC,GAAC,OAAIrF,EAAK4H,SAASvC,GAAI,IAAId,QAAS,SAAAc,GAAC,OAAIrF,EAAKuG,MAAMlB,GAAI,KAC1GrB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,QAAQC,IAAK2D,IAAOzD,IAAI,YAI/CmD,EAAS1O,KACLkL,EAAA7L,EAAA8L,cAAA,OAAK8B,IAAI,QAAQ7B,UAAU,cAAcyD,WAAY,SAAAtC,GAAC,OAAIrF,EAAK4H,SAASvC,EAAG,IAAKd,QAAS,SAAAc,GAAC,OAAIrF,EAAKuG,MAAMlB,EAAG,KACxGrB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,QAAQC,IAAK4D,IAAM1D,IAAI,YAKlD,IAAM2D,EAAY,IAAM3R,KAAK+M,MAAMqE,QAAUpR,KAAK+M,MAAMqE,QAAQ3P,OAAS,GAEzE,OACIkM,EAAA7L,EAAA8L,cAAA,OAAKC,UAAW7N,KAAK+M,MAAMqB,SAAW,gBAAkB,QACpDT,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,SACVqD,GAELvD,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,OAAOe,MAAO,CAAE/G,MAAO,eAAiB8J,EAAY,QAC/DhE,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAc7N,KAAK+M,MAAM6E,OACxCjE,EAAA7L,EAAA8L,cAAA,OAAKC,UAAWe,GAAQtL,IAE5BqK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,QACVsD,IAIf,MAAO9C,GAEL,OADAC,QAAQC,MAAMF,GACP,aA5FeG,IAAMC,WAAnBsC,EACHrC,aAAe,CACzBkD,MAAO,KACPxD,UAAU,EACVgD,QAAS,KACTR,QAAS,UCFIiB,cAMjB,SAAAA,EAAY9E,GAAc,IAAApD,EAAA,OAAAqD,OAAAC,EAAA,EAAAD,CAAAhN,KAAA6R,IACtBlI,EAAAqD,OAAAE,EAAA,EAAAF,CAAAhN,KAAAgN,OAAAG,EAAA,EAAAH,CAAA6E,GAAAzE,KAAApN,KAAM+M,KACDM,MAAQ,CACTyE,mBAAmB,GAHDnI,qFAQtB3J,KAAKuN,SAAS,CACVuE,mBAAoB9R,KAAKqN,MAAMyE,qDAIvB,IAAA3F,EAAAnM,KACZ,IA+GI,OA5GIA,KAAK+M,MAAMgF,KAEPpE,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAACoE,EAAD,CACI9I,OAAQlJ,KAAK+M,MAAMnE,UAAU1C,cAC7BzC,KAAK,MACLmO,MAAM,WACNZ,WAAY,SAACzN,GAAD,OAAmB4I,EAAKY,MAAMiE,WAAW7E,EAAKY,MAAMnE,UAAW,oBAAqBrF,MAEpGoK,EAAA7L,EAAA8L,cAACoE,EAAD,CACI9I,OAAQlJ,KAAK+M,MAAMnE,UAAU1C,cAC7BzC,KAAK,MACLmO,MAAM,YACNZ,WAAY,SAACzN,GAAD,OAAmB4I,EAAKY,MAAMiE,WAAW7E,EAAKY,MAAMnE,UAAW,oBAAqBrF,MAEpGoK,EAAA7L,EAAA8L,cAACoE,EAAD,CACI9I,OAAQlJ,KAAK+M,MAAMnE,UAAU1C,cAC7BzC,KAAK,MACLmO,MAAM,eACNZ,WAAY,SAACzN,GAAD,OAAmB4I,EAAKY,MAAMiE,WAAW7E,EAAKY,MAAMnE,UAAW,oBAAqBrF,MAEpGoK,EAAA7L,EAAA8L,cAACoE,EAAD,CACI9I,OAAQlJ,KAAK+M,MAAMnE,UAAU1C,cAC7BzC,KAAK,MACLmO,MAAM,eACNZ,WAAY,SAACzN,GAAD,OAAmB4I,EAAKY,MAAMiE,WAAW7E,EAAKY,MAAMnE,UAAW,oBAAqBrF,MAEpGoK,EAAA7L,EAAA8L,cAACoE,EAAD,CACI9I,OAAQlJ,KAAK+M,MAAMnE,UAAU1C,cAC7BzC,KAAK,MACLmO,MAAM,SACNZ,WAAY,SAACzN,GAAD,OAAmB4I,EAAKY,MAAMiE,WAAW7E,EAAKY,MAAMnE,UAAW,oBAAqBrF,MAEpGoK,EAAA7L,EAAA8L,cAACoE,EAAD,CACI9I,OAAQlJ,KAAK+M,MAAMnE,UAAU1C,cAC7BzC,KAAK,MACLmO,MAAM,WACNZ,WAAY,SAACzN,GAAD,OAAmB4I,EAAKY,MAAMiE,WAAW7E,EAAKY,MAAMnE,UAAW,oBAAqBrF,OAMxGoK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,iBAAiBK,QAAS,kBAAM/B,EAAK8F,wBAChDtE,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,iBACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,mBAAf,OACAF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,iBAEP7N,KAAKqN,MAAMyE,kBACT9R,KAAK+M,MAAMnE,UAAU1C,cAAc7D,IACnCzC,EAAMsS,SAASlS,KAAK+M,MAAMnE,UAAU1C,cAAc7D,OAIhEsL,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,iBACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,mBAAf,OACAF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,iBAEP7N,KAAKqN,MAAMyE,kBACT9R,KAAK+M,MAAMnE,UAAU1C,cAAcC,IACnCvG,EAAMsS,SAASlS,KAAK+M,MAAMnE,UAAU1C,cAAcC,OAIhEwH,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,iBACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,mBAAf,OACAF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,iBAEP7N,KAAKqN,MAAMyE,kBACT9R,KAAK+M,MAAMnE,UAAU1C,cAAcE,IACnCxG,EAAMsS,SAASlS,KAAK+M,MAAMnE,UAAU1C,cAAcE,OAIhEuH,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,iBACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,mBAAf,OACAF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,iBAEP7N,KAAKqN,MAAMyE,kBACT9R,KAAK+M,MAAMnE,UAAU1C,cAAcG,IACnCzG,EAAMsS,SAASlS,KAAK+M,MAAMnE,UAAU1C,cAAcG,OAIhEsH,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,iBACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,mBAAf,OACAF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,iBAEP7N,KAAKqN,MAAMyE,kBACT9R,KAAK+M,MAAMnE,UAAU1C,cAAcI,IACnC1G,EAAMsS,SAASlS,KAAK+M,MAAMnE,UAAU1C,cAAcI,OAIhEqH,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,iBACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,mBAAf,OACAF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,iBAEP7N,KAAKqN,MAAMyE,kBACT9R,KAAK+M,MAAMnE,UAAU1C,cAAcK,IACnC3G,EAAMsS,SAASlS,KAAK+M,MAAMnE,UAAU1C,cAAcK,QAS9E,MAAOyI,GACLV,QAAQC,MAAMS,WArIqBR,IAAMC,WAAhCoD,EACHnD,aAAe,CACzBqD,KAAM,KACNf,WAAY,UCFCmB,mLACD,IAAAxI,EAAA3J,KACZ,IACI,IAAMoS,EAAa,GACnB,GAAIpS,KAAK+M,MAAMnE,UAAUwJ,WACrB,IAAK,IAAIpN,EAAI,EAAGA,IAAMhF,KAAK+M,MAAMnE,UAAUwJ,WAAW3Q,SAAUuD,EAAG,CAC/D,IAAMb,EAAInE,KAAK+M,MAAMnE,UAAUwJ,WAAWpN,GAC1CoN,EAAW3P,KACPkL,EAAA7L,EAAA8L,cAACyE,EAAD,CACI3C,IAAK1K,EACLxB,UAAWW,EACXT,OAAQ1D,KAAK+M,MAAMrJ,OACnB4O,oBAAqB,SAAC9O,EAAWJ,EAAMG,GAAlB,OAA4BoG,EAAKoD,MAAMuF,oBAAoB9O,EAAWJ,EAAMG,IACjGgP,cAAe,SAAA/O,GAAS,OAAImG,EAAKoD,MAAMwF,cAAc/O,IACrDgP,gBAAiB,SAAAC,GAAW,OAAI9I,EAAKoD,MAAMyF,gBAAgBC,OAM3E,OACI9E,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACVuE,EACDzE,EAAA7L,EAAA8L,cAAA,UAAQM,QAAS,kBAAMvE,EAAKoD,MAAM2F,iBAAlC,oBAGV,MAAO1D,GACLV,QAAQC,MAAMS,WA3BmBR,IAAMC,WAwC7CkE,mLACc,IAAAxG,EAAAnM,KACZ,IACI,IAAIyD,EAAezD,KAAK+M,MAAMvJ,UAAUC,MAAQ,YACd,eAA9BzD,KAAK+M,MAAMvJ,UAAUC,OACrBA,GAAQ,KAAOzD,KAAK+M,MAAMvJ,UAAUN,MAAQ,KAEb,WAA9BlD,KAAK+M,MAAMvJ,UAAUC,MAAqD,OAA9BzD,KAAK+M,MAAMvJ,UAAU/C,OAClEgD,EAAOzD,KAAK+M,MAAMvJ,UAAU/C,MAGM,OAAlCT,KAAK+M,MAAMvJ,UAAUG,WACrBF,GAAQ,IAAM7D,EAAMgT,sBAAsB5S,KAAK+M,MAAMvJ,UAAWxD,KAAK+M,MAAMrJ,SAG/E,IAAMmP,EAAc,GACc,eAA9B7S,KAAK+M,MAAMvJ,UAAUC,MACrBoP,EAAYpQ,KACRkL,EAAA7L,EAAA8L,cAAA,OAAK8B,IAAI,QAAQ7B,UAAU,WACvBF,EAAA7L,EAAA8L,cAACoE,EAAD,CACI9I,OAAQlJ,KAAK+M,MAAMvJ,UACnBC,KAAK,QACLmO,MAAM,QACNZ,WAAY,SAAAzN,GAAK,OAAI4I,EAAKY,MAAMuF,oBAAoBnG,EAAKY,MAAMvJ,UAAW,QAASD,QAMnG,IADA,IAAM9C,EAAOb,EAAMkT,cAAc9S,KAAK+M,MAAMvJ,WACnCwB,EAAI,EAAGA,IAAMvE,EAAKgB,SAAUuD,EACjC6N,EAAYpQ,KAAKkL,EAAA7L,EAAA8L,cAAA,OAAK8B,IAAK1K,EAAG6I,UAAU,WAAWpN,EAAKuE,KAG5D,OACI2I,EAAA7L,EAAA8L,cAACmF,EAAD,CACItS,KAAMgD,EACNiK,QACIC,EAAA7L,EAAA8L,cAAA,WACKiF,EACDlF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YACfF,EAAA7L,EAAA8L,cAAA,UAAQM,QAAS,kBAAM/B,EAAKY,MAAMwF,cAAcpG,EAAKY,MAAMvJ,aAA3D,QACAmK,EAAA7L,EAAA8L,cAAA,UAAQM,QAAS,kBAAM/B,EAAKY,MAAMyF,gBAAgBrG,EAAKY,MAAMvJ,UAAUtD,MAAvE,aAKlB,MAAO8O,GACLV,QAAQC,MAAMS,WA/CGR,IAAMC,4BC/C7BuE,EAAW,IAAIC,IAASC,UAaTC,2LAWQzJ,EAAc0J,EAAyBC,GAAyB,IAAA1J,EAAA3J,KACrF,OACI2N,EAAA7L,EAAA8L,cAAC0F,EAAD,CACI5D,IAAKhG,EAAMxJ,GACXwJ,MAAOA,EACP6J,KAAMvT,KAAK+M,MAAMwG,KACjBH,UAAWA,EACXC,UAAWA,EACX/J,YAAa,SAACkK,EAAQpQ,EAAME,GAAf,OAAyBqG,EAAKoD,MAAMzD,YAAYkK,EAAQpQ,EAAME,IAC3EmQ,YAAa,SAAAD,GAAM,OAAI7J,EAAKoD,MAAM0G,YAAYD,IAC9C7G,UAAW,SAAA6G,GAAM,OAAI7J,EAAKoD,MAAMJ,UAAU6G,IAC1CE,WAAY,SAAC3H,EAAIC,GAAL,OAAYrC,EAAKoD,MAAM2G,WAAW3H,EAAIC,4CAKxC2H,EAA+CvQ,GACjE,IAAM+D,EAASwM,EAAavQ,GAC5B,OAAsB,IAAlB+D,EAAO1F,OACA,KAIPkM,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,sBAAsBjO,EAAMiM,UAAUzI,GAAM,IAC1D+D,oCAKG,IAAAgF,EAAAnM,KACZ,IACI,IAAM2T,EAAgD,GA0BtD,OAxBA5K,EAAYlI,QAAQ,SAAAuC,GAMhB,IALA,IAAM+D,EAASgF,EAAKY,MAAMnE,UAAUzB,OAC/B3G,OAAO,SAAA8L,GAAC,OAAIA,EAAElJ,OAASA,IACvB5C,OAAO,SAAA8L,GAAC,OAAI1M,EAAMgU,MAAMzH,EAAKY,MAAMvM,OAAQ8L,EAAE7I,QAE5CoQ,EAAsB,GACnB7O,EAAI,EAAGA,IAAMmC,EAAO1F,SAAUuD,EAAG,CACtC,IAAM0E,EAAQvC,EAAOnC,GACfoO,EAAkB,IAANpO,EAAUmC,EAAOnC,EAAI,GAAK,KACtCqO,EAAYrO,IAAMmC,EAAO1F,OAAS,EAAI0F,EAAOnC,EAAI,GAAK,KAC5D6O,EAAKpR,KAAK0J,EAAK2H,iBAAiBpK,EAAO0J,EAAWC,IAG9B,SAApBlH,EAAKY,MAAMwG,MACXM,EAAKpR,KACDkL,EAAA7L,EAAA8L,cAAA,UAAQ8B,IAAI,MAAMxB,QAAS,kBAAM/B,EAAKY,MAAMgH,SAAS3Q,KAArD,aACexD,EAAMiM,UAAUzI,GAAM,KAK7CuQ,EAAavQ,GAAQyQ,IAGD,SAApB7T,KAAK+M,MAAMwG,KAEP5F,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,gBACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,gDACV7N,KAAKgU,cAAcL,EAAc,UAEtChG,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,gDACV7N,KAAKgU,cAAcL,EAAc,WAEtChG,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,gDACV7N,KAAKgU,cAAcL,EAAc,aACjC3T,KAAKgU,cAAcL,EAAc,QACjC3T,KAAKgU,cAAcL,EAAc,cAMP,IAAvC3T,KAAK+M,MAAMnE,UAAUzB,OAAO1F,OAExBkM,EAAA7L,EAAA8L,cAAA,WAAKD,EAAA7L,EAAA8L,cAAA,kCAKTD,EAAA7L,EAAA8L,cAAA,WACK5N,KAAKgU,cAAcL,EAAc,SACjC3T,KAAKgU,cAAcL,EAAc,UACjC3T,KAAKgU,cAAcL,EAAc,aACjC3T,KAAKgU,cAAcL,EAAc,QACjC3T,KAAKgU,cAAcL,EAAc,aAG5C,MAAO3E,GACLV,QAAQC,MAAMS,WAvGeR,IAAMC,WAA1B0E,EACHzE,aAAe,CACzB6E,KAAM,OACN/S,OAAQ,GACRuT,SAAU,KACVpH,UAAW,KACX8G,YAAa,KACbnK,YAAa,KACboK,WAAY,UA+GdO,mLACc,IAAAhE,EAAAjQ,KACZ,IACI,IAAIkU,EAAU,EACVC,EAAUnU,KAAK+M,MAAMrD,MAAMjG,MAAQ,WAAa7D,EAAMiM,UAAU7L,KAAK+M,MAAMrD,MAAMtG,MAAM,GAE3F,GAAIpD,KAAK+M,MAAMrD,MAAMrC,MAAO,CACxB,IAAI+M,EAAO,GACPpU,KAAK+M,MAAMrD,MAAMrC,MAAM1G,cAAc0T,WAAW,eAChDH,EAAU,EACNlU,KAAK+M,MAAMrD,MAAMpC,KAAO,IACxB8M,EAAO,WAGf,IAAME,EAAQtU,KAAK+M,MAAMrD,MAAMrC,MAAM1G,cAAciT,MAAM,oBACrDU,IACAJ,EAAU1R,SAAS8R,EAAM,GAAI,IACzBtU,KAAK+M,MAAMrD,MAAMpC,KAAO,IACxB8M,EAAO,UAAYpU,KAAK+M,MAAMrD,MAAMpC,OAG5C6M,GAAW,MAAQnU,KAAK+M,MAAMrD,MAAMrC,MAAQ+M,EAAO,KAEvD,IAAMG,EAAW,KAAOJ,EAAU,MAAQnU,KAAK+M,MAAMrD,MAAMjJ,KAE3D,OAAQT,KAAK+M,MAAMwG,MACf,IAAK,OACD,OACI5F,EAAA7L,EAAA8L,cAAA,OAAK8B,IAAK1P,KAAK+M,MAAMrD,MAAMxJ,GAAI2N,UAAU,iBACrCF,EAAA7L,EAAA8L,cAAA,OAAK4G,wBAAyB,CAAEC,OAAQzB,EAAS0B,SAASH,OAGtE,IAAK,OACD,IAAMtG,EACFN,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,SACIxK,KAAK,OACLqM,YAAY,OACZnM,MAAOtD,KAAK+M,MAAMrD,MAAMjG,KACxBkR,SAAU,SAAAC,GAAK,OAAI3E,EAAKlD,MAAMzD,YAAY2G,EAAKlD,MAAMrD,MAAO,OAAQkL,EAAM3L,OAAO3F,UAErFqK,EAAA7L,EAAA8L,cAAA,SACIxK,KAAK,OACLqM,YAAY,QACZnM,MAAOtD,KAAK+M,MAAMrD,MAAMrC,MACxBsN,SAAU,SAAAC,GAAK,OAAI3E,EAAKlD,MAAMzD,YAAY2G,EAAKlD,MAAMrD,MAAO,QAASkL,EAAM3L,OAAO3F,UAEtFqK,EAAA7L,EAAA8L,cAAA,YACI6B,YAAY,UACZnM,MAAOtD,KAAK+M,MAAMrD,MAAMjJ,KACxBkU,SAAU,SAAAC,GAAK,OAAI3E,EAAKlD,MAAMzD,YAAY2G,EAAKlD,MAAMrD,MAAO,OAAQkL,EAAM3L,OAAO3F,UAErFqK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YACfF,EAAA7L,EAAA8L,cAACiH,EAAD,CACIhG,SAAU,CACNlB,EAAA7L,EAAA8L,cAAA,UACI8B,IAAI,KACJ7B,UAAW7N,KAAK+M,MAAMqG,UAAY,GAAK,WACvClF,QAAS,kBAAM+B,EAAKlD,MAAM2G,WAAWzD,EAAKlD,MAAMrD,MAAOuG,EAAKlD,MAAMqG,aAHtE,WAOAzF,EAAA7L,EAAA8L,cAAA,UACI8B,IAAI,OACJ7B,UAAW7N,KAAK+M,MAAMsG,UAAY,GAAK,WACvCnF,QAAS,kBAAM+B,EAAKlD,MAAM2G,WAAWzD,EAAKlD,MAAMrD,MAAOuG,EAAKlD,MAAMsG,aAHtE,gBASR1F,EAAA7L,EAAA8L,cAACkH,EAAD,CAAerU,KAAK,SAASgN,SAAU,kBAAMwC,EAAKlD,MAAM0G,YAAYxD,EAAKlD,MAAMrD,WAIvF,OACIiE,EAAA7L,EAAA8L,cAACmF,EAAD,CACItS,KAAMT,KAAK+M,MAAMrD,MAAMjG,MAAQ,WAAa7D,EAAMiM,UAAU7L,KAAK+M,MAAMrD,MAAMtG,MAAM,GACnFsK,QAASO,IAGrB,IAAK,WACD,OACIN,EAAA7L,EAAA8L,cAAA,OAAK8B,IAAK1P,KAAK+M,MAAMrD,MAAMxJ,GAAI2N,UAAU,iBACrCF,EAAA7L,EAAA8L,cAAA,OAAK4G,wBAAyB,CAAEC,OAAQzB,EAAS0B,SAASH,MAC1D5G,EAAA7L,EAAA8L,cAAA,UAAQM,QAAS,kBAAM+B,EAAKlD,MAAMJ,UAAUsD,EAAKlD,MAAMrD,SAAvD,SAGZ,IAAK,SACD,IAAIkF,EAAQ,GACRvH,EAAQ,KACZ,GAAI6M,EAAU,EACOlU,KAAK+M,MAAMrD,MAAMpC,MAAQ4M,GAEtCtF,EAAQ,gBACRvH,EAAQsG,EAAA7L,EAAA8L,cAAA,UAAQM,QAAS,kBAAM+B,EAAKlD,MAAMzD,YAAY2G,EAAKlD,MAAMrD,MAAO,OAAQ,KAAxE,aAERrC,EAAQsG,EAAA7L,EAAA8L,cAAA,UAAQM,QAAS,kBAAM+B,EAAKlD,MAAMzD,YAAY2G,EAAKlD,MAAMrD,MAAO,OAAQuG,EAAKlD,MAAMrD,MAAMpC,KAAO,KAAhG,OAGhB,OACIqG,EAAA7L,EAAA8L,cAAA,OAAK8B,IAAK1P,KAAK+M,MAAMrD,MAAMxJ,GAAI2N,UAAU,iBACrCF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAWe,EAAO4F,wBAAyB,CAAEC,OAAQzB,EAAS0B,SAASH,MAC3ElN,IAInB,MAAO2H,GACLV,QAAQC,MAAMS,WA5GDR,IAAMC,WCzIVsG,mLAEb,IACI,OACIpH,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,QACV7N,KAAK+M,MAAMoH,QACZxG,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,gBACV7N,KAAK+M,MAAMW,UAI1B,MAAOsB,GACLV,QAAQC,MAAMS,WAZYR,IAAMC,2BC0DvBuG,cAiCjB,SAAAA,EAAYjI,GAAc,IAAApD,EAAA,OAAAqD,OAAAC,EAAA,EAAAD,CAAAhN,KAAAgV,IACtBrL,EAAAqD,OAAAE,EAAA,EAAAF,CAAAhN,KAAAgN,OAAAG,EAAA,EAAAH,CAAAgI,GAAA5H,KAAApN,KAAM+M,KACDM,MAAQ,CACT4H,aAAa,EACbC,UAAWnI,EAAMnE,UAAUnF,KAAO,QAClC0R,gBAAiB,GALCxL,4EASLuL,GACjBlV,KAAKuN,SAAS,CACV2H,UAAWA,4CAKflV,KAAKuN,SAAS,CACV0H,aAAcjV,KAAKqN,MAAM4H,gDAIf3R,GACdtD,KAAKuN,SAAS,CACV4H,gBAAiB7R,wCAILC,GAChBvD,KAAKuN,SAAS,CACV4H,gBAAiBlU,KAAKmU,IAAIpV,KAAKqN,MAAM8H,gBAAkB5R,EAAO,oCAIvD,IAAA4I,EAAAnM,KACL4I,EAAY5I,KAAK+M,MAAMnE,UAEzBa,GAAMb,EAAUa,GAAKb,EAAUa,GAAK,GAAKzJ,KAAKqN,MAAM8H,gBACxD1L,EAAKxI,KAAKoU,IAAI5L,EAAIzJ,KAAK+M,MAAMnE,UAAUhG,OAEvC5C,KAAKuN,SAAS,CACV4H,gBAAiB,GAClB,WACChJ,EAAKY,MAAMuI,SAAS1M,EAAWa,EAAI0C,EAAKY,MAAMnE,UAAUpC,2CAI/C,IAAAyJ,EAAAjQ,KACP4I,EAAY5I,KAAK+M,MAAMnE,UAEzBa,EAAMb,EAAUa,GAAKb,EAAUa,GAAK,EACpC8L,EAAOvV,KAAK+M,MAAMnE,UAAUpC,OAE5BE,EAAS1G,KAAKqN,MAAM8H,gBAGlBK,EAAMvU,KAAKoU,IAAI3O,EAAQ6O,GAC7B7O,GAAU8O,EACVD,GAAQC,EAGR/L,GAAM/C,EACN+C,EAAKxI,KAAKmU,IAAI3L,EAAI,GAElBzJ,KAAKuN,SAAS,CACV4H,gBAAiB,GAClB,WACClF,EAAKlD,MAAMuI,SAAS1M,EAAWa,EAAI8L,2CAKvC,IAAIE,GAAezV,KAAK+M,MAAMnE,UAAUtG,KAAO,IAAMtC,KAAK+M,MAAMnE,UAAU9C,UAAUnF,cAChFX,KAAK+M,MAAMnE,UAAU7C,MACrB0P,GAAe,KAAOzV,KAAK+M,MAAMnE,UAAU7C,IAAIpF,cAAgB,KAEnE8U,GAAe,KAEf,IAAIC,EAAQ,GAOZ,OANI1V,KAAK+M,MAAMnE,UAAU5C,YACrB0P,EAAQ1V,KAAK+M,MAAMnE,UAAU5C,UAAUrF,cAAgB,MAKpD8U,EAAcC,GAFV,MAAQ9V,EAAMqG,UAAUjG,KAAK+M,MAAMnE,UAAU3C,oDAKpC0P,GAAqB,IAAAC,EAAA5V,KACzC,OAAO2V,EAAK/Q,MAAMiR,KAAK,SAAAC,GACnB,IAAM/V,EAAQ6V,EAAK7I,MAAMjN,QAAQM,KAAK,SAAAC,GAAC,OAAIA,EAAEC,SAASC,SAASqV,EAAK7I,MAAMnE,aAC1E,QAAS7I,GAAU+V,EAAEtO,mBAAqBzH,EAAM0D,MAAUqS,EAAE/Q,cAAgB6Q,EAAK7I,MAAMnE,UAAUnF,uCAKrG,GAAqC,IAAjCzD,KAAK+M,MAAMnE,UAAUnC,QACrB,OAAOzG,KAAK+M,MAAMnE,UAAUhG,MAGhC,IAAMmT,EAAMnW,EAAM4J,WAAWxJ,KAAK+M,MAAMnE,UAAUtG,MAC5C0T,EAASpW,EAAMwC,cAAcpC,KAAK+M,MAAMnE,UAAU1C,cAAcE,KAAOpG,KAAK+M,MAAMnE,UAAUnC,QAC9FwP,EAAY,GAOhB,OANID,EAAS,IACTC,EAAY,KAAOD,GAEnBA,EAAS,IACTC,EAAY,IAAMD,GAEfhW,KAAK+M,MAAMnE,UAAUhG,MAAQ,KAAO5C,KAAK+M,MAAMnE,UAAUnC,QAAU,IAAMsP,EAAME,EAAY,qCAGtF,IAAAC,EAAAlW,KACZ,IACI,IAAMoP,EAAU,GAChB,IAA+C,IAA3CpP,KAAK+M,MAAMwG,KAAKxS,QAAQ,cAAsB,CAC9C,IAAyC,IAArCf,KAAK+M,MAAMwG,KAAKxS,QAAQ,QAAgB,CACxC,IAA6C,IAAzCf,KAAK+M,MAAMwG,KAAKxS,QAAQ,YAAoB,CAC5CqO,EAAQ3M,KACJkL,EAAA7L,EAAA8L,cAAA,UAAQ8B,IAAI,OAAOxB,QAAS,kBAAMgI,EAAKnJ,MAAMoJ,YAAYD,EAAKnJ,MAAMnE,aAApE,iBAGJwG,EAAQ3M,KACJkL,EAAA7L,EAAA8L,cAACmF,EAAD,CACIrD,IAAI,QACJjP,KAAK,gBACLiN,QACIC,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,SACIxK,KAAK,OACLqM,YAAY,eACZnM,MAAOtD,KAAKqN,MAAM6H,UAClBP,SAAU,SAAAC,GAAK,OAAIsB,EAAKE,aAAaxB,EAAM3L,OAAO3F,UAEtDqK,EAAA7L,EAAA8L,cAAA,UAAQM,QAAS,kBAAMgI,EAAKnJ,MAAMsJ,aAAaH,EAAKnJ,MAAMnE,UAAWsN,EAAK7I,MAAM6H,aAAhF,mBAMhB,IAAMoB,EAA+C,GACrDtW,KAAK+M,MAAMjN,QAAQe,QAAQ,SAAAd,IAC+B,IAAlDA,EAAMO,SAASS,QAAQmV,EAAKnJ,MAAMnE,YAClC0N,EAAa7T,KAAK,CACdvC,GAAIH,EAAMG,GACVO,KAAMV,EAAM0D,SAIxB2L,EAAQ3M,KACJkL,EAAA7L,EAAA8L,cAAC2I,EAAD,CACI7G,IAAI,OACJN,QAASkH,EACT7G,YAAY,mBACZN,OAAQ,SAAAD,GAAQ,OAAIgH,EAAKnJ,MAAMyJ,YAAYN,EAAKnJ,MAAMnE,UAAWsG,OAIzEE,EAAQ3M,KAAKkL,EAAA7L,EAAA8L,cAACkH,EAAD,CAAepF,IAAI,SAASjP,KAAK,iBAAiBgN,SAAU,kBAAMyI,EAAKnJ,MAAM0J,cAAcP,EAAKnJ,MAAMnE,eAEvH,IAA8C,IAA1C5I,KAAK+M,MAAMwG,KAAKxS,QAAQ,aACxB,GAAIf,KAAK+M,MAAMlI,KAEXuK,EAAQ3M,KACJkL,EAAA7L,EAAA8L,cAAA,UAAQ8B,IAAI,SAASxB,QAAS,kBAAMgI,EAAKnJ,MAAM2J,oBAAoBR,EAAKnJ,MAAMlI,QAA9E,8BAID,CACH,IAAI8R,GAAS,EAqBb,GAnBK3W,KAAK4W,gBAAgB5W,KAAK+M,MAAMrI,aACjC0K,EAAQ3M,KACJkL,EAAA7L,EAAA8L,cAAA,UAAQ8B,IAAI,gBAAgBxB,QAAS,kBAAMgI,EAAKnJ,MAAM8J,iBAAiBX,EAAKnJ,MAAMnE,UAAW,QAA7F,qBAIJ+N,GAAS,GAEb3W,KAAK+M,MAAMrI,UAAU6C,MAAM1G,QAAQ,SAAA8U,GAC1BO,EAAKU,gBAAgBjB,KACtBvG,EAAQ3M,KACJkL,EAAA7L,EAAA8L,cAAA,UAAQ8B,IAAK,OAASiG,EAAKzV,GAAIgO,QAAS,kBAAMgI,EAAKnJ,MAAM8J,iBAAiBX,EAAKnJ,MAAMnE,UAAW+M,EAAKzV,MAArG,UACYyV,EAAKlS,OAGrBkT,GAAS,MAIZA,EACD,OACIhJ,EAAA7L,EAAA8L,cAACkJ,EAAD,CACI3C,QAEQxG,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,SAAS7N,KAAK+M,MAAMnE,UAAUnF,OAIzDiK,QAEQC,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,oBACXF,EAAA7L,EAAA8L,cAAA,+DASc,IAA1C5N,KAAK+M,MAAMwG,KAAKxS,QAAQ,gBACqB,IAAzCf,KAAK+M,MAAMwG,KAAKxS,QAAQ,YACxBqO,EAAQ3M,KACJkL,EAAA7L,EAAA8L,cAAA,UAAQ8B,IAAI,SAASxB,QAAS,kBAAMgI,EAAKnJ,MAAMgK,cAAcb,EAAKnJ,MAAMnE,aAAxE,mBAGJwG,EAAQ3M,KACJkL,EAAA7L,EAAA8L,cAAA,UAAQ8B,IAAI,WAAWxB,QAAS,kBAAMgI,EAAKnJ,MAAMiK,gBAAgBd,EAAKnJ,MAAMnE,aAA5E,sBAKhB,IAA2C,IAAvC5I,KAAK+M,MAAMwG,KAAKxS,QAAQ,UAAkB,CAC1C,IAAM6H,EAAY5I,KAAK+M,MAAMnE,WAEgB,IAAzC5I,KAAK+M,MAAMwG,KAAKxS,QAAQ,eACmB,IAAvCf,KAAK+M,MAAMwG,KAAKxS,QAAQ,YACxBqO,EAAQ3M,KACJkL,EAAA7L,EAAA8L,cAAA,OAAK8B,IAAI,UAAU7B,UAAU,oBACzBF,EAAA7L,EAAA8L,cAACqJ,EAAD,CACIzG,UAAU,QACVN,MAAO,SAAAtO,GAAG,OAAIsU,EAAKnJ,MAAMmK,QAAQtO,EAAWhH,QAIxDwN,EAAQ3M,KACJkL,EAAA7L,EAAA8L,cAACoE,EAAD,CACItC,IAAI,WACJxG,OAAQlJ,KAAK+M,MAAMnE,UACnBnF,KAAK,WACLmO,MAAM,WACNhB,QAAS,SAAAtN,GAAK,OAAIA,EAAQ,QAC1B0N,WAAY,SAAAzN,GAAK,OAAI2S,EAAKnJ,MAAMiE,WAAWkF,EAAKnJ,MAAMnE,UAAW,WAAoB,EAARrF,OAGrF6L,EAAQ3M,KAAKkL,EAAA7L,EAAA8L,cAAA,UAAQ8B,IAAI,YAAYxB,QAAS,kBAAMgI,EAAKnJ,MAAMoK,UAAUvO,KAA5D,sBAE2B,IAAxC5I,KAAK+M,MAAMwG,KAAKxS,QAAQ,YACxBqO,EAAQ3M,KAAKkL,EAAA7L,EAAA8L,cAAA,UAAQ8B,IAAI,SAASxB,QAAS,kBAAMgI,EAAKnJ,MAAMqK,OAAOxO,KAAtD,eAEjBwG,EAAQ3M,KAAKkL,EAAA7L,EAAA8L,cAAA,OAAK8B,IAAI,eAAe7B,UAAU,eAE/CjF,EAAUyO,SAAYzO,EAAUxD,QAAWwD,EAAU0O,UACrDlI,EAAQ3M,KAAKkL,EAAA7L,EAAA8L,cAACkH,EAAD,CAAepF,IAAI,SAASjP,KAAK,wBAAwBgN,SAAU,kBAAMyI,EAAKnJ,MAAMwK,gBAAgB3O,OAEhHA,EAAUyO,UAAWzO,EAAUxD,QAAWwD,EAAU0O,WACjD1O,EAAU4D,SACV4C,EAAQ3M,KAAKkL,EAAA7L,EAAA8L,cAAA,UAAQ8B,IAAI,UAAUxB,QAAS,kBAAMgI,EAAKnJ,MAAMyK,QAAQ5O,KAAxD,aACbwG,EAAQ3M,KAAKkL,EAAA7L,EAAA8L,cAAA,UAAQ8B,IAAI,eAAexB,QAAS,kBAAMgI,EAAKnJ,MAAM0K,aAAa7O,KAAlE,oCAEbwG,EAAQ3M,KAAKkL,EAAA7L,EAAA8L,cAAA,UAAQ8B,IAAI,cAAcxB,QAAS,kBAAMgI,EAAKnJ,MAAM2K,YAAY9O,KAAhE,eACbwG,EAAQ3M,KAAKkL,EAAA7L,EAAA8L,cAAA,UAAQ8B,IAAI,eAAexB,QAAS,kBAAMgI,EAAKnJ,MAAM0K,aAAa7O,KAAlE,qBACbwG,EAAQ3M,KAAKkL,EAAA7L,EAAA8L,cAACkH,EAAD,CAAepF,IAAI,SAASjP,KAAK,wBAAwBgN,SAAU,kBAAMyI,EAAKnJ,MAAMwK,gBAAgB3O,SAGpHA,EAAUyO,SAAYzO,EAAUxD,SAAUwD,EAAU0O,WACrDlI,EAAQ3M,KAAKkL,EAAA7L,EAAA8L,cAAA,UAAQ8B,IAAI,aAAaxB,QAAS,kBAAMgI,EAAKnJ,MAAM4K,WAAW/O,KAA9D,mBACbwG,EAAQ3M,KAAKkL,EAAA7L,EAAA8L,cAACkH,EAAD,CAAepF,IAAI,SAASjP,KAAK,wBAAwBgN,SAAU,kBAAMyI,EAAKnJ,MAAMwK,gBAAgB3O,QAErHwG,EAAQ3M,KACJkL,EAAA7L,EAAA8L,cAACmF,EAAD,CACIrD,IAAI,SACJjP,KAAK,cACLiN,QACIC,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,SACIxK,KAAK,OACLE,MAAOsF,EAAUrE,YACjBoQ,SAAU,SAAAC,GAAK,OAAIsB,EAAKnJ,MAAMzD,YAAY4M,EAAKnJ,MAAMnE,UAAW,cAAegM,EAAM3L,OAAO3F,cAMhH8L,EAAQ3M,KACJkL,EAAA7L,EAAA8L,cAACmF,EAAD,CACIrD,IAAI,OACJjP,KAAK,0BACLiN,QACIC,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAACoE,EAAD,CACI9I,OAAQlJ,KAAK+M,MAAMnE,UACnBnF,KAAK,aACLmO,MAAM,aACNZ,WAAY,SAAAzN,GAAK,OAAI2S,EAAKnJ,MAAMiE,WAAWkF,EAAKnJ,MAAMnE,UAAW,aAAcrF,UAOnGvD,KAAK+M,MAAMwG,KAAKxS,QAAQ,YAKhC,IAAI6W,EAAQ,KACZ,IAAyC,IAArC5X,KAAK+M,MAAMwG,KAAKxS,QAAQ,QAAgB,CACxC,IAAI8W,EAAc,KACd7X,KAAK+M,MAAMlI,OACXgT,EACIlK,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YACfF,EAAA7L,EAAA8L,cAACoE,EAAD,CACI9I,OAAQlJ,KAAK+M,MAAMlI,KACnBpB,KAAK,QACLmO,MAAM,QACNZ,WAAY,SAAAzN,GAAK,OAAI2S,EAAKnJ,MAAMiE,WAAWkF,EAAKnJ,MAAMlI,KAAM,QAAStB,QAMrF,IAAI0K,EAAU,MACVjO,KAAKqN,MAAM4H,cAA0D,IAA1CjV,KAAK+M,MAAMwG,KAAKxS,QAAQ,gBACnDkN,EACIN,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YACfF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,eADJ,IACe5N,KAAK+M,MAAMnE,UAAUlG,IAEpCiL,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,UAAUe,MAAO,CAAEgC,QAAwC,IAA/B5Q,KAAK+M,MAAMnE,UAAUhG,MAAc,GAAK,SAC/E+K,EAAA7L,EAAA8L,cAAA,eADJ,IACe5N,KAAK8X,SAEpBnK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,UAAUe,MAAO,CAAEgC,QAAwC,KAA/B5Q,KAAK+M,MAAMnE,UAAU7B,MAAe,GAAK,SAChF4G,EAAA7L,EAAA8L,cAAA,kBADJ,IACkB5N,KAAK+M,MAAMnE,UAAU7B,OAEvC4G,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAACmK,EAAD,CAAmBnP,UAAW5I,KAAK+M,MAAMnE,aAE7C+E,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,UAAUe,MAAO,CAAEgC,QAA+C,KAAtC5Q,KAAK+M,MAAMnE,UAAU9B,aAAsB,GAAK,SACvF6G,EAAA7L,EAAA8L,cAAA,0BADJ,IAC0B5N,KAAK+M,MAAMnE,UAAU9B,cAE/C6G,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,UAAUe,MAAO,CAAEgC,QAAyC,KAAhC5Q,KAAK+M,MAAMnE,UAAU5B,OAAgB,GAAK,SACjF2G,EAAA7L,EAAA8L,cAAA,mBADJ,IACmB5N,KAAK+M,MAAMnE,UAAU5B,QAExC2G,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,UAAUe,MAAO,CAAEgC,QAAgD,KAAvC5Q,KAAK+M,MAAMnE,UAAUlC,OAAOC,OAAgB,GAAK,SACxFgH,EAAA7L,EAAA8L,cAAA,+BADJ,IAC+B5N,KAAK+M,MAAMnE,UAAUlC,OAAOC,QAE3DgH,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,UAAUe,MAAO,CAAEgC,QAAoD,KAA3C5Q,KAAK+M,MAAMnE,UAAUlC,OAAOE,WAAoB,GAAK,SAC5F+G,EAAA7L,EAAA8L,cAAA,mCADJ,IACmC5N,KAAK+M,MAAMnE,UAAUlC,OAAOE,YAE/D+G,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,UAAUe,MAAO,CAAEgC,QAAgD,KAAvC5Q,KAAK+M,MAAMnE,UAAUlC,OAAOG,OAAgB,GAAK,SACxF8G,EAAA7L,EAAA8L,cAAA,8BADJ,IAC8B5N,KAAK+M,MAAMnE,UAAUlC,OAAOG,QAE1D8G,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,UAAUe,MAAO,CAAEgC,QAAsD,KAA7C5Q,KAAK+M,MAAMnE,UAAUxB,oBAA6B,GAAK,SAC9FuG,EAAA7L,EAAA8L,cAAA,iCADJ,IACiC5N,KAAK+M,MAAMnE,UAAUxB,qBAEtDuG,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,UAAUe,MAAO,CAAEgC,QAAyC,KAAhC5Q,KAAK+M,MAAMnE,UAAU3B,OAAgB,GAAK,SACjF0G,EAAA7L,EAAA8L,cAAA,mBADJ,IACmB5N,KAAK+M,MAAMnE,UAAU3B,QAExC0G,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,UAAUe,MAAO,CAAEgC,QAA4C,KAAnC5Q,KAAK+M,MAAMnE,UAAUpD,UAAmB,GAAK,SACpFmI,EAAA7L,EAAA8L,cAAA,sBADJ,IACsB5N,KAAK+M,MAAMnE,UAAUpD,WAE3CmI,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,UAAUe,MAAO,CAAEgC,QAA4C,KAAnC5Q,KAAK+M,MAAMnE,UAAU1B,UAAmB,GAAK,SACpFyG,EAAA7L,EAAA8L,cAAA,sBADJ,IACsB5N,KAAK+M,MAAMnE,UAAU1B,WAE3CyG,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YACfF,EAAA7L,EAAA8L,cAACoK,EAAD,CAAapP,UAAW5I,KAAK+M,MAAMnE,cAK/CgP,EACIjK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,SACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,oBACXF,EAAA7L,EAAA8L,cAAA,SAAI5N,KAAK6S,gBAEZgF,EACA5J,IAI8B,IAAvCjO,KAAK+M,MAAMwG,KAAKxS,QAAQ,YACxB6W,EACIjK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,SACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,oBACXF,EAAA7L,EAAA8L,cAAA,SAAI5N,KAAK6S,gBAEblF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YACfF,EAAA7L,EAAA8L,cAACoE,EAAD,CACI9I,OAAQlJ,KAAK+M,MAAMnE,UACnBnF,KAAK,KACLmO,MAAM,aACNR,QAAS,CAAC,EAAG,IACbJ,WAAY,SAAAzN,GAAK,OAAI2S,EAAKnJ,MAAMiE,WAAWkF,EAAKnJ,MAAMnE,UAAW,KAAMrF,MAE3EoK,EAAA7L,EAAA8L,cAACoE,EAAD,CACI9I,OAAQlJ,KAAK+M,MAAMnE,UACnBnF,KAAK,SACLmO,MAAM,UACNR,QAAS,CAAC,EAAG,IACbJ,WAAY,SAAAzN,GAAK,OAAI2S,EAAKnJ,MAAMiE,WAAWkF,EAAKnJ,MAAMnE,UAAW,SAAUrF,MAE/EoK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YACfF,EAAA7L,EAAA8L,cAACoE,EAAD,CACI9I,OAAQlJ,KAAKqN,MACb5J,KAAK,kBACL2N,QAAS,CAAC,EAAG,IACbJ,WAAY,SAAAzN,GAAK,OAAI2S,EAAK+B,YAAY1U,MAE1CoK,EAAA7L,EAAA8L,cAACiH,EAAD,CACIhG,SAAU,CACNlB,EAAA7L,EAAA8L,cAAA,UAAQ8B,IAAI,OAAOxB,QAAS,kBAAMgI,EAAKgC,SAAvC,QACAvK,EAAA7L,EAAA8L,cAAA,UAAQ8B,IAAI,QAAQxB,QAAS,kBAAMgI,EAAKiC,UAAU,KAAlD,SACAxK,EAAA7L,EAAA8L,cAAA,UAAQ8B,IAAI,SAASxB,QAAS,kBAAMgI,EAAKxP,WAAzC,WAEJ0H,SAAyC,IAA/BpO,KAAKqN,MAAM8H,kBAEzBxH,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,UAAUe,MAAO,CAAEgC,QAAgD,KAAvC5Q,KAAK+M,MAAMnE,UAAUlC,OAAOC,OAAgB,GAAK,SACxFgH,EAAA7L,EAAA8L,cAAA,+BADJ,IAC+B5N,KAAK+M,MAAMnE,UAAUlC,OAAOC,QAE3DgH,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,UAAUe,MAAO,CAAEgC,QAAoD,KAA3C5Q,KAAK+M,MAAMnE,UAAUlC,OAAOE,WAAoB,GAAK,SAC5F+G,EAAA7L,EAAA8L,cAAA,mCADJ,IACmC5N,KAAK+M,MAAMnE,UAAUlC,OAAOE,YAE/D+G,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,UAAUe,MAAO,CAAEgC,QAAgD,KAAvC5Q,KAAK+M,MAAMnE,UAAUlC,OAAOG,OAAgB,GAAK,SACxF8G,EAAA7L,EAAA8L,cAAA,8BADJ,IAC8B5N,KAAK+M,MAAMnE,UAAUlC,OAAOG,QAE1D8G,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YACfF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAACmK,EAAD,CAAmBnP,UAAW5I,KAAK+M,MAAMnE,aAE7C+E,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,UAAUe,MAAO,CAAEgC,QAAqC,IAA5B5Q,KAAK+M,MAAMnE,UAAUlG,GAAW,GAAK,SAC5EiL,EAAA7L,EAAA8L,cAAA,eADJ,IACe5N,KAAK+M,MAAMnE,UAAUlG,IAEpCiL,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,UAAUe,MAAO,CAAEgC,QAA+C,KAAtC5Q,KAAK+M,MAAMnE,UAAU9B,aAAsB,GAAK,SACvF6G,EAAA7L,EAAA8L,cAAA,0BADJ,IAC0B5N,KAAK+M,MAAMnE,UAAU9B,cAE/C6G,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,UAAUe,MAAO,CAAEgC,QAAyC,KAAhC5Q,KAAK+M,MAAMnE,UAAU5B,OAAgB,GAAK,SACjF2G,EAAA7L,EAAA8L,cAAA,mBADJ,IACmB5N,KAAK+M,MAAMnE,UAAU5B,QAExC2G,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,UAAUe,MAAO,CAAEgC,QAAwC,KAA/B5Q,KAAK+M,MAAMnE,UAAU7B,MAAe,GAAK,SAChF4G,EAAA7L,EAAA8L,cAAA,kBADJ,IACkB5N,KAAK+M,MAAMnE,UAAU7B,OAEvC4G,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,UAAUe,MAAO,CAAEgC,QAAyC,KAAhC5Q,KAAK+M,MAAMnE,UAAU3B,OAAgB,GAAK,SACjF0G,EAAA7L,EAAA8L,cAAA,mBADJ,IACmB5N,KAAK+M,MAAMnE,UAAU3B,QAExC0G,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,UAAUe,MAAO,CAAEgC,QAA4C,KAAnC5Q,KAAK+M,MAAMnE,UAAUpD,UAAmB,GAAK,SACpFmI,EAAA7L,EAAA8L,cAAA,sBADJ,IACsB5N,KAAK+M,MAAMnE,UAAUpD,WAE3CmI,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,UAAUe,MAAO,CAAEgC,QAA4C,KAAnC5Q,KAAK+M,MAAMnE,UAAU1B,UAAmB,GAAK,SACpFyG,EAAA7L,EAAA8L,cAAA,sBADJ,IACsB5N,KAAK+M,MAAMnE,UAAU1B,WAE3CyG,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YACfF,EAAA7L,EAAA8L,cAACoK,EAAD,CACIpP,UAAW5I,KAAK+M,MAAMnE,UACtB2K,KAAK,SACLjK,YAAa,SAACI,EAAO/H,EAAO2B,GAAf,OAAyB4S,EAAKnJ,MAAMzD,YAAYI,EAAO/H,EAAO2B,MAE/EqK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YACfF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,sBAAf,cAGAF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,UAAUe,MAAO,CAAEgC,QAAsD,KAA7C5Q,KAAK+M,MAAMnE,UAAUxB,oBAA6B,GAAK,SAC9FuG,EAAA7L,EAAA8L,cAAA,iCADJ,IACiC5N,KAAK+M,MAAMnE,UAAUxB,qBAEtDuG,EAAA7L,EAAA8L,cAACwK,EAAD,CACIxP,UAAW5I,KAAK+M,MAAMnE,UACtBlF,OAAQ1D,KAAK+M,MAAMrJ,OACnBgP,aAAc,kBAAMwD,EAAKnJ,MAAM2F,aAAawD,EAAKnJ,MAAMnE,YACvD2J,cAAe,SAAA/O,GAAS,OAAI0S,EAAKnJ,MAAMwF,cAAc2D,EAAKnJ,MAAMnE,UAAwBpF,IACxFgP,gBAAiB,SAAAC,GAAW,OAAIyD,EAAKnJ,MAAMyF,gBAAgB0D,EAAKnJ,MAAMnE,UAAwB6J,IAC9FH,oBAAqB,SAAC9O,EAAWJ,EAAMG,GAAlB,OAA4B2S,EAAKnJ,MAAMuF,oBAAoB9O,EAAWJ,EAAMG,SAKpE,IAAzCvD,KAAK+M,MAAMwG,KAAKxS,QAAQ,eACqB,IAAzCf,KAAK+M,MAAMwG,KAAKxS,QAAQ,cACxB6W,EACIjK,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,oBACXF,EAAA7L,EAAA8L,cAAA,SAAI5N,KAAK6S,gBAEblF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YACfF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,kBADJ,IACkB5N,KAAK+M,MAAMnE,UAAU7B,OAAS,KAEhD4G,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,mBADJ,IACmB5N,KAAK+M,MAAMnE,UAAU3B,QAAU,KAElD0G,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,sBADJ,IACsB5N,KAAK+M,MAAMnE,UAAUpD,WAAa,KAExDmI,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,sBADJ,IACsB5N,KAAK+M,MAAMnE,UAAU1B,WAAa,QAKtB,IAA1ClH,KAAK+M,MAAMwG,KAAKxS,QAAQ,eACxB6W,EACIjK,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAACmK,EAAD,CAAmBnP,UAAW5I,KAAK+M,MAAMnE,aAE7C+E,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,0BADJ,IAC0B5N,KAAK+M,MAAMnE,UAAU9B,cAAgB,KAE/D6G,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,mBADJ,IACmB5N,KAAK+M,MAAMnE,UAAU5B,QAAU,QAKhB,IAA1ChH,KAAK+M,MAAMwG,KAAKxS,QAAQ,eACxB6W,EACIjK,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,eADJ,IACe5N,KAAK+M,MAAMnE,UAAUlG,IAEpCiL,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,eADJ,IACe5N,KAAK8X,SAEpBnK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,4BADJ,IAC4B5N,KAAK+M,MAAMnE,UAAUlC,OAAOG,QAAU,KAElE8G,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,8BADJ,IAC8B5N,KAAK+M,MAAMnE,UAAUlC,OAAOC,QAAU,KAEpEgH,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,iCADJ,IACiC5N,KAAK+M,MAAMnE,UAAUlC,OAAOE,YAAc,KAE3E+G,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,iCADJ,IACiC5N,KAAK+M,MAAMnE,UAAUxB,qBAAuB,QAK7C,IAAxCpH,KAAK+M,MAAMwG,KAAKxS,QAAQ,aACxB6W,EACIjK,EAAA7L,EAAA8L,cAACoK,EAAD,CACIpP,UAAW5I,KAAK+M,MAAMnE,UACtB2K,KAAK,WACL/S,OAAQR,KAAK+M,MAAMvM,OACnBmM,UAAW,SAAAjD,GAAK,OAAIwM,EAAKnJ,MAAMJ,UAAUjD,QAMzD,IAAI8D,EAAS,KACb,IAA2C,IAAvCxN,KAAK+M,MAAMwG,KAAKxS,QAAQ,gBAErB,IAA6C,IAAzCf,KAAK+M,MAAMwG,KAAKxS,QAAQ,kBAE5B,IAAmD,IAA/Cf,KAAK+M,MAAMwG,KAAKxS,QAAQ,uBAE5B,CACH,IAAMsX,EAAarY,KAAKqN,MAAM4H,YAAc,eAAiB,QAC7DzH,EACIG,EAAA7L,EAAA8L,cAAA,OAAKC,UAAWwK,EAAYvK,IAAKuC,IAAOrC,IAAI,QAAQE,QAAS,kBAAMgI,EAAKoC,mBAIhF,IAAM7U,GAAQzD,KAAK+M,MAAMnE,UAA0B5I,KAAK+M,MAAMnE,UAAwBrE,YAAc,OAC7FvE,KAAK+M,MAAMnE,UAAUnF,MACrB,kBAEP,OACIkK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,gBACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,SAASpK,GACvB+J,GAELG,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,gBACV+J,EACDjK,EAAA7L,EAAA8L,cAAA,OAAKgB,MAAO,CAAEgC,QAASxB,EAAQ3N,OAAS,EAAI,GAAK,SAC7CkM,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YACfF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAWuB,MAK5C,MAAOJ,GACLV,QAAQC,MAAMS,WA3mBeR,IAAMC,WAA1BuG,EACHtG,aAAe,CACzB5O,QAAS,KACTwJ,YAAa,KACb0H,WAAY,KACZxQ,OAAQ,GACR2V,YAAa,KACbM,cAAe,KACfJ,aAAc,KACdG,YAAa,KACb7J,UAAW,KACXoK,cAAe,KACfC,gBAAiB,KACjBtS,UAAW,KACXG,KAAM,KACNgS,iBAAkB,KAClBH,oBAAqB,KACrBhT,OAAQ,KACRgU,YAAa,KACbC,WAAY,KACZF,aAAc,KACdD,QAAS,KACTJ,OAAQ,KACRF,QAAS,KACTC,UAAW,KACXI,gBAAiB,KACjBjC,SAAU,KACV5C,aAAc,KACdH,cAAe,KACfC,gBAAiB,KACjBF,oBAAqB,UC9DRiG,cAajB,SAAAA,EAAYxL,GAAc,IAAApD,EAAA,OAAAqD,OAAAC,EAAA,EAAAD,CAAAhN,KAAAuY,IACtB5O,EAAAqD,OAAAE,EAAA,EAAAF,CAAAhN,KAAAgN,OAAAG,EAAA,EAAAH,CAAAuL,GAAAnL,KAAApN,KAAM+M,KACDM,MAAQ,CACT4H,aAAa,GAHKtL,+EAQtB3J,KAAKuN,SAAS,CACV0H,aAAcjV,KAAKqN,MAAM4H,+CAIjB,IAAA9I,EAAAnM,KACZ,IACI,IAAMoP,EAAU,GAiBhB,IAhByC,IAArCpP,KAAK+M,MAAMwG,KAAKxS,QAAQ,UACpBf,KAAK+M,MAAMnE,UAAUxD,OACrBgK,EAAQ3M,KACJkL,EAAA7L,EAAA8L,cAAA,UAAQ8B,IAAI,gBAAgBxB,QAAS,kBAAM/B,EAAKY,MAAMzD,YAAY6C,EAAKY,MAAMnE,UAAW,UAAU,KAAlG,kBAKJwG,EAAQ3M,KACJkL,EAAA7L,EAAA8L,cAAA,UAAQ8B,IAAI,gBAAgBxB,QAAS,kBAAM/B,EAAKY,MAAMzD,YAAY6C,EAAKY,MAAMnE,UAAW,UAAU,KAAlG,gBAKRwG,EAAQ3M,KAAKkL,EAAA7L,EAAA8L,cAACkH,EAAD,CAAepF,IAAI,SAASjP,KAAK,YAAYgN,SAAU,kBAAMtB,EAAKY,MAAMyL,SAASrM,EAAKY,MAAMnE,iBAElE,IAAvC5I,KAAK+M,MAAMwG,KAAKxS,QAAQ,UAAkB,CAC1C,IAAM6H,EAAY5I,KAAK+M,MAAMnE,WAEgB,IAAzC5I,KAAK+M,MAAMwG,KAAKxS,QAAQ,eACmB,IAAvCf,KAAK+M,MAAMwG,KAAKxS,QAAQ,YACxBqO,EAAQ3M,KACJkL,EAAA7L,EAAA8L,cAAA,OAAK8B,IAAI,UAAU7B,UAAU,oBACzBF,EAAA7L,EAAA8L,cAACqJ,EAAD,CACIzG,UAAU,QACVN,MAAO,SAAAtO,GAAG,OAAIuK,EAAKY,MAAMmK,QAAQtO,EAAWhH,QAIxDwN,EAAQ3M,KACJkL,EAAA7L,EAAA8L,cAACoE,EAAD,CACItC,IAAI,WACJxG,OAAQlJ,KAAK+M,MAAMnE,UACnBnF,KAAK,WACLmO,MAAM,WACNhB,QAAS,SAAAtN,GAAK,OAAIA,EAAQ,QAC1B0N,WAAY,SAAAzN,GAAK,OAAI4I,EAAKY,MAAMiE,WAAW7E,EAAKY,MAAMnE,UAAW,WAAoB,EAARrF,OAGrF6L,EAAQ3M,KAAKkL,EAAA7L,EAAA8L,cAAA,UAAQ8B,IAAI,YAAYxB,QAAS,kBAAM/B,EAAKY,MAAMoK,UAAUvO,KAA5D,sBAE2B,IAAxC5I,KAAK+M,MAAMwG,KAAKxS,QAAQ,YACxBqO,EAAQ3M,KAAKkL,EAAA7L,EAAA8L,cAAA,UAAQ8B,IAAI,SAASxB,QAAS,kBAAM/B,EAAKY,MAAMqK,OAAOxO,KAAtD,eAEjBwG,EAAQ3M,KAAKkL,EAAA7L,EAAA8L,cAAA,OAAK8B,IAAI,eAAe7B,UAAU,eAE/CjF,EAAUyO,SAAYzO,EAAUxD,QAAWwD,EAAU0O,UACrDlI,EAAQ3M,KAAKkL,EAAA7L,EAAA8L,cAACkH,EAAD,CAAepF,IAAI,SAASjP,KAAK,wBAAwBgN,SAAU,kBAAMtB,EAAKY,MAAMwK,gBAAgB3O,OAEhHA,EAAUyO,UAAWzO,EAAUxD,QAAWwD,EAAU0O,WACjD1O,EAAU4D,SACV4C,EAAQ3M,KAAKkL,EAAA7L,EAAA8L,cAAA,UAAQ8B,IAAI,UAAUxB,QAAS,kBAAM/B,EAAKY,MAAMyK,QAAQ5O,KAAxD,aACbwG,EAAQ3M,KAAKkL,EAAA7L,EAAA8L,cAAA,UAAQ8B,IAAI,eAAexB,QAAS,kBAAM/B,EAAKY,MAAM0K,aAAa7O,KAAlE,oCAEbwG,EAAQ3M,KAAKkL,EAAA7L,EAAA8L,cAAA,UAAQ8B,IAAI,cAAcxB,QAAS,kBAAM/B,EAAKY,MAAM2K,YAAY9O,KAAhE,eACbwG,EAAQ3M,KAAKkL,EAAA7L,EAAA8L,cAAA,UAAQ8B,IAAI,eAAexB,QAAS,kBAAM/B,EAAKY,MAAM0K,aAAa7O,KAAlE,qBACbwG,EAAQ3M,KAAKkL,EAAA7L,EAAA8L,cAACkH,EAAD,CAAepF,IAAI,SAASjP,KAAK,wBAAwBgN,SAAU,kBAAMtB,EAAKY,MAAMwK,gBAAgB3O,QAErHwG,EAAQ3M,KACJkL,EAAA7L,EAAA8L,cAACmF,EAAD,CACIrD,IAAI,OACJjP,KAAK,0BACLiN,QACIC,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAACoE,EAAD,CACI9I,OAAQlJ,KAAK+M,MAAMnE,UACnBnF,KAAK,aACLmO,MAAM,aACNZ,WAAY,SAAAzN,GAAK,OAAI4I,EAAKY,MAAMiE,WAAW7E,EAAKY,MAAMnE,UAAW,aAAcrF,WAOlGqF,EAAUyO,SAAYzO,EAAUxD,SAAUwD,EAAU0O,WACrDlI,EAAQ3M,KAAKkL,EAAA7L,EAAA8L,cAAA,UAAQ8B,IAAI,aAAaxB,QAAS,kBAAM/B,EAAKY,MAAM4K,WAAW/O,KAA9D,mBACbwG,EAAQ3M,KAAKkL,EAAA7L,EAAA8L,cAACkH,EAAD,CAAepF,IAAI,SAASjP,KAAK,wBAAwBgN,SAAU,kBAAMtB,EAAKY,MAAMwK,gBAAgB3O,QAIzH,IAAM0C,GAAQtL,KAAK+M,MAAMnE,UAAUtD,MAAQ,gBACrC,KAAOtF,KAAK+M,MAAMnE,UAAUrD,SAAW,iBACvC,WAAavF,KAAK+M,MAAMnE,UAAU1F,MAElCuV,EACF9K,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,SACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,8BACXF,EAAA7L,EAAA8L,cAAA,SAAItC,GACJqC,EAAA7L,EAAA8L,cAAA,OAAKgB,MAAO,CAAEgC,QAAS5Q,KAAK+M,MAAMnE,UAAU/C,IAAM,GAAK,SACnD8H,EAAA7L,EAAA8L,cAAA,KAAG8K,KAAM1Y,KAAK+M,MAAMnE,UAAU/C,IAAKoD,OAAO,SAAS0P,IAAI,uBAAvD,sBAGRhL,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YACfF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,sBAAf,aACAF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACV7N,KAAK+M,MAAMnE,UAAUpD,WAAa,KAEvCmI,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,sBAAf,kBACAF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,WAAKD,EAAA7L,EAAA8L,cAAA,oBAAL,IAAqB5N,KAAK+M,MAAMnE,UAAUnD,gBAC1CkI,EAAA7L,EAAA8L,cAAA,WAAKD,EAAA7L,EAAA8L,cAAA,0BAAL,IAA2B5N,KAAK+M,MAAMnE,UAAUlD,sBAChDiI,EAAA7L,EAAA8L,cAAA,WAAKD,EAAA7L,EAAA8L,cAAA,uBAAL,IAAwB5N,KAAK+M,MAAMnE,UAAUjD,qBAKrDiS,EAAQ,MAC6B,IAArC5X,KAAK+M,MAAMwG,KAAKxS,QAAQ,UAEpB6W,EADA5X,KAAKqN,MAAM4H,YAEPtH,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,QACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAce,MAAO,CAAEgC,QAAS5Q,KAAKqN,MAAM4H,YAAc,GAAK,SAA7E,mBACAtH,EAAA7L,EAAA8L,cAAA,SACIxK,KAAK,OACLE,MAAOtD,KAAK+M,MAAMnE,UAAUnF,KAC5BkR,SAAU,SAAAC,GAAK,OAAIzI,EAAKY,MAAMzD,YAAY6C,EAAKY,MAAMnE,UAAW,OAAQgM,EAAM3L,OAAO3F,UAEzFqK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAce,MAAO,CAAEgC,QAAS5Q,KAAKqN,MAAM4H,YAAc,GAAK,SAA7E,gBACAtH,EAAA7L,EAAA8L,cAAA,SACIxK,KAAK,OACLE,MAAOtD,KAAK+M,MAAMnE,UAAUvD,OAC5BsP,SAAU,SAAAC,GAAK,OAAIzI,EAAKY,MAAMzD,YAAY6C,EAAKY,MAAMnE,UAAW,SAAUgM,EAAM3L,OAAO3F,UAE3FqK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,eAAf,SACAF,EAAA7L,EAAA8L,cAAA,SACIxK,KAAK,OACLE,MAAOtD,KAAK+M,MAAMnE,UAAUtD,KAC5BqP,SAAU,SAAAC,GAAK,OAAIzI,EAAKY,MAAMzD,YAAY6C,EAAKY,MAAMnE,UAAW,OAAQgM,EAAM3L,OAAO3F,UAEzFqK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,eAAf,UACAF,EAAA7L,EAAA8L,cAAA,SACIxK,KAAK,OACLE,MAAOtD,KAAK+M,MAAMnE,UAAUrD,QAC5BoP,SAAU,SAAAC,GAAK,OAAIzI,EAAKY,MAAMzD,YAAY6C,EAAKY,MAAMnE,UAAW,UAAWgM,EAAM3L,OAAO3F,UAE5FqK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,eAAf,UACAF,EAAA7L,EAAA8L,cAACoE,EAAD,CACI9I,OAAQlJ,KAAK+M,MAAMnE,UACnBnF,KAAK,QACLuN,WAAY,SAAAzN,GAAK,OAAI4I,EAAKY,MAAMiE,WAAW7E,EAAKY,MAAMnE,UAAW,QAASrF,MAE9EoK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,eAAf,cACAF,EAAA7L,EAAA8L,cAAA,SACIxK,KAAK,OACLE,MAAOtD,KAAK+M,MAAMnE,UAAUpD,UAC5BmP,SAAU,SAAAC,GAAK,OAAIzI,EAAKY,MAAMzD,YAAY6C,EAAKY,MAAMnE,UAAW,YAAagM,EAAM3L,OAAO3F,UAE9FqK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,eAAf,oBACAF,EAAA7L,EAAA8L,cAAA,SACIxK,KAAK,OACLE,MAAOtD,KAAK+M,MAAMnE,UAAU/C,IAC5B8O,SAAU,SAAAC,GAAK,OAAIzI,EAAKY,MAAMzD,YAAY6C,EAAKY,MAAMnE,UAAW,MAAOgM,EAAM3L,OAAO3F,WAG5FqK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YACfF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,sBAAf,kBACAF,EAAA7L,EAAA8L,cAACoE,EAAD,CACI9I,OAAQlJ,KAAK+M,MAAMnE,UACnBnF,KAAK,iBACLmO,MAAM,UACNZ,WAAY,SAAAzN,GAAK,OAAI4I,EAAKY,MAAMiE,WAAW7E,EAAKY,MAAMnE,UAAW,iBAAkBrF,MAEvFoK,EAAA7L,EAAA8L,cAACoE,EAAD,CACI9I,OAAQlJ,KAAK+M,MAAMnE,UACnBnF,KAAK,uBACLmO,MAAM,gBACNZ,WAAY,SAAAzN,GAAK,OAAI4I,EAAKY,MAAMiE,WAAW7E,EAAKY,MAAMnE,UAAW,uBAAwBrF,MAE7FoK,EAAA7L,EAAA8L,cAACoE,EAAD,CACI9I,OAAQlJ,KAAK+M,MAAMnE,UACnBnF,KAAK,oBACLmO,MAAM,aACNZ,WAAY,SAAAzN,GAAK,OAAI4I,EAAKY,MAAMiE,WAAW7E,EAAKY,MAAMnE,UAAW,oBAAqBrF,OAK1FkV,IAG2B,IAAvCzY,KAAK+M,MAAMwG,KAAKxS,QAAQ,YACxB6W,EAAQa,GAGZ,IAAIjL,EAAS,KACb,IAA2C,IAAvCxN,KAAK+M,MAAMwG,KAAKxS,QAAQ,eAErB,CACH,IAAMsX,EAAarY,KAAKqN,MAAM4H,YAAc,eAAiB,QAC7DzH,EAASG,EAAA7L,EAAA8L,cAAA,OAAKC,UAAWwK,EAAYvK,IAAKuC,IAAOrC,IAAI,QAAQE,QAAS,kBAAM/B,EAAKmM,mBAGrF,IAAM7U,GAAQzD,KAAK+M,MAAMnE,UAA0B5I,KAAK+M,MAAMnE,UAAwBrE,YAAc,OAC7FvE,KAAK+M,MAAMnE,UAAUnF,MACrB,aAEP,OACIkK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,SAASpK,GACvB+J,GAELG,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,gBACV+J,EACDjK,EAAA7L,EAAA8L,cAAA,OAAKgB,MAAO,CAAEgC,QAASxB,EAAQ3N,OAAS,EAAI,GAAK,SAC7CkM,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YACfF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACVuB,MAMvB,MAAOJ,GACLV,QAAQC,MAAMS,WArPUR,IAAMC,WAArB8J,EACH7J,aAAe,CACzB8J,SAAU,KACVd,YAAa,KACbC,WAAY,KACZF,aAAc,KACdD,QAAS,KACTJ,OAAQ,KACRF,QAAS,KACTC,UAAW,KACXI,gBAAiB,UClCJqB,mLAEb,IACI,IAAMC,EAAY7Y,KAAK+M,MAAMnE,UAAUa,IAAM,EACvC7G,EAAQ5C,KAAK+M,MAAMnE,UAAUhG,MAAQ5C,KAAK+M,MAAMnE,UAAUpC,OAC1DsS,EAAa9Y,KAAK+M,MAAMnE,UAAUhG,MAAQ,EAC1CmW,EAAU,IAAM9X,KAAKmU,IAAIyD,EAAW,GAAKjW,EAE3CgM,EAAQ,GAERA,EADAiK,GAAa7Y,KAAK+M,MAAMnE,UAAUhG,MAC1B,aACDiW,GAAaC,EACZ,eAEA,cAGZ,IAAIE,EAAY,KAChB,GAAIhZ,KAAK+M,MAAMnE,UAAUpC,OAAS,EAAG,CACjC,IAAMyS,EAAc,IAAMhY,KAAKmU,IAAIpV,KAAK+M,MAAMnE,UAAUpC,OAAQ,GAAK5D,EACrEoW,EAAYrL,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAWe,MAAO,CAAE/G,MAAOoR,EAAc,OAGxE,OACItL,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAWe,EAAOA,MAAO,CAAE/G,MAAOkR,EAAU,OAChDC,GAGX,MAAOhK,GACLV,QAAQC,MAAMS,WA9BiBR,IAAMC,WC2B5ByK,2LAUQC,GAAsC,IAAAxP,EAAA3J,KACvDoZ,EAAmC,KAyBvC,GAvBApZ,KAAK+M,MAAMzE,IAAIZ,MAAMlH,OAAO,SAAA6Y,GACxB,MAAwB,SAApB1P,EAAKoD,MAAMwG,MACO,SAAX8F,EAAEjW,OAGdvC,QAAQ,SAAAwY,GACFD,GAUDA,EAAWE,KAAOrY,KAAKoU,IAAI+D,EAAWE,KAAMD,EAAE1R,GAC9CyR,EAAWG,KAAOtY,KAAKmU,IAAIgE,EAAWG,KAAMF,EAAE1R,EAAI0R,EAAExR,MAAQ,GAC5DuR,EAAWI,KAAOvY,KAAKoU,IAAI+D,EAAWI,KAAMH,EAAEzR,GAC9CwR,EAAWK,KAAOxY,KAAKmU,IAAIgE,EAAWK,KAAMJ,EAAEzR,EAAIyR,EAAEvR,OAAS,IAZ7DsR,EAAa,CACTE,KAAMD,EAAE1R,EACR4R,KAAMF,EAAE1R,EAAI0R,EAAExR,MAAQ,EACtB2R,KAAMH,EAAEzR,EACR6R,KAAMJ,EAAEzR,EAAIyR,EAAEvR,OAAS,EACvBD,MAAO,EACPC,OAAQ,MAUfsR,EAAY,CAEb,GAAwB,cAApBpZ,KAAK+M,MAAMwG,KACX,OAAO,KAGX6F,EAAa,CACTE,KAAM,EACNC,KAAM,EACNC,KAAM,EACNC,KAAM,EACN5R,MAAO,EACPC,OAAQ,GAchB,OATAsR,EAAWE,MAAQH,EACnBC,EAAWG,MAAQJ,EACnBC,EAAWI,MAAQL,EACnBC,EAAWK,MAAQN,EAGnBC,EAAWvR,MAAQ,EAAIuR,EAAWG,KAAOH,EAAWE,KACpDF,EAAWtR,OAAS,EAAIsR,EAAWK,KAAOL,EAAWI,KAE9CJ,0CAIP,OAAQpZ,KAAK+M,MAAMwG,MACf,IAAK,YACD,OAAO,EACX,IAAK,OACL,IAAK,SACD,OAAO,GACX,QACI,OAAO,oCAIF5L,EAAWC,EAAWC,EAAeC,EAAgB4R,GAClE,IAAMC,EAAa3Z,KAAK4Z,gBAExB,MAAO,CACHC,KAAM,QAAUF,EAAa,SAAWhS,EAAI+R,EAAcJ,MAAQ,IAClEQ,IAAK,QAAUH,EAAa,SAAW/R,EAAI8R,EAAcF,MAAQ,IACjE3R,MAAO,SAAW8R,EAAa,QAAU9R,EAAQ,WACjDC,OAAQ,SAAW6R,EAAa,QAAU7R,EAAS,6CAI3C,IAAAqE,EAAAnM,KACZ,IACI,IAAMmZ,EAA8B,SAApBnZ,KAAK+M,MAAMwG,KAAmB,EAAI,EAC5CmG,EAAgB1Z,KAAK+Z,iBAAiBZ,GAC5C,IAAKO,EACD,OACI/L,EAAA7L,EAAA8L,cAAA,0BAKR,IAAMoM,EAAO,GACb,GAAwB,SAApBha,KAAK+M,MAAMwG,KACX,IAAK,IAAI3L,EAAI8R,EAAcF,KAAM5R,IAAM8R,EAAcD,KAAO,IAAK7R,EAC7D,IAAK,IAAID,EAAI+R,EAAcJ,KAAM3R,IAAM+R,EAAcH,KAAO,IAAK5R,EAAG,CAChE,IAAMsS,EAAYja,KAAKka,SAASvS,EAAGC,EAAG,EAAG,EAAG8R,GAC5CM,EAAKvX,KACDkL,EAAA7L,EAAA8L,cAACuM,EAAD,CACIzK,IAAK/H,EAAI,IAAMC,EACfD,EAAGA,EACHC,EAAGA,EACHgH,MAAOqL,EACP/L,QAAS,kBAAM/B,EAAKY,MAAMqN,kBAAkB,OAC5CC,cAAe,SAACC,EAAMC,GAAP,OAAgBpO,EAAKY,MAAMyN,WAAWF,EAAMC,OAQ/E,IAAME,EAAQza,KAAK+M,MAAMzE,IAAIZ,MACxBlH,OAAO,SAAA6Y,GAAC,MAAe,SAAXA,EAAEjW,OACdkF,IAAI,SAAA+Q,GACD,IAAMqB,EAAYvO,EAAK+N,SAASb,EAAE1R,EAAG0R,EAAEzR,EAAGyR,EAAExR,MAAOwR,EAAEvR,OAAQ4R,GAC7D,OACI/L,EAAA7L,EAAA8L,cAAC+M,EAAD,CACIjL,IAAK2J,EAAEnZ,GACP0a,KAAMvB,EACNzK,MAAO8L,EACPG,WAAgC,SAApB1O,EAAKY,MAAMwG,KACvBzD,SAAU3D,EAAKY,MAAM+N,iBAAmBzB,EAAEnZ,GAC1C6a,UAA+B,cAApB5O,EAAKY,MAAMwG,KACtBpE,OAAQ,SAAAjP,GAAE,MAAwB,SAApBiM,EAAKY,MAAMwG,KAAkBpH,EAAKY,MAAMqN,kBAAkBla,GAAM,UAM1FiJ,EAAwB,GACJ,SAApBnJ,KAAK+M,MAAMwG,OACXpK,EAASnJ,KAAK+M,MAAMzE,IAAIZ,MACnBlH,OAAO,SAAA6Y,GAAC,MAAgB,YAAXA,EAAEjW,MAAmC,OAAXiW,EAAEjW,OACzCkF,IAAI,SAAA+Q,GACD,IAAM2B,EAAa7O,EAAK+N,SAASb,EAAE1R,EAAG0R,EAAEzR,EAAGyR,EAAExR,MAAOwR,EAAEvR,OAAQ4R,GACxD9Q,EAAYuD,EAAKY,MAAM3I,WAAWhE,KAAK,SAAA+D,GAAC,OAAIA,EAAEjE,KAAOmZ,EAAEnZ,KAC7D,OAAI0I,EAEI+E,EAAA7L,EAAA8L,cAACqN,EAAD,CACIvL,IAAK2J,EAAEnZ,GACPY,MAAOuY,EACPzQ,UAAWA,EACXgG,MAAOoM,EACPE,OAA4B,cAApB/O,EAAKY,MAAMwG,KACnBsH,WAAgC,WAApB1O,EAAKY,MAAMwG,KACvBzD,SAAU3D,EAAKY,MAAM+N,iBAAoBzB,EAAEnZ,GAC3CiP,OAAQ,SAAAjP,GAAE,OAAIiM,EAAKY,MAAMqN,kBAAkBla,MAKhD,OAEVM,OAAO,SAAA2a,GAAE,OAAW,OAAPA,KAItB,IAAMC,EAAc,GACpB,GAAIpb,KAAK+M,MAAMsO,YACX,IAAK,IAAIC,EAAQ5B,EAAcF,KAAM8B,IAAU5B,EAAcD,KAAO,IAAK6B,EACrE,IAAK,IAAIC,EAAQ7B,EAAcJ,KAAMiC,IAAU7B,EAAcH,KAAO,IAAKgC,EAAO,CAC5E,IAAMC,EAAexb,KAAKka,SAASqB,EAAOD,EAAO,EAAG,EAAG5B,GACvD0B,EAAY3Y,KACRkL,EAAA7L,EAAA8L,cAACuM,EAAD,CACIzK,IAAK6L,EAAQ,IAAMD,EACnB3T,EAAG4T,EACH3T,EAAG0T,EACH1M,MAAO4M,EACPC,SAAS,EACTvN,QAAS,SAACoM,EAAMC,GAAP,OAAgBpO,EAAKY,MAAM2O,kBAAkBpB,EAAMC,OAOhF,IAAM3L,EAAQ,aAAe5O,KAAK+M,MAAMwG,KACxC,OACI5F,EAAA7L,EAAA8L,cAAA,OAAKC,UAAWe,EAAOV,QAAS,kBAAM/B,EAAKY,MAAMqN,kBAAkB,QAC/DzM,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,OAAOe,MAAO,CAAE9G,OAAU9H,KAAK4Z,gBAAkBF,EAAc5R,OAAU,EAAK,OACxFkS,EACAS,EACAtR,EACAiS,IAIf,MAAOpM,GACLV,QAAQC,MAAMS,WApMYR,IAAMC,WAAvByK,EACHxK,aAAe,CACzBtK,WAAY,KACZiX,aAAa,EACbP,eAAgB,KAChBV,kBAAmB,KACnBI,WAAY,KACZkB,kBAAmB,UA2MrBC,gLAMY3M,GACVA,EAAEC,kBACEjP,KAAK+M,MAAMmB,SACXlO,KAAK+M,MAAMmB,QAAQlO,KAAK+M,MAAMpF,EAAG3H,KAAK+M,MAAMnF,uCAIhCoH,GAChBA,EAAEC,kBACEjP,KAAK+M,MAAMsN,eACXra,KAAK+M,MAAMsN,cAAcra,KAAK+M,MAAMpF,EAAG3H,KAAK+M,MAAMnF,oCAI1C,IAAAqI,EAAAjQ,KACR4O,EAAQ,cAKZ,OAJI5O,KAAK+M,MAAM0O,UACX7M,GAAS,iBAITjB,EAAA7L,EAAA8L,cAAA,OACIC,UAAWe,EACXA,MAAO5O,KAAK+M,MAAM6B,MAClBV,QAAS,SAAAc,GAAC,OAAIiB,EAAKC,MAAMlB,IACzBqL,cAAe,SAAArL,GAAC,OAAIiB,EAAK2L,YAAY5M,aA/B5BR,IAAMC,WAAzBkN,EACYjN,aAAe,CACzB+M,SAAS,EACTpB,cAAe,UA2CjBwB,iLACa7M,GACPhP,KAAK+M,MAAM8N,aACX7L,EAAEC,kBACFjP,KAAK+M,MAAMoC,OAAOnP,KAAK+M,MAAM6N,KAAK1a,sCAI1B,IAAA0V,EAAA5V,KACR4O,EAAQ,QAAU5O,KAAK+M,MAAM6N,KAAK7S,QAQtC,OAPI/H,KAAK+M,MAAM+C,WACXlB,GAAS,aAET5O,KAAK+M,MAAMgO,YACXnM,GAAS,cAITjB,EAAA7L,EAAA8L,cAAA,OACIC,UAAWe,EACXA,MAAO5O,KAAK+M,MAAM6B,MAClBV,QAAS,SAAAc,GAAC,OAAI4G,EAAKzG,OAAOH,aArBpBR,IAAMC,WAqCtBqN,iLACa9M,GACPhP,KAAK+M,MAAM8N,aACX7L,EAAEC,kBACFjP,KAAK+M,MAAMoC,OAAOnP,KAAK+M,MAAMjM,MAAMZ,sCAI3B,IAAAgW,EAAAlW,KACR4O,EAAQ,SAAW5O,KAAK+M,MAAMjM,MAAMsC,KACpCpD,KAAK+M,MAAM+C,WACXlB,GAAS,aAET5O,KAAK+M,MAAMnE,UAAU4D,UACrBoC,GAAS,YAGb,IAAImN,EAAW,KACXC,EAAU,KACVC,EAAgB,KAChBC,EAAkB,KACtB,IAAKlc,KAAK+M,MAAMmO,OAAQ,CACpB,IAAMzX,EAAOzD,KAAK+M,MAAMnE,UAAUrE,aAAevE,KAAK+M,MAAMnE,UAAUnF,KACtEsY,EACIpO,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YAAYpK,EAAK7C,MAAM,KAAK0H,IAAI,SAAAwN,GAAC,OAAIA,EAAE,MAGxB,YAA9B9V,KAAK+M,MAAMnE,UAAUxF,OACrB4Y,EACIrO,EAAA7L,EAAA8L,cAACuO,EAAD,CAAevT,UAAW5I,KAAK+M,MAAMnE,aAIzC5I,KAAK+M,MAAMnE,UAAUwT,SAAW,IAChCH,EACItO,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,kBAAf,WAIJ7N,KAAK+M,MAAMnE,UAAUwT,SAAW,IAChCH,EACItO,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,kBAAf,WAIH7N,KAAK+M,MAAMnE,UAAUwJ,YAAgBpS,KAAK+M,MAAMnE,UAAUwJ,WAAW3Q,OAAS,IAC/Eya,EACIvO,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,SAAf,WAKZ,OACIF,EAAA7L,EAAA8L,cAAA,OACI+B,MAAO3P,KAAK+M,MAAMnE,UAAUrE,aAAevE,KAAK+M,MAAMnE,UAAUnF,KAChEoK,UAAWe,EACXA,MAAO5O,KAAK+M,MAAM6B,MAClBV,QAAS,SAAAc,GAAC,OAAIkH,EAAK/G,OAAOH,KAEzB+M,EACAC,EACAC,EACAC,UA9DM1N,IAAMC,WC7TR4N,mLACD,IAAA1S,EAAA3J,KACZ,IACI,IAAIsI,EAAM,KAWV,OAVItI,KAAK+M,MAAMrJ,OAAO4E,MAClBA,EACIqF,EAAA7L,EAAA8L,cAAC0O,EAAD,CACIhU,IAAKtI,KAAK+M,MAAMrJ,OAAO4E,IACvBiL,KAAK,YACLnP,WAAYpE,KAAK+M,MAAMrJ,OAAOU,cAMtCuJ,EAAA7L,EAAA8L,cAAA,OAAKC,UAAW7N,KAAK+M,MAAM+C,SAAW,qBAAuB,YAAa5B,QAAS,kBAAMvE,EAAKoD,MAAMwP,aAAa5S,EAAKoD,MAAMrJ,UACxHiK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAW7N,KAAK+M,MAAMrJ,OAAOD,MAAQ,kBACpDkK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,QAAf,aAAiC7N,KAAK+M,MAAMrJ,OAAOgF,WAClDJ,GAGX,MAAO0G,GACLV,QAAQC,MAAMS,WAtBkBR,IAAMC,+BCM7B+N,eASjB,SAAAA,EAAYzP,GAAc,IAAApD,EAAA,OAAAqD,OAAAC,EAAA,EAAAD,CAAAhN,KAAAwc,IACtB7S,EAAAqD,OAAAE,EAAA,EAAAF,CAAAhN,KAAAgN,OAAAG,EAAA,EAAAH,CAAAwP,GAAApP,KAAApN,KAAM+M,KAEDM,MAAQ,CACToP,WAAW,GAJO9S,6EAStB3J,KAAKuN,SAAS,CACVkP,WAAYzc,KAAKqN,MAAMoP,6CAIf,IAAAtQ,EAAAnM,KACZ,IACI,GAAIA,KAAK+M,MAAM2P,OACX,OAAO,KAGX,IAAIvI,EAAU,KACd,GAAInU,KAAK+M,MAAMoH,QAAS,CACpB,IAAIwI,EAAW,KACX3c,KAAK+M,MAAM6P,YACXD,EACIhP,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,QAAQC,IAAK+O,KAAO7O,IAAI,QAAQE,QAAS,kBAAM/B,EAAKY,MAAM8P,YAIjF,IAAIrP,EAAS,KACb,GAAIxN,KAAK+M,MAAM+P,WAAY,CACvB,IAAMlO,EAAQ5O,KAAKqN,MAAMoP,UAAY,eAAiB,QACtDjP,EACIG,EAAA7L,EAAA8L,cAAA,OAAKC,UAAWe,EAAOd,IAAKuC,IAAOrC,IAAI,QAAQE,QAAS,kBAAM/B,EAAK4Q,iBAI3E5I,EACIxG,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,SAAS7N,KAAK+M,MAAMoH,SAClC3G,EACAmP,GAKb,IAAIK,EAAQ,GAKZ,OAJKhd,KAAK+M,MAAMW,QAAQjM,OAAS,GAAMzB,KAAKqN,MAAMoP,YAC9CO,EAAQhd,KAAK+M,MAAMW,SAInBC,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cACVsG,EACDxG,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,kDACVmP,IAIf,MAAOhO,GACLV,QAAQC,MAAMS,WArEaR,IAAMC,WAAxB+N,GACH9N,aAAe,CACzByF,QAAS,KACTuI,QAAQ,EACRE,WAAW,EACXE,YAAY,EACZD,MAAO,UCjBMI,oLAMb,IACI,IAAIrO,EAAQ,cAKZ,OAJI5O,KAAK+M,MAAMmQ,QACXtO,GAAS,UAITjB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAWe,GACX5O,KAAK+M,MAAMW,SAGtB,MAAOsB,GACLV,QAAQC,MAAMS,WAlBQR,IAAMC,WAAnBwO,GACHvO,aAAe,CACzBwO,OAAO,OCuCMC,eACjB,SAAAA,EAAYpQ,GAAc,IAAApD,EAAA,OAAAqD,OAAAC,EAAA,EAAAD,CAAAhN,KAAAmd,IACtBxT,EAAAqD,OAAAE,EAAA,EAAAF,CAAAhN,KAAAgN,OAAAG,EAAA,EAAAH,CAAAmQ,GAAA/P,KAAApN,KAAM+M,KAEDM,MAAQ,CACT+P,gBAAiB,KACjBC,cAAe,MALG1T,kFASCzJ,GACvBF,KAAKuN,SAAS,CACV6P,gBAAiBld,6CAIAA,GACrBF,KAAKuN,SAAS,CACV8P,cAAend,uCAIJ0I,GAAqD,IAAAuD,EAAAnM,KAChEuT,EAAO,SACPvT,KAAK+M,MAAMrJ,QAAU1D,KAAK+M,MAAMrJ,OAAO4E,MACvCiL,GAAQ,YAERA,GADcvT,KAAK+M,MAAMrJ,OAAO4E,IAAIZ,MAAMtH,KAAK,SAAAiZ,GAAC,OAAIA,EAAEnZ,KAAO0I,EAAU1I,KACvD,UAAY,YAGhC,OAAQ0I,EAAUxF,MACd,IAAK,KACD,OACIuK,EAAA7L,EAAA8L,cAAC0P,EAAD,CACI5N,IAAI,WACJ9G,UAAWA,EACX2K,KAAMA,EACNjK,YAAa,SAACJ,EAAQ9F,EAAME,GAAf,OAAyB6I,EAAKY,MAAMzD,YAAYJ,EAAQ9F,EAAME,IAC3E0N,WAAY,SAAC9H,EAAQ9F,EAAMG,GAAf,OAAyB4I,EAAKY,MAAMiE,WAAW9H,EAAQ9F,EAAMG,IACzEmU,YAAa,SAAAvT,GAAC,OAAIgI,EAAKY,MAAM2K,YAAYvT,IACzCwT,WAAY,SAAAxT,GAAC,OAAIgI,EAAKY,MAAM4K,WAAWxT,IACvCsT,aAAc,SAAAtT,GAAC,OAAIgI,EAAKY,MAAM0K,aAAatT,IAC3CoT,gBAAiB,SAAApT,GAAC,OAAIgI,EAAKY,MAAMwK,gBAAgBpT,IACjDiT,OAAQ,SAAAjT,GAAC,OAAIgI,EAAKoR,iBAAiBpZ,EAAEjE,KACrCgX,QAAS,SAAC/S,EAAGvC,GAAJ,OAAYuK,EAAKY,MAAMmK,QAAQ/S,EAAqBvC,IAC7DuV,UAAW,SAAAhT,GAAC,OAAIgI,EAAKY,MAAMoK,UAAUhT,IACrCqT,QAAS,SAAArT,GAAC,OAAIgI,EAAKY,MAAMyK,QAAQrT,MAG7C,IAAK,UACD,OACIwJ,EAAA7L,EAAA8L,cAAC4P,EAAD,CACI9N,IAAI,WACJ9G,UAAWA,EACX2K,KAAMA,EACN7P,OAAQ1D,KAAK+M,MAAMrJ,OACnB4F,YAAa,SAACnF,EAAGf,EAAME,GAAV,OAAoB6I,EAAKY,MAAMzD,YAAYnF,EAAGf,EAAME,IACjE0N,WAAY,SAAC7M,EAAGf,EAAMG,GAAV,OAAoB4I,EAAKY,MAAMiE,WAAW7M,EAAGf,EAAMG,IAC/DmU,YAAa,SAAAvT,GAAC,OAAIgI,EAAKY,MAAM2K,YAAYvT,IACzCwT,WAAY,SAAAxT,GAAC,OAAIgI,EAAKY,MAAM4K,WAAWxT,IACvCsT,aAAc,SAAAtT,GAAC,OAAIgI,EAAKY,MAAM0K,aAAatT,IAC3CoT,gBAAiB,SAAApT,GAAC,OAAIgI,EAAKY,MAAMwK,gBAAgBpT,IACjDuO,aAAc,SAAAvO,GAAC,OAAIgI,EAAKY,MAAM2F,aAAavO,IAC3CoO,cAAe,SAACpO,EAAGX,GAAJ,OAAkB2I,EAAKY,MAAMwF,cAAcpO,EAA0BX,IACpFgP,gBAAiB,SAACrO,EAAGsO,GAAJ,OAAoBtG,EAAKY,MAAMyF,gBAAgBrO,EAA0BsO,IAC1FH,oBAAqB,SAACnO,EAAGf,EAAMG,GAAV,OAAoB4I,EAAKY,MAAMiE,WAAW7M,EAAGf,EAAMG,IACxE6T,OAAQ,SAAAjT,GAAC,OAAIgI,EAAKoR,iBAAiBpZ,EAAEjE,KACrCgX,QAAS,SAAC/S,EAAGvC,GAAJ,OAAYuK,EAAKY,MAAMmK,QAAQ/S,EAA0BvC,IAClEuV,UAAW,SAAAhT,GAAC,OAAIgI,EAAKY,MAAMoK,UAAUhT,IACrCqT,QAAS,SAACrT,GAAD,OAAOgI,EAAKY,MAAMyK,QAAQrT,IACnCmR,SAAU,SAACnR,EAAGsF,EAAI8L,GAAR,OAAiBpJ,EAAKY,MAAMuI,SAASnR,EAA0BsF,EAAI8L,MAGzF,QACI,OAAO,gDAIO5N,EAAWC,GAAW,IAAAqI,EAAAjQ,KAC5C,GAAIA,KAAK+M,MAAMrJ,OAAQ,CACnB,IAAMkF,EAAY5I,KAAK+M,MAAMrJ,OAAOU,WAAWhE,KAAK,SAAA+D,GAAC,OAAIA,EAAEjE,KAAO+P,EAAK5C,MAAMgQ,gBACzEzU,GACA5I,KAAK+M,MAAMqK,OAAOxO,EAAWjB,EAAGC,GAEpC5H,KAAKud,iBAAiB,0CAIX7Z,GACf,OAAO9D,EAAMgU,MAAM5T,KAAK+M,MAAMvM,OAAQkD,EAAOD,uCAGjC,IAAAmS,EAAA5V,KACZ,IACI,GAAIA,KAAK+M,MAAMrJ,OAAQ,CACnB,IAAM8I,EAAyB,GAC3B6K,EAAyB,GACzBjS,EAAwB,GACtBkS,EAA0B,GA4EhC,GA1EAtX,KAAK+M,MAAMrJ,OAAOU,WAAWvD,QAAQ,SAAA+H,GAoBjC,GAnBIA,EAAU4D,SACVA,EAAQ/J,KACJkL,EAAA7L,EAAA8L,cAAA,OAAK8B,IAAK9G,EAAU1I,IACf0V,EAAK6H,WAAW7U,MAIzBA,EAAUyO,SAAYzO,EAAUxD,QAAWwD,EAAU0O,UACrDD,EAAQ5U,KACJkL,EAAA7L,EAAA8L,cAAC8P,GAAD,CACIhO,IAAK9G,EAAU1I,GACf0I,UAAWA,EACXuG,OAAQ,SAAAhL,GAAC,OAAIyR,EAAK+H,mBAAmBxZ,EAAEjE,KACvC4P,SAAUlH,EAAU1I,KAAO0V,EAAKvI,MAAM+P,gBACtCpM,WAAY,SAAC7M,EAAGf,EAAMG,GAAV,OAAoBqS,EAAK7I,MAAMiE,WAAW7M,EAAGf,EAAMG,IAC/DoU,WAAY,SAAAxT,GAAC,OAAIyR,EAAK7I,MAAM4K,WAAWxT,QAI9CyE,EAAUyO,SAAWzO,EAAUxD,SAAWwD,EAAU0O,SACrD,OAAQ1O,EAAUxF,MACd,IAAK,KACDgC,EAAO3C,KACHkL,EAAA7L,EAAA8L,cAACgQ,GAAD,CACIlO,IAAK9G,EAAU1I,GACf0I,UAAWA,EACXlF,OAAQkS,EAAK7I,MAAMrJ,OACnByL,OAAQ,SAAAhL,GAAC,OAAIyR,EAAK+H,mBAAmBxZ,EAAEjE,KACvC4P,SAAUlH,EAAU1I,KAAO0V,EAAKvI,MAAM+P,mBAG9C,MACJ,IAAK,UACDhY,EAAO3C,KACHkL,EAAA7L,EAAA8L,cAACiQ,GAAD,CACInO,IAAK9G,EAAU1I,GACf0I,UAAWA,EACXlF,OAAQkS,EAAK7I,MAAMrJ,OACnByL,OAAQ,SAAAhL,GAAC,OAAIyR,EAAK+H,mBAAmBxZ,EAAEjE,KACvC4P,SAAUlH,EAAU1I,KAAO0V,EAAKvI,MAAM+P,mBAM1D,IAAKxU,EAAUyO,UAAYzO,EAAUxD,QAAUwD,EAAU0O,SACrD,OAAQ1O,EAAUxF,MACd,IAAK,KACDkU,EAAS7U,KACLkL,EAAA7L,EAAA8L,cAACgQ,GAAD,CACIlO,IAAK9G,EAAU1I,GACf0I,UAAWA,EACXlF,OAAQkS,EAAK7I,MAAMrJ,OACnByL,OAAQ,SAAAhL,GAAC,OAAIyR,EAAK+H,mBAAmBxZ,EAAEjE,KACvC4P,SAAUlH,EAAU1I,KAAO0V,EAAKvI,MAAM+P,mBAG9C,MACJ,IAAK,UACD9F,EAAS7U,KACLkL,EAAA7L,EAAA8L,cAACiQ,GAAD,CACInO,IAAK9G,EAAU1I,GACf0I,UAAWA,EACXlF,OAAQkS,EAAK7I,MAAMrJ,OACnByL,OAAQ,SAAAhL,GAAC,OAAIyR,EAAK+H,mBAAmBxZ,EAAEjE,KACvC4P,SAAUlH,EAAU1I,KAAO0V,EAAKvI,MAAM+P,sBAQ1Dpd,KAAK+M,MAAM+Q,UAAgC,IAAnBzG,EAAQ5V,OAAe,CAC/C,IAAMsc,EACFpQ,EAAA7L,EAAA8L,cAAA,OAAK8B,IAAI,gBACL/B,EAAA7L,EAAA8L,cAACoQ,GAAD,CACItQ,QACIC,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,sDACAF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,sEAMpBwJ,EAAU,CAAC0G,GAAaE,OAAO5G,GAGnC,GAAIrX,KAAK+M,MAAM+Q,UAAgC,IAAnBtR,EAAQ/K,OAAe,CAC/C,IAAMyc,EAEFvQ,EAAA7L,EAAA8L,cAAA,OAAK8B,IAAI,eACL/B,EAAA7L,EAAA8L,cAACoQ,GAAD,CACItQ,QACIC,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,uHACAF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,oEAA0FF,EAAA7L,EAAA8L,cAAA,uBAA1F,mCAOpBxI,EAAS,CAAC8Y,GAAYD,OAAO7Y,GAGV,IAAnBoH,EAAQ/K,QACR+K,EAAQ/J,KACJkL,EAAA7L,EAAA8L,cAACoQ,GAAD,CACItO,IAAI,UACJhC,QACIC,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,2DAQhB,IAAIsQ,EAAsB,KAC1B,GAAIne,KAAK+M,MAAMrJ,OAAO8E,cAAc/G,OAAS,EAAG,CAC5C,IAAM+G,EAAgBxI,KAAK+M,MAAMrJ,OAAO8E,cAAcF,IAAI,SAAAtD,GAAC,OACvD2I,EAAA7L,EAAA8L,cAACwQ,GAAD,CACI1O,IAAK1K,EAAE9E,GACPme,aAAcrZ,EACd6X,MAAO,SAACwB,EAAc7L,GAAf,OAAmCoD,EAAK7I,MAAM8P,MAAMwB,EAAc7L,QAGjF2L,EACIxQ,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,iBACVrF,GAKb,IAAI8V,EAAa,KACbte,KAAK+M,MAAMrJ,OAAO4E,MAClBgW,EACI3Q,EAAA7L,EAAA8L,cAAC0O,EAAD,CACIhU,IAAKtI,KAAK+M,MAAMrJ,OAAO4E,IACvBiL,KAAK,SACL8H,YAA0C,OAA7Brb,KAAKqN,MAAMgQ,cACxBjZ,WAAYpE,KAAK+M,MAAMrJ,OAAOU,WAC9B0W,eAAgB9a,KAAKqN,MAAM+P,gBAAkBpd,KAAKqN,MAAM+P,qBAAkB1b,EAC1E0Y,kBAAmB,SAAAla,GACXA,GACA0V,EAAK+H,mBAAmBzd,IAGhCwb,kBAAmB,SAAC/T,EAAGC,GAAJ,OAAUgO,EAAK2I,kBAAkB5W,EAAGC,OAKnE,IAAI4W,EAAoB,KACxB,GAAIxe,KAAKqN,MAAM+P,gBAAiB,CAC5B,IAAMxU,EAAY5I,KAAK+M,MAAMrJ,OAAOU,WAAWhE,KAAK,SAAA+D,GAAC,OAAIA,EAAEjE,KAAO0V,EAAKvI,MAAM+P,kBACzExU,IAAcA,EAAU4D,UACxBgS,EAAoBxe,KAAKyd,WAAW7U,IAgB5C,OAbK4V,IACDA,EACI7Q,EAAA7L,EAAA8L,cAACoQ,GAAD,CACItO,IAAI,WACJhC,QACIC,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,2EASZF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,+BACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,+CACXF,EAAA7L,EAAA8L,cAAC6Q,GAAD,CACItK,QAAQ,oBACRzG,QAASlB,KAGjBmB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,+CACVsQ,EACDxQ,EAAA7L,EAAA8L,cAAC6Q,GAAD,CACItK,QAAQ,sCACRzG,QAAS2J,EACTqF,OAA2B,IAAnBrF,EAAQ5V,OAChBqb,YAAY,IAEfwB,EACD3Q,EAAA7L,EAAA8L,cAAC6Q,GAAD,CACItK,QAAQ,8BACRzG,QAAStI,EACTsX,OAA0B,IAAlBtX,EAAO3D,SAEnBkM,EAAA7L,EAAA8L,cAAC6Q,GAAD,CACItK,QAAQ,WACRzG,QAAS4J,EACToF,OAA4B,IAApBpF,EAAS7V,OACjBqb,YAAY,KAGpBnP,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,+CACXF,EAAA7L,EAAA8L,cAAC6Q,GAAD,CACItK,QAAQ,qBACRzG,QAAS,CAAC8Q,OAM1B,IAAIE,EAAO,KACP1e,KAAK+M,MAAM+Q,WACXY,EACI/Q,EAAA7L,EAAA8L,cAAC+Q,GAAD,CAAUC,QAAS5e,KAAK+M,MAAM6R,WAItC,IAAMA,EAAU5e,KAAK+M,MAAM6R,QAAQpe,OAAO,SAAA2D,GAAC,OAAIyR,EAAKiJ,WAAW1a,KAAImE,IAAI,SAAAnE,GACnE,OACIwJ,EAAA7L,EAAA8L,cAACkR,EAAD,CACIpP,IAAKvL,EAAEjE,GACPwD,OAAQS,EACR2L,UAAU,EACVyM,aAAc,SAAA7Y,GAAM,OAAIkS,EAAK7I,MAAMgS,gBAAgBrb,QAK/D,OACIiK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,+BACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,2DACV6Q,EACD/Q,EAAA7L,EAAA8L,cAAA,UAAQM,QAAS,kBAAM0H,EAAK7I,MAAMiS,iBAAlC,sBACCJ,GAELjR,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,iDAI7B,MAAOmB,GACLV,QAAQC,MAAMS,WAxVuBR,IAAMC,WAiWjDwQ,oLAEE,IAAIzL,EAA6B,KAcjC,OAZIA,EAD8B,IAA9BxT,KAAK+M,MAAM6R,QAAQnd,OAEfkM,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,uDAIAF,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,gEACAF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,mDAMRF,EAAA7L,EAAA8L,cAACoQ,GAAD,CACItQ,QACIC,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,8EACAF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YACd2F,YAtBFhF,IAAMC,WAmCvByQ,qLAEE,OAAQlf,KAAK+M,MAAMsR,aAAajb,MAC5B,IAAK,iBACL,IAAK,gBACD,IAAMI,EAAYxD,KAAK+M,MAAMsR,aAAa1V,KACtCnF,EAAUG,WAEuB,UAA5BH,EAAUG,SAASP,MAAkD,WAA5BI,EAAUG,SAASP,OAC7DI,EAAUG,SAASV,OAAS,EACK,IAA7BO,EAAUG,SAASV,MAEnBjD,KAAK6c,OAAM,GAEX7c,KAAK6c,UAIjB,MACJ,IAAK,iBAEa7c,KAAK+M,MAAMsR,aAAa1V,KAChCrB,KAAO,EACbtH,KAAK6c,yCAKsB,IAAzBrK,EAAyBhR,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GACnCxB,KAAK+M,MAAM8P,MAAM7c,KAAK+M,MAAMsR,aAAc7L,oCAG9B,IAAA0D,EAAAlW,KACN4I,EAAY5I,KAAK+M,MAAMsR,aAAazV,UACpCpF,EAAYxD,KAAK+M,MAAMsR,aAAa1V,KACpCe,EAAQ1J,KAAK+M,MAAMsR,aAAa1V,KAEhClF,EAAOmF,EAAUrE,aAAeqE,EAAUnF,MAAQ,kBACxD,OAAQzD,KAAK+M,MAAMsR,aAAajb,MAC5B,IAAK,iBACD,IAAMO,EAAWH,EAAUG,SACvBE,EAAWF,EAASE,SAASzC,WAIjC,MAHiB,UAAbyC,IACAA,EAAWA,EAASC,eAGpB6J,EAAA7L,EAAA8L,cAAA,OAAK8B,IAAK1P,KAAK+M,MAAMsR,aAAane,GAAI2N,UAAU,eAC5CF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,QACVpK,EADL,gBACwBI,EADxB,oBACmDF,EAASK,QAE5D2J,EAAA7L,EAAA8L,cAACiH,EAAD,CACIhG,SAAU,CACNlB,EAAA7L,EAAA8L,cAAA,UAAQ8B,IAAI,UAAUxB,QAAS,kBAAMgI,EAAKiJ,YAA1C,WACAxR,EAAA7L,EAAA8L,cAAA,UAAQ8B,IAAI,QAAQxB,QAAS,kBAAMgI,EAAK2G,UAAxC,aAKpB,IAAK,gBACD,OACIlP,EAAA7L,EAAA8L,cAAA,OAAK8B,IAAK1P,KAAK+M,MAAMsR,aAAane,GAAI2N,UAAU,eAC5CF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,QACVpK,EADL,uCAC+CD,EAAUC,MAEzDkK,EAAA7L,EAAA8L,cAACiH,EAAD,CACIhG,SAAU,CACNlB,EAAA7L,EAAA8L,cAAA,UAAQ8B,IAAI,QAAQxB,QAAS,kBAAMgI,EAAK2G,UAAxC,aAKpB,IAAK,iBACD,OACIlP,EAAA7L,EAAA8L,cAAA,OAAK8B,IAAK1P,KAAK+M,MAAMsR,aAAane,GAAI2N,UAAU,eAC5CF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,QACVpK,EADL,4BACoCiG,EAAMjG,KAD1C,KACkDiG,EAAMrC,MADxD,KAGAsG,EAAA7L,EAAA8L,cAACiH,EAAD,CACIhG,SAAU,CACNlB,EAAA7L,EAAA8L,cAAA,UAAQ8B,IAAI,WAAWxB,QAAS,kBAAMgI,EAAKiJ,YAA3C,YACAxR,EAAA7L,EAAA8L,cAAA,UAAQ8B,IAAI,QAAQxB,QAAS,kBAAMgI,EAAK2G,UAAxC,aAKpB,QACI,OAAO,aAtFSrO,IAAMC,WAmGhC2Q,gMAEE,OAAIpf,KAAK+M,MAAM+C,SACJ,WAGJ,qCAGKd,GACZA,EAAEC,kBACEjP,KAAK+M,MAAMoC,QACXnP,KAAK+M,MAAMoC,OAAOnP,KAAK+M,MAAMnE,4CAIrB,IAAAyW,EAAArf,KACR4O,EAAQ,iBAAmB5O,KAAK+M,MAAMnE,UAAUxF,KAKpD,OAJIpD,KAAK+M,MAAMnE,UAAU4D,SAAWxM,KAAK+M,MAAM+C,YAC3ClB,GAAS,cAITjB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAWe,EAAOV,QAAS,SAAAc,GAAC,OAAIqQ,EAAKnR,QAAQc,KAC9CrB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,QACV7N,KAAK+M,MAAMnE,UAAUrE,aAAevE,KAAK+M,MAAMnE,UAAUnF,MAAQ,YAClEkK,EAAA7L,EAAA8L,cAAA,QAAMC,UAAU,QAAQ7N,KAAKsf,uBAEjC3R,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAACoE,EAAD,CACI9I,OAAQlJ,KAAK+M,MAAMnE,UACnBnF,KAAK,aACLmO,MAAM,aACNZ,WAAY,SAAAzN,GAAK,OAAI8b,EAAKtS,MAAMiE,WAAWqO,EAAKtS,MAAMnE,UAAW,aAAcrF,MAEnFoK,EAAA7L,EAAA8L,cAAA,UAAQM,QAAS,SAAAc,GAAOA,EAAEC,kBAAmBoQ,EAAKtS,MAAM4K,WAAW0H,EAAKtS,MAAMnE,aAA9E,6BAnCc4F,IAAMC,WAiDlC8Q,gMAEE,OAAIvf,KAAK+M,MAAMnE,UAAU4D,QACd,eAGPxM,KAAK+M,MAAM+C,SACJ,WAGJ,qCAGKd,GACZA,EAAEC,kBACGjP,KAAK+M,MAAMnE,UAAU4D,SAAYxM,KAAK+M,MAAM+C,WAAY9P,KAAK+M,MAAMoC,QACpEnP,KAAK+M,MAAMoC,OAAOnP,KAAK+M,MAAMnE,4CAIrB,IAAA4W,EAAAxf,KACR4O,EAAQ,iBAAmB5O,KAAK+M,MAAMnE,UAAUxF,MAChDpD,KAAK+M,MAAMnE,UAAU4D,SAAWxM,KAAK+M,MAAM+C,YAC3ClB,GAAS,cAGb,IAAMtD,GAAQtL,KAAK+M,MAAMnE,UAAUtD,MAAQ,gBACjC,KAAOtF,KAAK+M,MAAMnE,UAAUrD,SAAW,iBACvC,WAAavF,KAAK+M,MAAMnE,UAAU1F,MAEtCuc,EAAQ,GASd,OARIzf,KAAK+M,MAAMrJ,OAAO4E,MACbtI,KAAK+M,MAAMnE,UAAUyO,SAAYrX,KAAK+M,MAAMrJ,OAAO4E,IAAIZ,MAAMtH,KAAK,SAAAiZ,GAAC,OAAIA,EAAEnZ,KAAOsf,EAAKzS,MAAMnE,UAAU1I,MACtGuf,EAAMhd,KACFkL,EAAA7L,EAAA8L,cAAA,OAAK8B,IAAI,aAAa7B,UAAU,QAAhC,oBAMRF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAWe,EAAOV,QAAS,SAAAc,GAAC,OAAIwQ,EAAKtR,QAAQc,KAC9CrB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,QACV7N,KAAK+M,MAAMnE,UAAUrE,aAAevE,KAAK+M,MAAMnE,UAAUnF,MAAQ,YACjEzD,KAAK+M,MAAMnE,UAAUvD,OAAS,MAAQrF,KAAK+M,MAAMnE,UAAUvD,OAAS,GACrEsI,EAAA7L,EAAA8L,cAAA,QAAMC,UAAU,QAAQ7N,KAAKsf,uBAEjC3R,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,qBACVvC,GAEJmU,WAlDDjR,IAAMC,WAgEpBiR,gMAEE,OAAI1f,KAAK+M,MAAMnE,UAAU4D,QACd,eAGPxM,KAAK+M,MAAM+C,SACJ,WAGJ,qCAGKd,GACZA,EAAEC,kBACGjP,KAAK+M,MAAMnE,UAAU4D,SAAYxM,KAAK+M,MAAM+C,WAAY9P,KAAK+M,MAAMoC,QACpEnP,KAAK+M,MAAMoC,OAAOnP,KAAK+M,MAAMnE,4CAIrB,IAAA+W,EAAA3f,KACR4O,EAAQ,iBAAmB5O,KAAK+M,MAAMnE,UAAUxF,MAChDpD,KAAK+M,MAAMnE,UAAU4D,SAAWxM,KAAK+M,MAAM+C,YAC3ClB,GAAS,cAGb,IAAInF,GAAMzJ,KAAK+M,MAAMnE,UAAUa,GAAKzJ,KAAK+M,MAAMnE,UAAUa,GAAK,GAAGrI,WAC7DpB,KAAK+M,MAAMnE,UAAUpC,OAAS,IAC9BiD,GAAM,IAAMzJ,KAAK+M,MAAMnE,UAAUpC,QAGrC,IAAIoZ,EAAQ,KACP5f,KAAK+M,MAAMnE,UAAUyO,UACtBuI,EACIjS,EAAA7L,EAAA8L,cAACuO,EAAD,CAAevT,UAAW5I,KAAK+M,MAAMnE,aAI7C,IAAIwJ,EAAa,KACbpS,KAAK+M,MAAMnE,UAAUwJ,aACrBA,EAAapS,KAAK+M,MAAMnE,UAAUwJ,WAAW9J,IAAI,SAAAnE,GAC7C,IAAIV,EAAOU,EAAEV,KACE,eAAXU,EAAEV,OACFA,GAAQ,KAAOU,EAAEjB,MAAQ,KAEb,WAAXiB,EAAEV,MAAuBU,EAAE1D,OAC5BgD,EAAOU,EAAE1D,MAET0D,EAAER,WACFF,GAAQ,IAAM7D,EAAMgT,sBAAsBzO,EAAGwb,EAAK5S,MAAMrJ,SAI5D,IAFA,IAAMmP,EAAc,GACdpS,EAAOb,EAAMkT,cAAc3O,GACxBa,EAAI,EAAGA,IAAMvE,EAAKgB,SAAUuD,EACjC6N,EAAYpQ,KAAKkL,EAAA7L,EAAA8L,cAAA,MAAI8B,IAAK1K,EAAG6I,UAAU,kBAAkBpN,EAAKuE,KAElE,OACI2I,EAAA7L,EAAA8L,cAACoQ,GAAD,CACItO,IAAKvL,EAAEjE,GACPgd,OAAO,EACPxP,QACIC,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,aACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,kBAAkBpK,GACjCkK,EAAA7L,EAAA8L,cAAA,UACKiF,SAS7B,IAAM4M,EAAQ,GASd,OARIzf,KAAK+M,MAAMrJ,OAAO4E,MACbtI,KAAK+M,MAAMnE,UAAUyO,SAAYrX,KAAK+M,MAAMrJ,OAAO4E,IAAIZ,MAAMtH,KAAK,SAAAiZ,GAAC,OAAIA,EAAEnZ,KAAOyf,EAAK5S,MAAMnE,UAAU1I,MACtGuf,EAAMhd,KACFkL,EAAA7L,EAAA8L,cAAA,OAAK8B,IAAI,aAAa7B,UAAU,QAAhC,oBAMRF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAWe,EAAOV,QAAS,SAAAc,GAAC,OAAI2Q,EAAKzR,QAAQc,KAC9CrB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,QACV7N,KAAK+M,MAAMnE,UAAUrE,aAAevE,KAAK+M,MAAMnE,UAAUnF,MAAQ,YAClEkK,EAAA7L,EAAA8L,cAAA,QAAMC,UAAU,QAAQ7N,KAAKsf,uBAEjC3R,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,qBACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAf,MACAF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAc7N,KAAK+M,MAAMnE,UAAUlG,KAEtDiL,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAcpE,GAC7BkE,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAf,QAGP+R,EACAxN,EACAqN,WArGIjR,IAAMC,WC1nBVoR,oLACD,IAAAlW,EAAA3J,KACR8f,EAAe,EACfC,EAAY,EACZnb,EAAyB,GAC7BA,EAAQA,EAAMqZ,OAAOje,KAAK+M,MAAMrI,UAAUE,OAC1C5E,KAAK+M,MAAMrI,UAAU6C,MAAM1G,QAAQ,SAAA8U,GAC/B/Q,EAAQA,EAAMqZ,OAAOtI,EAAK/Q,SAE9BA,EAAM/D,QAAQ,SAAAgE,GACVib,GAAgBjb,EAAK5B,MACrB,IAAMpD,EAAU8J,EAAKoD,MAAMiT,WAAWnb,EAAKE,YAAaF,EAAK2C,kBACzD3H,IACAkgB,GAAangB,EAAMqgB,WAAWpgB,EAAQoG,WAAapB,EAAK5B,SAIhE,IAEIid,EACAC,EAHEC,EAAaL,EAAYngB,EAAMygB,iBAAiBP,GAItD,GAAI9f,KAAK+M,MAAMuT,MAAO,CAClB,IAAIC,EAAS,EACTC,EAAW,EACXC,EAAS,EACTC,EAAW,EAETvb,EAAMnF,KAAK+M,MAAMuT,MAAMnb,IAAI3E,OAAO,SAAAmgB,GAAE,OAAIA,EAAGvb,SACjDD,EAAItE,QAAQ,SAAA8f,GACRJ,GAAU3gB,EAAMghB,aAAaD,EAAGzd,MAAO,QACvCsd,GAAY5gB,EAAMghB,aAAaD,EAAGzd,MAAO,UACzCud,GAAU7gB,EAAMghB,aAAaD,EAAGzd,MAAO,QACvCwd,GAAY9gB,EAAMghB,aAAaD,EAAGzd,MAAO,YAG7C,IAAIC,EAAa,KACb0d,EAAqB,KACzB,GAAIT,EAAa,IACbjd,EAAa,UACTid,GAAcG,IACdpd,EAAa,QAEbid,GAAcI,IACdrd,EAAa,UAEbid,GAAcK,IACdtd,EAAa,QAEbid,GAAcM,IACdvd,EAAa,UAEjB0d,EAAqB1d,EAEhBgC,EAAI1D,OAAS,GAAO0D,EAAI1D,OAAS,GAAI,CACtC,IAAMqf,EAAQ3b,EAAI1D,OAAS,EAC3B,OAAQ0B,GACJ,IAAK,UACD0d,EAAqBC,EAAQ,OAAS,UACtC,MACJ,IAAK,OACDD,EAAqBC,EAAQ,SAAW,UACxC,MACJ,IAAK,SACDD,EAAqBC,EAAQ,OAAS,OACtC,MACJ,IAAK,OACDD,EAAqBC,EAAQ,SAAW,SACxC,MACJ,IAAK,SACDD,EAAqBC,EAAQ,SAAW,OACxC,MACJ,QACID,EAAqB,IAMrCX,EACIvS,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,SACXF,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,aAAYF,EAAA7L,EAAA8L,cAAA,kBAC3BD,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,aAAYF,EAAA7L,EAAA8L,cAAA,oBAC3BD,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,aAAYF,EAAA7L,EAAA8L,cAAA,kBAC3BD,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,aAAYF,EAAA7L,EAAA8L,cAAA,qBAE/BD,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,aAAa0S,EAA5B,OACA5S,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,aAAa2S,EAA5B,OACA7S,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,aAAa4S,EAA5B,OACA9S,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,aAAa6S,EAA5B,SAKZ,IAAMK,EAAU,SAACC,GAEb,OAAQ,IAAMA,EADF/f,KAAKmU,IAAIgL,EAAwB,IAAXM,IAIhCO,EAAW,SAACD,GACd,OAAO,IAAMD,EAAQC,IAGzBb,EACIxS,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,oBACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,iBACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAce,MAAO,CAAEiL,KAAM,IAAKqH,MAAOD,EAASV,GAAU,QAE/E5S,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,iBACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAWe,MAAO,CAAEiL,KAAMkH,EAAQR,GAAU,IAAKW,MAAOD,EAAST,GAAY,QAEhG7S,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,iBACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,aAAae,MAAO,CAAEiL,KAAMkH,EAAQP,GAAY,IAAKU,MAAOD,EAASR,GAAU,QAElG9S,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,iBACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAWe,MAAO,CAAEiL,KAAMkH,EAAQN,GAAU,IAAKS,MAAOD,EAASP,GAAY,QAEhG/S,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,iBACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,aAAae,MAAO,CAAEiL,KAAMkH,EAAQL,GAAY,IAAKQ,MAAO,QAE/EvT,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,uBACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YAAYe,MAAO,CAAEiL,KAAOkH,EAAQX,GAAc,GAAO,SAGhFzS,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAf,cACAF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,4BAEIF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,SAAS1K,IAE5BwK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,UAAUe,MAAO,CAAEgC,QAAUiQ,IAAuB1d,EAAc,OAAS,KAA1F,4BAC8BgC,EAAI1D,OADlC,SAEIkM,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,SAAQF,EAAA7L,EAAA8L,cAAA,SAAIiT,MAM3C,OACIlT,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAf,YACAF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,wBAEIF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,SAASkS,EAAxB,QAEJpS,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,UAAUe,MAAO,CAAEgC,QAAUwP,IAAeL,EAAa,OAAS,KAAjF,oBACsBD,EADtB,cAEInS,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,SAASuS,EAAxB,QAEHF,EACAC,UAvJiC3R,IAAMC,WCcnC0S,eACjB,SAAAA,EAAYpU,GAAc,IAAApD,EAAA,OAAAqD,OAAAC,EAAA,EAAAD,CAAAhN,KAAAmhB,IACtBxX,EAAAqD,OAAAE,EAAA,EAAAF,CAAAhN,KAAAgN,OAAAG,EAAA,EAAAH,CAAAmU,GAAA/T,KAAApN,KAAM+M,KACDM,MAAQ,CACT4H,aAAa,EACbqL,MAAO,MAJW3W,+EAStB3J,KAAKuN,SAAS,CACV0H,aAAcjV,KAAKqN,MAAM4H,kDAIbjN,GAChB,IAAMsY,EAAQtgB,KAAK+M,MAAMqU,QAAQhhB,KAAK,SAAAT,GAAC,OAAIA,EAAEO,KAAO8H,IACpDhI,KAAKuN,SAAS,CACV+S,MAAOA,qCAIC,IAAAnU,EAAAnM,KACZ,IACI,IAAMqhB,EAAe,GACrB,GAAIrhB,KAAK+M,MAAMqU,QACX,IAAK,IAAIpc,EAAI,EAAGA,IAAMhF,KAAK+M,MAAMqU,QAAQ3f,SAAUuD,EAAG,CAClD,IAAMsb,EAAQtgB,KAAK+M,MAAMqU,QAAQpc,GACjCqc,EAAa5e,KAAK,CACdvC,GAAIogB,EAAMpgB,GACVO,KAAM6f,EAAM7c,OAKxB,IAAM6d,EACF3T,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAC2I,EAAD,CACInH,QAASiS,EACT5R,YAAY,kBACZH,WAAYtP,KAAKqN,MAAMiT,MAAQtgB,KAAKqN,MAAMiT,MAAMpgB,QAAKwB,EACrDyN,OAAQ,SAAAD,GAAQ,OAAI/C,EAAKoV,YAAYrS,MAEzCvB,EAAA7L,EAAA8L,cAAC4T,GAAD,CACI9c,UAAW1E,KAAK+M,MAAM0U,UACtBnB,MAAOtgB,KAAKqN,MAAMiT,MAClBN,WAAY,SAACjb,EAAayC,GAAd,OAAmC2E,EAAKY,MAAMiT,WAAWjb,EAAayC,OAKxF6Q,EAAarY,KAAKqN,MAAM4H,YAAc,eAAiB,QAEvDd,EACFxG,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,SAAf,aACAF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAWwK,EAAYvK,IAAKuC,IAAOrC,IAAI,QAAQE,QAAS,kBAAM/B,EAAKmM,oBAI1E5K,EACFC,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,SACIxK,KAAK,OACLqM,YAAY,iBACZnM,MAAOtD,KAAK+M,MAAM0U,UAAUhe,KAC5B2K,WAAYpO,KAAK+M,MAAMvM,OACvBmU,SAAU,SAAAC,GAAK,OAAIzI,EAAKY,MAAMzD,YAAY,OAAQsL,EAAM3L,OAAO3F,WAGvEqK,EAAA7L,EAAA8L,cAAA,OAAKgB,MAAO,CAAEgC,QAAS5Q,KAAKqN,MAAM4H,YAAc,GAAK,SACjDtH,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YACdyT,GAEL3T,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YACfF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,UAAQC,UAAW7N,KAAK+M,MAAMvM,OAAS,WAAa,GAAI0N,QAAS,kBAAM/B,EAAKY,MAAM2U,YAAlF,kBACA/T,EAAA7L,EAAA8L,cAACkH,EAAD,CAAerU,KAAK,mBAAmBgN,SAAU,kBAAMtB,EAAKY,MAAM4U,uBAK9E,OACIhU,EAAA7L,EAAA8L,cAACkJ,EAAD,CAAU3C,QAASA,EAASzG,QAASA,IAE3C,MAAOsB,GACLV,QAAQC,MAAMS,WAvFiBR,IAAMC,WCrB5BmT,oLAMb,IACI,IAAIzN,EAAU,KACVnU,KAAK+M,MAAM4C,QACXwE,EAAUxG,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAUF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,SAAS7N,KAAK+M,MAAM4C,SAG1E,IAAMjC,EAAU1N,KAAK+M,MAAM8U,aAE3B,OACIlU,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cACVsG,EACDxG,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,gBACVH,IAIf,MAAOW,GACLC,QAAQC,MAAMF,WAvBaG,IAAMC,WAAxBmT,GACHlT,aAAe,CACzBiB,MAAO,UCmBMmS,eACjB,SAAAA,EAAY/U,GAAc,IAAApD,EAAA,OAAAqD,OAAAC,EAAA,EAAAD,CAAAhN,KAAA8hB,IACtBnY,EAAAqD,OAAAE,EAAA,EAAAF,CAAAhN,KAAAgN,OAAAG,EAAA,EAAAH,CAAA8U,GAAA1U,KAAApN,KAAM+M,KACDM,MAAQ,CACT0U,SAAS,GAHSpY,2EAQtB3J,KAAKuN,SAAS,CACVwU,SAAU/hB,KAAKqN,MAAM0U,2CAIb,IAAA5V,EAAAnM,KACZ,IACI,IACMgiB,EADQ,CAAC,aAAa/D,OAAOpV,GACTP,IAAI,SAAAhG,GAAI,MAAK,CAAEpC,GAAIoC,EAAM7B,KAAM6B,KAGnD2f,EADa,CAAC,aAAahE,OAAOnV,GACVR,IAAI,SAAA4Z,GAAG,MAAK,CAAEhiB,GAAIgiB,EAAKzhB,KAAMyhB,KAEvDxU,EAAU,KACd,GAAI1N,KAAKqN,MAAM0U,QACXrU,EACIC,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,SACIxK,KAAK,OACLqM,YAAY,OACZnM,MAAOtD,KAAK+M,MAAMvM,OAAOiD,KACzBkR,SAAU,SAAAC,GAAK,OAAIzI,EAAKY,MAAMzD,YAAY,OAAQsL,EAAM3L,OAAO3F,WAGvEqK,EAAA7L,EAAA8L,cAACoE,EAAD,CACI9I,OAAQlJ,KAAK+M,MAAMvM,OACnBiD,KAAK,eACLmO,MAAM,SACNhB,QAAS,SAAAtN,GAAK,OAAI1D,EAAMqG,UAAU3C,IAClC0N,WAAY,SAAAzN,GAAK,OAAI4I,EAAKY,MAAMiE,WAAW,eAAgBzN,MAE/DoK,EAAA7L,EAAA8L,cAACoE,EAAD,CACI9I,OAAQlJ,KAAK+M,MAAMvM,OACnBiD,KAAK,eACLmO,MAAM,SACNhB,QAAS,SAAAtN,GAAK,OAAI1D,EAAMqG,UAAU3C,IAClC0N,WAAY,SAAAzN,GAAK,OAAI4I,EAAKY,MAAMiE,WAAW,eAAgBzN,MAE/DoK,EAAA7L,EAAA8L,cAAC2I,EAAD,CACInH,QAAS4S,EACTvS,YAAY,oBACZH,WAAYtP,KAAK+M,MAAMvM,OAAO8B,KAC9B6M,OAAQ,SAAAD,GAAQ,OAAI/C,EAAKY,MAAMzD,YAAY,OAAQ4F,MAEvDvB,EAAA7L,EAAA8L,cAAC2I,EAAD,CACInH,QAAS6S,EACTxS,YAAY,oBACZH,WAAYtP,KAAK+M,MAAMvM,OAAOsF,SAC9BqJ,OAAQ,SAAAD,GAAQ,OAAI/C,EAAKY,MAAMzD,YAAY,WAAY4F,MAE3DvB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YACfF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,UAAQM,QAAS,kBAAM/B,EAAKY,MAAMoV,gBAAlC,sBAIT,CACH,IAAIC,EAAU,GACiB,cAA3BpiB,KAAK+M,MAAMvM,OAAO8B,OAClB8f,GAAWA,EAAU,IAAMpiB,KAAK+M,MAAMvM,OAAO8B,KAAOtC,KAAK+M,MAAMvM,OAAO8B,MAEvC,cAA/BtC,KAAK+M,MAAMvM,OAAOsF,WAClBsc,GAAWA,EAAU,IAAMpiB,KAAK+M,MAAMvM,OAAOsF,SAAW9F,KAAK+M,MAAMvM,OAAOsF,UAE9Esc,GAAW,mBAAqBxiB,EAAMqG,UAAUjG,KAAK+M,MAAMvM,OAAO6hB,cAAgB,OAASziB,EAAMqG,UAAUjG,KAAK+M,MAAMvM,OAAO8hB,cAE7H5U,EACIC,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,SACIxK,KAAK,OACLqM,YAAY,OACZnM,MAAOtD,KAAK+M,MAAMvM,OAAOiD,KACzBkR,SAAU,SAAAC,GAAK,OAAIzI,EAAKY,MAAMzD,YAAY,OAAQsL,EAAM3L,OAAO3F,WAGvEqK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,WAAkCuU,IAK9C,OACIzU,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,QACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,SAAf,UACAF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAW7N,KAAKqN,MAAM0U,QAAU,eAAiB,QAASjU,IAAKuC,IAAOrC,IAAI,QAAQE,QAAS,kBAAM/B,EAAKoW,gBAE/G5U,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,gBACVH,IAIf,MAAOsB,GACLV,QAAQC,MAAMS,WAvGcR,IAAMC,WCfzB+T,oLACD,IAAA7Y,EAAA3J,KACZ,IACI,IAAMmU,EACFxG,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,SAAf,SAIFH,EACFC,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,SACIxK,KAAK,OACLqM,YAAY,YACZnM,MAAOtD,KAAK+M,MAAM4I,KAAKlS,KACvBkR,SAAU,SAAAC,GAAK,OAAIjL,EAAKoD,MAAMzD,YAAYK,EAAKoD,MAAM4I,KAAM,OAAQf,EAAM3L,OAAO3F,WAGxFqK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YACfF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAACkH,EAAD,CAAerU,KAAK,cAAcgN,SAAU,kBAAM9D,EAAKoD,MAAM0V,WAAW9Y,EAAKoD,MAAM4I,WAK/F,OACIhI,EAAA7L,EAAA8L,cAACkJ,EAAD,CAAU3C,QAASA,EAASzG,QAASA,IAE3C,MAAOsB,GACLV,QAAQC,MAAMS,WA9BYR,IAAMC,WCHvBiU,oLACD,IAAA/Y,EAAA3J,KACZ,IACI,IAAM4E,EAAQ,GA4Bd,OA1BA5E,KAAK+M,MAAMrI,UAAUE,MAAM/D,QAAQ,SAAAgE,GAC/B,IAAIpE,EAAOoE,EAAKE,aAAe,kBAC3BF,EAAK5B,MAAQ,IACbxC,GAAQ,KAAOoE,EAAK5B,OAExB2B,EAAMnC,KAAKkL,EAAA7L,EAAA8L,cAAA,OAAK8B,IAAK7K,EAAK3E,GAAI2N,UAAU,QAAQpN,MAG/B,IAAjBmE,EAAMnD,QACNmD,EAAMnC,KAAKkL,EAAA7L,EAAA8L,cAAA,OAAK8B,IAAI,QAAQ7B,UAAU,QAA3B,gBAGf7N,KAAK+M,MAAMrI,UAAU6C,MAAM1G,QAAQ,SAAA8U,GAC/B/Q,EAAMnC,KAAKkL,EAAA7L,EAAA8L,cAAA,OAAK8B,IAAK,QAAUiG,EAAKzV,GAAI2N,UAAU,mBAAmB8H,EAAKlS,MAAQ,iBAClFkS,EAAK/Q,MAAM/D,QAAQ,SAAAgE,GACf,IAAIpE,EAAOoE,EAAKE,aAAe,kBAC3BF,EAAK5B,MAAQ,IACbxC,GAAQ,KAAOoE,EAAK5B,OAExB2B,EAAMnC,KAAKkL,EAAA7L,EAAA8L,cAAA,OAAK8B,IAAK7K,EAAK3E,GAAI2N,UAAU,QAAQpN,MAE/B,IAAjBmE,EAAMnD,QACNmD,EAAMnC,KAAKkL,EAAA7L,EAAA8L,cAAA,OAAK8B,IAAK,SAAWiG,EAAKzV,GAAI2N,UAAU,QAAxC,kBAKfF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAW7N,KAAK+M,MAAM+C,SAAW,qBAAuB,YAAa5B,QAAS,kBAAMvE,EAAKoD,MAAMwP,aAAa5S,EAAKoD,MAAMrI,aACxHiJ,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAW7N,KAAK+M,MAAMrI,UAAUjB,MAAQ,qBACtDmB,GAGX,MAAOoK,GACLV,QAAQC,MAAMS,WAtCqBR,IAAMC,WCoChCkU,eACjB,SAAAA,EAAY5V,GAAc,IAAApD,EAAA,OAAAqD,OAAAC,EAAA,EAAAD,CAAAhN,KAAA2iB,IACtBhZ,EAAAqD,OAAAE,EAAA,EAAAF,CAAAhN,KAAAgN,OAAAG,EAAA,EAAAH,CAAA2V,GAAAvV,KAAApN,KAAM+M,KACDM,MAAQ,CACT7M,OAAQ,CACJiD,KAAM,GACN4e,aAAc,EACdC,aAAc,EACdxc,SAAU,YACVxD,KAAM,cARQqH,4EAaL9J,GACjB,QAAIA,EAAQoG,UAAYjG,KAAKqN,MAAM7M,OAAO6hB,kBAItCxiB,EAAQoG,UAAYjG,KAAKqN,MAAM7M,OAAO8hB,kBAIX,KAA3BtiB,KAAKqN,MAAM7M,OAAOiD,OACb7D,EAAMgU,MAAM5T,KAAKqN,MAAM7M,OAAOiD,KAAM5D,EAAQ4D,UAKlB,cAA/BzD,KAAKqN,MAAM7M,OAAOsF,UACdjG,EAAQiG,WAAa9F,KAAKqN,MAAM7M,OAAOsF,YAKhB,cAA3B9F,KAAKqN,MAAM7M,OAAO8B,MACdzC,EAAQyC,OAAStC,KAAKqN,MAAM7M,OAAO8B,mDAQrBc,EAAsEE,GAE5FtD,KAAKqN,MAAM7M,OAAO4C,GAAQE,EAC1BtD,KAAKuN,SAAS,CACV/M,OAAQR,KAAKqN,MAAM7M,kDAIF4C,EAAuCG,GAC5D,IAAMD,EAAQ1D,EAAMyJ,eAAerJ,KAAKqN,MAAM7M,OAAO4C,GAAOG,GAC5DvD,KAAK4iB,kBAAkBxf,EAAME,yCAI7BtD,KAAKuN,SAAS,CACV/M,OAAQ,CACJiD,KAAM,GACN4e,aAAc,EACdC,aAAc,EACdxc,SAAU,YACVxD,KAAM,uDAKMsC,EAAwBsD,GAAuB,IAAAiE,EAAAnM,KAC7Dgd,EAAQ,GAsCd,OApCApY,EAAM/D,QAAQ,SAAAgE,GACV,IAAMhF,EAAUsM,EAAKY,MAAMiT,WAAWnb,EAAKE,YAAaF,EAAK2C,kBAC7D,GAAI3H,EACAmd,EAAMva,KACFkL,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,SAAS6B,IAAK7P,EAAQK,IACjCyN,EAAA7L,EAAA8L,cAAC4P,EAAD,CACI5U,UAAW/I,EACXgF,KAAMA,EACNH,UAAWyH,EAAKY,MAAM0U,UACtBlO,KAAM,iBACNvC,WAAY,SAAC9H,EAAQ9F,EAAMG,GAAf,OAAyB4I,EAAKY,MAAMiE,WAAW9H,EAAQ9F,EAAMG,IACzEmT,oBAAqB,SAAAxN,GAAM,OAAIiD,EAAKY,MAAM2J,oBAAoBxN,EAAQhB,YAI/E,CACH,IAAMgC,EAAQtF,EAAM7D,QAAQ8D,GACtB0J,EAAQ,oBAAsB1J,EAAKE,YAAc,aAAeF,EAAK2C,iBAC3EwV,EAAMva,KACFkL,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,SAAS6B,IAAKxF,GACzByD,EAAA7L,EAAA8L,cAACiV,GAAD,CACIhB,WAAY,kBAAMlU,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAWU,WAO3C,IAAjB3J,EAAMnD,QACNub,EAAMva,KACFkL,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,SAAS6B,IAAI,SACxB/B,EAAA7L,EAAA8L,cAACoQ,GAAD,CAAMtQ,QAASC,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,iCAAwD3F,EAAS,OAAS,iBAK9F8U,8CAGiB,IAAA/M,EAAAjQ,KACxB,IAAKA,KAAK+M,MAAM0U,UACZ,OAAO,KAGX,IAAMqB,EAAe,GACrBA,EAAargB,KACTkL,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,SAAS6B,IAAI,UACxB/B,EAAA7L,EAAA8L,cAACmV,GAAD,CACIviB,OAAQR,KAAKqN,MAAM7M,OACnB8I,YAAa,SAAClG,EAAME,GAAP,OAAiB2M,EAAK2S,kBAAkBxf,EAAME,IAC3D0N,WAAY,SAAC5N,EAAMG,GAAP,OAAiB0M,EAAK+S,iBAAiB5f,EAAMG,IACzD4e,YAAa,kBAAMlS,EAAKkS,mBAKpC,IAAM7hB,EAAsB,GA8B5B,OA7BIN,KAAK+M,MAAM0U,YACXzhB,KAAK+M,MAAMjN,QAAQe,QAAQ,SAAAd,GACvBA,EAAMO,SAASO,QAAQ,SAAAhB,GACfoQ,EAAKgT,aAAapjB,IAClBS,EAASmC,KAAK5C,OAI1BS,EAASuB,KAAK,SAACC,EAAGC,GACd,OAAID,EAAE2B,KAAO1B,EAAE0B,MAAgB,EAC3B3B,EAAE2B,KAAO1B,EAAE0B,KAAe,EACvB,KAGfnD,EAASO,QAAQ,SAAAhB,GACbijB,EAAargB,KACTkL,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,SAAS6B,IAAK7P,EAAQK,IACjCyN,EAAA7L,EAAA8L,cAAC4P,EAAD,CACI9N,IAAK7P,EAAQK,GACb0I,UAAW/I,EACX6E,UAAWuL,EAAKlD,MAAM0U,UACtB3hB,QAASmQ,EAAKlD,MAAMjN,QACpByT,KAAM,iBACNsD,iBAAkB,SAACjO,EAAWV,GAAZ,OAAuB+H,EAAKlD,MAAM8J,iBAAiBjO,EAAWV,UAO5FyF,EAAA7L,EAAA8L,cAAC6Q,GAAD,CACItK,QAAQ,kBACRzG,QAASoV,EACThG,YAAY,0CAKFoG,GAClB,OAAOtjB,EAAMgU,MAAM5T,KAAK+M,MAAMvM,OAAQ0iB,EAAIzf,uCAG9B,IAAAmS,EAAA5V,KACZ,IACI,IAAI0e,EAAO,KACP1e,KAAK+M,MAAM+Q,WACXY,EACI/Q,EAAA7L,EAAA8L,cAACuV,GAAD,CAAUC,WAAYpjB,KAAK+M,MAAMqW,cAIzC,IAWIC,EAXED,EAAapjB,KAAK+M,MAAMqW,WAAW5iB,OAAO,SAAAwO,GAAC,OAAI4G,EAAK0N,cAActU,KAAI1G,IAAI,SAAA0G,GAC5E,OACIrB,EAAA7L,EAAA8L,cAAC2V,GAAD,CACI7T,IAAKV,EAAE9O,GACPwE,UAAWsK,EACXc,SAAUd,IAAM4G,EAAK7I,MAAM0U,UAC3BlF,aAAc,SAAA7X,GAAS,OAAIkR,EAAK7I,MAAMyW,gBAAgB9e,QAM5D+e,EAAiB,GACnBlc,EAAuB,GAgD3B,OA9CIvH,KAAK+M,MAAM0U,YACX4B,EAAgBrjB,KAAK+M,MAAM0U,UAAUhe,MAAQ,oBAE7CggB,EAAehhB,KACXkL,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,SAAS6B,IAAI,QACxB/B,EAAA7L,EAAA8L,cAAC8V,GAAD,CACIjC,UAAWzhB,KAAK+M,MAAM0U,UACtBL,QAASphB,KAAK+M,MAAMqU,QACpB5gB,OAAQR,KAAK+M,MAAMvM,OACnB8I,YAAa,SAAClG,EAAME,GAAP,OAAiBsS,EAAK7I,MAAMzD,YAAYsM,EAAK7I,MAAM0U,UAAWre,EAAME,IACjFoe,QAAS,kBAAM9L,EAAK7I,MAAM2U,WAC1BC,gBAAiB,kBAAM/L,EAAK7I,MAAM4U,mBAClC3B,WAAY,SAACjb,EAAayC,GAAd,OAAmCoO,EAAK7I,MAAMiT,WAAWjb,EAAayC,QAK9FxH,KAAK2jB,gBAAgB3jB,KAAK+M,MAAM0U,UAAU7c,MAAO,MAC5C/D,QAAQ,SAAA+iB,GAAI,OAAIH,EAAehhB,KAAKmhB,KAEzCrc,EAAQvH,KAAK+M,MAAM0U,UAAUla,MAAMe,IAAI,SAAAub,GACnC,IAAMC,EAAY,GAclB,OAbAA,EAAUrhB,KACNkL,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,SAAS6B,IAAI,QACxB/B,EAAA7L,EAAA8L,cAACmW,GAAD,CACIpO,KAAMkO,EACNpB,WAAY,SAAA9M,GAAI,OAAIC,EAAK7I,MAAM0V,WAAW9M,IAC1CrM,YAAa,SAACJ,EAAQvH,EAAO2B,GAAhB,OAA0BsS,EAAK7I,MAAMzD,YAAYJ,EAAQvH,EAAO2B,QAKzFsS,EAAK+N,gBAAgBE,EAAEjf,MAAOif,EAAE3jB,IAC3BW,QAAQ,SAAA+iB,GAAI,OAAIE,EAAUrhB,KAAKmhB,KAGhCjW,EAAA7L,EAAA8L,cAAC6Q,GAAD,CACI/O,IAAKmU,EAAE3jB,GACPiU,QAAS0P,EAAEpgB,MAAQ,eACnBiK,QAASoW,EACThH,YAAY,OAOxBnP,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,kCACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,2DACV6Q,EACD/Q,EAAA7L,EAAA8L,cAAA,UAAQM,QAAS,kBAAM0H,EAAK7I,MAAMiX,iBAAlC,uBACCZ,GAELzV,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,+CACXF,EAAA7L,EAAA8L,cAAC6Q,GAAD,CACI/Q,QAAS+V,EACTtP,QAASkP,EACTzG,UAAoC,OAAzB5c,KAAK+M,MAAM0U,UACtB5E,MAAO,kBAAMjH,EAAK7I,MAAMyW,gBAAgB,SAE3Cjc,EACAvH,KAAKikB,sBAIpB,MAAOjV,GACLV,QAAQC,MAAMS,WArQ0BR,IAAMC,WA8QpDwQ,oLAEE,IACI,IAAIzL,EAA6B,KAWjC,OATIA,EADiC,IAAjCxT,KAAK+M,MAAMqW,WAAW3hB,OAElBkM,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,0DAIAF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,2DAKJF,EAAA7L,EAAA8L,cAACoQ,GAAD,CACItQ,QACIC,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,0CACAF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,+GAGAF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YACd2F,KAKnB,MAAOnF,GACLC,QAAQC,MAAMF,WA7BHG,IAAMC,WCtTRyV,oLAEb,IACI,OACIvW,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,aACV7N,KAAK+M,MAAMW,SAGtB,MAAOsB,GACLV,QAAQC,MAAMS,WATaR,IAAMC,WCKxB0V,oLACD,IAAAxa,EAAA3J,KACZ,IACI,IAAIM,EAAW,KACmB,IAA9BN,KAAK+M,MAAMjN,QAAQ2B,SACnBnB,EACIqN,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YACfF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,QAAf,gIAEIF,EAAA7L,EAAA8L,cAAA,KAAG8K,KAAK,0EAA0EzP,OAAO,SAAS0P,IAAI,uBAAtG,8BAIJhL,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,QACXF,EAAA7L,EAAA8L,cAAA,UAAQM,QAAS,kBAAMvE,EAAKoD,MAAMqX,uBAAlC,mBAMhB,IAAM1W,EACFC,EAAA7L,EAAA8L,cAACyW,GAAD,CACI3W,QACIC,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,cAAoCF,EAAA7L,EAAA8L,cAAA,kBACpCD,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YACfF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,iBADJ,4DAGAD,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,QACSF,EAAA7L,EAAA8L,cAAA,iBADT,YAEID,EAAA7L,EAAA8L,cAAA,UACID,EAAA7L,EAAA8L,cAAA,gDACAD,EAAA7L,EAAA8L,cAAA,6EACAD,EAAA7L,EAAA8L,cAAA,4CACAD,EAAA7L,EAAA8L,cAAA,mDAGPtN,EACDqN,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YACfF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,+EAQhB,OACIF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,mBACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,yBACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,0BACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,yBACVH,MAMvB,MAAOW,GACLC,QAAQC,MAAMF,WA7DcG,IAAMC,WCGzB6V,oLACD,IAAA3a,EAAA3J,KACZ,IACI,OACI2N,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,SAAS7N,KAAK+M,MAAMzE,IAAI7E,MAAQ,gBAEnDkK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,gBACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,SACIxK,KAAK,OACLqM,YAAY,WACZnM,MAAOtD,KAAK+M,MAAMzE,IAAI7E,KACtBkR,SAAU,SAAAC,GAAK,OAAIjL,EAAKoD,MAAMzD,YAAYK,EAAKoD,MAAMzE,IAAK,OAAQsM,EAAM3L,OAAO3F,WAGvFqK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YACfF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,oBACXF,EAAA7L,EAAA8L,cAAC0O,EAAD,CACIhU,IAAKtI,KAAK+M,MAAMzE,IAChBiL,KAAK,eAGb5F,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YACfF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,UAAQM,QAAS,kBAAMvE,EAAKoD,MAAMwX,QAAQ5a,EAAKoD,MAAMzE,OAArD,YACAqF,EAAA7L,EAAA8L,cAACkH,EAAD,CAAerU,KAAK,aAAagN,SAAU,kBAAM9D,EAAKoD,MAAMyX,UAAU7a,EAAKoD,MAAMzE,WAKnG,MAAO0G,GACLV,QAAQC,MAAMS,WAjCWR,IAAMC,WCCtBgW,oLACD,IAAA9a,EAAA3J,KACZ,IACI,IAAMmU,EACFxG,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,SAAf,cAIFH,EACFC,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,SACIxK,KAAK,OACLqM,YAAY,aACZnM,MAAOtD,KAAK+M,MAAM0U,UAAUhe,KAC5B2K,WAAYpO,KAAK+M,MAAMvM,OACvBmU,SAAU,SAAAC,GAAK,OAAIjL,EAAKoD,MAAMzD,YAAYK,EAAKoD,MAAM0U,UAAW,OAAQ7M,EAAM3L,OAAO3F,WAG7FqK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YACfF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,UAAQC,UAAW7N,KAAK+M,MAAMvM,OAAS,WAAa,GAAI0N,QAAS,kBAAMvE,EAAKoD,MAAM2X,WAAlF,iBACA/W,EAAA7L,EAAA8L,cAACkH,EAAD,CAAerU,KAAK,eAAegN,SAAU,kBAAM9D,EAAKoD,MAAM4X,sBAK1E,OACIhX,EAAA7L,EAAA8L,cAACkJ,EAAD,CAAU3C,QAASA,EAASzG,QAASA,IAE3C,MAAOsB,GACLV,QAAQC,MAAMS,WAhCgBR,IAAMC,WCF3BmW,oLACD,IAAAjb,EAAA3J,KACZ,IAII,IAHA,IAAM6kB,EAAajlB,EAAMgU,MAAM5T,KAAK+M,MAAMvM,OAAQR,KAAK+M,MAAM+X,SAASrhB,MAEhEgE,EAAO,GACJzC,EAAI,EAAGA,IAAMhF,KAAK+M,MAAM+X,SAASrd,KAAKhG,SAAUuD,EAAG,CACxD,IAAMsD,EAAMtI,KAAK+M,MAAM+X,SAASrd,KAAKzC,GAC/BvB,EAAO6E,EAAI7E,MAAQ,eACrBohB,GAAcjlB,EAAMgU,MAAM5T,KAAK+M,MAAMvM,OAAQiD,KAC7CgE,EAAKhF,KAAKkL,EAAA7L,EAAA8L,cAAA,OAAK8B,IAAKpH,EAAIpI,GAAI2N,UAAU,QAAQpK,IAOtD,OAJoB,IAAhBgE,EAAKhG,QACLgG,EAAKhF,KAAKkL,EAAA7L,EAAA8L,cAAA,OAAK8B,IAAI,QAAQ7B,UAAU,QAA3B,YAIVF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAW7N,KAAK+M,MAAM+C,SAAW,qBAAuB,YAAa5B,QAAS,kBAAMvE,EAAKoD,MAAMwP,aAAa5S,EAAKoD,MAAM+X,YACxHnX,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAW7N,KAAK+M,MAAM+X,SAASrhB,MAAQ,iBACrDgE,GAGX,MAAOuH,GACLV,QAAQC,MAAMS,WAxBoBR,IAAMC,WCa/BsW,wLACIC,GAAiB,IAAArb,EAAA3J,KAC9BU,EAASd,EAAMgU,MAAM5T,KAAK+M,MAAMvM,OAAQwkB,EAAMvhB,MAQlD,OANK/C,GACDskB,EAAMvd,KAAK5G,QAAQ,SAAAyH,GACf5H,EAASd,EAAMgU,MAAMjK,EAAKoD,MAAMvM,OAAQ8H,EAAI7E,OAAS/C,IAItDA,mCAGK,IAAAyL,EAAAnM,KACZ,IACI,IAAI0e,EAAO,KACP1e,KAAK+M,MAAM+Q,WACXY,EACI/Q,EAAA7L,EAAA8L,cAACqX,GAAD,CAAUC,UAAWllB,KAAK+M,MAAMmY,aAIxC,IAAMC,EAASnlB,KAAK+M,MAAMmY,UAAU1kB,OAAO,SAAA4kB,GAAC,OAAIjZ,EAAKkZ,aAAaD,KAAI9c,IAAI,SAAAwc,GACtE,OACInX,EAAA7L,EAAA8L,cAAC0X,GAAD,CACI5V,IAAKoV,EAAS5kB,GACd4kB,SAAUA,EACVtkB,OAAQ2L,EAAKY,MAAMvM,OACnBsP,SAAUgV,IAAa3Y,EAAKY,MAAM0U,UAClClF,aAAc,SAAA6I,GAAC,OAAIjZ,EAAKY,MAAMwY,eAAeH,QAKrDJ,EAAQ,KACZ,GAAIhlB,KAAK+M,MAAM0U,UAAW,CACtB,IAAM+D,EAAa,GAEnBA,EAAW/iB,KACPkL,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,SAAS6B,IAAI,QACxB/B,EAAA7L,EAAA8L,cAAC6X,GAAD,CACIhE,UAAWzhB,KAAK+M,MAAM0U,UACtBjhB,OAAQR,KAAK+M,MAAMvM,OACnBkkB,OAAQ,kBAAMvY,EAAKY,MAAM2X,UACzBC,eAAgB,kBAAMxY,EAAKY,MAAM4X,kBACjCrb,YAAa,SAACJ,EAAQvH,EAAO2B,GAAhB,OAA0B6I,EAAKY,MAAMzD,YAAYJ,EAAQvH,EAAO2B,QAKzFtD,KAAK+M,MAAM0U,UAAUha,KAAKjH,OAAO,SAAA6L,GAAC,OAAIzM,EAAMgU,MAAMzH,EAAKY,MAAMvM,OAAQ6L,EAAE5I,QAAO5C,QAAQ,SAAAwL,GAClFmZ,EAAW/iB,KACPkL,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,SAAS6B,IAAKrD,EAAEnM,IAC3ByN,EAAA7L,EAAA8L,cAAC8X,GAAD,CACIpd,IAAK+D,EACLkY,QAAS,SAAAjc,GAAG,OAAI6D,EAAKY,MAAMwX,QAAQjc,IACnCkc,UAAW,SAAAlc,GAAG,OAAI6D,EAAKY,MAAMyX,UAAUlc,IACvCgB,YAAa,SAACJ,EAAQ9F,EAAME,GAAf,OAAyB6I,EAAKY,MAAMzD,YAAYJ,EAAQ9F,EAAME,UAMjE,IAAtBkiB,EAAW/jB,QACX+jB,EAAW/iB,KACPkL,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,SAAS6B,IAAI,SACxB/B,EAAA7L,EAAA8L,cAACoQ,GAAD,CAAMtQ,QAASC,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,uCAK3BmX,EACIrX,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAC6Q,GAAD,CACI/Q,QAAS8X,EACTrR,QAASnU,KAAK+M,MAAM0U,UAAUhe,MAAQ,gBACtCmZ,UAAoC,OAAzB5c,KAAK+M,MAAM0U,UACtB5E,MAAO,kBAAM1Q,EAAKY,MAAMwY,eAAe,UAMvD,OACI5X,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,4BACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,2DACV6Q,EACD/Q,EAAA7L,EAAA8L,cAAA,UAAQM,QAAS,kBAAM/B,EAAKY,MAAM4Y,gBAAlC,uBACCR,GAELxX,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,+CACVmX,IAIf,MAAOhW,GACLV,QAAQC,MAAMS,WAhGmBR,IAAMC,WAyG7CwQ,oLAEE,IACI,IAAIzL,EAA6B,KAWjC,OATIA,EADgC,IAAhCxT,KAAK+M,MAAMmY,UAAUzjB,OAEjBkM,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,gDAIAF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,gEAKJF,EAAA7L,EAAA8L,cAACoQ,GAAD,CACItQ,QACIC,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,+DACAF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,4DACAF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YACd2F,KAKnB,MAAOnF,GACLC,QAAQC,MAAMF,WA3BHG,IAAMC,WClHRmX,oLACD,IAAAjc,EAAA3J,KACZ,IACI,IAAMmU,EACFxG,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,SAAf,kBAIFH,EACFC,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,SACIxK,KAAK,OACLqM,YAAY,aACZnM,MAAOtD,KAAK+M,MAAM0U,UAAUhe,KAC5B2K,WAAYpO,KAAK+M,MAAMvM,OACvBmU,SAAU,SAAAC,GAAK,OAAIjL,EAAKoD,MAAMzD,YAAY,OAAQsL,EAAM3L,OAAO3F,WAGvEqK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YACfF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,UAAQC,UAAW7N,KAAK+M,MAAMvM,OAAS,WAAa,GAAI0N,QAAS,kBAAMvE,EAAKoD,MAAM8Y,eAAlF,2BACAlY,EAAA7L,EAAA8L,cAAA,UAAQC,UAAW7N,KAAK+M,MAAMvM,OAAS,WAAa,GAAI0N,QAAS,kBAAMvE,EAAKoD,MAAM+Y,oBAAlF,6BACAnY,EAAA7L,EAAA8L,cAAA,UAAQC,UAAW7N,KAAK+M,MAAMvM,OAAS,WAAa,GAAI0N,QAAS,kBAAMvE,EAAKoD,MAAMgZ,iBAAlF,iBACApY,EAAA7L,EAAA8L,cAACkH,EAAD,CAAerU,KAAK,eAAegN,SAAU,kBAAM9D,EAAKoD,MAAMiZ,0BAK1E,OACIrY,EAAA7L,EAAA8L,cAACkJ,EAAD,CAAU3C,QAASA,EAASzG,QAASA,IAE3C,MAAOsB,GACLV,QAAQC,MAAMS,WAlCoBR,IAAMC,WCJ/BwX,oLACD,IAAAtc,EAAA3J,KACZ,IAII,IAHA,IAAMkmB,EAAatmB,EAAMgU,MAAM5T,KAAK+M,MAAMvM,OAAQR,KAAK+M,MAAMhN,MAAM0D,MAE7DnD,EAAW,GACR0E,EAAI,EAAGA,IAAMhF,KAAK+M,MAAMhN,MAAMO,SAASmB,SAAUuD,EAAG,CACzD,IAAMnF,EAAUG,KAAK+M,MAAMhN,MAAMO,SAAS0E,GACpCvB,EAAO5D,EAAQ4D,MAAQ,mBACzByiB,GAActmB,EAAMgU,MAAM5T,KAAK+M,MAAMvM,OAAQiD,KAC7CnD,EAASmC,KAAKkL,EAAA7L,EAAA8L,cAAA,OAAK8B,IAAK7P,EAAQK,GAAI2N,UAAU,QAAQpK,IAO9D,OAJwB,IAApBnD,EAASmB,QACTnB,EAASmC,KAAKkL,EAAA7L,EAAA8L,cAAA,OAAK8B,IAAI,QAAQ7B,UAAU,QAA3B,gBAIdF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAW7N,KAAK+M,MAAM+C,SAAW,qBAAuB,YAAa5B,QAAS,kBAAMvE,EAAKoD,MAAMwP,aAAa5S,EAAKoD,MAAMhN,SACxH4N,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAW7N,KAAK+M,MAAMhN,MAAM0D,MAAQ,iBAClDnD,GAGX,MAAO0O,GACLV,QAAQC,MAAMS,WAxBwBR,IAAMC,WCkBnC0X,4LACQpmB,GAAqB,IAAA4J,EAAA3J,KACtCU,EAASd,EAAMgU,MAAM5T,KAAK+M,MAAMvM,OAAQT,EAAM0D,MAQlD,OANK/C,GACDX,EAAMO,SAASO,QAAQ,SAAAhB,GACnBa,EAASd,EAAMgU,MAAMjK,EAAKoD,MAAMvM,OAAQX,EAAQ4D,OAAS/C,IAI1DA,mCAGK,IAAAyL,EAAAnM,KACZ,IACI,IAAI0e,EAAO,KACP1e,KAAK+M,MAAM+Q,WACXY,EACI/Q,EAAA7L,EAAA8L,cAACwY,GAAD,CAAUtmB,QAASE,KAAK+M,MAAMjN,WAItC,IA4DI2D,EA5DE4iB,EAAYrmB,KAAK+M,MAAMjN,QAAQU,OAAO,SAAAT,GAAK,OAAIoM,EAAKma,iBAAiBvmB,KAAQuI,IAAI,SAAAvI,GACnF,OACI4N,EAAA7L,EAAA8L,cAAC2Y,GAAD,CACI7W,IAAK3P,EAAMG,GACXH,MAAOA,EACPS,OAAQ2L,EAAKY,MAAMvM,OACnBsP,SAAU/P,IAAUoM,EAAKY,MAAM0U,UAC/BlF,aAAc,SAAApc,GAAG,OAAIgM,EAAKY,MAAMyZ,mBAAmBrmB,QAKzD6c,EAAQ,GAEd,GAAIhd,KAAK+M,MAAM0U,UAAW,CACtBzE,EAAMva,KACFkL,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,SAAS6B,IAAI,QACxB/B,EAAA7L,EAAA8L,cAAC6Y,GAAD,CACIhF,UAAWzhB,KAAK+M,MAAM0U,UACtBjhB,OAAQR,KAAK+M,MAAMvM,OACnBqlB,WAAY,kBAAM1Z,EAAKY,MAAM8Y,cAC7BC,gBAAiB,kBAAM3Z,EAAKY,MAAM+Y,mBAClCC,aAAc,kBAAM5Z,EAAKY,MAAMgZ,gBAC/Bzc,YAAa,SAAClG,EAAME,GAAP,OAAiB6I,EAAKY,MAAMzD,YAAY6C,EAAKY,MAAM0U,UAAWre,EAAME,IACjF0iB,mBAAoB,kBAAM7Z,EAAKY,MAAMiZ,0BAKjD,IAAM1lB,EAAWN,KAAK+M,MAAM0U,UAAUnhB,SAASE,OAAO,SAAAX,GAClD,OAAOD,EAAMgU,MAAMzH,EAAKY,MAAMvM,OAAQX,EAAQ4D,QAG1B,IAApBnD,EAASmB,OACTnB,EAASO,QAAQ,SAAAwL,GACb2Q,EAAMva,KACFkL,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,SAAS6B,IAAKrD,EAAEnM,IAC3ByN,EAAA7L,EAAA8L,cAAC4P,EAAD,CACI5U,UAAWyD,EACXkH,KAAM,gBACNzT,QAASqM,EAAKY,MAAMjN,QACpBwJ,YAAa,SAACJ,EAAQ9F,EAAME,GAAf,OAAyB6I,EAAKY,MAAMzD,YAAYJ,EAAQ9F,EAAME,IAC3E0N,WAAY,SAAC9H,EAAQ9F,EAAMG,GAAf,OAAyB4I,EAAKY,MAAMiE,WAAW9H,EAAQ9F,EAAMG,IACzEiT,YAAa,SAAC3W,EAAS6mB,GAAV,OAAsBva,EAAKY,MAAMyJ,YAAY3W,EAAS6mB,IACnEjQ,cAAe,SAAA5W,GAAO,OAAIsM,EAAKY,MAAM0J,cAAc5W,IACnDsW,YAAa,SAAAtW,GAAO,OAAIsM,EAAKY,MAAMoJ,YAAYtW,IAC/CwW,aAAc,SAACxW,EAASkF,GAAV,OAA0BoH,EAAKY,MAAMsJ,aAAaxW,EAASkF,UAMzFiY,EAAMva,KACFkL,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,SAAS6B,IAAI,SACxB/B,EAAA7L,EAAA8L,cAACoQ,GAAD,CAAMtQ,QAASC,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,2CAc/B,OAPI7N,KAAK+M,MAAM0U,aACXhe,EAAOzD,KAAK+M,MAAM0U,UAAUhe,QAExBA,EAAO,kBAKXkK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,gCACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,2DACV6Q,EACD/Q,EAAA7L,EAAA8L,cAAA,UAAQM,QAAS,kBAAM/B,EAAKY,MAAM4Z,oBAAlC,2BACCN,GAEL1Y,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,+CACXF,EAAA7L,EAAA8L,cAAC6Q,GAAD,CACI/Q,QAASsP,EACT7I,QAAS1Q,EACTmZ,UAAoC,OAAzB5c,KAAK+M,MAAM0U,UACtB5E,MAAO,kBAAM1Q,EAAKY,MAAMyZ,mBAAmB,WAK7D,MAAOxX,GACLV,QAAQC,MAAMS,WA5GwBR,IAAMC,WAqHlDwQ,oLAEE,IAAIzL,EAA6B,KAWjC,OATIA,EAD8B,IAA9BxT,KAAK+M,MAAMjN,QAAQ2B,OAEfkM,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,oDAIAF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,sFAKJF,EAAA7L,EAAA8L,cAACoQ,GAAD,CACItQ,QACIC,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,oDACAF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YACd2F,YAnBFhF,IAAMC,WCpIRmY,oLACD,IAAAjd,EAAA3J,KACZ,IACI,IAAM6mB,EAAY7mB,KAAK+M,MAAM0U,UAAUtc,IAAI3E,OAAO,SAAAmgB,GAAE,OAAIA,EAAGvb,SAErDI,EAAYqhB,EACbve,IAAI,SAAAqY,GAAE,OAAIA,EAAGnb,YACbshB,KAAK,MACLlmB,MAAM,UACNmmB,OAAO,SAACC,EAAiB1jB,GAItB,OAH8B,IAA1B0jB,EAAMjmB,QAAQuC,IACd0jB,EAAMvkB,KAAKa,GAER0jB,GACR,IACFnlB,KAAK,SAACC,EAAGC,GACN,MAAU,WAAND,GACQ,EAEF,WAANC,EACO,EAEJD,EAAEmlB,cAAcllB,KAE1B+kB,KAAK,MAENI,EAAiB,IACjBC,EAAuB,IACvBC,EAAoB,IAExB,GAAyB,IAArBP,EAAUplB,OAAc,CACxB,IAAM4lB,EAAsD,CAAEhS,IAAK,KAAMD,IAAK,MACxEkS,EAAqD,CAAEjS,IAAK,KAAMD,IAAK,MACvEmS,EAAqD,CAAElS,IAAK,KAAMD,IAAK,MAE7EyR,EAAUhmB,QAAQ,SAAA8f,GACd0G,EAAQhS,IAAsB,OAAhBgS,EAAQhS,IAAesL,EAAGlb,eAAiBxE,KAAKoU,IAAIgS,EAAQhS,IAAKsL,EAAGlb,gBAClF4hB,EAAQjS,IAAsB,OAAhBiS,EAAQjS,IAAeuL,EAAGlb,eAAiBxE,KAAKmU,IAAIiS,EAAQjS,IAAKuL,EAAGlb,gBAClF6hB,EAAOjS,IAAqB,OAAfiS,EAAOjS,IAAesL,EAAGjb,qBAAuBzE,KAAKoU,IAAIiS,EAAOjS,IAAKsL,EAAGjb,sBACrF4hB,EAAOlS,IAAqB,OAAfkS,EAAOlS,IAAeuL,EAAGjb,qBAAuBzE,KAAKmU,IAAIkS,EAAOlS,IAAKuL,EAAGjb,sBACrF6hB,EAAOlS,IAAqB,OAAfkS,EAAOlS,IAAesL,EAAGhb,kBAAoB1E,KAAKoU,IAAIkS,EAAOlS,IAAKsL,EAAGhb,mBAClF4hB,EAAOnS,IAAqB,OAAfmS,EAAOnS,IAAeuL,EAAGhb,kBAAoB1E,KAAKmU,IAAImS,EAAOnS,IAAKuL,EAAGhb,qBAGtFuhB,EAAiBG,EAAQhS,MAAQgS,EAAQjS,IAAOiS,EAAQhS,IAAejU,WAAaimB,EAAQhS,IAAM,MAAQgS,EAAQjS,IAClH+R,EAAuBG,EAAOjS,MAAQiS,EAAOlS,IAAOkS,EAAOjS,IAAejU,WAAakmB,EAAOjS,IAAM,MAAQiS,EAAOlS,IACnHgS,EAAoBG,EAAOlS,MAAQkS,EAAOnS,IAAOmS,EAAOlS,IAAejU,WAAammB,EAAOlS,IAAM,MAAQkS,EAAOnS,IAGpH,IAAMjB,EACFxG,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,SAAf,UAIFH,EACFC,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,SACIxK,KAAK,OACLqM,YAAY,aACZnM,MAAOtD,KAAK+M,MAAM0U,UAAUhe,KAC5B2K,WAAYpO,KAAK+M,MAAMvM,OACvBmU,SAAU,SAAAC,GAAK,OAAIjL,EAAKoD,MAAMzD,YAAY,OAAQsL,EAAM3L,OAAO3F,WAGvEqK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YACfF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,UAAUe,MAAO,CAAEgC,QAAuB,KAAdpL,EAAmB,QAAU,SACpEmI,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAf,cAEJF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACVrI,GAELmI,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAf,mBAEJF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,SACXF,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAaF,EAAA7L,EAAA8L,cAAA,qBAC5BD,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAaF,EAAA7L,EAAA8L,cAAA,qBAC5BD,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAaF,EAAA7L,EAAA8L,cAAA,sBAEhCD,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAcqZ,GAC7BvZ,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAcsZ,GAC7BxZ,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAcuZ,KAGrCzZ,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YACfF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,UAAQC,UAAW7N,KAAK+M,MAAMvM,OAAS,WAAa,GAAI0N,QAAS,kBAAMvE,EAAKoD,MAAMya,UAAlF,gBACA7Z,EAAA7L,EAAA8L,cAAA,UAAQC,UAAW7N,KAAK+M,MAAMvM,OAAS,WAAa,GAAI0N,QAAS,kBAAMvE,EAAKoD,MAAM0a,YAAlF,YACA9Z,EAAA7L,EAAA8L,cAACkH,EAAD,CAAerU,KAAK,eAAegN,SAAU,kBAAM9D,EAAKoD,MAAM2a,mBAK1E,OACI/Z,EAAA7L,EAAA8L,cAACkJ,EAAD,CAAU3C,QAASA,EAASzG,QAASA,IAE3C,MAAOsB,GACLV,QAAQC,MAAMS,WArGaR,IAAMC,WCHxBkZ,oLACD,IAAAhe,EAAA3J,KACZ,IAII,IAHA,IAAM4nB,EAAahoB,EAAMgU,MAAM5T,KAAK+M,MAAMvM,OAAQR,KAAK+M,MAAMuT,MAAM7c,MAE7D0B,EAAM,GACHH,EAAI,EAAGA,IAAMhF,KAAK+M,MAAMuT,MAAMnb,IAAI1D,SAAUuD,EAAG,CACpD,IAAM2b,EAAK3gB,KAAK+M,MAAMuT,MAAMnb,IAAIH,GAC5BvB,EAAOkd,EAAGld,MAAQ,aAClBkd,EAAGtb,SACH5B,GAAQ,KAAOkd,EAAGtb,OAAS,MAE3BuiB,GAAchoB,EAAMgU,MAAM5T,KAAK+M,MAAMvM,OAAQiD,KAC7C0B,EAAI1C,KAAKkL,EAAA7L,EAAA8L,cAAA,OAAK8B,IAAKiR,EAAGzgB,GAAI2N,UAAU,QAAQpK,IAOpD,OAJmB,IAAf0B,EAAI1D,QACJ0D,EAAI1C,KAAKkL,EAAA7L,EAAA8L,cAAA,OAAK8B,IAAI,QAAQ7B,UAAU,QAA3B,WAITF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAW7N,KAAK+M,MAAM+C,SAAW,qBAAuB,YAAa5B,QAAS,kBAAMvE,EAAKoD,MAAMwP,aAAa5S,EAAKoD,MAAMuT,SACxH3S,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAW7N,KAAK+M,MAAMuT,MAAM7c,MAAQ,iBAClD0B,GAGX,MAAO6J,GACLV,QAAQC,MAAMS,WA3BiBR,IAAMC,WCc5BoZ,qLACCvH,GAAc,IAAA3W,EAAA3J,KACxBU,EAASd,EAAMgU,MAAM5T,KAAK+M,MAAMvM,OAAQ8f,EAAM7c,MAQlD,OANK/C,GACD4f,EAAMnb,IAAItE,QAAQ,SAAA8f,GACdjgB,EAASd,EAAMgU,MAAMjK,EAAKoD,MAAMvM,OAAQmgB,EAAGld,OAAS/C,IAIrDA,mCAGK,IAAAyL,EAAAnM,KACZ,IACI,IAAI0e,EAAO,KACP1e,KAAK+M,MAAM+Q,WACXY,EACI/Q,EAAA7L,EAAA8L,cAACka,GAAD,CAAU1G,QAASphB,KAAK+M,MAAMqU,WAItC,IAwEI3d,EAxEE2d,EAAUphB,KAAK+M,MAAMqU,QAAQ5gB,OAAO,SAAAb,GAAC,OAAIwM,EAAK4b,UAAUpoB,KAAI2I,IAAI,SAAA3I,GAClE,OACIgO,EAAA7L,EAAA8L,cAACoa,GAAD,CACItY,IAAK/P,EAAEO,GACPogB,MAAO3gB,EACPa,OAAQ2L,EAAKY,MAAMvM,OACnBsP,SAAUnQ,IAAMwM,EAAKY,MAAM0U,UAC3BlF,aAAc,SAAA+D,GAAK,OAAInU,EAAKY,MAAMwU,YAAYjB,QAKpD2H,EAA6B,GAC7BC,EAA+B,GAErC,GAAIloB,KAAK+M,MAAM0U,UAAW,CACtBwG,EAAYxlB,KACRkL,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,SAAS6B,IAAI,QACxB/B,EAAA7L,EAAA8L,cAACua,GAAD,CACI1G,UAAWzhB,KAAK+M,MAAM0U,UACtBjhB,OAAQR,KAAK+M,MAAMvM,OACnBgnB,MAAO,kBAAMrb,EAAKY,MAAMya,SACxBC,QAAS,kBAAMtb,EAAKY,MAAM0a,WAC1Bne,YAAa,SAAClG,EAAME,GAAP,OAAiB6I,EAAKY,MAAMzD,YAAY6C,EAAKY,MAAM0U,UAAWre,EAAME,IACjFokB,YAAa,kBAAMvb,EAAKY,MAAM2a,mBAK1C,IAAMviB,EAAMnF,KAAK+M,MAAM0U,UAAUtc,IAAI3E,OAAO,SAAAmgB,GACxC,OAAO/gB,EAAMgU,MAAMzH,EAAKY,MAAMvM,OAAQmgB,EAAGld,QAGvCojB,EAAY1hB,EAAI3E,OAAO,SAAAmgB,GAAE,OAAIA,EAAGvb,SACtCyhB,EAAUhmB,QAAQ,SAAAunB,GACdH,EAAYxlB,KACRkL,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,SAAS6B,IAAK0Y,EAASloB,IAClCyN,EAAA7L,EAAA8L,cAAC0P,EAAD,CACI1U,UAAWwf,EACX7U,KAAM,OACNjK,YAAa,SAACqX,EAAIvd,EAAME,GAAX,OAAqB6I,EAAKY,MAAMzD,YAAYqX,EAAIvd,EAAME,IACnE0N,WAAY,SAAC2P,EAAIvd,EAAMG,GAAX,OAAqB4I,EAAKY,MAAMiE,WAAW2P,EAAIvd,EAAMG,IACjEiV,SAAU,SAAAmI,GAAE,OAAIxU,EAAKY,MAAMyL,SAASmI,UAMhCxb,EAAI3E,OAAO,SAAAmgB,GAAE,OAAKA,EAAGvb,SAC7BvE,QAAQ,SAAAwnB,GAChBH,EAAczlB,KACVkL,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,SAAS6B,IAAK2Y,EAAWnoB,IACpCyN,EAAA7L,EAAA8L,cAAC0P,EAAD,CACI1U,UAAWyf,EACX9U,KAAM,OACNjK,YAAa,SAACqX,EAAIvd,EAAME,GAAX,OAAqB6I,EAAKY,MAAMzD,YAAYqX,EAAIvd,EAAME,IACnE0N,WAAY,SAAC2P,EAAIvd,EAAMG,GAAX,OAAqB4I,EAAKY,MAAMiE,WAAW2P,EAAIvd,EAAMG,IACjEiV,SAAU,SAAAmI,GAAE,OAAIxU,EAAKY,MAAMyL,SAASmI,UAM3B,IAArBkG,EAAUplB,QACVwmB,EAAYxlB,KACRkL,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,SAAS6B,IAAI,SACxB/B,EAAA7L,EAAA8L,cAACoQ,GAAD,CAAMtQ,QAASC,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,sCAW/B,OAJI7N,KAAK+M,MAAM0U,YACXhe,EAAOzD,KAAK+M,MAAM0U,UAAUhe,MAAQ,iBAIpCkK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,wBACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,2DACV6Q,EACD/Q,EAAA7L,EAAA8L,cAAA,UAAQM,QAAS,kBAAM/B,EAAKY,MAAMub,aAAlC,mBACClH,GAELzT,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,+CACXF,EAAA7L,EAAA8L,cAAC6Q,GAAD,CACI/Q,QAASua,EACT9T,QAAS1Q,EACTmZ,UAAoC,OAAzB5c,KAAK+M,MAAM0U,UACtB5E,MAAO,kBAAM1Q,EAAKY,MAAMwU,YAAY,OACpC7E,QAAS1c,KAAK+M,MAAM0U,YAExB9T,EAAA7L,EAAA8L,cAAC6Q,GAAD,CACI/Q,QAASwa,EACT/T,QAAQ,eACRyI,WAAW,EACXF,OAAiC,IAAzBwL,EAAczmB,WAKxC,MAAOuN,GACLV,QAAQC,MAAMS,WA5HiBR,IAAMC,WAqI3CwQ,oLAEE,IACI,IAAIzL,EAA6B,KAWjC,OATIA,EAD8B,IAA9BxT,KAAK+M,MAAMqU,QAAQ3f,OAEfkM,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,mDAIAF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,kDAKJF,EAAA7L,EAAA8L,cAACoQ,GAAD,CACItQ,QACIC,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,2DACAF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,sDACAF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YACd2F,KAKnB,MAAOnF,GACLC,QAAQC,MAAMF,WA3BHG,IAAMC,mDCnJR8Z,iLAMHvZ,GACVA,EAAEC,kBACFjP,KAAK+M,MAAMzD,aAAatJ,KAAK+M,MAAMyb,0CAGvB,IAAA7e,EAAA3J,KACZ,IACI,IAAI4O,EAAQ,WACR5O,KAAK+M,MAAMyb,UACX5Z,GAAS,YAET5O,KAAK+M,MAAMqB,WACXQ,GAAS,aAGb,IAAI6Z,EAAQ,KAOZ,OANIzoB,KAAK+M,MAAM2b,YACXD,EACI9a,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,QAAQC,IAAK9N,KAAK+M,MAAMyb,QAAUA,KAAUG,KAAW3a,IAAI,WAK9EL,EAAA7L,EAAA8L,cAAA,OAAKC,UAAWe,EAAOV,QAAS,SAAAc,GAAC,OAAIrF,EAAKuG,MAAMlB,KAC3CyZ,EACD9a,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,kBAAkB7N,KAAK+M,MAAM6E,QAItD,MAAOvD,GAEL,OADAC,QAAQC,MAAMF,GACP,aArCmBG,IAAMC,WAAvB8Z,GACH7Z,aAAe,CACzBga,WAAW,EACXta,UAAU,OCLGwa,oLAOD,IAAAjf,EAAA3J,KACZ,IACI,IAAI4O,EAAQ5O,KAAK+M,MAAM8b,KAAO,gBAAkB,iBAC5C7oB,KAAK+M,MAAMqB,WACXQ,GAAS,aAMb,IAHA,IAAMka,EAAc9oB,KAAK+M,MAAM+b,YAAc9oB,KAAK+M,MAAM+b,YAAc9oB,KAAK+M,MAAMqC,QAAQ3N,OACnFsnB,EAAW9nB,KAAK+nB,KAAKhpB,KAAK+M,MAAMqC,QAAQ3N,OAASqnB,GACjDG,EAA+B,GAC5BjkB,EAAI,EAAGA,IAAM+jB,IAAY/jB,EAC9BikB,EAAYxmB,KAAK,IAGrBzC,KAAK+M,MAAMqC,QAAQvO,QAAQ,SAAA0O,GACvB,IAAMrF,EAAQP,EAAKoD,MAAMqC,QAAQrO,QAAQwO,GACnC2Z,EAAWjoB,KAAKC,MAAMgJ,EAAQ4e,GACxBG,EAAYC,GACpBzmB,KACAkL,EAAA7L,EAAA8L,cAACub,GAAD,CACIzZ,IAAKH,EAAOrP,GACZqP,OAAQA,EACRO,SAAUP,EAAOrP,KAAOyJ,EAAKoD,MAAMuC,WACnCrM,MAAO6lB,EACP3Z,OAAQ,SAACD,GAAD,OAAsBvF,EAAKoD,MAAMoC,OAAOD,SAK5D,IAAMka,EAAcH,EAAY3gB,IAAI,SAAA+gB,GAChC,IAAMnf,EAAQ+e,EAAYloB,QAAQsoB,GAClC,OAAO1b,EAAA7L,EAAA8L,cAAA,OAAK8B,IAAKxF,GAAQmf,KAG7B,OACI1b,EAAA7L,EAAA8L,cAAA,OAAKC,UAAWe,GACXwa,GAGX,MAAO/a,GAEL,OADAC,QAAQC,MAAMF,GACP,aAhDmBG,IAAMC,WAAvBma,GACHla,aAAe,CACzBma,MAAM,EACNza,UAAU,EACV0a,YAAa,UAwDfQ,iLACYta,GACVA,EAAEC,kBACGjP,KAAK+M,MAAMwC,OAAOnB,UACnBpO,KAAK+M,MAAMoC,OAAOnP,KAAK+M,MAAMwC,OAAOrP,qCAI5B,IAAAiM,EAAAnM,KACZ,IACI,IAAM6H,EAAQ,wBAA0B7H,KAAK+M,MAAM9J,MAAQ,YAEvD2L,EAAQ,SAQZ,OAPI5O,KAAK+M,MAAM+C,WACXlB,GAAS,aAET5O,KAAK+M,MAAMwC,OAAOnB,WAClBQ,GAAS,aAITjB,EAAA7L,EAAA8L,cAAA,OAAK8B,IAAK1P,KAAK+M,MAAMwC,OAAOrP,GAAI2N,UAAWe,EAAOA,MAAO,CAAE/G,MAAOA,GAAS8H,MAAO3P,KAAK+M,MAAMwC,OAAO9O,KAAMyN,QAAS,SAAAc,GAAC,OAAI7C,EAAK+D,MAAMlB,KAC9HhP,KAAK+M,MAAMwC,OAAO9O,MAG7B,MAAO4N,GAEL,OADAC,QAAQC,MAAMF,GACP,aA3BUG,IAAMC,sCC3Dd8a,0GAKOC,GACpB,IAAMC,EAAqB,GACvBC,EAAoB,EAExBF,EAAQ3oB,QAAQ,SAAAqI,GACEA,EAAOtI,MAAM,SACrBC,QAAQ,SAAA8oB,GACNA,IACAJ,EAAcK,eAAeD,EAAMF,GACnCC,EAAYzoB,KAAKmU,IAAIsU,EAAWC,EAAKloB,aAKjD8nB,EAAcE,MAAQA,EACtBF,EAAcG,UAAYA,yCAGAC,EAAcF,GACxCE,EAAOE,OAAOC,aAAa,EAAG,GAAKH,EAAOE,OAAOC,aAAa,GAE9D,IAH4D,IAAAC,EAAA,SAGnD7f,GACL,IAAM8f,EAAOL,EAAKM,OAAO/f,EAAQ,EAAG,GAC9BggB,EAAOP,EAAKM,OAAO/f,EAAO,GAE5BigB,EAAOV,EAAMrpB,KAAK,SAAAuH,GAAC,OAAIA,EAAEqiB,OAASA,IACjCG,IACDA,EAAO,CACHH,KAAMA,EACNI,KAAM,IAEVX,EAAMhnB,KAAK0nB,IAGf,IAAIC,EAAOD,EAAKC,KAAKhqB,KAAK,SAAAuH,GAAC,OAAIA,EAAEuiB,OAASA,IACrCE,IACDA,EAAO,CACHF,KAAMA,EACNjnB,MAAO,GAEXknB,EAAKC,KAAK3nB,KAAK2nB,IAGnBA,EAAKnnB,OAAS,GAtBTiH,EAAQ,EAAGA,IAAUyf,EAAKloB,SAAUyI,EAAO6f,EAA3C7f,oCA0BUmgB,GAKnB,IAJA,IAAMC,EAAyC,GAE3CC,EAAW,EAEPD,EAAM7oB,OAAS4oB,GAAqBE,EAHpB,KAGiD,CACrE,IAAMZ,EAAOJ,EAAciB,cAC3B,GAAIb,IAASW,EAAMhiB,IAAI,SAAAmiB,GAAC,OAAIA,EAAEd,OAAMppB,SAASopB,IAASA,EAAKloB,QAAU8nB,EAAcG,UAAW,CAC1F,IAAMgB,EAAMnB,EAAcmB,IAAIf,GAC9BW,EAAM7nB,KAAK,CAAEknB,OAAMe,aAEnBH,GAAY,EAIpB,OAAOD,wCAMP,IAFA,IAAIX,EAAOE,OAAOC,aAAa,EAAG,GADTa,EAAA,WAIrB,IAAMX,EAAOL,EAAKM,OAAON,EAAKloB,OAAS,EAAG,GAEpC0oB,EAAOZ,EAAcE,MAAMrpB,KAAK,SAAAuH,GAAC,OAAIA,EAAEqiB,OAASA,IACtD,IAAIG,EAyBA,OAAAS,EAAO,MAxBP,IAAIC,EAAa,GACjBV,EAAKC,KAAKvpB,QAAQ,SAAAupB,GACdS,GAAcT,EAAKF,KAAKY,OAAOV,EAAKnnB,SAGxC,IAAMiH,EAAQjJ,KAAKC,MAAMD,KAAKE,SAAW0pB,EAAWppB,QAChDyoB,EAAOW,EAAW3gB,GACtB,GAAIggB,IAASL,OAAOC,aAAa,GAE7B,OAAAc,EADAjB,EAAOA,EAAKM,OAAO,IAGnB,GAAwB,IAApBrqB,EAAMmrB,UAAiB,CAER,CAAC,MAAO,MAAO,KAAM,SAAU,KAAM,MAAO,MACpDlqB,QAAQ,SAAAR,GACX,GAAIA,EAAEE,SAAS2pB,GAAO,CAClB,IAAMllB,EAAI/D,KAAKC,MAAMD,KAAKE,SAAWd,EAAEoB,QACvCyoB,EAAO7pB,EAAE2E,MAIrB2kB,GAAQO,KA1BP,KAAAc,EAAAL,IAAA,qBAAAK,EAAA,OAAAA,EAAAJ,+BAkCEnqB,GACfA,EAAOopB,OAAOC,aAAa,EAAG,GAAKrpB,EAAOopB,OAAOC,aAAa,GAG9D,IADA,IAAMmB,EAAmB,GAHYC,EAAA,SAI5BlmB,GACL,IAAMglB,EAAOvpB,EAAKwpB,OAAOjlB,EAAI,EAAG,GAC1BmmB,EAAK1qB,EAAKuE,GAEV2kB,EAAOJ,EAAcE,MAAMrpB,KAAK,SAAAiM,GAAC,OAAIA,EAAE2d,OAASA,IACtD,GAAIL,EAAM,CACN,IAAMyB,EAAKzB,EAAKS,KAAKhqB,KAAK,SAAAglB,GAAC,OAAIA,EAAE8E,OAASiB,IAC1C,GAAIC,EAAI,CACJ,IAAMC,EAAW1B,EAAKS,KAAKrD,OAAO,SAAC3R,EAAK9R,GAAN,OAAgBrC,KAAKmU,IAAIA,EAAK9R,EAAML,QAAQ,GACxEynB,EAAMU,EAAGnoB,MAAQooB,EACvBJ,EAAOxoB,KAAKioB,QAEZO,EAAOxoB,KAAK,KAZfuC,EAAI,EAAGA,IAAMvE,EAAKgB,SAAUuD,EAAGkmB,EAA/BlmB,GAiBT,OAAOimB,EAAOlE,OAAO,SAACuE,EAAKhoB,GAAN,OAAgBgoB,EAAMhoB,GAAO,GAAK2nB,EAAOxpB,gBAhIjD8nB,GAEFE,MAAqB,GAFnBF,GAGFG,UAAoB,MCSlB6B,eACjB,SAAAA,EAAYxe,GAAc,IAAApD,EAAA,OAAAqD,OAAAC,EAAA,EAAAD,CAAAhN,KAAAurB,IACtB5hB,EAAAqD,OAAAE,EAAA,EAAAF,CAAAhN,KAAAgN,OAAAG,EAAA,EAAAH,CAAAue,GAAAne,KAAApN,KAAM+M,KAEDM,MAAQ,CACTmc,QAAS,GACTgC,OAAQ,IALU7hB,8EAUtB,MAAO,CACH,YACA,UACA,WACA,SACA,aACA,YACA,WACA,UACA,WACA,QACA,SACA,QACA,UACA,UACA,SACA,SACA,QACA,WACA,QACA,YACA,YACA,QACA,UACA,WACA,UACA,SACA,SACA,SACA,UACA,aACA,aACA,QACA,UACA,QACA,UACA,WACA,YACA,UACA,aACA,UACA,WACA,UACA,SACA,UACA,QACA,SACA,UACA,UACA,UACA,OACA,UACA,QACA,UACA,6CAKJ,MAAO,CACH,CACIlG,KAAM,WACN+B,UAAW,CAAC,WAAY,QAAS,YAErC,CACI/B,KAAM,WACN+B,UAAW,CAAC,QAAS,SAAU,YAEnC,CACI/B,KAAM,SACN+B,UAAW,CAAC,UAAW,UAAW,UAEtC,CACI/B,KAAM,SACN+B,UAAW,CAAC,WAAY,SAAU,WAEtC,CACI/B,KAAM,MACN+B,UAAW,CAAC,aAAc,UAAW,2FAKvBimB,0FACCC,MAAM,gBAAkBD,EAAW,sBAApDE,kBAC+BA,EAASlrB,cAA9CT,KAAKqN,MAAMmc,QAAQiC,UACnBzrB,KAAKuN,SAAS,CACVic,QAASxpB,KAAKqN,MAAMmc,oJAILiC,UACZzrB,KAAKqN,MAAMmc,QAAQiC,GAC1BzrB,KAAKuN,SAAS,CACVic,QAASxpB,KAAKqN,MAAMmc,4CAIVoC,GAAoB,IAAAzf,EAAAnM,KAC5B6rB,EAAS7rB,KAAK8rB,aAAa1rB,KAAK,SAAAT,GAAC,OAAIA,EAAE8D,OAASmoB,IAClDC,GACA7rB,KAAKuN,SAAS,CACVic,QAAS,GACTgC,OAAQ,IACT,WACCK,EAAOrmB,UAAU3E,QAAQ,SAAAkrB,GACrB5f,EAAK6f,YAAYD,wCAU7B,IAJa,IAAA9b,EAAAjQ,KACPwF,EAAYxF,KAAKisB,eAEjBxK,EAAsB,GACA,IAArBA,EAAUhgB,QAAc,CAC3B,IACMsqB,EAAOvmB,EADHvE,KAAKC,MAAMD,KAAKE,SAAWqE,EAAU/D,SAE1CggB,EAAUlhB,SAASwrB,IACpBtK,EAAUhf,KAAKspB,GAIvB/rB,KAAKuN,SAAS,CACVic,QAAS,GACTgC,OAAQ,IACT,WACC/J,EAAU5gB,QAAQ,SAAAkrB,GACd9b,EAAK+b,YAAYD,0CAKV,IAAAnW,EAAA5V,KACTwpB,EAAoB,GAC1Bxc,OAAOkf,KAAKlsB,KAAKqN,MAAMmc,SAAS3oB,QAAQ,SAAA6O,GACpC,IAAM5B,EAAM8H,EAAKvI,MAAMmc,QAAQ9Z,GAC/B8Z,EAAQ/mB,KAAKqL,KAEjByb,GAAc4C,UAAU3C,GACxBxpB,KAAKuN,SAAS,CACVie,OAAQjC,GAAc6C,SAAS,GAAG9jB,IAAI,SAAAmiB,GAAC,OAAIA,EAAEd,yCAKjD3pB,KAAKuN,SAAS,CACVic,QAAS,GACTgC,OAAQ,sCAIA,IAAAtV,EAAAlW,KACNqsB,EAAgBrsB,KAAK8rB,aAAaxjB,IAAI,SAAA3I,GACxC,MAAO,CACHO,GAAIP,EAAE8D,KACNhD,KAAMd,EAAE8D,QAIZ6oB,EAAiB,GACrBtsB,KAAK8rB,aAAajrB,QAAQ,SAAAlB,GACLqN,OAAOkf,KAAKhW,EAAK7I,MAAMmc,SAAS3nB,OAAOilB,KAAK,QAC7CnnB,EAAE6F,UAAU3D,OAAOilB,KAAK,QAEpCwF,EAAiB3sB,EAAE8D,QAI3B,IAAI8oB,EAAoBvf,OAAOkf,KAAKlsB,KAAKqN,MAAMmc,SAAS3nB,OAAOilB,KAAK,MAC1C,KAAtByF,IACAA,EAAoB,QAGxB,IAAM/mB,EAAYxF,KAAKisB,eAClB3jB,IAAI,SAAAyjB,GACD,IAAMS,EAAaxf,OAAOkf,KAAKhW,EAAK7I,MAAMmc,SAASjpB,SAASwrB,GAC5D,OACIpe,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,SAAS6B,IAAKqc,GACzBpe,EAAA7L,EAAA8L,cAAC6e,GAAD,CACI7a,MAAOma,EACPvD,QAASgE,EACT9D,WAAW,EACXpf,YAAa,SAAAhG,GAAK,OAAIA,EAAQ4S,EAAK8V,YAAYD,GAAQ7V,EAAKwW,eAAeX,SAMzFY,EAAgB3f,OAAOkf,KAAKlsB,KAAKqN,MAAMmc,SAAS/nB,OAAS,EACzDmrB,EAAaD,GAAiB3sB,KAAKqN,MAAMme,OAAO/pB,OAAS,EAEzD+pB,EAAS,GACXxrB,KAAKqN,MAAMme,OAAO/pB,OAAS,GAC3B+pB,EAAO/oB,KACHkL,EAAA7L,EAAA8L,cAAA,OAAK8B,IAAI,MAAM7B,UAAU,aAGjC,IAAK,IAAI7I,EAAI,EAAGA,IAAMhF,KAAKqN,MAAMme,OAAO/pB,SAAUuD,EAC9CwmB,EAAO/oB,KACHkL,EAAA7L,EAAA8L,cAAA,OAAK8B,IAAK1K,EAAG6I,UAAU,WAClB7N,KAAKqN,MAAMme,OAAOxmB,GAAGrE,gBAKlC,OACIgN,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,WACAF,EAAA7L,EAAA8L,cAACif,GAAD,CACIzd,QAASid,EACT/c,WAAYgd,EACZnd,OAAQ,SAAAD,GAAQ,OAAIgH,EAAK4W,UAAU5d,MAEvCvB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YACfF,EAAA7L,EAAA8L,cAACmF,EAAD,CACItS,KAAM,uBAAyB8rB,EAC/B7e,QACIC,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,mEACVrI,KAIbmI,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YACfF,EAAA7L,EAAA8L,cAACiH,EAAD,CACIhG,SAAU,CACNlB,EAAA7L,EAAA8L,cAAA,UAAQ8B,IAAI,WAAW7B,UAAW8e,EAAgB,GAAK,WAAYze,QAAS,kBAAMgI,EAAKkW,aAAvF,iBACAze,EAAA7L,EAAA8L,cAAA,UAAQ8B,IAAI,QAAQ7B,UAAW+e,EAAa,GAAK,WAAY1e,QAAS,kBAAMgI,EAAK6W,UAAjF,SACApf,EAAA7L,EAAA8L,cAAA,UAAQ8B,IAAI,SAASxB,QAAS,kBAAMgI,EAAK/U,WAAzC,qBAGRwM,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,mBACV2d,WApPuBhd,IAAMC,WCP7Bue,eACjB,SAAAA,EAAYjgB,GAAc,IAAApD,EAAA,OAAAqD,OAAAC,EAAA,EAAAD,CAAAhN,KAAAgtB,IACtBrjB,EAAAqD,OAAAE,EAAA,EAAAF,CAAAhN,KAAAgN,OAAAG,EAAA,EAAAH,CAAAggB,GAAA5f,KAAApN,KAAM+M,KAEDM,MAAQ,CACTme,OAAQ,CACJyB,KAAM,GACNC,OAAQ,GACRC,QAAS,KAPKxjB,kHAYHvG,8FACIsoB,MAAM,gBAAkBtoB,EAAO,sBAAhDuoB,kBACcA,EAASlrB,cAAvB2sB,SAEN7D,GAAc4C,UAAU,CAACiB,IACnBtoB,EAAQykB,GAAc6C,SAAS,IAAI9jB,IAAI,SAAAtD,GAAC,OAAIA,EAAE2kB,OAAM9nB,OAE1D7B,KAAKqN,MAAMme,OAAOpoB,GAAQ0B,EAC1B9E,KAAKuN,SAAS,CACVie,OAAQxrB,KAAKqN,MAAMme,8IAMvB,IAFY,IAAArf,EAAAnM,KACNitB,EAAO,GACJjoB,EAAI,EAAGA,IAAMhF,KAAKqN,MAAMme,OAAOyB,KAAKxrB,SAAUuD,EACnDioB,EAAKxqB,KACDkL,EAAA7L,EAAA8L,cAAA,OAAK8B,IAAK1K,EAAG6I,UAAU,WAClB7N,KAAKqN,MAAMme,OAAOyB,KAAKjoB,GAAGrE,gBAMvC,IADA,IAAMusB,EAAS,GACNloB,EAAI,EAAGA,IAAMhF,KAAKqN,MAAMme,OAAO0B,OAAOzrB,SAAUuD,EACrDkoB,EAAOzqB,KACHkL,EAAA7L,EAAA8L,cAAA,OAAK8B,IAAK1K,EAAG6I,UAAU,WAClB7N,KAAKqN,MAAMme,OAAO0B,OAAOloB,GAAGrE,gBAMzC,IADA,IAAMwsB,EAAU,GACPnoB,EAAI,EAAGA,IAAMhF,KAAKqN,MAAMme,OAAO2B,QAAQ1rB,SAAUuD,EACtDmoB,EAAQ1qB,KACJkL,EAAA7L,EAAA8L,cAAA,OAAK8B,IAAK1K,EAAG6I,UAAU,WAClB7N,KAAKqN,MAAMme,OAAO2B,QAAQnoB,GAAGrE,gBAK1C,OACIgN,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,QACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,eACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,OACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,oCACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,cACAF,EAAA7L,EAAA8L,cAAA,UAAQM,QAAS,kBAAM/B,EAAKigB,SAAS,UAArC,YACCa,GAELtf,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,oCACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,gBACAF,EAAA7L,EAAA8L,cAAA,UAAQM,QAAS,kBAAM/B,EAAKigB,SAAS,YAArC,YACCc,GAELvf,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,oCACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,YACAF,EAAA7L,EAAA8L,cAAA,UAAQM,QAAS,kBAAM/B,EAAKigB,SAAS,aAArC,YACCe,aAvEW3e,IAAMC,WCZxCuE,GAAW,IAAIC,IAASC,UAC9BF,GAASqa,UAAU,UAAU,OAYRC,eACjB,SAAAA,EAAYvgB,GAAc,IAAApD,EAAA,OAAAqD,OAAAC,EAAA,EAAAD,CAAAhN,KAAAstB,IACtB3jB,EAAAqD,OAAAE,EAAA,EAAAF,CAAAhN,KAAAgN,OAAAG,EAAA,EAAAH,CAAAsgB,GAAAlgB,KAAApN,KAAM+M,KAEDM,MAAQ,CACTkgB,KAAM,SACNrkB,OAAQ,MALUS,uEASV4jB,GACZvtB,KAAKuN,SAAS,CACVggB,KAAMA,EACNrkB,OAAQ,8KAKWwiB,MAAM,UAAY1rB,KAAKqN,MAAMkgB,KAAO,qBAArD5B,kBACaA,EAASlrB,cAAtBA,SACNT,KAAKuN,SAAS,CACVrE,OAAQzI,uIAIA,IAAA0L,EAAAnM,KACRA,KAAKqN,MAAMkgB,OAASvtB,KAAKqN,MAAMnE,QAC/BlJ,KAAKwtB,YAkBT,OACI7f,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAACif,GAAD,CACIzd,QAlBI,CACZ,CACIlP,GAAI,SACJO,KAAM,UAEV,CACIP,GAAI,aACJO,KAAM,cAEV,CACIP,GAAI,UACJO,KAAM,YAQF6O,WAAYtP,KAAKqN,MAAMkgB,KACvBpe,OAAQ,SAAAD,GAAQ,OAAI/C,EAAKshB,QAAQve,MAErCvB,EAAA7L,EAAA8L,cAAA,OAAK4G,wBAAyB,CAAEC,OAAQzB,GAAS0B,SAAS1U,KAAKqN,MAAMnE,QAAU,eApDlDsF,IAAMC,oBCO9Bif,eACjB,SAAAA,EAAY3gB,GAAc,IAAApD,EAAA,OAAAqD,OAAAC,EAAA,EAAAD,CAAAhN,KAAA0tB,IACtB/jB,EAAAqD,OAAAE,EAAA,EAAAF,CAAAhN,KAAAgN,OAAAG,EAAA,EAAAH,CAAA0gB,GAAAtgB,KAAApN,KAAM+M,KACDM,MAAQ,CACTkgB,KAAM,KACN/tB,OAAQ,MAJUmK,uEAQV4jB,GACZvtB,KAAKuN,SAAS,CACVggB,KAAMA,sCAII/tB,GACdQ,KAAKuN,SAAS,CACV/N,OAAQA,uCAIG,IAAA2M,EAAAnM,KACf,GAAwB,OAApBA,KAAKqN,MAAMkgB,KACX,OAAO,KAGX,IAeI/tB,EACAmO,EAAA7L,EAAA8L,cAACoQ,GAAD,CACItQ,QACIC,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,iBADJ,0DAOZ,OAAQ5N,KAAKqN,MAAM7N,QACf,IAAK,YACDA,EACImO,EAAA7L,EAAA8L,cAAC+f,GAAD,MAEJ,MACJ,IAAK,WACDnuB,EACImO,EAAA7L,EAAA8L,cAACggB,GAAD,MAEJ,MACJ,IAAK,QACDpuB,EACImO,EAAA7L,EAAA8L,cAACigB,GAAD,MAKZ,OACIlgB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,aACXF,EAAA7L,EAAA8L,cAACif,GAAD,CACIzd,QA9CI,CACZ,CACIlP,GAAI,YACJO,KAAM,iBAEV,CACIP,GAAI,QACJO,KAAM,kBAEV,CACIP,GAAI,WACJO,KAAM,uBAoCF6O,WAAYtP,KAAKqN,MAAM7N,OACvB2P,OAAQ,SAAA2e,GAAQ,OAAI3hB,EAAK4hB,UAAUD,MAEvCngB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YACfF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,aACVrO,uCAME,IAAAyQ,EAAAjQ,KACf,MAAwB,UAApBA,KAAKqN,MAAMkgB,KACJ,KAKP5f,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,WAAiCF,EAAA7L,EAAA8L,cAAA,KAAG8K,KAAK,gCAAR,eACjC/K,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,WAAiCF,EAAA7L,EAAA8L,cAAA,SAAIogB,GAAIC,UACzCtgB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,iEAAuFF,EAAA7L,EAAA8L,cAAA,KAAG8K,KAAK,oCAAoCzP,OAAO,SAAS0P,IAAI,uBAAhE,SACvFhL,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,uDACAF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,WACAF,EAAA7L,EAAA8L,cAACkH,EAAD,CAAerU,KAAK,iBAAiBgN,SAAU,kBAAMwC,EAAKlD,MAAMmhB,cAChEvgB,EAAA7L,EAAA8L,cAAC6e,GAAD,CACI7a,MAAM,kBACN4W,QAASxoB,KAAK+M,MAAMqC,QAAQ0O,SAC5BxU,YAAa,SAAAhG,GAAK,OAAI2M,EAAKlD,MAAMzD,YAAY2G,EAAKlD,MAAMqC,QAAS,WAAY9L,MAEjFqK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,qBACAF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,sJACAF,EAAA7L,EAAA8L,cAAA,UACID,EAAA7L,EAAA8L,cAAA,gvEACAD,EAAA7L,EAAA8L,cAAA,ucACAD,EAAA7L,EAAA8L,cAAA,6HACAD,EAAA7L,EAAA8L,cAAA,oPACAD,EAAA7L,EAAA8L,cAAA,yQACAD,EAAA7L,EAAA8L,cAAA,wXACAD,EAAA7L,EAAA8L,cAAA,yxBACAD,EAAA7L,EAAA8L,cAAA,uKACAD,EAAA7L,EAAA8L,cAAA,oRACAD,EAAA7L,EAAA8L,cAAA,oIACAD,EAAA7L,EAAA8L,cAAA,mMACAD,EAAA7L,EAAA8L,cAAA,uRACAD,EAAA7L,EAAA8L,cAAA,4PACAD,EAAA7L,EAAA8L,cAAA,8KACAD,EAAA7L,EAAA8L,cAAA,oIAOA,IAAAgI,EAAA5V,KACZ,IAYI,OACI2N,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,SACXF,EAAA7L,EAAA8L,cAACif,GAAD,CACIhE,MAAM,EACNzZ,QAfQ,CAChB,CACIlP,GAAI,KACJO,KAAM,YAEV,CACIP,GAAI,QACJO,KAAM,UASF6O,WAAYtP,KAAKqN,MAAMkgB,KACvBpe,OAAQ,SAAAD,GAAQ,OAAI0G,EAAK6X,QAAQve,MAEpClP,KAAKmuB,WACLnuB,KAAKouB,YAGhB,MAAOpf,GACLV,QAAQC,MAAMS,WAzJcR,IAAMC,WCGzB4f,eAMjB,SAAAA,EAAYthB,GAAc,IAAApD,EAAA,OAAAqD,OAAAC,EAAA,EAAAD,CAAAhN,KAAAquB,IACtB1kB,EAAAqD,OAAAE,EAAA,EAAAF,CAAAhN,KAAAgN,OAAAG,EAAA,EAAAH,CAAAqhB,GAAAjhB,KAAApN,KAAM+M,KAEDM,MAAQ,CACTihB,YAAavhB,EAAMuhB,aAJD3kB,wEAQT3B,GAAiB,IAAAmE,EAAAnM,KAE9BA,KAAKqN,MAAMihB,YAAYtmB,QAAUA,EACjChI,KAAKuN,SAAS,CACV+gB,YAAatuB,KAAKqN,MAAMihB,aACzB,kBAAMniB,EAAKY,MAAMwhB,gDAGHtmB,GAAqB,IAAAgI,EAAAjQ,KAEtCA,KAAKqN,MAAMihB,YAAYrmB,YAAcA,EACrC,IAAMib,EAAMljB,KAAK+M,MAAMqW,WAAWhjB,KAAK,SAAA4O,GAAC,OAAIA,EAAE9O,KAAO+H,IACjDib,IAEAljB,KAAKqN,MAAMihB,YAAY3pB,aAAe/E,EAAM4uB,gBAAgBtL,IAEhEljB,KAAKuN,SAAS,CACV+gB,YAAatuB,KAAKqN,MAAMihB,aACzB,kBAAMre,EAAKlD,MAAMwhB,8CAGLruB,GACf,GAAIA,GAAc,KAAPA,EAAY,CACnB,IAAM8kB,EAAQhlB,KAAK+M,MAAMmY,UAAU9kB,KAAK,SAAAglB,GAAC,OAAIA,EAAEllB,KAAOA,IAClD8kB,IAEAhlB,KAAKqN,MAAMihB,YAAYnmB,QAAU6c,EAAM9kB,GAEvCF,KAAKqN,MAAMihB,YAAYlmB,MAA8B,IAAtB4c,EAAMvd,KAAKhG,OAAeujB,EAAMvd,KAAK,GAAGvH,GAAK,WAIhFF,KAAKqN,MAAMihB,YAAYnmB,QAAU,KAEjCnI,KAAKqN,MAAMihB,YAAYlmB,MAAQ,KAEnCpI,KAAKuN,SAAS,CACV+gB,YAAatuB,KAAKqN,MAAMihB,+CAIfpuB,GAEbF,KAAKqN,MAAMihB,YAAYlmB,MAAQlI,EAC/BF,KAAKuN,SAAS,CACV+gB,YAAatuB,KAAKqN,MAAMihB,8CAIhBpmB,GAAgB,IAAA0N,EAAA5V,KAE5BA,KAAKqN,MAAMihB,YAAYpmB,OAASA,EAChC,IAAMgb,EAAMljB,KAAK+M,MAAMqW,WAAWhjB,KAAK,SAAA4O,GAAC,OAAIA,EAAE9O,KAAO0V,EAAKvI,MAAMihB,YAAYrmB,cAC5E,GAAIib,EAAK,CACL,IAAMvN,EAAOuN,EAAI3b,MAAMnH,KAAK,SAAAyjB,GAAC,OAAIA,EAAE3jB,KAAOgI,IACtCyN,IAEA3V,KAAKqN,MAAMihB,YAAY3pB,aAAe/E,EAAM4uB,gBAAgB7Y,IAGpE3V,KAAKuN,SAAS,CACV+gB,YAAatuB,KAAKqN,MAAMihB,aACzB,kBAAM1Y,EAAK7I,MAAMwhB,wDAGKhb,GAEzBvT,KAAKqN,MAAMihB,YAAYjmB,kBAAoBkL,EAC3CvT,KAAKuN,SAAS,CACV+gB,YAAatuB,KAAKqN,MAAMihB,iDAIbG,EAAgBvkB,EAAezG,GAC9C,IAAMoB,EAAO7E,KAAKqN,MAAMihB,YAAY3pB,aAAavE,KAAK,SAAA0V,GAAC,OAAIA,EAAE5V,KAAOuuB,IAChE5pB,IACAA,EAAKC,MAAMoF,GAASzG,EACpBzD,KAAKuN,SAAS,CACV+gB,YAAatuB,KAAKqN,MAAMihB,yDAOV,IAAApY,EAAAlW,KACtB,GAAkC,IAA9BA,KAAK+M,MAAMqU,QAAQ3f,OACnB,OACIkM,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,oCAIR,IAAMwT,EAAerhB,KAAK+M,MAAMqU,QAAQ9Y,IAAI,SAAAgY,GACxC,MAAO,CACHpgB,GAAIogB,EAAMpgB,GACVO,KAAM6f,EAAM7c,MAAQ,mBAIxBirB,EAAe,KACnB,GAAI1uB,KAAKqN,MAAMihB,YAAYtmB,QAAS,CAChC,IAAM2mB,EAAgB3uB,KAAK+M,MAAMqU,QAAQhhB,KAAK,SAAAT,GAAC,OAAIA,EAAEO,KAAOgW,EAAK7I,MAAMihB,YAAYtmB,UACnF,GAAI2mB,EAAe,CACf,IAEMC,EAFMD,EAAcxpB,IAAI3E,OAAO,SAAAmgB,GAAE,OAAIA,EAAGvb,SAEvBkD,IAAI,SAAAqY,GAAE,OAErBhT,EAAA7L,EAAA8L,cAAA,MAAI8B,IAAKiR,EAAGzgB,IACPygB,EAAGld,MAAQ,aADhB,WACsCkd,EAAGzd,MADzC,OAMkB,IAAtB0rB,EAAWntB,QACXmtB,EAAWnsB,KACPkL,EAAA7L,EAAA8L,cAAA,MAAI8B,IAAK,SAAT,WAIRgf,EACI/gB,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAf,OACAF,EAAA7L,EAAA8L,cAAA,UAAKghB,KAMrB,OACIjhB,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,SACAF,EAAA7L,EAAA8L,cAAC2I,EAAD,CACInH,QAASiS,EACT5R,YAAY,kBACZH,WAAYtP,KAAKqN,MAAMihB,YAAYtmB,QAAUhI,KAAKqN,MAAMihB,YAAYtmB,aAAUtG,EAC9EyN,OAAQ,SAAAD,GAAQ,OAAIgH,EAAK2Y,SAAS3f,MAErCwf,iDAKiB,IAAArP,EAAArf,KAC1B,GAAqC,IAAjCA,KAAK+M,MAAMqW,WAAW3hB,OACtB,OACIkM,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,qCAIR,IAAMihB,EAAmB9uB,KAAK+M,MAAMqW,WAAW9a,IAAI,SAAA5D,GAC/C,MAAO,CACHxE,GAAIwE,EAAUxE,GACdO,KAAMiE,EAAUjB,MAAQ,uBAI5BsrB,EAAmB,KACvB,GAAI/uB,KAAKqN,MAAMihB,YAAYrmB,YAAa,CACpC,IAAM+mB,EAAoBhvB,KAAK+M,MAAMqW,WAAWhjB,KAAK,SAAA4O,GAAC,OAAIA,EAAE9O,KAAOmf,EAAKhS,MAAMihB,YAAYrmB,cAC1F,GAAI+mB,EAAmB,CACnB,IAAMC,EAAkBD,EAAkBpqB,MAAM0D,IAAI,SAAAzD,GAChD,IAAIpB,EAAOoB,EAAKE,aAAe,kBAI/B,OAHIF,EAAK5B,MAAQ,IACbQ,GAAQ,MAAQoB,EAAK5B,MAAQ,KAG7B0K,EAAA7L,EAAA8L,cAAA,MAAI8B,IAAK7K,EAAK3E,IAAKuD,KAII,IAA3BwrB,EAAgBxtB,QAChBwtB,EAAgBxsB,KACZkL,EAAA7L,EAAA8L,cAAA,MAAI8B,IAAK,SAAT,gBAIR,IAAMnI,EAAQynB,EAAkBznB,MAAMe,IAAI,SAAAqN,GACtC,GAA0B,IAAtBA,EAAK/Q,MAAMnD,OACX,OAAO,KAGX,IAAMytB,EAAevZ,EAAK/Q,MAAM0D,IAAI,SAAAzD,GAChC,IAAIpB,EAAOoB,EAAKE,aAAe,kBAI/B,OAHIF,EAAK5B,MAAQ,IACbQ,GAAQ,KAAOoB,EAAK5B,OAGpB0K,EAAA7L,EAAA8L,cAAA,MAAI8B,IAAK7K,EAAK3E,IAAKuD,KAI3B,OACIkK,EAAA7L,EAAA8L,cAAA,OAAK8B,IAAKiG,EAAKzV,IACXyN,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAc8H,EAAKlS,MAAQ,gBAC1CkK,EAAA7L,EAAA8L,cAAA,UAAKshB,MAKjBH,EACIphB,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAf,YACAF,EAAA7L,EAAA8L,cAAA,UAAKqhB,GACJ1nB,IAMjB,OACIoG,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,aACAF,EAAA7L,EAAA8L,cAAC2I,EAAD,CACInH,QAAS0f,EACTrf,YAAY,sBACZH,WAAYtP,KAAKqN,MAAMihB,YAAYrmB,YAAcjI,KAAKqN,MAAMihB,YAAYrmB,iBAAcvG,EACtFyN,OAAQ,SAAAD,GAAQ,OAAImQ,EAAK8P,aAAajgB,MAEzC6f,2CAKW,IAAAvP,EAAAxf,KACdmlB,EAASnlB,KAAK+M,MAAMmY,UAAU1kB,OAAO,SAAAwkB,GAAK,OAAIA,EAAMvd,KAAKhG,OAAS,IACxE,GAAsB,IAAlB0jB,EAAO1jB,OACP,OAAO,KAGX,IAAM2tB,EAAe,CAAC,CAClBlvB,GAAI,GACJO,KAAM,SACPwd,OAAOkH,EAAO7c,IAAI,SAAA0c,GACjB,MAAO,CACH9kB,GAAI8kB,EAAM9kB,GACVO,KAAMukB,EAAMvhB,MAAQ,oBAIxB4rB,EAAmB,KACnBC,EAAmB,KAEvB,GAAItvB,KAAKqN,MAAMihB,YAAYnmB,QAAS,CAChC,IAAM6c,EAAQhlB,KAAK+M,MAAMmY,UAAU9kB,KAAK,SAAAglB,GAAC,OAAIA,EAAEllB,KAAOsf,EAAKnS,MAAMihB,YAAYnmB,UAC7E,GAAI6c,EAAO,CACP,IAAMuK,EAAavK,EAAMvd,KAAKa,IAAI,SAAA+D,GAC9B,MAAO,CACHnM,GAAImM,EAAEnM,GACNO,KAAM4L,EAAE5I,MAAQ,iBAcxB,GAV0B,IAAtB8rB,EAAW9tB,SACX4tB,EACI1hB,EAAA7L,EAAA8L,cAACif,GAAD,CACIzd,QAASmgB,EACTjgB,WAAYtP,KAAKqN,MAAMihB,YAAYlmB,MACnC+G,OAAQ,SAAAD,GAAQ,OAAIsQ,EAAKgQ,SAAStgB,OAK1ClP,KAAKqN,MAAMihB,YAAYlmB,MAAO,CAC9B,IAAME,EAAM0c,EAAMvd,KAAKrH,KAAK,SAAAiM,GAAC,OAAIA,EAAEnM,KAAOsf,EAAKnS,MAAMihB,YAAYlmB,QAC7DE,IACAgnB,EACI3hB,EAAA7L,EAAA8L,cAAC0O,EAAD,CACIhU,IAAKA,EACLiL,KAAK,iBAQ7B,OACI5F,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,OACAF,EAAA7L,EAAA8L,cAAC2I,EAAD,CACInH,QAASggB,EACT3f,YAAY,sBACZH,WAAYtP,KAAKqN,MAAMihB,YAAYnmB,QAAUnI,KAAKqN,MAAMihB,YAAYnmB,aAAUzG,EAC9EyN,OAAQ,SAAAD,GAAQ,OAAIsQ,EAAKiQ,WAAWvgB,MAEvCmgB,EACAC,4CAKY,IAAA3P,EAAA3f,KACrB,GAA2C,OAAvCA,KAAKqN,MAAMihB,YAAYrmB,YACvB,OACI0F,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,sCAIR,IAAMmhB,EAAoBhvB,KAAK+M,MAAMqW,WAAWhjB,KAAK,SAAA4O,GAAC,OAAIA,EAAE9O,KAAOyf,EAAKtS,MAAMihB,YAAYrmB,cAC1F,GAAI+mB,EAAmB,CACnB,GAAuC,IAAnCA,EAAkBznB,MAAM9F,OACxB,OACIkM,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,kCAIR,IAAM6hB,EAAcV,EAAkBznB,MAAMe,IAAI,SAAAqN,GAC5C,MAAO,CACHzV,GAAIyV,EAAKzV,GACTO,KAAMkV,EAAKlS,MAAQ,kBAIvBksB,EAAc,KAClB,GAAI3vB,KAAKqN,MAAMihB,YAAYpmB,OAAQ,CAC/B,IAAM0nB,EAAeZ,EAAkBznB,MAAMnH,KAAK,SAAAyjB,GAAC,OAAIA,EAAE3jB,KAAOyf,EAAKtS,MAAMihB,YAAYpmB,SACvF,GAAI0nB,EAAc,CACd,IAAMX,EAAkBW,EAAahrB,MAAM0D,IAAI,SAAAzD,GAC3C,IAAIpB,EAAOoB,EAAKE,aAAe,kBAI/B,OAHIF,EAAK5B,MAAQ,IACbQ,GAAQ,MAAQoB,EAAK5B,MAAQ,KAG7B0K,EAAA7L,EAAA8L,cAAA,MAAI8B,IAAK7K,EAAK3E,IAAKuD,KAII,IAA3BwrB,EAAgBxtB,QAChBwtB,EAAgBxsB,KACZkL,EAAA7L,EAAA8L,cAAA,MAAI8B,IAAK,SAAT,gBAIRigB,EACIhiB,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAf,YACAF,EAAA7L,EAAA8L,cAAA,UAAKqhB,KAMrB,OACIthB,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,QACAF,EAAA7L,EAAA8L,cAAC2I,EAAD,CACInH,QAASsgB,EACTjgB,YAAY,iBACZH,WAAYtP,KAAKqN,MAAMihB,YAAYpmB,OAASlI,KAAKqN,MAAMihB,YAAYpmB,YAASxG,EAC5EyN,OAAQ,SAAAD,GAAQ,OAAIyQ,EAAKkQ,QAAQ3gB,MAEpCygB,GAKb,OAAO,oDAGoB,IAAAG,EAAA9vB,KACrBsgB,EAAQtgB,KAAK+M,MAAMqU,QAAQhhB,KAAK,SAAAT,GAAC,OAAIA,EAAEO,KAAO4vB,EAAKziB,MAAMihB,YAAYtmB,UACrEtD,EAAY1E,KAAK+M,MAAMqW,WAAWhjB,KAAK,SAAA8iB,GAAG,OAAIA,EAAIhjB,KAAO4vB,EAAKziB,MAAMihB,YAAYrmB,cAEtF,OAAIqY,GAAS5b,EAELiJ,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,wBACAF,EAAA7L,EAAA8L,cAAC4T,GAAD,CACIlB,MAAOA,EACP5b,UAAWA,EACXsb,WAAY,SAACjb,EAAayC,GAAd,OAAmCsoB,EAAK/iB,MAAMiT,WAAWjb,EAAayC,OAO9FmG,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,wBACAF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,2HAKgB,IAAAkiB,EAAA/vB,KACxB,GAA2C,OAAvCA,KAAKqN,MAAMihB,YAAYrmB,YACvB,OACI0F,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,YACAF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,qDAKZ,IAAK7N,KAAK+M,MAAMqU,SAA6C,OAAlCphB,KAAKqN,MAAMihB,YAAYpmB,OAC9C,OACIyF,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,YACAF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,+CAKZ,IAAMmhB,EAAoBhvB,KAAK+M,MAAMqW,WAAWhjB,KAAK,SAAA4O,GAAC,OAAIA,EAAE9O,KAAO6vB,EAAK1iB,MAAMihB,YAAYrmB,cAC1F,GAAI+mB,EAAmB,CACnB,IAAIgB,EAA6ChB,EACjD,GAAIhvB,KAAKqN,MAAMihB,YAAYpmB,OAAQ,CAC/B,IAAM0nB,EAAeZ,EAAkBznB,MAAMnH,KAAK,SAAAyjB,GAAC,OAAIA,EAAE3jB,KAAO6vB,EAAK1iB,MAAMihB,YAAYpmB,SACnF0nB,IACAI,EAAiBJ,GAIzB,GAAoC,IAAhCI,EAAeprB,MAAMnD,OACrB,OAAO,KAGX,IAeMqD,EAAQ9E,KAAKqN,MAAMihB,YAAY3pB,aAAa2D,IAAI,SAAA2nB,GAClD,IAAMprB,EAAOmrB,EAAeprB,MAAMxE,KAAK,SAAA0V,GAAC,OAAIA,EAAE5V,KAAO+vB,EAAU/vB,KAC/D,GAAI2E,EAAM,CAEN,IADA,IAAMqrB,EAAS,GACNlrB,EAAI,EAAGA,IAAMirB,EAAUnrB,MAAMrD,SAAUuD,EAC5CkrB,EAAOztB,KACHkL,EAAA7L,EAAA8L,cAAA,OAAK8B,IAAK1K,GACN2I,EAAA7L,EAAA8L,cAACuiB,GAAD,CACI7sB,MAAO2sB,EAAUnrB,MAAME,GACvBypB,OAAQ5pB,EAAK3E,GACbgK,MAAOlF,EACPorB,WAAY,SAAC3B,EAAQvkB,EAAO5G,GAAhB,OAA0BysB,EAAKK,WAAW3B,EAAQvkB,EAAO5G,QAKrF,OACIqK,EAAA7L,EAAA8L,cAAA,OAAK8B,IAAKugB,EAAU/vB,GAAI2N,UAAU,YAC9BF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cACVhJ,EAAKE,aAEV4I,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,eACVqiB,OAOrB,OACIviB,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,YACAF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAf,cACAF,EAAA7L,EAAA8L,cAACif,GAAD,CACIzd,QAjDQ,CAChB,CACIlP,GAAI,SACJO,KAAM,kBAEV,CACIP,GAAI,aACJO,KAAM,qBAEV,CACIP,GAAI,QACJO,KAAM,mBAuCF6O,WAAYtP,KAAKqN,MAAMihB,YAAYjmB,kBACnC8G,OAAQ,SAAAD,GAAQ,OAAI6gB,EAAKM,qBAAqBnhB,MAElDvB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAf,SACAF,EAAA7L,EAAA8L,cAAA,WAAM9I,IAKlB,OAAO,sCAMP,IACI,IAAIwrB,EAAc,KACdC,EAAe,KA+BnB,OA7BIvwB,KAAK+M,MAAMqU,SACXkP,EACI3iB,EAAA7L,EAAA8L,cAAA,WACK5N,KAAKwwB,kBACLxwB,KAAKywB,sBACLzwB,KAAK0wB,iBAIdH,EACI5iB,EAAA7L,EAAA8L,cAAA,WACK5N,KAAK2wB,uBACL3wB,KAAK4wB,uBAIdN,EACI3iB,EAAA7L,EAAA8L,cAAA,WACK5N,KAAK6wB,kBAIdN,EACI5iB,EAAA7L,EAAA8L,cAAA,WACK5N,KAAK4wB,sBAMdjjB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,MAAMe,MAAO,CAAE9G,OAAQ,OAAQgpB,OAAQ,YAClDnjB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,8CACVyiB,GAEL3iB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,8CACV0iB,IAIf,MAAOvhB,GACLV,QAAQC,MAAMS,WA5hBoBR,IAAMC,WAA/B4f,GACH3f,aAAe,CACzB0S,QAAS,KACT8D,UAAW,UAqiBb6L,oLACc,IAAAC,EAAAhxB,KACZ,OACI2N,EAAA7L,EAAA8L,cAAA,SAAOxK,KAAK,OAAOE,MAAOtD,KAAK+M,MAAMzJ,MAAOqR,SAAU,SAAAC,GAAK,OAAIoc,EAAKjkB,MAAMqjB,WAAWY,EAAKjkB,MAAM0hB,OAAQuC,EAAKjkB,MAAM7C,MAAO0K,EAAM3L,OAAO3F,iBAHzHkL,IAAMC,WCziBnBwiB,GAAkB,CAC3B,UACA,UACA,WACA,aACA,aACA,WACA,gBACA,YACA,YACA,YACA,WACA,QACA,aACA,UACA,cACA,UCnCiBC,oLAKD,IAAAvnB,EAAA3J,KACZ,IACI,IAAM0N,EAAU1N,KAAK+M,MAAMrF,MAAMY,IAAI,SAAA6hB,GACjC,OACIxc,EAAA7L,EAAA8L,cAACujB,GAAD,CACIzhB,IAAKya,EAAKjqB,GACViqB,KAAMA,EACNra,SAAUnG,EAAKoD,MAAM+N,iBAAmBqP,EAAKjqB,GAC7CiP,OAAQ,SAACiiB,GAAD,OAAoBznB,EAAKoD,MAAMoC,OAAOiiB,QAK1D,OACIzjB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,eACVH,GAGX,MAAOW,GAEL,OADAC,QAAQC,MAAMF,GACP,aAzBqBG,IAAMC,WAAzByiB,GACHxiB,aAAe,OAmC3B2iB,oLACc,IAAAllB,EAAAnM,KACR4O,EAAQ,aACRX,EAAU,KAed,OAbIjO,KAAK+M,MAAM+C,WACXlB,GAAS,YACTX,EACIN,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,sBACV7N,KAAK+M,MAAMod,KAAKlc,UAKzBjO,KAAK+M,MAAMod,KAAK/b,WAChBQ,GAAS,aAITjB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAWe,EAAOV,QAAS,kBAAM/B,EAAKY,MAAMoC,OAAOhD,EAAKY,MAAMod,KAAKjqB,MACpEyN,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,mBAAmB7N,KAAK+M,MAAMod,KAAK1pB,MACjDwN,UArBYO,IAAMC,WCpBd6iB,eACjB,SAAAA,EAAYvkB,GAAc,IAAApD,EAAA,OAAAqD,OAAAC,EAAA,EAAAD,CAAAhN,KAAAsxB,IACtB3nB,EAAAqD,OAAAE,EAAA,EAAAF,CAAAhN,KAAAgN,OAAAG,EAAA,EAAAH,CAAAskB,GAAAlkB,KAAApN,KAAM+M,KACDM,MAAQ,CACT7J,UAAWuJ,EAAMvJ,WAHCmG,4EAOL4nB,GAEjBvxB,KAAKqN,MAAM7J,UAAUC,KAAO8tB,EAE5BvxB,KAAKqN,MAAM7J,UAAUN,MAAQ,EAE7BlD,KAAKqN,MAAM7J,UAAU/C,KAAyB,WAAlB8wB,EAA6B,mBAAqB,KAE9EvxB,KAAKuN,SAAS,CACV/J,UAAWxD,KAAKqN,MAAM7J,gDAIVguB,GAChB,IAAI7tB,EAAW,KAEf,OAAQ6tB,GACJ,IAAK,QACD7tB,EAAWsB,EAAQwsB,+BACnB,MACJ,IAAK,aACD9tB,EAAWsB,EAAQysB,oCACVptB,YAActE,KAAK+M,MAAMnE,UAAU1I,GAC5C,MACJ,IAAK,SACDyD,EAAWsB,EAAQ0sB,gCAQ3B3xB,KAAKqN,MAAM7J,UAAUG,SAAWA,EAChC3D,KAAKuN,SAAS,CACV/J,UAAWxD,KAAKqN,MAAM7J,gDAIVouB,EAAajwB,EAAe2B,GAC5CsuB,EAAOjwB,GAAS2B,EAEhBtD,KAAKuN,SAAS,CACV/J,UAAWxD,KAAKqN,MAAM7J,+CAIXouB,EAAajwB,EAAe4B,GAC3C,IAAID,EAAQsuB,EAAOjwB,GAAS4B,EACd,UAAV5B,IACA2B,EAAQrC,KAAKmU,IAAI9R,EAAO,GACxBA,EAAQrC,KAAKoU,IAAI/R,EAAO,IAEd,UAAV3B,IACA2B,EAAQrC,KAAKmU,IAAI9R,EAAO,IAEd,WAAV3B,IACA2B,EAAQrC,KAAKmU,IAAI9R,EAAO,IAE5BsuB,EAAOjwB,GAAS2B,EAEhBtD,KAAKuN,SAAS,CACV/J,UAAWxD,KAAKqN,MAAM7J,6CAId,IAAA2I,EAAAnM,KACZ,IACI,IAAMoS,EAAa6e,GAAgB3oB,IAAI,SAAA9E,GACnC,IAAMqL,EAAW,GACXgE,EAAc,GACpB,GAAIrP,IAAc2I,EAAKkB,MAAM7J,UAAUC,KAAM,CACvB,WAAdD,GACAqL,EAASpM,KACLkL,EAAA7L,EAAA8L,cAAA,SACIxK,KAAK,OACLqM,YAAY,mBACZnM,MAAO6I,EAAKkB,MAAM7J,UAAU/C,KAAO0L,EAAKkB,MAAM7J,UAAU/C,KAAO,GAC/DkU,SAAU,SAAAC,GAAK,OAAIzI,EAAK7C,YAAY6C,EAAKkB,MAAM7J,UAAW,OAAQoR,EAAM3L,OAAO3F,WAIzE,eAAdE,GACAqL,EAASpM,KACLkL,EAAA7L,EAAA8L,cAACoE,EAAD,CACItC,IAAI,kBACJxG,OAAQiD,EAAKY,MAAMvJ,UACnBC,KAAK,QACLmO,MAAM,aACNZ,WAAY,SAAAzN,GAAK,OAAI4I,EAAK6E,WAAW7E,EAAKY,MAAMvJ,UAAW,QAASD,OAKhF,IADA,IAAM9C,EAAOb,EAAMkT,cAAc3G,EAAKkB,MAAM7J,WACnCwB,EAAI,EAAGA,IAAMvE,EAAKgB,SAAUuD,EACjC6N,EAAYpQ,KAAKkL,EAAA7L,EAAA8L,cAAA,MAAI8B,IAAK1K,EAAG6I,UAAU,WAAWpN,EAAKuE,KAI/D,MAAO,CACH9E,GAAIsD,EACJ/C,KAAM+C,EACNyK,QACIN,EAAA7L,EAAA8L,cAAA,OAAK8B,IAAKlM,GACLqL,EACDlB,EAAA7L,EAAA8L,cAAA,UACKiF,IAIbzE,WAAUjC,EAAKY,MAAMnE,UAAUxB,sBAAuF,IAAjE+E,EAAKY,MAAMnE,UAAUxB,oBAAoBrG,QAAQyC,MAIxGquB,EAAc,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,SAASvpB,IAAI,SAAAnE,GAAC,MAAK,CAAEjE,GAAIiE,EAAG1D,KAAM0D,KAC3F2tB,EAAe,CACjB,CACI5xB,GAAI,QACJO,KAAM,iBAEV,CACIP,GAAI,MACJO,KAAM,gBAGRsxB,EAAmB/xB,KAAK+M,MAAMrJ,OAAOU,WAAWkE,IAAI,SAAAnE,GAAC,MAAK,CAAEjE,GAAIiE,EAAEjE,GAAIO,KAAO0D,EAAEI,aAAeJ,EAAEV,MAAQ,qBAExGuuB,EAAY,CACd,CACI9xB,GAAI,OACJO,KAAM,0BACNwN,QACIN,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,oEAIZ,CACI1N,GAAI,QACJO,KAAM,0BACNwN,QACIN,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAf,4BACAF,EAAA7L,EAAA8L,cAACoE,EAAD,CACI9I,OAAQlJ,KAAK+M,MAAMvJ,UAAUG,SAC7BF,KAAK,QACLuN,WAAY,SAAAzN,GAAK,OAAI4I,EAAK6E,WAAW7E,EAAKY,MAAMvJ,UAAUG,SAAU,QAASJ,OAGrFoK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAf,WACAF,EAAA7L,EAAA8L,cAACoE,EAAD,CACI9I,OAAQlJ,KAAK+M,MAAMvJ,UAAUG,SAC7BF,KAAK,SACLuN,WAAY,SAAAzN,GAAK,OAAI4I,EAAK6E,WAAW7E,EAAKY,MAAMvJ,UAAUG,SAAU,SAAUJ,OAGtFoK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAf,gBACAF,EAAA7L,EAAA8L,cAACif,GAAD,CACIzd,QAASyiB,EACTviB,WACKtP,KAAK+M,MAAMvJ,UAAUG,SACnB3D,KAAK+M,MAAMvJ,UAAUG,SAAoCE,SAC1D,KAENsL,OAAQ,SAAAD,GAAQ,OAAI/C,EAAK7C,YAAY6C,EAAKY,MAAMvJ,UAAUG,SAAU,WAAYuL,OAGxFvB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAf,iDACAF,EAAA7L,EAAA8L,cAACif,GAAD,CACIzd,QAAS0iB,EACTxiB,WACKtP,KAAK+M,MAAMvJ,UAAUG,SACnB3D,KAAK+M,MAAMvJ,UAAUG,SAAoCO,MAC1D,KAENiL,OAAQ,SAAAD,GAAQ,OAAI/C,EAAK7C,YAAY6C,EAAKY,MAAMvJ,UAAUG,SAAU,QAASuL,SAMjG,CACIhP,GAAI,YACJO,KAAM,4BACNwN,QACIN,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAf,aACAF,EAAA7L,EAAA8L,cAAC2I,EAAD,CACInH,QAAS2iB,EACTziB,WACKtP,KAAK+M,MAAMvJ,UAAUG,UACnB3D,KAAK+M,MAAMvJ,UAAUG,SAAwCW,kBAC9D5C,EAENyN,OAAQ,SAAAD,GAAQ,OAAI/C,EAAK7C,YAAY6C,EAAKY,MAAMvJ,UAAUG,SAAU,cAAeuL,OAG3FvB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAf,4BACAF,EAAA7L,EAAA8L,cAACif,GAAD,CACIzd,QAAS0iB,EACTxiB,WACKtP,KAAK+M,MAAMvJ,UAAUG,SACnB3D,KAAK+M,MAAMvJ,UAAUG,SAAwCO,MAC9D,KAENiL,OAAQ,SAAAD,GAAQ,OAAI/C,EAAK7C,YAAY6C,EAAKY,MAAMvJ,UAAUG,SAAU,QAASuL,SAMjG,CACIhP,GAAI,SACJO,KAAM,yBACNwN,QACIN,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAf,oBACAF,EAAA7L,EAAA8L,cAACoE,EAAD,CACI9I,OAAQlJ,KAAK+M,MAAMvJ,UAAUG,SAC7BF,KAAK,QACLuN,WAAY,SAAAzN,GAAK,OAAI4I,EAAK6E,WAAW7E,EAAKY,MAAMvJ,UAAUG,SAAU,QAASJ,UAQrG,OACIoK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,mBACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,MAAMe,MAAO,CAAE9G,OAAQ,SAClC6F,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,+CACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,aACAF,EAAA7L,EAAA8L,cAACqkB,GAAD,CACIvqB,MAAO0K,EACP0I,eAAgB9a,KAAKqN,MAAM7J,UAAUC,KACrC0L,OAAQ,SAAAiiB,GAAM,OAAIjlB,EAAK+lB,aAAad,OAG5CzjB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,+CACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,YACAF,EAAA7L,EAAA8L,cAACqkB,GAAD,CACIvqB,MAAOsqB,EACPlX,eAAgB9a,KAAKqN,MAAM7J,UAAUG,SAAW3D,KAAKqN,MAAM7J,UAAUG,SAASP,KAAO,OACrF+L,OAAQ,SAAAiiB,GAAM,OAAIjlB,EAAKgmB,YAAYf,SAMzD,MAAOpiB,GACLV,QAAQC,MAAMS,WA1QkBR,IAAMC,WCR7B2jB,eACjB,SAAAA,EAAYrlB,GAAc,IAAApD,EAAA,OAAAqD,OAAAC,EAAA,EAAAD,CAAAhN,KAAAoyB,IACtBzoB,EAAAqD,OAAAE,EAAA,EAAAF,CAAAhN,KAAAgN,OAAAG,EAAA,EAAAH,CAAAolB,GAAAhlB,KAAApN,KAAM+M,KACDM,MAAQ,CACTglB,MAAO,aAHW1oB,2EAON0oB,GAChBryB,KAAKuN,SAAS,CACV8kB,MAAOA,qCAIC,IAAAlmB,EAAAnM,KACZ,IACI,IAAIsyB,EAAe,KAEbC,EAAyB,GAE/B,GADAvyB,KAAK+M,MAAMjN,QAAQe,QAAQ,SAAAd,GAAK,OAAIA,EAAMO,SAASO,QAAQ,SAAAhB,GAAO,OAAI0yB,EAAY9vB,KAAK5C,OAC5D,IAAvB0yB,EAAY9wB,OAAc,CAC1B,IAAM+wB,EAA2C,GAC7CC,EAAgB,EACdnyB,EAAyC,GAE/C,OAAQN,KAAKqN,MAAMglB,OACf,IAAK,YACkB,CACf,EAAG,KAAO,IAAM,GAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAEzHxxB,QAAQ,SAAA0B,GACfiwB,EAAQ/vB,KAAK,CACTa,MAAOf,EACPoN,MAAO,aAAe/P,EAAMqG,UAAU1D,OAI9CiwB,EAAQ3xB,QAAQ,SAAA6xB,GACZ,IAAMnwB,EAAKmwB,EAAOpvB,MAClBhD,EAASiC,EAAGnB,YAAcmxB,EAAY/xB,OAAO,SAAAX,GAAO,OAAIA,EAAQoG,YAAc1D,MAGlFiwB,EAAQ3xB,QAAQ,SAAA6xB,GACZ,IAAMnwB,EAAKmwB,EAAOpvB,MAClBmvB,EAAgBxxB,KAAKmU,IAAI9U,EAASiC,GAAId,OAAQgxB,KAElD,MACJ,IAAK,OACD5pB,EAAWhI,QAAQ,SAAAyB,GACfkwB,EAAQ/vB,KAAK,CACTa,MAAOhB,EACPqN,MAAOrN,MAIfkwB,EAAQ3xB,QAAQ,SAAA6xB,GACZ,IAAMpwB,EAAOowB,EAAOpvB,MACpBhD,EAASgC,EAAKlB,YAAcmxB,EAAY/xB,OAAO,SAAAX,GAAO,OAAIA,EAAQyC,OAASA,MAG/EkwB,EAAQ3xB,QAAQ,SAAA6xB,GACZ,IAAMpwB,EAAOowB,EAAOpvB,MACpBmvB,EAAgBxxB,KAAKmU,IAAI9U,EAASgC,GAAMb,OAAQgxB,KAEpD,MACJ,IAAK,OACD3pB,EAAejI,QAAQ,SAAAuC,GACnBovB,EAAQ/vB,KAAK,CACTa,MAAOF,EACPuM,MAAOvM,MAIfovB,EAAQ3xB,QAAQ,SAAA6xB,GACZ,IAAMtvB,EAAOsvB,EAAOpvB,MACpBhD,EAAS8C,EAAKhC,YAAcmxB,EAAY/xB,OAAO,SAAAX,GAAO,OAAIA,EAAQiG,WAAa1C,MAGnFovB,EAAQ3xB,QAAQ,SAAA6xB,GACZ,IAAMtvB,EAAOsvB,EAAOpvB,MACpBmvB,EAAgBxxB,KAAKmU,IAAI9U,EAAS8C,GAAM3B,OAAQgxB,KAS5D,IADA,IAAME,EAAO,GACJzoB,EAAQ,EAAGA,IAAUsoB,EAAQ/wB,SAAUyI,EAAO,CACnD,IAAMwoB,EAASF,EAAQtoB,GACjB0oB,EAAMtyB,EAASoyB,EAAOpvB,OACtBL,EAAQ2vB,EAAMA,EAAInxB,OAAS,EACjCkxB,EAAKlwB,KACDkL,EAAA7L,EAAA8L,cAAA,OACI8B,IAAKgjB,EAAO/iB,MACZ9B,UAAU,gBACV8B,MAAO+iB,EAAO/iB,MAAQ,KAAOijB,EAAInxB,OAAS,aAE1CkM,EAAA7L,EAAA8L,cAAA,OACIC,UAAU,MACVe,MAAO,CACH/G,MAAO,uBAAyB5E,EAAQ,MAAQwvB,EAAgB,SAsBpFH,EACI3kB,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,wBACAF,EAAA7L,EAAA8L,cAACif,GAAD,CACIzd,QAnBS,CACjB,CACIlP,GAAI,YACJO,KAAM,oBAEV,CACIP,GAAI,OACJO,KAAM,QAEV,CACIP,GAAI,OACJO,KAAM,SASF6O,WAAYtP,KAAKqN,MAAMglB,MACvBljB,OAAQ,SAAAD,GAAQ,OAAI/C,EAAK0mB,YAAY3jB,MAEzCvB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,SACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,QAAQ8kB,KAMvC,OAAOL,EACT,MAAOtjB,GACLV,QAAQC,MAAMS,WA7IqBR,IAAMC,WCMxCqkB,GAAgB,CACzB,SACA,OACA,YACA,aACA,YACA,MACA,OACA,OACA,SCfiBC,oLACD,IAAAppB,EAAA3J,KACZ,IACI,IAAMgzB,EAAiBF,GAAcxqB,IAAI,SAAAgE,GACrC,MAAO,CAAEpM,GAAIoM,EAAG7L,KAAM6L,KAG1B,OACIqB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,iBACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,SAAf,aAEJF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,gBACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAf,QACAF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAW7N,KAAK+M,MAAM6N,KAAK/S,MAA1C,SAAuD7H,KAAK+M,MAAM6N,KAAK9S,OAAvE,OACA6F,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAmC,EAAxB7N,KAAK+M,MAAM6N,KAAK/S,MAA1C,SAAoF,EAAzB7H,KAAK+M,MAAM6N,KAAK9S,OAA3E,OACA6F,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YACfF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAf,WACAF,EAAA7L,EAAA8L,cAAC2I,EAAD,CACInH,QAAS4jB,EACTvjB,YAAY,iBACZH,WAAYtP,KAAK+M,MAAM6N,KAAK7S,QAAU/H,KAAK+M,MAAM6N,KAAK7S,aAAUrG,EAChEyN,OAAQ,SAAAD,GAAQ,OAAIvF,EAAKoD,MAAMzD,YAAYK,EAAKoD,MAAM6N,KAAM,UAAW1L,MAE3EvB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YACfF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAf,QACAF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,oBACXF,EAAA7L,EAAA8L,cAACqJ,EAAD,CAAQzG,UAAU,MAAMN,MAAO,SAAAtO,GAAG,OAAI+H,EAAKoD,MAAMkmB,YAAYtpB,EAAKoD,MAAM6N,KAAMhZ,OAElF+L,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YACfF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAf,UACAF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,oBACXF,EAAA7L,EAAA8L,cAACqJ,EAAD,CAAQzG,UAAU,OAAON,MAAO,SAACtO,EAAK2O,GAAN,OAAe5G,EAAKoD,MAAMmmB,cAAcvpB,EAAKoD,MAAM6N,KAAMhZ,EAAK2O,OAElG5C,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YACfF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,UAAQM,QAAS,kBAAMvE,EAAKoD,MAAMomB,aAAaxpB,EAAKoD,MAAM6N,QAA1D,cACAjN,EAAA7L,EAAA8L,cAAA,UAAQM,QAAS,kBAAMvE,EAAKoD,MAAMqmB,cAAczpB,EAAKoD,MAAM6N,QAA3D,kBAKlB,MAAO5L,GACLV,QAAQC,MAAMS,WA3CeR,IAAMC,WCG1B4kB,eACjB,SAAAA,EAAYtmB,GAAc,IAAApD,EAAA,OAAAqD,OAAAC,EAAA,EAAAD,CAAAhN,KAAAqzB,IACtB1pB,EAAAqD,OAAAE,EAAA,EAAAF,CAAAhN,KAAAgN,OAAAG,EAAA,EAAAH,CAAAqmB,GAAAjmB,KAAApN,KAAM+M,KAEDM,MAAQ,CACT/E,IAAKyE,EAAMzE,IACXgrB,eAAgB,MALE3pB,iFASAzJ,GACtBF,KAAKuN,SAAS,CACV+lB,eAAgBpzB,uCAILyH,EAAWC,GAC1B,IAAMgT,EAAO3V,EAAQsuB,gBACrB3Y,EAAKjT,EAAIA,EACTiT,EAAKhT,EAAIA,EACTgT,EAAK7S,QAAU,YACf/H,KAAKqN,MAAM/E,IAAIZ,MAAMjF,KAAKmY,GAE1B5a,KAAKuN,SAAS,CACVjF,IAAKtI,KAAKqN,MAAM/E,IAChBgrB,eAAgB1Y,EAAK1a,yCAITiqB,EAAevoB,GAC/B,OAAQA,GACJ,IAAK,IACDuoB,EAAKviB,GAAK,EACV,MACJ,IAAK,IACDuiB,EAAKxiB,GAAK,EACV,MACJ,IAAK,IACDwiB,EAAKviB,GAAK,EACV,MACJ,IAAK,IACDuiB,EAAKxiB,GAAK,EAOlB3H,KAAKuN,SAAS,CACVjF,IAAKtI,KAAKqN,MAAM/E,yCAIL6hB,EAAevoB,GAC9B,OAAQA,GACJ,IAAK,IACDuoB,EAAKviB,GAAK,EACVuiB,EAAKriB,QAAU,EACf,MACJ,IAAK,IACDqiB,EAAKtiB,OAAS,EACd,MACJ,IAAK,IACDsiB,EAAKriB,QAAU,EACf,MACJ,IAAK,IACDqiB,EAAKxiB,GAAK,EACVwiB,EAAKtiB,OAAS,EAOtB7H,KAAKuN,SAAS,CACVjF,IAAKtI,KAAKqN,MAAM/E,2CAIH6hB,EAAevoB,GAChC,OAAQA,GACJ,IAAK,IACGuoB,EAAKriB,OAAS,IACdqiB,EAAKviB,GAAK,EACVuiB,EAAKriB,QAAU,GAEnB,MACJ,IAAK,IACGqiB,EAAKtiB,MAAQ,IACbsiB,EAAKtiB,OAAS,GAElB,MACJ,IAAK,IACGsiB,EAAKriB,OAAS,IACdqiB,EAAKriB,QAAU,GAEnB,MACJ,IAAK,IACGqiB,EAAKtiB,MAAQ,IACbsiB,EAAKxiB,GAAK,EACVwiB,EAAKtiB,OAAS,GAQ1B7H,KAAKuN,SAAS,CACVjF,IAAKtI,KAAKqN,MAAM/E,4CAIF6hB,EAAevoB,EAAa2O,GAC9C,OAAQA,GACJ,IAAK,KACDvQ,KAAKwzB,aAAarJ,EAAMvoB,GACxB,MACJ,IAAK,MACD5B,KAAKyzB,WAAWtJ,EAAMvoB,yCAQbuoB,GACjB,IAAM3e,EAAOC,KAAKC,MAAMD,KAAKE,UAAUwe,IACvC3e,EAAKtL,GAAKN,EAAMsF,OAChBsG,EAAK7D,GAAK,EACV6D,EAAK5D,GAAK,EACV5H,KAAKqN,MAAM/E,IAAIZ,MAAMjF,KAAK+I,GAE1BxL,KAAKuN,SAAS,CACVjF,IAAKtI,KAAKqN,MAAM/E,IAChBgrB,eAAgB9nB,EAAKtL,2CAIPiqB,GAClB,IAAMjgB,EAAQlK,KAAKqN,MAAM/E,IAAIZ,MAAM3G,QAAQopB,GAC3CnqB,KAAKqN,MAAM/E,IAAIZ,MAAMoE,OAAO5B,EAAO,GAEnClK,KAAKuN,SAAS,CACVjF,IAAKtI,KAAKqN,MAAM/E,IAChBgrB,eAAgB,2CAIJpqB,EAAavH,EAAe2B,GAC5C4F,EAAOvH,GAAS2B,EAEhBtD,KAAKuN,SAAS,CACVjF,IAAKtI,KAAKqN,MAAM/E,uCAIR,IAAA6D,EAAAnM,KACZ,IACI,IAAI0zB,EAAQ,KACZ,GAAI1zB,KAAKqN,MAAMimB,eAAgB,CAC3B,IAAMnJ,EAAOnqB,KAAKqN,MAAM/E,IAAIZ,MAAMtH,KAAK,SAAAiZ,GAAC,OAAIA,EAAEnZ,KAAOiM,EAAKkB,MAAMimB,iBAC5DnJ,IACAuJ,EACI/lB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,SACXF,EAAA7L,EAAA8L,cAAC+lB,GAAD,CACI/Y,KAAMuP,EACN8I,YAAa,SAACW,EAAShyB,GAAV,OAAkBuK,EAAK8mB,YAAYW,EAAShyB,IACzDsxB,cAAe,SAACU,EAAShyB,EAAK2O,GAAf,OAAwBpE,EAAK+mB,cAAcU,EAAShyB,EAAK2O,IACxE4iB,aAAc,SAAAS,GAAO,OAAIznB,EAAKgnB,aAAaS,IAC3CR,cAAe,SAAAQ,GAAO,OAAIznB,EAAKinB,cAAcQ,IAC7CtqB,YAAa,SAACJ,EAAQvH,EAAO2B,GAAhB,OAA0B6I,EAAK7C,YAAYJ,EAAQvH,EAAO2B,aAMvFowB,EACI/lB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,SACXF,EAAA7L,EAAA8L,cAAA,+EACAD,EAAA7L,EAAA8L,cAAA,qEAKZ,OACID,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cACV6lB,EACD/lB,EAAA7L,EAAA8L,cAAC0O,EAAD,CACIhU,IAAKtI,KAAKqN,MAAM/E,IAChBiL,KAAK,OACLuH,eAAgB9a,KAAKqN,MAAMimB,eAAiBtzB,KAAKqN,MAAMimB,oBAAiB5xB,EACxE0Y,kBAAmB,SAAAla,GAAE,OAAIiM,EAAK0nB,kBAAkB3zB,IAChDsa,WAAY,SAAC7S,EAAGC,GAAJ,OAAUuE,EAAKqO,WAAW7S,EAAGC,OAIvD,MAAOoH,GACLV,QAAQC,MAAMS,WAvMkBR,IAAMC,WCoB7BqlB,eACjB,SAAAA,EAAY/mB,GAAc,IAAApD,EAAA,OAAAqD,OAAAC,EAAA,EAAAD,CAAAhN,KAAA8zB,IACtBnqB,EAAAqD,OAAAE,EAAA,EAAAF,CAAAhN,KAAAgN,OAAAG,EAAA,EAAAH,CAAA8mB,GAAA1mB,KAAApN,KAAM+M,KACDM,MAAQ,CACTxN,QAASkN,EAAMlN,QACfk0B,KAAM,WACNC,YAAY,EACZC,YAAa,QACbzzB,OAAQ,CACJ8B,MAAM,EACNc,MAAM,EACNyG,SAAS,EACT7D,WAAW,EACXC,WAAW,EACXxF,KAAM,KAbQkJ,uEAkBVoqB,GACZ,IAAMG,EAAWl0B,KAAKm0B,sBAAsBJ,GAC5C/zB,KAAKuN,SAAS,CACVwmB,KAAMA,EACNE,YAAaC,EAAS,4CAK1Bl0B,KAAKuN,SAAS,CACVymB,YAAah0B,KAAKqN,MAAM2mB,oDAITI,GACnBp0B,KAAKuN,SAAS,CACV0mB,YAAaG,wCAIDhxB,GAEhBpD,KAAKqN,MAAM7M,OAAO4C,IAASpD,KAAKqN,MAAM7M,OAAO4C,GAC7CpD,KAAKuN,SAAS,CACV/M,OAAQR,KAAKqN,MAAM7M,+CAIL8C,GAElBtD,KAAKqN,MAAM7M,OAAOC,KAAO6C,EACzBtD,KAAKuN,SAAS,CACV/M,OAAQR,KAAKqN,MAAM7M,uDAOGuzB,GAC1B,OAAQA,GACJ,IAAK,WACD,MAAO,CAAC,QAAS,SAAU,YAAa,aAC5C,IAAK,YACD,MAAO,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,QAAS,UAC/D,IAAK,YACD,MAAO,CAAC,cAAe,WAAY,cAAe,kBAAmB,aAAc,cACvF,IAAK,UACD,MAAO,CAAC,WACZ,QACI,MAAO,0CAIG,IAAA5nB,EAAAnM,KACZM,EAAsB,GAmC5B,OAlCAN,KAAK+M,MAAMjN,QAAQe,QAAQ,SAAAd,GACvBA,EAAMO,SAASO,QAAQ,SAAAhB,GACnB,IAAI+T,GAAQ,EAERzH,EAAKkB,MAAMxN,QAAQK,KAAOL,EAAQK,KAClC0T,GAAQ,GAGRzH,EAAKkB,MAAM7M,OAAO8B,MAAS6J,EAAKkB,MAAMxN,QAAQyC,OAASzC,EAAQyC,OAC/DsR,GAAQ,GAGRzH,EAAKkB,MAAM7M,OAAO4C,MAAS+I,EAAKkB,MAAMxN,QAAQiG,WAAajG,EAAQiG,WACnE8N,GAAQ,GAGRzH,EAAKkB,MAAM7M,OAAOqJ,SAAYsC,EAAKkB,MAAMxN,QAAQkG,MAAQlG,EAAQkG,MACjE6N,GAAQ,GAGRzH,EAAKkB,MAAM7M,OAAOwF,WAAcmG,EAAKkB,MAAMxN,QAAQmG,YAAcnG,EAAQmG,YACzE4N,GAAQ,GAGRzH,EAAKkB,MAAM7M,OAAOyF,WAAckG,EAAKkB,MAAMxN,QAAQoG,YAAcpG,EAAQoG,YACzE2N,GAAQ,GAGRA,GACAtT,EAASmC,KAAK5C,OAKnBS,yCAGYqB,EAAerB,GAClC0I,EAAaoD,eAAepM,KAAKqN,MAAMxN,QAAS8B,EAAOrB,GACvDN,KAAKuN,SAAS,CACV1N,QAASG,KAAKqN,MAAMxN,iDAILS,GACnB0I,EAAaqrB,eAAer0B,KAAKqN,MAAMxN,QAASS,GAChDN,KAAKuN,SAAS,CACV1N,QAASG,KAAKqN,MAAMxN,2CAIXuD,GACb4F,EAAa+K,SAAS/T,KAAKqN,MAAMxN,QAASuD,GAC1CpD,KAAKuN,SAAS,CACV1N,QAASG,KAAKqN,MAAMxN,iDAILuD,EAAc9C,GACjC0I,EAAasrB,eAAet0B,KAAKqN,MAAMxN,QAASuD,EAAM9C,GACtDN,KAAKuN,SAAS,CACV1N,QAASG,KAAKqN,MAAMxN,8CAIR6J,GAChBV,EAAayK,YAAYzT,KAAKqN,MAAMxN,QAAS6J,GAC7C1J,KAAKuN,SAAS,CACV1N,QAASG,KAAKqN,MAAMxN,6CAITkM,EAAWC,GAC1BhD,EAAa0K,WAAW1T,KAAKqN,MAAMxN,QAASkM,EAAIC,GAChDhM,KAAKuN,SAAS,CACV1N,QAASG,KAAKqN,MAAMxN,4CAIV6J,GACdV,EAAa2D,UAAU3M,KAAKqN,MAAMxN,QAAS6J,GAC3C1J,KAAKuN,SAAS,CACV1N,QAASG,KAAKqN,MAAMxN,8CAIR6J,EAAc/H,EAAe2B,GAC5CoG,EAAc/H,GAAS2B,EACxBtD,KAAKuN,SAAS,CACV1N,QAASG,KAAKqN,MAAMxN,6CAIT8B,EAAe4B,GAC9ByF,EAAagI,WAAWhR,KAAKqN,MAAMxN,QAAS8B,EAAO4B,GACnDvD,KAAKuN,SAAS,CACV1N,QAASG,KAAKqN,MAAMxN,8CAIR8B,EAAe2B,GAC/B0F,EAAaM,YAAYtJ,KAAKqN,MAAMxN,QAAS8B,EAAO2B,GACpDtD,KAAKuN,SAAS,CACV1N,QAASG,KAAKqN,MAAMxN,iDAOLS,GACnB,OAAQN,KAAKqN,MAAM4mB,aACf,IAAK,QACD,OAAOj0B,KAAKu0B,gBAAgB,QAAS,OAAQj0B,GACjD,IAAK,SACD,OAAON,KAAKu0B,gBAAgB,SAAU,OAAQj0B,GAClD,IAAK,YACD,OAAON,KAAKu0B,gBAAgB,YAAa,OAAQj0B,GACrD,IAAK,YACD,OAAON,KAAKu0B,gBAAgB,YAAa,OAAQj0B,GACrD,IAAK,MACD,OAAON,KAAKu0B,gBAAgB,oBAAqB,SAAUj0B,GAC/D,IAAK,MACD,OAAON,KAAKu0B,gBAAgB,oBAAqB,SAAUj0B,GAC/D,IAAK,MACD,OAAON,KAAKu0B,gBAAgB,oBAAqB,SAAUj0B,GAC/D,IAAK,MACD,OAAON,KAAKu0B,gBAAgB,oBAAqB,SAAUj0B,GAC/D,IAAK,MACD,OAAON,KAAKu0B,gBAAgB,oBAAqB,SAAUj0B,GAC/D,IAAK,MACD,OAAON,KAAKu0B,gBAAgB,oBAAqB,SAAUj0B,GAC/D,IAAK,QACD,OAAON,KAAKu0B,gBAAgB,eAAgB,OAAQj0B,GACxD,IAAK,SACD,OAAON,KAAKu0B,gBAAgB,SAAU,OAAQj0B,GAClD,IAAK,cACD,OAAON,KAAKu0B,gBAAgB,KAAM,SAAUj0B,GAChD,IAAK,WACD,OAAON,KAAKu0B,gBAAgB,UAAW,SAAUj0B,GACrD,IAAK,cACD,OAAON,KAAKu0B,gBAAgB,gBAAiB,OAAQj0B,GACzD,IAAK,kBACD,OAAON,KAAKu0B,gBAAgB,oBAAqB,OAAQj0B,GAC7D,IAAK,aACD,OAAON,KAAKu0B,gBAAgB,gBAAiB,OAAQj0B,GACzD,IAAK,aACD,OAAON,KAAKu0B,gBAAgB,sBAAuB,OAAQj0B,GAC/D,IAAK,UACD,OAAON,KAAKw0B,kBAAkBl0B,GAClC,QACI,OAAO,8CAIKqB,EAAe8yB,EAA6Bn0B,GAAqB,IAAA2P,EAAAjQ,KAC/EirB,EAAgB3qB,EACjBgI,IAAI,SAAA+D,GACD,IAAMlD,EAASxH,EAAMf,MAAM,KACvBsI,EAAcmD,EACd/I,EAAQ,KAWZ,OAVA6F,EAAOtI,QAAQ,SAAAC,GACPA,IAAUqI,EAAOA,EAAO1H,OAAS,GACjC6B,EAAQ4F,EAAOpI,GAEfoI,EAASA,EAAOpI,KAGN,SAAb2zB,GAAmC,KAAVnxB,IAC1BA,EAAQ,MAELA,IAEV9C,OAAO,SAAAoqB,GAAC,OAAU,OAANA,IAEXre,EAA4C,GAClD,GAAiB,WAAbkoB,EAAuB,CACvB,IAAIpf,EAAqB,KACrBD,EAAqB,KASzB,GARA6V,EAAOpqB,QAAQ,SAAA+pB,IACE,OAARvV,GAAkBuV,EAAIvV,KACvBA,EAAMuV,IAEG,OAARxV,GAAkBwV,EAAIxV,KACvBA,EAAMwV,KAGD,OAARvV,GAA0B,OAARD,EACnB,IAAK,IAAIpQ,EAAIqQ,EAAKrQ,GAAKoQ,IAAOpQ,EAC1BuH,EAAS9J,KAAK,CACVa,MAAO0B,EACP/B,MAAO,IAiBvB,OAZAgoB,EAAOpqB,QAAQ,SAAA+pB,GACX,IAAMpe,EAAUD,EAASnM,KAAK,SAAAqM,GAAC,OAAIA,EAAEnJ,QAAUsnB,IAC3Cpe,EACAA,EAAQvJ,OAAS,EAEjBsJ,EAAS9J,KAAK,CACVa,MAAOsnB,EACP3nB,MAAO,MAKXwxB,GACJ,IAAK,SACD70B,EAAMiC,KAAK0K,EAAU,CAAC,CAAE5K,MAAO,QAASC,IAAK,SAC7C,MACJ,IAAK,OACDhC,EAAMiC,KAAK0K,EAAU,CAAC,CAAE5K,MAAO,QAASC,IAAK,QAAU,CAAED,MAAO,QAASC,IAAK,SAOrE,SAAb6yB,IAEc,IADAn0B,EAASmB,OAASwpB,EAAOxpB,QAEnC8K,EAAS9J,KAAK,CACVa,MAAO,GACPL,MAAO3C,EAASmB,OAASwpB,EAAOxpB,UAK5C,IAAMizB,EAAgBnoB,EAASjE,IAAI,SAAAmE,GAC/B,IAAM5E,EAAQ,IAAM4E,EAAExJ,MAAQ3C,EAASmB,OACvC,OACIkM,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,mDAAmD6B,IAAKnD,EAASxL,QAAQ0L,IACpFkB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,UACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,kBACVpB,EAAEnJ,OAAS,qBAGpBqK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,UACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,iBACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,MAAMe,MAAO,CAAE/G,MAAOA,EAAQ,SAGrD8F,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,UACXF,EAAA7L,EAAA8L,cAAA,UAAQM,QAAS,kBAAM+B,EAAK3G,YAAY3H,EAAO8K,EAAEnJ,SAAjD,sBAMhB,OACIqK,EAAA7L,EAAA8L,cAAA,WACK8mB,EACD/mB,EAAA7L,EAAA8L,cAAA,UAAQM,QAAS,kBAAM+B,EAAK7D,eAAezK,EAAOrB,KAAlD,kEAKcA,GAAqB,IAAAsV,EAAA5V,KACrC20B,EAAO,GA6Db,OA5DAA,EAAKlyB,KACDkL,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,mDAAmD6B,IAAI,UAClE/B,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,UACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,kBACXF,EAAA7L,EAAA8L,cAAA,mBAGRD,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,UACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,yBACXF,EAAA7L,EAAA8L,cAAA,6BAGRD,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,UACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,yBACXF,EAAA7L,EAAA8L,cAAA,0BAMhB7E,EAAYlI,QAAQ,SAAAuC,GAChB,IAAIiS,EAAqB,KACrBD,EAAqB,KACrBnS,EAAQ,EACZ3C,EAASO,QAAQ,SAAAwL,GACb,IAAMrH,EAAIqH,EAAElF,OAAO3G,OAAO,SAAA8L,GAAC,OAAIA,EAAElJ,OAASA,IAAM3B,QACnC,OAAR4T,GAAkBrQ,EAAIqQ,KACvBA,EAAMrQ,IAEG,OAARoQ,GAAkBpQ,EAAIoQ,KACvBA,EAAMpQ,GAEV/B,GAAS+B,IAEb,IAAM6H,EAAM5L,KAAKsH,MAAMtF,EAAQ3C,EAASmB,QAExCkzB,EAAKlyB,KACDkL,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,mDAAmD6B,IAAKtM,GACnEuK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,UACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAqB,IAAV5K,EAAc,0BAA4B,kBACrDrD,EAAMiM,UAAUzI,GAAM,KAG/BuK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,UACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAqB,IAAV5K,EAAc,iCAAmC,yBAC5D4J,IAGTc,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,UACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAqB,IAAV5K,EAAc,iCAAmC,yBAC5DoS,EADL,MACaD,IAGjBzH,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,UACXF,EAAA7L,EAAA8L,cAAA,UAAQC,UAAqB,IAAV5K,EAAc,WAAa,GAAIiL,QAAS,kBAAM0H,EAAK0e,eAAelxB,EAAM9C,KAA3F,mBAOZqN,EAAA7L,EAAA8L,cAAA,WACK+mB,yCAKSr0B,GAAqB,IAAA4V,EAAAlW,KACjC40B,EAAqB,GACvB50B,KAAKqN,MAAM7M,OAAO8B,MAClBsyB,EAASnyB,KAAK,QAEdzC,KAAKqN,MAAM7M,OAAO4C,MAClBwxB,EAASnyB,KAAK,QAEdzC,KAAKqN,MAAM7M,OAAOqJ,SAClB+qB,EAASnyB,KAAK,WAEdzC,KAAKqN,MAAM7M,OAAOwF,WAClB4uB,EAASnyB,KAAK,aAEdzC,KAAKqN,MAAM7M,OAAOyF,WAClB2uB,EAASnyB,KAAK,oBAElB,IAAMoyB,EAAgBD,EAASnzB,OAAS,EAAK,YAAcmzB,EAAS9N,KAAK,MAAQ,wBAC3EgO,EACFnnB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACVvN,EAASmB,OADd,sBACyCozB,EADzC,KAKAE,EAAgB,KA6CpB,OA3CIA,EADA/0B,KAAKqN,MAAM2mB,WAEPrmB,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAC6e,GAAD,CACI7a,MAAO,QAAU5R,KAAKqN,MAAMxN,QAAQyC,KACpCkmB,QAASxoB,KAAKqN,MAAM7M,OAAO8B,KAC3BgH,YAAa,SAAAhG,GAAK,OAAI4S,EAAK8e,YAAY,WAE3CrnB,EAAA7L,EAAA8L,cAAC6e,GAAD,CACI7a,MAAO,QAAU5R,KAAKqN,MAAMxN,QAAQiG,SACpC0iB,QAASxoB,KAAKqN,MAAM7M,OAAO4C,KAC3BkG,YAAa,SAAAhG,GAAK,OAAI4S,EAAK8e,YAAY,WAE3CrnB,EAAA7L,EAAA8L,cAAC6e,GAAD,CACI7a,MAAO5R,KAAKqN,MAAMxN,QAAQkG,IAAM,WAAa/F,KAAKqN,MAAMxN,QAAQkG,IAAM,UACtEyiB,QAASxoB,KAAKqN,MAAM7M,OAAOqJ,QAC3BuE,UAAWpO,KAAKqN,MAAMxN,QAAQkG,IAC9BuD,YAAa,SAAAhG,GAAK,OAAI4S,EAAK8e,YAAY,cAE3CrnB,EAAA7L,EAAA8L,cAAC6e,GAAD,CACI7a,MAAO5R,KAAKqN,MAAMxN,QAAQmG,UAAY,aAAehG,KAAKqN,MAAMxN,QAAQmG,UAAY,YACpFwiB,QAASxoB,KAAKqN,MAAM7M,OAAOwF,UAC3BoI,UAAWpO,KAAKqN,MAAMxN,QAAQmG,UAC9BsD,YAAa,SAAAhG,GAAK,OAAI4S,EAAK8e,YAAY,gBAE3CrnB,EAAA7L,EAAA8L,cAAC6e,GAAD,CACI7a,MAAO,oBAAsBhS,EAAMqG,UAAUjG,KAAKqN,MAAMxN,QAAQoG,WAChEuiB,QAASxoB,KAAKqN,MAAM7M,OAAOyF,UAC3BqD,YAAa,SAAAhG,GAAK,OAAI4S,EAAK8e,YAAY,gBAE3CrnB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YACfF,EAAA7L,EAAA8L,cAAA,UAAQC,UAAWvN,EAASmB,OAAS,EAAI,WAAa,GAAIyM,QAAS,kBAAMgI,EAAKme,eAAe/zB,KAA7F,wBACAqN,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YACdinB,GAKLnnB,EAAA7L,EAAA8L,cAAA,WACKknB,GAMTnnB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,QACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,SAAf,oBACAF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAW7N,KAAKqN,MAAM2mB,WAAa,eAAiB,QAASlmB,IAAKuC,IAAOrC,IAAI,QAAQE,QAAS,kBAAMgI,EAAK+e,mBAElHtnB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,gBACVknB,6CAOGz0B,GAAqB,IAAA+e,EAAArf,KAoBzC,OAnBeJ,EAAMiC,KAAKvB,GACEgI,IAAI,SAAA+D,GAE5B,OADoBA,EAAElF,OAAO0O,KAAK,SAACvJ,GAAD,OAAc1M,EAAMgU,MAAMyL,EAAKhS,MAAM7M,OAAOC,KAAM6L,EAAE7I,QAG9EkK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,UAAU6B,IAAKrD,EAAEnM,IAC5ByN,EAAA7L,EAAA8L,cAAC4P,EAAD,CACI5U,UAAWyD,EACXkH,KAAM,YAAc8L,EAAKhS,MAAM0mB,KAC/BvzB,OAAQ6e,EAAKhS,MAAM7M,OAAOC,KAC1BkM,UAAW,SAAAjD,GAAK,OAAI2V,EAAK1S,UAAUjD,OAKxC,OAEZlJ,OAAO,SAAA6L,GAAC,QAAMA,qCAOL,IAAAmT,EAAAxf,KACZ,IACI,IAmBIM,EAAsB,GACtBN,KAAK+M,MAAMmoB,eACX50B,EAAWN,KAAKm1B,eAGpB,IAAIznB,EAAU,KACd,OAAQ1N,KAAKqN,MAAM0mB,MACf,IAAK,WACD,IAAM9R,EAAanZ,EAAeR,IAAI,SAAA4Z,GAAG,MAAK,CAAEhiB,GAAIgiB,EAAKzhB,KAAMyhB,KACzDF,EAAcnZ,EAAWP,IAAI,SAAAhG,GAAI,MAAK,CAAEpC,GAAIoC,EAAM7B,KAAM6B,KAE9DoL,EACIC,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,OACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,oCACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAf,QACAF,EAAA7L,EAAA8L,cAAA,SAAOxK,KAAK,OAAOE,MAAOtD,KAAKqN,MAAMxN,QAAQ4D,KAAMkR,SAAU,SAAAC,GAAK,OAAI4K,EAAKlW,YAAY,OAAQsL,EAAM3L,OAAO3F,UAC5GqK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAf,QACAF,EAAA7L,EAAA8L,cAAC2I,EAAD,CACInH,QAAS4S,EACT1S,WAAYtP,KAAKqN,MAAMxN,QAAQyC,KAC/B6M,OAAQ,SAAAD,GAAQ,OAAIsQ,EAAKlW,YAAY,OAAQ4F,MAEjDvB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAf,QACAF,EAAA7L,EAAA8L,cAAC2I,EAAD,CACInH,QAAS6S,EACT3S,WAAYtP,KAAKqN,MAAMxN,QAAQiG,SAC/BqJ,OAAQ,SAAAD,GAAQ,OAAIsQ,EAAKlW,YAAY,WAAY4F,MAErDvB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAf,WACAF,EAAA7L,EAAA8L,cAAA,SAAOxK,KAAK,OAAOE,MAAOtD,KAAKqN,MAAMxN,QAAQkG,IAAK4O,SAAU,SAAAC,GAAK,OAAI4K,EAAKlW,YAAY,MAAOsL,EAAM3L,OAAO3F,UAC1GqK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAf,aACAF,EAAA7L,EAAA8L,cAAA,SAAOxK,KAAK,OAAOE,MAAOtD,KAAKqN,MAAMxN,QAAQmG,UAAW2O,SAAU,SAAAC,GAAK,OAAI4K,EAAKlW,YAAY,YAAasL,EAAM3L,OAAO3F,WAE1HqK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,oCACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAf,oBACAF,EAAA7L,EAAA8L,cAACoE,EAAD,CACI9I,OAAQlJ,KAAKqN,MAAMxN,QACnB4D,KAAK,YACLmN,QAAS,SAAAtN,GAAK,OAAI1D,EAAMqG,UAAU3C,IAClC0N,WAAY,SAAAzN,GAAK,OAAIic,EAAKxO,WAAW,YAAazN,MAEtDoK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAf,SACAF,EAAA7L,EAAA8L,cAAA,SAAOxK,KAAK,OAAOE,MAAOtD,KAAKqN,MAAMxN,QAAQkH,MAAO4N,SAAU,SAAAC,GAAK,OAAI4K,EAAKlW,YAAY,QAASsL,EAAM3L,OAAO3F,UAC9GqK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAf,UACAF,EAAA7L,EAAA8L,cAAA,SAAOxK,KAAK,OAAOE,MAAOtD,KAAKqN,MAAMxN,QAAQoH,OAAQ0N,SAAU,SAAAC,GAAK,OAAI4K,EAAKlW,YAAY,SAAUsL,EAAM3L,OAAO3F,UAChHqK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAf,aACAF,EAAA7L,EAAA8L,cAAA,SAAOxK,KAAK,OAAOE,MAAOtD,KAAKqN,MAAMxN,QAAQ2F,UAAWmP,SAAU,SAAAC,GAAK,OAAI4K,EAAKlW,YAAY,YAAasL,EAAM3L,OAAO3F,UACtHqK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAf,aACAF,EAAA7L,EAAA8L,cAAA,SAAOxK,KAAK,OAAOE,MAAOtD,KAAKqN,MAAMxN,QAAQqH,UAAWyN,SAAU,SAAAC,GAAK,OAAI4K,EAAKlW,YAAY,YAAasL,EAAM3L,OAAO3F,YAIlI,MACJ,IAAK,YACDoK,EACIC,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,OACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,oCACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAf,kBACAF,EAAA7L,EAAA8L,cAACmK,EAAD,CACIhG,MAAM,EACNnJ,UAAW5I,KAAKqN,MAAMxN,QACtBmR,WAAY,SAAC9H,EAAQ9F,EAAMG,GAAf,OAAyBic,EAAKxO,WAAW5N,EAAMG,OAGnEoK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,oCACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAf,iBACAF,EAAA7L,EAAA8L,cAAA,SACIxK,KAAK,OACLE,MAAOtD,KAAKqN,MAAMxN,QAAQiH,aAC1B6N,SAAU,SAAAC,GAAK,OAAI4K,EAAKlW,YAAY,eAAgBsL,EAAM3L,OAAO3F,UAErEqK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAf,UACAF,EAAA7L,EAAA8L,cAAA,SACIxK,KAAK,OACLE,MAAOtD,KAAKqN,MAAMxN,QAAQmH,OAC1B2N,SAAU,SAAAC,GAAK,OAAI4K,EAAKlW,YAAY,SAAUsL,EAAM3L,OAAO3F,YAK3E,MACJ,IAAK,YACDoK,EACIC,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,OACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,oCACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAf,eACAF,EAAA7L,EAAA8L,cAACoE,EAAD,CACI9I,OAAQlJ,KAAKqN,MAAMxN,QACnB4D,KAAK,KACLuN,WAAY,SAAAzN,GAAK,OAAIic,EAAKxO,WAAW,KAAMzN,MAE/CoK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAf,YACAF,EAAA7L,EAAA8L,cAACoE,EAAD,CACI9I,OAAQlJ,KAAKqN,MAAMxN,QACnB4D,KAAK,UACLmN,QAAS,SAAAtN,GAAK,OAAIA,EAAQ,IAAM1D,EAAM4J,WAAWgW,EAAKnS,MAAMxN,QAAQyC,OACpE0O,WAAY,SAAAzN,GAAK,OAAIic,EAAKxO,WAAW,UAAWzN,MAEpDoK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAf,cACAF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YAAY7N,KAAKqN,MAAMxN,QAAQ+C,MAA9C,QAEJ+K,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,oCACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAf,sBACAF,EAAA7L,EAAA8L,cAAA,SACIxK,KAAK,OACLE,MAAOtD,KAAKqN,MAAMxN,QAAQ6G,OAAOC,OACjCgO,SAAU,SAAAC,GAAK,OAAI4K,EAAKlW,YAAY,gBAAiBsL,EAAM3L,OAAO3F,UAEtEqK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAf,0BACAF,EAAA7L,EAAA8L,cAAA,SACIxK,KAAK,OACLE,MAAOtD,KAAKqN,MAAMxN,QAAQ6G,OAAOE,WACjC+N,SAAU,SAAAC,GAAK,OAAI4K,EAAKlW,YAAY,oBAAqBsL,EAAM3L,OAAO3F,UAE1EqK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAf,qBACAF,EAAA7L,EAAA8L,cAAA,SACIxK,KAAK,OACLE,MAAOtD,KAAKqN,MAAMxN,QAAQ6G,OAAOG,OACjC8N,SAAU,SAAAC,GAAK,OAAI4K,EAAKlW,YAAY,gBAAiBsL,EAAM3L,OAAO3F,UAEtEqK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAf,wBACAF,EAAA7L,EAAA8L,cAAA,SACIxK,KAAK,OACLE,MAAOtD,KAAKqN,MAAMxN,QAAQuH,oBAC1BuN,SAAU,SAAAC,GAAK,OAAI4K,EAAKlW,YAAY,sBAAuBsL,EAAM3L,OAAO3F,YAKxF,MACJ,IAAK,UACDoK,EACIC,EAAA7L,EAAA8L,cAACoK,EAAD,CACIpP,UAAW5I,KAAKqN,MAAMxN,QACtB0T,KAAK,OACLQ,SAAU,SAAA3Q,GAAI,OAAIoc,EAAKzL,SAAS3Q,IAChCqQ,YAAa,SAAA/J,GAAK,OAAI8V,EAAK/L,YAAY/J,IACvCgK,WAAY,SAAC3H,EAAIC,GAAL,OAAYwT,EAAK9L,WAAW3H,EAAIC,IAC5C1C,YAAa,SAACI,EAAOtG,EAAME,GAAd,OAAwBkc,EAAK4V,YAAY1rB,EAAOtG,EAAME,MASnF,IAAIob,EAAO,KACX,GAAI1e,KAAK+M,MAAMmoB,cAAiB50B,EAASmB,OAAS,EAAI,CAClD,IAAI4zB,EAAW,KACf,GAAIr1B,KAAKm0B,sBAAsBn0B,KAAKqN,MAAM0mB,MAAMtyB,OAAS,EAAG,CACxD,IAAM2N,EAAUpP,KAAKm0B,sBAAsBn0B,KAAKqN,MAAM0mB,MAAMzrB,IAAI,SAAAwN,GAC5D,MAAO,CACH5V,GAAI4V,EACJrV,KAAMqV,KAGduf,EACI1nB,EAAA7L,EAAA8L,cAACif,GAAD,CACIhE,MAAM,EACNzZ,QAASA,EACTE,WAAYtP,KAAKqN,MAAM4mB,YACvB9kB,OAAQ,SAAAD,GAAQ,OAAIsQ,EAAK8V,eAAepmB,MAKpDwP,EACI/Q,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,gBACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YACfF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,cAAf,qCACCwnB,EACAr1B,KAAKu1B,eAAej1B,IAKjC,IAAIk1B,EAAc,KAClB,GAAIx1B,KAAK+M,MAAMmoB,aAAc,CACzB,IAAIO,EAAY,KACS,YAApBz1B,KAAKqN,MAAM0mB,MAAwBzzB,EAASmB,OAAS,IACtDg0B,EACI9nB,EAAA7L,EAAA8L,cAAA,SACIxK,KAAK,OACLqM,YAAY,gCACZnM,MAAOtD,KAAKqN,MAAM7M,OAAOC,KACzBkU,SAAU,SAAAC,GAAK,OAAI4K,EAAKkW,cAAc9gB,EAAM3L,OAAO3F,WAI/DkyB,EACI7nB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,2DACV7N,KAAK21B,cAAcr1B,GACnBm1B,EACAz1B,KAAK2jB,gBAAgBrjB,IAKlC,OACIqN,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,MAAMe,MAAO,CAAE9G,OAAQ,OAAQgpB,OAAQ,YAClDnjB,EAAA7L,EAAA8L,cAAA,OACIC,UACI7N,KAAK+M,MAAMmoB,aACT,8CACA,iDAENtmB,MAAO,CAAEgnB,WAAY,SAErBjoB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAACif,GAAD,CACIhE,MAAM,EACNzZ,QAvON,CACV,CACIlP,GAAI,WACJO,KAAM,YAEV,CACIP,GAAI,YACJO,KAAM,aAEV,CACIP,GAAI,YACJO,KAAM,UAEV,CACIP,GAAI,UACJO,KAAM,YAyNM6O,WAAYtP,KAAKqN,MAAM0mB,KACvB5kB,OAAQ,SAAAD,GAAQ,OAAIsQ,EAAKqW,QAAQ3mB,MAEpCxB,EACAgR,IAGR8W,GAGX,MAAOxmB,GACLV,QAAQC,MAAMS,WArvBsBR,IAAMC,WCxBjCqnB,oLACD,IAAAnsB,EAAA3J,KACZ,IACI,IAAM+1B,EAAmC,YAApB/1B,KAAK+M,MAAMwgB,KAAqB,0BAA4B,iBAC3EyI,EAAmC,YAApBh2B,KAAK+M,MAAMwgB,KAAqB,0BAA4B,iBAC7E0I,EAAqC,cAApBj2B,KAAK+M,MAAMwgB,KAAuB,0BAA4B,iBAC7E2I,EAA+B,SAApBl2B,KAAK+M,MAAMwgB,KAAkB,0BAA4B,iBACtE4I,EAAkC,WAApBn2B,KAAK+M,MAAMwgB,KAAoB,0BAA4B,iBAEvE6I,EAAkD,IAA9Bp2B,KAAK+M,MAAMjN,QAAQ2B,OACvC40B,EAA+C,IAA9Br2B,KAAK+M,MAAMqU,QAAQ3f,QAAmD,IAAjCzB,KAAK+M,MAAMqW,WAAW3hB,OAQlF,OAPK20B,IACDH,GAAkB,aAEjBI,IACDF,GAAe,aAIfxoB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAW7N,KAAK+M,MAAMupB,KAAO,cAAgB,UAC9C3oB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAWkoB,EAAc7nB,QAAS,kBAAMvE,EAAKoD,MAAM0gB,QAAQ,aAAhE,qBACA9f,EAAA7L,EAAA8L,cAAA,OAAKC,UAAWmoB,EAAc9nB,QAAS,kBAAMvE,EAAKoD,MAAM0gB,QAAQ,aAAhE,mBACA9f,EAAA7L,EAAA8L,cAAA,OAAKC,UAAWooB,EAAgB/nB,QAAS,kBAAMkoB,EAAoBzsB,EAAKoD,MAAM0gB,QAAQ,aAAe,OAArG,qBACA9f,EAAA7L,EAAA8L,cAAA,OAAKC,UAAWqoB,EAAUhoB,QAAS,kBAAMvE,EAAKoD,MAAM0gB,QAAQ,UAA5D,cACA9f,EAAA7L,EAAA8L,cAAA,OAAKC,UAAWsoB,EAAajoB,QAAS,kBAAMmoB,EAAgB1sB,EAAKoD,MAAM0gB,QAAQ,UAAY,OAA3F,mBAGV,MAAOze,GACLV,QAAQC,MAAMS,WA5BUR,IAAMC,+BCJrB8nB,oLACD,IAAA5sB,EAAA3J,KACZ,IACI,OACI2N,EAAA7L,EAAA8L,cAAA,OAAKC,UAAW7N,KAAK+M,MAAMupB,KAAO,gBAAkB,YAChD3oB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAWK,QAAS,kBAAMvE,EAAKoD,MAAMypB,aAApD,QACCx2B,KAAK+M,MAAM7B,QACZyC,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,gBAAgBC,IAAK2oB,KAAK9mB,MAAM,QAAQ3B,IAAI,QAAQE,QAAS,kBAAMvE,EAAKoD,MAAM2pB,gBAGvG,MAAO1nB,GACLV,QAAQC,MAAMS,WAXYR,IAAMC,WCiBvBkoB,eACjB,SAAAA,EAAY5pB,GAAc,IAAApD,EAAA,OAAAqD,OAAAC,EAAA,EAAAD,CAAAhN,KAAA22B,IACtBhtB,EAAAqD,OAAAE,EAAA,EAAAF,CAAAhN,KAAAgN,OAAAG,EAAA,EAAAH,CAAA2pB,GAAAvpB,KAAApN,KAAM+M,KACDM,MAAQ,CACTxN,QAAS8J,EAAKoD,MAAMlN,QACpBW,OAAQ,CACJiD,KAAM,GACN4e,aAAc,EACdC,aAAc,EACdxc,SAAU,YACVxD,KAAM,aAEVs0B,iBAAkB,IAXAjtB,iFAgBtBX,EAAaqrB,eAAer0B,KAAKqN,MAAMxN,QAASG,KAAKqN,MAAMupB,kBAC3D52B,KAAKuN,SAAS,CACV1N,QAASG,KAAKqN,MAAMxN,oDAIFuD,EAAsEE,GAE5FtD,KAAKqN,MAAM7M,OAAO4C,GAAQE,EAC1BtD,KAAKuN,SAAS,CACV/M,OAAQR,KAAKqN,MAAM7M,kDAIF4C,EAAuCG,GAC5D,IAAMD,EAAQ1D,EAAMyJ,eAAerJ,KAAKqN,MAAM7M,OAAO4C,GAAOG,GAC5DvD,KAAK4iB,kBAAkBxf,EAAME,yCAI7BtD,KAAKuN,SAAS,CACV/M,OAAQ,CACJiD,KAAM,GACN4e,aAAc,EACdC,aAAc,EACdxc,SAAU,YACVxD,KAAM,oDAKGzC,GACjB,QAAIA,EAAQoG,UAAYjG,KAAKqN,MAAM7M,OAAO6hB,kBAItCxiB,EAAQoG,UAAYjG,KAAKqN,MAAM7M,OAAO8hB,kBAIX,KAA3BtiB,KAAKqN,MAAM7M,OAAOiD,OACb7D,EAAMgU,MAAM5T,KAAKqN,MAAM7M,OAAOiD,KAAM5D,EAAQ4D,UAKlB,cAA/BzD,KAAKqN,MAAM7M,OAAOsF,UACdjG,EAAQiG,WAAa9F,KAAKqN,MAAM7M,OAAOsF,YAKhB,cAA3B9F,KAAKqN,MAAM7M,OAAO8B,MACdzC,EAAQyC,OAAStC,KAAKqN,MAAM7M,OAAO8B,+CAQzBzC,GAClBG,KAAKqN,MAAMupB,iBAAiBn0B,KAAK5C,GACjCG,KAAKqN,MAAMupB,iBAAiB/0B,KAAK,SAACC,EAAGC,GACjC,OAAID,EAAE2B,KAAO1B,EAAE0B,MAAgB,EAC3B3B,EAAE2B,KAAO1B,EAAE0B,KAAe,EACvB,IAEXzD,KAAKuN,SAAS,CACVqpB,iBAAkB52B,KAAKqN,MAAMupB,2DAIb/2B,GACpB,IAAMqK,EAAQlK,KAAKqN,MAAMupB,iBAAiB71B,QAAQlB,GAClDG,KAAKqN,MAAMupB,iBAAiB9qB,OAAO5B,EAAO,GAC1ClK,KAAKuN,SAAS,CACVqpB,iBAAkB52B,KAAKqN,MAAMupB,uDAIjB,IAAAzqB,EAAAnM,KAChBA,KAAK+M,MAAMjN,QAAQe,QAAQ,SAAAd,GACvBA,EAAMO,SAASO,QAAQ,SAAAhB,GACfsM,EAAK8W,aAAapjB,IAClBsM,EAAKkB,MAAMupB,iBAAiBn0B,KAAK5C,OAI7CG,KAAKqN,MAAMupB,iBAAiB/0B,KAAK,SAACC,EAAGC,GACjC,OAAID,EAAE2B,KAAO1B,EAAE0B,MAAgB,EAC3B3B,EAAE2B,KAAO1B,EAAE0B,KAAe,EACvB,IAEXzD,KAAKuN,SAAS,CACVqpB,iBAAkB52B,KAAKqN,MAAMupB,oDAIrB,IAAA3mB,EAAAjQ,KACZ,IACI,IAAMM,EAAsB,GAC5BN,KAAK+M,MAAMjN,QAAQe,QAAQ,SAAAd,GACvBA,EAAMO,SAASO,QAAQ,SAAAhB,GACfoQ,EAAKgT,aAAapjB,IAClBS,EAASmC,KAAK5C,OAI1BS,EAASuB,KAAK,SAACC,EAAGC,GACd,OAAID,EAAE2B,KAAO1B,EAAE0B,MAAgB,EAC3B3B,EAAE2B,KAAO1B,EAAE0B,KAAe,EACvB,IAEX,IAAI8uB,EAA2CjyB,EAASE,OAAO,SAAA6L,GAAC,OAAK4D,EAAK5C,MAAMupB,iBAAiBr2B,SAAS8L,KAAI/D,IAAI,SAAA+D,GAC9G,OACIsB,EAAA7L,EAAA8L,cAAC4P,EAAD,CAAa9N,IAAKrD,EAAEnM,GAAI0I,UAAWyD,EAAGkH,KAAK,iBAAiBwD,cAAe,SAAAlX,GAAO,OAAIoQ,EAAK8G,cAAclX,QAGtF,IAAvB0yB,EAAY9wB,SACZ8wB,EACI5kB,EAAA7L,EAAA8L,cAACoQ,GAAD,CACItQ,QACIC,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,kGAQhB,IAAM+oB,EAAgD52B,KAAKqN,MAAMupB,iBAAiBtuB,IAAI,SAAA+D,GAClF,OACIsB,EAAA7L,EAAA8L,cAAC4P,EAAD,CAAa9N,IAAKrD,EAAEnM,GAAI0I,UAAWyD,EAAGkH,KAAK,0BAA0ByD,gBAAiB,SAAAnX,GAAO,OAAIoQ,EAAK+G,gBAAgBnX,QAG1Hg3B,EAAuB,KAgB3B,OAfID,EAAiBn1B,OAAS,IAC1Bo1B,EACIlpB,EAAA7L,EAAA8L,cAACoQ,GAAD,CACItQ,QACIC,EAAA7L,EAAA8L,cAAA,WACID,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,wGAGAF,EAAA7L,EAAA8L,cAAA,UAAQM,QAAS,kBAAM+B,EAAK6mB,cAA5B,2BAQhBnpB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,wBACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,MAAMe,MAAO,CAAE9G,OAAQ,SAClC6F,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,+CACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,gBACAF,EAAA7L,EAAA8L,cAACmV,GAAD,CACIviB,OAAQR,KAAKqN,MAAM7M,OACnB8I,YAAa,SAAClG,EAAME,GAAP,OAAiB2M,EAAK2S,kBAAkBxf,EAAME,IAC3D0N,WAAY,SAAC5N,EAAMG,GAAP,OAAiB0M,EAAK+S,iBAAiB5f,EAAMG,IACzD4e,YAAa,kBAAMlS,EAAKkS,iBAE5BxU,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YACd0kB,GAEL5kB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,+CACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,qBACAF,EAAA7L,EAAA8L,cAAA,UACIC,UAAW7N,KAAKqN,MAAMupB,iBAAiBn1B,OAAS,EAAI,WAAa,GACjEyM,QAAS,kBAAM+B,EAAK6V,oBAFxB,6BAMAnY,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,YACdgpB,EACAD,GAELjpB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,+CACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WAAf,UACAF,EAAA7L,EAAA8L,cAAC4P,EAAD,CACI5U,UAAW5I,KAAKqN,MAAMxN,QACtB0T,KAAK,sBAM3B,MAAOvE,GACLV,QAAQC,MAAMS,WA9MsBR,IAAMC,WCmCjCsoB,eACjB,SAAAA,EAAYhqB,GAAc,IAAApD,EAAAqD,OAAAC,EAAA,EAAAD,CAAAhN,KAAA+2B,IACtBptB,EAAAqD,OAAAE,EAAA,EAAAF,CAAAhN,KAAAgN,OAAAG,EAAA,EAAAH,CAAA+pB,GAAA3pB,KAAApN,KAAM+M,KAEDM,MAAQ,CACTkgB,KAAM,OACNne,QAAS,CACL0O,UAAU,GAEdsD,QAAS,GACTthB,QAAS,GACTsjB,WAAY,GACZ8B,UAAW,GACXtG,QAAS,GACToY,gBAAiB,KACjBC,uBAAwB,KACxBC,oBAAqB,KACrBC,mBAAoB,KACpBC,iBAAkB,KAClBC,MAAO,KACP72B,OAAQ,IAGZ,IACI,IAAImI,EAAqB,KAEzB,IACI,IAAM2uB,EAAOC,OAAOC,aAAaC,QAAQ,QACrCH,IACA3uB,EAAO8C,KAAKC,MAAM4rB,IAExB,MAAOjpB,GACLC,QAAQC,MAAM,yBAA0BF,GACxC1F,EAAO,KAGE,OAATA,IACAA,EAAK7I,QAAQe,QAAQ,SAAAR,GACjBA,EAAEC,SAASO,QAAQ,SAAAwL,GACfA,EAAElF,OAAOtG,QAAQ,SAAAyL,GACbA,EAAEhF,KAAO,QAKrBqB,EAAKya,WAAWviB,QAAQ,SAAAqiB,GACfA,EAAI3b,QACL2b,EAAI3b,MAAQ,MAIfoB,EAAKuc,YACNvc,EAAKuc,UAAY,GACjBvc,EAAKwuB,mBAAqB,MAG9BxuB,EAAKiW,QAAQ/d,QAAQ,SAAA6C,GACZA,EAAO8E,gBACR9E,EAAO8E,cAAgB,IAE3B9E,EAAOU,WAAWvD,QAAQ,SAAAsD,SACHzC,IAAfyC,EAAEiY,WACFjY,EAAEiY,SAAW,GAGF,YAAXjY,EAAEf,OACQe,EACRgD,OAAOtG,QAAQ,SAAAyL,QACE5K,IAAX4K,EAAEhF,OACFgF,EAAEhF,KAAO,SAO7BqB,EAAK4kB,KAAO,OACZ5kB,EAAK0uB,MAAQ,KACb1uB,EAAKnI,OAAS,GAEdmJ,EAAK0D,MAAQ1E,GAEnB,MAAO0F,GACLC,QAAQC,MAAMF,GAlFI,OAAA1E,oFAuFtB,IAAI2tB,EAAO,KACX,IACIA,EAAO7rB,KAAKE,UAAU3L,KAAKqN,OAC7B,MAAOgB,GACLC,QAAQC,MAAM,6BAA8BF,GAC5CipB,EAAO,KAGE,OAATA,GACAC,OAAOC,aAAaE,QAAQ,OAAQJ,sCAQxC,IAAMhX,EAAQrb,EAAQ0yB,cACtBrX,EAAM7c,KAAO,YACb,IAAM2d,EAAoB,GAAenD,OAAOje,KAAKqN,MAAM+T,QAAS,CAACd,IACrE1gB,EAAMiC,KAAKuf,GACXphB,KAAKuN,SAAS,CACV6T,QAASA,EACT4V,gBAAiB1W,EAAMpgB,2CAIT,IAAAiM,EAAAnM,KACZsgB,EAAQtgB,KAAKqN,MAAM+T,QAAQhhB,KAAK,SAAAT,GAAC,OAAIA,EAAEO,KAAOiM,EAAKkB,MAAM2pB,kBAC/D,GAAI1W,EAAO,CACP,IAAMpW,EAAQlK,KAAKqN,MAAM+T,QAAQrgB,QAAQuf,GACzCtgB,KAAKqN,MAAM+T,QAAQtV,OAAO5B,EAAO,GACjClK,KAAKuN,SAAS,CACV6T,QAASphB,KAAKqN,MAAM+T,QACpB4V,gBAAiB,wCAKb,IAAA/mB,EAAAjQ,KACNsgB,EAAQtgB,KAAKqN,MAAM+T,QAAQhhB,KAAK,SAAAT,GAAC,OAAIA,EAAEO,KAAO+P,EAAK5C,MAAM2pB,kBAC/D,GAAI1W,EAAO,CACP,IAAMK,EAAK1b,EAAQ2yB,WACnBjX,EAAGld,KAAO,SACV6c,EAAMnb,IAAI1C,KAAKke,GACf3gB,KAAKuN,SAAS,CACV6T,QAASphB,KAAKqN,MAAM+T,4CAKfT,GAAQ,IAAA/K,EAAA5V,KACfsgB,EAAQtgB,KAAKqN,MAAM+T,QAAQhhB,KAAK,SAAAT,GAAC,OAAIA,EAAEO,KAAO0V,EAAKvI,MAAM2pB,kBAC/D,GAAI1W,EAAO,CACP,IAAMpW,EAAQoW,EAAMnb,IAAIpE,QAAQ4f,GAChCL,EAAMnb,IAAI2G,OAAO5B,EAAO,GACxBlK,KAAKuN,SAAS,CACV6T,QAASphB,KAAKqN,MAAM+T,6CAKd,IAAAlL,EAAAlW,KACRsgB,EAAQtgB,KAAKqN,MAAM+T,QAAQhhB,KAAK,SAAAT,GAAC,OAAIA,EAAEO,KAAOgW,EAAK7I,MAAM2pB,kBAC3D1W,IACA1gB,EAAMiC,KAAKye,EAAMnb,KACjBnF,KAAKuN,SAAS,CACV6T,QAASphB,KAAKqN,MAAM+T,qDAS5B,IAAMrhB,EAAQkF,EAAQ4yB,qBACtB93B,EAAM0D,KAAO,YACb,IAAM3D,EAAW,GAAsBme,OAAOje,KAAKqN,MAAMvN,QAAS,CAACC,IACnEH,EAAMiC,KAAK/B,GACXE,KAAKuN,SAAS,CACVzN,QAASA,EACTm3B,uBAAwBl3B,EAAMG,kDAIT,IAAAmf,EAAArf,KACnBD,EAAQC,KAAKqN,MAAMvN,QAAQM,KAAK,SAAAC,GAAC,OAAIA,EAAEH,KAAOmf,EAAKhS,MAAM4pB,yBAC/D,GAAIl3B,EAAO,CACP,IAAMmK,EAAQlK,KAAKqN,MAAMvN,QAAQiB,QAAQhB,GACzCC,KAAKqN,MAAMvN,QAAQgM,OAAO5B,EAAO,GACjClK,KAAKuN,SAAS,CACVzN,QAASE,KAAKqN,MAAMvN,QACpBm3B,uBAAwB,6CAKf,IAAAzX,EAAAxf,KACXH,EAAUoF,EAAQ2E,gBACxB/J,EAAQ4D,KAAO,cACf,IAAM1D,EAAQC,KAAKqN,MAAMvN,QAAQM,KAAK,SAAAC,GAAC,OAAIA,EAAEH,KAAOsf,EAAKnS,MAAM4pB,yBAC3Dl3B,IACAA,EAAMO,SAASmC,KAAK5C,GACpBG,KAAKuN,SAAS,CACVzN,QAASE,KAAKqN,MAAMvN,qDAM5B,IAAMD,EAAUoF,EAAQ2E,gBACxB/J,EAAQ4D,KAAO,oBACfzD,KAAKuN,SAAS,CACV8pB,MAAO,CACHj0B,KAAM,iBACNvD,QAASA,2CAKCA,GAAkB,IAAA8f,EAAA3f,KAC9BD,EAAQC,KAAKqN,MAAMvN,QAAQM,KAAK,SAAAC,GAAC,OAAIA,EAAEH,KAAOyf,EAAKtS,MAAM4pB,yBAC/D,GAAIl3B,EAAO,CACP,IAAMmK,EAAQnK,EAAMO,SAASS,QAAQlB,GACrCE,EAAMO,SAASwL,OAAO5B,EAAO,GAC7BlK,KAAKuN,SAAS,CACVzN,QAASE,KAAKqN,MAAMvN,kDAKT,IAAAgwB,EAAA9vB,KACbD,EAAQC,KAAKqN,MAAMvN,QAAQM,KAAK,SAAAC,GAAC,OAAIA,EAAEH,KAAO4vB,EAAKziB,MAAM4pB,yBAC3Dl3B,IACAH,EAAMiC,KAAK9B,EAAMO,UACjBN,KAAKuN,SAAS,CACVzN,QAASE,KAAKqN,MAAMvN,+CAKZD,EAAkB6mB,GAClC,IAAMoR,EAAc93B,KAAKqN,MAAMvN,QAAQM,KAAK,SAAAL,GAAK,OAAIA,EAAMO,SAASC,SAASV,KAC7E,GAAIi4B,EAAa,CACb,IAAM5tB,EAAQ4tB,EAAYx3B,SAASS,QAAQlB,GAC3Ci4B,EAAYx3B,SAASwL,OAAO5B,EAAO,GAEnC,IAAMnK,EAAQC,KAAKqN,MAAMvN,QAAQM,KAAK,SAAAC,GAAC,OAAIA,EAAEH,KAAOwmB,IAChD3mB,IACAA,EAAMO,SAASmC,KAAK5C,GACpBD,EAAMiC,KAAK9B,EAAMO,UAEjBN,KAAKuN,SAAS,CACVzN,QAASE,KAAKqN,MAAMvN,gDAMhBD,GAChB,IAAM2L,EAAOC,KAAKC,MAAMD,KAAKE,UAAU9L,IACvCG,KAAKuN,SAAS,CACV8pB,MAAO,CACHj0B,KAAM,UACNvD,QAAS2L,EACT0pB,cAAc,2CAKJ,IAAAnF,EAAA/vB,KACZD,EAAQC,KAAKqN,MAAMvN,QAAQM,KAAK,SAAAC,GAAC,OAAIA,EAAEH,KAAO6vB,EAAK1iB,MAAM4pB,yBAC/D,GAAIl3B,EAAO,CACP,IAAMg4B,EAAWh4B,EAAMO,SAASF,KAAK,SAAAiM,GAAC,OAAIA,EAAEnM,KAAO6vB,EAAK1iB,MAAMgqB,MAAMx3B,QAAQK,KAC5E,GAAI63B,EAAU,CAEV,IAAM7tB,EAAQnK,EAAMO,SAASS,QAAQg3B,GACrCh4B,EAAMO,SAAS4J,GAASlK,KAAKqN,MAAMgqB,MAAMx3B,QACzCG,KAAKuN,SAAS,CACVzN,QAASE,KAAKqN,MAAMvN,QACpBu3B,MAAO,YAIXt3B,EAAMO,SAASmC,KAAKzC,KAAKqN,MAAMgqB,MAAMx3B,SACrCG,KAAKuN,SAAS,CACVzN,QAASE,KAAKqN,MAAMvN,QACpBu3B,MAAO,4DAQnBr3B,KAAKqN,MAAMgqB,MAAMnC,cAAgBl1B,KAAKqN,MAAMgqB,MAAMnC,aAClDl1B,KAAKuN,SAAS,CACV8pB,MAAOr3B,KAAKqN,MAAMgqB,mDAKtBr3B,KAAKuN,SAAS,CACV8pB,MAAO,CACHj0B,KAAM,uDAKGvD,EAAkB4D,GACnC,IAAM1D,EAAQC,KAAKqN,MAAMvN,QAAQM,KAAK,SAAAC,GAAC,OAAIA,EAAEC,SAASC,SAASV,KAC/D,GAAIE,EAAO,CACP,IAAMi4B,EAAQhvB,EAAagvB,MAAMn4B,EAAS4D,GAC1C1D,EAAMO,SAASmC,KAAKu1B,GACpBp4B,EAAMiC,KAAK9B,EAAMO,UAEjBN,KAAKuN,SAAS,CACVzN,QAASE,KAAKqN,MAAMvN,wDAKH,IAAAkxB,EAAAhxB,KACzB0rB,MAAM,wBACDuM,KAAK,SAAAtM,GAAQ,OAAIA,EAAS2L,SAC1BW,KAAK,SAAAX,GACFA,EAAKz2B,QAAQ,SAAC8H,GACV,IACI,GAAIA,EAAKlF,KAAM,CACX,IAAM5D,EAAUmJ,EAAakvB,eAAevvB,GAExCwvB,EAAYt4B,EAAQkG,KAAOlG,EAAQiG,SACJ,IAA/BqyB,EAAUp3B,QAAQ,WAClBo3B,EAAY,SAEE,aAAdA,IACAA,EAAY,OAGhB,IAAIp4B,EAAQixB,EAAK3jB,MAAMvN,QAAQM,KAAK,SAAAT,GAAC,OAAIA,EAAE8D,OAAS00B,IAC/Cp4B,IACDA,EAAQ,CACJG,GAAIN,EAAMsF,OACVzB,KAAM00B,EACN73B,SAAU,IAEd0wB,EAAK3jB,MAAMvN,QAAQ2C,KAAK1C,IAE5BA,EAAMO,SAASmC,KAAK5C,IAE1B,MAAOmP,GACLV,QAAQC,MAAMS,MAItBpP,EAAMiC,KAAKmvB,EAAK3jB,MAAMvN,SAEtBkxB,EAAKzjB,SAAS,CACVggB,KAAM,UACNztB,QAASkxB,EAAK3jB,MAAMvN,mDAShC,IAAM4E,EAAYO,EAAQmzB,kBAC1B1zB,EAAUjB,KAAO,gBACjB,IAAM2f,EAAc,GAAmBnF,OAAOje,KAAKqN,MAAM+V,WAAY,CAAC1e,IACtE9E,EAAMiC,KAAKuhB,GAEXpjB,KAAKuN,SAAS,CACV6V,WAAYA,EACZ8T,oBAAqBxyB,EAAUxE,+CAIb,IAAAm4B,EAAAr4B,KAChB0E,EAAY1E,KAAKqN,MAAM+V,WAAWhjB,KAAK,SAAA4O,GAAC,OAAIA,EAAE9O,KAAOm4B,EAAKhrB,MAAM6pB,sBACtE,GAAIxyB,EAAW,CACX,IAAMwF,EAAQlK,KAAKqN,MAAM+V,WAAWriB,QAAQ2D,GAC5C1E,KAAKqN,MAAM+V,WAAWtX,OAAO5B,EAAO,GAEpClK,KAAKuN,SAAS,CACV6V,WAAYpjB,KAAKqN,MAAM+V,WACvB8T,oBAAqB,iDAKRr3B,EAAkBqI,GAAuB,IAAAowB,EAAAt4B,KACxDD,EAAQC,KAAKqN,MAAMvN,QAAQM,KAAK,SAAAC,GAAC,OAAIA,EAAEC,SAASC,SAASV,KAC/D,GAAIE,EAAO,CACP,IAAM8E,EAAOI,EAAQszB,sBACrB1zB,EAAK2C,iBAAmBzH,EAAM0D,KAC9BoB,EAAKE,YAAclF,EAAQ4D,KAC3B,IAAMiB,EAAY1E,KAAKqN,MAAM+V,WAAWhjB,KAAK,SAAA4O,GAAC,OAAIA,EAAE9O,KAAOo4B,EAAKjrB,MAAM6pB,sBACtE,GAAIxyB,EAAW,CACX,GAAe,OAAXwD,EAAiB,CACjB,IAAMyN,EAAOjR,EAAU6C,MAAMnH,KAAK,SAAAyjB,GAAC,OAAIA,EAAE3jB,KAAOgI,IAC5CyN,IACAA,EAAK/Q,MAAMnC,KAAKoC,GAChB7E,KAAKw4B,mBAAmB7iB,SAG5BjR,EAAUE,MAAMnC,KAAKoC,GACrB7E,KAAKw4B,mBAAmB9zB,GAG5B1E,KAAKuN,SAAS,CACV6V,WAAYpjB,KAAKqN,MAAM+V,2DAMXve,EAAqBqD,GAAuB,IAAAuwB,EAAAz4B,KAC9D0E,EAAY1E,KAAKqN,MAAM+V,WAAWhjB,KAAK,SAAA4O,GAAC,OAAIA,EAAE9O,KAAOu4B,EAAKprB,MAAM6pB,sBACtE,GAAIxyB,EAAW,CACX,GAAIwD,EAAQ,CACR,IAAMyN,EAAOjR,EAAU6C,MAAMnH,KAAK,SAAAyjB,GAAC,OAAIA,EAAE3jB,KAAOgI,IAChD,GAAIyN,EAAM,CACN,IAAMzL,EAAQyL,EAAK/Q,MAAM7D,QAAQ8D,GACjC8Q,EAAK/Q,MAAMkH,OAAO5B,EAAO,QAE1B,CACH,IAAMlF,EAAIN,EAAUE,MAAM7D,QAAQ8D,GAClCH,EAAUE,MAAMkH,OAAO9G,EAAG,GAG9BhF,KAAKuN,SAAS,CACV6V,WAAYpjB,KAAKqN,MAAM+V,yDAKRsV,GACvBA,EAAc9zB,MAAM/C,KAAK,SAACC,EAAGC,GACzB,IAAM42B,EAAQ72B,EAAEiD,YAAYpE,cACtBi4B,EAAQ72B,EAAEgD,YAAYpE,cAC5B,OAAIg4B,EAAQC,GAAiB,EACzBD,EAAQC,EAAgB,EACrB,iDAIc,IAAAC,EAAA74B,KACnB0E,EAAY1E,KAAKqN,MAAM+V,WAAWhjB,KAAK,SAAA4O,GAAC,OAAIA,EAAE9O,KAAO24B,EAAKxrB,MAAM6pB,sBACtE,GAAIxyB,EAAW,CACX,IAAMiR,EAAO1Q,EAAQ6zB,sBACrBnjB,EAAKlS,KAAO,SAAWiB,EAAU6C,MAAM9F,OAAS,GAChDiD,EAAU6C,MAAM9E,KAAKkT,GAErB3V,KAAKuN,SAAS,CACV6V,WAAYpjB,KAAKqN,MAAM+V,iDAKhBzN,GAAqB,IAAAojB,EAAA/4B,KAC9B0E,EAAY1E,KAAKqN,MAAM+V,WAAWhjB,KAAK,SAAA4O,GAAC,OAAIA,EAAE9O,KAAO64B,EAAK1rB,MAAM6pB,sBACtE,GAAIxyB,EAAW,CACX,IAAMwF,EAAQxF,EAAU6C,MAAMxG,QAAQ4U,GACtCjR,EAAU6C,MAAMuE,OAAO5B,EAAO,GAE9BlK,KAAKuN,SAAS,CACV6V,WAAYpjB,KAAKqN,MAAM+V,oDAS/B,IAAM4B,EAAQ/f,EAAQ+zB,iBACtBhU,EAAMvhB,KAAO,YACb,IAAM0hB,EAAU,GAAkBlH,OAAOje,KAAKqN,MAAM6X,UAAW,CAACF,IAChEplB,EAAMiC,KAAKsjB,GAEXnlB,KAAKuN,SAAS,CACV2X,UAAWC,EACXgS,mBAAoBnS,EAAM9kB,8CAIT,IAAA+4B,EAAAj5B,KACfglB,EAAQhlB,KAAKqN,MAAM6X,UAAU9kB,KAAK,SAAAglB,GAAC,OAAIA,EAAEllB,KAAO+4B,EAAK5rB,MAAM8pB,qBACjE,GAAInS,EAAO,CACP,IAAM9a,EAAQlK,KAAKqN,MAAM6X,UAAUnkB,QAAQikB,GAC3ChlB,KAAKqN,MAAM6X,UAAUpZ,OAAO5B,EAAO,GAEnClK,KAAKuN,SAAS,CACV2X,UAAWllB,KAAKqN,MAAM6X,UACtBiS,mBAAoB,yCAKf,IAAA+B,EAAAl5B,KACPglB,EAAQhlB,KAAKqN,MAAM6X,UAAU9kB,KAAK,SAAAglB,GAAC,OAAIA,EAAEllB,KAAOg5B,EAAK7rB,MAAM8pB,qBACjE,GAAInS,EAAO,CACP,IAAM1c,EAAMrD,EAAQk0B,YACpB7wB,EAAI7E,KAAO,UACXuhB,EAAMvd,KAAKhF,KAAK6F,GAEhBtI,KAAKuN,SAAS,CACV2X,UAAWllB,KAAKqN,MAAM6X,6CAKlB5c,GACZ,IAAMkD,EAAOC,KAAKC,MAAMD,KAAKE,UAAUrD,IACvCtI,KAAKuN,SAAS,CACV8pB,MAAO,CACHj0B,KAAM,MACNkF,IAAKkD,uCAKC,IAAA4tB,EAAAp5B,KACRglB,EAAQhlB,KAAKqN,MAAM6X,UAAU9kB,KAAK,SAAAglB,GAAC,OAAIA,EAAEllB,KAAOk5B,EAAK/rB,MAAM8pB,qBACjE,GAAInS,EAAO,CACP,IAAM+S,EAAW/S,EAAMvd,KAAKrH,KAAK,SAAAiM,GAAC,OAAIA,EAAEnM,KAAOk5B,EAAK/rB,MAAMgqB,MAAM/uB,IAAIpI,KACpE,GAAI63B,EAAU,CACV,IAAM7tB,EAAQ8a,EAAMvd,KAAK1G,QAAQg3B,GACjC/S,EAAMvd,KAAKyC,GAASlK,KAAKqN,MAAMgqB,MAAM/uB,IACrCtI,KAAKuN,SAAS,CACV2X,UAAWllB,KAAKqN,MAAM6X,UACtBmS,MAAO,2CAML/uB,GAAU,IAAA+wB,EAAAr5B,KAClBglB,EAAQhlB,KAAKqN,MAAM6X,UAAU9kB,KAAK,SAAAglB,GAAC,OAAIA,EAAEllB,KAAOm5B,EAAKhsB,MAAM8pB,qBACjE,GAAInS,EAAO,CACP,IAAM9a,EAAQ8a,EAAMvd,KAAK1G,QAAQuH,GACjC0c,EAAMvd,KAAKqE,OAAO5B,EAAO,GACzBlK,KAAKuN,SAAS,CACV2X,UAAWllB,KAAKqN,MAAM6X,oDAS9B,IAAM5E,EAAsC,IAA9BtgB,KAAKqN,MAAM+T,QAAQ3f,OAAezB,KAAKqN,MAAM+T,QAAQ,GAAK,KAClE1c,EAA6C,IAAjC1E,KAAKqN,MAAM+V,WAAW3hB,OAAezB,KAAKqN,MAAM+V,WAAW,GAAK,KAE5EkW,EAAQr0B,EAAQs0B,oBACtBD,EAAMtxB,QAAUsY,EAAQA,EAAMpgB,GAAK,KACnCo5B,EAAMrxB,YAAcvD,EAAYA,EAAUxE,GAAK,KAC3CwE,IACA40B,EAAM30B,aAAe/E,EAAM4uB,gBAAgB9pB,IAG/C1E,KAAKuN,SAAS,CACV8pB,MAAO,CACHj0B,KAAM,eACNkrB,YAAagL,2CAKH,IAAAE,EAAAx5B,KACZsuB,EAA2BtuB,KAAKqN,MAAMgqB,MAAM/I,YAC5ChO,EAAQtgB,KAAKqN,MAAM+T,QAAQhhB,KAAK,SAAAT,GAAC,OAAIA,EAAEO,KAAOouB,EAAYtmB,UAC1DtD,EAAY1E,KAAKqN,MAAM+V,WAAWhjB,KAAK,SAAA4O,GAAC,OAAIA,EAAE9O,KAAOouB,EAAYrmB,cACvE,GAAIqY,GAAS5b,EAAW,CACpB,IAAM+0B,EAAYnZ,EAAM7c,MAAQ,gBAC1B4f,EAAgB3e,EAAUjB,MAAQ,oBAElCC,EAASuB,EAAQ+Z,eA6EvB,GA5EAtb,EAAOD,KAAOg2B,EAAY,OAASpW,EACnC3f,EAAOuE,YAAcvD,EAAUxE,GAG/BogB,EAAMnb,IAAI3E,OAAO,SAAAmgB,GAAE,OAAIA,EAAGvb,SAAQvE,QAAQ,SAAA8f,GACtC,IAAM/X,EAAY6C,KAAKC,MAAMD,KAAKE,UAAUgV,IAE5C/X,EAAU4D,SAAU,EACpB5D,EAAUyO,SAAU,EACpBzO,EAAUxD,QAAS,EACnBwD,EAAU0O,UAAW,EAErB1O,EAAUrE,YAAcoc,EAAGld,KAC3BmF,EAAUhD,WAAa,GACvBgD,EAAUa,GAAK,KACfb,EAAUwJ,WAAa,GACvBxJ,EAAUwT,SAAW,EAErB1Y,EAAOU,WAAW3B,KAAKmG,KAG3BlE,EAAUE,MAAM/D,QAAQ,SAAAgE,GACpB,IAAMhF,EAAU25B,EAAKxZ,WAAWnb,EAAKE,YAAaF,EAAK2C,kBACvD,GAAI3H,EAIA,IAHA,IAAM65B,EAAOl3B,SAAS5C,EAAMsS,SAASrS,EAAQqG,cAAcC,KAAM,IAC3DwzB,EAAY/5B,EAAMmrB,UAEf/lB,EAAI,EAAGA,IAAMH,EAAK5B,QAAS+B,EAAG,CACnC,IAAM40B,EAAah6B,EAAMmrB,UAEnBniB,EAAY6C,KAAKC,MAAMD,KAAKE,UAAU9L,IAI5C,GAHA+I,EAAU1I,GAAKN,EAAMsF,OAErB0D,EAAUrE,YAAc,KACpB+pB,EAAY3pB,aAAc,CAC1B,IAAMsrB,EAAY3B,EAAY3pB,aAAavE,KAAK,SAAA0E,GAAK,OAAIA,EAAM5E,KAAO2E,EAAK3E,KACvE+vB,IACArnB,EAAUrE,YAAc0rB,EAAUnrB,MAAME,IAIhD,OAAQspB,EAAYjmB,mBAChB,IAAK,SACDO,EAAUhD,WAAa,GACvB,MACJ,IAAK,QACDgD,EAAUhD,WAAa8zB,EAAOC,EAC9B,MACJ,IAAK,aACD/wB,EAAUhD,WAAa8zB,EAAOE,EAOtChxB,EAAU4D,SAAU,EACpB5D,EAAUyO,QAA6C,WAAlCiX,EAAYjmB,kBACjCO,EAAUxD,OAA4C,WAAlCkpB,EAAYjmB,kBAChCO,EAAU0O,UAAW,EAErB1O,EAAUa,GAAKb,EAAUhG,MACzBgG,EAAUwJ,WAAa,GACvBxJ,EAAUwT,SAAW,EAErB1Y,EAAOU,WAAW3B,KAAKmG,QAG3BlF,EAAO+E,OAAOhG,KAAK,oBAAsBoC,EAAKE,YAAc,aAAeF,EAAK2C,oBAIxF9D,EAAOU,WAAWvD,QAAQ,SAAAsD,GAAC,OAAIA,EAAEiY,SAAW,IAE5Cpc,KAAK65B,eAAen2B,GAEhB4qB,EAAYnmB,SAAWmmB,EAAYlmB,MAAO,CAC1C,IAAM4c,EAAQhlB,KAAKqN,MAAM6X,UAAU9kB,KAAK,SAAAglB,GAAC,OAAIA,EAAEllB,KAAOouB,EAAYnmB,UAClE,GAAI6c,EAAO,CACP,IAAM1c,EAAM0c,EAAMvd,KAAKrH,KAAK,SAAAiM,GAAC,OAAIA,EAAEnM,KAAOouB,EAAYlmB,QAClDE,IACA5E,EAAO4E,IAAMmD,KAAKC,MAAMD,KAAKE,UAAUrD,MAKnDtI,KAAKuN,SAAS,CACVqR,QAAU,GAAgBX,OAAOje,KAAKqN,MAAMuR,QAAS,CAAClb,IACtD0zB,iBAAkB1zB,EAAOxD,GACzBm3B,MAAO,gDAKK,IAAAyC,EAAA95B,KACd0D,EAAS1D,KAAKqN,MAAMuR,QAAQxe,KAAK,SAAA+D,GAAC,OAAIA,EAAEjE,KAAO45B,EAAKzsB,MAAM+pB,mBAChE,GAAI1zB,EAAQ,CACR,IAAMgB,EAAY1E,KAAKqN,MAAM+V,WAAWhjB,KAAK,SAAA4O,GAAC,OAAIA,EAAE9O,KAAOwD,EAAOuE,cAClE,GAAIvD,EAAW,CACX,IAAM40B,EAAQr0B,EAAQs0B,oBACtBD,EAAMrxB,YAAcvE,EAAOuE,YAC3BqxB,EAAM30B,aAAe/E,EAAM4uB,gBAAgB9pB,GAE3C1E,KAAKuN,SAAS,CACV8pB,MAAO,CACHj0B,KAAM,cACNkrB,YAAagL,6CAOX,IAAAS,EAAA/5B,KACZ0D,EAAS1D,KAAKqN,MAAMuR,QAAQxe,KAAK,SAAA+D,GAAC,OAAIA,EAAEjE,KAAO65B,EAAK1sB,MAAM+pB,mBAC5D1zB,IACAA,EAAOgF,WAAY,IAAIsxB,MAAOC,iBAC9Bj6B,KAAKuN,SAAS,CACVqR,QAAS5e,KAAKqN,MAAMuR,QACpBwY,iBAAkB,6CAKT1zB,GACjB1D,KAAKuN,SAAS,CACV6pB,iBAAkB1zB,EAAOxD,yCAIb,IAAAg6B,EAAAl6B,KACV0D,EAAS1D,KAAKqN,MAAMuR,QAAQxe,KAAK,SAAA+D,GAAC,OAAIA,EAAEjE,KAAOg6B,EAAK7sB,MAAM+pB,mBAChE,GAAI1zB,EAAQ,CACR,IAAMwG,EAAQlK,KAAKqN,MAAMuR,QAAQ7d,QAAQ2C,GACzC1D,KAAKqN,MAAMuR,QAAQ9S,OAAO5B,EAAO,GACjClK,KAAKuN,SAAS,CACVqR,QAAS5e,KAAKqN,MAAMuR,QACpBwY,iBAAkB,4CAKVxuB,EAA4DuxB,GAAmB,IAAAC,EAAAp6B,KACzF0D,EAAS1D,KAAKqN,MAAMuR,QAAQxe,KAAK,SAAA+D,GAAC,OAAIA,EAAEjE,KAAOk6B,EAAK/sB,MAAM+pB,mBAC5D1zB,IAEAA,EAAOU,WAAW5D,OAAO,SAAA65B,GAAK,OAAIA,EAAMjoB,aAAYvR,QAAQ,SAAAw5B,GACxDA,EAAMjoB,WAAWvR,QAAQ,SAAAsD,GACrB,GAAIA,EAAER,SACF,OAAQQ,EAAER,SAASP,MACf,IAAK,QAEGM,GAAUkF,GAAcyxB,EAAMn6B,KAAO0I,EAAU1I,IAA6B,UAArBiE,EAAER,SAASO,OAClER,EAAO8E,cAAc/F,KAAK,CACtBvC,GAAIN,EAAMsF,OACV9B,KAAM,iBACNuF,KAAMxE,EACNyE,UAAWA,IAGnB,MACJ,IAAK,YAED,GAAIlF,GAAUkF,GAAczE,EAAER,SAASW,cAAgBsE,EAAU1I,IAA6B,UAArBiE,EAAER,SAASO,MAAoB,CACpG,IAAMgG,EAAQmwB,EAAMjoB,WAAWrR,QAAQoD,GACvCk2B,EAAMjoB,WAAWtG,OAAO5B,EAAO,GAE/BxG,EAAO8E,cAAc/F,KAAK,CACtBvC,GAAIN,EAAMsF,OACV9B,KAAM,gBACNuF,KAAMxE,EACNyE,UAAWA,IAGnB,MACJ,IAAK,SAMD,GAJIA,GAAcyxB,EAAMn6B,KAAO0I,EAAU1I,KACrCiE,EAAER,SAASV,OAAS,GAGC,IAArBkB,EAAER,SAASV,MAAa,CACxB,IAAM+B,EAAIq1B,EAAMjoB,WAAWrR,QAAQoD,GACnCk2B,EAAMjoB,WAAWtG,OAAO9G,EAAG,GACvBtB,GAEAA,EAAO8E,cAAc/F,KAAK,CACtBvC,GAAIN,EAAMsF,OACV9B,KAAM,gBACNuF,KAAMxE,EACNyE,UAAWA,UAcvCA,GAAiC,YAAnBA,EAAUxF,MACvBwF,EAAsBzB,OAClB3G,OAAO,SAAA8L,GAAC,OAAKA,EAAEhF,KAAO,GAAMgF,EAAEjF,MAAM1G,cAAc0T,WAAW,eAC7DxT,QAAQ,SAAAyL,GACL5I,EAAO8E,cAAc/F,KAAK,CACtBvC,GAAIN,EAAMsF,OACV9B,KAAM,iBACNuF,KAAM2D,EACN1D,UAAWA,MAK3BlF,EAAOU,WAAWvD,QAAQ,SAAAsD,GACtBA,EAAEqI,SAAU,IAEZ5D,IACAA,EAAU4D,SAAU,GAGpB2tB,IACAz2B,EAAO6E,OAAS,GAGpBvI,KAAKuN,SAAS,CACVqR,QAAS5e,KAAKqN,MAAMuR,8CAKbhW,GAAqD,IAAA0xB,EAAAt6B,KAC9D0D,EAAS1D,KAAKqN,MAAMuR,QAAQxe,KAAK,SAAA+D,GAAC,OAAIA,EAAEjE,KAAOo6B,EAAKjtB,MAAM+pB,mBAC5D1zB,IACAkF,EAAUyO,SAAU,EACpBzO,EAAUxD,QAAS,EACnBwD,EAAU0O,UAAW,EAErBtX,KAAK65B,eAAen2B,GAEpB1D,KAAKuN,SAAS,CACVqR,QAAS5e,KAAKqN,MAAMuR,gDAKXhW,GACjBA,EAAUyO,SAAU,EACpBzO,EAAUxD,QAAS,EACnBwD,EAAU0O,UAAW,EAEjB1O,EAAU4D,QACVxM,KAAKwX,QAAQ5O,GAEb5I,KAAKuN,SAAS,CACVqR,QAAS5e,KAAKqN,MAAMuR,oDAKN,IAAA2b,EAAAv6B,KAChBsuB,EAA2BtuB,KAAKqN,MAAMgqB,MAAM/I,YAC5C5pB,EAAY1E,KAAKqN,MAAM+V,WAAWhjB,KAAK,SAAA4O,GAAC,OAAIA,EAAE9O,KAAOouB,EAAYrmB,cACjEvE,EAAS1D,KAAKqN,MAAMuR,QAAQxe,KAAK,SAAA+D,GAAC,OAAIA,EAAEjE,KAAOq6B,EAAKltB,MAAM+pB,mBAChE,GAAI9I,GAAe5pB,GAAahB,EAAQ,CACpC,IAAMiS,EAAOjR,EAAU6C,MAAMnH,KAAK,SAAAyjB,GAAC,OAAIA,EAAE3jB,KAAOouB,EAAYpmB,SACxDyN,IACAA,EAAK/Q,MAAM/D,QAAQ,SAAAgE,GACf,IAAMhF,EAAU06B,EAAKva,WAAWnb,EAAKE,YAAaF,EAAK2C,kBACvD,GAAI3H,EAIA,IAHA,IAAM65B,EAAOl3B,SAAS5C,EAAMsS,SAASrS,EAAQqG,cAAcC,KAAM,IAC3DwzB,EAAY/5B,EAAMmrB,UAEf/lB,EAAI,EAAGA,IAAMH,EAAK5B,QAAS+B,EAAG,CACnC,IAAM40B,EAAah6B,EAAMmrB,UAEnBniB,EAAY6C,KAAKC,MAAMD,KAAKE,UAAU9L,IAI5C,GAHA+I,EAAU1I,GAAKN,EAAMsF,OAErB0D,EAAUrE,YAAc,KACpB+pB,EAAY3pB,aAAc,CAC1B,IAAMsrB,EAAY3B,EAAY3pB,aAAavE,KAAK,SAAA0E,GAAK,OAAIA,EAAM5E,KAAO2E,EAAK3E,KACvE+vB,IACArnB,EAAUrE,YAAc0rB,EAAUnrB,MAAME,IAIhD,OAAQspB,EAAYjmB,mBAChB,IAAK,SACDO,EAAUhD,WAAa,GACvB,MACJ,IAAK,QACDgD,EAAUhD,WAAa8zB,EAAOC,EAC9B,MACJ,IAAK,aACD/wB,EAAUhD,WAAa8zB,EAAOE,EAOtChxB,EAAU4D,SAAU,EACpB5D,EAAUyO,QAA8D,WAAnDkjB,EAAKltB,MAAMgqB,MAAM/I,YAAYjmB,kBAClDO,EAAUxD,OAA6D,WAAnDm1B,EAAKltB,MAAMgqB,MAAM/I,YAAYjmB,kBACjDO,EAAU0O,UAAW,EAErB1O,EAAUa,GAAKb,EAAUhG,MACzBgG,EAAUwJ,WAAa,GAEnB1O,GACAA,EAAOU,WAAW3B,KAAKmG,QAI/B,GAAIlF,EAAQ,CACR,IAAM82B,EAAQ,oBAAsB31B,EAAKE,YAAc,aAAeF,EAAK2C,iBAC3E9D,EAAO+E,OAAOhG,KAAK+3B,MAK/Bx6B,KAAK65B,eAAen2B,GAEpB1D,KAAKuN,SAAS,CACVqR,QAAS5e,KAAKqN,MAAMuR,QACpByY,MAAO,iDAMCzuB,GAAqD,IAAA6xB,EAAAz6B,KACnE0D,EAAS1D,KAAKqN,MAAMuR,QAAQxe,KAAK,SAAA+D,GAAC,OAAIA,EAAEjE,KAAOu6B,EAAKptB,MAAM+pB,mBAChE,GAAI1zB,EAAQ,CACR,IAAMwG,EAAQxG,EAAOU,WAAWrD,QAAQ6H,GACxClF,EAAOU,WAAW0H,OAAO5B,EAAO,GAEhClK,KAAKuN,SAAS,CACVqR,QAAS5e,KAAKqN,MAAMuR,0CAKjBhW,EAAuDjB,EAAWC,GAAW,IAAA8yB,EAAA16B,KAClFmqB,EAAOllB,EAAQsuB,gBACrBpJ,EAAKjqB,GAAK0I,EAAU1I,GACpBiqB,EAAK/mB,KAAOwF,EAAUxF,KACtB+mB,EAAKxiB,EAAIA,EACTwiB,EAAKviB,EAAIA,EACT,IAAItF,EAAO,EACY,YAAnBsG,EAAUxF,OACVd,EAAO1C,EAAM+6B,SAAU/xB,EAAsBtG,OAEjD6nB,EAAKriB,OAASxF,EACd6nB,EAAKtiB,MAAQvF,EAEb,IAAMoB,EAAS1D,KAAKqN,MAAMuR,QAAQxe,KAAK,SAAA+D,GAAC,OAAIA,EAAEjE,KAAOw6B,EAAKrtB,MAAM+pB,mBAC5D1zB,GAAUA,EAAO4E,MACjB5E,EAAO4E,IAAIZ,MAAMjF,KAAK0nB,GAEtBnqB,KAAKuN,SAAS,CACVqR,QAAS5e,KAAKqN,MAAMuR,2CAKhBhW,EAAqDhH,GAAa,IAAAg5B,EAAA56B,KACxE0D,EAAS1D,KAAKqN,MAAMuR,QAAQxe,KAAK,SAAA+D,GAAC,OAAIA,EAAEjE,KAAO06B,EAAKvtB,MAAM+pB,mBAChE,GAAI1zB,GAAUA,EAAO4E,IAAK,CACtB,IAAM6hB,EAAOzmB,EAAO4E,IAAIZ,MAAMtH,KAAK,SAAAiZ,GAAC,OAAIA,EAAEnZ,KAAO0I,EAAU1I,KAC3D,GAAIiqB,EAAM,CACN,OAAQvoB,GACJ,IAAK,IACDuoB,EAAKviB,GAAK,EACV,MACJ,IAAK,KACDuiB,EAAKxiB,GAAK,EACVwiB,EAAKviB,GAAK,EACV,MACJ,IAAK,IACDuiB,EAAKxiB,GAAK,EACV,MACJ,IAAK,KACDwiB,EAAKxiB,GAAK,EACVwiB,EAAKviB,GAAK,EACV,MACJ,IAAK,IACDuiB,EAAKviB,GAAK,EACV,MACJ,IAAK,KACDuiB,EAAKxiB,GAAK,EACVwiB,EAAKviB,GAAK,EACV,MACJ,IAAK,IACDuiB,EAAKxiB,GAAK,EACV,MACJ,IAAK,KACDwiB,EAAKxiB,GAAK,EACVwiB,EAAKviB,GAAK,EAOlB5H,KAAKuN,SAAS,CACVqR,QAAS5e,KAAKqN,MAAMuR,8CAMlBhW,GAAqD,IAAAiyB,EAAA76B,KAC7D0D,EAAS1D,KAAKqN,MAAMuR,QAAQxe,KAAK,SAAA+D,GAAC,OAAIA,EAAEjE,KAAO26B,EAAKxtB,MAAM+pB,mBAChE,GAAI1zB,GAAUA,EAAO4E,IAAK,CACtB,IAAM6hB,EAAOzmB,EAAO4E,IAAIZ,MAAMtH,KAAK,SAAAiZ,GAAC,OAAIA,EAAEnZ,KAAO0I,EAAU1I,KAC3D,GAAIiqB,EAAM,CACN,IAAMjgB,EAAQxG,EAAO4E,IAAIZ,MAAM3G,QAAQopB,GACvCzmB,EAAO4E,IAAIZ,MAAMoE,OAAO5B,EAAO,GAE/BlK,KAAKuN,SAAS,CACVqR,QAAS5e,KAAKqN,MAAMuR,4CAMpBhW,GAAqD,IAAAkyB,EAAA96B,KAC3D0D,EAAS1D,KAAKqN,MAAMuR,QAAQxe,KAAK,SAAA+D,GAAC,OAAIA,EAAEjE,KAAO46B,EAAKztB,MAAM+pB,mBAChE,GAAI1zB,EAAQ,CAERA,EAAOU,WAAW5D,OAAO,SAAA65B,GAAK,OAAIA,EAAMjoB,aAAYvR,QAAQ,SAAAw5B,GACxDA,EAAMjoB,WAAWvR,QAAQ,SAAAsD,GACrB,GAAIA,EAAER,SACF,OAAQQ,EAAER,SAASP,MACf,IAAK,QAED,GAAIM,GAAW22B,EAAMn6B,KAAO0I,EAAU1I,IAA6B,QAArBiE,EAAER,SAASO,MAAkB,CACvE,IAAM62B,EAAmB91B,EAAQ+1B,qBACjCD,EAAiB33B,KAAO,iBACxB23B,EAAiBpyB,KAAOxE,EACxB42B,EAAiBnyB,UAAYA,EAC7BlF,EAAO8E,cAAc/F,KAAKs4B,GAE9B,MACJ,IAAK,YAED,GAAIr3B,GAAWS,EAAER,SAASW,cAAgBsE,EAAU1I,IAA6B,QAArBiE,EAAER,SAASO,MAAkB,CACrF,IAAMc,EAAIq1B,EAAMjoB,WAAWrR,QAAQoD,GACnCk2B,EAAMjoB,WAAWtG,OAAO9G,EAAG,GAE3B,IAAMi2B,EAAkBh2B,EAAQ+1B,qBAChCC,EAAgB73B,KAAO,gBACvB63B,EAAgBtyB,KAAOxE,EACvB82B,EAAgBryB,UAAYA,EAC5BlF,EAAO8E,cAAc/F,KAAKw4B,SAclD,IAAM71B,EAAS1B,EAAOU,WAAW5D,OAAO,SAAA2D,GACpC,OAAOA,EAAEqI,UAAarI,EAAEkT,SAAWlT,EAAEiB,SAAWjB,EAAEmT,WAEtD,GAAsB,IAAlBlS,EAAO3D,OAEPzB,KAAK0X,YAAY,MAAM,QACpB,GAAuB,IAAlBtS,EAAO3D,QAAkB2D,EAAO,GAAGkS,SAE3CtX,KAAK0X,YAAY,MAAM,OACpB,CACH,IAAIxN,EAAQ9E,EAAOrE,QAAQ6H,GAAa,EACpCuxB,GAAW,EACXjwB,GAAS9E,EAAO3D,SAChByI,EAAQ,EACRiwB,GAAW,GAEfn6B,KAAK0X,YAAYtS,EAAO8E,GAAQiwB,sCAK3BvxB,EAAgCa,EAAY8L,GACzD3M,EAAUa,GAAKA,EACfb,EAAUpC,OAAS+O,EAEnBvV,KAAKuN,SAAS,CACVqR,QAAS5e,KAAKqN,MAAMuR,+CAIPhW,GAAgC,IAAAsyB,EAAAl7B,KAC3C0D,EAAS1D,KAAKqN,MAAMuR,QAAQxe,KAAK,SAAA+D,GAAC,OAAIA,EAAEjE,KAAOg7B,EAAK7tB,MAAM+pB,mBAChE,GAAI1zB,EAAQ,CACR,IAAMF,EAAYyB,EAAQk2B,kBAC1B33B,EAAUC,KAAO,UAEjBzD,KAAKuN,SAAS,CACV8pB,MAAO,CACHj0B,KAAM,gBACNI,UAAWA,EACXoF,UAAWA,EACXlF,OAAQA,sDAOpB1D,KAAKqN,MAAMgqB,MAAMzuB,UAAUwJ,WAAW3P,KAAKzC,KAAKqN,MAAMgqB,MAAM7zB,WAE5DxD,KAAKuN,SAAS,CACVqR,QAAS5e,KAAKqN,MAAMuR,QACpByY,MAAO,6CAIOzuB,EAAgCpF,GAAsB,IAAA43B,EAAAp7B,KAClE0D,EAAS1D,KAAKqN,MAAMuR,QAAQxe,KAAK,SAAA+D,GAAC,OAAIA,EAAEjE,KAAOk7B,EAAK/tB,MAAM+pB,mBAC5D1zB,GACA1D,KAAKuN,SAAS,CACV8pB,MAAO,CACHj0B,KAAM,iBACNI,UAAWA,EACXoF,UAAWA,EACXlF,OAAQA,sDAMS,IAAA23B,EAAAr7B,KACvBoS,EAA0BpS,KAAKqN,MAAMgqB,MAAMzuB,UAAUwJ,WACrD2lB,EAAW3lB,EAAWhS,KAAK,SAAA+D,GAAC,OAAIA,EAAEjE,KAAOm7B,EAAKhuB,MAAMgqB,MAAM7zB,UAAUtD,KAC1E,GAAI63B,EAAU,CACV,IAAM7tB,EAAQkI,EAAWrR,QAAQg3B,GAEjC3lB,EAAWlI,GAASlK,KAAKqN,MAAMgqB,MAAM7zB,UAErCxD,KAAKuN,SAAS,CACVqR,QAAS5e,KAAKqN,MAAMuR,QACpByY,MAAO,gDAKKzuB,EAAgC6J,GACpD,IAAMjP,EAAYoF,EAAUwJ,WAAWhS,KAAK,SAAA+D,GAAC,OAAIA,EAAEjE,KAAOuS,IAC1D,GAAIjP,EAAW,CACX,IAAM0G,EAAQtB,EAAUwJ,WAAWrR,QAAQyC,GAC3CoF,EAAUwJ,WAAWtG,OAAO5B,EAAO,GAEnClK,KAAKuN,SAAS,CACVqR,QAAS5e,KAAKqN,MAAMuR,kDAKTlb,GACnBA,EAAOU,WAAWvC,KAAK,SAACC,EAAGC,GAEvB,OAAID,EAAE8D,YAAc7D,EAAE6D,YAAe9D,EAAE8D,WAAa7D,EAAE6D,WAAsB,EACxE9D,EAAE8D,YAAc7D,EAAE6D,YAAe9D,EAAE8D,WAAa7D,EAAE6D,YAAuB,EAEzE9D,EAAE2B,KAAO1B,EAAE0B,MAAgB,EAC3B3B,EAAE2B,KAAO1B,EAAE0B,KAAe,EACvB,8CAIW4a,EAA4B7L,GAA0B,IAAA8oB,EAAAt7B,KACtE0D,EAAS1D,KAAKqN,MAAMuR,QAAQxe,KAAK,SAAA+D,GAAC,OAAIA,EAAEjE,KAAOo7B,EAAKjuB,MAAM+pB,mBAChE,GAAI1zB,EAAQ,CACR,IAAMwG,EAAQxG,EAAO8E,cAAczH,QAAQsd,GAG3C,GAFA3a,EAAO8E,cAAcsD,OAAO5B,EAAO,GAE/BsI,GAAmB6L,EAAazV,WAAayV,EAAa1V,KAAM,CAChE,IAAM4yB,EAAiBld,EAAazV,UAAUwJ,WAAWrR,QAAQsd,EAAa1V,MAC9E0V,EAAazV,UAAUwJ,WAAWtG,OAAOyvB,EAAgB,GAG7Dv7B,KAAKuN,SAAS,CACVqR,QAAS5e,KAAKqN,MAAMuR,2CAOhB2O,GACZvtB,KAAKuN,SAAS,CACVggB,KAAMA,wCAKVvtB,KAAKuN,SAAS,CACV8pB,MAAO,CACHj0B,KAAM,gDAMdpD,KAAKuN,SAAS,CACV8pB,MAAO,2CAIK/W,GAChBtgB,KAAKuN,SAAS,CACVypB,gBAAiB1W,EAAQA,EAAMpgB,GAAK,kDAIjBH,GACvBC,KAAKuN,SAAS,CACV0pB,uBAAwBl3B,EAAQA,EAAMG,GAAK,+CAI3BwE,GACpB1E,KAAKuN,SAAS,CACV2pB,oBAAqBxyB,EAAYA,EAAUxE,GAAK,8CAIjC4kB,GACnB9kB,KAAKuN,SAAS,CACV4pB,mBAAoBrS,EAAWA,EAAS5kB,GAAK,0CAKjDF,KAAKuN,SAAS,CACV6T,QAAS,GACT4V,gBAAiB,KACjBl3B,QAAS,GACTm3B,uBAAwB,KACxB7T,WAAY,GACZ8T,oBAAqB,KACrBhS,UAAW,GACXiS,mBAAoB,KACpBvY,QAAS,GACTwY,iBAAkB,0CAMPryB,EAAqBozB,GACpC,IAAMp4B,EAAQC,KAAKqN,MAAMvN,QAAQM,KAAK,SAAAT,GAAC,OAAIA,EAAE8D,OAAS00B,IACtD,GAAIp4B,EACA,OAAOA,EAAMO,SAASF,KAAK,SAAAP,GAAO,OAAIA,EAAQ4D,OAASsB,wCAM3C6D,EAAgBxF,EAAcE,GAAY,IAAAk4B,EAAAx7B,KAC1D,OAAQoD,GACJ,IAAK,KACDE,EAAQrC,KAAKoU,IAAI/R,EAAOsF,EAAUhG,OAClCU,EAAQrC,KAAKmU,IAAI9R,EAAO,GACxB,MACJ,IAAK,SACDA,EAAQrC,KAAKmU,IAAI9R,EAAO,GACxB,MACJ,IAAK,QACDA,EAAQrC,KAAKmU,IAAI9R,EAAO,GACxBA,OAA8B5B,IAArBkH,EAAUvD,OAAwBpE,KAAKoU,IAAI/R,EAAO,IAAMrC,KAAKoU,IAAI/R,EAAO,GACjF,MACJ,IAAK,QAGL,IAAK,UACDA,EAAQrC,KAAKmU,IAAI9R,EAAO,GAShC,IAFA,IAAM6F,EAAS/F,EAAKxC,MAAM,KACtB66B,EAAM7yB,EACD5D,EAAI,EAAGA,IAAMmE,EAAO1H,SAAUuD,EAAG,CACtC,IAAMlE,EAAQqI,EAAOnE,GACjBA,IAAMmE,EAAO1H,OAAS,EACtBg6B,EAAI36B,GAASwC,EAEbm4B,EAAMA,EAAI36B,GAQlB,GAJAlB,EAAMiC,KAAK7B,KAAKqN,MAAM+T,SACtBxhB,EAAMiC,KAAK7B,KAAKqN,MAAMvN,SACtBF,EAAMiC,KAAK7B,KAAKqN,MAAM+V,YAET,eAAThgB,IACMwF,EAAwByO,QAAS,CACnC,IAAM3T,EAAS1D,KAAKqN,MAAMuR,QAAQxe,KAAK,SAAA+D,GAAC,OAAIA,EAAEjE,KAAOs7B,EAAKnuB,MAAM+pB,mBAChEp3B,KAAK65B,eAAen2B,GAI5B1D,KAAKuN,SAAS,CACV6T,QAASphB,KAAKqN,MAAM+T,QACpBthB,QAASE,KAAKqN,MAAMvN,QACpBsjB,WAAYpjB,KAAKqN,MAAM+V,WACvBxE,QAAS5e,KAAKqN,MAAMuR,QACpBoY,gBAAiBh3B,KAAKqN,MAAM2pB,gBAC5BC,uBAAwBj3B,KAAKqN,MAAM4pB,uBACnCC,oBAAqBl3B,KAAKqN,MAAM6pB,oBAChCE,iBAAkBp3B,KAAKqN,MAAM+pB,iBAC7BhoB,QAASpP,KAAKqN,MAAM+B,QACpBioB,MAAOr3B,KAAKqN,MAAMgqB,2CAIPzuB,EAAgBxF,EAAcG,GAG7C,IAFA,IAAM4F,EAAS/F,EAAKxC,MAAM,KACtB66B,EAAM7yB,EACD5D,EAAI,EAAGA,IAAMmE,EAAO1H,SAAUuD,EAAG,CACtC,IAAMlE,EAAQqI,EAAOnE,GACrB,GAAIA,IAAMmE,EAAO1H,OAAS,EAAG,CACzB,IAAI6B,EACJA,EAAmB,cAAVxC,EAAyBlB,EAAMyJ,eAAeoyB,EAAIx1B,UAAW1C,GAASk4B,EAAI36B,GAASyC,EAC5FvD,KAAKsJ,YAAYV,EAAWxF,EAAME,QAElCm4B,EAAMA,EAAI36B,yCAOD,IAAA46B,EAAA17B,KACjB,OAAQA,KAAKqN,MAAMkgB,MACf,IAAK,UACL,IAAK,YACL,IAAK,OACD,OACI5f,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,SACIxK,KAAK,OACLqM,YAAY,SACZnM,MAAOtD,KAAKqN,MAAM7M,OAClBmU,SAAU,SAAAC,GAAK,OAAI8mB,EAAKpyB,YAAYoyB,EAAKruB,MAAO,SAAUuH,EAAM3L,OAAO3F,YAK3F,IAAK,UACD,OACIqK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,UAAQM,QAAS,kBAAMwtB,EAAKC,qBAA5B,iBAEJhuB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,SACIxK,KAAK,OACLqM,YAAY,SACZnM,MAAOtD,KAAKqN,MAAM7M,OAClBmU,SAAU,SAAAC,GAAK,OAAI8mB,EAAKpyB,YAAYoyB,EAAKruB,MAAO,SAAUuH,EAAM3L,OAAO3F,YAK3F,IAAK,SACD,IAAMI,EAAS1D,KAAKqN,MAAMuR,QAAQxe,KAAK,SAAA+D,GAAC,OAAIA,EAAEjE,KAAOw7B,EAAKruB,MAAM+pB,mBAChE,IAAI1zB,EA8BA,OACIiK,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,SACIxK,KAAK,OACLqM,YAAY,SACZnM,MAAOtD,KAAKqN,MAAM7M,OAClBmU,SAAU,SAAAC,GAAK,OAAI8mB,EAAKpyB,YAAYoyB,EAAKruB,MAAO,SAAUuH,EAAM3L,OAAO3F,YApCvF,IAAMoB,EAAY1E,KAAKqN,MAAM+V,WAAWhjB,KAAK,SAAA4O,GAAC,OAAIA,EAAE9O,KAAOwD,EAAOuE,cAClE,GAAIvD,EAAW,CACX,IAAIsc,EAAK,EAMT,OALAtd,EAAOU,WAAW5D,OAAO,SAAA2D,GAAC,MAAe,YAAXA,EAAEf,OAC3BvC,QAAQ,SAAA+H,GACLoY,GAAMphB,EAAMqgB,WAAYrX,EAAkC3C,aAI9D0H,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,QAAf,UAA8BnK,EAAO6E,QAEzCoF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,QAAf,OAA2BmT,IAE/BrT,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,UAAUe,MAAO,CAAEgC,QAAoC,IAA3BlM,EAAU6C,MAAM9F,OAAe,OAAS,KAC/EkM,EAAA7L,EAAA8L,cAAA,UAAQM,QAAS,kBAAMwtB,EAAKE,kBAA5B,aAEJjuB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,UAAQM,QAAS,kBAAMwtB,EAAKG,gBAA5B,oBAEJluB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,WACXF,EAAA7L,EAAA8L,cAAA,UAAQM,QAAS,kBAAMwtB,EAAKI,cAA5B,oBAqB5B,OAAO,0CAGU,IAAAC,EAAA/7B,KACjB,OAAQA,KAAKqN,MAAMkgB,MACf,IAAK,OACD,OACI5f,EAAA7L,EAAA8L,cAACouB,GAAD,CACIl8B,QAASE,KAAKqN,MAAMvN,QACpBskB,mBAAoB,kBAAM2X,EAAK3X,wBAG3C,IAAK,UACD,OACIzW,EAAA7L,EAAA8L,cAACquB,GAAD,CACI7a,QAASphB,KAAKqN,MAAM+T,QACpBK,UAAWzhB,KAAKqN,MAAM+T,QAAQhhB,KAAK,SAAAT,GAAC,OAAIA,EAAEO,KAAO67B,EAAK1uB,MAAM2pB,mBAAoB,KAChFx2B,OAAQR,KAAKqN,MAAM7M,OACnBsd,SAAU9d,KAAKqN,MAAM+B,QAAQ0O,SAC7ByD,YAAa,SAAAjB,GAAK,OAAIyb,EAAKxa,YAAYjB,IACvCgI,SAAU,kBAAMyT,EAAKzT,YACrBZ,YAAa,kBAAMqU,EAAKrU,eACxBF,MAAO,kBAAMuU,EAAKvU,SAClBhP,SAAU,SAAAmI,GAAE,OAAIob,EAAKvjB,SAASmI,IAC9B8G,QAAS,kBAAMsU,EAAKtU,WACpBne,YAAa,SAACV,EAAWxF,EAAME,GAAlB,OAA4By4B,EAAKzyB,YAAYV,EAAWxF,EAAME,IAC3E0N,WAAY,SAACpI,EAAWxF,EAAMG,GAAlB,OAA4Bw4B,EAAK/qB,WAAWpI,EAAWxF,EAAMG,MAGrF,IAAK,UACD,OACIoK,EAAA7L,EAAA8L,cAACsuB,GAAD,CACIp8B,QAASE,KAAKqN,MAAMvN,QACpB2hB,UAAWzhB,KAAKqN,MAAMvN,QAAQM,KAAK,SAAAC,GAAC,OAAIA,EAAEH,KAAO67B,EAAK1uB,MAAM4pB,0BAA2B,KACvFz2B,OAAQR,KAAKqN,MAAM7M,OACnBsd,SAAU9d,KAAKqN,MAAM+B,QAAQ0O,SAC7B0I,mBAAoB,SAAAzmB,GAAK,OAAIg8B,EAAKvV,mBAAmBzmB,IACrD4mB,gBAAiB,kBAAMoV,EAAKpV,mBAC5BX,mBAAoB,kBAAM+V,EAAK/V,sBAC/BH,WAAY,kBAAMkW,EAAKlW,cACvBC,gBAAiB,kBAAMiW,EAAKjW,mBAC5BrP,cAAe,SAAA5W,GAAO,OAAIk8B,EAAKtlB,cAAc5W,IAC7CkmB,aAAc,kBAAMgW,EAAKhW,gBACzBzc,YAAa,SAACV,EAAWxF,EAAME,GAAlB,OAA4By4B,EAAKzyB,YAAYV,EAAWxF,EAAME,IAC3E0N,WAAY,SAACpI,EAAWxF,EAAMG,GAAlB,OAA4Bw4B,EAAK/qB,WAAWpI,EAAWxF,EAAMG,IACzE4S,YAAa,SAAAvN,GAAS,OAAImzB,EAAK5lB,YAAYvN,IAC3CyN,aAAc,SAACzN,EAAWnF,GAAZ,OAAqBs4B,EAAK1lB,aAAazN,EAAWnF,IAChE+S,YAAa,SAAC5N,EAAW8d,GAAZ,OAAwBqV,EAAKvlB,YAAY5N,EAAW8d,MAG7E,IAAK,YACD,OACI/Y,EAAA7L,EAAA8L,cAACuuB,GAAD,CACI/Y,WAAYpjB,KAAKqN,MAAM+V,WACvB3B,UAAWzhB,KAAKqN,MAAM+V,WAAWhjB,KAAK,SAAA4O,GAAC,OAAIA,EAAE9O,KAAO67B,EAAK1uB,MAAM6pB,uBAAwB,KACvF12B,OAAQR,KAAKqN,MAAM7M,OACnB4gB,QAASphB,KAAKqN,MAAM+T,QACpBthB,QAASE,KAAKqN,MAAMvN,QACpBge,SAAU9d,KAAKqN,MAAM+B,QAAQ0O,SAC7B0F,gBAAiB,SAAA9e,GAAS,OAAIq3B,EAAKvY,gBAAgB9e,IACnDsf,aAAc,kBAAM+X,EAAK/X,gBACzBrC,gBAAiB,kBAAMoa,EAAKpa,mBAC5BD,QAAS,kBAAMqa,EAAKK,sBACpB3Z,WAAY,SAAA9M,GAAI,OAAIomB,EAAKtZ,WAAW9M,IACpCqK,WAAY,SAACjb,EAAaozB,GAAd,OAA4B4D,EAAK/b,WAAWjb,EAAaozB,IAAc,MACnFthB,iBAAkB,SAAChX,EAASqI,GAAV,OAAqB6zB,EAAKllB,iBAAiBhX,EAASqI,IACtEwO,oBAAqB,SAAC7R,EAAMqD,GAAP,OAAkB6zB,EAAKrlB,oBAAoB7R,EAAMqD,IACtE8I,WAAY,SAACnM,EAAMzB,EAAMG,GAAb,OAAuBw4B,EAAK/qB,WAAWnM,EAAMzB,EAAMG,IAC/D+F,YAAa,SAACV,EAAWxF,EAAME,GAAlB,OAA4By4B,EAAKzyB,YAAYV,EAAWxF,EAAME,MAGvF,IAAK,OACD,OACIqK,EAAA7L,EAAA8L,cAACyuB,GAAD,CACInX,UAAWllB,KAAKqN,MAAM6X,UACtBzD,UAAWzhB,KAAKqN,MAAM6X,UAAU9kB,KAAK,SAAAglB,GAAC,OAAIA,EAAEllB,KAAO67B,EAAK1uB,MAAM8pB,sBAAuB,KACrF32B,OAAQR,KAAKqN,MAAM7M,OACnBsd,SAAU9d,KAAKqN,MAAM+B,QAAQ0O,SAC7ByH,eAAgB,SAAAP,GAAK,OAAI+W,EAAKxW,eAAeP,IAC7CW,YAAa,kBAAMoW,EAAKpW,eACxBhB,eAAgB,kBAAMoX,EAAKpX,kBAC3BD,OAAQ,kBAAMqX,EAAKrX,UACnBH,QAAS,SAAAjc,GAAG,OAAIyzB,EAAKxX,QAAQjc,IAC7Bkc,UAAW,SAAAlc,GAAG,OAAIyzB,EAAKvX,UAAUlc,IACjCgB,YAAa,SAACJ,EAAQ9F,EAAME,GAAf,OAAyBy4B,EAAKzyB,YAAYJ,EAAQ9F,EAAME,MAGjF,IAAK,SACD,OACIqK,EAAA7L,EAAA8L,cAAC0uB,GAAD,CACI1d,QAAS5e,KAAKqN,MAAMuR,QACpBlb,OAAQ1D,KAAKqN,MAAMuR,QAAQxe,KAAK,SAAA+D,GAAC,OAAIA,EAAEjE,KAAO67B,EAAK1uB,MAAM+pB,oBAAqB,KAC9E52B,OAAQR,KAAKqN,MAAM7M,OACnBsd,SAAU9d,KAAKqN,MAAM+B,QAAQ0O,SAC7BkB,aAAc,kBAAM+c,EAAK/c,gBACzBD,gBAAiB,SAAAwd,GAAY,OAAIR,EAAKS,aAAaD,IACnDvrB,WAAY,SAACpI,EAAWxF,EAAMG,GAAlB,OAA4Bw4B,EAAK/qB,WAAWpI,EAAWxF,EAAMG,IACzE+F,YAAa,SAACV,EAAWxF,EAAME,GAAlB,OAA4By4B,EAAKzyB,YAAYV,EAAWxF,EAAME,IAC3EoU,YAAa,SAAC9O,GAAD,OAAemzB,EAAKrkB,YAAY9O,GAAW,IACxD+O,WAAY,SAAC/O,GAAD,OAAemzB,EAAKpkB,WAAW/O,IAC3C6O,aAAc,SAAC7O,GAAD,OAAemzB,EAAKtkB,aAAa7O,IAC/C2O,gBAAiB,SAAC3O,GAAD,OAAemzB,EAAKxkB,gBAAgB3O,IACrD8J,aAAc,SAAC9J,GAAD,OAAemzB,EAAKrpB,aAAa9J,IAC/C2J,cAAe,SAAC3J,EAAWpF,GAAZ,OAA0Bu4B,EAAKxpB,cAAc3J,EAAWpF,IACvEgP,gBAAiB,SAAC5J,EAAW6J,GAAZ,OAA4BspB,EAAKvpB,gBAAgB5J,EAAW6J,IAC7E2E,OAAQ,SAACxO,EAAWjB,EAAGC,GAAf,OAAqBm0B,EAAK3kB,OAAOxO,EAAWjB,EAAGC,IACvDsP,QAAS,SAACtO,EAAWhH,GAAZ,OAAoBm6B,EAAK7kB,QAAQtO,EAAWhH,IACrDuV,UAAW,SAAAvO,GAAS,OAAImzB,EAAK5kB,UAAUvO,IACvC4O,QAAS,SAAC5O,GAAD,OAAemzB,EAAKvkB,QAAQ5O,IACrC0M,SAAU,SAAC1M,EAAWa,EAAI8L,GAAhB,OAAyBwmB,EAAKzmB,SAAS1M,EAAWa,EAAI8L,IAChEsH,MAAO,SAACwB,EAAc7L,GAAf,OAAmCupB,EAAKU,kBAAkBpe,EAAc7L,MAK/F,OAAO,wCAGQ,IAAAkqB,EAAA18B,KACf,GAAIA,KAAKqN,MAAMgqB,MAAO,CAClB,IAAIsF,GAAe,EACfC,EAAa,KACbC,EAAe,KACfC,GAAmB,EAEjBC,EAAe,CACjBljB,KAAM,GACNqH,MAAO,CACHvT,EAAA7L,EAAA8L,cAAA,UAAQ8B,IAAI,QAAQxB,QAAS,kBAAMwuB,EAAKM,eAAxC,WAIR,OAAQh9B,KAAKqN,MAAMgqB,MAAMj0B,MACrB,IAAK,QACDu5B,GAAe,EACfE,EACIlvB,EAAA7L,EAAA8L,cAACqvB,GAAD,CACI7tB,QAASpP,KAAKqN,MAAM+B,QACpB8e,SAAU,kBAAMwO,EAAKxO,YACrB5kB,YAAa,SAACJ,EAAQ9F,EAAME,GAAf,OAAyBo5B,EAAKpzB,YAAYJ,EAAQ9F,EAAME,MAG7Ey5B,EAAa7b,MAAQ,GACrB,MACJ,IAAK,eACDyb,GAAe,EACfE,EACIlvB,EAAA7L,EAAA8L,cAACsvB,GAAD,CACIp9B,QAASE,KAAKqN,MAAMvN,UAG5Bi9B,EAAa7b,MAAQ,GACrB,MACJ,IAAK,UACD0b,EAAa,iBACbC,EACIlvB,EAAA7L,EAAA8L,cAACuvB,GAAD,CACIt9B,QAASG,KAAKqN,MAAMgqB,MAAMx3B,QAC1BC,QAASE,KAAKqN,MAAMvN,QACpBo1B,aAAcl1B,KAAKqN,MAAMgqB,MAAMnC,eAGvC4H,GAAmB,EACnBC,EAAaljB,KAAO,CAEZlM,EAAA7L,EAAA8L,cAAC6e,GAAD,CACI/c,IAAI,UACJkC,MAAM,mBACN4W,QAASxoB,KAAKqN,MAAMgqB,MAAMnC,aAC1B5rB,YAAa,kBAAMozB,EAAKU,gCAIpCL,EAAa7b,MAAQ,CACjBvT,EAAA7L,EAAA8L,cAAA,UAAQ8B,IAAI,OAAOxB,QAAS,kBAAMwuB,EAAKW,gBAAvC,QACA1vB,EAAA7L,EAAA8L,cAAA,UAAQ8B,IAAI,SAASxB,QAAS,kBAAMwuB,EAAKM,eAAzC,WAEJ,MACJ,IAAK,iBACDJ,EAAa,2BACbC,EACIlvB,EAAA7L,EAAA8L,cAAC0vB,GAAD,CACIz9B,QAASG,KAAKqN,MAAMgqB,MAAMx3B,QAC1BC,QAASE,KAAKqN,MAAMvN,UAG5Bg9B,GAAmB,EACnBC,EAAa7b,MAAQ,CACjBvT,EAAA7L,EAAA8L,cAAA,UAAQ8B,IAAI,OAAOxB,QAAS,kBAAMwuB,EAAKW,gBAAvC,QACA1vB,EAAA7L,EAAA8L,cAAA,UAAQ8B,IAAI,SAASxB,QAAS,kBAAMwuB,EAAKM,eAAzC,WAEJ,MACJ,IAAK,MACDJ,EAAa,aACbC,EACIlvB,EAAA7L,EAAA8L,cAAC2vB,GAAD,CACIj1B,IAAKtI,KAAKqN,MAAMgqB,MAAM/uB,MAG9Bw0B,GAAmB,EACnBC,EAAa7b,MAAQ,CACjBvT,EAAA7L,EAAA8L,cAAA,UAAQ8B,IAAI,OAAOxB,QAAS,kBAAMwuB,EAAKc,YAAvC,QACA7vB,EAAA7L,EAAA8L,cAAA,UAAQ8B,IAAI,SAASxB,QAAS,kBAAMwuB,EAAKM,eAAzC,WAEJ,MACJ,IAAK,eACDJ,EAAa,wBACbC,EACIlvB,EAAA7L,EAAA8L,cAAC6vB,GAAD,CACInP,YAAatuB,KAAKqN,MAAMgqB,MAAM/I,YAC9BlN,QAASphB,KAAKqN,MAAM+T,QACpBgC,WAAYpjB,KAAKqN,MAAM+V,WACvB8B,UAAWllB,KAAKqN,MAAM6X,UACtBlF,WAAY,SAACjb,EAAaozB,GAAd,OAA4BuE,EAAK1c,WAAWjb,EAAaozB,IAAc,MACnF5J,OAAQ,kBAAMmO,EAAKnvB,SAAS,CAAC8pB,MAAOqF,EAAKrvB,MAAMgqB,WAGvDyF,GAAmB,EACnBC,EAAa7b,MAAQ,CAEbvT,EAAA7L,EAAA8L,cAAA,UACI8B,IAAI,kBACJ7B,UAAW7N,KAAKqN,MAAMgqB,MAAM/I,YAAYtmB,SAAWhI,KAAKqN,MAAMgqB,MAAM/I,YAAYrmB,YAAc,GAAK,WACnGiG,QAAS,kBAAMwuB,EAAKgB,gBAHxB,mBAQJ/vB,EAAA7L,EAAA8L,cAAA,UAAQ8B,IAAI,SAASxB,QAAS,kBAAMwuB,EAAKM,eAAzC,WAEJ,MACJ,IAAK,cACDJ,EAAa,kBACbC,EACIlvB,EAAA7L,EAAA8L,cAAC6vB,GAAD,CACInP,YAAatuB,KAAKqN,MAAMgqB,MAAM/I,YAC9BlL,WAAYpjB,KAAKqN,MAAM+V,WACvBpD,WAAY,SAACjb,EAAaozB,GAAd,OAA4BuE,EAAK1c,WAAWjb,EAAaozB,IAAc,MACnF5J,OAAQ,kBAAMmO,EAAKnvB,SAAS,CAAC8pB,MAAOqF,EAAKrvB,MAAMgqB,WAGvDyF,GAAmB,EACnBC,EAAa7b,MAAQ,CAEbvT,EAAA7L,EAAA8L,cAAA,UACI8B,IAAI,WACJ7B,UAAmD,OAAxC7N,KAAKqN,MAAMgqB,MAAM/I,YAAYpmB,OAAkB,GAAK,WAC/DgG,QAAS,kBAAMwuB,EAAKiB,oBAHxB,YAQJhwB,EAAA7L,EAAA8L,cAAA,UAAQ8B,IAAI,SAASxB,QAAS,kBAAMwuB,EAAKM,eAAzC,WAEJ,MACJ,IAAK,gBACDJ,EAAa,kBACbC,EACIlvB,EAAA7L,EAAA8L,cAACgwB,GAAD,CACIp6B,UAAWxD,KAAKqN,MAAMgqB,MAAM7zB,UAC5BoF,UAAW5I,KAAKqN,MAAMgqB,MAAMzuB,UAC5BlF,OAAQ1D,KAAKqN,MAAMgqB,MAAM3zB,SAGjCo5B,GAAmB,EACnBC,EAAa7b,MAAQ,CACjBvT,EAAA7L,EAAA8L,cAAA,UAAQ8B,IAAI,MAAMxB,QAAS,kBAAMwuB,EAAKmB,0BAAtC,OACAlwB,EAAA7L,EAAA8L,cAAA,UAAQ8B,IAAI,SAASxB,QAAS,kBAAMwuB,EAAKM,eAAzC,WAEJ,MACJ,IAAK,iBACDJ,EAAa,iBACbC,EACIlvB,EAAA7L,EAAA8L,cAACgwB,GAAD,CACIp6B,UAAWxD,KAAKqN,MAAMgqB,MAAM7zB,UAC5BoF,UAAW5I,KAAKqN,MAAMgqB,MAAMzuB,UAC5BlF,OAAQ1D,KAAKqN,MAAMgqB,MAAM3zB,SAGjCq5B,EAAa7b,MAAQ,CACjBvT,EAAA7L,EAAA8L,cAAA,UAAQ8B,IAAI,OAAOxB,QAAS,kBAAMwuB,EAAKoB,2BAAvC,QACAnwB,EAAA7L,EAAA8L,cAAA,UAAQ8B,IAAI,SAASxB,QAAS,kBAAMwuB,EAAKM,eAAzC,WAQZ,OACIrvB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,UAAUK,QAAS,kBAAMyuB,EAAeD,EAAKM,aAAe,OACvErvB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAW8uB,EAAe,gBAAkB,QAASzuB,QAAS,SAAAc,GAAC,OAAIA,EAAEC,oBACtEtB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,gBACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,SAAS+uB,GACvBD,EAAehvB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,QAAQC,IAAK+O,KAAO7O,IAAI,QAAQE,QAAS,kBAAMwuB,EAAKM,gBAAmB,MAE1GrvB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAWivB,EAAmB,2BAA6B,iBAC3DD,GAELlvB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,gBACXF,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,QAAQkvB,EAAaljB,MACpClM,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,SAASkvB,EAAa7b,UAOzD,OAAO,sCAGK,IAAA6c,EAAA/9B,KACZ,IACI,IAAM0N,EAAU1N,KAAK6hB,aACf3W,EAAUlL,KAAKg+B,aACf3G,EAAQr3B,KAAKi+B,WAEnB,OACItwB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAU,QACXF,EAAA7L,EAAA8L,cAACswB,GAAD,CACIhzB,QAASA,EACTorB,KAAgB,OAAVe,EACNb,SAAU,kBAAMuH,EAAKtQ,QAAQ,SAC7BiJ,UAAW,kBAAMqH,EAAKrH,eAE1B/oB,EAAA7L,EAAA8L,cAAA,OAAKC,UAAsB,OAAVwpB,EAAkB,eAAiB,qBAC/C3pB,GAELC,EAAA7L,EAAA8L,cAACuwB,GAAD,CACI5Q,KAAMvtB,KAAKqN,MAAMkgB,KACjBnM,QAASphB,KAAKqN,MAAM+T,QACpBthB,QAASE,KAAKqN,MAAMvN,QACpBsjB,WAAYpjB,KAAKqN,MAAM+V,WACvBkT,KAAgB,OAAVe,EACN5J,QAAS,SAAAF,GAAI,OAAIwQ,EAAKtQ,QAAQF,MAEjC8J,GAGX,MAAOroB,GACLV,QAAQC,MAAMS,WA1sDQR,IAAMC,WCtDxC2vB,IAASC,OAAO1wB,EAAA7L,EAAA8L,cAAC0wB,GAAD,MAAUC,SAASC,eAAe","file":"static/js/main.50ac4102.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/down-arrow-black.a2fc7a1f.svg\";","module.exports = __webpack_public_path__ + \"static/media/down-arrow.697dc1af.svg\";","module.exports = __webpack_public_path__ + \"static/media/close-black.7645a5b9.svg\";","module.exports = __webpack_public_path__ + \"static/media/warning.67a11a95.svg\";","module.exports = __webpack_public_path__ + \"static/media/ellipsis.9650a20f.svg\";","module.exports = __webpack_public_path__ + \"static/media/minus.7003cf50.svg\";","module.exports = __webpack_public_path__ + \"static/media/plus.b60accff.svg\";","module.exports = __webpack_public_path__ + \"static/media/checked.5cbd1005.svg\";","module.exports = __webpack_public_path__ + \"static/media/unchecked.3d4ae2dd.svg\";","module.exports = __webpack_public_path__ + \"static/media/settings.042bb1c2.svg\";","import { Combat } from '../models/combat';\r\nimport { Condition, ConditionDurationCombatant, ConditionDurationRounds, ConditionDurationSaves } from '../models/condition';\r\nimport { Encounter, EncounterWave } from '../models/encounter';\r\nimport { Monster, MonsterGroup } from '../models/monster-group';\r\n\r\nexport default class Utils {\r\n\r\n    // This is an internal dictionary to speed up lookup\r\n    private static monsterIdToGroup: { [id: string]: MonsterGroup } = {};\r\n\r\n    public static getMonsterGroup(monster: Monster, library: MonsterGroup[]): MonsterGroup {\r\n        let group = this.monsterIdToGroup[monster.id];\r\n\r\n        if (!group) {\r\n            const grp = library.find(g => g.monsters.includes(monster));\r\n            if (grp) {\r\n                group = grp;\r\n                this.monsterIdToGroup[monster.id] = group;\r\n            }\r\n        }\r\n\r\n        return group;\r\n    }\r\n\r\n    public static match(filter: string, text: string): boolean {\r\n        if (!filter) {\r\n            return true;\r\n        }\r\n\r\n        let result = true;\r\n\r\n        const tokens = filter.toLowerCase().split(' ');\r\n        tokens.forEach(token => {\r\n            if (text.toLowerCase().indexOf(token) === -1) {\r\n                result = false;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    public static guid(): string {\r\n        const s4 = () => Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\r\n        return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\r\n    }\r\n\r\n    public static sort(collection: any[], sorts: { field: string, dir: 'asc' | 'desc' }[] = []): any[] {\r\n        if (sorts.length === 0) {\r\n            sorts = [{ field: 'name', dir: 'asc' }];\r\n        }\r\n\r\n        const fn = (a: any, b: any, field: string): number => {\r\n            if ((a[field] !== undefined) && (b[field] !== undefined)) {\r\n                if (a[field] < b[field]) { return -1; }\r\n                if (a[field] > b[field]) { return 1; }\r\n            }\r\n            return 0;\r\n        };\r\n\r\n        collection.sort((a, b) => {\r\n            let order = 0;\r\n            sorts.forEach(sort => {\r\n                if (order === 0) {\r\n                    order = fn(a, b, sort.field) * (sort.dir === 'asc' ? 1 : -1);\r\n                }\r\n            });\r\n            return order;\r\n        });\r\n\r\n        return collection;\r\n    }\r\n\r\n    public static modifierValue(score: number): number {\r\n        return Math.floor((score - 10) / 2);\r\n    }\r\n\r\n    public static modifier(score: number): string {\r\n        const mod = this.modifierValue(score);\r\n        let str = mod.toString();\r\n        if (mod >= 0) {\r\n            str = '+' + str;\r\n        }\r\n        return str;\r\n    }\r\n\r\n    public static dieRoll(): number {\r\n        return Math.floor(Math.random() * 20) + 1;\r\n    }\r\n\r\n    public static miniSize(size: string): number {\r\n        switch (size) {\r\n            case 'tiny': return 1;\r\n            case 'small': return 1;\r\n            case 'medium': return 1;\r\n            case 'large': return 2;\r\n            case 'huge': return 3;\r\n            case 'gargantuan': return 4;\r\n            default: return 1;\r\n        }\r\n    }\r\n\r\n    public static hitDieType(size: string) {\r\n        switch (size) {\r\n            case 'tiny': return 4;\r\n            case 'small': return 6;\r\n            case 'medium': return 8;\r\n            case 'large': return 10;\r\n            case 'huge': return 12;\r\n            case 'gargantuan': return 20;\r\n            default: return 8;\r\n        }\r\n    }\r\n\r\n    public static challenge(cr: number): string {\r\n        switch (cr) {\r\n            case 0.125: return '1/8';\r\n            case 0.25: return '1/4';\r\n            case 0.5: return '1/2';\r\n            default: return cr.toString();\r\n        }\r\n    }\r\n\r\n    public static parseChallenge(cr: string): number {\r\n        switch (cr) {\r\n            case '1/8': return 0.125;\r\n            case '1/4': return 0.25;\r\n            case '1/2': return 0.5;\r\n            default: return parseInt(cr, 10);\r\n        }\r\n    }\r\n\r\n    public static challengeDetails(): any[] {\r\n        const result: any[] = [];\r\n\r\n        result.push({ cr: 0,        ac: 13,       hpMin: 1, hpMax: 6,       attack: 3,  dmgMin: 0,   dmgMax: 1,   save: 13 });\r\n        result.push({ cr: 0.125,    ac: 13,       hpMin: 7, hpMax: 35,      attack: 3,  dmgMin: 2,   dmgMax: 3,   save: 13 });\r\n        result.push({ cr: 0.25,     ac: 13,       hpMin: 36, hpMax: 49,     attack: 3,  dmgMin: 4,   dmgMax: 5,   save: 13 });\r\n        result.push({ cr: 0.5,      ac: 13,       hpMin: 50, hpMax: 70,     attack: 3,  dmgMin: 6,   dmgMax: 8,   save: 13 });\r\n        result.push({ cr: 1,        ac: 13,       hpMin: 71, hpMax: 85,     attack: 3,  dmgMin: 9,   dmgMax: 14,  save: 13 });\r\n        result.push({ cr: 2,        ac: 13,       hpMin: 86, hpMax: 100,    attack: 3,  dmgMin: 15,  dmgMax: 20,  save: 13 });\r\n        result.push({ cr: 3,        ac: 13,       hpMin: 101, hpMax: 115,   attack: 4,  dmgMin: 21,  dmgMax: 26,  save: 13 });\r\n        result.push({ cr: 4,        ac: 14,       hpMin: 116, hpMax: 130,   attack: 5,  dmgMin: 27,  dmgMax: 32,  save: 14 });\r\n        result.push({ cr: 5,        ac: 15,       hpMin: 131, hpMax: 145,   attack: 6,  dmgMin: 33,  dmgMax: 38,  save: 15 });\r\n        result.push({ cr: 6,        ac: 15,       hpMin: 146, hpMax: 160,   attack: 6,  dmgMin: 39,  dmgMax: 44,  save: 15 });\r\n        result.push({ cr: 7,        ac: 15,       hpMin: 161, hpMax: 175,   attack: 6,  dmgMin: 45,  dmgMax: 50,  save: 15 });\r\n        result.push({ cr: 8,        ac: 16,       hpMin: 176, hpMax: 190,   attack: 7,  dmgMin: 51,  dmgMax: 56,  save: 16 });\r\n        result.push({ cr: 9,        ac: 16,       hpMin: 191, hpMax: 205,   attack: 7,  dmgMin: 57,  dmgMax: 62,  save: 16 });\r\n        result.push({ cr: 10,       ac: 17,       hpMin: 206, hpMax: 220,   attack: 7,  dmgMin: 63,  dmgMax: 68,  save: 16 });\r\n        result.push({ cr: 11,       ac: 17,       hpMin: 221, hpMax: 235,   attack: 8,  dmgMin: 69,  dmgMax: 74,  save: 17 });\r\n        result.push({ cr: 12,       ac: 17,       hpMin: 236, hpMax: 250,   attack: 8,  dmgMin: 75,  dmgMax: 80,  save: 17 });\r\n        result.push({ cr: 13,       ac: 18,       hpMin: 251, hpMax: 265,   attack: 8,  dmgMin: 81,  dmgMax: 86,  save: 18 });\r\n        result.push({ cr: 14,       ac: 18,       hpMin: 266, hpMax: 280,   attack: 8,  dmgMin: 87,  dmgMax: 92,  save: 18 });\r\n        result.push({ cr: 15,       ac: 18,       hpMin: 281, hpMax: 295,   attack: 8,  dmgMin: 93,  dmgMax: 98,  save: 18 });\r\n        result.push({ cr: 16,       ac: 18,       hpMin: 296, hpMax: 310,   attack: 9,  dmgMin: 99,  dmgMax: 104, save: 18 });\r\n        result.push({ cr: 17,       ac: 19,       hpMin: 311, hpMax: 325,   attack: 10, dmgMin: 105, dmgMax: 110, save: 19 });\r\n        result.push({ cr: 18,       ac: 19,       hpMin: 326, hpMax: 340,   attack: 10, dmgMin: 111, dmgMax: 116, save: 19 });\r\n        result.push({ cr: 19,       ac: 19,       hpMin: 341, hpMax: 355,   attack: 10, dmgMin: 117, dmgMax: 122, save: 19 });\r\n        result.push({ cr: 20,       ac: 19,       hpMin: 356, hpMax: 400,   attack: 10, dmgMin: 123, dmgMax: 140, save: 19 });\r\n        result.push({ cr: 21,       ac: 19,       hpMin: 401, hpMax: 445,   attack: 11, dmgMin: 141, dmgMax: 158, save: 20 });\r\n        result.push({ cr: 22,       ac: 19,       hpMin: 446, hpMax: 490,   attack: 11, dmgMin: 159, dmgMax: 176, save: 20 });\r\n        result.push({ cr: 23,       ac: 19,       hpMin: 491, hpMax: 535,   attack: 11, dmgMin: 177, dmgMax: 194, save: 20 });\r\n        result.push({ cr: 24,       ac: 19,       hpMin: 536, hpMax: 580,   attack: 12, dmgMin: 195, dmgMax: 212, save: 21 });\r\n        result.push({ cr: 25,       ac: 19,       hpMin: 581, hpMax: 625,   attack: 12, dmgMin: 213, dmgMax: 230, save: 21 });\r\n        result.push({ cr: 26,       ac: 19,       hpMin: 626, hpMax: 670,   attack: 12, dmgMin: 231, dmgMax: 248, save: 21 });\r\n        result.push({ cr: 27,       ac: 19,       hpMin: 671, hpMax: 715,   attack: 13, dmgMin: 249, dmgMax: 266, save: 22 });\r\n        result.push({ cr: 28,       ac: 19,       hpMin: 716, hpMax: 760,   attack: 13, dmgMin: 267, dmgMax: 284, save: 22 });\r\n        result.push({ cr: 29,       ac: 19,       hpMin: 761, hpMax: 805,   attack: 13, dmgMin: 285, dmgMax: 302, save: 22 });\r\n        result.push({ cr: 30,       ac: 19,       hpMin: 806, hpMax: 850,   attack: 14, dmgMin: 303, dmgMax: 320, save: 23 });\r\n\r\n        return result;\r\n    }\r\n\r\n    public static experience(cr: number): number {\r\n        switch (cr) {\r\n            case 0: return 10;\r\n            case 0.125: return 25;\r\n            case 0.25: return 50;\r\n            case 0.5: return 100;\r\n            case 1: return 200;\r\n            case 2: return 450;\r\n            case 3: return 700;\r\n            case 4: return 1100;\r\n            case 5: return 1800;\r\n            case 6: return 2300;\r\n            case 7: return 2900;\r\n            case 8: return 3900;\r\n            case 9: return 5000;\r\n            case 10: return 5900;\r\n            case 11: return 7200;\r\n            case 12: return 8400;\r\n            case 13: return 10000;\r\n            case 14: return 11500;\r\n            case 15: return 13000;\r\n            case 16: return 15000;\r\n            case 17: return 18000;\r\n            case 18: return 20000;\r\n            case 19: return 22000;\r\n            case 20: return 25000;\r\n            case 21: return 33000;\r\n            case 22: return 41000;\r\n            case 23: return 50000;\r\n            case 24: return 62000;\r\n            case 30: return 155000;\r\n            default: return 0;\r\n        }\r\n    }\r\n\r\n    public static experienceFactor(count: number): number {\r\n        switch (count) {\r\n            case 0:\r\n                return 0;\r\n            case 1:\r\n                return 1;\r\n            case 2:\r\n                return 1.5;\r\n            case 3:\r\n            case 4:\r\n            case 5:\r\n            case 6:\r\n                return 2;\r\n            case 7:\r\n            case 8:\r\n            case 9:\r\n            case 10:\r\n                return 2.5;\r\n            case 11:\r\n            case 12:\r\n            case 13:\r\n            case 14:\r\n                return 3;\r\n            default:\r\n                return 4;\r\n        }\r\n    }\r\n\r\n    public static pcExperience(level: number, difficulty: string): number {\r\n        switch (difficulty) {\r\n            case 'easy':\r\n                switch (level) {\r\n                    case 1: return 25;\r\n                    case 2: return 50;\r\n                    case 3: return 75;\r\n                    case 4: return 125;\r\n                    case 5: return 250;\r\n                    case 6: return 300;\r\n                    case 7: return 350;\r\n                    case 8: return 450;\r\n                    case 9: return 550;\r\n                    case 10: return 600;\r\n                    case 11: return 800;\r\n                    case 12: return 1000;\r\n                    case 13: return 1100;\r\n                    case 14: return 1250;\r\n                    case 15: return 1400;\r\n                    case 16: return 1600;\r\n                    case 17: return 2000;\r\n                    case 18: return 2100;\r\n                    case 19: return 2400;\r\n                    case 20: return 2800;\r\n                    default: return 0;\r\n                }\r\n            case 'medium':\r\n                switch (level) {\r\n                    case 1: return 50;\r\n                    case 2: return 100;\r\n                    case 3: return 150;\r\n                    case 4: return 250;\r\n                    case 5: return 500;\r\n                    case 6: return 600;\r\n                    case 7: return 750;\r\n                    case 8: return 900;\r\n                    case 9: return 1100;\r\n                    case 10: return 1200;\r\n                    case 11: return 1600;\r\n                    case 12: return 2000;\r\n                    case 13: return 2200;\r\n                    case 14: return 2500;\r\n                    case 15: return 2800;\r\n                    case 16: return 3200;\r\n                    case 17: return 3900;\r\n                    case 18: return 4200;\r\n                    case 19: return 4900;\r\n                    case 20: return 5700;\r\n                    default: return 0;\r\n                }\r\n            case 'hard':\r\n                switch (level) {\r\n                    case 1: return 75;\r\n                    case 2: return 150;\r\n                    case 3: return 225;\r\n                    case 4: return 375;\r\n                    case 5: return 750;\r\n                    case 6: return 900;\r\n                    case 7: return 1100;\r\n                    case 8: return 1400;\r\n                    case 9: return 1600;\r\n                    case 10: return 1900;\r\n                    case 11: return 2400;\r\n                    case 12: return 3000;\r\n                    case 13: return 3400;\r\n                    case 14: return 3800;\r\n                    case 15: return 4300;\r\n                    case 16: return 4800;\r\n                    case 17: return 5900;\r\n                    case 18: return 6300;\r\n                    case 19: return 7300;\r\n                    case 20: return 8500;\r\n                    default: return 0;\r\n                }\r\n            case 'deadly':\r\n                switch (level) {\r\n                    case 1: return 100;\r\n                    case 2: return 200;\r\n                    case 3: return 400;\r\n                    case 4: return 500;\r\n                    case 5: return 1100;\r\n                    case 6: return 1400;\r\n                    case 7: return 1700;\r\n                    case 8: return 2100;\r\n                    case 9: return 2400;\r\n                    case 10: return 2800;\r\n                    case 11: return 3600;\r\n                    case 12: return 4500;\r\n                    case 13: return 5100;\r\n                    case 14: return 5700;\r\n                    case 15: return 6400;\r\n                    case 16: return 7200;\r\n                    case 17: return 8800;\r\n                    case 18: return 9500;\r\n                    case 19: return 10900;\r\n                    case 20: return 12700;\r\n                    default: return 0;\r\n                }\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n\r\n    public static traitType(type: string, plural: boolean): string {\r\n        let str = '';\r\n        switch (type) {\r\n            case 'trait':\r\n                str = 'trait';\r\n                break;\r\n            case 'action':\r\n                str = 'action';\r\n                break;\r\n            case 'legendary':\r\n                str = 'legendary action';\r\n                break;\r\n            case 'lair':\r\n                str = 'lair action';\r\n                break;\r\n            case 'regional':\r\n                str = 'regional effect';\r\n                break;\r\n        }\r\n\r\n        if (plural) {\r\n            str += 's';\r\n        }\r\n\r\n        return str;\r\n    }\r\n\r\n    public static nudgeChallenge(value: number, delta: number): number {\r\n        let result = 0;\r\n\r\n        switch (value) {\r\n            case 0:\r\n                if (delta === -1) {\r\n                    result = 0;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 0.125;\r\n                }\r\n                break;\r\n            case 0.125:\r\n                if (delta === -1) {\r\n                    result = 0;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 0.25;\r\n                }\r\n                break;\r\n            case 0.25:\r\n                if (delta === -1) {\r\n                    result = 0.125;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 0.5;\r\n                }\r\n                break;\r\n            case 0.5:\r\n                if (delta === -1) {\r\n                    result = 0.25;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 1;\r\n                }\r\n                break;\r\n            case 1:\r\n                if (delta === -1) {\r\n                    result = 0.5;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 2;\r\n                }\r\n                break;\r\n            default:\r\n                result = value + delta;\r\n                break;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public static conditionText(condition: Condition): string[] {\r\n        switch (condition.name) {\r\n            case 'blinded':\r\n                return [\r\n                    'a blinded creature can’t see and automatically fails any ability check that requires sight',\r\n                    'attack rolls against the creature have advantage, and the creature’s attack rolls have disadvantage'\r\n                ];\r\n            case 'charmed':\r\n                return [\r\n                    'a charmed creature can’t attack the charmer or target the charmer with harmful abilities or magical effects',\r\n                    'the charmer has advantage on any ability check to interact socially with the creature'\r\n                ];\r\n            case 'deafened':\r\n                return [\r\n                    'a deafened creature can’t hear and automatically fails any ability check that requires hearing.'\r\n                ];\r\n            case 'exhaustion': {\r\n                switch (condition.level) {\r\n                case 1:\r\n                    return [\r\n                        'disadvantage on ability checks'\r\n                    ];\r\n                case 2:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved'\r\n                    ];\r\n                case 3:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved',\r\n                        'disadvantage on attack rolls and saving throws'\r\n                    ];\r\n                case 4:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved',\r\n                        'disadvantage on attack rolls and saving throws',\r\n                        'hit point maximum halved'\r\n                    ];\r\n                case 5:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved',\r\n                        'disadvantage on attack rolls and saving throws',\r\n                        'hit point maximum halved',\r\n                        'speed reduced to 0'\r\n                    ];\r\n                case 6:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved',\r\n                        'disadvantage on attack rolls and saving throws',\r\n                        'hit point maximum halved',\r\n                        'speed reduced to 0',\r\n                        'death'\r\n                    ];\r\n                default:\r\n                    return [];\r\n                }\r\n            }\r\n            case 'frightened':\r\n                return [\r\n                    'a frightened creature has disadvantage on ability checks and attack rolls while the source of its fear is within line of sight',\r\n                    'the creature can’t willingly move closer to the source of its fear'\r\n                ];\r\n            case 'grappled':\r\n                return [\r\n                    'a grappled creature’s speed becomes 0, and it can’t benefit from any bonus to its speed',\r\n                    'the condition ends if the grappler is incapacitated',\r\n                    'the condition also ends if an effect removes the grappled creature from the reach of the grappler or grappling effect'\r\n                ];\r\n            case 'incapacitated':\r\n                return [\r\n                    'an incapacitated creature can’t take actions or reactions'\r\n                ];\r\n            case 'invisible':\r\n                return [\r\n                    'an invisible creature is impossible to see without the aid of magic or a special sense',\r\n                    'for the purpose of hiding, the creature is heavily obscured',\r\n                    'the creature’s location can be detected by any noise it makes or any tracks it leaves',\r\n                    'attack rolls against the creature have disadvantage, and the creature’s attack rolls have advantage'\r\n                ];\r\n            case 'paralyzed':\r\n                return [\r\n                    'a paralyzed creature is incapacitated (can’t take actions or reactions) and can’t move or speak',\r\n                    'the creature automatically fails strength and dexterity saving throws',\r\n                    'attack rolls against the creature have advantage',\r\n                    'any attack that hits the creature is a critical hit if the attacker is within 5 feet of the creature'\r\n                ];\r\n            case 'petrified':\r\n                return [\r\n                    /* tslint:disable-next-line:max-line-length */\r\n                    'a petrified creature is transformed, along with any nonmagical objects it is wearing or carrying, into a solid inanimate substance (usually stone)',\r\n                    'its weight increases by a factor of ten, and it ceases aging',\r\n                    'the creature is incapacitated (can’t take actions or reactions), can’t move or speak, and is unaware of its surroundings',\r\n                    'attack rolls against the creature have advantage',\r\n                    'the creature automatically fails strength and dexterity saving throws',\r\n                    'the creature has resistance to all damage',\r\n                    'the creature is immune to poison and disease, although a poison or disease already in its system is suspended, not neutralized'\r\n                ];\r\n            case 'poisoned':\r\n                return [\r\n                    'a poisoned creature has disadvantage on attack rolls and ability checks'\r\n                ];\r\n            case 'prone':\r\n                return [\r\n                    'a prone creature’s only movement option is to crawl, unless it stands up and thereby ends the condition',\r\n                    'the creature has disadvantage on attack rolls',\r\n                    /* tslint:disable-next-line:max-line-length */\r\n                    'an attack roll against the creature has advantage if the attacker is Within 5 feet of the creature; otherwise, the attack roll has disadvantage'\r\n                ];\r\n            case 'restrained':\r\n                return [\r\n                    'a restrained creature’s speed becomes 0, and it can’t benefit from any bonus to its speed',\r\n                    'attack rolls against the creature have advantage, and the creature’s attack rolls have disadvantage',\r\n                    'the creature has disadvantage on dexterity saving throws'\r\n                ];\r\n            case 'stunned':\r\n                return [\r\n                    'a stunned creature is incapacitated (can’t take actions or reactions), can’t move, and can speak only falteringly',\r\n                    'the creature automatically fails strength and dexterity saving throws',\r\n                    'attack rolls against the creature have advantage'\r\n                ];\r\n            case 'unconscious':\r\n                return [\r\n                    'an unconscious creature is incapacitated (can’t take actions or reactions), can’t move or speak, and is unaware of its surroundings',\r\n                    'the creature drops whatever its holding and falls prone',\r\n                    'the creature automatically fails strength and dexterity saving throws',\r\n                    'attack rolls against the creature have advantage',\r\n                    'any attack that hits the creature is a critical hit if the attacker is within 5 feet of the creature'\r\n                ];\r\n            case 'custom':\r\n                return [];\r\n            default:\r\n                return [];\r\n        }\r\n    }\r\n\r\n    public static conditionDurationText(condition: Condition, combat: Combat) {\r\n        if (condition.duration !== null) {\r\n            switch (condition.duration.type) {\r\n                case 'saves':\r\n                    const saveDuration = condition.duration as ConditionDurationSaves;\r\n                    let saveType = saveDuration.saveType.toString();\r\n                    if (saveType !== 'death') {\r\n                        saveType = saveType.toUpperCase();\r\n                    }\r\n                    const saves = saveDuration.count > 1 ? 'saves' : 'save';\r\n                    return 'until you make ' + saveDuration.count + ' ' + saveType + ' ' + saves + ' at dc ' + saveDuration.saveDC;\r\n                case 'combatant':\r\n                    const combatantDuration = condition.duration as ConditionDurationCombatant;\r\n                    const point = combatantDuration.point;\r\n                    const c = combat.combatants.find(cmb => cmb.id === combatantDuration.combatantID);\r\n                    const combatant = c ? (c.displayName || c.name || 'unnamed monster') + '\\'s' : 'someone\\'s';\r\n                    return 'until the ' + point + ' of ' + combatant + ' next turn';\r\n                case 'rounds':\r\n                    const roundsDuration = condition.duration as ConditionDurationRounds;\r\n                    const rounds = roundsDuration.count > 1 ? 'rounds' : 'round';\r\n                    return 'for ' + roundsDuration.count + ' ' + rounds;\r\n                default:\r\n                    return null;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public static getMonsterNames(encounter: Encounter | EncounterWave): { id: string, names: string[] }[] {\r\n        const monsterNames: any[] = [];\r\n        if (encounter) {\r\n            encounter.slots.forEach(slot => {\r\n                const names: any[] = [];\r\n                if (slot.count === 1) {\r\n                    names.push(slot.monsterName);\r\n                } else {\r\n                    for (let n = 0; n !== slot.count; ++n) {\r\n                        names.push(slot.monsterName + ' ' + (n + 1));\r\n                    }\r\n                }\r\n\r\n                monsterNames.push({\r\n                    id: slot.id,\r\n                    names: names\r\n                });\r\n            });\r\n        }\r\n\r\n        return monsterNames;\r\n    }\r\n}\r\n","import Utils from './utils';\r\n\r\nimport { Combat, CombatSetup, Notification } from '../models/combat';\r\nimport { Condition, ConditionDurationCombatant, ConditionDurationRounds, ConditionDurationSaves } from '../models/condition';\r\nimport { Encounter, EncounterSlot, EncounterWave } from '../models/encounter';\r\nimport { Map, MapFolio, MapItem } from '../models/map-folio';\r\nimport { Monster, MonsterGroup, Trait } from '../models/monster-group';\r\nimport { Party, PC } from '../models/party';\r\n\r\nexport default class Factory {\r\n\r\n    public static createParty(): Party {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            pcs: []\r\n        };\r\n    }\r\n\r\n    public static createPC(): PC {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'pc',\r\n            active: true,\r\n            player: '',\r\n            name: '',\r\n            race: '',\r\n            classes: '',\r\n            level: 1,\r\n            languages: 'Common',\r\n            passiveInsight: 10,\r\n            passiveInvestigation: 10,\r\n            passivePerception: 10,\r\n            initiative: 10,\r\n            url: ''\r\n        };\r\n    }\r\n\r\n    public static createMonsterGroup(): MonsterGroup {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            monsters: []\r\n        };\r\n    }\r\n\r\n    public static createMonster(): Monster {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'monster',\r\n            name: '',\r\n            size: 'medium',\r\n            category: 'humanoid',\r\n            tag: '',\r\n            alignment: '',\r\n            challenge: 1,\r\n            abilityScores: {\r\n                str: 10,\r\n                dex: 10,\r\n                con: 10,\r\n                int: 10,\r\n                wis: 10,\r\n                cha: 10\r\n            },\r\n            ac: 10,\r\n            hpMax: 4,\r\n            hpTemp: 0,\r\n            hitDice: 1,\r\n            damage: {\r\n                resist: '',\r\n                vulnerable: '',\r\n                immune: ''\r\n            },\r\n            savingThrows: '',\r\n            speed: '',\r\n            skills: '',\r\n            senses: '',\r\n            languages: '',\r\n            equipment: '',\r\n            traits: [],\r\n            conditionImmunities: ''\r\n        };\r\n    }\r\n\r\n    public static createTrait(): Trait {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            usage: '',\r\n            type: 'action',\r\n            text: '',\r\n            uses: 0\r\n        };\r\n    }\r\n\r\n    public static createEncounter(): Encounter {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            slots: [],\r\n            waves: []\r\n        };\r\n    }\r\n\r\n    public static createEncounterSlot(): EncounterSlot {\r\n        return {\r\n            id: Utils.guid(),\r\n            monsterGroupName: '',\r\n            monsterName: '',\r\n            count: 1\r\n        };\r\n    }\r\n\r\n    public static createEncounterWave(): EncounterWave {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            slots: []\r\n        };\r\n    }\r\n\r\n    public static createMapFolio(): MapFolio {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            maps: []\r\n        };\r\n    }\r\n\r\n    public static createMap(): Map {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            items: []\r\n        };\r\n    }\r\n\r\n    public static createMapItem(): MapItem {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'tile',\r\n            x: 0,\r\n            y: 0,\r\n            width: 4,\r\n            height: 4,\r\n            terrain: null\r\n        };\r\n    }\r\n\r\n    public static createCombatSetup(): CombatSetup {\r\n        return {\r\n            partyID: null,\r\n            encounterID: null,\r\n            waveID: null,\r\n            folioID: null,\r\n            mapID: null,\r\n            monsterNames: [],\r\n            encounterInitMode: 'group'\r\n        };\r\n    }\r\n\r\n    public static createCombat(): Combat {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            encounterID: null,\r\n            combatants: [],\r\n            map: null,\r\n            round: 1,\r\n            notifications: [],\r\n            issues: [],\r\n            timestamp: null\r\n        };\r\n    }\r\n\r\n    public static createNotification(): Notification {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'condition-save',\r\n            data: null,\r\n            combatant: null\r\n        };\r\n    }\r\n\r\n    public static createCondition(): Condition {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            level: 1,\r\n            text: null,\r\n            duration: null\r\n        };\r\n    }\r\n\r\n    public static createConditionDurationSaves(): ConditionDurationSaves {\r\n        return {\r\n            type: 'saves',\r\n            count: 1,\r\n            saveType: 'str',\r\n            saveDC: 10,\r\n            point: 'start'\r\n        };\r\n    }\r\n\r\n    public static createConditionDurationCombatant(): ConditionDurationCombatant {\r\n        return {\r\n            type: 'combatant',\r\n            point: 'start',\r\n            combatantID: null\r\n        };\r\n    }\r\n\r\n    public static createConditionDurationRounds(): ConditionDurationRounds {\r\n        return {\r\n            type: 'rounds',\r\n            count: 1\r\n        };\r\n    }\r\n}\r\n","export interface MonsterGroup {\r\n    id: string;\r\n    name: string;\r\n    monsters: Monster[];\r\n}\r\n\r\nexport interface Monster {\r\n    id: string;\r\n    type: string;\r\n    name: string;\r\n    size: string;\r\n    category: string;\r\n    tag: string;\r\n    alignment: string;\r\n    challenge: number;\r\n    abilityScores: {\r\n        str: number;\r\n        dex: number;\r\n        con: number;\r\n        int: number;\r\n        wis: number;\r\n        cha: number;\r\n    };\r\n    ac: number;\r\n    hpMax: number;\r\n    hpTemp: number;\r\n    hitDice: number;\r\n    damage: {\r\n        resist: string;\r\n        vulnerable: string;\r\n        immune: string;\r\n    };\r\n    savingThrows: string;\r\n    speed: string;\r\n    skills: string;\r\n    senses: string;\r\n    languages: string;\r\n    equipment: string;\r\n    traits: Trait[];\r\n    conditionImmunities: string;\r\n}\r\n\r\nexport interface Trait {\r\n    id: string;\r\n    name: string;\r\n    usage: string;\r\n    type: 'trait' | 'action' | 'legendary' | 'lair' | 'regional';\r\n    text: string;\r\n    uses: number;\r\n}\r\n\r\nexport const SIZE_TYPES = [\r\n    'tiny',\r\n    'small',\r\n    'medium',\r\n    'large',\r\n    'huge',\r\n    'gargantuan'\r\n];\r\n\r\nexport const CATEGORY_TYPES = [\r\n    'aberration',\r\n    'beast',\r\n    'celestial',\r\n    'construct',\r\n    'dragon',\r\n    'elemental',\r\n    'fey',\r\n    'fiend',\r\n    'giant',\r\n    'humanoid',\r\n    'monstrosity',\r\n    'ooze',\r\n    'plant',\r\n    'undead'\r\n];\r\n\r\nexport const TRAIT_TYPES = [\r\n    'trait',\r\n    'action',\r\n    'legendary',\r\n    'lair',\r\n    'regional'\r\n];\r\n","import Factory from './factory';\r\nimport Utils from './utils';\r\n\r\nimport { Monster, Trait, TRAIT_TYPES } from '../models/monster-group';\r\n\r\nexport default class Frankenstein {\r\n    public static nudgeValue(target: Monster, field: string, delta: number) {\r\n        let source: any = target;\r\n        let value: any = null;\r\n        const tokens = field.split('.');\r\n        tokens.forEach(token => {\r\n            if (token === tokens[tokens.length - 1]) {\r\n                value = source[token];\r\n            } else {\r\n                source = source[token];\r\n            }\r\n        });\r\n\r\n        const newValue = (field === 'challenge') ? Utils.nudgeChallenge(value, delta) : (value ? value : 0) + delta;\r\n        Frankenstein.changeValue(target, field, newValue);\r\n    }\r\n\r\n    public static changeValue(target: Monster, field: string, value: any) {\r\n        let source: any = target;\r\n        const tokens = field.split('.');\r\n        tokens.forEach(token => {\r\n            if (token === tokens[tokens.length - 1]) {\r\n                source[token] = value;\r\n\r\n                if ((field === 'abilityScores.con') || (field === 'size') || (field === 'hitDice')) {\r\n                    const sides = Utils.hitDieType(target.size);\r\n                    const conMod = Math.floor((target.abilityScores.con - 10) / 2);\r\n                    const hpPerDie = ((sides + 1) / 2) + conMod;\r\n                    const hp = Math.floor(target.hitDice * hpPerDie);\r\n                    target.hpMax = hp;\r\n                }\r\n            } else {\r\n                source = source[token];\r\n            }\r\n        });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Monster creation\r\n\r\n    public static clone(monster: Monster, name: string): Monster {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'monster',\r\n            name: name || (monster.name + ' copy'),\r\n            size: monster.size,\r\n            category: monster.category,\r\n            tag: monster.tag,\r\n            alignment: monster.alignment,\r\n            challenge: monster.challenge,\r\n            abilityScores: {\r\n                str: monster.abilityScores.str,\r\n                dex: monster.abilityScores.dex,\r\n                con: monster.abilityScores.con,\r\n                int: monster.abilityScores.int,\r\n                wis: monster.abilityScores.wis,\r\n                cha: monster.abilityScores.cha\r\n            },\r\n            ac: monster.ac,\r\n            hpMax: monster.hpMax,\r\n            hpTemp: monster.hpTemp,\r\n            hitDice: monster.hitDice,\r\n            damage: {\r\n                resist: monster.damage.resist,\r\n                vulnerable: monster.damage.vulnerable,\r\n                immune: monster.damage.immune\r\n            },\r\n            savingThrows: monster.savingThrows,\r\n            speed: monster.speed,\r\n            skills: monster.skills,\r\n            senses: monster.senses,\r\n            languages: monster.languages,\r\n            equipment: monster.equipment,\r\n            traits: monster.traits.map(trait => {\r\n                return {\r\n                    id: Utils.guid(),\r\n                    name: trait.name,\r\n                    usage: trait.usage,\r\n                    type: trait.type,\r\n                    text: trait.text,\r\n                    uses: 0\r\n                };\r\n            }),\r\n            conditionImmunities: monster.conditionImmunities\r\n        };\r\n    }\r\n\r\n    public static createFromJSON(data: any): Monster {\r\n        const monster = Factory.createMonster();\r\n\r\n        monster.type = 'monster';\r\n        monster.name = data.name;\r\n        monster.size = data.size.toLowerCase();\r\n        monster.category = data.type;\r\n        monster.tag = data.subtype;\r\n        monster.alignment = data.alignment;\r\n        monster.challenge = Utils.parseChallenge(data.challenge_rating);\r\n        monster.ac = data.armor_class;\r\n        monster.hpMax = data.hit_points;\r\n        monster.speed = data.speed;\r\n        monster.senses = data.senses;\r\n        monster.languages = data.languages;\r\n\r\n        const index = data.hit_dice.indexOf('d');\r\n        monster.hitDice = parseInt(data.hit_dice.substring(0, index), 10);\r\n\r\n        monster.abilityScores.str = data.strength;\r\n        monster.abilityScores.dex = data.dexterity;\r\n        monster.abilityScores.con = data.constitution;\r\n        monster.abilityScores.int = data.intelligence;\r\n        monster.abilityScores.wis = data.wisdom;\r\n        monster.abilityScores.cha = data.charisma;\r\n\r\n        monster.damage.resist = data.damage_resistances;\r\n        monster.damage.vulnerable = data.damage_vulnerabilities;\r\n        monster.damage.immune = data.damage_immunities;\r\n        monster.conditionImmunities = data.condition_immunities;\r\n\r\n        const saves = [\r\n            {\r\n                field: 'strength_save',\r\n                text: 'Strength'\r\n            },\r\n            {\r\n                field: 'dexterity_save',\r\n                text: 'Dexterity'\r\n            },\r\n            {\r\n                field: 'constitution_save',\r\n                text: 'Constitution'\r\n            },\r\n            {\r\n                field: 'intelligence_save',\r\n                text: 'Intelligence'\r\n            },\r\n            {\r\n                field: 'wisdom_save',\r\n                text: 'Wisdom'\r\n            },\r\n            {\r\n                field: 'charisma_save',\r\n                text: 'Charisma'\r\n            }\r\n        ];\r\n        saves.forEach(save => {\r\n            if (data[save.field]) {\r\n                const str = save.text + ' ' + data[save.field];\r\n                monster.savingThrows += monster.savingThrows === '' ? str : ', ' + str;\r\n            }\r\n        });\r\n\r\n        const skills = [\r\n            {\r\n                field: 'acrobatics',\r\n                text: 'Acrobatics'\r\n            },\r\n            {\r\n                field: 'animal_handling',\r\n                text: 'Animal handling'\r\n            },\r\n            {\r\n                field: 'arcana',\r\n                text: 'Arcana'\r\n            },\r\n            {\r\n                field: 'athletics',\r\n                text: 'Athletics'\r\n            },\r\n            {\r\n                field: 'deception',\r\n                text: 'Deception'\r\n            },\r\n            {\r\n                field: 'history',\r\n                text: 'History'\r\n            },\r\n            {\r\n                field: 'insight',\r\n                text: 'Insight'\r\n            },\r\n            {\r\n                field: 'intimidation',\r\n                text: 'Intimidation'\r\n            },\r\n            {\r\n                field: 'investigation',\r\n                text: 'Investigation'\r\n            },\r\n            {\r\n                field: 'medicine',\r\n                text: 'Medicine'\r\n            },\r\n            {\r\n                field: 'nature',\r\n                text: 'Nature'\r\n            },\r\n            {\r\n                field: 'perception',\r\n                text: 'Perception'\r\n            },\r\n            {\r\n                field: 'performance',\r\n                text: 'Performance'\r\n            },\r\n            {\r\n                field: 'persuasion',\r\n                text: 'Persuasion'\r\n            },\r\n            {\r\n                field: 'religion',\r\n                text: 'Religion'\r\n            },\r\n            {\r\n                field: 'sleight_of_hand',\r\n                text: 'Sleight of hand'\r\n            },\r\n            {\r\n                field: 'stealth',\r\n                text: 'Stealth'\r\n            },\r\n            {\r\n                field: 'survival',\r\n                text: 'Survival'\r\n            }\r\n        ];\r\n        skills.forEach(skill => {\r\n            if (data[skill.field]) {\r\n                const str = skill.text + ' ' + data[skill.field];\r\n                monster.skills += monster.skills === '' ? str : ', ' + str;\r\n            }\r\n        });\r\n\r\n        if (data.special_abilities) {\r\n            data.special_abilities.forEach((rawTrait: any) => {\r\n                const trait = this.buildTrait(rawTrait, 'trait');\r\n                monster.traits.push(trait);\r\n            });\r\n        }\r\n        if (data.actions) {\r\n            data.actions.forEach((rawTrait: any) => {\r\n                const trait = this.buildTrait(rawTrait, 'action');\r\n                monster.traits.push(trait);\r\n            });\r\n        }\r\n        if (data.legendary_actions) {\r\n            data.legendary_actions.forEach((rawTrait: any) => {\r\n                const trait = this.buildTrait(rawTrait, 'legendary');\r\n                monster.traits.push(trait);\r\n            });\r\n        }\r\n\r\n        return monster;\r\n    }\r\n\r\n    private static buildTrait(rawTrait: any, type: 'trait' | 'action' | 'legendary' | 'lair' | 'regional'): Trait {\r\n        let name = '';\r\n        let usage = '';\r\n\r\n        const openBracket = rawTrait.name.indexOf('(');\r\n        if (openBracket === -1) {\r\n            name = rawTrait.name;\r\n        } else {\r\n            const closeBracket = rawTrait.name.indexOf(')');\r\n            name = rawTrait.name.substring(0, openBracket - 1);\r\n            usage = rawTrait.name.substring(openBracket + 1, closeBracket).toLowerCase();\r\n        }\r\n\r\n        const text = rawTrait.desc.replace(/•/g, '*');\r\n\r\n        return {\r\n            id: Utils.guid(),\r\n            type: type,\r\n            name: name,\r\n            usage: usage,\r\n            text: text,\r\n            uses: 0\r\n        };\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Traits\r\n\r\n    public static copyTrait(target: Monster, trait: Trait) {\r\n        const copy = JSON.parse(JSON.stringify(trait));\r\n        copy.id = Utils.guid();\r\n        target.traits.push(copy);\r\n    }\r\n\r\n    public static addTrait(target: Monster, type: 'trait' | 'action' | 'legendary' | 'lair' | 'regional') {\r\n        const trait = Factory.createTrait();\r\n        trait.type = type;\r\n        trait.name = 'New ' + Utils.traitType(type, false).toLowerCase();\r\n        target.traits.push(trait);\r\n    }\r\n\r\n    public static removeTrait(target: Monster, trait: Trait) {\r\n        const index = target.traits.indexOf(trait);\r\n        target.traits.splice(index, 1);\r\n    }\r\n\r\n    public static swapTraits(target: Monster, t1: Trait, t2: Trait) {\r\n        const index1 = target.traits.indexOf(t1);\r\n        const index2 = target.traits.indexOf(t2);\r\n        target.traits[index2] = t1;\r\n        target.traits[index1] = t2;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Randomisation\r\n\r\n    public static spliceMonsters(target: Monster, monsters: Monster[]) {\r\n        const fields = [\r\n            'size',\r\n            'category',\r\n            'tag',\r\n            'alignment',\r\n            'challenge',\r\n            'speed',\r\n            'senses',\r\n            'languages',\r\n            'equipment',\r\n            'abilityScores.str',\r\n            'abilityScores.dex',\r\n            'abilityScores.con',\r\n            'abilityScores.int',\r\n            'abilityScores.wis',\r\n            'abilityScores.cha',\r\n            'savingThrows',\r\n            'skills',\r\n            'ac',\r\n            'hitDice',\r\n            'damage.resist',\r\n            'damage.vulnerable',\r\n            'damage.immune',\r\n            'conditionImmunities'\r\n        ];\r\n        fields.forEach(field => {\r\n            this.setRandomValue(target, field, monsters);\r\n        });\r\n\r\n        target.traits = [];\r\n\r\n        TRAIT_TYPES.forEach(type => {\r\n            // Get all traits of this type\r\n            const traits: Trait[] = [];\r\n            monsters.forEach(m => {\r\n                m.traits.filter(t => t.type === type)\r\n                    .forEach(t => traits.push(t));\r\n            });\r\n\r\n            // Collate by name\r\n            const distinct: { trait: Trait, count: number }[] = [];\r\n            traits.forEach(t => {\r\n                const current = distinct.find(d => d.trait.name === t.name);\r\n                if (current) {\r\n                    current.count += 1;\r\n                } else {\r\n                    distinct.push({\r\n                        trait: t,\r\n                        count: 1\r\n                    });\r\n                }\r\n            });\r\n\r\n            // If any are common to all monsters, copy them and remove from the candidates\r\n            const addedIDs: string[] = [];\r\n            distinct.filter(d => d.count === monsters.length)\r\n                .forEach(d => {\r\n                    this.copyTrait(target, d.trait);\r\n                    addedIDs.push(d.trait.id);\r\n                });\r\n            addedIDs.forEach(id => {\r\n                const index = distinct.findIndex(d => d.trait.id === id);\r\n                distinct.splice(index, 1);\r\n            });\r\n\r\n            const avg = traits.length / monsters.length;\r\n            while (target.traits.filter(t => t.type === type).length < avg) {\r\n                const index = Math.floor(Math.random() * distinct.length);\r\n                const t = distinct[index].trait;\r\n                this.copyTrait(target, t);\r\n                distinct.splice(index, 1);\r\n            }\r\n        });\r\n    }\r\n\r\n    public static setRandomValue(target: Monster, field: string, monsters: Monster[]) {\r\n        const index = Math.floor(Math.random() * monsters.length);\r\n        const m = monsters[index];\r\n\r\n        let source: any = m;\r\n        let value = null;\r\n        const tokens = field.split('.');\r\n        tokens.forEach(token => {\r\n            if (token === tokens[tokens.length - 1]) {\r\n                value = source[token];\r\n            } else {\r\n                source = source[token];\r\n            }\r\n        });\r\n\r\n        this.changeValue(target, field, value);\r\n    }\r\n\r\n    public static addRandomTrait(target: Monster, type: string, monsters: Monster[]) {\r\n        const traits: Trait[] = [];\r\n        monsters.forEach(m => {\r\n            m.traits.filter(t => t.type === type)\r\n                .forEach(t => {\r\n                    traits.push(t);\r\n                });\r\n        });\r\n\r\n        const index = Math.floor(Math.random() * traits.length);\r\n        const trait = traits[index];\r\n\r\n        this.copyTrait(target, trait);\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport warning from '../../resources/images/warning.svg';\r\n\r\ninterface Props {\r\n    text: string;\r\n    callback: () => void;\r\n    details: string;\r\n    disabled: boolean;\r\n}\r\n\r\ninterface State {\r\n    pressed: boolean;\r\n}\r\n\r\nexport default class ConfirmButton extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        details: null,\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            pressed: false\r\n        };\r\n    }\r\n\r\n    private toggle() {\r\n        this.setState({\r\n            pressed: !this.state.pressed\r\n        });\r\n    }\r\n\r\n    private perform() {\r\n        this.toggle();\r\n        this.props.callback();\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let content = null;\r\n            if (this.state.pressed) {\r\n                content = (\r\n                    <div>\r\n                        <div className='title'>{this.props.text} - are you sure?</div>\r\n                        <img className='image' src={warning} alt='warning' />\r\n                        {this.props.details ? <div className='details'>{this.props.details}</div> : null}\r\n                        <div className='confirmation'>\r\n                            <div className='destructive' onClick={() => this.perform()}>yes</div>\r\n                            <div className='non-destructive' onClick={() => this.toggle()}>no</div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                content = (\r\n                    <div>\r\n                        <div className='title'>{this.props.text}</div>\r\n                        <img className='image' src={warning} alt='warning' />\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <button className={this.props.disabled ? 'disabled' : ''} onClick={() => this.toggle()}>\r\n                    {content}\r\n                </button>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    controls: JSX.Element[];\r\n    disabled: boolean;\r\n}\r\n\r\nexport default class ControlRow extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        disabled: false\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'control-row';\r\n            if (this.props.disabled) {\r\n                style += ' disabled';\r\n            }\r\n            switch (this.props.controls.length) {\r\n                case 1:\r\n                    style += ' one';\r\n                    break;\r\n                case 2:\r\n                    style += ' two';\r\n                    break;\r\n                case 3:\r\n                    style += ' three';\r\n                    break;\r\n                case 4:\r\n                    style += ' four';\r\n                    break;\r\n                case 5:\r\n                    style += ' five';\r\n                    break;\r\n            }\r\n\r\n            return (\r\n                <div className={style}>\r\n                    {this.props.controls}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport ellipsis from '../../resources/images/ellipsis.svg';\r\n\r\ninterface Props {\r\n    options: { id: string; text: string; disabled?: boolean }[];\r\n    select: (optionID: string) => void;\r\n    selectedID: string;\r\n    placeholder: string;\r\n    disabled: boolean;\r\n}\r\n\r\ninterface State {\r\n    open: boolean;\r\n}\r\n\r\nexport default class Dropdown extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        selectedID: null,\r\n        placeholder: 'select...',\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            open: false\r\n        };\r\n    }\r\n\r\n    private toggleOpen(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        this.setState({\r\n            open: !this.state.open\r\n        });\r\n    }\r\n\r\n    private select(optionID: string) {\r\n        this.setState({\r\n            open: false\r\n        });\r\n        this.props.select(optionID);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            if (this.props.options.length === 0) {\r\n                return null;\r\n            }\r\n\r\n            let style = this.props.disabled ? 'dropdown disabled' : 'dropdown';\r\n            const content = [];\r\n\r\n            let selectedText;\r\n            if (this.props.selectedID) {\r\n                const option: { id: string; text: string; disabled?: boolean } | undefined = this.props.options.find(o => o.id === this.props.selectedID);\r\n                if (option) {\r\n                    selectedText = option.text;\r\n                }\r\n            } else {\r\n                selectedText = /*this.props.text ||*/ this.props.placeholder;\r\n            }\r\n\r\n            content.push(\r\n                <div key='selection' className='dropdown-top' title={selectedText}>\r\n                    <div className='item-text'>{selectedText}</div>\r\n                    <img className='arrow' src={ellipsis} alt='arrow' />\r\n                </div>\r\n            );\r\n\r\n            if (this.state.open) {\r\n                style += ' open';\r\n\r\n                const items = this.props.options.map(option => {\r\n                    if (option.text === null) {\r\n                        return <div key={option.id} className='divider' />;\r\n                    } else {\r\n                        return (\r\n                            <DropdownOption\r\n                                key={option.id}\r\n                                option={option}\r\n                                selected={option.id === this.props.selectedID}\r\n                                select={optionID => this.select(optionID)}\r\n                            />\r\n                        );\r\n                    }\r\n                });\r\n\r\n                content.push(\r\n                    <div key='options' className='dropdown-options'>\r\n                        {items}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={style} onClick={e => this.toggleOpen(e)}>\r\n                    {content}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface DropdownOptionProps {\r\n    option: { id: string; text: string; disabled?: boolean };\r\n    selected: boolean;\r\n    select: (optionID: string) => void;\r\n}\r\n\r\nclass DropdownOption extends React.Component<DropdownOptionProps> {\r\n    private click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (!this.props.option.disabled) {\r\n            this.props.select(this.props.option.id);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'dropdown-option';\r\n            if (this.props.selected) {\r\n                style += ' selected';\r\n            }\r\n            if (this.props.option.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            return (\r\n                <div className={style} title={this.props.option.text} onClick={e => this.click(e)}>\r\n                    {this.props.option.text}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport arrow from '../../resources/images/down-arrow-black.svg';\r\n\r\ninterface Props {\r\n    text: string;\r\n    content: string | JSX.Element;\r\n    disabled: boolean;\r\n}\r\n\r\ninterface State {\r\n    expanded: boolean;\r\n}\r\n\r\nexport default class Expander extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            expanded: false\r\n        };\r\n    }\r\n\r\n    private toggle() {\r\n        this.setState({\r\n            expanded: !this.state.expanded\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = this.props.disabled ? 'expander disabled' : 'expander';\r\n            if (this.state.expanded) {\r\n                style += ' expanded';\r\n            }\r\n\r\n            let content = null;\r\n            if (this.state.expanded) {\r\n                content = (\r\n                    <div className='expander-content'>\r\n                        {this.props.content}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={style}>\r\n                    <div className='expander-header' onClick={() => this.toggle()}>\r\n                        <div className='expander-text'>{this.props.text}</div>\r\n                        <img className='expander-button' src={arrow} alt='arrow' />\r\n                    </div>\r\n                    {content}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport arrow from '../../resources/images/down-arrow-black.svg';\r\n\r\ninterface Props {\r\n    click: (dir: string, dir2: 'in' | 'out' | null) => void;\r\n    direction: 'out' | 'in' | 'both' | 'eight';\r\n    disabled: boolean;\r\n}\r\n\r\nexport default class Radial extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        direction: 'out',\r\n        disabled: false\r\n    };\r\n\r\n    private click(e: React.MouseEvent, dir: string, dir2: 'in' | 'out' | null = null) {\r\n        e.stopPropagation();\r\n        this.props.click(dir, dir2);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'radial ' + (this.props.direction || 'out');\r\n            if (this.props.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            const showOut = (this.props.direction === 'out') || (this.props.direction === 'both') || (this.props.direction === 'eight');\r\n            const showIn = (this.props.direction === 'in') || (this.props.direction === 'both');\r\n            const showDiag = (this.props.direction === 'eight');\r\n\r\n            return (\r\n                <div className={style}>\r\n                    <div className='empty' style={{ display: showDiag ? 'none' : 'inline-block' }} />\r\n                    <div className='btn diag' style={{ display: showDiag ? 'inline-block' : 'none' }}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(135deg)' }}\r\n                            alt='nw'\r\n                            onClick={e => this.click(e, 'NW')}\r\n                        />\r\n                    </div>\r\n                    <div className='btn'>\r\n                        <div>\r\n                            <img\r\n                                src={arrow}\r\n                                style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(180deg)' }}\r\n                                alt='n'\r\n                                onClick={e => this.click(e, 'N', 'out')}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <img\r\n                                src={arrow}\r\n                                style={{ display: showIn ? 'inline-block' : 'none' }}\r\n                                alt='n'\r\n                                onClick={e => this.click(e, 'N', 'in')}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className='empty' style={{ display: showDiag ? 'none' : 'inline-block' }} />\r\n                    <div className='btn diag' style={{ display: showDiag ? 'inline-block' : 'none' }}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(-135deg)' }}\r\n                            alt='ne'\r\n                            onClick={e => this.click(e, 'NE')}\r\n                        />\r\n                    </div>\r\n                    <div className='btn' style={{ padding: (showIn && showOut) ? '10px 0' : '0'}}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(90deg)' }}\r\n                            alt='w'\r\n                            onClick={e => this.click(e, 'W', 'out')}\r\n                        />\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showIn ? 'inline-block' : 'none', transform: 'rotate(-90deg)' }}\r\n                            alt='w'\r\n                            onClick={e => this.click(e, 'W', 'in')}\r\n                        />\r\n                    </div>\r\n                    <div className='empty' />\r\n                    <div className='btn' style={{ padding: (showIn && showOut) ? '10px 0' : '0'}}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showIn ? 'inline-block' : 'none', transform: 'rotate(90deg)' }}\r\n                            alt='e'\r\n                            onClick={e => this.click(e, 'E', 'in')}\r\n                        />\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(-90deg)' }}\r\n                            alt='e'\r\n                            onClick={e => this.click(e, 'E', 'out')}\r\n                        />\r\n                    </div>\r\n                    <div className='empty' style={{ display: showDiag ? 'none' : 'inline-block' }} />\r\n                    <div className='btn diag' style={{ display: showDiag ? 'inline-block' : 'none' }}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(45deg)' }}\r\n                            alt='sw'\r\n                            onClick={e => this.click(e, 'SW')}\r\n                        />\r\n                    </div>\r\n                    <div className='btn'>\r\n                        <div>\r\n                            <img\r\n                                src={arrow}\r\n                                style={{ display: showIn ? 'inline-block' : 'none', transform: 'rotate(180deg)' }}\r\n                                alt='s'\r\n                                onClick={e => this.click(e, 'S', 'in')}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <img\r\n                                src={arrow}\r\n                                style={{ display: showOut ? 'inline-block' : 'none' }}\r\n                                alt='s'\r\n                                onClick={e => this.click(e, 'S', 'out')}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className='empty' style={{ display: showDiag ? 'none' : 'inline-block' }} />\r\n                    <div className='btn diag' style={{ display: showDiag ? 'inline-block' : 'none' }}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(-45deg)' }}\r\n                            alt='se'\r\n                            onClick={e => this.click(e, 'SE')}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport minus from '../../resources/images/minus.svg';\r\nimport plus from '../../resources/images/plus.svg';\r\n\r\ninterface Props {\r\n    source: any;\r\n    name: string;\r\n    nudgeValue: (delta: number) => void;\r\n    label: string;\r\n    disabled: boolean;\r\n    factors: number[];\r\n    display: ((value: number) => string) | null;\r\n}\r\n\r\nexport default class Spin extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        label: null,\r\n        disabled: false,\r\n        factors: null,\r\n        display: null\r\n    };\r\n\r\n    private click(e: React.MouseEvent, delta: number) {\r\n        e.stopPropagation();\r\n        this.props.nudgeValue(delta);\r\n    }\r\n\r\n    private touchEnd(e: React.TouchEvent, delta: number) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        this.props.nudgeValue(delta);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'info-value';\r\n            let value = this.props.source[this.props.name];\r\n            if (value === 0) {\r\n                style += ' dimmed';\r\n            }\r\n\r\n            if (this.props.display) {\r\n                value = this.props.display(value);\r\n            }\r\n\r\n            const minusBtns: JSX.Element[] = [];\r\n            const plusBtns: JSX.Element[] = [];\r\n\r\n            if (this.props.factors) {\r\n                this.props.factors.forEach(factor => {\r\n                    minusBtns.push(\r\n                        <div\r\n                            key={'minus' + factor}\r\n                            className='spin-button factor'\r\n                            onTouchEnd={e => this.touchEnd(e, -1 * factor)}\r\n                            onClick={e => this.click(e, -1 * factor)}\r\n                        >\r\n                            {'-' + factor}\r\n                        </div>\r\n                    );\r\n\r\n                    plusBtns.push(\r\n                        <div\r\n                            key={'plus' + factor}\r\n                            className='spin-button factor'\r\n                            onTouchEnd={e => this.touchEnd(e, +1 * factor)}\r\n                            onClick={e => this.click(e, +1 * factor)}\r\n                        >\r\n                            {'+' + factor}\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                minusBtns.reverse();\r\n            } else {\r\n                minusBtns.push(\r\n                    <div key='minus1' className='spin-button' onTouchEnd={e => this.touchEnd(e, -1)} onClick={e => this.click(e, -1)}>\r\n                        <img className='image' src={minus} alt='minus' />\r\n                    </div>\r\n                );\r\n\r\n                plusBtns.push(\r\n                    <div key='plus1' className='spin-button' onTouchEnd={e => this.touchEnd(e, +1)} onClick={e => this.click(e, +1)}>\r\n                        <img className='image' src={plus} alt='plus' />\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            const infoWidth = 80 * (this.props.factors ? this.props.factors.length : 1);\r\n\r\n            return (\r\n                <div className={this.props.disabled ? 'spin disabled' : 'spin'}>\r\n                    <div className='minus'>\r\n                        {minusBtns}\r\n                    </div>\r\n                    <div className='info' style={{ width: 'calc(100% - ' + infoWidth + 'px)' }}>\r\n                        <div className='info-label'>{this.props.label}</div>\r\n                        <div className={style}>{value}</div>\r\n                    </div>\r\n                    <div className='plus'>\r\n                        {plusBtns}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Monster } from '../../models/monster-group';\r\n\r\nimport Spin from '../controls/spin';\r\n\r\ninterface Props {\r\n    combatant: Monster;\r\n    edit: boolean;\r\n    nudgeValue: (combatant: Monster, field: string, delta: number) => void;\r\n}\r\n\r\ninterface State {\r\n    showAbilityScores: boolean;\r\n}\r\n\r\nexport default class AbilityScorePanel extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        edit: null,\r\n        nudgeValue: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showAbilityScores: false\r\n        };\r\n    }\r\n\r\n    private toggleAbilityScores() {\r\n        this.setState({\r\n            showAbilityScores: !this.state.showAbilityScores\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let result = null;\r\n\r\n            if (this.props.edit) {\r\n                result = (\r\n                    <div>\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='str'\r\n                            label='strength'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.str', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='dex'\r\n                            label='dexterity'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.dex', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='con'\r\n                            label='constitution'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.con', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='int'\r\n                            label='intelligence'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.int', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='wis'\r\n                            label='wisdom'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.wis', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='cha'\r\n                            label='charisma'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.cha', delta)}\r\n                        />\r\n                    </div>\r\n                );\r\n            } else {\r\n                result = (\r\n                    <div className='ability-scores' onClick={() => this.toggleAbilityScores()}>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>str</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.str\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.str)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>dex</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.dex\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.dex)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>con</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.con\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.con)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>int</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.int\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.int)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>wis</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.wis\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.wis)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>cha</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.cha\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.cha)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return result;\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combat, Combatant } from '../../models/combat';\r\nimport { Condition } from '../../models/condition';\r\n\r\nimport Expander from '../controls/expander';\r\nimport Spin from '../controls/spin';\r\n\r\ninterface Props {\r\n    combatant: Combatant;\r\n    combat: Combat;\r\n    nudgeConditionValue: (condition: Condition, field: string, delta: number) => void;\r\n    addCondition: () => void;\r\n    editCondition: (condition: Condition) => void;\r\n    removeCondition: (conditionID: string) => void;\r\n}\r\n\r\nexport default class ConditionsPanel extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const conditions = [];\r\n            if (this.props.combatant.conditions) {\r\n                for (let n = 0; n !== this.props.combatant.conditions.length; ++n) {\r\n                    const c = this.props.combatant.conditions[n];\r\n                    conditions.push(\r\n                        <ConditionPanel\r\n                            key={n}\r\n                            condition={c}\r\n                            combat={this.props.combat}\r\n                            nudgeConditionValue={(condition, type, delta) => this.props.nudgeConditionValue(condition, type, delta)}\r\n                            editCondition={condition => this.props.editCondition(condition)}\r\n                            removeCondition={conditionID => this.props.removeCondition(conditionID)}\r\n                        />\r\n                    );\r\n                }\r\n            }\r\n\r\n            return (\r\n                <div className='section'>\r\n                    {conditions}\r\n                    <button onClick={() => this.props.addCondition()}>add a condition</button>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface ConditionPanelProps {\r\n    condition: Condition;\r\n    combat: Combat;\r\n    nudgeConditionValue: (condition: Condition, field: string, delta: number) => void;\r\n    editCondition: (condition: Condition) => void;\r\n    removeCondition: (conditionID: string) => void;\r\n}\r\n\r\nclass ConditionPanel extends React.Component<ConditionPanelProps> {\r\n    public render() {\r\n        try {\r\n            let name: string = this.props.condition.name || 'condition';\r\n            if (this.props.condition.name === 'exhaustion') {\r\n                name += ' (' + this.props.condition.level + ')';\r\n            }\r\n            if ((this.props.condition.name === 'custom') && (this.props.condition.text !== null)) {\r\n                name = this.props.condition.text;\r\n            }\r\n\r\n            if (this.props.condition.duration !== null) {\r\n                name += ' ' + Utils.conditionDurationText(this.props.condition, this.props.combat);\r\n            }\r\n\r\n            const description = [];\r\n            if (this.props.condition.name === 'exhaustion') {\r\n                description.push(\r\n                    <div key='level' className='section'>\r\n                        <Spin\r\n                            source={this.props.condition}\r\n                            name='level'\r\n                            label='level'\r\n                            nudgeValue={delta => this.props.nudgeConditionValue(this.props.condition, 'level', delta)}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n            const text = Utils.conditionText(this.props.condition);\r\n            for (let n = 0; n !== text.length; ++n) {\r\n                description.push(<div key={n} className='section'>{text[n]}</div>);\r\n            }\r\n\r\n            return (\r\n                <Expander\r\n                    text={name}\r\n                    content={(\r\n                        <div>\r\n                            {description}\r\n                            <div className='divider' />\r\n                            <button onClick={() => this.props.editCondition(this.props.condition)}>edit</button>\r\n                            <button onClick={() => this.props.removeCondition(this.props.condition.id)}>remove</button>\r\n                        </div>\r\n                    )}\r\n                />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Showdown from 'showdown';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combatant } from '../../models/combat';\r\nimport { Monster, Trait, TRAIT_TYPES } from '../../models/monster-group';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport ControlRow from '../controls/control-row';\r\nimport Expander from '../controls/expander';\r\n\r\nconst showdown = new Showdown.Converter();\r\n\r\ninterface Props {\r\n    combatant: Monster | (Combatant & Monster);\r\n    mode: 'view' | 'edit' | 'template' | 'combat';\r\n    filter: string;\r\n    addTrait: (traitType: 'trait' | 'action' | 'legendary' | 'lair' | 'regional') => void;\r\n    copyTrait: (trait: Trait) => void;\r\n    removeTrait: (trait: Trait) => void;\r\n    changeValue: (trait: Trait, field: string, value: any) => void;\r\n    swapTraits: (t1: Trait, t2: Trait) => void;\r\n}\r\n\r\nexport default class TraitsPanel extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        mode: 'view',\r\n        filter: '',\r\n        addTrait: null,\r\n        copyTrait: null,\r\n        removeTrait: null,\r\n        changeValue: null,\r\n        swapTraits: null\r\n    };\r\n\r\n    private createTraitPanel(trait: Trait, prevTrait: Trait | null, nextTrait: Trait | null) {\r\n        return (\r\n            <TraitPanel\r\n                key={trait.id}\r\n                trait={trait}\r\n                mode={this.props.mode}\r\n                prevTrait={prevTrait}\r\n                nextTrait={nextTrait}\r\n                changeValue={(action, type, value) => this.props.changeValue(action, type, value)}\r\n                removeTrait={action => this.props.removeTrait(action)}\r\n                copyTrait={action => this.props.copyTrait(action)}\r\n                swapTraits={(t1, t2) => this.props.swapTraits(t1, t2)}\r\n            />\r\n        );\r\n    }\r\n\r\n    private createSection(traitsByType: { [id: string]: JSX.Element[] }, type: string) {\r\n        const traits = traitsByType[type];\r\n        if (traits.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='section subheading'>{Utils.traitType(type, true)}</div>\r\n                {traits}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const traitsByType: { [id: string]: JSX.Element[] } = {};\r\n\r\n            TRAIT_TYPES.forEach(type => {\r\n                const traits = this.props.combatant.traits\r\n                    .filter(t => t.type === type)\r\n                    .filter(t => Utils.match(this.props.filter, t.name));\r\n\r\n                const list: JSX.Element[] = [];\r\n                for (let n = 0; n !== traits.length; ++n) {\r\n                    const trait = traits[n];\r\n                    const prevTrait = n !== 0 ? traits[n - 1] : null;\r\n                    const nextTrait = n !== traits.length - 1 ? traits[n + 1] : null;\r\n                    list.push(this.createTraitPanel(trait, prevTrait, nextTrait));\r\n                }\r\n\r\n                if (this.props.mode === 'edit') {\r\n                    list.push(\r\n                        <button key='add' onClick={() => this.props.addTrait(type as 'trait' | 'action' | 'legendary' | 'lair' | 'regional')}>\r\n                            add a new {Utils.traitType(type, false)}\r\n                        </button>\r\n                    );\r\n                }\r\n\r\n                traitsByType[type] = list;\r\n            });\r\n\r\n            if (this.props.mode === 'edit') {\r\n                return (\r\n                    <div className='row collapse'>\r\n                        <div className='columns small-4 medium-4 large-4 list-column'>\r\n                            {this.createSection(traitsByType, 'trait')}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 list-column'>\r\n                            {this.createSection(traitsByType, 'action')}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 list-column'>\r\n                            {this.createSection(traitsByType, 'legendary')}\r\n                            {this.createSection(traitsByType, 'lair')}\r\n                            {this.createSection(traitsByType, 'regional')}\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            if (this.props.combatant.traits.length === 0) {\r\n                return (\r\n                    <div><i>no traits or actions</i></div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div>\r\n                    {this.createSection(traitsByType, 'trait')}\r\n                    {this.createSection(traitsByType, 'action')}\r\n                    {this.createSection(traitsByType, 'legendary')}\r\n                    {this.createSection(traitsByType, 'lair')}\r\n                    {this.createSection(traitsByType, 'regional')}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface TraitPanelProps {\r\n    trait: Trait;\r\n    mode: 'view' | 'edit' | 'template' | 'combat';\r\n    prevTrait: Trait | null;\r\n    nextTrait: Trait | null;\r\n    changeValue: (trait: Trait, field: string, value: any) => void;\r\n    copyTrait: (trait: Trait) => void;\r\n    removeTrait: (trait: Trait) => void;\r\n    swapTraits: (t1: Trait, t2: Trait) => void;\r\n}\r\n\r\nclass TraitPanel extends React.Component<TraitPanelProps> {\r\n    public render() {\r\n        try {\r\n            let maxUses = 0;\r\n            let heading = this.props.trait.name || 'unnamed ' + Utils.traitType(this.props.trait.type, false);\r\n\r\n            if (this.props.trait.usage) {\r\n                let used = '';\r\n                if (this.props.trait.usage.toLowerCase().startsWith('recharge ')) {\r\n                    maxUses = 1;\r\n                    if (this.props.trait.uses > 0) {\r\n                        used = '; used';\r\n                    }\r\n                }\r\n                const found = this.props.trait.usage.toLowerCase().match(/(\\d+)\\s*\\/\\s*day/);\r\n                if (found) {\r\n                    maxUses = parseInt(found[1], 10);\r\n                    if (this.props.trait.uses > 0) {\r\n                        used = '; used ' + this.props.trait.uses;\r\n                    }\r\n                }\r\n                heading += ' *(' + this.props.trait.usage + used + ')*';\r\n            }\r\n            const markdown = '**' + heading + '** ' + this.props.trait.text;\r\n\r\n            switch (this.props.mode) {\r\n                case 'view':\r\n                    return (\r\n                        <div key={this.props.trait.id} className='section trait'>\r\n                            <div dangerouslySetInnerHTML={{ __html: showdown.makeHtml(markdown) }} />\r\n                        </div>\r\n                    );\r\n                case 'edit':\r\n                    const details = (\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='name'\r\n                                value={this.props.trait.name}\r\n                                onChange={event => this.props.changeValue(this.props.trait, 'name', event.target.value)}\r\n                            />\r\n                            <input\r\n                                type='text'\r\n                                placeholder='usage'\r\n                                value={this.props.trait.usage}\r\n                                onChange={event => this.props.changeValue(this.props.trait, 'usage', event.target.value)}\r\n                            />\r\n                            <textarea\r\n                                placeholder='details'\r\n                                value={this.props.trait.text}\r\n                                onChange={event => this.props.changeValue(this.props.trait, 'text', event.target.value)}\r\n                            />\r\n                            <div className='divider' />\r\n                            <ControlRow\r\n                                controls={[\r\n                                    <button\r\n                                        key='up'\r\n                                        className={this.props.prevTrait ? '' : 'disabled'}\r\n                                        onClick={() => this.props.swapTraits(this.props.trait, this.props.prevTrait as Trait)}\r\n                                    >\r\n                                        move up\r\n                                    </button>,\r\n                                    <button\r\n                                        key='down'\r\n                                        className={this.props.nextTrait ? '' : 'disabled'}\r\n                                        onClick={() => this.props.swapTraits(this.props.trait, this.props.nextTrait as Trait)}\r\n                                    >\r\n                                        move down\r\n                                    </button>\r\n                                ]}\r\n                            />\r\n                            <ConfirmButton text='delete' callback={() => this.props.removeTrait(this.props.trait)} />\r\n                        </div>\r\n                    );\r\n\r\n                    return (\r\n                        <Expander\r\n                            text={this.props.trait.name || 'unnamed ' + Utils.traitType(this.props.trait.type, false)}\r\n                            content={details}\r\n                        />\r\n                    );\r\n                case 'template':\r\n                    return (\r\n                        <div key={this.props.trait.id} className='section trait'>\r\n                            <div dangerouslySetInnerHTML={{ __html: showdown.makeHtml(markdown) }} />\r\n                            <button onClick={() => this.props.copyTrait(this.props.trait)}>copy</button>\r\n                        </div>\r\n                    );\r\n                case 'combat':\r\n                    let style = '';\r\n                    let usage = null;\r\n                    if (maxUses > 0) {\r\n                        const isTapped = this.props.trait.uses >= maxUses;\r\n                        if (isTapped) {\r\n                            style = 'strikethrough';\r\n                            usage = <button onClick={() => this.props.changeValue(this.props.trait, 'uses', 0)}>recharge</button>;\r\n                        } else {\r\n                            usage = <button onClick={() => this.props.changeValue(this.props.trait, 'uses', this.props.trait.uses + 1)}>use</button>;\r\n                        }\r\n                    }\r\n                    return (\r\n                        <div key={this.props.trait.id} className='section trait'>\r\n                            <div className={style} dangerouslySetInnerHTML={{ __html: showdown.makeHtml(markdown) }} />\r\n                            {usage}\r\n                        </div>\r\n                    );\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    heading: string | JSX.Element | JSX.Element[];\r\n    content: string | JSX.Element | JSX.Element[];\r\n}\r\n\r\nexport default class InfoCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div className='card'>\r\n                    {this.props.heading}\r\n                    <div className='card-content'>\r\n                        {this.props.content}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combat, Combatant } from '../../models/combat';\r\nimport { Condition } from '../../models/condition';\r\nimport { Encounter, EncounterSlot, EncounterWave } from '../../models/encounter';\r\nimport { Monster, MonsterGroup, Trait } from '../../models/monster-group';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport ControlRow from '../controls/control-row';\r\nimport Dropdown from '../controls/dropdown';\r\nimport Expander from '../controls/expander';\r\nimport Radial from '../controls/radial';\r\nimport Spin from '../controls/spin';\r\nimport AbilityScorePanel from '../panels/ability-score-panel';\r\nimport ConditionsPanel from '../panels/conditions-panel';\r\nimport TraitsPanel from '../panels/traits-panel';\r\nimport InfoCard from './info-card';\r\n\r\nimport arrow from '../../resources/images/down-arrow.svg';\r\n\r\ninterface Props {\r\n    combatant: Monster | (Monster & Combatant);\r\n    mode: string;\r\n    library: MonsterGroup[];\r\n    changeValue: (monster: any, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, delta: number) => void;\r\n    // Library\r\n    filter: string;\r\n    editMonster: (monster: Monster) => void;\r\n    removeMonster: (monster: Monster) => void;\r\n    cloneMonster: (monster: Monster, name: string) => void;\r\n    moveToGroup: (monster: Monster, group: string) => void;\r\n    copyTrait: (trait: Trait) => void;\r\n    selectMonster: (monster: Monster) => void;\r\n    deselectMonster: (monster: Monster) => void;\r\n    // Encounter builder\r\n    encounter: Encounter;\r\n    slot: EncounterSlot;\r\n    addEncounterSlot: (monster: Monster, waveID: string | null) => void;\r\n    removeEncounterSlot: (slot: EncounterSlot) => void;\r\n    // Combat\r\n    combat: Combat;\r\n    makeCurrent: (combatant: Combatant) => void;\r\n    makeActive: (combatant: Combatant) => void;\r\n    makeDefeated: (combatant: Combatant) => void;\r\n    endTurn: (combatant: Combatant) => void;\r\n    mapAdd: (combatant: Combatant) => void;\r\n    mapMove: (combatant: Combatant, dir: string) => void;\r\n    mapRemove: (combatant: Combatant) => void;\r\n    removeCombatant: (combatant: Combatant) => void;\r\n    changeHP: (combatant: Combatant, hp: number, tempHP: number) => void;\r\n    addCondition: (combatant: Combatant) => void;\r\n    editCondition: (combatant: Combatant, condition: Condition) => void;\r\n    removeCondition: (combatant: Combatant, conditionID: string) => void;\r\n    nudgeConditionValue: (condition: Condition, field: string, delta: number) => void;\r\n}\r\n\r\ninterface State {\r\n    showDetails: boolean;\r\n    cloneName: string;\r\n    damageOrHealing: number;\r\n}\r\n\r\nexport default class MonsterCard extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        library: null,\r\n        changeValue: null,\r\n        nudgeValue: null,\r\n        filter: '',\r\n        editMonster: null,\r\n        removeMonster: null,\r\n        cloneMonster: null,\r\n        moveToGroup: null,\r\n        copyTrait: null,\r\n        selectMonster: null,\r\n        deselectMonster: null,\r\n        encounter: null,\r\n        slot: null,\r\n        addEncounterSlot: null,\r\n        removeEncounterSlot: null,\r\n        combat: null,\r\n        makeCurrent: null,\r\n        makeActive: null,\r\n        makeDefeated: null,\r\n        endTurn: null,\r\n        mapAdd: null,\r\n        mapMove: null,\r\n        mapRemove: null,\r\n        removeCombatant: null,\r\n        changeHP: null,\r\n        addCondition: null,\r\n        editCondition: null,\r\n        removeCondition: null,\r\n        nudgeConditionValue: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showDetails: false,\r\n            cloneName: props.combatant.name + ' copy',\r\n            damageOrHealing: 0\r\n        };\r\n    }\r\n\r\n    private setCloneName(cloneName: string) {\r\n        this.setState({\r\n            cloneName: cloneName\r\n        });\r\n    }\r\n\r\n    private toggleDetails() {\r\n        this.setState({\r\n            showDetails: !this.state.showDetails\r\n        });\r\n    }\r\n\r\n    private setDamage(value: number) {\r\n        this.setState({\r\n            damageOrHealing: value\r\n        });\r\n    }\r\n\r\n    private nudgeDamage(delta: number) {\r\n        this.setState({\r\n            damageOrHealing: Math.max(this.state.damageOrHealing + delta, 0)\r\n        });\r\n    }\r\n\r\n    private heal() {\r\n        const combatant = this.props.combatant as Combatant;\r\n\r\n        let hp = (combatant.hp ? combatant.hp : 0) + this.state.damageOrHealing;\r\n        hp = Math.min(hp, this.props.combatant.hpMax);\r\n\r\n        this.setState({\r\n            damageOrHealing: 0\r\n        }, () => {\r\n            this.props.changeHP(combatant, hp, this.props.combatant.hpTemp);\r\n        });\r\n    }\r\n\r\n    private damage() {\r\n        const combatant = this.props.combatant as Combatant;\r\n\r\n        let hp = (combatant.hp ? combatant.hp : 0);\r\n        let temp = this.props.combatant.hpTemp;\r\n\r\n        let damage = this.state.damageOrHealing;\r\n\r\n        // Take damage off temp HP first\r\n        const val = Math.min(damage, temp);\r\n        damage -= val;\r\n        temp -= val;\r\n\r\n        // Take the rest off HP\r\n        hp -= damage;\r\n        hp = Math.max(hp, 0);\r\n\r\n        this.setState({\r\n            damageOrHealing: 0\r\n        }, () => {\r\n            this.props.changeHP(combatant, hp, temp);\r\n        });\r\n    }\r\n\r\n    private description() {\r\n        let sizeAndType = (this.props.combatant.size + ' ' + this.props.combatant.category).toLowerCase();\r\n        if (this.props.combatant.tag) {\r\n            sizeAndType += ' (' + this.props.combatant.tag.toLowerCase() + ')';\r\n        }\r\n        sizeAndType += ', ';\r\n\r\n        let align = '';\r\n        if (this.props.combatant.alignment) {\r\n            align = this.props.combatant.alignment.toLowerCase() + ', ';\r\n        }\r\n\r\n        const cr = 'cr ' + Utils.challenge(this.props.combatant.challenge);\r\n\r\n        return sizeAndType + align + cr;\r\n    }\r\n\r\n    private monsterIsInWave(wave: EncounterWave) {\r\n        return wave.slots.some(s => {\r\n            const group = this.props.library.find(g => g.monsters.includes(this.props.combatant));\r\n            return !!group && (s.monsterGroupName === group.name) && (s.monsterName === this.props.combatant.name);\r\n        });\r\n    }\r\n\r\n    private getHP() {\r\n        if (this.props.combatant.hitDice === 0) {\r\n            return this.props.combatant.hpMax;\r\n        }\r\n\r\n        const die = Utils.hitDieType(this.props.combatant.size);\r\n        const conMod = Utils.modifierValue(this.props.combatant.abilityScores.con) * this.props.combatant.hitDice;\r\n        let conModStr = '';\r\n        if (conMod > 0) {\r\n            conModStr = ' +' + conMod;\r\n        }\r\n        if (conMod < 0) {\r\n            conModStr = ' ' + conMod;\r\n        }\r\n        return this.props.combatant.hpMax + ' (' + this.props.combatant.hitDice + 'd' + die + conModStr + ')';\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const options = [];\r\n            if (this.props.mode.indexOf('no-buttons') === -1) {\r\n                if (this.props.mode.indexOf('view') !== -1) {\r\n                    if (this.props.mode.indexOf('editable') !== -1) {\r\n                        options.push(\r\n                            <button key='edit' onClick={() => this.props.editMonster(this.props.combatant)}>edit monster</button>\r\n                        );\r\n\r\n                        options.push(\r\n                            <Expander\r\n                                key='clone'\r\n                                text='clone monster'\r\n                                content={\r\n                                    <div>\r\n                                        <input\r\n                                            type='text'\r\n                                            placeholder='monster name'\r\n                                            value={this.state.cloneName}\r\n                                            onChange={event => this.setCloneName(event.target.value)}\r\n                                        />\r\n                                        <button onClick={() => this.props.cloneMonster(this.props.combatant, this.state.cloneName)}>create copy</button>\r\n                                    </div>\r\n                                }\r\n                            />\r\n                        );\r\n\r\n                        const groupOptions: { id: string, text: string }[] = [];\r\n                        this.props.library.forEach(group => {\r\n                            if (group.monsters.indexOf(this.props.combatant) === -1) {\r\n                                groupOptions.push({\r\n                                    id: group.id,\r\n                                    text: group.name\r\n                                });\r\n                            }\r\n                        });\r\n                        options.push(\r\n                            <Dropdown\r\n                                key='move'\r\n                                options={groupOptions}\r\n                                placeholder='move to group...'\r\n                                select={optionID => this.props.moveToGroup(this.props.combatant, optionID)}\r\n                            />\r\n                        );\r\n\r\n                        options.push(<ConfirmButton key='remove' text='delete monster' callback={() => this.props.removeMonster(this.props.combatant)} />);\r\n                    }\r\n                    if (this.props.mode.indexOf('encounter') !== -1) {\r\n                        if (this.props.slot) {\r\n                            // This card is in an encounter or a wave\r\n                            options.push(\r\n                                <button key='remove' onClick={() => this.props.removeEncounterSlot(this.props.slot)}>\r\n                                    remove from encounter\r\n                                </button>\r\n                            );\r\n                        } else {\r\n                            let canAdd = false;\r\n                            // This card is in the library list\r\n                            if (!this.monsterIsInWave(this.props.encounter)) {\r\n                                options.push(\r\n                                    <button key='add encounter' onClick={() => this.props.addEncounterSlot(this.props.combatant, null)}>\r\n                                        add to encounter\r\n                                    </button>\r\n                                );\r\n                                canAdd = true;\r\n                            }\r\n                            this.props.encounter.waves.forEach(wave => {\r\n                                if (!this.monsterIsInWave(wave)) {\r\n                                    options.push(\r\n                                        <button key={'add ' + wave.id} onClick={() => this.props.addEncounterSlot(this.props.combatant, wave.id)}>\r\n                                            add to {wave.name}\r\n                                        </button>\r\n                                    );\r\n                                    canAdd = true;\r\n                                }\r\n                            });\r\n                            // If we can't add it anywhere, don't show it\r\n                            if (!canAdd) {\r\n                                return (\r\n                                    <InfoCard\r\n                                        heading={\r\n                                            (\r\n                                                <div className='heading'>\r\n                                                    <div className='title'>{this.props.combatant.name}</div>\r\n                                                </div>\r\n                                            )\r\n                                        }\r\n                                        content={\r\n                                            (\r\n                                                <div className='section centered'>\r\n                                                    <i>this monster is already part of this encounter</i>\r\n                                                </div>\r\n                                            )\r\n                                        }\r\n                                    />\r\n                                );\r\n                            }\r\n                        }\r\n                    }\r\n                    if (this.props.mode.indexOf('candidate') !== -1) {\r\n                        if (this.props.mode.indexOf('selected') === -1) {\r\n                            options.push(\r\n                                <button key='select' onClick={() => this.props.selectMonster(this.props.combatant)}>select monster</button>\r\n                            );\r\n                        } else {\r\n                            options.push(\r\n                                <button key='deselect' onClick={() => this.props.deselectMonster(this.props.combatant)}>deselect monster</button>\r\n                            );\r\n                        }\r\n                    }\r\n                }\r\n                if (this.props.mode.indexOf('combat') !== -1) {\r\n                    const combatant = this.props.combatant as Combatant;\r\n\r\n                    if (this.props.mode.indexOf('tactical') !== -1) {\r\n                        if (this.props.mode.indexOf('on-map') !== -1) {\r\n                            options.push(\r\n                                <div key='mapMove' className='section centered'>\r\n                                    <Radial\r\n                                        direction='eight'\r\n                                        click={dir => this.props.mapMove(combatant, dir)}\r\n                                    />\r\n                                </div>\r\n                            );\r\n                            options.push(\r\n                                <Spin\r\n                                    key='altitude'\r\n                                    source={this.props.combatant}\r\n                                    name='altitude'\r\n                                    label='altitude'\r\n                                    display={value => value + ' ft.'}\r\n                                    nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'altitude', delta * 5)}\r\n                                />\r\n                            );\r\n                            options.push(<button key='mapRemove' onClick={() => this.props.mapRemove(combatant)}>remove from map</button>);\r\n                        }\r\n                        if (this.props.mode.indexOf('off-map') !== -1) {\r\n                            options.push(<button key='mapAdd' onClick={() => this.props.mapAdd(combatant)}>add to map</button>);\r\n                        }\r\n                        options.push(<div key='tactical-div' className='divider' />);\r\n                    }\r\n                    if (combatant.pending && !combatant.active && !combatant.defeated) {\r\n                        options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                    }\r\n                    if (!combatant.pending && combatant.active && !combatant.defeated) {\r\n                        if (combatant.current) {\r\n                            options.push(<button key='endTurn' onClick={() => this.props.endTurn(combatant)}>end turn</button>);\r\n                            options.push(<button key='makeDefeated' onClick={() => this.props.makeDefeated(combatant)}>mark as defeated and end turn</button>);\r\n                        } else {\r\n                            options.push(<button key='makeCurrent' onClick={() => this.props.makeCurrent(combatant)}>start turn</button>);\r\n                            options.push(<button key='makeDefeated' onClick={() => this.props.makeDefeated(combatant)}>mark as defeated</button>);\r\n                            options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                        }\r\n                    }\r\n                    if (!combatant.pending && !combatant.active && combatant.defeated) {\r\n                        options.push(<button key='makeActive' onClick={() => this.props.makeActive(combatant)}>mark as active</button>);\r\n                        options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                    }\r\n                    options.push(\r\n                        <Expander\r\n                            key='rename'\r\n                            text='change name'\r\n                            content={(\r\n                                <div>\r\n                                    <input\r\n                                        type='text'\r\n                                        value={combatant.displayName}\r\n                                        onChange={event => this.props.changeValue(this.props.combatant, 'displayName', event.target.value)}\r\n                                    />\r\n                                </div>\r\n                            )}\r\n                        />\r\n                    );\r\n                    options.push(\r\n                        <Expander\r\n                            key='init'\r\n                            text='change initiative score'\r\n                            content={(\r\n                                <div>\r\n                                    <Spin\r\n                                        source={this.props.combatant}\r\n                                        name='initiative'\r\n                                        label='initiative'\r\n                                        nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'initiative', delta)}\r\n                                    />\r\n                                </div>\r\n                            )}\r\n                        />\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf('template') !== -1) {\r\n                    // None\r\n                }\r\n            }\r\n\r\n            let stats = null;\r\n            if (this.props.mode.indexOf('view') !== -1) {\r\n                let slotSection = null;\r\n                if (this.props.slot) {\r\n                    slotSection = (\r\n                        <div>\r\n                            <div className='divider' />\r\n                            <Spin\r\n                                source={this.props.slot}\r\n                                name='count'\r\n                                label='count'\r\n                                nudgeValue={delta => this.props.nudgeValue(this.props.slot, 'count', delta)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                let details = null;\r\n                if (this.state.showDetails || (this.props.mode.indexOf('generated') !== -1)) {\r\n                    details = (\r\n                        <div>\r\n                            <div className='divider' />\r\n                            <div className='section'>\r\n                                <b>ac</b> {this.props.combatant.ac}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.hpMax !== 0 ? '' : 'none' }}>\r\n                                <b>hp</b> {this.getHP()}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.speed !== '' ? '' : 'none' }}>\r\n                                <b>speed</b> {this.props.combatant.speed}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <AbilityScorePanel combatant={this.props.combatant} />\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.savingThrows !== '' ? '' : 'none' }}>\r\n                                <b>saving throws</b> {this.props.combatant.savingThrows}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.skills !== '' ? '' : 'none' }}>\r\n                                <b>skills</b> {this.props.combatant.skills}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.damage.resist !== '' ? '' : 'none' }}>\r\n                                <b>damage resistances</b> {this.props.combatant.damage.resist}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.damage.vulnerable !== '' ? '' : 'none' }}>\r\n                                <b>damage vulnerabilities</b> {this.props.combatant.damage.vulnerable}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.damage.immune !== '' ? '' : 'none' }}>\r\n                                <b>damage immunities</b> {this.props.combatant.damage.immune}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.conditionImmunities !== '' ? '' : 'none' }}>\r\n                                <b>condition immunities</b> {this.props.combatant.conditionImmunities}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.senses !== '' ? '' : 'none' }}>\r\n                                <b>senses</b> {this.props.combatant.senses}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.languages !== '' ? '' : 'none' }}>\r\n                                <b>languages</b> {this.props.combatant.languages}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.equipment !== '' ? '' : 'none' }}>\r\n                                <b>equipment</b> {this.props.combatant.equipment}\r\n                            </div>\r\n                            <div className='divider' />\r\n                            <TraitsPanel combatant={this.props.combatant} />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                stats = (\r\n                    <div className='stats'>\r\n                        <div className='section centered'>\r\n                            <i>{this.description()}</i>\r\n                        </div>\r\n                        {slotSection}\r\n                        {details}\r\n                    </div>\r\n                );\r\n            }\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                stats = (\r\n                    <div className='stats'>\r\n                        <div className='section centered'>\r\n                            <i>{this.description()}</i>\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <Spin\r\n                            source={this.props.combatant}\r\n                            name='hp'\r\n                            label='hit points'\r\n                            factors={[1, 10]}\r\n                            nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'hp', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant}\r\n                            name='hpTemp'\r\n                            label='temp hp'\r\n                            factors={[1, 10]}\r\n                            nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'hpTemp', delta)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <Spin\r\n                            source={this.state}\r\n                            name='damageOrHealing'\r\n                            factors={[1, 10]}\r\n                            nudgeValue={delta => this.nudgeDamage(delta)}\r\n                        />\r\n                        <ControlRow\r\n                            controls={[\r\n                                <button key='heal' onClick={() => this.heal()}>heal</button>,\r\n                                <button key='reset' onClick={() => this.setDamage(0)}>reset</button>,\r\n                                <button key='damage' onClick={() => this.damage()}>damage</button>\r\n                            ]}\r\n                            disabled={this.state.damageOrHealing === 0}\r\n                        />\r\n                        <div className='section' style={{ display: this.props.combatant.damage.resist !== '' ? '' : 'none' }}>\r\n                            <b>damage resistances</b> {this.props.combatant.damage.resist}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.damage.vulnerable !== '' ? '' : 'none' }}>\r\n                            <b>damage vulnerabilities</b> {this.props.combatant.damage.vulnerable}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.damage.immune !== '' ? '' : 'none' }}>\r\n                            <b>damage immunities</b> {this.props.combatant.damage.immune}\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='section'>\r\n                            <AbilityScorePanel combatant={this.props.combatant} />\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.ac !== 0 ? '' : 'none' }}>\r\n                            <b>ac</b> {this.props.combatant.ac}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.savingThrows !== '' ? '' : 'none' }}>\r\n                            <b>saving throws</b> {this.props.combatant.savingThrows}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.skills !== '' ? '' : 'none' }}>\r\n                            <b>skills</b> {this.props.combatant.skills}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.speed !== '' ? '' : 'none' }}>\r\n                            <b>speed</b> {this.props.combatant.speed}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.senses !== '' ? '' : 'none' }}>\r\n                            <b>senses</b> {this.props.combatant.senses}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.languages !== '' ? '' : 'none' }}>\r\n                            <b>languages</b> {this.props.combatant.languages}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.equipment !== '' ? '' : 'none' }}>\r\n                            <b>equipment</b> {this.props.combatant.equipment}\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <TraitsPanel\r\n                            combatant={this.props.combatant}\r\n                            mode='combat'\r\n                            changeValue={(trait, field, value) => this.props.changeValue(trait, field, value)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <div className='section subheading'>\r\n                            conditions\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.conditionImmunities !== '' ? '' : 'none' }}>\r\n                            <b>condition immunities</b> {this.props.combatant.conditionImmunities}\r\n                        </div>\r\n                        <ConditionsPanel\r\n                            combatant={this.props.combatant as Combatant}\r\n                            combat={this.props.combat}\r\n                            addCondition={() => this.props.addCondition(this.props.combatant as Combatant)}\r\n                            editCondition={condition => this.props.editCondition(this.props.combatant as Combatant, condition)}\r\n                            removeCondition={conditionID => this.props.removeCondition(this.props.combatant as Combatant, conditionID)}\r\n                            nudgeConditionValue={(condition, type, delta) => this.props.nudgeConditionValue(condition, type, delta)}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n            if (this.props.mode.indexOf('template') !== -1) {\r\n                if (this.props.mode.indexOf('overview') !== -1) {\r\n                    stats = (\r\n                        <div>\r\n                            <div className='section centered'>\r\n                                <i>{this.description()}</i>\r\n                            </div>\r\n                            <div className='divider' />\r\n                            <div className='section'>\r\n                                <b>speed</b> {this.props.combatant.speed || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>senses</b> {this.props.combatant.senses || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>languages</b> {this.props.combatant.languages || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>equipment</b> {this.props.combatant.equipment || '-'}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf('abilities') !== -1) {\r\n                    stats = (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <AbilityScorePanel combatant={this.props.combatant} />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>saving throws</b> {this.props.combatant.savingThrows || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>skills</b> {this.props.combatant.skills || '-'}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf('cbt-stats') !== -1) {\r\n                    stats = (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <b>ac</b> {this.props.combatant.ac}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>hp</b> {this.getHP()}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>damage immunity</b> {this.props.combatant.damage.immune || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>damage resistance</b> {this.props.combatant.damage.resist || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>damage vulnerability</b> {this.props.combatant.damage.vulnerable || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>condition immunities</b> {this.props.combatant.conditionImmunities || '-'}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf('actions') !== -1) {\r\n                    stats = (\r\n                        <TraitsPanel\r\n                            combatant={this.props.combatant}\r\n                            mode='template'\r\n                            filter={this.props.filter}\r\n                            copyTrait={trait => this.props.copyTrait(trait)}\r\n                        />\r\n                    );\r\n                }\r\n            }\r\n\r\n            let toggle = null;\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                // Don't show toggle button for combatant\r\n            } else if (this.props.mode.indexOf('template') !== -1) {\r\n                // Don't show toggle button for template\r\n            } else if (this.props.mode.indexOf('view generated') !== -1) {\r\n                // Don't show toggle button for generated monster\r\n            } else {\r\n                const imageStyle = this.state.showDetails ? 'image rotate' : 'image';\r\n                toggle = (\r\n                    <img className={imageStyle} src={arrow} alt='arrow' onClick={() => this.toggleDetails()} />\r\n                );\r\n            }\r\n\r\n            const name = (this.props.combatant as Combatant ? (this.props.combatant as Combatant).displayName : null)\r\n                || this.props.combatant.name\r\n                || 'unnamed monster';\r\n\r\n            return (\r\n                <div className='card monster'>\r\n                    <div className='heading'>\r\n                        <div className='title'>{name}</div>\r\n                        {toggle}\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        {stats}\r\n                        <div style={{ display: options.length > 0 ? '' : 'none' }}>\r\n                            <div className='divider' />\r\n                            <div className='section'>{options}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Combatant } from '../../models/combat';\r\nimport { PC } from '../../models/party';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport Expander from '../controls/expander';\r\nimport Radial from '../controls/radial';\r\nimport Spin from '../controls/spin';\r\n\r\nimport arrow from '../../resources/images/down-arrow.svg';\r\n\r\ninterface Props {\r\n    combatant: PC | (PC & Combatant);\r\n    mode: string;\r\n    changeValue: (pc: PC, field: string, value: any) => void;\r\n    nudgeValue: (pc: PC, field: string, delta: number) => void;\r\n    removePC: (pc: PC) => void;\r\n    // Combat\r\n    makeCurrent: (combatant: Combatant) => void;\r\n    makeActive: (combatant: Combatant) => void;\r\n    makeDefeated: (combatant: Combatant) => void;\r\n    endTurn: (combatant: Combatant) => void;\r\n    mapAdd: (combatant: Combatant) => void;\r\n    mapMove: (combatant: Combatant, dir: string) => void;\r\n    mapRemove: (combatant: Combatant) => void;\r\n    removeCombatant: (combatant: Combatant) => void;\r\n}\r\n\r\ninterface State {\r\n    showDetails: boolean;\r\n}\r\n\r\nexport default class PCCard extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        removePC: null,\r\n        makeCurrent: null,\r\n        makeActive: null,\r\n        makeDefeated: null,\r\n        endTurn: null,\r\n        mapAdd: null,\r\n        mapMove: null,\r\n        mapRemove: null,\r\n        removeCombatant: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showDetails: false\r\n        };\r\n    }\r\n\r\n    private toggleDetails() {\r\n        this.setState({\r\n            showDetails: !this.state.showDetails\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const options = [];\r\n            if (this.props.mode.indexOf('edit') !== -1) {\r\n                if (this.props.combatant.active) {\r\n                    options.push(\r\n                        <button key='toggle-active' onClick={() => this.props.changeValue(this.props.combatant, 'active', false)}>\r\n                            mark inactive\r\n                        </button>\r\n                    );\r\n                } else {\r\n                    options.push(\r\n                        <button key='toggle-active' onClick={() => this.props.changeValue(this.props.combatant, 'active', true)}>\r\n                            mark active\r\n                        </button>\r\n                    );\r\n                }\r\n                options.push(<ConfirmButton key='remove' text='delete pc' callback={() => this.props.removePC(this.props.combatant)} />);\r\n            }\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                const combatant = this.props.combatant as Combatant;\r\n\r\n                if (this.props.mode.indexOf('tactical') !== -1) {\r\n                    if (this.props.mode.indexOf('on-map') !== -1) {\r\n                        options.push(\r\n                            <div key='mapMove' className='section centered'>\r\n                                <Radial\r\n                                    direction='eight'\r\n                                    click={dir => this.props.mapMove(combatant, dir)}\r\n                                />\r\n                            </div>\r\n                        );\r\n                        options.push(\r\n                            <Spin\r\n                                key='altitude'\r\n                                source={this.props.combatant}\r\n                                name='altitude'\r\n                                label='altitude'\r\n                                display={value => value + ' ft.'}\r\n                                nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'altitude', delta * 5)}\r\n                            />\r\n                        );\r\n                        options.push(<button key='mapRemove' onClick={() => this.props.mapRemove(combatant)}>remove from map</button>);\r\n                    }\r\n                    if (this.props.mode.indexOf('off-map') !== -1) {\r\n                        options.push(<button key='mapAdd' onClick={() => this.props.mapAdd(combatant)}>add to map</button>);\r\n                    }\r\n                    options.push(<div key='tactical-div' className='divider' />);\r\n                }\r\n                if (combatant.pending && !combatant.active && !combatant.defeated) {\r\n                    options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                }\r\n                if (!combatant.pending && combatant.active && !combatant.defeated) {\r\n                    if (combatant.current) {\r\n                        options.push(<button key='endTurn' onClick={() => this.props.endTurn(combatant)}>end turn</button>);\r\n                        options.push(<button key='makeDefeated' onClick={() => this.props.makeDefeated(combatant)}>mark as defeated and end turn</button>);\r\n                    } else {\r\n                        options.push(<button key='makeCurrent' onClick={() => this.props.makeCurrent(combatant)}>start turn</button>);\r\n                        options.push(<button key='makeDefeated' onClick={() => this.props.makeDefeated(combatant)}>mark as defeated</button>);\r\n                        options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                    }\r\n                    options.push(\r\n                        <Expander\r\n                            key='init'\r\n                            text='change initiative score'\r\n                            content={(\r\n                                <div>\r\n                                    <Spin\r\n                                        source={this.props.combatant}\r\n                                        name='initiative'\r\n                                        label='initiative'\r\n                                        nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'initiative', delta)}\r\n                                    />\r\n                                </div>\r\n                            )}\r\n                        />\r\n                    );\r\n                }\r\n                if (!combatant.pending && !combatant.active && combatant.defeated) {\r\n                    options.push(<button key='makeActive' onClick={() => this.props.makeActive(combatant)}>mark as active</button>);\r\n                    options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                }\r\n            }\r\n\r\n            const desc = (this.props.combatant.race || 'unknown race')\r\n                + ' ' + (this.props.combatant.classes || 'unknown class')\r\n                + ', level ' + this.props.combatant.level;\r\n\r\n            const commonStatBlock = (\r\n                <div className='stats'>\r\n                    <div className='section centered lowercase'>\r\n                        <i>{desc}</i>\r\n                        <div style={{ display: this.props.combatant.url ? '' : 'none' }}>\r\n                            <a href={this.props.combatant.url} target='_blank' rel='noopener noreferrer'>d&d beyond sheet</a>\r\n                        </div>\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section subheading'>languages</div>\r\n                    <div className='section'>\r\n                        {this.props.combatant.languages || '-'}\r\n                    </div>\r\n                    <div className='section subheading'>passive skills</div>\r\n                    <div className='section'>\r\n                        <div><b>insight</b> {this.props.combatant.passiveInsight}</div>\r\n                        <div><b>investigation</b> {this.props.combatant.passiveInvestigation}</div>\r\n                        <div><b>perception</b> {this.props.combatant.passivePerception}</div>\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            let stats = null;\r\n            if (this.props.mode.indexOf('edit') !== -1) {\r\n                if (this.state.showDetails) {\r\n                    stats = (\r\n                        <div className='edit'>\r\n                            <div className='section'>\r\n                                <div className='input-label' style={{ display: this.state.showDetails ? '' : 'none' }}>character name:</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.props.combatant.name}\r\n                                    onChange={event => this.props.changeValue(this.props.combatant, 'name', event.target.value)}\r\n                                />\r\n                                <div className='input-label' style={{ display: this.state.showDetails ? '' : 'none' }}>player name:</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.props.combatant.player}\r\n                                    onChange={event => this.props.changeValue(this.props.combatant, 'player', event.target.value)}\r\n                                />\r\n                                <div className='input-label'>race:</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.props.combatant.race}\r\n                                    onChange={event => this.props.changeValue(this.props.combatant, 'race', event.target.value)}\r\n                                />\r\n                                <div className='input-label'>class:</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.props.combatant.classes}\r\n                                    onChange={event => this.props.changeValue(this.props.combatant, 'classes', event.target.value)}\r\n                                />\r\n                                <div className='input-label'>level:</div>\r\n                                <Spin\r\n                                    source={this.props.combatant}\r\n                                    name='level'\r\n                                    nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'level', delta)}\r\n                                />\r\n                                <div className='input-label'>languages:</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.props.combatant.languages}\r\n                                    onChange={event => this.props.changeValue(this.props.combatant, 'languages', event.target.value)}\r\n                                />\r\n                                <div className='input-label'>d&d beyond link:</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.props.combatant.url}\r\n                                    onChange={event => this.props.changeValue(this.props.combatant, 'url', event.target.value)}\r\n                                />\r\n                            </div>\r\n                            <div className='divider' />\r\n                            <div className='section subheading'>passive skills</div>\r\n                            <Spin\r\n                                source={this.props.combatant}\r\n                                name='passiveInsight'\r\n                                label='insight'\r\n                                nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'passiveInsight', delta)}\r\n                            />\r\n                            <Spin\r\n                                source={this.props.combatant}\r\n                                name='passiveInvestigation'\r\n                                label='investigation'\r\n                                nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'passiveInvestigation', delta)}\r\n                            />\r\n                            <Spin\r\n                                source={this.props.combatant}\r\n                                name='passivePerception'\r\n                                label='perception'\r\n                                nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'passivePerception', delta)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                } else {\r\n                    stats = commonStatBlock;\r\n                }\r\n            }\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                stats = commonStatBlock;\r\n            }\r\n\r\n            let toggle = null;\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                // Don't show toggle button for combatant\r\n            } else {\r\n                const imageStyle = this.state.showDetails ? 'image rotate' : 'image';\r\n                toggle = <img className={imageStyle} src={arrow} alt='arrow' onClick={() => this.toggleDetails()} />;\r\n            }\r\n\r\n            const name = (this.props.combatant as Combatant ? (this.props.combatant as Combatant).displayName : null)\r\n                || this.props.combatant.name\r\n                || 'unnamed pc';\r\n\r\n            return (\r\n                <div className='card pc'>\r\n                    <div className='heading'>\r\n                        <div className='title'>{name}</div>\r\n                        {toggle}\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        {stats}\r\n                        <div style={{ display: options.length > 0 ? '' : 'none' }}>\r\n                            <div className='divider' />\r\n                            <div className='section'>\r\n                                {options}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Combatant } from '../../models/combat';\r\nimport { Monster } from '../../models/monster-group';\r\n\r\ninterface Props {\r\n    combatant: Combatant & Monster;\r\n}\r\n\r\nexport default class HitPointGauge extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const hpCurrent = this.props.combatant.hp || 0;\r\n            const hpMax = this.props.combatant.hpMax + this.props.combatant.hpTemp;\r\n            const hpBloodied = this.props.combatant.hpMax / 2;\r\n            const hpWidth = 100 * Math.max(hpCurrent, 0) / hpMax;\r\n\r\n            let style = '';\r\n            if (hpCurrent >= this.props.combatant.hpMax) {\r\n                style = 'bar unhurt';\r\n            } else if (hpCurrent <= hpBloodied) {\r\n                style = 'bar bloodied';\r\n            } else {\r\n                style = 'bar injured';\r\n            }\r\n\r\n            let hpTempBar = null;\r\n            if (this.props.combatant.hpTemp > 0) {\r\n                const hpTempWidth = 100 * Math.max(this.props.combatant.hpTemp, 0) / hpMax;\r\n                hpTempBar = <div className='bar temp' style={{ width: hpTempWidth + '%' }} />;\r\n            }\r\n\r\n            return (\r\n                <div className='hp-gauge'>\r\n                    <div className={style} style={{ width: hpWidth + '%' }} />\r\n                    {hpTempBar}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Combatant } from '../../models/combat';\r\nimport { Map, MapItem } from '../../models/map-folio';\r\nimport { Monster } from '../../models/monster-group';\r\nimport { PC } from '../../models/party';\r\n\r\nimport HitPointGauge from './hit-point-gauge';\r\n\r\ninterface Props {\r\n    map: Map;\r\n    mode: 'edit' | 'thumbnail' | 'combat';\r\n    combatants: ((Combatant & PC) | (Combatant & Monster))[];\r\n    showOverlay: boolean;\r\n    selectedItemID: string;\r\n    setSelectedItemID: (itemID: string | null) => void;\r\n    addMapTile: (x: number, y: number) => void;\r\n    gridSquareClicked: (x: number, y: number) => void;\r\n}\r\n\r\ninterface MapDimensions {\r\n    minX: number;\r\n    maxX: number;\r\n    minY: number;\r\n    maxY: number;\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\ninterface StyleData {\r\n    left: string;\r\n    top: string;\r\n    width: string;\r\n    height: string;\r\n}\r\n\r\nexport default class MapPanel extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        combatants: null,\r\n        showOverlay: false,\r\n        selectedItemID: null,\r\n        setSelectedItemID: null,\r\n        addMapTile: null,\r\n        gridSquareClicked: null\r\n    };\r\n\r\n    private getMapDimensions(border: number): MapDimensions | null {\r\n        let dimensions: MapDimensions | null = null;\r\n\r\n        this.props.map.items.filter(i => {\r\n            if (this.props.mode === 'edit') {\r\n                return i.type === 'tile';\r\n            }\r\n            return true;\r\n        }).forEach(i => {\r\n            if (!dimensions) {\r\n                dimensions = {\r\n                    minX: i.x,\r\n                    maxX: i.x + i.width - 1,\r\n                    minY: i.y,\r\n                    maxY: i.y + i.height - 1,\r\n                    width: 0,\r\n                    height: 0\r\n                };\r\n            } else {\r\n                dimensions.minX = Math.min(dimensions.minX, i.x);\r\n                dimensions.maxX = Math.max(dimensions.maxX, i.x + i.width - 1);\r\n                dimensions.minY = Math.min(dimensions.minY, i.y);\r\n                dimensions.maxY = Math.max(dimensions.maxY, i.y + i.height - 1);\r\n            }\r\n        });\r\n\r\n        if (!dimensions) {\r\n            // The map is blank\r\n            if (this.props.mode === 'thumbnail') {\r\n                return null;\r\n            }\r\n\r\n            dimensions = {\r\n                minX: 0,\r\n                maxX: 0,\r\n                minY: 0,\r\n                maxY: 0,\r\n                width: 0,\r\n                height: 0\r\n            };\r\n        }\r\n\r\n        // Apply the border\r\n        dimensions.minX -= border;\r\n        dimensions.maxX += border;\r\n        dimensions.minY -= border;\r\n        dimensions.maxY += border;\r\n\r\n        // Set width and height\r\n        dimensions.width = 1 + dimensions.maxX - dimensions.minX;\r\n        dimensions.height = 1 + dimensions.maxY - dimensions.minY;\r\n\r\n        return dimensions;\r\n    }\r\n\r\n    private getSideLength(): number {\r\n        switch (this.props.mode) {\r\n            case 'thumbnail':\r\n                return 5;\r\n            case 'edit':\r\n            case 'combat':\r\n                return 25;\r\n            default:\r\n                return 5;\r\n        }\r\n    }\r\n\r\n    private getStyle(x: number, y: number, width: number, height: number, mapDimensions: MapDimensions): StyleData {\r\n        const sideLength = this.getSideLength();\r\n\r\n        return {\r\n            left: 'calc(' + sideLength + 'px * ' + (x - mapDimensions.minX) + ')',\r\n            top: 'calc(' + sideLength + 'px * ' + (y - mapDimensions.minY) + ')',\r\n            width: 'calc((' + sideLength + 'px * ' + width + ') + 1px)',\r\n            height: 'calc((' + sideLength + 'px * ' + height + ') + 1px)'\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const border = (this.props.mode === 'edit') ? 2 : 0;\r\n            const mapDimensions = this.getMapDimensions(border);\r\n            if (!mapDimensions) {\r\n                return (\r\n                    <div>(blank map)</div>\r\n                );\r\n            }\r\n\r\n            // Draw the grid squares\r\n            const grid = [];\r\n            if (this.props.mode === 'edit') {\r\n                for (let y = mapDimensions.minY; y !== mapDimensions.maxY + 1; ++y) {\r\n                    for (let x = mapDimensions.minX; x !== mapDimensions.maxX + 1; ++x) {\r\n                        const gridStyle = this.getStyle(x, y, 1, 1, mapDimensions);\r\n                        grid.push(\r\n                            <GridSquare\r\n                                key={x + ',' + y}\r\n                                x={x}\r\n                                y={y}\r\n                                style={gridStyle}\r\n                                onClick={() => this.props.setSelectedItemID(null)}\r\n                                onDoubleClick={(posX, posY) => this.props.addMapTile(posX, posY)}\r\n                            />\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Draw the map tiles\r\n            const tiles = this.props.map.items\r\n                .filter(i => i.type === 'tile')\r\n                .map(i => {\r\n                    const tileStyle = this.getStyle(i.x, i.y, i.width, i.height, mapDimensions as MapDimensions);\r\n                    return (\r\n                        <MapTile\r\n                            key={i.id}\r\n                            tile={i}\r\n                            style={tileStyle}\r\n                            selectable={this.props.mode === 'edit'}\r\n                            selected={this.props.selectedItemID === i.id}\r\n                            thumbnail={this.props.mode === 'thumbnail'}\r\n                            select={id => this.props.mode === 'edit' ? this.props.setSelectedItemID(id) : null}\r\n                        />\r\n                    );\r\n                });\r\n\r\n            // Draw the tokens\r\n            let tokens: JSX.Element[] = [];\r\n            if (this.props.mode !== 'edit') {\r\n                tokens = this.props.map.items\r\n                    .filter(i => (i.type === 'monster') || (i.type === 'pc'))\r\n                    .map(i => {\r\n                        const tokenStyle = this.getStyle(i.x, i.y, i.width, i.height, mapDimensions as MapDimensions);\r\n                        const combatant = this.props.combatants.find(c => c.id === i.id);\r\n                        if (combatant) {\r\n                            return (\r\n                                <MapToken\r\n                                    key={i.id}\r\n                                    token={i}\r\n                                    combatant={combatant}\r\n                                    style={tokenStyle}\r\n                                    simple={this.props.mode === 'thumbnail'}\r\n                                    selectable={this.props.mode === 'combat'}\r\n                                    selected={this.props.selectedItemID ===  i.id}\r\n                                    select={id => this.props.setSelectedItemID(id)}\r\n                                />\r\n                            );\r\n                        }\r\n\r\n                        return null;\r\n                    })\r\n                    .filter(mt => mt !== null) as JSX.Element[];\r\n            }\r\n\r\n            // Draw the drag overlay\r\n            const dragOverlay = [];\r\n            if (this.props.showOverlay) {\r\n                for (let yOver = mapDimensions.minY; yOver !== mapDimensions.maxY + 1; ++yOver) {\r\n                    for (let xOver = mapDimensions.minX; xOver !== mapDimensions.maxX + 1; ++xOver) {\r\n                        const overlayStyle = this.getStyle(xOver, yOver, 1, 1, mapDimensions);\r\n                        dragOverlay.push(\r\n                            <GridSquare\r\n                                key={xOver + ',' + yOver}\r\n                                x={xOver}\r\n                                y={yOver}\r\n                                style={overlayStyle}\r\n                                overlay={true}\r\n                                onClick={(posX, posY) => this.props.gridSquareClicked(posX, posY)}\r\n                            />\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n\r\n            const style = 'map-panel ' + this.props.mode;\r\n            return (\r\n                <div className={style} onClick={() => this.props.setSelectedItemID(null)}>\r\n                    <div className='grid' style={{ height: ((this.getSideLength() * mapDimensions.height) + 1) + 'px' }}>\r\n                        {grid}\r\n                        {tiles}\r\n                        {tokens}\r\n                        {dragOverlay}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface GridSquareProps {\r\n    x: number;\r\n    y: number;\r\n    style: StyleData;\r\n    overlay: boolean;\r\n    onClick: (x: number, y: number) => void;\r\n    onDoubleClick: (x: number, y: number) => void;\r\n}\r\n\r\nclass GridSquare extends React.Component<GridSquareProps> {\r\n    public static defaultProps = {\r\n        overlay: false,\r\n        onDoubleClick: null\r\n    };\r\n\r\n    private click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (this.props.onClick) {\r\n            this.props.onClick(this.props.x, this.props.y);\r\n        }\r\n    }\r\n\r\n    private doubleClick(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (this.props.onDoubleClick) {\r\n            this.props.onDoubleClick(this.props.x, this.props.y);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'grid-square';\r\n        if (this.props.overlay) {\r\n            style += ' grid-overlay';\r\n        }\r\n\r\n        return (\r\n            <div\r\n                className={style}\r\n                style={this.props.style}\r\n                onClick={e => this.click(e)}\r\n                onDoubleClick={e => this.doubleClick(e)}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\ninterface MapTileProps {\r\n    tile: MapItem;\r\n    style: StyleData;\r\n    thumbnail: boolean;\r\n    selectable: boolean;\r\n    selected: boolean;\r\n    select: (tileID: string) => void;\r\n}\r\n\r\nclass MapTile extends React.Component<MapTileProps> {\r\n    private select(e: React.MouseEvent) {\r\n        if (this.props.selectable) {\r\n            e.stopPropagation();\r\n            this.props.select(this.props.tile.id);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'tile ' + this.props.tile.terrain;\r\n        if (this.props.selected) {\r\n            style += ' selected';\r\n        }\r\n        if (this.props.thumbnail) {\r\n            style += ' thumbnail';\r\n        }\r\n\r\n        return (\r\n            <div\r\n                className={style}\r\n                style={this.props.style}\r\n                onClick={e => this.select(e)}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\ninterface MapTokenProps {\r\n    token: MapItem;\r\n    combatant: (Combatant & PC) | (Combatant & Monster);\r\n    style: StyleData;\r\n    simple: boolean;\r\n    selectable: boolean;\r\n    selected: boolean;\r\n    select: (tokenID: string) => void;\r\n}\r\n\r\nclass MapToken extends React.Component<MapTokenProps> {\r\n    private select(e: React.MouseEvent) {\r\n        if (this.props.selectable) {\r\n            e.stopPropagation();\r\n            this.props.select(this.props.token.id);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'token ' + this.props.token.type;\r\n        if (this.props.selected) {\r\n            style += ' selected';\r\n        }\r\n        if (this.props.combatant.current) {\r\n            style += ' current';\r\n        }\r\n\r\n        let initials = null;\r\n        let hpGauge = null;\r\n        let altitudeBadge = null;\r\n        let conditionsBadge = null;\r\n        if (!this.props.simple) {\r\n            const name = this.props.combatant.displayName || this.props.combatant.name;\r\n            initials = (\r\n                <div className='initials'>{name.split(' ').map(s => s[0])}</div>\r\n            );\r\n\r\n            if (this.props.combatant.type === 'monster') {\r\n                hpGauge = (\r\n                    <HitPointGauge combatant={this.props.combatant as Combatant & Monster} />\r\n                );\r\n            }\r\n\r\n            if (this.props.combatant.altitude > 0) {\r\n                altitudeBadge = (\r\n                    <div className='badge altitude'>&#9206;</div>\r\n                );\r\n            }\r\n\r\n            if (this.props.combatant.altitude < 0) {\r\n                altitudeBadge = (\r\n                    <div className='badge altitude'>&#9207;</div>\r\n                );\r\n            }\r\n\r\n            if ((this.props.combatant.conditions) && (this.props.combatant.conditions.length > 0)) {\r\n                conditionsBadge = (\r\n                    <div className='badge'>&#9670;</div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div\r\n                title={this.props.combatant.displayName || this.props.combatant.name}\r\n                className={style}\r\n                style={this.props.style}\r\n                onClick={e => this.select(e)}\r\n            >\r\n                {initials}\r\n                {hpGauge}\r\n                {altitudeBadge}\r\n                {conditionsBadge}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Combat } from '../../models/combat';\r\n\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    combat: Combat;\r\n    selected: boolean;\r\n    setSelection: (combat: Combat) => void;\r\n}\r\n\r\nexport default class CombatListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            let map = null;\r\n            if (this.props.combat.map) {\r\n                map = (\r\n                    <MapPanel\r\n                        map={this.props.combat.map}\r\n                        mode='thumbnail'\r\n                        combatants={this.props.combat.combatants}\r\n                    />\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.combat)}>\r\n                    <div className='heading'>{this.props.combat.name || 'unnamed combat'}</div>\r\n                    <div className='text'>paused at {this.props.combat.timestamp}</div>\r\n                    {map}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport close from '../../resources/images/close-black.svg';\r\nimport arrow from '../../resources/images/down-arrow-black.svg';\r\n\r\ninterface Props {\r\n    content: any[];\r\n    heading: string;\r\n    hidden: boolean;\r\n    showClose: boolean;\r\n    showToggle: boolean;\r\n    close: () => void;\r\n}\r\n\r\ninterface State {\r\n    showCards: boolean;\r\n}\r\n\r\nexport default class CardGroup extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        heading: null,\r\n        hidden: false,\r\n        showClose: false,\r\n        showToggle: false,\r\n        close: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showCards: true\r\n        };\r\n    }\r\n\r\n    private toggleCards() {\r\n        this.setState({\r\n            showCards: !this.state.showCards\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            if (this.props.hidden) {\r\n                return null;\r\n            }\r\n\r\n            let heading = null;\r\n            if (this.props.heading) {\r\n                let closeBtn = null;\r\n                if (this.props.showClose) {\r\n                    closeBtn = (\r\n                        <img className='image' src={close} alt='close' onClick={() => this.props.close()} />\r\n                    );\r\n                }\r\n\r\n                let toggle = null;\r\n                if (this.props.showToggle) {\r\n                    const style = this.state.showCards ? 'image rotate' : 'image';\r\n                    toggle = (\r\n                        <img className={style} src={arrow} alt='arrow' onClick={() => this.toggleCards()} />\r\n                    );\r\n                }\r\n\r\n                heading = (\r\n                    <div className='heading'>\r\n                        <div className='title'>{this.props.heading}</div>\r\n                        {toggle}\r\n                        {closeBtn}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            let cards = [];\r\n            if ((this.props.content.length > 0) && this.state.showCards) {\r\n                cards = this.props.content;\r\n            }\r\n\r\n            return (\r\n                <div className='card-group'>\r\n                    {heading}\r\n                    <div className='row small-up-1 medium-up-2 large-up-3 collapse'>\r\n                        {cards}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    content: string | JSX.Element | JSX.Element[];\r\n    white: boolean;\r\n}\r\n\r\nexport default class Note extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        white: false\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'descriptive';\r\n            if (this.props.white) {\r\n                style += ' white';\r\n            }\r\n\r\n            return (\r\n                <div className={style}>\r\n                    {this.props.content}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combat, Combatant, Notification } from '../../models/combat';\r\nimport { Condition, ConditionDurationSaves } from '../../models/condition';\r\nimport { Monster, Trait } from '../../models/monster-group';\r\nimport { PC } from '../../models/party';\r\n\r\nimport MonsterCard from '../cards/monster-card';\r\nimport PCCard from '../cards/pc-card';\r\nimport ControlRow from '../controls/control-row';\r\nimport Spin from '../controls/spin';\r\nimport CombatListItem from '../list-items/combat-list-item';\r\nimport CardGroup from '../panels/card-group';\r\nimport HitPointGauge from '../panels/hit-point-gauge';\r\nimport MapPanel from '../panels/map-panel';\r\nimport Note from '../panels/note';\r\n\r\ninterface Props {\r\n    combats: Combat[];\r\n    combat: Combat | null;\r\n    filter: string;\r\n    showHelp: boolean;\r\n    createCombat: () => void;\r\n    resumeEncounter: (combat: Combat) => void;\r\n    close: (notification: Notification, removeCondition: boolean) => void;\r\n    mapAdd: (combatant: (Combatant & PC) | (Combatant & Monster), x: number, y: number) => void;\r\n    makeCurrent: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    makeActive: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    makeDefeated: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    removeCombatant: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    addCondition: (combatant: Combatant & Monster) => void;\r\n    editCondition: (combatant: Combatant & Monster, condition: Condition) => void;\r\n    removeCondition: (combatant: Combatant & Monster, conditionID: string) => void;\r\n    mapMove: (combatant: (Combatant & PC) | (Combatant & Monster), dir: string) => void;\r\n    mapRemove: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    endTurn: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    changeHP: (combatant: Combatant & Monster, hp: number, temp: number) => void;\r\n    changeValue: (source: {}, type: string, value: any) => void;\r\n    nudgeValue: (source: {}, type: string, delta: number) => void;\r\n}\r\n\r\ninterface State {\r\n    selectedTokenID: string | null;\r\n    addingToMapID: string | null;\r\n}\r\n\r\nexport default class CombatManagerScreen extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            selectedTokenID: null,  // The ID of the combatant that's selected\r\n            addingToMapID: null     // The ID of the combatant we're adding to the map\r\n        };\r\n    }\r\n\r\n    private setSelectedTokenID(id: string | null) {\r\n        this.setState({\r\n            selectedTokenID: id\r\n        });\r\n    }\r\n\r\n    private setAddingToMapID(id: string | null) {\r\n        this.setState({\r\n            addingToMapID: id\r\n        });\r\n    }\r\n\r\n    private createCard(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        let mode = 'combat';\r\n        if (this.props.combat && this.props.combat.map) {\r\n            mode += ' tactical';\r\n            const onMap = this.props.combat.map.items.find(i => i.id === combatant.id);\r\n            mode += onMap ? ' on-map' : ' off-map';\r\n        }\r\n\r\n        switch (combatant.type) {\r\n            case 'pc':\r\n                return (\r\n                    <PCCard\r\n                        key='selected'\r\n                        combatant={combatant as Combatant & PC}\r\n                        mode={mode}\r\n                        changeValue={(source, type, value) => this.props.changeValue(source, type, value)}\r\n                        nudgeValue={(source, type, delta) => this.props.nudgeValue(source, type, delta)}\r\n                        makeCurrent={c => this.props.makeCurrent(c as Combatant & PC)}\r\n                        makeActive={c => this.props.makeActive(c as Combatant & PC)}\r\n                        makeDefeated={c => this.props.makeDefeated(c as Combatant & PC)}\r\n                        removeCombatant={c => this.props.removeCombatant(c as Combatant & PC)}\r\n                        mapAdd={c => this.setAddingToMapID(c.id)}\r\n                        mapMove={(c, dir) => this.props.mapMove(c as Combatant & PC, dir)}\r\n                        mapRemove={c => this.props.mapRemove(c as Combatant & PC)}\r\n                        endTurn={c => this.props.endTurn(c as Combatant & PC)}\r\n                    />\r\n                );\r\n            case 'monster':\r\n                return (\r\n                    <MonsterCard\r\n                        key='selected'\r\n                        combatant={combatant as Combatant & Monster}\r\n                        mode={mode}\r\n                        combat={this.props.combat as Combat}\r\n                        changeValue={(c, type, value) => this.props.changeValue(c, type, value)}\r\n                        nudgeValue={(c, type, delta) => this.props.nudgeValue(c, type, delta)}\r\n                        makeCurrent={c => this.props.makeCurrent(c as Combatant & Monster)}\r\n                        makeActive={c => this.props.makeActive(c as Combatant & Monster)}\r\n                        makeDefeated={c => this.props.makeDefeated(c as Combatant & Monster)}\r\n                        removeCombatant={c => this.props.removeCombatant(c as Combatant & Monster)}\r\n                        addCondition={c => this.props.addCondition(c as Combatant & Monster)}\r\n                        editCondition={(c, condition) => this.props.editCondition(c as Combatant & Monster, condition)}\r\n                        removeCondition={(c, conditionID) => this.props.removeCondition(c as Combatant & Monster, conditionID)}\r\n                        nudgeConditionValue={(c, type, delta) => this.props.nudgeValue(c, type, delta)}\r\n                        mapAdd={c => this.setAddingToMapID(c.id)}\r\n                        mapMove={(c, dir) => this.props.mapMove(c as Combatant & Monster, dir)}\r\n                        mapRemove={c => this.props.mapRemove(c as Combatant & Monster)}\r\n                        endTurn={(c) => this.props.endTurn(c as Combatant & Monster)}\r\n                        changeHP={(c, hp, temp) => this.props.changeHP(c as Combatant & Monster, hp, temp)}\r\n                    />\r\n                );\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    private addCombatantToMap(x: number, y: number) {\r\n        if (this.props.combat) {\r\n            const combatant = this.props.combat.combatants.find(c => c.id === this.state.addingToMapID);\r\n            if (combatant) {\r\n                this.props.mapAdd(combatant, x, y);\r\n            }\r\n            this.setAddingToMapID(null);\r\n        }\r\n    }\r\n\r\n    private showCombat(combat: Combat) {\r\n        return Utils.match(this.props.filter, combat.name);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            if (this.props.combat) {\r\n                const current: JSX.Element[] = [];\r\n                let pending: JSX.Element[] = [];\r\n                let active: JSX.Element[] = [];\r\n                const defeated: JSX.Element[] = [];\r\n\r\n                this.props.combat.combatants.forEach(combatant => {\r\n                    if (combatant.current) {\r\n                        current.push(\r\n                            <div key={combatant.id}>\r\n                                {this.createCard(combatant)}\r\n                            </div>\r\n                        );\r\n                    }\r\n                    if (combatant.pending && !combatant.active && !combatant.defeated) {\r\n                        pending.push(\r\n                            <PendingCombatantRow\r\n                                key={combatant.id}\r\n                                combatant={combatant}\r\n                                select={c => this.setSelectedTokenID(c.id)}\r\n                                selected={combatant.id === this.state.selectedTokenID}\r\n                                nudgeValue={(c, type, delta) => this.props.nudgeValue(c, type, delta)}\r\n                                makeActive={c => this.props.makeActive(c)}\r\n                            />\r\n                        );\r\n                    }\r\n                    if (!combatant.pending && combatant.active && !combatant.defeated) {\r\n                        switch (combatant.type) {\r\n                            case 'pc':\r\n                                active.push(\r\n                                    <PCRow\r\n                                        key={combatant.id}\r\n                                        combatant={combatant as Combatant & PC}\r\n                                        combat={this.props.combat as Combat}\r\n                                        select={c => this.setSelectedTokenID(c.id)}\r\n                                        selected={combatant.id === this.state.selectedTokenID}\r\n                                    />\r\n                                );\r\n                                break;\r\n                            case 'monster':\r\n                                active.push(\r\n                                    <MonsterRow\r\n                                        key={combatant.id}\r\n                                        combatant={combatant as Combatant & Monster}\r\n                                        combat={this.props.combat as Combat}\r\n                                        select={c => this.setSelectedTokenID(c.id)}\r\n                                        selected={combatant.id === this.state.selectedTokenID}\r\n                                    />\r\n                                );\r\n                                break;\r\n                        }\r\n                    }\r\n                    if (!combatant.pending && !combatant.active && combatant.defeated) {\r\n                        switch (combatant.type) {\r\n                            case 'pc':\r\n                                defeated.push(\r\n                                    <PCRow\r\n                                        key={combatant.id}\r\n                                        combatant={combatant as Combatant & PC}\r\n                                        combat={this.props.combat as Combat}\r\n                                        select={c => this.setSelectedTokenID(c.id)}\r\n                                        selected={combatant.id === this.state.selectedTokenID}\r\n                                    />\r\n                                );\r\n                                break;\r\n                            case 'monster':\r\n                                defeated.push(\r\n                                    <MonsterRow\r\n                                        key={combatant.id}\r\n                                        combatant={combatant as Combatant & Monster}\r\n                                        combat={this.props.combat as Combat}\r\n                                        select={c => this.setSelectedTokenID(c.id)}\r\n                                        selected={combatant.id === this.state.selectedTokenID}\r\n                                    />\r\n                                );\r\n                                break;\r\n                        }\r\n                    }\r\n                });\r\n\r\n                if (this.props.showHelp && (pending.length !== 0)) {\r\n                    const pendingHelp = (\r\n                        <div key='pending-help'>\r\n                            <Note\r\n                                content={\r\n                                    <div>\r\n                                        <div className='section'>these combatants are not yet part of the encounter</div>\r\n                                        <div className='section'>set initiative on each of them, then add them to the encounter</div>\r\n                                    </div>\r\n                                }\r\n                            />\r\n                        </div>\r\n                    );\r\n                    pending = [pendingHelp].concat(pending);\r\n                }\r\n\r\n                if (this.props.showHelp && (current.length === 0)) {\r\n                    const activeHelp = (\r\n                        /* tslint:disable:max-line-length */\r\n                        <div key='active-help'>\r\n                            <Note\r\n                                content={\r\n                                    <div>\r\n                                        <div className='section'>these are the combatants taking part in this encounter; you can select them to see their stat blocks (on the right)</div>\r\n                                        <div className='section'>to begin the encounter, select the first combatant and press the <b>start turn</b> button on their stat block</div>\r\n                                    </div>\r\n                                }\r\n                            />\r\n                        </div>\r\n                        /* tslint:enable:max-line-length */\r\n                    );\r\n                    active = [activeHelp].concat(active);\r\n                }\r\n\r\n                if (current.length === 0) {\r\n                    current.push(\r\n                        <Note\r\n                            key='current'\r\n                            content={\r\n                                <div className='section'>\r\n                                    the current initiative holder will be displayed here\r\n                                </div>\r\n                            }\r\n                        />\r\n                    );\r\n                }\r\n\r\n                let notificationSection = null;\r\n                if (this.props.combat.notifications.length > 0) {\r\n                    const notifications = this.props.combat.notifications.map(n => (\r\n                        <NotificationPanel\r\n                            key={n.id}\r\n                            notification={n}\r\n                            close={(notification, removeCondition) => this.props.close(notification, removeCondition)}\r\n                        />\r\n                    ));\r\n                    notificationSection = (\r\n                        <div className='notifications'>\r\n                            {notifications}\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                let mapSection = null;\r\n                if (this.props.combat.map) {\r\n                    mapSection = (\r\n                        <MapPanel\r\n                            map={this.props.combat.map}\r\n                            mode='combat'\r\n                            showOverlay={this.state.addingToMapID !== null}\r\n                            combatants={this.props.combat.combatants}\r\n                            selectedItemID={this.state.selectedTokenID ? this.state.selectedTokenID : undefined}\r\n                            setSelectedItemID={id => {\r\n                                if (id) {\r\n                                    this.setSelectedTokenID(id);\r\n                                }\r\n                            }}\r\n                            gridSquareClicked={(x, y) => this.addCombatantToMap(x, y)}\r\n                        />\r\n                    );\r\n                }\r\n\r\n                let selectedCombatant = null;\r\n                if (this.state.selectedTokenID) {\r\n                    const combatant = this.props.combat.combatants.find(c => c.id === this.state.selectedTokenID);\r\n                    if (combatant && !combatant.current) {\r\n                        selectedCombatant = this.createCard(combatant);\r\n                    }\r\n                }\r\n                if (!selectedCombatant) {\r\n                    selectedCombatant = (\r\n                        <Note\r\n                            key='selected'\r\n                            content={\r\n                                <div className='section'>\r\n                                    select a pc or monster from the central list to see its details here\r\n                                </div>\r\n                            }\r\n                        />\r\n                    );\r\n                }\r\n\r\n                return (\r\n                    <div className='combat-manager row collapse'>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable'>\r\n                            <CardGroup\r\n                                heading='initiative holder'\r\n                                content={current}\r\n                            />\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable'>\r\n                            {notificationSection}\r\n                            <CardGroup\r\n                                heading='waiting for intiative to be entered'\r\n                                content={pending}\r\n                                hidden={pending.length === 0}\r\n                                showToggle={true}\r\n                            />\r\n                            {mapSection}\r\n                            <CardGroup\r\n                                heading='combatants in the encounter'\r\n                                content={active}\r\n                                hidden={active.length === 0}\r\n                            />\r\n                            <CardGroup\r\n                                heading='defeated'\r\n                                content={defeated}\r\n                                hidden={defeated.length === 0}\r\n                                showToggle={true}\r\n                            />\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable'>\r\n                            <CardGroup\r\n                                heading='selected combatant'\r\n                                content={[selectedCombatant]}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                let help = null;\r\n                if (this.props.showHelp) {\r\n                    help = (\r\n                        <HelpCard combats={this.props.combats} />\r\n                    );\r\n                }\r\n\r\n                const combats = this.props.combats.filter(c => this.showCombat(c)).map(c => {\r\n                    return (\r\n                        <CombatListItem\r\n                            key={c.id}\r\n                            combat={c}\r\n                            selected={false}\r\n                            setSelection={combat => this.props.resumeEncounter(combat)}\r\n                        />\r\n                    );\r\n                });\r\n\r\n                return (\r\n                    <div className='combat-manager row collapse'>\r\n                        <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                            {help}\r\n                            <button onClick={() => this.props.createCombat()}>start a new combat</button>\r\n                            {combats}\r\n                        </div>\r\n                        <div className='columns small-8 medium-8 large-9 scrollable' />\r\n                    </div>\r\n                );\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface HelpCardProps {\r\n    combats: Combat[];\r\n}\r\n\r\nclass HelpCard extends React.Component<HelpCardProps> {\r\n    public render() {\r\n        let action: JSX.Element | null = null;\r\n        if (this.props.combats.length === 0) {\r\n            action = (\r\n                <div className='section'>to start a combat encounter, press the button below</div>\r\n            );\r\n        } else {\r\n            action = (\r\n                <div>\r\n                    <div className='section'>below you will see a list of encounters that you have paused</div>\r\n                    <div className='section'>you can resume a paused combat by selecting it</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Note\r\n                content={\r\n                    <div>\r\n                        <div className='section'>here you can run a combat encounter by specifying a party and an encounter</div>\r\n                        <div className='divider' />\r\n                        {action}\r\n                    </div>\r\n                }\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\ninterface NotificationProps {\r\n    notification: Notification;\r\n    close: (notification: Notification, removeCondition: boolean) => void;\r\n}\r\n\r\nclass NotificationPanel extends React.Component<NotificationProps> {\r\n    private success() {\r\n        switch (this.props.notification.type) {\r\n            case 'condition-save':\r\n            case 'condition-end':\r\n                const condition = this.props.notification.data as Condition;\r\n                if (condition.duration) {\r\n                    // Reduce save by 1\r\n                    if ((condition.duration.type === 'saves') || (condition.duration.type === 'rounds')) {\r\n                        condition.duration.count -= 1;\r\n                        if (condition.duration.count === 0) {\r\n                            // Remove the condition\r\n                            this.close(true);\r\n                        } else {\r\n                            this.close();\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            case 'trait-recharge':\r\n                // Mark trait as recharged\r\n                const trait = this.props.notification.data as Trait;\r\n                trait.uses = 0;\r\n                this.close();\r\n                break;\r\n        }\r\n    }\r\n\r\n    private close(removeCondition = false) {\r\n        this.props.close(this.props.notification, removeCondition);\r\n    }\r\n\r\n    public render() {\r\n        const combatant = this.props.notification.combatant as (Combatant & Monster);\r\n        const condition = this.props.notification.data as Condition;\r\n        const trait = this.props.notification.data as Trait;\r\n\r\n        const name = combatant.displayName || combatant.name || 'unnamed monster';\r\n        switch (this.props.notification.type) {\r\n            case 'condition-save':\r\n                const duration = condition.duration as ConditionDurationSaves;\r\n                let saveType = duration.saveType.toString();\r\n                if (saveType !== 'death') {\r\n                    saveType = saveType.toUpperCase();\r\n                }\r\n                return (\r\n                    <div key={this.props.notification.id} className='descriptive'>\r\n                        <div className='text'>\r\n                            {name} must make a {saveType} save against dc {duration.saveDC}\r\n                        </div>\r\n                        <ControlRow\r\n                            controls={[\r\n                                <button key='success' onClick={() => this.success()}>success</button>,\r\n                                <button key='close' onClick={() => this.close()}>close</button>\r\n                            ]}\r\n                        />\r\n                    </div>\r\n                );\r\n            case 'condition-end':\r\n                return (\r\n                    <div key={this.props.notification.id} className='descriptive'>\r\n                        <div className='text'>\r\n                            {name} is no longer affected by condition {condition.name}\r\n                        </div>\r\n                        <ControlRow\r\n                            controls={[\r\n                                <button key='close' onClick={() => this.close()}>close</button>\r\n                            ]}\r\n                        />\r\n                    </div>\r\n                );\r\n            case 'trait-recharge':\r\n                return (\r\n                    <div key={this.props.notification.id} className='descriptive'>\r\n                        <div className='text'>\r\n                            {name} can attempt to recharge {trait.name} ({trait.usage})\r\n                        </div>\r\n                        <ControlRow\r\n                            controls={[\r\n                                <button key='recharge' onClick={() => this.success()}>recharge</button>,\r\n                                <button key='close' onClick={() => this.close()}>close</button>\r\n                            ]}\r\n                        />\r\n                    </div>\r\n                );\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface PendingCombatantRowProps {\r\n    combatant: (Combatant & PC) | (Combatant & Monster);\r\n    selected: boolean;\r\n    select: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    nudgeValue: (combatant: (Combatant & PC) | (Combatant & Monster), field: string, delta: number) => void;\r\n    makeActive: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n}\r\n\r\nclass PendingCombatantRow extends React.Component<PendingCombatantRowProps> {\r\n    private getInformationText() {\r\n        if (this.props.selected) {\r\n            return 'selected';\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private onClick(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (this.props.select) {\r\n            this.props.select(this.props.combatant);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'combatant-row ' + this.props.combatant.type;\r\n        if (this.props.combatant.current || this.props.selected) {\r\n            style += ' highlight';\r\n        }\r\n\r\n        return (\r\n            <div className={style} onClick={e => this.onClick(e)}>\r\n                <div className='name'>\r\n                    {this.props.combatant.displayName || this.props.combatant.name || 'combatant'}\r\n                    <span className='info'>{this.getInformationText()}</span>\r\n                </div>\r\n                <div className='content'>\r\n                    <Spin\r\n                        source={this.props.combatant}\r\n                        name='initiative'\r\n                        label='initiative'\r\n                        nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'initiative', delta)}\r\n                    />\r\n                    <button onClick={e => { e.stopPropagation(); this.props.makeActive(this.props.combatant); }}>add to encounter</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface PCRowProps {\r\n    combatant: Combatant & PC;\r\n    combat: Combat;\r\n    selected: boolean;\r\n    select: (combatant: Combatant & PC) => void;\r\n}\r\n\r\nclass PCRow extends React.Component<PCRowProps> {\r\n    private getInformationText() {\r\n        if (this.props.combatant.current) {\r\n            return 'current turn';\r\n        }\r\n\r\n        if (this.props.selected) {\r\n            return 'selected';\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private onClick(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (!this.props.combatant.current && !this.props.selected && this.props.select) {\r\n            this.props.select(this.props.combatant);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'combatant-row ' + this.props.combatant.type;\r\n        if (this.props.combatant.current || this.props.selected) {\r\n            style += ' highlight';\r\n        }\r\n\r\n        const desc = (this.props.combatant.race || 'unknown race')\r\n                + ' ' + (this.props.combatant.classes || 'unknown class')\r\n                + ', level ' + this.props.combatant.level;\r\n\r\n        const notes = [];\r\n        if (this.props.combat.map) {\r\n            if (!this.props.combatant.pending && !this.props.combat.map.items.find(i => i.id === this.props.combatant.id)) {\r\n                notes.push(\r\n                    <div key='not-on-map' className='note'>not on the map</div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className={style} onClick={e => this.onClick(e)}>\r\n                <div className='name'>\r\n                    {this.props.combatant.displayName || this.props.combatant.name || 'combatant'}\r\n                    {this.props.combatant.player ? ' | ' + this.props.combatant.player : ''}\r\n                    <span className='info'>{this.getInformationText()}</span>\r\n                </div>\r\n                <div className='content'>\r\n                    <div className='section lowercase'>\r\n                        {desc}\r\n                    </div>\r\n                    {notes}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface MonsterRowProps {\r\n    combatant: Combatant & Monster;\r\n    combat: Combat;\r\n    selected: boolean;\r\n    select: (combatant: Combatant & Monster) => void;\r\n}\r\n\r\nclass MonsterRow extends React.Component<MonsterRowProps> {\r\n    private getInformationText() {\r\n        if (this.props.combatant.current) {\r\n            return 'current turn';\r\n        }\r\n\r\n        if (this.props.selected) {\r\n            return 'selected';\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private onClick(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (!this.props.combatant.current && !this.props.selected && this.props.select) {\r\n            this.props.select(this.props.combatant);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'combatant-row ' + this.props.combatant.type;\r\n        if (this.props.combatant.current || this.props.selected) {\r\n            style += ' highlight';\r\n        }\r\n\r\n        let hp = (this.props.combatant.hp ? this.props.combatant.hp : 0).toString();\r\n        if (this.props.combatant.hpTemp > 0) {\r\n            hp += '+' + this.props.combatant.hpTemp;\r\n        }\r\n\r\n        let gauge = null;\r\n        if (!this.props.combatant.pending) {\r\n            gauge = (\r\n                <HitPointGauge combatant={this.props.combatant} />\r\n            );\r\n        }\r\n\r\n        let conditions = null;\r\n        if (this.props.combatant.conditions) {\r\n            conditions = this.props.combatant.conditions.map(c => {\r\n                let name = c.name;\r\n                if (c.name === 'exhaustion') {\r\n                    name += ' (' + c.level + ')';\r\n                }\r\n                if ((c.name === 'custom') && (c.text)) {\r\n                    name = c.text;\r\n                }\r\n                if (c.duration) {\r\n                    name += ' ' + Utils.conditionDurationText(c, this.props.combat);\r\n                }\r\n                const description = [];\r\n                const text = Utils.conditionText(c);\r\n                for (let n = 0; n !== text.length; ++n) {\r\n                    description.push(<li key={n} className='condition-text'>{text[n]}</li>);\r\n                }\r\n                return (\r\n                    <Note\r\n                        key={c.id}\r\n                        white={true}\r\n                        content={\r\n                            <div className='condition'>\r\n                                <div className='condition-name'>{name}</div>\r\n                                <ul>\r\n                                    {description}\r\n                                </ul>\r\n                            </div>\r\n                        }\r\n                    />\r\n                );\r\n            });\r\n        }\r\n\r\n        const notes = [];\r\n        if (this.props.combat.map) {\r\n            if (!this.props.combatant.pending && !this.props.combat.map.items.find(i => i.id === this.props.combatant.id)) {\r\n                notes.push(\r\n                    <div key='not-on-map' className='note'>not on the map</div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className={style} onClick={e => this.onClick(e)}>\r\n                <div className='name'>\r\n                    {this.props.combatant.displayName || this.props.combatant.name || 'combatant'}\r\n                    <span className='info'>{this.getInformationText()}</span>\r\n                </div>\r\n                <div className='content'>\r\n                    <div className='section key-stats'>\r\n                        <div className='key-stat'>\r\n                            <div className='stat-label'>ac</div>\r\n                            <div className='stat-value'>{this.props.combatant.ac}</div>\r\n                        </div>\r\n                        <div className='key-stat'>\r\n                            <div className='stat-value'>{hp}</div>\r\n                            <div className='stat-label'>hp</div>\r\n                        </div>\r\n                    </div>\r\n                    {gauge}\r\n                    {conditions}\r\n                    {notes}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Encounter, EncounterSlot } from '../../models/encounter';\r\nimport { Monster } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\ninterface Props {\r\n    encounter: Encounter;\r\n    party: Party | null;\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n}\r\n\r\nexport default class DifficultyChartPanel extends React.Component<Props> {\r\n    public render() {\r\n        let monsterCount = 0;\r\n        let monsterXp = 0;\r\n        let slots: EncounterSlot[] = [];\r\n        slots = slots.concat(this.props.encounter.slots);\r\n        this.props.encounter.waves.forEach(wave => {\r\n            slots = slots.concat(wave.slots);\r\n        });\r\n        slots.forEach(slot => {\r\n            monsterCount += slot.count;\r\n            const monster = this.props.getMonster(slot.monsterName, slot.monsterGroupName);\r\n            if (monster) {\r\n                monsterXp += Utils.experience(monster.challenge) * slot.count;\r\n            }\r\n        });\r\n\r\n        const adjustedXp = monsterXp * Utils.experienceFactor(monsterCount);\r\n\r\n        let xpThresholds;\r\n        let diffSection;\r\n        if (this.props.party) {\r\n            let xpEasy = 0;\r\n            let xpMedium = 0;\r\n            let xpHard = 0;\r\n            let xpDeadly = 0;\r\n\r\n            const pcs = this.props.party.pcs.filter(pc => pc.active);\r\n            pcs.forEach(pc => {\r\n                xpEasy += Utils.pcExperience(pc.level, 'easy');\r\n                xpMedium += Utils.pcExperience(pc.level, 'medium');\r\n                xpHard += Utils.pcExperience(pc.level, 'hard');\r\n                xpDeadly += Utils.pcExperience(pc.level, 'deadly');\r\n            });\r\n\r\n            let difficulty = null;\r\n            let adjustedDifficulty = null;\r\n            if (adjustedXp > 0) {\r\n                difficulty = 'trivial';\r\n                if (adjustedXp >= xpEasy) {\r\n                    difficulty = 'easy';\r\n                }\r\n                if (adjustedXp >= xpMedium) {\r\n                    difficulty = 'medium';\r\n                }\r\n                if (adjustedXp >= xpHard) {\r\n                    difficulty = 'hard';\r\n                }\r\n                if (adjustedXp >= xpDeadly) {\r\n                    difficulty = 'deadly';\r\n                }\r\n                adjustedDifficulty = difficulty;\r\n\r\n                if ((pcs.length < 3) || (pcs.length > 5)) {\r\n                    const small = pcs.length < 3;\r\n                    switch (difficulty) {\r\n                        case 'trivial':\r\n                            adjustedDifficulty = small ? 'easy' : 'trivial';\r\n                            break;\r\n                        case 'easy':\r\n                            adjustedDifficulty = small ? 'medium' : 'trivial';\r\n                            break;\r\n                        case 'medium':\r\n                            adjustedDifficulty = small ? 'hard' : 'easy';\r\n                            break;\r\n                        case 'hard':\r\n                            adjustedDifficulty = small ? 'deadly' : 'medium';\r\n                            break;\r\n                        case 'deadly':\r\n                            adjustedDifficulty = small ? 'deadly' : 'hard';\r\n                            break;\r\n                        default:\r\n                            adjustedDifficulty = '';\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            xpThresholds = (\r\n                <div className='table'>\r\n                    <div>\r\n                        <div className='cell four'><b>easy</b></div>\r\n                        <div className='cell four'><b>medium</b></div>\r\n                        <div className='cell four'><b>hard</b></div>\r\n                        <div className='cell four'><b>deadly</b></div>\r\n                    </div>\r\n                    <div>\r\n                        <div className='cell four'>{xpEasy} xp</div>\r\n                        <div className='cell four'>{xpMedium} xp</div>\r\n                        <div className='cell four'>{xpHard} xp</div>\r\n                        <div className='cell four'>{xpDeadly} xp</div>\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            const getLeft = (xp: number) => {\r\n                const max = Math.max(adjustedXp, (xpDeadly * 1.2));\r\n                return (100 * xp) / max;\r\n            };\r\n\r\n            const getRight = (xp: number) => {\r\n                return 100 - getLeft(xp);\r\n            };\r\n\r\n            diffSection = (\r\n                <div>\r\n                    <div className='difficulty-gauge'>\r\n                        <div className='bar-container'>\r\n                            <div className='bar trivial' style={{ left: '0', right: getRight(xpEasy) + '%' }} />\r\n                        </div>\r\n                        <div className='bar-container'>\r\n                            <div className='bar easy' style={{ left: getLeft(xpEasy) + '%', right: getRight(xpMedium) + '%' }} />\r\n                        </div>\r\n                        <div className='bar-container'>\r\n                            <div className='bar medium' style={{ left: getLeft(xpMedium) + '%', right: getRight(xpHard) + '%' }} />\r\n                        </div>\r\n                        <div className='bar-container'>\r\n                            <div className='bar hard' style={{ left: getLeft(xpHard) + '%', right: getRight(xpDeadly) + '%' }} />\r\n                        </div>\r\n                        <div className='bar-container'>\r\n                            <div className='bar deadly' style={{ left: getLeft(xpDeadly) + '%', right: '0' }} />\r\n                        </div>\r\n                        <div className='encounter-container'>\r\n                            <div className='encounter' style={{ left: (getLeft(adjustedXp) - 0.5) + '%' }} />\r\n                        </div>\r\n                    </div>\r\n                    <div className='subheading'>difficulty</div>\r\n                    <div className='section'>\r\n                        difficulty for this party\r\n                        <div className='right'>{difficulty}</div>\r\n                    </div>\r\n                    <div className='section' style={{ display: (adjustedDifficulty === difficulty) ? 'none' : ''}}>\r\n                        effective difficulty for {pcs.length} pc(s)\r\n                        <div className='right'><b>{adjustedDifficulty}</b></div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='subheading'>xp value</div>\r\n                <div className='section'>\r\n                    xp for this encounter\r\n                    <div className='right'>{monsterXp} xp</div>\r\n                </div>\r\n                <div className='section' style={{ display: (adjustedXp === monsterXp) ? 'none' : ''}}>\r\n                    effective xp for {monsterCount} monster(s)\r\n                    <div className='right'>{adjustedXp} xp</div>\r\n                </div>\r\n                {xpThresholds}\r\n                {diffSection}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Encounter } from '../../models/encounter';\r\nimport { Monster } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport Dropdown from '../controls/dropdown';\r\nimport DifficultyChartPanel from '../panels/difficulty-chart-panel';\r\nimport InfoCard from './info-card';\r\n\r\nimport arrow from '../../resources/images/down-arrow.svg';\r\n\r\ninterface Props {\r\n    selection: Encounter;\r\n    parties: Party[];\r\n    filter: string;\r\n    changeValue: (field: string, value: string) => void;\r\n    addWave: () => void;\r\n    removeEncounter: () => void;\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n}\r\n\r\ninterface State {\r\n    showDetails: boolean;\r\n    party: Party | null;\r\n}\r\n\r\nexport default class EncounterCard extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showDetails: false,\r\n            party: null\r\n        };\r\n    }\r\n\r\n    private toggleDetails() {\r\n        this.setState({\r\n            showDetails: !this.state.showDetails\r\n        });\r\n    }\r\n\r\n    private selectParty(partyID: string) {\r\n        const party = this.props.parties.find(p => p.id === partyID);\r\n        this.setState({\r\n            party: party as Party\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const partyOptions = [];\r\n            if (this.props.parties) {\r\n                for (let n = 0; n !== this.props.parties.length; ++n) {\r\n                    const party = this.props.parties[n];\r\n                    partyOptions.push({\r\n                        id: party.id,\r\n                        text: party.name\r\n                    });\r\n                }\r\n            }\r\n\r\n            const difficultySection = (\r\n                <div>\r\n                    <Dropdown\r\n                        options={partyOptions}\r\n                        placeholder='select party...'\r\n                        selectedID={this.state.party ? this.state.party.id : undefined}\r\n                        select={optionID => this.selectParty(optionID)}\r\n                    />\r\n                    <DifficultyChartPanel\r\n                        encounter={this.props.selection}\r\n                        party={this.state.party}\r\n                        getMonster={(monsterName, monsterGroupName) => this.props.getMonster(monsterName, monsterGroupName)}\r\n                    />\r\n                </div>\r\n            );\r\n\r\n            const imageStyle = this.state.showDetails ? 'image rotate' : 'image';\r\n\r\n            const heading = (\r\n                <div className='heading'>\r\n                    <div className='title'>encounter</div>\r\n                    <img className={imageStyle} src={arrow} alt='arrow' onClick={() => this.toggleDetails()} />\r\n                </div>\r\n            );\r\n\r\n            const content = (\r\n                <div>\r\n                    <div className='section'>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='encounter name'\r\n                            value={this.props.selection.name}\r\n                            disabled={!!this.props.filter}\r\n                            onChange={event => this.props.changeValue('name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div style={{ display: this.state.showDetails ? '' : 'none' }}>\r\n                        <div className='divider' />\r\n                        {difficultySection}\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.addWave()}>add a new wave</button>\r\n                        <ConfirmButton text='delete encounter' callback={() => this.props.removeEncounter()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            return (\r\n                <InfoCard heading={heading} content={content} />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    title: string;\r\n    getContent: () => (string | JSX.Element);\r\n}\r\n\r\nexport default class ErrorCard extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        title: null\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            let heading = null;\r\n            if (this.props.title) {\r\n                heading = <div className='heading'><div className='title'>{this.props.title}</div></div>;\r\n            }\r\n\r\n            const content = this.props.getContent();\r\n\r\n            return (\r\n                <div className='card error'>\r\n                    {heading}\r\n                    <div className='card-content'>\r\n                        {content}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { CATEGORY_TYPES, SIZE_TYPES } from '../../models/monster-group';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport Spin from '../controls/spin';\r\n\r\nimport arrow from '../../resources/images/down-arrow.svg';\r\n\r\ninterface Props {\r\n    filter: {\r\n        name: string,\r\n        challengeMin: number;\r\n        challengeMax: number;\r\n        category: string;\r\n        size: string;\r\n    };\r\n    changeValue: (type: 'name' | 'challengeMin' | 'challengeMax' | 'category' | 'size', value: any) => void;\r\n    nudgeValue: (type: 'challengeMin' | 'challengeMax', delta: number) => void;\r\n    resetFilter: () => void;\r\n}\r\n\r\ninterface State {\r\n    showAll: boolean;\r\n}\r\n\r\nexport default class FilterCard extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showAll: false\r\n        };\r\n    }\r\n\r\n    private toggleAll() {\r\n        this.setState({\r\n            showAll: !this.state.showAll\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const sizes = ['all sizes'].concat(SIZE_TYPES);\r\n            const sizeOptions = sizes.map(size => ({ id: size, text: size }));\r\n\r\n            const categories = ['all types'].concat(CATEGORY_TYPES);\r\n            const catOptions = categories.map(cat => ({ id: cat, text: cat }));\r\n\r\n            let content = null;\r\n            if (this.state.showAll) {\r\n                content = (\r\n                    <div>\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='name'\r\n                                value={this.props.filter.name}\r\n                                onChange={event => this.props.changeValue('name', event.target.value)}\r\n                            />\r\n                        </div>\r\n                        <Spin\r\n                            source={this.props.filter}\r\n                            name='challengeMin'\r\n                            label='min cr'\r\n                            display={value => Utils.challenge(value)}\r\n                            nudgeValue={delta => this.props.nudgeValue('challengeMin', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.filter}\r\n                            name='challengeMax'\r\n                            label='max cr'\r\n                            display={value => Utils.challenge(value)}\r\n                            nudgeValue={delta => this.props.nudgeValue('challengeMax', delta)}\r\n                        />\r\n                        <Dropdown\r\n                            options={sizeOptions}\r\n                            placeholder='filter by size...'\r\n                            selectedID={this.props.filter.size}\r\n                            select={optionID => this.props.changeValue('size', optionID)}\r\n                        />\r\n                        <Dropdown\r\n                            options={catOptions}\r\n                            placeholder='filter by type...'\r\n                            selectedID={this.props.filter.category}\r\n                            select={optionID => this.props.changeValue('category', optionID)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <div className='section'>\r\n                            <button onClick={() => this.props.resetFilter()}>clear filter</button>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                let summary = '';\r\n                if (this.props.filter.size !== 'all sizes') {\r\n                    summary += summary ? ' ' + this.props.filter.size : this.props.filter.size;\r\n                }\r\n                if (this.props.filter.category !== 'all types') {\r\n                    summary += summary ? ' ' + this.props.filter.category : this.props.filter.category;\r\n                }\r\n                summary += ' monsters of cr ' + Utils.challenge(this.props.filter.challengeMin) + ' to ' + Utils.challenge(this.props.filter.challengeMax);\r\n\r\n                content = (\r\n                    <div>\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='name'\r\n                                value={this.props.filter.name}\r\n                                onChange={event => this.props.changeValue('name', event.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div className='section'>showing {summary}</div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='card'>\r\n                    <div className='heading'>\r\n                        <div className='title'>filter</div>\r\n                        <img className={this.state.showAll ? 'image rotate' : 'image'} src={arrow} alt='arrow' onClick={() => this.toggleAll()} />\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        {content}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { EncounterWave } from '../../models/encounter';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport InfoCard from './info-card';\r\n\r\ninterface Props {\r\n    wave: EncounterWave;\r\n    changeValue: (wave: EncounterWave, field: string, value: string) => void;\r\n    removeWave: (wave: EncounterWave) => void;\r\n}\r\n\r\nexport default class WaveCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const heading = (\r\n                <div className='heading'>\r\n                    <div className='title'>wave</div>\r\n                </div>\r\n            );\r\n\r\n            const content = (\r\n                <div>\r\n                    <div className='section'>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='wave name'\r\n                            value={this.props.wave.name}\r\n                            onChange={event => this.props.changeValue(this.props.wave, 'name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <ConfirmButton text='delete wave' callback={() => this.props.removeWave(this.props.wave)} />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            return (\r\n                <InfoCard heading={heading} content={content} />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Encounter } from '../../models/encounter';\r\n\r\ninterface Props {\r\n    encounter: Encounter;\r\n    selected: boolean;\r\n    setSelection: (encounter: Encounter) => void;\r\n}\r\n\r\nexport default class EncounterListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const slots = [];\r\n\r\n            this.props.encounter.slots.forEach(slot => {\r\n                let text = slot.monsterName || 'unnamed monster';\r\n                if (slot.count > 1) {\r\n                    text += ' x' + slot.count;\r\n                }\r\n                slots.push(<div key={slot.id} className='text'>{text}</div>);\r\n            });\r\n\r\n            if (slots.length === 0) {\r\n                slots.push(<div key='empty' className='text'>no monsters</div>);\r\n            }\r\n\r\n            this.props.encounter.waves.forEach(wave => {\r\n                slots.push(<div key={'name ' + wave.id} className='text subheading'>{wave.name || 'unnamed wave'}</div>);\r\n                wave.slots.forEach(slot => {\r\n                    let text = slot.monsterName || 'unnamed monster';\r\n                    if (slot.count > 1) {\r\n                        text += ' x' + slot.count;\r\n                    }\r\n                    slots.push(<div key={slot.id} className='text'>{text}</div>);\r\n                });\r\n                if (slots.length === 0) {\r\n                    slots.push(<div key={'empty ' + wave.id} className='text'>no monsters</div>);\r\n                }\r\n            });\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.encounter)}>\r\n                    <div className='heading'>{this.props.encounter.name || 'unnamed encounter'}</div>\r\n                    {slots}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Encounter, EncounterSlot, EncounterWave } from '../../models/encounter';\r\nimport { Monster, MonsterGroup } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\nimport EncounterCard from '../cards/encounter-card';\r\nimport ErrorCard from '../cards/error-card';\r\nimport FilterCard from '../cards/filter-card';\r\nimport MonsterCard from '../cards/monster-card';\r\nimport WaveCard from '../cards/wave-card';\r\nimport EncounterListItem from '../list-items/encounter-list-item';\r\nimport CardGroup from '../panels/card-group';\r\nimport Note from '../panels/note';\r\n\r\ninterface Props {\r\n    encounters: Encounter[];\r\n    selection: Encounter | null;\r\n    parties: Party[];\r\n    library: MonsterGroup[];\r\n    filter: string;\r\n    showHelp: boolean;\r\n    selectEncounter: (encounter: Encounter | null) => void;\r\n    addEncounter: () => void;\r\n    removeEncounter: () => void;\r\n    addEncounterSlot: (monster: Monster, waveID: string | null) => void;\r\n    removeEncounterSlot: (encounterSlot: EncounterSlot, waveID: string | null) => void;\r\n    addWave: () => void;\r\n    removeWave: (wave: EncounterWave) => void;\r\n    changeValue: (source: any, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, value: number) => void;\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n}\r\n\r\ninterface State {\r\n    filter: {\r\n        name: string,\r\n        challengeMin: number;\r\n        challengeMax: number;\r\n        category: string;\r\n        size: string;\r\n    };\r\n}\r\n\r\nexport default class EncounterBuilderScreen extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            filter: {\r\n                name: '',\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: 'all types',\r\n                size: 'all sizes'\r\n            }\r\n        };\r\n    }\r\n\r\n    private matchMonster(monster: Monster) {\r\n        if (monster.challenge < this.state.filter.challengeMin) {\r\n            return false;\r\n        }\r\n\r\n        if (monster.challenge > this.state.filter.challengeMax) {\r\n            return false;\r\n        }\r\n\r\n        if (this.state.filter.name !== '') {\r\n            if (!Utils.match(this.state.filter.name, monster.name)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.filter.category !== 'all types') {\r\n            if (monster.category !== this.state.filter.category) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.filter.size !== 'all sizes') {\r\n            if (monster.size !== this.state.filter.size) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private changeFilterValue(type: 'name' | 'challengeMin' | 'challengeMax' | 'category' | 'size', value: any) {\r\n        // eslint-disable-next-line\r\n        this.state.filter[type] = value;\r\n        this.setState({\r\n            filter: this.state.filter\r\n        });\r\n    }\r\n\r\n    private nudgeFilterValue(type: 'challengeMin' | 'challengeMax', delta: number) {\r\n        const value = Utils.nudgeChallenge(this.state.filter[type], delta);\r\n        this.changeFilterValue(type, value);\r\n    }\r\n\r\n    private resetFilter() {\r\n        this.setState({\r\n            filter: {\r\n                name: '',\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: 'all types',\r\n                size: 'all sizes'\r\n            }\r\n        });\r\n    }\r\n\r\n    private getMonsterCards(slots: EncounterSlot[], waveID: string | null) {\r\n        const cards = [];\r\n\r\n        slots.forEach(slot => {\r\n            const monster = this.props.getMonster(slot.monsterName, slot.monsterGroupName);\r\n            if (monster) {\r\n                cards.push(\r\n                    <div className='column' key={monster.id}>\r\n                        <MonsterCard\r\n                            combatant={monster}\r\n                            slot={slot}\r\n                            encounter={this.props.selection as Encounter}\r\n                            mode={'view encounter'}\r\n                            nudgeValue={(source, type, delta) => this.props.nudgeValue(source, type, delta)}\r\n                            removeEncounterSlot={source => this.props.removeEncounterSlot(source, waveID)}\r\n                        />\r\n                    </div>\r\n                );\r\n            } else {\r\n                const index = slots.indexOf(slot);\r\n                const error = 'unknown monster: ' + slot.monsterName + ' in group ' + slot.monsterGroupName;\r\n                cards.push(\r\n                    <div className='column' key={index}>\r\n                        <ErrorCard\r\n                            getContent={() => <div className='section'>{error}</div>}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n        });\r\n\r\n        if (slots.length === 0) {\r\n            cards.push(\r\n                <div className='column' key='empty'>\r\n                    <Note content={<div className='section'>there are no monsters in this {waveID ? 'wave' : 'encounter'}</div>} />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return cards;\r\n    }\r\n\r\n    private getLibrarySection() {\r\n        if (!this.props.selection) {\r\n            return null;\r\n        }\r\n\r\n        const libraryCards = [];\r\n        libraryCards.push(\r\n            <div className='column' key='filter'>\r\n                <FilterCard\r\n                    filter={this.state.filter}\r\n                    changeValue={(type, value) => this.changeFilterValue(type, value)}\r\n                    nudgeValue={(type, delta) => this.nudgeFilterValue(type, delta)}\r\n                    resetFilter={() => this.resetFilter()}\r\n                />\r\n            </div>\r\n        );\r\n\r\n        const monsters: Monster[] = [];\r\n        if (this.props.selection) {\r\n            this.props.library.forEach(group => {\r\n                group.monsters.forEach(monster => {\r\n                    if (this.matchMonster(monster)) {\r\n                        monsters.push(monster);\r\n                    }\r\n                });\r\n            });\r\n            monsters.sort((a, b) => {\r\n                if (a.name < b.name) { return -1; }\r\n                if (a.name > b.name) { return 1; }\r\n                return 0;\r\n            });\r\n        }\r\n        monsters.forEach(monster => {\r\n            libraryCards.push(\r\n                <div className='column' key={monster.id}>\r\n                    <MonsterCard\r\n                        key={monster.id}\r\n                        combatant={monster}\r\n                        encounter={this.props.selection as Encounter}\r\n                        library={this.props.library}\r\n                        mode={'view encounter'}\r\n                        addEncounterSlot={(combatant, waveID) => this.props.addEncounterSlot(combatant, waveID)}\r\n                    />\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <CardGroup\r\n                heading='monster library'\r\n                content={libraryCards}\r\n                showToggle={true}\r\n            />\r\n        );\r\n    }\r\n\r\n    private showEncounter(enc: Encounter) {\r\n        return Utils.match(this.props.filter, enc.name);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let help = null;\r\n            if (this.props.showHelp) {\r\n                help = (\r\n                    <HelpCard encounters={this.props.encounters} />\r\n                );\r\n            }\r\n\r\n            const encounters = this.props.encounters.filter(e => this.showEncounter(e)).map(e => {\r\n                return (\r\n                    <EncounterListItem\r\n                        key={e.id}\r\n                        encounter={e}\r\n                        selected={e === this.props.selection}\r\n                        setSelection={encounter => this.props.selectEncounter(encounter)}\r\n                    />\r\n                );\r\n            });\r\n\r\n            let encounterName;\r\n            const encounterCards = [];\r\n            let waves: JSX.Element[] = [];\r\n\r\n            if (this.props.selection) {\r\n                encounterName = this.props.selection.name || 'unnamed encounter';\r\n\r\n                encounterCards.push(\r\n                    <div className='column' key='info'>\r\n                        <EncounterCard\r\n                            selection={this.props.selection}\r\n                            parties={this.props.parties}\r\n                            filter={this.props.filter}\r\n                            changeValue={(type, value) => this.props.changeValue(this.props.selection, type, value)}\r\n                            addWave={() => this.props.addWave()}\r\n                            removeEncounter={() => this.props.removeEncounter()}\r\n                            getMonster={(monsterName, monsterGroupName) => this.props.getMonster(monsterName, monsterGroupName)}\r\n                        />\r\n                    </div>\r\n                );\r\n\r\n                this.getMonsterCards(this.props.selection.slots, null)\r\n                    .forEach(card => encounterCards.push(card));\r\n\r\n                waves = this.props.selection.waves.map(w => {\r\n                    const waveCards = [];\r\n                    waveCards.push(\r\n                        <div className='column' key='info'>\r\n                            <WaveCard\r\n                                wave={w}\r\n                                removeWave={wave => this.props.removeWave(wave)}\r\n                                changeValue={(source, field, value) => this.props.changeValue(source, field, value)}\r\n                            />\r\n                        </div>\r\n                    );\r\n\r\n                    this.getMonsterCards(w.slots, w.id)\r\n                        .forEach(card => waveCards.push(card));\r\n\r\n                    return (\r\n                        <CardGroup\r\n                            key={w.id}\r\n                            heading={w.name || 'unnamed wave'}\r\n                            content={waveCards}\r\n                            showToggle={true}\r\n                        />\r\n                    );\r\n                });\r\n            }\r\n\r\n            return (\r\n                <div className='encounter-builder row collapse'>\r\n                    <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                        {help}\r\n                        <button onClick={() => this.props.addEncounter()}>add a new encounter</button>\r\n                        {encounters}\r\n                    </div>\r\n                    <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                        <CardGroup\r\n                            content={encounterCards}\r\n                            heading={encounterName}\r\n                            showClose={this.props.selection !== null}\r\n                            close={() => this.props.selectEncounter(null)}\r\n                        />\r\n                        {waves}\r\n                        {this.getLibrarySection()}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface HelpCardProps {\r\n    encounters: Encounter[];\r\n}\r\n\r\nclass HelpCard extends React.Component<HelpCardProps> {\r\n    public render() {\r\n        try {\r\n            let action: JSX.Element | null = null;\r\n            if (this.props.encounters.length === 0) {\r\n                action = (\r\n                    <div className='section'>to start building an encounter, press the button below</div>\r\n                );\r\n            } else {\r\n                action = (\r\n                    <div className='section'>select an encounter from the list to add monsters to it</div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <Note\r\n                    content={\r\n                        <div>\r\n                            <div className='section'>on this page you can set up encounters</div>\r\n                            <div className='section'>\r\n                                when you have created an encounter you can add monsters to it, then gauge its difficulty for a party of pcs\r\n                            </div>\r\n                            <div className='divider'/>\r\n                            {action}\r\n                        </div>\r\n                    }\r\n                />\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    content: string | JSX.Element | JSX.Element[];\r\n}\r\n\r\nexport default class Readaloud extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div className='readaloud'>\r\n                    {this.props.content}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { MonsterGroup } from '../../models/monster-group';\r\n\r\nimport Readaloud from '../panels/readaloud';\r\n\r\ninterface Props {\r\n    library: MonsterGroup[];\r\n    addOpenGameContent: () => void;\r\n}\r\n\r\nexport default class HomeScreen extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            let monsters = null;\r\n            if (this.props.library.length === 0) {\r\n                monsters = (\r\n                    <div>\r\n                        <div className='divider' />\r\n                        <div className='text'>\r\n                            since your collection of monsters is empty, you might want to start by pressing the button below to add monsters from the&nbsp;\r\n                            <a href='http://dnd.wizards.com/articles/features/systems-reference-document-srd' target='_blank' rel='noopener noreferrer'>\r\n                                system reference document\r\n                            </a>\r\n                        </div>\r\n                        <div className='text'>\r\n                            <button onClick={() => this.props.addOpenGameContent()}>add monsters</button>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            const content = (\r\n                <Readaloud\r\n                    content={(\r\n                        <div>\r\n                            <div className='heading'>welcome to <b>dojo</b></div>\r\n                            <div className='divider' />\r\n                            <div className='section'>\r\n                                <b>dojo</b> is an app for dms of dungeons and dragons fifth edition\r\n                            </div>\r\n                            <div className='section'>\r\n                                with <b>dojo</b> you can:\r\n                                <ul>\r\n                                    <li>build unique, challenging monsters</li>\r\n                                    <li>create encounters of just the right difficulty for your players</li>\r\n                                    <li>design intricate tactical maps</li>\r\n                                    <li>run combat without the book-keeping</li>\r\n                                </ul>\r\n                            </div>\r\n                            {monsters}\r\n                            <div className='divider' />\r\n                            <div className='section'>\r\n                                use the buttons at the bottom of the screen to access the app's features\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                />\r\n            );\r\n\r\n            return (\r\n                <div className='home scrollable'>\r\n                    <div className='vertical-center-outer'>\r\n                        <div className='vertical-center-middle'>\r\n                            <div className='vertical-center-inner'>\r\n                                {content}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Map } from '../../models/map-folio';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    map: Map;\r\n    changeValue: (map: Map, field: string, value: string) => void;\r\n    editMap: (map: Map) => void;\r\n    removeMap: (map: Map) => void;\r\n}\r\n\r\nexport default class MapCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div className='card map'>\r\n                    <div className='heading'>\r\n                        <div className='title'>{this.props.map.name || 'unnamed map'}</div>\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='map name'\r\n                                value={this.props.map.name}\r\n                                onChange={event => this.props.changeValue(this.props.map, 'name', event.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='section centered'>\r\n                            <MapPanel\r\n                                map={this.props.map}\r\n                                mode='thumbnail'\r\n                            />\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='section'>\r\n                            <button onClick={() => this.props.editMap(this.props.map)}>edit map</button>\r\n                            <ConfirmButton text='delete map' callback={() => this.props.removeMap(this.props.map)} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { MapFolio } from '../../models/map-folio';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport InfoCard from './info-card';\r\n\r\ninterface Props {\r\n    selection: MapFolio;\r\n    filter: string | null;\r\n    changeValue: (source: MapFolio, field: string, value: string) => void;\r\n    addMap: () => void;\r\n    removeMapFolio: () => void;\r\n}\r\n\r\nexport default class MapFolioCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const heading = (\r\n                <div className='heading'>\r\n                    <div className='title'>map folio</div>\r\n                </div>\r\n            );\r\n\r\n            const content = (\r\n                <div>\r\n                    <div className='section'>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='folio name'\r\n                            value={this.props.selection.name}\r\n                            disabled={!!this.props.filter}\r\n                            onChange={event => this.props.changeValue(this.props.selection, 'name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.addMap()}>add a new map</button>\r\n                        <ConfirmButton text='delete folio' callback={() => this.props.removeMapFolio()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            return (\r\n                <InfoCard heading={heading} content={content} />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { MapFolio } from '../../models/map-folio';\r\n\r\ninterface Props {\r\n    mapFolio: MapFolio;\r\n    selected: boolean;\r\n    filter: string;\r\n    setSelection: (mapFolio: MapFolio) => void;\r\n}\r\n\r\nexport default class MapFolioListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const matchFolio = Utils.match(this.props.filter, this.props.mapFolio.name);\r\n\r\n            const maps = [];\r\n            for (let n = 0; n !== this.props.mapFolio.maps.length; ++n) {\r\n                const map = this.props.mapFolio.maps[n];\r\n                const name = map.name || 'unnamed map';\r\n                if (matchFolio || Utils.match(this.props.filter, name)) {\r\n                    maps.push(<div key={map.id} className='text'>{name}</div>);\r\n                }\r\n            }\r\n            if (maps.length === 0) {\r\n                maps.push(<div key='empty' className='text'>no maps</div>);\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.mapFolio)}>\r\n                    <div className='heading'>{this.props.mapFolio.name || 'unnamed folio'}</div>\r\n                    {maps}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Map, MapFolio } from '../../models/map-folio';\r\n\r\nimport MapCard from '../cards/map-card';\r\nimport MapFolioCard from '../cards/map-folio-card';\r\nimport MapFolioListItem from '../list-items/map-folio-list-item';\r\nimport CardGroup from '../panels/card-group';\r\nimport Note from '../panels/note';\r\n\r\ninterface Props {\r\n    mapFolios: MapFolio[];\r\n    selection: MapFolio | null;\r\n    filter: string;\r\n    showHelp: boolean;\r\n    selectMapFolio: (mapFolio: MapFolio | null) => void;\r\n    addMapFolio: () => void;\r\n    removeMapFolio: () => void;\r\n    addMap: () => void;\r\n    editMap: (map: Map) => void;\r\n    removeMap: (map: Map) => void;\r\n    changeValue: (source: {}, field: string, value: any) => void;\r\n}\r\n\r\nexport default class MapFoliosScreen extends React.Component<Props> {\r\n    private showMapFolio(folio: MapFolio) {\r\n        let result = Utils.match(this.props.filter, folio.name);\r\n\r\n        if (!result) {\r\n            folio.maps.forEach(map => {\r\n                result = Utils.match(this.props.filter, map.name) || result;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let help = null;\r\n            if (this.props.showHelp) {\r\n                help = (\r\n                    <HelpCard mapFolios={this.props.mapFolios} />\r\n                );\r\n            }\r\n\r\n            const folios = this.props.mapFolios.filter(f => this.showMapFolio(f)).map(mapFolio => {\r\n                return (\r\n                    <MapFolioListItem\r\n                        key={mapFolio.id}\r\n                        mapFolio={mapFolio}\r\n                        filter={this.props.filter}\r\n                        selected={mapFolio === this.props.selection}\r\n                        setSelection={f => this.props.selectMapFolio(f)}\r\n                    />\r\n                );\r\n            });\r\n\r\n            let folio = null;\r\n            if (this.props.selection) {\r\n                const folioCards = [];\r\n\r\n                folioCards.push(\r\n                    <div className='column' key='info'>\r\n                        <MapFolioCard\r\n                            selection={this.props.selection}\r\n                            filter={this.props.filter}\r\n                            addMap={() => this.props.addMap()}\r\n                            removeMapFolio={() => this.props.removeMapFolio()}\r\n                            changeValue={(source, field, value) => this.props.changeValue(source, field, value)}\r\n                        />\r\n                    </div>\r\n                );\r\n\r\n                this.props.selection.maps.filter(m => Utils.match(this.props.filter, m.name)).forEach(m => {\r\n                    folioCards.push(\r\n                        <div className='column' key={m.id}>\r\n                            <MapCard\r\n                                map={m}\r\n                                editMap={map => this.props.editMap(map)}\r\n                                removeMap={map => this.props.removeMap(map)}\r\n                                changeValue={(source, type, value) => this.props.changeValue(source, type, value)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                if (folioCards.length === 0) {\r\n                    folioCards.push(\r\n                        <div className='column' key='empty'>\r\n                            <Note content={<div className='section'>there are no maps in this folio</div>} />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                folio = (\r\n                    <div>\r\n                        <CardGroup\r\n                            content={folioCards}\r\n                            heading={this.props.selection.name || 'unnamed folio'}\r\n                            showClose={this.props.selection !== null}\r\n                            close={() => this.props.selectMapFolio(null)}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='map-builder row collapse'>\r\n                    <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                        {help}\r\n                        <button onClick={() => this.props.addMapFolio()}>add a new map folio</button>\r\n                        {folios}\r\n                    </div>\r\n                    <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                        {folio}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface HelpCardProps {\r\n    mapFolios: MapFolio[];\r\n}\r\n\r\nclass HelpCard extends React.Component<HelpCardProps> {\r\n    public render() {\r\n        try {\r\n            let action: JSX.Element | null = null;\r\n            if (this.props.mapFolios.length === 0) {\r\n                action = (\r\n                    <div className='section'>to start a new folio, press the button below</div>\r\n                );\r\n            } else {\r\n                action = (\r\n                    <div className='section'>select a map folio from the list to see the maps it contains</div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <Note\r\n                    content={\r\n                        <div>\r\n                            <div className='section'>on this page you can set up folios containing tactical maps</div>\r\n                            <div className='section'>when you have created a map you can use it in encounters</div>\r\n                            <div className='divider'/>\r\n                            {action}\r\n                        </div>\r\n                    }\r\n                />\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { MonsterGroup } from '../../models/monster-group';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport InfoCard from './info-card';\r\n\r\ninterface Props {\r\n    selection: MonsterGroup;\r\n    filter: string | null;\r\n    changeValue: (field: string, value: string) => void;\r\n    addMonster: () => void;\r\n    generateMonster: () => void;\r\n    sortMonsters: () => void;\r\n    removeMonsterGroup: () => void;\r\n}\r\n\r\nexport default class MonsterGroupCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const heading = (\r\n                <div className='heading'>\r\n                    <div className='title'>monster group</div>\r\n                </div>\r\n            );\r\n\r\n            const content = (\r\n                <div>\r\n                    <div className='section'>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='group name'\r\n                            value={this.props.selection.name}\r\n                            disabled={!!this.props.filter}\r\n                            onChange={event => this.props.changeValue('name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.addMonster()}>add a new blank monster</button>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.generateMonster()}>generate a random monster</button>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.sortMonsters()}>sort monsters</button>\r\n                        <ConfirmButton text='delete group' callback={() => this.props.removeMonsterGroup()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            return (\r\n                <InfoCard heading={heading} content={content} />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { MonsterGroup } from '../../models/monster-group';\r\n\r\ninterface Props {\r\n    group: MonsterGroup;\r\n    selected: boolean;\r\n    filter: string;\r\n    setSelection: (group: MonsterGroup) => void;\r\n}\r\n\r\nexport default class MonsterGroupListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const matchGroup = Utils.match(this.props.filter, this.props.group.name);\r\n\r\n            const monsters = [];\r\n            for (let n = 0; n !== this.props.group.monsters.length; ++n) {\r\n                const monster = this.props.group.monsters[n];\r\n                const name = monster.name || 'unnamed monster';\r\n                if (matchGroup || Utils.match(this.props.filter, name)) {\r\n                    monsters.push(<div key={monster.id} className='text'>{name}</div>);\r\n                }\r\n            }\r\n            if (monsters.length === 0) {\r\n                monsters.push(<div key='empty' className='text'>no monsters</div>);\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.group)}>\r\n                    <div className='heading'>{this.props.group.name || 'unnamed group'}</div>\r\n                    {monsters}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Monster, MonsterGroup } from '../../models/monster-group';\r\n\r\nimport MonsterCard from '../cards/monster-card';\r\nimport MonsterGroupCard from '../cards/monster-group-card';\r\nimport MonsterGroupListItem from '../list-items/monster-group-list-item';\r\nimport CardGroup from '../panels/card-group';\r\nimport Note from '../panels/note';\r\n\r\ninterface Props {\r\n    library: MonsterGroup[];\r\n    selection: MonsterGroup | null;\r\n    showHelp: boolean;\r\n    filter: string;\r\n    selectMonsterGroup: (group: MonsterGroup | null) => void;\r\n    addMonsterGroup: () => void;\r\n    removeMonsterGroup: () => void;\r\n    addMonster: () => void;\r\n    generateMonster: () => void;\r\n    removeMonster: (monster: Monster) => void;\r\n    editMonster: (monster: Monster) => void;\r\n    cloneMonster: (monster: Monster, name: string) => void;\r\n    sortMonsters: () => void;\r\n    moveToGroup: (monster: Monster, groupID: string) => void;\r\n    changeValue: (source: any, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, value: number) => void;\r\n}\r\n\r\nexport default class MonsterLibraryScreen extends React.Component<Props> {\r\n    private showMonsterGroup(group: MonsterGroup) {\r\n        let result = Utils.match(this.props.filter, group.name);\r\n\r\n        if (!result) {\r\n            group.monsters.forEach(monster => {\r\n                result = Utils.match(this.props.filter, monster.name) || result;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let help = null;\r\n            if (this.props.showHelp) {\r\n                help = (\r\n                    <HelpCard library={this.props.library} />\r\n                );\r\n            }\r\n\r\n            const listItems = this.props.library.filter(group => this.showMonsterGroup(group)).map(group => {\r\n                return (\r\n                    <MonsterGroupListItem\r\n                        key={group.id}\r\n                        group={group}\r\n                        filter={this.props.filter}\r\n                        selected={group === this.props.selection}\r\n                        setSelection={grp => this.props.selectMonsterGroup(grp)}\r\n                    />\r\n                );\r\n            });\r\n\r\n            const cards = [];\r\n\r\n            if (this.props.selection) {\r\n                cards.push(\r\n                    <div className='column' key='info'>\r\n                        <MonsterGroupCard\r\n                            selection={this.props.selection}\r\n                            filter={this.props.filter}\r\n                            addMonster={() => this.props.addMonster()}\r\n                            generateMonster={() => this.props.generateMonster()}\r\n                            sortMonsters={() => this.props.sortMonsters()}\r\n                            changeValue={(type, value) => this.props.changeValue(this.props.selection, type, value)}\r\n                            removeMonsterGroup={() => this.props.removeMonsterGroup()}\r\n                        />\r\n                    </div>\r\n                );\r\n\r\n                const monsters = this.props.selection.monsters.filter(monster => {\r\n                    return Utils.match(this.props.filter, monster.name);\r\n                });\r\n\r\n                if (monsters.length !== 0) {\r\n                    monsters.forEach(m => {\r\n                        cards.push(\r\n                            <div className='column' key={m.id}>\r\n                                <MonsterCard\r\n                                    combatant={m}\r\n                                    mode={'view editable'}\r\n                                    library={this.props.library}\r\n                                    changeValue={(source, type, value) => this.props.changeValue(source, type, value)}\r\n                                    nudgeValue={(source, type, delta) => this.props.nudgeValue(source, type, delta)}\r\n                                    moveToGroup={(monster, groupID) => this.props.moveToGroup(monster, groupID)}\r\n                                    removeMonster={monster => this.props.removeMonster(monster)}\r\n                                    editMonster={monster => this.props.editMonster(monster)}\r\n                                    cloneMonster={(monster, monsterName) => this.props.cloneMonster(monster, monsterName)}\r\n                                />\r\n                            </div>\r\n                        );\r\n                    });\r\n                } else {\r\n                    cards.push(\r\n                        <div className='column' key='empty'>\r\n                            <Note content={<div className='section'>there are no monsters in this group</div>} />\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n\r\n            let name;\r\n            if (this.props.selection) {\r\n                name = this.props.selection.name;\r\n                if (!name) {\r\n                    name = 'unnamed group';\r\n                }\r\n            }\r\n\r\n            return (\r\n                <div className='monster-library row collapse'>\r\n                    <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                        {help}\r\n                        <button onClick={() => this.props.addMonsterGroup()}>add a new monster group</button>\r\n                        {listItems}\r\n                    </div>\r\n                    <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                        <CardGroup\r\n                            content={cards}\r\n                            heading={name}\r\n                            showClose={this.props.selection !== null}\r\n                            close={() => this.props.selectMonsterGroup(null)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface HelpCardProps {\r\n    library: MonsterGroup[];\r\n}\r\n\r\nclass HelpCard extends React.Component<HelpCardProps> {\r\n    public render() {\r\n        let action: JSX.Element | null = null;\r\n        if (this.props.library.length === 0) {\r\n            action = (\r\n                <div className='section'>to start adding monsters, press the button below</div>\r\n            );\r\n        } else {\r\n            action = (\r\n                <div className='section'>select a monster group from the list to see stat blocks for monsters in that group</div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Note\r\n                content={\r\n                    <div>\r\n                        <div className='section'>you can maintain your menagerie of monsters here</div>\r\n                        <div className='divider'/>\r\n                        {action}\r\n                    </div>\r\n                }\r\n            />\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Party } from '../../models/party';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport InfoCard from './info-card';\r\n\r\ninterface Props {\r\n    selection: Party;\r\n    filter: string | null;\r\n    changeValue: (field: string, value: string) => void;\r\n    addPC: () => void;\r\n    sortPCs: () => void;\r\n    removeParty: () => void;\r\n}\r\n\r\nexport default class PartyCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const activePCs = this.props.selection.pcs.filter(pc => pc.active);\r\n\r\n            const languages = activePCs\r\n                .map(pc => pc.languages)\r\n                .join(', ')\r\n                .split(/[ ,;]+/)\r\n                .reduce((array: string[], value) => {\r\n                    if (array.indexOf(value) === -1) {\r\n                        array.push(value);\r\n                    }\r\n                    return array;\r\n                }, [])\r\n                .sort((a, b) => {\r\n                    if (a === 'Common') {\r\n                        return -1;\r\n                    }\r\n                    if (b === 'Common') {\r\n                        return 1;\r\n                    }\r\n                    return a.localeCompare(b);\r\n                })\r\n                .join(', ');\r\n\r\n            let insightSummary = '-';\r\n            let investigationSummary = '-';\r\n            let perceptionSummary = '-';\r\n\r\n            if (activePCs.length !== 0) {\r\n                const insight: { min: number | null, max: number | null } = { min: null, max: null };\r\n                const invest: { min: number | null, max: number | null } = { min: null, max: null };\r\n                const percep: { min: number | null, max: number | null } = { min: null, max: null };\r\n\r\n                activePCs.forEach(pc => {\r\n                    insight.min = insight.min === null ? pc.passiveInsight : Math.min(insight.min, pc.passiveInsight);\r\n                    insight.max = insight.max === null ? pc.passiveInsight : Math.max(insight.max, pc.passiveInsight);\r\n                    invest.min = invest.min === null ? pc.passiveInvestigation : Math.min(invest.min, pc.passiveInvestigation);\r\n                    invest.max = invest.max === null ? pc.passiveInvestigation : Math.max(invest.max, pc.passiveInvestigation);\r\n                    percep.min = percep.min === null ? pc.passivePerception : Math.min(percep.min, pc.passivePerception);\r\n                    percep.max = percep.max === null ? pc.passivePerception : Math.max(percep.max, pc.passivePerception);\r\n                });\r\n\r\n                insightSummary = insight.min === insight.max ? (insight.min as number).toString() : insight.min + ' - ' + insight.max;\r\n                investigationSummary = invest.min === invest.max ? (invest.min as number).toString() : invest.min + ' - ' + invest.max;\r\n                perceptionSummary = percep.min === percep.max ? (percep.min as number).toString() : percep.min + ' - ' + percep.max;\r\n            }\r\n\r\n            const heading = (\r\n                <div className='heading'>\r\n                    <div className='title'>party</div>\r\n                </div>\r\n            );\r\n\r\n            const content = (\r\n                <div>\r\n                    <div className='section'>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='party name'\r\n                            value={this.props.selection.name}\r\n                            disabled={!!this.props.filter}\r\n                            onChange={event => this.props.changeValue('name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section' style={{ display: languages !== '' ? 'block' : 'none' }}>\r\n                        <div className='subheading'>languages</div>\r\n                    </div>\r\n                    <div className='section'>\r\n                        {languages}\r\n                    </div>\r\n                    <div className='section'>\r\n                        <div className='subheading'>passive skills</div>\r\n                    </div>\r\n                    <div className='table'>\r\n                        <div>\r\n                            <div className='cell three'><b>insight</b></div>\r\n                            <div className='cell three'><b>invest.</b></div>\r\n                            <div className='cell three'><b>percep.</b></div>\r\n                        </div>\r\n                        <div>\r\n                            <div className='cell three'>{insightSummary}</div>\r\n                            <div className='cell three'>{investigationSummary}</div>\r\n                            <div className='cell three'>{perceptionSummary}</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.addPC()}>add a new pc</button>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.sortPCs()}>sort pcs</button>\r\n                        <ConfirmButton text='delete party' callback={() => this.props.removeParty()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            return (\r\n                <InfoCard heading={heading} content={content} />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Party } from '../../models/party';\r\n\r\ninterface Props {\r\n    party: Party;\r\n    selected: boolean;\r\n    filter: string;\r\n    setSelection: (party: Party) => void;\r\n}\r\n\r\nexport default class PartyListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const matchParty = Utils.match(this.props.filter, this.props.party.name);\r\n\r\n            const pcs = [];\r\n            for (let n = 0; n !== this.props.party.pcs.length; ++n) {\r\n                const pc = this.props.party.pcs[n];\r\n                let name = pc.name || 'unnamed pc';\r\n                if (pc.player) {\r\n                    name += ' (' + pc.player + ')';\r\n                }\r\n                if (matchParty || Utils.match(this.props.filter, name)) {\r\n                    pcs.push(<div key={pc.id} className='text'>{name}</div>);\r\n                }\r\n            }\r\n            if (pcs.length === 0) {\r\n                pcs.push(<div key='empty' className='text'>no pcs</div>);\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.party)}>\r\n                    <div className='heading'>{this.props.party.name || 'unnamed party'}</div>\r\n                    {pcs}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Party, PC } from '../../models/party';\r\n\r\nimport PartyCard from '../cards/party-card';\r\nimport PCCard from '../cards/pc-card';\r\nimport PartyListItem from '../list-items/party-list-item';\r\nimport CardGroup from '../panels/card-group';\r\nimport Note from '../panels/note';\r\n\r\ninterface Props {\r\n    parties: Party[];\r\n    selection: Party | null;\r\n    filter: string;\r\n    showHelp: boolean;\r\n    selectParty: (party: Party | null) => void;\r\n    addParty: () => void;\r\n    removeParty: () => void;\r\n    addPC: () => void;\r\n    removePC: (pc: PC) => void;\r\n    sortPCs: () => void;\r\n    changeValue: (source: any, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, value: number) => void;\r\n}\r\n\r\nexport default class PartiesScreen extends React.Component<Props> {\r\n    private showParty(party: Party) {\r\n        let result = Utils.match(this.props.filter, party.name);\r\n\r\n        if (!result) {\r\n            party.pcs.forEach(pc => {\r\n                result = Utils.match(this.props.filter, pc.name) || result;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let help = null;\r\n            if (this.props.showHelp) {\r\n                help = (\r\n                    <HelpCard parties={this.props.parties}/>\r\n                );\r\n            }\r\n\r\n            const parties = this.props.parties.filter(p => this.showParty(p)).map(p => {\r\n                return (\r\n                    <PartyListItem\r\n                        key={p.id}\r\n                        party={p}\r\n                        filter={this.props.filter}\r\n                        selected={p === this.props.selection}\r\n                        setSelection={party => this.props.selectParty(party)}\r\n                    />\r\n                );\r\n            });\r\n\r\n            const activeCards: JSX.Element[] = [];\r\n            const inactiveCards: JSX.Element[] = [];\r\n\r\n            if (this.props.selection) {\r\n                activeCards.push(\r\n                    <div className='column' key='info'>\r\n                        <PartyCard\r\n                            selection={this.props.selection}\r\n                            filter={this.props.filter}\r\n                            addPC={() => this.props.addPC()}\r\n                            sortPCs={() => this.props.sortPCs()}\r\n                            changeValue={(type, value) => this.props.changeValue(this.props.selection, type, value)}\r\n                            removeParty={() => this.props.removeParty()}\r\n                        />\r\n                    </div>\r\n                );\r\n\r\n                const pcs = this.props.selection.pcs.filter(pc => {\r\n                    return Utils.match(this.props.filter, pc.name);\r\n                });\r\n\r\n                const activePCs = pcs.filter(pc => pc.active);\r\n                activePCs.forEach(activePC => {\r\n                    activeCards.push(\r\n                        <div className='column' key={activePC.id}>\r\n                            <PCCard\r\n                                combatant={activePC}\r\n                                mode={'edit'}\r\n                                changeValue={(pc, type, value) => this.props.changeValue(pc, type, value)}\r\n                                nudgeValue={(pc, type, delta) => this.props.nudgeValue(pc, type, delta)}\r\n                                removePC={pc => this.props.removePC(pc)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                const inactivePCs = pcs.filter(pc => !pc.active);\r\n                inactivePCs.forEach(inactivePC => {\r\n                    inactiveCards.push(\r\n                        <div className='column' key={inactivePC.id}>\r\n                            <PCCard\r\n                                combatant={inactivePC}\r\n                                mode={'edit'}\r\n                                changeValue={(pc, type, value) => this.props.changeValue(pc, type, value)}\r\n                                nudgeValue={(pc, type, delta) => this.props.nudgeValue(pc, type, delta)}\r\n                                removePC={pc => this.props.removePC(pc)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                if (activePCs.length === 0) {\r\n                    activeCards.push(\r\n                        <div className='column' key='empty'>\r\n                            <Note content={<div className='section'>there are no pcs in this party</div>} />\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n\r\n            let name;\r\n            if (this.props.selection) {\r\n                name = this.props.selection.name || 'unnamed party';\r\n            }\r\n\r\n            return (\r\n                <div className='parties row collapse'>\r\n                    <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                        {help}\r\n                        <button onClick={() => this.props.addParty()}>add a new party</button>\r\n                        {parties}\r\n                    </div>\r\n                    <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                        <CardGroup\r\n                            content={activeCards}\r\n                            heading={name}\r\n                            showClose={this.props.selection !== null}\r\n                            close={() => this.props.selectParty(null)}\r\n                            hidden={!this.props.selection}\r\n                        />\r\n                        <CardGroup\r\n                            content={inactiveCards}\r\n                            heading='inactive pcs'\r\n                            showClose={false}\r\n                            hidden={inactiveCards.length === 0}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface HelpCardProps {\r\n    parties: Party[];\r\n}\r\n\r\nclass HelpCard extends React.Component<HelpCardProps> {\r\n    public render() {\r\n        try {\r\n            let action: JSX.Element | null = null;\r\n            if (this.props.parties.length === 0) {\r\n                action = (\r\n                    <div className='section'>to start adding a party, press the button below</div>\r\n                );\r\n            } else {\r\n                action = (\r\n                    <div className='section'>select a party from the list to see pc details</div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <Note\r\n                    content={\r\n                        <div>\r\n                            <div className='section'>this page is where you can tell dojo all about your pcs</div>\r\n                            <div className='section'>you can add a party for each of your gaming groups</div>\r\n                            <div className='divider'/>\r\n                            {action}\r\n                        </div>\r\n                    }\r\n                />\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport checked from '../../resources/images/checked.svg';\r\nimport unchecked from '../../resources/images/unchecked.svg';\r\n\r\ninterface Props {\r\n    label: string;\r\n    checked: boolean;\r\n    changeValue: (value: boolean) => void;\r\n    showCheck: boolean;\r\n    disabled: boolean;\r\n}\r\n\r\nexport default class Checkbox extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        showCheck: true,\r\n        disabled: false\r\n    };\r\n\r\n    private click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        this.props.changeValue(!this.props.checked);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'checkbox';\r\n            if (this.props.checked) {\r\n                style += ' checked';\r\n            }\r\n            if (this.props.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            let check = null;\r\n            if (this.props.showCheck) {\r\n                check = (\r\n                    <img className='image' src={this.props.checked ? checked : unchecked} alt='check' />\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={style} onClick={e => this.click(e)}>\r\n                    {check}\r\n                    <div className='checkbox-label'>{this.props.label}</div>\r\n                </div>\r\n            );\r\n\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    options: { id: string; text: string; disabled?: boolean }[];\r\n    selectedID: string | null;\r\n    select: (optionID: string) => void;\r\n    tabs: boolean;\r\n    disabled: boolean;\r\n    itemsPerRow: number;\r\n}\r\n\r\nexport default class Selector extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        tabs: false,\r\n        disabled: false,\r\n        itemsPerRow: null\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            let style = this.props.tabs ? 'selector tabs' : 'selector radio';\r\n            if (this.props.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            const itemsPerRow = this.props.itemsPerRow ? this.props.itemsPerRow : this.props.options.length;\r\n            const rowCount = Math.ceil(this.props.options.length / itemsPerRow);\r\n            const rowContents: JSX.Element[][] = [];\r\n            for (let n = 0; n !== rowCount; ++n) {\r\n                rowContents.push([]);\r\n            }\r\n\r\n            this.props.options.forEach(option => {\r\n                const index = this.props.options.indexOf(option);\r\n                const rowIndex = Math.floor(index / itemsPerRow);\r\n                const row = rowContents[rowIndex];\r\n                row.push(\r\n                    <SelectorOption\r\n                        key={option.id}\r\n                        option={option}\r\n                        selected={option.id === this.props.selectedID}\r\n                        count={itemsPerRow}\r\n                        select={(optionID: string) => this.props.select(optionID)}\r\n                    />\r\n                );\r\n            });\r\n\r\n            const rowSections = rowContents.map(row => {\r\n                const index = rowContents.indexOf(row);\r\n                return <div key={index}>{row}</div>;\r\n            });\r\n\r\n            return (\r\n                <div className={style}>\r\n                    {rowSections}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface SelectorOptionInterface {\r\n    option: { id: string; text: string; disabled?: boolean };\r\n    selected: boolean;\r\n    count: number;\r\n    select: (optionID: string) => void;\r\n}\r\n\r\nclass SelectorOption extends React.Component<SelectorOptionInterface> {\r\n    private click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (!this.props.option.disabled) {\r\n            this.props.select(this.props.option.id);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const width = 'calc(((100% - 1px) / ' + this.props.count + ') - 2px )';\r\n\r\n            let style = 'option';\r\n            if (this.props.selected) {\r\n                style += ' selected';\r\n            }\r\n            if (this.props.option.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            return (\r\n                <div key={this.props.option.id} className={style} style={{ width: width }} title={this.props.option.text} onClick={e => this.click(e)}>\r\n                    {this.props.option.text}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import Utils from './utils';\r\n\r\ninterface ModelLine {\r\n    prev: string;\r\n    freq: ModelChar[];\r\n}\r\n\r\ninterface ModelChar {\r\n    char: string;\r\n    count: number;\r\n}\r\n\r\nexport default class TextGenerator {\r\n\r\n    private static model: ModelLine[] = [];\r\n    private static maxLength: number = 0;\r\n\r\n    public static initModel(sources: string[]) {\r\n        const model: ModelLine[] = [];\r\n        let maxLength: number = 0;\r\n\r\n        sources.forEach(source => {\r\n            const lines = source.split(/\\r?\\n/);\r\n            lines.forEach(line => {\r\n                if (line) {\r\n                    TextGenerator.addLineToModel(line, model);\r\n                    maxLength = Math.max(maxLength, line.length);\r\n                }\r\n            });\r\n        });\r\n\r\n        TextGenerator.model = model;\r\n        TextGenerator.maxLength = maxLength;\r\n    }\r\n\r\n    private static addLineToModel(line: string, model: ModelLine[]) {\r\n        line = String.fromCharCode(0, 1) + line + String.fromCharCode(2);\r\n\r\n        for (let index = 2; index !== line.length; ++index) {\r\n            const prev = line.substr(index - 2, 2);\r\n            const char = line.substr(index, 1);\r\n\r\n            let item = model.find(x => x.prev === prev);\r\n            if (!item) {\r\n                item = {\r\n                    prev: prev,\r\n                    freq: []\r\n                };\r\n                model.push(item);\r\n            }\r\n\r\n            let freq = item.freq.find(x => x.char === char);\r\n            if (!freq) {\r\n                freq = {\r\n                    char: char,\r\n                    count: 0\r\n                };\r\n                item.freq.push(freq);\r\n            }\r\n\r\n            freq.count += 1;\r\n        }\r\n    }\r\n\r\n    public static generate(requiredResults: number): { line: string, fit: number }[] {\r\n        const lines: { line: string, fit: number }[] = [];\r\n        const allowedFailures = 100;\r\n        let failures = 0;\r\n\r\n        while ((lines.length < requiredResults) && (failures < allowedFailures)) {\r\n            const line = TextGenerator.extractLine();\r\n            if (line && !lines.map(l => l.line).includes(line) && line.length <= TextGenerator.maxLength) {\r\n                const fit = TextGenerator.fit(line);\r\n                lines.push({ line, fit });\r\n            } else {\r\n                failures += 1;\r\n            }\r\n        }\r\n\r\n        return lines;\r\n    }\r\n\r\n    private static extractLine() {\r\n        let line = String.fromCharCode(0, 1);\r\n\r\n        while (true) {\r\n            const prev = line.substr(line.length - 2, 2);\r\n\r\n            const item = TextGenerator.model.find(x => x.prev === prev);\r\n            if (item) {\r\n                let candidates = '';\r\n                item.freq.forEach(freq => {\r\n                    candidates += freq.char.repeat(freq.count);\r\n                });\r\n\r\n                const index = Math.floor(Math.random() * candidates.length);\r\n                let char = candidates[index];\r\n                if (char === String.fromCharCode(2)) {\r\n                    line = line.substr(2);\r\n                    return line;\r\n                } else {\r\n                    if (Utils.dieRoll() === 1) {\r\n                        // TODO: Mutate choice\r\n                        const groups = ['bdg', 'ptk', 'sz', 'aeiouy', 'lr', 'ckq', 'vf'];\r\n                        groups.forEach(g => {\r\n                            if (g.includes(char)) {\r\n                                const n = Math.floor(Math.random() * g.length);\r\n                                char = g[n];\r\n                            }\r\n                        });\r\n                    }\r\n                    line += char;\r\n                }\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n\r\n    private static fit(text: string): number {\r\n        text = String.fromCharCode(0, 1) + text + String.fromCharCode(2);\r\n\r\n        const values: number[] = [];\r\n        for (let n = 2; n !== text.length; ++n) {\r\n            const prev = text.substr(n - 2, 2);\r\n            const ch = text[n];\r\n\r\n            const line = TextGenerator.model.find(m => m.prev === prev);\r\n            if (line) {\r\n                const mc = line.freq.find(f => f.char === ch);\r\n                if (mc) {\r\n                    const maxCount = line.freq.reduce((max, value) => Math.max(max, value.count), 0);\r\n                    const fit = mc.count / maxCount;\r\n                    values.push(fit);\r\n                } else {\r\n                    values.push(0);\r\n                }\r\n            }\r\n        }\r\n\r\n        return values.reduce((sum, value) => sum + value, 0) / values.length;\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport TextGenerator from '../../utils/text-generation';\r\n\r\nimport Checkbox from '../controls/checkbox';\r\nimport ControlRow from '../controls/control-row';\r\nimport Expander from '../controls/expander';\r\nimport Selector from '../controls/selector';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    //\r\n}\r\n\r\ninterface State {\r\n    sources: { [id: string]: string; };\r\n    output: string[];\r\n}\r\n\r\ninterface Preset {\r\n    name: string;\r\n    languages: string[];\r\n}\r\n\r\nexport default class LanguageModule extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            sources: {},\r\n            output: []\r\n        };\r\n    }\r\n\r\n    private getLanguages(): string[] {\r\n        return [\r\n            'afrikaans',\r\n            'amharic',\r\n            'armenian',\r\n            'basque',\r\n            'belarusian',\r\n            'bulgarian',\r\n            'chichewa',\r\n            'chinese',\r\n            'croatian',\r\n            'czech',\r\n            'danish',\r\n            'dutch',\r\n            'english',\r\n            'finnish',\r\n            'french',\r\n            'german',\r\n            'greek',\r\n            'hawaiian',\r\n            'hindi',\r\n            'hungarian',\r\n            'icelandic',\r\n            'irish',\r\n            'italian',\r\n            'japanese',\r\n            'kannada',\r\n            'kazakh',\r\n            'korean',\r\n            'kyrgyz',\r\n            'latvian',\r\n            'lithuanian',\r\n            'macedonian',\r\n            'malay',\r\n            'maltese',\r\n            'maori',\r\n            'myanmar',\r\n            'nepalese',\r\n            'norwegian',\r\n            'persian',\r\n            'portuguese',\r\n            'punjabi',\r\n            'romanian',\r\n            'russian',\r\n            'samoan',\r\n            'serbian',\r\n            'shona',\r\n            'somali',\r\n            'spanish',\r\n            'swahili',\r\n            'swedish',\r\n            'thai',\r\n            'turkish',\r\n            'welsh',\r\n            'yiddish',\r\n            'zulu'\r\n        ];\r\n    }\r\n\r\n    private getPresets(): Preset[] {\r\n        return [\r\n            {\r\n                name: 'draconic',\r\n                languages: ['armenian', 'irish', 'maltese']\r\n            },\r\n            {\r\n                name: 'dwarvish',\r\n                languages: ['czech', 'german', 'yiddish']\r\n            },\r\n            {\r\n                name: 'elvish',\r\n                languages: ['finnish', 'spanish', 'welsh']\r\n            },\r\n            {\r\n                name: 'goblin',\r\n                languages: ['hawaiian', 'kyrgyz', 'somali']\r\n            },\r\n            {\r\n                name: 'orc',\r\n                languages: ['macedonian', 'russian', 'turkish']\r\n            }\r\n        ];\r\n    }\r\n\r\n    private async addLanguage(language: string) {\r\n        const response = await fetch('./data/langs/' + language + '.txt');\r\n        this.state.sources[language] = await response.text();\r\n        this.setState({\r\n            sources: this.state.sources\r\n        });\r\n    }\r\n\r\n    private removeLanguage(language: string) {\r\n        delete this.state.sources[language];\r\n        this.setState({\r\n            sources: this.state.sources\r\n        });\r\n    }\r\n\r\n    private usePreset(presetName: string) {\r\n        const preset = this.getPresets().find(p => p.name === presetName);\r\n        if (preset) {\r\n            this.setState({\r\n                sources: {},\r\n                output: []\r\n            }, () => {\r\n                preset.languages.forEach(lang => {\r\n                    this.addLanguage(lang);\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    private random() {\r\n        const languages = this.getLanguages();\r\n\r\n        const selection: string[] = [];\r\n        while (selection.length !== 3) {\r\n            const n = Math.floor(Math.random() * languages.length);\r\n            const lang = languages[n];\r\n            if (!selection.includes(lang)) {\r\n                selection.push(lang);\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            sources: {},\r\n            output: []\r\n        }, () => {\r\n            selection.forEach(lang => {\r\n                this.addLanguage(lang);\r\n            });\r\n        });\r\n    }\r\n\r\n    private generate() {\r\n        const sources: string[] = [];\r\n        Object.keys(this.state.sources).forEach(key => {\r\n            const src = this.state.sources[key];\r\n            sources.push(src);\r\n        });\r\n        TextGenerator.initModel(sources);\r\n        this.setState({\r\n            output: TextGenerator.generate(5).map(l => l.line)\r\n        });\r\n    }\r\n\r\n    private reset() {\r\n        this.setState({\r\n            sources: {},\r\n            output: []\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        const presetOptions = this.getPresets().map(p => {\r\n            return {\r\n                id: p.name,\r\n                text: p.name\r\n            };\r\n        });\r\n\r\n        let selectedPreset = '';\r\n        this.getPresets().forEach(p => {\r\n            const selected = Object.keys(this.state.sources).sort().join(', ');\r\n            const setting = p.languages.sort().join(', ');\r\n            if (selected === setting) {\r\n                selectedPreset = p.name;\r\n            }\r\n        });\r\n\r\n        let selectedLanguages = Object.keys(this.state.sources).sort().join(', ');\r\n        if (selectedLanguages === '') {\r\n            selectedLanguages = 'none';\r\n        }\r\n\r\n        const languages = this.getLanguages()\r\n            .map(lang => {\r\n                const isSelected = Object.keys(this.state.sources).includes(lang);\r\n                return (\r\n                    <div className='column' key={lang}>\r\n                        <Checkbox\r\n                            label={lang}\r\n                            checked={isSelected}\r\n                            showCheck={false}\r\n                            changeValue={value => value ? this.addLanguage(lang) : this.removeLanguage(lang)}\r\n                        />\r\n                    </div>\r\n                );\r\n            });\r\n\r\n        const allowGenerate = Object.keys(this.state.sources).length > 0;\r\n        const allowReset = allowGenerate || this.state.output.length > 0;\r\n\r\n        const output = [];\r\n        if (this.state.output.length > 0) {\r\n            output.push(\r\n                <div key='div' className='divider' />\r\n            );\r\n        }\r\n        for (let n = 0; n !== this.state.output.length; ++n) {\r\n            output.push(\r\n                <div key={n} className='section'>\r\n                    {this.state.output[n].toLowerCase()}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className='language'>\r\n                <div className='heading'>presets</div>\r\n                <Selector\r\n                    options={presetOptions}\r\n                    selectedID={selectedPreset}\r\n                    select={optionID => this.usePreset(optionID)}\r\n                />\r\n                <div className='divider' />\r\n                <Expander\r\n                    text={'selected languages: ' + selectedLanguages}\r\n                    content={\r\n                        <div className='row collapse small-up-1 medium-up-2 large-up-3 language-options'>\r\n                            {languages}\r\n                        </div>\r\n                    }\r\n                />\r\n                <div className='divider' />\r\n                <ControlRow\r\n                    controls={[\r\n                        <button key='generate' className={allowGenerate ? '' : 'disabled'} onClick={() => this.generate()}>generate text</button>,\r\n                        <button key='reset' className={allowReset ? '' : 'disabled'} onClick={() => this.reset()}>reset</button>,\r\n                        <button key='random' onClick={() => this.random()}>random sources</button>\r\n                    ]}\r\n                />\r\n                <div className='language-output'>\r\n                    {output}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport TextGenerator from '../../utils/text-generation';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    //\r\n}\r\n\r\ninterface State {\r\n    output: {\r\n        male: string[],\r\n        female: string[],\r\n        surname: string[]\r\n    };\r\n}\r\n\r\nexport default class NameModule extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            output: {\r\n                male: [],\r\n                female: [],\r\n                surname: []\r\n            }\r\n        };\r\n    }\r\n\r\n    private async generate(type: 'male' | 'female' | 'surname') {\r\n        const response = await fetch('./data/names/' + type + '.txt');\r\n        const input = await response.text();\r\n\r\n        TextGenerator.initModel([input]);\r\n        const names = TextGenerator.generate(10).map(n => n.line).sort();\r\n\r\n        this.state.output[type] = names;\r\n        this.setState({\r\n            output: this.state.output\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        const male = [];\r\n        for (let n = 0; n !== this.state.output.male.length; ++n) {\r\n            male.push(\r\n                <div key={n} className='section'>\r\n                    {this.state.output.male[n].toLowerCase()}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        const female = [];\r\n        for (let n = 0; n !== this.state.output.female.length; ++n) {\r\n            female.push(\r\n                <div key={n} className='section'>\r\n                    {this.state.output.female[n].toLowerCase()}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        const surname = [];\r\n        for (let n = 0; n !== this.state.output.surname.length; ++n) {\r\n            surname.push(\r\n                <div key={n} className='section'>\r\n                    {this.state.output.surname[n].toLowerCase()}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className='name'>\r\n                <div className='name-output'>\r\n                    <div className='row'>\r\n                        <div className='columns small-4 medium-4 large-4'>\r\n                            <div className='heading'>male names</div>\r\n                            <button onClick={() => this.generate('male')}>generate</button>\r\n                            {male}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4'>\r\n                            <div className='heading'>female names</div>\r\n                            <button onClick={() => this.generate('female')}>generate</button>\r\n                            {female}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4'>\r\n                            <div className='heading'>surnames</div>\r\n                            <button onClick={() => this.generate('surname')}>generate</button>\r\n                            {surname}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Showdown from 'showdown';\r\n\r\nimport Selector from '../controls/selector';\r\n\r\nconst showdown = new Showdown.Converter();\r\nshowdown.setOption('tables', true);\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    //\r\n}\r\n\r\ninterface State {\r\n    view: string;\r\n    source: string | null;\r\n}\r\n\r\nexport default class ReferenceModule extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            view: 'skills',\r\n            source: null\r\n        };\r\n    }\r\n\r\n    private setView(view: string) {\r\n        this.setState({\r\n            view: view,\r\n            source: null\r\n        });\r\n    }\r\n\r\n    private async fetchData() {\r\n        const response = await fetch('./data/' + this.state.view + '.md');\r\n        const text = await response.text();\r\n        this.setState({\r\n            source: text\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        if (this.state.view && !this.state.source) {\r\n            this.fetchData();\r\n        }\r\n\r\n        const options = [\r\n            {\r\n                id: 'skills',\r\n                text: 'skills'\r\n            },\r\n            {\r\n                id: 'conditions',\r\n                text: 'conditions'\r\n            },\r\n            {\r\n                id: 'actions',\r\n                text: 'actions'\r\n            }\r\n        ];\r\n\r\n        return (\r\n            <div>\r\n                <Selector\r\n                    options={options}\r\n                    selectedID={this.state.view}\r\n                    select={optionID => this.setView(optionID)}\r\n                />\r\n                <div dangerouslySetInnerHTML={{ __html: showdown.makeHtml(this.state.source || '') }} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Checkbox from '../controls/checkbox';\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport Selector from '../controls/selector';\r\nimport LanguageModule from '../dm-modules/language-module';\r\nimport NameModule from '../dm-modules/name-module';\r\nimport ReferenceModule from '../dm-modules/reference-module';\r\nimport Note from '../panels/note';\r\n\r\nimport pkg from '../../../package.json';\r\n\r\ninterface Props {\r\n    options: {\r\n        showHelp: boolean;\r\n    };\r\n    resetAll: () => void;\r\n    changeValue: (source: {}, field: string, value: any) => void;\r\n}\r\n\r\ninterface State {\r\n    view: string;\r\n    module: string | null;\r\n}\r\n\r\nexport default class AboutModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            view: 'dm',\r\n            module: null\r\n        };\r\n    }\r\n\r\n    private setView(view: string) {\r\n        this.setState({\r\n            view: view\r\n        });\r\n    }\r\n\r\n    private setModule(module: string) {\r\n        this.setState({\r\n            module: module\r\n        });\r\n    }\r\n\r\n    private getTools() {\r\n        if (this.state.view !== 'dm') {\r\n            return null;\r\n        }\r\n\r\n        const modules = [\r\n            {\r\n                id: 'reference',\r\n                text: 'd&d reference'\r\n            },\r\n            {\r\n                id: 'names',\r\n                text: 'name generator'\r\n            },\r\n            {\r\n                id: 'language',\r\n                text: 'language generator'\r\n            }\r\n        ];\r\n\r\n        let module = (\r\n            <Note\r\n                content={(\r\n                    <div className='section'>\r\n                        <b>dojo</b> includes several dm tools; select one of them above\r\n                    </div>\r\n                )}\r\n            />\r\n        );\r\n\r\n        switch (this.state.module) {\r\n            case 'reference':\r\n                module = (\r\n                    <ReferenceModule />\r\n                );\r\n                break;\r\n            case 'language':\r\n                module = (\r\n                    <LanguageModule />\r\n                );\r\n                break;\r\n            case 'names':\r\n                module = (\r\n                    <NameModule />\r\n                );\r\n                break;\r\n        }\r\n\r\n        return (\r\n            <div className='dm-screen'>\r\n                <Selector\r\n                    options={modules}\r\n                    selectedID={this.state.module}\r\n                    select={moduleID => this.setModule(moduleID)}\r\n                />\r\n                <div className='divider' />\r\n                <div className='dm-module'>\r\n                    {module}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getAbout() {\r\n        if (this.state.view !== 'about') {\r\n            return null;\r\n        }\r\n\r\n        /* tslint:disable:max-line-length */\r\n        return (\r\n            <div>\r\n                <div className='section'>dojo by <a href='mailto:andy.aiken@live.co.uk'>andy aiken</a></div>\r\n                <div className='section'>version <b>{pkg.version}</b></div>\r\n                <div className='section'>if you would like to contribut to this project, you can do so <a href='https://github.com/andyaiken/dojo' target='_blank' rel='noopener noreferrer'>here</a></div>\r\n                <div className='section'>dungeons and dragons copyright wizards of the coast</div>\r\n                <div className='heading'>options</div>\r\n                <ConfirmButton text='clear all data' callback={() => this.props.resetAll()} />\r\n                <Checkbox\r\n                    label='show help cards'\r\n                    checked={this.props.options.showHelp}\r\n                    changeValue={value => this.props.changeValue(this.props.options, 'showHelp', value)}\r\n                />\r\n                <div className='heading'>open game license</div>\r\n                <div className='section'>The following text is the property of Wizards of the Coast, Inc. and is Copyright 2000 Wizards of the Coast, Inc ('Wizards'). All Rights Reserved.</div>\r\n                <ol>\r\n                    <li>Definitions: (a)'Contributors' means the copyright and/or trademark owners who have contributed Open Game Content; (b)'Derivative Material' means copyrighted material including derivative works and translations (including into other computer languages), potation, modification, correction, addition, extension, upgrade, improvement, compilation, abridgment or other form in which an existing work may be recast, transformed or adapted; (c) 'Distribute' means to reproduce, license, rent, lease, sell, broadcast, publicly display, transmit or otherwise distribute; (d)'Open Game Content' means the game mechanic and includes the methods, procedures, processes and routines to the extent such content does not embody the Product Identity and is an enhancement over the prior art and any additional content clearly identified as Open Game Content by the Contributor, and means any work covered by this License, including translations and derivative works under copyright law, but specifically excludes Product Identity. (e) 'Product Identity' means product and product line names, logos and identifying marks including trade dress; artifacts; creatures characters; stories, storylines, plots, thematic elements, dialogue, incidents, language, artwork, symbols, designs, depictions, likenesses, formats, poses, concepts, themes and graphic, photographic and other visual or audio representations; names and descriptions of characters, spells, enchantments, personalities, teams, personas, likenesses and special abilities; places, locations, environments, creatures, equipment, magical or supernatural abilities or effects, logos, symbols, or graphic designs; and any other trademark or registered trademark clearly identified as Product identity by the owner of the Product Identity, and which specifically excludes the Open Game Content; (f) 'Trademark' means the logos, names, mark, sign, motto, designs that are used by a Contributor to identify itself or its products or the associated products contributed to the Open Game License by the Contributor (g) 'Use', 'Used' or 'Using' means to use, Distribute, copy, edit, format, modify, translate and otherwise create Derivative Material of Open Game Content. (h) 'You' or 'Your' means the licensee in terms of this agreement.</li>\r\n                    <li>The License: This License applies to any Open Game Content that contains a notice indicating that the Open Game Content may only be Used under and in terms of this License. You must affix such a notice to any Open Game Content that you Use. No terms may be added to or subtracted from this License except as described by the License itself. No other terms or conditions may be applied to any Open Game Content distributed using this License.</li>\r\n                    <li>Offer and Acceptance: By Using the Open Game Content You indicate Your acceptance of the terms of this License.</li>\r\n                    <li>Grant and Consideration: In consideration for agreeing to use this License, the Contributors grant You a perpetual, worldwide, royalty-free, non-exclusive license with the exact terms of this License to Use, the Open Game Content.</li>\r\n                    <li>Representation of Authority to Contribute: If You are contributing original material as Open Game Content, You represent that Your Contributions are Your original creation and/or You have sufficient rights to grant the rights conveyed by this License.</li>\r\n                    <li>Notice of License Copyright: You must update the COPYRIGHT NOTICE portion of this License to include the exact text of the COPYRIGHT NOTICE of any Open Game Content You are copying, modifying or distributing, and You must add the title, the copyright date, and the copyright holder's name to the COPYRIGHT NOTICE of any original Open Game Content you Distribute.</li>\r\n                    <li>Use of Product Identity: You agree not to Use any Product Identity, including as an indication as to compatibility, except as expressly licensed in another, independent Agreement with the owner of each element of that Product Identity. You agree not to indicate compatibility or co-adaptability with any Trademark or Registered Trademark in conjunction with a work containing Open Game Content except as expressly licensed in another, independent Agreement with the owner of such Trademark or Registered Trademark. The use of any Product Identity in Open Game Content does not constitute a challenge to the ownership of that Product Identity. The owner of any Product Identity used in Open Game Content shall retain all rights, title and interest in and to that Product Identity.</li>\r\n                    <li>Identification: If you distribute Open Game Content You must clearly indicate which portions of the work that you are distributing are Open Game Content.</li>\r\n                    <li>Updating the License: Wizards or its designated Agents may publish updated versions of this License. You may use any authorized version of this License to copy, modify and distribute any Open Game Content originally distributed under any version of this License.</li>\r\n                    <li>Copy of this License: You MUST include a copy of this License with every copy of the Open Game Content You Distribute.</li>\r\n                    <li>Use of Contributor Credits: You may not market or advertise the Open Game Content using the name of any Contributor unless You have written permission from the Contributor to do so.</li>\r\n                    <li>Inability to Comply: If it is impossible for You to comply with any of the terms of this License with respect to some or all of the Open Game Content due to statute, judicial order, or governmental regulation then You may not Use any Open Game Material so affected.</li>\r\n                    <li>Termination: This License will terminate automatically if You fail to comply with all terms herein and fail to cure such breach within 30 days of becoming aware of the breach. All sublicenses shall survive the termination of this License.</li>\r\n                    <li>Reformation: If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable.</li>\r\n                    <li>COPYRIGHT NOTICE Open Game License v 1.0 Copyright 2000, Wizards of the Coast, Inc.</li>\r\n                </ol>\r\n            </div>\r\n        );\r\n        /* tslint:enable:max-line-length */\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const viewOptions = [\r\n                {\r\n                    id: 'dm',\r\n                    text: 'dm tools'\r\n                },\r\n                {\r\n                    id: 'about',\r\n                    text: 'about'\r\n                }\r\n            ];\r\n\r\n            return (\r\n                <div className='about'>\r\n                    <Selector\r\n                        tabs={true}\r\n                        options={viewOptions}\r\n                        selectedID={this.state.view}\r\n                        select={optionID => this.setView(optionID)}\r\n                    />\r\n                    {this.getTools()}\r\n                    {this.getAbout()}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { CombatSetup } from '../../models/combat';\r\nimport { Encounter, EncounterSlot } from '../../models/encounter';\r\nimport { MapFolio } from '../../models/map-folio';\r\nimport { Monster } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport Selector from '../controls/selector';\r\nimport DifficultyChartPanel from '../panels/difficulty-chart-panel';\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    combatSetup: CombatSetup;\r\n    parties: Party[];\r\n    encounters: Encounter[];\r\n    mapFolios: MapFolio[];\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n    notify: () => void;\r\n}\r\n\r\ninterface State {\r\n    combatSetup: CombatSetup;\r\n}\r\n\r\nexport default class CombatStartModal extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        parties: null,\r\n        mapFolios: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            combatSetup: props.combatSetup\r\n        };\r\n    }\r\n\r\n    private setParty(partyID: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.partyID = partyID;\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        }, () => this.props.notify());\r\n    }\r\n\r\n    private setEncounter(encounterID: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.encounterID = encounterID;\r\n        const enc = this.props.encounters.find(e => e.id === encounterID);\r\n        if (enc) {\r\n            // eslint-disable-next-line\r\n            this.state.combatSetup.monsterNames = Utils.getMonsterNames(enc);\r\n        }\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        }, () => this.props.notify());\r\n    }\r\n\r\n    private setFolioID(id: string) {\r\n        if (id && (id !== '')) {\r\n            const folio = this.props.mapFolios.find(f => f.id === id);\r\n            if (folio) {\r\n                // eslint-disable-next-line\r\n                this.state.combatSetup.folioID = folio.id;\r\n                // eslint-disable-next-line\r\n                this.state.combatSetup.mapID = folio.maps.length === 1 ? folio.maps[0].id : null;\r\n            }\r\n        } else {\r\n            // eslint-disable-next-line\r\n            this.state.combatSetup.folioID = null;\r\n            // eslint-disable-next-line\r\n            this.state.combatSetup.mapID = null;\r\n        }\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        });\r\n    }\r\n\r\n    private setMapID(id: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.mapID = id;\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        });\r\n    }\r\n\r\n    private setWave(waveID: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.waveID = waveID;\r\n        const enc = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n        if (enc) {\r\n            const wave = enc.waves.find(w => w.id === waveID);\r\n            if (wave) {\r\n                // eslint-disable-next-line\r\n                this.state.combatSetup.monsterNames = Utils.getMonsterNames(wave);\r\n            }\r\n        }\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        }, () => this.props.notify());\r\n    }\r\n\r\n    private setEncounterInitMode(mode: 'manual' | 'individual' | 'group') {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.encounterInitMode = mode;\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        });\r\n    }\r\n\r\n    private changeName(slotID: string, index: number, name: string) {\r\n        const slot = this.state.combatSetup.monsterNames.find(s => s.id === slotID);\r\n        if (slot) {\r\n            slot.names[index] = name;\r\n            this.setState({\r\n                combatSetup: this.state.combatSetup\r\n            });\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    private getPartySection() {\r\n        if (this.props.parties.length === 0) {\r\n            return (\r\n                <div className='section'>you have not defined any parties</div>\r\n            );\r\n        }\r\n\r\n        const partyOptions = this.props.parties.map(party => {\r\n            return {\r\n                id: party.id,\r\n                text: party.name || 'unnamed party'\r\n            };\r\n        });\r\n\r\n        let partyContent = null;\r\n        if (this.state.combatSetup.partyID) {\r\n            const selectedParty = this.props.parties.find(p => p.id === this.state.combatSetup.partyID);\r\n            if (selectedParty) {\r\n                const pcs = selectedParty.pcs.filter(pc => pc.active);\r\n\r\n                const pcSections = pcs.map(pc =>\r\n                    (\r\n                        <li key={pc.id}>\r\n                            {pc.name || 'unnamed pc'} (level {pc.level})\r\n                        </li>\r\n                    )\r\n                );\r\n\r\n                if (pcSections.length === 0) {\r\n                    pcSections.push(\r\n                        <li key={'empty'}>no pcs</li>\r\n                    );\r\n                }\r\n\r\n                partyContent = (\r\n                    <div>\r\n                        <div className='subheading'>pcs</div>\r\n                        <ul>{pcSections}</ul>\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='heading'>party</div>\r\n                <Dropdown\r\n                    options={partyOptions}\r\n                    placeholder='select party...'\r\n                    selectedID={this.state.combatSetup.partyID ? this.state.combatSetup.partyID : undefined}\r\n                    select={optionID => this.setParty(optionID)}\r\n                />\r\n                {partyContent}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getEncounterSection() {\r\n        if (this.props.encounters.length === 0) {\r\n            return (\r\n                <div className='section'>you have not built any encounters</div>\r\n            );\r\n        }\r\n\r\n        const encounterOptions = this.props.encounters.map(encounter => {\r\n            return {\r\n                id: encounter.id,\r\n                text: encounter.name || 'unnamed encounter'\r\n            };\r\n        });\r\n\r\n        let encounterContent = null;\r\n        if (this.state.combatSetup.encounterID) {\r\n            const selectedEncounter = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n            if (selectedEncounter) {\r\n                const monsterSections = selectedEncounter.slots.map(slot => {\r\n                    let name = slot.monsterName || 'unnamed monster';\r\n                    if (slot.count > 1) {\r\n                        name += ' (x' + slot.count + ')';\r\n                    }\r\n                    return (\r\n                        <li key={slot.id}>{name}</li>\r\n                    );\r\n                });\r\n\r\n                if (monsterSections.length === 0) {\r\n                    monsterSections.push(\r\n                        <li key={'empty'}>no monsters</li>\r\n                    );\r\n                }\r\n\r\n                const waves = selectedEncounter.waves.map(wave => {\r\n                    if (wave.slots.length === 0) {\r\n                        return null;\r\n                    }\r\n\r\n                    const waveMonsters = wave.slots.map(slot => {\r\n                        let name = slot.monsterName || 'unnamed monster';\r\n                        if (slot.count > 1) {\r\n                            name += ' x' + slot.count;\r\n                        }\r\n                        return (\r\n                            <li key={slot.id}>{name}</li>\r\n                        );\r\n                    });\r\n\r\n                    return (\r\n                        <div key={wave.id}>\r\n                            <div className='subheading'>{wave.name || 'unnamed wave'}</div>\r\n                            <ul>{waveMonsters}</ul>\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                encounterContent = (\r\n                    <div>\r\n                        <div className='subheading'>monsters</div>\r\n                        <ul>{monsterSections}</ul>\r\n                        {waves}\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='heading'>encounter</div>\r\n                <Dropdown\r\n                    options={encounterOptions}\r\n                    placeholder='select encounter...'\r\n                    selectedID={this.state.combatSetup.encounterID ? this.state.combatSetup.encounterID : undefined}\r\n                    select={optionID => this.setEncounter(optionID)}\r\n                />\r\n                {encounterContent}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getMapSection() {\r\n        const folios = this.props.mapFolios.filter(folio => folio.maps.length > 0);\r\n        if (folios.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        const folioOptions = [{\r\n            id: '',\r\n            text: 'none'\r\n        }].concat(folios.map(folio => {\r\n            return {\r\n                id: folio.id,\r\n                text: folio.name || 'unnamed folio'\r\n            };\r\n        }));\r\n\r\n        let selectMapSection = null;\r\n        let thumbnailSection = null;\r\n\r\n        if (this.state.combatSetup.folioID) {\r\n            const folio = this.props.mapFolios.find(f => f.id === this.state.combatSetup.folioID);\r\n            if (folio) {\r\n                const mapOptions = folio.maps.map(m => {\r\n                    return {\r\n                        id: m.id,\r\n                        text: m.name || 'unnamed map'\r\n                    };\r\n                });\r\n\r\n                if (mapOptions.length !== 1) {\r\n                    selectMapSection = (\r\n                        <Selector\r\n                            options={mapOptions}\r\n                            selectedID={this.state.combatSetup.mapID}\r\n                            select={optionID => this.setMapID(optionID)}\r\n                        />\r\n                    );\r\n                }\r\n\r\n                if (this.state.combatSetup.mapID) {\r\n                    const map = folio.maps.find(m => m.id === this.state.combatSetup.mapID);\r\n                    if (map) {\r\n                        thumbnailSection = (\r\n                            <MapPanel\r\n                                map={map}\r\n                                mode='thumbnail'\r\n                            />\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='heading'>map</div>\r\n                <Dropdown\r\n                    options={folioOptions}\r\n                    placeholder='select map folio...'\r\n                    selectedID={this.state.combatSetup.folioID ? this.state.combatSetup.folioID : undefined}\r\n                    select={optionID => this.setFolioID(optionID)}\r\n                />\r\n                {selectMapSection}\r\n                {thumbnailSection}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getWaveSection() {\r\n        if (this.state.combatSetup.encounterID === null) {\r\n            return (\r\n                <div className='section'>you have not selected an encounter</div>\r\n            );\r\n        }\r\n\r\n        const selectedEncounter = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n        if (selectedEncounter) {\r\n            if (selectedEncounter.waves.length === 0) {\r\n                return (\r\n                    <div className='section'>you have not defined any waves</div>\r\n                );\r\n            }\r\n\r\n            const waveOptions = selectedEncounter.waves.map(wave => {\r\n                return {\r\n                    id: wave.id,\r\n                    text: wave.name || 'unnamed wave'\r\n                };\r\n            });\r\n\r\n            let waveContent = null;\r\n            if (this.state.combatSetup.waveID) {\r\n                const selectedWave = selectedEncounter.waves.find(w => w.id === this.state.combatSetup.waveID);\r\n                if (selectedWave) {\r\n                    const monsterSections = selectedWave.slots.map(slot => {\r\n                        let name = slot.monsterName || 'unnamed monster';\r\n                        if (slot.count > 1) {\r\n                            name += ' (x' + slot.count + ')';\r\n                        }\r\n                        return (\r\n                            <li key={slot.id}>{name}</li>\r\n                        );\r\n                    });\r\n\r\n                    if (monsterSections.length === 0) {\r\n                        monsterSections.push(\r\n                            <li key={'empty'}>no monsters</li>\r\n                        );\r\n                    }\r\n\r\n                    waveContent = (\r\n                        <div>\r\n                            <div className='subheading'>monsters</div>\r\n                            <ul>{monsterSections}</ul>\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n\r\n            return (\r\n                <div>\r\n                    <div className='heading'>wave</div>\r\n                    <Dropdown\r\n                        options={waveOptions}\r\n                        placeholder='select wave...'\r\n                        selectedID={this.state.combatSetup.waveID ? this.state.combatSetup.waveID : undefined}\r\n                        select={optionID => this.setWave(optionID)}\r\n                    />\r\n                    {waveContent}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private getDifficultySection() {\r\n        const party = this.props.parties.find(p => p.id === this.state.combatSetup.partyID);\r\n        const encounter = this.props.encounters.find(enc => enc.id === this.state.combatSetup.encounterID);\r\n\r\n        if (party && encounter) {\r\n            return (\r\n                <div>\r\n                    <div className='heading'>encounter difficulty</div>\r\n                    <DifficultyChartPanel\r\n                        party={party}\r\n                        encounter={encounter}\r\n                        getMonster={(monsterName, monsterGroupName) => this.props.getMonster(monsterName, monsterGroupName)}\r\n                    />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='heading'>encounter difficulty</div>\r\n                <div className='section'>select a party and an encounter on the left to see difficulty information.</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getMonsterSection() {\r\n        if (this.state.combatSetup.encounterID === null) {\r\n            return (\r\n                <div>\r\n                    <div className='heading'>monsters</div>\r\n                    <div className='section'>select an encounter to see monster options here.</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (!this.props.parties && this.state.combatSetup.waveID === null) {\r\n            return (\r\n                <div>\r\n                    <div className='heading'>monsters</div>\r\n                    <div className='section'>select a wave to see monster options here.</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        const selectedEncounter = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n        if (selectedEncounter) {\r\n            let slotsContainer: { slots: EncounterSlot[] } = selectedEncounter;\r\n            if (this.state.combatSetup.waveID) {\r\n                const selectedWave = selectedEncounter.waves.find(w => w.id === this.state.combatSetup.waveID);\r\n                if (selectedWave) {\r\n                    slotsContainer = selectedWave;\r\n                }\r\n            }\r\n\r\n            if (slotsContainer.slots.length === 0) {\r\n                return null;\r\n            }\r\n\r\n            const initOptions = [\r\n                {\r\n                    id: 'manual',\r\n                    text: 'enter manually'\r\n                },\r\n                {\r\n                    id: 'individual',\r\n                    text: 'roll individually'\r\n                },\r\n                {\r\n                    id: 'group',\r\n                    text: 'roll in groups'\r\n                }\r\n            ];\r\n\r\n            const names = this.state.combatSetup.monsterNames.map(slotNames => {\r\n                const slot = slotsContainer.slots.find(s => s.id === slotNames.id);\r\n                if (slot) {\r\n                    const inputs = [];\r\n                    for (let n = 0; n !== slotNames.names.length; ++n) {\r\n                        inputs.push(\r\n                            <div key={n}>\r\n                                <MonsterName\r\n                                    value={slotNames.names[n]}\r\n                                    slotID={slot.id}\r\n                                    index={n}\r\n                                    changeName={(slotID, index, value) => this.changeName(slotID, index, value)}\r\n                                />\r\n                            </div>\r\n                        );\r\n                    }\r\n                    return (\r\n                        <div key={slotNames.id} className='name-row'>\r\n                            <div className='name-label'>\r\n                                {slot.monsterName}\r\n                            </div>\r\n                            <div className='name-inputs'>\r\n                                {inputs}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n            });\r\n\r\n            return (\r\n                <div>\r\n                    <div className='heading'>monsters</div>\r\n                    <div className='subheading'>initiative</div>\r\n                    <Selector\r\n                        options={initOptions}\r\n                        selectedID={this.state.combatSetup.encounterInitMode}\r\n                        select={optionID => this.setEncounterInitMode(optionID as 'manual' | 'individual' | 'group')}\r\n                    />\r\n                    <div className='subheading'>names</div>\r\n                    <div>{names}</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    public render() {\r\n        try {\r\n            let leftSection = null;\r\n            let rightSection = null;\r\n\r\n            if (this.props.parties) {\r\n                leftSection = (\r\n                    <div>\r\n                        {this.getPartySection()}\r\n                        {this.getEncounterSection()}\r\n                        {this.getMapSection()}\r\n                    </div>\r\n                );\r\n\r\n                rightSection = (\r\n                    <div>\r\n                        {this.getDifficultySection()}\r\n                        {this.getMonsterSection()}\r\n                    </div>\r\n                );\r\n            } else {\r\n                leftSection = (\r\n                    <div>\r\n                        {this.getWaveSection()}\r\n                    </div>\r\n                );\r\n\r\n                rightSection = (\r\n                    <div>\r\n                        {this.getMonsterSection()}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='row' style={{ height: '100%', margin: '0 -15px' }}>\r\n                    <div className='column small-6 medium-6 large-6 scrollable'>\r\n                        {leftSection}\r\n                    </div>\r\n                    <div className='column small-6 medium-6 large-6 scrollable'>\r\n                        {rightSection}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface MonsterNameProps {\r\n    slotID: string;\r\n    index: number;\r\n    value: string;\r\n    changeName: (slotID: string, index: number, value: string) => void;\r\n}\r\n\r\nclass MonsterName extends React.Component<MonsterNameProps> {\r\n    public render() {\r\n        return (\r\n            <input type='text' value={this.props.value} onChange={event => this.props.changeName(this.props.slotID, this.props.index, event.target.value)} />\r\n        );\r\n    }\r\n}\r\n","export interface Condition {\r\n    id: string;\r\n    name: string;\r\n    level: number;\r\n    text: string | null;\r\n    duration: ConditionDurationSaves | ConditionDurationCombatant | ConditionDurationRounds | null;\r\n}\r\n\r\nexport interface ConditionDurationSaves {\r\n    type: 'saves';\r\n    count: number;\r\n    saveType: 'str' | 'dex' | 'con' | 'int' | 'wis' | 'cha' | 'death';\r\n    saveDC: number;\r\n    point: 'start' | 'end';\r\n}\r\n\r\nexport interface ConditionDurationCombatant {\r\n    type: 'combatant';\r\n    point: 'start' | 'end';\r\n    combatantID: string | null;\r\n}\r\n\r\nexport interface ConditionDurationRounds {\r\n    type: 'rounds';\r\n    count: number;\r\n}\r\n\r\nexport const CONDITION_TYPES = [\r\n    'blinded',\r\n    'charmed',\r\n    'deafened',\r\n    'exhaustion',\r\n    'frightened',\r\n    'grappled',\r\n    'incapacitated',\r\n    'invisible',\r\n    'paralyzed',\r\n    'petrified',\r\n    'poisoned',\r\n    'prone',\r\n    'restrained',\r\n    'stunned',\r\n    'unconscious',\r\n    'custom'\r\n];\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    items: { id: string; text: string; details: JSX.Element | string; disabled?: boolean }[];\r\n    selectedItemID: string | null;\r\n    select: (itemID: string) => void;\r\n}\r\n\r\nexport default class RadioGroup extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        // No default property values\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            const content = this.props.items.map(item => {\r\n                return (\r\n                    <RadioGroupItem\r\n                        key={item.id}\r\n                        item={item}\r\n                        selected={this.props.selectedItemID === item.id}\r\n                        select={(itemID: string) => this.props.select(itemID)}\r\n                    />\r\n                );\r\n            });\r\n\r\n            return (\r\n                <div className='radio-group'>\r\n                    {content}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface RadioGroupItemProps {\r\n    item: { id: string; text: string; details: JSX.Element | string; disabled?: boolean };\r\n    selected: boolean;\r\n    select: (itemID: string) => void;\r\n}\r\n\r\nclass RadioGroupItem extends React.Component<RadioGroupItemProps> {\r\n    public render() {\r\n        let style = 'radio-item';\r\n        let details = null;\r\n\r\n        if (this.props.selected) {\r\n            style += ' selected';\r\n            details = (\r\n                <div className='radio-item-details'>\r\n                    {this.props.item.details}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (this.props.item.disabled) {\r\n            style += ' disabled';\r\n        }\r\n\r\n        return (\r\n            <div className={style} onClick={() => this.props.select(this.props.item.id)}>\r\n                <div className='radio-item-text'>{this.props.item.text}</div>\r\n                {details}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Factory from '../../utils/factory';\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combat, Combatant } from '../../models/combat';\r\nimport { Condition, CONDITION_TYPES, ConditionDurationCombatant, ConditionDurationSaves } from '../../models/condition';\r\nimport { Monster } from '../../models/monster-group';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport RadioGroup from '../controls/radio-group';\r\nimport Selector from '../controls/selector';\r\nimport Spin from '../controls/spin';\r\n\r\ninterface Props {\r\n    condition: Condition;\r\n    combatant: Combatant & Monster;\r\n    combat: Combat;\r\n}\r\n\r\ninterface State {\r\n    condition: Condition;\r\n}\r\n\r\nexport default class ConditionModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            condition: props.condition\r\n        };\r\n    }\r\n\r\n    private setCondition(conditionName: string) {\r\n        // eslint-disable-next-line\r\n        this.state.condition.name = conditionName;\r\n        // eslint-disable-next-line\r\n        this.state.condition.level = 1;\r\n        // eslint-disable-next-line\r\n        this.state.condition.text = conditionName === 'custom' ? 'custom condition' : null;\r\n\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    private setDuration(durationType: 'saves' | 'combatant' | 'rounds') {\r\n        let duration = null;\r\n\r\n        switch (durationType) {\r\n            case 'saves':\r\n                duration = Factory.createConditionDurationSaves();\r\n                break;\r\n            case 'combatant':\r\n                duration = Factory.createConditionDurationCombatant();\r\n                duration.combatantID = this.props.combatant.id;\r\n                break;\r\n            case 'rounds':\r\n                duration = Factory.createConditionDurationRounds();\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        // eslint-disable-next-line\r\n        this.state.condition.duration = duration;\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    private changeValue(object: any, field: string, value: any) {\r\n        object[field] = value;\r\n\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    private nudgeValue(object: any, field: string, delta: number) {\r\n        let value = object[field] + delta;\r\n        if (field === 'level') {\r\n            value = Math.max(value, 1);\r\n            value = Math.min(value, 6);\r\n        }\r\n        if (field === 'count') {\r\n            value = Math.max(value, 1);\r\n        }\r\n        if (field === 'saveDC') {\r\n            value = Math.max(value, 0);\r\n        }\r\n        object[field] = value;\r\n\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const conditions = CONDITION_TYPES.map(condition => {\r\n                const controls = [];\r\n                const description = [];\r\n                if (condition === this.state.condition.name) {\r\n                    if (condition === 'custom') {\r\n                        controls.push(\r\n                            <input\r\n                                type='text'\r\n                                placeholder='custom condition'\r\n                                value={this.state.condition.text ? this.state.condition.text : ''}\r\n                                onChange={event => this.changeValue(this.state.condition, 'text', event.target.value)}\r\n                            />\r\n                        );\r\n                    }\r\n                    if (condition === 'exhaustion') {\r\n                        controls.push(\r\n                            <Spin\r\n                                key='exhaustion-spin'\r\n                                source={this.props.condition}\r\n                                name='level'\r\n                                label='exhaustion'\r\n                                nudgeValue={delta => this.nudgeValue(this.props.condition, 'level', delta)}\r\n                            />\r\n                        );\r\n                    }\r\n                    const text = Utils.conditionText(this.state.condition);\r\n                    for (let n = 0; n !== text.length; ++n) {\r\n                        description.push(<li key={n} className='section'>{text[n]}</li>);\r\n                    }\r\n                }\r\n\r\n                return {\r\n                    id: condition,\r\n                    text: condition,\r\n                    details: (\r\n                        <div key={condition}>\r\n                            {controls}\r\n                            <ul>\r\n                                {description}\r\n                            </ul>\r\n                        </div>\r\n                    ),\r\n                    disabled: this.props.combatant.conditionImmunities ? this.props.combatant.conditionImmunities.indexOf(condition) !== -1 : false\r\n                };\r\n            });\r\n\r\n            const saveOptions = ['str', 'dex', 'con', 'int', 'wis', 'cha', 'death'].map(c => ({ id: c, text: c }));\r\n            const pointOptions = [\r\n                {\r\n                    id: 'start',\r\n                    text: 'start of turn'\r\n                },\r\n                {\r\n                    id: 'end',\r\n                    text: 'end of turn'\r\n                }\r\n            ];\r\n            const combatantOptions = this.props.combat.combatants.map(c => ({ id: c.id, text: (c.displayName || c.name || 'unnamed monster') }));\r\n\r\n            const durations = [\r\n                {\r\n                    id: 'none',\r\n                    text: 'until removed (default)',\r\n                    details: (\r\n                        <div className='section'>\r\n                            <div>the condition persists until it is manually removed</div>\r\n                        </div>\r\n                    )\r\n                },\r\n                {\r\n                    id: 'saves',\r\n                    text: 'until a successful save',\r\n                    details: (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>number of saves required</div>\r\n                                <Spin\r\n                                    source={this.props.condition.duration}\r\n                                    name='count'\r\n                                    nudgeValue={delta => this.nudgeValue(this.props.condition.duration, 'count', delta)}\r\n                                />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>save dc</div>\r\n                                <Spin\r\n                                    source={this.props.condition.duration}\r\n                                    name='saveDC'\r\n                                    nudgeValue={delta => this.nudgeValue(this.props.condition.duration, 'saveDC', delta)}\r\n                                />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>type of save</div>\r\n                                <Selector\r\n                                    options={saveOptions}\r\n                                    selectedID={\r\n                                        (this.props.condition.duration as ConditionDurationSaves)\r\n                                        ? (this.props.condition.duration as ConditionDurationSaves).saveType\r\n                                        : null\r\n                                    }\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, 'saveType', optionID)}\r\n                                />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>make the save at the start or end of the turn</div>\r\n                                <Selector\r\n                                    options={pointOptions}\r\n                                    selectedID={\r\n                                        (this.props.condition.duration as ConditionDurationSaves)\r\n                                        ? (this.props.condition.duration as ConditionDurationSaves).point\r\n                                        : null\r\n                                    }\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, 'point', optionID)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                },\r\n                {\r\n                    id: 'combatant',\r\n                    text: 'until someone\\'s next turn',\r\n                    details: (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>combatant</div>\r\n                                <Dropdown\r\n                                    options={combatantOptions}\r\n                                    selectedID={\r\n                                        (this.props.condition.duration as ConditionDurationCombatant)\r\n                                        ? (this.props.condition.duration as ConditionDurationCombatant).combatantID || undefined\r\n                                        : undefined\r\n                                    }\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, 'combatantID', optionID)}\r\n                                />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>start or end of the turn</div>\r\n                                <Selector\r\n                                    options={pointOptions}\r\n                                    selectedID={\r\n                                        (this.props.condition.duration as ConditionDurationCombatant)\r\n                                        ? (this.props.condition.duration as ConditionDurationCombatant).point\r\n                                        : null\r\n                                    }\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, 'point', optionID)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                },\r\n                {\r\n                    id: 'rounds',\r\n                    text: 'for a number of rounds',\r\n                    details: (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>number of rounds</div>\r\n                                <Spin\r\n                                    source={this.props.condition.duration}\r\n                                    name='count'\r\n                                    nudgeValue={delta => this.nudgeValue(this.props.condition.duration, 'count', delta)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }\r\n            ];\r\n\r\n            return (\r\n                <div className='condition-modal'>\r\n                    <div className='row' style={{ height: '100%' }}>\r\n                        <div className='columns small-6 medium-6 large-6 scrollable'>\r\n                            <div className='heading'>condition</div>\r\n                            <RadioGroup\r\n                                items={conditions}\r\n                                selectedItemID={this.state.condition.name}\r\n                                select={itemID => this.setCondition(itemID)}\r\n                            />\r\n                        </div>\r\n                        <div className='columns small-6 medium-6 large-6 scrollable'>\r\n                            <div className='heading'>duration</div>\r\n                            <RadioGroup\r\n                                items={durations}\r\n                                selectedItemID={this.state.condition.duration ? this.state.condition.duration.type : 'none'}\r\n                                select={itemID => this.setDuration(itemID as 'saves' | 'combatant' | 'rounds')}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { CATEGORY_TYPES, Monster, MonsterGroup, SIZE_TYPES } from '../../models/monster-group';\r\n\r\nimport Selector from '../controls/selector';\r\n\r\ninterface Props {\r\n    library: MonsterGroup[];\r\n}\r\n\r\ninterface State {\r\n    chart: string;\r\n}\r\n\r\nexport default class DemographicsModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            chart: 'challenge'\r\n        };\r\n    }\r\n\r\n    private selectChart(chart: string) {\r\n        this.setState({\r\n            chart: chart\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let demographics = null;\r\n\r\n            const allMonsters: Monster[] = [];\r\n            this.props.library.forEach(group => group.monsters.forEach(monster => allMonsters.push(monster)));\r\n            if (allMonsters.length !== 0) {\r\n                const buckets: { value: any, title: string }[] = [];\r\n                let maxBucketSize = 0;\r\n                const monsters: { [key: string]: Monster[] } = {};\r\n\r\n                switch (this.state.chart) {\r\n                    case 'challenge':\r\n                        const challenges = [\r\n                            0, 0.125, 0.25, 0.5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30\r\n                        ];\r\n                        challenges.forEach(cr => {\r\n                            buckets.push({\r\n                                value: cr,\r\n                                title: 'challenge ' + Utils.challenge(cr)\r\n                            });\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const cr = bucket.value;\r\n                            monsters[cr.toString()] = allMonsters.filter(monster => monster.challenge === cr);\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const cr = bucket.value;\r\n                            maxBucketSize = Math.max(monsters[cr].length, maxBucketSize);\r\n                        });\r\n                        break;\r\n                    case 'size':\r\n                        SIZE_TYPES.forEach(size => {\r\n                            buckets.push({\r\n                                value: size,\r\n                                title: size\r\n                            });\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const size = bucket.value;\r\n                            monsters[size.toString()] = allMonsters.filter(monster => monster.size === size);\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const size = bucket.value;\r\n                            maxBucketSize = Math.max(monsters[size].length, maxBucketSize);\r\n                        });\r\n                        break;\r\n                    case 'type':\r\n                        CATEGORY_TYPES.forEach(type => {\r\n                            buckets.push({\r\n                                value: type,\r\n                                title: type\r\n                            });\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const type = bucket.value;\r\n                            monsters[type.toString()] = allMonsters.filter(monster => monster.category === type);\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const type = bucket.value;\r\n                            maxBucketSize = Math.max(monsters[type].length, maxBucketSize);\r\n                        });\r\n                        break;\r\n                    default:\r\n                        // Do nothing\r\n                        break;\r\n                }\r\n\r\n                const bars = [];\r\n                for (let index = 0; index !== buckets.length; ++index) {\r\n                    const bucket = buckets[index];\r\n                    const set = monsters[bucket.value];\r\n                    const count = set ? set.length : 0;\r\n                    bars.push(\r\n                        <div\r\n                            key={bucket.title}\r\n                            className='bar-container'\r\n                            title={bucket.title + ': ' + set.length + ' monsters'}\r\n                        >\r\n                            <div\r\n                                className='bar'\r\n                                style={{\r\n                                    width: 'calc((100% - 1px) * ' + count + ' / ' + maxBucketSize + ')'\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                const chartOptions = [\r\n                    {\r\n                        id: 'challenge',\r\n                        text: 'challenge rating'\r\n                    },\r\n                    {\r\n                        id: 'size',\r\n                        text: 'size'\r\n                    },\r\n                    {\r\n                        id: 'type',\r\n                        text: 'type'\r\n                    }\r\n                ];\r\n\r\n                demographics = (\r\n                    <div>\r\n                        <div className='heading'>monster demographics</div>\r\n                        <Selector\r\n                            options={chartOptions}\r\n                            selectedID={this.state.chart}\r\n                            select={optionID => this.selectChart(optionID)}\r\n                        />\r\n                        <div className='chart'>\r\n                            <div className='plot'>{bars}</div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return demographics;\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","export interface MapFolio {\r\n    id: string;\r\n    name: string;\r\n    maps: Map[];\r\n}\r\n\r\nexport interface Map {\r\n    id: string;\r\n    name: string;\r\n    items: MapItem[];\r\n}\r\n\r\nexport interface MapItem {\r\n    id: string;\r\n    type: 'tile' | 'pc' | 'monster';\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n    terrain: string | null;\r\n}\r\n\r\nexport const TERRAIN_TYPES = [\r\n    'cavern',\r\n    'dirt',\r\n    'flagstone',\r\n    'floorboard',\r\n    'grassland',\r\n    'pit',\r\n    'sand',\r\n    'snow',\r\n    'water'\r\n];\r\n","import React from 'react';\r\n\r\nimport { MapItem, TERRAIN_TYPES } from '../../models/map-folio';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport Radial from '../controls/radial';\r\n\r\ninterface Props {\r\n    tile: MapItem;\r\n    changeValue: (tile: MapItem, field: string, value: string) => void;\r\n    moveMapItem: (tile: MapItem, dir: string) => void;\r\n    resizeMapItem: (tile: MapItem, dir: string, dir2: 'in' | 'out' | null) => void;\r\n    cloneMapItem: (tile: MapItem) => void;\r\n    removeMapItem: (tile: MapItem) => void;\r\n}\r\n\r\nexport default class MapTileCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const terrainOptions = TERRAIN_TYPES.map(t => {\r\n                return { id: t, text: t };\r\n            });\r\n\r\n            return (\r\n                <div className='card map-tile'>\r\n                    <div className='heading'>\r\n                        <div className='title'>map tile</div>\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        <div className='subheading'>size</div>\r\n                        <div className='section'>{this.props.tile.width} sq x {this.props.tile.height} sq</div>\r\n                        <div className='section'>{this.props.tile.width * 5} ft x {this.props.tile.height * 5} ft</div>\r\n                        <div className='divider' />\r\n                        <div className='subheading'>terrain</div>\r\n                        <Dropdown\r\n                            options={terrainOptions}\r\n                            placeholder='select terrain'\r\n                            selectedID={this.props.tile.terrain ? this.props.tile.terrain : undefined}\r\n                            select={optionID => this.props.changeValue(this.props.tile, 'terrain', optionID)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <div className='subheading'>move</div>\r\n                        <div className='section centered'>\r\n                            <Radial direction='out' click={dir => this.props.moveMapItem(this.props.tile, dir)} />\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='subheading'>resize</div>\r\n                        <div className='section centered'>\r\n                            <Radial direction='both' click={(dir, dir2) => this.props.resizeMapItem(this.props.tile, dir, dir2)} />\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='section'>\r\n                            <button onClick={() => this.props.cloneMapItem(this.props.tile)}>clone tile</button>\r\n                            <button onClick={() => this.props.removeMapItem(this.props.tile)}>remove tile</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Factory from '../../utils/factory';\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Map, MapItem } from '../../models/map-folio';\r\n\r\nimport MapTileCard from '../cards/map-tile-card';\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    map: Map;\r\n}\r\n\r\ninterface State {\r\n    map: Map;\r\n    selectedTileID: string | null;\r\n}\r\n\r\nexport default class MapEditorModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            map: props.map,\r\n            selectedTileID: null\r\n        };\r\n    }\r\n\r\n    private setSelectedTileID(id: string | null) {\r\n        this.setState({\r\n            selectedTileID: id\r\n        });\r\n    }\r\n\r\n    private addMapTile(x: number, y: number) {\r\n        const tile = Factory.createMapItem();\r\n        tile.x = x;\r\n        tile.y = y;\r\n        tile.terrain = 'flagstone';\r\n        this.state.map.items.push(tile);\r\n\r\n        this.setState({\r\n            map: this.state.map,\r\n            selectedTileID: tile.id\r\n        });\r\n    }\r\n\r\n    private moveMapItem(item: MapItem, dir: string) {\r\n        switch (dir) {\r\n            case 'N':\r\n                item.y -= 1;\r\n                break;\r\n            case 'E':\r\n                item.x += 1;\r\n                break;\r\n            case 'S':\r\n                item.y += 1;\r\n                break;\r\n            case 'W':\r\n                item.x -= 1;\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    private bigMapItem(item: MapItem, dir: string) {\r\n        switch (dir) {\r\n            case 'N':\r\n                item.y -= 1;\r\n                item.height += 1;\r\n                break;\r\n            case 'E':\r\n                item.width += 1;\r\n                break;\r\n            case 'S':\r\n                item.height += 1;\r\n                break;\r\n            case 'W':\r\n                item.x -= 1;\r\n                item.width += 1;\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    private smallMapItem(item: MapItem, dir: string) {\r\n        switch (dir) {\r\n            case 'N':\r\n                if (item.height > 1) {\r\n                    item.y += 1;\r\n                    item.height -= 1;\r\n                }\r\n                break;\r\n            case 'E':\r\n                if (item.width > 1) {\r\n                    item.width -= 1;\r\n                }\r\n                break;\r\n            case 'S':\r\n                if (item.height > 1) {\r\n                    item.height -= 1;\r\n                }\r\n                break;\r\n            case 'W':\r\n                if (item.width > 1) {\r\n                    item.x += 1;\r\n                    item.width -= 1;\r\n                }\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    private resizeMapItem(item: MapItem, dir: string, dir2: 'in' | 'out') {\r\n        switch (dir2) {\r\n            case 'in':\r\n                this.smallMapItem(item, dir);\r\n                break;\r\n            case 'out':\r\n                this.bigMapItem(item, dir);\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n    }\r\n\r\n    private cloneMapItem(item: MapItem) {\r\n        const copy = JSON.parse(JSON.stringify(item));\r\n        copy.id = Utils.guid();\r\n        copy.x += 1;\r\n        copy.y += 1;\r\n        this.state.map.items.push(copy);\r\n\r\n        this.setState({\r\n            map: this.state.map,\r\n            selectedTileID: copy.id\r\n        });\r\n    }\r\n\r\n    private removeMapItem(item: MapItem) {\r\n        const index = this.state.map.items.indexOf(item);\r\n        this.state.map.items.splice(index, 1);\r\n\r\n        this.setState({\r\n            map: this.state.map,\r\n            selectedTileID: null\r\n        });\r\n    }\r\n\r\n    private changeValue(source: any, field: string, value: any) {\r\n        source[field] = value;\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let tools = null;\r\n            if (this.state.selectedTileID) {\r\n                const item = this.state.map.items.find(i => i.id === this.state.selectedTileID);\r\n                if (item) {\r\n                    tools = (\r\n                        <div className='tools'>\r\n                            <MapTileCard\r\n                                tile={item}\r\n                                moveMapItem={(mapItem, dir) => this.moveMapItem(mapItem, dir)}\r\n                                resizeMapItem={(mapItem, dir, dir2) => this.resizeMapItem(mapItem, dir, dir2 as 'in' | 'out')}\r\n                                cloneMapItem={mapItem => this.cloneMapItem(mapItem)}\r\n                                removeMapItem={mapItem => this.removeMapItem(mapItem)}\r\n                                changeValue={(source, field, value) => this.changeValue(source, field, value)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                }\r\n            } else {\r\n                tools = (\r\n                    <div className='tools'>\r\n                        <p>to add a new tile to the map, double-click on an empty grid square</p>\r\n                        <p>to edit an existing tile, click on it once to select it</p>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='map-editor'>\r\n                    {tools}\r\n                    <MapPanel\r\n                        map={this.state.map}\r\n                        mode='edit'\r\n                        selectedItemID={this.state.selectedTileID ? this.state.selectedTileID : undefined}\r\n                        setSelectedItemID={id => this.setSelectedTileID(id)}\r\n                        addMapTile={(x, y) => this.addMapTile(x, y)}\r\n                    />\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Factory from '../../utils/factory';\r\nimport Frankenstein from '../../utils/frankenstein';\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { CATEGORY_TYPES, Monster, MonsterGroup, SIZE_TYPES, Trait, TRAIT_TYPES } from '../../models/monster-group';\r\n\r\nimport MonsterCard from '../cards/monster-card';\r\nimport Checkbox from '../controls/checkbox';\r\nimport Dropdown from '../controls/dropdown';\r\nimport Selector from '../controls/selector';\r\nimport Spin from '../controls/spin';\r\nimport AbilityScorePanel from '../panels/ability-score-panel';\r\nimport TraitsPanel from '../panels/traits-panel';\r\n\r\nimport arrow from '../../resources/images/down-arrow.svg';\r\n\r\ninterface Props {\r\n    monster: Monster;\r\n    library: MonsterGroup[];\r\n    showMonsters: boolean;\r\n}\r\n\r\ninterface State {\r\n    monster: Monster;\r\n    page: 'overview' | 'abilities' | 'cbt-stats' | 'actions';\r\n    showFilter: boolean;\r\n    helpSection: string;\r\n    filter: {\r\n        size: boolean,\r\n        type: boolean,\r\n        subtype: boolean,\r\n        alignment: boolean,\r\n        challenge: boolean,\r\n        text: string\r\n    };\r\n}\r\n\r\nexport default class MonsterEditorModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            monster: props.monster,\r\n            page: 'overview',\r\n            showFilter: false,\r\n            helpSection: 'speed',\r\n            filter: {\r\n                size: true,\r\n                type: true,\r\n                subtype: false,\r\n                alignment: false,\r\n                challenge: true,\r\n                text: ''\r\n            }\r\n        };\r\n    }\r\n\r\n    private setPage(page: 'overview' | 'abilities' | 'cbt-stats' | 'actions') {\r\n        const sections = this.getHelpOptionsForPage(page);\r\n        this.setState({\r\n            page: page,\r\n            helpSection: sections[0]\r\n        });\r\n    }\r\n\r\n    private toggleFilter() {\r\n        this.setState({\r\n            showFilter: !this.state.showFilter\r\n        });\r\n    }\r\n\r\n    private setHelpSection(section: string) {\r\n        this.setState({\r\n            helpSection: section\r\n        });\r\n    }\r\n\r\n    private toggleMatch(type: 'size' | 'type' | 'subtype' | 'alignment' | 'challenge') {\r\n        // eslint-disable-next-line\r\n        this.state.filter[type] = !this.state.filter[type];\r\n        this.setState({\r\n            filter: this.state.filter\r\n        });\r\n    }\r\n\r\n    private setFilterText(value: string) {\r\n        // eslint-disable-next-line\r\n        this.state.filter.text = value;\r\n        this.setState({\r\n            filter: this.state.filter\r\n        });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Helper methods\r\n\r\n    private getHelpOptionsForPage(page: 'overview' | 'abilities' | 'cbt-stats' | 'actions') {\r\n        switch (page) {\r\n            case 'overview':\r\n                return ['speed', 'senses', 'languages', 'equipment'];\r\n            case 'abilities':\r\n                return ['str', 'dex', 'con', 'int', 'wis', 'cha', 'saves', 'skills'];\r\n            case 'cbt-stats':\r\n                return ['armor class', 'hit dice', 'resistances', 'vulnerabilities', 'immunities', 'conditions'];\r\n            case 'actions':\r\n                return ['actions'];\r\n            default:\r\n                return [];\r\n        }\r\n    }\r\n\r\n    private getMonsters() {\r\n        const monsters: Monster[] = [];\r\n        this.props.library.forEach(group => {\r\n            group.monsters.forEach(monster => {\r\n                let match = true;\r\n\r\n                if (this.state.monster.id === monster.id) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.filter.size && (this.state.monster.size !== monster.size)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.filter.type && (this.state.monster.category !== monster.category)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.filter.subtype && (this.state.monster.tag !== monster.tag)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.filter.alignment && (this.state.monster.alignment !== monster.alignment)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.filter.challenge && (this.state.monster.challenge !== monster.challenge)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (match) {\r\n                    monsters.push(monster);\r\n                }\r\n            });\r\n        });\r\n\r\n        return monsters;\r\n    }\r\n\r\n    private setRandomValue(field: string, monsters: Monster[]) {\r\n        Frankenstein.setRandomValue(this.state.monster, field, monsters);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private spliceMonsters(monsters: Monster[]) {\r\n        Frankenstein.spliceMonsters(this.state.monster, monsters);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private addTrait(type: 'trait' | 'action' | 'legendary' | 'lair' | 'regional') {\r\n        Frankenstein.addTrait(this.state.monster, type);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private addRandomTrait(type: string, monsters: Monster[]) {\r\n        Frankenstein.addRandomTrait(this.state.monster, type, monsters);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private removeTrait(trait: Trait) {\r\n        Frankenstein.removeTrait(this.state.monster, trait);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private swapTraits(t1: Trait, t2: Trait) {\r\n        Frankenstein.swapTraits(this.state.monster, t1, t2);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private copyTrait(trait: Trait) {\r\n        Frankenstein.copyTrait(this.state.monster, trait);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private changeTrait(trait: Trait, field: string, value: any) {\r\n        (trait as any)[field] = value;\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private nudgeValue(field: string, delta: number) {\r\n        Frankenstein.nudgeValue(this.state.monster, field, delta);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private changeValue(field: string, value: any) {\r\n        Frankenstein.changeValue(this.state.monster, field, value);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // HTML render methods\r\n\r\n    private getHelpSection(monsters: Monster[]) {\r\n        switch (this.state.helpSection) {\r\n            case 'speed':\r\n                return this.getValueSection('speed', 'text', monsters);\r\n            case 'senses':\r\n                return this.getValueSection('senses', 'text', monsters);\r\n            case 'languages':\r\n                return this.getValueSection('languages', 'text', monsters);\r\n            case 'equipment':\r\n                return this.getValueSection('equipment', 'text', monsters);\r\n            case 'str':\r\n                return this.getValueSection('abilityScores.str', 'number', monsters);\r\n            case 'dex':\r\n                return this.getValueSection('abilityScores.dex', 'number', monsters);\r\n            case 'con':\r\n                return this.getValueSection('abilityScores.con', 'number', monsters);\r\n            case 'int':\r\n                return this.getValueSection('abilityScores.int', 'number', monsters);\r\n            case 'wis':\r\n                return this.getValueSection('abilityScores.wis', 'number', monsters);\r\n            case 'cha':\r\n                return this.getValueSection('abilityScores.cha', 'number', monsters);\r\n            case 'saves':\r\n                return this.getValueSection('savingThrows', 'text', monsters);\r\n            case 'skills':\r\n                return this.getValueSection('skills', 'text', monsters);\r\n            case 'armor class':\r\n                return this.getValueSection('ac', 'number', monsters);\r\n            case 'hit dice':\r\n                return this.getValueSection('hitDice', 'number', monsters);\r\n            case 'resistances':\r\n                return this.getValueSection('damage.resist', 'text', monsters);\r\n            case 'vulnerabilities':\r\n                return this.getValueSection('damage.vulnerable', 'text', monsters);\r\n            case 'immunities':\r\n                return this.getValueSection('damage.immune', 'text', monsters);\r\n            case 'conditions':\r\n                return this.getValueSection('conditionImmunities', 'text', monsters);\r\n            case 'actions':\r\n                return this.getActionsSection(monsters);\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    private getValueSection(field: string, dataType: 'text' | 'number', monsters: Monster[]) {\r\n        const values: any[] = monsters\r\n            .map(m => {\r\n                const tokens = field.split('.');\r\n                let source: any = m;\r\n                let value = null;\r\n                tokens.forEach(token => {\r\n                    if (token === tokens[tokens.length - 1]) {\r\n                        value = source[token];\r\n                    } else {\r\n                        source = source[token];\r\n                    }\r\n                });\r\n                if ((dataType === 'text') && (value === '')) {\r\n                    value = null;\r\n                }\r\n                return value;\r\n            })\r\n            .filter(v => v !== null);\r\n\r\n        const distinct: { value: any, count: number }[] = [];\r\n        if (dataType === 'number') {\r\n            let min: number | null = null;\r\n            let max: number | null = null;\r\n            values.forEach(v => {\r\n                if ((min === null) || (v < min)) {\r\n                    min = v;\r\n                }\r\n                if ((max === null) || (v > max)) {\r\n                    max = v;\r\n                }\r\n            });\r\n            if ((min !== null) && (max !== null)) {\r\n                for (let n = min; n <= max; ++n) {\r\n                    distinct.push({\r\n                        value: n,\r\n                        count: 0\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        values.forEach(v => {\r\n            const current = distinct.find(d => d.value === v);\r\n            if (current) {\r\n                current.count += 1;\r\n            } else {\r\n                distinct.push({\r\n                    value: v,\r\n                    count: 1\r\n                });\r\n            }\r\n        });\r\n\r\n        switch (dataType) {\r\n            case 'number':\r\n                Utils.sort(distinct, [{ field: 'value', dir: 'asc' }]);\r\n                break;\r\n            case 'text':\r\n                Utils.sort(distinct, [{ field: 'count', dir: 'desc' }, { field: 'value', dir: 'asc' }]);\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        if (dataType === 'text') {\r\n            const count = monsters.length - values.length;\r\n            if (count !== 0) {\r\n                distinct.push({\r\n                    value: '',\r\n                    count: monsters.length - values.length\r\n                });\r\n            }\r\n        }\r\n\r\n        const valueSections = distinct.map(d => {\r\n            const width = 100 * d.count / monsters.length;\r\n            return (\r\n                <div className='row small-up-3 medium-up-3 large-up-3 value-list' key={distinct.indexOf(d)}>\r\n                    <div className='column'>\r\n                        <div className='text-container'>\r\n                            {d.value || '(none specified)'}\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <div className='bar-container'>\r\n                            <div className='bar' style={{ width: width + '%' }} />\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <button onClick={() => this.changeValue(field, d.value)}>use this value</button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                {valueSections}\r\n                <button onClick={() => this.setRandomValue(field, monsters)}>select random value</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getActionsSection(monsters: Monster[]) {\r\n        const rows = [];\r\n        rows.push(\r\n            <div className='row small-up-4 medium-up-4 large-up-4 value-list' key='header'>\r\n                <div className='column'>\r\n                    <div className='text-container'>\r\n                        <b>type</b>\r\n                    </div>\r\n                </div>\r\n                <div className='column'>\r\n                    <div className='text-container number'>\r\n                        <b>average number</b>\r\n                    </div>\r\n                </div>\r\n                <div className='column'>\r\n                    <div className='text-container number'>\r\n                        <b>min - max</b>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        TRAIT_TYPES.forEach(type => {\r\n            let min: number | null = null;\r\n            let max: number | null = null;\r\n            let count = 0;\r\n            monsters.forEach(m => {\r\n                const n = m.traits.filter(t => t.type === type).length;\r\n                if ((min === null) || (n < min)) {\r\n                    min = n;\r\n                }\r\n                if ((max === null) || (n > max)) {\r\n                    max = n;\r\n                }\r\n                count += n;\r\n            });\r\n            const avg = Math.round(count / monsters.length);\r\n\r\n            rows.push(\r\n                <div className='row small-up-4 medium-up-4 large-up-4 value-list' key={type}>\r\n                    <div className='column'>\r\n                        <div className={count === 0 ? 'text-container disabled' : 'text-container'}>\r\n                            {Utils.traitType(type, true)}\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <div className={count === 0 ? 'text-container number disabled' : 'text-container number'}>\r\n                            {avg}\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <div className={count === 0 ? 'text-container number disabled' : 'text-container number'}>\r\n                            {min} - {max}\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <button className={count === 0 ? 'disabled' : ''} onClick={() => this.addRandomTrait(type, monsters)}>add random</button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                {rows}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getFilterCard(monsters: Monster[]) {\r\n        const criteria: string[] = [];\r\n        if (this.state.filter.size) {\r\n            criteria.push('size');\r\n        }\r\n        if (this.state.filter.type) {\r\n            criteria.push('type');\r\n        }\r\n        if (this.state.filter.subtype) {\r\n            criteria.push('subtype');\r\n        }\r\n        if (this.state.filter.alignment) {\r\n            criteria.push('alignment');\r\n        }\r\n        if (this.state.filter.challenge) {\r\n            criteria.push('challenge rating');\r\n        }\r\n        const criteriaText = (criteria.length > 0) ? 'based on ' + criteria.join(', ') : 'no criteria specified';\r\n        const similar = (\r\n            <div className='section'>\r\n                {monsters.length} similar monsters ({criteriaText})\r\n            </div>\r\n        );\r\n\r\n        let filterContent = null;\r\n        if (this.state.showFilter) {\r\n            filterContent = (\r\n                <div>\r\n                    <Checkbox\r\n                        label={'size ' + this.state.monster.size}\r\n                        checked={this.state.filter.size}\r\n                        changeValue={value => this.toggleMatch('size')}\r\n                    />\r\n                    <Checkbox\r\n                        label={'type ' + this.state.monster.category}\r\n                        checked={this.state.filter.type}\r\n                        changeValue={value => this.toggleMatch('type')}\r\n                    />\r\n                    <Checkbox\r\n                        label={this.state.monster.tag ? 'subtype ' + this.state.monster.tag : 'subtype'}\r\n                        checked={this.state.filter.subtype}\r\n                        disabled={!this.state.monster.tag}\r\n                        changeValue={value => this.toggleMatch('subtype')}\r\n                    />\r\n                    <Checkbox\r\n                        label={this.state.monster.alignment ? 'alignment ' + this.state.monster.alignment : 'alignment'}\r\n                        checked={this.state.filter.alignment}\r\n                        disabled={!this.state.monster.alignment}\r\n                        changeValue={value => this.toggleMatch('alignment')}\r\n                    />\r\n                    <Checkbox\r\n                        label={'challenge rating ' + Utils.challenge(this.state.monster.challenge)}\r\n                        checked={this.state.filter.challenge}\r\n                        changeValue={value => this.toggleMatch('challenge')}\r\n                    />\r\n                    <div className='divider' />\r\n                    <button className={monsters.length < 2 ? 'disabled' : ''} onClick={() => this.spliceMonsters(monsters)}>build random monster</button>\r\n                    <div className='divider' />\r\n                    {similar}\r\n                </div>\r\n            );\r\n        } else {\r\n            filterContent = (\r\n                <div>\r\n                    {similar}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className='section'>\r\n                <div className='card'>\r\n                    <div className='heading'>\r\n                        <div className='title'>similar monsters</div>\r\n                        <img className={this.state.showFilter ? 'image rotate' : 'image'} src={arrow} alt='arrow' onClick={() => this.toggleFilter()} />\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        {filterContent}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getMonsterCards(monsters: Monster[]) {\r\n        const sorted = Utils.sort(monsters);\r\n        const monsterCards = sorted.map(m => {\r\n            const showMonster = m.traits.some((t: Trait) => Utils.match(this.state.filter.text, t.name));\r\n            if (showMonster) {\r\n                return (\r\n                    <div className='section' key={m.id}>\r\n                        <MonsterCard\r\n                            combatant={m}\r\n                            mode={'template ' + this.state.page}\r\n                            filter={this.state.filter.text}\r\n                            copyTrait={trait => this.copyTrait(trait)}\r\n                        />\r\n                    </div>\r\n                );\r\n            } else {\r\n                return null;\r\n            }\r\n        }).filter(m => !!m);\r\n\r\n        return monsterCards;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    public render() {\r\n        try {\r\n            const pages = [\r\n                {\r\n                    id: 'overview',\r\n                    text: 'overview'\r\n                },\r\n                {\r\n                    id: 'abilities',\r\n                    text: 'abilities'\r\n                },\r\n                {\r\n                    id: 'cbt-stats',\r\n                    text: 'combat'\r\n                },\r\n                {\r\n                    id: 'actions',\r\n                    text: 'actions'\r\n                }\r\n            ];\r\n\r\n            let monsters: Monster[] = [];\r\n            if (this.props.showMonsters) {\r\n                monsters = this.getMonsters();\r\n            }\r\n\r\n            let content = null;\r\n            switch (this.state.page) {\r\n                case 'overview':\r\n                    const catOptions = CATEGORY_TYPES.map(cat => ({ id: cat, text: cat }));\r\n                    const sizeOptions = SIZE_TYPES.map(size => ({ id: size, text: size }));\r\n\r\n                    content = (\r\n                        <div className='row'>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>name</div>\r\n                                <input type='text' value={this.state.monster.name} onChange={event => this.changeValue('name', event.target.value)} />\r\n                                <div className='subheading'>size</div>\r\n                                <Dropdown\r\n                                    options={sizeOptions}\r\n                                    selectedID={this.state.monster.size}\r\n                                    select={optionID => this.changeValue('size', optionID)}\r\n                                />\r\n                                <div className='subheading'>type</div>\r\n                                <Dropdown\r\n                                    options={catOptions}\r\n                                    selectedID={this.state.monster.category}\r\n                                    select={optionID => this.changeValue('category', optionID)}\r\n                                />\r\n                                <div className='subheading'>subtype</div>\r\n                                <input type='text' value={this.state.monster.tag} onChange={event => this.changeValue('tag', event.target.value)} />\r\n                                <div className='subheading'>alignment</div>\r\n                                <input type='text' value={this.state.monster.alignment} onChange={event => this.changeValue('alignment', event.target.value)} />\r\n                            </div>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>challenge rating</div>\r\n                                <Spin\r\n                                    source={this.state.monster}\r\n                                    name='challenge'\r\n                                    display={value => Utils.challenge(value)}\r\n                                    nudgeValue={delta => this.nudgeValue('challenge', delta)}\r\n                                />\r\n                                <div className='subheading'>speed</div>\r\n                                <input type='text' value={this.state.monster.speed} onChange={event => this.changeValue('speed', event.target.value)} />\r\n                                <div className='subheading'>senses</div>\r\n                                <input type='text' value={this.state.monster.senses} onChange={event => this.changeValue('senses', event.target.value)} />\r\n                                <div className='subheading'>languages</div>\r\n                                <input type='text' value={this.state.monster.languages} onChange={event => this.changeValue('languages', event.target.value)} />\r\n                                <div className='subheading'>equipment</div>\r\n                                <input type='text' value={this.state.monster.equipment} onChange={event => this.changeValue('equipment', event.target.value)} />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                    break;\r\n                case 'abilities':\r\n                    content = (\r\n                        <div className='row'>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>ability scores</div>\r\n                                <AbilityScorePanel\r\n                                    edit={true}\r\n                                    combatant={this.state.monster}\r\n                                    nudgeValue={(source, type, delta) => this.nudgeValue(type, delta)}\r\n                                />\r\n                            </div>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>saving throws</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.savingThrows}\r\n                                    onChange={event => this.changeValue('savingThrows', event.target.value)}\r\n                                />\r\n                                <div className='subheading'>skills</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.skills}\r\n                                    onChange={event => this.changeValue('skills', event.target.value)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                    break;\r\n                case 'cbt-stats':\r\n                    content = (\r\n                        <div className='row'>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>armor class</div>\r\n                                <Spin\r\n                                    source={this.state.monster}\r\n                                    name='ac'\r\n                                    nudgeValue={delta => this.nudgeValue('ac', delta)}\r\n                                />\r\n                                <div className='subheading'>hit dice</div>\r\n                                <Spin\r\n                                    source={this.state.monster}\r\n                                    name='hitDice'\r\n                                    display={value => value + 'd' + Utils.hitDieType(this.state.monster.size)}\r\n                                    nudgeValue={delta => this.nudgeValue('hitDice', delta)}\r\n                                />\r\n                                <div className='subheading'>hit points</div>\r\n                                <div className='hp-value'>{this.state.monster.hpMax} hp</div>\r\n                            </div>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>damage resistances</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.damage.resist}\r\n                                    onChange={event => this.changeValue('damage.resist', event.target.value)}\r\n                                />\r\n                                <div className='subheading'>damage vulnerabilities</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.damage.vulnerable}\r\n                                    onChange={event => this.changeValue('damage.vulnerable', event.target.value)}\r\n                                />\r\n                                <div className='subheading'>damage immunities</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.damage.immune}\r\n                                    onChange={event => this.changeValue('damage.immune', event.target.value)}\r\n                                />\r\n                                <div className='subheading'>condition immunities</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.conditionImmunities}\r\n                                    onChange={event => this.changeValue('conditionImmunities', event.target.value)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                    break;\r\n                case 'actions':\r\n                    content = (\r\n                        <TraitsPanel\r\n                            combatant={this.state.monster}\r\n                            mode='edit'\r\n                            addTrait={type => this.addTrait(type)}\r\n                            removeTrait={trait => this.removeTrait(trait)}\r\n                            swapTraits={(t1, t2) => this.swapTraits(t1, t2)}\r\n                            changeValue={(trait, type, value) => this.changeTrait(trait, type, value)}\r\n                        />\r\n                    );\r\n                    break;\r\n                default:\r\n                    // Do nothing\r\n                    break;\r\n            }\r\n\r\n            let help = null;\r\n            if (this.props.showMonsters && (monsters.length > 1)) {\r\n                let selector = null;\r\n                if (this.getHelpOptionsForPage(this.state.page).length > 1) {\r\n                    const options = this.getHelpOptionsForPage(this.state.page).map(s => {\r\n                        return {\r\n                            id: s,\r\n                            text: s\r\n                        };\r\n                    });\r\n                    selector = (\r\n                        <Selector\r\n                            tabs={false}\r\n                            options={options}\r\n                            selectedID={this.state.helpSection}\r\n                            select={optionID => this.setHelpSection(optionID)}\r\n                        />\r\n                    );\r\n                }\r\n\r\n                help = (\r\n                    <div className='monster-help'>\r\n                        <div className='divider' />\r\n                        <div className='subheading'>information from similar monsters</div>\r\n                        {selector}\r\n                        {this.getHelpSection(monsters)}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            let monsterList = null;\r\n            if (this.props.showMonsters) {\r\n                let searchBox = null;\r\n                if ((this.state.page === 'actions') && (monsters.length > 0)) {\r\n                    searchBox = (\r\n                        <input\r\n                            type='text'\r\n                            placeholder='search for traits and actions'\r\n                            value={this.state.filter.text}\r\n                            onChange={event => this.setFilterText(event.target.value)}\r\n                        />\r\n                    );\r\n                }\r\n                monsterList = (\r\n                    <div className='columns small-4 medium-4 large-4 scrollable list-column'>\r\n                        {this.getFilterCard(monsters)}\r\n                        {searchBox}\r\n                        {this.getMonsterCards(monsters)}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='row' style={{ height: '100%', margin: '0 -15px' }}>\r\n                    <div\r\n                        className={\r\n                            this.props.showMonsters\r\n                            ? 'columns small-8 medium-8 large-8 scrollable'\r\n                            : 'columns small-12 medium-12 large-12 scrollable'\r\n                        }\r\n                        style={{ transition: 'none' }}\r\n                    >\r\n                        <div className='section'>\r\n                            <Selector\r\n                                tabs={true}\r\n                                options={pages}\r\n                                selectedID={this.state.page}\r\n                                select={optionID => this.setPage(optionID as 'overview' | 'abilities' | 'cbt-stats' | 'actions')}\r\n                            />\r\n                            {content}\r\n                            {help}\r\n                        </div>\r\n                    </div>\r\n                    {monsterList}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Encounter } from '../../models/encounter';\r\nimport { MonsterGroup } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\ninterface Props {\r\n    view: string;\r\n    blur: boolean;\r\n    library: MonsterGroup[];\r\n    parties: Party[];\r\n    encounters: Encounter[];\r\n    setView: (view: string) => void;\r\n}\r\n\r\nexport default class Navbar extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const partiesStyle = this.props.view === 'parties' ? 'navigator-item selected' : 'navigator-item';\r\n            const libraryStyle = this.props.view === 'library' ? 'navigator-item selected' : 'navigator-item';\r\n            let encounterStyle = this.props.view === 'encounter' ? 'navigator-item selected' : 'navigator-item';\r\n            const mapStyle = this.props.view === 'maps' ? 'navigator-item selected' : 'navigator-item';\r\n            let combatStyle = this.props.view === 'combat' ? 'navigator-item selected' : 'navigator-item';\r\n\r\n            const encountersEnabled = this.props.library.length !== 0;\r\n            const combatEnabled = (this.props.parties.length !== 0) && (this.props.encounters.length !== 0);\r\n            if (!encountersEnabled) {\r\n                encounterStyle += ' disabled';\r\n            }\r\n            if (!combatEnabled) {\r\n                combatStyle += ' disabled';\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.blur ? 'navbar blur' : 'navbar'}>\r\n                    <div className={partiesStyle} onClick={() => this.props.setView('parties')}>player characters</div>\r\n                    <div className={libraryStyle} onClick={() => this.props.setView('library')}>monster library</div>\r\n                    <div className={encounterStyle} onClick={() => encountersEnabled ? this.props.setView('encounter') : null}>encounter builder</div>\r\n                    <div className={mapStyle} onClick={() => this.props.setView('maps')}>map folios</div>\r\n                    <div className={combatStyle} onClick={() => combatEnabled ? this.props.setView('combat') : null}>combat manager</div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport cog from '../../resources/images/settings.svg';\r\n\r\ninterface Props {\r\n    actions: JSX.Element | null;\r\n    blur: boolean;\r\n    openHome: () => void;\r\n    openAbout: () => void;\r\n}\r\n\r\nexport default class Titlebar extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div className={this.props.blur ? 'titlebar blur' : 'titlebar'}>\r\n                    <div className='app-name' onClick={() => this.props.openHome()}>dojo</div>\r\n                    {this.props.actions}\r\n                    <img className='settings-icon' src={cog} title='about' alt='about' onClick={() => this.props.openAbout()} />\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Frankenstein from '../../utils/frankenstein';\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Monster, MonsterGroup } from '../../models/monster-group';\r\n\r\nimport FilterCard from '../cards/filter-card';\r\nimport MonsterCard from '../cards/monster-card';\r\nimport Note from '../panels/note';\r\n\r\ninterface Props {\r\n    monster: Monster;\r\n    library: MonsterGroup[];\r\n}\r\n\r\ninterface State {\r\n    monster: Monster;\r\n    filter: {\r\n        name: string,\r\n        challengeMin: number;\r\n        challengeMax: number;\r\n        category: string;\r\n        size: string;\r\n    };\r\n    selectedMonsters: Monster[];\r\n}\r\n\r\nexport default class RandomMonsterModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            monster: this.props.monster,\r\n            filter: {\r\n                name: '',\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: 'all types',\r\n                size: 'all sizes'\r\n            },\r\n            selectedMonsters: []\r\n        };\r\n    }\r\n\r\n    private generateMonster() {\r\n        Frankenstein.spliceMonsters(this.state.monster, this.state.selectedMonsters);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private changeFilterValue(type: 'name' | 'challengeMin' | 'challengeMax' | 'category' | 'size', value: any) {\r\n        // eslint-disable-next-line\r\n        this.state.filter[type] = value;\r\n        this.setState({\r\n            filter: this.state.filter\r\n        });\r\n    }\r\n\r\n    private nudgeFilterValue(type: 'challengeMin' | 'challengeMax', delta: number) {\r\n        const value = Utils.nudgeChallenge(this.state.filter[type], delta);\r\n        this.changeFilterValue(type, value);\r\n    }\r\n\r\n    private resetFilter() {\r\n        this.setState({\r\n            filter: {\r\n                name: '',\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: 'all types',\r\n                size: 'all sizes'\r\n            }\r\n        });\r\n    }\r\n\r\n    private matchMonster(monster: Monster) {\r\n        if (monster.challenge < this.state.filter.challengeMin) {\r\n            return false;\r\n        }\r\n\r\n        if (monster.challenge > this.state.filter.challengeMax) {\r\n            return false;\r\n        }\r\n\r\n        if (this.state.filter.name !== '') {\r\n            if (!Utils.match(this.state.filter.name, monster.name)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.filter.category !== 'all types') {\r\n            if (monster.category !== this.state.filter.category) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.filter.size !== 'all sizes') {\r\n            if (monster.size !== this.state.filter.size) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private selectMonster(monster: Monster) {\r\n        this.state.selectedMonsters.push(monster);\r\n        this.state.selectedMonsters.sort((a, b) => {\r\n            if (a.name < b.name) { return -1; }\r\n            if (a.name > b.name) { return 1; }\r\n            return 0;\r\n        });\r\n        this.setState({\r\n            selectedMonsters: this.state.selectedMonsters\r\n        });\r\n    }\r\n\r\n    private deselectMonster(monster: Monster) {\r\n        const index = this.state.selectedMonsters.indexOf(monster);\r\n        this.state.selectedMonsters.splice(index, 1);\r\n        this.setState({\r\n            selectedMonsters: this.state.selectedMonsters\r\n        });\r\n    }\r\n\r\n    private selectAll() {\r\n        this.props.library.forEach(group => {\r\n            group.monsters.forEach(monster => {\r\n                if (this.matchMonster(monster)) {\r\n                    this.state.selectedMonsters.push(monster);\r\n                }\r\n            });\r\n        });\r\n        this.state.selectedMonsters.sort((a, b) => {\r\n            if (a.name < b.name) { return -1; }\r\n            if (a.name > b.name) { return 1; }\r\n            return 0;\r\n        });\r\n        this.setState({\r\n            selectedMonsters: this.state.selectedMonsters\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const monsters: Monster[] = [];\r\n            this.props.library.forEach(group => {\r\n                group.monsters.forEach(monster => {\r\n                    if (this.matchMonster(monster)) {\r\n                        monsters.push(monster);\r\n                    }\r\n                });\r\n            });\r\n            monsters.sort((a, b) => {\r\n                if (a.name < b.name) { return -1; }\r\n                if (a.name > b.name) { return 1; }\r\n                return 0;\r\n            });\r\n            let allMonsters: JSX.Element | JSX.Element[] = monsters.filter(m => !this.state.selectedMonsters.includes(m)).map(m => {\r\n                return (\r\n                    <MonsterCard key={m.id} combatant={m} mode='view candidate' selectMonster={monster => this.selectMonster(monster)} />\r\n                );\r\n            });\r\n            if (allMonsters.length === 0) {\r\n                allMonsters = (\r\n                    <Note\r\n                        content={(\r\n                            <div className='section'>\r\n                                there are no monsters that match the above criteria (or you have already selected them all)\r\n                            </div>\r\n                        )}\r\n                    />\r\n                );\r\n            }\r\n\r\n            const selectedMonsters: JSX.Element | JSX.Element[] = this.state.selectedMonsters.map(m => {\r\n                return (\r\n                    <MonsterCard key={m.id} combatant={m} mode='view candidate selected' deselectMonster={monster => this.deselectMonster(monster)} />\r\n                );\r\n            });\r\n            let selectedMonstersInfo = null;\r\n            if (selectedMonsters.length < 2) {\r\n                selectedMonstersInfo = (\r\n                    <Note\r\n                        content={(\r\n                            <div>\r\n                                <div className='section'>\r\n                                    in order to generate a random monster, select at least two source monsters from the list on the left\r\n                                </div>\r\n                                <button onClick={() => this.selectAll()}>select all monsters</button>\r\n                            </div>\r\n                        )}\r\n                    />\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='random-monster-modal'>\r\n                    <div className='row' style={{ height: '100%' }}>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable'>\r\n                            <div className='heading'>all monsters</div>\r\n                            <FilterCard\r\n                                filter={this.state.filter}\r\n                                changeValue={(type, value) => this.changeFilterValue(type, value)}\r\n                                nudgeValue={(type, delta) => this.nudgeFilterValue(type, delta)}\r\n                                resetFilter={() => this.resetFilter()}\r\n                            />\r\n                            <div className='divider' />\r\n                            {allMonsters}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable'>\r\n                            <div className='heading'>selected monsters</div>\r\n                            <button\r\n                                className={this.state.selectedMonsters.length < 2 ? 'disabled' : ''}\r\n                                onClick={() => this.generateMonster()}\r\n                            >\r\n                                randomly generate monster\r\n                            </button>\r\n                            <div className='divider' />\r\n                            {selectedMonstersInfo}\r\n                            {selectedMonsters}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable'>\r\n                            <div className='heading'>output</div>\r\n                            <MonsterCard\r\n                                combatant={this.state.monster}\r\n                                mode='view generated'\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Factory from '../utils/factory';\r\nimport Frankenstein from '../utils/frankenstein';\r\nimport Utils from '../utils/utils';\r\n\r\nimport { Combat, Combatant, CombatSetup, Notification } from '../models/combat';\r\nimport { Condition } from '../models/condition';\r\nimport { Encounter, EncounterSlot, EncounterWave } from '../models/encounter';\r\nimport { Map, MapFolio } from '../models/map-folio';\r\nimport { Monster, MonsterGroup, Trait } from '../models/monster-group';\r\nimport { Party, PC } from '../models/party';\r\n\r\nimport CombatManagerScreen from './screens/combat-manager-screen';\r\nimport EncounterBuilderScreen from './screens/encounter-builder-screen';\r\nimport HomeScreen from './screens/home-screen';\r\nimport MapFoliosScreen from './screens/map-folios-screen';\r\nimport MonsterLibraryScreen from './screens/monster-library-screen';\r\nimport PartiesScreen from './screens/parties-screen';\r\n\r\nimport AboutModal from './modals/about-modal';\r\nimport CombatStartModal from './modals/combat-start-modal';\r\nimport ConditionModal from './modals/condition-modal';\r\nimport DemographicsModal from './modals/demographics-modal';\r\nimport MapEditorModal from './modals/map-editor-modal';\r\nimport MonsterEditorModal from './modals/monster-editor-modal';\r\n\r\nimport Navbar from './panels/navbar';\r\nimport Titlebar from './panels/titlebar';\r\n\r\nimport Checkbox from './controls/checkbox';\r\n\r\nimport close from '../resources/images/close-black.svg';\r\nimport RandomMonsterModal from './modals/random-monster-modal';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    // No props; this is the root component\r\n}\r\n\r\ninterface State {\r\n    view: string;\r\n    options: {\r\n        showHelp: boolean;\r\n    };\r\n\r\n    parties: Party[];\r\n    library: MonsterGroup[];\r\n    encounters: Encounter[];\r\n    mapFolios: MapFolio[];\r\n    combats: Combat[];\r\n\r\n    selectedPartyID: string | null;\r\n    selectedMonsterGroupID: string | null;\r\n    selectedEncounterID: string | null;\r\n    selectedMapFolioID: string | null;\r\n    selectedCombatID: string | null;\r\n\r\n    modal: any;\r\n\r\n    filter: string;\r\n}\r\n\r\nexport default class Dojo extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            view: 'home',\r\n            options: {\r\n                showHelp: true\r\n            },\r\n            parties: [],\r\n            library: [],\r\n            encounters: [],\r\n            mapFolios: [],\r\n            combats: [],\r\n            selectedPartyID: null,\r\n            selectedMonsterGroupID: null,\r\n            selectedEncounterID: null,\r\n            selectedMapFolioID: null,\r\n            selectedCombatID: null,\r\n            modal: null,\r\n            filter: ''\r\n        };\r\n\r\n        try {\r\n            let data: State | null = null;\r\n\r\n            try {\r\n                const json = window.localStorage.getItem('data');\r\n                if (json) {\r\n                    data = JSON.parse(json);\r\n                }\r\n            } catch (ex) {\r\n                console.error('Could not parse JSON: ', ex);\r\n                data = null;\r\n            }\r\n\r\n            if (data !== null) {\r\n                data.library.forEach(g => {\r\n                    g.monsters.forEach(m => {\r\n                        m.traits.forEach(t => {\r\n                            t.uses = 0;\r\n                        });\r\n                    });\r\n                });\r\n\r\n                data.encounters.forEach(enc => {\r\n                    if (!enc.waves) {\r\n                        enc.waves = [];\r\n                    }\r\n                });\r\n\r\n                if (!data.mapFolios) {\r\n                    data.mapFolios = [];\r\n                    data.selectedMapFolioID = null;\r\n                }\r\n\r\n                data.combats.forEach(combat => {\r\n                    if (!combat.notifications) {\r\n                        combat.notifications = [];\r\n                    }\r\n                    combat.combatants.forEach(c => {\r\n                        if (c.altitude === undefined) {\r\n                            c.altitude = 0;\r\n                        }\r\n\r\n                        if (c.type === 'monster') {\r\n                            const m = c as Combatant & Monster;\r\n                            m.traits.forEach(t => {\r\n                                if (t.uses === undefined) {\r\n                                    t.uses = 0;\r\n                                }\r\n                            });\r\n                        }\r\n                    });\r\n                });\r\n\r\n                data.view = 'home';\r\n                data.modal = null;\r\n                data.filter = '';\r\n\r\n                this.state = data;\r\n            }\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n\r\n    public componentDidUpdate() {\r\n        let json = null;\r\n        try {\r\n            json = JSON.stringify(this.state);\r\n        } catch (ex) {\r\n            console.error('Could not stringify data: ', ex);\r\n            json = null;\r\n        }\r\n\r\n        if (json !== null) {\r\n            window.localStorage.setItem('data', json);\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Party screen\r\n\r\n    private addParty() {\r\n        const party = Factory.createParty();\r\n        party.name = 'new party';\r\n        const parties: Party[] = ([] as Party[]).concat(this.state.parties, [party]);\r\n        Utils.sort(parties);\r\n        this.setState({\r\n            parties: parties,\r\n            selectedPartyID: party.id\r\n        });\r\n    }\r\n\r\n    private removeParty() {\r\n        const party = this.state.parties.find(p => p.id === this.state.selectedPartyID);\r\n        if (party) {\r\n            const index = this.state.parties.indexOf(party);\r\n            this.state.parties.splice(index, 1);\r\n            this.setState({\r\n                parties: this.state.parties,\r\n                selectedPartyID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private addPC() {\r\n        const party = this.state.parties.find(p => p.id === this.state.selectedPartyID);\r\n        if (party) {\r\n            const pc = Factory.createPC();\r\n            pc.name = 'new pc';\r\n            party.pcs.push(pc);\r\n            this.setState({\r\n                parties: this.state.parties\r\n            });\r\n        }\r\n    }\r\n\r\n    private removePC(pc: PC) {\r\n        const party = this.state.parties.find(p => p.id === this.state.selectedPartyID);\r\n        if (party) {\r\n            const index = party.pcs.indexOf(pc);\r\n            party.pcs.splice(index, 1);\r\n            this.setState({\r\n                parties: this.state.parties\r\n            });\r\n        }\r\n    }\r\n\r\n    private sortPCs() {\r\n        const party = this.state.parties.find(p => p.id === this.state.selectedPartyID);\r\n        if (party) {\r\n            Utils.sort(party.pcs);\r\n            this.setState({\r\n                parties: this.state.parties\r\n            });\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Library screen\r\n\r\n    private addMonsterGroup() {\r\n        const group = Factory.createMonsterGroup();\r\n        group.name = 'new group';\r\n        const library = ([] as MonsterGroup[]).concat(this.state.library, [group]);\r\n        Utils.sort(library);\r\n        this.setState({\r\n            library: library,\r\n            selectedMonsterGroupID: group.id\r\n        });\r\n    }\r\n\r\n    private removeMonsterGroup() {\r\n        const group = this.state.library.find(g => g.id === this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            const index = this.state.library.indexOf(group);\r\n            this.state.library.splice(index, 1);\r\n            this.setState({\r\n                library: this.state.library,\r\n                selectedMonsterGroupID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private addMonster() {\r\n        const monster = Factory.createMonster();\r\n        monster.name = 'new monster';\r\n        const group = this.state.library.find(g => g.id === this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            group.monsters.push(monster);\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    private generateMonster() {\r\n        const monster = Factory.createMonster();\r\n        monster.name = 'generated monster';\r\n        this.setState({\r\n            modal: {\r\n                type: 'random-monster',\r\n                monster: monster\r\n            }\r\n        });\r\n    }\r\n\r\n    private removeMonster(monster: Monster) {\r\n        const group = this.state.library.find(g => g.id === this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            const index = group.monsters.indexOf(monster);\r\n            group.monsters.splice(index, 1);\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    private sortMonsters() {\r\n        const group = this.state.library.find(g => g.id === this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            Utils.sort(group.monsters);\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    private moveToGroup(monster: Monster, groupID: string) {\r\n        const sourceGroup = this.state.library.find(group => group.monsters.includes(monster));\r\n        if (sourceGroup) {\r\n            const index = sourceGroup.monsters.indexOf(monster);\r\n            sourceGroup.monsters.splice(index, 1);\r\n\r\n            const group = this.state.library.find(g => g.id === groupID);\r\n            if (group) {\r\n                group.monsters.push(monster);\r\n                Utils.sort(group.monsters);\r\n\r\n                this.setState({\r\n                    library: this.state.library\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private editMonster(monster: Monster) {\r\n        const copy = JSON.parse(JSON.stringify(monster));\r\n        this.setState({\r\n            modal: {\r\n                type: 'monster',\r\n                monster: copy,\r\n                showMonsters: false\r\n            }\r\n        });\r\n    }\r\n\r\n    private saveMonster() {\r\n        const group = this.state.library.find(g => g.id === this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            const original = group.monsters.find(m => m.id === this.state.modal.monster.id);\r\n            if (original) {\r\n                // We are editing a monster\r\n                const index = group.monsters.indexOf(original);\r\n                group.monsters[index] = this.state.modal.monster;\r\n                this.setState({\r\n                    library: this.state.library,\r\n                    modal: null\r\n                });\r\n            } else {\r\n                // We are adding a new monster\r\n                group.monsters.push(this.state.modal.monster);\r\n                this.setState({\r\n                    library: this.state.library,\r\n                    modal: null\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private toggleShowSimilarMonsters() {\r\n        // eslint-disable-next-line\r\n        this.state.modal.showMonsters = !this.state.modal.showMonsters;\r\n        this.setState({\r\n            modal: this.state.modal\r\n        });\r\n    }\r\n\r\n    private openDemographics() {\r\n        this.setState({\r\n            modal: {\r\n                type: 'demographics'\r\n            }\r\n        });\r\n    }\r\n\r\n    private cloneMonster(monster: Monster, name: string) {\r\n        const group = this.state.library.find(g => g.monsters.includes(monster));\r\n        if (group) {\r\n            const clone = Frankenstein.clone(monster, name);\r\n            group.monsters.push(clone);\r\n            Utils.sort(group.monsters);\r\n\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    private addOpenGameContent() {\r\n        fetch('./data/monsters.json')\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                json.forEach((data: any) => {\r\n                    try {\r\n                        if (data.name) {\r\n                            const monster = Frankenstein.createFromJSON(data);\r\n\r\n                            let groupName = monster.tag || monster.category;\r\n                            if (groupName.indexOf('swarm') === 0) {\r\n                                groupName = 'swarm';\r\n                            }\r\n                            if (groupName === 'any race') {\r\n                                groupName = 'npc';\r\n                            }\r\n\r\n                            let group = this.state.library.find(p => p.name === groupName);\r\n                            if (!group) {\r\n                                group = {\r\n                                    id: Utils.guid(),\r\n                                    name: groupName,\r\n                                    monsters: []\r\n                                };\r\n                                this.state.library.push(group);\r\n                            }\r\n                            group.monsters.push(monster);\r\n                        }\r\n                    } catch (e) {\r\n                        console.error(e);\r\n                    }\r\n                });\r\n\r\n                Utils.sort(this.state.library);\r\n\r\n                this.setState({\r\n                    view: 'library',\r\n                    library: this.state.library\r\n                });\r\n            });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Encounter screen\r\n\r\n    private addEncounter() {\r\n        const encounter = Factory.createEncounter();\r\n        encounter.name = 'new encounter';\r\n        const encounters = ([] as Encounter[]).concat(this.state.encounters, [encounter]);\r\n        Utils.sort(encounters);\r\n\r\n        this.setState({\r\n            encounters: encounters,\r\n            selectedEncounterID: encounter.id\r\n        });\r\n    }\r\n\r\n    private removeEncounter() {\r\n        const encounter = this.state.encounters.find(e => e.id === this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            const index = this.state.encounters.indexOf(encounter);\r\n            this.state.encounters.splice(index, 1);\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters,\r\n                selectedEncounterID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private addEncounterSlot(monster: Monster, waveID: string | null) {\r\n        const group = this.state.library.find(g => g.monsters.includes(monster));\r\n        if (group) {\r\n            const slot = Factory.createEncounterSlot();\r\n            slot.monsterGroupName = group.name;\r\n            slot.monsterName = monster.name;\r\n            const encounter = this.state.encounters.find(e => e.id === this.state.selectedEncounterID);\r\n            if (encounter) {\r\n                if (waveID !== null) {\r\n                    const wave = encounter.waves.find(w => w.id === waveID);\r\n                    if (wave) {\r\n                        wave.slots.push(slot);\r\n                        this.sortEncounterSlots(wave);\r\n                    }\r\n                } else {\r\n                    encounter.slots.push(slot);\r\n                    this.sortEncounterSlots(encounter);\r\n                }\r\n\r\n                this.setState({\r\n                    encounters: this.state.encounters\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeEncounterSlot(slot: EncounterSlot, waveID: string | null) {\r\n        const encounter = this.state.encounters.find(e => e.id === this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            if (waveID) {\r\n                const wave = encounter.waves.find(w => w.id === waveID);\r\n                if (wave) {\r\n                    const index = wave.slots.indexOf(slot);\r\n                    wave.slots.splice(index, 1);\r\n                }\r\n            } else {\r\n                const n = encounter.slots.indexOf(slot);\r\n                encounter.slots.splice(n, 1);\r\n            }\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters\r\n            });\r\n        }\r\n    }\r\n\r\n    private sortEncounterSlots(slotContainer: { slots: EncounterSlot[] }) {\r\n        slotContainer.slots.sort((a, b) => {\r\n            const aName = a.monsterName.toLowerCase();\r\n            const bName = b.monsterName.toLowerCase();\r\n            if (aName < bName) { return -1; }\r\n            if (aName > bName) { return 1; }\r\n            return 0;\r\n        });\r\n    }\r\n\r\n    private addWaveToEncounter() {\r\n        const encounter = this.state.encounters.find(e => e.id === this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            const wave = Factory.createEncounterWave();\r\n            wave.name = 'wave ' + (encounter.waves.length + 2);\r\n            encounter.waves.push(wave);\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters\r\n            });\r\n        }\r\n    }\r\n\r\n    private removeWave(wave: EncounterWave) {\r\n        const encounter = this.state.encounters.find(e => e.id === this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            const index = encounter.waves.indexOf(wave);\r\n            encounter.waves.splice(index, 1);\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters\r\n            });\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Map screen\r\n\r\n    private addMapFolio() {\r\n        const folio = Factory.createMapFolio();\r\n        folio.name = 'new folio';\r\n        const folios = ([] as MapFolio[]).concat(this.state.mapFolios, [folio]);\r\n        Utils.sort(folios);\r\n\r\n        this.setState({\r\n            mapFolios: folios,\r\n            selectedMapFolioID: folio.id\r\n        });\r\n    }\r\n\r\n    private removeMapFolio() {\r\n        const folio = this.state.mapFolios.find(f => f.id === this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            const index = this.state.mapFolios.indexOf(folio);\r\n            this.state.mapFolios.splice(index, 1);\r\n\r\n            this.setState({\r\n                mapFolios: this.state.mapFolios,\r\n                selectedMapFolioID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private addMap() {\r\n        const folio = this.state.mapFolios.find(f => f.id === this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            const map = Factory.createMap();\r\n            map.name = 'new map';\r\n            folio.maps.push(map);\r\n\r\n            this.setState({\r\n                mapFolios: this.state.mapFolios\r\n            });\r\n        }\r\n    }\r\n\r\n    private editMap(map: Map) {\r\n        const copy = JSON.parse(JSON.stringify(map));\r\n        this.setState({\r\n            modal: {\r\n                type: 'map',\r\n                map: copy\r\n            }\r\n        });\r\n    }\r\n\r\n    private saveMap() {\r\n        const folio = this.state.mapFolios.find(f => f.id === this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            const original = folio.maps.find(m => m.id === this.state.modal.map.id);\r\n            if (original) {\r\n                const index = folio.maps.indexOf(original);\r\n                folio.maps[index] = this.state.modal.map;\r\n                this.setState({\r\n                    mapFolios: this.state.mapFolios,\r\n                    modal: null\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeMap(map: Map) {\r\n        const folio = this.state.mapFolios.find(f => f.id === this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            const index = folio.maps.indexOf(map);\r\n            folio.maps.splice(index, 1);\r\n            this.setState({\r\n                mapFolios: this.state.mapFolios\r\n            });\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Combat screen\r\n\r\n    private createCombat() {\r\n        const party = this.state.parties.length === 1 ? this.state.parties[0] : null;\r\n        const encounter = this.state.encounters.length === 1 ? this.state.encounters[0] : null;\r\n\r\n        const setup = Factory.createCombatSetup();\r\n        setup.partyID = party ? party.id : null;\r\n        setup.encounterID = encounter ? encounter.id : null;\r\n        if (encounter) {\r\n            setup.monsterNames = Utils.getMonsterNames(encounter);\r\n        }\r\n\r\n        this.setState({\r\n            modal: {\r\n                type: 'combat-start',\r\n                combatSetup: setup\r\n            }\r\n        });\r\n    }\r\n\r\n    private startCombat() {\r\n        const combatSetup: CombatSetup = this.state.modal.combatSetup;\r\n        const party = this.state.parties.find(p => p.id === combatSetup.partyID);\r\n        const encounter = this.state.encounters.find(e => e.id === combatSetup.encounterID);\r\n        if (party && encounter) {\r\n            const partyName = party.name || 'unnamed party';\r\n            const encounterName = encounter.name || 'unnamed encounter';\r\n\r\n            const combat = Factory.createCombat();\r\n            combat.name = partyName + ' vs ' + encounterName;\r\n            combat.encounterID = encounter.id;\r\n\r\n            // Add a copy of each PC to the encounter\r\n            party.pcs.filter(pc => pc.active).forEach(pc => {\r\n                const combatant = JSON.parse(JSON.stringify(pc));\r\n\r\n                combatant.current = false;\r\n                combatant.pending = true;\r\n                combatant.active = false;\r\n                combatant.defeated = false;\r\n\r\n                combatant.displayName = pc.name;\r\n                combatant.initiative = 10;\r\n                combatant.hp = null;\r\n                combatant.conditions = [];\r\n                combatant.altitude = 0;\r\n\r\n                combat.combatants.push(combatant);\r\n            });\r\n\r\n            encounter.slots.forEach(slot => {\r\n                const monster = this.getMonster(slot.monsterName, slot.monsterGroupName);\r\n                if (monster) {\r\n                    const init = parseInt(Utils.modifier(monster.abilityScores.dex), 10);\r\n                    const groupRoll = Utils.dieRoll();\r\n\r\n                    for (let n = 0; n !== slot.count; ++n) {\r\n                        const singleRoll = Utils.dieRoll();\r\n\r\n                        const combatant = JSON.parse(JSON.stringify(monster));\r\n                        combatant.id = Utils.guid();\r\n\r\n                        combatant.displayName = null;\r\n                        if (combatSetup.monsterNames) {\r\n                            const slotNames = combatSetup.monsterNames.find(names => names.id === slot.id);\r\n                            if (slotNames) {\r\n                                combatant.displayName = slotNames.names[n];\r\n                            }\r\n                        }\r\n\r\n                        switch (combatSetup.encounterInitMode) {\r\n                            case 'manual':\r\n                                combatant.initiative = 10;\r\n                                break;\r\n                            case 'group':\r\n                                combatant.initiative = init + groupRoll;\r\n                                break;\r\n                            case 'individual':\r\n                                combatant.initiative = init + singleRoll;\r\n                                break;\r\n                            default:\r\n                                // Do nothing\r\n                                break;\r\n                        }\r\n\r\n                        combatant.current = false;\r\n                        combatant.pending = (combatSetup.encounterInitMode === 'manual');\r\n                        combatant.active = (combatSetup.encounterInitMode !== 'manual');\r\n                        combatant.defeated = false;\r\n\r\n                        combatant.hp = combatant.hpMax;\r\n                        combatant.conditions = [];\r\n                        combatant.altitude = 0;\r\n\r\n                        combat.combatants.push(combatant);\r\n                    }\r\n                } else {\r\n                    combat.issues.push('unknown monster: ' + slot.monsterName + ' in group ' + slot.monsterGroupName);\r\n                }\r\n            });\r\n\r\n            combat.combatants.forEach(c => c.altitude = 0);\r\n\r\n            this.sortCombatants(combat);\r\n\r\n            if (combatSetup.folioID && combatSetup.mapID) {\r\n                const folio = this.state.mapFolios.find(f => f.id === combatSetup.folioID);\r\n                if (folio) {\r\n                    const map = folio.maps.find(m => m.id === combatSetup.mapID);\r\n                    if (map) {\r\n                        combat.map = JSON.parse(JSON.stringify(map));\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.setState({\r\n                combats: ([] as Combat[]).concat(this.state.combats, [combat]),\r\n                selectedCombatID: combat.id,\r\n                modal: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private openWaveModal() {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            const encounter = this.state.encounters.find(e => e.id === combat.encounterID);\r\n            if (encounter) {\r\n                const setup = Factory.createCombatSetup();\r\n                setup.encounterID = combat.encounterID;\r\n                setup.monsterNames = Utils.getMonsterNames(encounter);\r\n\r\n                this.setState({\r\n                    modal: {\r\n                        type: 'combat-wave',\r\n                        combatSetup: setup\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private pauseCombat() {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            combat.timestamp = new Date().toLocaleString();\r\n            this.setState({\r\n                combats: this.state.combats,\r\n                selectedCombatID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private resumeCombat(combat: Combat) {\r\n        this.setState({\r\n            selectedCombatID: combat.id\r\n        });\r\n    }\r\n\r\n    private endCombat() {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            const index = this.state.combats.indexOf(combat);\r\n            this.state.combats.splice(index, 1);\r\n            this.setState({\r\n                combats: this.state.combats,\r\n                selectedCombatID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private makeCurrent(combatant: (Combatant & PC) | (Combatant & Monster) | null, newRound: boolean) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            // Handle start-of-turn conditions\r\n            combat.combatants.filter(actor => actor.conditions).forEach(actor => {\r\n                actor.conditions.forEach(c => {\r\n                    if (c.duration) {\r\n                        switch (c.duration.type) {\r\n                            case 'saves':\r\n                                // If it's my condition, and point is START, notify the user\r\n                                if (combat && combatant && (actor.id === combatant.id) && (c.duration.point === 'start')) {\r\n                                    combat.notifications.push({\r\n                                        id: Utils.guid(),\r\n                                        type: 'condition-save',\r\n                                        data: c,\r\n                                        combatant: combatant as Combatant & Monster\r\n                                    });\r\n                                }\r\n                                break;\r\n                            case 'combatant':\r\n                                // If this refers to me, and point is START, remove it\r\n                                if (combat && combatant && (c.duration.combatantID === combatant.id) && (c.duration.point === 'start')) {\r\n                                    const index = actor.conditions.indexOf(c);\r\n                                    actor.conditions.splice(index, 1);\r\n                                    // Notify the user\r\n                                    combat.notifications.push({\r\n                                        id: Utils.guid(),\r\n                                        type: 'condition-end',\r\n                                        data: c,\r\n                                        combatant: combatant as Combatant & Monster\r\n                                    });\r\n                                }\r\n                                break;\r\n                            case 'rounds':\r\n                                // If it's my condition, decrement the condition\r\n                                if (combatant && (actor.id === combatant.id)) {\r\n                                    c.duration.count -= 1;\r\n                                }\r\n                                // If it's now at 0, remove it\r\n                                if (c.duration.count === 0) {\r\n                                    const n = actor.conditions.indexOf(c);\r\n                                    actor.conditions.splice(n, 1);\r\n                                    if (combat) {\r\n                                        // Notify the user\r\n                                        combat.notifications.push({\r\n                                            id: Utils.guid(),\r\n                                            type: 'condition-end',\r\n                                            data: c,\r\n                                            combatant: combatant as Combatant & Monster\r\n                                        });\r\n                                    }\r\n                                }\r\n                                break;\r\n                            default:\r\n                                // Do nothing\r\n                                break;\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n\r\n            // Handle recharging traits\r\n            if (combatant && (combatant.type === 'monster')) {\r\n                (combatant as Monster).traits\r\n                    .filter(t => (t.uses > 0) && t.usage.toLowerCase().startsWith('recharge '))\r\n                    .forEach(t => {\r\n                        combat.notifications.push({\r\n                            id: Utils.guid(),\r\n                            type: 'trait-recharge',\r\n                            data: t,\r\n                            combatant: combatant as Combatant & Monster\r\n                        });\r\n                    });\r\n            }\r\n\r\n            combat.combatants.forEach(c => {\r\n                c.current = false;\r\n            });\r\n            if (combatant) {\r\n                combatant.current = true;\r\n            }\r\n\r\n            if (newRound) {\r\n                combat.round += 1;\r\n            }\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private makeActive(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            combatant.pending = false;\r\n            combatant.active = true;\r\n            combatant.defeated = false;\r\n\r\n            this.sortCombatants(combat);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private makeDefeated(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        combatant.pending = false;\r\n        combatant.active = false;\r\n        combatant.defeated = true;\r\n\r\n        if (combatant.current) {\r\n            this.endTurn(combatant);\r\n        } else {\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private addWaveToCombat() {\r\n        const combatSetup: CombatSetup = this.state.modal.combatSetup;\r\n        const encounter = this.state.encounters.find(e => e.id === combatSetup.encounterID);\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combatSetup && encounter && combat) {\r\n            const wave = encounter.waves.find(w => w.id === combatSetup.waveID);\r\n            if (wave) {\r\n                wave.slots.forEach(slot => {\r\n                    const monster = this.getMonster(slot.monsterName, slot.monsterGroupName);\r\n                    if (monster) {\r\n                        const init = parseInt(Utils.modifier(monster.abilityScores.dex), 10);\r\n                        const groupRoll = Utils.dieRoll();\r\n\r\n                        for (let n = 0; n !== slot.count; ++n) {\r\n                            const singleRoll = Utils.dieRoll();\r\n\r\n                            const combatant = JSON.parse(JSON.stringify(monster));\r\n                            combatant.id = Utils.guid();\r\n\r\n                            combatant.displayName = null;\r\n                            if (combatSetup.monsterNames) {\r\n                                const slotNames = combatSetup.monsterNames.find(names => names.id === slot.id);\r\n                                if (slotNames) {\r\n                                    combatant.displayName = slotNames.names[n];\r\n                                }\r\n                            }\r\n\r\n                            switch (combatSetup.encounterInitMode) {\r\n                                case 'manual':\r\n                                    combatant.initiative = 10;\r\n                                    break;\r\n                                case 'group':\r\n                                    combatant.initiative = init + groupRoll;\r\n                                    break;\r\n                                case 'individual':\r\n                                    combatant.initiative = init + singleRoll;\r\n                                    break;\r\n                                default:\r\n                                    // Do nothing\r\n                                    break;\r\n                            }\r\n\r\n                            combatant.current = false;\r\n                            combatant.pending = (this.state.modal.combatSetup.encounterInitMode === 'manual');\r\n                            combatant.active = (this.state.modal.combatSetup.encounterInitMode !== 'manual');\r\n                            combatant.defeated = false;\r\n\r\n                            combatant.hp = combatant.hpMax;\r\n                            combatant.conditions = [];\r\n\r\n                            if (combat) {\r\n                                combat.combatants.push(combatant);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (combat) {\r\n                            const issue = 'unknown monster: ' + slot.monsterName + ' in group ' + slot.monsterGroupName;\r\n                            combat.issues.push(issue);\r\n                        }\r\n                    }\r\n                });\r\n\r\n                this.sortCombatants(combat);\r\n\r\n                this.setState({\r\n                    combats: this.state.combats,\r\n                    modal: null\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeCombatant(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            const index = combat.combatants.indexOf(combatant);\r\n            combat.combatants.splice(index, 1);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private mapAdd(combatant: ((Combatant & PC) | (Combatant & Monster)), x: number, y: number) {\r\n        const item = Factory.createMapItem();\r\n        item.id = combatant.id;\r\n        item.type = combatant.type as 'pc' | 'monster';\r\n        item.x = x;\r\n        item.y = y;\r\n        let size = 1;\r\n        if (combatant.type === 'monster') {\r\n            size = Utils.miniSize((combatant as Monster).size);\r\n        }\r\n        item.height = size;\r\n        item.width = size;\r\n\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat && combat.map) {\r\n            combat.map.items.push(item);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private mapMove(combatant: (Combatant & PC) | (Combatant & Monster), dir: string) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat && combat.map) {\r\n            const item = combat.map.items.find(i => i.id === combatant.id);\r\n            if (item) {\r\n                switch (dir) {\r\n                    case 'N':\r\n                        item.y -= 1;\r\n                        break;\r\n                    case 'NE':\r\n                        item.x += 1;\r\n                        item.y -= 1;\r\n                        break;\r\n                    case 'E':\r\n                        item.x += 1;\r\n                        break;\r\n                    case 'SE':\r\n                        item.x += 1;\r\n                        item.y += 1;\r\n                        break;\r\n                    case 'S':\r\n                        item.y += 1;\r\n                        break;\r\n                    case 'SW':\r\n                        item.x -= 1;\r\n                        item.y += 1;\r\n                        break;\r\n                    case 'W':\r\n                        item.x -= 1;\r\n                        break;\r\n                    case 'NW':\r\n                        item.x -= 1;\r\n                        item.y -= 1;\r\n                        break;\r\n                    default:\r\n                        // Do nothing\r\n                        break;\r\n                }\r\n\r\n                this.setState({\r\n                    combats: this.state.combats\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private mapRemove(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat && combat.map) {\r\n            const item = combat.map.items.find(i => i.id === combatant.id);\r\n            if (item) {\r\n                const index = combat.map.items.indexOf(item);\r\n                combat.map.items.splice(index, 1);\r\n\r\n                this.setState({\r\n                    combats: this.state.combats\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private endTurn(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            // Handle end-of-turn conditions\r\n            combat.combatants.filter(actor => actor.conditions).forEach(actor => {\r\n                actor.conditions.forEach(c => {\r\n                    if (c.duration) {\r\n                        switch (c.duration.type) {\r\n                            case 'saves':\r\n                                // If it's my condition, and point is END, notify the user\r\n                                if (combat && (actor.id === combatant.id) && (c.duration.point === 'end')) {\r\n                                    const saveNotification = Factory.createNotification();\r\n                                    saveNotification.type = 'condition-save';\r\n                                    saveNotification.data = c;\r\n                                    saveNotification.combatant = combatant as Combatant & Monster;\r\n                                    combat.notifications.push(saveNotification);\r\n                                }\r\n                                break;\r\n                            case 'combatant':\r\n                                // If this refers to me, and point is END, remove it\r\n                                if (combat && (c.duration.combatantID === combatant.id) && (c.duration.point === 'end')) {\r\n                                    const n = actor.conditions.indexOf(c);\r\n                                    actor.conditions.splice(n, 1);\r\n                                    // Notify the user\r\n                                    const endNotification = Factory.createNotification();\r\n                                    endNotification.type = 'condition-end';\r\n                                    endNotification.data = c;\r\n                                    endNotification.combatant = combatant as Combatant & Monster;\r\n                                    combat.notifications.push(endNotification);\r\n                                }\r\n                                break;\r\n                            case 'rounds':\r\n                                // We check this at the beginning of each turn, not at the end\r\n                                break;\r\n                            default:\r\n                                // Do nothing\r\n                                break;\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n\r\n            const active = combat.combatants.filter(c => {\r\n                return c.current || (!c.pending && c.active && !c.defeated);\r\n            });\r\n            if (active.length === 0) {\r\n                // There's no-one left in the fight\r\n                this.makeCurrent(null, false);\r\n            } else if ((active.length === 1) && (active[0].defeated)) {\r\n                // The only person in the fight is me, and I'm defeated\r\n                this.makeCurrent(null, false);\r\n            } else {\r\n                let index = active.indexOf(combatant) + 1;\r\n                let newRound = false;\r\n                if (index >= active.length) {\r\n                    index = 0;\r\n                    newRound = true;\r\n                }\r\n                this.makeCurrent(active[index], newRound);\r\n            }\r\n        }\r\n    }\r\n\r\n    private changeHP(combatant: Combatant & Monster, hp: number, temp: number) {\r\n        combatant.hp = hp;\r\n        combatant.hpTemp = temp;\r\n\r\n        this.setState({\r\n            combats: this.state.combats\r\n        });\r\n    }\r\n\r\n    private addCondition(combatant: Combatant & Monster) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            const condition = Factory.createCondition();\r\n            condition.name = 'blinded';\r\n\r\n            this.setState({\r\n                modal: {\r\n                    type: 'condition-add',\r\n                    condition: condition,\r\n                    combatant: combatant,\r\n                    combat: combat\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private addConditionFromModal() {\r\n        this.state.modal.combatant.conditions.push(this.state.modal.condition);\r\n\r\n        this.setState({\r\n            combats: this.state.combats,\r\n            modal: null\r\n        });\r\n    }\r\n\r\n    private editCondition(combatant: Combatant & Monster, condition: Condition) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            this.setState({\r\n                modal: {\r\n                    type: 'condition-edit',\r\n                    condition: condition,\r\n                    combatant: combatant,\r\n                    combat: combat\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private editConditionFromModal() {\r\n        const conditions: Condition[] = this.state.modal.combatant.conditions;\r\n        const original = conditions.find(c => c.id === this.state.modal.condition.id);\r\n        if (original) {\r\n            const index = conditions.indexOf(original);\r\n            // eslint-disable-next-line\r\n            conditions[index] = this.state.modal.condition;\r\n\r\n            this.setState({\r\n                combats: this.state.combats,\r\n                modal: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private removeCondition(combatant: Combatant & Monster, conditionID: string) {\r\n        const condition = combatant.conditions.find(c => c.id === conditionID);\r\n        if (condition) {\r\n            const index = combatant.conditions.indexOf(condition);\r\n            combatant.conditions.splice(index, 1);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private sortCombatants(combat: Combat) {\r\n        combat.combatants.sort((a, b) => {\r\n            // First sort by initiative, descending\r\n            if (a.initiative && b.initiative && (a.initiative < b.initiative)) { return 1; }\r\n            if (a.initiative && b.initiative && (a.initiative > b.initiative)) { return -1; }\r\n            // Then sort by name, ascending\r\n            if (a.name < b.name) { return -1; }\r\n            if (a.name > b.name) { return 1; }\r\n            return 0;\r\n        });\r\n    }\r\n\r\n    private closeNotification(notification: Notification, removeCondition: boolean) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            const index = combat.notifications.indexOf(notification);\r\n            combat.notifications.splice(index, 1);\r\n\r\n            if (removeCondition && notification.combatant && notification.data) {\r\n                const conditionIndex = notification.combatant.conditions.indexOf(notification.data as Condition);\r\n                notification.combatant.conditions.splice(conditionIndex, 1);\r\n            }\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    private setView(view: string) {\r\n        this.setState({\r\n            view: view\r\n        });\r\n    }\r\n\r\n    private openAbout() {\r\n        this.setState({\r\n            modal: {\r\n                type: 'about'\r\n            }\r\n        });\r\n    }\r\n\r\n    private closeModal() {\r\n        this.setState({\r\n            modal: null\r\n        });\r\n    }\r\n\r\n    private selectParty(party: Party | null) {\r\n        this.setState({\r\n            selectedPartyID: party ? party.id : null\r\n        });\r\n    }\r\n\r\n    private selectMonsterGroup(group: MonsterGroup | null) {\r\n        this.setState({\r\n            selectedMonsterGroupID: group ? group.id : null\r\n        });\r\n    }\r\n\r\n    private selectEncounter(encounter: Encounter | null) {\r\n        this.setState({\r\n            selectedEncounterID: encounter ? encounter.id : null\r\n        });\r\n    }\r\n\r\n    private selectMapFolio(mapFolio: MapFolio | null) {\r\n        this.setState({\r\n            selectedMapFolioID: mapFolio ? mapFolio.id : null\r\n        });\r\n    }\r\n\r\n    private resetAll() {\r\n        this.setState({\r\n            parties: [],\r\n            selectedPartyID: null,\r\n            library: [],\r\n            selectedMonsterGroupID: null,\r\n            encounters: [],\r\n            selectedEncounterID: null,\r\n            mapFolios: [],\r\n            selectedMapFolioID: null,\r\n            combats: [],\r\n            selectedCombatID: null\r\n        });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    private getMonster(monsterName: string, groupName: string) {\r\n        const group = this.state.library.find(p => p.name === groupName);\r\n        if (group) {\r\n            return group.monsters.find(monster => monster.name === monsterName);\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    private changeValue(combatant: any, type: string, value: any) {\r\n        switch (type) {\r\n            case 'hp':\r\n                value = Math.min(value, combatant.hpMax);\r\n                value = Math.max(value, 0);\r\n                break;\r\n            case 'hpTemp':\r\n                value = Math.max(value, 0);\r\n                break;\r\n            case 'level':\r\n                value = Math.max(value, 1);\r\n                value = (combatant.player !== undefined) ? Math.min(value, 20) : Math.min(value, 6);\r\n                break;\r\n            case 'count':\r\n                value = Math.max(value, 1);\r\n                break;\r\n            case 'hitDice':\r\n                value = Math.max(value, 1);\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        const tokens = type.split('.');\r\n        let obj = combatant;\r\n        for (let n = 0; n !== tokens.length; ++n) {\r\n            const token = tokens[n];\r\n            if (n === tokens.length - 1) {\r\n                obj[token] = value;\r\n            } else {\r\n                obj = obj[token];\r\n            }\r\n        }\r\n\r\n        Utils.sort(this.state.parties);\r\n        Utils.sort(this.state.library);\r\n        Utils.sort(this.state.encounters);\r\n\r\n        if (type === 'initiative') {\r\n            if (!(combatant as Combatant).pending) {\r\n                const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n                this.sortCombatants(combat as Combat);\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            parties: this.state.parties,\r\n            library: this.state.library,\r\n            encounters: this.state.encounters,\r\n            combats: this.state.combats,\r\n            selectedPartyID: this.state.selectedPartyID,\r\n            selectedMonsterGroupID: this.state.selectedMonsterGroupID,\r\n            selectedEncounterID: this.state.selectedEncounterID,\r\n            selectedCombatID: this.state.selectedCombatID,\r\n            options: this.state.options,\r\n            modal: this.state.modal\r\n        });\r\n    }\r\n\r\n    private nudgeValue(combatant: any, type: string, delta: number) {\r\n        const tokens = type.split('.');\r\n        let obj = combatant;\r\n        for (let n = 0; n !== tokens.length; ++n) {\r\n            const token = tokens[n];\r\n            if (n === tokens.length - 1) {\r\n                let value = null;\r\n                value = (token === 'challenge') ? Utils.nudgeChallenge(obj.challenge, delta) : obj[token] + delta;\r\n                this.changeValue(combatant, type, value);\r\n            } else {\r\n                obj = obj[token];\r\n            }\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    private getActions() {\r\n        switch (this.state.view) {\r\n            case 'parties':\r\n            case 'encounter':\r\n            case 'maps':\r\n                return (\r\n                    <div className='actions'>\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='search'\r\n                                value={this.state.filter}\r\n                                onChange={event => this.changeValue(this.state, 'filter', event.target.value)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                );\r\n            case 'library':\r\n                return (\r\n                    <div className='actions'>\r\n                        <div className='section'>\r\n                            <button onClick={() => this.openDemographics()}>demographics</button>\r\n                        </div>\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='search'\r\n                                value={this.state.filter}\r\n                                onChange={event => this.changeValue(this.state, 'filter', event.target.value)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                );\r\n            case 'combat':\r\n                const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n                if (combat) {\r\n                    const encounter = this.state.encounters.find(e => e.id === combat.encounterID);\r\n                    if (encounter) {\r\n                        let xp = 0;\r\n                        combat.combatants.filter(c => c.type === 'monster')\r\n                            .forEach(combatant => {\r\n                                xp += Utils.experience((combatant as Combatant & Monster).challenge);\r\n                            });\r\n\r\n                        return (\r\n                            <div className='actions'>\r\n                                <div className='section'>\r\n                                    <div className='text'>round: {combat.round}</div>\r\n                                </div>\r\n                                <div className='section'>\r\n                                    <div className='text'>xp: {xp}</div>\r\n                                </div>\r\n                                <div className='section' style={{ display: encounter.waves.length === 0 ? 'none' : ''}}>\r\n                                    <button onClick={() => this.openWaveModal()}>add wave</button>\r\n                                </div>\r\n                                <div className='section'>\r\n                                    <button onClick={() => this.pauseCombat()}>pause encounter</button>\r\n                                </div>\r\n                                <div className='section'>\r\n                                    <button onClick={() => this.endCombat()}>end encounter</button>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    }\r\n                } else {\r\n                    return (\r\n                        <div className='actions'>\r\n                            <div className='section'>\r\n                                <input\r\n                                    type='text'\r\n                                    placeholder='search'\r\n                                    value={this.state.filter}\r\n                                    onChange={event => this.changeValue(this.state, 'filter', event.target.value)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private getContent() {\r\n        switch (this.state.view) {\r\n            case 'home':\r\n                return (\r\n                    <HomeScreen\r\n                        library={this.state.library}\r\n                        addOpenGameContent={() => this.addOpenGameContent()}\r\n                    />\r\n                );\r\n            case 'parties':\r\n                return (\r\n                    <PartiesScreen\r\n                        parties={this.state.parties}\r\n                        selection={this.state.parties.find(p => p.id === this.state.selectedPartyID) || null}\r\n                        filter={this.state.filter}\r\n                        showHelp={this.state.options.showHelp}\r\n                        selectParty={party => this.selectParty(party)}\r\n                        addParty={() => this.addParty()}\r\n                        removeParty={() => this.removeParty()}\r\n                        addPC={() => this.addPC()}\r\n                        removePC={pc => this.removePC(pc)}\r\n                        sortPCs={() => this.sortPCs()}\r\n                        changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                        nudgeValue={(combatant, type, delta) => this.nudgeValue(combatant, type, delta)}\r\n                    />\r\n                );\r\n            case 'library':\r\n                return (\r\n                    <MonsterLibraryScreen\r\n                        library={this.state.library}\r\n                        selection={this.state.library.find(g => g.id === this.state.selectedMonsterGroupID) || null}\r\n                        filter={this.state.filter}\r\n                        showHelp={this.state.options.showHelp}\r\n                        selectMonsterGroup={group => this.selectMonsterGroup(group)}\r\n                        addMonsterGroup={() => this.addMonsterGroup()}\r\n                        removeMonsterGroup={() => this.removeMonsterGroup()}\r\n                        addMonster={() => this.addMonster()}\r\n                        generateMonster={() => this.generateMonster()}\r\n                        removeMonster={monster => this.removeMonster(monster)}\r\n                        sortMonsters={() => this.sortMonsters()}\r\n                        changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                        nudgeValue={(combatant, type, delta) => this.nudgeValue(combatant, type, delta)}\r\n                        editMonster={combatant => this.editMonster(combatant)}\r\n                        cloneMonster={(combatant, name) => this.cloneMonster(combatant, name)}\r\n                        moveToGroup={(combatant, groupID) => this.moveToGroup(combatant, groupID)}\r\n                    />\r\n                );\r\n            case 'encounter':\r\n                return (\r\n                    <EncounterBuilderScreen\r\n                        encounters={this.state.encounters}\r\n                        selection={this.state.encounters.find(e => e.id === this.state.selectedEncounterID) || null}\r\n                        filter={this.state.filter}\r\n                        parties={this.state.parties}\r\n                        library={this.state.library}\r\n                        showHelp={this.state.options.showHelp}\r\n                        selectEncounter={encounter => this.selectEncounter(encounter)}\r\n                        addEncounter={() => this.addEncounter()}\r\n                        removeEncounter={() => this.removeEncounter()}\r\n                        addWave={() => this.addWaveToEncounter()}\r\n                        removeWave={wave => this.removeWave(wave)}\r\n                        getMonster={(monsterName, groupName) => this.getMonster(monsterName, groupName) || null}\r\n                        addEncounterSlot={(monster, waveID) => this.addEncounterSlot(monster, waveID)}\r\n                        removeEncounterSlot={(slot, waveID) => this.removeEncounterSlot(slot, waveID)}\r\n                        nudgeValue={(slot, type, delta) => this.nudgeValue(slot, type, delta)}\r\n                        changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                    />\r\n                );\r\n            case 'maps':\r\n                return (\r\n                    <MapFoliosScreen\r\n                        mapFolios={this.state.mapFolios}\r\n                        selection={this.state.mapFolios.find(f => f.id === this.state.selectedMapFolioID) || null}\r\n                        filter={this.state.filter}\r\n                        showHelp={this.state.options.showHelp}\r\n                        selectMapFolio={folio => this.selectMapFolio(folio)}\r\n                        addMapFolio={() => this.addMapFolio()}\r\n                        removeMapFolio={() => this.removeMapFolio()}\r\n                        addMap={() => this.addMap()}\r\n                        editMap={map => this.editMap(map)}\r\n                        removeMap={map => this.removeMap(map)}\r\n                        changeValue={(source, type, value) => this.changeValue(source, type, value)}\r\n                    />\r\n                );\r\n            case 'combat':\r\n                return (\r\n                    <CombatManagerScreen\r\n                        combats={this.state.combats}\r\n                        combat={this.state.combats.find(c => c.id === this.state.selectedCombatID) || null}\r\n                        filter={this.state.filter}\r\n                        showHelp={this.state.options.showHelp}\r\n                        createCombat={() => this.createCombat()}\r\n                        resumeEncounter={pausedCombat => this.resumeCombat(pausedCombat)}\r\n                        nudgeValue={(combatant, type, delta) => this.nudgeValue(combatant, type, delta)}\r\n                        changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                        makeCurrent={(combatant) => this.makeCurrent(combatant, false)}\r\n                        makeActive={(combatant) => this.makeActive(combatant)}\r\n                        makeDefeated={(combatant) => this.makeDefeated(combatant)}\r\n                        removeCombatant={(combatant) => this.removeCombatant(combatant)}\r\n                        addCondition={(combatant) => this.addCondition(combatant)}\r\n                        editCondition={(combatant, condition) => this.editCondition(combatant, condition)}\r\n                        removeCondition={(combatant, conditionID) => this.removeCondition(combatant, conditionID)}\r\n                        mapAdd={(combatant, x, y) => this.mapAdd(combatant, x, y)}\r\n                        mapMove={(combatant, dir) => this.mapMove(combatant, dir)}\r\n                        mapRemove={combatant => this.mapRemove(combatant)}\r\n                        endTurn={(combatant) => this.endTurn(combatant)}\r\n                        changeHP={(combatant, hp, temp) => this.changeHP(combatant, hp, temp)}\r\n                        close={(notification, removeCondition) => this.closeNotification(notification, removeCondition)}\r\n                    />\r\n                );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private getModal() {\r\n        if (this.state.modal) {\r\n            let modalSidebar = false;\r\n            let modalTitle = null;\r\n            let modalContent = null;\r\n            let modalAllowScroll = true;\r\n\r\n            const modalButtons = {\r\n                left: [] as JSX.Element[],\r\n                right: [\r\n                    <button key='close' onClick={() => this.closeModal()}>close</button>\r\n                ] as JSX.Element[]\r\n            };\r\n\r\n            switch (this.state.modal.type) {\r\n                case 'about':\r\n                    modalSidebar = true;\r\n                    modalContent = (\r\n                        <AboutModal\r\n                            options={this.state.options}\r\n                            resetAll={() => this.resetAll()}\r\n                            changeValue={(source, type, value) => this.changeValue(source, type, value)}\r\n                        />\r\n                    );\r\n                    modalButtons.right = [];\r\n                    break;\r\n                case 'demographics':\r\n                    modalSidebar = true;\r\n                    modalContent = (\r\n                        <DemographicsModal\r\n                            library={this.state.library}\r\n                        />\r\n                    );\r\n                    modalButtons.right = [];\r\n                    break;\r\n                case 'monster':\r\n                    modalTitle = 'monster editor';\r\n                    modalContent = (\r\n                        <MonsterEditorModal\r\n                            monster={this.state.modal.monster}\r\n                            library={this.state.library}\r\n                            showMonsters={this.state.modal.showMonsters}\r\n                        />\r\n                    );\r\n                    modalAllowScroll = false;\r\n                    modalButtons.left = [\r\n                        (\r\n                            <Checkbox\r\n                                key='similar'\r\n                                label='similar monsters'\r\n                                checked={this.state.modal.showMonsters}\r\n                                changeValue={() => this.toggleShowSimilarMonsters()}\r\n                            />\r\n                        )\r\n                    ];\r\n                    modalButtons.right = [\r\n                        <button key='save' onClick={() => this.saveMonster()}>save</button>,\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                case 'random-monster':\r\n                    modalTitle = 'random monster generator';\r\n                    modalContent = (\r\n                        <RandomMonsterModal\r\n                            monster={this.state.modal.monster}\r\n                            library={this.state.library}\r\n                        />\r\n                    );\r\n                    modalAllowScroll = false;\r\n                    modalButtons.right = [\r\n                        <button key='save' onClick={() => this.saveMonster()}>save</button>,\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                case 'map':\r\n                    modalTitle = 'map editor';\r\n                    modalContent = (\r\n                        <MapEditorModal\r\n                            map={this.state.modal.map}\r\n                        />\r\n                    );\r\n                    modalAllowScroll = false;\r\n                    modalButtons.right = [\r\n                        <button key='save' onClick={() => this.saveMap()}>save</button>,\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                case 'combat-start':\r\n                    modalTitle = 'start a new encounter';\r\n                    modalContent = (\r\n                        <CombatStartModal\r\n                            combatSetup={this.state.modal.combatSetup}\r\n                            parties={this.state.parties}\r\n                            encounters={this.state.encounters}\r\n                            mapFolios={this.state.mapFolios}\r\n                            getMonster={(monsterName, groupName) => this.getMonster(monsterName, groupName) || null}\r\n                            notify={() => this.setState({modal: this.state.modal})}\r\n                        />\r\n                    );\r\n                    modalAllowScroll = false;\r\n                    modalButtons.right = [\r\n                        (\r\n                            <button\r\n                                key='start encounter'\r\n                                className={this.state.modal.combatSetup.partyID && this.state.modal.combatSetup.encounterID ? '' : 'disabled'}\r\n                                onClick={() => this.startCombat()}\r\n                            >\r\n                                start encounter\r\n                            </button>\r\n                        ),\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                case 'combat-wave':\r\n                    modalTitle = 'encounter waves';\r\n                    modalContent = (\r\n                        <CombatStartModal\r\n                            combatSetup={this.state.modal.combatSetup}\r\n                            encounters={this.state.encounters}\r\n                            getMonster={(monsterName, groupName) => this.getMonster(monsterName, groupName) || null}\r\n                            notify={() => this.setState({modal: this.state.modal})}\r\n                        />\r\n                    );\r\n                    modalAllowScroll = false;\r\n                    modalButtons.right = [\r\n                        (\r\n                            <button\r\n                                key='add wave'\r\n                                className={this.state.modal.combatSetup.waveID !== null ? '' : 'disabled'}\r\n                                onClick={() => this.addWaveToCombat()}\r\n                            >\r\n                                add wave\r\n                            </button>\r\n                        ),\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                case 'condition-add':\r\n                    modalTitle = 'add a condition';\r\n                    modalContent = (\r\n                        <ConditionModal\r\n                            condition={this.state.modal.condition}\r\n                            combatant={this.state.modal.combatant}\r\n                            combat={this.state.modal.combat}\r\n                        />\r\n                    );\r\n                    modalAllowScroll = false;\r\n                    modalButtons.right = [\r\n                        <button key='add' onClick={() => this.addConditionFromModal()}>add</button>,\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                case 'condition-edit':\r\n                    modalTitle = 'edit condition';\r\n                    modalContent = (\r\n                        <ConditionModal\r\n                            condition={this.state.modal.condition}\r\n                            combatant={this.state.modal.combatant}\r\n                            combat={this.state.modal.combat}\r\n                        />\r\n                    );\r\n                    modalButtons.right = [\r\n                        <button key='save' onClick={() => this.editConditionFromModal()}>save</button>,\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                default:\r\n                    // Do nothing\r\n                    break;\r\n            }\r\n\r\n            return (\r\n                <div className='overlay' onClick={() => modalSidebar ? this.closeModal() : null}>\r\n                    <div className={modalSidebar ? 'modal sidebar' : 'modal'} onClick={e => e.stopPropagation()}>\r\n                        <div className='modal-header'>\r\n                            <div className='title'>{modalTitle}</div>\r\n                            {modalSidebar ? <img className='image' src={close} alt='close' onClick={() => this.closeModal()} /> : null}\r\n                        </div>\r\n                        <div className={modalAllowScroll ? 'modal-content scrollable' : 'modal-content'}>\r\n                            {modalContent}\r\n                        </div>\r\n                        <div className='modal-footer'>\r\n                            <div className='left'>{modalButtons.left}</div>\r\n                            <div className='right'>{modalButtons.right}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const content = this.getContent();\r\n            const actions = this.getActions();\r\n            const modal = this.getModal();\r\n\r\n            return (\r\n                <div className='dojo'>\r\n                    <Titlebar\r\n                        actions={actions}\r\n                        blur={modal !== null}\r\n                        openHome={() => this.setView('home')}\r\n                        openAbout={() => this.openAbout()}\r\n                    />\r\n                    <div className={(modal === null) ? 'page-content' : 'page-content blur'}>\r\n                        {content}\r\n                    </div>\r\n                    <Navbar\r\n                        view={this.state.view}\r\n                        parties={this.state.parties}\r\n                        library={this.state.library}\r\n                        encounters={this.state.encounters}\r\n                        blur={modal !== null}\r\n                        setView={view => this.setView(view)}\r\n                    />\r\n                    {modal}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './style/css/foundation.css';\r\nimport './style/scss/app.scss';\r\nimport './style/scss/controls.scss';\r\n\r\nimport Dojo from './components/dojo';\r\n\r\nReactDOM.render(<Dojo />, document.getElementById('root'));\r\n"],"sourceRoot":""}