{"version":3,"sources":["resources/images/down-arrow-black.svg","resources/images/down-arrow.svg","resources/images/close-black.svg","resources/images/warning.svg","resources/images/ellipsis.svg","resources/images/minus.svg","resources/images/plus.svg","resources/images/checked.svg","resources/images/unchecked.svg","resources/images/settings.svg","utils/utils.ts","utils/factory.ts","components/cards/info-card.tsx","components/cards/information/combat-manager-card.tsx","components/controls/confirm-button.tsx","components/controls/dropdown.tsx","components/controls/expander.tsx","components/controls/radial.tsx","components/controls/spin.tsx","components/panels/ability-score-panel.tsx","components/panels/conditions-panel.tsx","components/panels/traits-panel.tsx","components/cards/monster-card.tsx","components/cards/pc-card.tsx","components/panels/hit-point-gauge.tsx","components/panels/map-panel.tsx","components/list-items/combat-list-item.tsx","components/panels/card-group.tsx","components/screens/combat-manager-screen.tsx","components/panels/difficulty-chart-panel.tsx","components/cards/encounter-card.tsx","components/cards/error-card.tsx","models/monster-group.ts","components/cards/filter-card.tsx","components/cards/information/encounter-builder-card.tsx","components/cards/wave-card.tsx","components/list-items/encounter-list-item.tsx","components/screens/encounter-builder-screen.tsx","components/screens/home-screen.tsx","components/cards/information/map-folios-card.tsx","components/cards/map-card.tsx","components/cards/map-folio-card.tsx","components/list-items/map-folio-list-item.tsx","components/screens/map-folios-screen.tsx","components/cards/information/monster-library-card.tsx","components/cards/monster-group-card.tsx","components/list-items/monster-group-list-item.tsx","components/screens/monster-library-screen.tsx","components/cards/information/parties-card.tsx","components/cards/party-card.tsx","components/list-items/party-list-item.tsx","components/screens/parties-screen.tsx","components/controls/checkbox.tsx","components/modals/about-modal.tsx","components/controls/selector.tsx","components/modals/combat-start-modal.tsx","models/condition.ts","components/controls/radio-group.tsx","components/modals/condition-modal.tsx","components/modals/demographics-modal.tsx","models/map-folio.ts","components/cards/map-tile-card.tsx","components/modals/map-editor-modal.tsx","components/modals/monster-editor-modal.tsx","components/panels/navbar.tsx","components/panels/titlebar.tsx","components/dojo.tsx","index.js"],"names":["module","exports","__webpack_require__","p","Utils","monster","library","group","this","monsterIdToGroup","id","grp","find","g","monsters","includes","filter","text","result","toLowerCase","split","forEach","token","indexOf","s4","Math","floor","random","toString","substring","collection","sort","a","b","aName","name","bName","value","count","aValue","bValue","score","mod","modifierValue","str","size","cr","parseInt","push","ac","hpMin","hpMax","attack","dmgMin","dmgMax","save","level","difficulty","type","delta","condition","combat","duration","saveDuration","saveType","toUpperCase","saves","saveDC","combatantDuration","point","c","combatants","cmb","combatantID","displayName","roundsDuration","rounds","encounter","monsterNames","slots","slot","names","monsterName","n","Factory","guid","pcs","active","player","race","classes","background","languages","passiveInsight","passiveInvestigation","passivePerception","initiative","url","category","tag","alignment","challenge","abilityScores","dex","con","int","wis","cha","hpTemp","hitDice","damage","resist","vulnerable","immune","savingThrows","speed","skills","senses","equipment","traits","conditionImmunities","usage","waves","monsterGroupName","maps","items","x","y","width","height","terrain","partyID","encounterID","waveID","folioID","mapID","encounterInitMode","map","round","notifications","issues","timestamp","combatant","InfoCard","heading","props","getHeading","content","getContent","react_default","createElement","className","e","console","error","React","Component","defaultProps","CombatManagerCard","info_card_InfoCard","ConfirmButton","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","pressed","setState","toggle","callback","_this2","src","warning","alt","details","onClick","perform","disabled","ex","Dropdown","open","stopPropagation","optionID","select","options","length","selectedText","style","selectedID","option","o","placeholder","key","title","ellipsis","dropdown_DropdownOption","selected","toggleOpen","DropdownOption","_this3","click","Expander","expanded","arrow","Radial","dir","dir2","arguments","undefined","direction","showOut","showIn","showDiag","display","transform","padding","Spin","nudgeValue","preventDefault","source","minusBtns","plusBtns","factors","factor","onTouchEnd","touchEnd","reverse","minus","plus","infoWidth","label","AbilityScorePanel","showAbilityScores","edit","spin_Spin","toggleAbilityScores","modifier","ConditionsPanel","conditions","conditions_panel_ConditionPanel","nudgeConditionValue","editCondition","removeCondition","conditionID","addCondition","ConditionPanel","conditionDurationText","description","conditionText","expander_Expander","TraitsPanel","actions","legendaryActions","lairActions","regionalEffects","item","traits_panel_TraitPanel","trait","mode","changeTrait","action","removeTrait","copyTrait","addTrait","TraitPanel","traitType","onChange","event","target","confirm_button_ConfirmButton","MonsterCard","showDetails","cloneName","damageOrHealing","max","hp","min","changeHP","temp","val","sizeAndType","align","wave","_this4","some","s","die","hitDieType","conMod","conModStr","_this5","editMonster","setCloneName","cloneMonster","groupOptions","dropdown_Dropdown","moveToGroup","removeMonster","removeEncounterSlot","canAdd","monsterIsInWave","addEncounterSlot","radial_Radial","mapMove","mapRemove","mapAdd","pending","defeated","removeCombatant","current","endTurn","makeDefeated","makeCurrent","makeActive","changeValue","stats","slotSection","getHP","ability_score_panel_AbilityScorePanel","traits_panel_TraitsPanel","nudgeDamage","heal","setDamage","conditions_panel_ConditionsPanel","imageStyle","toggleDetails","PCCard","removePC","commonStatBlock","href","rel","HitPointGauge","hpCurrent","hpBloodied","hpWidth","hpTempBar","hpTempWidth","MapPanel","border","dimensions","i","minX","maxX","minY","maxY","mapDimensions","sideLength","getSideLength","left","top","getMapDimensions","grid","gridStyle","getStyle","map_panel_GridSquare","setSelectedItemID","onDoubleClick","posX","posY","addMapTile","tiles","tileStyle","map_panel_MapTile","tile","selectable","selectedItemID","thumbnail","tokens","tokenStyle","map_panel_MapToken","simple","mt","dragOverlay","showOverlay","yOver","xOver","overlayStyle","overlay","gridSquareClicked","GridSquare","doubleClick","MapTile","MapToken","initials","hpGauge","altitudeBadge","conditionsBadge","hit_point_gauge_HitPointGauge","altitude","CombatListItem","map_panel_MapPanel","setSelection","CardGroup","showCards","hidden","closeBtn","showClose","close","showToggle","toggleCards","cards","CombatManagerScreen","selectedTokenID","addingToMapID","pc_card_PCCard","setAddingToMapID","monster_card_MonsterCard","leftPaneContent","centrePaneContent","rightPaneContent","createCard","combat_manager_screen_PendingCombatantRow","setSelectedTokenID","combat_manager_screen_CombatantRow","showHelp","pendingHelp","concat","activeHelp","combat_manager_screen_NotificationPanel","notification","mapSection","addCombatantToMap","selectedCombatant","card_group_CardGroup","help","combat_manager_card_CombatManagerCard","combats","combat_list_item_CombatListItem","resumeEncounter","createCombat","NotificationPanel","saveSuccess","PendingCombatantRow","_this6","getInformationText","CombatantRow","pc","notes","_this7","gauge","_this8","getContentPC","getContentMonster","DifficultyChartPanel","monsterCount","monsterXp","getMonster","experience","xpThresholds","diffSection","adjustedXp","experienceFactor","party","xpEasy","xpMedium","xpHard","xpDeadly","pcExperience","adjustedDifficulty","small","getLeft","xp","getRight","right","EncounterCard","parties","partyOptions","difficultySection","selectParty","difficulty_chart_panel_DifficultyChartPanel","selection","addWave","removeEncounter","ErrorCard","SIZE_TYPES","CATEGORY_TYPES","TRAIT_TYPES","FilterCard","showAll","sizeOptions","catOptions","cat","resetFilter","summary","challengeMin","challengeMax","toggleAll","EncounterBuilderCard","encounters","WaveCard","removeWave","EncounterListItem","EncounterBuilderScreen","getMonsterGroup","match","nudgeChallenge","changeFilterValue","index","error_card_ErrorCard","libraryCards","filter_card_FilterCard","nudgeFilterValue","matchMonster","encounter_builder_card_EncounterBuilderCard","encounterName","encounter_list_item_EncounterListItem","selectEncounter","encounterCards","encounter_card_EncounterCard","getMonsterCards","card","w","waveCards","wave_card_WaveCard","field","addEncounter","getLibrarySection","HomeScreen","addOpenGameContent","MapFoliosCard","mapFolios","MapCard","editMap","removeMap","MapFolioCard","addMap","removeMapFolio","MapFolioListItem","mapFolio","MapFoliosScreen","map_folios_card_MapFoliosCard","folios","map_folio_list_item_MapFolioListItem","f","selectMapFolio","folio","folioCards","map_folio_card_MapFolioCard","m","map_card_MapCard","addMapFolio","MonsterLibraryCard","MonsterGroupCard","addMonster","sortMonsters","removeMonsterGroup","MonsterGroupListItem","matchGroup","MonsterLibraryScreen","monster_library_card_MonsterLibraryCard","listItems","showMonsterGroup","monster_group_list_item_MonsterGroupListItem","selectMonsterGroup","monster_group_card_MonsterGroupCard","groupID","addMonsterGroup","PartiesCard","PartyCard","activePCs","join","reduce","array","localeCompare","insightSummary","investigationSummary","perceptionSummary","insight","invest","percep","addPC","sortPCs","removeParty","PartyListItem","PartiesScreen","parties_card_PartiesCard","party_list_item_PartyListItem","activeCards","inactiveCards","party_card_PartyCard","activePC","inactivePC","addParty","Checkbox","checked","unchecked","AboutModal","resetAll","checkbox_Checkbox","Selector","tabs","itemsPerRow","rowCount","ceil","rowContents","rowIndex","selector_SelectorOption","rowSections","row","SelectorOption","CombatStartModal","combatSetup","notify","enc","getMonsterNames","slotID","partyContent","selectedParty","pcSections","setParty","encounterOptions","encounterContent","selectedEncounter","monsterSections","waveMonsters","setEncounter","folioOptions","selectMapSection","thumbnailSection","mapOptions","selector_Selector","setMapID","setFolioID","waveOptions","waveContent","selectedWave","setWave","_this9","_this10","slotsContainer","slotNames","inputs","combat_start_modal_MonsterName","changeName","setEncounterInitMode","leftSection","rightSection","getPartySection","getEncounterSection","getMapSection","getDifficultySection","getMonsterSection","getWaveSection","margin","MonsterName","_this11","CONDITION_TYPES","RadioGroup","radio_group_RadioGroupItem","itemID","RadioGroupItem","ConditionModal","conditionName","durationType","createConditionDurationSaves","createConditionDurationCombatant","createConditionDurationRounds","object","controls","saveOptions","pointOptions","combatantOptions","durations","radio_group_RadioGroup","setCondition","setDuration","DemographicsModal","chart","demographics","allMonsters","buckets","maxBucketSize","bucket","bars","set","selectChart","TERRAIN_TYPES","MapTileCard","terrainOptions","t","moveMapItem","resizeMapItem","cloneMapItem","removeMapItem","MapEditorModal","selectedTileID","createMapItem","smallMapItem","bigMapItem","copy","JSON","parse","stringify","splice","tools","map_tile_card_MapTileCard","mapItem","setSelectedTileID","MonsterEditorModal","page","showFilter","helpSection","subtype","sections","getHelpOptionsForPage","section","setRandomValue","findIndex","distinct","d","addedIDs","avg","createTrait","getActionTypeName","plural","newValue","hpPerDie","getValueSection","getActionsSection","dataType","values","v","sortByValue","sortByCount","valueSections","rows","addRandomTrait","criteria","criteriaText","similar","filterContent","toggleMatch","geneSplice","toggleFilter","showMonsters","getMonsters","selector","setHelpSection","getHelpSection","monsterList","getFilterCard","transition","setPage","Navbar","partiesStyle","view","libraryStyle","encounterStyle","mapStyle","combatStyle","encountersEnabled","combatEnabled","blur","setView","Titlebar","openHome","cog","openAbout","Dojo","selectedPartyID","selectedMonsterGroupID","selectedEncounterID","selectedMapFolioID","selectedCombatID","modal","libraryFilter","data","json","window","localStorage","getItem","setItem","createParty","getParty","createPC","createMonsterGroup","createMonster","sourceGroup","findMonster","original","clone","parseChallenge","challenge_rating","armor_class","hit_points","hit_dice","strength","dexterity","constitution","intelligence","wisdom","charisma","damage_resistances","damage_vulnerabilities","damage_immunities","condition_immunities","skill","special_abilities","rawTrait","buildTrait","legendary_actions","groupName","getMonsterGroupByName","openBracket","closeBracket","desc","createEncounter","getEncounter","createEncounterSlot","sortEncounterSlots","slotContainer","createEncounterWave","createMapFolio","getMapFolio","createMap","setup","createCombatSetup","partyName","init","groupRoll","dieRoll","singleRoll","sortCombatants","getCombat","Date","toLocaleString","newRound","actor","issue","miniSize","saveNotification","createNotification","endNotification","createCondition","conditionIndex","obj","home_screen_HomeScreen","parties_screen_PartiesScreen","monster_library_screen_MonsterLibraryScreen","openDemographics","encounter_builder_screen_EncounterBuilderScreen","addWaveToEncounter","map_folios_screen_MapFoliosScreen","combat_manager_screen_CombatManagerScreen","pausedCombat","resumeCombat","closeNotification","openWaveModal","pauseCombat","endCombat","modalTitle","modalContent","modalAllowClose","modalAllowScroll","modalButtons","about_modal_AboutModal","demographics_modal_DemographicsModal","monster_editor_modal_MonsterEditorModal","toggleShowSimilarMonsters","saveMonster","closeModal","map_editor_modal_MapEditorModal","saveMap","combat_start_modal_CombatStartModal","startCombat","addWaveToCombat","condition_modal_ConditionModal","addConditionFromModal","editConditionFromModal","titlebar_Titlebar","navbar_Navbar","ReactDOM","render","dojo_Dojo","document","getElementById"],"mappings":"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","file":"static/js/main.f069857e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/down-arrow-black.a2fc7a1f.svg\";","module.exports = __webpack_public_path__ + \"static/media/down-arrow.697dc1af.svg\";","module.exports = __webpack_public_path__ + \"static/media/close-black.7645a5b9.svg\";","module.exports = __webpack_public_path__ + \"static/media/warning.67a11a95.svg\";","module.exports = __webpack_public_path__ + \"static/media/ellipsis.9650a20f.svg\";","module.exports = __webpack_public_path__ + \"static/media/minus.7003cf50.svg\";","module.exports = __webpack_public_path__ + \"static/media/plus.b60accff.svg\";","module.exports = __webpack_public_path__ + \"static/media/checked.5cbd1005.svg\";","module.exports = __webpack_public_path__ + \"static/media/unchecked.3d4ae2dd.svg\";","module.exports = __webpack_public_path__ + \"static/media/settings.042bb1c2.svg\";","import { Combat } from '../models/combat';\r\nimport { Condition, ConditionDurationCombatant, ConditionDurationRounds, ConditionDurationSaves } from '../models/condition';\r\nimport { Encounter, EncounterWave } from '../models/encounter';\r\nimport { Monster, MonsterGroup } from '../models/monster-group';\r\n\r\nexport default class Utils {\r\n\r\n    // This is an internal dictionary to speed up lookup\r\n    private static monsterIdToGroup: { [id: string]: MonsterGroup } = {};\r\n\r\n    public static getMonsterGroup(monster: Monster, library: MonsterGroup[]): MonsterGroup {\r\n        let group = this.monsterIdToGroup[monster.id];\r\n\r\n        if (!group) {\r\n            const grp = library.find(g => g.monsters.includes(monster));\r\n            if (grp) {\r\n                group = grp;\r\n                this.monsterIdToGroup[monster.id] = group;\r\n            }\r\n        }\r\n\r\n        return group;\r\n    }\r\n\r\n    public static match(filter: string, text: string): boolean {\r\n        if (!filter) {\r\n            return true;\r\n        }\r\n\r\n        let result = true;\r\n\r\n        const tokens = filter.toLowerCase().split(' ');\r\n        tokens.forEach(token => {\r\n            if (text.toLowerCase().indexOf(token) === -1) {\r\n                result = false;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    public static guid(): string {\r\n        const s4 = () => Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\r\n        return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\r\n    }\r\n\r\n    public static sort(collection: any[]): any[] {\r\n        collection.sort((a, b) => {\r\n            const aName = a.name.toLowerCase();\r\n            const bName = b.name.toLowerCase();\r\n            if (aName < bName) { return -1; }\r\n            if (aName > bName) { return 1; }\r\n            return 0;\r\n        });\r\n        return collection;\r\n    }\r\n\r\n    public static sortByValue(collection: any[]): any[] {\r\n        collection.sort((a, b) => {\r\n            if (a.value < b.value) { return -1; }\r\n            if (a.value > b.value) { return 1; }\r\n            return 0;\r\n        });\r\n        return collection;\r\n    }\r\n\r\n    public static sortByCount(collection: any[]): any[] {\r\n        collection.sort((a, b) => {\r\n            if (a.count < b.count) { return 1; }\r\n            if (a.count > b.count) { return -1; }\r\n\r\n            const aValue = a.value.toLowerCase();\r\n            const bValue = b.value.toLowerCase();\r\n            if (aValue < bValue) { return -1; }\r\n            if (aValue > bValue) { return 1; }\r\n\r\n            return 0;\r\n        });\r\n        return collection;\r\n    }\r\n\r\n    public static modifierValue(score: number): number {\r\n        return Math.floor((score - 10) / 2);\r\n    }\r\n\r\n    public static modifier(score: number): string {\r\n        const mod = this.modifierValue(score);\r\n        let str = mod.toString();\r\n        if (mod >= 0) {\r\n            str = '+' + str;\r\n        }\r\n        return str;\r\n    }\r\n\r\n    public static dieRoll(): number {\r\n        return Math.floor(Math.random() * 20) + 1;\r\n    }\r\n\r\n    public static miniSize(size: string): number {\r\n        switch (size) {\r\n            case 'tiny': return 1;\r\n            case 'small': return 1;\r\n            case 'medium': return 1;\r\n            case 'large': return 2;\r\n            case 'huge': return 3;\r\n            case 'gargantuan': return 4;\r\n            default: return 1;\r\n        }\r\n    }\r\n\r\n    public static hitDieType(size: string) {\r\n        switch (size) {\r\n            case 'tiny': return 4;\r\n            case 'small': return 6;\r\n            case 'medium': return 8;\r\n            case 'large': return 10;\r\n            case 'huge': return 12;\r\n            case 'gargantuan': return 20;\r\n            default: return 8;\r\n        }\r\n    }\r\n\r\n    public static challenge(cr: number): string {\r\n        switch (cr) {\r\n            case 0.125: return '1/8';\r\n            case 0.25: return '1/4';\r\n            case 0.5: return '1/2';\r\n            default: return cr.toString();\r\n        }\r\n    }\r\n\r\n    public static parseChallenge(cr: string): number {\r\n        switch (cr) {\r\n            case '1/8': return 0.125;\r\n            case '1/4': return 0.25;\r\n            case '1/2': return 0.5;\r\n            default: return parseInt(cr, 10);\r\n        }\r\n    }\r\n\r\n    public static challengeDetails(): any[] {\r\n        const result: any[] = [];\r\n\r\n        result.push({ cr: 0,        ac: 13,       hpMin: 1, hpMax: 6,       attack: 3,  dmgMin: 0,   dmgMax: 1,   save: 13 });\r\n        result.push({ cr: 0.125,    ac: 13,       hpMin: 7, hpMax: 35,      attack: 3,  dmgMin: 2,   dmgMax: 3,   save: 13 });\r\n        result.push({ cr: 0.25,     ac: 13,       hpMin: 36, hpMax: 49,     attack: 3,  dmgMin: 4,   dmgMax: 5,   save: 13 });\r\n        result.push({ cr: 0.5,      ac: 13,       hpMin: 50, hpMax: 70,     attack: 3,  dmgMin: 6,   dmgMax: 8,   save: 13 });\r\n        result.push({ cr: 1,        ac: 13,       hpMin: 71, hpMax: 85,     attack: 3,  dmgMin: 9,   dmgMax: 14,  save: 13 });\r\n        result.push({ cr: 2,        ac: 13,       hpMin: 86, hpMax: 100,    attack: 3,  dmgMin: 15,  dmgMax: 20,  save: 13 });\r\n        result.push({ cr: 3,        ac: 13,       hpMin: 101, hpMax: 115,   attack: 4,  dmgMin: 21,  dmgMax: 26,  save: 13 });\r\n        result.push({ cr: 4,        ac: 14,       hpMin: 116, hpMax: 130,   attack: 5,  dmgMin: 27,  dmgMax: 32,  save: 14 });\r\n        result.push({ cr: 5,        ac: 15,       hpMin: 131, hpMax: 145,   attack: 6,  dmgMin: 33,  dmgMax: 38,  save: 15 });\r\n        result.push({ cr: 6,        ac: 15,       hpMin: 146, hpMax: 160,   attack: 6,  dmgMin: 39,  dmgMax: 44,  save: 15 });\r\n        result.push({ cr: 7,        ac: 15,       hpMin: 161, hpMax: 175,   attack: 6,  dmgMin: 45,  dmgMax: 50,  save: 15 });\r\n        result.push({ cr: 8,        ac: 16,       hpMin: 176, hpMax: 190,   attack: 7,  dmgMin: 51,  dmgMax: 56,  save: 16 });\r\n        result.push({ cr: 9,        ac: 16,       hpMin: 191, hpMax: 205,   attack: 7,  dmgMin: 57,  dmgMax: 62,  save: 16 });\r\n        result.push({ cr: 10,       ac: 17,       hpMin: 206, hpMax: 220,   attack: 7,  dmgMin: 63,  dmgMax: 68,  save: 16 });\r\n        result.push({ cr: 11,       ac: 17,       hpMin: 221, hpMax: 235,   attack: 8,  dmgMin: 69,  dmgMax: 74,  save: 17 });\r\n        result.push({ cr: 12,       ac: 17,       hpMin: 236, hpMax: 250,   attack: 8,  dmgMin: 75,  dmgMax: 80,  save: 17 });\r\n        result.push({ cr: 13,       ac: 18,       hpMin: 251, hpMax: 265,   attack: 8,  dmgMin: 81,  dmgMax: 86,  save: 18 });\r\n        result.push({ cr: 14,       ac: 18,       hpMin: 266, hpMax: 280,   attack: 8,  dmgMin: 87,  dmgMax: 92,  save: 18 });\r\n        result.push({ cr: 15,       ac: 18,       hpMin: 281, hpMax: 295,   attack: 8,  dmgMin: 93,  dmgMax: 98,  save: 18 });\r\n        result.push({ cr: 16,       ac: 18,       hpMin: 296, hpMax: 310,   attack: 9,  dmgMin: 99,  dmgMax: 104, save: 18 });\r\n        result.push({ cr: 17,       ac: 19,       hpMin: 311, hpMax: 325,   attack: 10, dmgMin: 105, dmgMax: 110, save: 19 });\r\n        result.push({ cr: 18,       ac: 19,       hpMin: 326, hpMax: 340,   attack: 10, dmgMin: 111, dmgMax: 116, save: 19 });\r\n        result.push({ cr: 19,       ac: 19,       hpMin: 341, hpMax: 355,   attack: 10, dmgMin: 117, dmgMax: 122, save: 19 });\r\n        result.push({ cr: 20,       ac: 19,       hpMin: 356, hpMax: 400,   attack: 10, dmgMin: 123, dmgMax: 140, save: 19 });\r\n        result.push({ cr: 21,       ac: 19,       hpMin: 401, hpMax: 445,   attack: 11, dmgMin: 141, dmgMax: 158, save: 20 });\r\n        result.push({ cr: 22,       ac: 19,       hpMin: 446, hpMax: 490,   attack: 11, dmgMin: 159, dmgMax: 176, save: 20 });\r\n        result.push({ cr: 23,       ac: 19,       hpMin: 491, hpMax: 535,   attack: 11, dmgMin: 177, dmgMax: 194, save: 20 });\r\n        result.push({ cr: 24,       ac: 19,       hpMin: 536, hpMax: 580,   attack: 12, dmgMin: 195, dmgMax: 212, save: 21 });\r\n        result.push({ cr: 25,       ac: 19,       hpMin: 581, hpMax: 625,   attack: 12, dmgMin: 213, dmgMax: 230, save: 21 });\r\n        result.push({ cr: 26,       ac: 19,       hpMin: 626, hpMax: 670,   attack: 12, dmgMin: 231, dmgMax: 248, save: 21 });\r\n        result.push({ cr: 27,       ac: 19,       hpMin: 671, hpMax: 715,   attack: 13, dmgMin: 249, dmgMax: 266, save: 22 });\r\n        result.push({ cr: 28,       ac: 19,       hpMin: 716, hpMax: 760,   attack: 13, dmgMin: 267, dmgMax: 284, save: 22 });\r\n        result.push({ cr: 29,       ac: 19,       hpMin: 761, hpMax: 805,   attack: 13, dmgMin: 285, dmgMax: 302, save: 22 });\r\n        result.push({ cr: 30,       ac: 19,       hpMin: 806, hpMax: 850,   attack: 14, dmgMin: 303, dmgMax: 320, save: 23 });\r\n\r\n        return result;\r\n    }\r\n\r\n    public static experience(cr: number): number {\r\n        switch (cr) {\r\n            case 0: return 10;\r\n            case 0.125: return 25;\r\n            case 0.25: return 50;\r\n            case 0.5: return 100;\r\n            case 1: return 200;\r\n            case 2: return 450;\r\n            case 3: return 700;\r\n            case 4: return 1100;\r\n            case 5: return 1800;\r\n            case 6: return 2300;\r\n            case 7: return 2900;\r\n            case 8: return 3900;\r\n            case 9: return 5000;\r\n            case 10: return 5900;\r\n            case 11: return 7200;\r\n            case 12: return 8400;\r\n            case 13: return 10000;\r\n            case 14: return 11500;\r\n            case 15: return 13000;\r\n            case 16: return 15000;\r\n            case 17: return 18000;\r\n            case 18: return 20000;\r\n            case 19: return 22000;\r\n            case 20: return 25000;\r\n            case 21: return 33000;\r\n            case 22: return 41000;\r\n            case 23: return 50000;\r\n            case 24: return 62000;\r\n            case 30: return 155000;\r\n            default: return 0;\r\n        }\r\n    }\r\n\r\n    public static experienceFactor(count: number): number {\r\n        switch (count) {\r\n            case 0:\r\n                return 0;\r\n            case 1:\r\n                return 1;\r\n            case 2:\r\n                return 1.5;\r\n            case 3:\r\n            case 4:\r\n            case 5:\r\n            case 6:\r\n                return 2;\r\n            case 7:\r\n            case 8:\r\n            case 9:\r\n            case 10:\r\n                return 2.5;\r\n            case 11:\r\n            case 12:\r\n            case 13:\r\n            case 14:\r\n                return 3;\r\n            default:\r\n                return 4;\r\n        }\r\n    }\r\n\r\n    public static pcExperience(level: number, difficulty: string): number {\r\n        switch (difficulty) {\r\n            case 'easy':\r\n                switch (level) {\r\n                    case 1: return 25;\r\n                    case 2: return 50;\r\n                    case 3: return 75;\r\n                    case 4: return 125;\r\n                    case 5: return 250;\r\n                    case 6: return 300;\r\n                    case 7: return 350;\r\n                    case 8: return 450;\r\n                    case 9: return 550;\r\n                    case 10: return 600;\r\n                    case 11: return 800;\r\n                    case 12: return 1000;\r\n                    case 13: return 1100;\r\n                    case 14: return 1250;\r\n                    case 15: return 1400;\r\n                    case 16: return 1600;\r\n                    case 17: return 2000;\r\n                    case 18: return 2100;\r\n                    case 19: return 2400;\r\n                    case 20: return 2800;\r\n                    default: return 0;\r\n                }\r\n            case 'medium':\r\n                switch (level) {\r\n                    case 1: return 50;\r\n                    case 2: return 100;\r\n                    case 3: return 150;\r\n                    case 4: return 250;\r\n                    case 5: return 500;\r\n                    case 6: return 600;\r\n                    case 7: return 750;\r\n                    case 8: return 900;\r\n                    case 9: return 1100;\r\n                    case 10: return 1200;\r\n                    case 11: return 1600;\r\n                    case 12: return 2000;\r\n                    case 13: return 2200;\r\n                    case 14: return 2500;\r\n                    case 15: return 2800;\r\n                    case 16: return 3200;\r\n                    case 17: return 3900;\r\n                    case 18: return 4200;\r\n                    case 19: return 4900;\r\n                    case 20: return 5700;\r\n                    default: return 0;\r\n                }\r\n            case 'hard':\r\n                switch (level) {\r\n                    case 1: return 75;\r\n                    case 2: return 150;\r\n                    case 3: return 225;\r\n                    case 4: return 375;\r\n                    case 5: return 750;\r\n                    case 6: return 900;\r\n                    case 7: return 1100;\r\n                    case 8: return 1400;\r\n                    case 9: return 1600;\r\n                    case 10: return 1900;\r\n                    case 11: return 2400;\r\n                    case 12: return 3000;\r\n                    case 13: return 3400;\r\n                    case 14: return 3800;\r\n                    case 15: return 4300;\r\n                    case 16: return 4800;\r\n                    case 17: return 5900;\r\n                    case 18: return 6300;\r\n                    case 19: return 7300;\r\n                    case 20: return 8500;\r\n                    default: return 0;\r\n                }\r\n            case 'deadly':\r\n                switch (level) {\r\n                    case 1: return 100;\r\n                    case 2: return 200;\r\n                    case 3: return 400;\r\n                    case 4: return 500;\r\n                    case 5: return 1100;\r\n                    case 6: return 1400;\r\n                    case 7: return 1700;\r\n                    case 8: return 2100;\r\n                    case 9: return 2400;\r\n                    case 10: return 2800;\r\n                    case 11: return 3600;\r\n                    case 12: return 4500;\r\n                    case 13: return 5100;\r\n                    case 14: return 5700;\r\n                    case 15: return 6400;\r\n                    case 16: return 7200;\r\n                    case 17: return 8800;\r\n                    case 18: return 9500;\r\n                    case 19: return 10900;\r\n                    case 20: return 12700;\r\n                    default: return 0;\r\n                }\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n\r\n    public static traitType(type: string): string {\r\n        switch (type) {\r\n            case 'trait':\r\n                return 'trait';\r\n            case 'action':\r\n                return 'action';\r\n            case 'legendary':\r\n                return 'legendary action';\r\n            case 'lair':\r\n                return 'lair action';\r\n            case 'regional':\r\n                return 'regional effect';\r\n            default:\r\n                return type;\r\n        }\r\n    }\r\n\r\n    public static nudgeChallenge(value: number, delta: number): number {\r\n        let result = 0;\r\n\r\n        switch (value) {\r\n            case 0:\r\n                if (delta === -1) {\r\n                    result = 0;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 0.125;\r\n                }\r\n                break;\r\n            case 0.125:\r\n                if (delta === -1) {\r\n                    result = 0;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 0.25;\r\n                }\r\n                break;\r\n            case 0.25:\r\n                if (delta === -1) {\r\n                    result = 0.125;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 0.5;\r\n                }\r\n                break;\r\n            case 0.5:\r\n                if (delta === -1) {\r\n                    result = 0.25;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 1;\r\n                }\r\n                break;\r\n            case 1:\r\n                if (delta === -1) {\r\n                    result = 0.5;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 2;\r\n                }\r\n                break;\r\n            default:\r\n                result = value + delta;\r\n                break;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public static conditionText(condition: Condition): string[] {\r\n        switch (condition.name) {\r\n            case 'blinded':\r\n                return [\r\n                    'a blinded creature can’t see and automatically fails any ability check that requires sight',\r\n                    'attack rolls against the creature have advantage, and the creature’s attack rolls have disadvantage'\r\n                ];\r\n            case 'charmed':\r\n                return [\r\n                    'a charmed creature can’t attack the charmer or target the charmer with harmful abilities or magical effects',\r\n                    'the charmer has advantage on any ability check to interact socially with the creature'\r\n                ];\r\n            case 'deafened':\r\n                return [\r\n                    'a deafened creature can’t hear and automatically fails any ability check that requires hearing.'\r\n                ];\r\n            case 'exhaustion': {\r\n                switch (condition.level) {\r\n                case 1:\r\n                    return [\r\n                        'disadvantage on ability checks'\r\n                    ];\r\n                case 2:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved'\r\n                    ];\r\n                case 3:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved',\r\n                        'disadvantage on attack rolls and saving throws'\r\n                    ];\r\n                case 4:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved',\r\n                        'disadvantage on attack rolls and saving throws',\r\n                        'hit point maximum halved'\r\n                    ];\r\n                case 5:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved',\r\n                        'disadvantage on attack rolls and saving throws',\r\n                        'hit point maximum halved',\r\n                        'speed reduced to 0'\r\n                    ];\r\n                case 6:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved',\r\n                        'disadvantage on attack rolls and saving throws',\r\n                        'hit point maximum halved',\r\n                        'speed reduced to 0',\r\n                        'death'\r\n                    ];\r\n                default:\r\n                    return [];\r\n                }\r\n            }\r\n            case 'frightened':\r\n                return [\r\n                    'a frightened creature has disadvantage on ability checks and attack rolls while the source of its fear is within line of sight',\r\n                    'the creature can’t willingly move closer to the source of its fear'\r\n                ];\r\n            case 'grappled':\r\n                return [\r\n                    'a grappled creature’s speed becomes 0, and it can’t benefit from any bonus to its speed',\r\n                    'the condition ends if the grappler is incapacitated',\r\n                    'the condition also ends if an effect removes the grappled creature from the reach of the grappler or grappling effect'\r\n                ];\r\n            case 'incapacitated':\r\n                return [\r\n                    'an incapacitated creature can’t take actions or reactions'\r\n                ];\r\n            case 'invisible':\r\n                return [\r\n                    'an invisible creature is impossible to see without the aid of magic or a special sense',\r\n                    'for the purpose of hiding, the creature is heavily obscured',\r\n                    'the creature’s location can be detected by any noise it makes or any tracks it leaves',\r\n                    'attack rolls against the creature have disadvantage, and the creature’s attack rolls have advantage'\r\n                ];\r\n            case 'paralyzed':\r\n                return [\r\n                    'a paralyzed creature is incapacitated (can’t take actions or reactions) and can’t move or speak',\r\n                    'the creature automatically fails strength and dexterity saving throws',\r\n                    'attack rolls against the creature have advantage',\r\n                    'any attack that hits the creature is a critical hit if the attacker is within 5 feet of the creature'\r\n                ];\r\n            case 'petrified':\r\n                return [\r\n                    /* tslint:disable-next-line:max-line-length */\r\n                    'a petrified creature is transformed, along with any nonmagical objects it is wearing or carrying, into a solid inanimate substance (usually stone)',\r\n                    'its weight increases by a factor of ten, and it ceases aging',\r\n                    'the creature is incapacitated (can’t take actions or reactions), can’t move or speak, and is unaware of its surroundings',\r\n                    'attack rolls against the creature have advantage',\r\n                    'the creature automatically fails strength and dexterity saving throws',\r\n                    'the creature has resistance to all damage',\r\n                    'the creature is immune to poison and disease, although a poison or disease already in its system is suspended, not neutralized'\r\n                ];\r\n            case 'poisoned':\r\n                return [\r\n                    'a poisoned creature has disadvantage on attack rolls and ability checks'\r\n                ];\r\n            case 'prone':\r\n                return [\r\n                    'a prone creature’s only movement option is to crawl, unless it stands up and thereby ends the condition',\r\n                    'the creature has disadvantage on attack rolls',\r\n                    /* tslint:disable-next-line:max-line-length */\r\n                    'an attack roll against the creature has advantage if the attacker is Within 5 feet of the creature; otherwise, the attack roll has disadvantage'\r\n                ];\r\n            case 'restrained':\r\n                return [\r\n                    'a restrained creature’s speed becomes 0, and it can’t benefit from any bonus to its speed',\r\n                    'attack rolls against the creature have advantage, and the creature’s attack rolls have disadvantage',\r\n                    'the creature has disadvantage on dexterity saving throws'\r\n                ];\r\n            case 'stunned':\r\n                return [\r\n                    'a stunned creature is incapacitated (can’t take actions or reactions), can’t move, and can speak only falteringly',\r\n                    'the creature automatically fails strength and dexterity saving throws',\r\n                    'attack rolls against the creature have advantage'\r\n                ];\r\n            case 'unconscious':\r\n                return [\r\n                    'an unconscious creature is incapacitated (can’t take actions or reactions), can’t move or speak, and is unaware of its surroundings',\r\n                    'the creature drops whatever its holding and falls prone',\r\n                    'the creature automatically fails strength and dexterity saving throws',\r\n                    'attack rolls against the creature have advantage',\r\n                    'any attack that hits the creature is a critical hit if the attacker is within 5 feet of the creature'\r\n                ];\r\n            case 'custom':\r\n                return [];\r\n            default:\r\n                return [];\r\n        }\r\n    }\r\n\r\n    public static conditionDurationText(condition: Condition, combat: Combat) {\r\n        if (condition.duration !== null) {\r\n            switch (condition.duration.type) {\r\n                case 'saves':\r\n                    const saveDuration = condition.duration as ConditionDurationSaves;\r\n                    let saveType = saveDuration.saveType.toString();\r\n                    if (saveType !== 'death') {\r\n                        saveType = saveType.toUpperCase();\r\n                    }\r\n                    const saves = saveDuration.count > 1 ? 'saves' : 'save';\r\n                    return 'until you make ' + saveDuration.count + ' ' + saveType + ' ' + saves + ' at dc ' + saveDuration.saveDC;\r\n                case 'combatant':\r\n                    const combatantDuration = condition.duration as ConditionDurationCombatant;\r\n                    const point = combatantDuration.point;\r\n                    const c = combat.combatants.find(cmb => cmb.id === combatantDuration.combatantID);\r\n                    const combatant = c ? (c.displayName || c.name || 'unnamed monster') + '\\'s' : 'someone\\'s';\r\n                    return 'until the ' + point + ' of ' + combatant + ' next turn';\r\n                case 'rounds':\r\n                    const roundsDuration = condition.duration as ConditionDurationRounds;\r\n                    const rounds = roundsDuration.count > 1 ? 'rounds' : 'round';\r\n                    return 'for ' + roundsDuration.count + ' ' + rounds;\r\n                default:\r\n                    return null;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public static getMonsterNames(encounter: Encounter | EncounterWave): { id: string, names: string[] }[] {\r\n        const monsterNames: any[] = [];\r\n        if (encounter) {\r\n            encounter.slots.forEach(slot => {\r\n                const names: any[] = [];\r\n                if (slot.count === 1) {\r\n                    names.push(slot.monsterName);\r\n                } else {\r\n                    for (let n = 0; n !== slot.count; ++n) {\r\n                        names.push(slot.monsterName + ' ' + (n + 1));\r\n                    }\r\n                }\r\n\r\n                monsterNames.push({\r\n                    id: slot.id,\r\n                    names: names\r\n                });\r\n            });\r\n        }\r\n\r\n        return monsterNames;\r\n    }\r\n}\r\n","import Utils from './utils';\r\n\r\nimport { Combat, CombatSetup, Notification } from '../models/combat';\r\nimport { Condition, ConditionDurationCombatant, ConditionDurationRounds, ConditionDurationSaves } from '../models/condition';\r\nimport { Encounter, EncounterSlot, EncounterWave } from '../models/encounter';\r\nimport { Map, MapFolio, MapItem } from '../models/map-folio';\r\nimport { Monster, MonsterGroup, Trait } from '../models/monster-group';\r\nimport { Party, PC } from '../models/party';\r\n\r\nexport default class Factory {\r\n\r\n    public static createParty(): Party {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            pcs: []\r\n        };\r\n    }\r\n\r\n    public static createPC(): PC {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'pc',\r\n            active: true,\r\n            player: '',\r\n            name: '',\r\n            race: '',\r\n            classes: '',\r\n            background: '',\r\n            level: 1,\r\n            languages: 'Common',\r\n            passiveInsight: 10,\r\n            passiveInvestigation: 10,\r\n            passivePerception: 10,\r\n            initiative: 10,\r\n            url: ''\r\n        };\r\n    }\r\n\r\n    public static createMonsterGroup(): MonsterGroup {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            monsters: []\r\n        };\r\n    }\r\n\r\n    public static createMonster(): Monster {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'monster',\r\n            name: '',\r\n            size: 'medium',\r\n            category: 'humanoid',\r\n            tag: '',\r\n            alignment: '',\r\n            challenge: 1,\r\n            abilityScores: {\r\n                str: 10,\r\n                dex: 10,\r\n                con: 10,\r\n                int: 10,\r\n                wis: 10,\r\n                cha: 10\r\n            },\r\n            ac: 10,\r\n            hpMax: 4,\r\n            hpTemp: 0,\r\n            hitDice: 1,\r\n            damage: {\r\n                resist: '',\r\n                vulnerable: '',\r\n                immune: ''\r\n            },\r\n            savingThrows: '',\r\n            speed: '',\r\n            skills: '',\r\n            senses: '',\r\n            languages: '',\r\n            equipment: '',\r\n            traits: [],\r\n            conditionImmunities: ''\r\n        };\r\n    }\r\n\r\n    public static createTrait(): Trait {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            usage: '',\r\n            type: 'action',\r\n            text: ''\r\n        };\r\n    }\r\n\r\n    public static createEncounter(): Encounter {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            slots: [],\r\n            waves: []\r\n        };\r\n    }\r\n\r\n    public static createEncounterSlot(): EncounterSlot {\r\n        return {\r\n            id: Utils.guid(),\r\n            monsterGroupName: '',\r\n            monsterName: '',\r\n            count: 1\r\n        };\r\n    }\r\n\r\n    public static createEncounterWave(): EncounterWave {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            slots: []\r\n        };\r\n    }\r\n\r\n    public static createMapFolio(): MapFolio {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            maps: []\r\n        };\r\n    }\r\n\r\n    public static createMap(): Map {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            items: []\r\n        };\r\n    }\r\n\r\n    public static createMapItem(): MapItem {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'tile',\r\n            x: 0,\r\n            y: 0,\r\n            width: 4,\r\n            height: 4,\r\n            terrain: null\r\n        };\r\n    }\r\n\r\n    public static createCombatSetup(): CombatSetup {\r\n        return {\r\n            partyID: null,\r\n            encounterID: null,\r\n            waveID: null,\r\n            folioID: null,\r\n            mapID: null,\r\n            monsterNames: [],\r\n            encounterInitMode: 'group'\r\n        };\r\n    }\r\n\r\n    public static createCombat(): Combat {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            encounterID: null,\r\n            combatants: [],\r\n            map: null,\r\n            round: 1,\r\n            notifications: [],\r\n            issues: [],\r\n            timestamp: null\r\n        };\r\n    }\r\n\r\n    public static createNotification(): Notification {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'condition-save',\r\n            condition: null,\r\n            combatant: null\r\n        };\r\n    }\r\n\r\n    public static createCondition(): Condition {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            level: 1,\r\n            text: null,\r\n            duration: null\r\n        };\r\n    }\r\n\r\n    public static createConditionDurationSaves(): ConditionDurationSaves {\r\n        return {\r\n            type: 'saves',\r\n            count: 1,\r\n            saveType: 'str',\r\n            saveDC: 10,\r\n            point: 'start'\r\n        };\r\n    }\r\n\r\n    public static createConditionDurationCombatant(): ConditionDurationCombatant {\r\n        return {\r\n            type: 'combatant',\r\n            point: 'start',\r\n            combatantID: null\r\n        };\r\n    }\r\n\r\n    public static createConditionDurationRounds(): ConditionDurationRounds {\r\n        return {\r\n            type: 'rounds',\r\n            count: 1\r\n        };\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    getHeading: () => (string | JSX.Element);\r\n    getContent: () => (string | JSX.Element);\r\n}\r\n\r\nexport default class InfoCard extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        getHeading: null,\r\n        getContent: null\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            let heading = null;\r\n            if (this.props.getHeading) {\r\n                heading = this.props.getHeading();\r\n            }\r\n\r\n            let content = null;\r\n            if (this.props.getContent) {\r\n                content = this.props.getContent();\r\n            }\r\n            if (!content) {\r\n                return null;\r\n            }\r\n\r\n            return (\r\n                <div className='card'>\r\n                    {heading}\r\n                    <div className='card-content'>\r\n                        {content}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport InfoCard from '../info-card';\r\n\r\nexport default class CombatManagerCard extends React.Component {\r\n    private getContent() {\r\n        return (\r\n            <div>\r\n                <div className='section'>here you can run a combat encounter by specifying a party and an encounter</div>\r\n                <div className='divider' />\r\n                <div className='section'>below you will see a list of encounters that you have paused</div>\r\n                <div className='section'>you can resume a paused combat by selecting it</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <InfoCard getContent={this.getContent}/>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport warning from '../../resources/images/warning.svg';\r\n\r\ninterface Props {\r\n    text: string;\r\n    callback: () => void;\r\n    details: string;\r\n    disabled: boolean;\r\n}\r\n\r\ninterface State {\r\n    pressed: boolean;\r\n}\r\n\r\nexport default class ConfirmButton extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        details: null,\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            pressed: false\r\n        };\r\n    }\r\n\r\n    private toggle() {\r\n        this.setState({\r\n            pressed: !this.state.pressed\r\n        });\r\n    }\r\n\r\n    private perform() {\r\n        this.toggle();\r\n        this.props.callback();\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let content = null;\r\n            if (this.state.pressed) {\r\n                content = (\r\n                    <div>\r\n                        <div className='title'>{this.props.text} - are you sure?</div>\r\n                        <img className='image' src={warning} alt='warning' />\r\n                        {this.props.details ? <div className='details'>{this.props.details}</div> : null}\r\n                        <div className='confirmation'>\r\n                            <div className='destructive' onClick={() => this.perform()}>yes</div>\r\n                            <div className='non-destructive' onClick={() => this.toggle()}>no</div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                content = (\r\n                    <div>\r\n                        <div className='title'>{this.props.text}</div>\r\n                        <img className='image' src={warning} alt='warning' />\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <button className={this.props.disabled ? 'disabled' : ''} onClick={() => this.toggle()}>\r\n                    {content}\r\n                </button>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport ellipsis from '../../resources/images/ellipsis.svg';\r\n\r\ninterface Props {\r\n    options: { id: string; text: string; disabled?: boolean }[];\r\n    select: (optionID: string) => void;\r\n    selectedID: string;\r\n    placeholder: string;\r\n    disabled: boolean;\r\n}\r\n\r\ninterface State {\r\n    open: boolean;\r\n}\r\n\r\nexport default class Dropdown extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        selectedID: null,\r\n        placeholder: 'select...',\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            open: false\r\n        };\r\n    }\r\n\r\n    private toggleOpen(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        this.setState({\r\n            open: !this.state.open\r\n        });\r\n    }\r\n\r\n    private select(optionID: string) {\r\n        this.setState({\r\n            open: false\r\n        });\r\n        this.props.select(optionID);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            if (this.props.options.length === 0) {\r\n                return null;\r\n            }\r\n\r\n            let style = this.props.disabled ? 'dropdown disabled' : 'dropdown';\r\n            const content = [];\r\n\r\n            let selectedText;\r\n            if (this.props.selectedID) {\r\n                const option: { id: string; text: string; disabled?: boolean } | undefined = this.props.options.find(o => o.id === this.props.selectedID);\r\n                if (option) {\r\n                    selectedText = option.text;\r\n                }\r\n            } else {\r\n                selectedText = /*this.props.text ||*/ this.props.placeholder;\r\n            }\r\n\r\n            content.push(\r\n                <div key='selection' className='dropdown-top' title={selectedText}>\r\n                    <div className='item-text'>{selectedText}</div>\r\n                    <img className='arrow' src={ellipsis} alt='arrow' />\r\n                </div>\r\n            );\r\n\r\n            if (this.state.open) {\r\n                style += ' open';\r\n\r\n                const items = this.props.options.map(option => {\r\n                    if (option.text === null) {\r\n                        return <div key={option.id} className='divider' />;\r\n                    } else {\r\n                        return (\r\n                            <DropdownOption\r\n                                key={option.id}\r\n                                option={option}\r\n                                selected={option.id === this.props.selectedID}\r\n                                select={optionID => this.select(optionID)}\r\n                            />\r\n                        );\r\n                    }\r\n                });\r\n\r\n                content.push(\r\n                    <div key='options' className='dropdown-options'>\r\n                        {items}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={style} onClick={e => this.toggleOpen(e)}>\r\n                    {content}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface DropdownOptionProps {\r\n    option: { id: string; text: string; disabled?: boolean };\r\n    selected: boolean;\r\n    select: (optionID: string) => void;\r\n}\r\n\r\nclass DropdownOption extends React.Component<DropdownOptionProps> {\r\n    private click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (!this.props.option.disabled) {\r\n            this.props.select(this.props.option.id);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'dropdown-option';\r\n            if (this.props.selected) {\r\n                style += ' selected';\r\n            }\r\n            if (this.props.option.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            return (\r\n                <div className={style} title={this.props.option.text} onClick={e => this.click(e)}>\r\n                    {this.props.option.text}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport arrow from '../../resources/images/down-arrow-black.svg';\r\n\r\ninterface Props {\r\n    text: string;\r\n    content: string | JSX.Element;\r\n    disabled: boolean;\r\n}\r\n\r\ninterface State {\r\n    expanded: boolean;\r\n}\r\n\r\nexport default class Expander extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            expanded: false\r\n        };\r\n    }\r\n\r\n    private toggle() {\r\n        this.setState({\r\n            expanded: !this.state.expanded\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = this.props.disabled ? 'expander disabled' : 'expander';\r\n            if (this.state.expanded) {\r\n                style += ' expanded';\r\n            }\r\n\r\n            let content = null;\r\n            if (this.state.expanded) {\r\n                content = (\r\n                    <div className='expander-content'>\r\n                        {this.props.content}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={style}>\r\n                    <div className='expander-header' onClick={() => this.toggle()}>\r\n                        <div className='expander-text'>{this.props.text}</div>\r\n                        <img className='expander-button' src={arrow} alt='arrow' />\r\n                    </div>\r\n                    {content}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport arrow from '../../resources/images/down-arrow-black.svg';\r\n\r\ninterface Props {\r\n    click: (dir: string, dir2: 'in' | 'out' | null) => void;\r\n    direction: 'out' | 'in' | 'both' | 'eight';\r\n    disabled: boolean;\r\n}\r\n\r\nexport default class Radial extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        direction: 'out',\r\n        disabled: false\r\n    };\r\n\r\n    private click(e: React.MouseEvent, dir: string, dir2: 'in' | 'out' | null = null) {\r\n        e.stopPropagation();\r\n        this.props.click(dir, dir2);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'radial ' + (this.props.direction || 'out');\r\n            if (this.props.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            const showOut = (this.props.direction === 'out') || (this.props.direction === 'both') || (this.props.direction === 'eight');\r\n            const showIn = (this.props.direction === 'in') || (this.props.direction === 'both');\r\n            const showDiag = (this.props.direction === 'eight');\r\n\r\n            return (\r\n                <div className={style}>\r\n                    <div className='empty' style={{ display: showDiag ? 'none' : 'inline-block' }} />\r\n                    <div className='btn diag' style={{ display: showDiag ? 'inline-block' : 'none' }}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(135deg)' }}\r\n                            alt='nw'\r\n                            onClick={e => this.click(e, 'NW')}\r\n                        />\r\n                    </div>\r\n                    <div className='btn'>\r\n                        <div>\r\n                            <img\r\n                                src={arrow}\r\n                                style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(180deg)' }}\r\n                                alt='n'\r\n                                onClick={e => this.click(e, 'N', 'out')}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <img\r\n                                src={arrow}\r\n                                style={{ display: showIn ? 'inline-block' : 'none' }}\r\n                                alt='n'\r\n                                onClick={e => this.click(e, 'N', 'in')}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className='empty' style={{ display: showDiag ? 'none' : 'inline-block' }} />\r\n                    <div className='btn diag' style={{ display: showDiag ? 'inline-block' : 'none' }}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(-135deg)' }}\r\n                            alt='ne'\r\n                            onClick={e => this.click(e, 'NE')}\r\n                        />\r\n                    </div>\r\n                    <div className='btn' style={{ padding: (showIn && showOut) ? '10px 0' : '0'}}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(90deg)' }}\r\n                            alt='w'\r\n                            onClick={e => this.click(e, 'W', 'out')}\r\n                        />\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showIn ? 'inline-block' : 'none', transform: 'rotate(-90deg)' }}\r\n                            alt='w'\r\n                            onClick={e => this.click(e, 'W', 'in')}\r\n                        />\r\n                    </div>\r\n                    <div className='empty' />\r\n                    <div className='btn' style={{ padding: (showIn && showOut) ? '10px 0' : '0'}}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showIn ? 'inline-block' : 'none', transform: 'rotate(90deg)' }}\r\n                            alt='e'\r\n                            onClick={e => this.click(e, 'E', 'in')}\r\n                        />\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(-90deg)' }}\r\n                            alt='e'\r\n                            onClick={e => this.click(e, 'E', 'out')}\r\n                        />\r\n                    </div>\r\n                    <div className='empty' style={{ display: showDiag ? 'none' : 'inline-block' }} />\r\n                    <div className='btn diag' style={{ display: showDiag ? 'inline-block' : 'none' }}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(45deg)' }}\r\n                            alt='sw'\r\n                            onClick={e => this.click(e, 'SW')}\r\n                        />\r\n                    </div>\r\n                    <div className='btn'>\r\n                        <div>\r\n                            <img\r\n                                src={arrow}\r\n                                style={{ display: showIn ? 'inline-block' : 'none', transform: 'rotate(180deg)' }}\r\n                                alt='s'\r\n                                onClick={e => this.click(e, 'S', 'in')}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <img\r\n                                src={arrow}\r\n                                style={{ display: showOut ? 'inline-block' : 'none' }}\r\n                                alt='s'\r\n                                onClick={e => this.click(e, 'S', 'out')}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className='empty' style={{ display: showDiag ? 'none' : 'inline-block' }} />\r\n                    <div className='btn diag' style={{ display: showDiag ? 'inline-block' : 'none' }}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(-45deg)' }}\r\n                            alt='se'\r\n                            onClick={e => this.click(e, 'SE')}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport minus from '../../resources/images/minus.svg';\r\nimport plus from '../../resources/images/plus.svg';\r\n\r\ninterface Props {\r\n    source: any;\r\n    name: string;\r\n    nudgeValue: (delta: number) => void;\r\n    label: string;\r\n    disabled: boolean;\r\n    factors: number[];\r\n    display: ((value: number) => string) | null;\r\n}\r\n\r\nexport default class Spin extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        label: null,\r\n        disabled: false,\r\n        factors: null,\r\n        display: null\r\n    };\r\n\r\n    private click(e: React.MouseEvent, delta: number) {\r\n        e.stopPropagation();\r\n        this.props.nudgeValue(delta);\r\n    }\r\n\r\n    private touchEnd(e: React.TouchEvent, delta: number) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        this.props.nudgeValue(delta);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'info-value';\r\n            let value = this.props.source[this.props.name];\r\n            if (value === 0) {\r\n                style += ' dimmed';\r\n            }\r\n\r\n            if (this.props.display) {\r\n                value = this.props.display(value);\r\n            }\r\n\r\n            const minusBtns: JSX.Element[] = [];\r\n            const plusBtns: JSX.Element[] = [];\r\n\r\n            if (this.props.factors) {\r\n                this.props.factors.forEach(factor => {\r\n                    minusBtns.push(\r\n                        <div\r\n                            key={'minus' + factor}\r\n                            className='spin-button factor'\r\n                            onTouchEnd={e => this.touchEnd(e, -1 * factor)}\r\n                            onClick={e => this.click(e, -1 * factor)}\r\n                        >\r\n                            {'-' + factor}\r\n                        </div>\r\n                    );\r\n\r\n                    plusBtns.push(\r\n                        <div\r\n                            key={'plus' + factor}\r\n                            className='spin-button factor'\r\n                            onTouchEnd={e => this.touchEnd(e, +1 * factor)}\r\n                            onClick={e => this.click(e, +1 * factor)}\r\n                        >\r\n                            {'+' + factor}\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                minusBtns.reverse();\r\n            } else {\r\n                minusBtns.push(\r\n                    <div key='minus1' className='spin-button' onTouchEnd={e => this.touchEnd(e, -1)} onClick={e => this.click(e, -1)}>\r\n                        <img className='image' src={minus} alt='minus' />\r\n                    </div>\r\n                );\r\n\r\n                plusBtns.push(\r\n                    <div key='plus1' className='spin-button' onTouchEnd={e => this.touchEnd(e, +1)} onClick={e => this.click(e, +1)}>\r\n                        <img className='image' src={plus} alt='plus' />\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            const infoWidth = 80 * (this.props.factors ? this.props.factors.length : 1);\r\n\r\n            return (\r\n                <div className={this.props.disabled ? 'spin disabled' : 'spin'}>\r\n                    <div className='minus'>\r\n                        {minusBtns}\r\n                    </div>\r\n                    <div className='info' style={{ width: 'calc(100% - ' + infoWidth + 'px)' }}>\r\n                        <div className='info-label'>{this.props.label}</div>\r\n                        <div className={style}>{value}</div>\r\n                    </div>\r\n                    <div className='plus'>\r\n                        {plusBtns}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Monster } from '../../models/monster-group';\r\n\r\nimport Spin from '../controls/spin';\r\n\r\ninterface Props {\r\n    combatant: Monster;\r\n    edit: boolean;\r\n    nudgeValue: (combatant: Monster, field: string, delta: number) => void;\r\n}\r\n\r\ninterface State {\r\n    showAbilityScores: boolean;\r\n}\r\n\r\nexport default class AbilityScorePanel extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        edit: null,\r\n        nudgeValue: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showAbilityScores: false\r\n        };\r\n    }\r\n\r\n    private toggleAbilityScores() {\r\n        this.setState({\r\n            showAbilityScores: !this.state.showAbilityScores\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let result = null;\r\n\r\n            if (this.props.edit) {\r\n                result = (\r\n                    <div>\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='str'\r\n                            label='strength'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.str', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='dex'\r\n                            label='dexterity'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.dex', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='con'\r\n                            label='constitution'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.con', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='int'\r\n                            label='intelligence'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.int', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='wis'\r\n                            label='wisdom'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.wis', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='cha'\r\n                            label='charisma'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.cha', delta)}\r\n                        />\r\n                    </div>\r\n                );\r\n            } else {\r\n                result = (\r\n                    <div className='ability-scores' onClick={() => this.toggleAbilityScores()}>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>str</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.str\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.str)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>dex</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.dex\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.dex)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>con</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.con\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.con)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>int</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.int\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.int)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>wis</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.wis\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.wis)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>cha</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.cha\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.cha)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return result;\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combat, Combatant } from '../../models/combat';\r\nimport { Condition } from '../../models/condition';\r\n\r\nimport Expander from '../controls/expander';\r\nimport Spin from '../controls/spin';\r\n\r\ninterface Props {\r\n    combatant: Combatant;\r\n    combat: Combat;\r\n    nudgeConditionValue: (condition: Condition, field: string, delta: number) => void;\r\n    addCondition: () => void;\r\n    editCondition: (condition: Condition) => void;\r\n    removeCondition: (conditionID: string) => void;\r\n}\r\n\r\nexport default class ConditionsPanel extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const conditions = [];\r\n            if (this.props.combatant.conditions) {\r\n                for (let n = 0; n !== this.props.combatant.conditions.length; ++n) {\r\n                    const c = this.props.combatant.conditions[n];\r\n                    conditions.push(\r\n                        <ConditionPanel\r\n                            key={n}\r\n                            condition={c}\r\n                            combat={this.props.combat}\r\n                            nudgeConditionValue={(condition, type, delta) => this.props.nudgeConditionValue(condition, type, delta)}\r\n                            editCondition={condition => this.props.editCondition(condition)}\r\n                            removeCondition={conditionID => this.props.removeCondition(conditionID)}\r\n                        />\r\n                    );\r\n                }\r\n            }\r\n\r\n            return (\r\n                <div className='section'>\r\n                    {conditions}\r\n                    <button onClick={() => this.props.addCondition()}>add a condition</button>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface ConditionPanelProps {\r\n    condition: Condition;\r\n    combat: Combat;\r\n    nudgeConditionValue: (condition: Condition, field: string, delta: number) => void;\r\n    editCondition: (condition: Condition) => void;\r\n    removeCondition: (conditionID: string) => void;\r\n}\r\n\r\nclass ConditionPanel extends React.Component<ConditionPanelProps> {\r\n    public render() {\r\n        try {\r\n            let name: string = this.props.condition.name || 'condition';\r\n            if (this.props.condition.name === 'exhaustion') {\r\n                name += ' (' + this.props.condition.level + ')';\r\n            }\r\n            if ((this.props.condition.name === 'custom') && (this.props.condition.text !== null)) {\r\n                name = this.props.condition.text;\r\n            }\r\n\r\n            if (this.props.condition.duration !== null) {\r\n                name += ' ' + Utils.conditionDurationText(this.props.condition, this.props.combat);\r\n            }\r\n\r\n            const description = [];\r\n            if (this.props.condition.name === 'exhaustion') {\r\n                description.push(\r\n                    <div key='level' className='section'>\r\n                        <Spin\r\n                            source={this.props.condition}\r\n                            name='level'\r\n                            label='level'\r\n                            nudgeValue={delta => this.props.nudgeConditionValue(this.props.condition, 'level', delta)}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n            const text = Utils.conditionText(this.props.condition);\r\n            for (let n = 0; n !== text.length; ++n) {\r\n                description.push(<div key={n} className='section'>{text[n]}</div>);\r\n            }\r\n\r\n            return (\r\n                <Expander\r\n                    text={name}\r\n                    content={(\r\n                        <div>\r\n                            {description}\r\n                            <div className='divider' />\r\n                            <button onClick={() => this.props.editCondition(this.props.condition)}>edit</button>\r\n                            <button onClick={() => this.props.removeCondition(this.props.condition.id)}>remove</button>\r\n                        </div>\r\n                    )}\r\n                />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Monster, Trait } from '../../models/monster-group';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport Expander from '../controls/expander';\r\n\r\ninterface Props {\r\n    combatant: Monster;\r\n    mode: 'view' | 'edit' | 'template';\r\n    addTrait: (traitType: 'trait' | 'action' | 'legendary' | 'lair' | 'regional') => void;\r\n    copyTrait: (trait: Trait) => void;\r\n    removeTrait: (trait: Trait) => void;\r\n    changeTrait: (trait: Trait, field: 'name' | 'usage' | 'text', value: string) => void;\r\n}\r\n\r\nexport default class TraitsPanel extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        mode: 'view',\r\n        addTrait: null,\r\n        copyTrait: null,\r\n        removeTrait: null,\r\n        changeTrait: null\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            const traits = [];\r\n            const actions = [];\r\n            const legendaryActions = [];\r\n            const lairActions = [];\r\n            const regionalEffects = [];\r\n\r\n            for (let n = 0; n !== this.props.combatant.traits.length; ++n) {\r\n                const a = this.props.combatant.traits[n];\r\n                const item = (\r\n                    <TraitPanel\r\n                        key={a.id}\r\n                        trait={a}\r\n                        mode={this.props.mode}\r\n                        changeTrait={(action, type, value) => this.props.changeTrait(action, type, value)}\r\n                        removeTrait={action => this.props.removeTrait(action)}\r\n                        copyTrait={action => this.props.copyTrait(action)}\r\n                    />\r\n                );\r\n\r\n                switch (a.type) {\r\n                    case 'trait':\r\n                        traits.push(item);\r\n                        break;\r\n                    case 'action':\r\n                        actions.push(item);\r\n                        break;\r\n                    case 'legendary':\r\n                        legendaryActions.push(item);\r\n                        break;\r\n                    case 'lair':\r\n                        lairActions.push(item);\r\n                        break;\r\n                    case 'regional':\r\n                        regionalEffects.push(item);\r\n                        break;\r\n                    default:\r\n                        // Do nothing\r\n                        break;\r\n                }\r\n            }\r\n\r\n            if (this.props.mode === 'edit') {\r\n                traits.push(\r\n                    <button key='add' onClick={() => this.props.addTrait('trait')}>add a new trait</button>\r\n                );\r\n                actions.push(\r\n                    <button key='add' onClick={() => this.props.addTrait('action')}>add a new action</button>\r\n                );\r\n                legendaryActions.push(\r\n                    <button key='add' onClick={() => this.props.addTrait('legendary')}>add a new legendary action</button>\r\n                );\r\n                lairActions.push(\r\n                    <button key='add' onClick={() => this.props.addTrait('lair')}>add a new lair action</button>\r\n                );\r\n                regionalEffects.push(\r\n                    <button key='add' onClick={() => this.props.addTrait('regional')}>add a new regional effect</button>\r\n                );\r\n\r\n                return (\r\n                    <div className='row collapse'>\r\n                        <div className='columns small-4 medium-4 large-4 list-column'>\r\n                            <div className='section subheading'>traits</div>\r\n                            {traits}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 list-column'>\r\n                            <div className='section subheading'>actions</div>\r\n                            {actions}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 list-column'>\r\n                            <div className='section subheading'>legendary actions</div>\r\n                            {legendaryActions}\r\n                            <div className='section subheading'>lair actions</div>\r\n                            {lairActions}\r\n                            <div className='section subheading'>regional effects</div>\r\n                            {regionalEffects}\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div>\r\n                    <div style={{ display: traits.length > 0 ? '' : 'none' }}>\r\n                        <div className='section subheading'>traits</div>\r\n                        {traits}\r\n                    </div>\r\n                    <div style={{ display: actions.length > 0 ? '' : 'none' }}>\r\n                        <div className='section subheading'>actions</div>\r\n                        {actions}\r\n                    </div>\r\n                    <div style={{ display: legendaryActions.length > 0 ? '' : 'none' }}>\r\n                        <div className='section subheading'>legendary actions</div>\r\n                        {legendaryActions}\r\n                    </div>\r\n                    <div style={{ display: lairActions.length > 0 ? '' : 'none' }}>\r\n                        <div className='section subheading'>lair actions</div>\r\n                        {lairActions}\r\n                    </div>\r\n                    <div style={{ display: regionalEffects.length > 0 ? '' : 'none' }}>\r\n                        <div className='section subheading'>regional effects</div>\r\n                        {regionalEffects}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface TraitPanelProps {\r\n    trait: Trait;\r\n    mode: 'view' | 'edit' | 'template';\r\n    changeTrait: (trait: Trait, field: 'name' | 'usage' | 'text', value: string) => void;\r\n    copyTrait: (trait: Trait) => void;\r\n    removeTrait: (trait: Trait) => void;\r\n}\r\n\r\nclass TraitPanel extends React.Component<TraitPanelProps> {\r\n    public render() {\r\n        try {\r\n            let heading = this.props.trait.name || 'unnamed ' + Utils.traitType(this.props.trait.type);\r\n            if (this.props.trait.usage) {\r\n                heading += ' (' + this.props.trait.usage + ')';\r\n            }\r\n\r\n            switch (this.props.mode) {\r\n                case 'view':\r\n                    return (\r\n                        <div key={this.props.trait.id} className='section trait'>\r\n                            <b>{heading}</b> {this.props.trait.text}\r\n                        </div>\r\n                    );\r\n                case 'edit':\r\n                    const details = (\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='name'\r\n                                value={this.props.trait.name}\r\n                                onChange={event => this.props.changeTrait(this.props.trait, 'name', event.target.value)}\r\n                            />\r\n                            <input\r\n                                type='text'\r\n                                placeholder='usage'\r\n                                value={this.props.trait.usage}\r\n                                onChange={event => this.props.changeTrait(this.props.trait, 'usage', event.target.value)}\r\n                            />\r\n                            <textarea\r\n                                placeholder='details'\r\n                                value={this.props.trait.text}\r\n                                onChange={event => this.props.changeTrait(this.props.trait, 'text', event.target.value)}\r\n                            />\r\n                            <div className='divider' />\r\n                            <ConfirmButton text='delete' callback={() => this.props.removeTrait(this.props.trait)} />\r\n                        </div>\r\n                    );\r\n\r\n                    return (\r\n                        <Expander\r\n                            text={this.props.trait.name || 'unnamed ' + Utils.traitType(this.props.trait.type)}\r\n                            content={details}\r\n                        />\r\n                    );\r\n                case 'template':\r\n                    return (\r\n                        <div key={this.props.trait.id} className='section trait'>\r\n                            <b>{heading}</b> {this.props.trait.text}\r\n                            <button onClick={() => this.props.copyTrait(this.props.trait)}>copy</button>\r\n                        </div>\r\n                    );\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combat, Combatant } from '../../models/combat';\r\nimport { Condition } from '../../models/condition';\r\nimport { Encounter, EncounterSlot, EncounterWave } from '../../models/encounter';\r\nimport { Monster, MonsterGroup, Trait } from '../../models/monster-group';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport Dropdown from '../controls/dropdown';\r\nimport Expander from '../controls/expander';\r\nimport Radial from '../controls/radial';\r\nimport Spin from '../controls/spin';\r\nimport AbilityScorePanel from '../panels/ability-score-panel';\r\nimport ConditionsPanel from '../panels/conditions-panel';\r\nimport TraitsPanel from '../panels/traits-panel';\r\nimport InfoCard from './info-card';\r\n\r\nimport arrow from '../../resources/images/down-arrow.svg';\r\n\r\ninterface Props {\r\n    combatant: Monster | (Monster & Combatant);\r\n    mode: string;\r\n    library: MonsterGroup[];\r\n    changeValue: (monster: Monster, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, delta: number) => void;\r\n    // Library\r\n    editMonster: (monster: Monster) => void;\r\n    removeMonster: (monster: Monster) => void;\r\n    cloneMonster: (monster: Monster, name: string) => void;\r\n    moveToGroup: (monster: Monster, group: string) => void;\r\n    copyTrait: (trait: Trait) => void;\r\n    // Encounter builder\r\n    encounter: Encounter;\r\n    slot: EncounterSlot;\r\n    addEncounterSlot: (monster: Monster, waveID: string | null) => void;\r\n    removeEncounterSlot: (slot: EncounterSlot) => void;\r\n    // Combat\r\n    combat: Combat;\r\n    makeCurrent: (combatant: Combatant) => void;\r\n    makeActive: (combatant: Combatant) => void;\r\n    makeDefeated: (combatant: Combatant) => void;\r\n    endTurn: (combatant: Combatant) => void;\r\n    mapAdd: (combatant: Combatant) => void;\r\n    mapMove: (combatant: Combatant, dir: string) => void;\r\n    mapRemove: (combatant: Combatant) => void;\r\n    removeCombatant: (combatant: Combatant) => void;\r\n    changeHP: (combatant: Combatant, hp: number, tempHP: number) => void;\r\n    addCondition: (combatant: Combatant) => void;\r\n    editCondition: (combatant: Combatant, condition: Condition) => void;\r\n    removeCondition: (combatant: Combatant, conditionID: string) => void;\r\n    nudgeConditionValue: (condition: Condition, field: string, delta: number) => void;\r\n}\r\n\r\ninterface State {\r\n    showDetails: boolean;\r\n    cloneName: string;\r\n    damageOrHealing: number;\r\n}\r\n\r\nexport default class MonsterCard extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        library: null,\r\n        changeValue: null,\r\n        nudgeValue: null,\r\n        editMonster: null,\r\n        removeMonster: null,\r\n        cloneMonster: null,\r\n        moveToGroup: null,\r\n        copyTrait: null,\r\n        encounter: null,\r\n        slot: null,\r\n        addEncounterSlot: null,\r\n        removeEncounterSlot: null,\r\n        combat: null,\r\n        makeCurrent: null,\r\n        makeActive: null,\r\n        makeDefeated: null,\r\n        endTurn: null,\r\n        mapAdd: null,\r\n        mapMove: null,\r\n        mapRemove: null,\r\n        removeCombatant: null,\r\n        changeHP: null,\r\n        addCondition: null,\r\n        editCondition: null,\r\n        removeCondition: null,\r\n        nudgeConditionValue: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showDetails: false,\r\n            cloneName: props.combatant.name + ' copy',\r\n            damageOrHealing: 0\r\n        };\r\n    }\r\n\r\n    private setCloneName(cloneName: string) {\r\n        this.setState({\r\n            cloneName: cloneName\r\n        });\r\n    }\r\n\r\n    private toggleDetails() {\r\n        this.setState({\r\n            showDetails: !this.state.showDetails\r\n        });\r\n    }\r\n\r\n    private setDamage(value: number) {\r\n        this.setState({\r\n            damageOrHealing: value\r\n        });\r\n    }\r\n\r\n    private nudgeDamage(delta: number) {\r\n        this.setState({\r\n            damageOrHealing: Math.max(this.state.damageOrHealing + delta, 0)\r\n        });\r\n    }\r\n\r\n    private heal() {\r\n        const combatant = this.props.combatant as Combatant;\r\n\r\n        let hp = (combatant.hp ? combatant.hp : 0) + this.state.damageOrHealing;\r\n        hp = Math.min(hp, this.props.combatant.hpMax);\r\n\r\n        this.setState({\r\n            damageOrHealing: 0\r\n        }, () => {\r\n            this.props.changeHP(combatant, hp, this.props.combatant.hpTemp);\r\n        });\r\n    }\r\n\r\n    private damage() {\r\n        const combatant = this.props.combatant as Combatant;\r\n\r\n        let hp = (combatant.hp ? combatant.hp : 0);\r\n        let temp = this.props.combatant.hpTemp;\r\n\r\n        let damage = this.state.damageOrHealing;\r\n\r\n        // Take damage off temp HP first\r\n        const val = Math.min(damage, temp);\r\n        damage -= val;\r\n        temp -= val;\r\n\r\n        // Take the rest off HP\r\n        hp -= damage;\r\n        hp = Math.max(hp, 0);\r\n\r\n        this.setState({\r\n            damageOrHealing: 0\r\n        }, () => {\r\n            this.props.changeHP(combatant, hp, temp);\r\n        });\r\n    }\r\n\r\n    private description() {\r\n        let sizeAndType = (this.props.combatant.size + ' ' + this.props.combatant.category).toLowerCase();\r\n        if (this.props.combatant.tag) {\r\n            sizeAndType += ' (' + this.props.combatant.tag.toLowerCase() + ')';\r\n        }\r\n        sizeAndType += ', ';\r\n\r\n        let align = '';\r\n        if (this.props.combatant.alignment) {\r\n            align = this.props.combatant.alignment.toLowerCase() + ', ';\r\n        }\r\n\r\n        const cr = 'cr ' + Utils.challenge(this.props.combatant.challenge);\r\n\r\n        return sizeAndType + align + cr;\r\n    }\r\n\r\n    private monsterIsInWave(wave: EncounterWave) {\r\n        return wave.slots.some(s => {\r\n            const group = this.props.library.find(g => g.monsters.includes(this.props.combatant));\r\n            return !!group && (s.monsterGroupName === group.name) && (s.monsterName === this.props.combatant.name);\r\n        });\r\n    }\r\n\r\n    private getHP() {\r\n        if (this.props.combatant.hitDice === 0) {\r\n            return this.props.combatant.hpMax;\r\n        }\r\n\r\n        const die = Utils.hitDieType(this.props.combatant.size);\r\n        const conMod = Utils.modifierValue(this.props.combatant.abilityScores.con) * this.props.combatant.hitDice;\r\n        let conModStr = '';\r\n        if (conMod > 0) {\r\n            conModStr = ' +' + conMod;\r\n        }\r\n        if (conMod < 0) {\r\n            conModStr = ' ' + conMod;\r\n        }\r\n        return this.props.combatant.hpMax + ' (' + this.props.combatant.hitDice + 'd' + die + conModStr + ')';\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const options = [];\r\n            if (this.props.mode.indexOf('no-buttons') === -1) {\r\n                if (this.props.mode.indexOf('view') !== -1) {\r\n                    if (this.props.mode.indexOf('editable') !== -1) {\r\n                        options.push(\r\n                            <button key='edit' onClick={() => this.props.editMonster(this.props.combatant)}>edit monster</button>\r\n                        );\r\n\r\n                        options.push(\r\n                            <Expander\r\n                                key='clone'\r\n                                text='clone monster'\r\n                                content={\r\n                                    <div>\r\n                                        <input\r\n                                            type='text'\r\n                                            placeholder='monster name'\r\n                                            value={this.state.cloneName}\r\n                                            onChange={event => this.setCloneName(event.target.value)}\r\n                                        />\r\n                                        <button onClick={() => this.props.cloneMonster(this.props.combatant, this.state.cloneName)}>create copy</button>\r\n                                    </div>\r\n                                }\r\n                            />\r\n                        );\r\n\r\n                        const groupOptions: { id: string, text: string }[] = [];\r\n                        this.props.library.forEach(group => {\r\n                            if (group.monsters.indexOf(this.props.combatant) === -1) {\r\n                                groupOptions.push({\r\n                                    id: group.id,\r\n                                    text: group.name\r\n                                });\r\n                            }\r\n                        });\r\n                        options.push(\r\n                            <Dropdown\r\n                                key='move'\r\n                                options={groupOptions}\r\n                                placeholder='move to group...'\r\n                                select={optionID => this.props.moveToGroup(this.props.combatant, optionID)}\r\n                            />\r\n                        );\r\n\r\n                        options.push(<ConfirmButton key='remove' text='delete monster' callback={() => this.props.removeMonster(this.props.combatant)} />);\r\n                    }\r\n                    if (this.props.mode.indexOf('encounter') !== -1) {\r\n                        if (this.props.slot) {\r\n                            // This card is in an encounter or a wave\r\n                            options.push(\r\n                                <button key='remove' onClick={() => this.props.removeEncounterSlot(this.props.slot)}>\r\n                                    remove from encounter\r\n                                </button>\r\n                            );\r\n                        } else {\r\n                            let canAdd = false;\r\n                            // This card is in the library list\r\n                            if (!this.monsterIsInWave(this.props.encounter)) {\r\n                                options.push(\r\n                                    <button key='add encounter' onClick={() => this.props.addEncounterSlot(this.props.combatant, null)}>\r\n                                        add to encounter\r\n                                    </button>\r\n                                );\r\n                                canAdd = true;\r\n                            }\r\n                            this.props.encounter.waves.forEach(wave => {\r\n                                if (!this.monsterIsInWave(wave)) {\r\n                                    options.push(\r\n                                        <button key={'add ' + wave.id} onClick={() => this.props.addEncounterSlot(this.props.combatant, wave.id)}>\r\n                                            add to {wave.name}\r\n                                        </button>\r\n                                    );\r\n                                    canAdd = true;\r\n                                }\r\n                            });\r\n                            // If we can't add it anywhere, don't show it\r\n                            if (!canAdd) {\r\n                                return (\r\n                                    <InfoCard\r\n                                        getHeading={() => {\r\n                                            return (\r\n                                                <div className='heading'>\r\n                                                    <div className='title'>{this.props.combatant.name}</div>\r\n                                                </div>\r\n                                            );\r\n                                        }}\r\n                                        getContent={() => {\r\n                                            return (\r\n                                                <div className='section centered'>\r\n                                                    <i>this monster is already part of this encounter</i>\r\n                                                </div>\r\n                                            );\r\n                                        }}\r\n                                    />\r\n                                );\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (this.props.mode.indexOf('combat') !== -1) {\r\n                    const combatant = this.props.combatant as Combatant;\r\n\r\n                    if (this.props.mode.indexOf('tactical') !== -1) {\r\n                        if (this.props.mode.indexOf('on-map') !== -1) {\r\n                            options.push(\r\n                                <div key='mapMove' className='section centered'>\r\n                                    <Radial\r\n                                        direction='eight'\r\n                                        click={dir => this.props.mapMove(combatant, dir)}\r\n                                    />\r\n                                </div>\r\n                            );\r\n                            options.push(\r\n                                <Spin\r\n                                    key='altitude'\r\n                                    source={this.props.combatant}\r\n                                    name='altitude'\r\n                                    label='altitude'\r\n                                    display={value => value + ' ft.'}\r\n                                    nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'altitude', delta * 5)}\r\n                                />\r\n                            );\r\n                            options.push(<button key='mapRemove' onClick={() => this.props.mapRemove(combatant)}>remove from map</button>);\r\n                        }\r\n                        if (this.props.mode.indexOf('off-map') !== -1) {\r\n                            options.push(<button key='mapAdd' onClick={() => this.props.mapAdd(combatant)}>add to map</button>);\r\n                        }\r\n                        options.push(<div key='tactical-div' className='divider' />);\r\n                    }\r\n                    if (combatant.pending && !combatant.active && !combatant.defeated) {\r\n                        options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                    }\r\n                    if (!combatant.pending && combatant.active && !combatant.defeated) {\r\n                        if (combatant.current) {\r\n                            options.push(<button key='endTurn' onClick={() => this.props.endTurn(combatant)}>end turn</button>);\r\n                            options.push(<button key='makeDefeated' onClick={() => this.props.makeDefeated(combatant)}>mark as defeated and end turn</button>);\r\n                        } else {\r\n                            options.push(<button key='makeCurrent' onClick={() => this.props.makeCurrent(combatant)}>start turn</button>);\r\n                            options.push(<button key='makeDefeated' onClick={() => this.props.makeDefeated(combatant)}>mark as defeated</button>);\r\n                            options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                        }\r\n                    }\r\n                    if (!combatant.pending && !combatant.active && combatant.defeated) {\r\n                        options.push(<button key='makeActive' onClick={() => this.props.makeActive(combatant)}>mark as active</button>);\r\n                        options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                    }\r\n                    options.push(\r\n                        <Expander\r\n                            key='rename'\r\n                            text='change name'\r\n                            content={(\r\n                                <div>\r\n                                    <input\r\n                                        type='text'\r\n                                        value={combatant.displayName}\r\n                                        onChange={event => this.props.changeValue(this.props.combatant, 'displayName', event.target.value)}\r\n                                    />\r\n                                </div>\r\n                            )}\r\n                        />\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf('template') !== -1) {\r\n                    // None\r\n                }\r\n            }\r\n\r\n            let stats = null;\r\n            if (this.props.mode.indexOf('view') !== -1) {\r\n                let slotSection = null;\r\n                if (this.props.slot) {\r\n                    slotSection = (\r\n                        <div>\r\n                            <div className='divider' />\r\n                            <Spin\r\n                                source={this.props.slot}\r\n                                name='count'\r\n                                label='count'\r\n                                nudgeValue={delta => this.props.nudgeValue(this.props.slot, 'count', delta)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                let details = null;\r\n                if (this.state.showDetails) {\r\n                    details = (\r\n                        <div>\r\n                            <div className='divider' />\r\n                            <div className='section'>\r\n                                <b>ac</b> {this.props.combatant.ac}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.hpMax !== 0 ? '' : 'none' }}>\r\n                                <b>hp</b> {this.getHP()}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.speed !== '' ? '' : 'none' }}>\r\n                                <b>speed</b> {this.props.combatant.speed}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <AbilityScorePanel combatant={this.props.combatant} />\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.savingThrows !== '' ? '' : 'none' }}>\r\n                                <b>saving throws</b> {this.props.combatant.savingThrows}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.skills !== '' ? '' : 'none' }}>\r\n                                <b>skills</b> {this.props.combatant.skills}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.damage.resist !== '' ? '' : 'none' }}>\r\n                                <b>damage resistances</b> {this.props.combatant.damage.resist}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.damage.vulnerable !== '' ? '' : 'none' }}>\r\n                                <b>damage vulnerabilities</b> {this.props.combatant.damage.vulnerable}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.damage.immune !== '' ? '' : 'none' }}>\r\n                                <b>damage immunities</b> {this.props.combatant.damage.immune}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.conditionImmunities !== '' ? '' : 'none' }}>\r\n                                <b>condition immunities</b> {this.props.combatant.conditionImmunities}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.senses !== '' ? '' : 'none' }}>\r\n                                <b>senses</b> {this.props.combatant.senses}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.languages !== '' ? '' : 'none' }}>\r\n                                <b>languages</b> {this.props.combatant.languages}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.equipment !== '' ? '' : 'none' }}>\r\n                                <b>equipment</b> {this.props.combatant.equipment}\r\n                            </div>\r\n                            <div className='divider' />\r\n                            <TraitsPanel combatant={this.props.combatant} />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                stats = (\r\n                    <div className='stats'>\r\n                        <div className='section centered'>\r\n                            <i>{this.description()}</i>\r\n                        </div>\r\n                        {slotSection}\r\n                        {details}\r\n                    </div>\r\n                );\r\n            }\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                stats = (\r\n                    <div className='stats'>\r\n                        <div className='section centered'>\r\n                            <i>{this.description()}</i>\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <Spin\r\n                            source={this.props.combatant}\r\n                            name='hp'\r\n                            label='hit points'\r\n                            factors={[1, 10]}\r\n                            nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'hp', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant}\r\n                            name='hpTemp'\r\n                            label='temp hp'\r\n                            factors={[1, 10]}\r\n                            nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'hpTemp', delta)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <Spin\r\n                            source={this.state}\r\n                            name='damageOrHealing'\r\n                            factors={[1, 10]}\r\n                            nudgeValue={delta => this.nudgeDamage(delta)}\r\n                        />\r\n                        <div className={this.state.damageOrHealing > 0 ? '' : 'disabled'}>\r\n                            <button className='damage-btn' onClick={() => this.heal()}>heal</button>\r\n                            <button className='damage-btn' onClick={() => this.setDamage(0)}>reset</button>\r\n                            <button className='damage-btn' onClick={() => this.damage()}>damage</button>\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.damage.resist !== '' ? '' : 'none' }}>\r\n                            <b>damage resistances</b> {this.props.combatant.damage.resist}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.damage.vulnerable !== '' ? '' : 'none' }}>\r\n                            <b>damage vulnerabilities</b> {this.props.combatant.damage.vulnerable}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.damage.immune !== '' ? '' : 'none' }}>\r\n                            <b>damage immunities</b> {this.props.combatant.damage.immune}\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='section'>\r\n                            <AbilityScorePanel combatant={this.props.combatant} />\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.ac !== 0 ? '' : 'none' }}>\r\n                            <b>ac</b> {this.props.combatant.ac}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.savingThrows !== '' ? '' : 'none' }}>\r\n                            <b>saving throws</b> {this.props.combatant.savingThrows}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.skills !== '' ? '' : 'none' }}>\r\n                            <b>skills</b> {this.props.combatant.skills}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.speed !== '' ? '' : 'none' }}>\r\n                            <b>speed</b> {this.props.combatant.speed}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.senses !== '' ? '' : 'none' }}>\r\n                            <b>senses</b> {this.props.combatant.senses}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.languages !== '' ? '' : 'none' }}>\r\n                            <b>languages</b> {this.props.combatant.languages}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.equipment !== '' ? '' : 'none' }}>\r\n                            <b>equipment</b> {this.props.combatant.equipment}\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <TraitsPanel combatant={this.props.combatant} />\r\n                        <div className='divider' />\r\n                        <div className='section subheading'>\r\n                            conditions\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.conditionImmunities !== '' ? '' : 'none' }}>\r\n                            <b>condition immunities</b> {this.props.combatant.conditionImmunities}\r\n                        </div>\r\n                        <ConditionsPanel\r\n                            combatant={this.props.combatant as Combatant}\r\n                            combat={this.props.combat}\r\n                            addCondition={() => this.props.addCondition(this.props.combatant as Combatant)}\r\n                            editCondition={condition => this.props.editCondition(this.props.combatant as Combatant, condition)}\r\n                            removeCondition={conditionID => this.props.removeCondition(this.props.combatant as Combatant, conditionID)}\r\n                            nudgeConditionValue={(condition, type, delta) => this.props.nudgeConditionValue(condition, type, delta)}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n            if (this.props.mode.indexOf('template') !== -1) {\r\n                if (this.props.mode.indexOf('overview') !== -1) {\r\n                    stats = (\r\n                        <div>\r\n                            <div className='section centered'>\r\n                                <i>{this.description()}</i>\r\n                            </div>\r\n                            <div className='divider' />\r\n                            <div className='section'>\r\n                                <b>speed</b> {this.props.combatant.speed || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>senses</b> {this.props.combatant.senses || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>languages</b> {this.props.combatant.languages || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>equipment</b> {this.props.combatant.equipment || '-'}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf('abilities') !== -1) {\r\n                    stats = (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <AbilityScorePanel combatant={this.props.combatant} />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>saving throws</b> {this.props.combatant.savingThrows || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>skills</b> {this.props.combatant.skills || '-'}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf('combat') !== -1) {\r\n                    stats = (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <b>ac</b> {this.props.combatant.ac}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>hp</b> {this.getHP()}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>damage immunity</b> {this.props.combatant.damage.immune || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>damage resistance</b> {this.props.combatant.damage.resist || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>damage vulnerability</b> {this.props.combatant.damage.vulnerable || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>condition immunities</b> {this.props.combatant.conditionImmunities || '-'}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf('actions') !== -1) {\r\n                    stats = (\r\n                        <TraitsPanel\r\n                            combatant={this.props.combatant}\r\n                            mode='template'\r\n                            copyTrait={trait => this.props.copyTrait(trait)}\r\n                        />\r\n                    );\r\n                }\r\n            }\r\n\r\n            let toggle = null;\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                // Don't show toggle button for combatant\r\n            } else if (this.props.mode.indexOf('template') !== -1) {\r\n                // Don't show toggle button for template\r\n            } else {\r\n                const imageStyle = this.state.showDetails ? 'image rotate' : 'image';\r\n                toggle = (\r\n                    <img className={imageStyle} src={arrow} alt='arrow' onClick={() => this.toggleDetails()} />\r\n                );\r\n            }\r\n\r\n            const name = (this.props.combatant as Combatant ? (this.props.combatant as Combatant).displayName : null)\r\n                || this.props.combatant.name\r\n                || 'unnamed monster';\r\n\r\n            return (\r\n                <div className='card monster'>\r\n                    <div className='heading'>\r\n                        <div className='title'>{name}</div>\r\n                        {toggle}\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        {stats}\r\n                        <div style={{ display: options.length > 0 ? '' : 'none' }}>\r\n                            <div className='divider' />\r\n                            <div className='section'>{options}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Combatant } from '../../models/combat';\r\nimport { PC } from '../../models/party';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport Radial from '../controls/radial';\r\nimport Spin from '../controls/spin';\r\n\r\nimport arrow from '../../resources/images/down-arrow.svg';\r\n\r\ninterface Props {\r\n    combatant: PC | (PC & Combatant);\r\n    mode: string;\r\n    changeValue: (pc: PC, field: string, value: any) => void;\r\n    nudgeValue: (pc: PC, field: string, delta: number) => void;\r\n    removePC: (pc: PC) => void;\r\n    // Combat\r\n    makeCurrent: (combatant: Combatant) => void;\r\n    makeActive: (combatant: Combatant) => void;\r\n    makeDefeated: (combatant: Combatant) => void;\r\n    endTurn: (combatant: Combatant) => void;\r\n    mapAdd: (combatant: Combatant) => void;\r\n    mapMove: (combatant: Combatant, dir: string) => void;\r\n    mapRemove: (combatant: Combatant) => void;\r\n    removeCombatant: (combatant: Combatant) => void;\r\n}\r\n\r\ninterface State {\r\n    showDetails: boolean;\r\n}\r\n\r\nexport default class PCCard extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        removePC: null,\r\n        makeCurrent: null,\r\n        makeActive: null,\r\n        makeDefeated: null,\r\n        endTurn: null,\r\n        mapAdd: null,\r\n        mapMove: null,\r\n        mapRemove: null,\r\n        removeCombatant: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showDetails: false\r\n        };\r\n    }\r\n\r\n    private toggleDetails() {\r\n        this.setState({\r\n            showDetails: !this.state.showDetails\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const options = [];\r\n            if (this.props.mode.indexOf('edit') !== -1) {\r\n                if (this.props.combatant.active) {\r\n                    options.push(\r\n                        <button key='toggle-active' onClick={() => this.props.changeValue(this.props.combatant, 'active', false)}>\r\n                            mark inactive\r\n                        </button>\r\n                    );\r\n                } else {\r\n                    options.push(\r\n                        <button key='toggle-active' onClick={() => this.props.changeValue(this.props.combatant, 'active', true)}>\r\n                            mark active\r\n                        </button>\r\n                    );\r\n                }\r\n                options.push(<ConfirmButton key='remove' text='delete pc' callback={() => this.props.removePC(this.props.combatant)} />);\r\n            }\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                const combatant = this.props.combatant as Combatant;\r\n\r\n                if (this.props.mode.indexOf('tactical') !== -1) {\r\n                    if (this.props.mode.indexOf('on-map') !== -1) {\r\n                        options.push(\r\n                            <div key='mapMove' className='section centered'>\r\n                                <Radial\r\n                                    direction='eight'\r\n                                    click={dir => this.props.mapMove(combatant, dir)}\r\n                                />\r\n                            </div>\r\n                        );\r\n                        options.push(\r\n                            <Spin\r\n                                key='altitude'\r\n                                source={this.props.combatant}\r\n                                name='altitude'\r\n                                label='altitude'\r\n                                display={value => value + ' ft.'}\r\n                                nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'altitude', delta * 5)}\r\n                            />\r\n                        );\r\n                        options.push(<button key='mapRemove' onClick={() => this.props.mapRemove(combatant)}>remove from map</button>);\r\n                    }\r\n                    if (this.props.mode.indexOf('off-map') !== -1) {\r\n                        options.push(<button key='mapAdd' onClick={() => this.props.mapAdd(combatant)}>add to map</button>);\r\n                    }\r\n                    options.push(<div key='tactical-div' className='divider' />);\r\n                }\r\n                if (combatant.pending && !combatant.active && !combatant.defeated) {\r\n                    options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                }\r\n                if (!combatant.pending && combatant.active && !combatant.defeated) {\r\n                    if (combatant.current) {\r\n                        options.push(<button key='endTurn' onClick={() => this.props.endTurn(combatant)}>end turn</button>);\r\n                        options.push(<button key='makeDefeated' onClick={() => this.props.makeDefeated(combatant)}>mark as defeated and end turn</button>);\r\n                    } else {\r\n                        options.push(<button key='makeCurrent' onClick={() => this.props.makeCurrent(combatant)}>start turn</button>);\r\n                        options.push(<button key='makeDefeated' onClick={() => this.props.makeDefeated(combatant)}>mark as defeated</button>);\r\n                        options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                    }\r\n                }\r\n                if (!combatant.pending && !combatant.active && combatant.defeated) {\r\n                    options.push(<button key='makeActive' onClick={() => this.props.makeActive(combatant)}>mark as active</button>);\r\n                    options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                }\r\n            }\r\n\r\n            const commonStatBlock = (\r\n                <div className='stats'>\r\n                    <div className='section centered'>\r\n                        <div className='lowercase'>\r\n                            <i>\r\n                                <span>{this.props.combatant.race || 'race'} {this.props.combatant.classes || 'class'}</span>,\r\n                                <span>level {this.props.combatant.level}</span>\r\n                            </i>\r\n                        </div>\r\n                        <div style={{ display: this.props.combatant.url ? '' : 'none' }}>\r\n                            <a href={this.props.combatant.url} target='_blank' rel='noopener noreferrer'>d&d beyond sheet</a>\r\n                        </div>\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section subheading'>languages</div>\r\n                    <div className='section'>\r\n                        {this.props.combatant.languages || '-'}\r\n                    </div>\r\n                    <div className='section subheading'>passive skills</div>\r\n                    <div className='table'>\r\n                        <div>\r\n                            <div className='cell three'><b>insight</b></div>\r\n                            <div className='cell three'><b>invest.</b></div>\r\n                            <div className='cell three'><b>percep.</b></div>\r\n                        </div>\r\n                        <div>\r\n                            <div className='cell three'>{this.props.combatant.passiveInsight}</div>\r\n                            <div className='cell three'>{this.props.combatant.passiveInvestigation}</div>\r\n                            <div className='cell three'>{this.props.combatant.passivePerception}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            let stats = null;\r\n            if (this.props.mode.indexOf('edit') !== -1) {\r\n                if (this.state.showDetails) {\r\n                    stats = (\r\n                        <div className='edit'>\r\n                            <div className='section'>\r\n                                <div className='input-label' style={{ display: this.state.showDetails ? '' : 'none' }}>character name:</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.props.combatant.name}\r\n                                    onChange={event => this.props.changeValue(this.props.combatant, 'name', event.target.value)}\r\n                                />\r\n                                <div className='input-label' style={{ display: this.state.showDetails ? '' : 'none' }}>player name:</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.props.combatant.player}\r\n                                    onChange={event => this.props.changeValue(this.props.combatant, 'player', event.target.value)}\r\n                                />\r\n                                <div className='input-label'>race:</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.props.combatant.race}\r\n                                    onChange={event => this.props.changeValue(this.props.combatant, 'race', event.target.value)}\r\n                                />\r\n                                <div className='input-label'>class:</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.props.combatant.classes}\r\n                                    onChange={event => this.props.changeValue(this.props.combatant, 'classes', event.target.value)}\r\n                                />\r\n                                <div className='input-label'>level:</div>\r\n                                <Spin\r\n                                    source={this.props.combatant}\r\n                                    name='level'\r\n                                    nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'level', delta)}\r\n                                />\r\n                                <div className='input-label'>languages:</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.props.combatant.languages}\r\n                                    onChange={event => this.props.changeValue(this.props.combatant, 'languages', event.target.value)}\r\n                                />\r\n                                <div className='input-label'>d&d beyond link:</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.props.combatant.url}\r\n                                    onChange={event => this.props.changeValue(this.props.combatant, 'url', event.target.value)}\r\n                                />\r\n                            </div>\r\n                            <div className='divider' />\r\n                            <div className='section subheading'>passive skills</div>\r\n                            <Spin\r\n                                source={this.props.combatant}\r\n                                name='passiveInsight'\r\n                                label='insight'\r\n                                nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'passiveInsight', delta)}\r\n                            />\r\n                            <Spin\r\n                                source={this.props.combatant}\r\n                                name='passiveInvestigation'\r\n                                label='investigation'\r\n                                nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'passiveInvestigation', delta)}\r\n                            />\r\n                            <Spin\r\n                                source={this.props.combatant}\r\n                                name='passivePerception'\r\n                                label='perception'\r\n                                nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'passivePerception', delta)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                } else {\r\n                    stats = commonStatBlock;\r\n                }\r\n            }\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                stats = commonStatBlock;\r\n            }\r\n\r\n            let toggle = null;\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                // Don't show toggle button for combatant\r\n            } else {\r\n                const imageStyle = this.state.showDetails ? 'image rotate' : 'image';\r\n                toggle = <img className={imageStyle} src={arrow} alt='arrow' onClick={() => this.toggleDetails()} />;\r\n            }\r\n\r\n            const name = (this.props.combatant as Combatant ? (this.props.combatant as Combatant).displayName : null)\r\n                || this.props.combatant.name\r\n                || 'unnamed pc';\r\n\r\n            return (\r\n                <div className='card pc'>\r\n                    <div className='heading'>\r\n                        <div className='title'>{name}</div>\r\n                        {toggle}\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        {stats}\r\n                        <div style={{ display: options.length > 0 ? '' : 'none' }}>\r\n                            <div className='divider' />\r\n                            <div className='section'>\r\n                                {options}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Combatant } from '../../models/combat';\r\nimport { Monster } from '../../models/monster-group';\r\n\r\ninterface Props {\r\n    combatant: Combatant & Monster;\r\n}\r\n\r\nexport default class HitPointGauge extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const hpCurrent = this.props.combatant.hp || 0;\r\n            const hpMax = this.props.combatant.hpMax + this.props.combatant.hpTemp;\r\n            const hpBloodied = this.props.combatant.hpMax / 2;\r\n            const hpWidth = 100 * Math.max(hpCurrent, 0) / hpMax;\r\n\r\n            let style = '';\r\n            if (hpCurrent >= this.props.combatant.hpMax) {\r\n                style = 'bar unhurt';\r\n            } else if (hpCurrent <= hpBloodied) {\r\n                style = 'bar bloodied';\r\n            } else {\r\n                style = 'bar injured';\r\n            }\r\n\r\n            let hpTempBar = null;\r\n            if (this.props.combatant.hpTemp > 0) {\r\n                const hpTempWidth = 100 * Math.max(this.props.combatant.hpTemp, 0) / hpMax;\r\n                hpTempBar = <div className='bar temp' style={{ width: hpTempWidth + '%' }} />;\r\n            }\r\n\r\n            return (\r\n                <div className='hp-gauge'>\r\n                    <div className={style} style={{ width: hpWidth + '%' }} />\r\n                    {hpTempBar}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Combatant } from '../../models/combat';\r\nimport { Map, MapItem } from '../../models/map-folio';\r\nimport { Monster } from '../../models/monster-group';\r\nimport { PC } from '../../models/party';\r\n\r\nimport HitPointGauge from './hit-point-gauge';\r\n\r\ninterface Props {\r\n    map: Map;\r\n    mode: 'edit' | 'thumbnail' | 'combat';\r\n    combatants: ((Combatant & PC) | (Combatant & Monster))[];\r\n    showOverlay: boolean;\r\n    selectedItemID: string;\r\n    setSelectedItemID: (itemID: string | null) => void;\r\n    addMapTile: (x: number, y: number) => void;\r\n    gridSquareClicked: (x: number, y: number) => void;\r\n}\r\n\r\ninterface MapDimensions {\r\n    minX: number;\r\n    maxX: number;\r\n    minY: number;\r\n    maxY: number;\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\ninterface StyleData {\r\n    left: string;\r\n    top: string;\r\n    width: string;\r\n    height: string;\r\n}\r\n\r\nexport default class MapPanel extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        combatants: null,\r\n        showOverlay: false,\r\n        selectedItemID: null,\r\n        setSelectedItemID: null,\r\n        addMapTile: null,\r\n        gridSquareClicked: null\r\n    };\r\n\r\n    private getMapDimensions(border: number): MapDimensions | null {\r\n        let dimensions: MapDimensions | null = null;\r\n\r\n        this.props.map.items.filter(i => {\r\n            if (this.props.mode === 'edit') {\r\n                return i.type === 'tile';\r\n            }\r\n            return true;\r\n        }).forEach(i => {\r\n            if (!dimensions) {\r\n                dimensions = {\r\n                    minX: i.x,\r\n                    maxX: i.x + i.width - 1,\r\n                    minY: i.y,\r\n                    maxY: i.y + i.height - 1,\r\n                    width: 0,\r\n                    height: 0\r\n                };\r\n            } else {\r\n                dimensions.minX = Math.min(dimensions.minX, i.x);\r\n                dimensions.maxX = Math.max(dimensions.maxX, i.x + i.width - 1);\r\n                dimensions.minY = Math.min(dimensions.minY, i.y);\r\n                dimensions.maxY = Math.max(dimensions.maxY, i.y + i.height - 1);\r\n            }\r\n        });\r\n\r\n        if (!dimensions) {\r\n            // The map is blank\r\n            if (this.props.mode === 'thumbnail') {\r\n                return null;\r\n            }\r\n\r\n            dimensions = {\r\n                minX: 0,\r\n                maxX: 0,\r\n                minY: 0,\r\n                maxY: 0,\r\n                width: 0,\r\n                height: 0\r\n            };\r\n        }\r\n\r\n        // Apply the border\r\n        dimensions.minX -= border;\r\n        dimensions.maxX += border;\r\n        dimensions.minY -= border;\r\n        dimensions.maxY += border;\r\n\r\n        // Set width and height\r\n        dimensions.width = 1 + dimensions.maxX - dimensions.minX;\r\n        dimensions.height = 1 + dimensions.maxY - dimensions.minY;\r\n\r\n        return dimensions;\r\n    }\r\n\r\n    private getSideLength(): number {\r\n        switch (this.props.mode) {\r\n            case 'thumbnail':\r\n                return 5;\r\n            case 'edit':\r\n            case 'combat':\r\n                return 25;\r\n            default:\r\n                return 5;\r\n        }\r\n    }\r\n\r\n    private getStyle(x: number, y: number, width: number, height: number, mapDimensions: MapDimensions): StyleData {\r\n        const sideLength = this.getSideLength();\r\n\r\n        return {\r\n            left: 'calc(' + sideLength + 'px * ' + (x - mapDimensions.minX) + ')',\r\n            top: 'calc(' + sideLength + 'px * ' + (y - mapDimensions.minY) + ')',\r\n            width: 'calc((' + sideLength + 'px * ' + width + ') + 1px)',\r\n            height: 'calc((' + sideLength + 'px * ' + height + ') + 1px)'\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const border = (this.props.mode === 'edit') ? 2 : 0;\r\n            const mapDimensions = this.getMapDimensions(border);\r\n            if (!mapDimensions) {\r\n                return (\r\n                    <div>(blank map)</div>\r\n                );\r\n            }\r\n\r\n            // Draw the grid squares\r\n            const grid = [];\r\n            if (this.props.mode === 'edit') {\r\n                for (let y = mapDimensions.minY; y !== mapDimensions.maxY + 1; ++y) {\r\n                    for (let x = mapDimensions.minX; x !== mapDimensions.maxX + 1; ++x) {\r\n                        const gridStyle = this.getStyle(x, y, 1, 1, mapDimensions);\r\n                        grid.push(\r\n                            <GridSquare\r\n                                key={x + ',' + y}\r\n                                x={x}\r\n                                y={y}\r\n                                style={gridStyle}\r\n                                onClick={() => this.props.setSelectedItemID(null)}\r\n                                onDoubleClick={(posX, posY) => this.props.addMapTile(posX, posY)}\r\n                            />\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Draw the map tiles\r\n            const tiles = this.props.map.items\r\n                .filter(i => i.type === 'tile')\r\n                .map(i => {\r\n                    const tileStyle = this.getStyle(i.x, i.y, i.width, i.height, mapDimensions as MapDimensions);\r\n                    return (\r\n                        <MapTile\r\n                            key={i.id}\r\n                            tile={i}\r\n                            style={tileStyle}\r\n                            selectable={this.props.mode === 'edit'}\r\n                            selected={this.props.selectedItemID === i.id}\r\n                            thumbnail={this.props.mode === 'thumbnail'}\r\n                            select={id => this.props.mode === 'edit' ? this.props.setSelectedItemID(id) : null}\r\n                        />\r\n                    );\r\n                });\r\n\r\n            // Draw the tokens\r\n            let tokens: JSX.Element[] = [];\r\n            if (this.props.mode !== 'edit') {\r\n                tokens = this.props.map.items\r\n                    .filter(i => (i.type === 'monster') || (i.type === 'pc'))\r\n                    .map(i => {\r\n                        const tokenStyle = this.getStyle(i.x, i.y, i.width, i.height, mapDimensions as MapDimensions);\r\n                        const combatant = this.props.combatants.find(c => c.id === i.id);\r\n                        if (combatant) {\r\n                            return (\r\n                                <MapToken\r\n                                    key={i.id}\r\n                                    token={i}\r\n                                    combatant={combatant}\r\n                                    style={tokenStyle}\r\n                                    simple={this.props.mode === 'thumbnail'}\r\n                                    selectable={this.props.mode === 'combat'}\r\n                                    selected={this.props.selectedItemID ===  i.id}\r\n                                    select={id => this.props.setSelectedItemID(id)}\r\n                                />\r\n                            );\r\n                        }\r\n\r\n                        return null;\r\n                    })\r\n                    .filter(mt => mt !== null) as JSX.Element[];\r\n            }\r\n\r\n            // Draw the drag overlay\r\n            const dragOverlay = [];\r\n            if (this.props.showOverlay) {\r\n                for (let yOver = mapDimensions.minY; yOver !== mapDimensions.maxY + 1; ++yOver) {\r\n                    for (let xOver = mapDimensions.minX; xOver !== mapDimensions.maxX + 1; ++xOver) {\r\n                        const overlayStyle = this.getStyle(xOver, yOver, 1, 1, mapDimensions);\r\n                        dragOverlay.push(\r\n                            <GridSquare\r\n                                key={xOver + ',' + yOver}\r\n                                x={xOver}\r\n                                y={yOver}\r\n                                style={overlayStyle}\r\n                                overlay={true}\r\n                                onClick={(posX, posY) => this.props.gridSquareClicked(posX, posY)}\r\n                            />\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n\r\n            const style = 'map-panel ' + this.props.mode;\r\n            return (\r\n                <div className={style} onClick={() => this.props.setSelectedItemID(null)}>\r\n                    <div className='grid' style={{ height: ((this.getSideLength() * mapDimensions.height) + 1) + 'px' }}>\r\n                        {grid}\r\n                        {tiles}\r\n                        {tokens}\r\n                        {dragOverlay}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface GridSquareProps {\r\n    x: number;\r\n    y: number;\r\n    style: StyleData;\r\n    overlay: boolean;\r\n    onClick: (x: number, y: number) => void;\r\n    onDoubleClick: (x: number, y: number) => void;\r\n}\r\n\r\nclass GridSquare extends React.Component<GridSquareProps> {\r\n    public static defaultProps = {\r\n        overlay: false,\r\n        onDoubleClick: null\r\n    };\r\n\r\n    private click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (this.props.onClick) {\r\n            this.props.onClick(this.props.x, this.props.y);\r\n        }\r\n    }\r\n\r\n    private doubleClick(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (this.props.onDoubleClick) {\r\n            this.props.onDoubleClick(this.props.x, this.props.y);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'grid-square';\r\n        if (this.props.overlay) {\r\n            style += ' grid-overlay';\r\n        }\r\n\r\n        return (\r\n            <div\r\n                className={style}\r\n                style={this.props.style}\r\n                onClick={e => this.click(e)}\r\n                onDoubleClick={e => this.doubleClick(e)}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\ninterface MapTileProps {\r\n    tile: MapItem;\r\n    style: StyleData;\r\n    thumbnail: boolean;\r\n    selectable: boolean;\r\n    selected: boolean;\r\n    select: (tileID: string) => void;\r\n}\r\n\r\nclass MapTile extends React.Component<MapTileProps> {\r\n    private select(e: React.MouseEvent) {\r\n        if (this.props.selectable) {\r\n            e.stopPropagation();\r\n            this.props.select(this.props.tile.id);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'tile ' + this.props.tile.terrain;\r\n        if (this.props.selected) {\r\n            style += ' selected';\r\n        }\r\n        if (this.props.thumbnail) {\r\n            style += ' thumbnail';\r\n        }\r\n\r\n        return (\r\n            <div\r\n                className={style}\r\n                style={this.props.style}\r\n                onClick={e => this.select(e)}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\ninterface MapTokenProps {\r\n    token: MapItem;\r\n    combatant: (Combatant & PC) | (Combatant & Monster);\r\n    style: StyleData;\r\n    simple: boolean;\r\n    selectable: boolean;\r\n    selected: boolean;\r\n    select: (tokenID: string) => void;\r\n}\r\n\r\nclass MapToken extends React.Component<MapTokenProps> {\r\n    private select(e: React.MouseEvent) {\r\n        if (this.props.selectable) {\r\n            e.stopPropagation();\r\n            this.props.select(this.props.token.id);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'token ' + this.props.token.type;\r\n        if (this.props.selected) {\r\n            style += ' selected';\r\n        }\r\n        if (this.props.combatant.current) {\r\n            style += ' current';\r\n        }\r\n\r\n        let initials = null;\r\n        let hpGauge = null;\r\n        let altitudeBadge = null;\r\n        let conditionsBadge = null;\r\n        if (!this.props.simple) {\r\n            const name = this.props.combatant.displayName || this.props.combatant.name;\r\n            initials = (\r\n                <div className='initials'>{name.split(' ').map(s => s[0])}</div>\r\n            );\r\n\r\n            if (this.props.combatant.type === 'monster') {\r\n                hpGauge = (\r\n                    <HitPointGauge combatant={this.props.combatant as Combatant & Monster} />\r\n                );\r\n            }\r\n\r\n            if (this.props.combatant.altitude > 0) {\r\n                altitudeBadge = (\r\n                    <div className='badge altitude'>&#9206;</div>\r\n                );\r\n            }\r\n\r\n            if (this.props.combatant.altitude < 0) {\r\n                altitudeBadge = (\r\n                    <div className='badge altitude'>&#9207;</div>\r\n                );\r\n            }\r\n\r\n            if ((this.props.combatant.conditions) && (this.props.combatant.conditions.length > 0)) {\r\n                conditionsBadge = (\r\n                    <div className='badge'>&#9670;</div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div\r\n                title={this.props.combatant.displayName || this.props.combatant.name}\r\n                className={style}\r\n                style={this.props.style}\r\n                onClick={e => this.select(e)}\r\n            >\r\n                {initials}\r\n                {hpGauge}\r\n                {altitudeBadge}\r\n                {conditionsBadge}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Combat } from '../../models/combat';\r\n\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    combat: Combat;\r\n    selected: boolean;\r\n    setSelection: (combat: Combat) => void;\r\n}\r\n\r\nexport default class CombatListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            let map = null;\r\n            if (this.props.combat.map) {\r\n                map = (\r\n                    <MapPanel\r\n                        map={this.props.combat.map}\r\n                        mode='thumbnail'\r\n                        combatants={this.props.combat.combatants}\r\n                    />\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.combat)}>\r\n                    <div className='heading'>{this.props.combat.name || 'unnamed combat'}</div>\r\n                    <div className='text'>paused at {this.props.combat.timestamp}</div>\r\n                    {map}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport close from '../../resources/images/close-black.svg';\r\nimport arrow from '../../resources/images/down-arrow-black.svg';\r\n\r\ninterface Props {\r\n    content: any[];\r\n    heading: string;\r\n    hidden: boolean;\r\n    showClose: boolean;\r\n    showToggle: boolean;\r\n    close: () => void;\r\n}\r\n\r\ninterface State {\r\n    showCards: boolean;\r\n}\r\n\r\nexport default class CardGroup extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        heading: null,\r\n        hidden: false,\r\n        showClose: false,\r\n        showToggle: false,\r\n        close: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showCards: true\r\n        };\r\n    }\r\n\r\n    private toggleCards() {\r\n        this.setState({\r\n            showCards: !this.state.showCards\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            if (this.props.hidden) {\r\n                return null;\r\n            }\r\n\r\n            let heading = null;\r\n            if (this.props.heading) {\r\n                let closeBtn = null;\r\n                if (this.props.showClose) {\r\n                    closeBtn = (\r\n                        <img className='image' src={close} alt='close' onClick={() => this.props.close()} />\r\n                    );\r\n                }\r\n\r\n                let toggle = null;\r\n                if (this.props.showToggle) {\r\n                    const style = this.state.showCards ? 'image rotate' : 'image';\r\n                    toggle = (\r\n                        <img className={style} src={arrow} alt='arrow' onClick={() => this.toggleCards()} />\r\n                    );\r\n                }\r\n\r\n                heading = (\r\n                    <div className='heading'>\r\n                        <div className='title'>{this.props.heading}</div>\r\n                        {toggle}\r\n                        {closeBtn}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            let cards = [];\r\n            if ((this.props.content.length > 0) && this.state.showCards) {\r\n                cards = this.props.content;\r\n            }\r\n\r\n            return (\r\n                <div className='card-group'>\r\n                    {heading}\r\n                    <div className='row small-up-1 medium-up-2 large-up-4 collapse'>\r\n                        {cards}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combat, Combatant, Notification } from '../../models/combat';\r\nimport { Condition, ConditionDurationSaves } from '../../models/condition';\r\nimport { Monster } from '../../models/monster-group';\r\nimport { PC } from '../../models/party';\r\n\r\nimport InfoCard from '../cards/info-card';\r\nimport CombatManagerCard from '../cards/information/combat-manager-card';\r\nimport MonsterCard from '../cards/monster-card';\r\nimport PCCard from '../cards/pc-card';\r\nimport Spin from '../controls/spin';\r\nimport CombatListItem from '../list-items/combat-list-item';\r\nimport CardGroup from '../panels/card-group';\r\nimport HitPointGauge from '../panels/hit-point-gauge';\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    combats: Combat[];\r\n    combat: Combat | null;\r\n    showHelp: boolean;\r\n    createCombat: () => void;\r\n    resumeEncounter: (combat: Combat) => void;\r\n    close: (notification: Notification, removeCondition: boolean) => void;\r\n    mapAdd: (combatant: (Combatant & PC) | (Combatant & Monster), x: number, y: number) => void;\r\n    makeCurrent: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    makeActive: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    makeDefeated: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    removeCombatant: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    addCondition: (combatant: Combatant & Monster) => void;\r\n    editCondition: (combatant: Combatant & Monster, condition: Condition) => void;\r\n    removeCondition: (combatant: Combatant & Monster, conditionID: string) => void;\r\n    mapMove: (combatant: (Combatant & PC) | (Combatant & Monster), dir: string) => void;\r\n    mapRemove: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    endTurn: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    changeHP: (combatant: Combatant & Monster, hp: number, temp: number) => void;\r\n    changeValue: (source: {}, type: string, value: any) => void;\r\n    nudgeValue: (source: {}, type: string, delta: number) => void;\r\n}\r\n\r\ninterface State {\r\n    selectedTokenID: string | null;\r\n    addingToMapID: string | null;\r\n}\r\n\r\nexport default class CombatManagerScreen extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            selectedTokenID: null,  // The ID of the combatant that's selected\r\n            addingToMapID: null     // The ID of the combatant we're adding to the map\r\n        };\r\n    }\r\n\r\n    private setSelectedTokenID(id: string | null) {\r\n        this.setState({\r\n            selectedTokenID: id\r\n        });\r\n    }\r\n\r\n    private setAddingToMapID(id: string | null) {\r\n        this.setState({\r\n            addingToMapID: id\r\n        });\r\n    }\r\n\r\n    private createCard(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        let mode = 'combat';\r\n        if (this.props.combat && this.props.combat.map) {\r\n            mode += ' tactical';\r\n            const onMap = this.props.combat.map.items.find(i => i.id === combatant.id);\r\n            mode += onMap ? ' on-map' : ' off-map';\r\n        }\r\n\r\n        switch (combatant.type) {\r\n            case 'pc':\r\n                return (\r\n                    <PCCard\r\n                        key='selected'\r\n                        combatant={combatant as Combatant & PC}\r\n                        mode={mode}\r\n                        changeValue={(source, type, value) => this.props.changeValue(source, type, value)}\r\n                        nudgeValue={(source, type, delta) => this.props.nudgeValue(source, type, delta)}\r\n                        makeCurrent={c => this.props.makeCurrent(c as Combatant & PC)}\r\n                        makeActive={c => this.props.makeActive(c as Combatant & PC)}\r\n                        makeDefeated={c => this.props.makeDefeated(c as Combatant & PC)}\r\n                        removeCombatant={c => this.props.removeCombatant(c as Combatant & PC)}\r\n                        mapAdd={c => this.setAddingToMapID(c.id)}\r\n                        mapMove={(c, dir) => this.props.mapMove(c as Combatant & PC, dir)}\r\n                        mapRemove={c => this.props.mapRemove(c as Combatant & PC)}\r\n                        endTurn={c => this.props.endTurn(c as Combatant & PC)}\r\n                    />\r\n                );\r\n            case 'monster':\r\n                return (\r\n                    <MonsterCard\r\n                        key='selected'\r\n                        combatant={combatant as Combatant & Monster}\r\n                        mode={mode}\r\n                        combat={this.props.combat as Combat}\r\n                        changeValue={(c, type, value) => this.props.changeValue(c, type, value)}\r\n                        nudgeValue={(c, type, delta) => this.props.nudgeValue(c, type, delta)}\r\n                        makeCurrent={c => this.props.makeCurrent(c as Combatant & Monster)}\r\n                        makeActive={c => this.props.makeActive(c as Combatant & Monster)}\r\n                        makeDefeated={c => this.props.makeDefeated(c as Combatant & Monster)}\r\n                        removeCombatant={c => this.props.removeCombatant(c as Combatant & Monster)}\r\n                        addCondition={c => this.props.addCondition(c as Combatant & Monster)}\r\n                        editCondition={(c, condition) => this.props.editCondition(c as Combatant & Monster, condition)}\r\n                        removeCondition={(c, conditionID) => this.props.removeCondition(c as Combatant & Monster, conditionID)}\r\n                        nudgeConditionValue={(c, type, delta) => this.props.nudgeValue(c, type, delta)}\r\n                        mapAdd={c => this.setAddingToMapID(c.id)}\r\n                        mapMove={(c, dir) => this.props.mapMove(c as Combatant & Monster, dir)}\r\n                        mapRemove={c => this.props.mapRemove(c as Combatant & Monster)}\r\n                        endTurn={(c) => this.props.endTurn(c as Combatant & Monster)}\r\n                        changeHP={(c, hp, temp) => this.props.changeHP(c as Combatant & Monster, hp, temp)}\r\n                    />\r\n                );\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    private addCombatantToMap(x: number, y: number) {\r\n        if (this.props.combat) {\r\n            const combatant = this.props.combat.combatants.find(c => c.id === this.state.addingToMapID);\r\n            if (combatant) {\r\n                this.props.mapAdd(combatant, x, y);\r\n            }\r\n            this.setAddingToMapID(null);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let leftPaneContent = null;\r\n            let centrePaneContent = null;\r\n            let rightPaneContent = null;\r\n\r\n            if (this.props.combat) {\r\n                const current: JSX.Element[] = [];\r\n                let pending: JSX.Element[] = [];\r\n                let active: JSX.Element[] = [];\r\n                const defeated: JSX.Element[] = [];\r\n\r\n                this.props.combat.combatants.forEach(combatant => {\r\n                    if (combatant.current) {\r\n                        current.push(\r\n                            <div key={combatant.id}>\r\n                                {this.createCard(combatant)}\r\n                            </div>\r\n                        );\r\n                    }\r\n                    if (combatant.pending && !combatant.active && !combatant.defeated) {\r\n                        pending.push(\r\n                            <PendingCombatantRow\r\n                                key={combatant.id}\r\n                                combatant={combatant}\r\n                                select={c => this.setSelectedTokenID(c.id)}\r\n                                selected={combatant.id === this.state.selectedTokenID}\r\n                                nudgeValue={(c, type, delta) => this.props.nudgeValue(c, type, delta)}\r\n                                makeActive={c => this.props.makeActive(c)}\r\n                            />\r\n                        );\r\n                    }\r\n                    if (!combatant.pending && combatant.active && !combatant.defeated) {\r\n                        active.push(\r\n                            <CombatantRow\r\n                                key={combatant.id}\r\n                                combatant={combatant}\r\n                                combat={this.props.combat as Combat}\r\n                                select={c => this.setSelectedTokenID(c.id)}\r\n                                selected={combatant.id === this.state.selectedTokenID}\r\n                            />\r\n                        );\r\n                    }\r\n                    if (!combatant.pending && !combatant.active && combatant.defeated) {\r\n                        defeated.push(\r\n                            <CombatantRow\r\n                                key={combatant.id}\r\n                                combatant={combatant}\r\n                                combat={this.props.combat as Combat}\r\n                                select={c => this.setSelectedTokenID(c.id)}\r\n                                selected={combatant.id === this.state.selectedTokenID}\r\n                            />\r\n                        );\r\n                    }\r\n                });\r\n\r\n                if (this.props.showHelp && (pending.length !== 0)) {\r\n                    const pendingHelp = (\r\n                        <div key='pending-help'>\r\n                            <InfoCard\r\n                                getContent={() =>\r\n                                    <div>\r\n                                        <div className='section'>these combatants are not yet part of the encounter</div>\r\n                                        <div className='section'>set initiative on each of them, then add them to the encounter</div>\r\n                                    </div>\r\n                                }\r\n                            />\r\n                        </div>\r\n                    );\r\n                    pending = [pendingHelp].concat(pending);\r\n                }\r\n\r\n                if (this.props.showHelp && (current.length === 0)) {\r\n                    const activeHelp = (\r\n                        /* tslint:disable:max-line-length */\r\n                        <div key='active-help'>\r\n                            <InfoCard\r\n                                getContent={() =>\r\n                                    <div>\r\n                                        <div className='section'>these are the combatants taking part in this encounter; you can select them to see their stat blocks (on the right)</div>\r\n                                        <div className='section'>to begin the encounter, select the first combatant and press the <b>start turn</b> button on their stat block</div>\r\n                                    </div>\r\n                                }\r\n                            />\r\n                        </div>\r\n                        /* tslint:enable:max-line-length */\r\n                    );\r\n                    active = [activeHelp].concat(active);\r\n                }\r\n\r\n                if (current.length === 0) {\r\n                    current.push(\r\n                        <InfoCard\r\n                            key='current'\r\n                            getContent={() =>\r\n                                <div className='section'>the current initiative holder will be displayed here</div>\r\n                            }\r\n                        />\r\n                    );\r\n                }\r\n\r\n                const notifications = this.props.combat.notifications.map(n => (\r\n                    <NotificationPanel\r\n                        key={n.id}\r\n                        notification={n}\r\n                        close={(notification, removeCondition) => this.props.close(notification, removeCondition)}\r\n                    />\r\n                ));\r\n\r\n                let mapSection = null;\r\n                if (this.props.combat.map) {\r\n                    mapSection = (\r\n                        <MapPanel\r\n                            map={this.props.combat.map}\r\n                            mode='combat'\r\n                            showOverlay={this.state.addingToMapID !== null}\r\n                            combatants={this.props.combat.combatants}\r\n                            selectedItemID={this.state.selectedTokenID ? this.state.selectedTokenID : undefined}\r\n                            setSelectedItemID={id => {\r\n                                if (id) {\r\n                                    this.setSelectedTokenID(id);\r\n                                }\r\n                            }}\r\n                            gridSquareClicked={(x, y) => this.addCombatantToMap(x, y)}\r\n                        />\r\n                    );\r\n                }\r\n\r\n                let selectedCombatant = null;\r\n                if (this.state.selectedTokenID) {\r\n                    const combatant = this.props.combat.combatants.find(c => c.id === this.state.selectedTokenID);\r\n                    if (combatant && !combatant.current) {\r\n                        selectedCombatant = this.createCard(combatant);\r\n                    }\r\n                }\r\n                if (!selectedCombatant) {\r\n                    selectedCombatant = (\r\n                        <InfoCard\r\n                            key='selected'\r\n                            getContent={() =>\r\n                                <div className='section'>select a pc or monster to see its details here</div>\r\n                            }\r\n                        />\r\n                    );\r\n                }\r\n\r\n                leftPaneContent = (\r\n                    <div className='combat-left'>\r\n                        <CardGroup\r\n                            heading='initiative holder'\r\n                            content={current}\r\n                        />\r\n                    </div>\r\n                );\r\n\r\n                centrePaneContent = (\r\n                    <div className='combat-centre'>\r\n                        {notifications}\r\n                        <CardGroup\r\n                            heading='waiting for intiative to be entered'\r\n                            content={pending}\r\n                            hidden={pending.length === 0}\r\n                            showToggle={true}\r\n                        />\r\n                        {mapSection}\r\n                        <CardGroup\r\n                            heading='combatants in the encounter'\r\n                            content={active}\r\n                            hidden={active.length === 0}\r\n                        />\r\n                        <CardGroup\r\n                            heading='defeated'\r\n                            content={defeated}\r\n                            hidden={defeated.length === 0}\r\n                            showToggle={true}\r\n                        />\r\n                    </div>\r\n                );\r\n\r\n                rightPaneContent = (\r\n                    <div className='combat-right'>\r\n                        <CardGroup\r\n                            heading='selected combatant'\r\n                            content={[selectedCombatant]}\r\n                        />\r\n                    </div>\r\n                );\r\n            } else {\r\n                let help = null;\r\n                if (this.props.showHelp) {\r\n                    help = (\r\n                        <CombatManagerCard />\r\n                    );\r\n                }\r\n\r\n                const combats: JSX.Element[] = [];\r\n                this.props.combats.forEach(c => {\r\n                    combats.push(\r\n                        <CombatListItem\r\n                            key={c.id}\r\n                            combat={c}\r\n                            selected={false}\r\n                            setSelection={combat => this.props.resumeEncounter(combat)}\r\n                        />\r\n                    );\r\n                });\r\n\r\n                leftPaneContent = (\r\n                    <div className='combat-left'>\r\n                        {help}\r\n                        <button onClick={() => this.props.createCombat()}>start a new combat</button>\r\n                        {combats}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='combat-manager row collapse'>\r\n                    <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                        {leftPaneContent}\r\n                    </div>\r\n                    <div className='columns small-4 medium-4 large-6 scrollable list-column'>\r\n                        {centrePaneContent}\r\n                    </div>\r\n                    <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                        {rightPaneContent}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface NotificationProps {\r\n    notification: Notification;\r\n    close: (notification: Notification, removeCondition: boolean) => void;\r\n}\r\n\r\nclass NotificationPanel extends React.Component<NotificationProps> {\r\n    private saveSuccess(notification: Notification) {\r\n        // Reduce save by 1\r\n        const condition = this.props.notification.condition as Condition;\r\n        if (condition && condition.duration) {\r\n            if ((condition.duration.type === 'saves') || (condition.duration.type === 'rounds')) {\r\n                condition.duration.count -= 1;\r\n                if (condition.duration.count === 0) {\r\n                    // Remove the condition\r\n                    this.close(notification, true);\r\n                } else {\r\n                    this.close(notification);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private close(notification: Notification, removeCondition = false) {\r\n        this.props.close(notification, removeCondition);\r\n    }\r\n\r\n    public render() {\r\n        const combatant = this.props.notification.combatant as (Combatant & Monster);\r\n        const condition = this.props.notification.condition as Condition;\r\n\r\n        const name = combatant.displayName || combatant.name || 'unnamed monster';\r\n        switch (this.props.notification.type) {\r\n            case 'condition-save':\r\n                const duration = condition.duration as ConditionDurationSaves;\r\n                let saveType = duration.saveType.toString();\r\n                if (saveType !== 'death') {\r\n                    saveType = saveType.toUpperCase();\r\n                }\r\n                return (\r\n                    <div key={this.props.notification.id} className='notification'>\r\n                        <div className='text'>\r\n                            {name} must make a {saveType} save against dc {duration.saveDC}\r\n                        </div>\r\n                        <div className='buttons'>\r\n                            <button onClick={() => this.saveSuccess(this.props.notification)}>success</button>\r\n                            <button onClick={() => this.close(this.props.notification)}>ok</button>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            case 'condition-end':\r\n                return (\r\n                    <div key={this.props.notification.id} className='notification'>\r\n                        <div className='text'>\r\n                            {name} is no longer affected by condition {condition.name}\r\n                        </div>\r\n                        <div className='buttons'>\r\n                            <button onClick={() => this.close(this.props.notification)}>ok</button>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface PendingCombatantRowProps {\r\n    combatant: (Combatant & PC) | (Combatant & Monster);\r\n    selected: boolean;\r\n    select: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    nudgeValue: (combatant: (Combatant & PC) | (Combatant & Monster), field: string, delta: number) => void;\r\n    makeActive: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n}\r\n\r\nclass PendingCombatantRow extends React.Component<PendingCombatantRowProps> {\r\n    private getInformationText() {\r\n        if (this.props.selected) {\r\n            return 'selected';\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private onClick(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (this.props.select) {\r\n            this.props.select(this.props.combatant);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'combatant-row ' + this.props.combatant.type;\r\n        if (this.props.combatant.current || this.props.selected) {\r\n            style += ' highlight';\r\n        }\r\n\r\n        return (\r\n            <div className={style} onClick={e => this.onClick(e)}>\r\n                <div className='name'>\r\n                    {this.props.combatant.displayName || this.props.combatant.name || 'combatant'}\r\n                    <span className='info'>{this.getInformationText()}</span>\r\n                </div>\r\n                <div className='content'>\r\n                    <Spin\r\n                        source={this.props.combatant}\r\n                        name='initiative'\r\n                        label='initiative'\r\n                        nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'initiative', delta)}\r\n                    />\r\n                    <button onClick={e => { e.stopPropagation(); this.props.makeActive(this.props.combatant); }}>add to encounter</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface CombatantRowProps {\r\n    combatant: (Combatant & PC) | (Combatant & Monster);\r\n    combat: Combat;\r\n    selected: boolean;\r\n    select: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n}\r\n\r\nclass CombatantRow extends React.Component<CombatantRowProps> {\r\n    private getInformationText() {\r\n        if (this.props.combatant.current) {\r\n            return 'current turn';\r\n        }\r\n\r\n        if (this.props.selected) {\r\n            return 'selected';\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private onClick(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (this.props.select) {\r\n            this.props.select(this.props.combatant);\r\n        }\r\n    }\r\n\r\n    private getContentPC(pc: Combatant & PC, notes: JSX.Element[]) {\r\n        return (\r\n            <div className='content'>\r\n                <div className='section key-stats'>\r\n                    <div className='key-stat'>\r\n                        <div className='stat-value'>{pc.initiative}</div>\r\n                        <div className='stat-label'>init</div>\r\n                    </div>\r\n                    <div className='key-stat wide'>\r\n                        <div className='stat-value'>{pc.player ? pc.player : '-'}</div>\r\n                    </div>\r\n                </div>\r\n                {notes}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getContentMonster(monster: Combatant & Monster, notes: JSX.Element[]) {\r\n        let hp = (monster.hp ? monster.hp : 0).toString();\r\n        if (monster.hpTemp > 0) {\r\n            hp += '+' + monster.hpTemp;\r\n        }\r\n        let gauge = null;\r\n        if (!monster.pending) {\r\n            gauge = (\r\n                <HitPointGauge combatant={monster} />\r\n            );\r\n        }\r\n\r\n        let conditions = null;\r\n        if (this.props.combatant.conditions) {\r\n            conditions = this.props.combatant.conditions.map(c => {\r\n                let name = c.name;\r\n                if (c.name === 'exhaustion') {\r\n                    name += ' (' + c.level + ')';\r\n                }\r\n                if ((c.name === 'custom') && (c.text)) {\r\n                    name = c.text;\r\n                }\r\n                if (c.duration) {\r\n                    name += ' ' + Utils.conditionDurationText(c, this.props.combat);\r\n                }\r\n                const description = [];\r\n                const text = Utils.conditionText(c);\r\n                for (let n = 0; n !== text.length; ++n) {\r\n                    description.push(<li key={n} className='condition-text'>{text[n]}</li>);\r\n                }\r\n                return (\r\n                    <div key={c.id} className='condition'>\r\n                        <div className='condition-name'>{name}</div>\r\n                        <ul>\r\n                            {description}\r\n                        </ul>\r\n                    </div>\r\n                );\r\n            });\r\n        }\r\n\r\n        return (\r\n            <div className='content'>\r\n                <div className='section key-stats'>\r\n                    <div className='key-stat'>\r\n                        <div className='stat-value'>{monster.initiative}</div>\r\n                        <div className='stat-label'>init</div>\r\n                    </div>\r\n                    <div className='key-stat'>\r\n                        <div className='stat-value'>{monster.ac}</div>\r\n                        <div className='stat-label'>ac</div>\r\n                    </div>\r\n                    <div className='key-stat'>\r\n                        <div className='stat-value'>{hp}</div>\r\n                        <div className='stat-label'>hp</div>\r\n                    </div>\r\n                </div>\r\n                {gauge}\r\n                {conditions}\r\n                {notes}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public render() {\r\n        const notes = [];\r\n        if (this.props.combat.map) {\r\n            if (!this.props.combatant.pending && !this.props.combat.map.items.find(i => i.id === this.props.combatant.id)) {\r\n                notes.push(\r\n                    <div key='not-on-map' className='note'>not on the map</div>\r\n                );\r\n            }\r\n        }\r\n\r\n        let content = null;\r\n\r\n        switch (this.props.combatant.type) {\r\n            case 'pc':\r\n                content = this.getContentPC(this.props.combatant as Combatant & PC, notes);\r\n                break;\r\n            case 'monster':\r\n                content = this.getContentMonster(this.props.combatant as Combatant & Monster, notes);\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        let style = 'combatant-row ' + this.props.combatant.type;\r\n        if (this.props.combatant.current || this.props.selected) {\r\n            style += ' highlight';\r\n        }\r\n\r\n        return (\r\n            <div className={style} onClick={e => this.onClick(e)}>\r\n                <div className='name'>\r\n                    {this.props.combatant.displayName || this.props.combatant.name || 'combatant'}\r\n                    <span className='info'>{this.getInformationText()}</span>\r\n                </div>\r\n                {content}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Encounter, EncounterSlot } from '../../models/encounter';\r\nimport { Monster } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\ninterface Props {\r\n    encounter: Encounter;\r\n    party: Party | null;\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n}\r\n\r\nexport default class DifficultyChartPanel extends React.Component<Props> {\r\n    public render() {\r\n        let monsterCount = 0;\r\n        let monsterXp = 0;\r\n        let slots: EncounterSlot[] = [];\r\n        slots = slots.concat(this.props.encounter.slots);\r\n        this.props.encounter.waves.forEach(wave => {\r\n            slots = slots.concat(wave.slots);\r\n        });\r\n        slots.forEach(slot => {\r\n            monsterCount += slot.count;\r\n            const monster = this.props.getMonster(slot.monsterName, slot.monsterGroupName);\r\n            if (monster) {\r\n                monsterXp += Utils.experience(monster.challenge) * slot.count;\r\n            }\r\n        });\r\n\r\n        const adjustedXp = monsterXp * Utils.experienceFactor(monsterCount);\r\n\r\n        let xpThresholds;\r\n        let diffSection;\r\n        if (this.props.party) {\r\n            let xpEasy = 0;\r\n            let xpMedium = 0;\r\n            let xpHard = 0;\r\n            let xpDeadly = 0;\r\n\r\n            const pcs = this.props.party.pcs.filter(pc => pc.active);\r\n            pcs.forEach(pc => {\r\n                xpEasy += Utils.pcExperience(pc.level, 'easy');\r\n                xpMedium += Utils.pcExperience(pc.level, 'medium');\r\n                xpHard += Utils.pcExperience(pc.level, 'hard');\r\n                xpDeadly += Utils.pcExperience(pc.level, 'deadly');\r\n            });\r\n\r\n            let difficulty = null;\r\n            let adjustedDifficulty = null;\r\n            if (adjustedXp > 0) {\r\n                difficulty = 'trivial';\r\n                if (adjustedXp >= xpEasy) {\r\n                    difficulty = 'easy';\r\n                }\r\n                if (adjustedXp >= xpMedium) {\r\n                    difficulty = 'medium';\r\n                }\r\n                if (adjustedXp >= xpHard) {\r\n                    difficulty = 'hard';\r\n                }\r\n                if (adjustedXp >= xpDeadly) {\r\n                    difficulty = 'deadly';\r\n                }\r\n                adjustedDifficulty = difficulty;\r\n\r\n                if ((pcs.length < 3) || (pcs.length > 5)) {\r\n                    const small = pcs.length < 3;\r\n                    switch (difficulty) {\r\n                        case 'trivial':\r\n                            adjustedDifficulty = small ? 'easy' : 'trivial';\r\n                            break;\r\n                        case 'easy':\r\n                            adjustedDifficulty = small ? 'medium' : 'trivial';\r\n                            break;\r\n                        case 'medium':\r\n                            adjustedDifficulty = small ? 'hard' : 'easy';\r\n                            break;\r\n                        case 'hard':\r\n                            adjustedDifficulty = small ? 'deadly' : 'medium';\r\n                            break;\r\n                        case 'deadly':\r\n                            adjustedDifficulty = small ? 'deadly' : 'hard';\r\n                            break;\r\n                        default:\r\n                            adjustedDifficulty = '';\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            xpThresholds = (\r\n                <div className='table'>\r\n                    <div>\r\n                        <div className='cell four'><b>easy</b></div>\r\n                        <div className='cell four'><b>medium</b></div>\r\n                        <div className='cell four'><b>hard</b></div>\r\n                        <div className='cell four'><b>deadly</b></div>\r\n                    </div>\r\n                    <div>\r\n                        <div className='cell four'>{xpEasy} xp</div>\r\n                        <div className='cell four'>{xpMedium} xp</div>\r\n                        <div className='cell four'>{xpHard} xp</div>\r\n                        <div className='cell four'>{xpDeadly} xp</div>\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            const getLeft = (xp: number) => {\r\n                const max = Math.max(adjustedXp, (xpDeadly * 1.2));\r\n                return (100 * xp) / max;\r\n            };\r\n\r\n            const getRight = (xp: number) => {\r\n                return 100 - getLeft(xp);\r\n            };\r\n\r\n            diffSection = (\r\n                <div>\r\n                    <div className='difficulty-gauge'>\r\n                        <div className='bar-container'>\r\n                            <div className='bar trivial' style={{ left: '0', right: getRight(xpEasy) + '%' }} />\r\n                        </div>\r\n                        <div className='bar-container'>\r\n                            <div className='bar easy' style={{ left: getLeft(xpEasy) + '%', right: getRight(xpMedium) + '%' }} />\r\n                        </div>\r\n                        <div className='bar-container'>\r\n                            <div className='bar medium' style={{ left: getLeft(xpMedium) + '%', right: getRight(xpHard) + '%' }} />\r\n                        </div>\r\n                        <div className='bar-container'>\r\n                            <div className='bar hard' style={{ left: getLeft(xpHard) + '%', right: getRight(xpDeadly) + '%' }} />\r\n                        </div>\r\n                        <div className='bar-container'>\r\n                            <div className='bar deadly' style={{ left: getLeft(xpDeadly) + '%', right: '0' }} />\r\n                        </div>\r\n                        <div className='encounter-container'>\r\n                            <div className='encounter' style={{ left: (getLeft(adjustedXp) - 0.5) + '%' }} />\r\n                        </div>\r\n                    </div>\r\n                    <div className='subheading'>difficulty</div>\r\n                    <div className='section'>\r\n                        difficulty for this party\r\n                        <div className='right'>{difficulty}</div>\r\n                    </div>\r\n                    <div className='section' style={{ display: (adjustedDifficulty === difficulty) ? 'none' : ''}}>\r\n                        effective difficulty for {pcs.length} pc(s)\r\n                        <div className='right'><b>{adjustedDifficulty}</b></div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='subheading'>xp value</div>\r\n                <div className='section'>\r\n                    xp for this encounter\r\n                    <div className='right'>{monsterXp} xp</div>\r\n                </div>\r\n                <div className='section' style={{ display: (adjustedXp === monsterXp) ? 'none' : ''}}>\r\n                    effective xp for {monsterCount} monster(s)\r\n                    <div className='right'>{adjustedXp} xp</div>\r\n                </div>\r\n                {xpThresholds}\r\n                {diffSection}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Encounter } from '../../models/encounter';\r\nimport { Monster } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport Dropdown from '../controls/dropdown';\r\nimport DifficultyChartPanel from '../panels/difficulty-chart-panel';\r\nimport InfoCard from './info-card';\r\n\r\nimport arrow from '../../resources/images/down-arrow.svg';\r\n\r\ninterface Props {\r\n    selection: Encounter;\r\n    parties: Party[];\r\n    changeValue: (field: string, value: string) => void;\r\n    addWave: () => void;\r\n    removeEncounter: () => void;\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n}\r\n\r\ninterface State {\r\n    showDetails: boolean;\r\n    party: Party | null;\r\n}\r\n\r\nexport default class EncounterCard extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showDetails: false,\r\n            party: null\r\n        };\r\n    }\r\n\r\n    private toggleDetails() {\r\n        this.setState({\r\n            showDetails: !this.state.showDetails\r\n        });\r\n    }\r\n\r\n    private selectParty(partyID: string) {\r\n        const party = this.props.parties.find(p => p.id === partyID);\r\n        this.setState({\r\n            party: party as Party\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const partyOptions = [];\r\n            if (this.props.parties) {\r\n                for (let n = 0; n !== this.props.parties.length; ++n) {\r\n                    const party = this.props.parties[n];\r\n                    partyOptions.push({\r\n                        id: party.id,\r\n                        text: party.name\r\n                    });\r\n                }\r\n            }\r\n\r\n            const difficultySection = (\r\n                <div>\r\n                    <Dropdown\r\n                        options={partyOptions}\r\n                        placeholder='select party...'\r\n                        selectedID={this.state.party ? this.state.party.id : undefined}\r\n                        select={optionID => this.selectParty(optionID)}\r\n                    />\r\n                    <DifficultyChartPanel\r\n                        encounter={this.props.selection}\r\n                        party={this.state.party}\r\n                        getMonster={(monsterName, monsterGroupName) => this.props.getMonster(monsterName, monsterGroupName)}\r\n                    />\r\n                </div>\r\n            );\r\n\r\n            const imageStyle = this.state.showDetails ? 'image rotate' : 'image';\r\n\r\n            const heading = (\r\n                <div className='heading'>\r\n                    <div className='title'>encounter</div>\r\n                    <img className={imageStyle} src={arrow} alt='arrow' onClick={() => this.toggleDetails()} />\r\n                </div>\r\n            );\r\n\r\n            const content = (\r\n                <div>\r\n                    <div className='section'>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='encounter name'\r\n                            value={this.props.selection.name}\r\n                            onChange={event => this.props.changeValue('name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div style={{ display: this.state.showDetails ? '' : 'none' }}>\r\n                        <div className='divider' />\r\n                        {difficultySection}\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <button onClick={() => this.props.addWave()}>add a new wave</button>\r\n                        <ConfirmButton text='delete encounter' callback={() => this.props.removeEncounter()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            return (\r\n                <InfoCard getHeading={() => heading} getContent={() => content} />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    title: string;\r\n    getContent: () => (string | JSX.Element);\r\n}\r\n\r\nexport default class ErrorCard extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        title: null\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            let heading = null;\r\n            if (this.props.title) {\r\n                heading = <div className='heading'><div className='title'>{this.props.title}</div></div>;\r\n            }\r\n\r\n            const content = this.props.getContent();\r\n\r\n            return (\r\n                <div className='card error'>\r\n                    {heading}\r\n                    <div className='card-content'>\r\n                        {content}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n","export interface MonsterGroup {\r\n    id: string;\r\n    name: string;\r\n    monsters: Monster[];\r\n}\r\n\r\nexport interface Monster {\r\n    id: string;\r\n    type: string;\r\n    name: string;\r\n    size: string;\r\n    category: string;\r\n    tag: string;\r\n    alignment: string;\r\n    challenge: number;\r\n    abilityScores: {\r\n        str: number;\r\n        dex: number;\r\n        con: number;\r\n        int: number;\r\n        wis: number;\r\n        cha: number;\r\n    };\r\n    ac: number;\r\n    hpMax: number;\r\n    hpTemp: number;\r\n    hitDice: number;\r\n    damage: {\r\n        resist: string;\r\n        vulnerable: string;\r\n        immune: string;\r\n    };\r\n    savingThrows: string;\r\n    speed: string;\r\n    skills: string;\r\n    senses: string;\r\n    languages: string;\r\n    equipment: string;\r\n    traits: Trait[];\r\n    conditionImmunities: string;\r\n}\r\n\r\nexport interface Trait {\r\n    id: string;\r\n    name: string;\r\n    usage: string;\r\n    type: 'trait' | 'action' | 'legendary' | 'lair' | 'regional';\r\n    text: string;\r\n}\r\n\r\nexport const SIZE_TYPES = [\r\n    'tiny',\r\n    'small',\r\n    'medium',\r\n    'large',\r\n    'huge',\r\n    'gargantuan'\r\n];\r\n\r\nexport const CATEGORY_TYPES = [\r\n    'aberration',\r\n    'beast',\r\n    'celestial',\r\n    'construct',\r\n    'dragon',\r\n    'elemental',\r\n    'fey',\r\n    'fiend',\r\n    'giant',\r\n    'humanoid',\r\n    'monstrosity',\r\n    'ooze',\r\n    'plant',\r\n    'undead'\r\n];\r\n\r\nexport const TRAIT_TYPES = [\r\n    'trait',\r\n    'action',\r\n    'legendary',\r\n    'lair',\r\n    'regional'\r\n];\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { CATEGORY_TYPES, SIZE_TYPES } from '../../models/monster-group';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport Spin from '../controls/spin';\r\n\r\nimport arrow from '../../resources/images/down-arrow.svg';\r\n\r\ninterface Props {\r\n    filter: {\r\n        name: string,\r\n        challengeMin: number;\r\n        challengeMax: number;\r\n        category: string;\r\n        size: string;\r\n    };\r\n    changeValue: (type: 'name' | 'challengeMin' | 'challengeMax' | 'category' | 'size', value: any) => void;\r\n    nudgeValue: (type: 'challengeMin' | 'challengeMax', delta: number) => void;\r\n    resetFilter: () => void;\r\n}\r\n\r\ninterface State {\r\n    showAll: boolean;\r\n}\r\n\r\nexport default class FilterCard extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showAll: false\r\n        };\r\n    }\r\n\r\n    private toggleAll() {\r\n        this.setState({\r\n            showAll: !this.state.showAll\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const sizes = ['all sizes'].concat(SIZE_TYPES);\r\n            const sizeOptions = sizes.map(size => ({ id: size, text: size }));\r\n\r\n            const categories = ['all types'].concat(CATEGORY_TYPES);\r\n            const catOptions = categories.map(cat => ({ id: cat, text: cat }));\r\n\r\n            let content = null;\r\n            if (this.state.showAll) {\r\n                content = (\r\n                    <div>\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='name'\r\n                                value={this.props.filter.name}\r\n                                onChange={event => this.props.changeValue('name', event.target.value)}\r\n                            />\r\n                        </div>\r\n                        <Spin\r\n                            source={this.props.filter}\r\n                            name='challengeMin'\r\n                            label='min cr'\r\n                            display={value => Utils.challenge(value)}\r\n                            nudgeValue={delta => this.props.nudgeValue('challengeMin', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.filter}\r\n                            name='challengeMax'\r\n                            label='max cr'\r\n                            display={value => Utils.challenge(value)}\r\n                            nudgeValue={delta => this.props.nudgeValue('challengeMax', delta)}\r\n                        />\r\n                        <Dropdown\r\n                            options={sizeOptions}\r\n                            placeholder='filter by size...'\r\n                            selectedID={this.props.filter.size}\r\n                            select={optionID => this.props.changeValue('size', optionID)}\r\n                        />\r\n                        <Dropdown\r\n                            options={catOptions}\r\n                            placeholder='filter by type...'\r\n                            selectedID={this.props.filter.category}\r\n                            select={optionID => this.props.changeValue('category', optionID)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <div className='section'>\r\n                            <button onClick={() => this.props.resetFilter()}>clear filter</button>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                let summary = '';\r\n                if (this.props.filter.size !== 'all sizes') {\r\n                    summary += summary ? ' ' + this.props.filter.size : this.props.filter.size;\r\n                }\r\n                if (this.props.filter.category !== 'all types') {\r\n                    summary += summary ? ' ' + this.props.filter.category : this.props.filter.category;\r\n                }\r\n                summary += ' monsters of cr ' + Utils.challenge(this.props.filter.challengeMin) + ' to ' + Utils.challenge(this.props.filter.challengeMax);\r\n\r\n                content = (\r\n                    <div>\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='name'\r\n                                value={this.props.filter.name}\r\n                                onChange={event => this.props.changeValue('name', event.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div className='section'>showing {summary}</div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='card'>\r\n                    <div className='heading'>\r\n                        <div className='title'>filter</div>\r\n                        <img className={this.state.showAll ? 'image rotate' : 'image'} src={arrow} alt='arrow' onClick={() => this.toggleAll()} />\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        {content}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Encounter } from '../../../models/encounter';\r\n\r\nimport InfoCard from '../info-card';\r\n\r\ninterface Props {\r\n    encounters: Encounter[];\r\n}\r\n\r\nexport default class EncounterBuilderCard extends React.Component<Props> {\r\n    private getContent() {\r\n        let action: JSX.Element | null = null;\r\n        if (this.props.encounters.length === 0) {\r\n            action = (\r\n                <div className='section'>to start building an encounter, press the button below</div>\r\n            );\r\n        } else {\r\n            action = (\r\n                <div className='section'>select an encounter from the list to add monsters to it</div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='section'>on this page you can set up encounters</div>\r\n                <div className='section'>when you have created an encounter you can add monsters to it, then gauge its difficulty for a party of pcs</div>\r\n                <div className='divider'/>\r\n                {action}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            return (\r\n                <InfoCard getContent={() => this.getContent()} />\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { EncounterWave } from '../../models/encounter';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport InfoCard from './info-card';\r\n\r\ninterface Props {\r\n    wave: EncounterWave;\r\n    changeValue: (wave: EncounterWave, field: string, value: string) => void;\r\n    removeWave: (wave: EncounterWave) => void;\r\n}\r\n\r\nexport default class WaveCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const heading = (\r\n                <div className='heading'>\r\n                    <div className='title'>wave</div>\r\n                </div>\r\n            );\r\n\r\n            const content = (\r\n                <div>\r\n                    <div className='section'>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='wave name'\r\n                            value={this.props.wave.name}\r\n                            onChange={event => this.props.changeValue(this.props.wave, 'name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <ConfirmButton text='delete wave' callback={() => this.props.removeWave(this.props.wave)} />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            return (\r\n                <InfoCard getHeading={() => heading} getContent={() => content} />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Encounter } from '../../models/encounter';\r\n\r\ninterface Props {\r\n    encounter: Encounter;\r\n    selected: boolean;\r\n    setSelection: (encounter: Encounter) => void;\r\n}\r\n\r\nexport default class EncounterListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const slots = [];\r\n\r\n            this.props.encounter.slots.forEach(slot => {\r\n                let text = slot.monsterName || 'unnamed monster';\r\n                if (slot.count > 1) {\r\n                    text += ' x' + slot.count;\r\n                }\r\n                slots.push(<div key={slot.id} className='text'>{text}</div>);\r\n            });\r\n\r\n            if (slots.length === 0) {\r\n                slots.push(<div key='empty' className='text'>no monsters</div>);\r\n            }\r\n\r\n            this.props.encounter.waves.forEach(wave => {\r\n                slots.push(<div key={'name ' + wave.id} className='text subheading'>{wave.name || 'unnamed wave'}</div>);\r\n                wave.slots.forEach(slot => {\r\n                    let text = slot.monsterName || 'unnamed monster';\r\n                    if (slot.count > 1) {\r\n                        text += ' x' + slot.count;\r\n                    }\r\n                    slots.push(<div key={slot.id} className='text'>{text}</div>);\r\n                });\r\n                if (slots.length === 0) {\r\n                    slots.push(<div key={'empty ' + wave.id} className='text'>no monsters</div>);\r\n                }\r\n            });\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.encounter)}>\r\n                    <div className='heading'>{this.props.encounter.name || 'unnamed encounter'}</div>\r\n                    {slots}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Encounter, EncounterSlot, EncounterWave } from '../../models/encounter';\r\nimport { Monster, MonsterGroup } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\nimport EncounterCard from '../cards/encounter-card';\r\nimport ErrorCard from '../cards/error-card';\r\nimport FilterCard from '../cards/filter-card';\r\nimport InfoCard from '../cards/info-card';\r\nimport EncounterBuilderCard from '../cards/information/encounter-builder-card';\r\nimport MonsterCard from '../cards/monster-card';\r\nimport WaveCard from '../cards/wave-card';\r\nimport EncounterListItem from '../list-items/encounter-list-item';\r\nimport CardGroup from '../panels/card-group';\r\n\r\ninterface Props {\r\n    encounters: Encounter[];\r\n    selection: Encounter | null;\r\n    parties: Party[];\r\n    library: MonsterGroup[];\r\n    showHelp: boolean;\r\n    selectEncounter: (encounter: Encounter | null) => void;\r\n    addEncounter: () => void;\r\n    removeEncounter: () => void;\r\n    addEncounterSlot: (monster: Monster, waveID: string | null) => void;\r\n    removeEncounterSlot: (encounterSlot: EncounterSlot, waveID: string | null) => void;\r\n    addWave: () => void;\r\n    removeWave: (wave: EncounterWave) => void;\r\n    changeValue: (source: any, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, value: number) => void;\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n}\r\n\r\ninterface State {\r\n    filter: {\r\n        name: string,\r\n        challengeMin: number;\r\n        challengeMax: number;\r\n        category: string;\r\n        size: string;\r\n    };\r\n}\r\n\r\nexport default class EncounterBuilderScreen extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            filter: {\r\n                name: '',\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: 'all types',\r\n                size: 'all sizes'\r\n            }\r\n        };\r\n    }\r\n\r\n    private inEncounter(monster: Monster) {\r\n        let result = false;\r\n\r\n        if (this.props.selection) {\r\n            const group = Utils.getMonsterGroup(monster, this.props.library);\r\n\r\n            this.props.selection.slots.forEach(slot => {\r\n                if ((slot.monsterGroupName === group.name) && (slot.monsterName === monster.name)) {\r\n                    result = true;\r\n                }\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private matchMonster(monster: Monster) {\r\n        if (monster.challenge < this.state.filter.challengeMin) {\r\n            return false;\r\n        }\r\n\r\n        if (monster.challenge > this.state.filter.challengeMax) {\r\n            return false;\r\n        }\r\n\r\n        if (this.state.filter.name !== '') {\r\n            if (!Utils.match(this.state.filter.name, monster.name)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.filter.category !== 'all types') {\r\n            if (monster.category !== this.state.filter.category) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.filter.size !== 'all sizes') {\r\n            if (monster.size !== this.state.filter.size) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private changeFilterValue(type: 'name' | 'challengeMin' | 'challengeMax' | 'category' | 'size', value: any) {\r\n        // eslint-disable-next-line\r\n        this.state.filter[type] = value;\r\n        this.setState({\r\n            filter: this.state.filter\r\n        });\r\n    }\r\n\r\n    private nudgeFilterValue(type: 'challengeMin' | 'challengeMax', delta: number) {\r\n        const value = Utils.nudgeChallenge(this.state.filter[type], delta);\r\n        this.changeFilterValue(type, value);\r\n    }\r\n\r\n    private resetFilter() {\r\n        this.setState({\r\n            filter: {\r\n                name: '',\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: 'all types',\r\n                size: 'all sizes'\r\n            }\r\n        });\r\n    }\r\n\r\n    private getMonsterCards(slots: EncounterSlot[], waveID: string | null) {\r\n        const cards = [];\r\n\r\n        slots.forEach(slot => {\r\n            const monster = this.props.getMonster(slot.monsterName, slot.monsterGroupName);\r\n            if (monster) {\r\n                cards.push(\r\n                    <div className='column' key={monster.id}>\r\n                        <MonsterCard\r\n                            combatant={monster}\r\n                            slot={slot}\r\n                            encounter={this.props.selection as Encounter}\r\n                            mode={'view encounter'}\r\n                            nudgeValue={(source, type, delta) => this.props.nudgeValue(source, type, delta)}\r\n                            removeEncounterSlot={source => this.props.removeEncounterSlot(source, waveID)}\r\n                        />\r\n                    </div>\r\n                );\r\n            } else {\r\n                const index = slots.indexOf(slot);\r\n                const error = 'unknown monster: ' + slot.monsterName + ' in group ' + slot.monsterGroupName;\r\n                cards.push(\r\n                    <div className='column' key={index}>\r\n                        <ErrorCard\r\n                            getContent={() => <div className='section'>{error}</div>}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n        });\r\n\r\n        if (slots.length === 0) {\r\n            cards.push(\r\n                <div className='column' key='empty'>\r\n                    <InfoCard getContent={() => <div className='section'>no monsters</div>} />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return cards;\r\n    }\r\n\r\n    private getLibrarySection() {\r\n        if (!this.props.selection) {\r\n            return null;\r\n        }\r\n\r\n        const libraryCards = [];\r\n        libraryCards.push(\r\n            <div className='column' key='filter'>\r\n                <FilterCard\r\n                    filter={this.state.filter}\r\n                    changeValue={(type, value) => this.changeFilterValue(type, value)}\r\n                    nudgeValue={(type, delta) => this.nudgeFilterValue(type, delta)}\r\n                    resetFilter={() => this.resetFilter()}\r\n                />\r\n            </div>\r\n        );\r\n\r\n        const monsters: Monster[] = [];\r\n        if (this.props.selection) {\r\n            this.props.library.forEach(group => {\r\n                group.monsters.forEach(monster => {\r\n                    if (this.matchMonster(monster)) {\r\n                        monsters.push(monster);\r\n                    }\r\n                });\r\n            });\r\n            monsters.sort((a, b) => {\r\n                if (a.name < b.name) { return -1; }\r\n                if (a.name > b.name) { return 1; }\r\n                return 0;\r\n            });\r\n        }\r\n        monsters.forEach(monster => {\r\n            libraryCards.push(\r\n                <div className='column' key={monster.id}>\r\n                    <MonsterCard\r\n                        key={monster.id}\r\n                        combatant={monster}\r\n                        encounter={this.props.selection as Encounter}\r\n                        library={this.props.library}\r\n                        mode={'view encounter'}\r\n                        addEncounterSlot={(combatant, waveID) => this.props.addEncounterSlot(combatant, waveID)}\r\n                    />\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <CardGroup\r\n                heading='monster library'\r\n                content={libraryCards}\r\n                showToggle={true}\r\n            />\r\n        );\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let help = null;\r\n            if (this.props.showHelp) {\r\n                help = (\r\n                    <EncounterBuilderCard encounters={this.props.encounters} />\r\n                );\r\n            }\r\n\r\n            const encounters = [];\r\n            for (let n = 0; n !== this.props.encounters.length; ++n) {\r\n                const e = this.props.encounters[n];\r\n                encounters.push(\r\n                    <EncounterListItem\r\n                        key={e.id}\r\n                        encounter={e}\r\n                        selected={e === this.props.selection}\r\n                        setSelection={encounter => this.props.selectEncounter(encounter)}\r\n                    />\r\n                );\r\n            }\r\n\r\n            let encounterName;\r\n            const encounterCards = [];\r\n            let waves: JSX.Element[] = [];\r\n\r\n            if (this.props.selection) {\r\n                encounterName = this.props.selection.name || 'unnamed encounter';\r\n\r\n                encounterCards.push(\r\n                    <div className='column' key='info'>\r\n                        <EncounterCard\r\n                            selection={this.props.selection}\r\n                            parties={this.props.parties}\r\n                            changeValue={(type, value) => this.props.changeValue(this.props.selection, type, value)}\r\n                            addWave={() => this.props.addWave()}\r\n                            removeEncounter={() => this.props.removeEncounter()}\r\n                            getMonster={(monsterName, monsterGroupName) => this.props.getMonster(monsterName, monsterGroupName)}\r\n                        />\r\n                    </div>\r\n                );\r\n\r\n                this.getMonsterCards(this.props.selection.slots, null)\r\n                    .forEach(card => encounterCards.push(card));\r\n\r\n                waves = this.props.selection.waves.map(w => {\r\n                    const waveCards = [];\r\n                    waveCards.push(\r\n                        <div className='column' key='info'>\r\n                            <WaveCard\r\n                                wave={w}\r\n                                removeWave={wave => this.props.removeWave(wave)}\r\n                                changeValue={(source, field, value) => this.props.changeValue(source, field, value)}\r\n                            />\r\n                        </div>\r\n                    );\r\n\r\n                    this.getMonsterCards(w.slots, w.id)\r\n                        .forEach(card => waveCards.push(card));\r\n\r\n                    return (\r\n                        <CardGroup\r\n                            key={w.id}\r\n                            heading={w.name || 'unnamed wave'}\r\n                            content={waveCards}\r\n                            showToggle={true}\r\n                        />\r\n                    );\r\n                });\r\n            }\r\n\r\n            return (\r\n                <div className='encounter-builder row collapse'>\r\n                    <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                        {help}\r\n                        <button onClick={() => this.props.addEncounter()}>add a new encounter</button>\r\n                        {encounters}\r\n                    </div>\r\n                    <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                        <CardGroup\r\n                            content={encounterCards}\r\n                            heading={encounterName}\r\n                            showClose={this.props.selection !== null}\r\n                            close={() => this.props.selectEncounter(null)}\r\n                        />\r\n                        {waves}\r\n                        {this.getLibrarySection()}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { MonsterGroup } from '../../models/monster-group';\r\n\r\ninterface Props {\r\n    library: MonsterGroup[];\r\n    addOpenGameContent: () => void;\r\n}\r\n\r\nexport default class HomeScreen extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            let monsters = null;\r\n            if (this.props.library.length === 0) {\r\n                monsters = (\r\n                    <div>\r\n                        <div className='divider' />\r\n                        <div className='text'>\r\n                            <div>\r\n                                since your collection of monsters is empty, you might want to start by pressing the button below to add monsters from the\r\n                                <a href='http://dnd.wizards.com/articles/features/systems-reference-document-srd' target='_blank' rel='noopener noreferrer'>\r\n                                    system reference document\r\n                                </a>\r\n                            </div>\r\n                        </div>\r\n                        <div className='text'>\r\n                            <button onClick={() => this.props.addOpenGameContent()}>add monsters</button>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='home scrollable'>\r\n                <div className='vertical-center-outer'>\r\n                    <div className='vertical-center-middle'>\r\n                        <div className='vertical-center-inner'>\r\n                            <div className='welcome-panel'>\r\n                                <div className='heading'>welcome to <b>dojo</b></div>\r\n                                <div className='text'>\r\n                                    <div><b>dojo</b> is an app for dms of dungeons and dragons fifth edition</div>\r\n                                </div>\r\n                                <div className='text'>\r\n                                    <div>\r\n                                        with <b>dojo</b> you can:\r\n                                        <ul>\r\n                                            <li>build unique, challenging monsters</li>\r\n                                            <li>create encounters of just the right difficulty for your players</li>\r\n                                            <li>design intricate tactical maps</li>\r\n                                            <li>run combat without the book-keeping</li>\r\n                                        </ul>\r\n                                    </div>\r\n                                </div>\r\n                                {monsters}\r\n                                <div className='divider' />\r\n                                <div className='text'>\r\n                                    <div>use the buttons at the bottom of the screen to access the app's features</div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { MapFolio } from '../../../models/map-folio';\r\n\r\nimport InfoCard from '../info-card';\r\n\r\ninterface Props {\r\n    mapFolios: MapFolio[];\r\n}\r\n\r\nexport default class MapFoliosCard extends React.Component<Props> {\r\n    private getContent() {\r\n        let action: JSX.Element | null = null;\r\n        if (this.props.mapFolios.length === 0) {\r\n            action = (\r\n                <div className='section'>to start a new folio, press the button below</div>\r\n            );\r\n        } else {\r\n            action = (\r\n                <div className='section'>select a map folio from the list to see the maps it contains</div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='section'>on this page you can set up folios containing tactical maps</div>\r\n                <div className='section'>when you have created a map you can use it in encounters</div>\r\n                <div className='divider'/>\r\n                {action}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            return (\r\n                <InfoCard getContent={() => this.getContent()} />\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Map } from '../../models/map-folio';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    map: Map;\r\n    changeValue: (map: Map, field: string, value: string) => void;\r\n    editMap: (map: Map) => void;\r\n    removeMap: (map: Map) => void;\r\n}\r\n\r\nexport default class MapCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div className='card map'>\r\n                    <div className='heading'>\r\n                        <div className='title'>{this.props.map.name || 'unnamed map'}</div>\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='map name'\r\n                                value={this.props.map.name}\r\n                                onChange={event => this.props.changeValue(this.props.map, 'name', event.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='section centered'>\r\n                            <MapPanel\r\n                                map={this.props.map}\r\n                                mode='thumbnail'\r\n                            />\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='section'>\r\n                            <button onClick={() => this.props.editMap(this.props.map)}>edit map</button>\r\n                            <ConfirmButton text='delete map' callback={() => this.props.removeMap(this.props.map)} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { MapFolio } from '../../models/map-folio';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport InfoCard from './info-card';\r\n\r\ninterface Props {\r\n    selection: MapFolio;\r\n    changeValue: (source: MapFolio, field: string, value: string) => void;\r\n    addMap: () => void;\r\n    removeMapFolio: () => void;\r\n}\r\n\r\nexport default class MapFolioCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const heading = (\r\n                <div className='heading'>\r\n                    <div className='title'>map folio</div>\r\n                </div>\r\n            );\r\n\r\n            const content = (\r\n                <div>\r\n                    <div className='section'>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='folio name'\r\n                            value={this.props.selection.name}\r\n                            onChange={event => this.props.changeValue(this.props.selection, 'name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <button onClick={() => this.props.addMap()}>add a new map</button>\r\n                        <ConfirmButton text='delete folio' callback={() => this.props.removeMapFolio()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            return (\r\n                <InfoCard getHeading={() => heading} getContent={() => content} />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { MapFolio } from '../../models/map-folio';\r\n\r\ninterface Props {\r\n    mapFolio: MapFolio;\r\n    selected: boolean;\r\n    setSelection: (mapFolio: MapFolio) => void;\r\n}\r\n\r\nexport default class MapFolioListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const maps = [];\r\n            for (let n = 0; n !== this.props.mapFolio.maps.length; ++n) {\r\n                const map = this.props.mapFolio.maps[n];\r\n                const name = map.name || 'unnamed map';\r\n                maps.push(<div key={map.id} className='text'>{name}</div>);\r\n            }\r\n            if (maps.length === 0) {\r\n                maps.push(<div key='empty' className='text'>no maps</div>);\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.mapFolio)}>\r\n                    <div className='heading'>{this.props.mapFolio.name || 'unnamed folio'}</div>\r\n                    {maps}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Map, MapFolio } from '../../models/map-folio';\r\n\r\nimport InfoCard from '../cards/info-card';\r\nimport MapFoliosCard from '../cards/information/map-folios-card';\r\nimport MapCard from '../cards/map-card';\r\nimport MapFolioCard from '../cards/map-folio-card';\r\nimport MapFolioListItem from '../list-items/map-folio-list-item';\r\nimport CardGroup from '../panels/card-group';\r\n\r\ninterface Props {\r\n    mapFolios: MapFolio[];\r\n    selection: MapFolio | null;\r\n    showHelp: boolean;\r\n    selectMapFolio: (mapFolio: MapFolio | null) => void;\r\n    addMapFolio: () => void;\r\n    removeMapFolio: () => void;\r\n    addMap: () => void;\r\n    editMap: (map: Map) => void;\r\n    removeMap: (map: Map) => void;\r\n    changeValue: (source: {}, field: string, value: any) => void;\r\n}\r\n\r\nexport default class MapFoliosScreen extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            let help = null;\r\n            if (this.props.showHelp) {\r\n                help = (\r\n                    <MapFoliosCard mapFolios={this.props.mapFolios} />\r\n                );\r\n            }\r\n\r\n            const folios = [];\r\n            for (let n = 0; n !== this.props.mapFolios.length; ++n) {\r\n                const mapFolio = this.props.mapFolios[n];\r\n                folios.push(\r\n                    <MapFolioListItem\r\n                        key={mapFolio.id}\r\n                        mapFolio={mapFolio}\r\n                        selected={mapFolio === this.props.selection}\r\n                        setSelection={f => this.props.selectMapFolio(f)}\r\n                    />\r\n                );\r\n            }\r\n\r\n            let folio = null;\r\n            if (this.props.selection) {\r\n                const folioCards = [];\r\n\r\n                folioCards.push(\r\n                    <div className='column' key='info'>\r\n                        <MapFolioCard\r\n                            selection={this.props.selection}\r\n                            addMap={() => this.props.addMap()}\r\n                            removeMapFolio={() => this.props.removeMapFolio()}\r\n                            changeValue={(source, field, value) => this.props.changeValue(source, field, value)}\r\n                        />\r\n                    </div>\r\n                );\r\n\r\n                this.props.selection.maps.forEach(m => {\r\n                    folioCards.push(\r\n                        <div className='column' key={m.id}>\r\n                            <MapCard\r\n                                map={m}\r\n                                editMap={map => this.props.editMap(map)}\r\n                                removeMap={map => this.props.removeMap(map)}\r\n                                changeValue={(source, type, value) => this.props.changeValue(source, type, value)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                if (this.props.selection.maps.length === 0) {\r\n                    folioCards.push(\r\n                        <div className='column' key='empty'>\r\n                            <InfoCard getContent={() => <div className='section'>no maps</div>} />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                folio = (\r\n                    <div>\r\n                        <CardGroup\r\n                            content={folioCards}\r\n                            heading={this.props.selection.name || 'unnamed folio'}\r\n                            showClose={this.props.selection !== null}\r\n                            close={() => this.props.selectMapFolio(null)}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='map-builder row collapse'>\r\n                    <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                        {help}\r\n                        <button onClick={() => this.props.addMapFolio()}>add a new map folio</button>\r\n                        {folios}\r\n                    </div>\r\n                    <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                        {folio}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport InfoCard from '../info-card';\r\n\r\nexport default class MonsterLibraryCard extends React.Component {\r\n    private getContent() {\r\n        return (\r\n            <div>\r\n                <div className='section'>you can maintain your menagerie of monsters here</div>\r\n                <div className='divider'/>\r\n                <div className='section'>select a monster group from the list to see stat blocks for monsters in that group</div>\r\n                <div className='section'>to quickly find a monster, type its name into the filter box</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <InfoCard getContent={() => this.getContent()} />\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { MonsterGroup } from '../../models/monster-group';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport InfoCard from './info-card';\r\n\r\ninterface Props {\r\n    selection: MonsterGroup;\r\n    filter: string | null;\r\n    changeValue: (field: string, value: string) => void;\r\n    addMonster: () => void;\r\n    sortMonsters: () => void;\r\n    removeMonsterGroup: () => void;\r\n}\r\n\r\nexport default class MonsterGroupCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const heading = (\r\n                <div className='heading'>\r\n                    <div className='title'>monster group</div>\r\n                </div>\r\n            );\r\n\r\n            const content = (\r\n                <div>\r\n                    <div className='section'>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='group name'\r\n                            value={this.props.selection.name}\r\n                            disabled={!!this.props.filter}\r\n                            onChange={event => this.props.changeValue('name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.addMonster()}>add a new monster</button>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.sortMonsters()}>sort monsters</button>\r\n                        <ConfirmButton text='delete group' callback={() => this.props.removeMonsterGroup()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            return (\r\n                <InfoCard getHeading={() => heading} getContent={() => content} />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { MonsterGroup } from '../../models/monster-group';\r\n\r\ninterface Props {\r\n    group: MonsterGroup;\r\n    selected: boolean;\r\n    filter: string;\r\n    setSelection: (group: MonsterGroup) => void;\r\n}\r\n\r\nexport default class MonsterGroupListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const matchGroup = Utils.match(this.props.filter, this.props.group.name);\r\n\r\n            const monsters = [];\r\n            for (let n = 0; n !== this.props.group.monsters.length; ++n) {\r\n                const monster = this.props.group.monsters[n];\r\n                const matchMonster = Utils.match(this.props.filter, monster.name);\r\n                if (matchGroup || matchMonster) {\r\n                    let name = monster.name;\r\n                    if (!name) {\r\n                        name = 'unnamed monster';\r\n                    }\r\n                    monsters.push(<div key={monster.id} className='text'>{name}</div>);\r\n                }\r\n            }\r\n            if (monsters.length === 0) {\r\n                monsters.push(<div key='empty' className='text'>no monsters</div>);\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.group)}>\r\n                    <div className='heading'>{this.props.group.name || 'unnamed group'}</div>\r\n                    {monsters}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Monster, MonsterGroup } from '../../models/monster-group';\r\n\r\nimport InfoCard from '../cards/info-card';\r\nimport MonsterLibraryCard from '../cards/information/monster-library-card';\r\nimport MonsterCard from '../cards/monster-card';\r\nimport MonsterGroupCard from '../cards/monster-group-card';\r\nimport MonsterGroupListItem from '../list-items/monster-group-list-item';\r\nimport CardGroup from '../panels/card-group';\r\n\r\ninterface Props {\r\n    library: MonsterGroup[];\r\n    selection: MonsterGroup | null;\r\n    showHelp: boolean;\r\n    filter: string;\r\n    selectMonsterGroup: (group: MonsterGroup | null) => void;\r\n    addMonsterGroup: () => void;\r\n    removeMonsterGroup: () => void;\r\n    addMonster: () => void;\r\n    removeMonster: (monster: Monster) => void;\r\n    editMonster: (monster: Monster) => void;\r\n    cloneMonster: (monster: Monster, name: string) => void;\r\n    sortMonsters: () => void;\r\n    moveToGroup: (monster: Monster, groupID: string) => void;\r\n    changeValue: (source: any, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, value: number) => void;\r\n}\r\n\r\nexport default class MonsterLibraryScreen extends React.Component<Props> {\r\n    private showMonsterGroup(group: MonsterGroup) {\r\n        let result = Utils.match(this.props.filter, group.name);\r\n\r\n        if (!result) {\r\n            group.monsters.forEach(monster => {\r\n                result = Utils.match(this.props.filter, monster.name) || result;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let help = null;\r\n            if (this.props.showHelp) {\r\n                help = (\r\n                    <MonsterLibraryCard />\r\n                );\r\n            }\r\n\r\n            const listItems = [];\r\n            for (let n = 0; n !== this.props.library.length; ++n) {\r\n                const group = this.props.library[n];\r\n                if (this.showMonsterGroup(group)) {\r\n                    listItems.push(\r\n                        <MonsterGroupListItem\r\n                            key={group.id}\r\n                            group={group}\r\n                            filter={this.props.filter}\r\n                            selected={group === this.props.selection}\r\n                            setSelection={grp => this.props.selectMonsterGroup(grp)}\r\n                        />\r\n                    );\r\n                }\r\n            }\r\n\r\n            const cards = [];\r\n\r\n            if (this.props.selection) {\r\n                cards.push(\r\n                    <div className='column' key='info'>\r\n                        <MonsterGroupCard\r\n                            selection={this.props.selection}\r\n                            filter={this.props.filter}\r\n                            addMonster={() => this.props.addMonster()}\r\n                            sortMonsters={() => this.props.sortMonsters()}\r\n                            changeValue={(type, value) => this.props.changeValue(this.props.selection, type, value)}\r\n                            removeMonsterGroup={() => this.props.removeMonsterGroup()}\r\n                        />\r\n                    </div>\r\n                );\r\n\r\n                const monsters = this.props.selection.monsters.filter(monster => {\r\n                    return Utils.match(this.props.filter, monster.name);\r\n                });\r\n\r\n                if (monsters.length !== 0) {\r\n                    monsters.forEach(m => {\r\n                        cards.push(\r\n                            <div className='column' key={m.id}>\r\n                                <MonsterCard\r\n                                    combatant={m}\r\n                                    mode={'view editable'}\r\n                                    library={this.props.library}\r\n                                    changeValue={(source, type, value) => this.props.changeValue(source, type, value)}\r\n                                    nudgeValue={(source, type, delta) => this.props.nudgeValue(source, type, delta)}\r\n                                    moveToGroup={(monster, groupID) => this.props.moveToGroup(monster, groupID)}\r\n                                    removeMonster={monster => this.props.removeMonster(monster)}\r\n                                    editMonster={monster => this.props.editMonster(monster)}\r\n                                    cloneMonster={(monster, monsterName) => this.props.cloneMonster(monster, monsterName)}\r\n                                />\r\n                            </div>\r\n                        );\r\n                    });\r\n                } else {\r\n                    cards.push(\r\n                        <div className='column' key='empty'>\r\n                            <InfoCard getContent={() => <div className='section'>no monsters</div>} />\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n\r\n            let name;\r\n            if (this.props.selection) {\r\n                name = this.props.selection.name;\r\n                if (!name) {\r\n                    name = 'unnamed group';\r\n                }\r\n            }\r\n\r\n            return (\r\n                <div className='monster-library row collapse'>\r\n                    <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                        {help}\r\n                        <button onClick={() => this.props.addMonsterGroup()}>add a new monster group</button>\r\n                        {listItems}\r\n                    </div>\r\n                    <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                        <CardGroup\r\n                            content={cards}\r\n                            heading={name}\r\n                            showClose={this.props.selection !== null}\r\n                            close={() => this.props.selectMonsterGroup(null)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Party } from '../../../models/party';\r\n\r\nimport InfoCard from '../info-card';\r\n\r\ninterface Props {\r\n    parties: Party[];\r\n}\r\n\r\nexport default class PartiesCard extends React.Component<Props> {\r\n    private getContent() {\r\n        let action: JSX.Element | null = null;\r\n        if (this.props.parties.length === 0) {\r\n            action = (\r\n                <div className='section'>to start adding a party, press the button below</div>\r\n            );\r\n        } else {\r\n            action = (\r\n                <div className='section'>select a party from the list to see pc details</div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='section'>this page is where you can tell dojo all about your pcs</div>\r\n                <div className='section'>you can add a party for each of your gaming groups</div>\r\n                <div className='divider'/>\r\n                {action}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            return (\r\n                <InfoCard getContent={() => this.getContent()} />\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Party } from '../../models/party';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport InfoCard from './info-card';\r\n\r\ninterface Props {\r\n    selection: Party;\r\n    changeValue: (field: string, value: string) => void;\r\n    addPC: () => void;\r\n    sortPCs: () => void;\r\n    removeParty: () => void;\r\n}\r\n\r\nexport default class PartyCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const activePCs = this.props.selection.pcs.filter(pc => pc.active);\r\n\r\n            const languages = activePCs\r\n                .map(pc => pc.languages)\r\n                .join(', ')\r\n                .split(/[ ,;]+/)\r\n                .reduce((array: string[], value) => {\r\n                    if (array.indexOf(value) === -1) {\r\n                        array.push(value);\r\n                    }\r\n                    return array;\r\n                }, [])\r\n                .sort((a, b) => {\r\n                    if (a === 'Common') {\r\n                        return -1;\r\n                    }\r\n                    if (b === 'Common') {\r\n                        return 1;\r\n                    }\r\n                    return a.localeCompare(b);\r\n                })\r\n                .join(', ');\r\n\r\n            let insightSummary = '-';\r\n            let investigationSummary = '-';\r\n            let perceptionSummary = '-';\r\n\r\n            if (activePCs.length !== 0) {\r\n                const insight: { min: number | null, max: number | null } = { min: null, max: null };\r\n                const invest: { min: number | null, max: number | null } = { min: null, max: null };\r\n                const percep: { min: number | null, max: number | null } = { min: null, max: null };\r\n\r\n                activePCs.forEach(pc => {\r\n                    insight.min = insight.min === null ? pc.passiveInsight : Math.min(insight.min, pc.passiveInsight);\r\n                    insight.max = insight.max === null ? pc.passiveInsight : Math.max(insight.max, pc.passiveInsight);\r\n                    invest.min = invest.min === null ? pc.passiveInvestigation : Math.min(invest.min, pc.passiveInvestigation);\r\n                    invest.max = invest.max === null ? pc.passiveInvestigation : Math.max(invest.max, pc.passiveInvestigation);\r\n                    percep.min = percep.min === null ? pc.passivePerception : Math.min(percep.min, pc.passivePerception);\r\n                    percep.max = percep.max === null ? pc.passivePerception : Math.max(percep.max, pc.passivePerception);\r\n                });\r\n\r\n                insightSummary = insight.min === insight.max ? (insight.min as number).toString() : insight.min + ' - ' + insight.max;\r\n                investigationSummary = invest.min === invest.max ? (invest.min as number).toString() : invest.min + ' - ' + invest.max;\r\n                perceptionSummary = percep.min === percep.max ? (percep.min as number).toString() : percep.min + ' - ' + percep.max;\r\n            }\r\n\r\n            const heading = (\r\n                <div className='heading'>\r\n                    <div className='title'>party</div>\r\n                </div>\r\n            );\r\n\r\n            const content = (\r\n                <div>\r\n                    <div className='section'>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='party name'\r\n                            value={this.props.selection.name}\r\n                            onChange={event => this.props.changeValue('name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <div className='subheading'>languages</div>\r\n                    </div>\r\n                    <div className='section'>\r\n                        {languages}\r\n                    </div>\r\n                    <div className='section'>\r\n                        <div className='subheading'>passive skills</div>\r\n                    </div>\r\n                    <div className='table'>\r\n                        <div>\r\n                            <div className='cell three'><b>insight</b></div>\r\n                            <div className='cell three'><b>invest.</b></div>\r\n                            <div className='cell three'><b>percep.</b></div>\r\n                        </div>\r\n                        <div>\r\n                            <div className='cell three'>{insightSummary}</div>\r\n                            <div className='cell three'>{investigationSummary}</div>\r\n                            <div className='cell three'>{perceptionSummary}</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                    <button onClick={() => this.props.addPC()}>add a new pc</button>\r\n                        <button onClick={() => this.props.sortPCs()}>sort pcs</button>\r\n                        <ConfirmButton text='delete party' callback={() => this.props.removeParty()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            return (\r\n                <InfoCard getHeading={() => heading} getContent={() => content} />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Party } from '../../models/party';\r\n\r\ninterface Props {\r\n    party: Party;\r\n    selected: boolean;\r\n    setSelection: (party: Party) => void;\r\n}\r\n\r\nexport default class PartyListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const pcs = [];\r\n            for (let n = 0; n !== this.props.party.pcs.length; ++n) {\r\n                const pc = this.props.party.pcs[n];\r\n                let name = pc.name;\r\n                if (pc.player) {\r\n                    name += ' (' + pc.player + ')';\r\n                }\r\n                if (!name) {\r\n                    name = 'unnamed pc';\r\n                }\r\n                pcs.push(<div key={pc.id} className='text'>{name}</div>);\r\n            }\r\n            if (pcs.length === 0) {\r\n                pcs.push(<div key='empty' className='text'>no pcs</div>);\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.party)}>\r\n                    <div className='heading'>{this.props.party.name || 'unnamed party'}</div>\r\n                    {pcs}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Party, PC } from '../../models/party';\r\n\r\nimport InfoCard from '../cards/info-card';\r\nimport PartiesCard from '../cards/information/parties-card';\r\nimport PartyCard from '../cards/party-card';\r\nimport PCCard from '../cards/pc-card';\r\nimport PartyListItem from '../list-items/party-list-item';\r\nimport CardGroup from '../panels/card-group';\r\n\r\ninterface Props {\r\n    parties: Party[];\r\n    selection: Party | null;\r\n    showHelp: boolean;\r\n    selectParty: (party: Party | null) => void;\r\n    addParty: () => void;\r\n    removeParty: () => void;\r\n    addPC: () => void;\r\n    removePC: (pc: PC) => void;\r\n    sortPCs: () => void;\r\n    changeValue: (source: any, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, value: number) => void;\r\n}\r\n\r\nexport default class PartiesScreen extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            let help = null;\r\n            if (this.props.showHelp) {\r\n                help = (\r\n                    <PartiesCard parties={this.props.parties}/>\r\n                );\r\n            }\r\n\r\n            const parties = [];\r\n            for (let n = 0; n !== this.props.parties.length; ++n) {\r\n                const p = this.props.parties[n];\r\n                parties.push(\r\n                    <PartyListItem\r\n                        key={p.id}\r\n                        party={p}\r\n                        selected={p === this.props.selection}\r\n                        setSelection={party => this.props.selectParty(party)}\r\n                    />\r\n                );\r\n            }\r\n\r\n            const activeCards: JSX.Element[] = [];\r\n            const inactiveCards: JSX.Element[] = [];\r\n\r\n            if (this.props.selection) {\r\n                activeCards.push(\r\n                    <div className='column' key='info'>\r\n                        <PartyCard\r\n                            selection={this.props.selection}\r\n                            addPC={() => this.props.addPC()}\r\n                            sortPCs={() => this.props.sortPCs()}\r\n                            changeValue={(type, value) => this.props.changeValue(this.props.selection, type, value)}\r\n                            removeParty={() => this.props.removeParty()}\r\n                        />\r\n                    </div>\r\n                );\r\n\r\n                const activePCs = this.props.selection.pcs.filter(pc => pc.active);\r\n                activePCs.forEach(activePC => {\r\n                    activeCards.push(\r\n                        <div className='column' key={activePC.id}>\r\n                            <PCCard\r\n                                combatant={activePC}\r\n                                mode={'edit'}\r\n                                changeValue={(pc, type, value) => this.props.changeValue(pc, type, value)}\r\n                                nudgeValue={(pc, type, delta) => this.props.nudgeValue(pc, type, delta)}\r\n                                removePC={pc => this.props.removePC(pc)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                const inactivePCs = this.props.selection.pcs.filter(pc => !pc.active);\r\n                inactivePCs.forEach(inactivePC => {\r\n                    inactiveCards.push(\r\n                        <div className='column' key={inactivePC.id}>\r\n                            <PCCard\r\n                                combatant={inactivePC}\r\n                                mode={'edit'}\r\n                                changeValue={(pc, type, value) => this.props.changeValue(pc, type, value)}\r\n                                nudgeValue={(pc, type, delta) => this.props.nudgeValue(pc, type, delta)}\r\n                                removePC={pc => this.props.removePC(pc)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                if (activePCs.length === 0) {\r\n                    activeCards.push(\r\n                        <div className='column' key='empty'>\r\n                            <InfoCard getContent={() => <div className='section'>no pcs</div>} />\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n\r\n            let name;\r\n            if (this.props.selection) {\r\n                name = this.props.selection.name || 'unnamed party';\r\n            }\r\n\r\n            return (\r\n                <div className='parties row collapse'>\r\n                    <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                        {help}\r\n                        <button onClick={() => this.props.addParty()}>add a new party</button>\r\n                        {parties}\r\n                    </div>\r\n                    <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                        <CardGroup\r\n                            content={activeCards}\r\n                            heading={name}\r\n                            showClose={this.props.selection !== null}\r\n                            close={() => this.props.selectParty(null)}\r\n                            hidden={!this.props.selection}\r\n                        />\r\n                        <CardGroup\r\n                            content={inactiveCards}\r\n                            heading='inactive pcs'\r\n                            showClose={false}\r\n                            hidden={inactiveCards.length === 0}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport checked from '../../resources/images/checked.svg';\r\nimport unchecked from '../../resources/images/unchecked.svg';\r\n\r\ninterface Props {\r\n    label: string;\r\n    checked: boolean;\r\n    changeValue: (value: boolean) => void;\r\n    disabled: boolean;\r\n}\r\n\r\nexport default class Checkbox extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        disabled: false\r\n    };\r\n\r\n    private click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        this.props.changeValue(!this.props.checked);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div className={this.props.disabled ? 'checkbox disabled' : 'checkbox'} onClick={e => this.click(e)}>\r\n                    <img className='image' src={this.props.checked ? checked : unchecked} alt='check' />\r\n                    <div className='checkbox-label'>{this.props.label}</div>\r\n                </div>\r\n            );\r\n\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Checkbox from '../controls/checkbox';\r\nimport ConfirmButton from '../controls/confirm-button';\r\n\r\ninterface Props {\r\n    options: {\r\n        showHelp: boolean;\r\n    };\r\n    resetAll: () => void;\r\n    changeValue: (source: {}, field: string, value: any) => void;\r\n}\r\n\r\nexport default class AboutModal extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            /* tslint:disable:max-line-length */\r\n            return (\r\n                <div className='about'>\r\n                    <div className='row'>\r\n                        <div className='columns small-6 medium-6 large-6 list-column'>\r\n                            <div className='heading'>about</div>\r\n                            <div className='section'>dojo by <a href='mailto:andy.aiken@live.co.uk'>andy aiken</a></div>\r\n                            <div className='section'>if you would like to contribut to this project, you can do so <a href='https://github.com/andyaiken/dojo' target='_blank' rel='noopener noreferrer'>here</a></div>\r\n                            <div className='section'>dungeons and dragons copyright wizards of the coast</div>\r\n                        </div>\r\n                        <div className='columns small-6 medium-6 large-6 list-column'>\r\n                            <div className='heading'>options</div>\r\n                            <ConfirmButton text='clear all data' callback={() => this.props.resetAll()} />\r\n                            <Checkbox\r\n                                label='show help cards'\r\n                                checked={this.props.options.showHelp}\r\n                                changeValue={value => this.props.changeValue(this.props.options, 'showHelp', value)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className='row'>\r\n                        <div className='columns small-12 medium-12 large-12 list-column'>\r\n                            <div className='heading'>open game license</div>\r\n                            <div className='section'>The following text is the property of Wizards of the Coast, Inc. and is Copyright 2000 Wizards of the Coast, Inc ('Wizards'). All Rights Reserved.</div>\r\n                            <ol>\r\n                                <li>Definitions: (a)'Contributors' means the copyright and/or trademark owners who have contributed Open Game Content; (b)'Derivative Material' means copyrighted material including derivative works and translations (including into other computer languages), potation, modification, correction, addition, extension, upgrade, improvement, compilation, abridgment or other form in which an existing work may be recast, transformed or adapted; (c) 'Distribute' means to reproduce, license, rent, lease, sell, broadcast, publicly display, transmit or otherwise distribute; (d)'Open Game Content' means the game mechanic and includes the methods, procedures, processes and routines to the extent such content does not embody the Product Identity and is an enhancement over the prior art and any additional content clearly identified as Open Game Content by the Contributor, and means any work covered by this License, including translations and derivative works under copyright law, but specifically excludes Product Identity. (e) 'Product Identity' means product and product line names, logos and identifying marks including trade dress; artifacts; creatures characters; stories, storylines, plots, thematic elements, dialogue, incidents, language, artwork, symbols, designs, depictions, likenesses, formats, poses, concepts, themes and graphic, photographic and other visual or audio representations; names and descriptions of characters, spells, enchantments, personalities, teams, personas, likenesses and special abilities; places, locations, environments, creatures, equipment, magical or supernatural abilities or effects, logos, symbols, or graphic designs; and any other trademark or registered trademark clearly identified as Product identity by the owner of the Product Identity, and which specifically excludes the Open Game Content; (f) 'Trademark' means the logos, names, mark, sign, motto, designs that are used by a Contributor to identify itself or its products or the associated products contributed to the Open Game License by the Contributor (g) 'Use', 'Used' or 'Using' means to use, Distribute, copy, edit, format, modify, translate and otherwise create Derivative Material of Open Game Content. (h) 'You' or 'Your' means the licensee in terms of this agreement.</li>\r\n                                <li>The License: This License applies to any Open Game Content that contains a notice indicating that the Open Game Content may only be Used under and in terms of this License. You must affix such a notice to any Open Game Content that you Use. No terms may be added to or subtracted from this License except as described by the License itself. No other terms or conditions may be applied to any Open Game Content distributed using this License.</li>\r\n                                <li>Offer and Acceptance: By Using the Open Game Content You indicate Your acceptance of the terms of this License.</li>\r\n                                <li>Grant and Consideration: In consideration for agreeing to use this License, the Contributors grant You a perpetual, worldwide, royalty-free, non-exclusive license with the exact terms of this License to Use, the Open Game Content.</li>\r\n                                <li>Representation of Authority to Contribute: If You are contributing original material as Open Game Content, You represent that Your Contributions are Your original creation and/or You have sufficient rights to grant the rights conveyed by this License.</li>\r\n                                <li>Notice of License Copyright: You must update the COPYRIGHT NOTICE portion of this License to include the exact text of the COPYRIGHT NOTICE of any Open Game Content You are copying, modifying or distributing, and You must add the title, the copyright date, and the copyright holder's name to the COPYRIGHT NOTICE of any original Open Game Content you Distribute.</li>\r\n                                <li>Use of Product Identity: You agree not to Use any Product Identity, including as an indication as to compatibility, except as expressly licensed in another, independent Agreement with the owner of each element of that Product Identity. You agree not to indicate compatibility or co-adaptability with any Trademark or Registered Trademark in conjunction with a work containing Open Game Content except as expressly licensed in another, independent Agreement with the owner of such Trademark or Registered Trademark. The use of any Product Identity in Open Game Content does not constitute a challenge to the ownership of that Product Identity. The owner of any Product Identity used in Open Game Content shall retain all rights, title and interest in and to that Product Identity.</li>\r\n                                <li>Identification: If you distribute Open Game Content You must clearly indicate which portions of the work that you are distributing are Open Game Content.</li>\r\n                                <li>Updating the License: Wizards or its designated Agents may publish updated versions of this License. You may use any authorized version of this License to copy, modify and distribute any Open Game Content originally distributed under any version of this License.</li>\r\n                                <li>Copy of this License: You MUST include a copy of this License with every copy of the Open Game Content You Distribute.</li>\r\n                                <li>Use of Contributor Credits: You may not market or advertise the Open Game Content using the name of any Contributor unless You have written permission from the Contributor to do so.</li>\r\n                                <li>Inability to Comply: If it is impossible for You to comply with any of the terms of this License with respect to some or all of the Open Game Content due to statute, judicial order, or governmental regulation then You may not Use any Open Game Material so affected.</li>\r\n                                <li>Termination: This License will terminate automatically if You fail to comply with all terms herein and fail to cure such breach within 30 days of becoming aware of the breach. All sublicenses shall survive the termination of this License.</li>\r\n                                <li>Reformation: If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable.</li>\r\n                                <li>COPYRIGHT NOTICE Open Game License v 1.0 Copyright 2000, Wizards of the Coast, Inc.</li>\r\n                            </ol>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n            /* tslint:enable:max-line-length */\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    options: { id: string; text: string; disabled?: boolean }[];\r\n    selectedID: string | null;\r\n    select: (optionID: string) => void;\r\n    tabs: boolean;\r\n    disabled: boolean;\r\n    itemsPerRow: number;\r\n}\r\n\r\nexport default class Selector extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        tabs: false,\r\n        disabled: false,\r\n        itemsPerRow: null\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            let style = this.props.tabs ? 'selector tabs' : 'selector radio';\r\n            if (this.props.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            const itemsPerRow = this.props.itemsPerRow ? this.props.itemsPerRow : this.props.options.length;\r\n            const rowCount = Math.ceil(this.props.options.length / itemsPerRow);\r\n            const rowContents: JSX.Element[][] = [];\r\n            for (let n = 0; n !== rowCount; ++n) {\r\n                rowContents.push([]);\r\n            }\r\n\r\n            this.props.options.forEach(option => {\r\n                const index = this.props.options.indexOf(option);\r\n                const rowIndex = Math.floor(index / itemsPerRow);\r\n                const row = rowContents[rowIndex];\r\n                row.push(\r\n                    <SelectorOption\r\n                        key={option.id}\r\n                        option={option}\r\n                        selected={option.id === this.props.selectedID}\r\n                        count={itemsPerRow}\r\n                        select={(optionID: string) => this.props.select(optionID)}\r\n                    />\r\n                );\r\n            });\r\n\r\n            const rowSections = rowContents.map(row => {\r\n                const index = rowContents.indexOf(row);\r\n                return <div key={index}>{row}</div>;\r\n            });\r\n\r\n            return (\r\n                <div className={style}>\r\n                    {rowSections}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface SelectorOptionInterface {\r\n    option: { id: string; text: string; disabled?: boolean };\r\n    selected: boolean;\r\n    count: number;\r\n    select: (optionID: string) => void;\r\n}\r\n\r\nclass SelectorOption extends React.Component<SelectorOptionInterface> {\r\n    private click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (!this.props.option.disabled) {\r\n            this.props.select(this.props.option.id);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const width = 'calc(((100% - 1px) / ' + this.props.count + ') - 2px )';\r\n\r\n            let style = 'option';\r\n            if (this.props.selected) {\r\n                style += ' selected';\r\n            }\r\n            if (this.props.option.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            return (\r\n                <div key={this.props.option.id} className={style} style={{ width: width }} title={this.props.option.text} onClick={e => this.click(e)}>\r\n                    {this.props.option.text}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { CombatSetup } from '../../models/combat';\r\nimport { Encounter, EncounterSlot } from '../../models/encounter';\r\nimport { MapFolio } from '../../models/map-folio';\r\nimport { Monster } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport Selector from '../controls/selector';\r\nimport DifficultyChartPanel from '../panels/difficulty-chart-panel';\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    combatSetup: CombatSetup;\r\n    parties: Party[];\r\n    encounters: Encounter[];\r\n    mapFolios: MapFolio[];\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n    notify: () => void;\r\n}\r\n\r\ninterface State {\r\n    combatSetup: CombatSetup;\r\n}\r\n\r\nexport default class CombatStartModal extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        parties: null,\r\n        mapFolios: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            combatSetup: props.combatSetup\r\n        };\r\n    }\r\n\r\n    private setParty(partyID: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.partyID = partyID;\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        }, () => this.props.notify());\r\n    }\r\n\r\n    private setEncounter(encounterID: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.encounterID = encounterID;\r\n        const enc = this.props.encounters.find(e => e.id === encounterID);\r\n        if (enc) {\r\n            // eslint-disable-next-line\r\n            this.state.combatSetup.monsterNames = Utils.getMonsterNames(enc);\r\n        }\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        }, () => this.props.notify());\r\n    }\r\n\r\n    private setFolioID(id: string) {\r\n        if (id && (id !== '')) {\r\n            const folio = this.props.mapFolios.find(f => f.id === id);\r\n            if (folio) {\r\n                // eslint-disable-next-line\r\n                this.state.combatSetup.folioID = folio.id;\r\n                // eslint-disable-next-line\r\n                this.state.combatSetup.mapID = folio.maps.length === 1 ? folio.maps[0].id : null;\r\n            }\r\n        } else {\r\n            // eslint-disable-next-line\r\n            this.state.combatSetup.folioID = null;\r\n            // eslint-disable-next-line\r\n            this.state.combatSetup.mapID = null;\r\n        }\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        });\r\n    }\r\n\r\n    private setMapID(id: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.mapID = id;\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        });\r\n    }\r\n\r\n    private setWave(waveID: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.waveID = waveID;\r\n        const enc = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n        if (enc) {\r\n            const wave = enc.waves.find(w => w.id === waveID);\r\n            if (wave) {\r\n                // eslint-disable-next-line\r\n                this.state.combatSetup.monsterNames = Utils.getMonsterNames(wave);\r\n            }\r\n        }\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        }, () => this.props.notify());\r\n    }\r\n\r\n    private setEncounterInitMode(mode: 'manual' | 'individual' | 'group') {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.encounterInitMode = mode;\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        });\r\n    }\r\n\r\n    private changeName(slotID: string, index: number, name: string) {\r\n        const slot = this.state.combatSetup.monsterNames.find(s => s.id === slotID);\r\n        if (slot) {\r\n            slot.names[index] = name;\r\n            this.setState({\r\n                combatSetup: this.state.combatSetup\r\n            });\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    private getPartySection() {\r\n        if (this.props.parties.length === 0) {\r\n            return (\r\n                <div className='section'>you have not defined any parties</div>\r\n            );\r\n        }\r\n\r\n        const partyOptions = this.props.parties.map(party => {\r\n            return {\r\n                id: party.id,\r\n                text: party.name || 'unnamed party'\r\n            };\r\n        });\r\n\r\n        let partyContent = null;\r\n        if (this.state.combatSetup.partyID) {\r\n            const selectedParty = this.props.parties.find(p => p.id === this.state.combatSetup.partyID);\r\n            if (selectedParty) {\r\n                const pcs = selectedParty.pcs.filter(pc => pc.active);\r\n\r\n                const pcSections = pcs.map(pc =>\r\n                    (\r\n                        <li key={pc.id}>\r\n                            {pc.name || 'unnamed pc'} (level {pc.level})\r\n                        </li>\r\n                    )\r\n                );\r\n\r\n                if (pcSections.length === 0) {\r\n                    pcSections.push(\r\n                        <li key={'empty'}>no pcs</li>\r\n                    );\r\n                }\r\n\r\n                partyContent = (\r\n                    <div>\r\n                        <div className='subheading'>pcs</div>\r\n                        <ul>{pcSections}</ul>\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='heading'>party</div>\r\n                <Dropdown\r\n                    options={partyOptions}\r\n                    placeholder='select party...'\r\n                    selectedID={this.state.combatSetup.partyID ? this.state.combatSetup.partyID : undefined}\r\n                    select={optionID => this.setParty(optionID)}\r\n                />\r\n                {partyContent}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getEncounterSection() {\r\n        if (this.props.encounters.length === 0) {\r\n            return (\r\n                <div className='section'>you have not built any encounters</div>\r\n            );\r\n        }\r\n\r\n        const encounterOptions = this.props.encounters.map(encounter => {\r\n            return {\r\n                id: encounter.id,\r\n                text: encounter.name || 'unnamed encounter'\r\n            };\r\n        });\r\n\r\n        let encounterContent = null;\r\n        if (this.state.combatSetup.encounterID) {\r\n            const selectedEncounter = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n            if (selectedEncounter) {\r\n                const monsterSections = selectedEncounter.slots.map(slot => {\r\n                    let name = slot.monsterName || 'unnamed monster';\r\n                    if (slot.count > 1) {\r\n                        name += ' (x' + slot.count + ')';\r\n                    }\r\n                    return (\r\n                        <li key={slot.id}>{name}</li>\r\n                    );\r\n                });\r\n\r\n                if (monsterSections.length === 0) {\r\n                    monsterSections.push(\r\n                        <li key={'empty'}>no monsters</li>\r\n                    );\r\n                }\r\n\r\n                const waves = selectedEncounter.waves.map(wave => {\r\n                    if (wave.slots.length === 0) {\r\n                        return null;\r\n                    }\r\n\r\n                    const waveMonsters = wave.slots.map(slot => {\r\n                        let name = slot.monsterName || 'unnamed monster';\r\n                        if (slot.count > 1) {\r\n                            name += ' x' + slot.count;\r\n                        }\r\n                        return (\r\n                            <li key={slot.id}>{name}</li>\r\n                        );\r\n                    });\r\n\r\n                    return (\r\n                        <div key={wave.id}>\r\n                            <div className='subheading'>{wave.name || 'unnamed wave'}</div>\r\n                            <ul>{waveMonsters}</ul>\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                encounterContent = (\r\n                    <div>\r\n                        <div className='subheading'>monsters</div>\r\n                        <ul>{monsterSections}</ul>\r\n                        {waves}\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='heading'>encounter</div>\r\n                <Dropdown\r\n                    options={encounterOptions}\r\n                    placeholder='select encounter...'\r\n                    selectedID={this.state.combatSetup.encounterID ? this.state.combatSetup.encounterID : undefined}\r\n                    select={optionID => this.setEncounter(optionID)}\r\n                />\r\n                {encounterContent}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getMapSection() {\r\n        const folios = this.props.mapFolios.filter(folio => folio.maps.length > 0);\r\n        if (folios.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        const folioOptions = [{\r\n            id: '',\r\n            text: 'none'\r\n        }].concat(folios.map(folio => {\r\n            return {\r\n                id: folio.id,\r\n                text: folio.name || 'unnamed folio'\r\n            };\r\n        }));\r\n\r\n        let selectMapSection = null;\r\n        let thumbnailSection = null;\r\n\r\n        if (this.state.combatSetup.folioID) {\r\n            const folio = this.props.mapFolios.find(f => f.id === this.state.combatSetup.folioID);\r\n            if (folio) {\r\n                const mapOptions = folio.maps.map(m => {\r\n                    return {\r\n                        id: m.id,\r\n                        text: m.name || 'unnamed map'\r\n                    };\r\n                });\r\n\r\n                if (mapOptions.length !== 1) {\r\n                    selectMapSection = (\r\n                        <Selector\r\n                            options={mapOptions}\r\n                            selectedID={this.state.combatSetup.mapID}\r\n                            select={optionID => this.setMapID(optionID)}\r\n                        />\r\n                    );\r\n                }\r\n\r\n                if (this.state.combatSetup.mapID) {\r\n                    const map = folio.maps.find(m => m.id === this.state.combatSetup.mapID);\r\n                    if (map) {\r\n                        thumbnailSection = (\r\n                            <MapPanel\r\n                                map={map}\r\n                                mode='thumbnail'\r\n                            />\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='heading'>map</div>\r\n                <Dropdown\r\n                    options={folioOptions}\r\n                    placeholder='select map folio...'\r\n                    selectedID={this.state.combatSetup.folioID ? this.state.combatSetup.folioID : undefined}\r\n                    select={optionID => this.setFolioID(optionID)}\r\n                />\r\n                {selectMapSection}\r\n                {thumbnailSection}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getWaveSection() {\r\n        if (this.state.combatSetup.encounterID === null) {\r\n            return (\r\n                <div className='section'>you have not selected an encounter</div>\r\n            );\r\n        }\r\n\r\n        const selectedEncounter = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n        if (selectedEncounter) {\r\n            if (selectedEncounter.waves.length === 0) {\r\n                return (\r\n                    <div className='section'>you have not defined any waves</div>\r\n                );\r\n            }\r\n\r\n            const waveOptions = selectedEncounter.waves.map(wave => {\r\n                return {\r\n                    id: wave.id,\r\n                    text: wave.name || 'unnamed wave'\r\n                };\r\n            });\r\n\r\n            let waveContent = null;\r\n            if (this.state.combatSetup.waveID) {\r\n                const selectedWave = selectedEncounter.waves.find(w => w.id === this.state.combatSetup.waveID);\r\n                if (selectedWave) {\r\n                    const monsterSections = selectedWave.slots.map(slot => {\r\n                        let name = slot.monsterName || 'unnamed monster';\r\n                        if (slot.count > 1) {\r\n                            name += ' (x' + slot.count + ')';\r\n                        }\r\n                        return (\r\n                            <li key={slot.id}>{name}</li>\r\n                        );\r\n                    });\r\n\r\n                    if (monsterSections.length === 0) {\r\n                        monsterSections.push(\r\n                            <li key={'empty'}>no monsters</li>\r\n                        );\r\n                    }\r\n\r\n                    waveContent = (\r\n                        <div>\r\n                            <div className='subheading'>monsters</div>\r\n                            <ul>{monsterSections}</ul>\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n\r\n            return (\r\n                <div>\r\n                    <div className='heading'>wave</div>\r\n                    <Dropdown\r\n                        options={waveOptions}\r\n                        placeholder='select wave...'\r\n                        selectedID={this.state.combatSetup.waveID ? this.state.combatSetup.waveID : undefined}\r\n                        select={optionID => this.setWave(optionID)}\r\n                    />\r\n                    {waveContent}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private getDifficultySection() {\r\n        const party = this.props.parties.find(p => p.id === this.state.combatSetup.partyID);\r\n        const encounter = this.props.encounters.find(enc => enc.id === this.state.combatSetup.encounterID);\r\n\r\n        if (party && encounter) {\r\n            return (\r\n                <div>\r\n                    <div className='heading'>encounter difficulty</div>\r\n                    <DifficultyChartPanel\r\n                        party={party}\r\n                        encounter={encounter}\r\n                        getMonster={(monsterName, monsterGroupName) => this.props.getMonster(monsterName, monsterGroupName)}\r\n                    />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='heading'>encounter difficulty</div>\r\n                <div className='section'>select a party and an encounter on the left to see difficulty information.</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getMonsterSection() {\r\n        if (this.state.combatSetup.encounterID === null) {\r\n            return (\r\n                <div>\r\n                    <div className='heading'>monsters</div>\r\n                    <div className='section'>select an encounter to see monster options here.</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (!this.props.parties && this.state.combatSetup.waveID === null) {\r\n            return (\r\n                <div>\r\n                    <div className='heading'>monsters</div>\r\n                    <div className='section'>select a wave to see monster options here.</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        const selectedEncounter = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n        if (selectedEncounter) {\r\n            let slotsContainer: { slots: EncounterSlot[] } = selectedEncounter;\r\n            if (this.state.combatSetup.waveID) {\r\n                const selectedWave = selectedEncounter.waves.find(w => w.id === this.state.combatSetup.waveID);\r\n                if (selectedWave) {\r\n                    slotsContainer = selectedWave;\r\n                }\r\n            }\r\n\r\n            if (slotsContainer.slots.length === 0) {\r\n                return null;\r\n            }\r\n\r\n            const initOptions = [\r\n                {\r\n                    id: 'manual',\r\n                    text: 'enter manually'\r\n                },\r\n                {\r\n                    id: 'individual',\r\n                    text: 'roll individually'\r\n                },\r\n                {\r\n                    id: 'group',\r\n                    text: 'roll in groups'\r\n                }\r\n            ];\r\n\r\n            const names = this.state.combatSetup.monsterNames.map(slotNames => {\r\n                const slot = slotsContainer.slots.find(s => s.id === slotNames.id);\r\n                if (slot) {\r\n                    const inputs = [];\r\n                    for (let n = 0; n !== slotNames.names.length; ++n) {\r\n                        inputs.push(\r\n                            <div key={n}>\r\n                                <MonsterName\r\n                                    value={slotNames.names[n]}\r\n                                    slotID={slot.id}\r\n                                    index={n}\r\n                                    changeName={(slotID, index, value) => this.changeName(slotID, index, value)}\r\n                                />\r\n                            </div>\r\n                        );\r\n                    }\r\n                    return (\r\n                        <div key={slotNames.id} className='name-row'>\r\n                            <div className='name-label'>\r\n                                {slot.monsterName}\r\n                            </div>\r\n                            <div className='name-inputs'>\r\n                                {inputs}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n            });\r\n\r\n            return (\r\n                <div>\r\n                    <div className='heading'>monsters</div>\r\n                    <div className='subheading'>initiative</div>\r\n                    <Selector\r\n                        options={initOptions}\r\n                        selectedID={this.state.combatSetup.encounterInitMode}\r\n                        select={optionID => this.setEncounterInitMode(optionID as 'manual' | 'individual' | 'group')}\r\n                    />\r\n                    <div className='subheading'>names</div>\r\n                    <div>{names}</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    public render() {\r\n        try {\r\n            let leftSection = null;\r\n            let rightSection = null;\r\n\r\n            if (this.props.parties) {\r\n                leftSection = (\r\n                    <div>\r\n                        {this.getPartySection()}\r\n                        {this.getEncounterSection()}\r\n                        {this.getMapSection()}\r\n                    </div>\r\n                );\r\n\r\n                rightSection = (\r\n                    <div>\r\n                        {this.getDifficultySection()}\r\n                        {this.getMonsterSection()}\r\n                    </div>\r\n                );\r\n            } else {\r\n                leftSection = (\r\n                    <div>\r\n                        {this.getWaveSection()}\r\n                    </div>\r\n                );\r\n\r\n                rightSection = (\r\n                    <div>\r\n                        {this.getMonsterSection()}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='row' style={{ height: '100%', margin: '0 -15px' }}>\r\n                    <div className='column small-6 medium-6 large-6 scrollable'>\r\n                        {leftSection}\r\n                    </div>\r\n                    <div className='column small-6 medium-6 large-6 scrollable'>\r\n                        {rightSection}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface MonsterNameProps {\r\n    slotID: string;\r\n    index: number;\r\n    value: string;\r\n    changeName: (slotID: string, index: number, value: string) => void;\r\n}\r\n\r\nclass MonsterName extends React.Component<MonsterNameProps> {\r\n    public render() {\r\n        return (\r\n            <input type='text' value={this.props.value} onChange={event => this.props.changeName(this.props.slotID, this.props.index, event.target.value)} />\r\n        );\r\n    }\r\n}\r\n","export interface Condition {\r\n    id: string;\r\n    name: string;\r\n    level: number;\r\n    text: string | null;\r\n    duration: ConditionDurationSaves | ConditionDurationCombatant | ConditionDurationRounds | null;\r\n}\r\n\r\nexport interface ConditionDurationSaves {\r\n    type: 'saves';\r\n    count: number;\r\n    saveType: 'str' | 'dex' | 'con' | 'int' | 'wis' | 'cha' | 'death';\r\n    saveDC: number;\r\n    point: 'start' | 'end';\r\n}\r\n\r\nexport interface ConditionDurationCombatant {\r\n    type: 'combatant';\r\n    point: 'start' | 'end';\r\n    combatantID: string | null;\r\n}\r\n\r\nexport interface ConditionDurationRounds {\r\n    type: 'rounds';\r\n    count: number;\r\n}\r\n\r\nexport const CONDITION_TYPES = [\r\n    'blinded',\r\n    'charmed',\r\n    'deafened',\r\n    'exhaustion',\r\n    'frightened',\r\n    'grappled',\r\n    'incapacitated',\r\n    'invisible',\r\n    'paralyzed',\r\n    'petrified',\r\n    'poisoned',\r\n    'prone',\r\n    'restrained',\r\n    'stunned',\r\n    'unconscious',\r\n    'custom'\r\n];\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    items: { id: string; text: string; details: JSX.Element | string; disabled?: boolean }[];\r\n    selectedItemID: string | null;\r\n    select: (itemID: string) => void;\r\n}\r\n\r\nexport default class RadioGroup extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        // No default property values\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            const content = this.props.items.map(item => {\r\n                return (\r\n                    <RadioGroupItem\r\n                        key={item.id}\r\n                        item={item}\r\n                        selected={this.props.selectedItemID === item.id}\r\n                        select={(itemID: string) => this.props.select(itemID)}\r\n                    />\r\n                );\r\n            });\r\n\r\n            return (\r\n                <div className='radio-group'>\r\n                    {content}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface RadioGroupItemProps {\r\n    item: { id: string; text: string; details: JSX.Element | string; disabled?: boolean };\r\n    selected: boolean;\r\n    select: (itemID: string) => void;\r\n}\r\n\r\nclass RadioGroupItem extends React.Component<RadioGroupItemProps> {\r\n    public render() {\r\n        let style = 'radio-item';\r\n        let details = null;\r\n\r\n        if (this.props.selected) {\r\n            style += ' selected';\r\n            details = (\r\n                <div className='radio-item-details'>\r\n                    {this.props.item.details}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (this.props.item.disabled) {\r\n            style += ' disabled';\r\n        }\r\n\r\n        return (\r\n            <div className={style} onClick={() => this.props.select(this.props.item.id)}>\r\n                <div className='radio-item-text'>{this.props.item.text}</div>\r\n                {details}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Factory from '../../utils/factory';\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combat, Combatant } from '../../models/combat';\r\nimport { Condition, CONDITION_TYPES, ConditionDurationCombatant, ConditionDurationSaves } from '../../models/condition';\r\nimport { Monster } from '../../models/monster-group';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport RadioGroup from '../controls/radio-group';\r\nimport Selector from '../controls/selector';\r\nimport Spin from '../controls/spin';\r\n\r\ninterface Props {\r\n    condition: Condition;\r\n    combatant: Combatant & Monster;\r\n    combat: Combat;\r\n}\r\n\r\ninterface State {\r\n    condition: Condition;\r\n}\r\n\r\nexport default class ConditionModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            condition: props.condition\r\n        };\r\n    }\r\n\r\n    private setCondition(conditionName: string) {\r\n        // eslint-disable-next-line\r\n        this.state.condition.name = conditionName;\r\n        // eslint-disable-next-line\r\n        this.state.condition.level = 1;\r\n        // eslint-disable-next-line\r\n        this.state.condition.text = conditionName === 'custom' ? 'custom condition' : null;\r\n\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    private setDuration(durationType: 'saves' | 'combatant' | 'rounds') {\r\n        let duration = null;\r\n\r\n        switch (durationType) {\r\n            case 'saves':\r\n                duration = Factory.createConditionDurationSaves();\r\n                break;\r\n            case 'combatant':\r\n                duration = Factory.createConditionDurationCombatant();\r\n                break;\r\n            case 'rounds':\r\n                duration = Factory.createConditionDurationRounds();\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        // eslint-disable-next-line\r\n        this.state.condition.duration = duration;\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    private changeValue(object: any, field: string, value: any) {\r\n        object[field] = value;\r\n\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    private nudgeValue(object: any, field: string, delta: number) {\r\n        let value = object[field] + delta;\r\n        if (field === 'level') {\r\n            value = Math.max(value, 1);\r\n            value = Math.min(value, 6);\r\n        }\r\n        if (field === 'count') {\r\n            value = Math.max(value, 1);\r\n        }\r\n        if (field === 'saveDC') {\r\n            value = Math.max(value, 0);\r\n        }\r\n        object[field] = value;\r\n\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const conditions = CONDITION_TYPES.map(condition => {\r\n                const controls = [];\r\n                const description = [];\r\n                if (condition === this.state.condition.name) {\r\n                    if (condition === 'custom') {\r\n                        controls.push(\r\n                            <input\r\n                                type='text'\r\n                                placeholder='custom condition'\r\n                                value={this.state.condition.text ? this.state.condition.text : ''}\r\n                                onChange={event => this.changeValue(this.state.condition, 'text', event.target.value)}\r\n                            />\r\n                        );\r\n                    }\r\n                    if (condition === 'exhaustion') {\r\n                        controls.push(\r\n                            <Spin\r\n                                key='exhaustion-spin'\r\n                                source={this.props.condition}\r\n                                name='level'\r\n                                label='exhaustion'\r\n                                nudgeValue={delta => this.nudgeValue(this.props.condition, 'level', delta)}\r\n                            />\r\n                        );\r\n                    }\r\n                    const text = Utils.conditionText(this.state.condition);\r\n                    for (let n = 0; n !== text.length; ++n) {\r\n                        description.push(<li key={n} className='section'>{text[n]}</li>);\r\n                    }\r\n                }\r\n\r\n                return {\r\n                    id: condition,\r\n                    text: condition,\r\n                    details: (\r\n                        <div key={condition}>\r\n                            {controls}\r\n                            <ul>\r\n                                {description}\r\n                            </ul>\r\n                        </div>\r\n                    ),\r\n                    disabled: this.props.combatant.conditionImmunities ? this.props.combatant.conditionImmunities.indexOf(condition) !== -1 : false\r\n                };\r\n            });\r\n\r\n            const saveOptions = ['str', 'dex', 'con', 'int', 'wis', 'cha', 'death'].map(c => ({ id: c, text: c }));\r\n            const pointOptions = [\r\n                {\r\n                    id: 'start',\r\n                    text: 'start of turn'\r\n                },\r\n                {\r\n                    id: 'end',\r\n                    text: 'end of turn'\r\n                }\r\n            ];\r\n            const combatantOptions = this.props.combat.combatants.map(c => ({ id: c.id, text: (c.displayName || c.name || 'unnamed monster') }));\r\n\r\n            const durations = [\r\n                {\r\n                    id: 'none',\r\n                    text: 'until removed (default)',\r\n                    details: (\r\n                        <div className='section'>\r\n                            <div>the condition persists until it is manually removed</div>\r\n                        </div>\r\n                    )\r\n                },\r\n                {\r\n                    id: 'saves',\r\n                    text: 'until a successful save',\r\n                    details: (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>number of saves required</div>\r\n                                <Spin\r\n                                    source={this.props.condition.duration}\r\n                                    name='count'\r\n                                    nudgeValue={delta => this.nudgeValue(this.props.condition.duration, 'count', delta)}\r\n                                />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>save dc</div>\r\n                                <Spin\r\n                                    source={this.props.condition.duration}\r\n                                    name='saveDC'\r\n                                    nudgeValue={delta => this.nudgeValue(this.props.condition.duration, 'saveDC', delta)}\r\n                                />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>type of save</div>\r\n                                <Selector\r\n                                    options={saveOptions}\r\n                                    selectedID={\r\n                                        (this.props.condition.duration as ConditionDurationSaves)\r\n                                        ? (this.props.condition.duration as ConditionDurationSaves).saveType\r\n                                        : null\r\n                                    }\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, 'saveType', optionID)}\r\n                                />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>make the save at the start or end of the turn</div>\r\n                                <Selector\r\n                                    options={pointOptions}\r\n                                    selectedID={\r\n                                        (this.props.condition.duration as ConditionDurationSaves)\r\n                                        ? (this.props.condition.duration as ConditionDurationSaves).point\r\n                                        : null\r\n                                    }\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, 'point', optionID)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                },\r\n                {\r\n                    id: 'combatant',\r\n                    text: 'until someone\\'s next turn',\r\n                    details: (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>combatant</div>\r\n                                <Dropdown\r\n                                    options={combatantOptions}\r\n                                    selectedID={\r\n                                        (this.props.condition.duration as ConditionDurationCombatant)\r\n                                        ? (this.props.condition.duration as ConditionDurationCombatant).combatantID || undefined\r\n                                        : undefined\r\n                                    }\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, 'combatantID', optionID)}\r\n                                />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>start or end of the turn</div>\r\n                                <Selector\r\n                                    options={pointOptions}\r\n                                    selectedID={\r\n                                        (this.props.condition.duration as ConditionDurationCombatant)\r\n                                        ? (this.props.condition.duration as ConditionDurationCombatant).point\r\n                                        : null\r\n                                    }\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, 'point', optionID)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                },\r\n                {\r\n                    id: 'rounds',\r\n                    text: 'for a number of rounds',\r\n                    details: (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>number of rounds</div>\r\n                                <Spin\r\n                                    source={this.props.condition.duration}\r\n                                    name='count'\r\n                                    nudgeValue={delta => this.nudgeValue(this.props.condition.duration, 'count', delta)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }\r\n            ];\r\n\r\n            return (\r\n                <div className='condition-modal'>\r\n                    <div className='row' style={{ height: '100%' }}>\r\n                        <div className='columns small-6 medium-6 large-6 scrollable'>\r\n                            <div className='heading'>condition</div>\r\n                            <RadioGroup\r\n                                items={conditions}\r\n                                selectedItemID={this.state.condition.name}\r\n                                select={itemID => this.setCondition(itemID)}\r\n                            />\r\n                        </div>\r\n                        <div className='columns small-6 medium-6 large-6 scrollable'>\r\n                            <div className='heading'>duration</div>\r\n                            <RadioGroup\r\n                                items={durations}\r\n                                selectedItemID={this.state.condition.duration ? this.state.condition.duration.type : 'none'}\r\n                                select={itemID => this.setDuration(itemID as 'saves' | 'combatant' | 'rounds')}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { CATEGORY_TYPES, Monster, MonsterGroup, SIZE_TYPES } from '../../models/monster-group';\r\n\r\nimport Selector from '../controls/selector';\r\n\r\ninterface Props {\r\n    library: MonsterGroup[];\r\n}\r\n\r\ninterface State {\r\n    chart: string;\r\n}\r\n\r\nexport default class DemographicsModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            chart: 'challenge'\r\n        };\r\n    }\r\n\r\n    private selectChart(chart: string) {\r\n        this.setState({\r\n            chart: chart\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let demographics = null;\r\n\r\n            const allMonsters: Monster[] = [];\r\n            this.props.library.forEach(group => group.monsters.forEach(monster => allMonsters.push(monster)));\r\n            if (allMonsters.length !== 0) {\r\n                const buckets: { value: any, title: string }[] = [];\r\n                let maxBucketSize = 0;\r\n                const monsters: { [key: string]: Monster[] } = {};\r\n\r\n                switch (this.state.chart) {\r\n                    case 'challenge':\r\n                        const challenges = [\r\n                            0, 0.125, 0.25, 0.5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30\r\n                        ];\r\n                        challenges.forEach(cr => {\r\n                            buckets.push({\r\n                                value: cr,\r\n                                title: 'challenge ' + Utils.challenge(cr)\r\n                            });\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const cr = bucket.value;\r\n                            monsters[cr.toString()] = allMonsters.filter(monster => monster.challenge === cr);\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const cr = bucket.value;\r\n                            maxBucketSize = Math.max(monsters[cr].length, maxBucketSize);\r\n                        });\r\n                        break;\r\n                    case 'size':\r\n                        SIZE_TYPES.forEach(size => {\r\n                            buckets.push({\r\n                                value: size,\r\n                                title: size\r\n                            });\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const size = bucket.value;\r\n                            monsters[size.toString()] = allMonsters.filter(monster => monster.size === size);\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const size = bucket.value;\r\n                            maxBucketSize = Math.max(monsters[size].length, maxBucketSize);\r\n                        });\r\n                        break;\r\n                    case 'type':\r\n                        CATEGORY_TYPES.forEach(type => {\r\n                            buckets.push({\r\n                                value: type,\r\n                                title: type\r\n                            });\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const type = bucket.value;\r\n                            monsters[type.toString()] = allMonsters.filter(monster => monster.category === type);\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const type = bucket.value;\r\n                            maxBucketSize = Math.max(monsters[type].length, maxBucketSize);\r\n                        });\r\n                        break;\r\n                    default:\r\n                        // Do nothing\r\n                        break;\r\n                }\r\n\r\n                const bars = [];\r\n                for (let index = 0; index !== buckets.length; ++index) {\r\n                    const bucket = buckets[index];\r\n                    const set = monsters[bucket.value];\r\n                    const count = set ? set.length : 0;\r\n                    bars.push(\r\n                        <div\r\n                            key={bucket.title}\r\n                            className='bar-container'\r\n                            style={{\r\n                                width: 'calc((100% - 1px) / ' + buckets.length + ')',\r\n                                left: 'calc((100% - 1px) * ' + index + ' / ' + buckets.length + ')'\r\n                            }}\r\n                            title={bucket.title + ': ' + set.length + ' monsters'}\r\n                        >\r\n                            <div\r\n                                className='bar-space'\r\n                                style={{\r\n                                    height: 'calc((100% - 1px) * ' + (maxBucketSize - count) + ' / ' + maxBucketSize + ')'\r\n                                }}\r\n                            />\r\n                            <div\r\n                                className='bar'\r\n                                style={{\r\n                                    height: 'calc((100% - 1px) * ' + count + ' / ' + maxBucketSize + ')'\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                const chartOptions = [\r\n                    {\r\n                        id: 'challenge',\r\n                        text: 'challenge rating'\r\n                    },\r\n                    {\r\n                        id: 'size',\r\n                        text: 'size'\r\n                    },\r\n                    {\r\n                        id: 'type',\r\n                        text: 'type'\r\n                    }\r\n                ];\r\n\r\n                demographics = (\r\n                    <div>\r\n                        <Selector\r\n                            options={chartOptions}\r\n                            selectedID={this.state.chart}\r\n                            select={optionID => this.selectChart(optionID)}\r\n                        />\r\n                        <div className='chart'>\r\n                            <div className='plot'>{bars}</div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return demographics;\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","export interface MapFolio {\r\n    id: string;\r\n    name: string;\r\n    maps: Map[];\r\n}\r\n\r\nexport interface Map {\r\n    id: string;\r\n    name: string;\r\n    items: MapItem[];\r\n}\r\n\r\nexport interface MapItem {\r\n    id: string;\r\n    type: 'tile' | 'pc' | 'monster';\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n    terrain: string | null;\r\n}\r\n\r\nexport const TERRAIN_TYPES = [\r\n    'cavern',\r\n    'dirt',\r\n    'flagstone',\r\n    'floorboard',\r\n    'grassland',\r\n    'pit',\r\n    'sand',\r\n    'snow',\r\n    'water'\r\n];\r\n","import React from 'react';\r\n\r\nimport { MapItem, TERRAIN_TYPES } from '../../models/map-folio';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport Radial from '../controls/radial';\r\n\r\ninterface Props {\r\n    tile: MapItem;\r\n    changeValue: (tile: MapItem, field: string, value: string) => void;\r\n    moveMapItem: (tile: MapItem, dir: string) => void;\r\n    resizeMapItem: (tile: MapItem, dir: string, dir2: 'in' | 'out' | null) => void;\r\n    cloneMapItem: (tile: MapItem) => void;\r\n    removeMapItem: (tile: MapItem) => void;\r\n}\r\n\r\nexport default class MapTileCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const terrainOptions = TERRAIN_TYPES.map(t => {\r\n                return { id: t, text: t };\r\n            });\r\n\r\n            return (\r\n                <div className='card map-tile'>\r\n                    <div className='heading'>\r\n                        <div className='title'>map tile</div>\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        <div className='subheading'>size</div>\r\n                        <div className='section'>{this.props.tile.width} sq x {this.props.tile.height} sq</div>\r\n                        <div className='section'>{this.props.tile.width * 5} ft x {this.props.tile.height * 5} ft</div>\r\n                        <div className='divider' />\r\n                        <div className='subheading'>terrain</div>\r\n                        <Dropdown\r\n                            options={terrainOptions}\r\n                            placeholder='select terrain'\r\n                            selectedID={this.props.tile.terrain ? this.props.tile.terrain : undefined}\r\n                            select={optionID => this.props.changeValue(this.props.tile, 'terrain', optionID)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <div className='subheading'>move</div>\r\n                        <div className='section centered'>\r\n                            <Radial direction='out' click={dir => this.props.moveMapItem(this.props.tile, dir)} />\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='subheading'>resize</div>\r\n                        <div className='section centered'>\r\n                            <Radial direction='both' click={(dir, dir2) => this.props.resizeMapItem(this.props.tile, dir, dir2)} />\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='section'>\r\n                            <button onClick={() => this.props.cloneMapItem(this.props.tile)}>clone tile</button>\r\n                            <button onClick={() => this.props.removeMapItem(this.props.tile)}>remove tile</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Factory from '../../utils/factory';\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Map, MapItem } from '../../models/map-folio';\r\n\r\nimport MapTileCard from '../cards/map-tile-card';\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    map: Map;\r\n}\r\n\r\ninterface State {\r\n    map: Map;\r\n    selectedTileID: string | null;\r\n}\r\n\r\nexport default class MapEditorModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            map: props.map,\r\n            selectedTileID: null\r\n        };\r\n    }\r\n\r\n    private setSelectedTileID(id: string | null) {\r\n        this.setState({\r\n            selectedTileID: id\r\n        });\r\n    }\r\n\r\n    private addMapTile(x: number, y: number) {\r\n        const tile = Factory.createMapItem();\r\n        tile.x = x;\r\n        tile.y = y;\r\n        tile.terrain = 'flagstone';\r\n        this.state.map.items.push(tile);\r\n\r\n        this.setState({\r\n            map: this.state.map,\r\n            selectedTileID: tile.id\r\n        });\r\n    }\r\n\r\n    private moveMapItem(item: MapItem, dir: string) {\r\n        switch (dir) {\r\n            case 'N':\r\n                item.y -= 1;\r\n                break;\r\n            case 'E':\r\n                item.x += 1;\r\n                break;\r\n            case 'S':\r\n                item.y += 1;\r\n                break;\r\n            case 'W':\r\n                item.x -= 1;\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    private bigMapItem(item: MapItem, dir: string) {\r\n        switch (dir) {\r\n            case 'N':\r\n                item.y -= 1;\r\n                item.height += 1;\r\n                break;\r\n            case 'E':\r\n                item.width += 1;\r\n                break;\r\n            case 'S':\r\n                item.height += 1;\r\n                break;\r\n            case 'W':\r\n                item.x -= 1;\r\n                item.width += 1;\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    private smallMapItem(item: MapItem, dir: string) {\r\n        switch (dir) {\r\n            case 'N':\r\n                if (item.height > 1) {\r\n                    item.y += 1;\r\n                    item.height -= 1;\r\n                }\r\n                break;\r\n            case 'E':\r\n                if (item.width > 1) {\r\n                    item.width -= 1;\r\n                }\r\n                break;\r\n            case 'S':\r\n                if (item.height > 1) {\r\n                    item.height -= 1;\r\n                }\r\n                break;\r\n            case 'W':\r\n                if (item.width > 1) {\r\n                    item.x += 1;\r\n                    item.width -= 1;\r\n                }\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    private resizeMapItem(item: MapItem, dir: string, dir2: 'in' | 'out') {\r\n        switch (dir2) {\r\n            case 'in':\r\n                this.smallMapItem(item, dir);\r\n                break;\r\n            case 'out':\r\n                this.bigMapItem(item, dir);\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n    }\r\n\r\n    private cloneMapItem(item: MapItem) {\r\n        const copy = JSON.parse(JSON.stringify(item));\r\n        copy.id = Utils.guid();\r\n        copy.x += 1;\r\n        copy.y += 1;\r\n        this.state.map.items.push(copy);\r\n\r\n        this.setState({\r\n            map: this.state.map,\r\n            selectedTileID: copy.id\r\n        });\r\n    }\r\n\r\n    private removeMapItem(item: MapItem) {\r\n        const index = this.state.map.items.indexOf(item);\r\n        this.state.map.items.splice(index, 1);\r\n\r\n        this.setState({\r\n            map: this.state.map,\r\n            selectedTileID: null\r\n        });\r\n    }\r\n\r\n    private changeValue(source: any, field: string, value: any) {\r\n        source[field] = value;\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let tools = null;\r\n            if (this.state.selectedTileID) {\r\n                const item = this.state.map.items.find(i => i.id === this.state.selectedTileID);\r\n                if (item) {\r\n                    tools = (\r\n                        <div className='tools'>\r\n                            <MapTileCard\r\n                                tile={item}\r\n                                moveMapItem={(mapItem, dir) => this.moveMapItem(mapItem, dir)}\r\n                                resizeMapItem={(mapItem, dir, dir2) => this.resizeMapItem(mapItem, dir, dir2 as 'in' | 'out')}\r\n                                cloneMapItem={mapItem => this.cloneMapItem(mapItem)}\r\n                                removeMapItem={mapItem => this.removeMapItem(mapItem)}\r\n                                changeValue={(source, field, value) => this.changeValue(source, field, value)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                }\r\n            } else {\r\n                tools = (\r\n                    <div className='tools'>\r\n                        <p>to add a new tile to the map, double-click on an empty grid square</p>\r\n                        <p>to edit an existing tile, click on it once to select it</p>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='map-editor'>\r\n                    {tools}\r\n                    <MapPanel\r\n                        map={this.state.map}\r\n                        mode='edit'\r\n                        selectedItemID={this.state.selectedTileID ? this.state.selectedTileID : undefined}\r\n                        setSelectedItemID={id => this.setSelectedTileID(id)}\r\n                        addMapTile={(x, y) => this.addMapTile(x, y)}\r\n                    />\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Factory from '../../utils/factory';\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { CATEGORY_TYPES, Monster, MonsterGroup, SIZE_TYPES, Trait, TRAIT_TYPES } from '../../models/monster-group';\r\n\r\nimport MonsterCard from '../cards/monster-card';\r\nimport Checkbox from '../controls/checkbox';\r\nimport Dropdown from '../controls/dropdown';\r\nimport Selector from '../controls/selector';\r\nimport Spin from '../controls/spin';\r\nimport AbilityScorePanel from '../panels/ability-score-panel';\r\nimport TraitsPanel from '../panels/traits-panel';\r\n\r\nimport arrow from '../../resources/images/down-arrow.svg';\r\n\r\ninterface Props {\r\n    monster: Monster;\r\n    library: MonsterGroup[];\r\n    showMonsters: boolean;\r\n}\r\n\r\ninterface State {\r\n    monster: Monster;\r\n    page: 'overview' | 'abilities' | 'combat' | 'actions';\r\n    showFilter: boolean;\r\n    helpSection: string;\r\n    filter: {\r\n        size: boolean,\r\n        type: boolean,\r\n        subtype: boolean,\r\n        alignment: boolean,\r\n        challenge: boolean\r\n    };\r\n}\r\n\r\nexport default class MonsterEditorModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            monster: props.monster,\r\n            page: 'overview',\r\n            showFilter: false,\r\n            helpSection: 'speed',\r\n            filter: {\r\n                size: true,\r\n                type: true,\r\n                subtype: false,\r\n                alignment: false,\r\n                challenge: true\r\n            }\r\n        };\r\n    }\r\n\r\n    private setPage(page: 'overview' | 'abilities' | 'combat' | 'actions') {\r\n        const sections = this.getHelpOptionsForPage(page);\r\n        this.setState({\r\n            page: page,\r\n            helpSection: sections[0]\r\n        });\r\n    }\r\n\r\n    private toggleFilter() {\r\n        this.setState({\r\n            showFilter: !this.state.showFilter\r\n        });\r\n    }\r\n\r\n    private setHelpSection(section: string) {\r\n        this.setState({\r\n            helpSection: section\r\n        });\r\n    }\r\n\r\n    private toggleMatch(type: 'size' | 'type' | 'subtype' | 'alignment' | 'challenge') {\r\n        // eslint-disable-next-line\r\n        this.state.filter[type] = !this.state.filter[type];\r\n        this.setState({\r\n            filter: this.state.filter\r\n        });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Helper methods\r\n\r\n    private getHelpOptionsForPage(page: 'overview' | 'abilities' | 'combat' | 'actions') {\r\n        switch (page) {\r\n            case 'overview':\r\n                return ['speed', 'senses', 'languages', 'equipment'];\r\n            case 'abilities':\r\n                return ['str', 'dex', 'con', 'int', 'wis', 'cha', 'saves', 'skills'];\r\n            case 'combat':\r\n                return ['armor class', 'hit dice', 'resistances', 'vulnerabilities', 'immunities', 'conditions'];\r\n            case 'actions':\r\n                return ['actions'];\r\n            default:\r\n                return [];\r\n        }\r\n    }\r\n\r\n    private getMonsters() {\r\n        const monsters: Monster[] = [];\r\n        this.props.library.forEach(group => {\r\n            group.monsters.forEach(monster => {\r\n                let match = true;\r\n\r\n                if (this.state.monster.id === monster.id) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.filter.size && (this.state.monster.size !== monster.size)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.filter.type && (this.state.monster.category !== monster.category)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.filter.subtype && (this.state.monster.tag !== monster.tag)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.filter.alignment && (this.state.monster.alignment !== monster.alignment)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.filter.challenge && (this.state.monster.challenge !== monster.challenge)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (match) {\r\n                    monsters.push(monster);\r\n                }\r\n            });\r\n        });\r\n\r\n        return monsters;\r\n    }\r\n\r\n    private setRandomValue(field: string, monsters: Monster[], notify: boolean) {\r\n        const index = Math.floor(Math.random() * monsters.length);\r\n        const m = monsters[index];\r\n\r\n        let source: any = m;\r\n        let value = null;\r\n        const tokens = field.split('.');\r\n        tokens.forEach(token => {\r\n            if (token === tokens[tokens.length - 1]) {\r\n                value = source[token];\r\n            } else {\r\n                source = source[token];\r\n            }\r\n        });\r\n\r\n        this.changeValue(field, value, notify);\r\n    }\r\n\r\n    private geneSplice(monsters: Monster[]) {\r\n        [\r\n            'speed',\r\n            'senses',\r\n            'languages',\r\n            'equipment',\r\n            'abilityScores.str',\r\n            'abilityScores.dex',\r\n            'abilityScores.con',\r\n            'abilityScores.int',\r\n            'abilityScores.wis',\r\n            'abilityScores.cha',\r\n            'savingThrows',\r\n            'skills',\r\n            'ac',\r\n            'hitDice',\r\n            'damage.resist',\r\n            'damage.vulnerable',\r\n            'damage.immune',\r\n            'conditionImmunities'\r\n        ].forEach(field => {\r\n            this.setRandomValue(field, monsters, false);\r\n        });\r\n\r\n        TRAIT_TYPES.forEach(type => {\r\n            // Clear current traits of this type\r\n            const currentTraits = this.state.monster.traits.filter(t => t.type === type);\r\n            currentTraits.forEach(c => {\r\n                const index = this.state.monster.traits.findIndex(t => t === c);\r\n                this.state.monster.traits.splice(index, 1);\r\n            });\r\n\r\n            // Get all traits of this type\r\n            const traits: Trait[] = [];\r\n            monsters.forEach(m => {\r\n                m.traits.filter(t => t.type === type)\r\n                    .forEach(t => traits.push(t));\r\n            });\r\n\r\n            // Collate by name\r\n            const distinct: { trait: Trait, count: number }[] = [];\r\n            traits.forEach(t => {\r\n                const current = distinct.find(d => d.trait.name === t.name);\r\n                if (current) {\r\n                    current.count += 1;\r\n                } else {\r\n                    distinct.push({\r\n                        trait: t,\r\n                        count: 1\r\n                    });\r\n                }\r\n            });\r\n\r\n            // If any are common to all monsters, copy them and remove from the candidates\r\n            const addedIDs: string[] = [];\r\n            distinct.filter(d => d.count === monsters.length)\r\n                .forEach(d => {\r\n                    this.copyTrait(d.trait);\r\n                    addedIDs.push(d.trait.id);\r\n                });\r\n            addedIDs.forEach(id => {\r\n                const index = distinct.findIndex(d => d.trait.id === id);\r\n                distinct.splice(index, 1);\r\n            });\r\n\r\n            const avg = traits.length / monsters.length;\r\n            while (this.state.monster.traits.filter(t => t.type === type).length < avg) {\r\n                const index = Math.floor(Math.random() * distinct.length);\r\n                const t = distinct[index].trait;\r\n                this.copyTrait(t);\r\n                distinct.splice(index, 1);\r\n            }\r\n        });\r\n\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private addTrait(type: 'trait' | 'action' | 'legendary' | 'lair' | 'regional') {\r\n        const trait = Factory.createTrait();\r\n        trait.type = type;\r\n        trait.name = 'New ' + this.getActionTypeName(type, false).toLowerCase();\r\n        this.state.monster.traits.push(trait);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private addRandomTrait(type: string, monsters: Monster[]) {\r\n        const traits: Trait[] = [];\r\n        monsters.forEach(m => {\r\n            m.traits.filter(t => t.type === type)\r\n                .forEach(t => {\r\n                    traits.push(t);\r\n                });\r\n        });\r\n\r\n        const index = Math.floor(Math.random() * traits.length);\r\n        const trait = traits[index];\r\n\r\n        this.copyTrait(trait);\r\n    }\r\n\r\n    private removeTrait(trait: Trait) {\r\n        const index = this.state.monster.traits.indexOf(trait);\r\n        this.state.monster.traits.splice(index, 1);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private getActionTypeName(type: string, plural: boolean) {\r\n        let name = Utils.traitType(type);\r\n        if (plural) {\r\n            name += 's';\r\n        }\r\n        return name;\r\n    }\r\n\r\n    private copyTrait(trait: Trait) {\r\n        const copy = JSON.parse(JSON.stringify(trait));\r\n        copy.id = Utils.guid();\r\n        this.state.monster.traits.push(copy);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private changeTrait(trait: Trait, field: 'name' | 'usage' | 'type' | 'text', value: string) {\r\n        trait[field] = value;\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private nudgeValue(field: string, delta: number) {\r\n        let source: any = this.state.monster;\r\n        let value: any = null;\r\n        const tokens = field.split('.');\r\n        tokens.forEach(token => {\r\n            if (token === tokens[tokens.length - 1]) {\r\n                value = source[token];\r\n            } else {\r\n                source = source[token];\r\n            }\r\n        });\r\n\r\n        const newValue = (field === 'challenge') ? Utils.nudgeChallenge(value, delta) : (value ? value : 0) + delta;\r\n        this.changeValue(field, newValue);\r\n    }\r\n\r\n    private changeValue(field: string, value: any, notify = true) {\r\n        let source: any = this.state.monster;\r\n        const tokens = field.split('.');\r\n        tokens.forEach(token => {\r\n            if (token === tokens[tokens.length - 1]) {\r\n                source[token] = value;\r\n\r\n                if ((field === 'abilityScores.con') || (field === 'size') || (field === 'hitDice')) {\r\n                    const sides = Utils.hitDieType(this.state.monster.size);\r\n                    const conMod = Math.floor((this.state.monster.abilityScores.con - 10) / 2);\r\n                    const hpPerDie = ((sides + 1) / 2) + conMod;\r\n                    const hp = Math.floor(this.state.monster.hitDice * hpPerDie);\r\n                    // eslint-disable-next-line\r\n                    this.state.monster.hpMax = hp;\r\n                }\r\n\r\n                if (notify) {\r\n                    this.setState({\r\n                        monster: this.state.monster\r\n                    });\r\n                }\r\n            } else {\r\n                source = source[token];\r\n            }\r\n        });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // HTML render methods\r\n\r\n    private getHelpSection(monsters: Monster[]) {\r\n        switch (this.state.helpSection) {\r\n            case 'speed':\r\n                return this.getValueSection('speed', 'text', monsters);\r\n            case 'senses':\r\n                return this.getValueSection('senses', 'text', monsters);\r\n            case 'languages':\r\n                return this.getValueSection('languages', 'text', monsters);\r\n            case 'equipment':\r\n                return this.getValueSection('equipment', 'text', monsters);\r\n            case 'str':\r\n                return this.getValueSection('abilityScores.str', 'number', monsters);\r\n            case 'dex':\r\n                return this.getValueSection('abilityScores.dex', 'number', monsters);\r\n            case 'con':\r\n                return this.getValueSection('abilityScores.con', 'number', monsters);\r\n            case 'int':\r\n                return this.getValueSection('abilityScores.int', 'number', monsters);\r\n            case 'wis':\r\n                return this.getValueSection('abilityScores.wis', 'number', monsters);\r\n            case 'cha':\r\n                return this.getValueSection('abilityScores.cha', 'number', monsters);\r\n            case 'saves':\r\n                return this.getValueSection('savingThrows', 'text', monsters);\r\n            case 'skills':\r\n                return this.getValueSection('skills', 'text', monsters);\r\n            case 'armor class':\r\n                return this.getValueSection('ac', 'number', monsters);\r\n            case 'hit dice':\r\n                return this.getValueSection('hitDice', 'number', monsters);\r\n            case 'resistances':\r\n                return this.getValueSection('damage.resist', 'text', monsters);\r\n            case 'vulnerabilities':\r\n                return this.getValueSection('damage.vulnerable', 'text', monsters);\r\n            case 'immunities':\r\n                return this.getValueSection('damage.immune', 'text', monsters);\r\n            case 'conditions':\r\n                return this.getValueSection('conditionImmunities', 'text', monsters);\r\n            case 'actions':\r\n                return this.getActionsSection(monsters);\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    private getValueSection(field: string, dataType: 'text' | 'number', monsters: Monster[]) {\r\n        const values: any[] = monsters\r\n            .map(m => {\r\n                const tokens = field.split('.');\r\n                let source: any = m;\r\n                let value = null;\r\n                tokens.forEach(token => {\r\n                    if (token === tokens[tokens.length - 1]) {\r\n                        value = source[token];\r\n                    } else {\r\n                        source = source[token];\r\n                    }\r\n                });\r\n                if ((dataType === 'text') && (value === '')) {\r\n                    value = null;\r\n                }\r\n                return value;\r\n            })\r\n            .filter(v => v !== null);\r\n\r\n        const distinct: { value: any, count: number }[] = [];\r\n        if (dataType === 'number') {\r\n            let min: number | null = null;\r\n            let max: number | null = null;\r\n            values.forEach(v => {\r\n                if ((min === null) || (v < min)) {\r\n                    min = v;\r\n                }\r\n                if ((max === null) || (v > max)) {\r\n                    max = v;\r\n                }\r\n            });\r\n            if ((min !== null) && (max !== null)) {\r\n                for (let n = min; n <= max; ++n) {\r\n                    distinct.push({\r\n                        value: n,\r\n                        count: 0\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        values.forEach(v => {\r\n            const current = distinct.find(d => d.value === v);\r\n            if (current) {\r\n                current.count += 1;\r\n            } else {\r\n                distinct.push({\r\n                    value: v,\r\n                    count: 1\r\n                });\r\n            }\r\n        });\r\n\r\n        switch (dataType) {\r\n            case 'number':\r\n                Utils.sortByValue(distinct);\r\n                break;\r\n            case 'text':\r\n                Utils.sortByCount(distinct);\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        if (dataType === 'text') {\r\n            const count = monsters.length - values.length;\r\n            if (count !== 0) {\r\n                distinct.push({\r\n                    value: '',\r\n                    count: monsters.length - values.length\r\n                });\r\n            }\r\n        }\r\n\r\n        const valueSections = distinct.map(d => {\r\n            const width = 100 * d.count / monsters.length;\r\n            return (\r\n                <div className='row small-up-3 medium-up-3 large-up-3 value-list' key={distinct.indexOf(d)}>\r\n                    <div className='column'>\r\n                        <div className='text-container'>\r\n                            {d.value || '(none specified)'}\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <div className='bar-container'>\r\n                            <div className='bar' style={{ width: width + '%' }} />\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <button onClick={() => this.changeValue(field, d.value)}>use this value</button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                {valueSections}\r\n                <button onClick={() => this.setRandomValue(field, monsters, true)}>select random value</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getActionsSection(monsters: Monster[]) {\r\n        const rows = [];\r\n        rows.push(\r\n            <div className='row small-up-3 medium-up-3 large-up-3 value-list' key='header'>\r\n                <div className='column'>\r\n                    <div className='text-container'>\r\n                        <b>type</b>\r\n                    </div>\r\n                </div>\r\n                <div className='column'>\r\n                    <div className='text-container number'>\r\n                        <b>average number</b>\r\n                    </div>\r\n                </div>\r\n                <div className='column'>\r\n                    <div className='text-container number'>\r\n                        <b>min - max</b>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        TRAIT_TYPES.forEach(type => {\r\n            let min: number | null = null;\r\n            let max: number | null = null;\r\n            let count = 0;\r\n            monsters.forEach(m => {\r\n                const n = m.traits.filter(t => t.type === type).length;\r\n                if ((min === null) || (n < min)) {\r\n                    min = n;\r\n                }\r\n                if ((max === null) || (n > max)) {\r\n                    max = n;\r\n                }\r\n                count += n;\r\n            });\r\n            const avg = Math.round(count / monsters.length);\r\n\r\n            rows.push(\r\n                <div className='row small-up-4 medium-up-4 large-up-4 value-list' key={type}>\r\n                    <div className='column'>\r\n                        <div className={count === 0 ? 'text-container disabled' : 'text-container'}>\r\n                            {this.getActionTypeName(type, true)}\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <div className={count === 0 ? 'text-container number disabled' : 'text-container number'}>\r\n                            {avg}\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <div className={count === 0 ? 'text-container number disabled' : 'text-container number'}>\r\n                            {min} - {max}\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <button className={count === 0 ? 'disabled' : ''} onClick={() => this.addRandomTrait(type, monsters)}>add random</button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                {rows}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getFilterCard(monsters: Monster[]) {\r\n        const criteria: string[] = [];\r\n        if (this.state.filter.size) {\r\n            criteria.push('size');\r\n        }\r\n        if (this.state.filter.type) {\r\n            criteria.push('type');\r\n        }\r\n        if (this.state.filter.subtype) {\r\n            criteria.push('subtype');\r\n        }\r\n        if (this.state.filter.alignment) {\r\n            criteria.push('alignment');\r\n        }\r\n        if (this.state.filter.challenge) {\r\n            criteria.push('challenge rating');\r\n        }\r\n        const criteriaText = (criteria.length > 0) ? 'based on ' + criteria.join(', ') : 'no criteria specified';\r\n        const similar = (\r\n            <div className='section'>\r\n                {monsters.length} similar monsters ({criteriaText})\r\n            </div>\r\n        );\r\n\r\n        let filterContent = null;\r\n        if (this.state.showFilter) {\r\n            filterContent = (\r\n                <div>\r\n                    <Checkbox\r\n                        label={'size ' + this.state.monster.size}\r\n                        checked={this.state.filter.size}\r\n                        changeValue={value => this.toggleMatch('size')}\r\n                    />\r\n                    <Checkbox\r\n                        label={'type ' + this.state.monster.category}\r\n                        checked={this.state.filter.type}\r\n                        changeValue={value => this.toggleMatch('type')}\r\n                    />\r\n                    <Checkbox\r\n                        label={this.state.monster.tag ? 'subtype ' + this.state.monster.tag : 'subtype'}\r\n                        checked={this.state.filter.subtype}\r\n                        disabled={!this.state.monster.tag}\r\n                        changeValue={value => this.toggleMatch('subtype')}\r\n                    />\r\n                    <Checkbox\r\n                        label={this.state.monster.alignment ? 'alignment ' + this.state.monster.alignment : 'alignment'}\r\n                        checked={this.state.filter.alignment}\r\n                        disabled={!this.state.monster.alignment}\r\n                        changeValue={value => this.toggleMatch('alignment')}\r\n                    />\r\n                    <Checkbox\r\n                        label={'challenge rating ' + Utils.challenge(this.state.monster.challenge)}\r\n                        checked={this.state.filter.challenge}\r\n                        changeValue={value => this.toggleMatch('challenge')}\r\n                    />\r\n                    <div className='divider' />\r\n                    <button className={monsters.length < 2 ? 'disabled' : ''} onClick={() => this.geneSplice(monsters)}>build random monster</button>\r\n                    <div className='divider' />\r\n                    {similar}\r\n                </div>\r\n            );\r\n        } else {\r\n            filterContent = (\r\n                <div>\r\n                    {similar}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className='section'>\r\n                <div className='card'>\r\n                    <div className='heading'>\r\n                        <div className='title'>similar monsters</div>\r\n                        <img className={this.state.showFilter ? 'image rotate' : 'image'} src={arrow} alt='arrow' onClick={() => this.toggleFilter()} />\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        {filterContent}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getMonsterCards(monsters: Monster[]) {\r\n        const sorted = Utils.sort(monsters);\r\n        const monsterCards = sorted.map(m => (\r\n            <div className='section' key={m.id}>\r\n                <MonsterCard\r\n                    combatant={m}\r\n                    mode={'template ' + this.state.page}\r\n                    copyTrait={trait => this.copyTrait(trait)}\r\n                />\r\n            </div>\r\n        ));\r\n\r\n        return monsterCards;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    public render() {\r\n        try {\r\n            const pages = [\r\n                {\r\n                    id: 'overview',\r\n                    text: 'overview'\r\n                },\r\n                {\r\n                    id: 'abilities',\r\n                    text: 'abilities'\r\n                },\r\n                {\r\n                    id: 'combat',\r\n                    text: 'combat'\r\n                },\r\n                {\r\n                    id: 'actions',\r\n                    text: 'actions'\r\n                }\r\n            ];\r\n\r\n            let monsters: Monster[] = [];\r\n            if (this.props.showMonsters) {\r\n                monsters = this.getMonsters();\r\n            }\r\n\r\n            let content = null;\r\n            switch (this.state.page) {\r\n                case 'overview':\r\n                    const catOptions = CATEGORY_TYPES.map(cat => ({ id: cat, text: cat }));\r\n                    const sizeOptions = SIZE_TYPES.map(size => ({ id: size, text: size }));\r\n\r\n                    content = (\r\n                        <div className='row'>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>name</div>\r\n                                <input type='text' value={this.state.monster.name} onChange={event => this.changeValue('name', event.target.value)} />\r\n                                <div className='subheading'>size</div>\r\n                                <Dropdown\r\n                                    options={sizeOptions}\r\n                                    selectedID={this.state.monster.size}\r\n                                    select={optionID => this.changeValue('size', optionID)}\r\n                                />\r\n                                <div className='subheading'>type</div>\r\n                                <Dropdown\r\n                                    options={catOptions}\r\n                                    selectedID={this.state.monster.category}\r\n                                    select={optionID => this.changeValue('category', optionID)}\r\n                                />\r\n                                <div className='subheading'>subtype</div>\r\n                                <input type='text' value={this.state.monster.tag} onChange={event => this.changeValue('tag', event.target.value)} />\r\n                                <div className='subheading'>alignment</div>\r\n                                <input type='text' value={this.state.monster.alignment} onChange={event => this.changeValue('alignment', event.target.value)} />\r\n                            </div>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>challenge rating</div>\r\n                                <Spin\r\n                                    source={this.state.monster}\r\n                                    name='challenge'\r\n                                    display={value => Utils.challenge(value)}\r\n                                    nudgeValue={delta => this.nudgeValue('challenge', delta)}\r\n                                />\r\n                                <div className='subheading'>speed</div>\r\n                                <input type='text' value={this.state.monster.speed} onChange={event => this.changeValue('speed', event.target.value)} />\r\n                                <div className='subheading'>senses</div>\r\n                                <input type='text' value={this.state.monster.senses} onChange={event => this.changeValue('senses', event.target.value)} />\r\n                                <div className='subheading'>languages</div>\r\n                                <input type='text' value={this.state.monster.languages} onChange={event => this.changeValue('languages', event.target.value)} />\r\n                                <div className='subheading'>equipment</div>\r\n                                <input type='text' value={this.state.monster.equipment} onChange={event => this.changeValue('equipment', event.target.value)} />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                    break;\r\n                case 'abilities':\r\n                    content = (\r\n                        <div className='row'>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>ability scores</div>\r\n                                <AbilityScorePanel\r\n                                    edit={true}\r\n                                    combatant={this.state.monster}\r\n                                    nudgeValue={(source, type, delta) => this.nudgeValue(type, delta)}\r\n                                />\r\n                            </div>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>saving throws</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.savingThrows}\r\n                                    onChange={event => this.changeValue('savingThrows', event.target.value)}\r\n                                />\r\n                                <div className='subheading'>skills</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.skills}\r\n                                    onChange={event => this.changeValue('skills', event.target.value)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                    break;\r\n                case 'combat':\r\n                    content = (\r\n                        <div className='row'>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>armor class</div>\r\n                                <Spin\r\n                                    source={this.state.monster}\r\n                                    name='ac'\r\n                                    nudgeValue={delta => this.nudgeValue('ac', delta)}\r\n                                />\r\n                                <div className='subheading'>hit dice</div>\r\n                                <Spin\r\n                                    source={this.state.monster}\r\n                                    name='hitDice'\r\n                                    display={value => value + 'd' + Utils.hitDieType(this.state.monster.size)}\r\n                                    nudgeValue={delta => this.nudgeValue('hitDice', delta)}\r\n                                />\r\n                                <div className='subheading'>hit points</div>\r\n                                <div className='hp-value'>{this.state.monster.hpMax} hp</div>\r\n                            </div>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>damage resistances</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.damage.resist}\r\n                                    onChange={event => this.changeValue('damage.resist', event.target.value)}\r\n                                />\r\n                                <div className='subheading'>damage vulnerabilities</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.damage.vulnerable}\r\n                                    onChange={event => this.changeValue('damage.vulnerable', event.target.value)}\r\n                                />\r\n                                <div className='subheading'>damage immunities</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.damage.immune}\r\n                                    onChange={event => this.changeValue('damage.immune', event.target.value)}\r\n                                />\r\n                                <div className='subheading'>condition immunities</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.conditionImmunities}\r\n                                    onChange={event => this.changeValue('conditionImmunities', event.target.value)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                    break;\r\n                case 'actions':\r\n                    content = (\r\n                        <TraitsPanel\r\n                            combatant={this.state.monster}\r\n                            mode='edit'\r\n                            addTrait={type => this.addTrait(type)}\r\n                            removeTrait={trait => this.removeTrait(trait)}\r\n                            changeTrait={(trait, type, value) => this.changeTrait(trait, type, value)}\r\n                        />\r\n                    );\r\n                    break;\r\n                default:\r\n                    // Do nothing\r\n                    break;\r\n            }\r\n\r\n            let help = null;\r\n            if (this.props.showMonsters && (monsters.length > 1)) {\r\n                let selector = null;\r\n                if (this.getHelpOptionsForPage(this.state.page).length > 1) {\r\n                    const options = this.getHelpOptionsForPage(this.state.page).map(s => {\r\n                        return {\r\n                            id: s,\r\n                            text: s\r\n                        };\r\n                    });\r\n                    selector = (\r\n                        <Selector\r\n                            tabs={false}\r\n                            options={options}\r\n                            selectedID={this.state.helpSection}\r\n                            select={optionID => this.setHelpSection(optionID)}\r\n                        />\r\n                    );\r\n                }\r\n\r\n                help = (\r\n                    <div className='monster-help'>\r\n                        <div className='subheading'>information from similar monsters</div>\r\n                        {selector}\r\n                        {this.getHelpSection(monsters)}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            let monsterList = null;\r\n            if (this.props.showMonsters) {\r\n                monsterList = (\r\n                    <div className='columns small-4 medium-4 large-4 scrollable list-column'>\r\n                        {this.getFilterCard(monsters)}\r\n                        {this.getMonsterCards(monsters)}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='row' style={{ height: '100%', margin: '0 -15px' }}>\r\n                    <div\r\n                        className={\r\n                            this.props.showMonsters\r\n                            ? 'columns small-8 medium-8 large-8 scrollable'\r\n                            : 'columns small-12 medium-12 large-12 scrollable'\r\n                        }\r\n                        style={{ transition: 'none' }}\r\n                    >\r\n                        <div className='section'>\r\n                            <Selector\r\n                                tabs={true}\r\n                                options={pages}\r\n                                selectedID={this.state.page}\r\n                                select={optionID => this.setPage(optionID as 'overview' | 'abilities' | 'combat' | 'actions')}\r\n                            />\r\n                            {content}\r\n                            {help}\r\n                        </div>\r\n                    </div>\r\n                    {monsterList}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Encounter } from '../../models/encounter';\r\nimport { MonsterGroup } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\ninterface Props {\r\n    view: string;\r\n    blur: boolean;\r\n    library: MonsterGroup[];\r\n    parties: Party[];\r\n    encounters: Encounter[];\r\n    setView: (view: string) => void;\r\n}\r\n\r\nexport default class Navbar extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const partiesStyle = this.props.view === 'parties' ? 'navigator-item selected' : 'navigator-item';\r\n            const libraryStyle = this.props.view === 'library' ? 'navigator-item selected' : 'navigator-item';\r\n            let encounterStyle = this.props.view === 'encounter' ? 'navigator-item selected' : 'navigator-item';\r\n            const mapStyle = this.props.view === 'maps' ? 'navigator-item selected' : 'navigator-item';\r\n            let combatStyle = this.props.view === 'combat' ? 'navigator-item selected' : 'navigator-item';\r\n\r\n            const encountersEnabled = this.props.library.length !== 0;\r\n            const combatEnabled = (this.props.parties.length !== 0) && (this.props.encounters.length !== 0);\r\n            if (!encountersEnabled) {\r\n                encounterStyle += ' disabled';\r\n            }\r\n            if (!combatEnabled) {\r\n                combatStyle += ' disabled';\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.blur ? 'navbar blur' : 'navbar'}>\r\n                    <div className={partiesStyle} onClick={() => this.props.setView('parties')}>player characters</div>\r\n                    <div className={libraryStyle} onClick={() => this.props.setView('library')}>monster library</div>\r\n                    <div className={encounterStyle} onClick={() => encountersEnabled ? this.props.setView('encounter') : null}>encounter builder</div>\r\n                    <div className={mapStyle} onClick={() => this.props.setView('maps')}>map folios</div>\r\n                    <div className={combatStyle} onClick={() => combatEnabled ? this.props.setView('combat') : null}>combat manager</div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport cog from '../../resources/images/settings.svg';\r\n\r\ninterface Props {\r\n    actions: JSX.Element | null;\r\n    blur: boolean;\r\n    openHome: () => void;\r\n    openAbout: () => void;\r\n}\r\n\r\nexport default class Titlebar extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div className={this.props.blur ? 'titlebar blur' : 'titlebar'}>\r\n                    <div className='app-name' onClick={() => this.props.openHome()}>dojo</div>\r\n                    {this.props.actions}\r\n                    <img className='settings-icon' src={cog} title='about' alt='about' onClick={() => this.props.openAbout()} />\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Factory from '../utils/factory';\r\nimport Utils from '../utils/utils';\r\n\r\nimport { Combat, Combatant, CombatSetup, Notification } from '../models/combat';\r\nimport { Condition } from '../models/condition';\r\nimport { Encounter, EncounterSlot, EncounterWave } from '../models/encounter';\r\nimport { Map, MapFolio } from '../models/map-folio';\r\nimport { Monster, MonsterGroup, Trait } from '../models/monster-group';\r\nimport { Party, PC } from '../models/party';\r\n\r\nimport CombatManagerScreen from './screens/combat-manager-screen';\r\nimport EncounterBuilderScreen from './screens/encounter-builder-screen';\r\nimport HomeScreen from './screens/home-screen';\r\nimport MapFoliosScreen from './screens/map-folios-screen';\r\nimport MonsterLibraryScreen from './screens/monster-library-screen';\r\nimport PartiesScreen from './screens/parties-screen';\r\n\r\nimport AboutModal from './modals/about-modal';\r\nimport CombatStartModal from './modals/combat-start-modal';\r\nimport ConditionModal from './modals/condition-modal';\r\nimport DemographicsModal from './modals/demographics-modal';\r\nimport MapEditorModal from './modals/map-editor-modal';\r\nimport MonsterEditorModal from './modals/monster-editor-modal';\r\n\r\nimport Navbar from './panels/navbar';\r\nimport Titlebar from './panels/titlebar';\r\n\r\nimport Checkbox from './controls/checkbox';\r\n\r\nimport close from '../resources/images/close-black.svg';\r\n\r\nimport monsters from '../resources/data/monsters.json';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    // No props; this is the root component\r\n}\r\n\r\ninterface State {\r\n    view: string;\r\n    options: {\r\n        showHelp: boolean;\r\n    };\r\n\r\n    parties: Party[];\r\n    library: MonsterGroup[];\r\n    encounters: Encounter[];\r\n    mapFolios: MapFolio[];\r\n    combats: Combat[];\r\n\r\n    selectedPartyID: string | null;\r\n    selectedMonsterGroupID: string | null;\r\n    selectedEncounterID: string | null;\r\n    selectedMapFolioID: string | null;\r\n    selectedCombatID: string | null;\r\n\r\n    modal: any;\r\n\r\n    libraryFilter: string;\r\n}\r\n\r\nexport default class Dojo extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            view: 'home',\r\n            options: {\r\n                showHelp: true\r\n            },\r\n            parties: [],\r\n            library: [],\r\n            encounters: [],\r\n            mapFolios: [],\r\n            combats: [],\r\n            selectedPartyID: null,\r\n            selectedMonsterGroupID: null,\r\n            selectedEncounterID: null,\r\n            selectedMapFolioID: null,\r\n            selectedCombatID: null,\r\n            modal: null,\r\n            libraryFilter: ''\r\n        };\r\n\r\n        try {\r\n            let data: State | null = null;\r\n\r\n            try {\r\n                const json = window.localStorage.getItem('data');\r\n                if (json) {\r\n                    data = JSON.parse(json);\r\n                }\r\n            } catch (ex) {\r\n                console.error('Could not parse JSON: ', ex);\r\n                data = null;\r\n            }\r\n\r\n            if (data !== null) {\r\n                if (!data.mapFolios) {\r\n                    data.mapFolios = [];\r\n                    data.selectedMapFolioID = null;\r\n                }\r\n\r\n                data.encounters.forEach(enc => {\r\n                    if (!enc.waves) {\r\n                        enc.waves = [];\r\n                    }\r\n                });\r\n\r\n                data.combats.forEach(combat => {\r\n                    if (!combat.notifications) {\r\n                        combat.notifications = [];\r\n                    }\r\n                    combat.combatants.forEach(c => {\r\n                        if (c.altitude === undefined) {\r\n                            c.altitude = 0;\r\n                        }\r\n                    });\r\n                });\r\n\r\n                data.view = 'home';\r\n                data.modal = null;\r\n                data.libraryFilter = '';\r\n\r\n                this.state = data;\r\n            }\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n\r\n    public componentDidUpdate() {\r\n        let json = null;\r\n        try {\r\n            json = JSON.stringify(this.state);\r\n        } catch (ex) {\r\n            console.error('Could not stringify data: ', ex);\r\n            json = null;\r\n        }\r\n\r\n        if (json !== null) {\r\n            window.localStorage.setItem('data', json);\r\n        }\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////////\r\n    // Party screen\r\n\r\n    private addParty() {\r\n        const party = Factory.createParty();\r\n        party.name = 'new party';\r\n        const parties: Party[] = ([] as Party[]).concat(this.state.parties, [party]);\r\n        Utils.sort(parties);\r\n        this.setState({\r\n            parties: parties,\r\n            selectedPartyID: party.id\r\n        });\r\n    }\r\n\r\n    private removeParty() {\r\n        const party = this.getParty(this.state.selectedPartyID);\r\n        if (party) {\r\n            const index = this.state.parties.indexOf(party);\r\n            this.state.parties.splice(index, 1);\r\n            this.setState({\r\n                parties: this.state.parties,\r\n                selectedPartyID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private addPC() {\r\n        const party = this.getParty(this.state.selectedPartyID);\r\n        if (party) {\r\n            const pc = Factory.createPC();\r\n            pc.name = 'new pc';\r\n            party.pcs.push(pc);\r\n            this.setState({\r\n                parties: this.state.parties\r\n            });\r\n        }\r\n    }\r\n\r\n    private removePC(pc: PC) {\r\n        const party = this.getParty(this.state.selectedPartyID);\r\n        if (party) {\r\n            const index = party.pcs.indexOf(pc);\r\n            party.pcs.splice(index, 1);\r\n            this.setState({\r\n                parties: this.state.parties\r\n            });\r\n        }\r\n    }\r\n\r\n    private sortPCs() {\r\n        const party = this.getParty(this.state.selectedPartyID);\r\n        if (party) {\r\n            Utils.sort(party.pcs);\r\n            this.setState({\r\n                parties: this.state.parties\r\n            });\r\n        }\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////////\r\n    // Library screen\r\n\r\n    private addMonsterGroup() {\r\n        const group = Factory.createMonsterGroup();\r\n        group.name = 'new group';\r\n        const library = ([] as MonsterGroup[]).concat(this.state.library, [group]);\r\n        Utils.sort(library);\r\n        this.setState({\r\n            library: library,\r\n            selectedMonsterGroupID: group.id\r\n        });\r\n    }\r\n\r\n    private removeMonsterGroup() {\r\n        const group = this.getMonsterGroup(this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            const index = this.state.library.indexOf(group);\r\n            this.state.library.splice(index, 1);\r\n            this.setState({\r\n                library: this.state.library,\r\n                selectedMonsterGroupID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private addMonster() {\r\n        const monster = Factory.createMonster();\r\n        monster.name = 'new monster';\r\n        const group = this.getMonsterGroup(this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            group.monsters.push(monster);\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    private removeMonster(monster: Monster) {\r\n        const group = this.getMonsterGroup(this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            const index = group.monsters.indexOf(monster);\r\n            group.monsters.splice(index, 1);\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    private sortMonsters() {\r\n        const group = this.getMonsterGroup(this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            Utils.sort(group.monsters);\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    private moveToGroup(monster: Monster, groupID: string) {\r\n        const sourceGroup = this.findMonster(monster);\r\n        if (sourceGroup) {\r\n            const index = sourceGroup.monsters.indexOf(monster);\r\n\r\n            sourceGroup.monsters.splice(index, 1);\r\n            const group = this.getMonsterGroup(groupID);\r\n            if (group) {\r\n                group.monsters.push(monster);\r\n                Utils.sort(group.monsters);\r\n\r\n                this.setState({\r\n                    library: this.state.library\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private editMonster(monster: Monster) {\r\n        const copy = JSON.parse(JSON.stringify(monster));\r\n        this.setState({\r\n            modal: {\r\n                type: 'monster',\r\n                monster: copy,\r\n                showMonsters: false\r\n            }\r\n        });\r\n    }\r\n\r\n    private saveMonster() {\r\n        const group = this.getMonsterGroup(this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            const original = group.monsters.find(m => m.id === this.state.modal.monster.id);\r\n            if (original) {\r\n                const index = group.monsters.indexOf(original);\r\n                group.monsters[index] = this.state.modal.monster;\r\n                this.setState({\r\n                    library: this.state.library,\r\n                    modal: null\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private toggleShowSimilarMonsters() {\r\n        // eslint-disable-next-line\r\n        this.state.modal.showMonsters = !this.state.modal.showMonsters;\r\n        this.setState({\r\n            modal: this.state.modal\r\n        });\r\n    }\r\n\r\n    private openDemographics() {\r\n        this.setState({\r\n            modal: {\r\n                type: 'demographics'\r\n            }\r\n        });\r\n    }\r\n\r\n    private cloneMonster(monster: Monster, name: string) {\r\n        const group = this.findMonster(monster);\r\n        if (group) {\r\n            const clone = {\r\n                id: Utils.guid(),\r\n                type: 'monster',\r\n                name: name || monster.name + ' copy',\r\n                size: monster.size,\r\n                category: monster.category,\r\n                tag: monster.tag,\r\n                alignment: monster.alignment,\r\n                challenge: monster.challenge,\r\n                abilityScores: {\r\n                    str: monster.abilityScores.str,\r\n                    dex: monster.abilityScores.dex,\r\n                    con: monster.abilityScores.con,\r\n                    int: monster.abilityScores.int,\r\n                    wis: monster.abilityScores.wis,\r\n                    cha: monster.abilityScores.cha\r\n                },\r\n                ac: monster.ac,\r\n                hpMax: monster.hpMax,\r\n                hpTemp: monster.hpTemp,\r\n                hitDice: monster.hitDice,\r\n                damage: {\r\n                    resist: monster.damage.resist,\r\n                    vulnerable: monster.damage.vulnerable,\r\n                    immune: monster.damage.immune\r\n                },\r\n                savingThrows: monster.savingThrows,\r\n                speed: monster.speed,\r\n                skills: monster.skills,\r\n                senses: monster.senses,\r\n                languages: monster.languages,\r\n                equipment: monster.equipment,\r\n                traits: monster.traits.map(trait => {\r\n                    return {\r\n                        id: Utils.guid(),\r\n                        name: trait.name,\r\n                        usage: trait.usage,\r\n                        type: trait.type,\r\n                        text: trait.text\r\n                    };\r\n                }),\r\n                conditionImmunities: monster.conditionImmunities\r\n            };\r\n\r\n            group.monsters.push(clone);\r\n            Utils.sort(group.monsters);\r\n\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    private addOpenGameContent() {\r\n        monsters.forEach((data: any) => {\r\n            try {\r\n                if (data.name) {\r\n                    const monster = Factory.createMonster();\r\n\r\n                    monster.type = 'monster';\r\n                    monster.name = data.name;\r\n                    monster.size = data.size.toLowerCase();\r\n                    monster.category = data.type;\r\n                    monster.tag = data.subtype;\r\n                    monster.alignment = data.alignment;\r\n                    monster.challenge = Utils.parseChallenge(data.challenge_rating);\r\n                    monster.ac = data.armor_class;\r\n                    monster.hpMax = data.hit_points;\r\n                    monster.speed = data.speed;\r\n                    monster.senses = data.senses;\r\n                    monster.languages = data.languages;\r\n\r\n                    const index = data.hit_dice.indexOf('d');\r\n                    monster.hitDice = parseInt(data.hit_dice.substring(0, index), 10);\r\n\r\n                    monster.abilityScores.str = data.strength;\r\n                    monster.abilityScores.dex = data.dexterity;\r\n                    monster.abilityScores.con = data.constitution;\r\n                    monster.abilityScores.int = data.intelligence;\r\n                    monster.abilityScores.wis = data.wisdom;\r\n                    monster.abilityScores.cha = data.charisma;\r\n\r\n                    monster.damage.resist = data.damage_resistances;\r\n                    monster.damage.vulnerable = data.damage_vulnerabilities;\r\n                    monster.damage.immune = data.damage_immunities;\r\n                    monster.conditionImmunities = data.condition_immunities;\r\n\r\n                    const saves = [\r\n                        {\r\n                            field: 'strength_save',\r\n                            text: 'Strength'\r\n                        },\r\n                        {\r\n                            field: 'dexterity_save',\r\n                            text: 'Dexterity'\r\n                        },\r\n                        {\r\n                            field: 'constitution_save',\r\n                            text: 'Constitution'\r\n                        },\r\n                        {\r\n                            field: 'intelligence_save',\r\n                            text: 'Intelligence'\r\n                        },\r\n                        {\r\n                            field: 'wisdom_save',\r\n                            text: 'Wisdom'\r\n                        },\r\n                        {\r\n                            field: 'charisma_save',\r\n                            text: 'Charisma'\r\n                        }\r\n                    ];\r\n                    saves.forEach(save => {\r\n                        if (data[save.field]) {\r\n                            const str = save.text + ' ' + data[save.field];\r\n                            monster.savingThrows += monster.savingThrows === '' ? str : ', ' + str;\r\n                        }\r\n                    });\r\n\r\n                    const skills = [\r\n                        {\r\n                            field: 'acrobatics',\r\n                            text: 'Acrobatics'\r\n                        },\r\n                        {\r\n                            field: 'animal_handling',\r\n                            text: 'Animal handling'\r\n                        },\r\n                        {\r\n                            field: 'arcana',\r\n                            text: 'Arcana'\r\n                        },\r\n                        {\r\n                            field: 'athletics',\r\n                            text: 'Athletics'\r\n                        },\r\n                        {\r\n                            field: 'deception',\r\n                            text: 'Deception'\r\n                        },\r\n                        {\r\n                            field: 'history',\r\n                            text: 'History'\r\n                        },\r\n                        {\r\n                            field: 'insight',\r\n                            text: 'Insight'\r\n                        },\r\n                        {\r\n                            field: 'intimidation',\r\n                            text: 'Intimidation'\r\n                        },\r\n                        {\r\n                            field: 'investigation',\r\n                            text: 'Investigation'\r\n                        },\r\n                        {\r\n                            field: 'medicine',\r\n                            text: 'Medicine'\r\n                        },\r\n                        {\r\n                            field: 'nature',\r\n                            text: 'Nature'\r\n                        },\r\n                        {\r\n                            field: 'perception',\r\n                            text: 'Perception'\r\n                        },\r\n                        {\r\n                            field: 'performance',\r\n                            text: 'Performance'\r\n                        },\r\n                        {\r\n                            field: 'persuasion',\r\n                            text: 'Persuasion'\r\n                        },\r\n                        {\r\n                            field: 'religion',\r\n                            text: 'Religion'\r\n                        },\r\n                        {\r\n                            field: 'sleight_of_hand',\r\n                            text: 'Sleight of hand'\r\n                        },\r\n                        {\r\n                            field: 'stealth',\r\n                            text: 'Stealth'\r\n                        },\r\n                        {\r\n                            field: 'survival',\r\n                            text: 'Survival'\r\n                        }\r\n                    ];\r\n                    skills.forEach(skill => {\r\n                        if (data[skill.field]) {\r\n                            const str = skill.text + ' ' + data[skill.field];\r\n                            monster.skills += monster.skills === '' ? str : ', ' + str;\r\n                        }\r\n                    });\r\n\r\n                    if (data.special_abilities) {\r\n                        data.special_abilities.forEach((rawTrait: any) => {\r\n                            const trait = this.buildTrait(rawTrait, 'trait');\r\n                            monster.traits.push(trait);\r\n                        });\r\n                    }\r\n                    if (data.actions) {\r\n                        data.actions.forEach((rawTrait: any) => {\r\n                            const trait = this.buildTrait(rawTrait, 'action');\r\n                            monster.traits.push(trait);\r\n                        });\r\n                    }\r\n                    if (data.legendary_actions) {\r\n                        data.legendary_actions.forEach((rawTrait: any) => {\r\n                            const trait = this.buildTrait(rawTrait, 'legendary');\r\n                            monster.traits.push(trait);\r\n                        });\r\n                    }\r\n\r\n                    let groupName = monster.tag;\r\n                    if (groupName === '') {\r\n                        groupName = monster.category;\r\n                    }\r\n                    if (groupName.indexOf('swarm') === 0) {\r\n                        groupName = 'swarm';\r\n                    }\r\n                    if (groupName === 'any race') {\r\n                        groupName = 'npc';\r\n                    }\r\n\r\n                    let group = this.getMonsterGroupByName(groupName);\r\n                    if (!group) {\r\n                        group = {\r\n                            id: Utils.guid(),\r\n                            name: groupName,\r\n                            monsters: []\r\n                        };\r\n                        this.state.library.push(group);\r\n                    }\r\n                    group.monsters.push(monster);\r\n                }\r\n            } catch (e) {\r\n                console.error(e);\r\n            }\r\n        });\r\n\r\n        Utils.sort(this.state.library);\r\n\r\n        this.setState({\r\n            view: 'library',\r\n            library: this.state.library\r\n        });\r\n    }\r\n\r\n    private buildTrait(rawTrait: any, type: 'trait' | 'action' | 'legendary' | 'lair' | 'regional'): Trait {\r\n        let name = '';\r\n        let usage = '';\r\n\r\n        const openBracket = rawTrait.name.indexOf('(');\r\n        if (openBracket === -1) {\r\n            name = rawTrait.name;\r\n        } else {\r\n            const closeBracket = rawTrait.name.indexOf(')');\r\n            name = rawTrait.name.substring(0, openBracket - 1);\r\n            usage = rawTrait.name.substring(openBracket + 1, closeBracket);\r\n        }\r\n\r\n        return {\r\n            id: Utils.guid(),\r\n            type: type,\r\n            name: name,\r\n            usage: usage,\r\n            text: rawTrait.desc\r\n        };\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////////\r\n    // Encounter screen\r\n\r\n    private addEncounter() {\r\n        const encounter = Factory.createEncounter();\r\n        encounter.name = 'new encounter';\r\n        const encounters = ([] as Encounter[]).concat(this.state.encounters, [encounter]);\r\n        Utils.sort(encounters);\r\n\r\n        this.setState({\r\n            encounters: encounters,\r\n            selectedEncounterID: encounter.id\r\n        });\r\n    }\r\n\r\n    private removeEncounter() {\r\n        const encounter = this.getEncounter(this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            const index = this.state.encounters.indexOf(encounter);\r\n            this.state.encounters.splice(index, 1);\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters,\r\n                selectedEncounterID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private addEncounterSlot(monster: Monster, waveID: string | null) {\r\n        const group = this.findMonster(monster);\r\n        if (group) {\r\n            const slot = Factory.createEncounterSlot();\r\n            slot.monsterGroupName = group.name;\r\n            slot.monsterName = monster.name;\r\n            const encounter = this.getEncounter(this.state.selectedEncounterID);\r\n            if (encounter) {\r\n                if (waveID !== null) {\r\n                    const wave = encounter.waves.find(w => w.id === waveID);\r\n                    if (wave) {\r\n                        wave.slots.push(slot);\r\n                        this.sortEncounterSlots(wave);\r\n                    }\r\n                } else {\r\n                    encounter.slots.push(slot);\r\n                    this.sortEncounterSlots(encounter);\r\n                }\r\n\r\n                this.setState({\r\n                    encounters: this.state.encounters\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeEncounterSlot(slot: EncounterSlot, waveID: string | null) {\r\n        const encounter = this.getEncounter(this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            if (waveID) {\r\n                const wave = encounter.waves.find(w => w.id === waveID);\r\n                if (wave) {\r\n                    const index = wave.slots.indexOf(slot);\r\n                    wave.slots.splice(index, 1);\r\n                }\r\n            } else {\r\n                const n = encounter.slots.indexOf(slot);\r\n                encounter.slots.splice(n, 1);\r\n            }\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters\r\n            });\r\n        }\r\n    }\r\n\r\n    private sortEncounterSlots(slotContainer: { slots: EncounterSlot[] }) {\r\n        slotContainer.slots.sort((a, b) => {\r\n            const aName = a.monsterName.toLowerCase();\r\n            const bName = b.monsterName.toLowerCase();\r\n            if (aName < bName) { return -1; }\r\n            if (aName > bName) { return 1; }\r\n            return 0;\r\n        });\r\n    }\r\n\r\n    private addWaveToEncounter() {\r\n        const encounter = this.getEncounter(this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            const wave = Factory.createEncounterWave();\r\n            wave.name = 'wave ' + (encounter.waves.length + 2);\r\n            encounter.waves.push(wave);\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters\r\n            });\r\n        }\r\n    }\r\n\r\n    private removeWave(wave: EncounterWave) {\r\n        const encounter = this.getEncounter(this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            const index = encounter.waves.indexOf(wave);\r\n            encounter.waves.splice(index, 1);\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters\r\n            });\r\n        }\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////////\r\n    // Map screen\r\n\r\n    private addMapFolio() {\r\n        const folio = Factory.createMapFolio();\r\n        folio.name = 'new folio';\r\n        const folios = ([] as MapFolio[]).concat(this.state.mapFolios, [folio]);\r\n        Utils.sort(folios);\r\n\r\n        this.setState({\r\n            mapFolios: folios,\r\n            selectedMapFolioID: folio.id\r\n        });\r\n    }\r\n\r\n    private removeMapFolio() {\r\n        const folio = this.getMapFolio(this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            const index = this.state.mapFolios.indexOf(folio);\r\n            this.state.mapFolios.splice(index, 1);\r\n\r\n            this.setState({\r\n                mapFolios: this.state.mapFolios,\r\n                selectedMapFolioID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private addMap() {\r\n        const folio = this.getMapFolio(this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            const map = Factory.createMap();\r\n            map.name = 'new map';\r\n            folio.maps.push(map);\r\n\r\n            this.setState({\r\n                mapFolios: this.state.mapFolios\r\n            });\r\n        }\r\n    }\r\n\r\n    private editMap(map: Map) {\r\n        const copy = JSON.parse(JSON.stringify(map));\r\n        this.setState({\r\n            modal: {\r\n                type: 'map',\r\n                map: copy\r\n            }\r\n        });\r\n    }\r\n\r\n    private saveMap() {\r\n        const folio = this.getMapFolio(this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            const original = folio.maps.find(m => m.id === this.state.modal.map.id);\r\n            if (original) {\r\n                const index = folio.maps.indexOf(original);\r\n                folio.maps[index] = this.state.modal.map;\r\n                this.setState({\r\n                    mapFolios: this.state.mapFolios,\r\n                    modal: null\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeMap(map: Map) {\r\n        const folio = this.getMapFolio(this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            const index = folio.maps.indexOf(map);\r\n            folio.maps.splice(index, 1);\r\n            this.setState({\r\n                mapFolios: this.state.mapFolios\r\n            });\r\n        }\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////////\r\n    // Combat screen\r\n\r\n    private createCombat() {\r\n        const party = this.state.parties.length === 1 ? this.state.parties[0] : null;\r\n        const encounter = this.state.encounters.length === 1 ? this.state.encounters[0] : null;\r\n\r\n        const setup = Factory.createCombatSetup();\r\n        setup.partyID = party ? party.id : null;\r\n        setup.encounterID = encounter ? encounter.id : null;\r\n        if (encounter) {\r\n            setup.monsterNames = Utils.getMonsterNames(encounter);\r\n        }\r\n\r\n        this.setState({\r\n            modal: {\r\n                type: 'combat-start',\r\n                combatSetup: setup\r\n            }\r\n        });\r\n    }\r\n\r\n    private startCombat() {\r\n        const combatSetup: CombatSetup = this.state.modal.combatSetup;\r\n        const party = this.getParty(combatSetup.partyID);\r\n        const encounter = this.getEncounter(combatSetup.encounterID);\r\n        if (party && encounter) {\r\n            const partyName = party.name || 'unnamed party';\r\n            const encounterName = encounter.name || 'unnamed encounter';\r\n\r\n            const combat = Factory.createCombat();\r\n            combat.name = partyName + ' vs ' + encounterName;\r\n            combat.encounterID = encounter.id;\r\n\r\n            // Add a copy of each PC to the encounter\r\n            party.pcs.filter(pc => pc.active).forEach(pc => {\r\n                const combatant = JSON.parse(JSON.stringify(pc));\r\n\r\n                combatant.current = false;\r\n                combatant.pending = true;\r\n                combatant.active = false;\r\n                combatant.defeated = false;\r\n\r\n                combatant.displayName = pc.name;\r\n                combatant.initiative = 10;\r\n                combatant.hp = null;\r\n                combatant.conditions = [];\r\n                combatant.altitude = 0;\r\n\r\n                combat.combatants.push(combatant);\r\n            });\r\n\r\n            encounter.slots.forEach(slot => {\r\n                const monster = this.getMonster(slot.monsterName, slot.monsterGroupName);\r\n                if (monster) {\r\n                    const init = parseInt(Utils.modifier(monster.abilityScores.dex), 10);\r\n                    const groupRoll = Utils.dieRoll();\r\n\r\n                    for (let n = 0; n !== slot.count; ++n) {\r\n                        const singleRoll = Utils.dieRoll();\r\n\r\n                        const combatant = JSON.parse(JSON.stringify(monster));\r\n                        combatant.id = Utils.guid();\r\n\r\n                        combatant.displayName = null;\r\n                        if (combatSetup.monsterNames) {\r\n                            const slotNames = combatSetup.monsterNames.find(names => names.id === slot.id);\r\n                            if (slotNames) {\r\n                                combatant.displayName = slotNames.names[n];\r\n                            }\r\n                        }\r\n\r\n                        switch (combatSetup.encounterInitMode) {\r\n                            case 'manual':\r\n                                combatant.initiative = 10;\r\n                                break;\r\n                            case 'group':\r\n                                combatant.initiative = init + groupRoll;\r\n                                break;\r\n                            case 'individual':\r\n                                combatant.initiative = init + singleRoll;\r\n                                break;\r\n                            default:\r\n                                // Do nothing\r\n                                break;\r\n                        }\r\n\r\n                        combatant.current = false;\r\n                        combatant.pending = (combatSetup.encounterInitMode === 'manual');\r\n                        combatant.active = (combatSetup.encounterInitMode !== 'manual');\r\n                        combatant.defeated = false;\r\n\r\n                        combatant.hp = combatant.hpMax;\r\n                        combatant.conditions = [];\r\n                        combatant.altitude = 0;\r\n\r\n                        combat.combatants.push(combatant);\r\n                    }\r\n                } else {\r\n                    combat.issues.push('unknown monster: ' + slot.monsterName + ' in group ' + slot.monsterGroupName);\r\n                }\r\n            });\r\n\r\n            combat.combatants.forEach(c => c.altitude = 0);\r\n\r\n            this.sortCombatants(combat);\r\n\r\n            if (combatSetup.folioID && combatSetup.mapID) {\r\n                const folio = this.getMapFolio(combatSetup.folioID);\r\n                if (folio) {\r\n                    const map = folio.maps.find(m => m.id === combatSetup.mapID);\r\n                    if (map) {\r\n                        combat.map = JSON.parse(JSON.stringify(map));\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.setState({\r\n                combats: ([] as Combat[]).concat(this.state.combats, [combat]),\r\n                selectedCombatID: combat.id,\r\n                modal: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private openWaveModal() {\r\n        const combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat) {\r\n            const encounter = this.getEncounter(combat.encounterID);\r\n            if (encounter) {\r\n                const setup = Factory.createCombatSetup();\r\n                setup.encounterID = combat.encounterID;\r\n                setup.monsterNames = Utils.getMonsterNames(encounter);\r\n\r\n                this.setState({\r\n                    modal: {\r\n                        type: 'combat-wave',\r\n                        combatSetup: setup\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private pauseCombat() {\r\n        const combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat) {\r\n            combat.timestamp = new Date().toLocaleString();\r\n            this.setState({\r\n                combats: this.state.combats,\r\n                selectedCombatID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private resumeCombat(combat: Combat) {\r\n        this.setState({\r\n            selectedCombatID: combat.id\r\n        });\r\n    }\r\n\r\n    private endCombat() {\r\n        const combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat) {\r\n            const index = this.state.combats.indexOf(combat);\r\n            this.state.combats.splice(index, 1);\r\n            this.setState({\r\n                combats: this.state.combats,\r\n                selectedCombatID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private makeCurrent(combatant: (Combatant & PC) | (Combatant & Monster) | null, newRound: boolean) {\r\n        const combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat) {\r\n            // Handle start-of-turn conditions\r\n            combat.combatants.filter(actor => actor.conditions).forEach(actor => {\r\n                actor.conditions.forEach(c => {\r\n                    if (c.duration) {\r\n                        switch (c.duration.type) {\r\n                            case 'saves':\r\n                                // If it's my condition, and point is START, notify the user\r\n                                if (combat && combatant && (actor.id === combatant.id) && (c.duration.point === 'start')) {\r\n                                    combat.notifications.push({\r\n                                        id: Utils.guid(),\r\n                                        type: 'condition-save',\r\n                                        condition: c,\r\n                                        combatant: combatant as Combatant & Monster\r\n                                    });\r\n                                }\r\n                                break;\r\n                            case 'combatant':\r\n                                // If this refers to me, and point is START, remove it\r\n                                if (combat && combatant && (c.duration.combatantID === combatant.id) && (c.duration.point === 'start')) {\r\n                                    const index = actor.conditions.indexOf(c);\r\n                                    actor.conditions.splice(index, 1);\r\n                                    // Notify the user\r\n                                    combat.notifications.push({\r\n                                        id: Utils.guid(),\r\n                                        type: 'condition-end',\r\n                                        condition: c,\r\n                                        combatant: combatant as Combatant & Monster\r\n                                    });\r\n                                }\r\n                                break;\r\n                            case 'rounds':\r\n                                // If it's my condition, decrement the condition\r\n                                if (combatant && (actor.id === combatant.id)) {\r\n                                    c.duration.count -= 1;\r\n                                }\r\n                                // If it's now at 0, remove it\r\n                                if (c.duration.count === 0) {\r\n                                    const n = actor.conditions.indexOf(c);\r\n                                    actor.conditions.splice(n, 1);\r\n                                    if (combat) {\r\n                                        // Notify the user\r\n                                        combat.notifications.push({\r\n                                            id: Utils.guid(),\r\n                                            type: 'condition-end',\r\n                                            condition: c,\r\n                                            combatant: combatant as Combatant & Monster\r\n                                        });\r\n                                    }\r\n                                }\r\n                                break;\r\n                            default:\r\n                                // Do nothing\r\n                                break;\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n\r\n            combat.combatants.forEach(c => {\r\n                c.current = false;\r\n            });\r\n            if (combatant) {\r\n                combatant.current = true;\r\n            }\r\n\r\n            if (newRound) {\r\n                combat.round += 1;\r\n            }\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private makeActive(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        const combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat) {\r\n            combatant.pending = false;\r\n            combatant.active = true;\r\n            combatant.defeated = false;\r\n\r\n            this.sortCombatants(combat);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private makeDefeated(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        combatant.pending = false;\r\n        combatant.active = false;\r\n        combatant.defeated = true;\r\n\r\n        if (combatant.current) {\r\n            this.endTurn(combatant);\r\n        } else {\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private addWaveToCombat() {\r\n        const combatSetup: CombatSetup = this.state.modal.combat;\r\n        const encounter = this.getEncounter(combatSetup.encounterID);\r\n        const combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combatSetup && encounter && combat) {\r\n            const wave = encounter.waves.find(w => w.id === combatSetup.waveID);\r\n            if (wave) {\r\n                wave.slots.forEach(slot => {\r\n                    const monster = this.getMonster(slot.monsterName, slot.monsterGroupName);\r\n                    if (monster) {\r\n                        const init = parseInt(Utils.modifier(monster.abilityScores.dex), 10);\r\n                        const groupRoll = Utils.dieRoll();\r\n\r\n                        for (let n = 0; n !== slot.count; ++n) {\r\n                            const singleRoll = Utils.dieRoll();\r\n\r\n                            const combatant = JSON.parse(JSON.stringify(monster));\r\n                            combatant.id = Utils.guid();\r\n\r\n                            combatant.displayName = null;\r\n                            if (combatSetup.monsterNames) {\r\n                                const slotNames = combatSetup.monsterNames.find(names => names.id === slot.id);\r\n                                if (slotNames) {\r\n                                    combatant.displayName = slotNames.names[n];\r\n                                }\r\n                            }\r\n\r\n                            switch (combatSetup.encounterInitMode) {\r\n                                case 'manual':\r\n                                    combatant.initiative = 10;\r\n                                    break;\r\n                                case 'group':\r\n                                    combatant.initiative = init + groupRoll;\r\n                                    break;\r\n                                case 'individual':\r\n                                    combatant.initiative = init + singleRoll;\r\n                                    break;\r\n                                default:\r\n                                    // Do nothing\r\n                                    break;\r\n                            }\r\n\r\n                            combatant.current = false;\r\n                            combatant.pending = (this.state.modal.combat.encounterInitMode === 'manual');\r\n                            combatant.active = (this.state.modal.combat.encounterInitMode !== 'manual');\r\n                            combatant.defeated = false;\r\n\r\n                            combatant.hp = combatant.hpMax;\r\n                            combatant.conditions = [];\r\n\r\n                            if (combat) {\r\n                                combat.combatants.push(combatant);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (combat) {\r\n                            const issue = 'unknown monster: ' + slot.monsterName + ' in group ' + slot.monsterGroupName;\r\n                            combat.issues.push(issue);\r\n                        }\r\n                    }\r\n                });\r\n\r\n                this.sortCombatants(combat);\r\n\r\n                this.setState({\r\n                    combats: this.state.combats,\r\n                    modal: null\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeCombatant(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        const combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat) {\r\n            const index = combat.combatants.indexOf(combatant);\r\n            combat.combatants.splice(index, 1);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private mapAdd(combatant: ((Combatant & PC) | (Combatant & Monster)), x: number, y: number) {\r\n        const item = Factory.createMapItem();\r\n        item.id = combatant.id;\r\n        item.type = combatant.type as 'pc' | 'monster';\r\n        item.x = x;\r\n        item.y = y;\r\n        let size = 1;\r\n        if (combatant.type === 'monster') {\r\n            size = Utils.miniSize((combatant as Monster).size);\r\n        }\r\n        item.height = size;\r\n        item.width = size;\r\n\r\n        const combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat && combat.map) {\r\n            combat.map.items.push(item);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private mapMove(combatant: (Combatant & PC) | (Combatant & Monster), dir: string) {\r\n        const combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat && combat.map) {\r\n            const item = combat.map.items.find(i => i.id === combatant.id);\r\n            if (item) {\r\n                switch (dir) {\r\n                    case 'N':\r\n                        item.y -= 1;\r\n                        break;\r\n                    case 'NE':\r\n                        item.x += 1;\r\n                        item.y -= 1;\r\n                        break;\r\n                    case 'E':\r\n                        item.x += 1;\r\n                        break;\r\n                    case 'SE':\r\n                        item.x += 1;\r\n                        item.y += 1;\r\n                        break;\r\n                    case 'S':\r\n                        item.y += 1;\r\n                        break;\r\n                    case 'SW':\r\n                        item.x -= 1;\r\n                        item.y += 1;\r\n                        break;\r\n                    case 'W':\r\n                        item.x -= 1;\r\n                        break;\r\n                    case 'NW':\r\n                        item.x -= 1;\r\n                        item.y -= 1;\r\n                        break;\r\n                    default:\r\n                        // Do nothing\r\n                        break;\r\n                }\r\n\r\n                this.setState({\r\n                    combats: this.state.combats\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private mapRemove(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        const combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat && combat.map) {\r\n            const item = combat.map.items.find(i => i.id === combatant.id);\r\n            if (item) {\r\n                const index = combat.map.items.indexOf(item);\r\n                combat.map.items.splice(index, 1);\r\n\r\n                this.setState({\r\n                    combats: this.state.combats\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private endTurn(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        const combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat) {\r\n            // Handle end-of-turn conditions\r\n            combat.combatants.filter(actor => actor.conditions).forEach(actor => {\r\n                actor.conditions.forEach(c => {\r\n                    if (c.duration) {\r\n                        switch (c.duration.type) {\r\n                            case 'saves':\r\n                                // If it's my condition, and point is END, notify the user\r\n                                if (combat && (actor.id === combatant.id) && (c.duration.point === 'end')) {\r\n                                    const saveNotification = Factory.createNotification();\r\n                                    saveNotification.type = 'condition-save';\r\n                                    saveNotification.condition = c;\r\n                                    saveNotification.combatant = combatant as Combatant & Monster;\r\n                                    combat.notifications.push(saveNotification);\r\n                                }\r\n                                break;\r\n                            case 'combatant':\r\n                                // If this refers to me, and point is END, remove it\r\n                                if (combat && (c.duration.combatantID === combatant.id) && (c.duration.point === 'end')) {\r\n                                    const n = actor.conditions.indexOf(c);\r\n                                    actor.conditions.splice(n, 1);\r\n                                    // Notify the user\r\n                                    const endNotification = Factory.createNotification();\r\n                                    endNotification.type = 'condition-end';\r\n                                    endNotification.condition = c;\r\n                                    endNotification.combatant = combatant as Combatant & Monster;\r\n                                    combat.notifications.push(endNotification);\r\n                                }\r\n                                break;\r\n                            case 'rounds':\r\n                                // We check this at the beginning of each turn, not at the end\r\n                                break;\r\n                            default:\r\n                                // Do nothing\r\n                                break;\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n\r\n            const active = combat.combatants.filter(c => {\r\n                return c.current || (!c.pending && c.active && !c.defeated);\r\n            });\r\n            if (active.length === 0) {\r\n                // There's no-one left in the fight\r\n                this.makeCurrent(null, false);\r\n            } else if ((active.length === 1) && (active[0].defeated)) {\r\n                // The only person in the fight is me, and I'm defeated\r\n                this.makeCurrent(null, false);\r\n            } else {\r\n                let index = active.indexOf(combatant) + 1;\r\n                let newRound = false;\r\n                if (index >= active.length) {\r\n                    index = 0;\r\n                    newRound = true;\r\n                }\r\n                this.makeCurrent(active[index], newRound);\r\n            }\r\n        }\r\n    }\r\n\r\n    private changeHP(combatant: Combatant & Monster, hp: number, temp: number) {\r\n        combatant.hp = hp;\r\n        combatant.hpTemp = temp;\r\n\r\n        this.setState({\r\n            combats: this.state.combats\r\n        });\r\n    }\r\n\r\n    private addCondition(combatant: Combatant & Monster) {\r\n        const combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat) {\r\n            const condition = Factory.createCondition();\r\n            condition.name = 'blinded';\r\n\r\n            this.setState({\r\n                modal: {\r\n                    type: 'condition-add',\r\n                    condition: condition,\r\n                    combatant: combatant,\r\n                    combat: combat\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private addConditionFromModal() {\r\n        this.state.modal.combatant.conditions.push(this.state.modal.condition);\r\n\r\n        this.setState({\r\n            combats: this.state.combats,\r\n            modal: null\r\n        });\r\n    }\r\n\r\n    private editCondition(combatant: Combatant & Monster, condition: Condition) {\r\n        const combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat) {\r\n            this.setState({\r\n                modal: {\r\n                    type: 'condition-edit',\r\n                    condition: condition,\r\n                    combatant: combatant,\r\n                    combat: combat\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private editConditionFromModal() {\r\n        const conditions: Condition[] = this.state.modal.combatant.conditions;\r\n        const original = conditions.find(c => c.id === this.state.modal.condition.id);\r\n        if (original) {\r\n            const index = conditions.indexOf(original);\r\n            // eslint-disable-next-line\r\n            conditions[index] = this.state.modal.condition;\r\n\r\n            this.setState({\r\n                combats: this.state.combats,\r\n                modal: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private removeCondition(combatant: Combatant & Monster, conditionID: string) {\r\n        const condition = combatant.conditions.find(c => c.id === conditionID);\r\n        if (condition) {\r\n            const index = combatant.conditions.indexOf(condition);\r\n            combatant.conditions.splice(index, 1);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private sortCombatants(combat: Combat) {\r\n        combat.combatants.sort((a, b) => {\r\n            // First sort by initiative, descending\r\n            if (a.initiative && b.initiative && (a.initiative < b.initiative)) { return 1; }\r\n            if (a.initiative && b.initiative && (a.initiative > b.initiative)) { return -1; }\r\n            // Then sort by name, ascending\r\n            if (a.name < b.name) { return -1; }\r\n            if (a.name > b.name) { return 1; }\r\n            return 0;\r\n        });\r\n    }\r\n\r\n    private closeNotification(notification: Notification, removeCondition: boolean) {\r\n        const combat = this.getCombat(this.state.selectedCombatID);\r\n        if (combat) {\r\n            const index = combat.notifications.indexOf(notification);\r\n            combat.notifications.splice(index, 1);\r\n\r\n            if (removeCondition && notification.combatant && notification.condition) {\r\n                const conditionIndex = notification.combatant.conditions.indexOf(notification.condition);\r\n                notification.combatant.conditions.splice(conditionIndex, 1);\r\n            }\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////////\r\n\r\n    private setView(view: string) {\r\n        this.setState({\r\n            view: view\r\n        });\r\n    }\r\n\r\n    private openAbout() {\r\n        this.setState({\r\n            modal: {\r\n                type: 'about'\r\n            }\r\n        });\r\n    }\r\n\r\n    private closeModal() {\r\n        this.setState({\r\n            modal: null\r\n        });\r\n    }\r\n\r\n    private selectParty(party: Party | null) {\r\n        this.setState({\r\n            selectedPartyID: party ? party.id : null\r\n        });\r\n    }\r\n\r\n    private selectMonsterGroup(group: MonsterGroup | null) {\r\n        this.setState({\r\n            selectedMonsterGroupID: group ? group.id : null\r\n        });\r\n    }\r\n\r\n    private selectEncounter(encounter: Encounter | null) {\r\n        this.setState({\r\n            selectedEncounterID: encounter ? encounter.id : null\r\n        });\r\n    }\r\n\r\n    private selectMapFolio(mapFolio: MapFolio | null) {\r\n        this.setState({\r\n            selectedMapFolioID: mapFolio ? mapFolio.id : null\r\n        });\r\n    }\r\n\r\n    private getParty(id: string | null) {\r\n        return this.state.parties.find(p => p.id === id);\r\n    }\r\n\r\n    private getMonsterGroup(id: string | null) {\r\n        return this.state.library.find(g => g.id === id);\r\n    }\r\n\r\n    private getEncounter(id: string | null) {\r\n        return this.state.encounters.find(e => e.id === id);\r\n    }\r\n\r\n    private getMapFolio(id: string | null) {\r\n        return this.state.mapFolios.find(f => f.id === id);\r\n    }\r\n\r\n    private getCombat(id: string | null) {\r\n        return this.state.combats.find(c => c.id === id);\r\n    }\r\n\r\n    private getMonster(monsterName: string, groupName: string) {\r\n        const group = this.getMonsterGroupByName(groupName);\r\n        if (group) {\r\n            return group.monsters.find(monster => monster.name === monsterName);\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    private getMonsterGroupByName(groupName: string) {\r\n        return this.state.library.find(p => p.name === groupName);\r\n    }\r\n\r\n    private findMonster(monster: Monster) {\r\n        return this.state.library.find(group => group.monsters.includes(monster));\r\n    }\r\n\r\n    private resetAll() {\r\n        this.setState({\r\n            parties: [],\r\n            selectedPartyID: null,\r\n            library: [],\r\n            selectedMonsterGroupID: null,\r\n            encounters: [],\r\n            selectedEncounterID: null,\r\n            mapFolios: [],\r\n            selectedMapFolioID: null,\r\n            combats: [],\r\n            selectedCombatID: null\r\n        });\r\n    }\r\n\r\n    private changeValue(combatant: any, type: string, value: any) {\r\n        switch (type) {\r\n            case 'hp':\r\n                value = Math.min(value, combatant.hpMax);\r\n                value = Math.max(value, 0);\r\n                break;\r\n            case 'hpTemp':\r\n                value = Math.max(value, 0);\r\n                break;\r\n            case 'level':\r\n                value = Math.max(value, 1);\r\n                value = (combatant.player !== undefined) ? Math.min(value, 20) : Math.min(value, 6);\r\n                break;\r\n            case 'count':\r\n                value = Math.max(value, 1);\r\n                break;\r\n            case 'hitDice':\r\n                value = Math.max(value, 1);\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        const tokens = type.split('.');\r\n        let obj = combatant;\r\n        for (let n = 0; n !== tokens.length; ++n) {\r\n            const token = tokens[n];\r\n            if (n === tokens.length - 1) {\r\n                obj[token] = value;\r\n            } else {\r\n                obj = obj[token];\r\n            }\r\n        }\r\n\r\n        Utils.sort(this.state.parties);\r\n        Utils.sort(this.state.library);\r\n        Utils.sort(this.state.encounters);\r\n\r\n        this.setState({\r\n            parties: this.state.parties,\r\n            library: this.state.library,\r\n            encounters: this.state.encounters,\r\n            combats: this.state.combats,\r\n            selectedPartyID: this.state.selectedPartyID,\r\n            selectedMonsterGroupID: this.state.selectedMonsterGroupID,\r\n            selectedEncounterID: this.state.selectedEncounterID,\r\n            selectedCombatID: this.state.selectedCombatID,\r\n            options: this.state.options,\r\n            modal: this.state.modal\r\n        });\r\n    }\r\n\r\n    private nudgeValue(combatant: any, type: string, delta: number) {\r\n        const tokens = type.split('.');\r\n        let obj = combatant;\r\n        for (let n = 0; n !== tokens.length; ++n) {\r\n            const token = tokens[n];\r\n            if (n === tokens.length - 1) {\r\n                let value = null;\r\n                value = (token === 'challenge') ? Utils.nudgeChallenge(obj.challenge, delta) : obj[token] + delta;\r\n                this.changeValue(combatant, type, value);\r\n            } else {\r\n                obj = obj[token];\r\n            }\r\n        }\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////////\r\n\r\n    public render() {\r\n        try {\r\n            let content: JSX.Element | null = null;\r\n            let actions: JSX.Element | null = null;\r\n            switch (this.state.view) {\r\n                case 'home':\r\n                    content = (\r\n                        <HomeScreen\r\n                            library={this.state.library}\r\n                            addOpenGameContent={() => this.addOpenGameContent()}\r\n                        />\r\n                    );\r\n                    break;\r\n                case 'parties':\r\n                    content = (\r\n                        <PartiesScreen\r\n                            parties={this.state.parties}\r\n                            selection={this.getParty(this.state.selectedPartyID) || null}\r\n                            showHelp={this.state.options.showHelp}\r\n                            selectParty={party => this.selectParty(party)}\r\n                            addParty={() => this.addParty()}\r\n                            removeParty={() => this.removeParty()}\r\n                            addPC={() => this.addPC()}\r\n                            removePC={pc => this.removePC(pc)}\r\n                            sortPCs={() => this.sortPCs()}\r\n                            changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                            nudgeValue={(combatant, type, delta) => this.nudgeValue(combatant, type, delta)}\r\n                        />\r\n                    );\r\n                    break;\r\n                case 'library':\r\n                    content = (\r\n                        <MonsterLibraryScreen\r\n                            library={this.state.library}\r\n                            selection={this.getMonsterGroup(this.state.selectedMonsterGroupID) || null}\r\n                            filter={this.state.libraryFilter}\r\n                            showHelp={this.state.options.showHelp}\r\n                            selectMonsterGroup={group => this.selectMonsterGroup(group)}\r\n                            addMonsterGroup={() => this.addMonsterGroup()}\r\n                            removeMonsterGroup={() => this.removeMonsterGroup()}\r\n                            addMonster={() => this.addMonster()}\r\n                            removeMonster={monster => this.removeMonster(monster)}\r\n                            sortMonsters={() => this.sortMonsters()}\r\n                            changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                            nudgeValue={(combatant, type, delta) => this.nudgeValue(combatant, type, delta)}\r\n                            editMonster={combatant => this.editMonster(combatant)}\r\n                            cloneMonster={(combatant, name) => this.cloneMonster(combatant, name)}\r\n                            moveToGroup={(combatant, groupID) => this.moveToGroup(combatant, groupID)}\r\n                        />\r\n                    );\r\n                    let count = 0;\r\n                    this.state.library.forEach(group => {\r\n                        count += group.monsters.length;\r\n                    });\r\n                    if (count > 0) {\r\n                        actions = (\r\n                            <div className='actions'>\r\n                                <div className='section'>\r\n                                    <input\r\n                                        type='text'\r\n                                        placeholder='filter'\r\n                                        value={this.state.libraryFilter}\r\n                                        onChange={event => this.changeValue(this.state, 'libraryFilter', event.target.value)}\r\n                                    />\r\n                                </div>\r\n                                <div className='section'>\r\n                                    <button onClick={() => this.openDemographics()}>demographics</button>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    }\r\n                    break;\r\n                case 'encounter':\r\n                    content = (\r\n                        <EncounterBuilderScreen\r\n                            encounters={this.state.encounters}\r\n                            selection={this.getEncounter(this.state.selectedEncounterID) || null}\r\n                            parties={this.state.parties}\r\n                            library={this.state.library}\r\n                            showHelp={this.state.options.showHelp}\r\n                            selectEncounter={encounter => this.selectEncounter(encounter)}\r\n                            addEncounter={() => this.addEncounter()}\r\n                            removeEncounter={() => this.removeEncounter()}\r\n                            addWave={() => this.addWaveToEncounter()}\r\n                            removeWave={wave => this.removeWave(wave)}\r\n                            getMonster={(monsterName, groupName) => this.getMonster(monsterName, groupName) || null}\r\n                            addEncounterSlot={(monster, waveID) => this.addEncounterSlot(monster, waveID)}\r\n                            removeEncounterSlot={(slot, waveID) => this.removeEncounterSlot(slot, waveID)}\r\n                            nudgeValue={(slot, type, delta) => this.nudgeValue(slot, type, delta)}\r\n                            changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                        />\r\n                    );\r\n                    break;\r\n                case 'maps':\r\n                    content = (\r\n                        <MapFoliosScreen\r\n                            mapFolios={this.state.mapFolios}\r\n                            selection={this.getMapFolio(this.state.selectedMapFolioID) || null}\r\n                            showHelp={this.state.options.showHelp}\r\n                            selectMapFolio={folio => this.selectMapFolio(folio)}\r\n                            addMapFolio={() => this.addMapFolio()}\r\n                            removeMapFolio={() => this.removeMapFolio()}\r\n                            addMap={() => this.addMap()}\r\n                            editMap={map => this.editMap(map)}\r\n                            removeMap={map => this.removeMap(map)}\r\n                            changeValue={(source, type, value) => this.changeValue(source, type, value)}\r\n                        />\r\n                    );\r\n                    break;\r\n                case 'combat':\r\n                    const combat = this.getCombat(this.state.selectedCombatID);\r\n                    content = (\r\n                        <CombatManagerScreen\r\n                            combats={this.state.combats}\r\n                            combat={combat || null}\r\n                            showHelp={this.state.options.showHelp}\r\n                            createCombat={() => this.createCombat()}\r\n                            resumeEncounter={pausedCombat => this.resumeCombat(pausedCombat)}\r\n                            nudgeValue={(combatant, type, delta) => this.nudgeValue(combatant, type, delta)}\r\n                            changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                            makeCurrent={(combatant) => this.makeCurrent(combatant, false)}\r\n                            makeActive={(combatant) => this.makeActive(combatant)}\r\n                            makeDefeated={(combatant) => this.makeDefeated(combatant)}\r\n                            removeCombatant={(combatant) => this.removeCombatant(combatant)}\r\n                            addCondition={(combatant) => this.addCondition(combatant)}\r\n                            editCondition={(combatant, condition) => this.editCondition(combatant, condition)}\r\n                            removeCondition={(combatant, conditionID) => this.removeCondition(combatant, conditionID)}\r\n                            mapAdd={(combatant, x, y) => this.mapAdd(combatant, x, y)}\r\n                            mapMove={(combatant, dir) => this.mapMove(combatant, dir)}\r\n                            mapRemove={combatant => this.mapRemove(combatant)}\r\n                            endTurn={(combatant) => this.endTurn(combatant)}\r\n                            changeHP={(combatant, hp, temp) => this.changeHP(combatant, hp, temp)}\r\n                            close={(notification, removeCondition) => this.closeNotification(notification, removeCondition)}\r\n                        />\r\n                    );\r\n                    if (combat) {\r\n                        const encounter = this.getEncounter(combat.encounterID);\r\n                        if (encounter) {\r\n                            let xp = 0;\r\n                            combat.combatants.filter(c => c.type === 'monster')\r\n                                .forEach(combatant => {\r\n                                    xp += Utils.experience((combatant as Combatant & Monster).challenge);\r\n                                });\r\n\r\n                            actions = (\r\n                                <div className='actions'>\r\n                                    <div className='section'>\r\n                                        <div className='text'>round: {combat.round}</div>\r\n                                    </div>\r\n                                    <div className='section'>\r\n                                        <div className='text'>xp: {xp}</div>\r\n                                    </div>\r\n                                    <div className='section' style={{ display: encounter.waves.length === 0 ? 'none' : ''}}>\r\n                                        <button onClick={() => this.openWaveModal()}>add wave</button>\r\n                                    </div>\r\n                                    <div className='section'>\r\n                                        <button onClick={() => this.pauseCombat()}>pause encounter</button>\r\n                                    </div>\r\n                                    <div className='section'>\r\n                                        <button onClick={() => this.endCombat()}>end encounter</button>\r\n                                    </div>\r\n                                </div>\r\n                            );\r\n                        }\r\n                    }\r\n                    break;\r\n                default:\r\n                    // Do nothing\r\n                    break;\r\n            }\r\n\r\n            let modal = null;\r\n            if (this.state.modal) {\r\n                let modalTitle = null;\r\n                let modalContent = null;\r\n                let modalAllowClose = true;\r\n                let modalAllowScroll = true;\r\n                const modalButtons = {\r\n                    left: [] as JSX.Element[],\r\n                    right: [] as JSX.Element[]\r\n                };\r\n\r\n                switch (this.state.modal.type) {\r\n                    case 'about':\r\n                        modalContent = (\r\n                            <AboutModal\r\n                                options={this.state.options}\r\n                                resetAll={() => this.resetAll()}\r\n                                changeValue={(source, type, value) => this.changeValue(source, type, value)}\r\n                            />\r\n                        );\r\n                        break;\r\n                    case 'demographics':\r\n                        modalTitle = 'demographics';\r\n                        modalContent = (\r\n                            <DemographicsModal\r\n                                library={this.state.library}\r\n                            />\r\n                        );\r\n                        break;\r\n                    case 'monster':\r\n                        modalTitle = 'monster editor';\r\n                        modalContent = (\r\n                            <MonsterEditorModal\r\n                                monster={this.state.modal.monster}\r\n                                library={this.state.library}\r\n                                showMonsters={this.state.modal.showMonsters}\r\n                            />\r\n                        );\r\n                        modalAllowClose = false;\r\n                        modalAllowScroll = false;\r\n                        modalButtons.left = [\r\n                            (\r\n                                <Checkbox\r\n                                    key='similar'\r\n                                    label='similar monsters'\r\n                                    checked={this.state.modal.showMonsters}\r\n                                    changeValue={() => this.toggleShowSimilarMonsters()}\r\n                                />\r\n                            )\r\n                        ];\r\n                        modalButtons.right = [\r\n                            <button key='save' onClick={() => this.saveMonster()}>save</button>,\r\n                            <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                        ];\r\n                        break;\r\n                    case 'map':\r\n                        modalTitle = 'map editor';\r\n                        modalContent = (\r\n                            <MapEditorModal\r\n                                map={this.state.modal.map}\r\n                            />\r\n                        );\r\n                        modalAllowClose = false;\r\n                        modalAllowScroll = false;\r\n                        modalButtons.right = [\r\n                            <button key='save' onClick={() => this.saveMap()}>save</button>,\r\n                            <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                        ];\r\n                        break;\r\n                    case 'combat-start':\r\n                        modalTitle = 'start a new encounter';\r\n                        modalContent = (\r\n                            <CombatStartModal\r\n                                combatSetup={this.state.modal.combatSetup}\r\n                                parties={this.state.parties}\r\n                                encounters={this.state.encounters}\r\n                                mapFolios={this.state.mapFolios}\r\n                                getMonster={(monsterName, groupName) => this.getMonster(monsterName, groupName) || null}\r\n                                notify={() => this.setState({modal: this.state.modal})}\r\n                            />\r\n                        );\r\n                        modalAllowClose = false;\r\n                        modalAllowScroll = false;\r\n                        modalButtons.right = [\r\n                            (\r\n                                <button\r\n                                    key='start encounter'\r\n                                    className={this.state.modal.combatSetup.partyID && this.state.modal.combatSetup.encounterID ? '' : 'disabled'}\r\n                                    onClick={() => this.startCombat()}\r\n                                >\r\n                                    start encounter\r\n                                </button>\r\n                            ),\r\n                            <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                        ];\r\n                        break;\r\n                    case 'combat-wave':\r\n                        modalTitle = 'encounter waves';\r\n                        modalContent = (\r\n                            <CombatStartModal\r\n                                combatSetup={this.state.modal.combatSetup}\r\n                                encounters={this.state.encounters}\r\n                                getMonster={(monsterName, groupName) => this.getMonster(monsterName, groupName) || null}\r\n                                notify={() => this.setState({modal: this.state.modal})}\r\n                            />\r\n                        );\r\n                        modalAllowClose = false;\r\n                        modalAllowScroll = false;\r\n                        modalButtons.right = [\r\n                            (\r\n                                <button\r\n                                    key='add wave'\r\n                                    className={this.state.modal.combatSetup.waveID !== null ? '' : 'disabled'}\r\n                                    onClick={() => this.addWaveToCombat()}\r\n                                >\r\n                                    add wave\r\n                                </button>\r\n                            ),\r\n                            <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                        ];\r\n                        break;\r\n                    case 'condition-add':\r\n                        modalTitle = 'add a condition';\r\n                        modalContent = (\r\n                            <ConditionModal\r\n                                condition={this.state.modal.condition}\r\n                                combatant={this.state.modal.combatant}\r\n                                combat={this.state.modal.combat}\r\n                            />\r\n                        );\r\n                        modalAllowClose = false;\r\n                        modalAllowScroll = false;\r\n                        modalButtons.right = [\r\n                            <button key='add' onClick={() => this.addConditionFromModal()}>add</button>,\r\n                            <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                        ];\r\n                        break;\r\n                    case 'condition-edit':\r\n                        modalTitle = 'edit condition';\r\n                        modalContent = (\r\n                            <ConditionModal\r\n                                condition={this.state.modal.condition}\r\n                                combatant={this.state.modal.combatant}\r\n                                combat={this.state.modal.combat}\r\n                            />\r\n                        );\r\n                        modalAllowClose = false;\r\n                        modalButtons.right = [\r\n                            <button key='save' onClick={() => this.editConditionFromModal()}>save</button>,\r\n                            <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                        ];\r\n                        break;\r\n                    default:\r\n                        // Do nothing\r\n                        break;\r\n                }\r\n\r\n                modal = (\r\n                    <div className='overlay'>\r\n                        <div className='modal'>\r\n                            <div className='modal-header'>\r\n                                <div className='title'>{modalTitle}</div>\r\n                                {modalAllowClose ? <img className='image' src={close} alt='close' onClick={() => this.closeModal()} /> : null}\r\n                            </div>\r\n                            <div className={modalAllowScroll ? 'modal-content scrollable' : 'modal-content'}>\r\n                                {modalContent}\r\n                            </div>\r\n                            <div className='modal-footer'>\r\n                                <div className='left'>{modalButtons.left}</div>\r\n                                <div className='right'>{modalButtons.right}</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='dojo'>\r\n                    <Titlebar\r\n                        actions={actions}\r\n                        blur={modal !== null}\r\n                        openHome={() => this.setView('home')}\r\n                        openAbout={() => this.openAbout()}\r\n                    />\r\n                    <div className={(modal === null) ? 'page-content' : 'page-content blur'}>\r\n                        {content}\r\n                    </div>\r\n                    <Navbar\r\n                        view={this.state.view}\r\n                        parties={this.state.parties}\r\n                        library={this.state.library}\r\n                        encounters={this.state.encounters}\r\n                        blur={modal !== null}\r\n                        setView={view => this.setView(view)}\r\n                    />\r\n                    {modal}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './style/css/foundation.css';\r\nimport './style/scss/app.scss';\r\nimport './style/scss/controls.scss';\r\n\r\nimport Dojo from './components/dojo';\r\n\r\nReactDOM.render(<Dojo />, document.getElementById('root'));\r\n"],"sourceRoot":""}