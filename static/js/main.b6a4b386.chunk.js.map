{"version":3,"sources":["resources/images/down-arrow-black.svg","resources/images/ellipsis.svg","resources/images/close-black.svg","resources/images/warning.svg","resources/images/down-arrow.svg","resources/images/settings.svg","utils/utils.ts","utils/factory.ts","models/monster-group.ts","utils/frankenstein.ts","utils/mercator.ts","models/combat.ts","components/controls/checkbox.tsx","components/controls/confirm-button.tsx","components/controls/control-row.tsx","components/controls/dropdown.tsx","components/controls/expander.tsx","components/controls/radial.tsx","components/controls/selector.tsx","components/controls/spin.tsx","components/panels/ability-score-panel.tsx","components/panels/conditions-panel.tsx","components/panels/note.tsx","components/panels/traits-panel.tsx","components/cards/info-card.tsx","components/cards/monster-card.tsx","components/cards/pc-card.tsx","components/panels/hit-point-gauge.tsx","components/panels/map-panel.tsx","components/list-items/combat-list-item.tsx","components/panels/card-group.tsx","components/portals/popout.tsx","components/screens/combat-manager-screen.tsx","components/cards/wave-card.tsx","components/list-items/encounter-list-item.tsx","components/panels/difficulty-chart-panel.tsx","components/panels/filter-panel.tsx","components/screens/encounter-builder-screen.tsx","components/panels/readaloud.tsx","components/screens/home-screen.tsx","components/cards/map-card.tsx","components/list-items/map-folio-list-item.tsx","components/screens/map-folios-screen.tsx","components/list-items/monster-group-list-item.tsx","components/screens/monster-library-screen.tsx","components/list-items/party-list-item.tsx","components/screens/parties-screen.tsx","components/dm-modules/die-roller-module.tsx","utils/shakespeare.ts","utils/ustinov.ts","components/dm-modules/language-module.tsx","components/dm-modules/name-module.tsx","components/dm-modules/reference-module.tsx","components/modals/about-modal.tsx","components/modals/add-combatants-modal.tsx","components/modals/combat-start-modal.tsx","models/condition.ts","components/controls/radio-group.tsx","components/modals/condition-modal.tsx","components/modals/demographics-modal.tsx","models/map-folio.ts","components/cards/map-tile-card.tsx","components/modals/map-editor-modal.tsx","components/modals/monster-editor-modal.tsx","components/modals/pc-editor-modal.tsx","components/panels/navbar.tsx","components/panels/titlebar.tsx","components/controls/menu.tsx","components/dojo.tsx","index.js"],"names":["module","exports","Utils","monster","library","group","this","monsterIdToGroup","id","grp","find","g","monsters","includes","filter","text","result","toLowerCase","split","forEach","token","indexOf","s4","Math","floor","random","toString","substring","collection","sorts","length","field","dir","fn","a","b","undefined","sort","order","score","mod","modifierValue","str","sides","size","cr","parseInt","push","ac","hpMin","hpMax","attack","dmgMin","dmgMax","save","count","level","difficulty","type","plural","value","delta","sizes","index","condition","name","combat","duration","saveDuration","saveType","toUpperCase","saves","saveDC","combatantDuration","point","c","combatants","cmb","combatantID","displayName","roundsDuration","rounds","encounter","monsterNames","slots","slot","names","monsterName","n","tag","Factory","guid","pcs","active","player","race","classes","languages","passiveInsight","passiveInvestigation","passivePerception","initiative","url","companions","category","alignment","challenge","abilityScores","dex","con","int","wis","cha","hpTemp","hitDice","damage","resist","vulnerable","immune","savingThrows","speed","skills","senses","equipment","traits","conditionImmunities","usage","uses","waves","monsterGroupName","maps","items","x","y","width","height","terrain","style","partyID","encounterID","waveID","folioID","mapID","encounterInitMode","map","round","notifications","issues","timestamp","data","combatant","SIZE_TYPES","CATEGORY_TYPES","TRAIT_TYPES","Frankenstein","target","newValue","source","tokens","nudgeChallenge","nudgeSize","changeValue","hpPerDie","hitDieType","hp","trait","createMonster","subtype","parseChallenge","challenge_rating","armor_class","hit_points","hit_dice","strength","dexterity","constitution","intelligence","wisdom","charisma","damage_resistances","damage_vulnerabilities","damage_immunities","condition_immunities","skill","special_abilities","rawTrait","buildTrait","actions","reactions","legendary_actions","openBracket","closeBracket","desc","replace","finalType","copy","JSON","parse","stringify","createTrait","traitType","splice","t1","t2","index1","index2","setRandomValue","m","t","distinct","current","d","addedIDs","copyTrait","findIndex","avg","Mercator","item","dimensions","mapDimensions","candidateSquares","minX","maxX","minY","maxY","canAddMonsterHere","square","miniSize","displaySize","createMapItem","tiles","tile","min","coveredSquares","right","max","bottom","x1","y1","occupants","itemsAt","canOccupy","every","left","top","COMBAT_TAGS","Checkbox","e","stopPropagation","props","checked","display","disabled","toggle","className","onClick","click","label","ex","console","error","React","Component","defaultProps","ConfirmButton","state","pressed","setState","callback","content","src","warning","alt","details","perform","ControlRow","controls","Dropdown","open","optionID","select","options","selectedText","selectedID","option","o","placeholder","key","title","ellipsis","selected","toggleOpen","DropdownOption","Expander","expanded","arrow","Radial","dir2","direction","showOut","showIn","showDiag","Selector","tabs","itemsPerRow","rowCount","ceil","rowContents","rowIndex","rowSections","row","SelectorOption","Spin","nudgeValue","preventDefault","minusBtns","plusBtns","factors","factor","onTouchEnd","touchEnd","reverse","AbilityScorePanel","showAbilityScores","edit","toggleAbilityScores","modifier","ConditionsPanel","conditions","nudgeConditionValue","editCondition","removeCondition","conditionID","addCondition","ConditionPanel","conditionDurationText","description","conditionText","Note","white","showdown","Showdown","Converter","TraitsPanel","prevTrait","nextTrait","mode","action","removeTrait","swapTraits","traitsByType","showInfo","info","match","list","createTraitPanel","addTrait","createSection","TraitPanel","maxUses","heading","used","startsWith","found","markdown","dangerouslySetInnerHTML","__html","makeHtml","onChange","event","InfoCard","MonsterCard","showDetails","cloneName","combatMode","damageOrHealing","changeHP","temp","val","sizeAndType","align","wave","some","s","die","conMod","conModStr","combatModes","setCombatMode","pending","defeated","endTurn","makeDefeated","makeCurrent","makeActive","showOnMap","tags","toggleTag","nudgeDamage","heal","setDamage","mapMove","auraDetails","aura","radius","color","mapRemove","mapAdd","removeCombatant","editMonster","setCloneName","cloneMonster","groupOptions","moveToGroup","removeMonster","removeEncounterSlot","canAdd","monsterIsInWave","addEncounterSlot","selectMonster","deselectMonster","getCombatControls","stats","slotSection","getHP","imageStyle","toggleDetails","PCCard","editPC","removePC","companion","href","rel","HitPointGauge","hpCurrent","hpBloodied","hpWidth","hpTempBar","hpTempWidth","MapPanel","border","i","mi","sizeInSquares","sideLength","getSideLength","offsetX","offsetY","getMapDimensions","grid","gridStyle","getStyle","setSelectedItemID","tileStyle","selectable","selectedItemID","thumbnail","large","auras","dim","auraStyle","backgroundColor","mt","tokenStyle","simple","showGauge","showHidden","dragOverlay","showOverlay","yOver","xOver","overlayStyle","overlay","posX","posY","gridSquareClicked","GridSquare","onDoubleClick","doubleClick","MapTile","MapToken","initials","hpGauge","altitudeBadge","conditionsBadge","altitude","CombatListItem","setSelection","CardGroup","showCards","hidden","closeBtn","close","showToggle","toggleCards","cards","Popout","externalWindow","containerElement","window","document","createElement","body","appendChild","Array","from","styleSheets","stylesheet","css","newStyleElement","head","cssRules","rule","createTextNode","cssText","addEventListener","closeWindow","ReactDOM","createPortal","children","CombatManagerScreen","selectedTokenID","addingToMapID","playerView","showControls","setPlayerViewOpen","show","selection","init","minimal","setSelectedTokenID","defeatCombatant","setAddingToMapID","createCard","pendingHelp","concat","activeHelp","notificationSection","notification","mapSection","addCombatantToMap","scatterMonsters","playerViewSection","setPlayerViewShowControls","special","legendary","lair","selectedCombatant","getPlayerView","listItems","combats","showCombat","resumeEncounter","createCombat","HelpCard","NotificationPanel","success","PendingCombatantRow","getInformationText","PCRow","cls","notes","getTagDescription","join","MonsterRow","gauge","dmInfo","WaveCard","removeWave","EncounterListItem","DifficultyChartPanel","selectedPartyID","party","monsterCount","monsterXp","getMonster","experience","xpThresholds","diffSection","adjustedXp","experienceFactor","parties","p","xpEasy","xpMedium","xpHard","xpDeadly","pc","pcExperience","adjustedDifficulty","small","getLeft","xp","getRight","partySelection","partyOptions","selectParty","FilterPanel","sizeOptions","catOptions","cat","resetFilter","summary","challengeMin","challengeMax","EncounterBuilderScreen","changeFilterValue","matchMonster","libraryCards","enc","encounterName","leftColumn","monsterFilter","addWave","removeEncounter","nudgeFilterValue","selectEncounter","encounters","showEncounter","addEncounter","watermark","encounterCards","getMonsterCards","card","w","waveCards","getLibrarySection","EncounterInfo","Readaloud","HomeScreen","addOpenGameContent","MapCard","editMap","removeMap","MapFolioListItem","matchFolio","mapFolio","MapFoliosScreen","folio","addMap","removeMapFolio","selectMapFolio","mapFolios","f","showMapFolio","addMapFolio","folioCards","MapFolioInfo","MonsterGroupListItem","matchGroup","MonsterLibraryScreen","addMonster","sortMonsters","removeMonsterGroup","selectMonsterGroup","showMonsterGroup","addMonsterGroup","groupID","MonsterInfo","PartyListItem","matchParty","PartiesScreen","addPC","sortPCs","removeParty","showParty","addParty","activeCards","inactiveCards","activePCs","activePC","inactivePC","PartyInfo","insightSummary","investigationSummary","perceptionSummary","reduce","array","localeCompare","insight","invest","percep","DieRollerModule","dice","rolls","dieRoll","roll","rollsSection","resultSection","setDice","nudgeCount","Shakespeare","sources","model","maxLength","line","addLineToModel","String","fromCharCode","prev","substr","char","freq","requiredResults","lines","failures","extractLine","l","fit","candidates","repeat","values","ch","mc","maxCount","sum","Ustinov","speechSynthesis","cancel","utterance","SpeechSynthesisUtterance","chooseVoice","voice","rate","randomValue","pitch","speak","getVoices","voices","langCodes","lang","getLanguageCode","v","default","Promise","resolve","onvoiceschanged","language","LanguageModule","output","fetch","response","presetName","preset","getPresets","addLanguage","getLanguages","Object","keys","initModel","generate","presetOptions","selectedPreset","selectedLanguages","isSelected","removeLanguage","allowGenerate","allowReset","usePreset","reset","GeneratedText","navigator","clipboard","writeText","say","NameModule","male","female","surname","input","setOption","ReferenceModule","view","fetchData","setView","AboutModal","moduleID","setModule","pkg","version","resetAll","getTools","getAbout","AddCombatantsModal","combatantSlots","createEncounterSlot","getMonsterGroup","currentIDs","allCombatants","selectedCombatants","nudgeMonsterCount","CombatStartModal","combatSetup","notify","getMonsterNames","slotID","partyContent","selectedParty","pcSections","setParty","encounterOptions","encounterContent","selectedEncounter","monsterSections","waveMonsters","setEncounter","folios","folioOptions","selectMapSection","thumbnailSection","mapOptions","setMapID","setFolioID","waveOptions","waveContent","selectedWave","setWave","slotsContainer","slotNames","inputs","changeName","setEncounterInitMode","leftSection","rightSection","getPartySection","getEncounterSection","getMapSection","getDifficultySection","getMonsterSection","getWaveSection","margin","MonsterName","CONDITION_TYPES","RadioGroup","itemID","RadioGroupItem","ConditionModal","conditionName","durationType","createConditionDurationSaves","createConditionDurationCombatant","createConditionDurationRounds","object","saveOptions","pointOptions","combatantOptions","durations","setCondition","setDuration","DemographicsModal","chart","demographics","allMonsters","buckets","maxBucketSize","bucket","bars","set","selectChart","TERRAIN_TYPES","MapTileCard","terrainOptions","styleOptions","moveMapItem","resizeMapItem","cloneMapItem","removeMapItem","MapEditorModal","selectedTileID","addingTile","smallMapItem","bigMapItem","addBtn","toggleAddingTile","tools","mapItem","setSelectedTileID","addMapTile","MonsterEditorModal","page","showFilter","helpSection","sidebar","similarFilter","scratchpadFilter","scratchpadList","sections","getHelpOptionsForPage","section","spliceMonsters","addRandomTrait","getValueSection","getActionsSection","dataType","valueSections","rows","monsterCards","showSidebar","getMonsters","changeTrait","help","selector","setHelpSection","getHelpSection","sidebarContent","toggleMatch","searchResults","resultsRows","addToScratchpadList","removeSection","deleteRows","removeFromScratchpadList","transition","setPage","PCEditorModal","createCompanion","comp","removeCompanion","addCompanion","Navbar","partiesStyle","libraryStyle","encounterStyle","mapStyle","combatStyle","encountersEnabled","combatEnabled","blur","Titlebar","openHome","cog","openAbout","Menu","Dojo","modal","selectedMonsterGroupID","selectedEncounterID","selectedMapFolioID","selectedCombatID","json","localStorage","getItem","setItem","createParty","createPC","original","createMonsterGroup","sourceGroup","clone","then","createFromJSON","groupName","createEncounter","sortEncounterSlots","slotContainer","aName","bName","createEncounterWave","createMapFolio","createMap","setup","createCombatSetup","partyName","addPCToCombat","groupInitRoll","addMonsterToCombat","sortCombatants","initMode","Date","toLocaleString","newRound","actor","groupRoll","singleRoll","issue","saveNotification","createNotification","endNotification","createCondition","conditionIndex","scatterCombatants","obj","openDemographics","allowWave","addToEncounter","openWaveModal","pauseCombat","endCombat","addWaveToEncounter","pausedCombat","resumeCombat","closeNotification","modalSidebar","modalTitle","modalContent","modalAllowScroll","modalButtons","closeModal","savePC","toggleShowSidebar","saveMonster","saveMap","startCombat","addWaveToCombat","addCombatantsFromModal","addConditionFromModal","editConditionFromModal","getContent","getActions","getModal","render","getElementById"],"mappings":"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","file":"static/js/main.b6a4b386.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/down-arrow-black.a2fc7a1f.svg\";","module.exports = __webpack_public_path__ + \"static/media/ellipsis.9650a20f.svg\";","module.exports = __webpack_public_path__ + \"static/media/close-black.7645a5b9.svg\";","module.exports = __webpack_public_path__ + \"static/media/warning.67a11a95.svg\";","module.exports = __webpack_public_path__ + \"static/media/down-arrow.697dc1af.svg\";","module.exports = __webpack_public_path__ + \"static/media/settings.042bb1c2.svg\";","import { Combat } from '../models/combat';\r\nimport { Condition, ConditionDurationCombatant, ConditionDurationRounds, ConditionDurationSaves } from '../models/condition';\r\nimport { Encounter, EncounterWave } from '../models/encounter';\r\nimport { Monster, MonsterGroup } from '../models/monster-group';\r\n\r\nexport default class Utils {\r\n\r\n    // This is an internal dictionary to speed up lookup\r\n    private static monsterIdToGroup: { [id: string]: MonsterGroup } = {};\r\n\r\n    public static getMonsterGroup(monster: Monster, library: MonsterGroup[]): MonsterGroup {\r\n        let group = this.monsterIdToGroup[monster.id];\r\n\r\n        if (!group) {\r\n            const grp = library.find(g => g.monsters.includes(monster));\r\n            if (grp) {\r\n                group = grp;\r\n                this.monsterIdToGroup[monster.id] = group;\r\n            }\r\n        }\r\n\r\n        return group;\r\n    }\r\n\r\n    public static match(filter: string, text: string): boolean {\r\n        if (!filter) {\r\n            return true;\r\n        }\r\n\r\n        let result = true;\r\n\r\n        const tokens = filter.toLowerCase().split(' ');\r\n        tokens.forEach(token => {\r\n            if (text.toLowerCase().indexOf(token) === -1) {\r\n                result = false;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    public static guid(): string {\r\n        const s4 = () => Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\r\n        return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\r\n    }\r\n\r\n    public static sort(collection: any[], sorts: { field: string, dir: 'asc' | 'desc' }[] = []): any[] {\r\n        if (sorts.length === 0) {\r\n            sorts = [{ field: 'name', dir: 'asc' }];\r\n        }\r\n\r\n        const fn = (a: any, b: any, field: string): number => {\r\n            if ((a[field] !== undefined) && (b[field] !== undefined)) {\r\n                if (a[field] < b[field]) { return -1; }\r\n                if (a[field] > b[field]) { return 1; }\r\n            }\r\n            return 0;\r\n        };\r\n\r\n        collection.sort((a, b) => {\r\n            let order = 0;\r\n            sorts.forEach(sort => {\r\n                if (order === 0) {\r\n                    order = fn(a, b, sort.field) * (sort.dir === 'asc' ? 1 : -1);\r\n                }\r\n            });\r\n            return order;\r\n        });\r\n\r\n        return collection;\r\n    }\r\n\r\n    public static modifierValue(score: number): number {\r\n        return Math.floor((score - 10) / 2);\r\n    }\r\n\r\n    public static modifier(score: number): string {\r\n        const mod = this.modifierValue(score);\r\n        let str = mod.toString();\r\n        if (mod >= 0) {\r\n            str = '+' + str;\r\n        }\r\n        return str;\r\n    }\r\n\r\n    public static dieRoll(sides: number = 20): number {\r\n        return Math.floor(Math.random() * sides) + 1;\r\n    }\r\n\r\n    public static miniSize(size: string): number {\r\n        switch (size) {\r\n            case 'tiny': return 0.4;\r\n            case 'small': return 0.6;\r\n            case 'medium': return 1;\r\n            case 'large': return 2;\r\n            case 'huge': return 3;\r\n            case 'gargantuan': return 4;\r\n            default: return 1;\r\n        }\r\n    }\r\n\r\n    public static hitDieType(size: string) {\r\n        switch (size) {\r\n            case 'tiny': return 4;\r\n            case 'small': return 6;\r\n            case 'medium': return 8;\r\n            case 'large': return 10;\r\n            case 'huge': return 12;\r\n            case 'gargantuan': return 20;\r\n            default: return 8;\r\n        }\r\n    }\r\n\r\n    public static challenge(cr: number): string {\r\n        switch (cr) {\r\n            case 0.125: return '1/8';\r\n            case 0.25: return '1/4';\r\n            case 0.5: return '1/2';\r\n            default: return cr.toString();\r\n        }\r\n    }\r\n\r\n    public static parseChallenge(cr: string): number {\r\n        switch (cr) {\r\n            case '1/8': return 0.125;\r\n            case '1/4': return 0.25;\r\n            case '1/2': return 0.5;\r\n            default: return parseInt(cr, 10);\r\n        }\r\n    }\r\n\r\n    public static challengeDetails(): any[] {\r\n        const result: any[] = [];\r\n\r\n        result.push({ cr: 0,        ac: 13,       hpMin: 1, hpMax: 6,       attack: 3,  dmgMin: 0,   dmgMax: 1,   save: 13 });\r\n        result.push({ cr: 0.125,    ac: 13,       hpMin: 7, hpMax: 35,      attack: 3,  dmgMin: 2,   dmgMax: 3,   save: 13 });\r\n        result.push({ cr: 0.25,     ac: 13,       hpMin: 36, hpMax: 49,     attack: 3,  dmgMin: 4,   dmgMax: 5,   save: 13 });\r\n        result.push({ cr: 0.5,      ac: 13,       hpMin: 50, hpMax: 70,     attack: 3,  dmgMin: 6,   dmgMax: 8,   save: 13 });\r\n        result.push({ cr: 1,        ac: 13,       hpMin: 71, hpMax: 85,     attack: 3,  dmgMin: 9,   dmgMax: 14,  save: 13 });\r\n        result.push({ cr: 2,        ac: 13,       hpMin: 86, hpMax: 100,    attack: 3,  dmgMin: 15,  dmgMax: 20,  save: 13 });\r\n        result.push({ cr: 3,        ac: 13,       hpMin: 101, hpMax: 115,   attack: 4,  dmgMin: 21,  dmgMax: 26,  save: 13 });\r\n        result.push({ cr: 4,        ac: 14,       hpMin: 116, hpMax: 130,   attack: 5,  dmgMin: 27,  dmgMax: 32,  save: 14 });\r\n        result.push({ cr: 5,        ac: 15,       hpMin: 131, hpMax: 145,   attack: 6,  dmgMin: 33,  dmgMax: 38,  save: 15 });\r\n        result.push({ cr: 6,        ac: 15,       hpMin: 146, hpMax: 160,   attack: 6,  dmgMin: 39,  dmgMax: 44,  save: 15 });\r\n        result.push({ cr: 7,        ac: 15,       hpMin: 161, hpMax: 175,   attack: 6,  dmgMin: 45,  dmgMax: 50,  save: 15 });\r\n        result.push({ cr: 8,        ac: 16,       hpMin: 176, hpMax: 190,   attack: 7,  dmgMin: 51,  dmgMax: 56,  save: 16 });\r\n        result.push({ cr: 9,        ac: 16,       hpMin: 191, hpMax: 205,   attack: 7,  dmgMin: 57,  dmgMax: 62,  save: 16 });\r\n        result.push({ cr: 10,       ac: 17,       hpMin: 206, hpMax: 220,   attack: 7,  dmgMin: 63,  dmgMax: 68,  save: 16 });\r\n        result.push({ cr: 11,       ac: 17,       hpMin: 221, hpMax: 235,   attack: 8,  dmgMin: 69,  dmgMax: 74,  save: 17 });\r\n        result.push({ cr: 12,       ac: 17,       hpMin: 236, hpMax: 250,   attack: 8,  dmgMin: 75,  dmgMax: 80,  save: 17 });\r\n        result.push({ cr: 13,       ac: 18,       hpMin: 251, hpMax: 265,   attack: 8,  dmgMin: 81,  dmgMax: 86,  save: 18 });\r\n        result.push({ cr: 14,       ac: 18,       hpMin: 266, hpMax: 280,   attack: 8,  dmgMin: 87,  dmgMax: 92,  save: 18 });\r\n        result.push({ cr: 15,       ac: 18,       hpMin: 281, hpMax: 295,   attack: 8,  dmgMin: 93,  dmgMax: 98,  save: 18 });\r\n        result.push({ cr: 16,       ac: 18,       hpMin: 296, hpMax: 310,   attack: 9,  dmgMin: 99,  dmgMax: 104, save: 18 });\r\n        result.push({ cr: 17,       ac: 19,       hpMin: 311, hpMax: 325,   attack: 10, dmgMin: 105, dmgMax: 110, save: 19 });\r\n        result.push({ cr: 18,       ac: 19,       hpMin: 326, hpMax: 340,   attack: 10, dmgMin: 111, dmgMax: 116, save: 19 });\r\n        result.push({ cr: 19,       ac: 19,       hpMin: 341, hpMax: 355,   attack: 10, dmgMin: 117, dmgMax: 122, save: 19 });\r\n        result.push({ cr: 20,       ac: 19,       hpMin: 356, hpMax: 400,   attack: 10, dmgMin: 123, dmgMax: 140, save: 19 });\r\n        result.push({ cr: 21,       ac: 19,       hpMin: 401, hpMax: 445,   attack: 11, dmgMin: 141, dmgMax: 158, save: 20 });\r\n        result.push({ cr: 22,       ac: 19,       hpMin: 446, hpMax: 490,   attack: 11, dmgMin: 159, dmgMax: 176, save: 20 });\r\n        result.push({ cr: 23,       ac: 19,       hpMin: 491, hpMax: 535,   attack: 11, dmgMin: 177, dmgMax: 194, save: 20 });\r\n        result.push({ cr: 24,       ac: 19,       hpMin: 536, hpMax: 580,   attack: 12, dmgMin: 195, dmgMax: 212, save: 21 });\r\n        result.push({ cr: 25,       ac: 19,       hpMin: 581, hpMax: 625,   attack: 12, dmgMin: 213, dmgMax: 230, save: 21 });\r\n        result.push({ cr: 26,       ac: 19,       hpMin: 626, hpMax: 670,   attack: 12, dmgMin: 231, dmgMax: 248, save: 21 });\r\n        result.push({ cr: 27,       ac: 19,       hpMin: 671, hpMax: 715,   attack: 13, dmgMin: 249, dmgMax: 266, save: 22 });\r\n        result.push({ cr: 28,       ac: 19,       hpMin: 716, hpMax: 760,   attack: 13, dmgMin: 267, dmgMax: 284, save: 22 });\r\n        result.push({ cr: 29,       ac: 19,       hpMin: 761, hpMax: 805,   attack: 13, dmgMin: 285, dmgMax: 302, save: 22 });\r\n        result.push({ cr: 30,       ac: 19,       hpMin: 806, hpMax: 850,   attack: 14, dmgMin: 303, dmgMax: 320, save: 23 });\r\n\r\n        return result;\r\n    }\r\n\r\n    public static experience(cr: number): number {\r\n        switch (cr) {\r\n            case 0: return 10;\r\n            case 0.125: return 25;\r\n            case 0.25: return 50;\r\n            case 0.5: return 100;\r\n            case 1: return 200;\r\n            case 2: return 450;\r\n            case 3: return 700;\r\n            case 4: return 1100;\r\n            case 5: return 1800;\r\n            case 6: return 2300;\r\n            case 7: return 2900;\r\n            case 8: return 3900;\r\n            case 9: return 5000;\r\n            case 10: return 5900;\r\n            case 11: return 7200;\r\n            case 12: return 8400;\r\n            case 13: return 10000;\r\n            case 14: return 11500;\r\n            case 15: return 13000;\r\n            case 16: return 15000;\r\n            case 17: return 18000;\r\n            case 18: return 20000;\r\n            case 19: return 22000;\r\n            case 20: return 25000;\r\n            case 21: return 33000;\r\n            case 22: return 41000;\r\n            case 23: return 50000;\r\n            case 24: return 62000;\r\n            case 30: return 155000;\r\n            default: return 0;\r\n        }\r\n    }\r\n\r\n    public static experienceFactor(count: number): number {\r\n        switch (count) {\r\n            case 0:\r\n                return 0;\r\n            case 1:\r\n                return 1;\r\n            case 2:\r\n                return 1.5;\r\n            case 3:\r\n            case 4:\r\n            case 5:\r\n            case 6:\r\n                return 2;\r\n            case 7:\r\n            case 8:\r\n            case 9:\r\n            case 10:\r\n                return 2.5;\r\n            case 11:\r\n            case 12:\r\n            case 13:\r\n            case 14:\r\n                return 3;\r\n            default:\r\n                return 4;\r\n        }\r\n    }\r\n\r\n    public static pcExperience(level: number, difficulty: string): number {\r\n        switch (difficulty) {\r\n            case 'easy':\r\n                switch (level) {\r\n                    case 1: return 25;\r\n                    case 2: return 50;\r\n                    case 3: return 75;\r\n                    case 4: return 125;\r\n                    case 5: return 250;\r\n                    case 6: return 300;\r\n                    case 7: return 350;\r\n                    case 8: return 450;\r\n                    case 9: return 550;\r\n                    case 10: return 600;\r\n                    case 11: return 800;\r\n                    case 12: return 1000;\r\n                    case 13: return 1100;\r\n                    case 14: return 1250;\r\n                    case 15: return 1400;\r\n                    case 16: return 1600;\r\n                    case 17: return 2000;\r\n                    case 18: return 2100;\r\n                    case 19: return 2400;\r\n                    case 20: return 2800;\r\n                    default: return 0;\r\n                }\r\n            case 'medium':\r\n                switch (level) {\r\n                    case 1: return 50;\r\n                    case 2: return 100;\r\n                    case 3: return 150;\r\n                    case 4: return 250;\r\n                    case 5: return 500;\r\n                    case 6: return 600;\r\n                    case 7: return 750;\r\n                    case 8: return 900;\r\n                    case 9: return 1100;\r\n                    case 10: return 1200;\r\n                    case 11: return 1600;\r\n                    case 12: return 2000;\r\n                    case 13: return 2200;\r\n                    case 14: return 2500;\r\n                    case 15: return 2800;\r\n                    case 16: return 3200;\r\n                    case 17: return 3900;\r\n                    case 18: return 4200;\r\n                    case 19: return 4900;\r\n                    case 20: return 5700;\r\n                    default: return 0;\r\n                }\r\n            case 'hard':\r\n                switch (level) {\r\n                    case 1: return 75;\r\n                    case 2: return 150;\r\n                    case 3: return 225;\r\n                    case 4: return 375;\r\n                    case 5: return 750;\r\n                    case 6: return 900;\r\n                    case 7: return 1100;\r\n                    case 8: return 1400;\r\n                    case 9: return 1600;\r\n                    case 10: return 1900;\r\n                    case 11: return 2400;\r\n                    case 12: return 3000;\r\n                    case 13: return 3400;\r\n                    case 14: return 3800;\r\n                    case 15: return 4300;\r\n                    case 16: return 4800;\r\n                    case 17: return 5900;\r\n                    case 18: return 6300;\r\n                    case 19: return 7300;\r\n                    case 20: return 8500;\r\n                    default: return 0;\r\n                }\r\n            case 'deadly':\r\n                switch (level) {\r\n                    case 1: return 100;\r\n                    case 2: return 200;\r\n                    case 3: return 400;\r\n                    case 4: return 500;\r\n                    case 5: return 1100;\r\n                    case 6: return 1400;\r\n                    case 7: return 1700;\r\n                    case 8: return 2100;\r\n                    case 9: return 2400;\r\n                    case 10: return 2800;\r\n                    case 11: return 3600;\r\n                    case 12: return 4500;\r\n                    case 13: return 5100;\r\n                    case 14: return 5700;\r\n                    case 15: return 6400;\r\n                    case 16: return 7200;\r\n                    case 17: return 8800;\r\n                    case 18: return 9500;\r\n                    case 19: return 10900;\r\n                    case 20: return 12700;\r\n                    default: return 0;\r\n                }\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n\r\n    public static traitType(type: string, plural: boolean): string {\r\n        let str = '';\r\n        switch (type) {\r\n            case 'trait':\r\n                str = 'trait';\r\n                break;\r\n            case 'action':\r\n                str = 'action';\r\n                break;\r\n            case 'bonus':\r\n                str = 'bonus action';\r\n                break;\r\n            case 'reaction':\r\n                str = 'reaction';\r\n                break;\r\n            case 'legendary':\r\n                str = 'legendary action';\r\n                break;\r\n            case 'lair':\r\n                str = 'lair action';\r\n                break;\r\n        }\r\n\r\n        if (plural) {\r\n            str += 's';\r\n        }\r\n\r\n        return str;\r\n    }\r\n\r\n    public static nudgeChallenge(value: number, delta: number): number {\r\n        let result = 0;\r\n\r\n        switch (value) {\r\n            case 0:\r\n                if (delta === -1) {\r\n                    result = 0;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 0.125;\r\n                }\r\n                break;\r\n            case 0.125:\r\n                if (delta === -1) {\r\n                    result = 0;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 0.25;\r\n                }\r\n                break;\r\n            case 0.25:\r\n                if (delta === -1) {\r\n                    result = 0.125;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 0.5;\r\n                }\r\n                break;\r\n            case 0.5:\r\n                if (delta === -1) {\r\n                    result = 0.25;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 1;\r\n                }\r\n                break;\r\n            case 1:\r\n                if (delta === -1) {\r\n                    result = 0.5;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 2;\r\n                }\r\n                break;\r\n            default:\r\n                result = value + delta;\r\n                break;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public static nudgeSize(value: string, delta: number): string {\r\n        const sizes = ['tiny', 'small', 'medium', 'large', 'huge', 'gargantuan'];\r\n        let index = sizes.indexOf(value) + delta;\r\n        if (index < 0) {\r\n            index = 0;\r\n        }\r\n        if (index >= sizes.length) {\r\n            index = sizes.length - 1;\r\n        }\r\n        return sizes[index];\r\n    }\r\n\r\n    public static conditionText(condition: Condition): string[] {\r\n        switch (condition.name) {\r\n            case 'blinded':\r\n                return [\r\n                    'a blinded creature can’t see and automatically fails any ability check that requires sight',\r\n                    'attack rolls against the creature have advantage, and the creature’s attack rolls have disadvantage'\r\n                ];\r\n            case 'charmed':\r\n                return [\r\n                    'a charmed creature can’t attack the charmer or target the charmer with harmful abilities or magical effects',\r\n                    'the charmer has advantage on any ability check to interact socially with the creature'\r\n                ];\r\n            case 'deafened':\r\n                return [\r\n                    'a deafened creature can’t hear and automatically fails any ability check that requires hearing.'\r\n                ];\r\n            case 'exhaustion': {\r\n                switch (condition.level) {\r\n                case 1:\r\n                    return [\r\n                        'disadvantage on ability checks'\r\n                    ];\r\n                case 2:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved'\r\n                    ];\r\n                case 3:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved',\r\n                        'disadvantage on attack rolls and saving throws'\r\n                    ];\r\n                case 4:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved',\r\n                        'disadvantage on attack rolls and saving throws',\r\n                        'hit point maximum halved'\r\n                    ];\r\n                case 5:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved',\r\n                        'disadvantage on attack rolls and saving throws',\r\n                        'hit point maximum halved',\r\n                        'speed reduced to 0'\r\n                    ];\r\n                case 6:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved',\r\n                        'disadvantage on attack rolls and saving throws',\r\n                        'hit point maximum halved',\r\n                        'speed reduced to 0',\r\n                        'death'\r\n                    ];\r\n                default:\r\n                    return [];\r\n                }\r\n            }\r\n            case 'frightened':\r\n                return [\r\n                    'a frightened creature has disadvantage on ability checks and attack rolls while the source of its fear is within line of sight',\r\n                    'the creature can’t willingly move closer to the source of its fear'\r\n                ];\r\n            case 'grappled':\r\n                return [\r\n                    'a grappled creature’s speed becomes 0, and it can’t benefit from any bonus to its speed',\r\n                    'the condition ends if the grappler is incapacitated',\r\n                    'the condition also ends if an effect removes the grappled creature from the reach of the grappler or grappling effect'\r\n                ];\r\n            case 'incapacitated':\r\n                return [\r\n                    'an incapacitated creature can’t take actions or reactions',\r\n                    'being incapacitated breaks concentration'\r\n                ];\r\n            case 'invisible':\r\n                return [\r\n                    'an invisible creature is impossible to see without the aid of magic or a special sense',\r\n                    'for the purpose of hiding, the creature is heavily obscured',\r\n                    'the creature’s location can be detected by any noise it makes or any tracks it leaves',\r\n                    'attack rolls against the creature have disadvantage, and the creature’s attack rolls have advantage'\r\n                ];\r\n            case 'paralyzed':\r\n                return [\r\n                    'a paralyzed creature is incapacitated (can’t take actions or reactions) and can’t move or speak',\r\n                    'the creature automatically fails strength and dexterity saving throws',\r\n                    'attack rolls against the creature have advantage',\r\n                    'any attack that hits the creature is a critical hit if the attacker is within 5 feet of the creature'\r\n                ];\r\n            case 'petrified':\r\n                return [\r\n                    /* tslint:disable-next-line:max-line-length */\r\n                    'a petrified creature is transformed, along with any nonmagical objects it is wearing or carrying, into a solid inanimate substance (usually stone)',\r\n                    'its weight increases by a factor of ten, and it ceases aging',\r\n                    'the creature is incapacitated (can’t take actions or reactions), can’t move or speak, and is unaware of its surroundings',\r\n                    'attack rolls against the creature have advantage',\r\n                    'the creature automatically fails strength and dexterity saving throws',\r\n                    'the creature has resistance to all damage',\r\n                    'the creature is immune to poison and disease, although a poison or disease already in its system is suspended, not neutralized'\r\n                ];\r\n            case 'poisoned':\r\n                return [\r\n                    'a poisoned creature has disadvantage on attack rolls and ability checks'\r\n                ];\r\n            case 'prone':\r\n                return [\r\n                    'a prone creature’s only movement option is to crawl, unless it stands up and thereby ends the condition',\r\n                    'the creature has disadvantage on attack rolls',\r\n                    /* tslint:disable-next-line:max-line-length */\r\n                    'an attack roll against the creature has advantage if the attacker is Within 5 feet of the creature; otherwise, the attack roll has disadvantage'\r\n                ];\r\n            case 'restrained':\r\n                return [\r\n                    'a restrained creature’s speed becomes 0, and it can’t benefit from any bonus to its speed',\r\n                    'attack rolls against the creature have advantage, and the creature’s attack rolls have disadvantage',\r\n                    'the creature has disadvantage on dexterity saving throws'\r\n                ];\r\n            case 'stunned':\r\n                return [\r\n                    'a stunned creature is incapacitated (can’t take actions or reactions), can’t move, and can speak only falteringly',\r\n                    'the creature automatically fails strength and dexterity saving throws',\r\n                    'attack rolls against the creature have advantage'\r\n                ];\r\n            case 'unconscious':\r\n                return [\r\n                    'an unconscious creature is incapacitated (can’t take actions or reactions), can’t move or speak, and is unaware of its surroundings',\r\n                    'the creature drops whatever its holding and falls prone',\r\n                    'the creature automatically fails strength and dexterity saving throws',\r\n                    'attack rolls against the creature have advantage',\r\n                    'any attack that hits the creature is a critical hit if the attacker is within 5 feet of the creature'\r\n                ];\r\n            case 'custom':\r\n                return [];\r\n            default:\r\n                return [];\r\n        }\r\n    }\r\n\r\n    public static conditionDurationText(condition: Condition, combat: Combat) {\r\n        if (condition.duration !== null) {\r\n            switch (condition.duration.type) {\r\n                case 'saves':\r\n                    const saveDuration = condition.duration as ConditionDurationSaves;\r\n                    let saveType = saveDuration.saveType.toString();\r\n                    if (saveType !== 'death') {\r\n                        saveType = saveType.toUpperCase();\r\n                    }\r\n                    const saves = saveDuration.count > 1 ? 'saves' : 'save';\r\n                    return 'until you make ' + saveDuration.count + ' ' + saveType + ' ' + saves + ' at dc ' + saveDuration.saveDC;\r\n                case 'combatant':\r\n                    const combatantDuration = condition.duration as ConditionDurationCombatant;\r\n                    const point = combatantDuration.point;\r\n                    const c = combat.combatants.find(cmb => cmb.id === combatantDuration.combatantID);\r\n                    const combatant = c ? (c.displayName || c.name || 'unnamed monster') + '\\'s' : 'someone\\'s';\r\n                    return 'until the ' + point + ' of ' + combatant + ' next turn';\r\n                case 'rounds':\r\n                    const roundsDuration = condition.duration as ConditionDurationRounds;\r\n                    const rounds = roundsDuration.count > 1 ? 'rounds' : 'round';\r\n                    return 'for ' + roundsDuration.count + ' ' + rounds;\r\n                default:\r\n                    return null;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public static getMonsterNames(encounter: Encounter | EncounterWave): { id: string, names: string[] }[] {\r\n        const monsterNames: any[] = [];\r\n        if (encounter) {\r\n            encounter.slots.forEach(slot => {\r\n                const names: any[] = [];\r\n                if (slot.count === 1) {\r\n                    names.push(slot.monsterName);\r\n                } else {\r\n                    for (let n = 0; n !== slot.count; ++n) {\r\n                        names.push(slot.monsterName + ' ' + (n + 1));\r\n                    }\r\n                }\r\n\r\n                monsterNames.push({\r\n                    id: slot.id,\r\n                    names: names\r\n                });\r\n            });\r\n        }\r\n\r\n        return monsterNames;\r\n    }\r\n\r\n    public static getTagDescription(tag: string) {\r\n        switch (tag) {\r\n            case 'conc':\r\n                return 'concentrating';\r\n            case 'bane':\r\n                return 'baned (subtract d4 from attack rolls and saving throws)';\r\n            case 'bless':\r\n                return 'blessed (add d4 to attack rolls and saving throws)';\r\n            case 'hex':\r\n                return 'hexed (disadvantage on one saving throw; take additional damage on hit)';\r\n            default:\r\n                return tag;\r\n        }\r\n    }\r\n}\r\n","import Utils from './utils';\r\n\r\nimport { Combat, CombatSetup, Notification } from '../models/combat';\r\nimport { Condition, ConditionDurationCombatant, ConditionDurationRounds, ConditionDurationSaves } from '../models/condition';\r\nimport { Encounter, EncounterSlot, EncounterWave } from '../models/encounter';\r\nimport { Map, MapFolio, MapItem } from '../models/map-folio';\r\nimport { Monster, MonsterGroup, Trait } from '../models/monster-group';\r\nimport { Companion, Party, PC } from '../models/party';\r\n\r\nexport default class Factory {\r\n\r\n    public static createParty(): Party {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            pcs: []\r\n        };\r\n    }\r\n\r\n    public static createPC(): PC {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'pc',\r\n            active: true,\r\n            player: '',\r\n            name: '',\r\n            race: '',\r\n            classes: '',\r\n            level: 1,\r\n            languages: 'Common',\r\n            passiveInsight: 10,\r\n            passiveInvestigation: 10,\r\n            passivePerception: 10,\r\n            initiative: 10,\r\n            url: '',\r\n            companions: []\r\n        };\r\n    }\r\n\r\n    public static createCompanion(): Companion {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: ''\r\n        };\r\n    }\r\n\r\n    public static createMonsterGroup(): MonsterGroup {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            monsters: []\r\n        };\r\n    }\r\n\r\n    public static createMonster(): Monster {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'monster',\r\n            name: '',\r\n            size: 'medium',\r\n            category: 'humanoid',\r\n            tag: '',\r\n            alignment: '',\r\n            challenge: 1,\r\n            abilityScores: {\r\n                str: 10,\r\n                dex: 10,\r\n                con: 10,\r\n                int: 10,\r\n                wis: 10,\r\n                cha: 10\r\n            },\r\n            ac: 10,\r\n            hpMax: 4,\r\n            hpTemp: 0,\r\n            hitDice: 1,\r\n            damage: {\r\n                resist: '',\r\n                vulnerable: '',\r\n                immune: ''\r\n            },\r\n            savingThrows: '',\r\n            speed: '',\r\n            skills: '',\r\n            senses: '',\r\n            languages: '',\r\n            equipment: '',\r\n            traits: [],\r\n            conditionImmunities: ''\r\n        };\r\n    }\r\n\r\n    public static createTrait(): Trait {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            usage: '',\r\n            type: 'action',\r\n            text: '',\r\n            uses: 0\r\n        };\r\n    }\r\n\r\n    public static createEncounter(): Encounter {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            slots: [],\r\n            waves: []\r\n        };\r\n    }\r\n\r\n    public static createEncounterSlot(): EncounterSlot {\r\n        return {\r\n            id: Utils.guid(),\r\n            monsterGroupName: '',\r\n            monsterName: '',\r\n            count: 1\r\n        };\r\n    }\r\n\r\n    public static createEncounterWave(): EncounterWave {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            slots: []\r\n        };\r\n    }\r\n\r\n    public static createMapFolio(): MapFolio {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            maps: []\r\n        };\r\n    }\r\n\r\n    public static createMap(): Map {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            items: []\r\n        };\r\n    }\r\n\r\n    public static createMapItem(): MapItem {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'tile',\r\n            x: 0,\r\n            y: 0,\r\n            width: 4,\r\n            height: 4,\r\n            terrain: null,\r\n            style: null\r\n        };\r\n    }\r\n\r\n    public static createCombatSetup(): CombatSetup {\r\n        return {\r\n            partyID: null,\r\n            encounterID: null,\r\n            waveID: null,\r\n            folioID: null,\r\n            mapID: null,\r\n            monsterNames: [],\r\n            encounterInitMode: 'group'\r\n        };\r\n    }\r\n\r\n    public static createCombat(): Combat {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            encounterID: null,\r\n            combatants: [],\r\n            map: null,\r\n            round: 1,\r\n            notifications: [],\r\n            issues: [],\r\n            timestamp: null\r\n        };\r\n    }\r\n\r\n    public static createNotification(): Notification {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'condition-save',\r\n            data: null,\r\n            combatant: null\r\n        };\r\n    }\r\n\r\n    public static createCondition(): Condition {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            level: 1,\r\n            text: null,\r\n            duration: null\r\n        };\r\n    }\r\n\r\n    public static createConditionDurationSaves(): ConditionDurationSaves {\r\n        return {\r\n            type: 'saves',\r\n            count: 1,\r\n            saveType: 'str',\r\n            saveDC: 10,\r\n            point: 'start'\r\n        };\r\n    }\r\n\r\n    public static createConditionDurationCombatant(): ConditionDurationCombatant {\r\n        return {\r\n            type: 'combatant',\r\n            point: 'start',\r\n            combatantID: null\r\n        };\r\n    }\r\n\r\n    public static createConditionDurationRounds(): ConditionDurationRounds {\r\n        return {\r\n            type: 'rounds',\r\n            count: 1\r\n        };\r\n    }\r\n}\r\n","export interface MonsterGroup {\r\n    id: string;\r\n    name: string;\r\n    monsters: Monster[];\r\n}\r\n\r\nexport interface Monster {\r\n    id: string;\r\n    type: string;\r\n    name: string;\r\n    size: string;\r\n    category: string;\r\n    tag: string;\r\n    alignment: string;\r\n    challenge: number;\r\n    abilityScores: {\r\n        str: number;\r\n        dex: number;\r\n        con: number;\r\n        int: number;\r\n        wis: number;\r\n        cha: number;\r\n    };\r\n    ac: number;\r\n    hpMax: number;\r\n    hpTemp: number;\r\n    hitDice: number;\r\n    damage: {\r\n        resist: string;\r\n        vulnerable: string;\r\n        immune: string;\r\n    };\r\n    savingThrows: string;\r\n    speed: string;\r\n    skills: string;\r\n    senses: string;\r\n    languages: string;\r\n    equipment: string;\r\n    traits: Trait[];\r\n    conditionImmunities: string;\r\n}\r\n\r\nexport interface Trait {\r\n    id: string;\r\n    name: string;\r\n    usage: string;\r\n    type: 'trait' | 'action' | 'bonus' | 'reaction' | 'legendary' | 'lair';\r\n    text: string;\r\n    uses: number;\r\n}\r\n\r\nexport const SIZE_TYPES = [\r\n    'tiny',\r\n    'small',\r\n    'medium',\r\n    'large',\r\n    'huge',\r\n    'gargantuan'\r\n];\r\n\r\nexport const CATEGORY_TYPES = [\r\n    'aberration',\r\n    'beast',\r\n    'celestial',\r\n    'construct',\r\n    'dragon',\r\n    'elemental',\r\n    'fey',\r\n    'fiend',\r\n    'giant',\r\n    'humanoid',\r\n    'monstrosity',\r\n    'ooze',\r\n    'plant',\r\n    'undead'\r\n];\r\n\r\nexport const TRAIT_TYPES = [\r\n    'trait',\r\n    'action',\r\n    'bonus',\r\n    'reaction',\r\n    'legendary',\r\n    'lair'\r\n];\r\n","import Factory from './factory';\r\nimport Utils from './utils';\r\n\r\nimport { Monster, Trait, TRAIT_TYPES } from '../models/monster-group';\r\n\r\nexport default class Frankenstein {\r\n    public static nudgeValue(target: Monster, field: string, delta: number) {\r\n        let source: any = target;\r\n        let value: any = null;\r\n        const tokens = field.split('.');\r\n        tokens.forEach(token => {\r\n            if (token === tokens[tokens.length - 1]) {\r\n                value = source[token];\r\n            } else {\r\n                source = source[token];\r\n            }\r\n        });\r\n\r\n        let newValue;\r\n        switch (field) {\r\n            case 'challenge':\r\n                newValue = Utils.nudgeChallenge(value, delta);\r\n                break;\r\n            case 'size':\r\n                newValue = Utils.nudgeSize(value, delta);\r\n                break;\r\n            default:\r\n                newValue = (value ? value : 0) + delta;\r\n                break;\r\n        }\r\n        Frankenstein.changeValue(target, field, newValue);\r\n    }\r\n\r\n    public static changeValue(target: Monster, field: string, value: any) {\r\n        let source: any = target;\r\n        const tokens = field.split('.');\r\n        tokens.forEach(token => {\r\n            if (token === tokens[tokens.length - 1]) {\r\n                source[token] = value;\r\n\r\n                if ((field === 'abilityScores.con') || (field === 'size') || (field === 'hitDice')) {\r\n                    const sides = Utils.hitDieType(target.size);\r\n                    const conMod = Math.floor((target.abilityScores.con - 10) / 2);\r\n                    const hpPerDie = ((sides + 1) / 2) + conMod;\r\n                    const hp = Math.floor(target.hitDice * hpPerDie);\r\n                    target.hpMax = hp;\r\n                }\r\n            } else {\r\n                source = source[token];\r\n            }\r\n        });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Monster creation\r\n\r\n    public static clone(monster: Monster, name: string): Monster {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'monster',\r\n            name: name || (monster.name + ' copy'),\r\n            size: monster.size,\r\n            category: monster.category,\r\n            tag: monster.tag,\r\n            alignment: monster.alignment,\r\n            challenge: monster.challenge,\r\n            abilityScores: {\r\n                str: monster.abilityScores.str,\r\n                dex: monster.abilityScores.dex,\r\n                con: monster.abilityScores.con,\r\n                int: monster.abilityScores.int,\r\n                wis: monster.abilityScores.wis,\r\n                cha: monster.abilityScores.cha\r\n            },\r\n            ac: monster.ac,\r\n            hpMax: monster.hpMax,\r\n            hpTemp: monster.hpTemp,\r\n            hitDice: monster.hitDice,\r\n            damage: {\r\n                resist: monster.damage.resist,\r\n                vulnerable: monster.damage.vulnerable,\r\n                immune: monster.damage.immune\r\n            },\r\n            savingThrows: monster.savingThrows,\r\n            speed: monster.speed,\r\n            skills: monster.skills,\r\n            senses: monster.senses,\r\n            languages: monster.languages,\r\n            equipment: monster.equipment,\r\n            traits: monster.traits.map(trait => {\r\n                return {\r\n                    id: Utils.guid(),\r\n                    name: trait.name,\r\n                    usage: trait.usage,\r\n                    type: trait.type,\r\n                    text: trait.text,\r\n                    uses: 0\r\n                };\r\n            }),\r\n            conditionImmunities: monster.conditionImmunities\r\n        };\r\n    }\r\n\r\n    public static createFromJSON(data: any): Monster {\r\n        const monster = Factory.createMonster();\r\n\r\n        monster.type = 'monster';\r\n        monster.name = data.name;\r\n        monster.size = data.size.toLowerCase();\r\n        monster.category = data.type;\r\n        monster.tag = data.subtype;\r\n        monster.alignment = data.alignment;\r\n        monster.challenge = Utils.parseChallenge(data.challenge_rating);\r\n        monster.ac = data.armor_class;\r\n        monster.hpMax = data.hit_points;\r\n        monster.speed = data.speed;\r\n        monster.senses = data.senses;\r\n        monster.languages = data.languages;\r\n\r\n        const index = data.hit_dice.indexOf('d');\r\n        monster.hitDice = parseInt(data.hit_dice.substring(0, index), 10);\r\n\r\n        monster.abilityScores.str = data.strength;\r\n        monster.abilityScores.dex = data.dexterity;\r\n        monster.abilityScores.con = data.constitution;\r\n        monster.abilityScores.int = data.intelligence;\r\n        monster.abilityScores.wis = data.wisdom;\r\n        monster.abilityScores.cha = data.charisma;\r\n\r\n        monster.damage.resist = data.damage_resistances;\r\n        monster.damage.vulnerable = data.damage_vulnerabilities;\r\n        monster.damage.immune = data.damage_immunities;\r\n        monster.conditionImmunities = data.condition_immunities;\r\n\r\n        const saves = [\r\n            {\r\n                field: 'strength_save',\r\n                text: 'Strength'\r\n            },\r\n            {\r\n                field: 'dexterity_save',\r\n                text: 'Dexterity'\r\n            },\r\n            {\r\n                field: 'constitution_save',\r\n                text: 'Constitution'\r\n            },\r\n            {\r\n                field: 'intelligence_save',\r\n                text: 'Intelligence'\r\n            },\r\n            {\r\n                field: 'wisdom_save',\r\n                text: 'Wisdom'\r\n            },\r\n            {\r\n                field: 'charisma_save',\r\n                text: 'Charisma'\r\n            }\r\n        ];\r\n        saves.forEach(save => {\r\n            if (data[save.field]) {\r\n                const str = save.text + ' ' + data[save.field];\r\n                monster.savingThrows += monster.savingThrows === '' ? str : ', ' + str;\r\n            }\r\n        });\r\n\r\n        const skills = [\r\n            {\r\n                field: 'acrobatics',\r\n                text: 'Acrobatics'\r\n            },\r\n            {\r\n                field: 'animal_handling',\r\n                text: 'Animal handling'\r\n            },\r\n            {\r\n                field: 'arcana',\r\n                text: 'Arcana'\r\n            },\r\n            {\r\n                field: 'athletics',\r\n                text: 'Athletics'\r\n            },\r\n            {\r\n                field: 'deception',\r\n                text: 'Deception'\r\n            },\r\n            {\r\n                field: 'history',\r\n                text: 'History'\r\n            },\r\n            {\r\n                field: 'insight',\r\n                text: 'Insight'\r\n            },\r\n            {\r\n                field: 'intimidation',\r\n                text: 'Intimidation'\r\n            },\r\n            {\r\n                field: 'investigation',\r\n                text: 'Investigation'\r\n            },\r\n            {\r\n                field: 'medicine',\r\n                text: 'Medicine'\r\n            },\r\n            {\r\n                field: 'nature',\r\n                text: 'Nature'\r\n            },\r\n            {\r\n                field: 'perception',\r\n                text: 'Perception'\r\n            },\r\n            {\r\n                field: 'performance',\r\n                text: 'Performance'\r\n            },\r\n            {\r\n                field: 'persuasion',\r\n                text: 'Persuasion'\r\n            },\r\n            {\r\n                field: 'religion',\r\n                text: 'Religion'\r\n            },\r\n            {\r\n                field: 'sleight_of_hand',\r\n                text: 'Sleight of hand'\r\n            },\r\n            {\r\n                field: 'stealth',\r\n                text: 'Stealth'\r\n            },\r\n            {\r\n                field: 'survival',\r\n                text: 'Survival'\r\n            }\r\n        ];\r\n        skills.forEach(skill => {\r\n            if (data[skill.field]) {\r\n                const str = skill.text + ' ' + data[skill.field];\r\n                monster.skills += monster.skills === '' ? str : ', ' + str;\r\n            }\r\n        });\r\n\r\n        if (data.special_abilities) {\r\n            data.special_abilities.forEach((rawTrait: any) => {\r\n                const trait = this.buildTrait(rawTrait, 'trait');\r\n                monster.traits.push(trait);\r\n            });\r\n        }\r\n        if (data.actions) {\r\n            data.actions.forEach((rawTrait: any) => {\r\n                const trait = this.buildTrait(rawTrait, 'action');\r\n                monster.traits.push(trait);\r\n            });\r\n        }\r\n        if (data.reactions) {\r\n            data.reactions.forEach((rawTrait: any) => {\r\n                const trait = this.buildTrait(rawTrait, 'reaction');\r\n                monster.traits.push(trait);\r\n            });\r\n        }\r\n        if (data.legendary_actions) {\r\n            data.legendary_actions.forEach((rawTrait: any) => {\r\n                const trait = this.buildTrait(rawTrait, 'legendary');\r\n                monster.traits.push(trait);\r\n            });\r\n        }\r\n\r\n        return monster;\r\n    }\r\n\r\n    private static buildTrait(rawTrait: any, type: 'trait' | 'action' | 'bonus' | 'reaction' | 'legendary' | 'lair'): Trait {\r\n        let name = '';\r\n        let usage = '';\r\n\r\n        const openBracket = rawTrait.name.indexOf('(');\r\n        if (openBracket === -1) {\r\n            name = rawTrait.name;\r\n        } else {\r\n            const closeBracket = rawTrait.name.indexOf(')');\r\n            name = rawTrait.name.substring(0, openBracket - 1);\r\n            usage = rawTrait.name.substring(openBracket + 1, closeBracket).toLowerCase();\r\n        }\r\n\r\n        const text: string = rawTrait.desc.replace(/•/g, '*');\r\n\r\n        let finalType = type;\r\n        if (name === 'Lair Actions') {\r\n            finalType = 'lair';\r\n        }\r\n        if (text.indexOf('As a bonus action') === 0) {\r\n            finalType = 'bonus';\r\n        }\r\n\r\n        return {\r\n            id: Utils.guid(),\r\n            type: finalType,\r\n            name: name,\r\n            usage: usage,\r\n            text: text,\r\n            uses: 0\r\n        };\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Traits\r\n\r\n    public static copyTrait(target: Monster, trait: Trait) {\r\n        const copy = JSON.parse(JSON.stringify(trait));\r\n        copy.id = Utils.guid();\r\n        target.traits.push(copy);\r\n    }\r\n\r\n    public static addTrait(target: Monster, type: 'trait' | 'action' | 'bonus' | 'reaction' | 'legendary' | 'lair') {\r\n        const trait = Factory.createTrait();\r\n        trait.type = type;\r\n        trait.name = 'New ' + Utils.traitType(type, false).toLowerCase();\r\n        target.traits.push(trait);\r\n    }\r\n\r\n    public static removeTrait(target: Monster, trait: Trait) {\r\n        const index = target.traits.indexOf(trait);\r\n        target.traits.splice(index, 1);\r\n    }\r\n\r\n    public static swapTraits(target: Monster, t1: Trait, t2: Trait) {\r\n        const index1 = target.traits.indexOf(t1);\r\n        const index2 = target.traits.indexOf(t2);\r\n        target.traits[index2] = t1;\r\n        target.traits[index1] = t2;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Randomisation\r\n\r\n    public static spliceMonsters(target: Monster, monsters: Monster[]) {\r\n        const fields = [\r\n            'size',\r\n            'category',\r\n            'tag',\r\n            'alignment',\r\n            'challenge',\r\n            'speed',\r\n            'senses',\r\n            'languages',\r\n            'equipment',\r\n            'abilityScores.str',\r\n            'abilityScores.dex',\r\n            'abilityScores.con',\r\n            'abilityScores.int',\r\n            'abilityScores.wis',\r\n            'abilityScores.cha',\r\n            'savingThrows',\r\n            'skills',\r\n            'ac',\r\n            'hitDice',\r\n            'damage.resist',\r\n            'damage.vulnerable',\r\n            'damage.immune',\r\n            'conditionImmunities'\r\n        ];\r\n        fields.forEach(field => {\r\n            this.setRandomValue(target, field, monsters);\r\n        });\r\n\r\n        target.traits = [];\r\n\r\n        TRAIT_TYPES.forEach(type => {\r\n            // Get all traits of this type\r\n            const traits: Trait[] = [];\r\n            monsters.forEach(m => {\r\n                m.traits.filter(t => t.type === type)\r\n                    .forEach(t => traits.push(t));\r\n            });\r\n\r\n            // Collate by name\r\n            const distinct: { trait: Trait, count: number }[] = [];\r\n            traits.forEach(t => {\r\n                const current = distinct.find(d => d.trait.name === t.name);\r\n                if (current) {\r\n                    current.count += 1;\r\n                } else {\r\n                    distinct.push({\r\n                        trait: t,\r\n                        count: 1\r\n                    });\r\n                }\r\n            });\r\n\r\n            // If any are common to all monsters, copy them and remove from the candidates\r\n            const addedIDs: string[] = [];\r\n            distinct.filter(d => d.count === monsters.length)\r\n                .forEach(d => {\r\n                    this.copyTrait(target, d.trait);\r\n                    addedIDs.push(d.trait.id);\r\n                });\r\n            addedIDs.forEach(id => {\r\n                const index = distinct.findIndex(d => d.trait.id === id);\r\n                distinct.splice(index, 1);\r\n            });\r\n\r\n            const avg = traits.length / monsters.length;\r\n            while (target.traits.filter(t => t.type === type).length < avg) {\r\n                const index = Math.floor(Math.random() * distinct.length);\r\n                const t = distinct[index].trait;\r\n                this.copyTrait(target, t);\r\n                distinct.splice(index, 1);\r\n            }\r\n        });\r\n    }\r\n\r\n    public static setRandomValue(target: Monster, field: string, monsters: Monster[]) {\r\n        const index = Math.floor(Math.random() * monsters.length);\r\n        const m = monsters[index];\r\n\r\n        let source: any = m;\r\n        let value = null;\r\n        const tokens = field.split('.');\r\n        tokens.forEach(token => {\r\n            if (token === tokens[tokens.length - 1]) {\r\n                value = source[token];\r\n            } else {\r\n                source = source[token];\r\n            }\r\n        });\r\n\r\n        this.changeValue(target, field, value);\r\n    }\r\n\r\n    public static addRandomTrait(target: Monster, type: string, monsters: Monster[]) {\r\n        const traits: Trait[] = [];\r\n        monsters.forEach(m => {\r\n            m.traits.filter(t => t.type === type)\r\n                .forEach(t => {\r\n                    traits.push(t);\r\n                });\r\n        });\r\n\r\n        const index = Math.floor(Math.random() * traits.length);\r\n        const trait = traits[index];\r\n\r\n        this.copyTrait(target, trait);\r\n    }\r\n}\r\n","import Factory from './factory';\r\nimport Utils from './utils';\r\n\r\nimport { Combat, Combatant } from '../models/combat';\r\nimport { Map } from '../models/map-folio';\r\n\r\nexport default class Mercator {\r\n    public static scatterCombatants(combat: Combat) {\r\n        if (!combat.map) {\r\n            return;\r\n        }\r\n\r\n        // Remove all monsters from the map\r\n        combat.map.items = combat.map.items.filter(item => item.type !== 'monster');\r\n\r\n        // Find map dimensions\r\n        const tiles = combat.map.items.filter(item => item.type === 'tile');\r\n        if (tiles.length > 0) {\r\n            const dimensions = Mercator.mapDimensions(combat.map);\r\n            if (dimensions) {\r\n                const monsters = combat.combatants.filter(combatant => combatant.type === 'monster');\r\n                monsters.forEach(combatant => {\r\n                    const candidateSquares: {x: number, y: number}[] = [];\r\n\r\n                    // Find all squares that we could add this monster to\r\n                    for (let x = dimensions.minX; x <= dimensions.maxX; ++x) {\r\n                        for (let y = dimensions.minY; y <= dimensions.maxY; ++y) {\r\n                            // Could we add this monster to this square?\r\n                            const canAddHere = Mercator.canAddMonsterHere(combat.map as Map, combatant, x, y);\r\n                            if (canAddHere) {\r\n                                candidateSquares.push({x: x, y: y});\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if ((candidateSquares.length > 0) && combat.map) {\r\n                        const index = Math.floor(Math.random() * candidateSquares.length);\r\n                        const square = candidateSquares[index];\r\n                        const size = Utils.miniSize(combatant.displaySize);\r\n\r\n                        const item = Factory.createMapItem();\r\n                        item.id = combatant.id;\r\n                        item.type = 'monster';\r\n                        item.x = square.x;\r\n                        item.y = square.y;\r\n                        item.height = size;\r\n                        item.width = size;\r\n                        combat.map.items.push(item);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private static mapDimensions(map: Map) {\r\n        const tiles = map.items.filter(item => item.type === 'tile');\r\n        if (tiles.length > 0) {\r\n            let minX: number = tiles[0].x;\r\n            let minY: number = tiles[0].y;\r\n            let maxX: number = tiles[0].x + tiles[0].width - 1;\r\n            let maxY: number = tiles[0].y + tiles[0].height - 1;\r\n            tiles.forEach(tile => {\r\n                minX = Math.min(minX, tile.x);\r\n                minY = Math.min(minY, tile.y);\r\n                maxX = Math.min(maxX, tile.x + tile.width - 1);\r\n                maxY = Math.min(maxY, tile.y + tile.height - 1);\r\n            });\r\n\r\n            return {\r\n                minX: minX,\r\n                minY: minY,\r\n                maxX: maxX,\r\n                maxY: maxY\r\n            };\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private static canAddMonsterHere(map: Map, combatant: Combatant, x: number, y: number) {\r\n        const coveredSquares: boolean[] = [];\r\n\r\n        const size = Utils.miniSize(combatant.displaySize);\r\n        const right = x + Math.max(1, size) - 1;\r\n        const bottom = y + Math.max(1, size) - 1;\r\n        for (let x1 = x; x1 <= right; ++x1) {\r\n            for (let y1 = y; y1 <= bottom; ++y1) {\r\n                // Is this square on an empty tile?\r\n                const occupants = Mercator.itemsAt(map as Map, x1, y1);\r\n                const canOccupy = (occupants.length > 0) && occupants.every(item => item.type === 'tile');\r\n                coveredSquares.push(canOccupy);\r\n            }\r\n        }\r\n\r\n        return coveredSquares.every(square => square);\r\n    }\r\n\r\n    private static itemsAt(map: Map, x: number, y: number) {\r\n        return map.items.filter(item => {\r\n            const left = item.x;\r\n            const right = item.x + item.width - 1;\r\n            const top = item.y;\r\n            const bottom = item.y + item.height - 1;\r\n            return (x >= left) && (x <= right) && (y >= top) && (y <= bottom);\r\n        });\r\n    }\r\n}\r\n","import { Condition } from './condition';\r\nimport { Map } from './map-folio';\r\nimport { Monster, Trait } from './monster-group';\r\nimport { PC } from './party';\r\n\r\nexport interface CombatSetup {\r\n    partyID: string | null;\r\n    encounterID: string | null;\r\n    waveID: string | null;\r\n    folioID: string | null;\r\n    mapID: string | null;\r\n    monsterNames: { id: string, names: string[] }[];\r\n    encounterInitMode: 'manual' | 'individual' | 'group';\r\n}\r\n\r\nexport interface Combat {\r\n    id: string;\r\n    name: string;\r\n    encounterID: string | null;\r\n    combatants: ((Combatant & PC) | (Combatant & Monster))[];\r\n    map: Map | null;\r\n    round: number;\r\n    notifications: Notification[];\r\n    issues: string[];\r\n    timestamp: string | null;\r\n}\r\n\r\nexport interface Combatant {\r\n    id: string;\r\n    displayName: string;\r\n    displaySize: string;\r\n    showOnMap: boolean;\r\n    current: boolean;\r\n    pending: boolean;\r\n    active: boolean;\r\n    defeated: boolean;\r\n    initiative: number | null;\r\n    hp: number | null;\r\n    conditions: Condition[];\r\n    tags: string[];\r\n    altitude: number;\r\n    aura: {\r\n        radius: number;\r\n        style: 'square' | 'rounded' | 'circle';\r\n        color: string;\r\n    };\r\n}\r\n\r\nexport interface Notification {\r\n    id: string;\r\n    type: 'condition-save' | 'condition-end' | 'trait-recharge';\r\n    data: Condition | Trait | null;\r\n    combatant: (Combatant & Monster) | null;\r\n}\r\n\r\nexport const COMBAT_TAGS = [\r\n    'conc',\r\n    'bane',\r\n    'bless',\r\n    'hex'\r\n];\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    label: string;\r\n    display: 'switch' | 'button';\r\n    checked: boolean;\r\n    changeValue: (value: boolean) => void;\r\n    disabled: boolean;\r\n}\r\n\r\nexport default class Checkbox extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        display: 'switch',\r\n        disabled: false\r\n    };\r\n\r\n    private click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        this.props.changeValue(!this.props.checked);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'checkbox ' + this.props.display;\r\n            if (this.props.checked) {\r\n                style += ' checked';\r\n            }\r\n            if (this.props.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            let toggle = null;\r\n            if (this.props.display === 'switch') {\r\n                toggle = (\r\n                    <div className='toggle-container'>\r\n                        <div className='toggle'/>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={style} onClick={e => this.click(e)}>\r\n                    <div className='checkbox-label'>{this.props.label}</div>\r\n                    {toggle}\r\n                </div>\r\n            );\r\n\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport warning from '../../resources/images/warning.svg';\r\n\r\ninterface Props {\r\n    text: string;\r\n    callback: () => void;\r\n    details: string;\r\n    disabled: boolean;\r\n}\r\n\r\ninterface State {\r\n    pressed: boolean;\r\n}\r\n\r\nexport default class ConfirmButton extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        details: null,\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            pressed: false\r\n        };\r\n    }\r\n\r\n    private toggle() {\r\n        this.setState({\r\n            pressed: !this.state.pressed\r\n        });\r\n    }\r\n\r\n    private perform() {\r\n        this.toggle();\r\n        this.props.callback();\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let content = null;\r\n            if (this.state.pressed) {\r\n                content = (\r\n                    <div>\r\n                        <div className='title'>{this.props.text} - are you sure?</div>\r\n                        <img className='image' src={warning} alt='warning' />\r\n                        {this.props.details ? <div className='details'>{this.props.details}</div> : null}\r\n                        <div className='confirmation'>\r\n                            <div className='destructive' onClick={() => this.perform()}>yes</div>\r\n                            <div className='non-destructive' onClick={() => this.toggle()}>no</div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                content = (\r\n                    <div>\r\n                        <div className='title'>{this.props.text}</div>\r\n                        <img className='image' src={warning} alt='warning' />\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <button className={this.props.disabled ? 'disabled' : ''} onClick={() => this.toggle()}>\r\n                    {content}\r\n                </button>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    controls: JSX.Element[];\r\n    disabled: boolean;\r\n}\r\n\r\nexport default class ControlRow extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        disabled: false\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'control-row';\r\n            if (this.props.disabled) {\r\n                style += ' disabled';\r\n            }\r\n            switch (this.props.controls.length) {\r\n                case 1:\r\n                    style += ' one';\r\n                    break;\r\n                case 2:\r\n                    style += ' two';\r\n                    break;\r\n                case 3:\r\n                    style += ' three';\r\n                    break;\r\n                case 4:\r\n                    style += ' four';\r\n                    break;\r\n                case 5:\r\n                    style += ' five';\r\n                    break;\r\n            }\r\n\r\n            return (\r\n                <div className={style}>\r\n                    {this.props.controls}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport ellipsis from '../../resources/images/ellipsis.svg';\r\n\r\ninterface Props {\r\n    options: { id: string; text: string; disabled?: boolean }[];\r\n    select: (optionID: string) => void;\r\n    selectedID: string;\r\n    placeholder: string;\r\n    disabled: boolean;\r\n}\r\n\r\ninterface State {\r\n    open: boolean;\r\n}\r\n\r\nexport default class Dropdown extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        selectedID: null,\r\n        placeholder: 'select...',\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            open: false\r\n        };\r\n    }\r\n\r\n    private toggleOpen(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        this.setState({\r\n            open: !this.state.open\r\n        });\r\n    }\r\n\r\n    private select(optionID: string) {\r\n        this.setState({\r\n            open: false\r\n        });\r\n        this.props.select(optionID);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            if (this.props.options.length === 0) {\r\n                return null;\r\n            }\r\n\r\n            let style = this.props.disabled ? 'dropdown disabled' : 'dropdown';\r\n            const content = [];\r\n\r\n            let selectedText;\r\n            if (this.props.selectedID) {\r\n                const option: { id: string; text: string; disabled?: boolean } | undefined = this.props.options.find(o => o.id === this.props.selectedID);\r\n                if (option) {\r\n                    selectedText = option.text;\r\n                }\r\n            } else {\r\n                selectedText = /*this.props.text ||*/ this.props.placeholder;\r\n            }\r\n\r\n            content.push(\r\n                <div key='selection' className='dropdown-top' title={selectedText}>\r\n                    <div className='item-text'>{selectedText}</div>\r\n                    <img className='arrow' src={ellipsis} alt='arrow' />\r\n                </div>\r\n            );\r\n\r\n            if (this.state.open) {\r\n                style += ' open';\r\n\r\n                const items = this.props.options.map(option => {\r\n                    if (option.text === null) {\r\n                        return <div key={option.id} className='divider' />;\r\n                    } else {\r\n                        return (\r\n                            <DropdownOption\r\n                                key={option.id}\r\n                                option={option}\r\n                                selected={option.id === this.props.selectedID}\r\n                                select={optionID => this.select(optionID)}\r\n                            />\r\n                        );\r\n                    }\r\n                });\r\n\r\n                content.push(\r\n                    <div key='options' className='dropdown-options'>\r\n                        {items}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={style} onClick={e => this.toggleOpen(e)}>\r\n                    {content}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface DropdownOptionProps {\r\n    option: { id: string; text: string; disabled?: boolean };\r\n    selected: boolean;\r\n    select: (optionID: string) => void;\r\n}\r\n\r\nclass DropdownOption extends React.Component<DropdownOptionProps> {\r\n    private click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (!this.props.option.disabled) {\r\n            this.props.select(this.props.option.id);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'dropdown-option';\r\n            if (this.props.selected) {\r\n                style += ' selected';\r\n            }\r\n            if (this.props.option.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            return (\r\n                <div className={style} title={this.props.option.text} onClick={e => this.click(e)}>\r\n                    {this.props.option.text}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport arrow from '../../resources/images/down-arrow-black.svg';\r\n\r\ninterface Props {\r\n    text: string;\r\n    content: string | JSX.Element;\r\n    disabled: boolean;\r\n}\r\n\r\ninterface State {\r\n    expanded: boolean;\r\n}\r\n\r\nexport default class Expander extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            expanded: false\r\n        };\r\n    }\r\n\r\n    private toggle() {\r\n        this.setState({\r\n            expanded: !this.state.expanded\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = this.props.disabled ? 'expander disabled' : 'expander';\r\n            if (this.state.expanded) {\r\n                style += ' expanded';\r\n            }\r\n\r\n            let content = null;\r\n            if (this.state.expanded) {\r\n                content = (\r\n                    <div className='expander-content'>\r\n                        {this.props.content}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={style}>\r\n                    <div className='expander-header' onClick={() => this.toggle()}>\r\n                        <div className='expander-text'>{this.props.text}</div>\r\n                        <img className='expander-button' src={arrow} alt='arrow' />\r\n                    </div>\r\n                    {content}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    click: (dir: string, dir2: 'in' | 'out' | null) => void;\r\n    direction: 'out' | 'in' | 'both' | 'eight';\r\n    disabled: boolean;\r\n}\r\n\r\nexport default class Radial extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        direction: 'out',\r\n        disabled: false\r\n    };\r\n\r\n    private click(e: React.MouseEvent, dir: string, dir2: 'in' | 'out' | null = null) {\r\n        e.stopPropagation();\r\n        this.props.click(dir, dir2);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'radial ' + (this.props.direction || 'out');\r\n            if (this.props.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            const showOut = (this.props.direction === 'out') || (this.props.direction === 'both') || (this.props.direction === 'eight');\r\n            const showIn = (this.props.direction === 'in') || (this.props.direction === 'both');\r\n            const showDiag = (this.props.direction === 'eight');\r\n\r\n            return (\r\n                <div className={style}>\r\n                    <div className='cell' style={{ display: showDiag ? 'none' : 'inline-block' }} />\r\n                    <div className='cell' style={{ display: showDiag ? 'inline-block' : 'none' }}>\r\n                        <div className='arrow diag' style={{ display: showOut ? 'block' : 'none' }} onClick={e => this.click(e, 'NW')}>\r\n                            &#8598;\r\n                        </div>\r\n                    </div>\r\n                    <div className='cell'>\r\n                        <div className='arrow vertical' style={{ display: showOut ? 'block' : 'none' }} onClick={e => this.click(e, 'N', 'out')}>\r\n                            &#8593;\r\n                        </div>\r\n                        <div className='arrow vertical' style={{ display: showIn ? 'block' : 'none' }} onClick={e => this.click(e, 'N', 'in')}>\r\n                            &#8595;\r\n                        </div>\r\n                    </div>\r\n                    <div className='cell' style={{ display: showDiag ? 'none' : 'inline-block' }} />\r\n                    <div className='cell' style={{ display: showDiag ? 'inline-block' : 'none' }}>\r\n                        <div className='arrow diag' style={{ display: showOut ? 'block' : 'none' }} onClick={e => this.click(e, 'NE')}>\r\n                            &#8599;\r\n                        </div>\r\n                    </div>\r\n                    <div className='cell'>\r\n                        <div className='arrow horizontal' style={{ display: showOut ? 'inline-block' : 'none' }} onClick={e => this.click(e, 'W', 'out')}>\r\n                            &#8592;\r\n                        </div>\r\n                        <div className='arrow horizontal' style={{ display: showIn ? 'inline-block' : 'none' }} onClick={e => this.click(e, 'W', 'in')}>\r\n                            &#8594;\r\n                        </div>\r\n                    </div>\r\n                    <div className='cell' />\r\n                    <div className='cell'>\r\n                        <div className='arrow horizontal' style={{ display: showIn ? 'inline-block' : 'none' }} onClick={e => this.click(e, 'E', 'in')}>\r\n                            &#8592;\r\n                        </div>\r\n                        <div className='arrow horizontal' style={{ display: showOut ? 'inline-block' : 'none' }} onClick={e => this.click(e, 'E', 'out')}>\r\n                            &#8594;\r\n                        </div>\r\n                    </div>\r\n                    <div className='cell' style={{ display: showDiag ? 'none' : 'inline-block' }} />\r\n                    <div className='cell' style={{ display: showDiag ? 'inline-block' : 'none' }}>\r\n                        <div className='arrow diag' style={{ display: showOut ? 'block' : 'none' }} onClick={e => this.click(e, 'SW')}>\r\n                            &#8601;\r\n                        </div>\r\n                    </div>\r\n                    <div className='cell'>\r\n                        <div className='arrow vertical' style={{ display: showIn ? 'block' : 'none' }} onClick={e => this.click(e, 'S', 'in')}>\r\n                            &#8593;\r\n                        </div>\r\n                        <div className='arrow vertical' style={{ display: showOut ? 'block' : 'none' }} onClick={e => this.click(e, 'S', 'out')}>\r\n                            &#8595;\r\n                        </div>\r\n                    </div>\r\n                    <div className='cell' style={{ display: showDiag ? 'none' : 'inline-block' }} />\r\n                    <div className='cell' style={{ display: showDiag ? 'inline-block' : 'none' }}>\r\n                        <div className='arrow diag' style={{ display: showOut ? 'block' : 'none' }} onClick={e => this.click(e, 'SE', 'out')}>\r\n                            &#8600;\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    options: { id: string; text: string; disabled?: boolean }[];\r\n    selectedID: string | null;\r\n    select: (optionID: string) => void;\r\n    tabs: boolean;\r\n    disabled: boolean;\r\n    itemsPerRow: number;\r\n}\r\n\r\nexport default class Selector extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        tabs: false,\r\n        disabled: false,\r\n        itemsPerRow: null\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            let style = this.props.tabs ? 'selector tabs' : 'selector radio';\r\n            if (this.props.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            const itemsPerRow = this.props.itemsPerRow ? this.props.itemsPerRow : this.props.options.length;\r\n            const rowCount = Math.ceil(this.props.options.length / itemsPerRow);\r\n            const rowContents: JSX.Element[][] = [];\r\n            for (let n = 0; n !== rowCount; ++n) {\r\n                rowContents.push([]);\r\n            }\r\n\r\n            this.props.options.forEach(option => {\r\n                const index = this.props.options.indexOf(option);\r\n                const rowIndex = Math.floor(index / itemsPerRow);\r\n                const row = rowContents[rowIndex];\r\n                row.push(\r\n                    <SelectorOption\r\n                        key={option.id}\r\n                        option={option}\r\n                        selected={option.id === this.props.selectedID}\r\n                        count={itemsPerRow}\r\n                        select={(optionID: string) => this.props.select(optionID)}\r\n                    />\r\n                );\r\n            });\r\n\r\n            const rowSections = rowContents.map(row => {\r\n                const index = rowContents.indexOf(row);\r\n                return <div key={index}>{row}</div>;\r\n            });\r\n\r\n            return (\r\n                <div className={style}>\r\n                    {rowSections}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface SelectorOptionInterface {\r\n    option: { id: string; text: string; disabled?: boolean };\r\n    selected: boolean;\r\n    count: number;\r\n    select: (optionID: string) => void;\r\n}\r\n\r\nclass SelectorOption extends React.Component<SelectorOptionInterface> {\r\n    private click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (!this.props.option.disabled) {\r\n            this.props.select(this.props.option.id);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const width = 'calc(((100% - 1px) / ' + this.props.count + ') - 2px )';\r\n\r\n            let style = 'option';\r\n            if (this.props.selected) {\r\n                style += ' selected';\r\n            }\r\n            if (this.props.option.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            return (\r\n                <div key={this.props.option.id} className={style} style={{ width: width }} title={this.props.option.text} onClick={e => this.click(e)}>\r\n                    {this.props.option.text}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    source: any;\r\n    name: string;\r\n    nudgeValue: (delta: number) => void;\r\n    label: string;\r\n    disabled: boolean;\r\n    factors: number[];\r\n    display: ((value: number) => string) | null;\r\n}\r\n\r\nexport default class Spin extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        label: null,\r\n        disabled: false,\r\n        factors: null,\r\n        display: null\r\n    };\r\n\r\n    private click(e: React.MouseEvent, delta: number) {\r\n        e.stopPropagation();\r\n        this.props.nudgeValue(delta);\r\n    }\r\n\r\n    private touchEnd(e: React.TouchEvent, delta: number) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        this.props.nudgeValue(delta);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'info-value';\r\n            let value = this.props.source[this.props.name];\r\n            if (value === 0) {\r\n                style += ' dimmed';\r\n            }\r\n\r\n            if (this.props.display) {\r\n                value = this.props.display(value);\r\n            }\r\n\r\n            const minusBtns: JSX.Element[] = [];\r\n            const plusBtns: JSX.Element[] = [];\r\n\r\n            const factors = this.props.factors || [1];\r\n            factors.forEach(factor => {\r\n                minusBtns.push(\r\n                    <div\r\n                        key={'minus' + factor}\r\n                        className={factors.length > 1 ? 'spin-button factor' : 'spin-button factor single'}\r\n                        onTouchEnd={e => this.touchEnd(e, -1 * factor)}\r\n                        onClick={e => this.click(e, -1 * factor)}\r\n                    >\r\n                        {factors.length > 1 ? '-' + factor : '-'}\r\n                    </div>\r\n                );\r\n\r\n                plusBtns.push(\r\n                    <div\r\n                        key={'plus' + factor}\r\n                        className={factors.length > 1 ? 'spin-button factor' : 'spin-button factor single'}\r\n                        onTouchEnd={e => this.touchEnd(e, +1 * factor)}\r\n                        onClick={e => this.click(e, +1 * factor)}\r\n                    >\r\n                        {factors.length > 1 ? '+' + factor : '+'}\r\n                    </div>\r\n                );\r\n            });\r\n\r\n            minusBtns.reverse();\r\n\r\n            return (\r\n                <div className={this.props.disabled ? 'spin disabled' : 'spin'}>\r\n                    <div className='minus'>\r\n                        {minusBtns}\r\n                    </div>\r\n                    <div className='info' style={{ width: 'calc(100% - ' + (80 * factors.length) + 'px)' }}>\r\n                        <div className='info-label'>{this.props.label}</div>\r\n                        <div className={style}>{value}</div>\r\n                    </div>\r\n                    <div className='plus'>\r\n                        {plusBtns}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Monster } from '../../models/monster-group';\r\n\r\nimport Spin from '../controls/spin';\r\n\r\ninterface Props {\r\n    combatant: Monster;\r\n    edit: boolean;\r\n    nudgeValue: (combatant: Monster, field: string, delta: number) => void;\r\n}\r\n\r\ninterface State {\r\n    showAbilityScores: boolean;\r\n}\r\n\r\nexport default class AbilityScorePanel extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        edit: null,\r\n        nudgeValue: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showAbilityScores: false\r\n        };\r\n    }\r\n\r\n    private toggleAbilityScores() {\r\n        this.setState({\r\n            showAbilityScores: !this.state.showAbilityScores\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let result = null;\r\n\r\n            if (this.props.edit) {\r\n                result = (\r\n                    <div>\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='str'\r\n                            label='strength'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.str', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='dex'\r\n                            label='dexterity'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.dex', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='con'\r\n                            label='constitution'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.con', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='int'\r\n                            label='intelligence'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.int', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='wis'\r\n                            label='wisdom'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.wis', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='cha'\r\n                            label='charisma'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.cha', delta)}\r\n                        />\r\n                    </div>\r\n                );\r\n            } else {\r\n                result = (\r\n                    <div className='ability-scores' onClick={() => this.toggleAbilityScores()}>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>str</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.str\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.str)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>dex</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.dex\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.dex)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>con</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.con\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.con)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>int</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.int\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.int)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>wis</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.wis\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.wis)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>cha</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.cha\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.cha)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return result;\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combat, Combatant } from '../../models/combat';\r\nimport { Condition } from '../../models/condition';\r\n\r\nimport Expander from '../controls/expander';\r\nimport Spin from '../controls/spin';\r\n\r\ninterface Props {\r\n    combatant: Combatant;\r\n    combat: Combat;\r\n    nudgeConditionValue: (condition: Condition, field: string, delta: number) => void;\r\n    addCondition: () => void;\r\n    editCondition: (condition: Condition) => void;\r\n    removeCondition: (conditionID: string) => void;\r\n}\r\n\r\nexport default class ConditionsPanel extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const conditions = [];\r\n            if (this.props.combatant.conditions) {\r\n                for (let n = 0; n !== this.props.combatant.conditions.length; ++n) {\r\n                    const c = this.props.combatant.conditions[n];\r\n                    conditions.push(\r\n                        <ConditionPanel\r\n                            key={n}\r\n                            condition={c}\r\n                            combat={this.props.combat}\r\n                            nudgeConditionValue={(condition, type, delta) => this.props.nudgeConditionValue(condition, type, delta)}\r\n                            editCondition={condition => this.props.editCondition(condition)}\r\n                            removeCondition={conditionID => this.props.removeCondition(conditionID)}\r\n                        />\r\n                    );\r\n                }\r\n            }\r\n\r\n            return (\r\n                <div className='section'>\r\n                    {conditions}\r\n                    <button onClick={() => this.props.addCondition()}>add a condition</button>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface ConditionPanelProps {\r\n    condition: Condition;\r\n    combat: Combat;\r\n    nudgeConditionValue: (condition: Condition, field: string, delta: number) => void;\r\n    editCondition: (condition: Condition) => void;\r\n    removeCondition: (conditionID: string) => void;\r\n}\r\n\r\nclass ConditionPanel extends React.Component<ConditionPanelProps> {\r\n    public render() {\r\n        try {\r\n            let name: string = this.props.condition.name || 'condition';\r\n            if (this.props.condition.name === 'exhaustion') {\r\n                name += ' (' + this.props.condition.level + ')';\r\n            }\r\n            if ((this.props.condition.name === 'custom') && (this.props.condition.text !== null)) {\r\n                name = this.props.condition.text;\r\n            }\r\n\r\n            if (this.props.condition.duration !== null) {\r\n                name += ' ' + Utils.conditionDurationText(this.props.condition, this.props.combat);\r\n            }\r\n\r\n            const description = [];\r\n            if (this.props.condition.name === 'exhaustion') {\r\n                description.push(\r\n                    <div key='level' className='section'>\r\n                        <Spin\r\n                            source={this.props.condition}\r\n                            name='level'\r\n                            label='level'\r\n                            nudgeValue={delta => this.props.nudgeConditionValue(this.props.condition, 'level', delta)}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n            const text = Utils.conditionText(this.props.condition);\r\n            for (let n = 0; n !== text.length; ++n) {\r\n                description.push(<div key={n} className='section'>{text[n]}</div>);\r\n            }\r\n\r\n            return (\r\n                <Expander\r\n                    text={name}\r\n                    content={(\r\n                        <div>\r\n                            {description}\r\n                            <div className='divider' />\r\n                            <button onClick={() => this.props.editCondition(this.props.condition)}>edit</button>\r\n                            <button onClick={() => this.props.removeCondition(this.props.condition.id)}>remove</button>\r\n                        </div>\r\n                    )}\r\n                />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    content: string | JSX.Element | JSX.Element[];\r\n    white: boolean;\r\n}\r\n\r\nexport default class Note extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        white: false\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'descriptive';\r\n            if (this.props.white) {\r\n                style += ' white';\r\n            }\r\n\r\n            return (\r\n                <div className={style}>\r\n                    {this.props.content}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Showdown from 'showdown';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combatant } from '../../models/combat';\r\nimport { Monster, Trait, TRAIT_TYPES } from '../../models/monster-group';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport Expander from '../controls/expander';\r\nimport Note from '../panels/note';\r\n\r\nimport arrow from '../../resources/images/down-arrow-black.svg';\r\n\r\nconst showdown = new Showdown.Converter();\r\n\r\ninterface Props {\r\n    combatant: Monster | (Combatant & Monster);\r\n    mode: 'view' | 'edit' | 'template' | 'combat' | 'combat-special';\r\n    filter: string;\r\n    addTrait: (traitType: 'trait' | 'action' | 'bonus' | 'reaction' | 'legendary' | 'lair') => void;\r\n    copyTrait: (trait: Trait) => void;\r\n    removeTrait: (trait: Trait) => void;\r\n    changeValue: (trait: Trait, field: string, value: any) => void;\r\n    swapTraits: (t1: Trait, t2: Trait) => void;\r\n}\r\n\r\nexport default class TraitsPanel extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        mode: 'view',\r\n        filter: '',\r\n        addTrait: null,\r\n        copyTrait: null,\r\n        removeTrait: null,\r\n        changeValue: null,\r\n        swapTraits: null\r\n    };\r\n\r\n    private createTraitPanel(trait: Trait, prevTrait: Trait | null, nextTrait: Trait | null) {\r\n        return (\r\n            <TraitPanel\r\n                key={trait.id}\r\n                trait={trait}\r\n                mode={this.props.mode}\r\n                prevTrait={prevTrait}\r\n                nextTrait={nextTrait}\r\n                changeValue={(action, type, value) => this.props.changeValue(action, type, value)}\r\n                removeTrait={action => this.props.removeTrait(action)}\r\n                copyTrait={action => this.props.copyTrait(action)}\r\n                swapTraits={(t1, t2) => this.props.swapTraits(t1, t2)}\r\n            />\r\n        );\r\n    }\r\n\r\n    private createSection(traitsByType: { [id: string]: JSX.Element[] }, type: string, showInfo: boolean = false) {\r\n        const traits = traitsByType[type];\r\n        if (traits.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        let info: JSX.Element | null = null;\r\n        if (showInfo) {\r\n            switch (type) {\r\n                case 'legendary':\r\n                    /* tslint:disable:max-line-length */\r\n                    info = (\r\n                        <Note\r\n                            content={'one legendary action can be used at the end of each other combatant\\'s turn; spent actions are refreshed at the start of the creature\\'s turn'}\r\n                            white={true}\r\n                        />\r\n                    );\r\n                    /* tslint:enable:max-line-length */\r\n                    break;\r\n                case 'lair':\r\n                    info = (\r\n                        <Note\r\n                            content={'one lair action can be taken each round on initiative 20'}\r\n                            white={true}\r\n                        />\r\n                    );\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='section subheading'>{Utils.traitType(type, true)}</div>\r\n                {info}\r\n                {traits}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const traitsByType: { [id: string]: JSX.Element[] } = {};\r\n\r\n            TRAIT_TYPES.forEach(type => {\r\n                const traits = this.props.combatant.traits\r\n                    .filter(t => t.type === type)\r\n                    .filter(t => Utils.match(this.props.filter, t.name));\r\n\r\n                const list: JSX.Element[] = [];\r\n                for (let n = 0; n !== traits.length; ++n) {\r\n                    const trait = traits[n];\r\n                    const prevTrait = n !== 0 ? traits[n - 1] : null;\r\n                    const nextTrait = n !== traits.length - 1 ? traits[n + 1] : null;\r\n                    list.push(this.createTraitPanel(trait, prevTrait, nextTrait));\r\n                }\r\n\r\n                if (this.props.mode === 'edit') {\r\n                    list.push(\r\n                        <button key='add' onClick={() => this.props.addTrait(type as 'trait' | 'action' | 'bonus' | 'reaction' | 'legendary' | 'lair')}>\r\n                            add a new {Utils.traitType(type, false)}\r\n                        </button>\r\n                    );\r\n                }\r\n\r\n                traitsByType[type] = list;\r\n            });\r\n\r\n            if (this.props.mode === 'edit') {\r\n                return (\r\n                    <div className='row collapse'>\r\n                        <div className='columns small-4 medium-4 large-4 wide-column'>\r\n                            {this.createSection(traitsByType, 'trait')}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 wide-column'>\r\n                            {this.createSection(traitsByType, 'action')}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 wide-column'>\r\n                            {this.createSection(traitsByType, 'bonus')}\r\n                            {this.createSection(traitsByType, 'reaction')}\r\n                            {this.createSection(traitsByType, 'legendary')}\r\n                            {this.createSection(traitsByType, 'lair')}\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            if (this.props.combatant.traits.length === 0) {\r\n                return (\r\n                    <div><i>no traits or actions</i></div>\r\n                );\r\n            }\r\n\r\n            if (this.props.mode === 'combat') {\r\n                return (\r\n                    <div>\r\n                        {this.createSection(traitsByType, 'trait')}\r\n                        {this.createSection(traitsByType, 'action')}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            if (this.props.mode === 'combat-special') {\r\n                return (\r\n                    <div>\r\n                        {this.createSection(traitsByType, 'legendary', true)}\r\n                        {this.createSection(traitsByType, 'lair', true)}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div>\r\n                    {this.createSection(traitsByType, 'trait')}\r\n                    {this.createSection(traitsByType, 'action')}\r\n                    {this.createSection(traitsByType, 'bonus')}\r\n                    {this.createSection(traitsByType, 'reaction')}\r\n                    {this.createSection(traitsByType, 'legendary')}\r\n                    {this.createSection(traitsByType, 'lair')}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface TraitPanelProps {\r\n    trait: Trait;\r\n    mode: 'view' | 'edit' | 'template' | 'combat' | 'combat-special';\r\n    prevTrait: Trait | null;\r\n    nextTrait: Trait | null;\r\n    changeValue: (trait: Trait, field: string, value: any) => void;\r\n    copyTrait: (trait: Trait) => void;\r\n    removeTrait: (trait: Trait) => void;\r\n    swapTraits: (t1: Trait, t2: Trait) => void;\r\n}\r\n\r\nclass TraitPanel extends React.Component<TraitPanelProps> {\r\n    public render() {\r\n        try {\r\n            let maxUses = 0;\r\n            let heading = this.props.trait.name || 'unnamed ' + Utils.traitType(this.props.trait.type, false);\r\n\r\n            if (this.props.trait.usage) {\r\n                let used = '';\r\n                if (this.props.trait.usage.toLowerCase().startsWith('recharge ')) {\r\n                    maxUses = 1;\r\n                    if (this.props.trait.uses > 0) {\r\n                        used = '; used';\r\n                    }\r\n                }\r\n                const found = this.props.trait.usage.toLowerCase().match(/(\\d+)\\s*\\/\\s*day/);\r\n                if (found) {\r\n                    maxUses = parseInt(found[1], 10);\r\n                    if (this.props.trait.uses > 0) {\r\n                        used = '; used ' + this.props.trait.uses;\r\n                    }\r\n                }\r\n                heading += ' *(' + this.props.trait.usage + used + ')*';\r\n            }\r\n            if (this.props.trait.type === 'legendary') {\r\n                maxUses = 1;\r\n                if (this.props.trait.uses > 0) {\r\n                    heading += ' *(used)*';\r\n                }\r\n            }\r\n            const markdown = '**' + heading + '** ' + this.props.trait.text;\r\n\r\n            switch (this.props.mode) {\r\n                case 'view':\r\n                    return (\r\n                        <div key={this.props.trait.id} className='section trait'>\r\n                            <div dangerouslySetInnerHTML={{ __html: showdown.makeHtml(markdown) }} />\r\n                        </div>\r\n                    );\r\n                case 'edit':\r\n                    const details = (\r\n                        <div className='section'>\r\n                            <div className='row collapse'>\r\n                                <div className='columns small-6 medium-8 large-9'>\r\n                                    <input\r\n                                        type='text'\r\n                                        placeholder='name'\r\n                                        value={this.props.trait.name}\r\n                                        onChange={event => this.props.changeValue(this.props.trait, 'name', event.target.value)}\r\n                                    />\r\n                                    <input\r\n                                        type='text'\r\n                                        placeholder='usage'\r\n                                        value={this.props.trait.usage}\r\n                                        onChange={event => this.props.changeValue(this.props.trait, 'usage', event.target.value)}\r\n                                    />\r\n                                </div>\r\n                                <div className='columns small-6 medium-4 large-3'>\r\n                                    <div className='trait-ordering'>\r\n                                        <div className='vertical-center-outer'>\r\n                                            <div className='vertical-center-middle'>\r\n                                                <div>\r\n                                                    <img\r\n                                                        className={this.props.prevTrait ? 'rotate' : 'rotate disabled'}\r\n                                                        src={arrow}\r\n                                                        alt='move up'\r\n                                                        onClick={() => this.props.swapTraits(this.props.trait, this.props.prevTrait as Trait)}\r\n                                                    />\r\n                                                </div>\r\n                                                <div>\r\n                                                    <img\r\n                                                        className={this.props.nextTrait ? '' : 'disabled'}\r\n                                                        src={arrow}\r\n                                                        alt='move down'\r\n                                                        onClick={() => this.props.swapTraits(this.props.trait, this.props.nextTrait as Trait)}\r\n                                                    />\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <textarea\r\n                                placeholder='details'\r\n                                value={this.props.trait.text}\r\n                                onChange={event => this.props.changeValue(this.props.trait, 'text', event.target.value)}\r\n                            />\r\n                            <div className='divider' />\r\n                            <ConfirmButton text='delete' callback={() => this.props.removeTrait(this.props.trait)} />\r\n                        </div>\r\n                    );\r\n\r\n                    let name = this.props.trait.name || 'unnamed ' + Utils.traitType(this.props.trait.type, false);\r\n                    if (this.props.trait.usage) {\r\n                        name += ' (' + this.props.trait.usage + ')';\r\n                    }\r\n                    return (\r\n                        <Expander\r\n                            text={name}\r\n                            content={details}\r\n                        />\r\n                    );\r\n                case 'template':\r\n                    return (\r\n                        <div key={this.props.trait.id} className='section trait'>\r\n                            <div dangerouslySetInnerHTML={{ __html: showdown.makeHtml(markdown) }} />\r\n                            <button onClick={() => this.props.copyTrait(this.props.trait)}>copy</button>\r\n                        </div>\r\n                    );\r\n                case 'combat':\r\n                case 'combat-special':\r\n                    let style = '';\r\n                    let usage = null;\r\n                    if (maxUses > 0) {\r\n                        const isTapped = this.props.trait.uses >= maxUses;\r\n                        if (isTapped) {\r\n                            style = 'strikethrough';\r\n                            usage = <button onClick={() => this.props.changeValue(this.props.trait, 'uses', 0)}>recharge</button>;\r\n                        } else {\r\n                            usage = <button onClick={() => this.props.changeValue(this.props.trait, 'uses', this.props.trait.uses + 1)}>use</button>;\r\n                        }\r\n                    }\r\n                    return (\r\n                        <div key={this.props.trait.id} className='section trait'>\r\n                            <div className={style} dangerouslySetInnerHTML={{ __html: showdown.makeHtml(markdown) }} />\r\n                            {usage}\r\n                        </div>\r\n                    );\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    heading: string | JSX.Element | JSX.Element[] | null;\r\n    content: string | JSX.Element | JSX.Element[] | null;\r\n}\r\n\r\nexport default class InfoCard extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        heading: null,\r\n        content: null\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div className='card'>\r\n                    {this.props.heading}\r\n                    <div className='card-content'>\r\n                        {this.props.content}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combat, COMBAT_TAGS, Combatant } from '../../models/combat';\r\nimport { Condition } from '../../models/condition';\r\nimport { Encounter, EncounterSlot, EncounterWave } from '../../models/encounter';\r\nimport { Monster, MonsterGroup, Trait } from '../../models/monster-group';\r\n\r\nimport Checkbox from '../controls/checkbox';\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport ControlRow from '../controls/control-row';\r\nimport Dropdown from '../controls/dropdown';\r\nimport Expander from '../controls/expander';\r\nimport Radial from '../controls/radial';\r\nimport Selector from '../controls/selector';\r\nimport Spin from '../controls/spin';\r\nimport AbilityScorePanel from '../panels/ability-score-panel';\r\nimport ConditionsPanel from '../panels/conditions-panel';\r\nimport TraitsPanel from '../panels/traits-panel';\r\nimport InfoCard from './info-card';\r\n\r\nimport arrow from '../../resources/images/down-arrow.svg';\r\n\r\ninterface Props {\r\n    combatant: Monster | (Monster & Combatant);\r\n    mode: string;\r\n    library: MonsterGroup[];\r\n    changeValue: (monster: any, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, delta: number) => void;\r\n    // Library\r\n    filter: string;\r\n    editMonster: (monster: Monster) => void;\r\n    removeMonster: (monster: Monster) => void;\r\n    cloneMonster: (monster: Monster, name: string) => void;\r\n    moveToGroup: (monster: Monster, group: string) => void;\r\n    copyTrait: (trait: Trait) => void;\r\n    selectMonster: (monster: Monster) => void;\r\n    deselectMonster: (monster: Monster) => void;\r\n    // Encounter builder\r\n    encounter: Encounter;\r\n    slot: EncounterSlot;\r\n    addEncounterSlot: (monster: Monster, waveID: string | null) => void;\r\n    removeEncounterSlot: (slot: EncounterSlot) => void;\r\n    // Combat\r\n    combat: Combat;\r\n    makeCurrent: (combatant: Combatant) => void;\r\n    makeActive: (combatant: Combatant) => void;\r\n    makeDefeated: (combatant: Combatant) => void;\r\n    endTurn: (combatant: Combatant) => void;\r\n    mapAdd: (combatant: Combatant) => void;\r\n    mapMove: (combatant: Combatant, dir: string) => void;\r\n    mapRemove: (combatant: Combatant) => void;\r\n    removeCombatant: (combatant: Combatant) => void;\r\n    changeHP: (combatant: Combatant, hp: number, tempHP: number) => void;\r\n    addCondition: (combatant: Combatant) => void;\r\n    editCondition: (combatant: Combatant, condition: Condition) => void;\r\n    removeCondition: (combatant: Combatant, conditionID: string) => void;\r\n    nudgeConditionValue: (condition: Condition, field: string, delta: number) => void;\r\n    toggleTag: (combatant: Combatant, tag: string) => void;\r\n}\r\n\r\ninterface State {\r\n    showDetails: boolean;\r\n    cloneName: string;\r\n    combatMode: string;\r\n    damageOrHealing: number;\r\n}\r\n\r\nexport default class MonsterCard extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        library: null,\r\n        changeValue: null,\r\n        nudgeValue: null,\r\n        filter: '',\r\n        editMonster: null,\r\n        removeMonster: null,\r\n        cloneMonster: null,\r\n        moveToGroup: null,\r\n        copyTrait: null,\r\n        selectMonster: null,\r\n        deselectMonster: null,\r\n        encounter: null,\r\n        slot: null,\r\n        addEncounterSlot: null,\r\n        removeEncounterSlot: null,\r\n        combat: null,\r\n        makeCurrent: null,\r\n        makeActive: null,\r\n        makeDefeated: null,\r\n        endTurn: null,\r\n        mapAdd: null,\r\n        mapMove: null,\r\n        mapRemove: null,\r\n        removeCombatant: null,\r\n        changeHP: null,\r\n        addCondition: null,\r\n        editCondition: null,\r\n        removeCondition: null,\r\n        nudgeConditionValue: null,\r\n        toggleTag: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showDetails: false,\r\n            cloneName: props.combatant.name + ' copy',\r\n            combatMode: 'main',\r\n            damageOrHealing: 0\r\n        };\r\n    }\r\n\r\n    private setCloneName(cloneName: string) {\r\n        this.setState({\r\n            cloneName: cloneName\r\n        });\r\n    }\r\n\r\n    private toggleDetails() {\r\n        this.setState({\r\n            showDetails: !this.state.showDetails\r\n        });\r\n    }\r\n\r\n    private setDamage(value: number) {\r\n        this.setState({\r\n            damageOrHealing: value\r\n        });\r\n    }\r\n\r\n    private nudgeDamage(delta: number) {\r\n        this.setState({\r\n            damageOrHealing: Math.max(this.state.damageOrHealing + delta, 0)\r\n        });\r\n    }\r\n\r\n    private setCombatMode(mode: string) {\r\n        this.setState({\r\n            combatMode: mode\r\n        });\r\n    }\r\n\r\n    private heal() {\r\n        const combatant = this.props.combatant as Combatant;\r\n\r\n        let hp = (combatant.hp ? combatant.hp : 0) + this.state.damageOrHealing;\r\n        hp = Math.min(hp, this.props.combatant.hpMax);\r\n\r\n        this.setState({\r\n            damageOrHealing: 0\r\n        }, () => {\r\n            this.props.changeHP(combatant, hp, this.props.combatant.hpTemp);\r\n        });\r\n    }\r\n\r\n    private damage() {\r\n        const combatant = this.props.combatant as Combatant;\r\n\r\n        let hp = (combatant.hp ? combatant.hp : 0);\r\n        let temp = this.props.combatant.hpTemp;\r\n\r\n        let damage = this.state.damageOrHealing;\r\n\r\n        // Take damage off temp HP first\r\n        const val = Math.min(damage, temp);\r\n        damage -= val;\r\n        temp -= val;\r\n\r\n        // Take the rest off HP\r\n        hp -= damage;\r\n        hp = Math.max(hp, 0);\r\n\r\n        this.setState({\r\n            damageOrHealing: 0\r\n        }, () => {\r\n            this.props.changeHP(combatant, hp, temp);\r\n        });\r\n    }\r\n\r\n    private description() {\r\n        let size = this.props.combatant.size;\r\n        const combatant = this.props.combatant as (Monster & Combatant);\r\n        if (combatant) {\r\n            size = combatant.displaySize || size;\r\n        }\r\n        let sizeAndType = (size + ' ' + this.props.combatant.category).toLowerCase();\r\n        if (this.props.combatant.tag) {\r\n            sizeAndType += ' (' + this.props.combatant.tag.toLowerCase() + ')';\r\n        }\r\n        sizeAndType += ', ';\r\n\r\n        let align = '';\r\n        if (this.props.combatant.alignment) {\r\n            align = this.props.combatant.alignment.toLowerCase() + ', ';\r\n        }\r\n\r\n        const cr = 'cr ' + Utils.challenge(this.props.combatant.challenge);\r\n\r\n        return sizeAndType + align + cr;\r\n    }\r\n\r\n    private monsterIsInWave(wave: EncounterWave) {\r\n        return wave.slots.some(s => {\r\n            const group = this.props.library.find(g => g.monsters.includes(this.props.combatant));\r\n            return !!group && (s.monsterGroupName === group.name) && (s.monsterName === this.props.combatant.name);\r\n        });\r\n    }\r\n\r\n    private getHP() {\r\n        if (this.props.combatant.hitDice === 0) {\r\n            return this.props.combatant.hpMax;\r\n        }\r\n\r\n        const die = Utils.hitDieType(this.props.combatant.size);\r\n        const conMod = Utils.modifierValue(this.props.combatant.abilityScores.con) * this.props.combatant.hitDice;\r\n        let conModStr = '';\r\n        if (conMod > 0) {\r\n            conModStr = ' +' + conMod;\r\n        }\r\n        if (conMod < 0) {\r\n            conModStr = ' ' + conMod;\r\n        }\r\n        return this.props.combatant.hpMax + ' (' + this.props.combatant.hitDice + 'd' + die + conModStr + ')';\r\n    }\r\n\r\n    private getCombatControls() {\r\n        const combatant = this.props.combatant as Combatant;\r\n\r\n        const options = [];\r\n\r\n        const combatModes = ['main', 'hp', 'cond', 'map', 'adv'].map(m => {\r\n            return {\r\n                id: m,\r\n                text: m\r\n            };\r\n        });\r\n        if (this.props.mode.indexOf('tactical') === -1) {\r\n            // No combat map, so remove the map option\r\n            combatModes.splice(3, 1);\r\n        }\r\n        options.push(\r\n            <Selector\r\n                key='selector'\r\n                options={combatModes}\r\n                selectedID={this.state.combatMode}\r\n                select={option => this.setCombatMode(option)}\r\n            />\r\n        );\r\n        options.push(<div key='selector-sep' className='divider' />);\r\n\r\n        switch (this.state.combatMode) {\r\n            case 'main':\r\n                if (!combatant.pending && combatant.active && !combatant.defeated) {\r\n                    if (combatant.current) {\r\n                        options.push(<button key='endTurn' onClick={() => this.props.endTurn(combatant)}>end turn</button>);\r\n                        options.push(<button key='makeDefeated' onClick={() => this.props.makeDefeated(combatant)}>mark as defeated and end turn</button>);\r\n                    } else {\r\n                        options.push(<button key='makeCurrent' onClick={() => this.props.makeCurrent(combatant)}>start turn</button>);\r\n                        options.push(<button key='makeDefeated' onClick={() => this.props.makeDefeated(combatant)}>mark as defeated</button>);\r\n                    }\r\n                }\r\n                if (!combatant.pending && !combatant.active && combatant.defeated) {\r\n                    options.push(<button key='makeActive' onClick={() => this.props.makeActive(combatant)}>mark as active</button>);\r\n                }\r\n                options.push(<div key='tag-sep' className='divider' />);\r\n                if (this.props.mode.indexOf('tactical') !== -1) {\r\n                    options.push(\r\n                        <Checkbox\r\n                            key='hidden'\r\n                            label='hidden'\r\n                            display='switch'\r\n                            checked={!combatant.showOnMap}\r\n                            changeValue={value => this.props.changeValue(combatant, 'showOnMap', !value)}\r\n                        />\r\n                    );\r\n                }\r\n                options.push(\r\n                    <ControlRow\r\n                        key='tags'\r\n                        controls={COMBAT_TAGS.map(tag =>\r\n                            <Checkbox\r\n                                key={tag}\r\n                                label={tag}\r\n                                display='button'\r\n                                checked={combatant.tags.includes(tag)}\r\n                                changeValue={value => this.props.toggleTag(combatant, tag)}\r\n                            />\r\n                        )}\r\n                    />\r\n                );\r\n                break;\r\n            case 'hp':\r\n                options.push(\r\n                    <div key='hp'>\r\n                        <Spin\r\n                            source={this.props.combatant}\r\n                            name='hp'\r\n                            label='hit points'\r\n                            factors={[1, 10]}\r\n                            nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'hp', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant}\r\n                            name='hpTemp'\r\n                            label='temp hp'\r\n                            factors={[1, 10]}\r\n                            nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'hpTemp', delta)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <div className='section' style={{ display: this.props.combatant.damage.resist !== '' ? '' : 'none' }}>\r\n                            <b>damage resistances</b> {this.props.combatant.damage.resist}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.damage.vulnerable !== '' ? '' : 'none' }}>\r\n                            <b>damage vulnerabilities</b> {this.props.combatant.damage.vulnerable}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.damage.immune !== '' ? '' : 'none' }}>\r\n                            <b>damage immunities</b> {this.props.combatant.damage.immune}\r\n                        </div>\r\n                        <Spin\r\n                            source={this.state}\r\n                            name='damageOrHealing'\r\n                            factors={[1, 10]}\r\n                            nudgeValue={delta => this.nudgeDamage(delta)}\r\n                        />\r\n                        <ControlRow\r\n                            controls={[\r\n                                <button key='heal' onClick={() => this.heal()}>heal</button>,\r\n                                <button key='reset' onClick={() => this.setDamage(0)}>reset</button>,\r\n                                <button key='damage' onClick={() => this.damage()}>damage</button>\r\n                            ]}\r\n                            disabled={this.state.damageOrHealing === 0}\r\n                        />\r\n                    </div>\r\n                );\r\n                break;\r\n            case 'cond':\r\n                options.push(\r\n                    <div key='conditions'>\r\n                        <div className='section' style={{ display: this.props.combatant.conditionImmunities !== '' ? '' : 'none' }}>\r\n                            <b>condition immunities</b> {this.props.combatant.conditionImmunities}\r\n                        </div>\r\n                        <ConditionsPanel\r\n                            combatant={this.props.combatant as Combatant}\r\n                            combat={this.props.combat}\r\n                            addCondition={() => this.props.addCondition(this.props.combatant as Combatant)}\r\n                            editCondition={condition => this.props.editCondition(this.props.combatant as Combatant, condition)}\r\n                            removeCondition={conditionID => this.props.removeCondition(this.props.combatant as Combatant, conditionID)}\r\n                            nudgeConditionValue={(condition, type, delta) => this.props.nudgeConditionValue(condition, type, delta)}\r\n                        />\r\n                    </div>\r\n                );\r\n                break;\r\n            case 'map':\r\n                if (this.props.mode.indexOf('on-map') !== -1) {\r\n                    options.push(\r\n                        <div key='mapMove' className='section centered'>\r\n                            <Radial\r\n                                direction='eight'\r\n                                click={dir => this.props.mapMove(combatant, dir)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                    options.push(<div key='move-sep' className='divider' />);\r\n                    options.push(\r\n                        <Spin\r\n                            key='altitude'\r\n                            source={combatant}\r\n                            name='altitude'\r\n                            label='altitude'\r\n                            display={value => value + ' ft.'}\r\n                            nudgeValue={delta => this.props.nudgeValue(combatant, 'altitude', delta * 5)}\r\n                        />\r\n                    );\r\n                    let auraDetails = null;\r\n                    if (combatant.aura.radius > 0) {\r\n                        const auraStyleOptions = [\r\n                            {\r\n                                id: 'square',\r\n                                text: 'square'\r\n                            },\r\n                            {\r\n                                id: 'rounded',\r\n                                text: 'rounded'\r\n                            },\r\n                            {\r\n                                id: 'circle',\r\n                                text: 'circle'\r\n                            }\r\n                        ];\r\n                        auraDetails = (\r\n                            <div>\r\n                                <Selector\r\n                                    options={auraStyleOptions}\r\n                                    selectedID={combatant.aura.style}\r\n                                    select={optionID => this.props.changeValue(combatant.aura, 'style', optionID)}\r\n                                />\r\n                                <input\r\n                                    type='color'\r\n                                    value={combatant.aura.color}\r\n                                    onChange={event => this.props.changeValue(combatant.aura, 'color', event.target.value)}\r\n                                />\r\n                            </div>\r\n                        );\r\n                    }\r\n                    options.push(\r\n                        <Expander\r\n                            key='aura'\r\n                            text='aura'\r\n                            content={(\r\n                                <div>\r\n                                    <Spin\r\n                                        source={combatant.aura}\r\n                                        name='radius'\r\n                                        label='size'\r\n                                        display={value => value + ' ft.'}\r\n                                        nudgeValue={delta => this.props.nudgeValue(combatant.aura, 'radius', delta * 5)}\r\n                                    />\r\n                                    {auraDetails}\r\n                                </div>\r\n                            )}\r\n                        />\r\n                    );\r\n                    options.push(<button key='mapRemove' onClick={() => this.props.mapRemove(combatant)}>remove from map</button>);\r\n                }\r\n                if (this.props.mode.indexOf('off-map') !== -1) {\r\n                    options.push(<button key='mapAdd' onClick={() => this.props.mapAdd(combatant)}>add to map</button>);\r\n                }\r\n                break;\r\n            case 'adv':\r\n                if (!combatant.current) {\r\n                    options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                }\r\n                if (!combatant.pending) {\r\n                    options.push(\r\n                        <Expander\r\n                            key='init'\r\n                            text='change initiative score'\r\n                            content={(\r\n                                <div>\r\n                                    <Spin\r\n                                        source={this.props.combatant}\r\n                                        name='initiative'\r\n                                        label='initiative'\r\n                                        nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'initiative', delta)}\r\n                                    />\r\n                                </div>\r\n                            )}\r\n                        />\r\n                    );\r\n                }\r\n                options.push(\r\n                    <Expander\r\n                        key='size'\r\n                        text='change size'\r\n                        content={(\r\n                            <div>\r\n                                <Spin\r\n                                    source={this.props.combatant}\r\n                                    name='displaySize'\r\n                                    label='size'\r\n                                    nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'displaySize', delta)}\r\n                                />\r\n                            </div>\r\n                        )}\r\n                    />\r\n                );\r\n                options.push(\r\n                    <Expander\r\n                        key='rename'\r\n                        text='change name'\r\n                        content={(\r\n                            <div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={combatant.displayName}\r\n                                    onChange={event => this.props.changeValue(this.props.combatant, 'displayName', event.target.value)}\r\n                                />\r\n                            </div>\r\n                        )}\r\n                    />\r\n                );\r\n                break;\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='combat-options-panel'>\r\n                    {options}\r\n                </div>\r\n                <div className='divider' />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const options = [];\r\n            if (this.props.mode.indexOf('no-buttons') === -1) {\r\n                if (this.props.mode.indexOf('view') !== -1) {\r\n                    if (this.props.mode.indexOf('editable') !== -1) {\r\n                        options.push(\r\n                            <button key='edit' onClick={() => this.props.editMonster(this.props.combatant)}>edit monster</button>\r\n                        );\r\n\r\n                        options.push(\r\n                            <Expander\r\n                                key='clone'\r\n                                text='clone monster'\r\n                                content={\r\n                                    <div>\r\n                                        <input\r\n                                            type='text'\r\n                                            placeholder='monster name'\r\n                                            value={this.state.cloneName}\r\n                                            onChange={event => this.setCloneName(event.target.value)}\r\n                                        />\r\n                                        <button onClick={() => this.props.cloneMonster(this.props.combatant, this.state.cloneName)}>create copy</button>\r\n                                    </div>\r\n                                }\r\n                            />\r\n                        );\r\n\r\n                        const groupOptions: { id: string, text: string }[] = [];\r\n                        this.props.library.forEach(group => {\r\n                            if (group.monsters.indexOf(this.props.combatant) === -1) {\r\n                                groupOptions.push({\r\n                                    id: group.id,\r\n                                    text: group.name\r\n                                });\r\n                            }\r\n                        });\r\n                        options.push(\r\n                            <Dropdown\r\n                                key='move'\r\n                                options={groupOptions}\r\n                                placeholder='move to group...'\r\n                                select={optionID => this.props.moveToGroup(this.props.combatant, optionID)}\r\n                            />\r\n                        );\r\n\r\n                        options.push(<ConfirmButton key='remove' text='delete monster' callback={() => this.props.removeMonster(this.props.combatant)} />);\r\n                    }\r\n                    if (this.props.mode.indexOf('encounter') !== -1) {\r\n                        if (this.props.slot) {\r\n                            // This card is in an encounter or a wave\r\n                            options.push(\r\n                                <button key='remove' onClick={() => this.props.removeEncounterSlot(this.props.slot)}>\r\n                                    remove from encounter\r\n                                </button>\r\n                            );\r\n                        } else {\r\n                            let canAdd = false;\r\n                            // This card is in the library list\r\n                            if (!this.monsterIsInWave(this.props.encounter)) {\r\n                                options.push(\r\n                                    <button key='add encounter' onClick={() => this.props.addEncounterSlot(this.props.combatant, null)}>\r\n                                        add to encounter\r\n                                    </button>\r\n                                );\r\n                                canAdd = true;\r\n                            }\r\n                            this.props.encounter.waves.forEach(wave => {\r\n                                if (!this.monsterIsInWave(wave)) {\r\n                                    options.push(\r\n                                        <button key={'add ' + wave.id} onClick={() => this.props.addEncounterSlot(this.props.combatant, wave.id)}>\r\n                                            add to {wave.name}\r\n                                        </button>\r\n                                    );\r\n                                    canAdd = true;\r\n                                }\r\n                            });\r\n                            // If we can't add it anywhere, don't show it\r\n                            if (!canAdd) {\r\n                                return (\r\n                                    <InfoCard\r\n                                        heading={\r\n                                            (\r\n                                                <div className='heading'>\r\n                                                    <div className='title'>{this.props.combatant.name}</div>\r\n                                                </div>\r\n                                            )\r\n                                        }\r\n                                        content={\r\n                                            (\r\n                                                <div className='section centered'>\r\n                                                    <i>this monster is already part of this encounter</i>\r\n                                                </div>\r\n                                            )\r\n                                        }\r\n                                    />\r\n                                );\r\n                            }\r\n                        }\r\n                    }\r\n                    if (this.props.mode.indexOf('candidate') !== -1) {\r\n                        if (this.props.mode.indexOf('selected') === -1) {\r\n                            options.push(\r\n                                <button key='select' onClick={() => this.props.selectMonster(this.props.combatant)}>select monster</button>\r\n                            );\r\n                        } else {\r\n                            options.push(\r\n                                <button key='deselect' onClick={() => this.props.deselectMonster(this.props.combatant)}>deselect monster</button>\r\n                            );\r\n                        }\r\n                    }\r\n                }\r\n                if (this.props.mode.indexOf('template') !== -1) {\r\n                    // None\r\n                }\r\n            }\r\n\r\n            let combat = null;\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                combat = this.getCombatControls();\r\n            }\r\n\r\n            let stats = null;\r\n            if (this.props.mode.indexOf('view') !== -1) {\r\n                let slotSection = null;\r\n                if (this.props.slot) {\r\n                    slotSection = (\r\n                        <div>\r\n                            <div className='divider' />\r\n                            <Spin\r\n                                source={this.props.slot}\r\n                                name='count'\r\n                                label='count'\r\n                                nudgeValue={delta => this.props.nudgeValue(this.props.slot, 'count', delta)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                let details = null;\r\n                if (this.state.showDetails || (this.props.mode.indexOf('generated') !== -1)) {\r\n                    details = (\r\n                        <div>\r\n                            <div className='divider' />\r\n                            <div className='section'>\r\n                                <b>ac</b> {this.props.combatant.ac}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.hpMax !== 0 ? '' : 'none' }}>\r\n                                <b>hp</b> {this.getHP()}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.speed !== '' ? '' : 'none' }}>\r\n                                <b>speed</b> {this.props.combatant.speed}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <AbilityScorePanel combatant={this.props.combatant} />\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.savingThrows !== '' ? '' : 'none' }}>\r\n                                <b>saving throws</b> {this.props.combatant.savingThrows}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.skills !== '' ? '' : 'none' }}>\r\n                                <b>skills</b> {this.props.combatant.skills}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.damage.resist !== '' ? '' : 'none' }}>\r\n                                <b>damage resistances</b> {this.props.combatant.damage.resist}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.damage.vulnerable !== '' ? '' : 'none' }}>\r\n                                <b>damage vulnerabilities</b> {this.props.combatant.damage.vulnerable}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.damage.immune !== '' ? '' : 'none' }}>\r\n                                <b>damage immunities</b> {this.props.combatant.damage.immune}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.conditionImmunities !== '' ? '' : 'none' }}>\r\n                                <b>condition immunities</b> {this.props.combatant.conditionImmunities}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.senses !== '' ? '' : 'none' }}>\r\n                                <b>senses</b> {this.props.combatant.senses}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.languages !== '' ? '' : 'none' }}>\r\n                                <b>languages</b> {this.props.combatant.languages}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.equipment !== '' ? '' : 'none' }}>\r\n                                <b>equipment</b> {this.props.combatant.equipment}\r\n                            </div>\r\n                            <div className='divider' />\r\n                            <TraitsPanel combatant={this.props.combatant} />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                stats = (\r\n                    <div className='stats'>\r\n                        <div className='section centered'>\r\n                            <i>{this.description()}</i>\r\n                        </div>\r\n                        {slotSection}\r\n                        {details}\r\n                    </div>\r\n                );\r\n            }\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                stats = (\r\n                    <div className='stats'>\r\n                        <div className='section centered'>\r\n                            <i>{this.description()}</i>\r\n                        </div>\r\n                        <div className='divider' />\r\n                        {combat}\r\n                        <div className='section'>\r\n                            <AbilityScorePanel combatant={this.props.combatant} />\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.ac !== 0 ? '' : 'none' }}>\r\n                            <b>ac</b> {this.props.combatant.ac}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.savingThrows !== '' ? '' : 'none' }}>\r\n                            <b>saving throws</b> {this.props.combatant.savingThrows}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.skills !== '' ? '' : 'none' }}>\r\n                            <b>skills</b> {this.props.combatant.skills}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.speed !== '' ? '' : 'none' }}>\r\n                            <b>speed</b> {this.props.combatant.speed}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.senses !== '' ? '' : 'none' }}>\r\n                            <b>senses</b> {this.props.combatant.senses}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.damage.resist !== '' ? '' : 'none' }}>\r\n                            <b>damage resistances</b> {this.props.combatant.damage.resist}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.damage.vulnerable !== '' ? '' : 'none' }}>\r\n                            <b>damage vulnerabilities</b> {this.props.combatant.damage.vulnerable}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.damage.immune !== '' ? '' : 'none' }}>\r\n                            <b>damage immunities</b> {this.props.combatant.damage.immune}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.conditionImmunities !== '' ? '' : 'none' }}>\r\n                            <b>condition immunities</b> {this.props.combatant.conditionImmunities}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.languages !== '' ? '' : 'none' }}>\r\n                            <b>languages</b> {this.props.combatant.languages}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.equipment !== '' ? '' : 'none' }}>\r\n                            <b>equipment</b> {this.props.combatant.equipment}\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <TraitsPanel\r\n                            combatant={this.props.combatant}\r\n                            mode='combat'\r\n                            changeValue={(trait, field, value) => this.props.changeValue(trait, field, value)}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n            if (this.props.mode.indexOf('template') !== -1) {\r\n                if (this.props.mode.indexOf('overview') !== -1) {\r\n                    stats = (\r\n                        <div>\r\n                            <div className='section centered'>\r\n                                <i>{this.description()}</i>\r\n                            </div>\r\n                            <div className='divider' />\r\n                            <div className='section'>\r\n                                <b>speed</b> {this.props.combatant.speed || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>senses</b> {this.props.combatant.senses || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>languages</b> {this.props.combatant.languages || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>equipment</b> {this.props.combatant.equipment || '-'}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf('abilities') !== -1) {\r\n                    stats = (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <AbilityScorePanel combatant={this.props.combatant} />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>saving throws</b> {this.props.combatant.savingThrows || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>skills</b> {this.props.combatant.skills || '-'}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf('cbt-stats') !== -1) {\r\n                    stats = (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <b>ac</b> {this.props.combatant.ac}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>hp</b> {this.getHP()}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>damage immunity</b> {this.props.combatant.damage.immune || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>damage resistance</b> {this.props.combatant.damage.resist || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>damage vulnerability</b> {this.props.combatant.damage.vulnerable || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>condition immunities</b> {this.props.combatant.conditionImmunities || '-'}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf('actions') !== -1) {\r\n                    stats = (\r\n                        <TraitsPanel\r\n                            combatant={this.props.combatant}\r\n                            mode='template'\r\n                            filter={this.props.filter}\r\n                            copyTrait={trait => this.props.copyTrait(trait)}\r\n                        />\r\n                    );\r\n                }\r\n            }\r\n\r\n            let toggle = null;\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                // Don't show toggle button for combatant\r\n            } else if (this.props.mode.indexOf('template') !== -1) {\r\n                // Don't show toggle button for template\r\n            } else if (this.props.mode.indexOf('view generated') !== -1) {\r\n                // Don't show toggle button for generated monster\r\n            } else {\r\n                const imageStyle = this.state.showDetails ? 'image rotate' : 'image';\r\n                toggle = (\r\n                    <img className={imageStyle} src={arrow} alt='arrow' onClick={() => this.toggleDetails()} />\r\n                );\r\n            }\r\n\r\n            const name = (this.props.combatant as Combatant ? (this.props.combatant as Combatant).displayName : null)\r\n                || this.props.combatant.name\r\n                || 'unnamed monster';\r\n\r\n            return (\r\n                <div className='card monster'>\r\n                    <div className='heading'>\r\n                        <div className='title'>{name}</div>\r\n                        {toggle}\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        {stats}\r\n                        <div style={{ display: options.length > 0 ? '' : 'none' }}>\r\n                            <div className='divider' />\r\n                            <div className='section'>{options}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Combat, COMBAT_TAGS, Combatant } from '../../models/combat';\r\nimport { Condition } from '../../models/condition';\r\nimport { PC } from '../../models/party';\r\n\r\nimport Checkbox from '../controls/checkbox';\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport ControlRow from '../controls/control-row';\r\nimport Expander from '../controls/expander';\r\nimport Radial from '../controls/radial';\r\nimport Selector from '../controls/selector';\r\nimport Spin from '../controls/spin';\r\nimport ConditionsPanel from '../panels/conditions-panel';\r\n\r\ninterface Props {\r\n    combatant: PC | (PC & Combatant);\r\n    mode: string;\r\n    changeValue: (pc: any, field: string, value: any) => void;\r\n    nudgeValue: (pc: any, field: string, delta: number) => void;\r\n    removePC: (pc: PC) => void;\r\n    editPC: (pc: PC) => void;\r\n    // Combat\r\n    combat: Combat;\r\n    makeCurrent: (combatant: Combatant) => void;\r\n    makeActive: (combatant: Combatant) => void;\r\n    makeDefeated: (combatant: Combatant) => void;\r\n    endTurn: (combatant: Combatant) => void;\r\n    mapAdd: (combatant: Combatant) => void;\r\n    mapMove: (combatant: Combatant, dir: string) => void;\r\n    mapRemove: (combatant: Combatant) => void;\r\n    removeCombatant: (combatant: Combatant) => void;\r\n    addCondition: (combatant: Combatant) => void;\r\n    editCondition: (combatant: Combatant, condition: Condition) => void;\r\n    removeCondition: (combatant: Combatant, conditionID: string) => void;\r\n    nudgeConditionValue: (condition: Condition, field: string, delta: number) => void;\r\n    toggleTag: (combatant: Combatant, tag: string) => void;\r\n}\r\n\r\ninterface State {\r\n    combatMode: string;\r\n}\r\n\r\nexport default class PCCard extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        removePC: null,\r\n        editPC: null,\r\n        combat: null,\r\n        makeCurrent: null,\r\n        makeActive: null,\r\n        makeDefeated: null,\r\n        endTurn: null,\r\n        mapAdd: null,\r\n        mapMove: null,\r\n        mapRemove: null,\r\n        removeCombatant: null,\r\n        addCondition: null,\r\n        editCondition: null,\r\n        removeCondition: null,\r\n        nudgeConditionValue: null,\r\n        toggleTag: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            combatMode: 'main'\r\n        };\r\n    }\r\n\r\n    private setCombatMode(mode: string) {\r\n        this.setState({\r\n            combatMode: mode\r\n        });\r\n    }\r\n\r\n    private getCombatControls() {\r\n        const combatant = this.props.combatant as Combatant;\r\n\r\n        const options = [];\r\n\r\n        const combatModes = ['main', 'cond', 'map', 'adv'].map(m => {\r\n            return {\r\n                id: m,\r\n                text: m\r\n            };\r\n        });\r\n        if (this.props.mode.indexOf('tactical') === -1) {\r\n            // No combat map, so remove the map option\r\n            combatModes.splice(1, 1);\r\n        }\r\n        options.push(\r\n            <Selector\r\n                key='selector'\r\n                options={combatModes}\r\n                selectedID={this.state.combatMode}\r\n                select={option => this.setCombatMode(option)}\r\n            />\r\n        );\r\n        options.push(<div key='selector-sep' className='divider' />);\r\n\r\n        switch (this.state.combatMode) {\r\n            case 'main':\r\n                if (combatant.pending && !combatant.active && !combatant.defeated) {\r\n                    options.push(<div key='pending' className='section'>pending initiative entry</div>);\r\n                }\r\n                if (!combatant.pending && combatant.active && !combatant.defeated) {\r\n                    if (combatant.current) {\r\n                        options.push(<button key='endTurn' onClick={() => this.props.endTurn(combatant)}>end turn</button>);\r\n                        options.push(<button key='makeDefeated' onClick={() => this.props.makeDefeated(combatant)}>mark as defeated and end turn</button>);\r\n                    } else {\r\n                        options.push(<button key='makeCurrent' onClick={() => this.props.makeCurrent(combatant)}>start turn</button>);\r\n                        options.push(<button key='makeDefeated' onClick={() => this.props.makeDefeated(combatant)}>mark as defeated</button>);\r\n                    }\r\n                }\r\n                if (!combatant.pending && !combatant.active && combatant.defeated) {\r\n                    options.push(<button key='makeActive' onClick={() => this.props.makeActive(combatant)}>mark as active</button>);\r\n                }\r\n                if (!combatant.pending && combatant.active && !combatant.defeated) {\r\n                    options.push(<div key='tag-sep' className='divider' />);\r\n                    options.push(\r\n                        <ControlRow\r\n                            key='tags'\r\n                            controls={COMBAT_TAGS.map(tag =>\r\n                                <Checkbox\r\n                                    key={tag}\r\n                                    label={tag}\r\n                                    display='button'\r\n                                    checked={combatant.tags.includes(tag)}\r\n                                    changeValue={value => this.props.toggleTag(combatant, tag)}\r\n                                />\r\n                            )}\r\n                        />\r\n                    );\r\n                }\r\n                break;\r\n            case 'cond':\r\n                options.push(\r\n                    <div key='conditions'>\r\n                        <ConditionsPanel\r\n                            combatant={this.props.combatant as Combatant}\r\n                            combat={this.props.combat}\r\n                            addCondition={() => this.props.addCondition(this.props.combatant as Combatant)}\r\n                            editCondition={condition => this.props.editCondition(this.props.combatant as Combatant, condition)}\r\n                            removeCondition={conditionID => this.props.removeCondition(this.props.combatant as Combatant, conditionID)}\r\n                            nudgeConditionValue={(condition, type, delta) => this.props.nudgeConditionValue(condition, type, delta)}\r\n                        />\r\n                    </div>\r\n                );\r\n                break;\r\n            case 'map':\r\n                if (this.props.mode.indexOf('on-map') !== -1) {\r\n                    options.push(\r\n                        <div key='mapMove' className='section centered'>\r\n                            <Radial\r\n                                direction='eight'\r\n                                click={dir => this.props.mapMove(combatant, dir)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                    options.push(<div key='move-sep' className='divider' />);\r\n                    options.push(\r\n                        <Spin\r\n                            key='altitude'\r\n                            source={this.props.combatant}\r\n                            name='altitude'\r\n                            label='altitude'\r\n                            display={value => value + ' ft.'}\r\n                            nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'altitude', delta * 5)}\r\n                        />\r\n                    );\r\n                    let auraDetails = null;\r\n                    if (combatant.aura.radius > 0) {\r\n                        const auraStyleOptions = [\r\n                            {\r\n                                id: 'square',\r\n                                text: 'square'\r\n                            },\r\n                            {\r\n                                id: 'rounded',\r\n                                text: 'rounded'\r\n                            },\r\n                            {\r\n                                id: 'circle',\r\n                                text: 'circle'\r\n                            }\r\n                        ];\r\n                        auraDetails = (\r\n                            <div>\r\n                                <Selector\r\n                                    options={auraStyleOptions}\r\n                                    selectedID={combatant.aura.style}\r\n                                    select={optionID => this.props.changeValue(combatant.aura, 'style', optionID)}\r\n                                />\r\n                                <input\r\n                                    type='color'\r\n                                    value={combatant.aura.color}\r\n                                    onChange={event => this.props.changeValue(combatant.aura, 'color', event.target.value)}\r\n                                />\r\n                            </div>\r\n                        );\r\n                    }\r\n                    options.push(\r\n                        <Expander\r\n                            key='aura'\r\n                            text='aura'\r\n                            content={(\r\n                                <div>\r\n                                    <Spin\r\n                                        source={combatant.aura}\r\n                                        name='radius'\r\n                                        label='size'\r\n                                        display={value => value + ' ft.'}\r\n                                        nudgeValue={delta => this.props.nudgeValue(combatant.aura, 'radius', delta * 5)}\r\n                                    />\r\n                                    {auraDetails}\r\n                                </div>\r\n                            )}\r\n                        />\r\n                    );\r\n                    options.push(<button key='mapRemove' onClick={() => this.props.mapRemove(combatant)}>remove from map</button>);\r\n                }\r\n                if (this.props.mode.indexOf('off-map') !== -1) {\r\n                    options.push(<button key='mapAdd' onClick={() => this.props.mapAdd(combatant)}>add to map</button>);\r\n                }\r\n                break;\r\n            case 'adv':\r\n                if (!combatant.current) {\r\n                    options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                }\r\n                if (!combatant.pending) {\r\n                    options.push(\r\n                        <Expander\r\n                            key='init'\r\n                            text='change initiative score'\r\n                            content={(\r\n                                <div>\r\n                                    <Spin\r\n                                        source={this.props.combatant}\r\n                                        name='initiative'\r\n                                        label='initiative'\r\n                                        nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'initiative', delta)}\r\n                                    />\r\n                                </div>\r\n                            )}\r\n                        />\r\n                    );\r\n                }\r\n                options.push(\r\n                    <Expander\r\n                        key='size'\r\n                        text='change size'\r\n                        content={(\r\n                            <div>\r\n                                <Spin\r\n                                    source={this.props.combatant}\r\n                                    name='displaySize'\r\n                                    label='size'\r\n                                    nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'displaySize', delta)}\r\n                                />\r\n                            </div>\r\n                        )}\r\n                    />\r\n                );\r\n                break;\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='combat-options-panel'>\r\n                    {options}\r\n                </div>\r\n                <div className='divider' />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const options = [];\r\n            if (this.props.mode.indexOf('edit') !== -1) {\r\n                options.push(<button key='edit' onClick={() => this.props.editPC(this.props.combatant)}>edit pc</button>);\r\n                if (this.props.combatant.active) {\r\n                    options.push(\r\n                        <button key='toggle-active' onClick={() => this.props.changeValue(this.props.combatant, 'active', false)}>\r\n                            mark pc as inactive\r\n                        </button>\r\n                    );\r\n                } else {\r\n                    options.push(\r\n                        <button key='toggle-active' onClick={() => this.props.changeValue(this.props.combatant, 'active', true)}>\r\n                            mark pc as active\r\n                        </button>\r\n                    );\r\n                }\r\n                options.push(<ConfirmButton key='remove' text='delete pc' callback={() => this.props.removePC(this.props.combatant)} />);\r\n            }\r\n\r\n            let combat = null;\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                combat = this.getCombatControls();\r\n            }\r\n\r\n            const desc = (this.props.combatant.race || 'unknown race')\r\n                + ' ' + (this.props.combatant.classes || 'unknown class')\r\n                + ', level ' + this.props.combatant.level;\r\n\r\n            let companions = null;\r\n            if (this.props.combatant.companions.length > 0) {\r\n                companions = this.props.combatant.companions.map(companion => (\r\n                    <div key={companion.id}>{companion.name}</div>\r\n                ));\r\n            }\r\n\r\n            const name = (this.props.combatant as Combatant ? (this.props.combatant as Combatant).displayName : null)\r\n                || this.props.combatant.name\r\n                || 'unnamed pc';\r\n\r\n            return (\r\n                <div className='card pc'>\r\n                    <div className='heading'>\r\n                        <div className='title'>{name}</div>\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        <div className='stats'>\r\n                            <div className='section centered lowercase'>\r\n                                <i>{desc}</i>\r\n                                <div style={{ display: this.props.combatant.url ? '' : 'none' }}>\r\n                                    <a href={this.props.combatant.url} target='_blank' rel='noopener noreferrer'>d&d beyond sheet</a>\r\n                                </div>\r\n                            </div>\r\n                            <div className='divider' />\r\n                            {combat}\r\n                            <div className='section subheading'>languages</div>\r\n                            <div className='section'>\r\n                                {this.props.combatant.languages || '-'}\r\n                            </div>\r\n                            <div className='section subheading'>passive skills</div>\r\n                            <div className='section'>\r\n                                <div><b>insight</b> {this.props.combatant.passiveInsight}</div>\r\n                                <div><b>investigation</b> {this.props.combatant.passiveInvestigation}</div>\r\n                                <div><b>perception</b> {this.props.combatant.passivePerception}</div>\r\n                            </div>\r\n                        </div>\r\n                        <div style={{ display: this.props.combatant.companions.length > 0 ? '' : 'none' }}>\r\n                            <div className='section subheading'>companions</div>\r\n                            <div className='section'>\r\n                                {companions}\r\n                            </div>\r\n                        </div>\r\n                        <div style={{ display: options.length > 0 ? '' : 'none' }}>\r\n                            <div className='divider' />\r\n                            <div className='section'>\r\n                                {options}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Combatant } from '../../models/combat';\r\nimport { Monster } from '../../models/monster-group';\r\n\r\ninterface Props {\r\n    combatant: Combatant & Monster;\r\n}\r\n\r\nexport default class HitPointGauge extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const hpCurrent = this.props.combatant.hp || 0;\r\n            const hpMax = this.props.combatant.hpMax + this.props.combatant.hpTemp;\r\n            const hpBloodied = this.props.combatant.hpMax / 2;\r\n            const hpWidth = 100 * Math.max(hpCurrent, 0) / hpMax;\r\n\r\n            let style = '';\r\n            if (hpCurrent >= this.props.combatant.hpMax) {\r\n                style = 'bar unhurt';\r\n            } else if (hpCurrent <= hpBloodied) {\r\n                style = 'bar bloodied';\r\n            } else {\r\n                style = 'bar injured';\r\n            }\r\n\r\n            let hpTempBar = null;\r\n            if (this.props.combatant.hpTemp > 0) {\r\n                const hpTempWidth = 100 * Math.max(this.props.combatant.hpTemp, 0) / hpMax;\r\n                hpTempBar = <div className='bar temp' style={{ width: hpTempWidth + '%' }} />;\r\n            }\r\n\r\n            return (\r\n                <div className='hp-gauge'>\r\n                    <div className={style} style={{ width: hpWidth + '%' }} />\r\n                    {hpTempBar}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combatant } from '../../models/combat';\r\nimport { Map, MapItem } from '../../models/map-folio';\r\nimport { Monster } from '../../models/monster-group';\r\nimport { PC } from '../../models/party';\r\n\r\nimport HitPointGauge from './hit-point-gauge';\r\n\r\ninterface Props {\r\n    map: Map;\r\n    mode: 'edit' | 'thumbnail' | 'combat' | 'combat-player';\r\n    combatants: ((Combatant & PC) | (Combatant & Monster))[];\r\n    showOverlay: boolean;\r\n    selectedItemID: string;\r\n    setSelectedItemID: (itemID: string | null) => void;\r\n    gridSquareClicked: (x: number, y: number) => void;\r\n}\r\n\r\ninterface MapDimensions {\r\n    minX: number;\r\n    maxX: number;\r\n    minY: number;\r\n    maxY: number;\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\ninterface StyleData {\r\n    left: string;\r\n    top: string;\r\n    width: string;\r\n    height: string;\r\n    backgroundColor?: string;\r\n}\r\n\r\nexport default class MapPanel extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        combatants: null,\r\n        showOverlay: false,\r\n        selectedItemID: null,\r\n        setSelectedItemID: null,\r\n        gridSquareClicked: null\r\n    };\r\n\r\n    private getMapDimensions(border: number): MapDimensions | null {\r\n        let dimensions: MapDimensions | null = null;\r\n\r\n        this.props.map.items.filter(i => {\r\n            if (this.props.mode === 'edit') {\r\n                return i.type === 'tile';\r\n            }\r\n            return true;\r\n        }).forEach(i => {\r\n            if (!dimensions) {\r\n                dimensions = {\r\n                    minX: i.x,\r\n                    maxX: i.x + i.width - 1,\r\n                    minY: i.y,\r\n                    maxY: i.y + i.height - 1,\r\n                    width: 0,\r\n                    height: 0\r\n                };\r\n            } else {\r\n                dimensions.minX = Math.min(dimensions.minX, i.x);\r\n                dimensions.maxX = Math.max(dimensions.maxX, i.x + i.width - 1);\r\n                dimensions.minY = Math.min(dimensions.minY, i.y);\r\n                dimensions.maxY = Math.max(dimensions.maxY, i.y + i.height - 1);\r\n            }\r\n        });\r\n\r\n        if (this.props.combatants) {\r\n            this.props.combatants.filter(c => c.aura.radius > 0).forEach(c => {\r\n                const mi = this.props.map.items.find(i => i.id === c.id);\r\n                if (mi) {\r\n                    const sizeInSquares = c.aura.radius / 5;\r\n                    let miniSize = 1;\r\n                    const m = c as Monster;\r\n                    if (m) {\r\n                        miniSize = Utils.miniSize(m.size);\r\n                    }\r\n                    const minX = mi.x - sizeInSquares;\r\n                    const maxX = mi.x + (miniSize - 1) + sizeInSquares;\r\n                    const minY = mi.y - sizeInSquares;\r\n                    const maxY = mi.y + (miniSize - 1) + sizeInSquares;\r\n\r\n                    if (dimensions) {\r\n                        dimensions.minX = Math.min(dimensions.minX, minX);\r\n                        dimensions.maxX = Math.max(dimensions.maxX, maxX);\r\n                        dimensions.minY = Math.min(dimensions.minY, minY);\r\n                        dimensions.maxY = Math.max(dimensions.maxY, maxY);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        if (!dimensions) {\r\n            // The map is blank\r\n            if (this.props.mode === 'thumbnail') {\r\n                return null;\r\n            }\r\n\r\n            dimensions = {\r\n                minX: 0,\r\n                maxX: 0,\r\n                minY: 0,\r\n                maxY: 0,\r\n                width: 0,\r\n                height: 0\r\n            };\r\n        }\r\n\r\n        // Apply the border\r\n        dimensions.minX -= border;\r\n        dimensions.maxX += border;\r\n        dimensions.minY -= border;\r\n        dimensions.maxY += border;\r\n\r\n        // Set width and height\r\n        dimensions.width = 1 + dimensions.maxX - dimensions.minX;\r\n        dimensions.height = 1 + dimensions.maxY - dimensions.minY;\r\n\r\n        return dimensions;\r\n    }\r\n\r\n    private getSideLength(): number {\r\n        switch (this.props.mode) {\r\n            case 'thumbnail':\r\n                return 5;\r\n            case 'edit':\r\n            case 'combat':\r\n                return 25;\r\n            case 'combat-player':\r\n                return 50;\r\n            default:\r\n                return 5;\r\n        }\r\n    }\r\n\r\n    private getStyle(x: number, y: number, width: number, height: number, mapDimensions: MapDimensions): StyleData {\r\n        const sideLength = this.getSideLength();\r\n\r\n        let offsetX = 0;\r\n        let offsetY = 0;\r\n        if (width < 1) {\r\n            offsetX = (1 - width) / 2;\r\n        }\r\n        if (height < 1) {\r\n            offsetY = (1 - height) / 2;\r\n        }\r\n\r\n        return {\r\n            left: 'calc(' + sideLength + 'px * ' + (x + offsetX - mapDimensions.minX) + ')',\r\n            top: 'calc(' + sideLength + 'px * ' + (y + offsetY - mapDimensions.minY) + ')',\r\n            width: 'calc((' + sideLength + 'px * ' + width + ') + 1px)',\r\n            height: 'calc((' + sideLength + 'px * ' + height + ') + 1px)'\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const border = (this.props.mode === 'edit') ? 2 : 0;\r\n            const mapDimensions = this.getMapDimensions(border);\r\n            if (!mapDimensions) {\r\n                return (\r\n                    <div>(blank map)</div>\r\n                );\r\n            }\r\n\r\n            // Draw the grid squares\r\n            const grid = [];\r\n            if (this.props.mode === 'edit') {\r\n                for (let y = mapDimensions.minY; y !== mapDimensions.maxY + 1; ++y) {\r\n                    for (let x = mapDimensions.minX; x !== mapDimensions.maxX + 1; ++x) {\r\n                        const gridStyle = this.getStyle(x, y, 1, 1, mapDimensions);\r\n                        grid.push(\r\n                            <GridSquare\r\n                                key={x + ',' + y}\r\n                                x={x}\r\n                                y={y}\r\n                                style={gridStyle}\r\n                                onClick={() => this.props.setSelectedItemID(null)}\r\n                            />\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Draw the map tiles\r\n            const tiles = this.props.map.items\r\n                .filter(i => i.type === 'tile')\r\n                .map(i => {\r\n                    const tileStyle = this.getStyle(i.x, i.y, i.width, i.height, mapDimensions as MapDimensions);\r\n                    return (\r\n                        <MapTile\r\n                            key={i.id}\r\n                            tile={i}\r\n                            style={tileStyle}\r\n                            selectable={this.props.mode === 'edit'}\r\n                            selected={this.props.selectedItemID === i.id}\r\n                            thumbnail={this.props.mode === 'thumbnail'}\r\n                            large={this.props.mode === 'combat-player'}\r\n                            select={id => this.props.mode === 'edit' ? this.props.setSelectedItemID(id) : null}\r\n                        />\r\n                    );\r\n                });\r\n\r\n            // Draw token auras\r\n            let auras: JSX.Element[] = [];\r\n            if ((this.props.mode !== 'edit') && (this.props.mode !== 'thumbnail')) {\r\n                auras = this.props.combatants\r\n                    .filter(c => c.aura.radius > 0)\r\n                    .filter(c => c.showOnMap || (this.props.mode !== 'combat-player'))\r\n                    .map(c => {\r\n                        const mi = this.props.map.items.find(i => i.id === c.id);\r\n                        if (mi) {\r\n                            const sizeInSquares = c.aura.radius / 5;\r\n                            const miniSize = Utils.miniSize(c.displaySize);\r\n                            const dim = (sizeInSquares * 2) + miniSize;\r\n                            const auraStyle = this.getStyle(mi.x - sizeInSquares, mi.y - sizeInSquares, dim, dim, mapDimensions as MapDimensions);\r\n                            auraStyle.backgroundColor = c.aura.color;\r\n                            return (\r\n                                <div\r\n                                    key={c.id + ' aura'}\r\n                                    className={'aura ' + c.aura.style}\r\n                                    style={auraStyle}\r\n                                />\r\n                            );\r\n                        }\r\n                        return null;\r\n                    })\r\n                    .filter(mt => mt !== null) as JSX.Element[];\r\n            }\r\n\r\n            // Draw the tokens\r\n            let tokens: JSX.Element[] = [];\r\n            if (this.props.mode !== 'edit') {\r\n                tokens = this.props.map.items\r\n                    .filter(i => (i.type === 'monster') || (i.type === 'pc'))\r\n                    .map(i => {\r\n                        const combatant = this.props.combatants.find(c => c.id === i.id);\r\n                        if (combatant) {\r\n                            const miniSize = Utils.miniSize(combatant.displaySize);\r\n                            const tokenStyle = this.getStyle(i.x, i.y, miniSize, miniSize, mapDimensions as MapDimensions);\r\n                            return (\r\n                                <MapToken\r\n                                    key={i.id}\r\n                                    token={i}\r\n                                    combatant={combatant}\r\n                                    style={tokenStyle}\r\n                                    simple={this.props.mode === 'thumbnail'}\r\n                                    showGauge={this.props.mode === 'combat'}\r\n                                    showHidden={this.props.mode === 'combat'}\r\n                                    selectable={(this.props.mode === 'combat') || (this.props.mode === 'combat-player')}\r\n                                    selected={this.props.selectedItemID ===  i.id}\r\n                                    select={id => this.props.setSelectedItemID(id)}\r\n                                />\r\n                            );\r\n                        }\r\n\r\n                        return null;\r\n                    })\r\n                    .filter(mt => mt !== null) as JSX.Element[];\r\n            }\r\n\r\n            // Draw the drag overlay\r\n            const dragOverlay = [];\r\n            if (this.props.showOverlay) {\r\n                for (let yOver = mapDimensions.minY; yOver !== mapDimensions.maxY + 1; ++yOver) {\r\n                    for (let xOver = mapDimensions.minX; xOver !== mapDimensions.maxX + 1; ++xOver) {\r\n                        const overlayStyle = this.getStyle(xOver, yOver, 1, 1, mapDimensions);\r\n                        dragOverlay.push(\r\n                            <GridSquare\r\n                                key={xOver + ',' + yOver}\r\n                                x={xOver}\r\n                                y={yOver}\r\n                                style={overlayStyle}\r\n                                overlay={true}\r\n                                onClick={(posX, posY) => this.props.gridSquareClicked(posX, posY)}\r\n                            />\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n\r\n            const style = 'map-panel ' + this.props.mode;\r\n            return (\r\n                <div className={style} onClick={() => this.props.setSelectedItemID(null)}>\r\n                    <div className='grid' style={{ height: ((this.getSideLength() * mapDimensions.height) + 1) + 'px' }}>\r\n                        {grid}\r\n                        {tiles}\r\n                        {auras}\r\n                        {tokens}\r\n                        {dragOverlay}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface GridSquareProps {\r\n    x: number;\r\n    y: number;\r\n    style: StyleData;\r\n    overlay: boolean;\r\n    onClick: (x: number, y: number) => void;\r\n    onDoubleClick: (x: number, y: number) => void;\r\n}\r\n\r\nclass GridSquare extends React.Component<GridSquareProps> {\r\n    public static defaultProps = {\r\n        overlay: false,\r\n        onDoubleClick: null\r\n    };\r\n\r\n    private click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (this.props.onClick) {\r\n            this.props.onClick(this.props.x, this.props.y);\r\n        }\r\n    }\r\n\r\n    private doubleClick(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (this.props.onDoubleClick) {\r\n            this.props.onDoubleClick(this.props.x, this.props.y);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'grid-square';\r\n        if (this.props.overlay) {\r\n            style += ' grid-overlay';\r\n        }\r\n\r\n        return (\r\n            <div\r\n                className={style}\r\n                style={this.props.style}\r\n                onClick={e => this.click(e)}\r\n                onDoubleClick={e => this.doubleClick(e)}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\ninterface MapTileProps {\r\n    tile: MapItem;\r\n    style: StyleData;\r\n    thumbnail: boolean;\r\n    large: boolean;\r\n    selectable: boolean;\r\n    selected: boolean;\r\n    select: (tileID: string) => void;\r\n}\r\n\r\nclass MapTile extends React.Component<MapTileProps> {\r\n    private select(e: React.MouseEvent) {\r\n        if (this.props.selectable) {\r\n            e.stopPropagation();\r\n            this.props.select(this.props.tile.id);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'tile ' + this.props.tile.terrain + ' ' + this.props.tile.style;\r\n        if (this.props.selected) {\r\n            style += ' selected';\r\n        }\r\n        if (this.props.thumbnail) {\r\n            style += ' thumbnail';\r\n        }\r\n        if (this.props.large) {\r\n            style += ' large';\r\n        }\r\n\r\n        return (\r\n            <div\r\n                className={style}\r\n                style={this.props.style}\r\n                onClick={e => this.select(e)}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\ninterface MapTokenProps {\r\n    token: MapItem;\r\n    combatant: (Combatant & PC) | (Combatant & Monster);\r\n    style: StyleData;\r\n    simple: boolean;\r\n    showGauge: boolean;\r\n    showHidden: boolean;\r\n    selectable: boolean;\r\n    selected: boolean;\r\n    select: (tokenID: string) => void;\r\n}\r\n\r\nclass MapToken extends React.Component<MapTokenProps> {\r\n    private select(e: React.MouseEvent) {\r\n        if (this.props.selectable) {\r\n            e.stopPropagation();\r\n            this.props.select(this.props.token.id);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'token ' + this.props.token.type;\r\n        if (this.props.selected) {\r\n            style += ' selected';\r\n        }\r\n        if (this.props.combatant.current) {\r\n            style += ' current';\r\n        }\r\n        if (!this.props.combatant.showOnMap) {\r\n            if (this.props.showHidden) {\r\n                style += ' hidden';\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n\r\n        let initials = null;\r\n        let hpGauge = null;\r\n        let altitudeBadge = null;\r\n        let conditionsBadge = null;\r\n        if (!this.props.simple) {\r\n            const name = this.props.combatant.displayName || this.props.combatant.name || 'combatant';\r\n            initials = (\r\n                <div className='initials'>{name.split(' ').map(s => s[0])}</div>\r\n            );\r\n\r\n            if (this.props.combatant.type === 'monster' && this.props.showGauge) {\r\n                hpGauge = (\r\n                    <HitPointGauge combatant={this.props.combatant as Combatant & Monster} />\r\n                );\r\n            }\r\n\r\n            if (this.props.combatant.altitude > 0) {\r\n                altitudeBadge = (\r\n                    <div className='badge altitude' title='above the map'>&#9206;</div>\r\n                );\r\n            }\r\n\r\n            if (this.props.combatant.altitude < 0) {\r\n                altitudeBadge = (\r\n                    <div className='badge altitude' title='below the map'>&#9207;</div>\r\n                );\r\n            }\r\n\r\n            if ((this.props.combatant.conditions) && (this.props.combatant.conditions.length > 0)) {\r\n                conditionsBadge = (\r\n                    <div className='badge' title='affected by conditions'>&#9670;</div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div\r\n                title={this.props.combatant.displayName || this.props.combatant.name}\r\n                className={style}\r\n                style={this.props.style}\r\n                onClick={e => this.select(e)}\r\n            >\r\n                {initials}\r\n                {hpGauge}\r\n                {altitudeBadge}\r\n                {conditionsBadge}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Combat } from '../../models/combat';\r\n\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    combat: Combat;\r\n    selected: boolean;\r\n    setSelection: (combat: Combat) => void;\r\n}\r\n\r\nexport default class CombatListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            let map = null;\r\n            if (this.props.combat.map) {\r\n                map = (\r\n                    <MapPanel\r\n                        map={this.props.combat.map}\r\n                        mode='thumbnail'\r\n                        combatants={this.props.combat.combatants}\r\n                    />\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.combat)}>\r\n                    <div className='heading'>{this.props.combat.name || 'unnamed combat'}</div>\r\n                    <div className='text'>paused at {this.props.combat.timestamp}</div>\r\n                    {map}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport close from '../../resources/images/close-black.svg';\r\nimport arrow from '../../resources/images/down-arrow-black.svg';\r\n\r\ninterface Props {\r\n    content: any[];\r\n    heading: string;\r\n    hidden: boolean;\r\n    showToggle: boolean;\r\n    close: () => void;\r\n}\r\n\r\ninterface State {\r\n    showCards: boolean;\r\n}\r\n\r\nexport default class CardGroup extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        heading: null,\r\n        hidden: false,\r\n        showToggle: false,\r\n        close: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showCards: true\r\n        };\r\n    }\r\n\r\n    private toggleCards() {\r\n        this.setState({\r\n            showCards: !this.state.showCards\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            if (this.props.hidden) {\r\n                return null;\r\n            }\r\n\r\n            let heading = null;\r\n            if (this.props.heading) {\r\n                let closeBtn = null;\r\n                if (this.props.close) {\r\n                    closeBtn = (\r\n                        <img className='image' src={close} alt='close' onClick={() => this.props.close()} />\r\n                    );\r\n                }\r\n\r\n                let toggle = null;\r\n                if (this.props.showToggle) {\r\n                    const style = this.state.showCards ? 'image rotate' : 'image';\r\n                    toggle = (\r\n                        <img className={style} src={arrow} alt='arrow' onClick={() => this.toggleCards()} />\r\n                    );\r\n                }\r\n\r\n                heading = (\r\n                    <div className='heading'>\r\n                        <div className='title'>{this.props.heading}</div>\r\n                        {toggle}\r\n                        {closeBtn}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            let cards = [];\r\n            if ((this.props.content.length > 0) && this.state.showCards) {\r\n                cards = this.props.content;\r\n            }\r\n\r\n            return (\r\n                <div className='card-group'>\r\n                    {heading}\r\n                    <div className='row small-up-1 medium-up-2 large-up-3 collapse'>\r\n                        {cards}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\ninterface Props {\r\n    title: string;\r\n    closeWindow: () => void;\r\n}\r\n\r\ninterface State {\r\n    externalWindow: Window | null;\r\n    containerElement: HTMLElement | null;\r\n}\r\n\r\nexport default class Popout extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            externalWindow: null,\r\n            containerElement: null\r\n        };\r\n    }\r\n\r\n    public componentDidMount() {\r\n        const externalWindow = window.open('', '', 'width=800, height=500, left=200, top=200');\r\n\r\n        let containerElement = null;\r\n        if (externalWindow) {\r\n            containerElement = externalWindow.document.createElement('div');\r\n            containerElement.className = 'dojo popout';\r\n            externalWindow.document.body.appendChild(containerElement);\r\n\r\n            const stylesheets = Array.from(document.styleSheets);\r\n            stylesheets.forEach(stylesheet => {\r\n                const css = stylesheet as CSSStyleSheet;\r\n\r\n                if (stylesheet.href) {\r\n                    const newStyleElement = document.createElement('link');\r\n                    newStyleElement.rel = 'stylesheet';\r\n                    newStyleElement.href = stylesheet.href;\r\n                    externalWindow.document.head.appendChild(newStyleElement);\r\n                } else if (css && css.cssRules && css.cssRules.length > 0) {\r\n                    const newStyleElement = document.createElement('style');\r\n                    Array.from(css.cssRules).forEach(rule => {\r\n                        newStyleElement.appendChild(document.createTextNode(rule.cssText));\r\n                    });\r\n                    externalWindow.document.head.appendChild(newStyleElement);\r\n                }\r\n            });\r\n\r\n            externalWindow.document.title = this.props.title;\r\n            externalWindow.addEventListener('beforeunload', () => {\r\n                this.props.closeWindow();\r\n            });\r\n        }\r\n\r\n        this.setState({\r\n            externalWindow: externalWindow,\r\n            containerElement: containerElement\r\n        });\r\n    }\r\n\r\n    public componentWillUnmount() {\r\n        if (this.state.externalWindow) {\r\n            this.state.externalWindow.close();\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        if (!this.state.containerElement) {\r\n            return null;\r\n        }\r\n\r\n        return ReactDOM.createPortal(this.props.children, this.state.containerElement);\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combat, COMBAT_TAGS, Combatant, Notification } from '../../models/combat';\r\nimport { Condition, ConditionDurationSaves } from '../../models/condition';\r\nimport { Monster, Trait } from '../../models/monster-group';\r\nimport { PC } from '../../models/party';\r\n\r\nimport MonsterCard from '../cards/monster-card';\r\nimport PCCard from '../cards/pc-card';\r\nimport Checkbox from '../controls/checkbox';\r\nimport ControlRow from '../controls/control-row';\r\nimport Radial from '../controls/radial';\r\nimport Spin from '../controls/spin';\r\nimport CombatListItem from '../list-items/combat-list-item';\r\nimport CardGroup from '../panels/card-group';\r\nimport HitPointGauge from '../panels/hit-point-gauge';\r\nimport MapPanel from '../panels/map-panel';\r\nimport Note from '../panels/note';\r\nimport TraitsPanel from '../panels/traits-panel';\r\nimport Popout from '../portals/popout';\r\n\r\ninterface Props {\r\n    combats: Combat[];\r\n    combat: Combat | null;\r\n    filter: string;\r\n    createCombat: () => void;\r\n    resumeEncounter: (combat: Combat) => void;\r\n    close: (notification: Notification, removeCondition: boolean) => void;\r\n    mapAdd: (combatant: (Combatant & PC) | (Combatant & Monster), x: number, y: number) => void;\r\n    makeCurrent: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    makeActive: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    makeDefeated: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    removeCombatant: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    addCondition: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    editCondition: (combatant: (Combatant & PC) | (Combatant & Monster), condition: Condition) => void;\r\n    removeCondition: (combatant: (Combatant & PC) | (Combatant & Monster), conditionID: string) => void;\r\n    mapMove: (combatant: (Combatant & PC) | (Combatant & Monster), dir: string) => void;\r\n    mapRemove: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    endTurn: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    changeHP: (combatant: Combatant & Monster, hp: number, temp: number) => void;\r\n    changeValue: (source: {}, type: string, value: any) => void;\r\n    nudgeValue: (source: {}, type: string, delta: number) => void;\r\n    toggleTag: (combatant: Combatant, tag: string) => void;\r\n    scatterMonsters: () => void;\r\n}\r\n\r\ninterface State {\r\n    selectedTokenID: string | null;\r\n    addingToMapID: string | null;\r\n    playerView: {\r\n        open: boolean;\r\n        showControls: boolean;\r\n    };\r\n}\r\n\r\nexport default class CombatManagerScreen extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            selectedTokenID: null,  // The ID of the combatant that's selected\r\n            addingToMapID: null,    // The ID of the combatant we're adding to the map\r\n            playerView: {\r\n                open: false,\r\n                showControls: true\r\n            }\r\n        };\r\n    }\r\n\r\n    public componentDidMount() {\r\n        window.addEventListener('beforeunload', () => {\r\n            this.setPlayerViewOpen(false);\r\n        });\r\n    }\r\n\r\n    private setSelectedTokenID(id: string | null) {\r\n        this.setState({\r\n            selectedTokenID: id\r\n        });\r\n    }\r\n\r\n    private setAddingToMapID(id: string | null) {\r\n        this.setState({\r\n            addingToMapID: id\r\n        });\r\n    }\r\n\r\n    private setPlayerViewOpen(show: boolean) {\r\n        // eslint-disable-next-line\r\n        this.state.playerView.open = show;\r\n        this.setState({\r\n            playerView: this.state.playerView\r\n        });\r\n    }\r\n\r\n    private setPlayerViewShowControls(show: boolean) {\r\n        // eslint-disable-next-line\r\n        this.state.playerView.showControls = show;\r\n        this.setState({\r\n            playerView: this.state.playerView\r\n        });\r\n    }\r\n\r\n    private getPlayerView(combat: Combat) {\r\n        if (!this.state.playerView.open) {\r\n            return null;\r\n        }\r\n\r\n        let controls = null;\r\n        if (combat.map && this.state.playerView.showControls) {\r\n            let selection = combat.combatants\r\n                .filter(c => c.showOnMap)\r\n                .find(c => c.id === this.state.selectedTokenID);\r\n            if (!selection) {\r\n                selection = combat.combatants\r\n                    .filter(c => c.showOnMap)\r\n                    .find(c => c.current);\r\n            }\r\n\r\n            if (selection) {\r\n                const token = selection as ((Combatant & PC) | (Combatant & Monster));\r\n                controls = (\r\n                    <div>\r\n                        <div className='heading lowercase'>{token.displayName}</div>\r\n                        <div className='section centered'>\r\n                            <Radial\r\n                                direction='eight'\r\n                                click={dir => this.props.mapMove(token, dir)}\r\n                            />\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <Spin\r\n                            key='altitude'\r\n                            source={token}\r\n                            name='altitude'\r\n                            label='altitude'\r\n                            display={value => value + ' ft.'}\r\n                            nudgeValue={delta => this.props.nudgeValue(token, 'altitude', delta * 5)}\r\n                        />\r\n                        <ControlRow\r\n                            key='tags'\r\n                            controls={COMBAT_TAGS.map(tag =>\r\n                                <Checkbox\r\n                                    key={tag}\r\n                                    label={tag}\r\n                                    display='button'\r\n                                    checked={token.tags.includes(tag)}\r\n                                    changeValue={value => this.props.toggleTag(token, tag)}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        const init = combat.combatants\r\n            .filter(c => c.showOnMap)\r\n            .filter(combatant => !combatant.pending && combatant.active && !combatant.defeated)\r\n            .map(combatant => {\r\n                switch (combatant.type) {\r\n                    case 'pc':\r\n                        return (\r\n                            <PCRow\r\n                                key={combatant.id}\r\n                                combatant={combatant as Combatant & PC}\r\n                                minimal={true}\r\n                                combat={this.props.combat as Combat}\r\n                                select={c => this.setSelectedTokenID(c.id)}\r\n                                selected={combatant.id === this.state.selectedTokenID}\r\n                            />\r\n                        );\r\n                    case 'monster':\r\n                        return (\r\n                            <MonsterRow\r\n                                key={combatant.id}\r\n                                combatant={combatant as Combatant & Monster}\r\n                                minimal={true}\r\n                                combat={this.props.combat as Combat}\r\n                                select={c => this.setSelectedTokenID(c.id)}\r\n                                selected={combatant.id === this.state.selectedTokenID}\r\n                            />\r\n                        );\r\n                    default:\r\n                        return null;\r\n                }\r\n            });\r\n\r\n        if (combat.map) {\r\n            return (\r\n                <Popout title='Encounter' closeWindow={() => this.setPlayerViewOpen(false)}>\r\n                    <div className='row'>\r\n                        <div className='columns small-12 medium-6 large-8 scrollable scrollable-both'>\r\n                            <MapPanel\r\n                                key='map'\r\n                                map={combat.map}\r\n                                mode='combat-player'\r\n                                combatants={combat.combatants}\r\n                                selectedItemID={this.state.selectedTokenID ? this.state.selectedTokenID : undefined}\r\n                                setSelectedItemID={id => this.setSelectedTokenID(id)}\r\n                            />\r\n                        </div>\r\n                        <div className='columns small-12 medium-6 large-4 scrollable'>\r\n                            {controls}\r\n                            <div className='heading'>initiative order</div>\r\n                            {init}\r\n                        </div>\r\n                    </div>\r\n                </Popout>\r\n            );\r\n        } else {\r\n            return (\r\n                <Popout title='Encounter' closeWindow={() => this.setPlayerViewOpen(false)}>\r\n                    <div className='row'>\r\n                        <div className='columns small-12 medium-12 large-12 scrollable'>\r\n                            <div className='heading'>initiative order</div>\r\n                            {init}\r\n                        </div>\r\n                    </div>\r\n                </Popout>\r\n            );\r\n        }\r\n    }\r\n\r\n    private createCard(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        let mode = 'combat';\r\n        if (this.props.combat && this.props.combat.map) {\r\n            mode += ' tactical';\r\n            const onMap = this.props.combat.map.items.find(i => i.id === combatant.id);\r\n            mode += onMap ? ' on-map' : ' off-map';\r\n        }\r\n\r\n        switch (combatant.type) {\r\n            case 'pc':\r\n                return (\r\n                    <PCCard\r\n                        key='selected'\r\n                        combatant={combatant as Combatant & PC}\r\n                        mode={mode}\r\n                        combat={this.props.combat as Combat}\r\n                        changeValue={(source, type, value) => this.props.changeValue(source, type, value)}\r\n                        nudgeValue={(source, type, delta) => this.props.nudgeValue(source, type, delta)}\r\n                        makeCurrent={c => this.props.makeCurrent(c as Combatant & PC)}\r\n                        makeActive={c => this.props.makeActive(c as Combatant & PC)}\r\n                        makeDefeated={c => this.defeatCombatant(c as Combatant & PC)}\r\n                        removeCombatant={c => this.props.removeCombatant(c as Combatant & PC)}\r\n                        addCondition={c => this.props.addCondition(c as Combatant & Monster)}\r\n                        editCondition={(c, condition) => this.props.editCondition(c as Combatant & Monster, condition)}\r\n                        removeCondition={(c, conditionID) => this.props.removeCondition(c as Combatant & Monster, conditionID)}\r\n                        nudgeConditionValue={(c, type, delta) => this.props.nudgeValue(c, type, delta)}\r\n                        mapAdd={c => this.setAddingToMapID(this.state.addingToMapID ? null : c.id)}\r\n                        mapMove={(c, dir) => this.props.mapMove(c as Combatant & PC, dir)}\r\n                        mapRemove={c => this.props.mapRemove(c as Combatant & PC)}\r\n                        endTurn={c => this.props.endTurn(c as Combatant & PC)}\r\n                        toggleTag={(c, tag) => this.props.toggleTag(c, tag)}\r\n                    />\r\n                );\r\n            case 'monster':\r\n                return (\r\n                    <MonsterCard\r\n                        key='selected'\r\n                        combatant={combatant as Combatant & Monster}\r\n                        mode={mode}\r\n                        combat={this.props.combat as Combat}\r\n                        changeValue={(c, type, value) => this.props.changeValue(c, type, value)}\r\n                        nudgeValue={(c, type, delta) => this.props.nudgeValue(c, type, delta)}\r\n                        makeCurrent={c => this.props.makeCurrent(c as Combatant & Monster)}\r\n                        makeActive={c => this.props.makeActive(c as Combatant & Monster)}\r\n                        makeDefeated={c => this.defeatCombatant(c as Combatant & Monster)}\r\n                        removeCombatant={c => this.props.removeCombatant(c as Combatant & Monster)}\r\n                        addCondition={c => this.props.addCondition(c as Combatant & Monster)}\r\n                        editCondition={(c, condition) => this.props.editCondition(c as Combatant & Monster, condition)}\r\n                        removeCondition={(c, conditionID) => this.props.removeCondition(c as Combatant & Monster, conditionID)}\r\n                        nudgeConditionValue={(c, type, delta) => this.props.nudgeValue(c, type, delta)}\r\n                        mapAdd={c => this.setAddingToMapID(this.state.addingToMapID ? null : c.id)}\r\n                        mapMove={(c, dir) => this.props.mapMove(c as Combatant & Monster, dir)}\r\n                        mapRemove={c => this.props.mapRemove(c as Combatant & Monster)}\r\n                        endTurn={(c) => this.props.endTurn(c as Combatant & Monster)}\r\n                        changeHP={(c, hp, temp) => this.props.changeHP(c as Combatant & Monster, hp, temp)}\r\n                        toggleTag={(c, tag) => this.props.toggleTag(c, tag)}\r\n                    />\r\n                );\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    private defeatCombatant(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        if (this.state.selectedTokenID === combatant.id) {\r\n            this.setState({\r\n                selectedTokenID: null\r\n            });\r\n        }\r\n\r\n        this.props.makeDefeated(combatant);\r\n    }\r\n\r\n    private addCombatantToMap(x: number, y: number) {\r\n        if (this.props.combat) {\r\n            const combatant = this.props.combat.combatants.find(c => c.id === this.state.addingToMapID);\r\n            if (combatant) {\r\n                this.props.mapAdd(combatant, x, y);\r\n            }\r\n            this.setAddingToMapID(null);\r\n        }\r\n    }\r\n\r\n    private showCombat(combat: Combat) {\r\n        return Utils.match(this.props.filter, combat.name);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            if (this.props.combat) {\r\n                const current: JSX.Element[] = [];\r\n                let pending: JSX.Element[] = [];\r\n                let active: JSX.Element[] = [];\r\n                const defeated: JSX.Element[] = [];\r\n\r\n                this.props.combat.combatants.forEach(combatant => {\r\n                    if (combatant.current) {\r\n                        current.push(\r\n                            <div key={combatant.id}>\r\n                                {this.createCard(combatant)}\r\n                            </div>\r\n                        );\r\n                    }\r\n                    if (combatant.pending && !combatant.active && !combatant.defeated) {\r\n                        pending.push(\r\n                            <PendingCombatantRow\r\n                                key={combatant.id}\r\n                                combatant={combatant}\r\n                                select={c => this.setSelectedTokenID(c.id)}\r\n                                selected={combatant.id === this.state.selectedTokenID}\r\n                                nudgeValue={(c, type, delta) => this.props.nudgeValue(c, type, delta)}\r\n                                makeActive={c => this.props.makeActive(c)}\r\n                            />\r\n                        );\r\n                    }\r\n                    if (!combatant.pending && combatant.active && !combatant.defeated) {\r\n                        switch (combatant.type) {\r\n                            case 'pc':\r\n                                active.push(\r\n                                    <PCRow\r\n                                        key={combatant.id}\r\n                                        combatant={combatant as Combatant & PC}\r\n                                        combat={this.props.combat as Combat}\r\n                                        select={c => this.setSelectedTokenID(c.id)}\r\n                                        selected={combatant.id === this.state.selectedTokenID}\r\n                                    />\r\n                                );\r\n                                break;\r\n                            case 'monster':\r\n                                active.push(\r\n                                    <MonsterRow\r\n                                        key={combatant.id}\r\n                                        combatant={combatant as Combatant & Monster}\r\n                                        combat={this.props.combat as Combat}\r\n                                        select={c => this.setSelectedTokenID(c.id)}\r\n                                        selected={combatant.id === this.state.selectedTokenID}\r\n                                    />\r\n                                );\r\n                                break;\r\n                        }\r\n                    }\r\n                    if (!combatant.pending && !combatant.active && combatant.defeated) {\r\n                        switch (combatant.type) {\r\n                            case 'pc':\r\n                                defeated.push(\r\n                                    <PCRow\r\n                                        key={combatant.id}\r\n                                        combatant={combatant as Combatant & PC}\r\n                                        combat={this.props.combat as Combat}\r\n                                        select={c => this.setSelectedTokenID(c.id)}\r\n                                        selected={combatant.id === this.state.selectedTokenID}\r\n                                    />\r\n                                );\r\n                                break;\r\n                            case 'monster':\r\n                                defeated.push(\r\n                                    <MonsterRow\r\n                                        key={combatant.id}\r\n                                        combatant={combatant as Combatant & Monster}\r\n                                        combat={this.props.combat as Combat}\r\n                                        select={c => this.setSelectedTokenID(c.id)}\r\n                                        selected={combatant.id === this.state.selectedTokenID}\r\n                                    />\r\n                                );\r\n                                break;\r\n                        }\r\n                    }\r\n                });\r\n\r\n                if (pending.length !== 0) {\r\n                    const pendingHelp = (\r\n                        <div key='pending-help'>\r\n                            <Note\r\n                                content={\r\n                                    <div>\r\n                                        <div className='section'>these combatants are not yet part of the encounter</div>\r\n                                        <div className='section'>set initiative on each of them, then add them to the encounter</div>\r\n                                    </div>\r\n                                }\r\n                            />\r\n                        </div>\r\n                    );\r\n                    pending = [pendingHelp].concat(pending);\r\n                }\r\n\r\n                if (current.length === 0) {\r\n                    const activeHelp = (\r\n                        /* tslint:disable:max-line-length */\r\n                        <div key='active-help'>\r\n                            <Note\r\n                                content={\r\n                                    <div>\r\n                                        <div className='section'>these are the combatants taking part in this encounter; you can select them to see their stat blocks (on the right)</div>\r\n                                        <div className='section'>they are listed in initiative order (with the highest initiative score at the top of the list, and the lowest at the bottom)</div>\r\n                                        <div className='section'>when you're ready to begin the encounter, select the first combatant and press the <b>start turn</b> button on their stat block</div>\r\n                                    </div>\r\n                                }\r\n                            />\r\n                        </div>\r\n                        /* tslint:enable:max-line-length */\r\n                    );\r\n                    active = [activeHelp].concat(active);\r\n                }\r\n\r\n                if (current.length === 0) {\r\n                    current.push(\r\n                        <Note\r\n                            key='current'\r\n                            content={\r\n                                <div className='section'>\r\n                                    the current initiative holder will be displayed here\r\n                                </div>\r\n                            }\r\n                        />\r\n                    );\r\n                }\r\n\r\n                let notificationSection = null;\r\n                if (this.props.combat.notifications.length > 0) {\r\n                    const notifications = this.props.combat.notifications.map(n => (\r\n                        <NotificationPanel\r\n                            key={n.id}\r\n                            notification={n}\r\n                            close={(notification, removeCondition) => this.props.close(notification, removeCondition)}\r\n                        />\r\n                    ));\r\n                    notificationSection = (\r\n                        <div className='notifications'>\r\n                            {notifications}\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                let mapSection = null;\r\n                if (this.props.combat.map) {\r\n                    mapSection = (\r\n                        <div key='map'>\r\n                            <MapPanel\r\n                                map={this.props.combat.map}\r\n                                mode='combat'\r\n                                showOverlay={this.state.addingToMapID !== null}\r\n                                combatants={this.props.combat.combatants}\r\n                                selectedItemID={this.state.selectedTokenID ? this.state.selectedTokenID : undefined}\r\n                                setSelectedItemID={id => this.setSelectedTokenID(id)}\r\n                                gridSquareClicked={(x, y) => this.addCombatantToMap(x, y)}\r\n                            />\r\n                            <button onClick={() => this.props.scatterMonsters()}>scatter monsters</button>\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                const playerViewSection = (\r\n                    <CardGroup\r\n                        heading='player view'\r\n                        content={[\r\n                            <Checkbox\r\n                                key='show'\r\n                                label='show player view'\r\n                                checked={this.state.playerView.open}\r\n                                changeValue={value => this.setPlayerViewOpen(value)}\r\n                            />,\r\n                            <Checkbox\r\n                                key='controls'\r\n                                label='show map controls'\r\n                                checked={this.state.playerView.showControls}\r\n                                disabled={!this.props.combat.map}\r\n                                changeValue={value => this.setPlayerViewShowControls(value)}\r\n                            />\r\n                        ]}\r\n                        showToggle={true}\r\n                    />\r\n                );\r\n\r\n                const special: JSX.Element[] = [];\r\n                this.props.combat.combatants.forEach(c => {\r\n                    const monster = c as (Combatant & Monster);\r\n                    const legendary = monster && monster.traits && monster.traits.some(t => t.type === 'legendary') && !monster.current;\r\n                    const lair = monster && monster.traits && monster.traits.some(t => t.type === 'lair');\r\n                    if (legendary || lair) {\r\n                        special.push(\r\n                            <div className='card monster' key={monster.id}>\r\n                                <div className='heading'><div className='title'>{monster.name}</div></div>\r\n                                <div className='card-content'>\r\n                                    <TraitsPanel\r\n                                        combatant={monster}\r\n                                        mode='combat-special'\r\n                                        changeValue={(source, type, value) => this.props.changeValue(source, type, value)}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    }\r\n                });\r\n\r\n                let selectedCombatant = null;\r\n                if (this.state.selectedTokenID) {\r\n                    const combatant = this.props.combat.combatants.find(c => c.id === this.state.selectedTokenID);\r\n                    if (combatant && !combatant.current) {\r\n                        selectedCombatant = this.createCard(combatant);\r\n                    }\r\n                }\r\n                if (!selectedCombatant) {\r\n                    selectedCombatant = (\r\n                        <Note\r\n                            key='selected'\r\n                            content={\r\n                                <div className='section'>\r\n                                    select a pc or monster from the <b>initiative order</b> list to see its details here\r\n                                </div>\r\n                            }\r\n                        />\r\n                    );\r\n                }\r\n\r\n                return (\r\n                    <div className='combat-manager row collapse'>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable'>\r\n                            <CardGroup\r\n                                heading='initiative holder'\r\n                                content={current}\r\n                            />\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable'>\r\n                            {notificationSection}\r\n                            <CardGroup\r\n                                heading='waiting for intiative to be entered'\r\n                                content={pending}\r\n                                hidden={pending.length === 0}\r\n                                showToggle={true}\r\n                            />\r\n                            <CardGroup\r\n                                heading='encounter map'\r\n                                content={[mapSection]}\r\n                                hidden={mapSection === null}\r\n                                showToggle={true}\r\n                            />\r\n                            <CardGroup\r\n                                heading='initiative order'\r\n                                content={active}\r\n                                hidden={active.length === 0}\r\n                                showToggle={true}\r\n                            />\r\n                            <CardGroup\r\n                                heading='defeated'\r\n                                content={defeated}\r\n                                hidden={defeated.length === 0}\r\n                                showToggle={true}\r\n                            />\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable'>\r\n                            {playerViewSection}\r\n                            {this.getPlayerView(this.props.combat)}\r\n                            <CardGroup\r\n                                heading={'don\\'t forget'}\r\n                                content={special}\r\n                                hidden={special.length === 0}\r\n                                showToggle={true}\r\n                            />\r\n                            <CardGroup\r\n                                heading='selected combatant'\r\n                                content={[selectedCombatant]}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                let listItems = this.props.combats.filter(c => this.showCombat(c)).map(c => {\r\n                    return (\r\n                        <CombatListItem\r\n                            key={c.id}\r\n                            combat={c}\r\n                            selected={false}\r\n                            setSelection={combat => this.props.resumeEncounter(combat)}\r\n                        />\r\n                    );\r\n                });\r\n                if (listItems.length === 0) {\r\n                    listItems = [(\r\n                        <Note\r\n                            key='empty'\r\n                            content={'you have no in-progress encounters'}\r\n                        />\r\n                    )];\r\n                }\r\n\r\n                return (\r\n                    <div className='combat-manager row collapse'>\r\n                        <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                            <button onClick={() => this.props.createCombat()}>start a new combat</button>\r\n                            <div className='divider' />\r\n                            {listItems}\r\n                        </div>\r\n                        <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                            <div className='vertical-center-outer'>\r\n                                <div className='vertical-center-middle'>\r\n                                    <div className='vertical-center-inner'>\r\n                                        <HelpCard combats={this.props.combats} />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface HelpCardProps {\r\n    combats: Combat[];\r\n}\r\n\r\nclass HelpCard extends React.Component<HelpCardProps> {\r\n    public render() {\r\n        let action: JSX.Element | null = null;\r\n        if (this.props.combats.length === 0) {\r\n            action = (\r\n                <div className='section'>to start a combat encounter, press the <b>start a new combat</b> button</div>\r\n            );\r\n        } else {\r\n            action = (\r\n                <div>\r\n                    <div className='section'>on the left you will see a list of encounters that you have paused</div>\r\n                    <div className='section'>you can resume a paused combat by selecting it</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Note\r\n                content={\r\n                    <div>\r\n                        <div className='section'>here you can run a combat encounter by specifying a party and an encounter</div>\r\n                        <div className='divider' />\r\n                        {action}\r\n                    </div>\r\n                }\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\ninterface NotificationProps {\r\n    notification: Notification;\r\n    close: (notification: Notification, removeCondition: boolean) => void;\r\n}\r\n\r\nclass NotificationPanel extends React.Component<NotificationProps> {\r\n    private success() {\r\n        switch (this.props.notification.type) {\r\n            case 'condition-save':\r\n            case 'condition-end':\r\n                const condition = this.props.notification.data as Condition;\r\n                if (condition.duration) {\r\n                    // Reduce save by 1\r\n                    if ((condition.duration.type === 'saves') || (condition.duration.type === 'rounds')) {\r\n                        condition.duration.count -= 1;\r\n                        if (condition.duration.count === 0) {\r\n                            // Remove the condition\r\n                            this.close(true);\r\n                        } else {\r\n                            this.close();\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            case 'trait-recharge':\r\n                // Mark trait as recharged\r\n                const trait = this.props.notification.data as Trait;\r\n                trait.uses = 0;\r\n                this.close();\r\n                break;\r\n        }\r\n    }\r\n\r\n    private close(removeCondition = false) {\r\n        this.props.close(this.props.notification, removeCondition);\r\n    }\r\n\r\n    public render() {\r\n        const combatant = this.props.notification.combatant as (Combatant & Monster);\r\n        const condition = this.props.notification.data as Condition;\r\n        const trait = this.props.notification.data as Trait;\r\n\r\n        const name = combatant.displayName || combatant.name || 'unnamed monster';\r\n        switch (this.props.notification.type) {\r\n            case 'condition-save':\r\n                const duration = condition.duration as ConditionDurationSaves;\r\n                let saveType = duration.saveType.toString();\r\n                if (saveType !== 'death') {\r\n                    saveType = saveType.toUpperCase();\r\n                }\r\n                return (\r\n                    <div key={this.props.notification.id} className='descriptive'>\r\n                        <div className='text'>\r\n                            {name} must make a {saveType} save against dc {duration.saveDC}\r\n                        </div>\r\n                        <ControlRow\r\n                            controls={[\r\n                                <button key='success' onClick={() => this.success()}>success</button>,\r\n                                <button key='close' onClick={() => this.close()}>close</button>\r\n                            ]}\r\n                        />\r\n                    </div>\r\n                );\r\n            case 'condition-end':\r\n                return (\r\n                    <div key={this.props.notification.id} className='descriptive'>\r\n                        <div className='text'>\r\n                            {name} is no longer affected by condition {condition.name}\r\n                        </div>\r\n                        <ControlRow\r\n                            controls={[\r\n                                <button key='close' onClick={() => this.close()}>close</button>\r\n                            ]}\r\n                        />\r\n                    </div>\r\n                );\r\n            case 'trait-recharge':\r\n                return (\r\n                    <div key={this.props.notification.id} className='descriptive'>\r\n                        <div className='text'>\r\n                            {name} can attempt to recharge {trait.name} ({trait.usage})\r\n                        </div>\r\n                        <ControlRow\r\n                            controls={[\r\n                                <button key='recharge' onClick={() => this.success()}>recharge</button>,\r\n                                <button key='close' onClick={() => this.close()}>close</button>\r\n                            ]}\r\n                        />\r\n                    </div>\r\n                );\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface PendingCombatantRowProps {\r\n    combatant: (Combatant & PC) | (Combatant & Monster);\r\n    selected: boolean;\r\n    select: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    nudgeValue: (combatant: (Combatant & PC) | (Combatant & Monster), field: string, delta: number) => void;\r\n    makeActive: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n}\r\n\r\nclass PendingCombatantRow extends React.Component<PendingCombatantRowProps> {\r\n    private getInformationText() {\r\n        if (this.props.selected) {\r\n            return 'selected';\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private onClick(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (this.props.select) {\r\n            this.props.select(this.props.combatant);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'combatant-row ' + this.props.combatant.type;\r\n        if (this.props.combatant.current || this.props.selected) {\r\n            style += ' highlight';\r\n        }\r\n\r\n        return (\r\n            <div className={style} onClick={e => this.onClick(e)}>\r\n                <div className='name'>\r\n                    {this.props.combatant.displayName || this.props.combatant.name || 'combatant'}\r\n                    <span className='info'>{this.getInformationText()}</span>\r\n                </div>\r\n                <div className='content'>\r\n                    <Spin\r\n                        source={this.props.combatant}\r\n                        name='initiative'\r\n                        label='initiative'\r\n                        nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'initiative', delta)}\r\n                    />\r\n                    <button onClick={e => { e.stopPropagation(); this.props.makeActive(this.props.combatant); }}>add to encounter</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface PCRowProps {\r\n    combatant: Combatant & PC;\r\n    minimal: boolean;\r\n    combat: Combat;\r\n    selected: boolean;\r\n    select: (combatant: Combatant & PC) => void;\r\n}\r\n\r\nclass PCRow extends React.Component<PCRowProps> {\r\n    public static defaultProps = {\r\n        minimal: false\r\n    };\r\n\r\n    private getInformationText() {\r\n        if (this.props.combatant.current) {\r\n            return 'current turn';\r\n        }\r\n\r\n        if (this.props.selected) {\r\n            return 'selected';\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private onClick(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (!this.props.selected && this.props.select) {\r\n            this.props.select(this.props.combatant);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'combatant-row ' + this.props.combatant.type;\r\n        if (this.props.selected) {\r\n            style += ' highlight';\r\n        }\r\n\r\n        let desc = null;\r\n        if (!this.props.minimal) {\r\n            const race = this.props.combatant.race || 'unknown race';\r\n            const cls = this.props.combatant.classes || 'unknown class';\r\n            desc = (\r\n                <div className='section lowercase'>\r\n                    {race + ' ' + cls + ', level ' + this.props.combatant.level}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        let conditions = null;\r\n        if (this.props.combatant.conditions) {\r\n            conditions = this.props.combatant.conditions.map(c => {\r\n                let name = c.name;\r\n                if (c.name === 'exhaustion') {\r\n                    name += ' (' + c.level + ')';\r\n                }\r\n                if ((c.name === 'custom') && (c.text)) {\r\n                    name = c.text;\r\n                }\r\n                if (c.duration) {\r\n                    name += ' ' + Utils.conditionDurationText(c, this.props.combat);\r\n                }\r\n                const description = [];\r\n                const text = Utils.conditionText(c);\r\n                for (let n = 0; n !== text.length; ++n) {\r\n                    description.push(<li key={n} className='condition-text'>{text[n]}</li>);\r\n                }\r\n                return (\r\n                    <Note\r\n                        key={c.id}\r\n                        white={true}\r\n                        content={\r\n                            <div className='condition'>\r\n                                <div className='condition-name'>{name}</div>\r\n                                <ul>\r\n                                    {description}\r\n                                </ul>\r\n                            </div>\r\n                        }\r\n                    />\r\n                );\r\n            });\r\n        }\r\n\r\n        const notes = [];\r\n        if (this.props.combat.map) {\r\n            if (!this.props.combatant.pending && !this.props.combat.map.items.find(i => i.id === this.props.combatant.id)) {\r\n                notes.push(\r\n                    <Note key='not-on-map' white={true} content='not on the map' />\r\n                );\r\n            }\r\n        }\r\n        this.props.combatant.tags.forEach(tag => {\r\n            notes.push(\r\n                <Note key={tag} white={true} content={Utils.getTagDescription(tag)} />\r\n            );\r\n        });\r\n\r\n        let companions = null;\r\n        if (this.props.combatant.companions.length > 0) {\r\n            companions = (\r\n                <div className='section'>\r\n                    <b>companions:</b> {this.props.combatant.companions.map(companion => companion.name).join(', ')}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className={style} onClick={e => this.onClick(e)}>\r\n                <div className='name'>\r\n                    {this.props.combatant.displayName || this.props.combatant.name || 'combatant'}\r\n                    {this.props.combatant.player ? ' | ' + this.props.combatant.player : ''}\r\n                    <span className='info'>{this.getInformationText()}</span>\r\n                </div>\r\n                <div className='content'>\r\n                    {desc}\r\n                    {conditions}\r\n                    {notes}\r\n                    {companions}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface MonsterRowProps {\r\n    combatant: Combatant & Monster;\r\n    minimal: boolean;\r\n    combat: Combat;\r\n    selected: boolean;\r\n    select: (combatant: Combatant & Monster) => void;\r\n}\r\n\r\nclass MonsterRow extends React.Component<MonsterRowProps> {\r\n    public static defaultProps = {\r\n        minimal: false\r\n    };\r\n\r\n    private getInformationText() {\r\n        if (this.props.combatant.current) {\r\n            return 'current turn';\r\n        }\r\n\r\n        if (this.props.selected) {\r\n            return 'selected';\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private onClick(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (!this.props.selected && this.props.select) {\r\n            this.props.select(this.props.combatant);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'combatant-row ' + this.props.combatant.type;\r\n        if (this.props.selected) {\r\n            style += ' highlight';\r\n        }\r\n\r\n        let hp = (this.props.combatant.hp ? this.props.combatant.hp : 0).toString();\r\n        if (this.props.combatant.hpTemp > 0) {\r\n            hp += '+' + this.props.combatant.hpTemp;\r\n        }\r\n\r\n        let gauge = null;\r\n        if (!this.props.combatant.pending) {\r\n            gauge = (\r\n                <HitPointGauge combatant={this.props.combatant} />\r\n            );\r\n        }\r\n\r\n        let conditions = null;\r\n        if (this.props.combatant.conditions) {\r\n            conditions = this.props.combatant.conditions.map(c => {\r\n                let name = c.name;\r\n                if (c.name === 'exhaustion') {\r\n                    name += ' (' + c.level + ')';\r\n                }\r\n                if ((c.name === 'custom') && (c.text)) {\r\n                    name = c.text;\r\n                }\r\n                if (c.duration) {\r\n                    name += ' ' + Utils.conditionDurationText(c, this.props.combat);\r\n                }\r\n                const description = [];\r\n                const text = Utils.conditionText(c);\r\n                for (let n = 0; n !== text.length; ++n) {\r\n                    description.push(<li key={n} className='condition-text'>{text[n]}</li>);\r\n                }\r\n                return (\r\n                    <Note\r\n                        key={c.id}\r\n                        white={true}\r\n                        content={\r\n                            <div className='condition'>\r\n                                <div className='condition-name'>{name}</div>\r\n                                <ul>\r\n                                    {description}\r\n                                </ul>\r\n                            </div>\r\n                        }\r\n                    />\r\n                );\r\n            });\r\n        }\r\n\r\n        const notes = [];\r\n        if (this.props.combat.map) {\r\n            if (!this.props.combatant.pending && !this.props.combat.map.items.find(i => i.id === this.props.combatant.id)) {\r\n                notes.push(\r\n                    <Note key='not-on-map' white={true} content='not on the map' />\r\n                );\r\n            }\r\n        }\r\n        this.props.combatant.tags.forEach(tag => {\r\n            notes.push(\r\n                <Note key={tag} white={true} content={Utils.getTagDescription(tag)} />\r\n            );\r\n        });\r\n\r\n        let dmInfo = null;\r\n        if (!this.props.minimal) {\r\n            dmInfo = (\r\n                <div>\r\n                    <div className='section key-stats'>\r\n                        <div className='key-stat'>\r\n                            <div className='stat-label'>ac</div>\r\n                            <div className='stat-value'>{this.props.combatant.ac}</div>\r\n                        </div>\r\n                        <div className='key-stat'>\r\n                            <div className='stat-value'>{hp}</div>\r\n                            <div className='stat-label'>hp</div>\r\n                        </div>\r\n                    </div>\r\n                    {gauge}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className={style} onClick={e => this.onClick(e)}>\r\n                <div className='name'>\r\n                    {this.props.combatant.displayName || this.props.combatant.name || 'combatant'}\r\n                    <span className='info'>{this.getInformationText()}</span>\r\n                </div>\r\n                <div className='content'>\r\n                    {dmInfo}\r\n                    {conditions}\r\n                    {notes}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { EncounterWave } from '../../models/encounter';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport InfoCard from './info-card';\r\n\r\ninterface Props {\r\n    wave: EncounterWave;\r\n    changeValue: (wave: EncounterWave, field: string, value: string) => void;\r\n    removeWave: (wave: EncounterWave) => void;\r\n}\r\n\r\nexport default class WaveCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const heading = (\r\n                <div className='heading'>\r\n                    <div className='title'>wave</div>\r\n                </div>\r\n            );\r\n\r\n            const content = (\r\n                <div>\r\n                    <div className='section'>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='wave name'\r\n                            value={this.props.wave.name}\r\n                            onChange={event => this.props.changeValue(this.props.wave, 'name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <ConfirmButton text='delete wave' callback={() => this.props.removeWave(this.props.wave)} />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            return (\r\n                <InfoCard heading={heading} content={content} />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Encounter } from '../../models/encounter';\r\n\r\ninterface Props {\r\n    encounter: Encounter;\r\n    selected: boolean;\r\n    setSelection: (encounter: Encounter) => void;\r\n}\r\n\r\nexport default class EncounterListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const slots = [];\r\n\r\n            this.props.encounter.slots.forEach(slot => {\r\n                let text = slot.monsterName || 'unnamed monster';\r\n                if (slot.count > 1) {\r\n                    text += ' x' + slot.count;\r\n                }\r\n                slots.push(<div key={slot.id} className='text'>{text}</div>);\r\n            });\r\n\r\n            if (slots.length === 0) {\r\n                slots.push(<div key='empty' className='text'>no monsters</div>);\r\n            }\r\n\r\n            this.props.encounter.waves.forEach(wave => {\r\n                slots.push(<div key={'name ' + wave.id} className='text subheading'>{wave.name || 'unnamed wave'}</div>);\r\n                wave.slots.forEach(slot => {\r\n                    let text = slot.monsterName || 'unnamed monster';\r\n                    if (slot.count > 1) {\r\n                        text += ' x' + slot.count;\r\n                    }\r\n                    slots.push(<div key={slot.id} className='text'>{text}</div>);\r\n                });\r\n                if (slots.length === 0) {\r\n                    slots.push(<div key={'empty ' + wave.id} className='text'>no monsters</div>);\r\n                }\r\n            });\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.encounter)}>\r\n                    <div className='heading'>{this.props.encounter.name || 'unnamed encounter'}</div>\r\n                    {slots}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Encounter, EncounterSlot } from '../../models/encounter';\r\nimport { Monster } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\nimport Dropdown from '../controls/dropdown';\r\n\r\ninterface Props {\r\n    encounter: Encounter;\r\n    parties: Party[];\r\n    party: Party | null;\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n}\r\n\r\ninterface State {\r\n    selectedPartyID: string | null;\r\n}\r\n\r\nexport default class DifficultyChartPanel extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        party: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            selectedPartyID: props.party ? props.party.id : null\r\n        };\r\n    }\r\n\r\n    private selectParty(partyID: string) {\r\n        this.setState({\r\n            selectedPartyID: partyID\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        let monsterCount = 0;\r\n        let monsterXp = 0;\r\n        let slots: EncounterSlot[] = [];\r\n        slots = slots.concat(this.props.encounter.slots);\r\n        this.props.encounter.waves.forEach(wave => {\r\n            slots = slots.concat(wave.slots);\r\n        });\r\n        slots.forEach(slot => {\r\n            monsterCount += slot.count;\r\n            const monster = this.props.getMonster(slot.monsterName, slot.monsterGroupName);\r\n            if (monster) {\r\n                monsterXp += Utils.experience(monster.challenge) * slot.count;\r\n            }\r\n        });\r\n\r\n        const adjustedXp = monsterXp * Utils.experienceFactor(monsterCount);\r\n\r\n        let xpThresholds;\r\n        let diffSection;\r\n        const party = this.props.parties.find(p => p.id === this.state.selectedPartyID);\r\n        if (party) {\r\n            let xpEasy = 0;\r\n            let xpMedium = 0;\r\n            let xpHard = 0;\r\n            let xpDeadly = 0;\r\n\r\n            const pcs = party.pcs.filter(pc => pc.active);\r\n            pcs.forEach(pc => {\r\n                xpEasy += Utils.pcExperience(pc.level, 'easy');\r\n                xpMedium += Utils.pcExperience(pc.level, 'medium');\r\n                xpHard += Utils.pcExperience(pc.level, 'hard');\r\n                xpDeadly += Utils.pcExperience(pc.level, 'deadly');\r\n            });\r\n\r\n            let difficulty = null;\r\n            let adjustedDifficulty = null;\r\n            if (adjustedXp > 0) {\r\n                difficulty = 'trivial';\r\n                if (adjustedXp >= xpEasy) {\r\n                    difficulty = 'easy';\r\n                }\r\n                if (adjustedXp >= xpMedium) {\r\n                    difficulty = 'medium';\r\n                }\r\n                if (adjustedXp >= xpHard) {\r\n                    difficulty = 'hard';\r\n                }\r\n                if (adjustedXp >= xpDeadly) {\r\n                    difficulty = 'deadly';\r\n                }\r\n                adjustedDifficulty = difficulty;\r\n\r\n                if ((pcs.length < 3) || (pcs.length > 5)) {\r\n                    const small = pcs.length < 3;\r\n                    switch (difficulty) {\r\n                        case 'trivial':\r\n                            adjustedDifficulty = small ? 'easy' : 'trivial';\r\n                            break;\r\n                        case 'easy':\r\n                            adjustedDifficulty = small ? 'medium' : 'trivial';\r\n                            break;\r\n                        case 'medium':\r\n                            adjustedDifficulty = small ? 'hard' : 'easy';\r\n                            break;\r\n                        case 'hard':\r\n                            adjustedDifficulty = small ? 'deadly' : 'medium';\r\n                            break;\r\n                        case 'deadly':\r\n                            adjustedDifficulty = small ? 'deadly' : 'hard';\r\n                            break;\r\n                        default:\r\n                            adjustedDifficulty = '';\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            xpThresholds = (\r\n                <div className='table'>\r\n                    <div>\r\n                        <div className='cell four'><b>easy</b></div>\r\n                        <div className='cell four'><b>medium</b></div>\r\n                        <div className='cell four'><b>hard</b></div>\r\n                        <div className='cell four'><b>deadly</b></div>\r\n                    </div>\r\n                    <div>\r\n                        <div className='cell four'>{xpEasy} xp</div>\r\n                        <div className='cell four'>{xpMedium} xp</div>\r\n                        <div className='cell four'>{xpHard} xp</div>\r\n                        <div className='cell four'>{xpDeadly} xp</div>\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            const getLeft = (xp: number) => {\r\n                const max = Math.max(adjustedXp, (xpDeadly * 1.2));\r\n                return (100 * xp) / max;\r\n            };\r\n\r\n            const getRight = (xp: number) => {\r\n                return 100 - getLeft(xp);\r\n            };\r\n\r\n            diffSection = (\r\n                <div>\r\n                    <div className='difficulty-gauge'>\r\n                        <div className='bar-container'>\r\n                            <div className='bar trivial' style={{ left: '0', right: getRight(xpEasy) + '%' }} />\r\n                        </div>\r\n                        <div className='bar-container'>\r\n                            <div className='bar easy' style={{ left: getLeft(xpEasy) + '%', right: getRight(xpMedium) + '%' }} />\r\n                        </div>\r\n                        <div className='bar-container'>\r\n                            <div className='bar medium' style={{ left: getLeft(xpMedium) + '%', right: getRight(xpHard) + '%' }} />\r\n                        </div>\r\n                        <div className='bar-container'>\r\n                            <div className='bar hard' style={{ left: getLeft(xpHard) + '%', right: getRight(xpDeadly) + '%' }} />\r\n                        </div>\r\n                        <div className='bar-container'>\r\n                            <div className='bar deadly' style={{ left: getLeft(xpDeadly) + '%', right: '0' }} />\r\n                        </div>\r\n                        <div className='encounter-container'>\r\n                            <div className='encounter' style={{ left: (getLeft(adjustedXp) - 0.5) + '%' }} />\r\n                        </div>\r\n                    </div>\r\n                    <div className='section'>\r\n                        difficulty for this party\r\n                        <div className='right'>{difficulty}</div>\r\n                    </div>\r\n                    <div className='section' style={{ display: (adjustedDifficulty === difficulty) ? 'none' : ''}}>\r\n                        effective difficulty for {pcs.length} pc(s)\r\n                        <div className='right'><b>{adjustedDifficulty}</b></div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        let partySelection = null;\r\n        if (!this.props.party) {\r\n            const partyOptions = [];\r\n            if (this.props.parties) {\r\n                for (let n = 0; n !== this.props.parties.length; ++n) {\r\n                    const p = this.props.parties[n];\r\n                    partyOptions.push({\r\n                        id: p.id,\r\n                        text: p.name\r\n                    });\r\n                }\r\n            }\r\n\r\n            partySelection = (\r\n                <Dropdown\r\n                    options={partyOptions}\r\n                    placeholder='select party...'\r\n                    selectedID={this.state.selectedPartyID ? this.state.selectedPartyID : undefined}\r\n                    select={optionID => this.selectParty(optionID)}\r\n                />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='subheading'>xp value</div>\r\n                <div className='section'>\r\n                    xp for this encounter\r\n                    <div className='right'>{monsterXp} xp</div>\r\n                </div>\r\n                <div className='section' style={{ display: (adjustedXp === monsterXp) ? 'none' : ''}}>\r\n                    effective xp for {monsterCount} monster(s)\r\n                    <div className='right'>{adjustedXp} xp</div>\r\n                </div>\r\n                <div className='subheading'>difficulty</div>\r\n                {partySelection}\r\n                {xpThresholds}\r\n                {diffSection}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { CATEGORY_TYPES, SIZE_TYPES } from '../../models/monster-group';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport Spin from '../controls/spin';\r\n\r\nimport Expander from '../controls/expander';\r\n\r\ninterface Props {\r\n    filter: {\r\n        name: string,\r\n        challengeMin: number;\r\n        challengeMax: number;\r\n        category: string;\r\n        size: string;\r\n    };\r\n    changeValue: (type: 'name' | 'challengeMin' | 'challengeMax' | 'category' | 'size', value: any) => void;\r\n    nudgeValue: (type: 'challengeMin' | 'challengeMax', delta: number) => void;\r\n    resetFilter: () => void;\r\n}\r\n\r\nexport default class FilterPanel extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const sizes = ['all sizes'].concat(SIZE_TYPES);\r\n            const sizeOptions = sizes.map(size => ({ id: size, text: size }));\r\n\r\n            const categories = ['all types'].concat(CATEGORY_TYPES);\r\n            const catOptions = categories.map(cat => ({ id: cat, text: cat }));\r\n\r\n            const content = (\r\n                <div>\r\n                    <input\r\n                        type='text'\r\n                        placeholder='name'\r\n                        value={this.props.filter.name}\r\n                        onChange={event => this.props.changeValue('name', event.target.value)}\r\n                    />\r\n                    <Spin\r\n                        source={this.props.filter}\r\n                        name='challengeMin'\r\n                        label='min cr'\r\n                        display={value => Utils.challenge(value)}\r\n                        nudgeValue={delta => this.props.nudgeValue('challengeMin', delta)}\r\n                    />\r\n                    <Spin\r\n                        source={this.props.filter}\r\n                        name='challengeMax'\r\n                        label='max cr'\r\n                        display={value => Utils.challenge(value)}\r\n                        nudgeValue={delta => this.props.nudgeValue('challengeMax', delta)}\r\n                    />\r\n                    <Dropdown\r\n                        options={sizeOptions}\r\n                        placeholder='filter by size...'\r\n                        selectedID={this.props.filter.size}\r\n                        select={optionID => this.props.changeValue('size', optionID)}\r\n                    />\r\n                    <Dropdown\r\n                        options={catOptions}\r\n                        placeholder='filter by type...'\r\n                        selectedID={this.props.filter.category}\r\n                        select={optionID => this.props.changeValue('category', optionID)}\r\n                    />\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <button onClick={() => this.props.resetFilter()}>clear filter</button>\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            let summary = 'showing';\r\n            if (this.props.filter.size !== 'all sizes') {\r\n                summary += summary ? ' ' + this.props.filter.size : this.props.filter.size;\r\n            }\r\n            if (this.props.filter.category !== 'all types') {\r\n                summary += summary ? ' ' + this.props.filter.category : this.props.filter.category;\r\n            }\r\n            summary += ' monsters of cr ' + Utils.challenge(this.props.filter.challengeMin) + ' to ' + Utils.challenge(this.props.filter.challengeMax);\r\n\r\n            return (\r\n                <Expander\r\n                    text={summary}\r\n                    content={content}\r\n                />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Encounter, EncounterSlot, EncounterWave } from '../../models/encounter';\r\nimport { Monster, MonsterGroup } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\nimport MonsterCard from '../cards/monster-card';\r\nimport WaveCard from '../cards/wave-card';\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport EncounterListItem from '../list-items/encounter-list-item';\r\nimport CardGroup from '../panels/card-group';\r\nimport DifficultyChartPanel from '../panels/difficulty-chart-panel';\r\nimport FilterPanel from '../panels/filter-panel';\r\nimport Note from '../panels/note';\r\n\r\ninterface Props {\r\n    encounters: Encounter[];\r\n    selection: Encounter | null;\r\n    parties: Party[];\r\n    library: MonsterGroup[];\r\n    filter: string;\r\n    selectEncounter: (encounter: Encounter | null) => void;\r\n    addEncounter: () => void;\r\n    removeEncounter: () => void;\r\n    addEncounterSlot: (monster: Monster, waveID: string | null) => void;\r\n    removeEncounterSlot: (encounterSlot: EncounterSlot, waveID: string | null) => void;\r\n    addWave: () => void;\r\n    removeWave: (wave: EncounterWave) => void;\r\n    changeValue: (source: any, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, value: number) => void;\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n}\r\n\r\ninterface State {\r\n    filter: {\r\n        name: string,\r\n        challengeMin: number;\r\n        challengeMax: number;\r\n        category: string;\r\n        size: string;\r\n    };\r\n}\r\n\r\nexport default class EncounterBuilderScreen extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            filter: {\r\n                name: '',\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: 'all types',\r\n                size: 'all sizes'\r\n            }\r\n        };\r\n    }\r\n\r\n    private matchMonster(monster: Monster) {\r\n        if (monster.challenge < this.state.filter.challengeMin) {\r\n            return false;\r\n        }\r\n\r\n        if (monster.challenge > this.state.filter.challengeMax) {\r\n            return false;\r\n        }\r\n\r\n        if (this.state.filter.name !== '') {\r\n            if (!Utils.match(this.state.filter.name, monster.name)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.filter.category !== 'all types') {\r\n            if (monster.category !== this.state.filter.category) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.filter.size !== 'all sizes') {\r\n            if (monster.size !== this.state.filter.size) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private changeFilterValue(type: 'name' | 'challengeMin' | 'challengeMax' | 'category' | 'size', value: any) {\r\n        // eslint-disable-next-line\r\n        this.state.filter[type] = value as never;\r\n        this.setState({\r\n            filter: this.state.filter\r\n        });\r\n    }\r\n\r\n    private nudgeFilterValue(type: 'challengeMin' | 'challengeMax', delta: number) {\r\n        const value = Utils.nudgeChallenge(this.state.filter[type], delta);\r\n        this.changeFilterValue(type, value);\r\n    }\r\n\r\n    private resetFilter() {\r\n        this.setState({\r\n            filter: {\r\n                name: '',\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: 'all types',\r\n                size: 'all sizes'\r\n            }\r\n        });\r\n    }\r\n\r\n    private getMonsterCards(slots: EncounterSlot[], waveID: string | null) {\r\n        const cards = [];\r\n\r\n        slots.forEach(slot => {\r\n            const monster = this.props.getMonster(slot.monsterName, slot.monsterGroupName);\r\n            if (monster) {\r\n                cards.push(\r\n                    <div className='column' key={monster.id}>\r\n                        <MonsterCard\r\n                            combatant={monster}\r\n                            slot={slot}\r\n                            encounter={this.props.selection as Encounter}\r\n                            mode={'view encounter'}\r\n                            nudgeValue={(source, type, delta) => this.props.nudgeValue(source, type, delta)}\r\n                            removeEncounterSlot={source => this.props.removeEncounterSlot(source, waveID)}\r\n                        />\r\n                    </div>\r\n                );\r\n            } else {\r\n                const index = slots.indexOf(slot);\r\n                const error = 'unknown monster: ' + slot.monsterName + ' in group ' + slot.monsterGroupName;\r\n                cards.push(\r\n                    <div className='column' key={index}>\r\n                        <div className='card error'>\r\n                            <div className='card-content'>\r\n                                <div className='section'>\r\n                                    {error}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n        });\r\n\r\n        if (slots.length === 0) {\r\n            cards.push(\r\n                <div className='column' key='empty'>\r\n                    <Note content={<div className='section'>there are no monsters in this {waveID ? 'wave' : 'encounter'}</div>} />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return cards;\r\n    }\r\n\r\n    private getLibrarySection() {\r\n        if (!this.props.selection) {\r\n            return null;\r\n        }\r\n\r\n        const monsters: Monster[] = [];\r\n        if (this.props.selection) {\r\n            this.props.library.forEach(group => {\r\n                group.monsters.forEach(monster => {\r\n                    if (this.matchMonster(monster)) {\r\n                        monsters.push(monster);\r\n                    }\r\n                });\r\n            });\r\n            monsters.sort((a, b) => {\r\n                if (a.name < b.name) { return -1; }\r\n                if (a.name > b.name) { return 1; }\r\n                return 0;\r\n            });\r\n        }\r\n\r\n        const libraryCards = monsters.map(monster => {\r\n            return (\r\n                <div className='column' key={monster.id}>\r\n                    <MonsterCard\r\n                        key={monster.id}\r\n                        combatant={monster}\r\n                        encounter={this.props.selection as Encounter}\r\n                        library={this.props.library}\r\n                        mode={'view encounter'}\r\n                        addEncounterSlot={(combatant, waveID) => this.props.addEncounterSlot(combatant, waveID)}\r\n                    />\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <CardGroup\r\n                heading='monster library'\r\n                content={libraryCards}\r\n                showToggle={true}\r\n            />\r\n        );\r\n    }\r\n\r\n    private showEncounter(enc: Encounter) {\r\n        return Utils.match(this.props.filter, enc.name);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let leftColumn = null;\r\n            if (this.props.selection) {\r\n                leftColumn = (\r\n                    <div>\r\n                        <EncounterInfo\r\n                            selection={this.props.selection}\r\n                            parties={this.props.parties}\r\n                            filter={this.props.filter}\r\n                            monsterFilter={this.state.filter}\r\n                            changeValue={(type, value) => this.props.changeValue(this.props.selection, type, value)}\r\n                            addWave={() => this.props.addWave()}\r\n                            removeEncounter={() => this.props.removeEncounter()}\r\n                            getMonster={(monsterName, monsterGroupName) => this.props.getMonster(monsterName, monsterGroupName)}\r\n                            changeFilterValue={(type, value) => this.changeFilterValue(type, value)}\r\n                            nudgeFilterValue={(type, delta) => this.nudgeFilterValue(type, delta)}\r\n                            resetFilter={() => this.resetFilter()}\r\n                        />\r\n                        <div className='divider' />\r\n                        <button onClick={() => this.props.selectEncounter(null)}>&larr; back to list</button>\r\n                    </div>\r\n                );\r\n            } else {\r\n                let listItems = this.props.encounters.filter(e => this.showEncounter(e)).map(e => {\r\n                    return (\r\n                        <EncounterListItem\r\n                            key={e.id}\r\n                            encounter={e}\r\n                            selected={e === this.props.selection}\r\n                            setSelection={encounter => this.props.selectEncounter(encounter)}\r\n                        />\r\n                    );\r\n                });\r\n                if (listItems.length === 0) {\r\n                    listItems = [(\r\n                        <Note\r\n                            key='empty'\r\n                            content={'you have not defined any encounters yet'}\r\n                        />\r\n                    )];\r\n                }\r\n\r\n                leftColumn = (\r\n                    <div>\r\n                        <button onClick={() => this.props.addEncounter()}>add a new encounter</button>\r\n                        <div className='divider' />\r\n                        {listItems}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            let encounterName;\r\n            const encounterCards: JSX.Element[] = [];\r\n            let waves: JSX.Element[] = [];\r\n\r\n            if (this.props.selection) {\r\n                encounterName = this.props.selection.name || 'unnamed encounter';\r\n\r\n                this.getMonsterCards(this.props.selection.slots, null)\r\n                    .forEach(card => encounterCards.push(card));\r\n\r\n                waves = this.props.selection.waves.map(w => {\r\n                    const waveCards = [];\r\n                    waveCards.push(\r\n                        <div className='column' key='info'>\r\n                            <WaveCard\r\n                                wave={w}\r\n                                removeWave={wave => this.props.removeWave(wave)}\r\n                                changeValue={(source, field, value) => this.props.changeValue(source, field, value)}\r\n                            />\r\n                        </div>\r\n                    );\r\n\r\n                    this.getMonsterCards(w.slots, w.id)\r\n                        .forEach(card => waveCards.push(card));\r\n\r\n                    return (\r\n                        <CardGroup\r\n                            key={w.id}\r\n                            heading={w.name || 'unnamed wave'}\r\n                            content={waveCards}\r\n                            showToggle={true}\r\n                        />\r\n                    );\r\n                });\r\n            }\r\n\r\n            let watermark;\r\n            if (!this.props.selection) {\r\n                watermark = (\r\n                    <div className='vertical-center-outer'>\r\n                        <div className='vertical-center-middle'>\r\n                            <div className='vertical-center-inner'>\r\n                                <HelpCard encounters={this.props.encounters} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='encounter-builder row collapse'>\r\n                    <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                        {leftColumn}\r\n                    </div>\r\n                    <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                        <CardGroup\r\n                            content={encounterCards}\r\n                            heading={encounterName}\r\n                            hidden={!this.props.selection}\r\n                        />\r\n                        {waves}\r\n                        {this.getLibrarySection()}\r\n                        {watermark}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface HelpCardProps {\r\n    encounters: Encounter[];\r\n}\r\n\r\nclass HelpCard extends React.Component<HelpCardProps> {\r\n    public render() {\r\n        try {\r\n            let action: JSX.Element | null = null;\r\n            if (this.props.encounters.length === 0) {\r\n                action = (\r\n                    <div className='section'>to start building an encounter, press the <b>add a new encounter</b> button</div>\r\n                );\r\n            } else {\r\n                action = (\r\n                    <div>\r\n                        <div className='section'>on the left you will see a list of encounters that you have created</div>\r\n                        <div className='section'>select an encounter from the list to add monsters to it</div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <Note\r\n                    content={\r\n                        <div>\r\n                            <div className='section'>on this page you can set up encounters</div>\r\n                            <div className='section'>\r\n                                when you have created an encounter you can add monsters to it, then gauge its difficulty for a party of pcs\r\n                            </div>\r\n                            <div className='divider'/>\r\n                            {action}\r\n                        </div>\r\n                    }\r\n                />\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n\r\ninterface EncounterInfoProps {\r\n    selection: Encounter;\r\n    parties: Party[];\r\n    filter: string;\r\n    monsterFilter: {\r\n        name: string,\r\n        challengeMin: number;\r\n        challengeMax: number;\r\n        category: string;\r\n        size: string;\r\n    };\r\n    changeValue: (field: string, value: string) => void;\r\n    addWave: () => void;\r\n    removeEncounter: () => void;\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n    changeFilterValue: (type: 'name' | 'challengeMin' | 'challengeMax' | 'category' | 'size', value: any) => void;\r\n    nudgeFilterValue: (type: 'challengeMin' | 'challengeMax', delta: number) => void;\r\n    resetFilter: () => void;\r\n}\r\n\r\nclass EncounterInfo extends React.Component<EncounterInfoProps> {\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div>\r\n                    <div className='section'>\r\n                        <div className='subheading'>encounter name</div>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='encounter name'\r\n                            value={this.props.selection.name}\r\n                            disabled={!!this.props.filter}\r\n                            onChange={event => this.props.changeValue('name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <DifficultyChartPanel\r\n                        encounter={this.props.selection}\r\n                        parties={this.props.parties}\r\n                        getMonster={(monsterName, monsterGroupName) => this.props.getMonster(monsterName, monsterGroupName)}\r\n                    />\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <FilterPanel\r\n                            filter={this.props.monsterFilter}\r\n                            changeValue={(type, value) => this.props.changeFilterValue(type, value)}\r\n                            nudgeValue={(type, delta) => this.props.nudgeFilterValue(type, delta)}\r\n                            resetFilter={() => this.props.resetFilter()}\r\n                        />\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.addWave()}>add a new wave</button>\r\n                        <ConfirmButton text='delete encounter' callback={() => this.props.removeEncounter()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    content: string | JSX.Element | JSX.Element[];\r\n}\r\n\r\nexport default class Readaloud extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div className='readaloud'>\r\n                    {this.props.content}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { MonsterGroup } from '../../models/monster-group';\r\n\r\nimport Readaloud from '../panels/readaloud';\r\n\r\ninterface Props {\r\n    library: MonsterGroup[];\r\n    addOpenGameContent: () => void;\r\n}\r\n\r\nexport default class HomeScreen extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            let monsters = null;\r\n            if (this.props.library.length === 0) {\r\n                monsters = (\r\n                    <div>\r\n                        <div className='divider' />\r\n                        <div className='text'>\r\n                            since your collection of monsters is empty, you might want to start by pressing the button below to add monsters from the&nbsp;\r\n                            <a href='http://dnd.wizards.com/articles/features/systems-reference-document-srd' target='_blank' rel='noopener noreferrer'>\r\n                                system reference document\r\n                            </a>\r\n                        </div>\r\n                        <div className='text'>\r\n                            <button onClick={() => this.props.addOpenGameContent()}>add monsters</button>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            const content = (\r\n                <Readaloud\r\n                    content={(\r\n                        <div>\r\n                            <div className='heading'>welcome to <b>dojo</b></div>\r\n                            <div className='divider' />\r\n                            <div className='section'>\r\n                                <b>dojo</b> is an app for dms of dungeons and dragons fifth edition\r\n                            </div>\r\n                            <div className='section'>\r\n                                with <b>dojo</b> you can:\r\n                                <ul>\r\n                                    <li>build unique, challenging monsters</li>\r\n                                    <li>create encounters of just the right difficulty for your players</li>\r\n                                    <li>design intricate tactical maps</li>\r\n                                    <li>run combat without the book-keeping</li>\r\n                                </ul>\r\n                            </div>\r\n                            {monsters}\r\n                            <div className='divider' />\r\n                            <div className='section'>\r\n                                use the buttons at the bottom of the screen to access the app's features\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                />\r\n            );\r\n\r\n            return (\r\n                <div className='home scrollable'>\r\n                    <div className='vertical-center-outer'>\r\n                        <div className='vertical-center-middle'>\r\n                            <div className='vertical-center-inner'>\r\n                                {content}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Map } from '../../models/map-folio';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    map: Map;\r\n    changeValue: (map: Map, field: string, value: string) => void;\r\n    editMap: (map: Map) => void;\r\n    removeMap: (map: Map) => void;\r\n}\r\n\r\nexport default class MapCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div className='card map'>\r\n                    <div className='heading'>\r\n                        <div className='title'>{this.props.map.name || 'unnamed map'}</div>\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='map name'\r\n                                value={this.props.map.name}\r\n                                onChange={event => this.props.changeValue(this.props.map, 'name', event.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='section centered'>\r\n                            <MapPanel\r\n                                map={this.props.map}\r\n                                mode='thumbnail'\r\n                            />\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='section'>\r\n                            <button onClick={() => this.props.editMap(this.props.map)}>edit map</button>\r\n                            <ConfirmButton text='delete map' callback={() => this.props.removeMap(this.props.map)} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { MapFolio } from '../../models/map-folio';\r\n\r\ninterface Props {\r\n    mapFolio: MapFolio;\r\n    selected: boolean;\r\n    filter: string;\r\n    setSelection: (mapFolio: MapFolio) => void;\r\n}\r\n\r\nexport default class MapFolioListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const matchFolio = Utils.match(this.props.filter, this.props.mapFolio.name);\r\n\r\n            const maps = [];\r\n            for (let n = 0; n !== this.props.mapFolio.maps.length; ++n) {\r\n                const map = this.props.mapFolio.maps[n];\r\n                const name = map.name || 'unnamed map';\r\n                if (matchFolio || Utils.match(this.props.filter, name)) {\r\n                    maps.push(<div key={map.id} className='text'>{name}</div>);\r\n                }\r\n            }\r\n            if (maps.length === 0) {\r\n                maps.push(<div key='empty' className='text'>no maps</div>);\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.mapFolio)}>\r\n                    <div className='heading'>{this.props.mapFolio.name || 'unnamed folio'}</div>\r\n                    {maps}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Map, MapFolio } from '../../models/map-folio';\r\n\r\nimport MapCard from '../cards/map-card';\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport MapFolioListItem from '../list-items/map-folio-list-item';\r\nimport CardGroup from '../panels/card-group';\r\nimport Note from '../panels/note';\r\n\r\ninterface Props {\r\n    mapFolios: MapFolio[];\r\n    selection: MapFolio | null;\r\n    filter: string;\r\n    selectMapFolio: (mapFolio: MapFolio | null) => void;\r\n    addMapFolio: () => void;\r\n    removeMapFolio: () => void;\r\n    addMap: () => void;\r\n    editMap: (map: Map) => void;\r\n    removeMap: (map: Map) => void;\r\n    changeValue: (source: {}, field: string, value: any) => void;\r\n}\r\n\r\nexport default class MapFoliosScreen extends React.Component<Props> {\r\n    private showMapFolio(folio: MapFolio) {\r\n        let result = Utils.match(this.props.filter, folio.name);\r\n\r\n        if (!result) {\r\n            folio.maps.forEach(map => {\r\n                result = Utils.match(this.props.filter, map.name) || result;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let leftColumn = null;\r\n            if (this.props.selection) {\r\n                leftColumn = (\r\n                    <div>\r\n                        <MapFolioInfo\r\n                            selection={this.props.selection}\r\n                            filter={this.props.filter}\r\n                            addMap={() => this.props.addMap()}\r\n                            removeMapFolio={() => this.props.removeMapFolio()}\r\n                            changeValue={(source, field, value) => this.props.changeValue(source, field, value)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <button onClick={() => this.props.selectMapFolio(null)}>&larr; back to list</button>\r\n                    </div>\r\n                );\r\n            } else {\r\n                let listItems = this.props.mapFolios.filter(f => this.showMapFolio(f)).map(mapFolio => {\r\n                    return (\r\n                        <MapFolioListItem\r\n                            key={mapFolio.id}\r\n                            mapFolio={mapFolio}\r\n                            filter={this.props.filter}\r\n                            selected={mapFolio === this.props.selection}\r\n                            setSelection={f => this.props.selectMapFolio(f)}\r\n                        />\r\n                    );\r\n                });\r\n                if (listItems.length === 0) {\r\n                    listItems = [(\r\n                        <Note\r\n                            key='empty'\r\n                            content={'you have not set up any tactical maps yet'}\r\n                        />\r\n                    )];\r\n                }\r\n\r\n                leftColumn = (\r\n                    <div>\r\n                        <button onClick={() => this.props.addMapFolio()}>add a new map folio</button>\r\n                        <div className='divider' />\r\n                        {listItems}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            let folio = null;\r\n            if (this.props.selection) {\r\n                const folioCards = [];\r\n\r\n                this.props.selection.maps.filter(m => Utils.match(this.props.filter, m.name)).forEach(m => {\r\n                    folioCards.push(\r\n                        <div className='column' key={m.id}>\r\n                            <MapCard\r\n                                map={m}\r\n                                editMap={map => this.props.editMap(map)}\r\n                                removeMap={map => this.props.removeMap(map)}\r\n                                changeValue={(source, type, value) => this.props.changeValue(source, type, value)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                if (folioCards.length === 0) {\r\n                    folioCards.push(\r\n                        <div className='column' key='empty'>\r\n                            <Note content={<div className='section'>there are no maps in this folio</div>} />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                folio = (\r\n                    <CardGroup\r\n                        content={folioCards}\r\n                        heading={this.props.selection.name || 'unnamed folio'}\r\n                    />\r\n                );\r\n            }\r\n\r\n            let watermark;\r\n            if (!this.props.selection) {\r\n                watermark = (\r\n                    <div className='vertical-center-outer'>\r\n                        <div className='vertical-center-middle'>\r\n                            <div className='vertical-center-inner'>\r\n                                <HelpCard mapFolios={this.props.mapFolios} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='map-builder row collapse'>\r\n                    <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                        {leftColumn}\r\n                    </div>\r\n                    <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                        {folio}\r\n                        {watermark}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface HelpCardProps {\r\n    mapFolios: MapFolio[];\r\n}\r\n\r\nclass HelpCard extends React.Component<HelpCardProps> {\r\n    public render() {\r\n        try {\r\n            let action: JSX.Element | null = null;\r\n            if (this.props.mapFolios.length === 0) {\r\n                action = (\r\n                    <div className='section'>to start a new folio, press the <b>add a new map folio</b> button</div>\r\n                );\r\n            } else {\r\n                action = (\r\n                    <div>\r\n                        <div className='section'>on the left you will see a list of map folios</div>\r\n                        <div className='section'>select a folio from the list to see the maps it contains</div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <Note\r\n                    content={\r\n                        <div>\r\n                            <div className='section'>on this page you can set up folios containing tactical maps</div>\r\n                            <div className='section'>when you have created a map you can use it in encounters</div>\r\n                            <div className='divider'/>\r\n                            {action}\r\n                        </div>\r\n                    }\r\n                />\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n\r\ninterface MapFolioInfoProps {\r\n    selection: MapFolio;\r\n    filter: string | null;\r\n    changeValue: (source: MapFolio, field: string, value: string) => void;\r\n    addMap: () => void;\r\n    removeMapFolio: () => void;\r\n}\r\n\r\nclass MapFolioInfo extends React.Component<MapFolioInfoProps> {\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div>\r\n                    <div className='section'>\r\n                        <div className='subheading'>map folio name</div>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='map folio name'\r\n                            value={this.props.selection.name}\r\n                            disabled={!!this.props.filter}\r\n                            onChange={event => this.props.changeValue(this.props.selection, 'name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.addMap()}>add a new map</button>\r\n                        <ConfirmButton text='delete folio' callback={() => this.props.removeMapFolio()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { MonsterGroup } from '../../models/monster-group';\r\n\r\ninterface Props {\r\n    group: MonsterGroup;\r\n    selected: boolean;\r\n    filter: string;\r\n    setSelection: (group: MonsterGroup) => void;\r\n}\r\n\r\nexport default class MonsterGroupListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const matchGroup = Utils.match(this.props.filter, this.props.group.name);\r\n\r\n            const monsters = [];\r\n            for (let n = 0; n !== this.props.group.monsters.length; ++n) {\r\n                const monster = this.props.group.monsters[n];\r\n                const name = monster.name || 'unnamed monster';\r\n                if (matchGroup || Utils.match(this.props.filter, name)) {\r\n                    monsters.push(<div key={monster.id} className='text'>{name}</div>);\r\n                }\r\n            }\r\n            if (monsters.length === 0) {\r\n                monsters.push(<div key='empty' className='text'>no monsters</div>);\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.group)}>\r\n                    <div className='heading'>{this.props.group.name || 'unnamed group'}</div>\r\n                    {monsters}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Monster, MonsterGroup } from '../../models/monster-group';\r\n\r\nimport MonsterCard from '../cards/monster-card';\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport MonsterGroupListItem from '../list-items/monster-group-list-item';\r\nimport CardGroup from '../panels/card-group';\r\nimport Note from '../panels/note';\r\n\r\ninterface Props {\r\n    library: MonsterGroup[];\r\n    selection: MonsterGroup | null;\r\n    filter: string;\r\n    selectMonsterGroup: (group: MonsterGroup | null) => void;\r\n    addMonsterGroup: () => void;\r\n    removeMonsterGroup: () => void;\r\n    addMonster: () => void;\r\n    removeMonster: (monster: Monster) => void;\r\n    editMonster: (monster: Monster) => void;\r\n    cloneMonster: (monster: Monster, name: string) => void;\r\n    sortMonsters: () => void;\r\n    moveToGroup: (monster: Monster, groupID: string) => void;\r\n    changeValue: (source: any, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, value: number) => void;\r\n}\r\n\r\nexport default class MonsterLibraryScreen extends React.Component<Props> {\r\n    private showMonsterGroup(group: MonsterGroup) {\r\n        let result = Utils.match(this.props.filter, group.name);\r\n\r\n        if (!result) {\r\n            group.monsters.forEach(monster => {\r\n                result = Utils.match(this.props.filter, monster.name) || result;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let leftColumn = null;\r\n            if (this.props.selection) {\r\n                leftColumn = (\r\n                    <div>\r\n                        <MonsterInfo\r\n                            selection={this.props.selection}\r\n                            filter={this.props.filter}\r\n                            addMonster={() => this.props.addMonster()}\r\n                            sortMonsters={() => this.props.sortMonsters()}\r\n                            changeValue={(type, value) => this.props.changeValue(this.props.selection, type, value)}\r\n                            removeMonsterGroup={() => this.props.removeMonsterGroup()}\r\n                        />\r\n                        <div className='divider' />\r\n                        <button onClick={() => this.props.selectMonsterGroup(null)}>&larr; back to list</button>\r\n                    </div>\r\n                );\r\n            } else {\r\n                let listItems = this.props.library.filter(group => this.showMonsterGroup(group)).map(group => {\r\n                    return (\r\n                        <MonsterGroupListItem\r\n                            key={group.id}\r\n                            group={group}\r\n                            filter={this.props.filter}\r\n                            selected={group === this.props.selection}\r\n                            setSelection={grp => this.props.selectMonsterGroup(grp)}\r\n                        />\r\n                    );\r\n                });\r\n                if (listItems.length === 0) {\r\n                    listItems = [(\r\n                        <Note\r\n                            key='empty'\r\n                            content={'you do not have any monsters in your library'}\r\n                        />\r\n                    )];\r\n                }\r\n\r\n                leftColumn = (\r\n                    <div>\r\n                        <button onClick={() => this.props.addMonsterGroup()}>add a new monster group</button>\r\n                        <div className='divider' />\r\n                        {listItems}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            const cards: JSX.Element[] = [];\r\n\r\n            if (this.props.selection) {\r\n                const monsters = this.props.selection.monsters.filter(monster => {\r\n                    return Utils.match(this.props.filter, monster.name);\r\n                });\r\n\r\n                if (monsters.length !== 0) {\r\n                    monsters.forEach(m => {\r\n                        cards.push(\r\n                            <div className='column' key={m.id}>\r\n                                <MonsterCard\r\n                                    combatant={m}\r\n                                    mode={'view editable'}\r\n                                    library={this.props.library}\r\n                                    changeValue={(source, type, value) => this.props.changeValue(source, type, value)}\r\n                                    nudgeValue={(source, type, delta) => this.props.nudgeValue(source, type, delta)}\r\n                                    moveToGroup={(monster, groupID) => this.props.moveToGroup(monster, groupID)}\r\n                                    removeMonster={monster => this.props.removeMonster(monster)}\r\n                                    editMonster={monster => this.props.editMonster(monster)}\r\n                                    cloneMonster={(monster, monsterName) => this.props.cloneMonster(monster, monsterName)}\r\n                                />\r\n                            </div>\r\n                        );\r\n                    });\r\n                } else {\r\n                    cards.push(\r\n                        <div className='column' key='empty'>\r\n                            <Note content={<div className='section'>there are no monsters in this group</div>} />\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n\r\n            let name;\r\n            if (this.props.selection) {\r\n                name = this.props.selection.name;\r\n                if (!name) {\r\n                    name = 'unnamed group';\r\n                }\r\n            }\r\n\r\n            let watermark;\r\n            if (!this.props.selection) {\r\n                watermark = (\r\n                    <div className='vertical-center-outer'>\r\n                        <div className='vertical-center-middle'>\r\n                            <div className='vertical-center-inner'>\r\n                                <HelpCard library={this.props.library} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='monster-library row collapse'>\r\n                    <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                        {leftColumn}\r\n                    </div>\r\n                    <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                        <CardGroup\r\n                            content={cards}\r\n                            heading={name}\r\n                            hidden={!this.props.selection}\r\n                        />\r\n                        {watermark}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface HelpCardProps {\r\n    library: MonsterGroup[];\r\n}\r\n\r\nclass HelpCard extends React.Component<HelpCardProps> {\r\n    public render() {\r\n        let action: JSX.Element | null = null;\r\n        if (this.props.library.length === 0) {\r\n            action = (\r\n                <div className='section'>to start adding monsters, press the <b>add a new monster group</b> button</div>\r\n            );\r\n        } else {\r\n            action = (\r\n                <div>\r\n                    <div className='section'>on the left you will see a list of monster groups</div>\r\n                    <div className='section'>select a monster group from the list to see stat blocks for monsters in that group</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Note\r\n                content={\r\n                    <div>\r\n                        <div className='section'>you can maintain your menagerie of monsters here</div>\r\n                        <div className='divider'/>\r\n                        {action}\r\n                    </div>\r\n                }\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\ninterface MonsterInfoProps {\r\n    selection: MonsterGroup;\r\n    filter: string | null;\r\n    changeValue: (field: string, value: string) => void;\r\n    addMonster: () => void;\r\n    sortMonsters: () => void;\r\n    removeMonsterGroup: () => void;\r\n}\r\n\r\nclass MonsterInfo extends React.Component<MonsterInfoProps> {\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div>\r\n                    <div className='section'>\r\n                        <div className='subheading'>monster group name</div>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='monster group name'\r\n                            value={this.props.selection.name}\r\n                            disabled={!!this.props.filter}\r\n                            onChange={event => this.props.changeValue('name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.addMonster()}>add a new monster</button>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.sortMonsters()}>sort monsters</button>\r\n                        <ConfirmButton text='delete group' callback={() => this.props.removeMonsterGroup()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Party } from '../../models/party';\r\n\r\ninterface Props {\r\n    party: Party;\r\n    selected: boolean;\r\n    filter: string;\r\n    setSelection: (party: Party) => void;\r\n}\r\n\r\nexport default class PartyListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const matchParty = Utils.match(this.props.filter, this.props.party.name);\r\n\r\n            const pcs = [];\r\n            for (let n = 0; n !== this.props.party.pcs.length; ++n) {\r\n                const pc = this.props.party.pcs[n];\r\n                let name = pc.name || 'unnamed pc';\r\n                if (pc.player) {\r\n                    name += ' (' + pc.player + ')';\r\n                }\r\n                if (matchParty || Utils.match(this.props.filter, name)) {\r\n                    pcs.push(<div key={pc.id} className='text'>{name}</div>);\r\n                }\r\n            }\r\n            if (pcs.length === 0) {\r\n                pcs.push(<div key='empty' className='text'>no pcs</div>);\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.party)}>\r\n                    <div className='heading'>{this.props.party.name || 'unnamed party'}</div>\r\n                    {pcs}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Party, PC } from '../../models/party';\r\n\r\nimport PCCard from '../cards/pc-card';\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport PartyListItem from '../list-items/party-list-item';\r\nimport CardGroup from '../panels/card-group';\r\nimport Note from '../panels/note';\r\n\r\ninterface Props {\r\n    parties: Party[];\r\n    selection: Party | null;\r\n    filter: string;\r\n    selectParty: (party: Party | null) => void;\r\n    addParty: () => void;\r\n    removeParty: () => void;\r\n    addPC: () => void;\r\n    editPC: (pc: PC) => void;\r\n    removePC: (pc: PC) => void;\r\n    sortPCs: () => void;\r\n    changeValue: (source: any, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, value: number) => void;\r\n}\r\n\r\nexport default class PartiesScreen extends React.Component<Props> {\r\n    private showParty(party: Party) {\r\n        let result = Utils.match(this.props.filter, party.name);\r\n\r\n        if (!result) {\r\n            party.pcs.forEach(pc => {\r\n                result = Utils.match(this.props.filter, pc.name) || result;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let leftColumn = null;\r\n            if (this.props.selection) {\r\n                leftColumn = (\r\n                    <div>\r\n                        <PartyInfo\r\n                            selection={this.props.selection}\r\n                            filter={this.props.filter}\r\n                            addPC={() => this.props.addPC()}\r\n                            sortPCs={() => this.props.sortPCs()}\r\n                            changeValue={(type, value) => this.props.changeValue(this.props.selection, type, value)}\r\n                            removeParty={() => this.props.removeParty()}\r\n                        />\r\n                        <div className='divider' />\r\n                        <button onClick={() => this.props.selectParty(null)}>&larr; back to list</button>\r\n                    </div>\r\n                );\r\n            } else {\r\n                let listItems = this.props.parties.filter(p => this.showParty(p)).map(p => {\r\n                    return (\r\n                        <PartyListItem\r\n                            key={p.id}\r\n                            party={p}\r\n                            filter={this.props.filter}\r\n                            selected={p === this.props.selection}\r\n                            setSelection={party => this.props.selectParty(party)}\r\n                        />\r\n                    );\r\n                });\r\n                if (listItems.length === 0) {\r\n                    listItems = [(\r\n                        <Note\r\n                            key='empty'\r\n                            content={'you have not set up any parties yet'}\r\n                        />\r\n                    )];\r\n                }\r\n\r\n                leftColumn = (\r\n                    <div>\r\n                        <button onClick={() => this.props.addParty()}>add a new party</button>\r\n                        <div className='divider' />\r\n                        {listItems}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            const activeCards: JSX.Element[] = [];\r\n            const inactiveCards: JSX.Element[] = [];\r\n\r\n            if (this.props.selection) {\r\n                const pcs = this.props.selection.pcs.filter(pc => {\r\n                    return Utils.match(this.props.filter, pc.name);\r\n                });\r\n\r\n                const activePCs = pcs.filter(pc => pc.active);\r\n                activePCs.forEach(activePC => {\r\n                    activeCards.push(\r\n                        <div className='column' key={activePC.id}>\r\n                            <PCCard\r\n                                combatant={activePC}\r\n                                mode={'edit'}\r\n                                changeValue={(pc, type, value) => this.props.changeValue(pc, type, value)}\r\n                                nudgeValue={(pc, type, delta) => this.props.nudgeValue(pc, type, delta)}\r\n                                editPC={pc => this.props.editPC(pc)}\r\n                                removePC={pc => this.props.removePC(pc)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                const inactivePCs = pcs.filter(pc => !pc.active);\r\n                inactivePCs.forEach(inactivePC => {\r\n                    inactiveCards.push(\r\n                        <div className='column' key={inactivePC.id}>\r\n                            <PCCard\r\n                                combatant={inactivePC}\r\n                                mode={'edit'}\r\n                                changeValue={(pc, type, value) => this.props.changeValue(pc, type, value)}\r\n                                nudgeValue={(pc, type, delta) => this.props.nudgeValue(pc, type, delta)}\r\n                                editPC={pc => this.props.editPC(pc)}\r\n                                removePC={pc => this.props.removePC(pc)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                if (activePCs.length === 0) {\r\n                    activeCards.push(\r\n                        <div className='column' key='empty'>\r\n                            <Note content={<div className='section'>there are no pcs in this party</div>} />\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n\r\n            let name;\r\n            if (this.props.selection) {\r\n                name = this.props.selection.name || 'unnamed party';\r\n            }\r\n\r\n            let watermark;\r\n            if (!this.props.selection) {\r\n                watermark = (\r\n                    <div className='vertical-center-outer'>\r\n                        <div className='vertical-center-middle'>\r\n                            <div className='vertical-center-inner'>\r\n                                <HelpCard parties={this.props.parties} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='parties row collapse'>\r\n                    <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                        {leftColumn}\r\n                    </div>\r\n                    <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                        <CardGroup\r\n                            content={activeCards}\r\n                            heading={name}\r\n                            hidden={!this.props.selection}\r\n                        />\r\n                        <CardGroup\r\n                            content={inactiveCards}\r\n                            heading='inactive pcs'\r\n                            hidden={inactiveCards.length === 0}\r\n                        />\r\n                        {watermark}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface HelpCardProps {\r\n    parties: Party[];\r\n}\r\n\r\nclass HelpCard extends React.Component<HelpCardProps> {\r\n    public render() {\r\n        try {\r\n            let action: JSX.Element | null = null;\r\n            if (this.props.parties.length === 0) {\r\n                action = (\r\n                    <div className='section'>to start adding a party, press the <b>add a new party</b> button</div>\r\n                );\r\n            } else {\r\n                action = (\r\n                    <div>\r\n                        <div className='section'>on the left you will see a list of parties that you have created</div>\r\n                        <div className='section'>select a party from the list to see pc details</div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <Note\r\n                    content={\r\n                        <div>\r\n                            <div className='section'>this page is where you can tell dojo all about your pcs</div>\r\n                            <div className='section'>you can add a party for each of your gaming groups</div>\r\n                            <div className='divider'/>\r\n                            {action}\r\n                        </div>\r\n                    }\r\n                />\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n\r\ninterface PartyInfoProps {\r\n    selection: Party;\r\n    filter: string | null;\r\n    changeValue: (field: string, value: string) => void;\r\n    addPC: () => void;\r\n    sortPCs: () => void;\r\n    removeParty: () => void;\r\n}\r\n\r\nclass PartyInfo extends React.Component<PartyInfoProps> {\r\n    public render() {\r\n        try {\r\n            const activePCs = this.props.selection.pcs.filter(pc => pc.active);\r\n\r\n            let summary = null;\r\n\r\n            if (activePCs.length !== 0) {\r\n\r\n                let languages = '';\r\n                let insightSummary = '-';\r\n                let investigationSummary = '-';\r\n                let perceptionSummary = '-';\r\n\r\n                languages = activePCs\r\n                    .map(pc => pc.languages)\r\n                    .join(', ')\r\n                    .split(/[ ,;]+/)\r\n                    .reduce((array: string[], value) => {\r\n                        if (array.indexOf(value) === -1) {\r\n                            array.push(value);\r\n                        }\r\n                        return array;\r\n                    }, [])\r\n                    .sort((a, b) => {\r\n                        if (a === 'Common') {\r\n                            return -1;\r\n                        }\r\n                        if (b === 'Common') {\r\n                            return 1;\r\n                        }\r\n                        return a.localeCompare(b);\r\n                    })\r\n                    .join(', ');\r\n\r\n                const insight: { min: number | null, max: number | null } = { min: null, max: null };\r\n                const invest: { min: number | null, max: number | null } = { min: null, max: null };\r\n                const percep: { min: number | null, max: number | null } = { min: null, max: null };\r\n\r\n                activePCs.forEach(pc => {\r\n                    insight.min = insight.min === null ? pc.passiveInsight : Math.min(insight.min, pc.passiveInsight);\r\n                    insight.max = insight.max === null ? pc.passiveInsight : Math.max(insight.max, pc.passiveInsight);\r\n                    invest.min = invest.min === null ? pc.passiveInvestigation : Math.min(invest.min, pc.passiveInvestigation);\r\n                    invest.max = invest.max === null ? pc.passiveInvestigation : Math.max(invest.max, pc.passiveInvestigation);\r\n                    percep.min = percep.min === null ? pc.passivePerception : Math.min(percep.min, pc.passivePerception);\r\n                    percep.max = percep.max === null ? pc.passivePerception : Math.max(percep.max, pc.passivePerception);\r\n                });\r\n\r\n                insightSummary = insight.min === insight.max ? (insight.min as number).toString() : insight.min + ' - ' + insight.max;\r\n                investigationSummary = invest.min === invest.max ? (invest.min as number).toString() : invest.min + ' - ' + invest.max;\r\n                perceptionSummary = percep.min === percep.max ? (percep.min as number).toString() : percep.min + ' - ' + percep.max;\r\n\r\n                summary = (\r\n                    <div>\r\n                        <div className='section' style={{ display: languages !== '' ? 'block' : 'none' }}>\r\n                            <div className='subheading'>party known languages</div>\r\n                        </div>\r\n                        <div className='section'>\r\n                            {languages}\r\n                        </div>\r\n                        <div className='section'>\r\n                            <div className='subheading'>party passive skills</div>\r\n                        </div>\r\n                        <div className='table'>\r\n                            <div>\r\n                                <div className='cell three'><b>insight</b></div>\r\n                                <div className='cell three'><b>invest.</b></div>\r\n                                <div className='cell three'><b>percep.</b></div>\r\n                            </div>\r\n                            <div>\r\n                                <div className='cell three'>{insightSummary}</div>\r\n                                <div className='cell three'>{investigationSummary}</div>\r\n                                <div className='cell three'>{perceptionSummary}</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div>\r\n                    <div className='section'>\r\n                        <div className='subheading'>party name</div>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='party name'\r\n                            value={this.props.selection.name}\r\n                            disabled={!!this.props.filter}\r\n                            onChange={event => this.props.changeValue('name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    {summary}\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.addPC()}>add a new pc</button>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.sortPCs()}>sort pcs</button>\r\n                        <ConfirmButton text='delete party' callback={() => this.props.removeParty()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport Selector from '../controls/selector';\r\nimport Spin from '../controls/spin';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    //\r\n}\r\n\r\ninterface State {\r\n    dice: string;\r\n    count: number;\r\n    rolls: number[] | null;\r\n    result: number | null;\r\n}\r\n\r\nexport default class DieRollerModule extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            dice: '20',\r\n            count: 1,\r\n            rolls: null,\r\n            result: null\r\n        };\r\n    }\r\n\r\n    private setDice(dice: string) {\r\n        this.setState({\r\n            dice: dice\r\n        });\r\n    }\r\n\r\n    private nudgeCount(delta: number) {\r\n        this.setState({\r\n            count: Math.max(1, this.state.count + delta)\r\n        });\r\n    }\r\n\r\n    private roll() {\r\n        const sides = parseInt(this.state.dice, 10);\r\n\r\n        const rolls: number[] = [];\r\n        for (let n = 0; n !== this.state.count; ++n) {\r\n            rolls.push(Utils.dieRoll(sides));\r\n        }\r\n        rolls.sort((a, b) => a - b);\r\n\r\n        let result = 0;\r\n        rolls.forEach(roll => result += roll);\r\n\r\n        this.setState({\r\n            rolls: rolls,\r\n            result: result\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        const options = [\r\n            {\r\n                id: '4',\r\n                text: 'd4'\r\n            },\r\n            {\r\n                id: '6',\r\n                text: 'd6'\r\n            },\r\n            {\r\n                id: '8',\r\n                text: 'd8'\r\n            },\r\n            {\r\n                id: '10',\r\n                text: 'd10'\r\n            },\r\n            {\r\n                id: '12',\r\n                text: 'd12'\r\n            },\r\n            {\r\n                id: '20',\r\n                text: 'd20'\r\n            },\r\n            {\r\n                id: '100',\r\n                text: 'd100'\r\n            }\r\n        ];\r\n\r\n        let rollsSection = null;\r\n        if (this.state.rolls !== null) {\r\n            rollsSection = (\r\n                <div className='section die-rolls'>{this.state.rolls.join(', ')}</div>\r\n            );\r\n        }\r\n\r\n        let resultSection = null;\r\n        if (this.state.result !== null) {\r\n            resultSection = (\r\n                <div className='section die-result'>{this.state.result}</div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className='die-roller'>\r\n                <div className='subheading'>die type</div>\r\n                <Selector\r\n                    options={options}\r\n                    selectedID={this.state.dice}\r\n                    select={optionID => this.setDice(optionID)}\r\n                />\r\n                <div className='subheading'>number to roll</div>\r\n                <Spin\r\n                    source={this.state}\r\n                    name='count'\r\n                    display={count => count + 'd' + this.state.dice}\r\n                    nudgeValue={delta => this.nudgeCount(delta)}\r\n                />\r\n                <div className='divider' />\r\n                <button onClick={() => this.roll()}>roll dice</button>\r\n                {rollsSection}\r\n                {resultSection}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import Utils from './utils';\r\n\r\ninterface ModelLine {\r\n    prev: string;\r\n    freq: ModelChar[];\r\n}\r\n\r\ninterface ModelChar {\r\n    char: string;\r\n    count: number;\r\n}\r\n\r\nexport default class Shakespeare {\r\n\r\n    private static model: ModelLine[] = [];\r\n    private static maxLength: number = 0;\r\n\r\n    public static initModel(sources: string[]) {\r\n        const model: ModelLine[] = [];\r\n        let maxLength: number = 0;\r\n\r\n        sources.forEach(source => {\r\n            const lines = source.split(/\\r?\\n/);\r\n            lines.forEach(line => {\r\n                if (line) {\r\n                    Shakespeare.addLineToModel(line, model);\r\n                    maxLength = Math.max(maxLength, line.length);\r\n                }\r\n            });\r\n        });\r\n\r\n        Shakespeare.model = model;\r\n        Shakespeare.maxLength = maxLength;\r\n    }\r\n\r\n    private static addLineToModel(line: string, model: ModelLine[]) {\r\n        line = String.fromCharCode(0, 1) + line + String.fromCharCode(2);\r\n\r\n        for (let index = 2; index !== line.length; ++index) {\r\n            const prev = line.substr(index - 2, 2);\r\n            const char = line.substr(index, 1);\r\n\r\n            let item = model.find(x => x.prev === prev);\r\n            if (!item) {\r\n                item = {\r\n                    prev: prev,\r\n                    freq: []\r\n                };\r\n                model.push(item);\r\n            }\r\n\r\n            let freq = item.freq.find(x => x.char === char);\r\n            if (!freq) {\r\n                freq = {\r\n                    char: char,\r\n                    count: 0\r\n                };\r\n                item.freq.push(freq);\r\n            }\r\n\r\n            freq.count += 1;\r\n        }\r\n    }\r\n\r\n    public static generate(requiredResults: number): { line: string, fit: number }[] {\r\n        const lines: { line: string, fit: number }[] = [];\r\n        const allowedFailures = 100;\r\n        let failures = 0;\r\n\r\n        while ((lines.length < requiredResults) && (failures < allowedFailures)) {\r\n            const line = Shakespeare.extractLine();\r\n            if (line && !lines.map(l => l.line).includes(line) && line.length <= Shakespeare.maxLength) {\r\n                const fit = Shakespeare.fit(line);\r\n                lines.push({ line, fit });\r\n            } else {\r\n                failures += 1;\r\n            }\r\n        }\r\n\r\n        return lines;\r\n    }\r\n\r\n    private static extractLine() {\r\n        let line = String.fromCharCode(0, 1);\r\n\r\n        while (true) {\r\n            const prev = line.substr(line.length - 2, 2);\r\n\r\n            const item = Shakespeare.model.find(x => x.prev === prev);\r\n            if (item) {\r\n                let candidates = '';\r\n                item.freq.forEach(freq => {\r\n                    candidates += freq.char.repeat(freq.count);\r\n                });\r\n\r\n                const index = Math.floor(Math.random() * candidates.length);\r\n                let char = candidates[index];\r\n                if (char === String.fromCharCode(2)) {\r\n                    line = line.substr(2);\r\n                    return line;\r\n                } else {\r\n                    if (Utils.dieRoll() === 1) {\r\n                        // TODO: Mutate choice\r\n                        const groups = ['bdg', 'ptk', 'sz', 'aeiouy', 'lr', 'ckq', 'vf'];\r\n                        groups.forEach(g => {\r\n                            if (g.includes(char)) {\r\n                                const n = Math.floor(Math.random() * g.length);\r\n                                char = g[n];\r\n                            }\r\n                        });\r\n                    }\r\n                    line += char;\r\n                }\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n\r\n    private static fit(text: string): number {\r\n        text = String.fromCharCode(0, 1) + text + String.fromCharCode(2);\r\n\r\n        const values: number[] = [];\r\n        for (let n = 2; n !== text.length; ++n) {\r\n            const prev = text.substr(n - 2, 2);\r\n            const ch = text[n];\r\n\r\n            const line = Shakespeare.model.find(m => m.prev === prev);\r\n            if (line) {\r\n                const mc = line.freq.find(f => f.char === ch);\r\n                if (mc) {\r\n                    const maxCount = line.freq.reduce((max, value) => Math.max(max, value.count), 0);\r\n                    const fit = mc.count / maxCount;\r\n                    values.push(fit);\r\n                } else {\r\n                    values.push(0);\r\n                }\r\n            }\r\n        }\r\n\r\n        return values.reduce((sum, value) => sum + value, 0) / values.length;\r\n    }\r\n}\r\n","export default class Ustinov {\r\n    public static async say(text: string, languages: string[]) {\r\n        // If we're  already saying something, stop it\r\n        window.speechSynthesis.cancel();\r\n\r\n        const utterance = new SpeechSynthesisUtterance(text);\r\n        utterance.voice = await Ustinov.chooseVoice(languages);\r\n        utterance.rate = Ustinov.randomValue(0.5, 1.5);\r\n        utterance.pitch = Ustinov.randomValue(0.5, 1.5);\r\n\r\n        window.speechSynthesis.speak(utterance);\r\n    }\r\n\r\n    private static async chooseVoice(languages: string[]) {\r\n        const voices = await Ustinov.getVoices();\r\n\r\n        // Get language codes for the selected languages\r\n        const langCodes = languages.map(lang => Ustinov.getLanguageCode(lang));\r\n\r\n        // Filter voice list by these language codes\r\n        let candidates = voices.filter(v => langCodes.includes(v.lang.substr(0, 2)));\r\n        if (candidates.length === 0) {\r\n            candidates = voices.filter(v => v.default);\r\n        }\r\n        if (candidates.length === 0) {\r\n            candidates = voices;\r\n        }\r\n\r\n        const index = Math.floor(Math.random() * candidates.length);\r\n        return candidates[index];\r\n    }\r\n\r\n    private static getVoices() {\r\n        return new Promise<SpeechSynthesisVoice[]>(resolve => {\r\n            let list = window.speechSynthesis.getVoices();\r\n            if (list.length > 0) {\r\n                resolve(list);\r\n                return;\r\n            }\r\n            speechSynthesis.onvoiceschanged = () => {\r\n                list = window.speechSynthesis.getVoices();\r\n                resolve(list);\r\n            };\r\n        });\r\n    }\r\n\r\n    private static getLanguageCode(language: string) {\r\n        switch (language) {\r\n            case 'armenian':\r\n                return 'hy';\r\n            case 'basque':\r\n                return 'eu';\r\n            case 'bulgarian':\r\n                return 'bg';\r\n            case 'chichewa':\r\n                return 'ny';\r\n            case 'chinese':\r\n                return 'zh';\r\n            case 'croatian':\r\n                return 'hr';\r\n            case 'czech':\r\n                return 'cs';\r\n            case 'dutch':\r\n                return 'nl';\r\n            case 'german':\r\n                return 'de';\r\n            case 'greek':\r\n                return 'el';\r\n            case 'icelandic':\r\n                return 'is';\r\n            case 'irish':\r\n                return 'ga';\r\n            case 'kannada':\r\n                return 'kn';\r\n            case 'kazakh':\r\n                return 'kk';\r\n            case 'latvian':\r\n                return 'lv';\r\n            case 'lithuanian':\r\n                return 'lt';\r\n            case 'macedonian':\r\n                return 'mk';\r\n            case 'malay':\r\n                return 'ms';\r\n            case 'maltese':\r\n                return 'mt';\r\n            case 'maori':\r\n                return 'mi';\r\n            case 'polish':\r\n                return 'pl';\r\n            case 'portuguese':\r\n                return 'pt';\r\n            case 'punjabi':\r\n                return 'pa';\r\n            case 'samoan':\r\n                return 'sm';\r\n            case 'serbian':\r\n                return 'sr';\r\n            case 'shona':\r\n                return 'sn';\r\n            case 'spanish':\r\n                return 'es';\r\n            case 'swedish':\r\n                return 'sv';\r\n            case 'turkish':\r\n                return 'tr';\r\n            case 'welsh':\r\n                return 'cy';\r\n            default:\r\n                return language.substr(0, 2);\r\n        }\r\n    }\r\n\r\n    private static randomValue(min: number, max: number) {\r\n        const x = (Math.random() + Math.random() + Math.random()) / 3;\r\n        const range = max - min;\r\n        return min + (x * range);\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Shakespeare from '../../utils/shakespeare';\r\nimport Ustinov from '../../utils/ustinov';\r\n\r\nimport Checkbox from '../controls/checkbox';\r\nimport ControlRow from '../controls/control-row';\r\nimport Expander from '../controls/expander';\r\nimport Selector from '../controls/selector';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    //\r\n}\r\n\r\ninterface State {\r\n    sources: { [id: string]: string; };\r\n    output: string[];\r\n}\r\n\r\ninterface Preset {\r\n    name: string;\r\n    languages: string[];\r\n}\r\n\r\nexport default class LanguageModule extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            sources: {},\r\n            output: []\r\n        };\r\n    }\r\n\r\n    private getLanguages(): string[] {\r\n        // Note: When adding a language to this list, also check the Speech.getLanguageCode() method\r\n        return [\r\n            'afrikaans',\r\n            'amharic',\r\n            'armenian',\r\n            'basque',\r\n            'belarusian',\r\n            'bulgarian',\r\n            'chichewa',\r\n            'chinese',\r\n            'croatian',\r\n            'czech',\r\n            'danish',\r\n            'dutch',\r\n            'english',\r\n            'finnish',\r\n            'french',\r\n            'german',\r\n            'greek',\r\n            'hawaiian',\r\n            'hindi',\r\n            'hungarian',\r\n            'icelandic',\r\n            'irish',\r\n            'italian',\r\n            'japanese',\r\n            'kannada',\r\n            'kazakh',\r\n            'korean',\r\n            'kyrgyz',\r\n            'latvian',\r\n            'lithuanian',\r\n            'macedonian',\r\n            'malay',\r\n            'maltese',\r\n            'maori',\r\n            'myanmar',\r\n            'nepali',\r\n            'norwegian',\r\n            'polish',\r\n            'portuguese',\r\n            'punjabi',\r\n            'romanian',\r\n            'russian',\r\n            'samoan',\r\n            'serbian',\r\n            'shona',\r\n            'somali',\r\n            'spanish',\r\n            'swahili',\r\n            'swedish',\r\n            'thai',\r\n            'turkish',\r\n            'welsh',\r\n            'yiddish',\r\n            'zulu'\r\n        ];\r\n    }\r\n\r\n    private getPresets(): Preset[] {\r\n        return [\r\n            {\r\n                name: 'draconic',\r\n                languages: ['armenian', 'irish', 'maltese']\r\n            },\r\n            {\r\n                name: 'dwarvish',\r\n                languages: ['czech', 'german', 'yiddish']\r\n            },\r\n            {\r\n                name: 'elvish',\r\n                languages: ['finnish', 'spanish', 'welsh']\r\n            },\r\n            {\r\n                name: 'goblin',\r\n                languages: ['hawaiian', 'kyrgyz', 'somali']\r\n            },\r\n            {\r\n                name: 'orc',\r\n                languages: ['macedonian', 'russian', 'turkish']\r\n            }\r\n        ];\r\n    }\r\n\r\n    private async addLanguage(language: string) {\r\n        const response = await fetch('./data/langs/' + language + '.txt');\r\n        this.state.sources[language] = await response.text();\r\n        this.setState({\r\n            sources: this.state.sources\r\n        });\r\n    }\r\n\r\n    private removeLanguage(language: string) {\r\n        delete this.state.sources[language];\r\n        this.setState({\r\n            sources: this.state.sources\r\n        });\r\n    }\r\n\r\n    private usePreset(presetName: string) {\r\n        const preset = this.getPresets().find(p => p.name === presetName);\r\n        if (preset) {\r\n            this.setState({\r\n                sources: {},\r\n                output: []\r\n            }, () => {\r\n                preset.languages.forEach(lang => {\r\n                    this.addLanguage(lang);\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    private random() {\r\n        const languages = this.getLanguages();\r\n\r\n        const selection: string[] = [];\r\n        while (selection.length !== 3) {\r\n            const n = Math.floor(Math.random() * languages.length);\r\n            const lang = languages[n];\r\n            if (!selection.includes(lang)) {\r\n                selection.push(lang);\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            sources: {},\r\n            output: []\r\n        }, () => {\r\n            selection.forEach(lang => {\r\n                this.addLanguage(lang);\r\n            });\r\n        });\r\n    }\r\n\r\n    private generate() {\r\n        const sources: string[] = [];\r\n        Object.keys(this.state.sources).forEach(key => {\r\n            const src = this.state.sources[key];\r\n            sources.push(src);\r\n        });\r\n        Shakespeare.initModel(sources);\r\n        this.setState({\r\n            output: Shakespeare.generate(5).map(l => l.line)\r\n        });\r\n    }\r\n\r\n    private reset() {\r\n        this.setState({\r\n            sources: {},\r\n            output: []\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        const presetOptions = this.getPresets().map(p => {\r\n            return {\r\n                id: p.name,\r\n                text: p.name\r\n            };\r\n        });\r\n\r\n        let selectedPreset = '';\r\n        this.getPresets().forEach(p => {\r\n            const selected = Object.keys(this.state.sources).sort().join(', ');\r\n            const setting = p.languages.sort().join(', ');\r\n            if (selected === setting) {\r\n                selectedPreset = p.name;\r\n            }\r\n        });\r\n\r\n        let selectedLanguages = Object.keys(this.state.sources).sort().join(', ');\r\n        if (selectedLanguages === '') {\r\n            selectedLanguages = 'none';\r\n        }\r\n\r\n        const languages = this.getLanguages()\r\n            .map(lang => {\r\n                const isSelected = Object.keys(this.state.sources).includes(lang);\r\n                return (\r\n                    <div className='column' key={lang}>\r\n                        <Checkbox\r\n                            label={lang}\r\n                            display='button'\r\n                            checked={isSelected}\r\n                            changeValue={value => value ? this.addLanguage(lang) : this.removeLanguage(lang)}\r\n                        />\r\n                    </div>\r\n                );\r\n            });\r\n\r\n        const allowGenerate = Object.keys(this.state.sources).length > 0;\r\n        const allowReset = allowGenerate || this.state.output.length > 0;\r\n\r\n        const output = [];\r\n        if (this.state.output.length > 0) {\r\n            output.push(\r\n                <div key='div' className='divider' />\r\n            );\r\n        }\r\n        for (let n = 0; n !== this.state.output.length; ++n) {\r\n            output.push(\r\n                <GeneratedText\r\n                    key={n}\r\n                    text={this.state.output[n]}\r\n                    languages={Object.keys(this.state.sources)}\r\n                />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className='language'>\r\n                <div className='heading'>presets</div>\r\n                <Selector\r\n                    options={presetOptions}\r\n                    selectedID={selectedPreset}\r\n                    select={optionID => this.usePreset(optionID)}\r\n                />\r\n                <div className='divider' />\r\n                <Expander\r\n                    text={'selected languages: ' + selectedLanguages}\r\n                    content={\r\n                        <div className='row collapse small-up-1 medium-up-2 large-up-3 language-options'>\r\n                            {languages}\r\n                        </div>\r\n                    }\r\n                />\r\n                <div className='divider' />\r\n                <ControlRow\r\n                    controls={[\r\n                        <button key='generate' className={allowGenerate ? '' : 'disabled'} onClick={() => this.generate()}>generate text</button>,\r\n                        <button key='reset' className={allowReset ? '' : 'disabled'} onClick={() => this.reset()}>reset</button>,\r\n                        <button key='random' onClick={() => this.random()}>random sources</button>\r\n                    ]}\r\n                />\r\n                <div className='language-output'>\r\n                    {output}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface GeneratedTextProps {\r\n    text: string;\r\n    languages: string[];\r\n}\r\n\r\nclass GeneratedText extends React.Component<GeneratedTextProps> {\r\n    private copy(e: React.MouseEvent) {\r\n        e.preventDefault();\r\n        navigator.clipboard.writeText(this.props.text);\r\n    }\r\n\r\n    private say(e: React.MouseEvent) {\r\n        e.preventDefault();\r\n        Ustinov.say(this.props.text, this.props.languages);\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <Expander\r\n                text={this.props.text.toLowerCase()}\r\n                content={\r\n                    <div>\r\n                        <button onClick={e => this.copy(e)}>copy to clipboard</button>\r\n                        <button onClick={e => this.say(e)}>say</button>\r\n                        <div className='section'>\r\n                            <b>note:</b> speech may not work consistently on all platforms\r\n                        </div>\r\n                    </div>\r\n                }\r\n            />\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Shakespeare from '../../utils/shakespeare';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    //\r\n}\r\n\r\ninterface State {\r\n    output: {\r\n        male: string[],\r\n        female: string[],\r\n        surname: string[]\r\n    };\r\n}\r\n\r\nexport default class NameModule extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            output: {\r\n                male: [],\r\n                female: [],\r\n                surname: []\r\n            }\r\n        };\r\n    }\r\n\r\n    private async generate(type: 'male' | 'female' | 'surname') {\r\n        const response = await fetch('./data/names/' + type + '.txt');\r\n        const input = await response.text();\r\n\r\n        Shakespeare.initModel([input]);\r\n        const names = Shakespeare.generate(10).map(n => n.line).sort();\r\n\r\n        this.state.output[type] = names;\r\n        this.setState({\r\n            output: this.state.output\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        const male = [];\r\n        for (let n = 0; n !== this.state.output.male.length; ++n) {\r\n            male.push(\r\n                <div key={n} className='section'>\r\n                    {this.state.output.male[n].toLowerCase()}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        const female = [];\r\n        for (let n = 0; n !== this.state.output.female.length; ++n) {\r\n            female.push(\r\n                <div key={n} className='section'>\r\n                    {this.state.output.female[n].toLowerCase()}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        const surname = [];\r\n        for (let n = 0; n !== this.state.output.surname.length; ++n) {\r\n            surname.push(\r\n                <div key={n} className='section'>\r\n                    {this.state.output.surname[n].toLowerCase()}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className='name'>\r\n                <div className='name-output'>\r\n                    <div className='row'>\r\n                        <div className='columns small-4 medium-4 large-4'>\r\n                            <div className='heading'>male names</div>\r\n                            <button onClick={() => this.generate('male')}>generate</button>\r\n                            {male}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4'>\r\n                            <div className='heading'>female names</div>\r\n                            <button onClick={() => this.generate('female')}>generate</button>\r\n                            {female}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4'>\r\n                            <div className='heading'>surnames</div>\r\n                            <button onClick={() => this.generate('surname')}>generate</button>\r\n                            {surname}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Showdown from 'showdown';\r\n\r\nimport Selector from '../controls/selector';\r\n\r\nconst showdown = new Showdown.Converter();\r\nshowdown.setOption('tables', true);\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    //\r\n}\r\n\r\ninterface State {\r\n    view: string;\r\n    source: string | null;\r\n}\r\n\r\nexport default class ReferenceModule extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            view: 'skills',\r\n            source: null\r\n        };\r\n    }\r\n\r\n    private setView(view: string) {\r\n        this.setState({\r\n            view: view,\r\n            source: null\r\n        });\r\n    }\r\n\r\n    private async fetchData() {\r\n        const response = await fetch('./data/' + this.state.view + '.md');\r\n        const text = await response.text();\r\n        this.setState({\r\n            source: text\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        if (this.state.view && !this.state.source) {\r\n            this.fetchData();\r\n        }\r\n\r\n        const options = [\r\n            {\r\n                id: 'skills',\r\n                text: 'skills'\r\n            },\r\n            {\r\n                id: 'conditions',\r\n                text: 'conditions'\r\n            },\r\n            {\r\n                id: 'actions',\r\n                text: 'actions'\r\n            }\r\n        ];\r\n\r\n        return (\r\n            <div className='reference'>\r\n                <Selector\r\n                    options={options}\r\n                    selectedID={this.state.view}\r\n                    select={optionID => this.setView(optionID)}\r\n                />\r\n                <div dangerouslySetInnerHTML={{ __html: showdown.makeHtml(this.state.source || '') }} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport Selector from '../controls/selector';\r\nimport DieRollerModule from '../dm-modules/die-roller-module';\r\nimport LanguageModule from '../dm-modules/language-module';\r\nimport NameModule from '../dm-modules/name-module';\r\nimport ReferenceModule from '../dm-modules/reference-module';\r\nimport Note from '../panels/note';\r\n\r\nimport pkg from '../../../package.json';\r\n\r\ninterface Props {\r\n    resetAll: () => void;\r\n    changeValue: (source: {}, field: string, value: any) => void;\r\n}\r\n\r\ninterface State {\r\n    view: string;\r\n    module: string | null;\r\n}\r\n\r\nexport default class AboutModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            view: 'dm',\r\n            module: 'reference'\r\n        };\r\n    }\r\n\r\n    private setView(view: string) {\r\n        this.setState({\r\n            view: view\r\n        });\r\n    }\r\n\r\n    private setModule(module: string) {\r\n        this.setState({\r\n            module: module\r\n        });\r\n    }\r\n\r\n    private getTools() {\r\n        if (this.state.view !== 'dm') {\r\n            return null;\r\n        }\r\n\r\n        const modules = [\r\n            {\r\n                id: 'reference',\r\n                text: 'd&d reference'\r\n            },\r\n            {\r\n                id: 'names',\r\n                text: 'name generator'\r\n            },\r\n            {\r\n                id: 'language',\r\n                text: 'language generator'\r\n            },\r\n            {\r\n                id: 'die-roller',\r\n                text: 'die roller'\r\n            }\r\n        ];\r\n\r\n        let module = (\r\n            <Note\r\n                content={(\r\n                    <div className='section'>\r\n                        <b>dojo</b> includes several dm tools; select one of them above\r\n                    </div>\r\n                )}\r\n            />\r\n        );\r\n\r\n        switch (this.state.module) {\r\n            case 'reference':\r\n                module = (\r\n                    <ReferenceModule />\r\n                );\r\n                break;\r\n            case 'language':\r\n                module = (\r\n                    <LanguageModule />\r\n                );\r\n                break;\r\n            case 'names':\r\n                module = (\r\n                    <NameModule />\r\n                );\r\n                break;\r\n            case 'die-roller':\r\n                module = (\r\n                    <DieRollerModule />\r\n                );\r\n                break;\r\n        }\r\n\r\n        return (\r\n            <div className='dm-screen'>\r\n                <Selector\r\n                    options={modules}\r\n                    selectedID={this.state.module}\r\n                    select={moduleID => this.setModule(moduleID)}\r\n                />\r\n                <div className='divider' />\r\n                <div className='dm-module'>\r\n                    {module}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getAbout() {\r\n        if (this.state.view !== 'about') {\r\n            return null;\r\n        }\r\n\r\n        /* tslint:disable:max-line-length */\r\n        return (\r\n            <div>\r\n                <div className='section'>dojo by <a href='mailto:andy.aiken@live.co.uk'>andy aiken</a></div>\r\n                <div className='section'>version <b>{pkg.version}</b></div>\r\n                <div className='section'>if you would like to contribut to this project, you can do so <a href='https://github.com/andyaiken/dojo' target='_blank' rel='noopener noreferrer'>here</a></div>\r\n                <div className='section'>dungeons and dragons copyright wizards of the coast</div>\r\n                <div className='heading'>options</div>\r\n                <ConfirmButton text='clear all data' callback={() => this.props.resetAll()} />\r\n                <div className='heading'>open game license</div>\r\n                <div className='section'>The following text is the property of Wizards of the Coast, Inc. and is Copyright 2000 Wizards of the Coast, Inc ('Wizards'). All Rights Reserved.</div>\r\n                <ol>\r\n                    <li>Definitions: (a)'Contributors' means the copyright and/or trademark owners who have contributed Open Game Content; (b)'Derivative Material' means copyrighted material including derivative works and translations (including into other computer languages), potation, modification, correction, addition, extension, upgrade, improvement, compilation, abridgment or other form in which an existing work may be recast, transformed or adapted; (c) 'Distribute' means to reproduce, license, rent, lease, sell, broadcast, publicly display, transmit or otherwise distribute; (d)'Open Game Content' means the game mechanic and includes the methods, procedures, processes and routines to the extent such content does not embody the Product Identity and is an enhancement over the prior art and any additional content clearly identified as Open Game Content by the Contributor, and means any work covered by this License, including translations and derivative works under copyright law, but specifically excludes Product Identity. (e) 'Product Identity' means product and product line names, logos and identifying marks including trade dress; artifacts; creatures characters; stories, storylines, plots, thematic elements, dialogue, incidents, language, artwork, symbols, designs, depictions, likenesses, formats, poses, concepts, themes and graphic, photographic and other visual or audio representations; names and descriptions of characters, spells, enchantments, personalities, teams, personas, likenesses and special abilities; places, locations, environments, creatures, equipment, magical or supernatural abilities or effects, logos, symbols, or graphic designs; and any other trademark or registered trademark clearly identified as Product identity by the owner of the Product Identity, and which specifically excludes the Open Game Content; (f) 'Trademark' means the logos, names, mark, sign, motto, designs that are used by a Contributor to identify itself or its products or the associated products contributed to the Open Game License by the Contributor (g) 'Use', 'Used' or 'Using' means to use, Distribute, copy, edit, format, modify, translate and otherwise create Derivative Material of Open Game Content. (h) 'You' or 'Your' means the licensee in terms of this agreement.</li>\r\n                    <li>The License: This License applies to any Open Game Content that contains a notice indicating that the Open Game Content may only be Used under and in terms of this License. You must affix such a notice to any Open Game Content that you Use. No terms may be added to or subtracted from this License except as described by the License itself. No other terms or conditions may be applied to any Open Game Content distributed using this License.</li>\r\n                    <li>Offer and Acceptance: By Using the Open Game Content You indicate Your acceptance of the terms of this License.</li>\r\n                    <li>Grant and Consideration: In consideration for agreeing to use this License, the Contributors grant You a perpetual, worldwide, royalty-free, non-exclusive license with the exact terms of this License to Use, the Open Game Content.</li>\r\n                    <li>Representation of Authority to Contribute: If You are contributing original material as Open Game Content, You represent that Your Contributions are Your original creation and/or You have sufficient rights to grant the rights conveyed by this License.</li>\r\n                    <li>Notice of License Copyright: You must update the COPYRIGHT NOTICE portion of this License to include the exact text of the COPYRIGHT NOTICE of any Open Game Content You are copying, modifying or distributing, and You must add the title, the copyright date, and the copyright holder's name to the COPYRIGHT NOTICE of any original Open Game Content you Distribute.</li>\r\n                    <li>Use of Product Identity: You agree not to Use any Product Identity, including as an indication as to compatibility, except as expressly licensed in another, independent Agreement with the owner of each element of that Product Identity. You agree not to indicate compatibility or co-adaptability with any Trademark or Registered Trademark in conjunction with a work containing Open Game Content except as expressly licensed in another, independent Agreement with the owner of such Trademark or Registered Trademark. The use of any Product Identity in Open Game Content does not constitute a challenge to the ownership of that Product Identity. The owner of any Product Identity used in Open Game Content shall retain all rights, title and interest in and to that Product Identity.</li>\r\n                    <li>Identification: If you distribute Open Game Content You must clearly indicate which portions of the work that you are distributing are Open Game Content.</li>\r\n                    <li>Updating the License: Wizards or its designated Agents may publish updated versions of this License. You may use any authorized version of this License to copy, modify and distribute any Open Game Content originally distributed under any version of this License.</li>\r\n                    <li>Copy of this License: You MUST include a copy of this License with every copy of the Open Game Content You Distribute.</li>\r\n                    <li>Use of Contributor Credits: You may not market or advertise the Open Game Content using the name of any Contributor unless You have written permission from the Contributor to do so.</li>\r\n                    <li>Inability to Comply: If it is impossible for You to comply with any of the terms of this License with respect to some or all of the Open Game Content due to statute, judicial order, or governmental regulation then You may not Use any Open Game Material so affected.</li>\r\n                    <li>Termination: This License will terminate automatically if You fail to comply with all terms herein and fail to cure such breach within 30 days of becoming aware of the breach. All sublicenses shall survive the termination of this License.</li>\r\n                    <li>Reformation: If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable.</li>\r\n                    <li>COPYRIGHT NOTICE Open Game License v 1.0 Copyright 2000, Wizards of the Coast, Inc.</li>\r\n                </ol>\r\n            </div>\r\n        );\r\n        /* tslint:enable:max-line-length */\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const viewOptions = [\r\n                {\r\n                    id: 'dm',\r\n                    text: 'dm tools'\r\n                },\r\n                {\r\n                    id: 'about',\r\n                    text: 'about'\r\n                }\r\n            ];\r\n\r\n            return (\r\n                <div className='about'>\r\n                    <Selector\r\n                        tabs={true}\r\n                        options={viewOptions}\r\n                        selectedID={this.state.view}\r\n                        select={optionID => this.setView(optionID)}\r\n                    />\r\n                    {this.getTools()}\r\n                    {this.getAbout()}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { EncounterSlot } from '../../models/encounter';\r\nimport { Monster, MonsterGroup } from '../../models/monster-group';\r\n\r\nimport Factory from '../../utils/factory';\r\nimport MonsterCard from '../cards/monster-card';\r\nimport FilterPanel from '../panels/filter-panel';\r\nimport Note from '../panels/note';\r\n\r\ninterface Props {\r\n    combatantSlots: EncounterSlot[];\r\n    library: MonsterGroup[];\r\n}\r\n\r\ninterface State {\r\n    combatantSlots: EncounterSlot[];\r\n    filter: {\r\n        name: string,\r\n        challengeMin: number;\r\n        challengeMax: number;\r\n        category: string;\r\n        size: string;\r\n    };\r\n}\r\n\r\nexport default class AddCombatantsModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            combatantSlots: props.combatantSlots,\r\n            filter: {\r\n                name: '',\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: 'all types',\r\n                size: 'all sizes'\r\n            }\r\n        };\r\n    }\r\n\r\n    private changeFilterValue(type: 'name' | 'challengeMin' | 'challengeMax' | 'category' | 'size', value: any) {\r\n        // eslint-disable-next-line\r\n        this.state.filter[type] = value as never;\r\n        this.setState({\r\n            filter: this.state.filter\r\n        });\r\n    }\r\n\r\n    private nudgeFilterValue(type: 'challengeMin' | 'challengeMax', delta: number) {\r\n        const value = Utils.nudgeChallenge(this.state.filter[type], delta);\r\n        this.changeFilterValue(type, value);\r\n    }\r\n\r\n    private resetFilter() {\r\n        this.setState({\r\n            filter: {\r\n                name: '',\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: 'all types',\r\n                size: 'all sizes'\r\n            }\r\n        });\r\n    }\r\n\r\n    private matchMonster(monster: Monster) {\r\n        if (monster.challenge < this.state.filter.challengeMin) {\r\n            return false;\r\n        }\r\n\r\n        if (monster.challenge > this.state.filter.challengeMax) {\r\n            return false;\r\n        }\r\n\r\n        if (this.state.filter.name !== '') {\r\n            if (!Utils.match(this.state.filter.name, monster.name)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.filter.category !== 'all types') {\r\n            if (monster.category !== this.state.filter.category) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.filter.size !== 'all sizes') {\r\n            if (monster.size !== this.state.filter.size) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private selectMonster(monster: Monster) {\r\n        const slot = Factory.createEncounterSlot();\r\n        slot.monsterGroupName = Utils.getMonsterGroup(monster, this.props.library).name;\r\n        slot.monsterName = monster.name;\r\n        this.state.combatantSlots.push(slot);\r\n        this.state.combatantSlots.sort((a, b) => {\r\n            if (a.monsterName < b.monsterName) { return -1; }\r\n            if (a.monsterName > b.monsterName) { return 1; }\r\n            return 0;\r\n        });\r\n        this.setState({\r\n            combatantSlots: this.state.combatantSlots\r\n        });\r\n    }\r\n\r\n    private deselectMonster(monster: Monster) {\r\n        const group = Utils.getMonsterGroup(monster, this.props.library);\r\n        const slot = this.state.combatantSlots.find(s => (s.monsterGroupName === group.name) && (s.monsterName === monster.name));\r\n        if (slot) {\r\n            const index = this.state.combatantSlots.indexOf(slot);\r\n            this.state.combatantSlots.splice(index, 1);\r\n            this.setState({\r\n                combatantSlots: this.state.combatantSlots\r\n            });\r\n        }\r\n    }\r\n\r\n    private nudgeMonsterCount(slot: EncounterSlot, delta: number) {\r\n        slot.count += delta;\r\n        if (slot.count === 0) {\r\n            const group = this.props.library.find(g => g.name === slot.monsterGroupName);\r\n            if (group) {\r\n                const monster = group.monsters.find(m => m.name === slot.monsterName);\r\n                if (monster) {\r\n                    this.deselectMonster(monster);\r\n                }\r\n            }\r\n        } else {\r\n            this.setState({\r\n                combatantSlots: this.state.combatantSlots\r\n            });\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const monsters: Monster[] = [];\r\n            this.props.library.forEach(group => {\r\n                group.monsters.forEach(monster => {\r\n                    if (this.matchMonster(monster)) {\r\n                        monsters.push(monster);\r\n                    }\r\n                });\r\n            });\r\n            monsters.sort((a, b) => {\r\n                if (a.name < b.name) { return -1; }\r\n                if (a.name > b.name) { return 1; }\r\n                return 0;\r\n            });\r\n            const currentIDs = this.state.combatantSlots.map(slot => {\r\n                const group = this.props.library.find(g => g.name === slot.monsterGroupName);\r\n                if (group) {\r\n                    const monster = group.monsters.find(m => m.name === slot.monsterName);\r\n                    if (monster) {\r\n                        return monster.id;\r\n                    }\r\n                }\r\n                return null;\r\n            }).filter(id => !!id);\r\n            let allCombatants: JSX.Element | JSX.Element[] = monsters.filter(m => !currentIDs.includes(m.id)).map(m => {\r\n                return (\r\n                    <MonsterCard key={m.id} combatant={m} mode='view candidate' selectMonster={monster => this.selectMonster(monster)} />\r\n                );\r\n            });\r\n            if (allCombatants.length === 0) {\r\n                allCombatants = (\r\n                    <Note\r\n                        content={(\r\n                            <div className='section'>\r\n                                there are no monsters that match the above criteria (or you have already selected them all)\r\n                            </div>\r\n                        )}\r\n                    />\r\n                );\r\n            }\r\n\r\n            const selectedCombatants: (JSX.Element | null)[] = this.state.combatantSlots.map(slot => {\r\n                const group = this.props.library.find(g => g.name === slot.monsterGroupName);\r\n                if (group) {\r\n                    const monster = group.monsters.find(m => m.name === slot.monsterName);\r\n                    if (monster) {\r\n                        return (\r\n                            <MonsterCard\r\n                                key={monster.id}\r\n                                combatant={monster}\r\n                                slot={slot}\r\n                                mode='view candidate selected'\r\n                                deselectMonster={m => this.deselectMonster(m)}\r\n                                nudgeValue={(source, field, delta) => this.nudgeMonsterCount(slot, delta)}\r\n                            />\r\n                        );\r\n                    }\r\n                }\r\n                return null;\r\n            });\r\n\r\n            return (\r\n                <div className='add-combatants-modal'>\r\n                    <div className='row' style={{ height: '100%' }}>\r\n                        <div className='columns small-6 medium-6 large-6 scrollable'>\r\n                            <div className='heading'>all combatants</div>\r\n                            <FilterPanel\r\n                                filter={this.state.filter}\r\n                                changeValue={(type, value) => this.changeFilterValue(type, value)}\r\n                                nudgeValue={(type, delta) => this.nudgeFilterValue(type, delta)}\r\n                                resetFilter={() => this.resetFilter()}\r\n                            />\r\n                            <div className='divider' />\r\n                            {allCombatants}\r\n                        </div>\r\n                        <div className='columns small-6 medium-6 large-6 scrollable'>\r\n                            <div className='heading'>selected combatants</div>\r\n                            {selectedCombatants}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { CombatSetup } from '../../models/combat';\r\nimport { Encounter, EncounterSlot } from '../../models/encounter';\r\nimport { MapFolio } from '../../models/map-folio';\r\nimport { Monster } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport Selector from '../controls/selector';\r\nimport DifficultyChartPanel from '../panels/difficulty-chart-panel';\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    combatSetup: CombatSetup;\r\n    parties: Party[];\r\n    encounters: Encounter[];\r\n    mapFolios: MapFolio[];\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n    notify: () => void;\r\n}\r\n\r\ninterface State {\r\n    combatSetup: CombatSetup;\r\n}\r\n\r\nexport default class CombatStartModal extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        parties: null,\r\n        mapFolios: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            combatSetup: props.combatSetup\r\n        };\r\n    }\r\n\r\n    private setParty(partyID: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.partyID = partyID;\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        }, () => this.props.notify());\r\n    }\r\n\r\n    private setEncounter(encounterID: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.encounterID = encounterID;\r\n        const enc = this.props.encounters.find(e => e.id === encounterID);\r\n        if (enc) {\r\n            // eslint-disable-next-line\r\n            this.state.combatSetup.monsterNames = Utils.getMonsterNames(enc);\r\n        }\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        }, () => this.props.notify());\r\n    }\r\n\r\n    private setFolioID(id: string) {\r\n        if (id && (id !== '')) {\r\n            const folio = this.props.mapFolios.find(f => f.id === id);\r\n            if (folio) {\r\n                // eslint-disable-next-line\r\n                this.state.combatSetup.folioID = folio.id;\r\n                // eslint-disable-next-line\r\n                this.state.combatSetup.mapID = folio.maps.length === 1 ? folio.maps[0].id : null;\r\n            }\r\n        } else {\r\n            // eslint-disable-next-line\r\n            this.state.combatSetup.folioID = null;\r\n            // eslint-disable-next-line\r\n            this.state.combatSetup.mapID = null;\r\n        }\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        });\r\n    }\r\n\r\n    private setMapID(id: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.mapID = id;\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        });\r\n    }\r\n\r\n    private setWave(waveID: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.waveID = waveID;\r\n        const enc = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n        if (enc) {\r\n            const wave = enc.waves.find(w => w.id === waveID);\r\n            if (wave) {\r\n                // eslint-disable-next-line\r\n                this.state.combatSetup.monsterNames = Utils.getMonsterNames(wave);\r\n            }\r\n        }\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        }, () => this.props.notify());\r\n    }\r\n\r\n    private setEncounterInitMode(mode: 'manual' | 'individual' | 'group') {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.encounterInitMode = mode;\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        });\r\n    }\r\n\r\n    private changeName(slotID: string, index: number, name: string) {\r\n        const slot = this.state.combatSetup.monsterNames.find(s => s.id === slotID);\r\n        if (slot) {\r\n            slot.names[index] = name;\r\n            this.setState({\r\n                combatSetup: this.state.combatSetup\r\n            });\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    private getPartySection() {\r\n        if (this.props.parties.length === 0) {\r\n            return (\r\n                <div className='section'>you have not defined any parties</div>\r\n            );\r\n        }\r\n\r\n        const partyOptions = this.props.parties.map(party => {\r\n            return {\r\n                id: party.id,\r\n                text: party.name || 'unnamed party'\r\n            };\r\n        });\r\n\r\n        let partyContent = null;\r\n        if (this.state.combatSetup.partyID) {\r\n            const selectedParty = this.props.parties.find(p => p.id === this.state.combatSetup.partyID);\r\n            if (selectedParty) {\r\n                const pcs = selectedParty.pcs.filter(pc => pc.active);\r\n\r\n                const pcSections = pcs.map(pc =>\r\n                    (\r\n                        <li key={pc.id}>\r\n                            {pc.name || 'unnamed pc'} (level {pc.level})\r\n                        </li>\r\n                    )\r\n                );\r\n\r\n                if (pcSections.length === 0) {\r\n                    pcSections.push(\r\n                        <li key={'empty'}>no pcs</li>\r\n                    );\r\n                }\r\n\r\n                partyContent = (\r\n                    <div>\r\n                        <div className='subheading'>pcs</div>\r\n                        <ul>{pcSections}</ul>\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='heading'>party</div>\r\n                <Dropdown\r\n                    options={partyOptions}\r\n                    placeholder='select party...'\r\n                    selectedID={this.state.combatSetup.partyID ? this.state.combatSetup.partyID : undefined}\r\n                    select={optionID => this.setParty(optionID)}\r\n                />\r\n                {partyContent}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getEncounterSection() {\r\n        if (this.props.encounters.length === 0) {\r\n            return (\r\n                <div className='section'>you have not built any encounters</div>\r\n            );\r\n        }\r\n\r\n        const encounterOptions = this.props.encounters.map(encounter => {\r\n            return {\r\n                id: encounter.id,\r\n                text: encounter.name || 'unnamed encounter'\r\n            };\r\n        });\r\n\r\n        let encounterContent = null;\r\n        if (this.state.combatSetup.encounterID) {\r\n            const selectedEncounter = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n            if (selectedEncounter) {\r\n                const monsterSections = selectedEncounter.slots.map(slot => {\r\n                    let name = slot.monsterName || 'unnamed monster';\r\n                    if (slot.count > 1) {\r\n                        name += ' (x' + slot.count + ')';\r\n                    }\r\n                    return (\r\n                        <li key={slot.id}>{name}</li>\r\n                    );\r\n                });\r\n\r\n                if (monsterSections.length === 0) {\r\n                    monsterSections.push(\r\n                        <li key={'empty'}>no monsters</li>\r\n                    );\r\n                }\r\n\r\n                const waves = selectedEncounter.waves.map(wave => {\r\n                    if (wave.slots.length === 0) {\r\n                        return null;\r\n                    }\r\n\r\n                    const waveMonsters = wave.slots.map(slot => {\r\n                        let name = slot.monsterName || 'unnamed monster';\r\n                        if (slot.count > 1) {\r\n                            name += ' x' + slot.count;\r\n                        }\r\n                        return (\r\n                            <li key={slot.id}>{name}</li>\r\n                        );\r\n                    });\r\n\r\n                    return (\r\n                        <div key={wave.id}>\r\n                            <div className='subheading'>{wave.name || 'unnamed wave'}</div>\r\n                            <ul>{waveMonsters}</ul>\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                encounterContent = (\r\n                    <div>\r\n                        <div className='subheading'>monsters</div>\r\n                        <ul>{monsterSections}</ul>\r\n                        {waves}\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='heading'>encounter</div>\r\n                <Dropdown\r\n                    options={encounterOptions}\r\n                    placeholder='select encounter...'\r\n                    selectedID={this.state.combatSetup.encounterID ? this.state.combatSetup.encounterID : undefined}\r\n                    select={optionID => this.setEncounter(optionID)}\r\n                />\r\n                {encounterContent}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getMapSection() {\r\n        const folios = this.props.mapFolios.filter(folio => folio.maps.length > 0);\r\n        if (folios.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        const folioOptions = [{\r\n            id: '',\r\n            text: 'none'\r\n        }].concat(folios.map(folio => {\r\n            return {\r\n                id: folio.id,\r\n                text: folio.name || 'unnamed folio'\r\n            };\r\n        }));\r\n\r\n        let selectMapSection = null;\r\n        let thumbnailSection = null;\r\n\r\n        if (this.state.combatSetup.folioID) {\r\n            const folio = this.props.mapFolios.find(f => f.id === this.state.combatSetup.folioID);\r\n            if (folio) {\r\n                const mapOptions = folio.maps.map(m => {\r\n                    return {\r\n                        id: m.id,\r\n                        text: m.name || 'unnamed map'\r\n                    };\r\n                });\r\n\r\n                if (mapOptions.length !== 1) {\r\n                    selectMapSection = (\r\n                        <Selector\r\n                            options={mapOptions}\r\n                            selectedID={this.state.combatSetup.mapID}\r\n                            select={optionID => this.setMapID(optionID)}\r\n                        />\r\n                    );\r\n                }\r\n\r\n                if (this.state.combatSetup.mapID) {\r\n                    const map = folio.maps.find(m => m.id === this.state.combatSetup.mapID);\r\n                    if (map) {\r\n                        thumbnailSection = (\r\n                            <MapPanel\r\n                                map={map}\r\n                                mode='thumbnail'\r\n                            />\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='heading'>map</div>\r\n                <Dropdown\r\n                    options={folioOptions}\r\n                    placeholder='select map folio...'\r\n                    selectedID={this.state.combatSetup.folioID ? this.state.combatSetup.folioID : undefined}\r\n                    select={optionID => this.setFolioID(optionID)}\r\n                />\r\n                {selectMapSection}\r\n                {thumbnailSection}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getWaveSection() {\r\n        if (this.state.combatSetup.encounterID === null) {\r\n            return (\r\n                <div className='section'>you have not selected an encounter</div>\r\n            );\r\n        }\r\n\r\n        const selectedEncounter = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n        if (selectedEncounter) {\r\n            if (selectedEncounter.waves.length === 0) {\r\n                return (\r\n                    <div className='section'>you have not defined any waves</div>\r\n                );\r\n            }\r\n\r\n            const waveOptions = selectedEncounter.waves.map(wave => {\r\n                return {\r\n                    id: wave.id,\r\n                    text: wave.name || 'unnamed wave'\r\n                };\r\n            });\r\n\r\n            let waveContent = null;\r\n            if (this.state.combatSetup.waveID) {\r\n                const selectedWave = selectedEncounter.waves.find(w => w.id === this.state.combatSetup.waveID);\r\n                if (selectedWave) {\r\n                    const monsterSections = selectedWave.slots.map(slot => {\r\n                        let name = slot.monsterName || 'unnamed monster';\r\n                        if (slot.count > 1) {\r\n                            name += ' (x' + slot.count + ')';\r\n                        }\r\n                        return (\r\n                            <li key={slot.id}>{name}</li>\r\n                        );\r\n                    });\r\n\r\n                    if (monsterSections.length === 0) {\r\n                        monsterSections.push(\r\n                            <li key={'empty'}>no monsters</li>\r\n                        );\r\n                    }\r\n\r\n                    waveContent = (\r\n                        <div>\r\n                            <div className='subheading'>monsters</div>\r\n                            <ul>{monsterSections}</ul>\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n\r\n            return (\r\n                <div>\r\n                    <div className='heading'>wave</div>\r\n                    <Dropdown\r\n                        options={waveOptions}\r\n                        placeholder='select wave...'\r\n                        selectedID={this.state.combatSetup.waveID ? this.state.combatSetup.waveID : undefined}\r\n                        select={optionID => this.setWave(optionID)}\r\n                    />\r\n                    {waveContent}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private getDifficultySection() {\r\n        const party = this.props.parties.find(p => p.id === this.state.combatSetup.partyID);\r\n        const encounter = this.props.encounters.find(enc => enc.id === this.state.combatSetup.encounterID);\r\n\r\n        if (party && encounter) {\r\n            return (\r\n                <div>\r\n                    <div className='heading'>encounter difficulty</div>\r\n                    <DifficultyChartPanel\r\n                        parties={this.props.parties}\r\n                        party={party}\r\n                        encounter={encounter}\r\n                        getMonster={(monsterName, monsterGroupName) => this.props.getMonster(monsterName, monsterGroupName)}\r\n                    />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='heading'>encounter difficulty</div>\r\n                <div className='section'>select a party and an encounter on the left to see difficulty information.</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getMonsterSection() {\r\n        if (this.state.combatSetup.encounterID === null) {\r\n            return (\r\n                <div>\r\n                    <div className='heading'>monsters</div>\r\n                    <div className='section'>select an encounter to see monster options here.</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (!this.props.parties && this.state.combatSetup.waveID === null) {\r\n            return (\r\n                <div>\r\n                    <div className='heading'>monsters</div>\r\n                    <div className='section'>select a wave to see monster options here.</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        const selectedEncounter = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n        if (selectedEncounter) {\r\n            let slotsContainer: { slots: EncounterSlot[] } = selectedEncounter;\r\n            if (this.state.combatSetup.waveID) {\r\n                const selectedWave = selectedEncounter.waves.find(w => w.id === this.state.combatSetup.waveID);\r\n                if (selectedWave) {\r\n                    slotsContainer = selectedWave;\r\n                }\r\n            }\r\n\r\n            if (slotsContainer.slots.length === 0) {\r\n                return null;\r\n            }\r\n\r\n            const initOptions = [\r\n                {\r\n                    id: 'manual',\r\n                    text: 'enter manually'\r\n                },\r\n                {\r\n                    id: 'individual',\r\n                    text: 'roll individually'\r\n                },\r\n                {\r\n                    id: 'group',\r\n                    text: 'roll in groups'\r\n                }\r\n            ];\r\n\r\n            const names = this.state.combatSetup.monsterNames.map(slotNames => {\r\n                const slot = slotsContainer.slots.find(s => s.id === slotNames.id);\r\n                if (slot) {\r\n                    const inputs = [];\r\n                    for (let n = 0; n !== slotNames.names.length; ++n) {\r\n                        inputs.push(\r\n                            <div key={n}>\r\n                                <MonsterName\r\n                                    value={slotNames.names[n]}\r\n                                    slotID={slot.id}\r\n                                    index={n}\r\n                                    changeName={(slotID, index, value) => this.changeName(slotID, index, value)}\r\n                                />\r\n                            </div>\r\n                        );\r\n                    }\r\n                    return (\r\n                        <div key={slotNames.id} className='name-row'>\r\n                            <div className='name-label'>\r\n                                {slot.monsterName}\r\n                            </div>\r\n                            <div className='name-inputs'>\r\n                                {inputs}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n                return null;\r\n            });\r\n\r\n            return (\r\n                <div>\r\n                    <div className='heading'>monsters</div>\r\n                    <div className='subheading'>initiative</div>\r\n                    <Selector\r\n                        options={initOptions}\r\n                        selectedID={this.state.combatSetup.encounterInitMode}\r\n                        select={optionID => this.setEncounterInitMode(optionID as 'manual' | 'individual' | 'group')}\r\n                    />\r\n                    <div className='subheading'>names</div>\r\n                    <div>{names}</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    public render() {\r\n        try {\r\n            let leftSection = null;\r\n            let rightSection = null;\r\n\r\n            if (this.props.parties) {\r\n                leftSection = (\r\n                    <div>\r\n                        {this.getPartySection()}\r\n                        {this.getEncounterSection()}\r\n                        {this.getMapSection()}\r\n                    </div>\r\n                );\r\n\r\n                rightSection = (\r\n                    <div>\r\n                        {this.getDifficultySection()}\r\n                        {this.getMonsterSection()}\r\n                    </div>\r\n                );\r\n            } else {\r\n                leftSection = (\r\n                    <div>\r\n                        {this.getWaveSection()}\r\n                    </div>\r\n                );\r\n\r\n                rightSection = (\r\n                    <div>\r\n                        {this.getMonsterSection()}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='row' style={{ height: '100%', margin: '0 -15px' }}>\r\n                    <div className='column small-6 medium-6 large-6 scrollable'>\r\n                        {leftSection}\r\n                    </div>\r\n                    <div className='column small-6 medium-6 large-6 scrollable'>\r\n                        {rightSection}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface MonsterNameProps {\r\n    slotID: string;\r\n    index: number;\r\n    value: string;\r\n    changeName: (slotID: string, index: number, value: string) => void;\r\n}\r\n\r\nclass MonsterName extends React.Component<MonsterNameProps> {\r\n    public render() {\r\n        return (\r\n            <input type='text' value={this.props.value} onChange={event => this.props.changeName(this.props.slotID, this.props.index, event.target.value)} />\r\n        );\r\n    }\r\n}\r\n","export interface Condition {\r\n    id: string;\r\n    name: string;\r\n    level: number;\r\n    text: string | null;\r\n    duration: ConditionDurationSaves | ConditionDurationCombatant | ConditionDurationRounds | null;\r\n}\r\n\r\nexport interface ConditionDurationSaves {\r\n    type: 'saves';\r\n    count: number;\r\n    saveType: 'str' | 'dex' | 'con' | 'int' | 'wis' | 'cha' | 'death';\r\n    saveDC: number;\r\n    point: 'start' | 'end';\r\n}\r\n\r\nexport interface ConditionDurationCombatant {\r\n    type: 'combatant';\r\n    point: 'start' | 'end';\r\n    combatantID: string | null;\r\n}\r\n\r\nexport interface ConditionDurationRounds {\r\n    type: 'rounds';\r\n    count: number;\r\n}\r\n\r\nexport const CONDITION_TYPES = [\r\n    'blinded',\r\n    'charmed',\r\n    'deafened',\r\n    'exhaustion',\r\n    'frightened',\r\n    'grappled',\r\n    'incapacitated',\r\n    'invisible',\r\n    'paralyzed',\r\n    'petrified',\r\n    'poisoned',\r\n    'prone',\r\n    'restrained',\r\n    'stunned',\r\n    'unconscious',\r\n    'custom'\r\n];\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    items: { id: string; text: string; details: JSX.Element | string; disabled?: boolean }[];\r\n    selectedItemID: string | null;\r\n    select: (itemID: string) => void;\r\n}\r\n\r\nexport default class RadioGroup extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        // No default property values\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            const content = this.props.items.map(item => {\r\n                return (\r\n                    <RadioGroupItem\r\n                        key={item.id}\r\n                        item={item}\r\n                        selected={this.props.selectedItemID === item.id}\r\n                        select={(itemID: string) => this.props.select(itemID)}\r\n                    />\r\n                );\r\n            });\r\n\r\n            return (\r\n                <div className='radio-group'>\r\n                    {content}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface RadioGroupItemProps {\r\n    item: { id: string; text: string; details: JSX.Element | string; disabled?: boolean };\r\n    selected: boolean;\r\n    select: (itemID: string) => void;\r\n}\r\n\r\nclass RadioGroupItem extends React.Component<RadioGroupItemProps> {\r\n    public render() {\r\n        let style = 'radio-item';\r\n        let details = null;\r\n\r\n        if (this.props.selected) {\r\n            style += ' selected';\r\n            details = (\r\n                <div className='radio-item-details'>\r\n                    {this.props.item.details}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (this.props.item.disabled) {\r\n            style += ' disabled';\r\n        }\r\n\r\n        return (\r\n            <div className={style} onClick={() => this.props.select(this.props.item.id)}>\r\n                <div className='radio-item-text'>{this.props.item.text}</div>\r\n                {details}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Factory from '../../utils/factory';\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combat, Combatant } from '../../models/combat';\r\nimport { Condition, CONDITION_TYPES, ConditionDurationCombatant, ConditionDurationSaves } from '../../models/condition';\r\nimport { Monster } from '../../models/monster-group';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport RadioGroup from '../controls/radio-group';\r\nimport Selector from '../controls/selector';\r\nimport Spin from '../controls/spin';\r\n\r\ninterface Props {\r\n    condition: Condition;\r\n    combatant: Combatant & Monster;\r\n    combat: Combat;\r\n}\r\n\r\ninterface State {\r\n    condition: Condition;\r\n}\r\n\r\nexport default class ConditionModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            condition: props.condition\r\n        };\r\n    }\r\n\r\n    private setCondition(conditionName: string) {\r\n        // eslint-disable-next-line\r\n        this.state.condition.name = conditionName;\r\n        // eslint-disable-next-line\r\n        this.state.condition.level = 1;\r\n        // eslint-disable-next-line\r\n        this.state.condition.text = conditionName === 'custom' ? 'custom condition' : null;\r\n\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    private setDuration(durationType: 'saves' | 'combatant' | 'rounds') {\r\n        let duration = null;\r\n\r\n        switch (durationType) {\r\n            case 'saves':\r\n                duration = Factory.createConditionDurationSaves();\r\n                break;\r\n            case 'combatant':\r\n                duration = Factory.createConditionDurationCombatant();\r\n                duration.combatantID = this.props.combatant.id;\r\n                break;\r\n            case 'rounds':\r\n                duration = Factory.createConditionDurationRounds();\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        // eslint-disable-next-line\r\n        this.state.condition.duration = duration;\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    private changeValue(object: any, field: string, value: any) {\r\n        object[field] = value;\r\n\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    private nudgeValue(object: any, field: string, delta: number) {\r\n        let value = object[field] + delta;\r\n        if (field === 'level') {\r\n            value = Math.max(value, 1);\r\n            value = Math.min(value, 6);\r\n        }\r\n        if (field === 'count') {\r\n            value = Math.max(value, 1);\r\n        }\r\n        if (field === 'saveDC') {\r\n            value = Math.max(value, 0);\r\n        }\r\n        object[field] = value;\r\n\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const conditions = CONDITION_TYPES.map(condition => {\r\n                const controls = [];\r\n                const description = [];\r\n                if (condition === this.state.condition.name) {\r\n                    if (condition === 'custom') {\r\n                        controls.push(\r\n                            <input\r\n                                type='text'\r\n                                placeholder='custom condition'\r\n                                value={this.state.condition.text ? this.state.condition.text : ''}\r\n                                onChange={event => this.changeValue(this.state.condition, 'text', event.target.value)}\r\n                            />\r\n                        );\r\n                    }\r\n                    if (condition === 'exhaustion') {\r\n                        controls.push(\r\n                            <Spin\r\n                                key='exhaustion-spin'\r\n                                source={this.props.condition}\r\n                                name='level'\r\n                                label='exhaustion'\r\n                                nudgeValue={delta => this.nudgeValue(this.props.condition, 'level', delta)}\r\n                            />\r\n                        );\r\n                    }\r\n                    const text = Utils.conditionText(this.state.condition);\r\n                    for (let n = 0; n !== text.length; ++n) {\r\n                        description.push(<li key={n} className='section'>{text[n]}</li>);\r\n                    }\r\n                }\r\n\r\n                return {\r\n                    id: condition,\r\n                    text: condition,\r\n                    details: (\r\n                        <div key={condition}>\r\n                            {controls}\r\n                            <ul>\r\n                                {description}\r\n                            </ul>\r\n                        </div>\r\n                    ),\r\n                    disabled: this.props.combatant.conditionImmunities ? this.props.combatant.conditionImmunities.indexOf(condition) !== -1 : false\r\n                };\r\n            });\r\n\r\n            const saveOptions = ['str', 'dex', 'con', 'int', 'wis', 'cha', 'death'].map(c => ({ id: c, text: c }));\r\n            const pointOptions = [\r\n                {\r\n                    id: 'start',\r\n                    text: 'start of turn'\r\n                },\r\n                {\r\n                    id: 'end',\r\n                    text: 'end of turn'\r\n                }\r\n            ];\r\n            const combatantOptions = this.props.combat.combatants.map(c => ({ id: c.id, text: (c.displayName || c.name || 'unnamed monster') }));\r\n\r\n            const durations = [\r\n                {\r\n                    id: 'none',\r\n                    text: 'until removed (default)',\r\n                    details: (\r\n                        <div className='section'>\r\n                            <div>the condition persists until it is manually removed</div>\r\n                        </div>\r\n                    )\r\n                },\r\n                {\r\n                    id: 'saves',\r\n                    text: 'until a successful save',\r\n                    details: (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>number of saves required</div>\r\n                                <Spin\r\n                                    source={this.props.condition.duration}\r\n                                    name='count'\r\n                                    nudgeValue={delta => this.nudgeValue(this.props.condition.duration, 'count', delta)}\r\n                                />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>save dc</div>\r\n                                <Spin\r\n                                    source={this.props.condition.duration}\r\n                                    name='saveDC'\r\n                                    nudgeValue={delta => this.nudgeValue(this.props.condition.duration, 'saveDC', delta)}\r\n                                />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>type of save</div>\r\n                                <Selector\r\n                                    options={saveOptions}\r\n                                    selectedID={\r\n                                        (this.props.condition.duration as ConditionDurationSaves)\r\n                                        ? (this.props.condition.duration as ConditionDurationSaves).saveType\r\n                                        : null\r\n                                    }\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, 'saveType', optionID)}\r\n                                />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>make the save at the start or end of the turn</div>\r\n                                <Selector\r\n                                    options={pointOptions}\r\n                                    selectedID={\r\n                                        (this.props.condition.duration as ConditionDurationSaves)\r\n                                        ? (this.props.condition.duration as ConditionDurationSaves).point\r\n                                        : null\r\n                                    }\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, 'point', optionID)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                },\r\n                {\r\n                    id: 'combatant',\r\n                    text: 'until someone\\'s next turn',\r\n                    details: (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>combatant</div>\r\n                                <Dropdown\r\n                                    options={combatantOptions}\r\n                                    selectedID={\r\n                                        (this.props.condition.duration as ConditionDurationCombatant)\r\n                                        ? (this.props.condition.duration as ConditionDurationCombatant).combatantID || undefined\r\n                                        : undefined\r\n                                    }\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, 'combatantID', optionID)}\r\n                                />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>start or end of the turn</div>\r\n                                <Selector\r\n                                    options={pointOptions}\r\n                                    selectedID={\r\n                                        (this.props.condition.duration as ConditionDurationCombatant)\r\n                                        ? (this.props.condition.duration as ConditionDurationCombatant).point\r\n                                        : null\r\n                                    }\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, 'point', optionID)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                },\r\n                {\r\n                    id: 'rounds',\r\n                    text: 'for a number of rounds',\r\n                    details: (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>number of rounds</div>\r\n                                <Spin\r\n                                    source={this.props.condition.duration}\r\n                                    name='count'\r\n                                    nudgeValue={delta => this.nudgeValue(this.props.condition.duration, 'count', delta)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }\r\n            ];\r\n\r\n            return (\r\n                <div className='condition-modal'>\r\n                    <div className='row' style={{ height: '100%' }}>\r\n                        <div className='columns small-6 medium-6 large-6 scrollable'>\r\n                            <div className='heading'>condition</div>\r\n                            <RadioGroup\r\n                                items={conditions}\r\n                                selectedItemID={this.state.condition.name}\r\n                                select={itemID => this.setCondition(itemID)}\r\n                            />\r\n                        </div>\r\n                        <div className='columns small-6 medium-6 large-6 scrollable'>\r\n                            <div className='heading'>duration</div>\r\n                            <RadioGroup\r\n                                items={durations}\r\n                                selectedItemID={this.state.condition.duration ? this.state.condition.duration.type : 'none'}\r\n                                select={itemID => this.setDuration(itemID as 'saves' | 'combatant' | 'rounds')}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { CATEGORY_TYPES, Monster, MonsterGroup, SIZE_TYPES } from '../../models/monster-group';\r\n\r\nimport Selector from '../controls/selector';\r\n\r\ninterface Props {\r\n    library: MonsterGroup[];\r\n}\r\n\r\ninterface State {\r\n    chart: string;\r\n}\r\n\r\nexport default class DemographicsModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            chart: 'challenge'\r\n        };\r\n    }\r\n\r\n    private selectChart(chart: string) {\r\n        this.setState({\r\n            chart: chart\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let demographics = null;\r\n\r\n            const allMonsters: Monster[] = [];\r\n            this.props.library.forEach(group => group.monsters.forEach(monster => allMonsters.push(monster)));\r\n            if (allMonsters.length !== 0) {\r\n                const buckets: { value: any, title: string }[] = [];\r\n                let maxBucketSize = 0;\r\n                const monsters: { [key: string]: Monster[] } = {};\r\n\r\n                switch (this.state.chart) {\r\n                    case 'challenge':\r\n                        const challenges = [\r\n                            0, 0.125, 0.25, 0.5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30\r\n                        ];\r\n                        challenges.forEach(cr => {\r\n                            buckets.push({\r\n                                value: cr,\r\n                                title: 'challenge ' + Utils.challenge(cr)\r\n                            });\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const cr = bucket.value;\r\n                            monsters[cr.toString()] = allMonsters.filter(monster => monster.challenge === cr);\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const cr = bucket.value;\r\n                            maxBucketSize = Math.max(monsters[cr].length, maxBucketSize);\r\n                        });\r\n                        break;\r\n                    case 'size':\r\n                        SIZE_TYPES.forEach(size => {\r\n                            buckets.push({\r\n                                value: size,\r\n                                title: size\r\n                            });\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const size = bucket.value;\r\n                            monsters[size.toString()] = allMonsters.filter(monster => monster.size === size);\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const size = bucket.value;\r\n                            maxBucketSize = Math.max(monsters[size].length, maxBucketSize);\r\n                        });\r\n                        break;\r\n                    case 'type':\r\n                        CATEGORY_TYPES.forEach(type => {\r\n                            buckets.push({\r\n                                value: type,\r\n                                title: type\r\n                            });\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const type = bucket.value;\r\n                            monsters[type.toString()] = allMonsters.filter(monster => monster.category === type);\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const type = bucket.value;\r\n                            maxBucketSize = Math.max(monsters[type].length, maxBucketSize);\r\n                        });\r\n                        break;\r\n                    default:\r\n                        // Do nothing\r\n                        break;\r\n                }\r\n\r\n                const bars = [];\r\n                for (let index = 0; index !== buckets.length; ++index) {\r\n                    const bucket = buckets[index];\r\n                    const set = monsters[bucket.value];\r\n                    const count = set ? set.length : 0;\r\n                    bars.push(\r\n                        <div\r\n                            key={bucket.title}\r\n                            className='bar-container'\r\n                            title={bucket.title + ': ' + set.length + ' monsters'}\r\n                        >\r\n                            <div\r\n                                className='bar'\r\n                                style={{\r\n                                    width: 'calc((100% - 1px) * ' + count + ' / ' + maxBucketSize + ')'\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                const chartOptions = [\r\n                    {\r\n                        id: 'challenge',\r\n                        text: 'challenge rating'\r\n                    },\r\n                    {\r\n                        id: 'size',\r\n                        text: 'size'\r\n                    },\r\n                    {\r\n                        id: 'type',\r\n                        text: 'type'\r\n                    }\r\n                ];\r\n\r\n                demographics = (\r\n                    <div>\r\n                        <div className='heading'>monster demographics</div>\r\n                        <Selector\r\n                            options={chartOptions}\r\n                            selectedID={this.state.chart}\r\n                            select={optionID => this.selectChart(optionID)}\r\n                        />\r\n                        <div className='chart'>\r\n                            <div className='plot'>{bars}</div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return demographics;\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","export interface MapFolio {\r\n    id: string;\r\n    name: string;\r\n    maps: Map[];\r\n}\r\n\r\nexport interface Map {\r\n    id: string;\r\n    name: string;\r\n    items: MapItem[];\r\n}\r\n\r\nexport interface MapItem {\r\n    id: string;\r\n    type: 'tile' | 'pc' | 'monster';\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n    terrain: string | null;\r\n    style: 'square' | 'rounded' | 'circle' | null;\r\n}\r\n\r\nexport const TERRAIN_TYPES = [\r\n    'cavern',\r\n    'dirt',\r\n    'flagstone',\r\n    'floorboard',\r\n    'grassland',\r\n    'pit',\r\n    'sand',\r\n    'snow',\r\n    'water'\r\n];\r\n","import React from 'react';\r\n\r\nimport { MapItem, TERRAIN_TYPES } from '../../models/map-folio';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport Radial from '../controls/radial';\r\nimport Selector from '../controls/selector';\r\n\r\ninterface Props {\r\n    tile: MapItem;\r\n    changeValue: (tile: MapItem, field: string, value: string) => void;\r\n    moveMapItem: (tile: MapItem, dir: string) => void;\r\n    resizeMapItem: (tile: MapItem, dir: string, dir2: 'in' | 'out' | null) => void;\r\n    cloneMapItem: (tile: MapItem) => void;\r\n    removeMapItem: (tile: MapItem) => void;\r\n}\r\n\r\nexport default class MapTileCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const terrainOptions = TERRAIN_TYPES.map(t => {\r\n                return { id: t, text: t };\r\n            });\r\n\r\n            const styleOptions = ['square', 'rounded', 'circle'].map(t => {\r\n                return { id: t, text: t };\r\n            });\r\n\r\n            return (\r\n                <div className='card map-tile'>\r\n                    <div className='heading'>\r\n                        <div className='title'>map tile</div>\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        <div className='subheading'>size</div>\r\n                        <div className='section'>{this.props.tile.width} sq x {this.props.tile.height} sq</div>\r\n                        <div className='section'>{this.props.tile.width * 5} ft x {this.props.tile.height * 5} ft</div>\r\n                        <div className='divider' />\r\n                        <div className='subheading'>terrain</div>\r\n                        <Dropdown\r\n                            options={terrainOptions}\r\n                            placeholder='select terrain'\r\n                            selectedID={this.props.tile.terrain ? this.props.tile.terrain : undefined}\r\n                            select={optionID => this.props.changeValue(this.props.tile, 'terrain', optionID)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <div className='subheading'>style</div>\r\n                        <Selector\r\n                            options={styleOptions}\r\n                            selectedID={this.props.tile.style}\r\n                            select={optionID => this.props.changeValue(this.props.tile, 'style', optionID)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <div className='subheading'>move</div>\r\n                        <div className='section centered'>\r\n                            <Radial direction='out' click={dir => this.props.moveMapItem(this.props.tile, dir)} />\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='subheading'>resize</div>\r\n                        <div className='section centered'>\r\n                            <Radial direction='both' click={(dir, dir2) => this.props.resizeMapItem(this.props.tile, dir, dir2)} />\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='section'>\r\n                            <button onClick={() => this.props.cloneMapItem(this.props.tile)}>clone tile</button>\r\n                            <button onClick={() => this.props.removeMapItem(this.props.tile)}>remove tile</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Factory from '../../utils/factory';\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Map, MapItem } from '../../models/map-folio';\r\n\r\nimport MapTileCard from '../cards/map-tile-card';\r\nimport MapPanel from '../panels/map-panel';\r\nimport Note from '../panels/note';\r\n\r\ninterface Props {\r\n    map: Map;\r\n}\r\n\r\ninterface State {\r\n    map: Map;\r\n    selectedTileID: string | null;\r\n    addingTile: boolean;\r\n}\r\n\r\nexport default class MapEditorModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            map: props.map,\r\n            selectedTileID: null,\r\n            addingTile: false\r\n        };\r\n    }\r\n\r\n    private setSelectedTileID(id: string | null) {\r\n        this.setState({\r\n            selectedTileID: id\r\n        });\r\n    }\r\n\r\n    private toggleAddingTile() {\r\n        this.setState({\r\n            addingTile: !this.state.addingTile\r\n        });\r\n    }\r\n\r\n    private addMapTile(x: number, y: number) {\r\n        const tile = Factory.createMapItem();\r\n        tile.x = x;\r\n        tile.y = y;\r\n        tile.style = 'square';\r\n        tile.terrain = 'flagstone';\r\n        this.state.map.items.push(tile);\r\n\r\n        this.setState({\r\n            map: this.state.map,\r\n            selectedTileID: tile.id,\r\n            addingTile: false\r\n        });\r\n    }\r\n\r\n    private moveMapItem(item: MapItem, dir: string) {\r\n        switch (dir) {\r\n            case 'N':\r\n                item.y -= 1;\r\n                break;\r\n            case 'E':\r\n                item.x += 1;\r\n                break;\r\n            case 'S':\r\n                item.y += 1;\r\n                break;\r\n            case 'W':\r\n                item.x -= 1;\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    private bigMapItem(item: MapItem, dir: string) {\r\n        switch (dir) {\r\n            case 'N':\r\n                item.y -= 1;\r\n                item.height += 1;\r\n                break;\r\n            case 'E':\r\n                item.width += 1;\r\n                break;\r\n            case 'S':\r\n                item.height += 1;\r\n                break;\r\n            case 'W':\r\n                item.x -= 1;\r\n                item.width += 1;\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    private smallMapItem(item: MapItem, dir: string) {\r\n        switch (dir) {\r\n            case 'N':\r\n                if (item.height > 1) {\r\n                    item.y += 1;\r\n                    item.height -= 1;\r\n                }\r\n                break;\r\n            case 'E':\r\n                if (item.width > 1) {\r\n                    item.width -= 1;\r\n                }\r\n                break;\r\n            case 'S':\r\n                if (item.height > 1) {\r\n                    item.height -= 1;\r\n                }\r\n                break;\r\n            case 'W':\r\n                if (item.width > 1) {\r\n                    item.x += 1;\r\n                    item.width -= 1;\r\n                }\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    private resizeMapItem(item: MapItem, dir: string, dir2: 'in' | 'out') {\r\n        switch (dir2) {\r\n            case 'in':\r\n                this.smallMapItem(item, dir);\r\n                break;\r\n            case 'out':\r\n                this.bigMapItem(item, dir);\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n    }\r\n\r\n    private cloneMapItem(item: MapItem) {\r\n        const copy = JSON.parse(JSON.stringify(item));\r\n        copy.id = Utils.guid();\r\n        copy.x += 1;\r\n        copy.y += 1;\r\n        this.state.map.items.push(copy);\r\n\r\n        this.setState({\r\n            map: this.state.map,\r\n            selectedTileID: copy.id\r\n        });\r\n    }\r\n\r\n    private removeMapItem(item: MapItem) {\r\n        const index = this.state.map.items.indexOf(item);\r\n        this.state.map.items.splice(index, 1);\r\n\r\n        this.setState({\r\n            map: this.state.map,\r\n            selectedTileID: null\r\n        });\r\n    }\r\n\r\n    private changeValue(source: any, field: string, value: any) {\r\n        source[field] = value;\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const addBtn = (\r\n                <button onClick={() => this.toggleAddingTile()}>\r\n                    {this.state.addingTile ? 'click somewhere on the map to add your new tile, or click here to cancel' : 'add a new tile'}\r\n                </button>\r\n            );\r\n            let tools = null;\r\n            if (this.state.selectedTileID) {\r\n                const item = this.state.map.items.find(i => i.id === this.state.selectedTileID);\r\n                if (item) {\r\n                    tools = (\r\n                        <div className='tools'>\r\n                            <MapTileCard\r\n                                tile={item}\r\n                                moveMapItem={(mapItem, dir) => this.moveMapItem(mapItem, dir)}\r\n                                resizeMapItem={(mapItem, dir, dir2) => this.resizeMapItem(mapItem, dir, dir2 as 'in' | 'out')}\r\n                                cloneMapItem={mapItem => this.cloneMapItem(mapItem)}\r\n                                removeMapItem={mapItem => this.removeMapItem(mapItem)}\r\n                                changeValue={(source, field, value) => this.changeValue(source, field, value)}\r\n                            />\r\n                            {addBtn}\r\n                        </div>\r\n                    );\r\n                }\r\n            } else {\r\n                tools = (\r\n                    <div className='tools'>\r\n                        <Note\r\n                            content={\r\n                                <div>\r\n                                    <p>to add a new tile to the map, click on the button below</p>\r\n                                    <p>to edit an existing tile, click on it to select it</p>\r\n                                </div>\r\n                            }\r\n                        />\r\n                        {addBtn}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='map-editor'>\r\n                    {tools}\r\n                    <MapPanel\r\n                        map={this.state.map}\r\n                        mode='edit'\r\n                        selectedItemID={this.state.selectedTileID ? this.state.selectedTileID : undefined}\r\n                        showOverlay={this.state.addingTile}\r\n                        setSelectedItemID={id => this.setSelectedTileID(id)}\r\n                        gridSquareClicked={(x, y) => this.addMapTile(x, y)}\r\n                    />\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Frankenstein from '../../utils/frankenstein';\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { CATEGORY_TYPES, Monster, MonsterGroup, Trait, TRAIT_TYPES } from '../../models/monster-group';\r\n\r\nimport MonsterCard from '../cards/monster-card';\r\nimport Checkbox from '../controls/checkbox';\r\nimport Dropdown from '../controls/dropdown';\r\nimport Expander from '../controls/expander';\r\nimport Selector from '../controls/selector';\r\nimport Spin from '../controls/spin';\r\nimport AbilityScorePanel from '../panels/ability-score-panel';\r\nimport FilterPanel from '../panels/filter-panel';\r\nimport TraitsPanel from '../panels/traits-panel';\r\n\r\nimport Note from '../panels/note';\r\n\r\ninterface Props {\r\n    monster: Monster;\r\n    library: MonsterGroup[];\r\n    showSidebar: boolean;\r\n}\r\n\r\ninterface State {\r\n    monster: Monster;\r\n    page: 'overview' | 'abilities' | 'cbt-stats' | 'actions';\r\n    showFilter: boolean;\r\n    helpSection: string;\r\n    sidebar: 'similar' | 'scratchpad';\r\n    similarFilter: {\r\n        size: boolean,\r\n        type: boolean,\r\n        subtype: boolean,\r\n        alignment: boolean,\r\n        challenge: boolean,\r\n        text: string\r\n    };\r\n    scratchpadFilter: {\r\n        name: string,\r\n        challengeMin: number;\r\n        challengeMax: number;\r\n        category: string;\r\n        size: string;\r\n    };\r\n    scratchpadList: Monster[];\r\n}\r\n\r\nexport default class MonsterEditorModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            monster: props.monster,\r\n            page: 'overview',\r\n            showFilter: false,\r\n            helpSection: 'speed',\r\n            sidebar: 'similar',\r\n            similarFilter: {\r\n                size: true,\r\n                type: true,\r\n                subtype: false,\r\n                alignment: false,\r\n                challenge: true,\r\n                text: ''\r\n            },\r\n            scratchpadFilter: {\r\n                name: '',\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: 'all types',\r\n                size: 'all sizes'\r\n            },\r\n            scratchpadList: []\r\n        };\r\n    }\r\n\r\n    private setPage(page: 'overview' | 'abilities' | 'cbt-stats' | 'actions') {\r\n        const sections = this.getHelpOptionsForPage(page);\r\n        this.setState({\r\n            page: page,\r\n            helpSection: sections[0]\r\n        });\r\n    }\r\n\r\n    private toggleFilter() {\r\n        this.setState({\r\n            showFilter: !this.state.showFilter\r\n        });\r\n    }\r\n\r\n    private setHelpSection(section: string) {\r\n        this.setState({\r\n            helpSection: section\r\n        });\r\n    }\r\n\r\n    private toggleMatch(type: 'size' | 'type' | 'subtype' | 'alignment' | 'challenge') {\r\n        // eslint-disable-next-line\r\n        this.state.similarFilter[type] = !this.state.similarFilter[type];\r\n        this.setState({\r\n            similarFilter: this.state.similarFilter\r\n        });\r\n    }\r\n\r\n    private setFilterText(value: string) {\r\n        // eslint-disable-next-line\r\n        this.state.similarFilter.text = value;\r\n        this.setState({\r\n            similarFilter: this.state.similarFilter\r\n        });\r\n    }\r\n\r\n    private addToScratchpadList(monster: Monster) {\r\n        // eslint-disable-next-line\r\n        this.state.scratchpadList.push(monster);\r\n        // eslint-disable-next-line\r\n        Utils.sort(this.state.scratchpadList);\r\n        this.setState({\r\n            scratchpadList: this.state.scratchpadList\r\n        });\r\n    }\r\n\r\n    private removeFromScratchpadList(monster: Monster) {\r\n        const index = this.state.scratchpadList.indexOf(monster);\r\n        this.state.scratchpadList.splice(index, 1);\r\n        this.setState({\r\n            scratchpadList: this.state.scratchpadList\r\n        });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Helper methods\r\n\r\n    private getHelpOptionsForPage(page: 'overview' | 'abilities' | 'cbt-stats' | 'actions') {\r\n        switch (page) {\r\n            case 'overview':\r\n                return ['speed', 'senses', 'languages', 'equipment'];\r\n            case 'abilities':\r\n                return ['str', 'dex', 'con', 'int', 'wis', 'cha', 'saves', 'skills'];\r\n            case 'cbt-stats':\r\n                return ['armor class', 'hit dice', 'resistances', 'vulnerabilities', 'immunities', 'conditions'];\r\n            case 'actions':\r\n                return ['actions'];\r\n            default:\r\n                return [];\r\n        }\r\n    }\r\n\r\n    private getMonsters() {\r\n        const monsters: Monster[] = [];\r\n        this.props.library.forEach(group => {\r\n            group.monsters.forEach(monster => {\r\n                let match = true;\r\n\r\n                if (this.state.monster.id === monster.id) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.similarFilter.size && (this.state.monster.size !== monster.size)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.similarFilter.type && (this.state.monster.category !== monster.category)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.similarFilter.subtype && (this.state.monster.tag !== monster.tag)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.similarFilter.alignment && (this.state.monster.alignment !== monster.alignment)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.similarFilter.challenge && (this.state.monster.challenge !== monster.challenge)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (match) {\r\n                    monsters.push(monster);\r\n                }\r\n            });\r\n        });\r\n\r\n        return monsters;\r\n    }\r\n\r\n    private setRandomValue(field: string, monsters: Monster[]) {\r\n        Frankenstein.setRandomValue(this.state.monster, field, monsters);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private spliceMonsters(monsters: Monster[]) {\r\n        Frankenstein.spliceMonsters(this.state.monster, monsters);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private addTrait(type: 'trait' | 'action' | 'bonus' | 'reaction' | 'legendary' | 'lair') {\r\n        Frankenstein.addTrait(this.state.monster, type);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private addRandomTrait(type: string, monsters: Monster[]) {\r\n        Frankenstein.addRandomTrait(this.state.monster, type, monsters);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private removeTrait(trait: Trait) {\r\n        Frankenstein.removeTrait(this.state.monster, trait);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private swapTraits(t1: Trait, t2: Trait) {\r\n        Frankenstein.swapTraits(this.state.monster, t1, t2);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private copyTrait(trait: Trait) {\r\n        Frankenstein.copyTrait(this.state.monster, trait);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private changeTrait(trait: Trait, field: string, value: any) {\r\n        (trait as any)[field] = value;\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private nudgeValue(field: string, delta: number) {\r\n        Frankenstein.nudgeValue(this.state.monster, field, delta);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private changeValue(field: string, value: any) {\r\n        Frankenstein.changeValue(this.state.monster, field, value);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private changeFilterValue(type: 'name' | 'challengeMin' | 'challengeMax' | 'category' | 'size', value: any) {\r\n        // eslint-disable-next-line\r\n        this.state.scratchpadFilter[type] = value as never;\r\n        this.setState({\r\n            scratchpadFilter: this.state.scratchpadFilter\r\n        });\r\n    }\r\n\r\n    private nudgeFilterValue(type: 'challengeMin' | 'challengeMax', delta: number) {\r\n        const value = Utils.nudgeChallenge(this.state.scratchpadFilter[type], delta);\r\n        this.changeFilterValue(type, value);\r\n    }\r\n\r\n    private resetFilter() {\r\n        this.setState({\r\n            scratchpadFilter: {\r\n                name: '',\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: 'all types',\r\n                size: 'all sizes'\r\n            }\r\n        });\r\n    }\r\n\r\n    private matchMonster(monster: Monster) {\r\n        if (monster.challenge < this.state.scratchpadFilter.challengeMin) {\r\n            return false;\r\n        }\r\n\r\n        if (monster.challenge > this.state.scratchpadFilter.challengeMax) {\r\n            return false;\r\n        }\r\n\r\n        if (this.state.scratchpadFilter.name !== '') {\r\n            if (!Utils.match(this.state.scratchpadFilter.name, monster.name)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.scratchpadFilter.category !== 'all types') {\r\n            if (monster.category !== this.state.scratchpadFilter.category) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.scratchpadFilter.size !== 'all sizes') {\r\n            if (monster.size !== this.state.scratchpadFilter.size) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // HTML render methods\r\n\r\n    private getHelpSection(monsters: Monster[]) {\r\n        switch (this.state.helpSection) {\r\n            case 'speed':\r\n                return this.getValueSection('speed', 'text', monsters);\r\n            case 'senses':\r\n                return this.getValueSection('senses', 'text', monsters);\r\n            case 'languages':\r\n                return this.getValueSection('languages', 'text', monsters);\r\n            case 'equipment':\r\n                return this.getValueSection('equipment', 'text', monsters);\r\n            case 'str':\r\n                return this.getValueSection('abilityScores.str', 'number', monsters);\r\n            case 'dex':\r\n                return this.getValueSection('abilityScores.dex', 'number', monsters);\r\n            case 'con':\r\n                return this.getValueSection('abilityScores.con', 'number', monsters);\r\n            case 'int':\r\n                return this.getValueSection('abilityScores.int', 'number', monsters);\r\n            case 'wis':\r\n                return this.getValueSection('abilityScores.wis', 'number', monsters);\r\n            case 'cha':\r\n                return this.getValueSection('abilityScores.cha', 'number', monsters);\r\n            case 'saves':\r\n                return this.getValueSection('savingThrows', 'text', monsters);\r\n            case 'skills':\r\n                return this.getValueSection('skills', 'text', monsters);\r\n            case 'armor class':\r\n                return this.getValueSection('ac', 'number', monsters);\r\n            case 'hit dice':\r\n                return this.getValueSection('hitDice', 'number', monsters);\r\n            case 'resistances':\r\n                return this.getValueSection('damage.resist', 'text', monsters);\r\n            case 'vulnerabilities':\r\n                return this.getValueSection('damage.vulnerable', 'text', monsters);\r\n            case 'immunities':\r\n                return this.getValueSection('damage.immune', 'text', monsters);\r\n            case 'conditions':\r\n                return this.getValueSection('conditionImmunities', 'text', monsters);\r\n            case 'actions':\r\n                return this.getActionsSection(monsters);\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    private getValueSection(field: string, dataType: 'text' | 'number', monsters: Monster[]) {\r\n        const values: any[] = monsters\r\n            .map(m => {\r\n                const tokens = field.split('.');\r\n                let source: any = m;\r\n                let value = null;\r\n                tokens.forEach(token => {\r\n                    if (token === tokens[tokens.length - 1]) {\r\n                        value = source[token];\r\n                    } else {\r\n                        source = source[token];\r\n                    }\r\n                });\r\n                if ((dataType === 'text') && (value === '')) {\r\n                    value = null;\r\n                }\r\n                return value;\r\n            })\r\n            .filter(v => v !== null);\r\n\r\n        const distinct: { value: any, count: number }[] = [];\r\n        if (dataType === 'number') {\r\n            let min: number | null = null;\r\n            let max: number | null = null;\r\n            values.forEach(v => {\r\n                if ((min === null) || (v < min)) {\r\n                    min = v;\r\n                }\r\n                if ((max === null) || (v > max)) {\r\n                    max = v;\r\n                }\r\n            });\r\n            if ((min !== null) && (max !== null)) {\r\n                for (let n = min; n <= max; ++n) {\r\n                    distinct.push({\r\n                        value: n,\r\n                        count: 0\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        values.forEach(v => {\r\n            const current = distinct.find(d => d.value === v);\r\n            if (current) {\r\n                current.count += 1;\r\n            } else {\r\n                distinct.push({\r\n                    value: v,\r\n                    count: 1\r\n                });\r\n            }\r\n        });\r\n\r\n        switch (dataType) {\r\n            case 'number':\r\n                Utils.sort(distinct, [{ field: 'value', dir: 'asc' }]);\r\n                break;\r\n            case 'text':\r\n                Utils.sort(distinct, [{ field: 'count', dir: 'desc' }, { field: 'value', dir: 'asc' }]);\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        if (dataType === 'text') {\r\n            const count = monsters.length - values.length;\r\n            if (count !== 0) {\r\n                distinct.push({\r\n                    value: '',\r\n                    count: monsters.length - values.length\r\n                });\r\n            }\r\n        }\r\n\r\n        const valueSections = distinct.map(d => {\r\n            const width = 100 * d.count / monsters.length;\r\n            return (\r\n                <div className='row small-up-3 medium-up-3 large-up-3 value-list' key={distinct.indexOf(d)}>\r\n                    <div className='column'>\r\n                        <div className='text-container'>\r\n                            {d.value || '(none specified)'}\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <div className='bar-container'>\r\n                            <div className='bar' style={{ width: width + '%' }} />\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <button onClick={() => this.changeValue(field, d.value)}>use this value</button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                {valueSections}\r\n                <button onClick={() => this.setRandomValue(field, monsters)}>select random value</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getActionsSection(monsters: Monster[]) {\r\n        const rows = [];\r\n        rows.push(\r\n            <div className='row small-up-4 medium-up-4 large-up-4 value-list' key='header'>\r\n                <div className='column'>\r\n                    <div className='text-container'>\r\n                        <b>type</b>\r\n                    </div>\r\n                </div>\r\n                <div className='column'>\r\n                    <div className='text-container number'>\r\n                        <b>average number</b>\r\n                    </div>\r\n                </div>\r\n                <div className='column'>\r\n                    <div className='text-container number'>\r\n                        <b>min - max</b>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        TRAIT_TYPES.forEach(type => {\r\n            let min: number | null = null;\r\n            let max: number | null = null;\r\n            let count = 0;\r\n            monsters.forEach(m => {\r\n                const n = m.traits.filter(t => t.type === type).length;\r\n                if ((min === null) || (n < min)) {\r\n                    min = n;\r\n                }\r\n                if ((max === null) || (n > max)) {\r\n                    max = n;\r\n                }\r\n                count += n;\r\n            });\r\n            const avg = Math.round(count / monsters.length);\r\n\r\n            rows.push(\r\n                <div className='row small-up-4 medium-up-4 large-up-4 value-list' key={type}>\r\n                    <div className='column'>\r\n                        <div className={count === 0 ? 'text-container disabled' : 'text-container'}>\r\n                            {Utils.traitType(type, true)}\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <div className={count === 0 ? 'text-container number disabled' : 'text-container number'}>\r\n                            {avg}\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <div className={count === 0 ? 'text-container number disabled' : 'text-container number'}>\r\n                            {min} - {max}\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <button className={count === 0 ? 'disabled' : ''} onClick={() => this.addRandomTrait(type, monsters)}>add random</button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                {rows}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getMonsterCards(monsters: Monster[]) {\r\n        const sorted = Utils.sort(monsters);\r\n        const monsterCards = sorted.map(m => {\r\n            const showMonster = m.traits.some((t: Trait) => Utils.match(this.state.similarFilter.text, t.name));\r\n            if (showMonster) {\r\n                return (\r\n                    <div className='section' key={m.id}>\r\n                        <MonsterCard\r\n                            combatant={m}\r\n                            mode={'template ' + this.state.page}\r\n                            filter={this.state.similarFilter.text}\r\n                            copyTrait={trait => this.copyTrait(trait)}\r\n                        />\r\n                    </div>\r\n                );\r\n            } else {\r\n                return null;\r\n            }\r\n        }).filter(m => !!m);\r\n\r\n        if (monsterCards.length === 0) {\r\n            let info = '';\r\n            switch (this.state.sidebar) {\r\n                case 'similar':\r\n                    info = 'there are no monsters in your library which match the above criteria.';\r\n                    break;\r\n                case 'scratchpad':\r\n                    info = 'your scratchpad list is empty; you can add monsters to it to see their stats here.';\r\n                    break;\r\n            }\r\n\r\n            return (\r\n                <Note content={info} />\r\n            );\r\n        }\r\n\r\n        return monsterCards;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    public render() {\r\n        try {\r\n            const pages = [\r\n                {\r\n                    id: 'overview',\r\n                    text: 'overview'\r\n                },\r\n                {\r\n                    id: 'abilities',\r\n                    text: 'abilities'\r\n                },\r\n                {\r\n                    id: 'cbt-stats',\r\n                    text: 'combat'\r\n                },\r\n                {\r\n                    id: 'actions',\r\n                    text: 'actions'\r\n                }\r\n            ];\r\n\r\n            let monsters: Monster[] = [];\r\n            if (this.props.showSidebar) {\r\n                switch (this.state.sidebar) {\r\n                    case 'similar':\r\n                        monsters = this.getMonsters();\r\n                        break;\r\n                    case 'scratchpad':\r\n                        monsters = this.state.scratchpadList;\r\n                        break;\r\n                }\r\n            }\r\n\r\n            let content = null;\r\n            switch (this.state.page) {\r\n                case 'overview':\r\n                    const catOptions = CATEGORY_TYPES.map(cat => ({ id: cat, text: cat }));\r\n\r\n                    content = (\r\n                        <div className='row'>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>name</div>\r\n                                <input type='text' value={this.state.monster.name} onChange={event => this.changeValue('name', event.target.value)} />\r\n                                <div className='subheading'>size</div>\r\n                                <Spin\r\n                                    source={this.state.monster}\r\n                                    name='size'\r\n                                    nudgeValue={delta => this.nudgeValue('size', delta)}\r\n                                />\r\n                                <div className='subheading'>type</div>\r\n                                <Dropdown\r\n                                    options={catOptions}\r\n                                    selectedID={this.state.monster.category}\r\n                                    select={optionID => this.changeValue('category', optionID)}\r\n                                />\r\n                                <div className='subheading'>subtype</div>\r\n                                <input type='text' value={this.state.monster.tag} onChange={event => this.changeValue('tag', event.target.value)} />\r\n                                <div className='subheading'>alignment</div>\r\n                                <input type='text' value={this.state.monster.alignment} onChange={event => this.changeValue('alignment', event.target.value)} />\r\n                            </div>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>challenge rating</div>\r\n                                <Spin\r\n                                    source={this.state.monster}\r\n                                    name='challenge'\r\n                                    display={value => Utils.challenge(value)}\r\n                                    nudgeValue={delta => this.nudgeValue('challenge', delta)}\r\n                                />\r\n                                <div className='subheading'>speed</div>\r\n                                <input type='text' value={this.state.monster.speed} onChange={event => this.changeValue('speed', event.target.value)} />\r\n                                <div className='subheading'>senses</div>\r\n                                <input type='text' value={this.state.monster.senses} onChange={event => this.changeValue('senses', event.target.value)} />\r\n                                <div className='subheading'>languages</div>\r\n                                <input type='text' value={this.state.monster.languages} onChange={event => this.changeValue('languages', event.target.value)} />\r\n                                <div className='subheading'>equipment</div>\r\n                                <input type='text' value={this.state.monster.equipment} onChange={event => this.changeValue('equipment', event.target.value)} />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                    break;\r\n                case 'abilities':\r\n                    content = (\r\n                        <div className='row'>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>ability scores</div>\r\n                                <AbilityScorePanel\r\n                                    edit={true}\r\n                                    combatant={this.state.monster}\r\n                                    nudgeValue={(source, type, delta) => this.nudgeValue(type, delta)}\r\n                                />\r\n                            </div>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>saving throws</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.savingThrows}\r\n                                    onChange={event => this.changeValue('savingThrows', event.target.value)}\r\n                                />\r\n                                <div className='subheading'>skills</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.skills}\r\n                                    onChange={event => this.changeValue('skills', event.target.value)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                    break;\r\n                case 'cbt-stats':\r\n                    content = (\r\n                        <div className='row'>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>armor class</div>\r\n                                <Spin\r\n                                    source={this.state.monster}\r\n                                    name='ac'\r\n                                    nudgeValue={delta => this.nudgeValue('ac', delta)}\r\n                                />\r\n                                <div className='subheading'>hit dice</div>\r\n                                <Spin\r\n                                    source={this.state.monster}\r\n                                    name='hitDice'\r\n                                    display={value => value + 'd' + Utils.hitDieType(this.state.monster.size)}\r\n                                    nudgeValue={delta => this.nudgeValue('hitDice', delta)}\r\n                                />\r\n                                <div className='subheading'>hit points</div>\r\n                                <div className='hp-value'>{this.state.monster.hpMax} hp</div>\r\n                            </div>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>damage resistances</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.damage.resist}\r\n                                    onChange={event => this.changeValue('damage.resist', event.target.value)}\r\n                                />\r\n                                <div className='subheading'>damage vulnerabilities</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.damage.vulnerable}\r\n                                    onChange={event => this.changeValue('damage.vulnerable', event.target.value)}\r\n                                />\r\n                                <div className='subheading'>damage immunities</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.damage.immune}\r\n                                    onChange={event => this.changeValue('damage.immune', event.target.value)}\r\n                                />\r\n                                <div className='subheading'>condition immunities</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.conditionImmunities}\r\n                                    onChange={event => this.changeValue('conditionImmunities', event.target.value)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                    break;\r\n                case 'actions':\r\n                    content = (\r\n                        <TraitsPanel\r\n                            combatant={this.state.monster}\r\n                            mode='edit'\r\n                            addTrait={type => this.addTrait(type)}\r\n                            removeTrait={trait => this.removeTrait(trait)}\r\n                            swapTraits={(t1, t2) => this.swapTraits(t1, t2)}\r\n                            changeValue={(trait, type, value) => this.changeTrait(trait, type, value)}\r\n                        />\r\n                    );\r\n                    break;\r\n                default:\r\n                    // Do nothing\r\n                    break;\r\n            }\r\n\r\n            let help = null;\r\n            if (this.props.showSidebar && (monsters.length > 1)) {\r\n                let selector = null;\r\n                if (this.getHelpOptionsForPage(this.state.page).length > 1) {\r\n                    const options = this.getHelpOptionsForPage(this.state.page).map(s => {\r\n                        return {\r\n                            id: s,\r\n                            text: s\r\n                        };\r\n                    });\r\n                    selector = (\r\n                        <Selector\r\n                            tabs={false}\r\n                            options={options}\r\n                            selectedID={this.state.helpSection}\r\n                            select={optionID => this.setHelpSection(optionID)}\r\n                        />\r\n                    );\r\n                }\r\n\r\n                help = (\r\n                    <div className='monster-help'>\r\n                        <div className='divider' />\r\n                        <div className='heading'>information from sidebar monsters</div>\r\n                        {selector}\r\n                        {this.getHelpSection(monsters)}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            let sidebar = null;\r\n            if (this.props.showSidebar) {\r\n                let sidebarContent = null;\r\n                switch (this.state.sidebar) {\r\n                    case 'similar':\r\n                        sidebarContent = (\r\n                            <Expander\r\n                                text='similarity criteria'\r\n                                content={\r\n                                    <div>\r\n                                        <Checkbox\r\n                                            label={'size ' + this.state.monster.size}\r\n                                            checked={this.state.similarFilter.size}\r\n                                            changeValue={value => this.toggleMatch('size')}\r\n                                        />\r\n                                        <Checkbox\r\n                                            label={'type ' + this.state.monster.category}\r\n                                            checked={this.state.similarFilter.type}\r\n                                            changeValue={value => this.toggleMatch('type')}\r\n                                        />\r\n                                        <Checkbox\r\n                                            label={this.state.monster.tag ? 'subtype ' + this.state.monster.tag : 'subtype'}\r\n                                            checked={this.state.similarFilter.subtype}\r\n                                            disabled={!this.state.monster.tag}\r\n                                            changeValue={value => this.toggleMatch('subtype')}\r\n                                        />\r\n                                        <Checkbox\r\n                                            label={this.state.monster.alignment ? 'alignment ' + this.state.monster.alignment : 'alignment'}\r\n                                            checked={this.state.similarFilter.alignment}\r\n                                            disabled={!this.state.monster.alignment}\r\n                                            changeValue={value => this.toggleMatch('alignment')}\r\n                                        />\r\n                                        <Checkbox\r\n                                            label={'challenge rating ' + Utils.challenge(this.state.monster.challenge)}\r\n                                            checked={this.state.similarFilter.challenge}\r\n                                            changeValue={value => this.toggleMatch('challenge')}\r\n                                        />\r\n                                    </div>\r\n                                }\r\n                            />\r\n                        );\r\n                        break;\r\n                    case 'scratchpad':\r\n                        {\r\n                            const searchResults: Monster[] = [];\r\n                            this.props.library.forEach(group => {\r\n                                group.monsters.forEach(m => {\r\n                                    if (!monsters.includes(m) && this.matchMonster(m)) {\r\n                                        searchResults.push(m);\r\n                                    }\r\n                                });\r\n                            });\r\n                            Utils.sort(searchResults);\r\n                            let resultsRows = searchResults.map(m =>\r\n                                <button key={m.id} onClick={() => this.addToScratchpadList(m)}>{m.name}</button>\r\n                            );\r\n                            if (searchResults.length === 0) {\r\n                                resultsRows = [(\r\n                                    <Note key='none' content='no monsters found' />\r\n                                )];\r\n                            }\r\n                            let removeSection = null;\r\n                            if (monsters.length > 0) {\r\n                                const deleteRows = monsters.map(m =>\r\n                                    <button key={m.id} onClick={() => this.removeFromScratchpadList(m)}>{m.name}</button>\r\n                                );\r\n                                removeSection = (\r\n                                    <Expander\r\n                                        text='remove monsters from the list'\r\n                                        content={\r\n                                            <div>\r\n                                                {deleteRows}\r\n                                            </div>\r\n                                        }\r\n                                    />\r\n                                );\r\n                            }\r\n                            sidebarContent = (\r\n                                <div>\r\n                                    <Expander\r\n                                        text='add monsters to the list'\r\n                                        content={\r\n                                            <div>\r\n                                                <FilterPanel\r\n                                                    filter={this.state.scratchpadFilter}\r\n                                                    changeValue={(type, value) => this.changeFilterValue(type, value)}\r\n                                                    nudgeValue={(type, delta) => this.nudgeFilterValue(type, delta)}\r\n                                                    resetFilter={() => this.resetFilter()}\r\n                                                />\r\n                                                <div className='divider' />\r\n                                                {resultsRows}\r\n                                            </div>\r\n                                        }\r\n                                    />\r\n                                    {removeSection}\r\n                                </div>\r\n                            );\r\n                        }\r\n                        break;\r\n                }\r\n                const sidebarOptions = [\r\n                    {\r\n                        id: 'similar',\r\n                        text: 'similar'\r\n                    },\r\n                    {\r\n                        id: 'scratchpad',\r\n                        text: 'scratchpad'\r\n                    }\r\n                ];\r\n                sidebar = (\r\n                    <div className='columns small-4 medium-4 large-4 scrollable wide-column'>\r\n                        <Selector\r\n                            tabs={true}\r\n                            options={sidebarOptions}\r\n                            selectedID={this.state.sidebar}\r\n                            select={optionID => this.setState({sidebar: optionID as 'similar' | 'scratchpad'})}\r\n                        />\r\n                        {sidebarContent}\r\n                        <div className='divider'/>\r\n                        <button className={monsters.length < 2 ? 'disabled' : ''} onClick={() => this.spliceMonsters(monsters)}>\r\n                            build random monster\r\n                        </button>\r\n                        <div className='divider'/>\r\n                        {this.getMonsterCards(monsters)}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='row' style={{ height: '100%', margin: '0 -5px' }}>\r\n                    <div\r\n                        className={\r\n                            this.props.showSidebar\r\n                            ? 'columns small-8 medium-8 large-8 scrollable wide-column'\r\n                            : 'columns small-12 medium-12 large-12 scrollable wide-column'\r\n                        }\r\n                        style={{ transition: 'none' }}\r\n                    >\r\n                        <div className='section'>\r\n                            <Selector\r\n                                tabs={true}\r\n                                options={pages}\r\n                                selectedID={this.state.page}\r\n                                select={optionID => this.setPage(optionID as 'overview' | 'abilities' | 'cbt-stats' | 'actions')}\r\n                            />\r\n                            {content}\r\n                            {help}\r\n                        </div>\r\n                    </div>\r\n                    {sidebar}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { PC } from '../../models/party';\r\n\r\nimport Spin from '../controls/spin';\r\n\r\nimport Factory from '../../utils/factory';\r\n\r\ninterface Props {\r\n    pc: PC;\r\n}\r\n\r\ninterface State {\r\n    pc: PC;\r\n}\r\n\r\nexport default class PCEditorModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            pc: props.pc\r\n        };\r\n    }\r\n\r\n    private addCompanion() {\r\n        const companion = Factory.createCompanion();\r\n        companion.name = 'new companion';\r\n        this.state.pc.companions.push(companion);\r\n        this.setState({\r\n            pc: this.state.pc\r\n        });\r\n    }\r\n\r\n    private removeCompanion(id: string) {\r\n        // eslint-disable-next-line\r\n        this.state.pc.companions = this.state.pc.companions.filter(c => c.id !== id);\r\n        this.setState({\r\n            pc: this.state.pc\r\n        });\r\n    }\r\n\r\n    private changeValue(source: any, field: string, value: any) {\r\n        source[field] = value;\r\n\r\n        this.setState({\r\n            pc: this.state.pc\r\n        });\r\n    }\r\n\r\n    private nudgeValue(source: any, field: string, delta: number) {\r\n        const value = source[field] + delta;\r\n        this.changeValue(source, field, value);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const companions = this.state.pc.companions.map(comp => (\r\n                <div className='row companion' key={comp.id}>\r\n                    <div className='columns small-12 medium-8 large-8'>\r\n                        <input\r\n                            type='text'\r\n                            value={comp.name}\r\n                            onChange={event => this.changeValue(comp, 'name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div className='columns small-12 medium-4 large-4'>\r\n                        <button onClick={() => this.removeCompanion(comp.id)}>delete</button>\r\n                    </div>\r\n                </div>\r\n            ));\r\n\r\n            return (\r\n                <div className='pc-editor'>\r\n                    <div className='row section'>\r\n                        <div className='columns small-12 medium-6 large-6'>\r\n                            <div className='subheading'>character name:</div>\r\n                            <input\r\n                                type='text'\r\n                                value={this.state.pc.name}\r\n                                onChange={event => this.changeValue(this.state.pc, 'name', event.target.value)}\r\n                            />\r\n                            <div className='subheading'>player name:</div>\r\n                            <input\r\n                                type='text'\r\n                                value={this.state.pc.player}\r\n                                onChange={event => this.changeValue(this.state.pc, 'player', event.target.value)}\r\n                            />\r\n                            <div className='subheading'>race:</div>\r\n                            <input\r\n                                type='text'\r\n                                value={this.state.pc.race}\r\n                                onChange={event => this.changeValue(this.state.pc, 'race', event.target.value)}\r\n                            />\r\n                            <div className='subheading'>class:</div>\r\n                            <input\r\n                                type='text'\r\n                                value={this.state.pc.classes}\r\n                                onChange={event => this.changeValue(this.state.pc, 'classes', event.target.value)}\r\n                            />\r\n                            <div className='subheading'>level:</div>\r\n                            <Spin\r\n                                source={this.state.pc}\r\n                                name='level'\r\n                                nudgeValue={delta => this.nudgeValue(this.state.pc, 'level', delta)}\r\n                            />\r\n                            <div className='subheading'>passive skills</div>\r\n                            <Spin\r\n                                source={this.state.pc}\r\n                                name='passiveInsight'\r\n                                label='insight'\r\n                                nudgeValue={delta => this.nudgeValue(this.state.pc, 'passiveInsight', delta)}\r\n                            />\r\n                            <Spin\r\n                                source={this.state.pc}\r\n                                name='passiveInvestigation'\r\n                                label='investigation'\r\n                                nudgeValue={delta => this.nudgeValue(this.state.pc, 'passiveInvestigation', delta)}\r\n                            />\r\n                            <Spin\r\n                                source={this.state.pc}\r\n                                name='passivePerception'\r\n                                label='perception'\r\n                                nudgeValue={delta => this.nudgeValue(this.state.pc, 'passivePerception', delta)}\r\n                            />\r\n                        </div>\r\n                        <div className='columns small-12 medium-6 large-6'>\r\n                            <div className='subheading'>languages:</div>\r\n                            <input\r\n                                type='text'\r\n                                value={this.state.pc.languages}\r\n                                onChange={event => this.changeValue(this.state.pc, 'languages', event.target.value)}\r\n                            />\r\n                            <div className='subheading'>d&d beyond link:</div>\r\n                            <input\r\n                                type='text'\r\n                                value={this.state.pc.url}\r\n                                placeholder='https://ddb.ac/characters/...'\r\n                                onChange={event => this.changeValue(this.state.pc, 'url', event.target.value)}\r\n                            />\r\n                            <div className='subheading'>companions:</div>\r\n                            {companions}\r\n                            <button onClick={() => this.addCompanion()}>add a new companion</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Encounter } from '../../models/encounter';\r\nimport { MonsterGroup } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\ninterface Props {\r\n    view: string;\r\n    blur: boolean;\r\n    library: MonsterGroup[];\r\n    parties: Party[];\r\n    encounters: Encounter[];\r\n    setView: (view: string) => void;\r\n}\r\n\r\nexport default class Navbar extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const partiesStyle = this.props.view === 'parties' ? 'navigator-item selected' : 'navigator-item';\r\n            const libraryStyle = this.props.view === 'library' ? 'navigator-item selected' : 'navigator-item';\r\n            let encounterStyle = this.props.view === 'encounter' ? 'navigator-item selected' : 'navigator-item';\r\n            const mapStyle = this.props.view === 'maps' ? 'navigator-item selected' : 'navigator-item';\r\n            let combatStyle = this.props.view === 'combat' ? 'navigator-item selected' : 'navigator-item';\r\n\r\n            const encountersEnabled = this.props.library.length !== 0;\r\n            const combatEnabled = (this.props.parties.length !== 0) && (this.props.encounters.length !== 0);\r\n            if (!encountersEnabled) {\r\n                encounterStyle += ' disabled';\r\n            }\r\n            if (!combatEnabled) {\r\n                combatStyle += ' disabled';\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.blur ? 'navbar blur' : 'navbar'}>\r\n                    <div className={partiesStyle} onClick={() => this.props.setView('parties')}>player characters</div>\r\n                    <div className={libraryStyle} onClick={() => this.props.setView('library')}>monster library</div>\r\n                    <div className={encounterStyle} onClick={() => encountersEnabled ? this.props.setView('encounter') : null}>encounter builder</div>\r\n                    <div className={mapStyle} onClick={() => this.props.setView('maps')}>map folios</div>\r\n                    <div className={combatStyle} onClick={() => combatEnabled ? this.props.setView('combat') : null}>combat manager</div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport cog from '../../resources/images/settings.svg';\r\n\r\ninterface Props {\r\n    actions: JSX.Element | null;\r\n    blur: boolean;\r\n    openHome: () => void;\r\n    openAbout: () => void;\r\n}\r\n\r\nexport default class Titlebar extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div className={this.props.blur ? 'titlebar blur' : 'titlebar'}>\r\n                    <div className='app-name' onClick={() => this.props.openHome()}>dojo</div>\r\n                    {this.props.actions}\r\n                    <img className='settings-icon' src={cog} title='about' alt='about' onClick={() => this.props.openAbout()} />\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport ellipsis from '../../resources/images/ellipsis.svg';\r\n\r\ninterface Props {\r\n    text: string;\r\n    content: JSX.Element;\r\n    disabled: boolean;\r\n}\r\n\r\ninterface State {\r\n    open: boolean;\r\n}\r\n\r\nexport default class Menu extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            open: false\r\n        };\r\n    }\r\n\r\n    private toggleOpen(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        this.setState({\r\n            open: !this.state.open\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = this.props.disabled ? 'menu disabled' : 'menu';\r\n            const content = [];\r\n\r\n            content.push(\r\n                <div key='selection' className='menu-top'>\r\n                    <div className='menu-text'>{this.props.text}</div>\r\n                    <img className='arrow' src={ellipsis} alt='arrow' />\r\n                </div>\r\n            );\r\n\r\n            if (this.state.open) {\r\n                style += ' open';\r\n\r\n                content.push(\r\n                    <div key='options' className='menu-content'>\r\n                        {this.props.content}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={style} onClick={e => this.toggleOpen(e)}>\r\n                    {content}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Factory from '../utils/factory';\r\nimport Frankenstein from '../utils/frankenstein';\r\nimport Mercator from '../utils/mercator';\r\nimport Utils from '../utils/utils';\r\n\r\nimport { Combat, Combatant, CombatSetup, Notification } from '../models/combat';\r\nimport { Condition } from '../models/condition';\r\nimport { Encounter, EncounterSlot, EncounterWave } from '../models/encounter';\r\nimport { Map, MapFolio } from '../models/map-folio';\r\nimport { Monster, MonsterGroup } from '../models/monster-group';\r\nimport { Party, PC } from '../models/party';\r\n\r\nimport CombatManagerScreen from './screens/combat-manager-screen';\r\nimport EncounterBuilderScreen from './screens/encounter-builder-screen';\r\nimport HomeScreen from './screens/home-screen';\r\nimport MapFoliosScreen from './screens/map-folios-screen';\r\nimport MonsterLibraryScreen from './screens/monster-library-screen';\r\nimport PartiesScreen from './screens/parties-screen';\r\n\r\nimport AboutModal from './modals/about-modal';\r\nimport AddCombatantsModal from './modals/add-combatants-modal';\r\nimport CombatStartModal from './modals/combat-start-modal';\r\nimport ConditionModal from './modals/condition-modal';\r\nimport DemographicsModal from './modals/demographics-modal';\r\nimport MapEditorModal from './modals/map-editor-modal';\r\nimport MonsterEditorModal from './modals/monster-editor-modal';\r\nimport PCEditorModal from './modals/pc-editor-modal';\r\n\r\nimport Navbar from './panels/navbar';\r\nimport Titlebar from './panels/titlebar';\r\n\r\nimport Checkbox from './controls/checkbox';\r\nimport Menu from './controls/menu';\r\n\r\nimport close from '../resources/images/close-black.svg';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    // No props; this is the root component\r\n}\r\n\r\ninterface State {\r\n    view: string;\r\n    modal: any;\r\n    filter: string;\r\n\r\n    parties: Party[];\r\n    library: MonsterGroup[];\r\n    encounters: Encounter[];\r\n    mapFolios: MapFolio[];\r\n    combats: Combat[];\r\n\r\n    selectedPartyID: string | null;\r\n    selectedMonsterGroupID: string | null;\r\n    selectedEncounterID: string | null;\r\n    selectedMapFolioID: string | null;\r\n    selectedCombatID: string | null;\r\n}\r\n\r\nexport default class Dojo extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            view: 'home',\r\n            modal: null,\r\n            filter: '',\r\n            parties: [],\r\n            library: [],\r\n            encounters: [],\r\n            mapFolios: [],\r\n            combats: [],\r\n            selectedPartyID: null,\r\n            selectedMonsterGroupID: null,\r\n            selectedEncounterID: null,\r\n            selectedMapFolioID: null,\r\n            selectedCombatID: null\r\n        };\r\n\r\n        try {\r\n            let data: State | null = null;\r\n\r\n            try {\r\n                const json = window.localStorage.getItem('data');\r\n                if (json) {\r\n                    data = JSON.parse(json);\r\n                }\r\n            } catch (ex) {\r\n                console.error('Could not parse JSON: ', ex);\r\n                data = null;\r\n            }\r\n\r\n            if (data !== null) {\r\n                data.parties.forEach(p => {\r\n                    p.pcs.forEach(pc => {\r\n                        if (pc.companions === undefined) {\r\n                            pc.companions = [];\r\n                        }\r\n                    });\r\n                });\r\n                data.library.forEach(g => {\r\n                    g.monsters.forEach(m => {\r\n                        m.traits.forEach(t => {\r\n                            if (t.uses === undefined) {\r\n                                t.uses = 0;\r\n                            }\r\n                        });\r\n                    });\r\n                });\r\n\r\n                data.encounters.forEach(enc => {\r\n                    if (!enc.waves) {\r\n                        enc.waves = [];\r\n                    }\r\n                });\r\n\r\n                if (!data.mapFolios) {\r\n                    data.mapFolios = [];\r\n                    data.selectedMapFolioID = null;\r\n                }\r\n\r\n                data.mapFolios.forEach(folio => {\r\n                    folio.maps.forEach(map => {\r\n                        map.items.forEach(item => {\r\n                            if (item.style === undefined) {\r\n                                item.style = null;\r\n                            }\r\n                        });\r\n                    });\r\n                });\r\n\r\n                data.combats.forEach(combat => {\r\n                    if (!combat.notifications) {\r\n                        combat.notifications = [];\r\n                    }\r\n                    combat.combatants.forEach(c => {\r\n                        if (c.showOnMap === undefined) {\r\n                            c.showOnMap = true;\r\n                        }\r\n\r\n                        if (c.altitude === undefined) {\r\n                            c.altitude = 0;\r\n                        }\r\n\r\n                        if (c.tags === undefined) {\r\n                            c.tags = [];\r\n                        }\r\n\r\n                        if (c.aura === undefined) {\r\n                            c.aura = { radius: 0, style: 'rounded', color: '#005080' };\r\n                        }\r\n\r\n                        if (c.type === 'monster') {\r\n                            const m = c as Combatant & Monster;\r\n                            m.traits.forEach(t => {\r\n                                if (t.uses === undefined) {\r\n                                    t.uses = 0;\r\n                                }\r\n                            });\r\n                        }\r\n                    });\r\n                });\r\n\r\n                data.view = 'home';\r\n                data.modal = null;\r\n                data.filter = '';\r\n\r\n                this.state = data;\r\n            }\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n\r\n    public componentDidUpdate() {\r\n        let json = null;\r\n        try {\r\n            json = JSON.stringify(this.state);\r\n        } catch (ex) {\r\n            console.error('Could not stringify data: ', ex);\r\n            json = null;\r\n        }\r\n\r\n        if (json !== null) {\r\n            window.localStorage.setItem('data', json);\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Party screen\r\n\r\n    private addParty() {\r\n        const party = Factory.createParty();\r\n        party.name = 'new party';\r\n        const parties: Party[] = ([] as Party[]).concat(this.state.parties, [party]);\r\n        Utils.sort(parties);\r\n        this.setState({\r\n            parties: parties,\r\n            selectedPartyID: party.id\r\n        });\r\n    }\r\n\r\n    private removeParty() {\r\n        const party = this.state.parties.find(p => p.id === this.state.selectedPartyID);\r\n        if (party) {\r\n            const index = this.state.parties.indexOf(party);\r\n            this.state.parties.splice(index, 1);\r\n            this.setState({\r\n                parties: this.state.parties,\r\n                selectedPartyID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private addPC() {\r\n        const party = this.state.parties.find(p => p.id === this.state.selectedPartyID);\r\n        if (party) {\r\n            const pc = Factory.createPC();\r\n            pc.name = 'new pc';\r\n            party.pcs.push(pc);\r\n            this.setState({\r\n                parties: this.state.parties\r\n            });\r\n        }\r\n    }\r\n\r\n    private removePC(pc: PC) {\r\n        const party = this.state.parties.find(p => p.id === this.state.selectedPartyID);\r\n        if (party) {\r\n            const index = party.pcs.indexOf(pc);\r\n            party.pcs.splice(index, 1);\r\n            this.setState({\r\n                parties: this.state.parties\r\n            });\r\n        }\r\n    }\r\n\r\n    private sortPCs() {\r\n        const party = this.state.parties.find(p => p.id === this.state.selectedPartyID);\r\n        if (party) {\r\n            Utils.sort(party.pcs);\r\n            this.setState({\r\n                parties: this.state.parties\r\n            });\r\n        }\r\n    }\r\n\r\n    private editPC(pc: PC) {\r\n        const copy = JSON.parse(JSON.stringify(pc));\r\n        this.setState({\r\n            modal: {\r\n                type: 'pc',\r\n                pc: copy\r\n            }\r\n        });\r\n    }\r\n\r\n    private savePC() {\r\n        Utils.sort(this.state.modal.pc.companions);\r\n        const party = this.state.parties.find(p => p.id === this.state.selectedPartyID);\r\n        if (party) {\r\n            const original = party.pcs.find(pc => pc.id === this.state.modal.pc.id);\r\n            if (original) {\r\n                const index = party.pcs.indexOf(original);\r\n                party.pcs[index] = this.state.modal.pc;\r\n                this.setState({\r\n                    library: this.state.library,\r\n                    modal: null\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Library screen\r\n\r\n    private addMonsterGroup() {\r\n        const group = Factory.createMonsterGroup();\r\n        group.name = 'new group';\r\n        const library = ([] as MonsterGroup[]).concat(this.state.library, [group]);\r\n        Utils.sort(library);\r\n        this.setState({\r\n            library: library,\r\n            selectedMonsterGroupID: group.id\r\n        });\r\n    }\r\n\r\n    private removeMonsterGroup() {\r\n        const group = this.state.library.find(g => g.id === this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            const index = this.state.library.indexOf(group);\r\n            this.state.library.splice(index, 1);\r\n            this.setState({\r\n                library: this.state.library,\r\n                selectedMonsterGroupID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private addMonster() {\r\n        const monster = Factory.createMonster();\r\n        monster.name = 'new monster';\r\n        const group = this.state.library.find(g => g.id === this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            group.monsters.push(monster);\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    private removeMonster(monster: Monster) {\r\n        const group = this.state.library.find(g => g.id === this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            const index = group.monsters.indexOf(monster);\r\n            group.monsters.splice(index, 1);\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    private sortMonsters() {\r\n        const group = this.state.library.find(g => g.id === this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            Utils.sort(group.monsters);\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    private moveToGroup(monster: Monster, groupID: string) {\r\n        const sourceGroup = this.state.library.find(group => group.monsters.includes(monster));\r\n        if (sourceGroup) {\r\n            const index = sourceGroup.monsters.indexOf(monster);\r\n            sourceGroup.monsters.splice(index, 1);\r\n\r\n            const group = this.state.library.find(g => g.id === groupID);\r\n            if (group) {\r\n                group.monsters.push(monster);\r\n                Utils.sort(group.monsters);\r\n\r\n                this.setState({\r\n                    library: this.state.library\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private editMonster(monster: Monster) {\r\n        const copy = JSON.parse(JSON.stringify(monster));\r\n        this.setState({\r\n            modal: {\r\n                type: 'monster',\r\n                monster: copy,\r\n                showSidebar: false\r\n            }\r\n        });\r\n    }\r\n\r\n    private saveMonster() {\r\n        const group = this.state.library.find(g => g.id === this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            const original = group.monsters.find(m => m.id === this.state.modal.monster.id);\r\n            if (original) {\r\n                // We are editing a monster\r\n                const index = group.monsters.indexOf(original);\r\n                group.monsters[index] = this.state.modal.monster;\r\n                this.setState({\r\n                    library: this.state.library,\r\n                    modal: null\r\n                });\r\n            } else {\r\n                // We are adding a new monster\r\n                group.monsters.push(this.state.modal.monster);\r\n                this.setState({\r\n                    library: this.state.library,\r\n                    modal: null\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private toggleShowSidebar() {\r\n        // eslint-disable-next-line\r\n        this.state.modal.showSidebar = !this.state.modal.showSidebar;\r\n        this.setState({\r\n            modal: this.state.modal\r\n        });\r\n    }\r\n\r\n    private openDemographics() {\r\n        this.setState({\r\n            modal: {\r\n                type: 'demographics'\r\n            }\r\n        });\r\n    }\r\n\r\n    private cloneMonster(monster: Monster, name: string) {\r\n        const group = this.state.library.find(g => g.monsters.includes(monster));\r\n        if (group) {\r\n            const clone = Frankenstein.clone(monster, name);\r\n            group.monsters.push(clone);\r\n            Utils.sort(group.monsters);\r\n\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    private addOpenGameContent() {\r\n        fetch('./data/monsters.json')\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                json.forEach((data: any) => {\r\n                    try {\r\n                        if (data.name) {\r\n                            const monster = Frankenstein.createFromJSON(data);\r\n\r\n                            let groupName = monster.tag || monster.category;\r\n                            if (groupName.indexOf('swarm') === 0) {\r\n                                groupName = 'swarm';\r\n                            }\r\n                            if (groupName === 'any race') {\r\n                                groupName = 'npc';\r\n                            }\r\n\r\n                            let group = this.state.library.find(p => p.name === groupName);\r\n                            if (!group) {\r\n                                group = {\r\n                                    id: Utils.guid(),\r\n                                    name: groupName,\r\n                                    monsters: []\r\n                                };\r\n                                this.state.library.push(group);\r\n                            }\r\n                            group.monsters.push(monster);\r\n                        }\r\n                    } catch (e) {\r\n                        console.error(e);\r\n                    }\r\n                });\r\n\r\n                Utils.sort(this.state.library);\r\n\r\n                this.setState({\r\n                    view: 'library',\r\n                    library: this.state.library\r\n                });\r\n            });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Encounter screen\r\n\r\n    private addEncounter() {\r\n        const encounter = Factory.createEncounter();\r\n        encounter.name = 'new encounter';\r\n        const encounters = ([] as Encounter[]).concat(this.state.encounters, [encounter]);\r\n        Utils.sort(encounters);\r\n\r\n        this.setState({\r\n            encounters: encounters,\r\n            selectedEncounterID: encounter.id\r\n        });\r\n    }\r\n\r\n    private removeEncounter() {\r\n        const encounter = this.state.encounters.find(e => e.id === this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            const index = this.state.encounters.indexOf(encounter);\r\n            this.state.encounters.splice(index, 1);\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters,\r\n                selectedEncounterID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private addEncounterSlot(monster: Monster, waveID: string | null) {\r\n        const group = this.state.library.find(g => g.monsters.includes(monster));\r\n        if (group) {\r\n            const slot = Factory.createEncounterSlot();\r\n            slot.monsterGroupName = group.name;\r\n            slot.monsterName = monster.name;\r\n            const encounter = this.state.encounters.find(e => e.id === this.state.selectedEncounterID);\r\n            if (encounter) {\r\n                if (waveID !== null) {\r\n                    const wave = encounter.waves.find(w => w.id === waveID);\r\n                    if (wave) {\r\n                        wave.slots.push(slot);\r\n                        this.sortEncounterSlots(wave);\r\n                    }\r\n                } else {\r\n                    encounter.slots.push(slot);\r\n                    this.sortEncounterSlots(encounter);\r\n                }\r\n\r\n                this.setState({\r\n                    encounters: this.state.encounters\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeEncounterSlot(slot: EncounterSlot, waveID: string | null) {\r\n        const encounter = this.state.encounters.find(e => e.id === this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            if (waveID) {\r\n                const wave = encounter.waves.find(w => w.id === waveID);\r\n                if (wave) {\r\n                    const index = wave.slots.indexOf(slot);\r\n                    wave.slots.splice(index, 1);\r\n                }\r\n            } else {\r\n                const n = encounter.slots.indexOf(slot);\r\n                encounter.slots.splice(n, 1);\r\n            }\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters\r\n            });\r\n        }\r\n    }\r\n\r\n    private sortEncounterSlots(slotContainer: { slots: EncounterSlot[] }) {\r\n        slotContainer.slots.sort((a, b) => {\r\n            const aName = a.monsterName.toLowerCase();\r\n            const bName = b.monsterName.toLowerCase();\r\n            if (aName < bName) { return -1; }\r\n            if (aName > bName) { return 1; }\r\n            return 0;\r\n        });\r\n    }\r\n\r\n    private addWaveToEncounter() {\r\n        const encounter = this.state.encounters.find(e => e.id === this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            const wave = Factory.createEncounterWave();\r\n            wave.name = 'wave ' + (encounter.waves.length + 2);\r\n            encounter.waves.push(wave);\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters\r\n            });\r\n        }\r\n    }\r\n\r\n    private removeWave(wave: EncounterWave) {\r\n        const encounter = this.state.encounters.find(e => e.id === this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            const index = encounter.waves.indexOf(wave);\r\n            encounter.waves.splice(index, 1);\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters\r\n            });\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Map screen\r\n\r\n    private addMapFolio() {\r\n        const folio = Factory.createMapFolio();\r\n        folio.name = 'new folio';\r\n        const folios = ([] as MapFolio[]).concat(this.state.mapFolios, [folio]);\r\n        Utils.sort(folios);\r\n\r\n        this.setState({\r\n            mapFolios: folios,\r\n            selectedMapFolioID: folio.id\r\n        });\r\n    }\r\n\r\n    private removeMapFolio() {\r\n        const folio = this.state.mapFolios.find(f => f.id === this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            const index = this.state.mapFolios.indexOf(folio);\r\n            this.state.mapFolios.splice(index, 1);\r\n\r\n            this.setState({\r\n                mapFolios: this.state.mapFolios,\r\n                selectedMapFolioID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private addMap() {\r\n        const folio = this.state.mapFolios.find(f => f.id === this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            const map = Factory.createMap();\r\n            map.name = 'new map';\r\n            folio.maps.push(map);\r\n\r\n            this.setState({\r\n                mapFolios: this.state.mapFolios\r\n            });\r\n        }\r\n    }\r\n\r\n    private editMap(map: Map) {\r\n        const copy = JSON.parse(JSON.stringify(map));\r\n        this.setState({\r\n            modal: {\r\n                type: 'map',\r\n                map: copy\r\n            }\r\n        });\r\n    }\r\n\r\n    private saveMap() {\r\n        const folio = this.state.mapFolios.find(f => f.id === this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            const original = folio.maps.find(m => m.id === this.state.modal.map.id);\r\n            if (original) {\r\n                const index = folio.maps.indexOf(original);\r\n                folio.maps[index] = this.state.modal.map;\r\n                this.setState({\r\n                    mapFolios: this.state.mapFolios,\r\n                    modal: null\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeMap(map: Map) {\r\n        const folio = this.state.mapFolios.find(f => f.id === this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            const index = folio.maps.indexOf(map);\r\n            folio.maps.splice(index, 1);\r\n            this.setState({\r\n                mapFolios: this.state.mapFolios\r\n            });\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Combat screen\r\n\r\n    private createCombat() {\r\n        const party = this.state.parties.length === 1 ? this.state.parties[0] : null;\r\n        const encounter = this.state.encounters.length === 1 ? this.state.encounters[0] : null;\r\n\r\n        const setup = Factory.createCombatSetup();\r\n        setup.partyID = party ? party.id : null;\r\n        setup.encounterID = encounter ? encounter.id : null;\r\n        if (encounter) {\r\n            setup.monsterNames = Utils.getMonsterNames(encounter);\r\n        }\r\n\r\n        this.setState({\r\n            modal: {\r\n                type: 'combat-start',\r\n                combatSetup: setup\r\n            }\r\n        });\r\n    }\r\n\r\n    private startCombat() {\r\n        const combatSetup: CombatSetup = this.state.modal.combatSetup;\r\n        const party = this.state.parties.find(p => p.id === combatSetup.partyID);\r\n        const encounter = this.state.encounters.find(e => e.id === combatSetup.encounterID);\r\n        if (party && encounter) {\r\n            const partyName = party.name || 'unnamed party';\r\n            const encounterName = encounter.name || 'unnamed encounter';\r\n\r\n            const combat = Factory.createCombat();\r\n            combat.name = partyName + ' vs ' + encounterName;\r\n            combat.encounterID = encounter.id;\r\n\r\n            // Add a copy of each PC to the encounter\r\n            party.pcs.filter(pc => pc.active).forEach(pc => {\r\n                this.addPCToCombat(pc, combat);\r\n            });\r\n\r\n            encounter.slots.forEach(slot => {\r\n                const monster = this.getMonster(slot.monsterName, slot.monsterGroupName);\r\n                if (monster) {\r\n                    const groupInitRoll = Utils.dieRoll();\r\n\r\n                    for (let n = 0; n !== slot.count; ++n) {\r\n                        let displayName = null;\r\n                        if (combatSetup.monsterNames) {\r\n                            const slotNames = combatSetup.monsterNames.find(names => names.id === slot.id);\r\n                            if (slotNames) {\r\n                                displayName = slotNames.names[n];\r\n                            }\r\n                        }\r\n\r\n                        this.addMonsterToCombat(monster, combat, displayName, combatSetup.encounterInitMode, groupInitRoll);\r\n                    }\r\n                } else {\r\n                    combat.issues.push('unknown monster: ' + slot.monsterName + ' in group ' + slot.monsterGroupName);\r\n                }\r\n            });\r\n\r\n            this.sortCombatants(combat);\r\n\r\n            if (combatSetup.folioID && combatSetup.mapID) {\r\n                const folio = this.state.mapFolios.find(f => f.id === combatSetup.folioID);\r\n                if (folio) {\r\n                    const map = folio.maps.find(m => m.id === combatSetup.mapID);\r\n                    if (map) {\r\n                        combat.map = JSON.parse(JSON.stringify(map));\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.setState({\r\n                combats: ([] as Combat[]).concat(this.state.combats, [combat]),\r\n                selectedCombatID: combat.id,\r\n                modal: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private addPCToCombat(pc: PC, combat: Combat) {\r\n        const combatant = JSON.parse(JSON.stringify(pc));\r\n\r\n        combatant.current = false;\r\n        combatant.pending = true;\r\n        combatant.active = false;\r\n        combatant.defeated = false;\r\n\r\n        combatant.displayName = pc.name;\r\n        combatant.displaySize = 'medium';\r\n        combatant.showOnMap = true;\r\n        combatant.initiative = 10;\r\n        combatant.hp = null;\r\n        combatant.conditions = [];\r\n        combatant.tags = [];\r\n        combatant.altitude = 0;\r\n        combatant.aura = { radius: 0, style: 'rounded', color: '#005080' };\r\n\r\n        combat.combatants.push(combatant);\r\n    }\r\n\r\n    private addMonsterToCombat(\r\n        monster: Monster,\r\n        combat: Combat, displayName: string | null = null,\r\n        initMode: 'manual' | 'individual' | 'group' = 'individual',\r\n        groupInitRoll: number = 0) {\r\n\r\n        const combatant = JSON.parse(JSON.stringify(monster));\r\n        combatant.id = Utils.guid();\r\n\r\n        switch (initMode) {\r\n            case 'group':\r\n                combatant.initiative = Utils.modifierValue(monster.abilityScores.dex) + groupInitRoll;\r\n                break;\r\n            case 'individual':\r\n                combatant.initiative = Utils.modifierValue(monster.abilityScores.dex) + Utils.dieRoll();\r\n                break;\r\n            default:\r\n                combatant.initiative = 10;\r\n                break;\r\n        }\r\n\r\n        combatant.current = false;\r\n        combatant.pending = (initMode === 'manual');\r\n        combatant.active = (initMode !== 'manual');\r\n        combatant.defeated = false;\r\n\r\n        combatant.displayName = displayName;\r\n        combatant.displaySize = monster.size;\r\n        combatant.showOnMap = true;\r\n        combatant.hp = combatant.hpMax;\r\n        combatant.conditions = [];\r\n        combatant.tags = [];\r\n        combatant.altitude = 0;\r\n        combatant.aura = { radius: 0, style: 'rounded', color: '#005080' };\r\n\r\n        combat.combatants.push(combatant);\r\n    }\r\n\r\n    private openWaveModal() {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            const encounter = this.state.encounters.find(e => e.id === combat.encounterID);\r\n            if (encounter) {\r\n                const setup = Factory.createCombatSetup();\r\n                setup.encounterID = combat.encounterID;\r\n                setup.monsterNames = Utils.getMonsterNames(encounter);\r\n\r\n                this.setState({\r\n                    modal: {\r\n                        type: 'combat-wave',\r\n                        combatSetup: setup\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private addToEncounter() {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            this.setState({\r\n                modal: {\r\n                    type: 'combat-add-combatants',\r\n                    combatantSlots: [],\r\n                    combat: combat\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private addCombatantsFromModal() {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            this.state.modal.combatantSlots.forEach((slot: EncounterSlot) => {\r\n                const m = this.getMonster(slot.monsterName, slot.monsterGroupName);\r\n                if (m) {\r\n                    const roll = Utils.dieRoll();\r\n                    for (let n = 0; n !== slot.count; ++n) {\r\n                        let displayName = m.name;\r\n                        if (slot.count > 1) {\r\n                            displayName += ' ' + (n + 1);\r\n                        }\r\n                        this.addMonsterToCombat(m, combat, displayName, 'group', roll);\r\n                    }\r\n                }\r\n            });\r\n\r\n            this.sortCombatants(combat);\r\n\r\n            this.setState({\r\n                combats: this.state.combats,\r\n                modal: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private pauseCombat() {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            combat.timestamp = new Date().toLocaleString();\r\n            this.setState({\r\n                combats: this.state.combats,\r\n                selectedCombatID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private resumeCombat(combat: Combat) {\r\n        this.setState({\r\n            selectedCombatID: combat.id\r\n        });\r\n    }\r\n\r\n    private endCombat() {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            const index = this.state.combats.indexOf(combat);\r\n            this.state.combats.splice(index, 1);\r\n            this.setState({\r\n                combats: this.state.combats,\r\n                selectedCombatID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private makeCurrent(combatant: (Combatant & PC) | (Combatant & Monster) | null, newRound: boolean) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            // Handle start-of-turn conditions\r\n            combat.combatants.filter(actor => actor.conditions).forEach(actor => {\r\n                actor.conditions.forEach(c => {\r\n                    if (c.duration) {\r\n                        switch (c.duration.type) {\r\n                            case 'saves':\r\n                                // If it's my condition, and point is START, notify the user\r\n                                if (combat && combatant && (actor.id === combatant.id) && (c.duration.point === 'start')) {\r\n                                    combat.notifications.push({\r\n                                        id: Utils.guid(),\r\n                                        type: 'condition-save',\r\n                                        data: c,\r\n                                        combatant: combatant as Combatant & Monster\r\n                                    });\r\n                                }\r\n                                break;\r\n                            case 'combatant':\r\n                                // If this refers to me, and point is START, remove it\r\n                                if (combat && combatant && (c.duration.combatantID === combatant.id) && (c.duration.point === 'start')) {\r\n                                    const index = actor.conditions.indexOf(c);\r\n                                    actor.conditions.splice(index, 1);\r\n                                    // Notify the user\r\n                                    combat.notifications.push({\r\n                                        id: Utils.guid(),\r\n                                        type: 'condition-end',\r\n                                        data: c,\r\n                                        combatant: combatant as Combatant & Monster\r\n                                    });\r\n                                }\r\n                                break;\r\n                            case 'rounds':\r\n                                // If it's my condition, decrement the condition\r\n                                if (combatant && (actor.id === combatant.id)) {\r\n                                    c.duration.count -= 1;\r\n                                }\r\n                                // If it's now at 0, remove it\r\n                                if (c.duration.count === 0) {\r\n                                    const n = actor.conditions.indexOf(c);\r\n                                    actor.conditions.splice(n, 1);\r\n                                    if (combat) {\r\n                                        // Notify the user\r\n                                        combat.notifications.push({\r\n                                            id: Utils.guid(),\r\n                                            type: 'condition-end',\r\n                                            data: c,\r\n                                            combatant: combatant as Combatant & Monster\r\n                                        });\r\n                                    }\r\n                                }\r\n                                break;\r\n                            default:\r\n                                // Do nothing\r\n                                break;\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n\r\n            // Handle recharging traits\r\n            if (combatant && (combatant.type === 'monster')) {\r\n                (combatant as Monster).traits\r\n                    .filter(t => (t.uses > 0) && t.usage.toLowerCase().startsWith('recharge '))\r\n                    .forEach(t => {\r\n                        combat.notifications.push({\r\n                            id: Utils.guid(),\r\n                            type: 'trait-recharge',\r\n                            data: t,\r\n                            combatant: combatant as Combatant & Monster\r\n                        });\r\n                    });\r\n                (combatant as Monster).traits\r\n                    .filter(t => t.type === 'legendary')\r\n                    .forEach(t => {\r\n                        t.uses = 0;\r\n                    });\r\n            }\r\n\r\n            combat.combatants.forEach(c => {\r\n                c.current = false;\r\n            });\r\n            if (combatant) {\r\n                combatant.current = true;\r\n            }\r\n\r\n            if (newRound) {\r\n                combat.round += 1;\r\n            }\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private makeActive(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            combatant.pending = false;\r\n            combatant.active = true;\r\n            combatant.defeated = false;\r\n\r\n            this.sortCombatants(combat);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private makeDefeated(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        combatant.pending = false;\r\n        combatant.active = false;\r\n        combatant.defeated = true;\r\n\r\n        if (combatant.type === 'monster') {\r\n            // If this monster is on the map, remove them from it\r\n            const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n            if (combat && combat.map) {\r\n                combat.map.items = combat.map.items.filter(item => item.id !== combatant.id);\r\n            }\r\n        }\r\n\r\n        if (combatant.current) {\r\n            this.endTurn(combatant);\r\n        } else {\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private addWaveToCombat() {\r\n        const combatSetup: CombatSetup = this.state.modal.combatSetup;\r\n        const encounter = this.state.encounters.find(e => e.id === combatSetup.encounterID);\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combatSetup && encounter && combat) {\r\n            const wave = encounter.waves.find(w => w.id === combatSetup.waveID);\r\n            if (wave) {\r\n                wave.slots.forEach(slot => {\r\n                    const monster = this.getMonster(slot.monsterName, slot.monsterGroupName);\r\n                    if (monster) {\r\n                        const init = parseInt(Utils.modifier(monster.abilityScores.dex), 10);\r\n                        const groupRoll = Utils.dieRoll();\r\n\r\n                        for (let n = 0; n !== slot.count; ++n) {\r\n                            const singleRoll = Utils.dieRoll();\r\n\r\n                            const combatant = JSON.parse(JSON.stringify(monster));\r\n                            combatant.id = Utils.guid();\r\n\r\n                            combatant.displayName = null;\r\n                            if (combatSetup.monsterNames) {\r\n                                const slotNames = combatSetup.monsterNames.find(names => names.id === slot.id);\r\n                                if (slotNames) {\r\n                                    combatant.displayName = slotNames.names[n];\r\n                                }\r\n                            }\r\n\r\n                            combatant.displaySize = monster.size;\r\n\r\n                            switch (combatSetup.encounterInitMode) {\r\n                                case 'manual':\r\n                                    combatant.initiative = 10;\r\n                                    break;\r\n                                case 'group':\r\n                                    combatant.initiative = init + groupRoll;\r\n                                    break;\r\n                                case 'individual':\r\n                                    combatant.initiative = init + singleRoll;\r\n                                    break;\r\n                                default:\r\n                                    // Do nothing\r\n                                    break;\r\n                            }\r\n\r\n                            combatant.showOnMap = true;\r\n                            combatant.current = false;\r\n                            combatant.pending = (this.state.modal.combatSetup.encounterInitMode === 'manual');\r\n                            combatant.active = (this.state.modal.combatSetup.encounterInitMode !== 'manual');\r\n                            combatant.defeated = false;\r\n\r\n                            combatant.hp = combatant.hpMax;\r\n                            combatant.conditions = [];\r\n                            combatant.tags = [];\r\n                            combatant.altitude = 0;\r\n                            combatant.aura = { radius: 0, style: 'rounded', color: '#005080' };\r\n\r\n                            if (combat) {\r\n                                combat.combatants.push(combatant);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (combat) {\r\n                            const issue = 'unknown monster: ' + slot.monsterName + ' in group ' + slot.monsterGroupName;\r\n                            combat.issues.push(issue);\r\n                        }\r\n                    }\r\n                });\r\n\r\n                this.sortCombatants(combat);\r\n\r\n                this.setState({\r\n                    combats: this.state.combats,\r\n                    modal: null\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeCombatant(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            const index = combat.combatants.indexOf(combatant);\r\n            combat.combatants.splice(index, 1);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private mapAdd(combatant: ((Combatant & PC) | (Combatant & Monster)), x: number, y: number) {\r\n        const item = Factory.createMapItem();\r\n        item.id = combatant.id;\r\n        item.type = combatant.type as 'pc' | 'monster';\r\n        item.x = x;\r\n        item.y = y;\r\n        let size = 1;\r\n        if (combatant.type === 'monster') {\r\n            size = Utils.miniSize((combatant as Monster).size);\r\n        }\r\n        item.height = size;\r\n        item.width = size;\r\n\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat && combat.map) {\r\n            combat.map.items.push(item);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private mapMove(combatant: (Combatant & PC) | (Combatant & Monster), dir: string) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat && combat.map) {\r\n            const item = combat.map.items.find(i => i.id === combatant.id);\r\n            if (item) {\r\n                switch (dir) {\r\n                    case 'N':\r\n                        item.y -= 1;\r\n                        break;\r\n                    case 'NE':\r\n                        item.x += 1;\r\n                        item.y -= 1;\r\n                        break;\r\n                    case 'E':\r\n                        item.x += 1;\r\n                        break;\r\n                    case 'SE':\r\n                        item.x += 1;\r\n                        item.y += 1;\r\n                        break;\r\n                    case 'S':\r\n                        item.y += 1;\r\n                        break;\r\n                    case 'SW':\r\n                        item.x -= 1;\r\n                        item.y += 1;\r\n                        break;\r\n                    case 'W':\r\n                        item.x -= 1;\r\n                        break;\r\n                    case 'NW':\r\n                        item.x -= 1;\r\n                        item.y -= 1;\r\n                        break;\r\n                    default:\r\n                        // Do nothing\r\n                        break;\r\n                }\r\n\r\n                this.setState({\r\n                    combats: this.state.combats\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private mapRemove(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat && combat.map) {\r\n            const item = combat.map.items.find(i => i.id === combatant.id);\r\n            if (item) {\r\n                const index = combat.map.items.indexOf(item);\r\n                combat.map.items.splice(index, 1);\r\n\r\n                this.setState({\r\n                    combats: this.state.combats\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private endTurn(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            // Handle end-of-turn conditions\r\n            combat.combatants.filter(actor => actor.conditions).forEach(actor => {\r\n                actor.conditions.forEach(c => {\r\n                    if (c.duration) {\r\n                        switch (c.duration.type) {\r\n                            case 'saves':\r\n                                // If it's my condition, and point is END, notify the user\r\n                                if (combat && (actor.id === combatant.id) && (c.duration.point === 'end')) {\r\n                                    const saveNotification = Factory.createNotification();\r\n                                    saveNotification.type = 'condition-save';\r\n                                    saveNotification.data = c;\r\n                                    saveNotification.combatant = combatant as Combatant & Monster;\r\n                                    combat.notifications.push(saveNotification);\r\n                                }\r\n                                break;\r\n                            case 'combatant':\r\n                                // If this refers to me, and point is END, remove it\r\n                                if (combat && (c.duration.combatantID === combatant.id) && (c.duration.point === 'end')) {\r\n                                    const n = actor.conditions.indexOf(c);\r\n                                    actor.conditions.splice(n, 1);\r\n                                    // Notify the user\r\n                                    const endNotification = Factory.createNotification();\r\n                                    endNotification.type = 'condition-end';\r\n                                    endNotification.data = c;\r\n                                    endNotification.combatant = combatant as Combatant & Monster;\r\n                                    combat.notifications.push(endNotification);\r\n                                }\r\n                                break;\r\n                            case 'rounds':\r\n                                // We check this at the beginning of each turn, not at the end\r\n                                break;\r\n                            default:\r\n                                // Do nothing\r\n                                break;\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n\r\n            const active = combat.combatants.filter(c => {\r\n                return c.current || (!c.pending && c.active && !c.defeated);\r\n            });\r\n            if (active.length === 0) {\r\n                // There's no-one left in the fight\r\n                this.makeCurrent(null, false);\r\n            } else if ((active.length === 1) && (active[0].defeated)) {\r\n                // The only person in the fight is me, and I'm defeated\r\n                this.makeCurrent(null, false);\r\n            } else {\r\n                let index = active.indexOf(combatant) + 1;\r\n                let newRound = false;\r\n                if (index >= active.length) {\r\n                    index = 0;\r\n                    newRound = true;\r\n                }\r\n                this.makeCurrent(active[index], newRound);\r\n            }\r\n        }\r\n    }\r\n\r\n    private changeHP(combatant: Combatant & Monster, hp: number, temp: number) {\r\n        combatant.hp = hp;\r\n        combatant.hpTemp = temp;\r\n\r\n        this.setState({\r\n            combats: this.state.combats\r\n        });\r\n    }\r\n\r\n    private addCondition(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            const condition = Factory.createCondition();\r\n            condition.name = 'blinded';\r\n\r\n            this.setState({\r\n                modal: {\r\n                    type: 'condition-add',\r\n                    condition: condition,\r\n                    combatant: combatant,\r\n                    combat: combat\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private addConditionFromModal() {\r\n        this.state.modal.combatant.conditions.push(this.state.modal.condition);\r\n\r\n        this.setState({\r\n            combats: this.state.combats,\r\n            modal: null\r\n        });\r\n    }\r\n\r\n    private editCondition(combatant: (Combatant & PC) | (Combatant & Monster), condition: Condition) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            this.setState({\r\n                modal: {\r\n                    type: 'condition-edit',\r\n                    condition: condition,\r\n                    combatant: combatant,\r\n                    combat: combat\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private editConditionFromModal() {\r\n        const conditions: Condition[] = this.state.modal.combatant.conditions;\r\n        const original = conditions.find(c => c.id === this.state.modal.condition.id);\r\n        if (original) {\r\n            const index = conditions.indexOf(original);\r\n            // eslint-disable-next-line\r\n            conditions[index] = this.state.modal.condition;\r\n\r\n            this.setState({\r\n                combats: this.state.combats,\r\n                modal: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private removeCondition(combatant: (Combatant & PC) | (Combatant & Monster), conditionID: string) {\r\n        const condition = combatant.conditions.find(c => c.id === conditionID);\r\n        if (condition) {\r\n            const index = combatant.conditions.indexOf(condition);\r\n            combatant.conditions.splice(index, 1);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private sortCombatants(combat: Combat) {\r\n        combat.combatants.sort((a, b) => {\r\n            // First sort by initiative, descending\r\n            if (a.initiative && b.initiative && (a.initiative < b.initiative)) { return 1; }\r\n            if (a.initiative && b.initiative && (a.initiative > b.initiative)) { return -1; }\r\n            // Then sort by name, ascending\r\n            if (a.name < b.name) { return -1; }\r\n            if (a.name > b.name) { return 1; }\r\n            return 0;\r\n        });\r\n    }\r\n\r\n    private closeNotification(notification: Notification, removeCondition: boolean) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            const index = combat.notifications.indexOf(notification);\r\n            combat.notifications.splice(index, 1);\r\n\r\n            if (removeCondition && notification.combatant && notification.data) {\r\n                const conditionIndex = notification.combatant.conditions.indexOf(notification.data as Condition);\r\n                notification.combatant.conditions.splice(conditionIndex, 1);\r\n            }\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private toggleTag(combatant: Combatant, tag: string) {\r\n        if (combatant.tags.includes(tag)) {\r\n            combatant.tags = combatant.tags.filter(t => t !== tag);\r\n        } else {\r\n            combatant.tags.push(tag);\r\n        }\r\n\r\n        this.setState({\r\n            combats: this.state.combats\r\n        });\r\n    }\r\n\r\n    private scatterMonsters() {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat && combat.map) {\r\n            Mercator.scatterCombatants(combat);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    private setView(view: string) {\r\n        this.setState({\r\n            view: view\r\n        });\r\n    }\r\n\r\n    private openAbout() {\r\n        this.setState({\r\n            modal: {\r\n                type: 'about'\r\n            }\r\n        });\r\n    }\r\n\r\n    private closeModal() {\r\n        this.setState({\r\n            modal: null\r\n        });\r\n    }\r\n\r\n    private selectParty(party: Party | null) {\r\n        this.setState({\r\n            selectedPartyID: party ? party.id : null\r\n        });\r\n    }\r\n\r\n    private selectMonsterGroup(group: MonsterGroup | null) {\r\n        this.setState({\r\n            selectedMonsterGroupID: group ? group.id : null\r\n        });\r\n    }\r\n\r\n    private selectEncounter(encounter: Encounter | null) {\r\n        this.setState({\r\n            selectedEncounterID: encounter ? encounter.id : null\r\n        });\r\n    }\r\n\r\n    private selectMapFolio(mapFolio: MapFolio | null) {\r\n        this.setState({\r\n            selectedMapFolioID: mapFolio ? mapFolio.id : null\r\n        });\r\n    }\r\n\r\n    private resetAll() {\r\n        this.setState({\r\n            parties: [],\r\n            selectedPartyID: null,\r\n            library: [],\r\n            selectedMonsterGroupID: null,\r\n            encounters: [],\r\n            selectedEncounterID: null,\r\n            mapFolios: [],\r\n            selectedMapFolioID: null,\r\n            combats: [],\r\n            selectedCombatID: null\r\n        });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    private getMonster(monsterName: string, groupName: string) {\r\n        const group = this.state.library.find(p => p.name === groupName);\r\n        if (group) {\r\n            return group.monsters.find(monster => monster.name === monsterName);\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    private changeValue(combatant: any, type: string, value: any) {\r\n        switch (type) {\r\n            case 'hp':\r\n                value = Math.min(value, combatant.hpMax);\r\n                value = Math.max(value, 0);\r\n                break;\r\n            case 'hpTemp':\r\n                value = Math.max(value, 0);\r\n                break;\r\n            case 'level':\r\n                value = Math.max(value, 1);\r\n                value = (combatant.player !== undefined) ? Math.min(value, 20) : Math.min(value, 6);\r\n                break;\r\n            case 'count':\r\n                value = Math.max(value, 1);\r\n                break;\r\n            case 'hitDice':\r\n                value = Math.max(value, 1);\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        const tokens = type.split('.');\r\n        let obj = combatant;\r\n        for (let n = 0; n !== tokens.length; ++n) {\r\n            const token = tokens[n];\r\n            if (n === tokens.length - 1) {\r\n                obj[token] = value;\r\n            } else {\r\n                obj = obj[token];\r\n            }\r\n        }\r\n\r\n        Utils.sort(this.state.parties);\r\n        Utils.sort(this.state.library);\r\n        Utils.sort(this.state.encounters);\r\n\r\n        if (type === 'initiative') {\r\n            if (!(combatant as Combatant).pending) {\r\n                const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n                this.sortCombatants(combat as Combat);\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            parties: this.state.parties,\r\n            library: this.state.library,\r\n            encounters: this.state.encounters,\r\n            combats: this.state.combats,\r\n            selectedPartyID: this.state.selectedPartyID,\r\n            selectedMonsterGroupID: this.state.selectedMonsterGroupID,\r\n            selectedEncounterID: this.state.selectedEncounterID,\r\n            selectedCombatID: this.state.selectedCombatID,\r\n            modal: this.state.modal\r\n        });\r\n    }\r\n\r\n    private nudgeValue(combatant: any, type: string, delta: number) {\r\n        const tokens = type.split('.');\r\n        let obj = combatant;\r\n        for (let n = 0; n !== tokens.length; ++n) {\r\n            const token = tokens[n];\r\n            if (n === tokens.length - 1) {\r\n                let value = null;\r\n                switch (token) {\r\n                    case 'challenge':\r\n                        value = Utils.nudgeChallenge(obj[token], delta);\r\n                        break;\r\n                    case 'size':\r\n                    case 'displaySize':\r\n                        value = Utils.nudgeSize(obj[token], delta);\r\n                        break;\r\n                    default:\r\n                        value = obj[token] + delta;\r\n                }\r\n                this.changeValue(combatant, type, value);\r\n            } else {\r\n                obj = obj[token];\r\n            }\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    private getActions() {\r\n        switch (this.state.view) {\r\n            case 'parties':\r\n            case 'encounter':\r\n            case 'maps':\r\n                return (\r\n                    <div className='actions'>\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='search'\r\n                                value={this.state.filter}\r\n                                onChange={event => this.changeValue(this.state, 'filter', event.target.value)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                );\r\n            case 'library':\r\n                return (\r\n                    <div className='actions'>\r\n                        <div className='section'>\r\n                            <button onClick={() => this.openDemographics()}>demographics</button>\r\n                        </div>\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='search'\r\n                                value={this.state.filter}\r\n                                onChange={event => this.changeValue(this.state, 'filter', event.target.value)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                );\r\n            case 'combat':\r\n                const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n                if (combat) {\r\n                    let xp = 0;\r\n                    let allowWave = false;\r\n                    const encounter = this.state.encounters.find(e => e.id === combat.encounterID);\r\n                    if (encounter) {\r\n                        combat.combatants.filter(c => c.type === 'monster')\r\n                            .forEach(combatant => {\r\n                                xp += Utils.experience((combatant as Combatant & Monster).challenge);\r\n                            });\r\n                        allowWave = (encounter.waves.length !== 0);\r\n                    }\r\n                    return (\r\n                        <div className='actions'>\r\n                            <div className='section'>\r\n                                <div className='text'>round: {combat.round}</div>\r\n                            </div>\r\n                            <div className='section'>\r\n                                <div className='text'>xp: {xp}</div>\r\n                            </div>\r\n                            <div className='section'>\r\n                                <Menu\r\n                                    text='add'\r\n                                    content={(\r\n                                        <div>\r\n                                            <button onClick={() => this.addToEncounter()}>add combatants</button>\r\n                                            <button onClick={() => this.openWaveModal()} className={allowWave ? '' : 'disabled'}>add wave</button>\r\n                                        </div>\r\n                                    )}\r\n                                />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <button onClick={() => this.pauseCombat()}>pause encounter</button>\r\n                            </div>\r\n                            <div className='section'>\r\n                                <button onClick={() => this.endCombat()}>end encounter</button>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                } else {\r\n                    return (\r\n                        <div className='actions'>\r\n                            <div className='section'>\r\n                                <input\r\n                                    type='text'\r\n                                    placeholder='search'\r\n                                    value={this.state.filter}\r\n                                    onChange={event => this.changeValue(this.state, 'filter', event.target.value)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private getContent() {\r\n        switch (this.state.view) {\r\n            case 'home':\r\n                return (\r\n                    <HomeScreen\r\n                        library={this.state.library}\r\n                        addOpenGameContent={() => this.addOpenGameContent()}\r\n                    />\r\n                );\r\n            case 'parties':\r\n                return (\r\n                    <PartiesScreen\r\n                        parties={this.state.parties}\r\n                        selection={this.state.parties.find(p => p.id === this.state.selectedPartyID) || null}\r\n                        filter={this.state.filter}\r\n                        selectParty={party => this.selectParty(party)}\r\n                        addParty={() => this.addParty()}\r\n                        removeParty={() => this.removeParty()}\r\n                        addPC={() => this.addPC()}\r\n                        editPC={pc => this.editPC(pc)}\r\n                        removePC={pc => this.removePC(pc)}\r\n                        sortPCs={() => this.sortPCs()}\r\n                        changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                        nudgeValue={(combatant, type, delta) => this.nudgeValue(combatant, type, delta)}\r\n                    />\r\n                );\r\n            case 'library':\r\n                return (\r\n                    <MonsterLibraryScreen\r\n                        library={this.state.library}\r\n                        selection={this.state.library.find(g => g.id === this.state.selectedMonsterGroupID) || null}\r\n                        filter={this.state.filter}\r\n                        selectMonsterGroup={group => this.selectMonsterGroup(group)}\r\n                        addMonsterGroup={() => this.addMonsterGroup()}\r\n                        removeMonsterGroup={() => this.removeMonsterGroup()}\r\n                        addMonster={() => this.addMonster()}\r\n                        removeMonster={monster => this.removeMonster(monster)}\r\n                        sortMonsters={() => this.sortMonsters()}\r\n                        changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                        nudgeValue={(combatant, type, delta) => this.nudgeValue(combatant, type, delta)}\r\n                        editMonster={combatant => this.editMonster(combatant)}\r\n                        cloneMonster={(combatant, name) => this.cloneMonster(combatant, name)}\r\n                        moveToGroup={(combatant, groupID) => this.moveToGroup(combatant, groupID)}\r\n                    />\r\n                );\r\n            case 'encounter':\r\n                return (\r\n                    <EncounterBuilderScreen\r\n                        encounters={this.state.encounters}\r\n                        selection={this.state.encounters.find(e => e.id === this.state.selectedEncounterID) || null}\r\n                        filter={this.state.filter}\r\n                        parties={this.state.parties}\r\n                        library={this.state.library}\r\n                        selectEncounter={encounter => this.selectEncounter(encounter)}\r\n                        addEncounter={() => this.addEncounter()}\r\n                        removeEncounter={() => this.removeEncounter()}\r\n                        addWave={() => this.addWaveToEncounter()}\r\n                        removeWave={wave => this.removeWave(wave)}\r\n                        getMonster={(monsterName, groupName) => this.getMonster(monsterName, groupName) || null}\r\n                        addEncounterSlot={(monster, waveID) => this.addEncounterSlot(monster, waveID)}\r\n                        removeEncounterSlot={(slot, waveID) => this.removeEncounterSlot(slot, waveID)}\r\n                        nudgeValue={(slot, type, delta) => this.nudgeValue(slot, type, delta)}\r\n                        changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                    />\r\n                );\r\n            case 'maps':\r\n                return (\r\n                    <MapFoliosScreen\r\n                        mapFolios={this.state.mapFolios}\r\n                        selection={this.state.mapFolios.find(f => f.id === this.state.selectedMapFolioID) || null}\r\n                        filter={this.state.filter}\r\n                        selectMapFolio={folio => this.selectMapFolio(folio)}\r\n                        addMapFolio={() => this.addMapFolio()}\r\n                        removeMapFolio={() => this.removeMapFolio()}\r\n                        addMap={() => this.addMap()}\r\n                        editMap={map => this.editMap(map)}\r\n                        removeMap={map => this.removeMap(map)}\r\n                        changeValue={(source, type, value) => this.changeValue(source, type, value)}\r\n                    />\r\n                );\r\n            case 'combat':\r\n                return (\r\n                    <CombatManagerScreen\r\n                        combats={this.state.combats}\r\n                        combat={this.state.combats.find(c => c.id === this.state.selectedCombatID) || null}\r\n                        filter={this.state.filter}\r\n                        createCombat={() => this.createCombat()}\r\n                        resumeEncounter={pausedCombat => this.resumeCombat(pausedCombat)}\r\n                        nudgeValue={(combatant, type, delta) => this.nudgeValue(combatant, type, delta)}\r\n                        changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                        makeCurrent={(combatant) => this.makeCurrent(combatant, false)}\r\n                        makeActive={(combatant) => this.makeActive(combatant)}\r\n                        makeDefeated={(combatant) => this.makeDefeated(combatant)}\r\n                        removeCombatant={(combatant) => this.removeCombatant(combatant)}\r\n                        addCondition={(combatant) => this.addCondition(combatant)}\r\n                        editCondition={(combatant, condition) => this.editCondition(combatant, condition)}\r\n                        removeCondition={(combatant, conditionID) => this.removeCondition(combatant, conditionID)}\r\n                        mapAdd={(combatant, x, y) => this.mapAdd(combatant, x, y)}\r\n                        mapMove={(combatant, dir) => this.mapMove(combatant, dir)}\r\n                        mapRemove={combatant => this.mapRemove(combatant)}\r\n                        endTurn={(combatant) => this.endTurn(combatant)}\r\n                        changeHP={(combatant, hp, temp) => this.changeHP(combatant, hp, temp)}\r\n                        close={(notification, removeCondition) => this.closeNotification(notification, removeCondition)}\r\n                        toggleTag={(combatant, tag) => this.toggleTag(combatant, tag)}\r\n                        scatterMonsters={() => this.scatterMonsters()}\r\n                    />\r\n                );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private getModal() {\r\n        if (this.state.modal) {\r\n            let modalSidebar = false;\r\n            let modalTitle = null;\r\n            let modalContent = null;\r\n            let modalAllowScroll = true;\r\n\r\n            const modalButtons = {\r\n                left: [] as JSX.Element[],\r\n                right: [\r\n                    <button key='close' onClick={() => this.closeModal()}>close</button>\r\n                ] as JSX.Element[]\r\n            };\r\n\r\n            switch (this.state.modal.type) {\r\n                case 'about':\r\n                    modalSidebar = true;\r\n                    modalContent = (\r\n                        <AboutModal\r\n                            resetAll={() => this.resetAll()}\r\n                            changeValue={(source, type, value) => this.changeValue(source, type, value)}\r\n                        />\r\n                    );\r\n                    modalButtons.right = [];\r\n                    break;\r\n                case 'demographics':\r\n                    modalSidebar = true;\r\n                    modalContent = (\r\n                        <DemographicsModal\r\n                            library={this.state.library}\r\n                        />\r\n                    );\r\n                    modalButtons.right = [];\r\n                    break;\r\n                case 'pc':\r\n                        modalTitle = 'pc editor';\r\n                        modalContent = (\r\n                            <PCEditorModal\r\n                                pc={this.state.modal.pc}\r\n                            />\r\n                        );\r\n                        modalButtons.right = [\r\n                            <button key='save' onClick={() => this.savePC()}>save</button>,\r\n                            <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                        ];\r\n                        break;\r\n                case 'monster':\r\n                    modalTitle = 'monster editor';\r\n                    modalContent = (\r\n                        <MonsterEditorModal\r\n                            monster={this.state.modal.monster}\r\n                            library={this.state.library}\r\n                            showSidebar={this.state.modal.showSidebar}\r\n                        />\r\n                    );\r\n                    modalAllowScroll = false;\r\n                    modalButtons.left = [\r\n                        (\r\n                            <Checkbox\r\n                                key='sidebar'\r\n                                label='advanced tools'\r\n                                checked={this.state.modal.showSidebar}\r\n                                changeValue={() => this.toggleShowSidebar()}\r\n                            />\r\n                        )\r\n                    ];\r\n                    modalButtons.right = [\r\n                        <button key='save' onClick={() => this.saveMonster()}>save</button>,\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                case 'map':\r\n                    modalTitle = 'map editor';\r\n                    modalContent = (\r\n                        <MapEditorModal\r\n                            map={this.state.modal.map}\r\n                        />\r\n                    );\r\n                    modalAllowScroll = false;\r\n                    modalButtons.right = [\r\n                        <button key='save' onClick={() => this.saveMap()}>save</button>,\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                case 'combat-start':\r\n                    modalTitle = 'start a new encounter';\r\n                    modalContent = (\r\n                        <CombatStartModal\r\n                            combatSetup={this.state.modal.combatSetup}\r\n                            parties={this.state.parties}\r\n                            encounters={this.state.encounters}\r\n                            mapFolios={this.state.mapFolios}\r\n                            getMonster={(monsterName, groupName) => this.getMonster(monsterName, groupName) || null}\r\n                            notify={() => this.setState({modal: this.state.modal})}\r\n                        />\r\n                    );\r\n                    modalAllowScroll = false;\r\n                    modalButtons.right = [\r\n                        (\r\n                            <button\r\n                                key='start encounter'\r\n                                className={this.state.modal.combatSetup.partyID && this.state.modal.combatSetup.encounterID ? '' : 'disabled'}\r\n                                onClick={() => this.startCombat()}\r\n                            >\r\n                                start encounter\r\n                            </button>\r\n                        ),\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                case 'combat-wave':\r\n                    modalTitle = 'encounter waves';\r\n                    modalContent = (\r\n                        <CombatStartModal\r\n                            combatSetup={this.state.modal.combatSetup}\r\n                            encounters={this.state.encounters}\r\n                            getMonster={(monsterName, groupName) => this.getMonster(monsterName, groupName) || null}\r\n                            notify={() => this.setState({modal: this.state.modal})}\r\n                        />\r\n                    );\r\n                    modalAllowScroll = false;\r\n                    modalButtons.right = [\r\n                        (\r\n                            <button\r\n                                key='add wave'\r\n                                className={this.state.modal.combatSetup.waveID !== null ? '' : 'disabled'}\r\n                                onClick={() => this.addWaveToCombat()}\r\n                            >\r\n                                add wave\r\n                            </button>\r\n                        ),\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                case 'combat-add-combatants':\r\n                        modalTitle = 'add combatants';\r\n                        modalContent = (\r\n                            <AddCombatantsModal\r\n                                combatantSlots={this.state.modal.combatantSlots}\r\n                                library={this.state.library}\r\n                            />\r\n                        );\r\n                        modalAllowScroll = false;\r\n                        modalButtons.right = [\r\n                            (\r\n                                <button\r\n                                    key='add combatants'\r\n                                    onClick={() => this.addCombatantsFromModal()}\r\n                                >\r\n                                    add combatants\r\n                                </button>\r\n                            ),\r\n                            <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                        ];\r\n                        break;\r\n                case 'condition-add':\r\n                    modalTitle = 'add a condition';\r\n                    modalContent = (\r\n                        <ConditionModal\r\n                            condition={this.state.modal.condition}\r\n                            combatant={this.state.modal.combatant}\r\n                            combat={this.state.modal.combat}\r\n                        />\r\n                    );\r\n                    modalAllowScroll = false;\r\n                    modalButtons.right = [\r\n                        <button key='add' onClick={() => this.addConditionFromModal()}>add</button>,\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                case 'condition-edit':\r\n                    modalTitle = 'edit condition';\r\n                    modalContent = (\r\n                        <ConditionModal\r\n                            condition={this.state.modal.condition}\r\n                            combatant={this.state.modal.combatant}\r\n                            combat={this.state.modal.combat}\r\n                        />\r\n                    );\r\n                    modalButtons.right = [\r\n                        <button key='save' onClick={() => this.editConditionFromModal()}>save</button>,\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                default:\r\n                    // Do nothing\r\n                    break;\r\n            }\r\n\r\n            return (\r\n                <div className='overlay' onClick={() => modalSidebar ? this.closeModal() : null}>\r\n                    <div className={modalSidebar ? 'modal sidebar' : 'modal'} onClick={e => e.stopPropagation()}>\r\n                        <div className='modal-header'>\r\n                            <div className='title'>{modalTitle}</div>\r\n                            {modalSidebar ? <img className='image' src={close} alt='close' onClick={() => this.closeModal()} /> : null}\r\n                        </div>\r\n                        <div className={modalAllowScroll ? 'modal-content scrollable' : 'modal-content'}>\r\n                            {modalContent}\r\n                        </div>\r\n                        <div className='modal-footer'>\r\n                            <div className='left'>{modalButtons.left}</div>\r\n                            <div className='right'>{modalButtons.right}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const content = this.getContent();\r\n            const actions = this.getActions();\r\n            const modal = this.getModal();\r\n\r\n            return (\r\n                <div className='dojo'>\r\n                    <Titlebar\r\n                        actions={actions}\r\n                        blur={modal !== null}\r\n                        openHome={() => this.setView('home')}\r\n                        openAbout={() => this.openAbout()}\r\n                    />\r\n                    <div className={(modal === null) ? 'page-content' : 'page-content blur'}>\r\n                        {content}\r\n                    </div>\r\n                    <Navbar\r\n                        view={this.state.view}\r\n                        parties={this.state.parties}\r\n                        library={this.state.library}\r\n                        encounters={this.state.encounters}\r\n                        blur={modal !== null}\r\n                        setView={view => this.setView(view)}\r\n                    />\r\n                    {modal}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './style/css/foundation.css';\r\nimport './style/scss/app.scss';\r\nimport './style/scss/controls.scss';\r\n\r\nimport Dojo from './components/dojo';\r\n\r\nReactDOM.render(<Dojo />, document.getElementById('root'));\r\n"],"sourceRoot":""}