{"version":3,"sources":["resources/images/down-arrow-black.svg","resources/images/down-arrow.svg","resources/images/close-black.svg","resources/images/warning.svg","resources/images/ellipsis.svg","resources/images/minus.svg","resources/images/plus.svg","resources/images/settings.svg","utils/utils.ts","utils/factory.ts","models/monster-group.ts","utils/frankenstein.ts","components/controls/checkbox.tsx","components/controls/confirm-button.tsx","components/controls/control-row.tsx","components/controls/dropdown.tsx","components/controls/expander.tsx","components/controls/radial.tsx","components/controls/spin.tsx","components/panels/ability-score-panel.tsx","components/panels/conditions-panel.tsx","components/panels/note.tsx","components/panels/traits-panel.tsx","components/cards/info-card.tsx","components/cards/monster-card.tsx","components/cards/pc-card.tsx","components/panels/hit-point-gauge.tsx","components/panels/map-panel.tsx","components/list-items/combat-list-item.tsx","components/panels/card-group.tsx","components/screens/combat-manager-screen.tsx","components/cards/filter-card.tsx","components/cards/wave-card.tsx","components/list-items/encounter-list-item.tsx","components/panels/difficulty-chart-panel.tsx","components/screens/encounter-builder-screen.tsx","components/panels/readaloud.tsx","components/screens/home-screen.tsx","components/cards/map-card.tsx","components/list-items/map-folio-list-item.tsx","components/screens/map-folios-screen.tsx","components/list-items/monster-group-list-item.tsx","components/screens/monster-library-screen.tsx","components/list-items/party-list-item.tsx","components/screens/parties-screen.tsx","components/controls/selector.tsx","components/dm-modules/die-roller-module.tsx","utils/speech.ts","utils/text-generation.ts","components/dm-modules/language-module.tsx","components/dm-modules/name-module.tsx","components/dm-modules/reference-module.tsx","components/modals/about-modal.tsx","components/modals/add-combatants-modal.tsx","components/modals/combat-start-modal.tsx","models/condition.ts","components/controls/radio-group.tsx","components/modals/condition-modal.tsx","components/modals/demographics-modal.tsx","models/map-folio.ts","components/cards/map-tile-card.tsx","components/modals/map-editor-modal.tsx","components/modals/monster-editor-modal.tsx","components/modals/pc-editor-modal.tsx","components/modals/random-monster-modal.tsx","components/panels/navbar.tsx","components/panels/titlebar.tsx","components/dojo.tsx","index.js"],"names":["module","exports","__webpack_require__","p","Utils","monster","library","group","this","monsterIdToGroup","id","grp","find","g","monsters","includes","filter","text","result","toLowerCase","split","forEach","token","indexOf","s4","Math","floor","random","toString","substring","collection","sorts","arguments","length","undefined","field","dir","sort","a","b","order","fn","score","mod","modifierValue","str","sides","size","cr","parseInt","push","ac","hpMin","hpMax","attack","dmgMin","dmgMax","save","count","level","difficulty","type","plural","value","delta","condition","name","combat","duration","saveDuration","saveType","toUpperCase","saves","saveDC","combatantDuration","point","c","combatants","cmb","combatantID","displayName","roundsDuration","rounds","encounter","monsterNames","slots","slot","names","monsterName","n","Factory","guid","pcs","active","player","race","classes","languages","passiveInsight","passiveInvestigation","passivePerception","initiative","url","category","tag","alignment","challenge","abilityScores","dex","con","int","wis","cha","hpTemp","hitDice","damage","resist","vulnerable","immune","savingThrows","speed","skills","senses","equipment","traits","conditionImmunities","usage","uses","waves","monsterGroupName","maps","items","x","y","width","height","terrain","partyID","encounterID","waveID","folioID","mapID","encounterInitMode","map","round","notifications","issues","timestamp","data","combatant","SIZE_TYPES","CATEGORY_TYPES","TRAIT_TYPES","Frankenstein","target","source","tokens","newValue","nudgeChallenge","changeValue","hpPerDie","hitDieType","hp","trait","_this","createMonster","subtype","parseChallenge","challenge_rating","armor_class","hit_points","index","hit_dice","strength","dexterity","constitution","intelligence","wisdom","charisma","damage_resistances","damage_vulnerabilities","damage_immunities","condition_immunities","skill","special_abilities","rawTrait","buildTrait","actions","legendary_actions","openBracket","closeBracket","desc","replace","copy","JSON","parse","stringify","createTrait","traitType","splice","t1","t2","index1","index2","_this2","setRandomValue","m","t","distinct","current","d","addedIDs","copyTrait","findIndex","avg","Checkbox","e","stopPropagation","props","checked","style","disabled","toggle","react_default","createElement","className","onClick","click","label","ex","console","error","React","Component","defaultProps","ConfirmButton","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","pressed","setState","callback","content","src","warning","alt","details","perform","ControlRow","controls","Dropdown","open","optionID","select","options","selectedText","selectedID","option","o","placeholder","key","title","ellipsis","dropdown_DropdownOption","selected","toggleOpen","DropdownOption","_this3","Expander","expanded","arrow","Radial","dir2","direction","showOut","showIn","showDiag","display","transform","padding","Spin","nudgeValue","preventDefault","minusBtns","plusBtns","factors","factor","onTouchEnd","touchEnd","reverse","minus","plus","infoWidth","AbilityScorePanel","showAbilityScores","edit","spin_Spin","toggleAbilityScores","modifier","ConditionsPanel","conditions","conditions_panel_ConditionPanel","nudgeConditionValue","editCondition","removeCondition","conditionID","addCondition","ConditionPanel","conditionDurationText","description","conditionText","expander_Expander","Note","white","showdown","Showdown","Converter","TraitsPanel","prevTrait","nextTrait","traits_panel_TraitPanel","mode","action","removeTrait","swapTraits","traitsByType","showInfo","info","note_Note","match","list","createTraitPanel","addTrait","createSection","TraitPanel","maxUses","heading","used","startsWith","found","markdown","dangerouslySetInnerHTML","__html","makeHtml","onChange","event","confirm_button_ConfirmButton","InfoCard","MonsterCard","showDetails","cloneName","damageOrHealing","max","min","changeHP","temp","val","sizeAndType","align","wave","_this4","some","s","die","conMod","conModStr","_this5","editMonster","setCloneName","cloneMonster","groupOptions","dropdown_Dropdown","moveToGroup","removeMonster","removeEncounterSlot","canAdd","monsterIsInWave","addEncounterSlot","info_card_InfoCard","selectMonster","deselectMonster","radial_Radial","mapMove","mapRemove","mapAdd","pending","defeated","removeCombatant","endTurn","makeDefeated","makeCurrent","makeActive","checkbox_Checkbox","concentrating","stats","slotSection","getHP","ability_score_panel_AbilityScorePanel","traits_panel_TraitsPanel","nudgeDamage","control_row_ControlRow","heal","setDamage","conditions_panel_ConditionsPanel","imageStyle","toggleDetails","PCCard","editPC","removePC","href","rel","HitPointGauge","hpCurrent","hpBloodied","hpWidth","hpTempBar","hpTempWidth","MapPanel","border","dimensions","i","minX","maxX","minY","maxY","mapDimensions","sideLength","getSideLength","left","top","getMapDimensions","grid","gridStyle","getStyle","map_panel_GridSquare","setSelectedItemID","onDoubleClick","posX","posY","addMapTile","tiles","tileStyle","map_panel_MapTile","tile","selectable","selectedItemID","thumbnail","tokenStyle","map_panel_MapToken","simple","mt","dragOverlay","showOverlay","yOver","xOver","overlayStyle","overlay","gridSquareClicked","GridSquare","doubleClick","MapTile","MapToken","initials","hpGauge","altitudeBadge","conditionsBadge","hit_point_gauge_HitPointGauge","altitude","CombatListItem","map_panel_MapPanel","setSelection","CardGroup","showCards","hidden","closeBtn","close","showToggle","toggleCards","cards","CombatManagerScreen","selectedTokenID","addingToMapID","pc_card_PCCard","setAddingToMapID","monster_card_MonsterCard","createCard","combat_manager_screen_PendingCombatantRow","setSelectedTokenID","combat_manager_screen_PCRow","combat_manager_screen_MonsterRow","pendingHelp","concat","activeHelp","notificationSection","combat_manager_screen_NotificationPanel","notification","mapSection","addCombatantToMap","special","legendary","lair","selectedCombatant","card_group_CardGroup","listItems","combats","showCombat","combat_list_item_CombatListItem","resumeEncounter","createCombat","combat_manager_screen_HelpCard","HelpCard","NotificationPanel","success","PendingCombatantRow","_this6","getInformationText","PCRow","_this7","notes","MonsterRow","_this8","gauge","FilterCard","showAll","sizeOptions","catOptions","cat","resetFilter","summary","challengeMin","challengeMax","toggleAll","WaveCard","removeWave","EncounterListItem","DifficultyChartPanel","monsterCount","monsterXp","getMonster","experience","xpThresholds","diffSection","adjustedXp","experienceFactor","party","xpEasy","xpMedium","xpHard","xpDeadly","pc","pcExperience","adjustedDifficulty","small","getLeft","xp","getRight","right","EncounterBuilderScreen","changeFilterValue","selection","libraryCards","filter_card_FilterCard","nudgeFilterValue","matchMonster","enc","encounterName","leftColumn","encounter_builder_screen_EncounterInfo","parties","addWave","removeEncounter","selectEncounter","encounters","showEncounter","encounter_list_item_EncounterListItem","addEncounter","watermark","encounterCards","getMonsterCards","card","w","waveCards","wave_card_WaveCard","encounter_builder_screen_HelpCard","getLibrarySection","EncounterInfo","partyOptions","selectParty","difficulty_chart_panel_DifficultyChartPanel","Readaloud","HomeScreen","addOpenGameContent","readaloud_Readaloud","MapCard","editMap","removeMap","MapFolioListItem","matchFolio","mapFolio","MapFoliosScreen","folio","map_folios_screen_MapFolioInfo","addMap","removeMapFolio","selectMapFolio","mapFolios","f","showMapFolio","map_folio_list_item_MapFolioListItem","addMapFolio","folioCards","map_card_MapCard","map_folios_screen_HelpCard","MapFolioInfo","MonsterGroupListItem","matchGroup","MonsterLibraryScreen","monster_library_screen_MonsterInfo","addMonster","generateMonster","sortMonsters","removeMonsterGroup","selectMonsterGroup","showMonsterGroup","monster_group_list_item_MonsterGroupListItem","addMonsterGroup","groupID","monster_library_screen_HelpCard","MonsterInfo","PartyListItem","matchParty","PartiesScreen","parties_screen_PartyInfo","addPC","sortPCs","removeParty","showParty","party_list_item_PartyListItem","addParty","activeCards","inactiveCards","activePCs","activePC","inactivePC","parties_screen_HelpCard","PartyInfo","insightSummary","investigationSummary","perceptionSummary","join","reduce","array","localeCompare","insight","invest","percep","Selector","tabs","itemsPerRow","rowCount","ceil","rowContents","rowIndex","selector_SelectorOption","rowSections","row","SelectorOption","DieRollerModule","dice","rolls","dieRoll","roll","rollsSection","resultSection","selector_Selector","setDice","nudgeCount","Speech","window","speechSynthesis","cancel","utterance","SpeechSynthesisUtterance","chooseVoice","voice","rate","randomValue","pitch","speak","getVoices","voices","langCodes","lang","getLanguageCode","candidates","v","substr","default","Promise","resolve","onvoiceschanged","language","TextGenerator","sources","model","maxLength","line","addLineToModel","String","fromCharCode","_loop","prev","char","item","freq","requiredResults","lines","failures","extractLine","l","fit","_loop2","repeat","_ret","values","_loop3","ch","mc","maxCount","sum","LanguageModule","output","fetch","response","presetName","preset","getPresets","addLanguage","getLanguages","keys","initModel","generate","presetOptions","selectedPreset","selectedLanguages","isSelected","removeLanguage","allowGenerate","allowReset","language_module_GeneratedText","usePreset","reset","GeneratedText","navigator","clipboard","writeText","say","NameModule","male","female","surname","input","setOption","ReferenceModule","view","fetchData","setView","AboutModal","reference_module_ReferenceModule","language_module_LanguageModule","name_module_NameModule","die_roller_module_DieRollerModule","moduleID","setModule","pkg","version","resetAll","getTools","getAbout","AddCombatantsModal","allCombatants","selectedCombatants","CombatStartModal","combatSetup","notify","getMonsterNames","slotID","partyContent","selectedParty","pcSections","setParty","encounterOptions","encounterContent","selectedEncounter","monsterSections","waveMonsters","setEncounter","folios","folioOptions","selectMapSection","thumbnailSection","mapOptions","setMapID","setFolioID","waveOptions","waveContent","selectedWave","setWave","_this9","_this10","slotsContainer","slotNames","inputs","combat_start_modal_MonsterName","changeName","setEncounterInitMode","leftSection","rightSection","getPartySection","getEncounterSection","getMapSection","getDifficultySection","getMonsterSection","getWaveSection","margin","MonsterName","_this11","CONDITION_TYPES","RadioGroup","radio_group_RadioGroupItem","itemID","RadioGroupItem","ConditionModal","conditionName","durationType","createConditionDurationSaves","createConditionDurationCombatant","createConditionDurationRounds","object","saveOptions","pointOptions","combatantOptions","durations","radio_group_RadioGroup","setCondition","setDuration","DemographicsModal","chart","demographics","allMonsters","buckets","maxBucketSize","bucket","bars","set","selectChart","TERRAIN_TYPES","MapTileCard","terrainOptions","moveMapItem","resizeMapItem","cloneMapItem","removeMapItem","MapEditorModal","selectedTileID","createMapItem","smallMapItem","bigMapItem","tools","map_tile_card_MapTileCard","mapItem","setSelectedTileID","MonsterEditorModal","page","showFilter","helpSection","sections","getHelpOptionsForPage","section","spliceMonsters","addRandomTrait","getValueSection","getActionsSection","dataType","valueSections","rows","criteria","criteriaText","similar","filterContent","toggleMatch","toggleFilter","showMonsters","getMonsters","changeTrait","help","selector","setHelpSection","getHelpSection","monsterList","searchBox","setFilterText","getFilterCard","transition","setPage","PCEditorModal","RandomMonsterModal","selectedMonsters","selectedMonstersInfo","selectAll","Navbar","partiesStyle","libraryStyle","encounterStyle","mapStyle","combatStyle","encountersEnabled","combatEnabled","blur","Titlebar","openHome","cog","openAbout","Dojo","modal","selectedPartyID","selectedMonsterGroupID","selectedEncounterID","selectedMapFolioID","selectedCombatID","json","localStorage","getItem","setItem","createParty","createPC","original","createMonsterGroup","sourceGroup","clone","_this12","then","createFromJSON","groupName","createEncounter","_this13","_this14","createEncounterSlot","sortEncounterSlots","_this15","slotContainer","aName","bName","_this16","createEncounterWave","_this17","createMapFolio","_this18","_this19","createMap","_this20","_this21","setup","createCombatSetup","_this22","partyName","addPCToCombat","groupInitRoll","addMonsterToCombat","sortCombatants","initMode","_this23","_this24","_this25","_this26","Date","toLocaleString","_this27","newRound","_this28","actor","_this29","_this30","init","groupRoll","singleRoll","issue","_this31","_this32","miniSize","_this33","_this34","_this35","saveNotification","createNotification","endNotification","_this36","createCondition","_this37","_this38","_this39","conditionIndex","_this40","obj","_this41","openDemographics","openWaveModal","addToEncounter","pauseCombat","endCombat","_this42","home_screen_HomeScreen","parties_screen_PartiesScreen","monster_library_screen_MonsterLibraryScreen","encounter_builder_screen_EncounterBuilderScreen","addWaveToEncounter","map_folios_screen_MapFoliosScreen","combat_manager_screen_CombatManagerScreen","pausedCombat","resumeCombat","closeNotification","_this43","modalSidebar","modalTitle","modalContent","modalAllowScroll","modalButtons","closeModal","about_modal_AboutModal","demographics_modal_DemographicsModal","pc_editor_modal_PCEditorModal","savePC","monster_editor_modal_MonsterEditorModal","toggleShowSimilarMonsters","saveMonster","random_monster_modal_RandomMonsterModal","map_editor_modal_MapEditorModal","saveMap","combat_start_modal_CombatStartModal","startCombat","addWaveToCombat","add_combatants_modal_AddCombatantsModal","addCombatantsFromModal","condition_modal_ConditionModal","addConditionFromModal","editConditionFromModal","_this44","getContent","getActions","getModal","titlebar_Titlebar","navbar_Navbar","ReactDOM","render","dojo_Dojo","document","getElementById"],"mappings":"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","file":"static/js/main.9e99755a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/down-arrow-black.a2fc7a1f.svg\";","module.exports = __webpack_public_path__ + \"static/media/down-arrow.697dc1af.svg\";","module.exports = __webpack_public_path__ + \"static/media/close-black.7645a5b9.svg\";","module.exports = __webpack_public_path__ + \"static/media/warning.67a11a95.svg\";","module.exports = __webpack_public_path__ + \"static/media/ellipsis.9650a20f.svg\";","module.exports = __webpack_public_path__ + \"static/media/minus.7003cf50.svg\";","module.exports = __webpack_public_path__ + \"static/media/plus.b60accff.svg\";","module.exports = __webpack_public_path__ + \"static/media/settings.042bb1c2.svg\";","import { Combat } from '../models/combat';\r\nimport { Condition, ConditionDurationCombatant, ConditionDurationRounds, ConditionDurationSaves } from '../models/condition';\r\nimport { Encounter, EncounterWave } from '../models/encounter';\r\nimport { Monster, MonsterGroup } from '../models/monster-group';\r\n\r\nexport default class Utils {\r\n\r\n    // This is an internal dictionary to speed up lookup\r\n    private static monsterIdToGroup: { [id: string]: MonsterGroup } = {};\r\n\r\n    public static getMonsterGroup(monster: Monster, library: MonsterGroup[]): MonsterGroup {\r\n        let group = this.monsterIdToGroup[monster.id];\r\n\r\n        if (!group) {\r\n            const grp = library.find(g => g.monsters.includes(monster));\r\n            if (grp) {\r\n                group = grp;\r\n                this.monsterIdToGroup[monster.id] = group;\r\n            }\r\n        }\r\n\r\n        return group;\r\n    }\r\n\r\n    public static match(filter: string, text: string): boolean {\r\n        if (!filter) {\r\n            return true;\r\n        }\r\n\r\n        let result = true;\r\n\r\n        const tokens = filter.toLowerCase().split(' ');\r\n        tokens.forEach(token => {\r\n            if (text.toLowerCase().indexOf(token) === -1) {\r\n                result = false;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    public static guid(): string {\r\n        const s4 = () => Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\r\n        return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\r\n    }\r\n\r\n    public static sort(collection: any[], sorts: { field: string, dir: 'asc' | 'desc' }[] = []): any[] {\r\n        if (sorts.length === 0) {\r\n            sorts = [{ field: 'name', dir: 'asc' }];\r\n        }\r\n\r\n        const fn = (a: any, b: any, field: string): number => {\r\n            if ((a[field] !== undefined) && (b[field] !== undefined)) {\r\n                if (a[field] < b[field]) { return -1; }\r\n                if (a[field] > b[field]) { return 1; }\r\n            }\r\n            return 0;\r\n        };\r\n\r\n        collection.sort((a, b) => {\r\n            let order = 0;\r\n            sorts.forEach(sort => {\r\n                if (order === 0) {\r\n                    order = fn(a, b, sort.field) * (sort.dir === 'asc' ? 1 : -1);\r\n                }\r\n            });\r\n            return order;\r\n        });\r\n\r\n        return collection;\r\n    }\r\n\r\n    public static modifierValue(score: number): number {\r\n        return Math.floor((score - 10) / 2);\r\n    }\r\n\r\n    public static modifier(score: number): string {\r\n        const mod = this.modifierValue(score);\r\n        let str = mod.toString();\r\n        if (mod >= 0) {\r\n            str = '+' + str;\r\n        }\r\n        return str;\r\n    }\r\n\r\n    public static dieRoll(sides: number = 20): number {\r\n        return Math.floor(Math.random() * sides) + 1;\r\n    }\r\n\r\n    public static miniSize(size: string): number {\r\n        switch (size) {\r\n            case 'tiny': return 1;\r\n            case 'small': return 1;\r\n            case 'medium': return 1;\r\n            case 'large': return 2;\r\n            case 'huge': return 3;\r\n            case 'gargantuan': return 4;\r\n            default: return 1;\r\n        }\r\n    }\r\n\r\n    public static hitDieType(size: string) {\r\n        switch (size) {\r\n            case 'tiny': return 4;\r\n            case 'small': return 6;\r\n            case 'medium': return 8;\r\n            case 'large': return 10;\r\n            case 'huge': return 12;\r\n            case 'gargantuan': return 20;\r\n            default: return 8;\r\n        }\r\n    }\r\n\r\n    public static challenge(cr: number): string {\r\n        switch (cr) {\r\n            case 0.125: return '1/8';\r\n            case 0.25: return '1/4';\r\n            case 0.5: return '1/2';\r\n            default: return cr.toString();\r\n        }\r\n    }\r\n\r\n    public static parseChallenge(cr: string): number {\r\n        switch (cr) {\r\n            case '1/8': return 0.125;\r\n            case '1/4': return 0.25;\r\n            case '1/2': return 0.5;\r\n            default: return parseInt(cr, 10);\r\n        }\r\n    }\r\n\r\n    public static challengeDetails(): any[] {\r\n        const result: any[] = [];\r\n\r\n        result.push({ cr: 0,        ac: 13,       hpMin: 1, hpMax: 6,       attack: 3,  dmgMin: 0,   dmgMax: 1,   save: 13 });\r\n        result.push({ cr: 0.125,    ac: 13,       hpMin: 7, hpMax: 35,      attack: 3,  dmgMin: 2,   dmgMax: 3,   save: 13 });\r\n        result.push({ cr: 0.25,     ac: 13,       hpMin: 36, hpMax: 49,     attack: 3,  dmgMin: 4,   dmgMax: 5,   save: 13 });\r\n        result.push({ cr: 0.5,      ac: 13,       hpMin: 50, hpMax: 70,     attack: 3,  dmgMin: 6,   dmgMax: 8,   save: 13 });\r\n        result.push({ cr: 1,        ac: 13,       hpMin: 71, hpMax: 85,     attack: 3,  dmgMin: 9,   dmgMax: 14,  save: 13 });\r\n        result.push({ cr: 2,        ac: 13,       hpMin: 86, hpMax: 100,    attack: 3,  dmgMin: 15,  dmgMax: 20,  save: 13 });\r\n        result.push({ cr: 3,        ac: 13,       hpMin: 101, hpMax: 115,   attack: 4,  dmgMin: 21,  dmgMax: 26,  save: 13 });\r\n        result.push({ cr: 4,        ac: 14,       hpMin: 116, hpMax: 130,   attack: 5,  dmgMin: 27,  dmgMax: 32,  save: 14 });\r\n        result.push({ cr: 5,        ac: 15,       hpMin: 131, hpMax: 145,   attack: 6,  dmgMin: 33,  dmgMax: 38,  save: 15 });\r\n        result.push({ cr: 6,        ac: 15,       hpMin: 146, hpMax: 160,   attack: 6,  dmgMin: 39,  dmgMax: 44,  save: 15 });\r\n        result.push({ cr: 7,        ac: 15,       hpMin: 161, hpMax: 175,   attack: 6,  dmgMin: 45,  dmgMax: 50,  save: 15 });\r\n        result.push({ cr: 8,        ac: 16,       hpMin: 176, hpMax: 190,   attack: 7,  dmgMin: 51,  dmgMax: 56,  save: 16 });\r\n        result.push({ cr: 9,        ac: 16,       hpMin: 191, hpMax: 205,   attack: 7,  dmgMin: 57,  dmgMax: 62,  save: 16 });\r\n        result.push({ cr: 10,       ac: 17,       hpMin: 206, hpMax: 220,   attack: 7,  dmgMin: 63,  dmgMax: 68,  save: 16 });\r\n        result.push({ cr: 11,       ac: 17,       hpMin: 221, hpMax: 235,   attack: 8,  dmgMin: 69,  dmgMax: 74,  save: 17 });\r\n        result.push({ cr: 12,       ac: 17,       hpMin: 236, hpMax: 250,   attack: 8,  dmgMin: 75,  dmgMax: 80,  save: 17 });\r\n        result.push({ cr: 13,       ac: 18,       hpMin: 251, hpMax: 265,   attack: 8,  dmgMin: 81,  dmgMax: 86,  save: 18 });\r\n        result.push({ cr: 14,       ac: 18,       hpMin: 266, hpMax: 280,   attack: 8,  dmgMin: 87,  dmgMax: 92,  save: 18 });\r\n        result.push({ cr: 15,       ac: 18,       hpMin: 281, hpMax: 295,   attack: 8,  dmgMin: 93,  dmgMax: 98,  save: 18 });\r\n        result.push({ cr: 16,       ac: 18,       hpMin: 296, hpMax: 310,   attack: 9,  dmgMin: 99,  dmgMax: 104, save: 18 });\r\n        result.push({ cr: 17,       ac: 19,       hpMin: 311, hpMax: 325,   attack: 10, dmgMin: 105, dmgMax: 110, save: 19 });\r\n        result.push({ cr: 18,       ac: 19,       hpMin: 326, hpMax: 340,   attack: 10, dmgMin: 111, dmgMax: 116, save: 19 });\r\n        result.push({ cr: 19,       ac: 19,       hpMin: 341, hpMax: 355,   attack: 10, dmgMin: 117, dmgMax: 122, save: 19 });\r\n        result.push({ cr: 20,       ac: 19,       hpMin: 356, hpMax: 400,   attack: 10, dmgMin: 123, dmgMax: 140, save: 19 });\r\n        result.push({ cr: 21,       ac: 19,       hpMin: 401, hpMax: 445,   attack: 11, dmgMin: 141, dmgMax: 158, save: 20 });\r\n        result.push({ cr: 22,       ac: 19,       hpMin: 446, hpMax: 490,   attack: 11, dmgMin: 159, dmgMax: 176, save: 20 });\r\n        result.push({ cr: 23,       ac: 19,       hpMin: 491, hpMax: 535,   attack: 11, dmgMin: 177, dmgMax: 194, save: 20 });\r\n        result.push({ cr: 24,       ac: 19,       hpMin: 536, hpMax: 580,   attack: 12, dmgMin: 195, dmgMax: 212, save: 21 });\r\n        result.push({ cr: 25,       ac: 19,       hpMin: 581, hpMax: 625,   attack: 12, dmgMin: 213, dmgMax: 230, save: 21 });\r\n        result.push({ cr: 26,       ac: 19,       hpMin: 626, hpMax: 670,   attack: 12, dmgMin: 231, dmgMax: 248, save: 21 });\r\n        result.push({ cr: 27,       ac: 19,       hpMin: 671, hpMax: 715,   attack: 13, dmgMin: 249, dmgMax: 266, save: 22 });\r\n        result.push({ cr: 28,       ac: 19,       hpMin: 716, hpMax: 760,   attack: 13, dmgMin: 267, dmgMax: 284, save: 22 });\r\n        result.push({ cr: 29,       ac: 19,       hpMin: 761, hpMax: 805,   attack: 13, dmgMin: 285, dmgMax: 302, save: 22 });\r\n        result.push({ cr: 30,       ac: 19,       hpMin: 806, hpMax: 850,   attack: 14, dmgMin: 303, dmgMax: 320, save: 23 });\r\n\r\n        return result;\r\n    }\r\n\r\n    public static experience(cr: number): number {\r\n        switch (cr) {\r\n            case 0: return 10;\r\n            case 0.125: return 25;\r\n            case 0.25: return 50;\r\n            case 0.5: return 100;\r\n            case 1: return 200;\r\n            case 2: return 450;\r\n            case 3: return 700;\r\n            case 4: return 1100;\r\n            case 5: return 1800;\r\n            case 6: return 2300;\r\n            case 7: return 2900;\r\n            case 8: return 3900;\r\n            case 9: return 5000;\r\n            case 10: return 5900;\r\n            case 11: return 7200;\r\n            case 12: return 8400;\r\n            case 13: return 10000;\r\n            case 14: return 11500;\r\n            case 15: return 13000;\r\n            case 16: return 15000;\r\n            case 17: return 18000;\r\n            case 18: return 20000;\r\n            case 19: return 22000;\r\n            case 20: return 25000;\r\n            case 21: return 33000;\r\n            case 22: return 41000;\r\n            case 23: return 50000;\r\n            case 24: return 62000;\r\n            case 30: return 155000;\r\n            default: return 0;\r\n        }\r\n    }\r\n\r\n    public static experienceFactor(count: number): number {\r\n        switch (count) {\r\n            case 0:\r\n                return 0;\r\n            case 1:\r\n                return 1;\r\n            case 2:\r\n                return 1.5;\r\n            case 3:\r\n            case 4:\r\n            case 5:\r\n            case 6:\r\n                return 2;\r\n            case 7:\r\n            case 8:\r\n            case 9:\r\n            case 10:\r\n                return 2.5;\r\n            case 11:\r\n            case 12:\r\n            case 13:\r\n            case 14:\r\n                return 3;\r\n            default:\r\n                return 4;\r\n        }\r\n    }\r\n\r\n    public static pcExperience(level: number, difficulty: string): number {\r\n        switch (difficulty) {\r\n            case 'easy':\r\n                switch (level) {\r\n                    case 1: return 25;\r\n                    case 2: return 50;\r\n                    case 3: return 75;\r\n                    case 4: return 125;\r\n                    case 5: return 250;\r\n                    case 6: return 300;\r\n                    case 7: return 350;\r\n                    case 8: return 450;\r\n                    case 9: return 550;\r\n                    case 10: return 600;\r\n                    case 11: return 800;\r\n                    case 12: return 1000;\r\n                    case 13: return 1100;\r\n                    case 14: return 1250;\r\n                    case 15: return 1400;\r\n                    case 16: return 1600;\r\n                    case 17: return 2000;\r\n                    case 18: return 2100;\r\n                    case 19: return 2400;\r\n                    case 20: return 2800;\r\n                    default: return 0;\r\n                }\r\n            case 'medium':\r\n                switch (level) {\r\n                    case 1: return 50;\r\n                    case 2: return 100;\r\n                    case 3: return 150;\r\n                    case 4: return 250;\r\n                    case 5: return 500;\r\n                    case 6: return 600;\r\n                    case 7: return 750;\r\n                    case 8: return 900;\r\n                    case 9: return 1100;\r\n                    case 10: return 1200;\r\n                    case 11: return 1600;\r\n                    case 12: return 2000;\r\n                    case 13: return 2200;\r\n                    case 14: return 2500;\r\n                    case 15: return 2800;\r\n                    case 16: return 3200;\r\n                    case 17: return 3900;\r\n                    case 18: return 4200;\r\n                    case 19: return 4900;\r\n                    case 20: return 5700;\r\n                    default: return 0;\r\n                }\r\n            case 'hard':\r\n                switch (level) {\r\n                    case 1: return 75;\r\n                    case 2: return 150;\r\n                    case 3: return 225;\r\n                    case 4: return 375;\r\n                    case 5: return 750;\r\n                    case 6: return 900;\r\n                    case 7: return 1100;\r\n                    case 8: return 1400;\r\n                    case 9: return 1600;\r\n                    case 10: return 1900;\r\n                    case 11: return 2400;\r\n                    case 12: return 3000;\r\n                    case 13: return 3400;\r\n                    case 14: return 3800;\r\n                    case 15: return 4300;\r\n                    case 16: return 4800;\r\n                    case 17: return 5900;\r\n                    case 18: return 6300;\r\n                    case 19: return 7300;\r\n                    case 20: return 8500;\r\n                    default: return 0;\r\n                }\r\n            case 'deadly':\r\n                switch (level) {\r\n                    case 1: return 100;\r\n                    case 2: return 200;\r\n                    case 3: return 400;\r\n                    case 4: return 500;\r\n                    case 5: return 1100;\r\n                    case 6: return 1400;\r\n                    case 7: return 1700;\r\n                    case 8: return 2100;\r\n                    case 9: return 2400;\r\n                    case 10: return 2800;\r\n                    case 11: return 3600;\r\n                    case 12: return 4500;\r\n                    case 13: return 5100;\r\n                    case 14: return 5700;\r\n                    case 15: return 6400;\r\n                    case 16: return 7200;\r\n                    case 17: return 8800;\r\n                    case 18: return 9500;\r\n                    case 19: return 10900;\r\n                    case 20: return 12700;\r\n                    default: return 0;\r\n                }\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n\r\n    public static traitType(type: string, plural: boolean): string {\r\n        let str = '';\r\n        switch (type) {\r\n            case 'trait':\r\n                str = 'trait';\r\n                break;\r\n            case 'action':\r\n                str = 'action';\r\n                break;\r\n            case 'legendary':\r\n                str = 'legendary action';\r\n                break;\r\n            case 'lair':\r\n                str = 'lair action';\r\n                break;\r\n        }\r\n\r\n        if (plural) {\r\n            str += 's';\r\n        }\r\n\r\n        return str;\r\n    }\r\n\r\n    public static nudgeChallenge(value: number, delta: number): number {\r\n        let result = 0;\r\n\r\n        switch (value) {\r\n            case 0:\r\n                if (delta === -1) {\r\n                    result = 0;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 0.125;\r\n                }\r\n                break;\r\n            case 0.125:\r\n                if (delta === -1) {\r\n                    result = 0;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 0.25;\r\n                }\r\n                break;\r\n            case 0.25:\r\n                if (delta === -1) {\r\n                    result = 0.125;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 0.5;\r\n                }\r\n                break;\r\n            case 0.5:\r\n                if (delta === -1) {\r\n                    result = 0.25;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 1;\r\n                }\r\n                break;\r\n            case 1:\r\n                if (delta === -1) {\r\n                    result = 0.5;\r\n                }\r\n                if (delta === +1) {\r\n                    result = 2;\r\n                }\r\n                break;\r\n            default:\r\n                result = value + delta;\r\n                break;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public static conditionText(condition: Condition): string[] {\r\n        switch (condition.name) {\r\n            case 'blinded':\r\n                return [\r\n                    'a blinded creature can’t see and automatically fails any ability check that requires sight',\r\n                    'attack rolls against the creature have advantage, and the creature’s attack rolls have disadvantage'\r\n                ];\r\n            case 'charmed':\r\n                return [\r\n                    'a charmed creature can’t attack the charmer or target the charmer with harmful abilities or magical effects',\r\n                    'the charmer has advantage on any ability check to interact socially with the creature'\r\n                ];\r\n            case 'deafened':\r\n                return [\r\n                    'a deafened creature can’t hear and automatically fails any ability check that requires hearing.'\r\n                ];\r\n            case 'exhaustion': {\r\n                switch (condition.level) {\r\n                case 1:\r\n                    return [\r\n                        'disadvantage on ability checks'\r\n                    ];\r\n                case 2:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved'\r\n                    ];\r\n                case 3:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved',\r\n                        'disadvantage on attack rolls and saving throws'\r\n                    ];\r\n                case 4:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved',\r\n                        'disadvantage on attack rolls and saving throws',\r\n                        'hit point maximum halved'\r\n                    ];\r\n                case 5:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved',\r\n                        'disadvantage on attack rolls and saving throws',\r\n                        'hit point maximum halved',\r\n                        'speed reduced to 0'\r\n                    ];\r\n                case 6:\r\n                    return [\r\n                        'disadvantage on ability checks',\r\n                        'speed halved',\r\n                        'disadvantage on attack rolls and saving throws',\r\n                        'hit point maximum halved',\r\n                        'speed reduced to 0',\r\n                        'death'\r\n                    ];\r\n                default:\r\n                    return [];\r\n                }\r\n            }\r\n            case 'frightened':\r\n                return [\r\n                    'a frightened creature has disadvantage on ability checks and attack rolls while the source of its fear is within line of sight',\r\n                    'the creature can’t willingly move closer to the source of its fear'\r\n                ];\r\n            case 'grappled':\r\n                return [\r\n                    'a grappled creature’s speed becomes 0, and it can’t benefit from any bonus to its speed',\r\n                    'the condition ends if the grappler is incapacitated',\r\n                    'the condition also ends if an effect removes the grappled creature from the reach of the grappler or grappling effect'\r\n                ];\r\n            case 'incapacitated':\r\n                return [\r\n                    'an incapacitated creature can’t take actions or reactions'\r\n                ];\r\n            case 'invisible':\r\n                return [\r\n                    'an invisible creature is impossible to see without the aid of magic or a special sense',\r\n                    'for the purpose of hiding, the creature is heavily obscured',\r\n                    'the creature’s location can be detected by any noise it makes or any tracks it leaves',\r\n                    'attack rolls against the creature have disadvantage, and the creature’s attack rolls have advantage'\r\n                ];\r\n            case 'paralyzed':\r\n                return [\r\n                    'a paralyzed creature is incapacitated (can’t take actions or reactions) and can’t move or speak',\r\n                    'the creature automatically fails strength and dexterity saving throws',\r\n                    'attack rolls against the creature have advantage',\r\n                    'any attack that hits the creature is a critical hit if the attacker is within 5 feet of the creature'\r\n                ];\r\n            case 'petrified':\r\n                return [\r\n                    /* tslint:disable-next-line:max-line-length */\r\n                    'a petrified creature is transformed, along with any nonmagical objects it is wearing or carrying, into a solid inanimate substance (usually stone)',\r\n                    'its weight increases by a factor of ten, and it ceases aging',\r\n                    'the creature is incapacitated (can’t take actions or reactions), can’t move or speak, and is unaware of its surroundings',\r\n                    'attack rolls against the creature have advantage',\r\n                    'the creature automatically fails strength and dexterity saving throws',\r\n                    'the creature has resistance to all damage',\r\n                    'the creature is immune to poison and disease, although a poison or disease already in its system is suspended, not neutralized'\r\n                ];\r\n            case 'poisoned':\r\n                return [\r\n                    'a poisoned creature has disadvantage on attack rolls and ability checks'\r\n                ];\r\n            case 'prone':\r\n                return [\r\n                    'a prone creature’s only movement option is to crawl, unless it stands up and thereby ends the condition',\r\n                    'the creature has disadvantage on attack rolls',\r\n                    /* tslint:disable-next-line:max-line-length */\r\n                    'an attack roll against the creature has advantage if the attacker is Within 5 feet of the creature; otherwise, the attack roll has disadvantage'\r\n                ];\r\n            case 'restrained':\r\n                return [\r\n                    'a restrained creature’s speed becomes 0, and it can’t benefit from any bonus to its speed',\r\n                    'attack rolls against the creature have advantage, and the creature’s attack rolls have disadvantage',\r\n                    'the creature has disadvantage on dexterity saving throws'\r\n                ];\r\n            case 'stunned':\r\n                return [\r\n                    'a stunned creature is incapacitated (can’t take actions or reactions), can’t move, and can speak only falteringly',\r\n                    'the creature automatically fails strength and dexterity saving throws',\r\n                    'attack rolls against the creature have advantage'\r\n                ];\r\n            case 'unconscious':\r\n                return [\r\n                    'an unconscious creature is incapacitated (can’t take actions or reactions), can’t move or speak, and is unaware of its surroundings',\r\n                    'the creature drops whatever its holding and falls prone',\r\n                    'the creature automatically fails strength and dexterity saving throws',\r\n                    'attack rolls against the creature have advantage',\r\n                    'any attack that hits the creature is a critical hit if the attacker is within 5 feet of the creature'\r\n                ];\r\n            case 'custom':\r\n                return [];\r\n            default:\r\n                return [];\r\n        }\r\n    }\r\n\r\n    public static conditionDurationText(condition: Condition, combat: Combat) {\r\n        if (condition.duration !== null) {\r\n            switch (condition.duration.type) {\r\n                case 'saves':\r\n                    const saveDuration = condition.duration as ConditionDurationSaves;\r\n                    let saveType = saveDuration.saveType.toString();\r\n                    if (saveType !== 'death') {\r\n                        saveType = saveType.toUpperCase();\r\n                    }\r\n                    const saves = saveDuration.count > 1 ? 'saves' : 'save';\r\n                    return 'until you make ' + saveDuration.count + ' ' + saveType + ' ' + saves + ' at dc ' + saveDuration.saveDC;\r\n                case 'combatant':\r\n                    const combatantDuration = condition.duration as ConditionDurationCombatant;\r\n                    const point = combatantDuration.point;\r\n                    const c = combat.combatants.find(cmb => cmb.id === combatantDuration.combatantID);\r\n                    const combatant = c ? (c.displayName || c.name || 'unnamed monster') + '\\'s' : 'someone\\'s';\r\n                    return 'until the ' + point + ' of ' + combatant + ' next turn';\r\n                case 'rounds':\r\n                    const roundsDuration = condition.duration as ConditionDurationRounds;\r\n                    const rounds = roundsDuration.count > 1 ? 'rounds' : 'round';\r\n                    return 'for ' + roundsDuration.count + ' ' + rounds;\r\n                default:\r\n                    return null;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public static getMonsterNames(encounter: Encounter | EncounterWave): { id: string, names: string[] }[] {\r\n        const monsterNames: any[] = [];\r\n        if (encounter) {\r\n            encounter.slots.forEach(slot => {\r\n                const names: any[] = [];\r\n                if (slot.count === 1) {\r\n                    names.push(slot.monsterName);\r\n                } else {\r\n                    for (let n = 0; n !== slot.count; ++n) {\r\n                        names.push(slot.monsterName + ' ' + (n + 1));\r\n                    }\r\n                }\r\n\r\n                monsterNames.push({\r\n                    id: slot.id,\r\n                    names: names\r\n                });\r\n            });\r\n        }\r\n\r\n        return monsterNames;\r\n    }\r\n}\r\n","import Utils from './utils';\r\n\r\nimport { Combat, CombatSetup, Notification } from '../models/combat';\r\nimport { Condition, ConditionDurationCombatant, ConditionDurationRounds, ConditionDurationSaves } from '../models/condition';\r\nimport { Encounter, EncounterSlot, EncounterWave } from '../models/encounter';\r\nimport { Map, MapFolio, MapItem } from '../models/map-folio';\r\nimport { Monster, MonsterGroup, Trait } from '../models/monster-group';\r\nimport { Party, PC } from '../models/party';\r\n\r\nexport default class Factory {\r\n\r\n    public static createParty(): Party {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            pcs: []\r\n        };\r\n    }\r\n\r\n    public static createPC(): PC {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'pc',\r\n            active: true,\r\n            player: '',\r\n            name: '',\r\n            race: '',\r\n            classes: '',\r\n            level: 1,\r\n            languages: 'Common',\r\n            passiveInsight: 10,\r\n            passiveInvestigation: 10,\r\n            passivePerception: 10,\r\n            initiative: 10,\r\n            url: ''\r\n        };\r\n    }\r\n\r\n    public static createMonsterGroup(): MonsterGroup {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            monsters: []\r\n        };\r\n    }\r\n\r\n    public static createMonster(): Monster {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'monster',\r\n            name: '',\r\n            size: 'medium',\r\n            category: 'humanoid',\r\n            tag: '',\r\n            alignment: '',\r\n            challenge: 1,\r\n            abilityScores: {\r\n                str: 10,\r\n                dex: 10,\r\n                con: 10,\r\n                int: 10,\r\n                wis: 10,\r\n                cha: 10\r\n            },\r\n            ac: 10,\r\n            hpMax: 4,\r\n            hpTemp: 0,\r\n            hitDice: 1,\r\n            damage: {\r\n                resist: '',\r\n                vulnerable: '',\r\n                immune: ''\r\n            },\r\n            savingThrows: '',\r\n            speed: '',\r\n            skills: '',\r\n            senses: '',\r\n            languages: '',\r\n            equipment: '',\r\n            traits: [],\r\n            conditionImmunities: ''\r\n        };\r\n    }\r\n\r\n    public static createTrait(): Trait {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            usage: '',\r\n            type: 'action',\r\n            text: '',\r\n            uses: 0\r\n        };\r\n    }\r\n\r\n    public static createEncounter(): Encounter {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            slots: [],\r\n            waves: []\r\n        };\r\n    }\r\n\r\n    public static createEncounterSlot(): EncounterSlot {\r\n        return {\r\n            id: Utils.guid(),\r\n            monsterGroupName: '',\r\n            monsterName: '',\r\n            count: 1\r\n        };\r\n    }\r\n\r\n    public static createEncounterWave(): EncounterWave {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            slots: []\r\n        };\r\n    }\r\n\r\n    public static createMapFolio(): MapFolio {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            maps: []\r\n        };\r\n    }\r\n\r\n    public static createMap(): Map {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            items: []\r\n        };\r\n    }\r\n\r\n    public static createMapItem(): MapItem {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'tile',\r\n            x: 0,\r\n            y: 0,\r\n            width: 4,\r\n            height: 4,\r\n            terrain: null\r\n        };\r\n    }\r\n\r\n    public static createCombatSetup(): CombatSetup {\r\n        return {\r\n            partyID: null,\r\n            encounterID: null,\r\n            waveID: null,\r\n            folioID: null,\r\n            mapID: null,\r\n            monsterNames: [],\r\n            encounterInitMode: 'group'\r\n        };\r\n    }\r\n\r\n    public static createCombat(): Combat {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            encounterID: null,\r\n            combatants: [],\r\n            map: null,\r\n            round: 1,\r\n            notifications: [],\r\n            issues: [],\r\n            timestamp: null\r\n        };\r\n    }\r\n\r\n    public static createNotification(): Notification {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'condition-save',\r\n            data: null,\r\n            combatant: null\r\n        };\r\n    }\r\n\r\n    public static createCondition(): Condition {\r\n        return {\r\n            id: Utils.guid(),\r\n            name: '',\r\n            level: 1,\r\n            text: null,\r\n            duration: null\r\n        };\r\n    }\r\n\r\n    public static createConditionDurationSaves(): ConditionDurationSaves {\r\n        return {\r\n            type: 'saves',\r\n            count: 1,\r\n            saveType: 'str',\r\n            saveDC: 10,\r\n            point: 'start'\r\n        };\r\n    }\r\n\r\n    public static createConditionDurationCombatant(): ConditionDurationCombatant {\r\n        return {\r\n            type: 'combatant',\r\n            point: 'start',\r\n            combatantID: null\r\n        };\r\n    }\r\n\r\n    public static createConditionDurationRounds(): ConditionDurationRounds {\r\n        return {\r\n            type: 'rounds',\r\n            count: 1\r\n        };\r\n    }\r\n}\r\n","export interface MonsterGroup {\r\n    id: string;\r\n    name: string;\r\n    monsters: Monster[];\r\n}\r\n\r\nexport interface Monster {\r\n    id: string;\r\n    type: string;\r\n    name: string;\r\n    size: string;\r\n    category: string;\r\n    tag: string;\r\n    alignment: string;\r\n    challenge: number;\r\n    abilityScores: {\r\n        str: number;\r\n        dex: number;\r\n        con: number;\r\n        int: number;\r\n        wis: number;\r\n        cha: number;\r\n    };\r\n    ac: number;\r\n    hpMax: number;\r\n    hpTemp: number;\r\n    hitDice: number;\r\n    damage: {\r\n        resist: string;\r\n        vulnerable: string;\r\n        immune: string;\r\n    };\r\n    savingThrows: string;\r\n    speed: string;\r\n    skills: string;\r\n    senses: string;\r\n    languages: string;\r\n    equipment: string;\r\n    traits: Trait[];\r\n    conditionImmunities: string;\r\n}\r\n\r\nexport interface Trait {\r\n    id: string;\r\n    name: string;\r\n    usage: string;\r\n    type: 'trait' | 'action' | 'legendary' | 'lair';\r\n    text: string;\r\n    uses: number;\r\n}\r\n\r\nexport const SIZE_TYPES = [\r\n    'tiny',\r\n    'small',\r\n    'medium',\r\n    'large',\r\n    'huge',\r\n    'gargantuan'\r\n];\r\n\r\nexport const CATEGORY_TYPES = [\r\n    'aberration',\r\n    'beast',\r\n    'celestial',\r\n    'construct',\r\n    'dragon',\r\n    'elemental',\r\n    'fey',\r\n    'fiend',\r\n    'giant',\r\n    'humanoid',\r\n    'monstrosity',\r\n    'ooze',\r\n    'plant',\r\n    'undead'\r\n];\r\n\r\nexport const TRAIT_TYPES = [\r\n    'trait',\r\n    'action',\r\n    'legendary',\r\n    'lair'\r\n];\r\n","import Factory from './factory';\r\nimport Utils from './utils';\r\n\r\nimport { Monster, Trait, TRAIT_TYPES } from '../models/monster-group';\r\n\r\nexport default class Frankenstein {\r\n    public static nudgeValue(target: Monster, field: string, delta: number) {\r\n        let source: any = target;\r\n        let value: any = null;\r\n        const tokens = field.split('.');\r\n        tokens.forEach(token => {\r\n            if (token === tokens[tokens.length - 1]) {\r\n                value = source[token];\r\n            } else {\r\n                source = source[token];\r\n            }\r\n        });\r\n\r\n        const newValue = (field === 'challenge') ? Utils.nudgeChallenge(value, delta) : (value ? value : 0) + delta;\r\n        Frankenstein.changeValue(target, field, newValue);\r\n    }\r\n\r\n    public static changeValue(target: Monster, field: string, value: any) {\r\n        let source: any = target;\r\n        const tokens = field.split('.');\r\n        tokens.forEach(token => {\r\n            if (token === tokens[tokens.length - 1]) {\r\n                source[token] = value;\r\n\r\n                if ((field === 'abilityScores.con') || (field === 'size') || (field === 'hitDice')) {\r\n                    const sides = Utils.hitDieType(target.size);\r\n                    const conMod = Math.floor((target.abilityScores.con - 10) / 2);\r\n                    const hpPerDie = ((sides + 1) / 2) + conMod;\r\n                    const hp = Math.floor(target.hitDice * hpPerDie);\r\n                    target.hpMax = hp;\r\n                }\r\n            } else {\r\n                source = source[token];\r\n            }\r\n        });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Monster creation\r\n\r\n    public static clone(monster: Monster, name: string): Monster {\r\n        return {\r\n            id: Utils.guid(),\r\n            type: 'monster',\r\n            name: name || (monster.name + ' copy'),\r\n            size: monster.size,\r\n            category: monster.category,\r\n            tag: monster.tag,\r\n            alignment: monster.alignment,\r\n            challenge: monster.challenge,\r\n            abilityScores: {\r\n                str: monster.abilityScores.str,\r\n                dex: monster.abilityScores.dex,\r\n                con: monster.abilityScores.con,\r\n                int: monster.abilityScores.int,\r\n                wis: monster.abilityScores.wis,\r\n                cha: monster.abilityScores.cha\r\n            },\r\n            ac: monster.ac,\r\n            hpMax: monster.hpMax,\r\n            hpTemp: monster.hpTemp,\r\n            hitDice: monster.hitDice,\r\n            damage: {\r\n                resist: monster.damage.resist,\r\n                vulnerable: monster.damage.vulnerable,\r\n                immune: monster.damage.immune\r\n            },\r\n            savingThrows: monster.savingThrows,\r\n            speed: monster.speed,\r\n            skills: monster.skills,\r\n            senses: monster.senses,\r\n            languages: monster.languages,\r\n            equipment: monster.equipment,\r\n            traits: monster.traits.map(trait => {\r\n                return {\r\n                    id: Utils.guid(),\r\n                    name: trait.name,\r\n                    usage: trait.usage,\r\n                    type: trait.type,\r\n                    text: trait.text,\r\n                    uses: 0\r\n                };\r\n            }),\r\n            conditionImmunities: monster.conditionImmunities\r\n        };\r\n    }\r\n\r\n    public static createFromJSON(data: any): Monster {\r\n        const monster = Factory.createMonster();\r\n\r\n        monster.type = 'monster';\r\n        monster.name = data.name;\r\n        monster.size = data.size.toLowerCase();\r\n        monster.category = data.type;\r\n        monster.tag = data.subtype;\r\n        monster.alignment = data.alignment;\r\n        monster.challenge = Utils.parseChallenge(data.challenge_rating);\r\n        monster.ac = data.armor_class;\r\n        monster.hpMax = data.hit_points;\r\n        monster.speed = data.speed;\r\n        monster.senses = data.senses;\r\n        monster.languages = data.languages;\r\n\r\n        const index = data.hit_dice.indexOf('d');\r\n        monster.hitDice = parseInt(data.hit_dice.substring(0, index), 10);\r\n\r\n        monster.abilityScores.str = data.strength;\r\n        monster.abilityScores.dex = data.dexterity;\r\n        monster.abilityScores.con = data.constitution;\r\n        monster.abilityScores.int = data.intelligence;\r\n        monster.abilityScores.wis = data.wisdom;\r\n        monster.abilityScores.cha = data.charisma;\r\n\r\n        monster.damage.resist = data.damage_resistances;\r\n        monster.damage.vulnerable = data.damage_vulnerabilities;\r\n        monster.damage.immune = data.damage_immunities;\r\n        monster.conditionImmunities = data.condition_immunities;\r\n\r\n        const saves = [\r\n            {\r\n                field: 'strength_save',\r\n                text: 'Strength'\r\n            },\r\n            {\r\n                field: 'dexterity_save',\r\n                text: 'Dexterity'\r\n            },\r\n            {\r\n                field: 'constitution_save',\r\n                text: 'Constitution'\r\n            },\r\n            {\r\n                field: 'intelligence_save',\r\n                text: 'Intelligence'\r\n            },\r\n            {\r\n                field: 'wisdom_save',\r\n                text: 'Wisdom'\r\n            },\r\n            {\r\n                field: 'charisma_save',\r\n                text: 'Charisma'\r\n            }\r\n        ];\r\n        saves.forEach(save => {\r\n            if (data[save.field]) {\r\n                const str = save.text + ' ' + data[save.field];\r\n                monster.savingThrows += monster.savingThrows === '' ? str : ', ' + str;\r\n            }\r\n        });\r\n\r\n        const skills = [\r\n            {\r\n                field: 'acrobatics',\r\n                text: 'Acrobatics'\r\n            },\r\n            {\r\n                field: 'animal_handling',\r\n                text: 'Animal handling'\r\n            },\r\n            {\r\n                field: 'arcana',\r\n                text: 'Arcana'\r\n            },\r\n            {\r\n                field: 'athletics',\r\n                text: 'Athletics'\r\n            },\r\n            {\r\n                field: 'deception',\r\n                text: 'Deception'\r\n            },\r\n            {\r\n                field: 'history',\r\n                text: 'History'\r\n            },\r\n            {\r\n                field: 'insight',\r\n                text: 'Insight'\r\n            },\r\n            {\r\n                field: 'intimidation',\r\n                text: 'Intimidation'\r\n            },\r\n            {\r\n                field: 'investigation',\r\n                text: 'Investigation'\r\n            },\r\n            {\r\n                field: 'medicine',\r\n                text: 'Medicine'\r\n            },\r\n            {\r\n                field: 'nature',\r\n                text: 'Nature'\r\n            },\r\n            {\r\n                field: 'perception',\r\n                text: 'Perception'\r\n            },\r\n            {\r\n                field: 'performance',\r\n                text: 'Performance'\r\n            },\r\n            {\r\n                field: 'persuasion',\r\n                text: 'Persuasion'\r\n            },\r\n            {\r\n                field: 'religion',\r\n                text: 'Religion'\r\n            },\r\n            {\r\n                field: 'sleight_of_hand',\r\n                text: 'Sleight of hand'\r\n            },\r\n            {\r\n                field: 'stealth',\r\n                text: 'Stealth'\r\n            },\r\n            {\r\n                field: 'survival',\r\n                text: 'Survival'\r\n            }\r\n        ];\r\n        skills.forEach(skill => {\r\n            if (data[skill.field]) {\r\n                const str = skill.text + ' ' + data[skill.field];\r\n                monster.skills += monster.skills === '' ? str : ', ' + str;\r\n            }\r\n        });\r\n\r\n        if (data.special_abilities) {\r\n            data.special_abilities.forEach((rawTrait: any) => {\r\n                const trait = this.buildTrait(rawTrait, 'trait');\r\n                monster.traits.push(trait);\r\n            });\r\n        }\r\n        if (data.actions) {\r\n            data.actions.forEach((rawTrait: any) => {\r\n                const trait = this.buildTrait(rawTrait, 'action');\r\n                monster.traits.push(trait);\r\n            });\r\n        }\r\n        if (data.legendary_actions) {\r\n            data.legendary_actions.forEach((rawTrait: any) => {\r\n                const trait = this.buildTrait(rawTrait, 'legendary');\r\n                monster.traits.push(trait);\r\n            });\r\n        }\r\n\r\n        return monster;\r\n    }\r\n\r\n    private static buildTrait(rawTrait: any, type: 'trait' | 'action' | 'legendary' | 'lair'): Trait {\r\n        let name = '';\r\n        let usage = '';\r\n\r\n        const openBracket = rawTrait.name.indexOf('(');\r\n        if (openBracket === -1) {\r\n            name = rawTrait.name;\r\n        } else {\r\n            const closeBracket = rawTrait.name.indexOf(')');\r\n            name = rawTrait.name.substring(0, openBracket - 1);\r\n            usage = rawTrait.name.substring(openBracket + 1, closeBracket).toLowerCase();\r\n        }\r\n\r\n        const text = rawTrait.desc.replace(/•/g, '*');\r\n\r\n        return {\r\n            id: Utils.guid(),\r\n            type: (name === 'Lair Actions') ? 'lair' : type,\r\n            name: name,\r\n            usage: usage,\r\n            text: text,\r\n            uses: 0\r\n        };\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Traits\r\n\r\n    public static copyTrait(target: Monster, trait: Trait) {\r\n        const copy = JSON.parse(JSON.stringify(trait));\r\n        copy.id = Utils.guid();\r\n        target.traits.push(copy);\r\n    }\r\n\r\n    public static addTrait(target: Monster, type: 'trait' | 'action' | 'legendary' | 'lair') {\r\n        const trait = Factory.createTrait();\r\n        trait.type = type;\r\n        trait.name = 'New ' + Utils.traitType(type, false).toLowerCase();\r\n        target.traits.push(trait);\r\n    }\r\n\r\n    public static removeTrait(target: Monster, trait: Trait) {\r\n        const index = target.traits.indexOf(trait);\r\n        target.traits.splice(index, 1);\r\n    }\r\n\r\n    public static swapTraits(target: Monster, t1: Trait, t2: Trait) {\r\n        const index1 = target.traits.indexOf(t1);\r\n        const index2 = target.traits.indexOf(t2);\r\n        target.traits[index2] = t1;\r\n        target.traits[index1] = t2;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Randomisation\r\n\r\n    public static spliceMonsters(target: Monster, monsters: Monster[]) {\r\n        const fields = [\r\n            'size',\r\n            'category',\r\n            'tag',\r\n            'alignment',\r\n            'challenge',\r\n            'speed',\r\n            'senses',\r\n            'languages',\r\n            'equipment',\r\n            'abilityScores.str',\r\n            'abilityScores.dex',\r\n            'abilityScores.con',\r\n            'abilityScores.int',\r\n            'abilityScores.wis',\r\n            'abilityScores.cha',\r\n            'savingThrows',\r\n            'skills',\r\n            'ac',\r\n            'hitDice',\r\n            'damage.resist',\r\n            'damage.vulnerable',\r\n            'damage.immune',\r\n            'conditionImmunities'\r\n        ];\r\n        fields.forEach(field => {\r\n            this.setRandomValue(target, field, monsters);\r\n        });\r\n\r\n        target.traits = [];\r\n\r\n        TRAIT_TYPES.forEach(type => {\r\n            // Get all traits of this type\r\n            const traits: Trait[] = [];\r\n            monsters.forEach(m => {\r\n                m.traits.filter(t => t.type === type)\r\n                    .forEach(t => traits.push(t));\r\n            });\r\n\r\n            // Collate by name\r\n            const distinct: { trait: Trait, count: number }[] = [];\r\n            traits.forEach(t => {\r\n                const current = distinct.find(d => d.trait.name === t.name);\r\n                if (current) {\r\n                    current.count += 1;\r\n                } else {\r\n                    distinct.push({\r\n                        trait: t,\r\n                        count: 1\r\n                    });\r\n                }\r\n            });\r\n\r\n            // If any are common to all monsters, copy them and remove from the candidates\r\n            const addedIDs: string[] = [];\r\n            distinct.filter(d => d.count === monsters.length)\r\n                .forEach(d => {\r\n                    this.copyTrait(target, d.trait);\r\n                    addedIDs.push(d.trait.id);\r\n                });\r\n            addedIDs.forEach(id => {\r\n                const index = distinct.findIndex(d => d.trait.id === id);\r\n                distinct.splice(index, 1);\r\n            });\r\n\r\n            const avg = traits.length / monsters.length;\r\n            while (target.traits.filter(t => t.type === type).length < avg) {\r\n                const index = Math.floor(Math.random() * distinct.length);\r\n                const t = distinct[index].trait;\r\n                this.copyTrait(target, t);\r\n                distinct.splice(index, 1);\r\n            }\r\n        });\r\n    }\r\n\r\n    public static setRandomValue(target: Monster, field: string, monsters: Monster[]) {\r\n        const index = Math.floor(Math.random() * monsters.length);\r\n        const m = monsters[index];\r\n\r\n        let source: any = m;\r\n        let value = null;\r\n        const tokens = field.split('.');\r\n        tokens.forEach(token => {\r\n            if (token === tokens[tokens.length - 1]) {\r\n                value = source[token];\r\n            } else {\r\n                source = source[token];\r\n            }\r\n        });\r\n\r\n        this.changeValue(target, field, value);\r\n    }\r\n\r\n    public static addRandomTrait(target: Monster, type: string, monsters: Monster[]) {\r\n        const traits: Trait[] = [];\r\n        monsters.forEach(m => {\r\n            m.traits.filter(t => t.type === type)\r\n                .forEach(t => {\r\n                    traits.push(t);\r\n                });\r\n        });\r\n\r\n        const index = Math.floor(Math.random() * traits.length);\r\n        const trait = traits[index];\r\n\r\n        this.copyTrait(target, trait);\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    label: string;\r\n    style: 'switch' | 'button';\r\n    checked: boolean;\r\n    changeValue: (value: boolean) => void;\r\n    disabled: boolean;\r\n}\r\n\r\nexport default class Checkbox extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        style: 'switch',\r\n        disabled: false\r\n    };\r\n\r\n    private click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        this.props.changeValue(!this.props.checked);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'checkbox ' + this.props.style;\r\n            if (this.props.checked) {\r\n                style += ' checked';\r\n            }\r\n            if (this.props.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            let toggle = null;\r\n            if (this.props.style === 'switch') {\r\n                toggle = (\r\n                    <div className='toggle-container'>\r\n                        <div className='toggle'/>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={style} onClick={e => this.click(e)}>\r\n                    <div className='checkbox-label'>{this.props.label}</div>\r\n                    {toggle}\r\n                </div>\r\n            );\r\n\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport warning from '../../resources/images/warning.svg';\r\n\r\ninterface Props {\r\n    text: string;\r\n    callback: () => void;\r\n    details: string;\r\n    disabled: boolean;\r\n}\r\n\r\ninterface State {\r\n    pressed: boolean;\r\n}\r\n\r\nexport default class ConfirmButton extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        details: null,\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            pressed: false\r\n        };\r\n    }\r\n\r\n    private toggle() {\r\n        this.setState({\r\n            pressed: !this.state.pressed\r\n        });\r\n    }\r\n\r\n    private perform() {\r\n        this.toggle();\r\n        this.props.callback();\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let content = null;\r\n            if (this.state.pressed) {\r\n                content = (\r\n                    <div>\r\n                        <div className='title'>{this.props.text} - are you sure?</div>\r\n                        <img className='image' src={warning} alt='warning' />\r\n                        {this.props.details ? <div className='details'>{this.props.details}</div> : null}\r\n                        <div className='confirmation'>\r\n                            <div className='destructive' onClick={() => this.perform()}>yes</div>\r\n                            <div className='non-destructive' onClick={() => this.toggle()}>no</div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                content = (\r\n                    <div>\r\n                        <div className='title'>{this.props.text}</div>\r\n                        <img className='image' src={warning} alt='warning' />\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <button className={this.props.disabled ? 'disabled' : ''} onClick={() => this.toggle()}>\r\n                    {content}\r\n                </button>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    controls: JSX.Element[];\r\n    disabled: boolean;\r\n}\r\n\r\nexport default class ControlRow extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        disabled: false\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'control-row';\r\n            if (this.props.disabled) {\r\n                style += ' disabled';\r\n            }\r\n            switch (this.props.controls.length) {\r\n                case 1:\r\n                    style += ' one';\r\n                    break;\r\n                case 2:\r\n                    style += ' two';\r\n                    break;\r\n                case 3:\r\n                    style += ' three';\r\n                    break;\r\n                case 4:\r\n                    style += ' four';\r\n                    break;\r\n                case 5:\r\n                    style += ' five';\r\n                    break;\r\n            }\r\n\r\n            return (\r\n                <div className={style}>\r\n                    {this.props.controls}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport ellipsis from '../../resources/images/ellipsis.svg';\r\n\r\ninterface Props {\r\n    options: { id: string; text: string; disabled?: boolean }[];\r\n    select: (optionID: string) => void;\r\n    selectedID: string;\r\n    placeholder: string;\r\n    disabled: boolean;\r\n}\r\n\r\ninterface State {\r\n    open: boolean;\r\n}\r\n\r\nexport default class Dropdown extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        selectedID: null,\r\n        placeholder: 'select...',\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            open: false\r\n        };\r\n    }\r\n\r\n    private toggleOpen(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        this.setState({\r\n            open: !this.state.open\r\n        });\r\n    }\r\n\r\n    private select(optionID: string) {\r\n        this.setState({\r\n            open: false\r\n        });\r\n        this.props.select(optionID);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            if (this.props.options.length === 0) {\r\n                return null;\r\n            }\r\n\r\n            let style = this.props.disabled ? 'dropdown disabled' : 'dropdown';\r\n            const content = [];\r\n\r\n            let selectedText;\r\n            if (this.props.selectedID) {\r\n                const option: { id: string; text: string; disabled?: boolean } | undefined = this.props.options.find(o => o.id === this.props.selectedID);\r\n                if (option) {\r\n                    selectedText = option.text;\r\n                }\r\n            } else {\r\n                selectedText = /*this.props.text ||*/ this.props.placeholder;\r\n            }\r\n\r\n            content.push(\r\n                <div key='selection' className='dropdown-top' title={selectedText}>\r\n                    <div className='item-text'>{selectedText}</div>\r\n                    <img className='arrow' src={ellipsis} alt='arrow' />\r\n                </div>\r\n            );\r\n\r\n            if (this.state.open) {\r\n                style += ' open';\r\n\r\n                const items = this.props.options.map(option => {\r\n                    if (option.text === null) {\r\n                        return <div key={option.id} className='divider' />;\r\n                    } else {\r\n                        return (\r\n                            <DropdownOption\r\n                                key={option.id}\r\n                                option={option}\r\n                                selected={option.id === this.props.selectedID}\r\n                                select={optionID => this.select(optionID)}\r\n                            />\r\n                        );\r\n                    }\r\n                });\r\n\r\n                content.push(\r\n                    <div key='options' className='dropdown-options'>\r\n                        {items}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={style} onClick={e => this.toggleOpen(e)}>\r\n                    {content}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface DropdownOptionProps {\r\n    option: { id: string; text: string; disabled?: boolean };\r\n    selected: boolean;\r\n    select: (optionID: string) => void;\r\n}\r\n\r\nclass DropdownOption extends React.Component<DropdownOptionProps> {\r\n    private click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (!this.props.option.disabled) {\r\n            this.props.select(this.props.option.id);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'dropdown-option';\r\n            if (this.props.selected) {\r\n                style += ' selected';\r\n            }\r\n            if (this.props.option.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            return (\r\n                <div className={style} title={this.props.option.text} onClick={e => this.click(e)}>\r\n                    {this.props.option.text}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport arrow from '../../resources/images/down-arrow-black.svg';\r\n\r\ninterface Props {\r\n    text: string;\r\n    content: string | JSX.Element;\r\n    disabled: boolean;\r\n}\r\n\r\ninterface State {\r\n    expanded: boolean;\r\n}\r\n\r\nexport default class Expander extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            expanded: false\r\n        };\r\n    }\r\n\r\n    private toggle() {\r\n        this.setState({\r\n            expanded: !this.state.expanded\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = this.props.disabled ? 'expander disabled' : 'expander';\r\n            if (this.state.expanded) {\r\n                style += ' expanded';\r\n            }\r\n\r\n            let content = null;\r\n            if (this.state.expanded) {\r\n                content = (\r\n                    <div className='expander-content'>\r\n                        {this.props.content}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={style}>\r\n                    <div className='expander-header' onClick={() => this.toggle()}>\r\n                        <div className='expander-text'>{this.props.text}</div>\r\n                        <img className='expander-button' src={arrow} alt='arrow' />\r\n                    </div>\r\n                    {content}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport arrow from '../../resources/images/down-arrow-black.svg';\r\n\r\ninterface Props {\r\n    click: (dir: string, dir2: 'in' | 'out' | null) => void;\r\n    direction: 'out' | 'in' | 'both' | 'eight';\r\n    disabled: boolean;\r\n}\r\n\r\nexport default class Radial extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        direction: 'out',\r\n        disabled: false\r\n    };\r\n\r\n    private click(e: React.MouseEvent, dir: string, dir2: 'in' | 'out' | null = null) {\r\n        e.stopPropagation();\r\n        this.props.click(dir, dir2);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'radial ' + (this.props.direction || 'out');\r\n            if (this.props.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            const showOut = (this.props.direction === 'out') || (this.props.direction === 'both') || (this.props.direction === 'eight');\r\n            const showIn = (this.props.direction === 'in') || (this.props.direction === 'both');\r\n            const showDiag = (this.props.direction === 'eight');\r\n\r\n            return (\r\n                <div className={style}>\r\n                    <div className='empty' style={{ display: showDiag ? 'none' : 'inline-block' }} />\r\n                    <div className='btn diag' style={{ display: showDiag ? 'inline-block' : 'none' }}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(135deg)' }}\r\n                            alt='nw'\r\n                            onClick={e => this.click(e, 'NW')}\r\n                        />\r\n                    </div>\r\n                    <div className='btn'>\r\n                        <div>\r\n                            <img\r\n                                src={arrow}\r\n                                style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(180deg)' }}\r\n                                alt='n'\r\n                                onClick={e => this.click(e, 'N', 'out')}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <img\r\n                                src={arrow}\r\n                                style={{ display: showIn ? 'inline-block' : 'none' }}\r\n                                alt='n'\r\n                                onClick={e => this.click(e, 'N', 'in')}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className='empty' style={{ display: showDiag ? 'none' : 'inline-block' }} />\r\n                    <div className='btn diag' style={{ display: showDiag ? 'inline-block' : 'none' }}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(-135deg)' }}\r\n                            alt='ne'\r\n                            onClick={e => this.click(e, 'NE')}\r\n                        />\r\n                    </div>\r\n                    <div className='btn' style={{ padding: (showIn && showOut) ? '10px 0' : '0'}}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(90deg)' }}\r\n                            alt='w'\r\n                            onClick={e => this.click(e, 'W', 'out')}\r\n                        />\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showIn ? 'inline-block' : 'none', transform: 'rotate(-90deg)' }}\r\n                            alt='w'\r\n                            onClick={e => this.click(e, 'W', 'in')}\r\n                        />\r\n                    </div>\r\n                    <div className='empty' />\r\n                    <div className='btn' style={{ padding: (showIn && showOut) ? '10px 0' : '0'}}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showIn ? 'inline-block' : 'none', transform: 'rotate(90deg)' }}\r\n                            alt='e'\r\n                            onClick={e => this.click(e, 'E', 'in')}\r\n                        />\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(-90deg)' }}\r\n                            alt='e'\r\n                            onClick={e => this.click(e, 'E', 'out')}\r\n                        />\r\n                    </div>\r\n                    <div className='empty' style={{ display: showDiag ? 'none' : 'inline-block' }} />\r\n                    <div className='btn diag' style={{ display: showDiag ? 'inline-block' : 'none' }}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(45deg)' }}\r\n                            alt='sw'\r\n                            onClick={e => this.click(e, 'SW')}\r\n                        />\r\n                    </div>\r\n                    <div className='btn'>\r\n                        <div>\r\n                            <img\r\n                                src={arrow}\r\n                                style={{ display: showIn ? 'inline-block' : 'none', transform: 'rotate(180deg)' }}\r\n                                alt='s'\r\n                                onClick={e => this.click(e, 'S', 'in')}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <img\r\n                                src={arrow}\r\n                                style={{ display: showOut ? 'inline-block' : 'none' }}\r\n                                alt='s'\r\n                                onClick={e => this.click(e, 'S', 'out')}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className='empty' style={{ display: showDiag ? 'none' : 'inline-block' }} />\r\n                    <div className='btn diag' style={{ display: showDiag ? 'inline-block' : 'none' }}>\r\n                        <img\r\n                            src={arrow}\r\n                            style={{ display: showOut ? 'inline-block' : 'none', transform: 'rotate(-45deg)' }}\r\n                            alt='se'\r\n                            onClick={e => this.click(e, 'SE')}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport minus from '../../resources/images/minus.svg';\r\nimport plus from '../../resources/images/plus.svg';\r\n\r\ninterface Props {\r\n    source: any;\r\n    name: string;\r\n    nudgeValue: (delta: number) => void;\r\n    label: string;\r\n    disabled: boolean;\r\n    factors: number[];\r\n    display: ((value: number) => string) | null;\r\n}\r\n\r\nexport default class Spin extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        label: null,\r\n        disabled: false,\r\n        factors: null,\r\n        display: null\r\n    };\r\n\r\n    private click(e: React.MouseEvent, delta: number) {\r\n        e.stopPropagation();\r\n        this.props.nudgeValue(delta);\r\n    }\r\n\r\n    private touchEnd(e: React.TouchEvent, delta: number) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        this.props.nudgeValue(delta);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'info-value';\r\n            let value = this.props.source[this.props.name];\r\n            if (value === 0) {\r\n                style += ' dimmed';\r\n            }\r\n\r\n            if (this.props.display) {\r\n                value = this.props.display(value);\r\n            }\r\n\r\n            const minusBtns: JSX.Element[] = [];\r\n            const plusBtns: JSX.Element[] = [];\r\n\r\n            if (this.props.factors) {\r\n                this.props.factors.forEach(factor => {\r\n                    minusBtns.push(\r\n                        <div\r\n                            key={'minus' + factor}\r\n                            className='spin-button factor'\r\n                            onTouchEnd={e => this.touchEnd(e, -1 * factor)}\r\n                            onClick={e => this.click(e, -1 * factor)}\r\n                        >\r\n                            {'-' + factor}\r\n                        </div>\r\n                    );\r\n\r\n                    plusBtns.push(\r\n                        <div\r\n                            key={'plus' + factor}\r\n                            className='spin-button factor'\r\n                            onTouchEnd={e => this.touchEnd(e, +1 * factor)}\r\n                            onClick={e => this.click(e, +1 * factor)}\r\n                        >\r\n                            {'+' + factor}\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                minusBtns.reverse();\r\n            } else {\r\n                minusBtns.push(\r\n                    <div key='minus1' className='spin-button' onTouchEnd={e => this.touchEnd(e, -1)} onClick={e => this.click(e, -1)}>\r\n                        <img className='image' src={minus} alt='minus' />\r\n                    </div>\r\n                );\r\n\r\n                plusBtns.push(\r\n                    <div key='plus1' className='spin-button' onTouchEnd={e => this.touchEnd(e, +1)} onClick={e => this.click(e, +1)}>\r\n                        <img className='image' src={plus} alt='plus' />\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            const infoWidth = 80 * (this.props.factors ? this.props.factors.length : 1);\r\n\r\n            return (\r\n                <div className={this.props.disabled ? 'spin disabled' : 'spin'}>\r\n                    <div className='minus'>\r\n                        {minusBtns}\r\n                    </div>\r\n                    <div className='info' style={{ width: 'calc(100% - ' + infoWidth + 'px)' }}>\r\n                        <div className='info-label'>{this.props.label}</div>\r\n                        <div className={style}>{value}</div>\r\n                    </div>\r\n                    <div className='plus'>\r\n                        {plusBtns}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Monster } from '../../models/monster-group';\r\n\r\nimport Spin from '../controls/spin';\r\n\r\ninterface Props {\r\n    combatant: Monster;\r\n    edit: boolean;\r\n    nudgeValue: (combatant: Monster, field: string, delta: number) => void;\r\n}\r\n\r\ninterface State {\r\n    showAbilityScores: boolean;\r\n}\r\n\r\nexport default class AbilityScorePanel extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        edit: null,\r\n        nudgeValue: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showAbilityScores: false\r\n        };\r\n    }\r\n\r\n    private toggleAbilityScores() {\r\n        this.setState({\r\n            showAbilityScores: !this.state.showAbilityScores\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let result = null;\r\n\r\n            if (this.props.edit) {\r\n                result = (\r\n                    <div>\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='str'\r\n                            label='strength'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.str', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='dex'\r\n                            label='dexterity'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.dex', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='con'\r\n                            label='constitution'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.con', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='int'\r\n                            label='intelligence'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.int', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='wis'\r\n                            label='wisdom'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.wis', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant.abilityScores}\r\n                            name='cha'\r\n                            label='charisma'\r\n                            nudgeValue={(delta: number) => this.props.nudgeValue(this.props.combatant, 'abilityScores.cha', delta)}\r\n                        />\r\n                    </div>\r\n                );\r\n            } else {\r\n                result = (\r\n                    <div className='ability-scores' onClick={() => this.toggleAbilityScores()}>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>str</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.str\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.str)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>dex</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.dex\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.dex)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>con</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.con\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.con)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>int</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.int\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.int)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>wis</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.wis\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.wis)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='ability-score'>\r\n                            <div className='ability-heading'>cha</div>\r\n                            <div className='ability-value'>\r\n                                {\r\n                                    this.state.showAbilityScores\r\n                                    ? this.props.combatant.abilityScores.cha\r\n                                    : Utils.modifier(this.props.combatant.abilityScores.cha)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return result;\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combat, Combatant } from '../../models/combat';\r\nimport { Condition } from '../../models/condition';\r\n\r\nimport Expander from '../controls/expander';\r\nimport Spin from '../controls/spin';\r\n\r\ninterface Props {\r\n    combatant: Combatant;\r\n    combat: Combat;\r\n    nudgeConditionValue: (condition: Condition, field: string, delta: number) => void;\r\n    addCondition: () => void;\r\n    editCondition: (condition: Condition) => void;\r\n    removeCondition: (conditionID: string) => void;\r\n}\r\n\r\nexport default class ConditionsPanel extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const conditions = [];\r\n            if (this.props.combatant.conditions) {\r\n                for (let n = 0; n !== this.props.combatant.conditions.length; ++n) {\r\n                    const c = this.props.combatant.conditions[n];\r\n                    conditions.push(\r\n                        <ConditionPanel\r\n                            key={n}\r\n                            condition={c}\r\n                            combat={this.props.combat}\r\n                            nudgeConditionValue={(condition, type, delta) => this.props.nudgeConditionValue(condition, type, delta)}\r\n                            editCondition={condition => this.props.editCondition(condition)}\r\n                            removeCondition={conditionID => this.props.removeCondition(conditionID)}\r\n                        />\r\n                    );\r\n                }\r\n            }\r\n\r\n            return (\r\n                <div className='section'>\r\n                    {conditions}\r\n                    <button onClick={() => this.props.addCondition()}>add a condition</button>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface ConditionPanelProps {\r\n    condition: Condition;\r\n    combat: Combat;\r\n    nudgeConditionValue: (condition: Condition, field: string, delta: number) => void;\r\n    editCondition: (condition: Condition) => void;\r\n    removeCondition: (conditionID: string) => void;\r\n}\r\n\r\nclass ConditionPanel extends React.Component<ConditionPanelProps> {\r\n    public render() {\r\n        try {\r\n            let name: string = this.props.condition.name || 'condition';\r\n            if (this.props.condition.name === 'exhaustion') {\r\n                name += ' (' + this.props.condition.level + ')';\r\n            }\r\n            if ((this.props.condition.name === 'custom') && (this.props.condition.text !== null)) {\r\n                name = this.props.condition.text;\r\n            }\r\n\r\n            if (this.props.condition.duration !== null) {\r\n                name += ' ' + Utils.conditionDurationText(this.props.condition, this.props.combat);\r\n            }\r\n\r\n            const description = [];\r\n            if (this.props.condition.name === 'exhaustion') {\r\n                description.push(\r\n                    <div key='level' className='section'>\r\n                        <Spin\r\n                            source={this.props.condition}\r\n                            name='level'\r\n                            label='level'\r\n                            nudgeValue={delta => this.props.nudgeConditionValue(this.props.condition, 'level', delta)}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n            const text = Utils.conditionText(this.props.condition);\r\n            for (let n = 0; n !== text.length; ++n) {\r\n                description.push(<div key={n} className='section'>{text[n]}</div>);\r\n            }\r\n\r\n            return (\r\n                <Expander\r\n                    text={name}\r\n                    content={(\r\n                        <div>\r\n                            {description}\r\n                            <div className='divider' />\r\n                            <button onClick={() => this.props.editCondition(this.props.condition)}>edit</button>\r\n                            <button onClick={() => this.props.removeCondition(this.props.condition.id)}>remove</button>\r\n                        </div>\r\n                    )}\r\n                />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    content: string | JSX.Element | JSX.Element[];\r\n    white: boolean;\r\n}\r\n\r\nexport default class Note extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        white: false\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            let style = 'descriptive';\r\n            if (this.props.white) {\r\n                style += ' white';\r\n            }\r\n\r\n            return (\r\n                <div className={style}>\r\n                    {this.props.content}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Showdown from 'showdown';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combatant } from '../../models/combat';\r\nimport { Monster, Trait, TRAIT_TYPES } from '../../models/monster-group';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport Expander from '../controls/expander';\r\nimport Note from '../panels/note';\r\n\r\nimport arrow from '../../resources/images/down-arrow-black.svg';\r\n\r\nconst showdown = new Showdown.Converter();\r\n\r\ninterface Props {\r\n    combatant: Monster | (Combatant & Monster);\r\n    mode: 'view' | 'edit' | 'template' | 'combat' | 'combat-special';\r\n    filter: string;\r\n    addTrait: (traitType: 'trait' | 'action' | 'legendary' | 'lair') => void;\r\n    copyTrait: (trait: Trait) => void;\r\n    removeTrait: (trait: Trait) => void;\r\n    changeValue: (trait: Trait, field: string, value: any) => void;\r\n    swapTraits: (t1: Trait, t2: Trait) => void;\r\n}\r\n\r\nexport default class TraitsPanel extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        mode: 'view',\r\n        filter: '',\r\n        addTrait: null,\r\n        copyTrait: null,\r\n        removeTrait: null,\r\n        changeValue: null,\r\n        swapTraits: null\r\n    };\r\n\r\n    private createTraitPanel(trait: Trait, prevTrait: Trait | null, nextTrait: Trait | null) {\r\n        return (\r\n            <TraitPanel\r\n                key={trait.id}\r\n                trait={trait}\r\n                mode={this.props.mode}\r\n                prevTrait={prevTrait}\r\n                nextTrait={nextTrait}\r\n                changeValue={(action, type, value) => this.props.changeValue(action, type, value)}\r\n                removeTrait={action => this.props.removeTrait(action)}\r\n                copyTrait={action => this.props.copyTrait(action)}\r\n                swapTraits={(t1, t2) => this.props.swapTraits(t1, t2)}\r\n            />\r\n        );\r\n    }\r\n\r\n    private createSection(traitsByType: { [id: string]: JSX.Element[] }, type: string, showInfo: boolean = false) {\r\n        const traits = traitsByType[type];\r\n        if (traits.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        let info: JSX.Element | null = null;\r\n        if (showInfo) {\r\n            switch (type) {\r\n                case 'legendary':\r\n                    /* tslint:disable:max-line-length */\r\n                    info = (\r\n                        <Note\r\n                            content={'one legendary action can be used at the end of each other combatant\\'s turn; spent actions are refreshed at the start of the creature\\'s turn'}\r\n                            white={true}\r\n                        />\r\n                    );\r\n                    /* tslint:enable:max-line-length */\r\n                    break;\r\n                case 'lair':\r\n                    info = (\r\n                        <Note\r\n                            content={'one lair action can be taken each round on initiative 20'}\r\n                            white={true}\r\n                        />\r\n                    );\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='section subheading'>{Utils.traitType(type, true)}</div>\r\n                {info}\r\n                {traits}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const traitsByType: { [id: string]: JSX.Element[] } = {};\r\n\r\n            TRAIT_TYPES.forEach(type => {\r\n                const traits = this.props.combatant.traits\r\n                    .filter(t => t.type === type)\r\n                    .filter(t => Utils.match(this.props.filter, t.name));\r\n\r\n                const list: JSX.Element[] = [];\r\n                for (let n = 0; n !== traits.length; ++n) {\r\n                    const trait = traits[n];\r\n                    const prevTrait = n !== 0 ? traits[n - 1] : null;\r\n                    const nextTrait = n !== traits.length - 1 ? traits[n + 1] : null;\r\n                    list.push(this.createTraitPanel(trait, prevTrait, nextTrait));\r\n                }\r\n\r\n                if (this.props.mode === 'edit') {\r\n                    list.push(\r\n                        <button key='add' onClick={() => this.props.addTrait(type as 'trait' | 'action' | 'legendary' | 'lair')}>\r\n                            add a new {Utils.traitType(type, false)}\r\n                        </button>\r\n                    );\r\n                }\r\n\r\n                traitsByType[type] = list;\r\n            });\r\n\r\n            if (this.props.mode === 'edit') {\r\n                return (\r\n                    <div className='row collapse'>\r\n                        <div className='columns small-4 medium-4 large-4 wide-column'>\r\n                            {this.createSection(traitsByType, 'trait')}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 wide-column'>\r\n                            {this.createSection(traitsByType, 'action')}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 wide-column'>\r\n                            {this.createSection(traitsByType, 'legendary')}\r\n                            <div className='divider' />\r\n                            {this.createSection(traitsByType, 'lair')}\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            if (this.props.combatant.traits.length === 0) {\r\n                return (\r\n                    <div><i>no traits or actions</i></div>\r\n                );\r\n            }\r\n\r\n            if (this.props.mode === 'combat') {\r\n                return (\r\n                    <div>\r\n                        {this.createSection(traitsByType, 'trait')}\r\n                        {this.createSection(traitsByType, 'action')}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            if (this.props.mode === 'combat-special') {\r\n                return (\r\n                    <div>\r\n                        {this.createSection(traitsByType, 'legendary', true)}\r\n                        {this.createSection(traitsByType, 'lair', true)}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div>\r\n                    {this.createSection(traitsByType, 'trait')}\r\n                    {this.createSection(traitsByType, 'action')}\r\n                    {this.createSection(traitsByType, 'legendary')}\r\n                    {this.createSection(traitsByType, 'lair')}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface TraitPanelProps {\r\n    trait: Trait;\r\n    mode: 'view' | 'edit' | 'template' | 'combat' | 'combat-special';\r\n    prevTrait: Trait | null;\r\n    nextTrait: Trait | null;\r\n    changeValue: (trait: Trait, field: string, value: any) => void;\r\n    copyTrait: (trait: Trait) => void;\r\n    removeTrait: (trait: Trait) => void;\r\n    swapTraits: (t1: Trait, t2: Trait) => void;\r\n}\r\n\r\nclass TraitPanel extends React.Component<TraitPanelProps> {\r\n    public render() {\r\n        try {\r\n            let maxUses = 0;\r\n            let heading = this.props.trait.name || 'unnamed ' + Utils.traitType(this.props.trait.type, false);\r\n\r\n            if (this.props.trait.usage) {\r\n                let used = '';\r\n                if (this.props.trait.usage.toLowerCase().startsWith('recharge ')) {\r\n                    maxUses = 1;\r\n                    if (this.props.trait.uses > 0) {\r\n                        used = '; used';\r\n                    }\r\n                }\r\n                const found = this.props.trait.usage.toLowerCase().match(/(\\d+)\\s*\\/\\s*day/);\r\n                if (found) {\r\n                    maxUses = parseInt(found[1], 10);\r\n                    if (this.props.trait.uses > 0) {\r\n                        used = '; used ' + this.props.trait.uses;\r\n                    }\r\n                }\r\n                heading += ' *(' + this.props.trait.usage + used + ')*';\r\n            }\r\n            if (this.props.trait.type === 'legendary') {\r\n                maxUses = 1;\r\n                if (this.props.trait.uses > 0) {\r\n                    heading += ' *(used)*';\r\n                }\r\n            }\r\n            const markdown = '**' + heading + '** ' + this.props.trait.text;\r\n\r\n            switch (this.props.mode) {\r\n                case 'view':\r\n                    return (\r\n                        <div key={this.props.trait.id} className='section trait'>\r\n                            <div dangerouslySetInnerHTML={{ __html: showdown.makeHtml(markdown) }} />\r\n                        </div>\r\n                    );\r\n                case 'edit':\r\n                    const details = (\r\n                        <div className='section'>\r\n                            <div className='row collapse'>\r\n                                <div className='columns small-6 medium-8 large-9'>\r\n                                    <input\r\n                                        type='text'\r\n                                        placeholder='name'\r\n                                        value={this.props.trait.name}\r\n                                        onChange={event => this.props.changeValue(this.props.trait, 'name', event.target.value)}\r\n                                    />\r\n                                    <input\r\n                                        type='text'\r\n                                        placeholder='usage'\r\n                                        value={this.props.trait.usage}\r\n                                        onChange={event => this.props.changeValue(this.props.trait, 'usage', event.target.value)}\r\n                                    />\r\n                                </div>\r\n                                <div className='columns small-6 medium-4 large-3'>\r\n                                    <div className='trait-ordering'>\r\n                                        <div className='vertical-center-outer'>\r\n                                            <div className='vertical-center-middle'>\r\n                                                <img\r\n                                                    className={this.props.prevTrait ? 'rotate' : 'rotate disabled'}\r\n                                                    src={arrow}\r\n                                                    alt='move up'\r\n                                                    onClick={() => this.props.swapTraits(this.props.trait, this.props.prevTrait as Trait)}\r\n                                                />\r\n                                                <img\r\n                                                    className={this.props.nextTrait ? '' : 'disabled'}\r\n                                                    src={arrow}\r\n                                                    alt='move down'\r\n                                                    onClick={() => this.props.swapTraits(this.props.trait, this.props.nextTrait as Trait)}\r\n                                                />\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <textarea\r\n                                placeholder='details'\r\n                                value={this.props.trait.text}\r\n                                onChange={event => this.props.changeValue(this.props.trait, 'text', event.target.value)}\r\n                            />\r\n                            <div className='divider' />\r\n                            <ConfirmButton text='delete' callback={() => this.props.removeTrait(this.props.trait)} />\r\n                        </div>\r\n                    );\r\n\r\n                    return (\r\n                        <Expander\r\n                            text={this.props.trait.name || 'unnamed ' + Utils.traitType(this.props.trait.type, false)}\r\n                            content={details}\r\n                        />\r\n                    );\r\n                case 'template':\r\n                    return (\r\n                        <div key={this.props.trait.id} className='section trait'>\r\n                            <div dangerouslySetInnerHTML={{ __html: showdown.makeHtml(markdown) }} />\r\n                            <button onClick={() => this.props.copyTrait(this.props.trait)}>copy</button>\r\n                        </div>\r\n                    );\r\n                case 'combat':\r\n                case 'combat-special':\r\n                    let style = '';\r\n                    let usage = null;\r\n                    if (maxUses > 0) {\r\n                        const isTapped = this.props.trait.uses >= maxUses;\r\n                        if (isTapped) {\r\n                            style = 'strikethrough';\r\n                            usage = <button onClick={() => this.props.changeValue(this.props.trait, 'uses', 0)}>recharge</button>;\r\n                        } else {\r\n                            usage = <button onClick={() => this.props.changeValue(this.props.trait, 'uses', this.props.trait.uses + 1)}>use</button>;\r\n                        }\r\n                    }\r\n                    return (\r\n                        <div key={this.props.trait.id} className='section trait'>\r\n                            <div className={style} dangerouslySetInnerHTML={{ __html: showdown.makeHtml(markdown) }} />\r\n                            {usage}\r\n                        </div>\r\n                    );\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    heading: string | JSX.Element | JSX.Element[] | null;\r\n    content: string | JSX.Element | JSX.Element[] | null;\r\n}\r\n\r\nexport default class InfoCard extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        heading: null,\r\n        content: null\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div className='card'>\r\n                    {this.props.heading}\r\n                    <div className='card-content'>\r\n                        {this.props.content}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combat, Combatant } from '../../models/combat';\r\nimport { Condition } from '../../models/condition';\r\nimport { Encounter, EncounterSlot, EncounterWave } from '../../models/encounter';\r\nimport { Monster, MonsterGroup, Trait } from '../../models/monster-group';\r\n\r\nimport Checkbox from '../controls/checkbox';\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport ControlRow from '../controls/control-row';\r\nimport Dropdown from '../controls/dropdown';\r\nimport Expander from '../controls/expander';\r\nimport Radial from '../controls/radial';\r\nimport Spin from '../controls/spin';\r\nimport AbilityScorePanel from '../panels/ability-score-panel';\r\nimport ConditionsPanel from '../panels/conditions-panel';\r\nimport TraitsPanel from '../panels/traits-panel';\r\nimport InfoCard from './info-card';\r\n\r\nimport arrow from '../../resources/images/down-arrow.svg';\r\n\r\ninterface Props {\r\n    combatant: Monster | (Monster & Combatant);\r\n    mode: string;\r\n    library: MonsterGroup[];\r\n    changeValue: (monster: any, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, delta: number) => void;\r\n    // Library\r\n    filter: string;\r\n    editMonster: (monster: Monster) => void;\r\n    removeMonster: (monster: Monster) => void;\r\n    cloneMonster: (monster: Monster, name: string) => void;\r\n    moveToGroup: (monster: Monster, group: string) => void;\r\n    copyTrait: (trait: Trait) => void;\r\n    selectMonster: (monster: Monster) => void;\r\n    deselectMonster: (monster: Monster) => void;\r\n    // Encounter builder\r\n    encounter: Encounter;\r\n    slot: EncounterSlot;\r\n    addEncounterSlot: (monster: Monster, waveID: string | null) => void;\r\n    removeEncounterSlot: (slot: EncounterSlot) => void;\r\n    // Combat\r\n    combat: Combat;\r\n    makeCurrent: (combatant: Combatant) => void;\r\n    makeActive: (combatant: Combatant) => void;\r\n    makeDefeated: (combatant: Combatant) => void;\r\n    endTurn: (combatant: Combatant) => void;\r\n    mapAdd: (combatant: Combatant) => void;\r\n    mapMove: (combatant: Combatant, dir: string) => void;\r\n    mapRemove: (combatant: Combatant) => void;\r\n    removeCombatant: (combatant: Combatant) => void;\r\n    changeHP: (combatant: Combatant, hp: number, tempHP: number) => void;\r\n    addCondition: (combatant: Combatant) => void;\r\n    editCondition: (combatant: Combatant, condition: Condition) => void;\r\n    removeCondition: (combatant: Combatant, conditionID: string) => void;\r\n    nudgeConditionValue: (condition: Condition, field: string, delta: number) => void;\r\n}\r\n\r\ninterface State {\r\n    showDetails: boolean;\r\n    cloneName: string;\r\n    damageOrHealing: number;\r\n}\r\n\r\nexport default class MonsterCard extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        library: null,\r\n        changeValue: null,\r\n        nudgeValue: null,\r\n        filter: '',\r\n        editMonster: null,\r\n        removeMonster: null,\r\n        cloneMonster: null,\r\n        moveToGroup: null,\r\n        copyTrait: null,\r\n        selectMonster: null,\r\n        deselectMonster: null,\r\n        encounter: null,\r\n        slot: null,\r\n        addEncounterSlot: null,\r\n        removeEncounterSlot: null,\r\n        combat: null,\r\n        makeCurrent: null,\r\n        makeActive: null,\r\n        makeDefeated: null,\r\n        endTurn: null,\r\n        mapAdd: null,\r\n        mapMove: null,\r\n        mapRemove: null,\r\n        removeCombatant: null,\r\n        changeHP: null,\r\n        addCondition: null,\r\n        editCondition: null,\r\n        removeCondition: null,\r\n        nudgeConditionValue: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showDetails: false,\r\n            cloneName: props.combatant.name + ' copy',\r\n            damageOrHealing: 0\r\n        };\r\n    }\r\n\r\n    private setCloneName(cloneName: string) {\r\n        this.setState({\r\n            cloneName: cloneName\r\n        });\r\n    }\r\n\r\n    private toggleDetails() {\r\n        this.setState({\r\n            showDetails: !this.state.showDetails\r\n        });\r\n    }\r\n\r\n    private setDamage(value: number) {\r\n        this.setState({\r\n            damageOrHealing: value\r\n        });\r\n    }\r\n\r\n    private nudgeDamage(delta: number) {\r\n        this.setState({\r\n            damageOrHealing: Math.max(this.state.damageOrHealing + delta, 0)\r\n        });\r\n    }\r\n\r\n    private heal() {\r\n        const combatant = this.props.combatant as Combatant;\r\n\r\n        let hp = (combatant.hp ? combatant.hp : 0) + this.state.damageOrHealing;\r\n        hp = Math.min(hp, this.props.combatant.hpMax);\r\n\r\n        this.setState({\r\n            damageOrHealing: 0\r\n        }, () => {\r\n            this.props.changeHP(combatant, hp, this.props.combatant.hpTemp);\r\n        });\r\n    }\r\n\r\n    private damage() {\r\n        const combatant = this.props.combatant as Combatant;\r\n\r\n        let hp = (combatant.hp ? combatant.hp : 0);\r\n        let temp = this.props.combatant.hpTemp;\r\n\r\n        let damage = this.state.damageOrHealing;\r\n\r\n        // Take damage off temp HP first\r\n        const val = Math.min(damage, temp);\r\n        damage -= val;\r\n        temp -= val;\r\n\r\n        // Take the rest off HP\r\n        hp -= damage;\r\n        hp = Math.max(hp, 0);\r\n\r\n        this.setState({\r\n            damageOrHealing: 0\r\n        }, () => {\r\n            this.props.changeHP(combatant, hp, temp);\r\n        });\r\n    }\r\n\r\n    private description() {\r\n        let sizeAndType = (this.props.combatant.size + ' ' + this.props.combatant.category).toLowerCase();\r\n        if (this.props.combatant.tag) {\r\n            sizeAndType += ' (' + this.props.combatant.tag.toLowerCase() + ')';\r\n        }\r\n        sizeAndType += ', ';\r\n\r\n        let align = '';\r\n        if (this.props.combatant.alignment) {\r\n            align = this.props.combatant.alignment.toLowerCase() + ', ';\r\n        }\r\n\r\n        const cr = 'cr ' + Utils.challenge(this.props.combatant.challenge);\r\n\r\n        return sizeAndType + align + cr;\r\n    }\r\n\r\n    private monsterIsInWave(wave: EncounterWave) {\r\n        return wave.slots.some(s => {\r\n            const group = this.props.library.find(g => g.monsters.includes(this.props.combatant));\r\n            return !!group && (s.monsterGroupName === group.name) && (s.monsterName === this.props.combatant.name);\r\n        });\r\n    }\r\n\r\n    private getHP() {\r\n        if (this.props.combatant.hitDice === 0) {\r\n            return this.props.combatant.hpMax;\r\n        }\r\n\r\n        const die = Utils.hitDieType(this.props.combatant.size);\r\n        const conMod = Utils.modifierValue(this.props.combatant.abilityScores.con) * this.props.combatant.hitDice;\r\n        let conModStr = '';\r\n        if (conMod > 0) {\r\n            conModStr = ' +' + conMod;\r\n        }\r\n        if (conMod < 0) {\r\n            conModStr = ' ' + conMod;\r\n        }\r\n        return this.props.combatant.hpMax + ' (' + this.props.combatant.hitDice + 'd' + die + conModStr + ')';\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const options = [];\r\n            if (this.props.mode.indexOf('no-buttons') === -1) {\r\n                if (this.props.mode.indexOf('view') !== -1) {\r\n                    if (this.props.mode.indexOf('editable') !== -1) {\r\n                        options.push(\r\n                            <button key='edit' onClick={() => this.props.editMonster(this.props.combatant)}>edit monster</button>\r\n                        );\r\n\r\n                        options.push(\r\n                            <Expander\r\n                                key='clone'\r\n                                text='clone monster'\r\n                                content={\r\n                                    <div>\r\n                                        <input\r\n                                            type='text'\r\n                                            placeholder='monster name'\r\n                                            value={this.state.cloneName}\r\n                                            onChange={event => this.setCloneName(event.target.value)}\r\n                                        />\r\n                                        <button onClick={() => this.props.cloneMonster(this.props.combatant, this.state.cloneName)}>create copy</button>\r\n                                    </div>\r\n                                }\r\n                            />\r\n                        );\r\n\r\n                        const groupOptions: { id: string, text: string }[] = [];\r\n                        this.props.library.forEach(group => {\r\n                            if (group.monsters.indexOf(this.props.combatant) === -1) {\r\n                                groupOptions.push({\r\n                                    id: group.id,\r\n                                    text: group.name\r\n                                });\r\n                            }\r\n                        });\r\n                        options.push(\r\n                            <Dropdown\r\n                                key='move'\r\n                                options={groupOptions}\r\n                                placeholder='move to group...'\r\n                                select={optionID => this.props.moveToGroup(this.props.combatant, optionID)}\r\n                            />\r\n                        );\r\n\r\n                        options.push(<ConfirmButton key='remove' text='delete monster' callback={() => this.props.removeMonster(this.props.combatant)} />);\r\n                    }\r\n                    if (this.props.mode.indexOf('encounter') !== -1) {\r\n                        if (this.props.slot) {\r\n                            // This card is in an encounter or a wave\r\n                            options.push(\r\n                                <button key='remove' onClick={() => this.props.removeEncounterSlot(this.props.slot)}>\r\n                                    remove from encounter\r\n                                </button>\r\n                            );\r\n                        } else {\r\n                            let canAdd = false;\r\n                            // This card is in the library list\r\n                            if (!this.monsterIsInWave(this.props.encounter)) {\r\n                                options.push(\r\n                                    <button key='add encounter' onClick={() => this.props.addEncounterSlot(this.props.combatant, null)}>\r\n                                        add to encounter\r\n                                    </button>\r\n                                );\r\n                                canAdd = true;\r\n                            }\r\n                            this.props.encounter.waves.forEach(wave => {\r\n                                if (!this.monsterIsInWave(wave)) {\r\n                                    options.push(\r\n                                        <button key={'add ' + wave.id} onClick={() => this.props.addEncounterSlot(this.props.combatant, wave.id)}>\r\n                                            add to {wave.name}\r\n                                        </button>\r\n                                    );\r\n                                    canAdd = true;\r\n                                }\r\n                            });\r\n                            // If we can't add it anywhere, don't show it\r\n                            if (!canAdd) {\r\n                                return (\r\n                                    <InfoCard\r\n                                        heading={\r\n                                            (\r\n                                                <div className='heading'>\r\n                                                    <div className='title'>{this.props.combatant.name}</div>\r\n                                                </div>\r\n                                            )\r\n                                        }\r\n                                        content={\r\n                                            (\r\n                                                <div className='section centered'>\r\n                                                    <i>this monster is already part of this encounter</i>\r\n                                                </div>\r\n                                            )\r\n                                        }\r\n                                    />\r\n                                );\r\n                            }\r\n                        }\r\n                    }\r\n                    if (this.props.mode.indexOf('candidate') !== -1) {\r\n                        if (this.props.mode.indexOf('selected') === -1) {\r\n                            options.push(\r\n                                <button key='select' onClick={() => this.props.selectMonster(this.props.combatant)}>select monster</button>\r\n                            );\r\n                        } else {\r\n                            options.push(\r\n                                <button key='deselect' onClick={() => this.props.deselectMonster(this.props.combatant)}>deselect monster</button>\r\n                            );\r\n                        }\r\n                    }\r\n                }\r\n                if (this.props.mode.indexOf('combat') !== -1) {\r\n                    const combatant = this.props.combatant as Combatant;\r\n\r\n                    if (this.props.mode.indexOf('tactical') !== -1) {\r\n                        if (this.props.mode.indexOf('on-map') !== -1) {\r\n                            options.push(\r\n                                <div key='mapMove' className='section centered'>\r\n                                    <Radial\r\n                                        direction='eight'\r\n                                        click={dir => this.props.mapMove(combatant, dir)}\r\n                                    />\r\n                                </div>\r\n                            );\r\n                            options.push(\r\n                                <Spin\r\n                                    key='altitude'\r\n                                    source={this.props.combatant}\r\n                                    name='altitude'\r\n                                    label='altitude'\r\n                                    display={value => value + ' ft.'}\r\n                                    nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'altitude', delta * 5)}\r\n                                />\r\n                            );\r\n                            options.push(<button key='mapRemove' onClick={() => this.props.mapRemove(combatant)}>remove from map</button>);\r\n                        }\r\n                        if (this.props.mode.indexOf('off-map') !== -1) {\r\n                            options.push(<button key='mapAdd' onClick={() => this.props.mapAdd(combatant)}>add to map</button>);\r\n                        }\r\n                        options.push(<div key='tactical-div' className='divider' />);\r\n                    }\r\n                    if (combatant.pending && !combatant.active && !combatant.defeated) {\r\n                        options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                    }\r\n                    if (!combatant.pending && combatant.active && !combatant.defeated) {\r\n                        if (combatant.current) {\r\n                            options.push(<button key='endTurn' onClick={() => this.props.endTurn(combatant)}>end turn</button>);\r\n                            options.push(<button key='makeDefeated' onClick={() => this.props.makeDefeated(combatant)}>mark as defeated and end turn</button>);\r\n                        } else {\r\n                            options.push(<button key='makeCurrent' onClick={() => this.props.makeCurrent(combatant)}>start turn</button>);\r\n                            options.push(<button key='makeDefeated' onClick={() => this.props.makeDefeated(combatant)}>mark as defeated</button>);\r\n                            options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                        }\r\n                    }\r\n                    if (!combatant.pending && !combatant.active && combatant.defeated) {\r\n                        options.push(<button key='makeActive' onClick={() => this.props.makeActive(combatant)}>mark as active</button>);\r\n                        options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                    }\r\n                    options.push(\r\n                        <Checkbox\r\n                            key='concentrating'\r\n                            label='concentrating'\r\n                            checked={combatant.concentrating}\r\n                            changeValue={value => this.props.changeValue(combatant, 'concentrating', value)}\r\n                        />\r\n                    );\r\n                    options.push(\r\n                        <Expander\r\n                            key='rename'\r\n                            text='change name'\r\n                            content={(\r\n                                <div>\r\n                                    <input\r\n                                        type='text'\r\n                                        value={combatant.displayName}\r\n                                        onChange={event => this.props.changeValue(this.props.combatant, 'displayName', event.target.value)}\r\n                                    />\r\n                                </div>\r\n                            )}\r\n                        />\r\n                    );\r\n                    options.push(\r\n                        <Expander\r\n                            key='init'\r\n                            text='change initiative score'\r\n                            content={(\r\n                                <div>\r\n                                    <Spin\r\n                                        source={this.props.combatant}\r\n                                        name='initiative'\r\n                                        label='initiative'\r\n                                        nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'initiative', delta)}\r\n                                    />\r\n                                </div>\r\n                            )}\r\n                        />\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf('template') !== -1) {\r\n                    // None\r\n                }\r\n            }\r\n\r\n            let stats = null;\r\n            if (this.props.mode.indexOf('view') !== -1) {\r\n                let slotSection = null;\r\n                if (this.props.slot) {\r\n                    slotSection = (\r\n                        <div>\r\n                            <div className='divider' />\r\n                            <Spin\r\n                                source={this.props.slot}\r\n                                name='count'\r\n                                label='count'\r\n                                nudgeValue={delta => this.props.nudgeValue(this.props.slot, 'count', delta)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                let details = null;\r\n                if (this.state.showDetails || (this.props.mode.indexOf('generated') !== -1)) {\r\n                    details = (\r\n                        <div>\r\n                            <div className='divider' />\r\n                            <div className='section'>\r\n                                <b>ac</b> {this.props.combatant.ac}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.hpMax !== 0 ? '' : 'none' }}>\r\n                                <b>hp</b> {this.getHP()}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.speed !== '' ? '' : 'none' }}>\r\n                                <b>speed</b> {this.props.combatant.speed}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <AbilityScorePanel combatant={this.props.combatant} />\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.savingThrows !== '' ? '' : 'none' }}>\r\n                                <b>saving throws</b> {this.props.combatant.savingThrows}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.skills !== '' ? '' : 'none' }}>\r\n                                <b>skills</b> {this.props.combatant.skills}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.damage.resist !== '' ? '' : 'none' }}>\r\n                                <b>damage resistances</b> {this.props.combatant.damage.resist}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.damage.vulnerable !== '' ? '' : 'none' }}>\r\n                                <b>damage vulnerabilities</b> {this.props.combatant.damage.vulnerable}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.damage.immune !== '' ? '' : 'none' }}>\r\n                                <b>damage immunities</b> {this.props.combatant.damage.immune}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.conditionImmunities !== '' ? '' : 'none' }}>\r\n                                <b>condition immunities</b> {this.props.combatant.conditionImmunities}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.senses !== '' ? '' : 'none' }}>\r\n                                <b>senses</b> {this.props.combatant.senses}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.languages !== '' ? '' : 'none' }}>\r\n                                <b>languages</b> {this.props.combatant.languages}\r\n                            </div>\r\n                            <div className='section' style={{ display: this.props.combatant.equipment !== '' ? '' : 'none' }}>\r\n                                <b>equipment</b> {this.props.combatant.equipment}\r\n                            </div>\r\n                            <div className='divider' />\r\n                            <TraitsPanel combatant={this.props.combatant} />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                stats = (\r\n                    <div className='stats'>\r\n                        <div className='section centered'>\r\n                            <i>{this.description()}</i>\r\n                        </div>\r\n                        {slotSection}\r\n                        {details}\r\n                    </div>\r\n                );\r\n            }\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                stats = (\r\n                    <div className='stats'>\r\n                        <div className='section centered'>\r\n                            <i>{this.description()}</i>\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <Spin\r\n                            source={this.props.combatant}\r\n                            name='hp'\r\n                            label='hit points'\r\n                            factors={[1, 10]}\r\n                            nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'hp', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.combatant}\r\n                            name='hpTemp'\r\n                            label='temp hp'\r\n                            factors={[1, 10]}\r\n                            nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'hpTemp', delta)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <Spin\r\n                            source={this.state}\r\n                            name='damageOrHealing'\r\n                            factors={[1, 10]}\r\n                            nudgeValue={delta => this.nudgeDamage(delta)}\r\n                        />\r\n                        <ControlRow\r\n                            controls={[\r\n                                <button key='heal' onClick={() => this.heal()}>heal</button>,\r\n                                <button key='reset' onClick={() => this.setDamage(0)}>reset</button>,\r\n                                <button key='damage' onClick={() => this.damage()}>damage</button>\r\n                            ]}\r\n                            disabled={this.state.damageOrHealing === 0}\r\n                        />\r\n                        <div className='section' style={{ display: this.props.combatant.damage.resist !== '' ? '' : 'none' }}>\r\n                            <b>damage resistances</b> {this.props.combatant.damage.resist}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.damage.vulnerable !== '' ? '' : 'none' }}>\r\n                            <b>damage vulnerabilities</b> {this.props.combatant.damage.vulnerable}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.damage.immune !== '' ? '' : 'none' }}>\r\n                            <b>damage immunities</b> {this.props.combatant.damage.immune}\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='section'>\r\n                            <AbilityScorePanel combatant={this.props.combatant} />\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.ac !== 0 ? '' : 'none' }}>\r\n                            <b>ac</b> {this.props.combatant.ac}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.savingThrows !== '' ? '' : 'none' }}>\r\n                            <b>saving throws</b> {this.props.combatant.savingThrows}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.skills !== '' ? '' : 'none' }}>\r\n                            <b>skills</b> {this.props.combatant.skills}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.speed !== '' ? '' : 'none' }}>\r\n                            <b>speed</b> {this.props.combatant.speed}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.senses !== '' ? '' : 'none' }}>\r\n                            <b>senses</b> {this.props.combatant.senses}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.languages !== '' ? '' : 'none' }}>\r\n                            <b>languages</b> {this.props.combatant.languages}\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.equipment !== '' ? '' : 'none' }}>\r\n                            <b>equipment</b> {this.props.combatant.equipment}\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <TraitsPanel\r\n                            combatant={this.props.combatant}\r\n                            mode='combat'\r\n                            changeValue={(trait, field, value) => this.props.changeValue(trait, field, value)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <div className='section subheading'>\r\n                            conditions\r\n                        </div>\r\n                        <div className='section' style={{ display: this.props.combatant.conditionImmunities !== '' ? '' : 'none' }}>\r\n                            <b>condition immunities</b> {this.props.combatant.conditionImmunities}\r\n                        </div>\r\n                        <ConditionsPanel\r\n                            combatant={this.props.combatant as Combatant}\r\n                            combat={this.props.combat}\r\n                            addCondition={() => this.props.addCondition(this.props.combatant as Combatant)}\r\n                            editCondition={condition => this.props.editCondition(this.props.combatant as Combatant, condition)}\r\n                            removeCondition={conditionID => this.props.removeCondition(this.props.combatant as Combatant, conditionID)}\r\n                            nudgeConditionValue={(condition, type, delta) => this.props.nudgeConditionValue(condition, type, delta)}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n            if (this.props.mode.indexOf('template') !== -1) {\r\n                if (this.props.mode.indexOf('overview') !== -1) {\r\n                    stats = (\r\n                        <div>\r\n                            <div className='section centered'>\r\n                                <i>{this.description()}</i>\r\n                            </div>\r\n                            <div className='divider' />\r\n                            <div className='section'>\r\n                                <b>speed</b> {this.props.combatant.speed || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>senses</b> {this.props.combatant.senses || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>languages</b> {this.props.combatant.languages || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>equipment</b> {this.props.combatant.equipment || '-'}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf('abilities') !== -1) {\r\n                    stats = (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <AbilityScorePanel combatant={this.props.combatant} />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>saving throws</b> {this.props.combatant.savingThrows || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>skills</b> {this.props.combatant.skills || '-'}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf('cbt-stats') !== -1) {\r\n                    stats = (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <b>ac</b> {this.props.combatant.ac}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>hp</b> {this.getHP()}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>damage immunity</b> {this.props.combatant.damage.immune || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>damage resistance</b> {this.props.combatant.damage.resist || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>damage vulnerability</b> {this.props.combatant.damage.vulnerable || '-'}\r\n                            </div>\r\n                            <div className='section'>\r\n                                <b>condition immunities</b> {this.props.combatant.conditionImmunities || '-'}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n                if (this.props.mode.indexOf('actions') !== -1) {\r\n                    stats = (\r\n                        <TraitsPanel\r\n                            combatant={this.props.combatant}\r\n                            mode='template'\r\n                            filter={this.props.filter}\r\n                            copyTrait={trait => this.props.copyTrait(trait)}\r\n                        />\r\n                    );\r\n                }\r\n            }\r\n\r\n            let toggle = null;\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                // Don't show toggle button for combatant\r\n            } else if (this.props.mode.indexOf('template') !== -1) {\r\n                // Don't show toggle button for template\r\n            } else if (this.props.mode.indexOf('view generated') !== -1) {\r\n                // Don't show toggle button for generated monster\r\n            } else {\r\n                const imageStyle = this.state.showDetails ? 'image rotate' : 'image';\r\n                toggle = (\r\n                    <img className={imageStyle} src={arrow} alt='arrow' onClick={() => this.toggleDetails()} />\r\n                );\r\n            }\r\n\r\n            const name = (this.props.combatant as Combatant ? (this.props.combatant as Combatant).displayName : null)\r\n                || this.props.combatant.name\r\n                || 'unnamed monster';\r\n\r\n            return (\r\n                <div className='card monster'>\r\n                    <div className='heading'>\r\n                        <div className='title'>{name}</div>\r\n                        {toggle}\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        {stats}\r\n                        <div style={{ display: options.length > 0 ? '' : 'none' }}>\r\n                            <div className='divider' />\r\n                            <div className='section'>{options}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Combatant } from '../../models/combat';\r\nimport { PC } from '../../models/party';\r\n\r\nimport Checkbox from '../controls/checkbox';\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport Expander from '../controls/expander';\r\nimport Radial from '../controls/radial';\r\nimport Spin from '../controls/spin';\r\n\r\ninterface Props {\r\n    combatant: PC | (PC & Combatant);\r\n    mode: string;\r\n    changeValue: (pc: PC | Combatant, field: string, value: any) => void;\r\n    nudgeValue: (pc: PC, field: string, delta: number) => void;\r\n    removePC: (pc: PC) => void;\r\n    editPC: (pc: PC) => void;\r\n    // Combat\r\n    makeCurrent: (combatant: Combatant) => void;\r\n    makeActive: (combatant: Combatant) => void;\r\n    makeDefeated: (combatant: Combatant) => void;\r\n    endTurn: (combatant: Combatant) => void;\r\n    mapAdd: (combatant: Combatant) => void;\r\n    mapMove: (combatant: Combatant, dir: string) => void;\r\n    mapRemove: (combatant: Combatant) => void;\r\n    removeCombatant: (combatant: Combatant) => void;\r\n}\r\n\r\nexport default class PCCard extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        removePC: null,\r\n        editPC: null,\r\n        makeCurrent: null,\r\n        makeActive: null,\r\n        makeDefeated: null,\r\n        endTurn: null,\r\n        mapAdd: null,\r\n        mapMove: null,\r\n        mapRemove: null,\r\n        removeCombatant: null\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            const options = [];\r\n            if (this.props.mode.indexOf('edit') !== -1) {\r\n                options.push(<button key='edit' onClick={() => this.props.editPC(this.props.combatant)}>edit pc</button>);\r\n                if (this.props.combatant.active) {\r\n                    options.push(\r\n                        <button key='toggle-active' onClick={() => this.props.changeValue(this.props.combatant, 'active', false)}>\r\n                            mark pc as inactive\r\n                        </button>\r\n                    );\r\n                } else {\r\n                    options.push(\r\n                        <button key='toggle-active' onClick={() => this.props.changeValue(this.props.combatant, 'active', true)}>\r\n                            mark pc as active\r\n                        </button>\r\n                    );\r\n                }\r\n                options.push(<ConfirmButton key='remove' text='delete pc' callback={() => this.props.removePC(this.props.combatant)} />);\r\n            }\r\n            if (this.props.mode.indexOf('combat') !== -1) {\r\n                const combatant = this.props.combatant as Combatant;\r\n\r\n                if (this.props.mode.indexOf('tactical') !== -1) {\r\n                    if (this.props.mode.indexOf('on-map') !== -1) {\r\n                        options.push(\r\n                            <div key='mapMove' className='section centered'>\r\n                                <Radial\r\n                                    direction='eight'\r\n                                    click={dir => this.props.mapMove(combatant, dir)}\r\n                                />\r\n                            </div>\r\n                        );\r\n                        options.push(\r\n                            <Spin\r\n                                key='altitude'\r\n                                source={this.props.combatant}\r\n                                name='altitude'\r\n                                label='altitude'\r\n                                display={value => value + ' ft.'}\r\n                                nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'altitude', delta * 5)}\r\n                            />\r\n                        );\r\n                        options.push(<button key='mapRemove' onClick={() => this.props.mapRemove(combatant)}>remove from map</button>);\r\n                    }\r\n                    if (this.props.mode.indexOf('off-map') !== -1) {\r\n                        options.push(<button key='mapAdd' onClick={() => this.props.mapAdd(combatant)}>add to map</button>);\r\n                    }\r\n                    options.push(<div key='tactical-div' className='divider' />);\r\n                }\r\n                if (combatant.pending && !combatant.active && !combatant.defeated) {\r\n                    options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                }\r\n                if (!combatant.pending && combatant.active && !combatant.defeated) {\r\n                    if (combatant.current) {\r\n                        options.push(<button key='endTurn' onClick={() => this.props.endTurn(combatant)}>end turn</button>);\r\n                        options.push(<button key='makeDefeated' onClick={() => this.props.makeDefeated(combatant)}>mark as defeated and end turn</button>);\r\n                    } else {\r\n                        options.push(<button key='makeCurrent' onClick={() => this.props.makeCurrent(combatant)}>start turn</button>);\r\n                        options.push(<button key='makeDefeated' onClick={() => this.props.makeDefeated(combatant)}>mark as defeated</button>);\r\n                        options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                    }\r\n                    options.push(\r\n                        <Expander\r\n                            key='init'\r\n                            text='change initiative score'\r\n                            content={(\r\n                                <div>\r\n                                    <Spin\r\n                                        source={this.props.combatant}\r\n                                        name='initiative'\r\n                                        label='initiative'\r\n                                        nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'initiative', delta)}\r\n                                    />\r\n                                </div>\r\n                            )}\r\n                        />\r\n                    );\r\n                }\r\n                if (!combatant.pending && !combatant.active && combatant.defeated) {\r\n                    options.push(<button key='makeActive' onClick={() => this.props.makeActive(combatant)}>mark as active</button>);\r\n                    options.push(<ConfirmButton key='remove' text='remove from encounter' callback={() => this.props.removeCombatant(combatant)} />);\r\n                }\r\n                options.push(\r\n                    <Checkbox\r\n                        key='concentrating'\r\n                        label='concentrating'\r\n                        checked={combatant.concentrating}\r\n                        changeValue={value => this.props.changeValue(combatant, 'concentrating', value)}\r\n                    />\r\n                );\r\n            }\r\n\r\n            const desc = (this.props.combatant.race || 'unknown race')\r\n                + ' ' + (this.props.combatant.classes || 'unknown class')\r\n                + ', level ' + this.props.combatant.level;\r\n\r\n            const name = (this.props.combatant as Combatant ? (this.props.combatant as Combatant).displayName : null)\r\n                || this.props.combatant.name\r\n                || 'unnamed pc';\r\n\r\n            return (\r\n                <div className='card pc'>\r\n                    <div className='heading'>\r\n                        <div className='title'>{name}</div>\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        <div className='stats'>\r\n                            <div className='section centered lowercase'>\r\n                                <i>{desc}</i>\r\n                                <div style={{ display: this.props.combatant.url ? '' : 'none' }}>\r\n                                    <a href={this.props.combatant.url} target='_blank' rel='noopener noreferrer'>d&d beyond sheet</a>\r\n                                </div>\r\n                            </div>\r\n                            <div className='divider' />\r\n                            <div className='section subheading'>languages</div>\r\n                            <div className='section'>\r\n                                {this.props.combatant.languages || '-'}\r\n                            </div>\r\n                            <div className='section subheading'>passive skills</div>\r\n                            <div className='section'>\r\n                                <div><b>insight</b> {this.props.combatant.passiveInsight}</div>\r\n                                <div><b>investigation</b> {this.props.combatant.passiveInvestigation}</div>\r\n                                <div><b>perception</b> {this.props.combatant.passivePerception}</div>\r\n                            </div>\r\n                        </div>\r\n                        <div style={{ display: options.length > 0 ? '' : 'none' }}>\r\n                            <div className='divider' />\r\n                            <div className='section'>\r\n                                {options}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Combatant } from '../../models/combat';\r\nimport { Monster } from '../../models/monster-group';\r\n\r\ninterface Props {\r\n    combatant: Combatant & Monster;\r\n}\r\n\r\nexport default class HitPointGauge extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const hpCurrent = this.props.combatant.hp || 0;\r\n            const hpMax = this.props.combatant.hpMax + this.props.combatant.hpTemp;\r\n            const hpBloodied = this.props.combatant.hpMax / 2;\r\n            const hpWidth = 100 * Math.max(hpCurrent, 0) / hpMax;\r\n\r\n            let style = '';\r\n            if (hpCurrent >= this.props.combatant.hpMax) {\r\n                style = 'bar unhurt';\r\n            } else if (hpCurrent <= hpBloodied) {\r\n                style = 'bar bloodied';\r\n            } else {\r\n                style = 'bar injured';\r\n            }\r\n\r\n            let hpTempBar = null;\r\n            if (this.props.combatant.hpTemp > 0) {\r\n                const hpTempWidth = 100 * Math.max(this.props.combatant.hpTemp, 0) / hpMax;\r\n                hpTempBar = <div className='bar temp' style={{ width: hpTempWidth + '%' }} />;\r\n            }\r\n\r\n            return (\r\n                <div className='hp-gauge'>\r\n                    <div className={style} style={{ width: hpWidth + '%' }} />\r\n                    {hpTempBar}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Combatant } from '../../models/combat';\r\nimport { Map, MapItem } from '../../models/map-folio';\r\nimport { Monster } from '../../models/monster-group';\r\nimport { PC } from '../../models/party';\r\n\r\nimport HitPointGauge from './hit-point-gauge';\r\n\r\ninterface Props {\r\n    map: Map;\r\n    mode: 'edit' | 'thumbnail' | 'combat';\r\n    combatants: ((Combatant & PC) | (Combatant & Monster))[];\r\n    showOverlay: boolean;\r\n    selectedItemID: string;\r\n    setSelectedItemID: (itemID: string | null) => void;\r\n    addMapTile: (x: number, y: number) => void;\r\n    gridSquareClicked: (x: number, y: number) => void;\r\n}\r\n\r\ninterface MapDimensions {\r\n    minX: number;\r\n    maxX: number;\r\n    minY: number;\r\n    maxY: number;\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\ninterface StyleData {\r\n    left: string;\r\n    top: string;\r\n    width: string;\r\n    height: string;\r\n}\r\n\r\nexport default class MapPanel extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        combatants: null,\r\n        showOverlay: false,\r\n        selectedItemID: null,\r\n        setSelectedItemID: null,\r\n        addMapTile: null,\r\n        gridSquareClicked: null\r\n    };\r\n\r\n    private getMapDimensions(border: number): MapDimensions | null {\r\n        let dimensions: MapDimensions | null = null;\r\n\r\n        this.props.map.items.filter(i => {\r\n            if (this.props.mode === 'edit') {\r\n                return i.type === 'tile';\r\n            }\r\n            return true;\r\n        }).forEach(i => {\r\n            if (!dimensions) {\r\n                dimensions = {\r\n                    minX: i.x,\r\n                    maxX: i.x + i.width - 1,\r\n                    minY: i.y,\r\n                    maxY: i.y + i.height - 1,\r\n                    width: 0,\r\n                    height: 0\r\n                };\r\n            } else {\r\n                dimensions.minX = Math.min(dimensions.minX, i.x);\r\n                dimensions.maxX = Math.max(dimensions.maxX, i.x + i.width - 1);\r\n                dimensions.minY = Math.min(dimensions.minY, i.y);\r\n                dimensions.maxY = Math.max(dimensions.maxY, i.y + i.height - 1);\r\n            }\r\n        });\r\n\r\n        if (!dimensions) {\r\n            // The map is blank\r\n            if (this.props.mode === 'thumbnail') {\r\n                return null;\r\n            }\r\n\r\n            dimensions = {\r\n                minX: 0,\r\n                maxX: 0,\r\n                minY: 0,\r\n                maxY: 0,\r\n                width: 0,\r\n                height: 0\r\n            };\r\n        }\r\n\r\n        // Apply the border\r\n        dimensions.minX -= border;\r\n        dimensions.maxX += border;\r\n        dimensions.minY -= border;\r\n        dimensions.maxY += border;\r\n\r\n        // Set width and height\r\n        dimensions.width = 1 + dimensions.maxX - dimensions.minX;\r\n        dimensions.height = 1 + dimensions.maxY - dimensions.minY;\r\n\r\n        return dimensions;\r\n    }\r\n\r\n    private getSideLength(): number {\r\n        switch (this.props.mode) {\r\n            case 'thumbnail':\r\n                return 5;\r\n            case 'edit':\r\n            case 'combat':\r\n                return 25;\r\n            default:\r\n                return 5;\r\n        }\r\n    }\r\n\r\n    private getStyle(x: number, y: number, width: number, height: number, mapDimensions: MapDimensions): StyleData {\r\n        const sideLength = this.getSideLength();\r\n\r\n        return {\r\n            left: 'calc(' + sideLength + 'px * ' + (x - mapDimensions.minX) + ')',\r\n            top: 'calc(' + sideLength + 'px * ' + (y - mapDimensions.minY) + ')',\r\n            width: 'calc((' + sideLength + 'px * ' + width + ') + 1px)',\r\n            height: 'calc((' + sideLength + 'px * ' + height + ') + 1px)'\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const border = (this.props.mode === 'edit') ? 2 : 0;\r\n            const mapDimensions = this.getMapDimensions(border);\r\n            if (!mapDimensions) {\r\n                return (\r\n                    <div>(blank map)</div>\r\n                );\r\n            }\r\n\r\n            // Draw the grid squares\r\n            const grid = [];\r\n            if (this.props.mode === 'edit') {\r\n                for (let y = mapDimensions.minY; y !== mapDimensions.maxY + 1; ++y) {\r\n                    for (let x = mapDimensions.minX; x !== mapDimensions.maxX + 1; ++x) {\r\n                        const gridStyle = this.getStyle(x, y, 1, 1, mapDimensions);\r\n                        grid.push(\r\n                            <GridSquare\r\n                                key={x + ',' + y}\r\n                                x={x}\r\n                                y={y}\r\n                                style={gridStyle}\r\n                                onClick={() => this.props.setSelectedItemID(null)}\r\n                                onDoubleClick={(posX, posY) => this.props.addMapTile(posX, posY)}\r\n                            />\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Draw the map tiles\r\n            const tiles = this.props.map.items\r\n                .filter(i => i.type === 'tile')\r\n                .map(i => {\r\n                    const tileStyle = this.getStyle(i.x, i.y, i.width, i.height, mapDimensions as MapDimensions);\r\n                    return (\r\n                        <MapTile\r\n                            key={i.id}\r\n                            tile={i}\r\n                            style={tileStyle}\r\n                            selectable={this.props.mode === 'edit'}\r\n                            selected={this.props.selectedItemID === i.id}\r\n                            thumbnail={this.props.mode === 'thumbnail'}\r\n                            select={id => this.props.mode === 'edit' ? this.props.setSelectedItemID(id) : null}\r\n                        />\r\n                    );\r\n                });\r\n\r\n            // Draw the tokens\r\n            let tokens: JSX.Element[] = [];\r\n            if (this.props.mode !== 'edit') {\r\n                tokens = this.props.map.items\r\n                    .filter(i => (i.type === 'monster') || (i.type === 'pc'))\r\n                    .map(i => {\r\n                        const tokenStyle = this.getStyle(i.x, i.y, i.width, i.height, mapDimensions as MapDimensions);\r\n                        const combatant = this.props.combatants.find(c => c.id === i.id);\r\n                        if (combatant) {\r\n                            return (\r\n                                <MapToken\r\n                                    key={i.id}\r\n                                    token={i}\r\n                                    combatant={combatant}\r\n                                    style={tokenStyle}\r\n                                    simple={this.props.mode === 'thumbnail'}\r\n                                    selectable={this.props.mode === 'combat'}\r\n                                    selected={this.props.selectedItemID ===  i.id}\r\n                                    select={id => this.props.setSelectedItemID(id)}\r\n                                />\r\n                            );\r\n                        }\r\n\r\n                        return null;\r\n                    })\r\n                    .filter(mt => mt !== null) as JSX.Element[];\r\n            }\r\n\r\n            // Draw the drag overlay\r\n            const dragOverlay = [];\r\n            if (this.props.showOverlay) {\r\n                for (let yOver = mapDimensions.minY; yOver !== mapDimensions.maxY + 1; ++yOver) {\r\n                    for (let xOver = mapDimensions.minX; xOver !== mapDimensions.maxX + 1; ++xOver) {\r\n                        const overlayStyle = this.getStyle(xOver, yOver, 1, 1, mapDimensions);\r\n                        dragOverlay.push(\r\n                            <GridSquare\r\n                                key={xOver + ',' + yOver}\r\n                                x={xOver}\r\n                                y={yOver}\r\n                                style={overlayStyle}\r\n                                overlay={true}\r\n                                onClick={(posX, posY) => this.props.gridSquareClicked(posX, posY)}\r\n                            />\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n\r\n            const style = 'map-panel ' + this.props.mode;\r\n            return (\r\n                <div className={style} onClick={() => this.props.setSelectedItemID(null)}>\r\n                    <div className='grid' style={{ height: ((this.getSideLength() * mapDimensions.height) + 1) + 'px' }}>\r\n                        {grid}\r\n                        {tiles}\r\n                        {tokens}\r\n                        {dragOverlay}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface GridSquareProps {\r\n    x: number;\r\n    y: number;\r\n    style: StyleData;\r\n    overlay: boolean;\r\n    onClick: (x: number, y: number) => void;\r\n    onDoubleClick: (x: number, y: number) => void;\r\n}\r\n\r\nclass GridSquare extends React.Component<GridSquareProps> {\r\n    public static defaultProps = {\r\n        overlay: false,\r\n        onDoubleClick: null\r\n    };\r\n\r\n    private click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (this.props.onClick) {\r\n            this.props.onClick(this.props.x, this.props.y);\r\n        }\r\n    }\r\n\r\n    private doubleClick(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (this.props.onDoubleClick) {\r\n            this.props.onDoubleClick(this.props.x, this.props.y);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'grid-square';\r\n        if (this.props.overlay) {\r\n            style += ' grid-overlay';\r\n        }\r\n\r\n        return (\r\n            <div\r\n                className={style}\r\n                style={this.props.style}\r\n                onClick={e => this.click(e)}\r\n                onDoubleClick={e => this.doubleClick(e)}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\ninterface MapTileProps {\r\n    tile: MapItem;\r\n    style: StyleData;\r\n    thumbnail: boolean;\r\n    selectable: boolean;\r\n    selected: boolean;\r\n    select: (tileID: string) => void;\r\n}\r\n\r\nclass MapTile extends React.Component<MapTileProps> {\r\n    private select(e: React.MouseEvent) {\r\n        if (this.props.selectable) {\r\n            e.stopPropagation();\r\n            this.props.select(this.props.tile.id);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'tile ' + this.props.tile.terrain;\r\n        if (this.props.selected) {\r\n            style += ' selected';\r\n        }\r\n        if (this.props.thumbnail) {\r\n            style += ' thumbnail';\r\n        }\r\n\r\n        return (\r\n            <div\r\n                className={style}\r\n                style={this.props.style}\r\n                onClick={e => this.select(e)}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\ninterface MapTokenProps {\r\n    token: MapItem;\r\n    combatant: (Combatant & PC) | (Combatant & Monster);\r\n    style: StyleData;\r\n    simple: boolean;\r\n    selectable: boolean;\r\n    selected: boolean;\r\n    select: (tokenID: string) => void;\r\n}\r\n\r\nclass MapToken extends React.Component<MapTokenProps> {\r\n    private select(e: React.MouseEvent) {\r\n        if (this.props.selectable) {\r\n            e.stopPropagation();\r\n            this.props.select(this.props.token.id);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'token ' + this.props.token.type;\r\n        if (this.props.selected) {\r\n            style += ' selected';\r\n        }\r\n        if (this.props.combatant.current) {\r\n            style += ' current';\r\n        }\r\n\r\n        let initials = null;\r\n        let hpGauge = null;\r\n        let altitudeBadge = null;\r\n        let conditionsBadge = null;\r\n        if (!this.props.simple) {\r\n            const name = this.props.combatant.displayName || this.props.combatant.name;\r\n            initials = (\r\n                <div className='initials'>{name.split(' ').map(s => s[0])}</div>\r\n            );\r\n\r\n            if (this.props.combatant.type === 'monster') {\r\n                hpGauge = (\r\n                    <HitPointGauge combatant={this.props.combatant as Combatant & Monster} />\r\n                );\r\n            }\r\n\r\n            if (this.props.combatant.altitude > 0) {\r\n                altitudeBadge = (\r\n                    <div className='badge altitude'>&#9206;</div>\r\n                );\r\n            }\r\n\r\n            if (this.props.combatant.altitude < 0) {\r\n                altitudeBadge = (\r\n                    <div className='badge altitude'>&#9207;</div>\r\n                );\r\n            }\r\n\r\n            if ((this.props.combatant.conditions) && (this.props.combatant.conditions.length > 0)) {\r\n                conditionsBadge = (\r\n                    <div className='badge'>&#9670;</div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div\r\n                title={this.props.combatant.displayName || this.props.combatant.name}\r\n                className={style}\r\n                style={this.props.style}\r\n                onClick={e => this.select(e)}\r\n            >\r\n                {initials}\r\n                {hpGauge}\r\n                {altitudeBadge}\r\n                {conditionsBadge}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Combat } from '../../models/combat';\r\n\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    combat: Combat;\r\n    selected: boolean;\r\n    setSelection: (combat: Combat) => void;\r\n}\r\n\r\nexport default class CombatListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            let map = null;\r\n            if (this.props.combat.map) {\r\n                map = (\r\n                    <MapPanel\r\n                        map={this.props.combat.map}\r\n                        mode='thumbnail'\r\n                        combatants={this.props.combat.combatants}\r\n                    />\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.combat)}>\r\n                    <div className='heading'>{this.props.combat.name || 'unnamed combat'}</div>\r\n                    <div className='text'>paused at {this.props.combat.timestamp}</div>\r\n                    {map}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport close from '../../resources/images/close-black.svg';\r\nimport arrow from '../../resources/images/down-arrow-black.svg';\r\n\r\ninterface Props {\r\n    content: any[];\r\n    heading: string;\r\n    hidden: boolean;\r\n    showToggle: boolean;\r\n    close: () => void;\r\n}\r\n\r\ninterface State {\r\n    showCards: boolean;\r\n}\r\n\r\nexport default class CardGroup extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        heading: null,\r\n        hidden: false,\r\n        showToggle: false,\r\n        close: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showCards: true\r\n        };\r\n    }\r\n\r\n    private toggleCards() {\r\n        this.setState({\r\n            showCards: !this.state.showCards\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            if (this.props.hidden) {\r\n                return null;\r\n            }\r\n\r\n            let heading = null;\r\n            if (this.props.heading) {\r\n                let closeBtn = null;\r\n                if (this.props.close) {\r\n                    closeBtn = (\r\n                        <img className='image' src={close} alt='close' onClick={() => this.props.close()} />\r\n                    );\r\n                }\r\n\r\n                let toggle = null;\r\n                if (this.props.showToggle) {\r\n                    const style = this.state.showCards ? 'image rotate' : 'image';\r\n                    toggle = (\r\n                        <img className={style} src={arrow} alt='arrow' onClick={() => this.toggleCards()} />\r\n                    );\r\n                }\r\n\r\n                heading = (\r\n                    <div className='heading'>\r\n                        <div className='title'>{this.props.heading}</div>\r\n                        {toggle}\r\n                        {closeBtn}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            let cards = [];\r\n            if ((this.props.content.length > 0) && this.state.showCards) {\r\n                cards = this.props.content;\r\n            }\r\n\r\n            return (\r\n                <div className='card-group'>\r\n                    {heading}\r\n                    <div className='row small-up-1 medium-up-2 large-up-3 collapse'>\r\n                        {cards}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combat, Combatant, Notification } from '../../models/combat';\r\nimport { Condition, ConditionDurationSaves } from '../../models/condition';\r\nimport { Monster, Trait } from '../../models/monster-group';\r\nimport { PC } from '../../models/party';\r\n\r\nimport MonsterCard from '../cards/monster-card';\r\nimport PCCard from '../cards/pc-card';\r\nimport ControlRow from '../controls/control-row';\r\nimport Spin from '../controls/spin';\r\nimport CombatListItem from '../list-items/combat-list-item';\r\nimport CardGroup from '../panels/card-group';\r\nimport HitPointGauge from '../panels/hit-point-gauge';\r\nimport MapPanel from '../panels/map-panel';\r\nimport Note from '../panels/note';\r\nimport TraitsPanel from '../panels/traits-panel';\r\n\r\ninterface Props {\r\n    combats: Combat[];\r\n    combat: Combat | null;\r\n    filter: string;\r\n    createCombat: () => void;\r\n    resumeEncounter: (combat: Combat) => void;\r\n    close: (notification: Notification, removeCondition: boolean) => void;\r\n    mapAdd: (combatant: (Combatant & PC) | (Combatant & Monster), x: number, y: number) => void;\r\n    makeCurrent: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    makeActive: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    makeDefeated: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    removeCombatant: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    addCondition: (combatant: Combatant & Monster) => void;\r\n    editCondition: (combatant: Combatant & Monster, condition: Condition) => void;\r\n    removeCondition: (combatant: Combatant & Monster, conditionID: string) => void;\r\n    mapMove: (combatant: (Combatant & PC) | (Combatant & Monster), dir: string) => void;\r\n    mapRemove: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    endTurn: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    changeHP: (combatant: Combatant & Monster, hp: number, temp: number) => void;\r\n    changeValue: (source: {}, type: string, value: any) => void;\r\n    nudgeValue: (source: {}, type: string, delta: number) => void;\r\n}\r\n\r\ninterface State {\r\n    selectedTokenID: string | null;\r\n    addingToMapID: string | null;\r\n}\r\n\r\nexport default class CombatManagerScreen extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            selectedTokenID: null,  // The ID of the combatant that's selected\r\n            addingToMapID: null     // The ID of the combatant we're adding to the map\r\n        };\r\n    }\r\n\r\n    private setSelectedTokenID(id: string | null) {\r\n        this.setState({\r\n            selectedTokenID: id\r\n        });\r\n    }\r\n\r\n    private setAddingToMapID(id: string | null) {\r\n        this.setState({\r\n            addingToMapID: id\r\n        });\r\n    }\r\n\r\n    private createCard(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        let mode = 'combat';\r\n        if (this.props.combat && this.props.combat.map) {\r\n            mode += ' tactical';\r\n            const onMap = this.props.combat.map.items.find(i => i.id === combatant.id);\r\n            mode += onMap ? ' on-map' : ' off-map';\r\n        }\r\n\r\n        switch (combatant.type) {\r\n            case 'pc':\r\n                return (\r\n                    <PCCard\r\n                        key='selected'\r\n                        combatant={combatant as Combatant & PC}\r\n                        mode={mode}\r\n                        changeValue={(source, type, value) => this.props.changeValue(source, type, value)}\r\n                        nudgeValue={(source, type, delta) => this.props.nudgeValue(source, type, delta)}\r\n                        makeCurrent={c => this.props.makeCurrent(c as Combatant & PC)}\r\n                        makeActive={c => this.props.makeActive(c as Combatant & PC)}\r\n                        makeDefeated={c => this.props.makeDefeated(c as Combatant & PC)}\r\n                        removeCombatant={c => this.props.removeCombatant(c as Combatant & PC)}\r\n                        mapAdd={c => this.setAddingToMapID(c.id)}\r\n                        mapMove={(c, dir) => this.props.mapMove(c as Combatant & PC, dir)}\r\n                        mapRemove={c => this.props.mapRemove(c as Combatant & PC)}\r\n                        endTurn={c => this.props.endTurn(c as Combatant & PC)}\r\n                    />\r\n                );\r\n            case 'monster':\r\n                return (\r\n                    <MonsterCard\r\n                        key='selected'\r\n                        combatant={combatant as Combatant & Monster}\r\n                        mode={mode}\r\n                        combat={this.props.combat as Combat}\r\n                        changeValue={(c, type, value) => this.props.changeValue(c, type, value)}\r\n                        nudgeValue={(c, type, delta) => this.props.nudgeValue(c, type, delta)}\r\n                        makeCurrent={c => this.props.makeCurrent(c as Combatant & Monster)}\r\n                        makeActive={c => this.props.makeActive(c as Combatant & Monster)}\r\n                        makeDefeated={c => this.props.makeDefeated(c as Combatant & Monster)}\r\n                        removeCombatant={c => this.props.removeCombatant(c as Combatant & Monster)}\r\n                        addCondition={c => this.props.addCondition(c as Combatant & Monster)}\r\n                        editCondition={(c, condition) => this.props.editCondition(c as Combatant & Monster, condition)}\r\n                        removeCondition={(c, conditionID) => this.props.removeCondition(c as Combatant & Monster, conditionID)}\r\n                        nudgeConditionValue={(c, type, delta) => this.props.nudgeValue(c, type, delta)}\r\n                        mapAdd={c => this.setAddingToMapID(c.id)}\r\n                        mapMove={(c, dir) => this.props.mapMove(c as Combatant & Monster, dir)}\r\n                        mapRemove={c => this.props.mapRemove(c as Combatant & Monster)}\r\n                        endTurn={(c) => this.props.endTurn(c as Combatant & Monster)}\r\n                        changeHP={(c, hp, temp) => this.props.changeHP(c as Combatant & Monster, hp, temp)}\r\n                    />\r\n                );\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    private addCombatantToMap(x: number, y: number) {\r\n        if (this.props.combat) {\r\n            const combatant = this.props.combat.combatants.find(c => c.id === this.state.addingToMapID);\r\n            if (combatant) {\r\n                this.props.mapAdd(combatant, x, y);\r\n            }\r\n            this.setAddingToMapID(null);\r\n        }\r\n    }\r\n\r\n    private showCombat(combat: Combat) {\r\n        return Utils.match(this.props.filter, combat.name);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            if (this.props.combat) {\r\n                const current: JSX.Element[] = [];\r\n                let pending: JSX.Element[] = [];\r\n                let active: JSX.Element[] = [];\r\n                const defeated: JSX.Element[] = [];\r\n\r\n                this.props.combat.combatants.forEach(combatant => {\r\n                    if (combatant.current) {\r\n                        current.push(\r\n                            <div key={combatant.id}>\r\n                                {this.createCard(combatant)}\r\n                            </div>\r\n                        );\r\n                    }\r\n                    if (combatant.pending && !combatant.active && !combatant.defeated) {\r\n                        pending.push(\r\n                            <PendingCombatantRow\r\n                                key={combatant.id}\r\n                                combatant={combatant}\r\n                                select={c => this.setSelectedTokenID(c.id)}\r\n                                selected={combatant.id === this.state.selectedTokenID}\r\n                                nudgeValue={(c, type, delta) => this.props.nudgeValue(c, type, delta)}\r\n                                makeActive={c => this.props.makeActive(c)}\r\n                            />\r\n                        );\r\n                    }\r\n                    if (!combatant.pending && combatant.active && !combatant.defeated) {\r\n                        switch (combatant.type) {\r\n                            case 'pc':\r\n                                active.push(\r\n                                    <PCRow\r\n                                        key={combatant.id}\r\n                                        combatant={combatant as Combatant & PC}\r\n                                        combat={this.props.combat as Combat}\r\n                                        select={c => this.setSelectedTokenID(c.id)}\r\n                                        selected={combatant.id === this.state.selectedTokenID}\r\n                                    />\r\n                                );\r\n                                break;\r\n                            case 'monster':\r\n                                active.push(\r\n                                    <MonsterRow\r\n                                        key={combatant.id}\r\n                                        combatant={combatant as Combatant & Monster}\r\n                                        combat={this.props.combat as Combat}\r\n                                        select={c => this.setSelectedTokenID(c.id)}\r\n                                        selected={combatant.id === this.state.selectedTokenID}\r\n                                    />\r\n                                );\r\n                                break;\r\n                        }\r\n                    }\r\n                    if (!combatant.pending && !combatant.active && combatant.defeated) {\r\n                        switch (combatant.type) {\r\n                            case 'pc':\r\n                                defeated.push(\r\n                                    <PCRow\r\n                                        key={combatant.id}\r\n                                        combatant={combatant as Combatant & PC}\r\n                                        combat={this.props.combat as Combat}\r\n                                        select={c => this.setSelectedTokenID(c.id)}\r\n                                        selected={combatant.id === this.state.selectedTokenID}\r\n                                    />\r\n                                );\r\n                                break;\r\n                            case 'monster':\r\n                                defeated.push(\r\n                                    <MonsterRow\r\n                                        key={combatant.id}\r\n                                        combatant={combatant as Combatant & Monster}\r\n                                        combat={this.props.combat as Combat}\r\n                                        select={c => this.setSelectedTokenID(c.id)}\r\n                                        selected={combatant.id === this.state.selectedTokenID}\r\n                                    />\r\n                                );\r\n                                break;\r\n                        }\r\n                    }\r\n                });\r\n\r\n                if (pending.length !== 0) {\r\n                    const pendingHelp = (\r\n                        <div key='pending-help'>\r\n                            <Note\r\n                                content={\r\n                                    <div>\r\n                                        <div className='section'>these combatants are not yet part of the encounter</div>\r\n                                        <div className='section'>set initiative on each of them, then add them to the encounter</div>\r\n                                    </div>\r\n                                }\r\n                            />\r\n                        </div>\r\n                    );\r\n                    pending = [pendingHelp].concat(pending);\r\n                }\r\n\r\n                if (current.length === 0) {\r\n                    const activeHelp = (\r\n                        /* tslint:disable:max-line-length */\r\n                        <div key='active-help'>\r\n                            <Note\r\n                                content={\r\n                                    <div>\r\n                                        <div className='section'>these are the combatants taking part in this encounter; you can select them to see their stat blocks (on the right)</div>\r\n                                        <div className='section'>they are listed in initiative order (with the highest initiative score at the top of the list, and the lowest at the bottom)</div>\r\n                                        <div className='section'>to begin the encounter, select the first combatant and press the <b>start turn</b> button on their stat block</div>\r\n                                    </div>\r\n                                }\r\n                            />\r\n                        </div>\r\n                        /* tslint:enable:max-line-length */\r\n                    );\r\n                    active = [activeHelp].concat(active);\r\n                }\r\n\r\n                if (current.length === 0) {\r\n                    current.push(\r\n                        <Note\r\n                            key='current'\r\n                            content={\r\n                                <div className='section'>\r\n                                    the current initiative holder will be displayed here\r\n                                </div>\r\n                            }\r\n                        />\r\n                    );\r\n                }\r\n\r\n                let notificationSection = null;\r\n                if (this.props.combat.notifications.length > 0) {\r\n                    const notifications = this.props.combat.notifications.map(n => (\r\n                        <NotificationPanel\r\n                            key={n.id}\r\n                            notification={n}\r\n                            close={(notification, removeCondition) => this.props.close(notification, removeCondition)}\r\n                        />\r\n                    ));\r\n                    notificationSection = (\r\n                        <div className='notifications'>\r\n                            {notifications}\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                let mapSection = null;\r\n                if (this.props.combat.map) {\r\n                    mapSection = (\r\n                        <MapPanel\r\n                            map={this.props.combat.map}\r\n                            mode='combat'\r\n                            showOverlay={this.state.addingToMapID !== null}\r\n                            combatants={this.props.combat.combatants}\r\n                            selectedItemID={this.state.selectedTokenID ? this.state.selectedTokenID : undefined}\r\n                            setSelectedItemID={id => {\r\n                                if (id) {\r\n                                    this.setSelectedTokenID(id);\r\n                                }\r\n                            }}\r\n                            gridSquareClicked={(x, y) => this.addCombatantToMap(x, y)}\r\n                        />\r\n                    );\r\n                }\r\n\r\n                const special: JSX.Element[] = [];\r\n                this.props.combat.combatants.forEach(c => {\r\n                    const monster = c as (Combatant & Monster);\r\n                    const legendary = monster && monster.traits && monster.traits.some(t => t.type === 'legendary') && !monster.current;\r\n                    const lair = monster && monster.traits && monster.traits.some(t => t.type === 'lair');\r\n                    if (legendary || lair) {\r\n                        special.push(\r\n                            <div className='card monster' key={monster.id}>\r\n                                <div className='heading'><div className='title'>{monster.name}</div></div>\r\n                                <div className='card-content'>\r\n                                    <TraitsPanel\r\n                                        combatant={monster}\r\n                                        mode='combat-special'\r\n                                        changeValue={(source, type, value) => this.props.changeValue(source, type, value)}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    }\r\n                });\r\n\r\n                let selectedCombatant = null;\r\n                if (this.state.selectedTokenID) {\r\n                    const combatant = this.props.combat.combatants.find(c => c.id === this.state.selectedTokenID);\r\n                    if (combatant && !combatant.current) {\r\n                        selectedCombatant = this.createCard(combatant);\r\n                    }\r\n                }\r\n                if (!selectedCombatant) {\r\n                    selectedCombatant = (\r\n                        <Note\r\n                            key='selected'\r\n                            content={\r\n                                <div className='section'>\r\n                                    select a pc or monster from the <b>initiative order</b> list to see its details here\r\n                                </div>\r\n                            }\r\n                        />\r\n                    );\r\n                }\r\n\r\n                return (\r\n                    <div className='combat-manager row collapse'>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable'>\r\n                            <CardGroup\r\n                                heading='initiative holder'\r\n                                content={current}\r\n                            />\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable'>\r\n                            {notificationSection}\r\n                            <CardGroup\r\n                                heading='waiting for intiative to be entered'\r\n                                content={pending}\r\n                                hidden={pending.length === 0}\r\n                                showToggle={true}\r\n                            />\r\n                            {mapSection}\r\n                            <CardGroup\r\n                                heading='initiative order'\r\n                                content={active}\r\n                                hidden={active.length === 0}\r\n                            />\r\n                            <CardGroup\r\n                                heading='defeated'\r\n                                content={defeated}\r\n                                hidden={defeated.length === 0}\r\n                                showToggle={true}\r\n                            />\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable'>\r\n                            <CardGroup\r\n                                heading={'don\\'t forget'}\r\n                                content={special}\r\n                                hidden={special.length === 0}\r\n                                showToggle={true}\r\n                            />\r\n                            <CardGroup\r\n                                heading='selected combatant'\r\n                                content={[selectedCombatant]}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                let listItems = this.props.combats.filter(c => this.showCombat(c)).map(c => {\r\n                    return (\r\n                        <CombatListItem\r\n                            key={c.id}\r\n                            combat={c}\r\n                            selected={false}\r\n                            setSelection={combat => this.props.resumeEncounter(combat)}\r\n                        />\r\n                    );\r\n                });\r\n                if (listItems.length === 0) {\r\n                    listItems = [(\r\n                        <Note\r\n                            key='empty'\r\n                            content={'you have no in-progress encounters'}\r\n                        />\r\n                    )];\r\n                }\r\n\r\n                return (\r\n                    <div className='combat-manager row collapse'>\r\n                        <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                            <button onClick={() => this.props.createCombat()}>start a new combat</button>\r\n                            <div className='divider' />\r\n                            {listItems}\r\n                        </div>\r\n                        <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                            <div className='vertical-center-outer'>\r\n                                <div className='vertical-center-middle'>\r\n                                    <div className='vertical-center-inner'>\r\n                                        <HelpCard combats={this.props.combats} />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface HelpCardProps {\r\n    combats: Combat[];\r\n}\r\n\r\nclass HelpCard extends React.Component<HelpCardProps> {\r\n    public render() {\r\n        let action: JSX.Element | null = null;\r\n        if (this.props.combats.length === 0) {\r\n            action = (\r\n                <div className='section'>to start a combat encounter, press the <b>start a new combat</b> button</div>\r\n            );\r\n        } else {\r\n            action = (\r\n                <div>\r\n                    <div className='section'>on the left you will see a list of encounters that you have paused</div>\r\n                    <div className='section'>you can resume a paused combat by selecting it</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Note\r\n                content={\r\n                    <div>\r\n                        <div className='section'>here you can run a combat encounter by specifying a party and an encounter</div>\r\n                        <div className='divider' />\r\n                        {action}\r\n                    </div>\r\n                }\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\ninterface NotificationProps {\r\n    notification: Notification;\r\n    close: (notification: Notification, removeCondition: boolean) => void;\r\n}\r\n\r\nclass NotificationPanel extends React.Component<NotificationProps> {\r\n    private success() {\r\n        switch (this.props.notification.type) {\r\n            case 'condition-save':\r\n            case 'condition-end':\r\n                const condition = this.props.notification.data as Condition;\r\n                if (condition.duration) {\r\n                    // Reduce save by 1\r\n                    if ((condition.duration.type === 'saves') || (condition.duration.type === 'rounds')) {\r\n                        condition.duration.count -= 1;\r\n                        if (condition.duration.count === 0) {\r\n                            // Remove the condition\r\n                            this.close(true);\r\n                        } else {\r\n                            this.close();\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            case 'trait-recharge':\r\n                // Mark trait as recharged\r\n                const trait = this.props.notification.data as Trait;\r\n                trait.uses = 0;\r\n                this.close();\r\n                break;\r\n        }\r\n    }\r\n\r\n    private close(removeCondition = false) {\r\n        this.props.close(this.props.notification, removeCondition);\r\n    }\r\n\r\n    public render() {\r\n        const combatant = this.props.notification.combatant as (Combatant & Monster);\r\n        const condition = this.props.notification.data as Condition;\r\n        const trait = this.props.notification.data as Trait;\r\n\r\n        const name = combatant.displayName || combatant.name || 'unnamed monster';\r\n        switch (this.props.notification.type) {\r\n            case 'condition-save':\r\n                const duration = condition.duration as ConditionDurationSaves;\r\n                let saveType = duration.saveType.toString();\r\n                if (saveType !== 'death') {\r\n                    saveType = saveType.toUpperCase();\r\n                }\r\n                return (\r\n                    <div key={this.props.notification.id} className='descriptive'>\r\n                        <div className='text'>\r\n                            {name} must make a {saveType} save against dc {duration.saveDC}\r\n                        </div>\r\n                        <ControlRow\r\n                            controls={[\r\n                                <button key='success' onClick={() => this.success()}>success</button>,\r\n                                <button key='close' onClick={() => this.close()}>close</button>\r\n                            ]}\r\n                        />\r\n                    </div>\r\n                );\r\n            case 'condition-end':\r\n                return (\r\n                    <div key={this.props.notification.id} className='descriptive'>\r\n                        <div className='text'>\r\n                            {name} is no longer affected by condition {condition.name}\r\n                        </div>\r\n                        <ControlRow\r\n                            controls={[\r\n                                <button key='close' onClick={() => this.close()}>close</button>\r\n                            ]}\r\n                        />\r\n                    </div>\r\n                );\r\n            case 'trait-recharge':\r\n                return (\r\n                    <div key={this.props.notification.id} className='descriptive'>\r\n                        <div className='text'>\r\n                            {name} can attempt to recharge {trait.name} ({trait.usage})\r\n                        </div>\r\n                        <ControlRow\r\n                            controls={[\r\n                                <button key='recharge' onClick={() => this.success()}>recharge</button>,\r\n                                <button key='close' onClick={() => this.close()}>close</button>\r\n                            ]}\r\n                        />\r\n                    </div>\r\n                );\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface PendingCombatantRowProps {\r\n    combatant: (Combatant & PC) | (Combatant & Monster);\r\n    selected: boolean;\r\n    select: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n    nudgeValue: (combatant: (Combatant & PC) | (Combatant & Monster), field: string, delta: number) => void;\r\n    makeActive: (combatant: (Combatant & PC) | (Combatant & Monster)) => void;\r\n}\r\n\r\nclass PendingCombatantRow extends React.Component<PendingCombatantRowProps> {\r\n    private getInformationText() {\r\n        if (this.props.selected) {\r\n            return 'selected';\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private onClick(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (this.props.select) {\r\n            this.props.select(this.props.combatant);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'combatant-row ' + this.props.combatant.type;\r\n        if (this.props.combatant.current || this.props.selected) {\r\n            style += ' highlight';\r\n        }\r\n\r\n        return (\r\n            <div className={style} onClick={e => this.onClick(e)}>\r\n                <div className='name'>\r\n                    {this.props.combatant.displayName || this.props.combatant.name || 'combatant'}\r\n                    <span className='info'>{this.getInformationText()}</span>\r\n                </div>\r\n                <div className='content'>\r\n                    <Spin\r\n                        source={this.props.combatant}\r\n                        name='initiative'\r\n                        label='initiative'\r\n                        nudgeValue={delta => this.props.nudgeValue(this.props.combatant, 'initiative', delta)}\r\n                    />\r\n                    <button onClick={e => { e.stopPropagation(); this.props.makeActive(this.props.combatant); }}>add to encounter</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface PCRowProps {\r\n    combatant: Combatant & PC;\r\n    combat: Combat;\r\n    selected: boolean;\r\n    select: (combatant: Combatant & PC) => void;\r\n}\r\n\r\nclass PCRow extends React.Component<PCRowProps> {\r\n    private getInformationText() {\r\n        if (this.props.combatant.current) {\r\n            return 'current turn';\r\n        }\r\n\r\n        if (this.props.selected) {\r\n            return 'selected';\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private onClick(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (!this.props.combatant.current && !this.props.selected && this.props.select) {\r\n            this.props.select(this.props.combatant);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'combatant-row ' + this.props.combatant.type;\r\n        if (this.props.combatant.current || this.props.selected) {\r\n            style += ' highlight';\r\n        }\r\n\r\n        const desc = (this.props.combatant.race || 'unknown race')\r\n                + ' ' + (this.props.combatant.classes || 'unknown class')\r\n                + ', level ' + this.props.combatant.level;\r\n\r\n        const notes = [];\r\n        if (this.props.combat.map) {\r\n            if (!this.props.combatant.pending && !this.props.combat.map.items.find(i => i.id === this.props.combatant.id)) {\r\n                notes.push(\r\n                    <Note key='not-on-map' white={true} content='not on the map' />\r\n                );\r\n            }\r\n        }\r\n        if (this.props.combatant.concentrating) {\r\n            notes.push(\r\n                <Note key='concentrating' white={true} content='concentrating' />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className={style} onClick={e => this.onClick(e)}>\r\n                <div className='name'>\r\n                    {this.props.combatant.displayName || this.props.combatant.name || 'combatant'}\r\n                    {this.props.combatant.player ? ' | ' + this.props.combatant.player : ''}\r\n                    <span className='info'>{this.getInformationText()}</span>\r\n                </div>\r\n                <div className='content'>\r\n                    <div className='section lowercase'>\r\n                        {desc}\r\n                    </div>\r\n                    {notes}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface MonsterRowProps {\r\n    combatant: Combatant & Monster;\r\n    combat: Combat;\r\n    selected: boolean;\r\n    select: (combatant: Combatant & Monster) => void;\r\n}\r\n\r\nclass MonsterRow extends React.Component<MonsterRowProps> {\r\n    private getInformationText() {\r\n        if (this.props.combatant.current) {\r\n            return 'current turn';\r\n        }\r\n\r\n        if (this.props.selected) {\r\n            return 'selected';\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private onClick(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (!this.props.combatant.current && !this.props.selected && this.props.select) {\r\n            this.props.select(this.props.combatant);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let style = 'combatant-row ' + this.props.combatant.type;\r\n        if (this.props.combatant.current || this.props.selected) {\r\n            style += ' highlight';\r\n        }\r\n\r\n        let hp = (this.props.combatant.hp ? this.props.combatant.hp : 0).toString();\r\n        if (this.props.combatant.hpTemp > 0) {\r\n            hp += '+' + this.props.combatant.hpTemp;\r\n        }\r\n\r\n        let gauge = null;\r\n        if (!this.props.combatant.pending) {\r\n            gauge = (\r\n                <HitPointGauge combatant={this.props.combatant} />\r\n            );\r\n        }\r\n\r\n        let conditions = null;\r\n        if (this.props.combatant.conditions) {\r\n            conditions = this.props.combatant.conditions.map(c => {\r\n                let name = c.name;\r\n                if (c.name === 'exhaustion') {\r\n                    name += ' (' + c.level + ')';\r\n                }\r\n                if ((c.name === 'custom') && (c.text)) {\r\n                    name = c.text;\r\n                }\r\n                if (c.duration) {\r\n                    name += ' ' + Utils.conditionDurationText(c, this.props.combat);\r\n                }\r\n                const description = [];\r\n                const text = Utils.conditionText(c);\r\n                for (let n = 0; n !== text.length; ++n) {\r\n                    description.push(<li key={n} className='condition-text'>{text[n]}</li>);\r\n                }\r\n                return (\r\n                    <Note\r\n                        key={c.id}\r\n                        white={true}\r\n                        content={\r\n                            <div className='condition'>\r\n                                <div className='condition-name'>{name}</div>\r\n                                <ul>\r\n                                    {description}\r\n                                </ul>\r\n                            </div>\r\n                        }\r\n                    />\r\n                );\r\n            });\r\n        }\r\n\r\n        const notes = [];\r\n        if (this.props.combat.map) {\r\n            if (!this.props.combatant.pending && !this.props.combat.map.items.find(i => i.id === this.props.combatant.id)) {\r\n                notes.push(\r\n                    <Note key='not-on-map' white={true} content='not on the map' />\r\n                );\r\n            }\r\n        }\r\n        if (this.props.combatant.concentrating) {\r\n            notes.push(\r\n                <Note key='concentrating' white={true} content='concentrating' />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className={style} onClick={e => this.onClick(e)}>\r\n                <div className='name'>\r\n                    {this.props.combatant.displayName || this.props.combatant.name || 'combatant'}\r\n                    <span className='info'>{this.getInformationText()}</span>\r\n                </div>\r\n                <div className='content'>\r\n                    <div className='section key-stats'>\r\n                        <div className='key-stat'>\r\n                            <div className='stat-label'>ac</div>\r\n                            <div className='stat-value'>{this.props.combatant.ac}</div>\r\n                        </div>\r\n                        <div className='key-stat'>\r\n                            <div className='stat-value'>{hp}</div>\r\n                            <div className='stat-label'>hp</div>\r\n                        </div>\r\n                    </div>\r\n                    {gauge}\r\n                    {conditions}\r\n                    {notes}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { CATEGORY_TYPES, SIZE_TYPES } from '../../models/monster-group';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport Spin from '../controls/spin';\r\n\r\nimport arrow from '../../resources/images/down-arrow.svg';\r\n\r\ninterface Props {\r\n    filter: {\r\n        name: string,\r\n        challengeMin: number;\r\n        challengeMax: number;\r\n        category: string;\r\n        size: string;\r\n    };\r\n    changeValue: (type: 'name' | 'challengeMin' | 'challengeMax' | 'category' | 'size', value: any) => void;\r\n    nudgeValue: (type: 'challengeMin' | 'challengeMax', delta: number) => void;\r\n    resetFilter: () => void;\r\n}\r\n\r\ninterface State {\r\n    showAll: boolean;\r\n}\r\n\r\nexport default class FilterCard extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showAll: false\r\n        };\r\n    }\r\n\r\n    private toggleAll() {\r\n        this.setState({\r\n            showAll: !this.state.showAll\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const sizes = ['all sizes'].concat(SIZE_TYPES);\r\n            const sizeOptions = sizes.map(size => ({ id: size, text: size }));\r\n\r\n            const categories = ['all types'].concat(CATEGORY_TYPES);\r\n            const catOptions = categories.map(cat => ({ id: cat, text: cat }));\r\n\r\n            let content = null;\r\n            if (this.state.showAll) {\r\n                content = (\r\n                    <div>\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='name'\r\n                                value={this.props.filter.name}\r\n                                onChange={event => this.props.changeValue('name', event.target.value)}\r\n                            />\r\n                        </div>\r\n                        <Spin\r\n                            source={this.props.filter}\r\n                            name='challengeMin'\r\n                            label='min cr'\r\n                            display={value => Utils.challenge(value)}\r\n                            nudgeValue={delta => this.props.nudgeValue('challengeMin', delta)}\r\n                        />\r\n                        <Spin\r\n                            source={this.props.filter}\r\n                            name='challengeMax'\r\n                            label='max cr'\r\n                            display={value => Utils.challenge(value)}\r\n                            nudgeValue={delta => this.props.nudgeValue('challengeMax', delta)}\r\n                        />\r\n                        <Dropdown\r\n                            options={sizeOptions}\r\n                            placeholder='filter by size...'\r\n                            selectedID={this.props.filter.size}\r\n                            select={optionID => this.props.changeValue('size', optionID)}\r\n                        />\r\n                        <Dropdown\r\n                            options={catOptions}\r\n                            placeholder='filter by type...'\r\n                            selectedID={this.props.filter.category}\r\n                            select={optionID => this.props.changeValue('category', optionID)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <div className='section'>\r\n                            <button onClick={() => this.props.resetFilter()}>clear filter</button>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                let summary = '';\r\n                if (this.props.filter.size !== 'all sizes') {\r\n                    summary += summary ? ' ' + this.props.filter.size : this.props.filter.size;\r\n                }\r\n                if (this.props.filter.category !== 'all types') {\r\n                    summary += summary ? ' ' + this.props.filter.category : this.props.filter.category;\r\n                }\r\n                summary += ' monsters of cr ' + Utils.challenge(this.props.filter.challengeMin) + ' to ' + Utils.challenge(this.props.filter.challengeMax);\r\n\r\n                content = (\r\n                    <div>\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='name'\r\n                                value={this.props.filter.name}\r\n                                onChange={event => this.props.changeValue('name', event.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div className='section'>showing {summary}</div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='card'>\r\n                    <div className='heading'>\r\n                        <div className='title'>filter</div>\r\n                        <img className={this.state.showAll ? 'image rotate' : 'image'} src={arrow} alt='arrow' onClick={() => this.toggleAll()} />\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        {content}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { EncounterWave } from '../../models/encounter';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport InfoCard from './info-card';\r\n\r\ninterface Props {\r\n    wave: EncounterWave;\r\n    changeValue: (wave: EncounterWave, field: string, value: string) => void;\r\n    removeWave: (wave: EncounterWave) => void;\r\n}\r\n\r\nexport default class WaveCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const heading = (\r\n                <div className='heading'>\r\n                    <div className='title'>wave</div>\r\n                </div>\r\n            );\r\n\r\n            const content = (\r\n                <div>\r\n                    <div className='section'>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='wave name'\r\n                            value={this.props.wave.name}\r\n                            onChange={event => this.props.changeValue(this.props.wave, 'name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <ConfirmButton text='delete wave' callback={() => this.props.removeWave(this.props.wave)} />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            return (\r\n                <InfoCard heading={heading} content={content} />\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Encounter } from '../../models/encounter';\r\n\r\ninterface Props {\r\n    encounter: Encounter;\r\n    selected: boolean;\r\n    setSelection: (encounter: Encounter) => void;\r\n}\r\n\r\nexport default class EncounterListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const slots = [];\r\n\r\n            this.props.encounter.slots.forEach(slot => {\r\n                let text = slot.monsterName || 'unnamed monster';\r\n                if (slot.count > 1) {\r\n                    text += ' x' + slot.count;\r\n                }\r\n                slots.push(<div key={slot.id} className='text'>{text}</div>);\r\n            });\r\n\r\n            if (slots.length === 0) {\r\n                slots.push(<div key='empty' className='text'>no monsters</div>);\r\n            }\r\n\r\n            this.props.encounter.waves.forEach(wave => {\r\n                slots.push(<div key={'name ' + wave.id} className='text subheading'>{wave.name || 'unnamed wave'}</div>);\r\n                wave.slots.forEach(slot => {\r\n                    let text = slot.monsterName || 'unnamed monster';\r\n                    if (slot.count > 1) {\r\n                        text += ' x' + slot.count;\r\n                    }\r\n                    slots.push(<div key={slot.id} className='text'>{text}</div>);\r\n                });\r\n                if (slots.length === 0) {\r\n                    slots.push(<div key={'empty ' + wave.id} className='text'>no monsters</div>);\r\n                }\r\n            });\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.encounter)}>\r\n                    <div className='heading'>{this.props.encounter.name || 'unnamed encounter'}</div>\r\n                    {slots}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Encounter, EncounterSlot } from '../../models/encounter';\r\nimport { Monster } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\ninterface Props {\r\n    encounter: Encounter;\r\n    party: Party | null;\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n}\r\n\r\nexport default class DifficultyChartPanel extends React.Component<Props> {\r\n    public render() {\r\n        let monsterCount = 0;\r\n        let monsterXp = 0;\r\n        let slots: EncounterSlot[] = [];\r\n        slots = slots.concat(this.props.encounter.slots);\r\n        this.props.encounter.waves.forEach(wave => {\r\n            slots = slots.concat(wave.slots);\r\n        });\r\n        slots.forEach(slot => {\r\n            monsterCount += slot.count;\r\n            const monster = this.props.getMonster(slot.monsterName, slot.monsterGroupName);\r\n            if (monster) {\r\n                monsterXp += Utils.experience(monster.challenge) * slot.count;\r\n            }\r\n        });\r\n\r\n        const adjustedXp = monsterXp * Utils.experienceFactor(monsterCount);\r\n\r\n        let xpThresholds;\r\n        let diffSection;\r\n        if (this.props.party) {\r\n            let xpEasy = 0;\r\n            let xpMedium = 0;\r\n            let xpHard = 0;\r\n            let xpDeadly = 0;\r\n\r\n            const pcs = this.props.party.pcs.filter(pc => pc.active);\r\n            pcs.forEach(pc => {\r\n                xpEasy += Utils.pcExperience(pc.level, 'easy');\r\n                xpMedium += Utils.pcExperience(pc.level, 'medium');\r\n                xpHard += Utils.pcExperience(pc.level, 'hard');\r\n                xpDeadly += Utils.pcExperience(pc.level, 'deadly');\r\n            });\r\n\r\n            let difficulty = null;\r\n            let adjustedDifficulty = null;\r\n            if (adjustedXp > 0) {\r\n                difficulty = 'trivial';\r\n                if (adjustedXp >= xpEasy) {\r\n                    difficulty = 'easy';\r\n                }\r\n                if (adjustedXp >= xpMedium) {\r\n                    difficulty = 'medium';\r\n                }\r\n                if (adjustedXp >= xpHard) {\r\n                    difficulty = 'hard';\r\n                }\r\n                if (adjustedXp >= xpDeadly) {\r\n                    difficulty = 'deadly';\r\n                }\r\n                adjustedDifficulty = difficulty;\r\n\r\n                if ((pcs.length < 3) || (pcs.length > 5)) {\r\n                    const small = pcs.length < 3;\r\n                    switch (difficulty) {\r\n                        case 'trivial':\r\n                            adjustedDifficulty = small ? 'easy' : 'trivial';\r\n                            break;\r\n                        case 'easy':\r\n                            adjustedDifficulty = small ? 'medium' : 'trivial';\r\n                            break;\r\n                        case 'medium':\r\n                            adjustedDifficulty = small ? 'hard' : 'easy';\r\n                            break;\r\n                        case 'hard':\r\n                            adjustedDifficulty = small ? 'deadly' : 'medium';\r\n                            break;\r\n                        case 'deadly':\r\n                            adjustedDifficulty = small ? 'deadly' : 'hard';\r\n                            break;\r\n                        default:\r\n                            adjustedDifficulty = '';\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            xpThresholds = (\r\n                <div className='table'>\r\n                    <div>\r\n                        <div className='cell four'><b>easy</b></div>\r\n                        <div className='cell four'><b>medium</b></div>\r\n                        <div className='cell four'><b>hard</b></div>\r\n                        <div className='cell four'><b>deadly</b></div>\r\n                    </div>\r\n                    <div>\r\n                        <div className='cell four'>{xpEasy} xp</div>\r\n                        <div className='cell four'>{xpMedium} xp</div>\r\n                        <div className='cell four'>{xpHard} xp</div>\r\n                        <div className='cell four'>{xpDeadly} xp</div>\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            const getLeft = (xp: number) => {\r\n                const max = Math.max(adjustedXp, (xpDeadly * 1.2));\r\n                return (100 * xp) / max;\r\n            };\r\n\r\n            const getRight = (xp: number) => {\r\n                return 100 - getLeft(xp);\r\n            };\r\n\r\n            diffSection = (\r\n                <div>\r\n                    <div className='difficulty-gauge'>\r\n                        <div className='bar-container'>\r\n                            <div className='bar trivial' style={{ left: '0', right: getRight(xpEasy) + '%' }} />\r\n                        </div>\r\n                        <div className='bar-container'>\r\n                            <div className='bar easy' style={{ left: getLeft(xpEasy) + '%', right: getRight(xpMedium) + '%' }} />\r\n                        </div>\r\n                        <div className='bar-container'>\r\n                            <div className='bar medium' style={{ left: getLeft(xpMedium) + '%', right: getRight(xpHard) + '%' }} />\r\n                        </div>\r\n                        <div className='bar-container'>\r\n                            <div className='bar hard' style={{ left: getLeft(xpHard) + '%', right: getRight(xpDeadly) + '%' }} />\r\n                        </div>\r\n                        <div className='bar-container'>\r\n                            <div className='bar deadly' style={{ left: getLeft(xpDeadly) + '%', right: '0' }} />\r\n                        </div>\r\n                        <div className='encounter-container'>\r\n                            <div className='encounter' style={{ left: (getLeft(adjustedXp) - 0.5) + '%' }} />\r\n                        </div>\r\n                    </div>\r\n                    <div className='subheading'>difficulty</div>\r\n                    <div className='section'>\r\n                        difficulty for this party\r\n                        <div className='right'>{difficulty}</div>\r\n                    </div>\r\n                    <div className='section' style={{ display: (adjustedDifficulty === difficulty) ? 'none' : ''}}>\r\n                        effective difficulty for {pcs.length} pc(s)\r\n                        <div className='right'><b>{adjustedDifficulty}</b></div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='subheading'>xp value</div>\r\n                <div className='section'>\r\n                    xp for this encounter\r\n                    <div className='right'>{monsterXp} xp</div>\r\n                </div>\r\n                <div className='section' style={{ display: (adjustedXp === monsterXp) ? 'none' : ''}}>\r\n                    effective xp for {monsterCount} monster(s)\r\n                    <div className='right'>{adjustedXp} xp</div>\r\n                </div>\r\n                {xpThresholds}\r\n                {diffSection}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Encounter, EncounterSlot, EncounterWave } from '../../models/encounter';\r\nimport { Monster, MonsterGroup } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\nimport FilterCard from '../cards/filter-card';\r\nimport MonsterCard from '../cards/monster-card';\r\nimport WaveCard from '../cards/wave-card';\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport Dropdown from '../controls/dropdown';\r\nimport EncounterListItem from '../list-items/encounter-list-item';\r\nimport CardGroup from '../panels/card-group';\r\nimport DifficultyChartPanel from '../panels/difficulty-chart-panel';\r\nimport Note from '../panels/note';\r\n\r\ninterface Props {\r\n    encounters: Encounter[];\r\n    selection: Encounter | null;\r\n    parties: Party[];\r\n    library: MonsterGroup[];\r\n    filter: string;\r\n    selectEncounter: (encounter: Encounter | null) => void;\r\n    addEncounter: () => void;\r\n    removeEncounter: () => void;\r\n    addEncounterSlot: (monster: Monster, waveID: string | null) => void;\r\n    removeEncounterSlot: (encounterSlot: EncounterSlot, waveID: string | null) => void;\r\n    addWave: () => void;\r\n    removeWave: (wave: EncounterWave) => void;\r\n    changeValue: (source: any, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, value: number) => void;\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n}\r\n\r\ninterface State {\r\n    filter: {\r\n        name: string,\r\n        challengeMin: number;\r\n        challengeMax: number;\r\n        category: string;\r\n        size: string;\r\n    };\r\n}\r\n\r\nexport default class EncounterBuilderScreen extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            filter: {\r\n                name: '',\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: 'all types',\r\n                size: 'all sizes'\r\n            }\r\n        };\r\n    }\r\n\r\n    private matchMonster(monster: Monster) {\r\n        if (monster.challenge < this.state.filter.challengeMin) {\r\n            return false;\r\n        }\r\n\r\n        if (monster.challenge > this.state.filter.challengeMax) {\r\n            return false;\r\n        }\r\n\r\n        if (this.state.filter.name !== '') {\r\n            if (!Utils.match(this.state.filter.name, monster.name)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.filter.category !== 'all types') {\r\n            if (monster.category !== this.state.filter.category) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.filter.size !== 'all sizes') {\r\n            if (monster.size !== this.state.filter.size) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private changeFilterValue(type: 'name' | 'challengeMin' | 'challengeMax' | 'category' | 'size', value: any) {\r\n        // eslint-disable-next-line\r\n        this.state.filter[type] = value;\r\n        this.setState({\r\n            filter: this.state.filter\r\n        });\r\n    }\r\n\r\n    private nudgeFilterValue(type: 'challengeMin' | 'challengeMax', delta: number) {\r\n        const value = Utils.nudgeChallenge(this.state.filter[type], delta);\r\n        this.changeFilterValue(type, value);\r\n    }\r\n\r\n    private resetFilter() {\r\n        this.setState({\r\n            filter: {\r\n                name: '',\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: 'all types',\r\n                size: 'all sizes'\r\n            }\r\n        });\r\n    }\r\n\r\n    private getMonsterCards(slots: EncounterSlot[], waveID: string | null) {\r\n        const cards = [];\r\n\r\n        slots.forEach(slot => {\r\n            const monster = this.props.getMonster(slot.monsterName, slot.monsterGroupName);\r\n            if (monster) {\r\n                cards.push(\r\n                    <div className='column' key={monster.id}>\r\n                        <MonsterCard\r\n                            combatant={monster}\r\n                            slot={slot}\r\n                            encounter={this.props.selection as Encounter}\r\n                            mode={'view encounter'}\r\n                            nudgeValue={(source, type, delta) => this.props.nudgeValue(source, type, delta)}\r\n                            removeEncounterSlot={source => this.props.removeEncounterSlot(source, waveID)}\r\n                        />\r\n                    </div>\r\n                );\r\n            } else {\r\n                const index = slots.indexOf(slot);\r\n                const error = 'unknown monster: ' + slot.monsterName + ' in group ' + slot.monsterGroupName;\r\n                cards.push(\r\n                    <div className='column' key={index}>\r\n                        <div className='card error'>\r\n                            <div className='card-content'>\r\n                                <div className='section'>\r\n                                    {error}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n        });\r\n\r\n        if (slots.length === 0) {\r\n            cards.push(\r\n                <div className='column' key='empty'>\r\n                    <Note content={<div className='section'>there are no monsters in this {waveID ? 'wave' : 'encounter'}</div>} />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return cards;\r\n    }\r\n\r\n    private getLibrarySection() {\r\n        if (!this.props.selection) {\r\n            return null;\r\n        }\r\n\r\n        const libraryCards = [];\r\n        libraryCards.push(\r\n            <div className='column' key='filter'>\r\n                <FilterCard\r\n                    filter={this.state.filter}\r\n                    changeValue={(type, value) => this.changeFilterValue(type, value)}\r\n                    nudgeValue={(type, delta) => this.nudgeFilterValue(type, delta)}\r\n                    resetFilter={() => this.resetFilter()}\r\n                />\r\n            </div>\r\n        );\r\n\r\n        const monsters: Monster[] = [];\r\n        if (this.props.selection) {\r\n            this.props.library.forEach(group => {\r\n                group.monsters.forEach(monster => {\r\n                    if (this.matchMonster(monster)) {\r\n                        monsters.push(monster);\r\n                    }\r\n                });\r\n            });\r\n            monsters.sort((a, b) => {\r\n                if (a.name < b.name) { return -1; }\r\n                if (a.name > b.name) { return 1; }\r\n                return 0;\r\n            });\r\n        }\r\n        monsters.forEach(monster => {\r\n            libraryCards.push(\r\n                <div className='column' key={monster.id}>\r\n                    <MonsterCard\r\n                        key={monster.id}\r\n                        combatant={monster}\r\n                        encounter={this.props.selection as Encounter}\r\n                        library={this.props.library}\r\n                        mode={'view encounter'}\r\n                        addEncounterSlot={(combatant, waveID) => this.props.addEncounterSlot(combatant, waveID)}\r\n                    />\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <CardGroup\r\n                heading='monster library'\r\n                content={libraryCards}\r\n                showToggle={true}\r\n            />\r\n        );\r\n    }\r\n\r\n    private showEncounter(enc: Encounter) {\r\n        return Utils.match(this.props.filter, enc.name);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let leftColumn = null;\r\n            if (this.props.selection) {\r\n                leftColumn = (\r\n                    <div>\r\n                        <EncounterInfo\r\n                            selection={this.props.selection}\r\n                            parties={this.props.parties}\r\n                            filter={this.props.filter}\r\n                            changeValue={(type, value) => this.props.changeValue(this.props.selection, type, value)}\r\n                            addWave={() => this.props.addWave()}\r\n                            removeEncounter={() => this.props.removeEncounter()}\r\n                            getMonster={(monsterName, monsterGroupName) => this.props.getMonster(monsterName, monsterGroupName)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <button onClick={() => this.props.selectEncounter(null)}>&larr; back to list</button>\r\n                    </div>\r\n                );\r\n            } else {\r\n                let listItems = this.props.encounters.filter(e => this.showEncounter(e)).map(e => {\r\n                    return (\r\n                        <EncounterListItem\r\n                            key={e.id}\r\n                            encounter={e}\r\n                            selected={e === this.props.selection}\r\n                            setSelection={encounter => this.props.selectEncounter(encounter)}\r\n                        />\r\n                    );\r\n                });\r\n                if (listItems.length === 0) {\r\n                    listItems = [(\r\n                        <Note\r\n                            key='empty'\r\n                            content={'you have not defined any encounters yet'}\r\n                        />\r\n                    )];\r\n                }\r\n\r\n                leftColumn = (\r\n                    <div>\r\n                        <button onClick={() => this.props.addEncounter()}>add a new encounter</button>\r\n                        <div className='divider' />\r\n                        {listItems}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            let encounterName;\r\n            const encounterCards: JSX.Element[] = [];\r\n            let waves: JSX.Element[] = [];\r\n\r\n            if (this.props.selection) {\r\n                encounterName = this.props.selection.name || 'unnamed encounter';\r\n\r\n                this.getMonsterCards(this.props.selection.slots, null)\r\n                    .forEach(card => encounterCards.push(card));\r\n\r\n                waves = this.props.selection.waves.map(w => {\r\n                    const waveCards = [];\r\n                    waveCards.push(\r\n                        <div className='column' key='info'>\r\n                            <WaveCard\r\n                                wave={w}\r\n                                removeWave={wave => this.props.removeWave(wave)}\r\n                                changeValue={(source, field, value) => this.props.changeValue(source, field, value)}\r\n                            />\r\n                        </div>\r\n                    );\r\n\r\n                    this.getMonsterCards(w.slots, w.id)\r\n                        .forEach(card => waveCards.push(card));\r\n\r\n                    return (\r\n                        <CardGroup\r\n                            key={w.id}\r\n                            heading={w.name || 'unnamed wave'}\r\n                            content={waveCards}\r\n                            showToggle={true}\r\n                        />\r\n                    );\r\n                });\r\n            }\r\n\r\n            let watermark;\r\n            if (!this.props.selection) {\r\n                watermark = (\r\n                    <div className='vertical-center-outer'>\r\n                        <div className='vertical-center-middle'>\r\n                            <div className='vertical-center-inner'>\r\n                                <HelpCard encounters={this.props.encounters} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='encounter-builder row collapse'>\r\n                    <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                        {leftColumn}\r\n                    </div>\r\n                    <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                        <CardGroup\r\n                            content={encounterCards}\r\n                            heading={encounterName}\r\n                            hidden={!this.props.selection}\r\n                        />\r\n                        {waves}\r\n                        {this.getLibrarySection()}\r\n                        {watermark}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface HelpCardProps {\r\n    encounters: Encounter[];\r\n}\r\n\r\nclass HelpCard extends React.Component<HelpCardProps> {\r\n    public render() {\r\n        try {\r\n            let action: JSX.Element | null = null;\r\n            if (this.props.encounters.length === 0) {\r\n                action = (\r\n                    <div className='section'>to start building an encounter, press the <b>add a new encounter</b> button</div>\r\n                );\r\n            } else {\r\n                action = (\r\n                    <div>\r\n                        <div className='section'>on the left you will see a list of encounters that you have created</div>\r\n                        <div className='section'>select an encounter from the list to add monsters to it</div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <Note\r\n                    content={\r\n                        <div>\r\n                            <div className='section'>on this page you can set up encounters</div>\r\n                            <div className='section'>\r\n                                when you have created an encounter you can add monsters to it, then gauge its difficulty for a party of pcs\r\n                            </div>\r\n                            <div className='divider'/>\r\n                            {action}\r\n                        </div>\r\n                    }\r\n                />\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n\r\ninterface EncounterInfoProps {\r\n    selection: Encounter;\r\n    parties: Party[];\r\n    filter: string;\r\n    changeValue: (field: string, value: string) => void;\r\n    addWave: () => void;\r\n    removeEncounter: () => void;\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n}\r\n\r\ninterface EncounterInfoState {\r\n    party: Party | null;\r\n}\r\n\r\nclass EncounterInfo extends React.Component<EncounterInfoProps, EncounterInfoState> {\r\n    constructor(props: EncounterInfoProps) {\r\n        super(props);\r\n        this.state = {\r\n            party: null\r\n        };\r\n    }\r\n\r\n    private selectParty(partyID: string) {\r\n        const party = this.props.parties.find(p => p.id === partyID);\r\n        this.setState({\r\n            party: party as Party\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const partyOptions = [];\r\n            if (this.props.parties) {\r\n                for (let n = 0; n !== this.props.parties.length; ++n) {\r\n                    const party = this.props.parties[n];\r\n                    partyOptions.push({\r\n                        id: party.id,\r\n                        text: party.name\r\n                    });\r\n                }\r\n            }\r\n\r\n            return (\r\n                <div>\r\n                    <div className='section'>\r\n                        <div className='subheading'>encounter name</div>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='encounter name'\r\n                            value={this.props.selection.name}\r\n                            disabled={!!this.props.filter}\r\n                            onChange={event => this.props.changeValue('name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <Dropdown\r\n                        options={partyOptions}\r\n                        placeholder='select party...'\r\n                        selectedID={this.state.party ? this.state.party.id : undefined}\r\n                        select={optionID => this.selectParty(optionID)}\r\n                    />\r\n                    <DifficultyChartPanel\r\n                        encounter={this.props.selection}\r\n                        party={this.state.party}\r\n                        getMonster={(monsterName, monsterGroupName) => this.props.getMonster(monsterName, monsterGroupName)}\r\n                    />\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.addWave()}>add a new wave</button>\r\n                        <ConfirmButton text='delete encounter' callback={() => this.props.removeEncounter()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    content: string | JSX.Element | JSX.Element[];\r\n}\r\n\r\nexport default class Readaloud extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div className='readaloud'>\r\n                    {this.props.content}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { MonsterGroup } from '../../models/monster-group';\r\n\r\nimport Readaloud from '../panels/readaloud';\r\n\r\ninterface Props {\r\n    library: MonsterGroup[];\r\n    addOpenGameContent: () => void;\r\n}\r\n\r\nexport default class HomeScreen extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            let monsters = null;\r\n            if (this.props.library.length === 0) {\r\n                monsters = (\r\n                    <div>\r\n                        <div className='divider' />\r\n                        <div className='text'>\r\n                            since your collection of monsters is empty, you might want to start by pressing the button below to add monsters from the&nbsp;\r\n                            <a href='http://dnd.wizards.com/articles/features/systems-reference-document-srd' target='_blank' rel='noopener noreferrer'>\r\n                                system reference document\r\n                            </a>\r\n                        </div>\r\n                        <div className='text'>\r\n                            <button onClick={() => this.props.addOpenGameContent()}>add monsters</button>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            const content = (\r\n                <Readaloud\r\n                    content={(\r\n                        <div>\r\n                            <div className='heading'>welcome to <b>dojo</b></div>\r\n                            <div className='divider' />\r\n                            <div className='section'>\r\n                                <b>dojo</b> is an app for dms of dungeons and dragons fifth edition\r\n                            </div>\r\n                            <div className='section'>\r\n                                with <b>dojo</b> you can:\r\n                                <ul>\r\n                                    <li>build unique, challenging monsters</li>\r\n                                    <li>create encounters of just the right difficulty for your players</li>\r\n                                    <li>design intricate tactical maps</li>\r\n                                    <li>run combat without the book-keeping</li>\r\n                                </ul>\r\n                            </div>\r\n                            {monsters}\r\n                            <div className='divider' />\r\n                            <div className='section'>\r\n                                use the buttons at the bottom of the screen to access the app's features\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                />\r\n            );\r\n\r\n            return (\r\n                <div className='home scrollable'>\r\n                    <div className='vertical-center-outer'>\r\n                        <div className='vertical-center-middle'>\r\n                            <div className='vertical-center-inner'>\r\n                                {content}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Map } from '../../models/map-folio';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    map: Map;\r\n    changeValue: (map: Map, field: string, value: string) => void;\r\n    editMap: (map: Map) => void;\r\n    removeMap: (map: Map) => void;\r\n}\r\n\r\nexport default class MapCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div className='card map'>\r\n                    <div className='heading'>\r\n                        <div className='title'>{this.props.map.name || 'unnamed map'}</div>\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='map name'\r\n                                value={this.props.map.name}\r\n                                onChange={event => this.props.changeValue(this.props.map, 'name', event.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='section centered'>\r\n                            <MapPanel\r\n                                map={this.props.map}\r\n                                mode='thumbnail'\r\n                            />\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='section'>\r\n                            <button onClick={() => this.props.editMap(this.props.map)}>edit map</button>\r\n                            <ConfirmButton text='delete map' callback={() => this.props.removeMap(this.props.map)} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { MapFolio } from '../../models/map-folio';\r\n\r\ninterface Props {\r\n    mapFolio: MapFolio;\r\n    selected: boolean;\r\n    filter: string;\r\n    setSelection: (mapFolio: MapFolio) => void;\r\n}\r\n\r\nexport default class MapFolioListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const matchFolio = Utils.match(this.props.filter, this.props.mapFolio.name);\r\n\r\n            const maps = [];\r\n            for (let n = 0; n !== this.props.mapFolio.maps.length; ++n) {\r\n                const map = this.props.mapFolio.maps[n];\r\n                const name = map.name || 'unnamed map';\r\n                if (matchFolio || Utils.match(this.props.filter, name)) {\r\n                    maps.push(<div key={map.id} className='text'>{name}</div>);\r\n                }\r\n            }\r\n            if (maps.length === 0) {\r\n                maps.push(<div key='empty' className='text'>no maps</div>);\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.mapFolio)}>\r\n                    <div className='heading'>{this.props.mapFolio.name || 'unnamed folio'}</div>\r\n                    {maps}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Map, MapFolio } from '../../models/map-folio';\r\n\r\nimport MapCard from '../cards/map-card';\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport MapFolioListItem from '../list-items/map-folio-list-item';\r\nimport CardGroup from '../panels/card-group';\r\nimport Note from '../panels/note';\r\n\r\ninterface Props {\r\n    mapFolios: MapFolio[];\r\n    selection: MapFolio | null;\r\n    filter: string;\r\n    selectMapFolio: (mapFolio: MapFolio | null) => void;\r\n    addMapFolio: () => void;\r\n    removeMapFolio: () => void;\r\n    addMap: () => void;\r\n    editMap: (map: Map) => void;\r\n    removeMap: (map: Map) => void;\r\n    changeValue: (source: {}, field: string, value: any) => void;\r\n}\r\n\r\nexport default class MapFoliosScreen extends React.Component<Props> {\r\n    private showMapFolio(folio: MapFolio) {\r\n        let result = Utils.match(this.props.filter, folio.name);\r\n\r\n        if (!result) {\r\n            folio.maps.forEach(map => {\r\n                result = Utils.match(this.props.filter, map.name) || result;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let leftColumn = null;\r\n            if (this.props.selection) {\r\n                leftColumn = (\r\n                    <div>\r\n                        <MapFolioInfo\r\n                            selection={this.props.selection}\r\n                            filter={this.props.filter}\r\n                            addMap={() => this.props.addMap()}\r\n                            removeMapFolio={() => this.props.removeMapFolio()}\r\n                            changeValue={(source, field, value) => this.props.changeValue(source, field, value)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <button onClick={() => this.props.selectMapFolio(null)}>&larr; back to list</button>\r\n                    </div>\r\n                );\r\n            } else {\r\n                let listItems = this.props.mapFolios.filter(f => this.showMapFolio(f)).map(mapFolio => {\r\n                    return (\r\n                        <MapFolioListItem\r\n                            key={mapFolio.id}\r\n                            mapFolio={mapFolio}\r\n                            filter={this.props.filter}\r\n                            selected={mapFolio === this.props.selection}\r\n                            setSelection={f => this.props.selectMapFolio(f)}\r\n                        />\r\n                    );\r\n                });\r\n                if (listItems.length === 0) {\r\n                    listItems = [(\r\n                        <Note\r\n                            key='empty'\r\n                            content={'you have not set up any tactical maps yet'}\r\n                        />\r\n                    )];\r\n                }\r\n\r\n                leftColumn = (\r\n                    <div>\r\n                        <button onClick={() => this.props.addMapFolio()}>add a new map folio</button>\r\n                        <div className='divider' />\r\n                        {listItems}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            let folio = null;\r\n            if (this.props.selection) {\r\n                const folioCards = [];\r\n\r\n                this.props.selection.maps.filter(m => Utils.match(this.props.filter, m.name)).forEach(m => {\r\n                    folioCards.push(\r\n                        <div className='column' key={m.id}>\r\n                            <MapCard\r\n                                map={m}\r\n                                editMap={map => this.props.editMap(map)}\r\n                                removeMap={map => this.props.removeMap(map)}\r\n                                changeValue={(source, type, value) => this.props.changeValue(source, type, value)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                if (folioCards.length === 0) {\r\n                    folioCards.push(\r\n                        <div className='column' key='empty'>\r\n                            <Note content={<div className='section'>there are no maps in this folio</div>} />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                folio = (\r\n                    <CardGroup\r\n                        content={folioCards}\r\n                        heading={this.props.selection.name || 'unnamed folio'}\r\n                    />\r\n                );\r\n            }\r\n\r\n            let watermark;\r\n            if (!this.props.selection) {\r\n                watermark = (\r\n                    <div className='vertical-center-outer'>\r\n                        <div className='vertical-center-middle'>\r\n                            <div className='vertical-center-inner'>\r\n                                <HelpCard mapFolios={this.props.mapFolios} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='map-builder row collapse'>\r\n                    <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                        {leftColumn}\r\n                    </div>\r\n                    <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                        {folio}\r\n                        {watermark}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface HelpCardProps {\r\n    mapFolios: MapFolio[];\r\n}\r\n\r\nclass HelpCard extends React.Component<HelpCardProps> {\r\n    public render() {\r\n        try {\r\n            let action: JSX.Element | null = null;\r\n            if (this.props.mapFolios.length === 0) {\r\n                action = (\r\n                    <div className='section'>to start a new folio, press the <b>add a new map folio</b> button</div>\r\n                );\r\n            } else {\r\n                action = (\r\n                    <div>\r\n                        <div className='section'>on the left you will see a list of map folios</div>\r\n                        <div className='section'>select a folio from the list to see the maps it contains</div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <Note\r\n                    content={\r\n                        <div>\r\n                            <div className='section'>on this page you can set up folios containing tactical maps</div>\r\n                            <div className='section'>when you have created a map you can use it in encounters</div>\r\n                            <div className='divider'/>\r\n                            {action}\r\n                        </div>\r\n                    }\r\n                />\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n\r\ninterface MapFolioInfoProps {\r\n    selection: MapFolio;\r\n    filter: string | null;\r\n    changeValue: (source: MapFolio, field: string, value: string) => void;\r\n    addMap: () => void;\r\n    removeMapFolio: () => void;\r\n}\r\n\r\nclass MapFolioInfo extends React.Component<MapFolioInfoProps> {\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div>\r\n                    <div className='section'>\r\n                        <div className='subheading'>map folio name</div>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='map folio name'\r\n                            value={this.props.selection.name}\r\n                            disabled={!!this.props.filter}\r\n                            onChange={event => this.props.changeValue(this.props.selection, 'name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.addMap()}>add a new map</button>\r\n                        <ConfirmButton text='delete folio' callback={() => this.props.removeMapFolio()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { MonsterGroup } from '../../models/monster-group';\r\n\r\ninterface Props {\r\n    group: MonsterGroup;\r\n    selected: boolean;\r\n    filter: string;\r\n    setSelection: (group: MonsterGroup) => void;\r\n}\r\n\r\nexport default class MonsterGroupListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const matchGroup = Utils.match(this.props.filter, this.props.group.name);\r\n\r\n            const monsters = [];\r\n            for (let n = 0; n !== this.props.group.monsters.length; ++n) {\r\n                const monster = this.props.group.monsters[n];\r\n                const name = monster.name || 'unnamed monster';\r\n                if (matchGroup || Utils.match(this.props.filter, name)) {\r\n                    monsters.push(<div key={monster.id} className='text'>{name}</div>);\r\n                }\r\n            }\r\n            if (monsters.length === 0) {\r\n                monsters.push(<div key='empty' className='text'>no monsters</div>);\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.group)}>\r\n                    <div className='heading'>{this.props.group.name || 'unnamed group'}</div>\r\n                    {monsters}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Monster, MonsterGroup } from '../../models/monster-group';\r\n\r\nimport MonsterCard from '../cards/monster-card';\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport MonsterGroupListItem from '../list-items/monster-group-list-item';\r\nimport CardGroup from '../panels/card-group';\r\nimport Note from '../panels/note';\r\n\r\ninterface Props {\r\n    library: MonsterGroup[];\r\n    selection: MonsterGroup | null;\r\n    filter: string;\r\n    selectMonsterGroup: (group: MonsterGroup | null) => void;\r\n    addMonsterGroup: () => void;\r\n    removeMonsterGroup: () => void;\r\n    addMonster: () => void;\r\n    generateMonster: () => void;\r\n    removeMonster: (monster: Monster) => void;\r\n    editMonster: (monster: Monster) => void;\r\n    cloneMonster: (monster: Monster, name: string) => void;\r\n    sortMonsters: () => void;\r\n    moveToGroup: (monster: Monster, groupID: string) => void;\r\n    changeValue: (source: any, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, value: number) => void;\r\n}\r\n\r\nexport default class MonsterLibraryScreen extends React.Component<Props> {\r\n    private showMonsterGroup(group: MonsterGroup) {\r\n        let result = Utils.match(this.props.filter, group.name);\r\n\r\n        if (!result) {\r\n            group.monsters.forEach(monster => {\r\n                result = Utils.match(this.props.filter, monster.name) || result;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let leftColumn = null;\r\n            if (this.props.selection) {\r\n                leftColumn = (\r\n                    <div>\r\n                        <MonsterInfo\r\n                            selection={this.props.selection}\r\n                            filter={this.props.filter}\r\n                            addMonster={() => this.props.addMonster()}\r\n                            generateMonster={() => this.props.generateMonster()}\r\n                            sortMonsters={() => this.props.sortMonsters()}\r\n                            changeValue={(type, value) => this.props.changeValue(this.props.selection, type, value)}\r\n                            removeMonsterGroup={() => this.props.removeMonsterGroup()}\r\n                        />\r\n                        <div className='divider' />\r\n                        <button onClick={() => this.props.selectMonsterGroup(null)}>&larr; back to list</button>\r\n                    </div>\r\n                );\r\n            } else {\r\n                let listItems = this.props.library.filter(group => this.showMonsterGroup(group)).map(group => {\r\n                    return (\r\n                        <MonsterGroupListItem\r\n                            key={group.id}\r\n                            group={group}\r\n                            filter={this.props.filter}\r\n                            selected={group === this.props.selection}\r\n                            setSelection={grp => this.props.selectMonsterGroup(grp)}\r\n                        />\r\n                    );\r\n                });\r\n                if (listItems.length === 0) {\r\n                    listItems = [(\r\n                        <Note\r\n                            key='empty'\r\n                            content={'you do not have any monsters in your library'}\r\n                        />\r\n                    )];\r\n                }\r\n\r\n                leftColumn = (\r\n                    <div>\r\n                        <button onClick={() => this.props.addMonsterGroup()}>add a new monster group</button>\r\n                        <div className='divider' />\r\n                        {listItems}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            const cards: JSX.Element[] = [];\r\n\r\n            if (this.props.selection) {\r\n                const monsters = this.props.selection.monsters.filter(monster => {\r\n                    return Utils.match(this.props.filter, monster.name);\r\n                });\r\n\r\n                if (monsters.length !== 0) {\r\n                    monsters.forEach(m => {\r\n                        cards.push(\r\n                            <div className='column' key={m.id}>\r\n                                <MonsterCard\r\n                                    combatant={m}\r\n                                    mode={'view editable'}\r\n                                    library={this.props.library}\r\n                                    changeValue={(source, type, value) => this.props.changeValue(source, type, value)}\r\n                                    nudgeValue={(source, type, delta) => this.props.nudgeValue(source, type, delta)}\r\n                                    moveToGroup={(monster, groupID) => this.props.moveToGroup(monster, groupID)}\r\n                                    removeMonster={monster => this.props.removeMonster(monster)}\r\n                                    editMonster={monster => this.props.editMonster(monster)}\r\n                                    cloneMonster={(monster, monsterName) => this.props.cloneMonster(monster, monsterName)}\r\n                                />\r\n                            </div>\r\n                        );\r\n                    });\r\n                } else {\r\n                    cards.push(\r\n                        <div className='column' key='empty'>\r\n                            <Note content={<div className='section'>there are no monsters in this group</div>} />\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n\r\n            let name;\r\n            if (this.props.selection) {\r\n                name = this.props.selection.name;\r\n                if (!name) {\r\n                    name = 'unnamed group';\r\n                }\r\n            }\r\n\r\n            let watermark;\r\n            if (!this.props.selection) {\r\n                watermark = (\r\n                    <div className='vertical-center-outer'>\r\n                        <div className='vertical-center-middle'>\r\n                            <div className='vertical-center-inner'>\r\n                                <HelpCard library={this.props.library} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='monster-library row collapse'>\r\n                    <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                        {leftColumn}\r\n                    </div>\r\n                    <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                        <CardGroup\r\n                            content={cards}\r\n                            heading={name}\r\n                            hidden={!this.props.selection}\r\n                        />\r\n                        {watermark}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface HelpCardProps {\r\n    library: MonsterGroup[];\r\n}\r\n\r\nclass HelpCard extends React.Component<HelpCardProps> {\r\n    public render() {\r\n        let action: JSX.Element | null = null;\r\n        if (this.props.library.length === 0) {\r\n            action = (\r\n                <div className='section'>to start adding monsters, press the <b>add a new monster group</b> button</div>\r\n            );\r\n        } else {\r\n            action = (\r\n                <div>\r\n                    <div className='section'>on the left you will see a list of monster groups</div>\r\n                    <div className='section'>select a monster group from the list to see stat blocks for monsters in that group</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Note\r\n                content={\r\n                    <div>\r\n                        <div className='section'>you can maintain your menagerie of monsters here</div>\r\n                        <div className='divider'/>\r\n                        {action}\r\n                    </div>\r\n                }\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\ninterface MonsterInfoProps {\r\n    selection: MonsterGroup;\r\n    filter: string | null;\r\n    changeValue: (field: string, value: string) => void;\r\n    addMonster: () => void;\r\n    generateMonster: () => void;\r\n    sortMonsters: () => void;\r\n    removeMonsterGroup: () => void;\r\n}\r\n\r\nclass MonsterInfo extends React.Component<MonsterInfoProps> {\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div>\r\n                    <div className='section'>\r\n                        <div className='subheading'>monster group name</div>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='monster group name'\r\n                            value={this.props.selection.name}\r\n                            disabled={!!this.props.filter}\r\n                            onChange={event => this.props.changeValue('name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.addMonster()}>add a new blank monster</button>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.generateMonster()}>generate a random monster</button>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.sortMonsters()}>sort monsters</button>\r\n                        <ConfirmButton text='delete group' callback={() => this.props.removeMonsterGroup()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Party } from '../../models/party';\r\n\r\ninterface Props {\r\n    party: Party;\r\n    selected: boolean;\r\n    filter: string;\r\n    setSelection: (party: Party) => void;\r\n}\r\n\r\nexport default class PartyListItem extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const matchParty = Utils.match(this.props.filter, this.props.party.name);\r\n\r\n            const pcs = [];\r\n            for (let n = 0; n !== this.props.party.pcs.length; ++n) {\r\n                const pc = this.props.party.pcs[n];\r\n                let name = pc.name || 'unnamed pc';\r\n                if (pc.player) {\r\n                    name += ' (' + pc.player + ')';\r\n                }\r\n                if (matchParty || Utils.match(this.props.filter, name)) {\r\n                    pcs.push(<div key={pc.id} className='text'>{name}</div>);\r\n                }\r\n            }\r\n            if (pcs.length === 0) {\r\n                pcs.push(<div key='empty' className='text'>no pcs</div>);\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.selected ? 'list-item selected' : 'list-item'} onClick={() => this.props.setSelection(this.props.party)}>\r\n                    <div className='heading'>{this.props.party.name || 'unnamed party'}</div>\r\n                    {pcs}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Party, PC } from '../../models/party';\r\n\r\nimport PCCard from '../cards/pc-card';\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport PartyListItem from '../list-items/party-list-item';\r\nimport CardGroup from '../panels/card-group';\r\nimport Note from '../panels/note';\r\n\r\ninterface Props {\r\n    parties: Party[];\r\n    selection: Party | null;\r\n    filter: string;\r\n    selectParty: (party: Party | null) => void;\r\n    addParty: () => void;\r\n    removeParty: () => void;\r\n    addPC: () => void;\r\n    editPC: (pc: PC) => void;\r\n    removePC: (pc: PC) => void;\r\n    sortPCs: () => void;\r\n    changeValue: (source: any, field: string, value: any) => void;\r\n    nudgeValue: (source: any, field: string, value: number) => void;\r\n}\r\n\r\nexport default class PartiesScreen extends React.Component<Props> {\r\n    private showParty(party: Party) {\r\n        let result = Utils.match(this.props.filter, party.name);\r\n\r\n        if (!result) {\r\n            party.pcs.forEach(pc => {\r\n                result = Utils.match(this.props.filter, pc.name) || result;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let leftColumn = null;\r\n            if (this.props.selection) {\r\n                leftColumn = (\r\n                    <div>\r\n                        <PartyInfo\r\n                            selection={this.props.selection}\r\n                            filter={this.props.filter}\r\n                            addPC={() => this.props.addPC()}\r\n                            sortPCs={() => this.props.sortPCs()}\r\n                            changeValue={(type, value) => this.props.changeValue(this.props.selection, type, value)}\r\n                            removeParty={() => this.props.removeParty()}\r\n                        />\r\n                        <div className='divider' />\r\n                        <button onClick={() => this.props.selectParty(null)}>&larr; back to list</button>\r\n                    </div>\r\n                );\r\n            } else {\r\n                let listItems = this.props.parties.filter(p => this.showParty(p)).map(p => {\r\n                    return (\r\n                        <PartyListItem\r\n                            key={p.id}\r\n                            party={p}\r\n                            filter={this.props.filter}\r\n                            selected={p === this.props.selection}\r\n                            setSelection={party => this.props.selectParty(party)}\r\n                        />\r\n                    );\r\n                });\r\n                if (listItems.length === 0) {\r\n                    listItems = [(\r\n                        <Note\r\n                            key='empty'\r\n                            content={'you have not set up any parties yet'}\r\n                        />\r\n                    )];\r\n                }\r\n\r\n                leftColumn = (\r\n                    <div>\r\n                        <button onClick={() => this.props.addParty()}>add a new party</button>\r\n                        <div className='divider' />\r\n                        {listItems}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            const activeCards: JSX.Element[] = [];\r\n            const inactiveCards: JSX.Element[] = [];\r\n\r\n            if (this.props.selection) {\r\n                const pcs = this.props.selection.pcs.filter(pc => {\r\n                    return Utils.match(this.props.filter, pc.name);\r\n                });\r\n\r\n                const activePCs = pcs.filter(pc => pc.active);\r\n                activePCs.forEach(activePC => {\r\n                    activeCards.push(\r\n                        <div className='column' key={activePC.id}>\r\n                            <PCCard\r\n                                combatant={activePC}\r\n                                mode={'edit'}\r\n                                changeValue={(pc, type, value) => this.props.changeValue(pc, type, value)}\r\n                                nudgeValue={(pc, type, delta) => this.props.nudgeValue(pc, type, delta)}\r\n                                editPC={pc => this.props.editPC(pc)}\r\n                                removePC={pc => this.props.removePC(pc)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                const inactivePCs = pcs.filter(pc => !pc.active);\r\n                inactivePCs.forEach(inactivePC => {\r\n                    inactiveCards.push(\r\n                        <div className='column' key={inactivePC.id}>\r\n                            <PCCard\r\n                                combatant={inactivePC}\r\n                                mode={'edit'}\r\n                                changeValue={(pc, type, value) => this.props.changeValue(pc, type, value)}\r\n                                nudgeValue={(pc, type, delta) => this.props.nudgeValue(pc, type, delta)}\r\n                                editPC={pc => this.props.editPC(pc)}\r\n                                removePC={pc => this.props.removePC(pc)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                if (activePCs.length === 0) {\r\n                    activeCards.push(\r\n                        <div className='column' key='empty'>\r\n                            <Note content={<div className='section'>there are no pcs in this party</div>} />\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n\r\n            let name;\r\n            if (this.props.selection) {\r\n                name = this.props.selection.name || 'unnamed party';\r\n            }\r\n\r\n            let watermark;\r\n            if (!this.props.selection) {\r\n                watermark = (\r\n                    <div className='vertical-center-outer'>\r\n                        <div className='vertical-center-middle'>\r\n                            <div className='vertical-center-inner'>\r\n                                <HelpCard parties={this.props.parties} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='parties row collapse'>\r\n                    <div className='columns small-4 medium-4 large-3 scrollable list-column'>\r\n                        {leftColumn}\r\n                    </div>\r\n                    <div className='columns small-8 medium-8 large-9 scrollable'>\r\n                        <CardGroup\r\n                            content={activeCards}\r\n                            heading={name}\r\n                            hidden={!this.props.selection}\r\n                        />\r\n                        <CardGroup\r\n                            content={inactiveCards}\r\n                            heading='inactive pcs'\r\n                            hidden={inactiveCards.length === 0}\r\n                        />\r\n                        {watermark}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface HelpCardProps {\r\n    parties: Party[];\r\n}\r\n\r\nclass HelpCard extends React.Component<HelpCardProps> {\r\n    public render() {\r\n        try {\r\n            let action: JSX.Element | null = null;\r\n            if (this.props.parties.length === 0) {\r\n                action = (\r\n                    <div className='section'>to start adding a party, press the <b>add a new party</b> button</div>\r\n                );\r\n            } else {\r\n                action = (\r\n                    <div>\r\n                        <div className='section'>on the left you will see a list of parties that you have created</div>\r\n                        <div className='section'>select a party from the list to see pc details</div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <Note\r\n                    content={\r\n                        <div>\r\n                            <div className='section'>this page is where you can tell dojo all about your pcs</div>\r\n                            <div className='section'>you can add a party for each of your gaming groups</div>\r\n                            <div className='divider'/>\r\n                            {action}\r\n                        </div>\r\n                    }\r\n                />\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n}\r\n\r\ninterface PartyInfoProps {\r\n    selection: Party;\r\n    filter: string | null;\r\n    changeValue: (field: string, value: string) => void;\r\n    addPC: () => void;\r\n    sortPCs: () => void;\r\n    removeParty: () => void;\r\n}\r\n\r\nclass PartyInfo extends React.Component<PartyInfoProps> {\r\n    public render() {\r\n        try {\r\n            const activePCs = this.props.selection.pcs.filter(pc => pc.active);\r\n\r\n            let summary = null;\r\n\r\n            if (activePCs.length !== 0) {\r\n\r\n                let languages = '';\r\n                let insightSummary = '-';\r\n                let investigationSummary = '-';\r\n                let perceptionSummary = '-';\r\n\r\n                languages = activePCs\r\n                    .map(pc => pc.languages)\r\n                    .join(', ')\r\n                    .split(/[ ,;]+/)\r\n                    .reduce((array: string[], value) => {\r\n                        if (array.indexOf(value) === -1) {\r\n                            array.push(value);\r\n                        }\r\n                        return array;\r\n                    }, [])\r\n                    .sort((a, b) => {\r\n                        if (a === 'Common') {\r\n                            return -1;\r\n                        }\r\n                        if (b === 'Common') {\r\n                            return 1;\r\n                        }\r\n                        return a.localeCompare(b);\r\n                    })\r\n                    .join(', ');\r\n\r\n                const insight: { min: number | null, max: number | null } = { min: null, max: null };\r\n                const invest: { min: number | null, max: number | null } = { min: null, max: null };\r\n                const percep: { min: number | null, max: number | null } = { min: null, max: null };\r\n\r\n                activePCs.forEach(pc => {\r\n                    insight.min = insight.min === null ? pc.passiveInsight : Math.min(insight.min, pc.passiveInsight);\r\n                    insight.max = insight.max === null ? pc.passiveInsight : Math.max(insight.max, pc.passiveInsight);\r\n                    invest.min = invest.min === null ? pc.passiveInvestigation : Math.min(invest.min, pc.passiveInvestigation);\r\n                    invest.max = invest.max === null ? pc.passiveInvestigation : Math.max(invest.max, pc.passiveInvestigation);\r\n                    percep.min = percep.min === null ? pc.passivePerception : Math.min(percep.min, pc.passivePerception);\r\n                    percep.max = percep.max === null ? pc.passivePerception : Math.max(percep.max, pc.passivePerception);\r\n                });\r\n\r\n                insightSummary = insight.min === insight.max ? (insight.min as number).toString() : insight.min + ' - ' + insight.max;\r\n                investigationSummary = invest.min === invest.max ? (invest.min as number).toString() : invest.min + ' - ' + invest.max;\r\n                perceptionSummary = percep.min === percep.max ? (percep.min as number).toString() : percep.min + ' - ' + percep.max;\r\n\r\n                summary = (\r\n                    <div>\r\n                        <div className='section' style={{ display: languages !== '' ? 'block' : 'none' }}>\r\n                            <div className='subheading'>party known languages</div>\r\n                        </div>\r\n                        <div className='section'>\r\n                            {languages}\r\n                        </div>\r\n                        <div className='section'>\r\n                            <div className='subheading'>party passive skills</div>\r\n                        </div>\r\n                        <div className='table'>\r\n                            <div>\r\n                                <div className='cell three'><b>insight</b></div>\r\n                                <div className='cell three'><b>invest.</b></div>\r\n                                <div className='cell three'><b>percep.</b></div>\r\n                            </div>\r\n                            <div>\r\n                                <div className='cell three'>{insightSummary}</div>\r\n                                <div className='cell three'>{investigationSummary}</div>\r\n                                <div className='cell three'>{perceptionSummary}</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div>\r\n                    <div className='section'>\r\n                        <div className='subheading'>party name</div>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='party name'\r\n                            value={this.props.selection.name}\r\n                            disabled={!!this.props.filter}\r\n                            onChange={event => this.props.changeValue('name', event.target.value)}\r\n                        />\r\n                    </div>\r\n                    {summary}\r\n                    <div className='divider' />\r\n                    <div className='section'>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.addPC()}>add a new pc</button>\r\n                        <button className={this.props.filter ? 'disabled' : ''} onClick={() => this.props.sortPCs()}>sort pcs</button>\r\n                        <ConfirmButton text='delete party' callback={() => this.props.removeParty()} />\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    options: { id: string; text: string; disabled?: boolean }[];\r\n    selectedID: string | null;\r\n    select: (optionID: string) => void;\r\n    tabs: boolean;\r\n    disabled: boolean;\r\n    itemsPerRow: number;\r\n}\r\n\r\nexport default class Selector extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        tabs: false,\r\n        disabled: false,\r\n        itemsPerRow: null\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            let style = this.props.tabs ? 'selector tabs' : 'selector radio';\r\n            if (this.props.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            const itemsPerRow = this.props.itemsPerRow ? this.props.itemsPerRow : this.props.options.length;\r\n            const rowCount = Math.ceil(this.props.options.length / itemsPerRow);\r\n            const rowContents: JSX.Element[][] = [];\r\n            for (let n = 0; n !== rowCount; ++n) {\r\n                rowContents.push([]);\r\n            }\r\n\r\n            this.props.options.forEach(option => {\r\n                const index = this.props.options.indexOf(option);\r\n                const rowIndex = Math.floor(index / itemsPerRow);\r\n                const row = rowContents[rowIndex];\r\n                row.push(\r\n                    <SelectorOption\r\n                        key={option.id}\r\n                        option={option}\r\n                        selected={option.id === this.props.selectedID}\r\n                        count={itemsPerRow}\r\n                        select={(optionID: string) => this.props.select(optionID)}\r\n                    />\r\n                );\r\n            });\r\n\r\n            const rowSections = rowContents.map(row => {\r\n                const index = rowContents.indexOf(row);\r\n                return <div key={index}>{row}</div>;\r\n            });\r\n\r\n            return (\r\n                <div className={style}>\r\n                    {rowSections}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface SelectorOptionInterface {\r\n    option: { id: string; text: string; disabled?: boolean };\r\n    selected: boolean;\r\n    count: number;\r\n    select: (optionID: string) => void;\r\n}\r\n\r\nclass SelectorOption extends React.Component<SelectorOptionInterface> {\r\n    private click(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        if (!this.props.option.disabled) {\r\n            this.props.select(this.props.option.id);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const width = 'calc(((100% - 1px) / ' + this.props.count + ') - 2px )';\r\n\r\n            let style = 'option';\r\n            if (this.props.selected) {\r\n                style += ' selected';\r\n            }\r\n            if (this.props.option.disabled) {\r\n                style += ' disabled';\r\n            }\r\n\r\n            return (\r\n                <div key={this.props.option.id} className={style} style={{ width: width }} title={this.props.option.text} onClick={e => this.click(e)}>\r\n                    {this.props.option.text}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport Selector from '../controls/selector';\r\nimport Spin from '../controls/spin';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    //\r\n}\r\n\r\ninterface State {\r\n    dice: string;\r\n    count: number;\r\n    rolls: number[] | null;\r\n    result: number | null;\r\n}\r\n\r\nexport default class DieRollerModule extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            dice: '20',\r\n            count: 1,\r\n            rolls: null,\r\n            result: null\r\n        };\r\n    }\r\n\r\n    private setDice(dice: string) {\r\n        this.setState({\r\n            dice: dice\r\n        });\r\n    }\r\n\r\n    private nudgeCount(delta: number) {\r\n        this.setState({\r\n            count: Math.max(1, this.state.count + delta)\r\n        });\r\n    }\r\n\r\n    private roll() {\r\n        const sides = parseInt(this.state.dice, 10);\r\n\r\n        const rolls: number[] = [];\r\n        for (let n = 0; n !== this.state.count; ++n) {\r\n            rolls.push(Utils.dieRoll(sides));\r\n        }\r\n        rolls.sort((a, b) => a - b);\r\n\r\n        let result = 0;\r\n        rolls.forEach(roll => result += roll);\r\n\r\n        this.setState({\r\n            rolls: rolls,\r\n            result: result\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        const options = [\r\n            {\r\n                id: '4',\r\n                text: 'd4'\r\n            },\r\n            {\r\n                id: '6',\r\n                text: 'd6'\r\n            },\r\n            {\r\n                id: '8',\r\n                text: 'd8'\r\n            },\r\n            {\r\n                id: '10',\r\n                text: 'd10'\r\n            },\r\n            {\r\n                id: '12',\r\n                text: 'd12'\r\n            },\r\n            {\r\n                id: '20',\r\n                text: 'd20'\r\n            },\r\n            {\r\n                id: '100',\r\n                text: 'd100'\r\n            }\r\n        ];\r\n\r\n        let rollsSection = null;\r\n        if (this.state.rolls !== null) {\r\n            rollsSection = (\r\n                <div className='section die-rolls'>{this.state.rolls.join(', ')}</div>\r\n            );\r\n        }\r\n\r\n        let resultSection = null;\r\n        if (this.state.result !== null) {\r\n            resultSection = (\r\n                <div className='section die-result'>{this.state.result}</div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className='die-roller'>\r\n                <div className='subheading'>die type</div>\r\n                <Selector\r\n                    options={options}\r\n                    selectedID={this.state.dice}\r\n                    select={optionID => this.setDice(optionID)}\r\n                />\r\n                <div className='subheading'>number to roll</div>\r\n                <Spin\r\n                    source={this.state}\r\n                    name='count'\r\n                    display={count => count + 'd' + this.state.dice}\r\n                    nudgeValue={delta => this.nudgeCount(delta)}\r\n                />\r\n                <div className='divider' />\r\n                <button onClick={() => this.roll()}>roll dice</button>\r\n                {rollsSection}\r\n                {resultSection}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","export default class Speech {\r\n    public static async say(text: string, languages: string[]) {\r\n        // If we're  already saying something, stop it\r\n        window.speechSynthesis.cancel();\r\n\r\n        const utterance = new SpeechSynthesisUtterance(text);\r\n        utterance.voice = await Speech.chooseVoice(languages);\r\n        utterance.rate = Speech.randomValue(0.5, 1.5);\r\n        utterance.pitch = Speech.randomValue(0.5, 1.5);\r\n\r\n        window.speechSynthesis.speak(utterance);\r\n    }\r\n\r\n    private static async chooseVoice(languages: string[]) {\r\n        const voices = await Speech.getVoices();\r\n\r\n        // Get language codes for the selected languages\r\n        const langCodes = languages.map(lang => Speech.getLanguageCode(lang));\r\n\r\n        // Filter voice list by these language codes\r\n        let candidates = voices.filter(v => langCodes.includes(v.lang.substr(0, 2)));\r\n        if (candidates.length === 0) {\r\n            candidates = voices.filter(v => v.default);\r\n        }\r\n        if (candidates.length === 0) {\r\n            candidates = voices;\r\n        }\r\n\r\n        const index = Math.floor(Math.random() * candidates.length);\r\n        return candidates[index];\r\n    }\r\n\r\n    private static getVoices() {\r\n        return new Promise<SpeechSynthesisVoice[]>(resolve => {\r\n            let list = window.speechSynthesis.getVoices();\r\n            if (list.length > 0) {\r\n                resolve(list);\r\n                return;\r\n            }\r\n            speechSynthesis.onvoiceschanged = () => {\r\n                list = window.speechSynthesis.getVoices();\r\n                resolve(list);\r\n            };\r\n        });\r\n    }\r\n\r\n    private static getLanguageCode(language: string) {\r\n        switch (language) {\r\n            case 'armenian':\r\n                return 'hy';\r\n            case 'basque':\r\n                return 'eu';\r\n            case 'bulgarian':\r\n                return 'bg';\r\n            case 'chichewa':\r\n                return 'ny';\r\n            case 'chinese':\r\n                return 'zh';\r\n            case 'croatian':\r\n                return 'hr';\r\n            case 'czech':\r\n                return 'cs';\r\n            case 'dutch':\r\n                return 'nl';\r\n            case 'german':\r\n                return 'de';\r\n            case 'greek':\r\n                return 'el';\r\n            case 'icelandic':\r\n                return 'is';\r\n            case 'irish':\r\n                return 'ga';\r\n            case 'kannada':\r\n                return 'kn';\r\n            case 'kazakh':\r\n                return 'kk';\r\n            case 'latvian':\r\n                return 'lv';\r\n            case 'lithuanian':\r\n                return 'lt';\r\n            case 'macedonian':\r\n                return 'mk';\r\n            case 'malay':\r\n                return 'ms';\r\n            case 'maltese':\r\n                return 'mt';\r\n            case 'maori':\r\n                return 'mi';\r\n            case 'polish':\r\n                return 'pl';\r\n            case 'portuguese':\r\n                return 'pt';\r\n            case 'punjabi':\r\n                return 'pa';\r\n            case 'samoan':\r\n                return 'sm';\r\n            case 'serbian':\r\n                return 'sr';\r\n            case 'shona':\r\n                return 'sn';\r\n            case 'spanish':\r\n                return 'es';\r\n            case 'swedish':\r\n                return 'sv';\r\n            case 'turkish':\r\n                return 'tr';\r\n            case 'welsh':\r\n                return 'cy';\r\n            default:\r\n                return language.substr(0, 2);\r\n        }\r\n    }\r\n\r\n    private static randomValue(min: number, max: number) {\r\n        const x = (Math.random() + Math.random() + Math.random()) / 3;\r\n        const range = max - min;\r\n        return min + (x * range);\r\n    }\r\n}\r\n","import Utils from './utils';\r\n\r\ninterface ModelLine {\r\n    prev: string;\r\n    freq: ModelChar[];\r\n}\r\n\r\ninterface ModelChar {\r\n    char: string;\r\n    count: number;\r\n}\r\n\r\nexport default class TextGenerator {\r\n\r\n    private static model: ModelLine[] = [];\r\n    private static maxLength: number = 0;\r\n\r\n    public static initModel(sources: string[]) {\r\n        const model: ModelLine[] = [];\r\n        let maxLength: number = 0;\r\n\r\n        sources.forEach(source => {\r\n            const lines = source.split(/\\r?\\n/);\r\n            lines.forEach(line => {\r\n                if (line) {\r\n                    TextGenerator.addLineToModel(line, model);\r\n                    maxLength = Math.max(maxLength, line.length);\r\n                }\r\n            });\r\n        });\r\n\r\n        TextGenerator.model = model;\r\n        TextGenerator.maxLength = maxLength;\r\n    }\r\n\r\n    private static addLineToModel(line: string, model: ModelLine[]) {\r\n        line = String.fromCharCode(0, 1) + line + String.fromCharCode(2);\r\n\r\n        for (let index = 2; index !== line.length; ++index) {\r\n            const prev = line.substr(index - 2, 2);\r\n            const char = line.substr(index, 1);\r\n\r\n            let item = model.find(x => x.prev === prev);\r\n            if (!item) {\r\n                item = {\r\n                    prev: prev,\r\n                    freq: []\r\n                };\r\n                model.push(item);\r\n            }\r\n\r\n            let freq = item.freq.find(x => x.char === char);\r\n            if (!freq) {\r\n                freq = {\r\n                    char: char,\r\n                    count: 0\r\n                };\r\n                item.freq.push(freq);\r\n            }\r\n\r\n            freq.count += 1;\r\n        }\r\n    }\r\n\r\n    public static generate(requiredResults: number): { line: string, fit: number }[] {\r\n        const lines: { line: string, fit: number }[] = [];\r\n        const allowedFailures = 100;\r\n        let failures = 0;\r\n\r\n        while ((lines.length < requiredResults) && (failures < allowedFailures)) {\r\n            const line = TextGenerator.extractLine();\r\n            if (line && !lines.map(l => l.line).includes(line) && line.length <= TextGenerator.maxLength) {\r\n                const fit = TextGenerator.fit(line);\r\n                lines.push({ line, fit });\r\n            } else {\r\n                failures += 1;\r\n            }\r\n        }\r\n\r\n        return lines;\r\n    }\r\n\r\n    private static extractLine() {\r\n        let line = String.fromCharCode(0, 1);\r\n\r\n        while (true) {\r\n            const prev = line.substr(line.length - 2, 2);\r\n\r\n            const item = TextGenerator.model.find(x => x.prev === prev);\r\n            if (item) {\r\n                let candidates = '';\r\n                item.freq.forEach(freq => {\r\n                    candidates += freq.char.repeat(freq.count);\r\n                });\r\n\r\n                const index = Math.floor(Math.random() * candidates.length);\r\n                let char = candidates[index];\r\n                if (char === String.fromCharCode(2)) {\r\n                    line = line.substr(2);\r\n                    return line;\r\n                } else {\r\n                    if (Utils.dieRoll() === 1) {\r\n                        // TODO: Mutate choice\r\n                        const groups = ['bdg', 'ptk', 'sz', 'aeiouy', 'lr', 'ckq', 'vf'];\r\n                        groups.forEach(g => {\r\n                            if (g.includes(char)) {\r\n                                const n = Math.floor(Math.random() * g.length);\r\n                                char = g[n];\r\n                            }\r\n                        });\r\n                    }\r\n                    line += char;\r\n                }\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n\r\n    private static fit(text: string): number {\r\n        text = String.fromCharCode(0, 1) + text + String.fromCharCode(2);\r\n\r\n        const values: number[] = [];\r\n        for (let n = 2; n !== text.length; ++n) {\r\n            const prev = text.substr(n - 2, 2);\r\n            const ch = text[n];\r\n\r\n            const line = TextGenerator.model.find(m => m.prev === prev);\r\n            if (line) {\r\n                const mc = line.freq.find(f => f.char === ch);\r\n                if (mc) {\r\n                    const maxCount = line.freq.reduce((max, value) => Math.max(max, value.count), 0);\r\n                    const fit = mc.count / maxCount;\r\n                    values.push(fit);\r\n                } else {\r\n                    values.push(0);\r\n                }\r\n            }\r\n        }\r\n\r\n        return values.reduce((sum, value) => sum + value, 0) / values.length;\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Speech from '../../utils/speech';\r\nimport TextGenerator from '../../utils/text-generation';\r\n\r\nimport Checkbox from '../controls/checkbox';\r\nimport ControlRow from '../controls/control-row';\r\nimport Expander from '../controls/expander';\r\nimport Selector from '../controls/selector';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    //\r\n}\r\n\r\ninterface State {\r\n    sources: { [id: string]: string; };\r\n    output: string[];\r\n}\r\n\r\ninterface Preset {\r\n    name: string;\r\n    languages: string[];\r\n}\r\n\r\nexport default class LanguageModule extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            sources: {},\r\n            output: []\r\n        };\r\n    }\r\n\r\n    private getLanguages(): string[] {\r\n        // Note: When adding a language to this list, also check the Speech.getLanguageCode() method\r\n        return [\r\n            'afrikaans',\r\n            'amharic',\r\n            'armenian',\r\n            'basque',\r\n            'belarusian',\r\n            'bulgarian',\r\n            'chichewa',\r\n            'chinese',\r\n            'croatian',\r\n            'czech',\r\n            'danish',\r\n            'dutch',\r\n            'english',\r\n            'finnish',\r\n            'french',\r\n            'german',\r\n            'greek',\r\n            'hawaiian',\r\n            'hindi',\r\n            'hungarian',\r\n            'icelandic',\r\n            'irish',\r\n            'italian',\r\n            'japanese',\r\n            'kannada',\r\n            'kazakh',\r\n            'korean',\r\n            'kyrgyz',\r\n            'latvian',\r\n            'lithuanian',\r\n            'macedonian',\r\n            'malay',\r\n            'maltese',\r\n            'maori',\r\n            'myanmar',\r\n            'nepali',\r\n            'norwegian',\r\n            'polish',\r\n            'portuguese',\r\n            'punjabi',\r\n            'romanian',\r\n            'russian',\r\n            'samoan',\r\n            'serbian',\r\n            'shona',\r\n            'somali',\r\n            'spanish',\r\n            'swahili',\r\n            'swedish',\r\n            'thai',\r\n            'turkish',\r\n            'welsh',\r\n            'yiddish',\r\n            'zulu'\r\n        ];\r\n    }\r\n\r\n    private getPresets(): Preset[] {\r\n        return [\r\n            {\r\n                name: 'draconic',\r\n                languages: ['armenian', 'irish', 'maltese']\r\n            },\r\n            {\r\n                name: 'dwarvish',\r\n                languages: ['czech', 'german', 'yiddish']\r\n            },\r\n            {\r\n                name: 'elvish',\r\n                languages: ['finnish', 'spanish', 'welsh']\r\n            },\r\n            {\r\n                name: 'goblin',\r\n                languages: ['hawaiian', 'kyrgyz', 'somali']\r\n            },\r\n            {\r\n                name: 'orc',\r\n                languages: ['macedonian', 'russian', 'turkish']\r\n            }\r\n        ];\r\n    }\r\n\r\n    private async addLanguage(language: string) {\r\n        const response = await fetch('./data/langs/' + language + '.txt');\r\n        this.state.sources[language] = await response.text();\r\n        this.setState({\r\n            sources: this.state.sources\r\n        });\r\n    }\r\n\r\n    private removeLanguage(language: string) {\r\n        delete this.state.sources[language];\r\n        this.setState({\r\n            sources: this.state.sources\r\n        });\r\n    }\r\n\r\n    private usePreset(presetName: string) {\r\n        const preset = this.getPresets().find(p => p.name === presetName);\r\n        if (preset) {\r\n            this.setState({\r\n                sources: {},\r\n                output: []\r\n            }, () => {\r\n                preset.languages.forEach(lang => {\r\n                    this.addLanguage(lang);\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    private random() {\r\n        const languages = this.getLanguages();\r\n\r\n        const selection: string[] = [];\r\n        while (selection.length !== 3) {\r\n            const n = Math.floor(Math.random() * languages.length);\r\n            const lang = languages[n];\r\n            if (!selection.includes(lang)) {\r\n                selection.push(lang);\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            sources: {},\r\n            output: []\r\n        }, () => {\r\n            selection.forEach(lang => {\r\n                this.addLanguage(lang);\r\n            });\r\n        });\r\n    }\r\n\r\n    private generate() {\r\n        const sources: string[] = [];\r\n        Object.keys(this.state.sources).forEach(key => {\r\n            const src = this.state.sources[key];\r\n            sources.push(src);\r\n        });\r\n        TextGenerator.initModel(sources);\r\n        this.setState({\r\n            output: TextGenerator.generate(5).map(l => l.line)\r\n        });\r\n    }\r\n\r\n    private reset() {\r\n        this.setState({\r\n            sources: {},\r\n            output: []\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        const presetOptions = this.getPresets().map(p => {\r\n            return {\r\n                id: p.name,\r\n                text: p.name\r\n            };\r\n        });\r\n\r\n        let selectedPreset = '';\r\n        this.getPresets().forEach(p => {\r\n            const selected = Object.keys(this.state.sources).sort().join(', ');\r\n            const setting = p.languages.sort().join(', ');\r\n            if (selected === setting) {\r\n                selectedPreset = p.name;\r\n            }\r\n        });\r\n\r\n        let selectedLanguages = Object.keys(this.state.sources).sort().join(', ');\r\n        if (selectedLanguages === '') {\r\n            selectedLanguages = 'none';\r\n        }\r\n\r\n        const languages = this.getLanguages()\r\n            .map(lang => {\r\n                const isSelected = Object.keys(this.state.sources).includes(lang);\r\n                return (\r\n                    <div className='column' key={lang}>\r\n                        <Checkbox\r\n                            label={lang}\r\n                            style='button'\r\n                            checked={isSelected}\r\n                            changeValue={value => value ? this.addLanguage(lang) : this.removeLanguage(lang)}\r\n                        />\r\n                    </div>\r\n                );\r\n            });\r\n\r\n        const allowGenerate = Object.keys(this.state.sources).length > 0;\r\n        const allowReset = allowGenerate || this.state.output.length > 0;\r\n\r\n        const output = [];\r\n        if (this.state.output.length > 0) {\r\n            output.push(\r\n                <div key='div' className='divider' />\r\n            );\r\n        }\r\n        for (let n = 0; n !== this.state.output.length; ++n) {\r\n            output.push(\r\n                <GeneratedText\r\n                    key={n}\r\n                    text={this.state.output[n]}\r\n                    languages={Object.keys(this.state.sources)}\r\n                />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className='language'>\r\n                <div className='heading'>presets</div>\r\n                <Selector\r\n                    options={presetOptions}\r\n                    selectedID={selectedPreset}\r\n                    select={optionID => this.usePreset(optionID)}\r\n                />\r\n                <div className='divider' />\r\n                <Expander\r\n                    text={'selected languages: ' + selectedLanguages}\r\n                    content={\r\n                        <div className='row collapse small-up-1 medium-up-2 large-up-3 language-options'>\r\n                            {languages}\r\n                        </div>\r\n                    }\r\n                />\r\n                <div className='divider' />\r\n                <ControlRow\r\n                    controls={[\r\n                        <button key='generate' className={allowGenerate ? '' : 'disabled'} onClick={() => this.generate()}>generate text</button>,\r\n                        <button key='reset' className={allowReset ? '' : 'disabled'} onClick={() => this.reset()}>reset</button>,\r\n                        <button key='random' onClick={() => this.random()}>random sources</button>\r\n                    ]}\r\n                />\r\n                <div className='language-output'>\r\n                    {output}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface GeneratedTextProps {\r\n    text: string;\r\n    languages: string[];\r\n}\r\n\r\nclass GeneratedText extends React.Component<GeneratedTextProps> {\r\n    private copy(e: React.MouseEvent) {\r\n        e.preventDefault();\r\n        navigator.clipboard.writeText(this.props.text);\r\n    }\r\n\r\n    private say(e: React.MouseEvent) {\r\n        e.preventDefault();\r\n        Speech.say(this.props.text, this.props.languages);\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <Expander\r\n                text={this.props.text.toLowerCase()}\r\n                content={\r\n                    <div>\r\n                        <button onClick={e => this.copy(e)}>copy to clipboard</button>\r\n                        <button onClick={e => this.say(e)}>say</button>\r\n                        <div className='section'>\r\n                            <b>note:</b> speech may not work consistently on all platforms\r\n                        </div>\r\n                    </div>\r\n                }\r\n            />\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport TextGenerator from '../../utils/text-generation';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    //\r\n}\r\n\r\ninterface State {\r\n    output: {\r\n        male: string[],\r\n        female: string[],\r\n        surname: string[]\r\n    };\r\n}\r\n\r\nexport default class NameModule extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            output: {\r\n                male: [],\r\n                female: [],\r\n                surname: []\r\n            }\r\n        };\r\n    }\r\n\r\n    private async generate(type: 'male' | 'female' | 'surname') {\r\n        const response = await fetch('./data/names/' + type + '.txt');\r\n        const input = await response.text();\r\n\r\n        TextGenerator.initModel([input]);\r\n        const names = TextGenerator.generate(10).map(n => n.line).sort();\r\n\r\n        this.state.output[type] = names;\r\n        this.setState({\r\n            output: this.state.output\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        const male = [];\r\n        for (let n = 0; n !== this.state.output.male.length; ++n) {\r\n            male.push(\r\n                <div key={n} className='section'>\r\n                    {this.state.output.male[n].toLowerCase()}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        const female = [];\r\n        for (let n = 0; n !== this.state.output.female.length; ++n) {\r\n            female.push(\r\n                <div key={n} className='section'>\r\n                    {this.state.output.female[n].toLowerCase()}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        const surname = [];\r\n        for (let n = 0; n !== this.state.output.surname.length; ++n) {\r\n            surname.push(\r\n                <div key={n} className='section'>\r\n                    {this.state.output.surname[n].toLowerCase()}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className='name'>\r\n                <div className='name-output'>\r\n                    <div className='row'>\r\n                        <div className='columns small-4 medium-4 large-4'>\r\n                            <div className='heading'>male names</div>\r\n                            <button onClick={() => this.generate('male')}>generate</button>\r\n                            {male}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4'>\r\n                            <div className='heading'>female names</div>\r\n                            <button onClick={() => this.generate('female')}>generate</button>\r\n                            {female}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4'>\r\n                            <div className='heading'>surnames</div>\r\n                            <button onClick={() => this.generate('surname')}>generate</button>\r\n                            {surname}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Showdown from 'showdown';\r\n\r\nimport Selector from '../controls/selector';\r\n\r\nconst showdown = new Showdown.Converter();\r\nshowdown.setOption('tables', true);\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    //\r\n}\r\n\r\ninterface State {\r\n    view: string;\r\n    source: string | null;\r\n}\r\n\r\nexport default class ReferenceModule extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            view: 'skills',\r\n            source: null\r\n        };\r\n    }\r\n\r\n    private setView(view: string) {\r\n        this.setState({\r\n            view: view,\r\n            source: null\r\n        });\r\n    }\r\n\r\n    private async fetchData() {\r\n        const response = await fetch('./data/' + this.state.view + '.md');\r\n        const text = await response.text();\r\n        this.setState({\r\n            source: text\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        if (this.state.view && !this.state.source) {\r\n            this.fetchData();\r\n        }\r\n\r\n        const options = [\r\n            {\r\n                id: 'skills',\r\n                text: 'skills'\r\n            },\r\n            {\r\n                id: 'conditions',\r\n                text: 'conditions'\r\n            },\r\n            {\r\n                id: 'actions',\r\n                text: 'actions'\r\n            }\r\n        ];\r\n\r\n        return (\r\n            <div className='reference'>\r\n                <Selector\r\n                    options={options}\r\n                    selectedID={this.state.view}\r\n                    select={optionID => this.setView(optionID)}\r\n                />\r\n                <div dangerouslySetInnerHTML={{ __html: showdown.makeHtml(this.state.source || '') }} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport ConfirmButton from '../controls/confirm-button';\r\nimport Selector from '../controls/selector';\r\nimport DieRollerModule from '../dm-modules/die-roller-module';\r\nimport LanguageModule from '../dm-modules/language-module';\r\nimport NameModule from '../dm-modules/name-module';\r\nimport ReferenceModule from '../dm-modules/reference-module';\r\nimport Note from '../panels/note';\r\n\r\nimport pkg from '../../../package.json';\r\n\r\ninterface Props {\r\n    resetAll: () => void;\r\n    changeValue: (source: {}, field: string, value: any) => void;\r\n}\r\n\r\ninterface State {\r\n    view: string;\r\n    module: string | null;\r\n}\r\n\r\nexport default class AboutModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            view: 'dm',\r\n            module: 'reference'\r\n        };\r\n    }\r\n\r\n    private setView(view: string) {\r\n        this.setState({\r\n            view: view\r\n        });\r\n    }\r\n\r\n    private setModule(module: string) {\r\n        this.setState({\r\n            module: module\r\n        });\r\n    }\r\n\r\n    private getTools() {\r\n        if (this.state.view !== 'dm') {\r\n            return null;\r\n        }\r\n\r\n        const modules = [\r\n            {\r\n                id: 'reference',\r\n                text: 'd&d reference'\r\n            },\r\n            {\r\n                id: 'names',\r\n                text: 'name generator'\r\n            },\r\n            {\r\n                id: 'language',\r\n                text: 'language generator'\r\n            },\r\n            {\r\n                id: 'die-roller',\r\n                text: 'die roller'\r\n            }\r\n        ];\r\n\r\n        let module = (\r\n            <Note\r\n                content={(\r\n                    <div className='section'>\r\n                        <b>dojo</b> includes several dm tools; select one of them above\r\n                    </div>\r\n                )}\r\n            />\r\n        );\r\n\r\n        switch (this.state.module) {\r\n            case 'reference':\r\n                module = (\r\n                    <ReferenceModule />\r\n                );\r\n                break;\r\n            case 'language':\r\n                module = (\r\n                    <LanguageModule />\r\n                );\r\n                break;\r\n            case 'names':\r\n                module = (\r\n                    <NameModule />\r\n                );\r\n                break;\r\n            case 'die-roller':\r\n                module = (\r\n                    <DieRollerModule />\r\n                );\r\n                break;\r\n        }\r\n\r\n        return (\r\n            <div className='dm-screen'>\r\n                <Selector\r\n                    options={modules}\r\n                    selectedID={this.state.module}\r\n                    select={moduleID => this.setModule(moduleID)}\r\n                />\r\n                <div className='divider' />\r\n                <div className='dm-module'>\r\n                    {module}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getAbout() {\r\n        if (this.state.view !== 'about') {\r\n            return null;\r\n        }\r\n\r\n        /* tslint:disable:max-line-length */\r\n        return (\r\n            <div>\r\n                <div className='section'>dojo by <a href='mailto:andy.aiken@live.co.uk'>andy aiken</a></div>\r\n                <div className='section'>version <b>{pkg.version}</b></div>\r\n                <div className='section'>if you would like to contribut to this project, you can do so <a href='https://github.com/andyaiken/dojo' target='_blank' rel='noopener noreferrer'>here</a></div>\r\n                <div className='section'>dungeons and dragons copyright wizards of the coast</div>\r\n                <div className='heading'>options</div>\r\n                <ConfirmButton text='clear all data' callback={() => this.props.resetAll()} />\r\n                <div className='heading'>open game license</div>\r\n                <div className='section'>The following text is the property of Wizards of the Coast, Inc. and is Copyright 2000 Wizards of the Coast, Inc ('Wizards'). All Rights Reserved.</div>\r\n                <ol>\r\n                    <li>Definitions: (a)'Contributors' means the copyright and/or trademark owners who have contributed Open Game Content; (b)'Derivative Material' means copyrighted material including derivative works and translations (including into other computer languages), potation, modification, correction, addition, extension, upgrade, improvement, compilation, abridgment or other form in which an existing work may be recast, transformed or adapted; (c) 'Distribute' means to reproduce, license, rent, lease, sell, broadcast, publicly display, transmit or otherwise distribute; (d)'Open Game Content' means the game mechanic and includes the methods, procedures, processes and routines to the extent such content does not embody the Product Identity and is an enhancement over the prior art and any additional content clearly identified as Open Game Content by the Contributor, and means any work covered by this License, including translations and derivative works under copyright law, but specifically excludes Product Identity. (e) 'Product Identity' means product and product line names, logos and identifying marks including trade dress; artifacts; creatures characters; stories, storylines, plots, thematic elements, dialogue, incidents, language, artwork, symbols, designs, depictions, likenesses, formats, poses, concepts, themes and graphic, photographic and other visual or audio representations; names and descriptions of characters, spells, enchantments, personalities, teams, personas, likenesses and special abilities; places, locations, environments, creatures, equipment, magical or supernatural abilities or effects, logos, symbols, or graphic designs; and any other trademark or registered trademark clearly identified as Product identity by the owner of the Product Identity, and which specifically excludes the Open Game Content; (f) 'Trademark' means the logos, names, mark, sign, motto, designs that are used by a Contributor to identify itself or its products or the associated products contributed to the Open Game License by the Contributor (g) 'Use', 'Used' or 'Using' means to use, Distribute, copy, edit, format, modify, translate and otherwise create Derivative Material of Open Game Content. (h) 'You' or 'Your' means the licensee in terms of this agreement.</li>\r\n                    <li>The License: This License applies to any Open Game Content that contains a notice indicating that the Open Game Content may only be Used under and in terms of this License. You must affix such a notice to any Open Game Content that you Use. No terms may be added to or subtracted from this License except as described by the License itself. No other terms or conditions may be applied to any Open Game Content distributed using this License.</li>\r\n                    <li>Offer and Acceptance: By Using the Open Game Content You indicate Your acceptance of the terms of this License.</li>\r\n                    <li>Grant and Consideration: In consideration for agreeing to use this License, the Contributors grant You a perpetual, worldwide, royalty-free, non-exclusive license with the exact terms of this License to Use, the Open Game Content.</li>\r\n                    <li>Representation of Authority to Contribute: If You are contributing original material as Open Game Content, You represent that Your Contributions are Your original creation and/or You have sufficient rights to grant the rights conveyed by this License.</li>\r\n                    <li>Notice of License Copyright: You must update the COPYRIGHT NOTICE portion of this License to include the exact text of the COPYRIGHT NOTICE of any Open Game Content You are copying, modifying or distributing, and You must add the title, the copyright date, and the copyright holder's name to the COPYRIGHT NOTICE of any original Open Game Content you Distribute.</li>\r\n                    <li>Use of Product Identity: You agree not to Use any Product Identity, including as an indication as to compatibility, except as expressly licensed in another, independent Agreement with the owner of each element of that Product Identity. You agree not to indicate compatibility or co-adaptability with any Trademark or Registered Trademark in conjunction with a work containing Open Game Content except as expressly licensed in another, independent Agreement with the owner of such Trademark or Registered Trademark. The use of any Product Identity in Open Game Content does not constitute a challenge to the ownership of that Product Identity. The owner of any Product Identity used in Open Game Content shall retain all rights, title and interest in and to that Product Identity.</li>\r\n                    <li>Identification: If you distribute Open Game Content You must clearly indicate which portions of the work that you are distributing are Open Game Content.</li>\r\n                    <li>Updating the License: Wizards or its designated Agents may publish updated versions of this License. You may use any authorized version of this License to copy, modify and distribute any Open Game Content originally distributed under any version of this License.</li>\r\n                    <li>Copy of this License: You MUST include a copy of this License with every copy of the Open Game Content You Distribute.</li>\r\n                    <li>Use of Contributor Credits: You may not market or advertise the Open Game Content using the name of any Contributor unless You have written permission from the Contributor to do so.</li>\r\n                    <li>Inability to Comply: If it is impossible for You to comply with any of the terms of this License with respect to some or all of the Open Game Content due to statute, judicial order, or governmental regulation then You may not Use any Open Game Material so affected.</li>\r\n                    <li>Termination: This License will terminate automatically if You fail to comply with all terms herein and fail to cure such breach within 30 days of becoming aware of the breach. All sublicenses shall survive the termination of this License.</li>\r\n                    <li>Reformation: If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable.</li>\r\n                    <li>COPYRIGHT NOTICE Open Game License v 1.0 Copyright 2000, Wizards of the Coast, Inc.</li>\r\n                </ol>\r\n            </div>\r\n        );\r\n        /* tslint:enable:max-line-length */\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const viewOptions = [\r\n                {\r\n                    id: 'dm',\r\n                    text: 'dm tools'\r\n                },\r\n                {\r\n                    id: 'about',\r\n                    text: 'about'\r\n                }\r\n            ];\r\n\r\n            return (\r\n                <div className='about'>\r\n                    <Selector\r\n                        tabs={true}\r\n                        options={viewOptions}\r\n                        selectedID={this.state.view}\r\n                        select={optionID => this.setView(optionID)}\r\n                    />\r\n                    {this.getTools()}\r\n                    {this.getAbout()}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Monster, MonsterGroup } from '../../models/monster-group';\r\n\r\nimport FilterCard from '../cards/filter-card';\r\nimport MonsterCard from '../cards/monster-card';\r\nimport Note from '../panels/note';\r\n\r\ninterface Props {\r\n    combatants: Monster[];\r\n    library: MonsterGroup[];\r\n}\r\n\r\ninterface State {\r\n    combatants: Monster[];\r\n    filter: {\r\n        name: string,\r\n        challengeMin: number;\r\n        challengeMax: number;\r\n        category: string;\r\n        size: string;\r\n    };\r\n}\r\n\r\nexport default class AddCombatantsModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            combatants: props.combatants,\r\n            filter: {\r\n                name: '',\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: 'all types',\r\n                size: 'all sizes'\r\n            }\r\n        };\r\n    }\r\n\r\n    private changeFilterValue(type: 'name' | 'challengeMin' | 'challengeMax' | 'category' | 'size', value: any) {\r\n        // eslint-disable-next-line\r\n        this.state.filter[type] = value;\r\n        this.setState({\r\n            filter: this.state.filter\r\n        });\r\n    }\r\n\r\n    private nudgeFilterValue(type: 'challengeMin' | 'challengeMax', delta: number) {\r\n        const value = Utils.nudgeChallenge(this.state.filter[type], delta);\r\n        this.changeFilterValue(type, value);\r\n    }\r\n\r\n    private resetFilter() {\r\n        this.setState({\r\n            filter: {\r\n                name: '',\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: 'all types',\r\n                size: 'all sizes'\r\n            }\r\n        });\r\n    }\r\n    private matchMonster(monster: Monster) {\r\n        if (monster.challenge < this.state.filter.challengeMin) {\r\n            return false;\r\n        }\r\n\r\n        if (monster.challenge > this.state.filter.challengeMax) {\r\n            return false;\r\n        }\r\n\r\n        if (this.state.filter.name !== '') {\r\n            if (!Utils.match(this.state.filter.name, monster.name)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.filter.category !== 'all types') {\r\n            if (monster.category !== this.state.filter.category) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.filter.size !== 'all sizes') {\r\n            if (monster.size !== this.state.filter.size) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private selectMonster(monster: Monster) {\r\n        this.state.combatants.push(monster);\r\n        this.state.combatants.sort((a, b) => {\r\n            if (a.name < b.name) { return -1; }\r\n            if (a.name > b.name) { return 1; }\r\n            return 0;\r\n        });\r\n        this.setState({\r\n            combatants: this.state.combatants\r\n        });\r\n    }\r\n\r\n    private deselectMonster(monster: Monster) {\r\n        const index = this.state.combatants.indexOf(monster);\r\n        this.state.combatants.splice(index, 1);\r\n        this.setState({\r\n            combatants: this.state.combatants\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const monsters: Monster[] = [];\r\n            this.props.library.forEach(group => {\r\n                group.monsters.forEach(monster => {\r\n                    if (this.matchMonster(monster)) {\r\n                        monsters.push(monster);\r\n                    }\r\n                });\r\n            });\r\n            monsters.sort((a, b) => {\r\n                if (a.name < b.name) { return -1; }\r\n                if (a.name > b.name) { return 1; }\r\n                return 0;\r\n            });\r\n            let allCombatants: JSX.Element | JSX.Element[] = monsters.filter(m => !this.state.combatants.includes(m)).map(m => {\r\n                return (\r\n                    <MonsterCard key={m.id} combatant={m} mode='view candidate' selectMonster={monster => this.selectMonster(monster)} />\r\n                );\r\n            });\r\n            if (allCombatants.length === 0) {\r\n                allCombatants = (\r\n                    <Note\r\n                        content={(\r\n                            <div className='section'>\r\n                                there are no monsters that match the above criteria (or you have already selected them all)\r\n                            </div>\r\n                        )}\r\n                    />\r\n                );\r\n            }\r\n\r\n            const selectedCombatants: JSX.Element | JSX.Element[] = this.state.combatants.map(c => {\r\n                return (\r\n                    <MonsterCard key={c.id} combatant={c} mode='view candidate selected' deselectMonster={monster => this.deselectMonster(monster)} />\r\n                );\r\n            });\r\n\r\n            return (\r\n                <div className='add-combatants-modal'>\r\n                    <div className='row' style={{ height: '100%' }}>\r\n                        <div className='columns small-6 medium-6 large-6 scrollable'>\r\n                            <div className='heading'>all combatants</div>\r\n                            <FilterCard\r\n                                filter={this.state.filter}\r\n                                changeValue={(type, value) => this.changeFilterValue(type, value)}\r\n                                nudgeValue={(type, delta) => this.nudgeFilterValue(type, delta)}\r\n                                resetFilter={() => this.resetFilter()}\r\n                            />\r\n                            <div className='divider' />\r\n                            {allCombatants}\r\n                        </div>\r\n                        <div className='columns small-6 medium-6 large-6 scrollable'>\r\n                            <div className='heading'>selected combatants</div>\r\n                            {selectedCombatants}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { CombatSetup } from '../../models/combat';\r\nimport { Encounter, EncounterSlot } from '../../models/encounter';\r\nimport { MapFolio } from '../../models/map-folio';\r\nimport { Monster } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport Selector from '../controls/selector';\r\nimport DifficultyChartPanel from '../panels/difficulty-chart-panel';\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    combatSetup: CombatSetup;\r\n    parties: Party[];\r\n    encounters: Encounter[];\r\n    mapFolios: MapFolio[];\r\n    getMonster: (monsterName: string, groupName: string) => Monster | null;\r\n    notify: () => void;\r\n}\r\n\r\ninterface State {\r\n    combatSetup: CombatSetup;\r\n}\r\n\r\nexport default class CombatStartModal extends React.Component<Props, State> {\r\n    public static defaultProps = {\r\n        parties: null,\r\n        mapFolios: null\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            combatSetup: props.combatSetup\r\n        };\r\n    }\r\n\r\n    private setParty(partyID: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.partyID = partyID;\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        }, () => this.props.notify());\r\n    }\r\n\r\n    private setEncounter(encounterID: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.encounterID = encounterID;\r\n        const enc = this.props.encounters.find(e => e.id === encounterID);\r\n        if (enc) {\r\n            // eslint-disable-next-line\r\n            this.state.combatSetup.monsterNames = Utils.getMonsterNames(enc);\r\n        }\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        }, () => this.props.notify());\r\n    }\r\n\r\n    private setFolioID(id: string) {\r\n        if (id && (id !== '')) {\r\n            const folio = this.props.mapFolios.find(f => f.id === id);\r\n            if (folio) {\r\n                // eslint-disable-next-line\r\n                this.state.combatSetup.folioID = folio.id;\r\n                // eslint-disable-next-line\r\n                this.state.combatSetup.mapID = folio.maps.length === 1 ? folio.maps[0].id : null;\r\n            }\r\n        } else {\r\n            // eslint-disable-next-line\r\n            this.state.combatSetup.folioID = null;\r\n            // eslint-disable-next-line\r\n            this.state.combatSetup.mapID = null;\r\n        }\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        });\r\n    }\r\n\r\n    private setMapID(id: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.mapID = id;\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        });\r\n    }\r\n\r\n    private setWave(waveID: string) {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.waveID = waveID;\r\n        const enc = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n        if (enc) {\r\n            const wave = enc.waves.find(w => w.id === waveID);\r\n            if (wave) {\r\n                // eslint-disable-next-line\r\n                this.state.combatSetup.monsterNames = Utils.getMonsterNames(wave);\r\n            }\r\n        }\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        }, () => this.props.notify());\r\n    }\r\n\r\n    private setEncounterInitMode(mode: 'manual' | 'individual' | 'group') {\r\n        // eslint-disable-next-line\r\n        this.state.combatSetup.encounterInitMode = mode;\r\n        this.setState({\r\n            combatSetup: this.state.combatSetup\r\n        });\r\n    }\r\n\r\n    private changeName(slotID: string, index: number, name: string) {\r\n        const slot = this.state.combatSetup.monsterNames.find(s => s.id === slotID);\r\n        if (slot) {\r\n            slot.names[index] = name;\r\n            this.setState({\r\n                combatSetup: this.state.combatSetup\r\n            });\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    private getPartySection() {\r\n        if (this.props.parties.length === 0) {\r\n            return (\r\n                <div className='section'>you have not defined any parties</div>\r\n            );\r\n        }\r\n\r\n        const partyOptions = this.props.parties.map(party => {\r\n            return {\r\n                id: party.id,\r\n                text: party.name || 'unnamed party'\r\n            };\r\n        });\r\n\r\n        let partyContent = null;\r\n        if (this.state.combatSetup.partyID) {\r\n            const selectedParty = this.props.parties.find(p => p.id === this.state.combatSetup.partyID);\r\n            if (selectedParty) {\r\n                const pcs = selectedParty.pcs.filter(pc => pc.active);\r\n\r\n                const pcSections = pcs.map(pc =>\r\n                    (\r\n                        <li key={pc.id}>\r\n                            {pc.name || 'unnamed pc'} (level {pc.level})\r\n                        </li>\r\n                    )\r\n                );\r\n\r\n                if (pcSections.length === 0) {\r\n                    pcSections.push(\r\n                        <li key={'empty'}>no pcs</li>\r\n                    );\r\n                }\r\n\r\n                partyContent = (\r\n                    <div>\r\n                        <div className='subheading'>pcs</div>\r\n                        <ul>{pcSections}</ul>\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='heading'>party</div>\r\n                <Dropdown\r\n                    options={partyOptions}\r\n                    placeholder='select party...'\r\n                    selectedID={this.state.combatSetup.partyID ? this.state.combatSetup.partyID : undefined}\r\n                    select={optionID => this.setParty(optionID)}\r\n                />\r\n                {partyContent}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getEncounterSection() {\r\n        if (this.props.encounters.length === 0) {\r\n            return (\r\n                <div className='section'>you have not built any encounters</div>\r\n            );\r\n        }\r\n\r\n        const encounterOptions = this.props.encounters.map(encounter => {\r\n            return {\r\n                id: encounter.id,\r\n                text: encounter.name || 'unnamed encounter'\r\n            };\r\n        });\r\n\r\n        let encounterContent = null;\r\n        if (this.state.combatSetup.encounterID) {\r\n            const selectedEncounter = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n            if (selectedEncounter) {\r\n                const monsterSections = selectedEncounter.slots.map(slot => {\r\n                    let name = slot.monsterName || 'unnamed monster';\r\n                    if (slot.count > 1) {\r\n                        name += ' (x' + slot.count + ')';\r\n                    }\r\n                    return (\r\n                        <li key={slot.id}>{name}</li>\r\n                    );\r\n                });\r\n\r\n                if (monsterSections.length === 0) {\r\n                    monsterSections.push(\r\n                        <li key={'empty'}>no monsters</li>\r\n                    );\r\n                }\r\n\r\n                const waves = selectedEncounter.waves.map(wave => {\r\n                    if (wave.slots.length === 0) {\r\n                        return null;\r\n                    }\r\n\r\n                    const waveMonsters = wave.slots.map(slot => {\r\n                        let name = slot.monsterName || 'unnamed monster';\r\n                        if (slot.count > 1) {\r\n                            name += ' x' + slot.count;\r\n                        }\r\n                        return (\r\n                            <li key={slot.id}>{name}</li>\r\n                        );\r\n                    });\r\n\r\n                    return (\r\n                        <div key={wave.id}>\r\n                            <div className='subheading'>{wave.name || 'unnamed wave'}</div>\r\n                            <ul>{waveMonsters}</ul>\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                encounterContent = (\r\n                    <div>\r\n                        <div className='subheading'>monsters</div>\r\n                        <ul>{monsterSections}</ul>\r\n                        {waves}\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='heading'>encounter</div>\r\n                <Dropdown\r\n                    options={encounterOptions}\r\n                    placeholder='select encounter...'\r\n                    selectedID={this.state.combatSetup.encounterID ? this.state.combatSetup.encounterID : undefined}\r\n                    select={optionID => this.setEncounter(optionID)}\r\n                />\r\n                {encounterContent}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getMapSection() {\r\n        const folios = this.props.mapFolios.filter(folio => folio.maps.length > 0);\r\n        if (folios.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        const folioOptions = [{\r\n            id: '',\r\n            text: 'none'\r\n        }].concat(folios.map(folio => {\r\n            return {\r\n                id: folio.id,\r\n                text: folio.name || 'unnamed folio'\r\n            };\r\n        }));\r\n\r\n        let selectMapSection = null;\r\n        let thumbnailSection = null;\r\n\r\n        if (this.state.combatSetup.folioID) {\r\n            const folio = this.props.mapFolios.find(f => f.id === this.state.combatSetup.folioID);\r\n            if (folio) {\r\n                const mapOptions = folio.maps.map(m => {\r\n                    return {\r\n                        id: m.id,\r\n                        text: m.name || 'unnamed map'\r\n                    };\r\n                });\r\n\r\n                if (mapOptions.length !== 1) {\r\n                    selectMapSection = (\r\n                        <Selector\r\n                            options={mapOptions}\r\n                            selectedID={this.state.combatSetup.mapID}\r\n                            select={optionID => this.setMapID(optionID)}\r\n                        />\r\n                    );\r\n                }\r\n\r\n                if (this.state.combatSetup.mapID) {\r\n                    const map = folio.maps.find(m => m.id === this.state.combatSetup.mapID);\r\n                    if (map) {\r\n                        thumbnailSection = (\r\n                            <MapPanel\r\n                                map={map}\r\n                                mode='thumbnail'\r\n                            />\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='heading'>map</div>\r\n                <Dropdown\r\n                    options={folioOptions}\r\n                    placeholder='select map folio...'\r\n                    selectedID={this.state.combatSetup.folioID ? this.state.combatSetup.folioID : undefined}\r\n                    select={optionID => this.setFolioID(optionID)}\r\n                />\r\n                {selectMapSection}\r\n                {thumbnailSection}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getWaveSection() {\r\n        if (this.state.combatSetup.encounterID === null) {\r\n            return (\r\n                <div className='section'>you have not selected an encounter</div>\r\n            );\r\n        }\r\n\r\n        const selectedEncounter = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n        if (selectedEncounter) {\r\n            if (selectedEncounter.waves.length === 0) {\r\n                return (\r\n                    <div className='section'>you have not defined any waves</div>\r\n                );\r\n            }\r\n\r\n            const waveOptions = selectedEncounter.waves.map(wave => {\r\n                return {\r\n                    id: wave.id,\r\n                    text: wave.name || 'unnamed wave'\r\n                };\r\n            });\r\n\r\n            let waveContent = null;\r\n            if (this.state.combatSetup.waveID) {\r\n                const selectedWave = selectedEncounter.waves.find(w => w.id === this.state.combatSetup.waveID);\r\n                if (selectedWave) {\r\n                    const monsterSections = selectedWave.slots.map(slot => {\r\n                        let name = slot.monsterName || 'unnamed monster';\r\n                        if (slot.count > 1) {\r\n                            name += ' (x' + slot.count + ')';\r\n                        }\r\n                        return (\r\n                            <li key={slot.id}>{name}</li>\r\n                        );\r\n                    });\r\n\r\n                    if (monsterSections.length === 0) {\r\n                        monsterSections.push(\r\n                            <li key={'empty'}>no monsters</li>\r\n                        );\r\n                    }\r\n\r\n                    waveContent = (\r\n                        <div>\r\n                            <div className='subheading'>monsters</div>\r\n                            <ul>{monsterSections}</ul>\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n\r\n            return (\r\n                <div>\r\n                    <div className='heading'>wave</div>\r\n                    <Dropdown\r\n                        options={waveOptions}\r\n                        placeholder='select wave...'\r\n                        selectedID={this.state.combatSetup.waveID ? this.state.combatSetup.waveID : undefined}\r\n                        select={optionID => this.setWave(optionID)}\r\n                    />\r\n                    {waveContent}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private getDifficultySection() {\r\n        const party = this.props.parties.find(p => p.id === this.state.combatSetup.partyID);\r\n        const encounter = this.props.encounters.find(enc => enc.id === this.state.combatSetup.encounterID);\r\n\r\n        if (party && encounter) {\r\n            return (\r\n                <div>\r\n                    <div className='heading'>encounter difficulty</div>\r\n                    <DifficultyChartPanel\r\n                        party={party}\r\n                        encounter={encounter}\r\n                        getMonster={(monsterName, monsterGroupName) => this.props.getMonster(monsterName, monsterGroupName)}\r\n                    />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='heading'>encounter difficulty</div>\r\n                <div className='section'>select a party and an encounter on the left to see difficulty information.</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getMonsterSection() {\r\n        if (this.state.combatSetup.encounterID === null) {\r\n            return (\r\n                <div>\r\n                    <div className='heading'>monsters</div>\r\n                    <div className='section'>select an encounter to see monster options here.</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (!this.props.parties && this.state.combatSetup.waveID === null) {\r\n            return (\r\n                <div>\r\n                    <div className='heading'>monsters</div>\r\n                    <div className='section'>select a wave to see monster options here.</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        const selectedEncounter = this.props.encounters.find(e => e.id === this.state.combatSetup.encounterID);\r\n        if (selectedEncounter) {\r\n            let slotsContainer: { slots: EncounterSlot[] } = selectedEncounter;\r\n            if (this.state.combatSetup.waveID) {\r\n                const selectedWave = selectedEncounter.waves.find(w => w.id === this.state.combatSetup.waveID);\r\n                if (selectedWave) {\r\n                    slotsContainer = selectedWave;\r\n                }\r\n            }\r\n\r\n            if (slotsContainer.slots.length === 0) {\r\n                return null;\r\n            }\r\n\r\n            const initOptions = [\r\n                {\r\n                    id: 'manual',\r\n                    text: 'enter manually'\r\n                },\r\n                {\r\n                    id: 'individual',\r\n                    text: 'roll individually'\r\n                },\r\n                {\r\n                    id: 'group',\r\n                    text: 'roll in groups'\r\n                }\r\n            ];\r\n\r\n            const names = this.state.combatSetup.monsterNames.map(slotNames => {\r\n                const slot = slotsContainer.slots.find(s => s.id === slotNames.id);\r\n                if (slot) {\r\n                    const inputs = [];\r\n                    for (let n = 0; n !== slotNames.names.length; ++n) {\r\n                        inputs.push(\r\n                            <div key={n}>\r\n                                <MonsterName\r\n                                    value={slotNames.names[n]}\r\n                                    slotID={slot.id}\r\n                                    index={n}\r\n                                    changeName={(slotID, index, value) => this.changeName(slotID, index, value)}\r\n                                />\r\n                            </div>\r\n                        );\r\n                    }\r\n                    return (\r\n                        <div key={slotNames.id} className='name-row'>\r\n                            <div className='name-label'>\r\n                                {slot.monsterName}\r\n                            </div>\r\n                            <div className='name-inputs'>\r\n                                {inputs}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n            });\r\n\r\n            return (\r\n                <div>\r\n                    <div className='heading'>monsters</div>\r\n                    <div className='subheading'>initiative</div>\r\n                    <Selector\r\n                        options={initOptions}\r\n                        selectedID={this.state.combatSetup.encounterInitMode}\r\n                        select={optionID => this.setEncounterInitMode(optionID as 'manual' | 'individual' | 'group')}\r\n                    />\r\n                    <div className='subheading'>names</div>\r\n                    <div>{names}</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    public render() {\r\n        try {\r\n            let leftSection = null;\r\n            let rightSection = null;\r\n\r\n            if (this.props.parties) {\r\n                leftSection = (\r\n                    <div>\r\n                        {this.getPartySection()}\r\n                        {this.getEncounterSection()}\r\n                        {this.getMapSection()}\r\n                    </div>\r\n                );\r\n\r\n                rightSection = (\r\n                    <div>\r\n                        {this.getDifficultySection()}\r\n                        {this.getMonsterSection()}\r\n                    </div>\r\n                );\r\n            } else {\r\n                leftSection = (\r\n                    <div>\r\n                        {this.getWaveSection()}\r\n                    </div>\r\n                );\r\n\r\n                rightSection = (\r\n                    <div>\r\n                        {this.getMonsterSection()}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='row' style={{ height: '100%', margin: '0 -15px' }}>\r\n                    <div className='column small-6 medium-6 large-6 scrollable'>\r\n                        {leftSection}\r\n                    </div>\r\n                    <div className='column small-6 medium-6 large-6 scrollable'>\r\n                        {rightSection}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\ninterface MonsterNameProps {\r\n    slotID: string;\r\n    index: number;\r\n    value: string;\r\n    changeName: (slotID: string, index: number, value: string) => void;\r\n}\r\n\r\nclass MonsterName extends React.Component<MonsterNameProps> {\r\n    public render() {\r\n        return (\r\n            <input type='text' value={this.props.value} onChange={event => this.props.changeName(this.props.slotID, this.props.index, event.target.value)} />\r\n        );\r\n    }\r\n}\r\n","export interface Condition {\r\n    id: string;\r\n    name: string;\r\n    level: number;\r\n    text: string | null;\r\n    duration: ConditionDurationSaves | ConditionDurationCombatant | ConditionDurationRounds | null;\r\n}\r\n\r\nexport interface ConditionDurationSaves {\r\n    type: 'saves';\r\n    count: number;\r\n    saveType: 'str' | 'dex' | 'con' | 'int' | 'wis' | 'cha' | 'death';\r\n    saveDC: number;\r\n    point: 'start' | 'end';\r\n}\r\n\r\nexport interface ConditionDurationCombatant {\r\n    type: 'combatant';\r\n    point: 'start' | 'end';\r\n    combatantID: string | null;\r\n}\r\n\r\nexport interface ConditionDurationRounds {\r\n    type: 'rounds';\r\n    count: number;\r\n}\r\n\r\nexport const CONDITION_TYPES = [\r\n    'blinded',\r\n    'charmed',\r\n    'deafened',\r\n    'exhaustion',\r\n    'frightened',\r\n    'grappled',\r\n    'incapacitated',\r\n    'invisible',\r\n    'paralyzed',\r\n    'petrified',\r\n    'poisoned',\r\n    'prone',\r\n    'restrained',\r\n    'stunned',\r\n    'unconscious',\r\n    'custom'\r\n];\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    items: { id: string; text: string; details: JSX.Element | string; disabled?: boolean }[];\r\n    selectedItemID: string | null;\r\n    select: (itemID: string) => void;\r\n}\r\n\r\nexport default class RadioGroup extends React.Component<Props> {\r\n    public static defaultProps = {\r\n        // No default property values\r\n    };\r\n\r\n    public render() {\r\n        try {\r\n            const content = this.props.items.map(item => {\r\n                return (\r\n                    <RadioGroupItem\r\n                        key={item.id}\r\n                        item={item}\r\n                        selected={this.props.selectedItemID === item.id}\r\n                        select={(itemID: string) => this.props.select(itemID)}\r\n                    />\r\n                );\r\n            });\r\n\r\n            return (\r\n                <div className='radio-group'>\r\n                    {content}\r\n                </div>\r\n            );\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\ninterface RadioGroupItemProps {\r\n    item: { id: string; text: string; details: JSX.Element | string; disabled?: boolean };\r\n    selected: boolean;\r\n    select: (itemID: string) => void;\r\n}\r\n\r\nclass RadioGroupItem extends React.Component<RadioGroupItemProps> {\r\n    public render() {\r\n        let style = 'radio-item';\r\n        let details = null;\r\n\r\n        if (this.props.selected) {\r\n            style += ' selected';\r\n            details = (\r\n                <div className='radio-item-details'>\r\n                    {this.props.item.details}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (this.props.item.disabled) {\r\n            style += ' disabled';\r\n        }\r\n\r\n        return (\r\n            <div className={style} onClick={() => this.props.select(this.props.item.id)}>\r\n                <div className='radio-item-text'>{this.props.item.text}</div>\r\n                {details}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Factory from '../../utils/factory';\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Combat, Combatant } from '../../models/combat';\r\nimport { Condition, CONDITION_TYPES, ConditionDurationCombatant, ConditionDurationSaves } from '../../models/condition';\r\nimport { Monster } from '../../models/monster-group';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport RadioGroup from '../controls/radio-group';\r\nimport Selector from '../controls/selector';\r\nimport Spin from '../controls/spin';\r\n\r\ninterface Props {\r\n    condition: Condition;\r\n    combatant: Combatant & Monster;\r\n    combat: Combat;\r\n}\r\n\r\ninterface State {\r\n    condition: Condition;\r\n}\r\n\r\nexport default class ConditionModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            condition: props.condition\r\n        };\r\n    }\r\n\r\n    private setCondition(conditionName: string) {\r\n        // eslint-disable-next-line\r\n        this.state.condition.name = conditionName;\r\n        // eslint-disable-next-line\r\n        this.state.condition.level = 1;\r\n        // eslint-disable-next-line\r\n        this.state.condition.text = conditionName === 'custom' ? 'custom condition' : null;\r\n\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    private setDuration(durationType: 'saves' | 'combatant' | 'rounds') {\r\n        let duration = null;\r\n\r\n        switch (durationType) {\r\n            case 'saves':\r\n                duration = Factory.createConditionDurationSaves();\r\n                break;\r\n            case 'combatant':\r\n                duration = Factory.createConditionDurationCombatant();\r\n                duration.combatantID = this.props.combatant.id;\r\n                break;\r\n            case 'rounds':\r\n                duration = Factory.createConditionDurationRounds();\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        // eslint-disable-next-line\r\n        this.state.condition.duration = duration;\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    private changeValue(object: any, field: string, value: any) {\r\n        object[field] = value;\r\n\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    private nudgeValue(object: any, field: string, delta: number) {\r\n        let value = object[field] + delta;\r\n        if (field === 'level') {\r\n            value = Math.max(value, 1);\r\n            value = Math.min(value, 6);\r\n        }\r\n        if (field === 'count') {\r\n            value = Math.max(value, 1);\r\n        }\r\n        if (field === 'saveDC') {\r\n            value = Math.max(value, 0);\r\n        }\r\n        object[field] = value;\r\n\r\n        this.setState({\r\n            condition: this.state.condition\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const conditions = CONDITION_TYPES.map(condition => {\r\n                const controls = [];\r\n                const description = [];\r\n                if (condition === this.state.condition.name) {\r\n                    if (condition === 'custom') {\r\n                        controls.push(\r\n                            <input\r\n                                type='text'\r\n                                placeholder='custom condition'\r\n                                value={this.state.condition.text ? this.state.condition.text : ''}\r\n                                onChange={event => this.changeValue(this.state.condition, 'text', event.target.value)}\r\n                            />\r\n                        );\r\n                    }\r\n                    if (condition === 'exhaustion') {\r\n                        controls.push(\r\n                            <Spin\r\n                                key='exhaustion-spin'\r\n                                source={this.props.condition}\r\n                                name='level'\r\n                                label='exhaustion'\r\n                                nudgeValue={delta => this.nudgeValue(this.props.condition, 'level', delta)}\r\n                            />\r\n                        );\r\n                    }\r\n                    const text = Utils.conditionText(this.state.condition);\r\n                    for (let n = 0; n !== text.length; ++n) {\r\n                        description.push(<li key={n} className='section'>{text[n]}</li>);\r\n                    }\r\n                }\r\n\r\n                return {\r\n                    id: condition,\r\n                    text: condition,\r\n                    details: (\r\n                        <div key={condition}>\r\n                            {controls}\r\n                            <ul>\r\n                                {description}\r\n                            </ul>\r\n                        </div>\r\n                    ),\r\n                    disabled: this.props.combatant.conditionImmunities ? this.props.combatant.conditionImmunities.indexOf(condition) !== -1 : false\r\n                };\r\n            });\r\n\r\n            const saveOptions = ['str', 'dex', 'con', 'int', 'wis', 'cha', 'death'].map(c => ({ id: c, text: c }));\r\n            const pointOptions = [\r\n                {\r\n                    id: 'start',\r\n                    text: 'start of turn'\r\n                },\r\n                {\r\n                    id: 'end',\r\n                    text: 'end of turn'\r\n                }\r\n            ];\r\n            const combatantOptions = this.props.combat.combatants.map(c => ({ id: c.id, text: (c.displayName || c.name || 'unnamed monster') }));\r\n\r\n            const durations = [\r\n                {\r\n                    id: 'none',\r\n                    text: 'until removed (default)',\r\n                    details: (\r\n                        <div className='section'>\r\n                            <div>the condition persists until it is manually removed</div>\r\n                        </div>\r\n                    )\r\n                },\r\n                {\r\n                    id: 'saves',\r\n                    text: 'until a successful save',\r\n                    details: (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>number of saves required</div>\r\n                                <Spin\r\n                                    source={this.props.condition.duration}\r\n                                    name='count'\r\n                                    nudgeValue={delta => this.nudgeValue(this.props.condition.duration, 'count', delta)}\r\n                                />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>save dc</div>\r\n                                <Spin\r\n                                    source={this.props.condition.duration}\r\n                                    name='saveDC'\r\n                                    nudgeValue={delta => this.nudgeValue(this.props.condition.duration, 'saveDC', delta)}\r\n                                />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>type of save</div>\r\n                                <Selector\r\n                                    options={saveOptions}\r\n                                    selectedID={\r\n                                        (this.props.condition.duration as ConditionDurationSaves)\r\n                                        ? (this.props.condition.duration as ConditionDurationSaves).saveType\r\n                                        : null\r\n                                    }\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, 'saveType', optionID)}\r\n                                />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>make the save at the start or end of the turn</div>\r\n                                <Selector\r\n                                    options={pointOptions}\r\n                                    selectedID={\r\n                                        (this.props.condition.duration as ConditionDurationSaves)\r\n                                        ? (this.props.condition.duration as ConditionDurationSaves).point\r\n                                        : null\r\n                                    }\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, 'point', optionID)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                },\r\n                {\r\n                    id: 'combatant',\r\n                    text: 'until someone\\'s next turn',\r\n                    details: (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>combatant</div>\r\n                                <Dropdown\r\n                                    options={combatantOptions}\r\n                                    selectedID={\r\n                                        (this.props.condition.duration as ConditionDurationCombatant)\r\n                                        ? (this.props.condition.duration as ConditionDurationCombatant).combatantID || undefined\r\n                                        : undefined\r\n                                    }\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, 'combatantID', optionID)}\r\n                                />\r\n                            </div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>start or end of the turn</div>\r\n                                <Selector\r\n                                    options={pointOptions}\r\n                                    selectedID={\r\n                                        (this.props.condition.duration as ConditionDurationCombatant)\r\n                                        ? (this.props.condition.duration as ConditionDurationCombatant).point\r\n                                        : null\r\n                                    }\r\n                                    select={optionID => this.changeValue(this.props.condition.duration, 'point', optionID)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                },\r\n                {\r\n                    id: 'rounds',\r\n                    text: 'for a number of rounds',\r\n                    details: (\r\n                        <div>\r\n                            <div className='section'>\r\n                                <div className='subheading'>number of rounds</div>\r\n                                <Spin\r\n                                    source={this.props.condition.duration}\r\n                                    name='count'\r\n                                    nudgeValue={delta => this.nudgeValue(this.props.condition.duration, 'count', delta)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }\r\n            ];\r\n\r\n            return (\r\n                <div className='condition-modal'>\r\n                    <div className='row' style={{ height: '100%' }}>\r\n                        <div className='columns small-6 medium-6 large-6 scrollable'>\r\n                            <div className='heading'>condition</div>\r\n                            <RadioGroup\r\n                                items={conditions}\r\n                                selectedItemID={this.state.condition.name}\r\n                                select={itemID => this.setCondition(itemID)}\r\n                            />\r\n                        </div>\r\n                        <div className='columns small-6 medium-6 large-6 scrollable'>\r\n                            <div className='heading'>duration</div>\r\n                            <RadioGroup\r\n                                items={durations}\r\n                                selectedItemID={this.state.condition.duration ? this.state.condition.duration.type : 'none'}\r\n                                select={itemID => this.setDuration(itemID as 'saves' | 'combatant' | 'rounds')}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { CATEGORY_TYPES, Monster, MonsterGroup, SIZE_TYPES } from '../../models/monster-group';\r\n\r\nimport Selector from '../controls/selector';\r\n\r\ninterface Props {\r\n    library: MonsterGroup[];\r\n}\r\n\r\ninterface State {\r\n    chart: string;\r\n}\r\n\r\nexport default class DemographicsModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            chart: 'challenge'\r\n        };\r\n    }\r\n\r\n    private selectChart(chart: string) {\r\n        this.setState({\r\n            chart: chart\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let demographics = null;\r\n\r\n            const allMonsters: Monster[] = [];\r\n            this.props.library.forEach(group => group.monsters.forEach(monster => allMonsters.push(monster)));\r\n            if (allMonsters.length !== 0) {\r\n                const buckets: { value: any, title: string }[] = [];\r\n                let maxBucketSize = 0;\r\n                const monsters: { [key: string]: Monster[] } = {};\r\n\r\n                switch (this.state.chart) {\r\n                    case 'challenge':\r\n                        const challenges = [\r\n                            0, 0.125, 0.25, 0.5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30\r\n                        ];\r\n                        challenges.forEach(cr => {\r\n                            buckets.push({\r\n                                value: cr,\r\n                                title: 'challenge ' + Utils.challenge(cr)\r\n                            });\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const cr = bucket.value;\r\n                            monsters[cr.toString()] = allMonsters.filter(monster => monster.challenge === cr);\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const cr = bucket.value;\r\n                            maxBucketSize = Math.max(monsters[cr].length, maxBucketSize);\r\n                        });\r\n                        break;\r\n                    case 'size':\r\n                        SIZE_TYPES.forEach(size => {\r\n                            buckets.push({\r\n                                value: size,\r\n                                title: size\r\n                            });\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const size = bucket.value;\r\n                            monsters[size.toString()] = allMonsters.filter(monster => monster.size === size);\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const size = bucket.value;\r\n                            maxBucketSize = Math.max(monsters[size].length, maxBucketSize);\r\n                        });\r\n                        break;\r\n                    case 'type':\r\n                        CATEGORY_TYPES.forEach(type => {\r\n                            buckets.push({\r\n                                value: type,\r\n                                title: type\r\n                            });\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const type = bucket.value;\r\n                            monsters[type.toString()] = allMonsters.filter(monster => monster.category === type);\r\n                        });\r\n\r\n                        buckets.forEach(bucket => {\r\n                            const type = bucket.value;\r\n                            maxBucketSize = Math.max(monsters[type].length, maxBucketSize);\r\n                        });\r\n                        break;\r\n                    default:\r\n                        // Do nothing\r\n                        break;\r\n                }\r\n\r\n                const bars = [];\r\n                for (let index = 0; index !== buckets.length; ++index) {\r\n                    const bucket = buckets[index];\r\n                    const set = monsters[bucket.value];\r\n                    const count = set ? set.length : 0;\r\n                    bars.push(\r\n                        <div\r\n                            key={bucket.title}\r\n                            className='bar-container'\r\n                            title={bucket.title + ': ' + set.length + ' monsters'}\r\n                        >\r\n                            <div\r\n                                className='bar'\r\n                                style={{\r\n                                    width: 'calc((100% - 1px) * ' + count + ' / ' + maxBucketSize + ')'\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                const chartOptions = [\r\n                    {\r\n                        id: 'challenge',\r\n                        text: 'challenge rating'\r\n                    },\r\n                    {\r\n                        id: 'size',\r\n                        text: 'size'\r\n                    },\r\n                    {\r\n                        id: 'type',\r\n                        text: 'type'\r\n                    }\r\n                ];\r\n\r\n                demographics = (\r\n                    <div>\r\n                        <div className='heading'>monster demographics</div>\r\n                        <Selector\r\n                            options={chartOptions}\r\n                            selectedID={this.state.chart}\r\n                            select={optionID => this.selectChart(optionID)}\r\n                        />\r\n                        <div className='chart'>\r\n                            <div className='plot'>{bars}</div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return demographics;\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","export interface MapFolio {\r\n    id: string;\r\n    name: string;\r\n    maps: Map[];\r\n}\r\n\r\nexport interface Map {\r\n    id: string;\r\n    name: string;\r\n    items: MapItem[];\r\n}\r\n\r\nexport interface MapItem {\r\n    id: string;\r\n    type: 'tile' | 'pc' | 'monster';\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n    terrain: string | null;\r\n}\r\n\r\nexport const TERRAIN_TYPES = [\r\n    'cavern',\r\n    'dirt',\r\n    'flagstone',\r\n    'floorboard',\r\n    'grassland',\r\n    'pit',\r\n    'sand',\r\n    'snow',\r\n    'water'\r\n];\r\n","import React from 'react';\r\n\r\nimport { MapItem, TERRAIN_TYPES } from '../../models/map-folio';\r\n\r\nimport Dropdown from '../controls/dropdown';\r\nimport Radial from '../controls/radial';\r\n\r\ninterface Props {\r\n    tile: MapItem;\r\n    changeValue: (tile: MapItem, field: string, value: string) => void;\r\n    moveMapItem: (tile: MapItem, dir: string) => void;\r\n    resizeMapItem: (tile: MapItem, dir: string, dir2: 'in' | 'out' | null) => void;\r\n    cloneMapItem: (tile: MapItem) => void;\r\n    removeMapItem: (tile: MapItem) => void;\r\n}\r\n\r\nexport default class MapTileCard extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const terrainOptions = TERRAIN_TYPES.map(t => {\r\n                return { id: t, text: t };\r\n            });\r\n\r\n            return (\r\n                <div className='card map-tile'>\r\n                    <div className='heading'>\r\n                        <div className='title'>map tile</div>\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        <div className='subheading'>size</div>\r\n                        <div className='section'>{this.props.tile.width} sq x {this.props.tile.height} sq</div>\r\n                        <div className='section'>{this.props.tile.width * 5} ft x {this.props.tile.height * 5} ft</div>\r\n                        <div className='divider' />\r\n                        <div className='subheading'>terrain</div>\r\n                        <Dropdown\r\n                            options={terrainOptions}\r\n                            placeholder='select terrain'\r\n                            selectedID={this.props.tile.terrain ? this.props.tile.terrain : undefined}\r\n                            select={optionID => this.props.changeValue(this.props.tile, 'terrain', optionID)}\r\n                        />\r\n                        <div className='divider' />\r\n                        <div className='subheading'>move</div>\r\n                        <div className='section centered'>\r\n                            <Radial direction='out' click={dir => this.props.moveMapItem(this.props.tile, dir)} />\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='subheading'>resize</div>\r\n                        <div className='section centered'>\r\n                            <Radial direction='both' click={(dir, dir2) => this.props.resizeMapItem(this.props.tile, dir, dir2)} />\r\n                        </div>\r\n                        <div className='divider' />\r\n                        <div className='section'>\r\n                            <button onClick={() => this.props.cloneMapItem(this.props.tile)}>clone tile</button>\r\n                            <button onClick={() => this.props.removeMapItem(this.props.tile)}>remove tile</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Factory from '../../utils/factory';\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Map, MapItem } from '../../models/map-folio';\r\n\r\nimport MapTileCard from '../cards/map-tile-card';\r\nimport MapPanel from '../panels/map-panel';\r\n\r\ninterface Props {\r\n    map: Map;\r\n}\r\n\r\ninterface State {\r\n    map: Map;\r\n    selectedTileID: string | null;\r\n}\r\n\r\nexport default class MapEditorModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            map: props.map,\r\n            selectedTileID: null\r\n        };\r\n    }\r\n\r\n    private setSelectedTileID(id: string | null) {\r\n        this.setState({\r\n            selectedTileID: id\r\n        });\r\n    }\r\n\r\n    private addMapTile(x: number, y: number) {\r\n        const tile = Factory.createMapItem();\r\n        tile.x = x;\r\n        tile.y = y;\r\n        tile.terrain = 'flagstone';\r\n        this.state.map.items.push(tile);\r\n\r\n        this.setState({\r\n            map: this.state.map,\r\n            selectedTileID: tile.id\r\n        });\r\n    }\r\n\r\n    private moveMapItem(item: MapItem, dir: string) {\r\n        switch (dir) {\r\n            case 'N':\r\n                item.y -= 1;\r\n                break;\r\n            case 'E':\r\n                item.x += 1;\r\n                break;\r\n            case 'S':\r\n                item.y += 1;\r\n                break;\r\n            case 'W':\r\n                item.x -= 1;\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    private bigMapItem(item: MapItem, dir: string) {\r\n        switch (dir) {\r\n            case 'N':\r\n                item.y -= 1;\r\n                item.height += 1;\r\n                break;\r\n            case 'E':\r\n                item.width += 1;\r\n                break;\r\n            case 'S':\r\n                item.height += 1;\r\n                break;\r\n            case 'W':\r\n                item.x -= 1;\r\n                item.width += 1;\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    private smallMapItem(item: MapItem, dir: string) {\r\n        switch (dir) {\r\n            case 'N':\r\n                if (item.height > 1) {\r\n                    item.y += 1;\r\n                    item.height -= 1;\r\n                }\r\n                break;\r\n            case 'E':\r\n                if (item.width > 1) {\r\n                    item.width -= 1;\r\n                }\r\n                break;\r\n            case 'S':\r\n                if (item.height > 1) {\r\n                    item.height -= 1;\r\n                }\r\n                break;\r\n            case 'W':\r\n                if (item.width > 1) {\r\n                    item.x += 1;\r\n                    item.width -= 1;\r\n                }\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    private resizeMapItem(item: MapItem, dir: string, dir2: 'in' | 'out') {\r\n        switch (dir2) {\r\n            case 'in':\r\n                this.smallMapItem(item, dir);\r\n                break;\r\n            case 'out':\r\n                this.bigMapItem(item, dir);\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n    }\r\n\r\n    private cloneMapItem(item: MapItem) {\r\n        const copy = JSON.parse(JSON.stringify(item));\r\n        copy.id = Utils.guid();\r\n        copy.x += 1;\r\n        copy.y += 1;\r\n        this.state.map.items.push(copy);\r\n\r\n        this.setState({\r\n            map: this.state.map,\r\n            selectedTileID: copy.id\r\n        });\r\n    }\r\n\r\n    private removeMapItem(item: MapItem) {\r\n        const index = this.state.map.items.indexOf(item);\r\n        this.state.map.items.splice(index, 1);\r\n\r\n        this.setState({\r\n            map: this.state.map,\r\n            selectedTileID: null\r\n        });\r\n    }\r\n\r\n    private changeValue(source: any, field: string, value: any) {\r\n        source[field] = value;\r\n\r\n        this.setState({\r\n            map: this.state.map\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            let tools = null;\r\n            if (this.state.selectedTileID) {\r\n                const item = this.state.map.items.find(i => i.id === this.state.selectedTileID);\r\n                if (item) {\r\n                    tools = (\r\n                        <div className='tools'>\r\n                            <MapTileCard\r\n                                tile={item}\r\n                                moveMapItem={(mapItem, dir) => this.moveMapItem(mapItem, dir)}\r\n                                resizeMapItem={(mapItem, dir, dir2) => this.resizeMapItem(mapItem, dir, dir2 as 'in' | 'out')}\r\n                                cloneMapItem={mapItem => this.cloneMapItem(mapItem)}\r\n                                removeMapItem={mapItem => this.removeMapItem(mapItem)}\r\n                                changeValue={(source, field, value) => this.changeValue(source, field, value)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                }\r\n            } else {\r\n                tools = (\r\n                    <div className='tools'>\r\n                        <p>to add a new tile to the map, double-click on an empty grid square</p>\r\n                        <p>to edit an existing tile, click on it once to select it</p>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='map-editor'>\r\n                    {tools}\r\n                    <MapPanel\r\n                        map={this.state.map}\r\n                        mode='edit'\r\n                        selectedItemID={this.state.selectedTileID ? this.state.selectedTileID : undefined}\r\n                        setSelectedItemID={id => this.setSelectedTileID(id)}\r\n                        addMapTile={(x, y) => this.addMapTile(x, y)}\r\n                    />\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Factory from '../../utils/factory';\r\nimport Frankenstein from '../../utils/frankenstein';\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { CATEGORY_TYPES, Monster, MonsterGroup, SIZE_TYPES, Trait, TRAIT_TYPES } from '../../models/monster-group';\r\n\r\nimport MonsterCard from '../cards/monster-card';\r\nimport Checkbox from '../controls/checkbox';\r\nimport Dropdown from '../controls/dropdown';\r\nimport Selector from '../controls/selector';\r\nimport Spin from '../controls/spin';\r\nimport AbilityScorePanel from '../panels/ability-score-panel';\r\nimport TraitsPanel from '../panels/traits-panel';\r\n\r\nimport arrow from '../../resources/images/down-arrow.svg';\r\n\r\ninterface Props {\r\n    monster: Monster;\r\n    library: MonsterGroup[];\r\n    showMonsters: boolean;\r\n}\r\n\r\ninterface State {\r\n    monster: Monster;\r\n    page: 'overview' | 'abilities' | 'cbt-stats' | 'actions';\r\n    showFilter: boolean;\r\n    helpSection: string;\r\n    filter: {\r\n        size: boolean,\r\n        type: boolean,\r\n        subtype: boolean,\r\n        alignment: boolean,\r\n        challenge: boolean,\r\n        text: string\r\n    };\r\n}\r\n\r\nexport default class MonsterEditorModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            monster: props.monster,\r\n            page: 'overview',\r\n            showFilter: false,\r\n            helpSection: 'speed',\r\n            filter: {\r\n                size: true,\r\n                type: true,\r\n                subtype: false,\r\n                alignment: false,\r\n                challenge: true,\r\n                text: ''\r\n            }\r\n        };\r\n    }\r\n\r\n    private setPage(page: 'overview' | 'abilities' | 'cbt-stats' | 'actions') {\r\n        const sections = this.getHelpOptionsForPage(page);\r\n        this.setState({\r\n            page: page,\r\n            helpSection: sections[0]\r\n        });\r\n    }\r\n\r\n    private toggleFilter() {\r\n        this.setState({\r\n            showFilter: !this.state.showFilter\r\n        });\r\n    }\r\n\r\n    private setHelpSection(section: string) {\r\n        this.setState({\r\n            helpSection: section\r\n        });\r\n    }\r\n\r\n    private toggleMatch(type: 'size' | 'type' | 'subtype' | 'alignment' | 'challenge') {\r\n        // eslint-disable-next-line\r\n        this.state.filter[type] = !this.state.filter[type];\r\n        this.setState({\r\n            filter: this.state.filter\r\n        });\r\n    }\r\n\r\n    private setFilterText(value: string) {\r\n        // eslint-disable-next-line\r\n        this.state.filter.text = value;\r\n        this.setState({\r\n            filter: this.state.filter\r\n        });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Helper methods\r\n\r\n    private getHelpOptionsForPage(page: 'overview' | 'abilities' | 'cbt-stats' | 'actions') {\r\n        switch (page) {\r\n            case 'overview':\r\n                return ['speed', 'senses', 'languages', 'equipment'];\r\n            case 'abilities':\r\n                return ['str', 'dex', 'con', 'int', 'wis', 'cha', 'saves', 'skills'];\r\n            case 'cbt-stats':\r\n                return ['armor class', 'hit dice', 'resistances', 'vulnerabilities', 'immunities', 'conditions'];\r\n            case 'actions':\r\n                return ['actions'];\r\n            default:\r\n                return [];\r\n        }\r\n    }\r\n\r\n    private getMonsters() {\r\n        const monsters: Monster[] = [];\r\n        this.props.library.forEach(group => {\r\n            group.monsters.forEach(monster => {\r\n                let match = true;\r\n\r\n                if (this.state.monster.id === monster.id) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.filter.size && (this.state.monster.size !== monster.size)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.filter.type && (this.state.monster.category !== monster.category)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.filter.subtype && (this.state.monster.tag !== monster.tag)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.filter.alignment && (this.state.monster.alignment !== monster.alignment)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (this.state.filter.challenge && (this.state.monster.challenge !== monster.challenge)) {\r\n                    match = false;\r\n                }\r\n\r\n                if (match) {\r\n                    monsters.push(monster);\r\n                }\r\n            });\r\n        });\r\n\r\n        return monsters;\r\n    }\r\n\r\n    private setRandomValue(field: string, monsters: Monster[]) {\r\n        Frankenstein.setRandomValue(this.state.monster, field, monsters);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private spliceMonsters(monsters: Monster[]) {\r\n        Frankenstein.spliceMonsters(this.state.monster, monsters);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private addTrait(type: 'trait' | 'action' | 'legendary' | 'lair') {\r\n        Frankenstein.addTrait(this.state.monster, type);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private addRandomTrait(type: string, monsters: Monster[]) {\r\n        Frankenstein.addRandomTrait(this.state.monster, type, monsters);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private removeTrait(trait: Trait) {\r\n        Frankenstein.removeTrait(this.state.monster, trait);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private swapTraits(t1: Trait, t2: Trait) {\r\n        Frankenstein.swapTraits(this.state.monster, t1, t2);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private copyTrait(trait: Trait) {\r\n        Frankenstein.copyTrait(this.state.monster, trait);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private changeTrait(trait: Trait, field: string, value: any) {\r\n        (trait as any)[field] = value;\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private nudgeValue(field: string, delta: number) {\r\n        Frankenstein.nudgeValue(this.state.monster, field, delta);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private changeValue(field: string, value: any) {\r\n        Frankenstein.changeValue(this.state.monster, field, value);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // HTML render methods\r\n\r\n    private getHelpSection(monsters: Monster[]) {\r\n        switch (this.state.helpSection) {\r\n            case 'speed':\r\n                return this.getValueSection('speed', 'text', monsters);\r\n            case 'senses':\r\n                return this.getValueSection('senses', 'text', monsters);\r\n            case 'languages':\r\n                return this.getValueSection('languages', 'text', monsters);\r\n            case 'equipment':\r\n                return this.getValueSection('equipment', 'text', monsters);\r\n            case 'str':\r\n                return this.getValueSection('abilityScores.str', 'number', monsters);\r\n            case 'dex':\r\n                return this.getValueSection('abilityScores.dex', 'number', monsters);\r\n            case 'con':\r\n                return this.getValueSection('abilityScores.con', 'number', monsters);\r\n            case 'int':\r\n                return this.getValueSection('abilityScores.int', 'number', monsters);\r\n            case 'wis':\r\n                return this.getValueSection('abilityScores.wis', 'number', monsters);\r\n            case 'cha':\r\n                return this.getValueSection('abilityScores.cha', 'number', monsters);\r\n            case 'saves':\r\n                return this.getValueSection('savingThrows', 'text', monsters);\r\n            case 'skills':\r\n                return this.getValueSection('skills', 'text', monsters);\r\n            case 'armor class':\r\n                return this.getValueSection('ac', 'number', monsters);\r\n            case 'hit dice':\r\n                return this.getValueSection('hitDice', 'number', monsters);\r\n            case 'resistances':\r\n                return this.getValueSection('damage.resist', 'text', monsters);\r\n            case 'vulnerabilities':\r\n                return this.getValueSection('damage.vulnerable', 'text', monsters);\r\n            case 'immunities':\r\n                return this.getValueSection('damage.immune', 'text', monsters);\r\n            case 'conditions':\r\n                return this.getValueSection('conditionImmunities', 'text', monsters);\r\n            case 'actions':\r\n                return this.getActionsSection(monsters);\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    private getValueSection(field: string, dataType: 'text' | 'number', monsters: Monster[]) {\r\n        const values: any[] = monsters\r\n            .map(m => {\r\n                const tokens = field.split('.');\r\n                let source: any = m;\r\n                let value = null;\r\n                tokens.forEach(token => {\r\n                    if (token === tokens[tokens.length - 1]) {\r\n                        value = source[token];\r\n                    } else {\r\n                        source = source[token];\r\n                    }\r\n                });\r\n                if ((dataType === 'text') && (value === '')) {\r\n                    value = null;\r\n                }\r\n                return value;\r\n            })\r\n            .filter(v => v !== null);\r\n\r\n        const distinct: { value: any, count: number }[] = [];\r\n        if (dataType === 'number') {\r\n            let min: number | null = null;\r\n            let max: number | null = null;\r\n            values.forEach(v => {\r\n                if ((min === null) || (v < min)) {\r\n                    min = v;\r\n                }\r\n                if ((max === null) || (v > max)) {\r\n                    max = v;\r\n                }\r\n            });\r\n            if ((min !== null) && (max !== null)) {\r\n                for (let n = min; n <= max; ++n) {\r\n                    distinct.push({\r\n                        value: n,\r\n                        count: 0\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        values.forEach(v => {\r\n            const current = distinct.find(d => d.value === v);\r\n            if (current) {\r\n                current.count += 1;\r\n            } else {\r\n                distinct.push({\r\n                    value: v,\r\n                    count: 1\r\n                });\r\n            }\r\n        });\r\n\r\n        switch (dataType) {\r\n            case 'number':\r\n                Utils.sort(distinct, [{ field: 'value', dir: 'asc' }]);\r\n                break;\r\n            case 'text':\r\n                Utils.sort(distinct, [{ field: 'count', dir: 'desc' }, { field: 'value', dir: 'asc' }]);\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        if (dataType === 'text') {\r\n            const count = monsters.length - values.length;\r\n            if (count !== 0) {\r\n                distinct.push({\r\n                    value: '',\r\n                    count: monsters.length - values.length\r\n                });\r\n            }\r\n        }\r\n\r\n        const valueSections = distinct.map(d => {\r\n            const width = 100 * d.count / monsters.length;\r\n            return (\r\n                <div className='row small-up-3 medium-up-3 large-up-3 value-list' key={distinct.indexOf(d)}>\r\n                    <div className='column'>\r\n                        <div className='text-container'>\r\n                            {d.value || '(none specified)'}\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <div className='bar-container'>\r\n                            <div className='bar' style={{ width: width + '%' }} />\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <button onClick={() => this.changeValue(field, d.value)}>use this value</button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                {valueSections}\r\n                <button onClick={() => this.setRandomValue(field, monsters)}>select random value</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getActionsSection(monsters: Monster[]) {\r\n        const rows = [];\r\n        rows.push(\r\n            <div className='row small-up-4 medium-up-4 large-up-4 value-list' key='header'>\r\n                <div className='column'>\r\n                    <div className='text-container'>\r\n                        <b>type</b>\r\n                    </div>\r\n                </div>\r\n                <div className='column'>\r\n                    <div className='text-container number'>\r\n                        <b>average number</b>\r\n                    </div>\r\n                </div>\r\n                <div className='column'>\r\n                    <div className='text-container number'>\r\n                        <b>min - max</b>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        TRAIT_TYPES.forEach(type => {\r\n            let min: number | null = null;\r\n            let max: number | null = null;\r\n            let count = 0;\r\n            monsters.forEach(m => {\r\n                const n = m.traits.filter(t => t.type === type).length;\r\n                if ((min === null) || (n < min)) {\r\n                    min = n;\r\n                }\r\n                if ((max === null) || (n > max)) {\r\n                    max = n;\r\n                }\r\n                count += n;\r\n            });\r\n            const avg = Math.round(count / monsters.length);\r\n\r\n            rows.push(\r\n                <div className='row small-up-4 medium-up-4 large-up-4 value-list' key={type}>\r\n                    <div className='column'>\r\n                        <div className={count === 0 ? 'text-container disabled' : 'text-container'}>\r\n                            {Utils.traitType(type, true)}\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <div className={count === 0 ? 'text-container number disabled' : 'text-container number'}>\r\n                            {avg}\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <div className={count === 0 ? 'text-container number disabled' : 'text-container number'}>\r\n                            {min} - {max}\r\n                        </div>\r\n                    </div>\r\n                    <div className='column'>\r\n                        <button className={count === 0 ? 'disabled' : ''} onClick={() => this.addRandomTrait(type, monsters)}>add random</button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                {rows}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getFilterCard(monsters: Monster[]) {\r\n        const criteria: string[] = [];\r\n        if (this.state.filter.size) {\r\n            criteria.push('size');\r\n        }\r\n        if (this.state.filter.type) {\r\n            criteria.push('type');\r\n        }\r\n        if (this.state.filter.subtype) {\r\n            criteria.push('subtype');\r\n        }\r\n        if (this.state.filter.alignment) {\r\n            criteria.push('alignment');\r\n        }\r\n        if (this.state.filter.challenge) {\r\n            criteria.push('challenge rating');\r\n        }\r\n        const criteriaText = (criteria.length > 0) ? 'based on ' + criteria.join(', ') : 'no criteria specified';\r\n        const similar = (\r\n            <div className='section'>\r\n                {monsters.length} similar monsters ({criteriaText})\r\n            </div>\r\n        );\r\n\r\n        let filterContent = null;\r\n        if (this.state.showFilter) {\r\n            filterContent = (\r\n                <div>\r\n                    <Checkbox\r\n                        label={'size ' + this.state.monster.size}\r\n                        checked={this.state.filter.size}\r\n                        changeValue={value => this.toggleMatch('size')}\r\n                    />\r\n                    <Checkbox\r\n                        label={'type ' + this.state.monster.category}\r\n                        checked={this.state.filter.type}\r\n                        changeValue={value => this.toggleMatch('type')}\r\n                    />\r\n                    <Checkbox\r\n                        label={this.state.monster.tag ? 'subtype ' + this.state.monster.tag : 'subtype'}\r\n                        checked={this.state.filter.subtype}\r\n                        disabled={!this.state.monster.tag}\r\n                        changeValue={value => this.toggleMatch('subtype')}\r\n                    />\r\n                    <Checkbox\r\n                        label={this.state.monster.alignment ? 'alignment ' + this.state.monster.alignment : 'alignment'}\r\n                        checked={this.state.filter.alignment}\r\n                        disabled={!this.state.monster.alignment}\r\n                        changeValue={value => this.toggleMatch('alignment')}\r\n                    />\r\n                    <Checkbox\r\n                        label={'challenge rating ' + Utils.challenge(this.state.monster.challenge)}\r\n                        checked={this.state.filter.challenge}\r\n                        changeValue={value => this.toggleMatch('challenge')}\r\n                    />\r\n                    <div className='divider' />\r\n                    <button className={monsters.length < 2 ? 'disabled' : ''} onClick={() => this.spliceMonsters(monsters)}>build random monster</button>\r\n                    <div className='divider' />\r\n                    {similar}\r\n                </div>\r\n            );\r\n        } else {\r\n            filterContent = (\r\n                <div>\r\n                    {similar}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className='section'>\r\n                <div className='card'>\r\n                    <div className='heading'>\r\n                        <div className='title'>similar monsters</div>\r\n                        <img className={this.state.showFilter ? 'image rotate' : 'image'} src={arrow} alt='arrow' onClick={() => this.toggleFilter()} />\r\n                    </div>\r\n                    <div className='card-content'>\r\n                        {filterContent}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getMonsterCards(monsters: Monster[]) {\r\n        const sorted = Utils.sort(monsters);\r\n        const monsterCards = sorted.map(m => {\r\n            const showMonster = m.traits.some((t: Trait) => Utils.match(this.state.filter.text, t.name));\r\n            if (showMonster) {\r\n                return (\r\n                    <div className='section' key={m.id}>\r\n                        <MonsterCard\r\n                            combatant={m}\r\n                            mode={'template ' + this.state.page}\r\n                            filter={this.state.filter.text}\r\n                            copyTrait={trait => this.copyTrait(trait)}\r\n                        />\r\n                    </div>\r\n                );\r\n            } else {\r\n                return null;\r\n            }\r\n        }).filter(m => !!m);\r\n\r\n        return monsterCards;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    public render() {\r\n        try {\r\n            const pages = [\r\n                {\r\n                    id: 'overview',\r\n                    text: 'overview'\r\n                },\r\n                {\r\n                    id: 'abilities',\r\n                    text: 'abilities'\r\n                },\r\n                {\r\n                    id: 'cbt-stats',\r\n                    text: 'combat'\r\n                },\r\n                {\r\n                    id: 'actions',\r\n                    text: 'actions'\r\n                }\r\n            ];\r\n\r\n            let monsters: Monster[] = [];\r\n            if (this.props.showMonsters) {\r\n                monsters = this.getMonsters();\r\n            }\r\n\r\n            let content = null;\r\n            switch (this.state.page) {\r\n                case 'overview':\r\n                    const catOptions = CATEGORY_TYPES.map(cat => ({ id: cat, text: cat }));\r\n                    const sizeOptions = SIZE_TYPES.map(size => ({ id: size, text: size }));\r\n\r\n                    content = (\r\n                        <div className='row'>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>name</div>\r\n                                <input type='text' value={this.state.monster.name} onChange={event => this.changeValue('name', event.target.value)} />\r\n                                <div className='subheading'>size</div>\r\n                                <Dropdown\r\n                                    options={sizeOptions}\r\n                                    selectedID={this.state.monster.size}\r\n                                    select={optionID => this.changeValue('size', optionID)}\r\n                                />\r\n                                <div className='subheading'>type</div>\r\n                                <Dropdown\r\n                                    options={catOptions}\r\n                                    selectedID={this.state.monster.category}\r\n                                    select={optionID => this.changeValue('category', optionID)}\r\n                                />\r\n                                <div className='subheading'>subtype</div>\r\n                                <input type='text' value={this.state.monster.tag} onChange={event => this.changeValue('tag', event.target.value)} />\r\n                                <div className='subheading'>alignment</div>\r\n                                <input type='text' value={this.state.monster.alignment} onChange={event => this.changeValue('alignment', event.target.value)} />\r\n                            </div>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>challenge rating</div>\r\n                                <Spin\r\n                                    source={this.state.monster}\r\n                                    name='challenge'\r\n                                    display={value => Utils.challenge(value)}\r\n                                    nudgeValue={delta => this.nudgeValue('challenge', delta)}\r\n                                />\r\n                                <div className='subheading'>speed</div>\r\n                                <input type='text' value={this.state.monster.speed} onChange={event => this.changeValue('speed', event.target.value)} />\r\n                                <div className='subheading'>senses</div>\r\n                                <input type='text' value={this.state.monster.senses} onChange={event => this.changeValue('senses', event.target.value)} />\r\n                                <div className='subheading'>languages</div>\r\n                                <input type='text' value={this.state.monster.languages} onChange={event => this.changeValue('languages', event.target.value)} />\r\n                                <div className='subheading'>equipment</div>\r\n                                <input type='text' value={this.state.monster.equipment} onChange={event => this.changeValue('equipment', event.target.value)} />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                    break;\r\n                case 'abilities':\r\n                    content = (\r\n                        <div className='row'>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>ability scores</div>\r\n                                <AbilityScorePanel\r\n                                    edit={true}\r\n                                    combatant={this.state.monster}\r\n                                    nudgeValue={(source, type, delta) => this.nudgeValue(type, delta)}\r\n                                />\r\n                            </div>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>saving throws</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.savingThrows}\r\n                                    onChange={event => this.changeValue('savingThrows', event.target.value)}\r\n                                />\r\n                                <div className='subheading'>skills</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.skills}\r\n                                    onChange={event => this.changeValue('skills', event.target.value)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                    break;\r\n                case 'cbt-stats':\r\n                    content = (\r\n                        <div className='row'>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>armor class</div>\r\n                                <Spin\r\n                                    source={this.state.monster}\r\n                                    name='ac'\r\n                                    nudgeValue={delta => this.nudgeValue('ac', delta)}\r\n                                />\r\n                                <div className='subheading'>hit dice</div>\r\n                                <Spin\r\n                                    source={this.state.monster}\r\n                                    name='hitDice'\r\n                                    display={value => value + 'd' + Utils.hitDieType(this.state.monster.size)}\r\n                                    nudgeValue={delta => this.nudgeValue('hitDice', delta)}\r\n                                />\r\n                                <div className='subheading'>hit points</div>\r\n                                <div className='hp-value'>{this.state.monster.hpMax} hp</div>\r\n                            </div>\r\n                            <div className='columns small-6 medium-6 large-6'>\r\n                                <div className='subheading'>damage resistances</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.damage.resist}\r\n                                    onChange={event => this.changeValue('damage.resist', event.target.value)}\r\n                                />\r\n                                <div className='subheading'>damage vulnerabilities</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.damage.vulnerable}\r\n                                    onChange={event => this.changeValue('damage.vulnerable', event.target.value)}\r\n                                />\r\n                                <div className='subheading'>damage immunities</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.damage.immune}\r\n                                    onChange={event => this.changeValue('damage.immune', event.target.value)}\r\n                                />\r\n                                <div className='subheading'>condition immunities</div>\r\n                                <input\r\n                                    type='text'\r\n                                    value={this.state.monster.conditionImmunities}\r\n                                    onChange={event => this.changeValue('conditionImmunities', event.target.value)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                    break;\r\n                case 'actions':\r\n                    content = (\r\n                        <TraitsPanel\r\n                            combatant={this.state.monster}\r\n                            mode='edit'\r\n                            addTrait={type => this.addTrait(type)}\r\n                            removeTrait={trait => this.removeTrait(trait)}\r\n                            swapTraits={(t1, t2) => this.swapTraits(t1, t2)}\r\n                            changeValue={(trait, type, value) => this.changeTrait(trait, type, value)}\r\n                        />\r\n                    );\r\n                    break;\r\n                default:\r\n                    // Do nothing\r\n                    break;\r\n            }\r\n\r\n            let help = null;\r\n            if (this.props.showMonsters && (monsters.length > 1)) {\r\n                let selector = null;\r\n                if (this.getHelpOptionsForPage(this.state.page).length > 1) {\r\n                    const options = this.getHelpOptionsForPage(this.state.page).map(s => {\r\n                        return {\r\n                            id: s,\r\n                            text: s\r\n                        };\r\n                    });\r\n                    selector = (\r\n                        <Selector\r\n                            tabs={false}\r\n                            options={options}\r\n                            selectedID={this.state.helpSection}\r\n                            select={optionID => this.setHelpSection(optionID)}\r\n                        />\r\n                    );\r\n                }\r\n\r\n                help = (\r\n                    <div className='monster-help'>\r\n                        <div className='divider' />\r\n                        <div className='subheading'>information from similar monsters</div>\r\n                        {selector}\r\n                        {this.getHelpSection(monsters)}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            let monsterList = null;\r\n            if (this.props.showMonsters) {\r\n                let searchBox = null;\r\n                if ((this.state.page === 'actions') && (monsters.length > 0)) {\r\n                    searchBox = (\r\n                        <input\r\n                            type='text'\r\n                            placeholder='search for traits and actions'\r\n                            value={this.state.filter.text}\r\n                            onChange={event => this.setFilterText(event.target.value)}\r\n                        />\r\n                    );\r\n                }\r\n                monsterList = (\r\n                    <div className='columns small-4 medium-4 large-4 scrollable wide-column'>\r\n                        {this.getFilterCard(monsters)}\r\n                        {searchBox}\r\n                        {this.getMonsterCards(monsters)}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='row' style={{ height: '100%', margin: '0 -15px' }}>\r\n                    <div\r\n                        className={\r\n                            this.props.showMonsters\r\n                            ? 'columns small-8 medium-8 large-8 scrollable wide-column'\r\n                            : 'columns small-12 medium-12 large-12 scrollable wide-column'\r\n                        }\r\n                        style={{ transition: 'none' }}\r\n                    >\r\n                        <div className='section'>\r\n                            <Selector\r\n                                tabs={true}\r\n                                options={pages}\r\n                                selectedID={this.state.page}\r\n                                select={optionID => this.setPage(optionID as 'overview' | 'abilities' | 'cbt-stats' | 'actions')}\r\n                            />\r\n                            {content}\r\n                            {help}\r\n                        </div>\r\n                    </div>\r\n                    {monsterList}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { PC } from '../../models/party';\r\n\r\nimport Spin from '../controls/spin';\r\n\r\ninterface Props {\r\n    pc: PC;\r\n}\r\n\r\ninterface State {\r\n    pc: PC;\r\n}\r\n\r\nexport default class PCEditorModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            pc: props.pc\r\n        };\r\n    }\r\n\r\n    private changeValue(source: any, field: string, value: any) {\r\n        source[field] = value;\r\n\r\n        this.setState({\r\n            pc: this.state.pc\r\n        });\r\n    }\r\n\r\n    private nudgeValue(source: any, field: string, delta: number) {\r\n        const value = source[field] + delta;\r\n        this.changeValue(source, field, value);\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div className='pc-editor'>\r\n                    <div className='row section'>\r\n                        <div className='columns small-12 medium-6 large-6'>\r\n                            <div className='subheading'>character name:</div>\r\n                            <input\r\n                                type='text'\r\n                                value={this.state.pc.name}\r\n                                onChange={event => this.changeValue(this.state.pc, 'name', event.target.value)}\r\n                            />\r\n                            <div className='subheading'>player name:</div>\r\n                            <input\r\n                                type='text'\r\n                                value={this.state.pc.player}\r\n                                onChange={event => this.changeValue(this.state.pc, 'player', event.target.value)}\r\n                            />\r\n                            <div className='subheading'>race:</div>\r\n                            <input\r\n                                type='text'\r\n                                value={this.state.pc.race}\r\n                                onChange={event => this.changeValue(this.state.pc, 'race', event.target.value)}\r\n                            />\r\n                            <div className='subheading'>class:</div>\r\n                            <input\r\n                                type='text'\r\n                                value={this.state.pc.classes}\r\n                                onChange={event => this.changeValue(this.state.pc, 'classes', event.target.value)}\r\n                            />\r\n                            <div className='subheading'>level:</div>\r\n                            <Spin\r\n                                source={this.state.pc}\r\n                                name='level'\r\n                                nudgeValue={delta => this.nudgeValue(this.state.pc, 'level', delta)}\r\n                            />\r\n                        </div>\r\n                        <div className='columns small-12 medium-6 large-6'>\r\n                            <div className='subheading'>languages:</div>\r\n                            <input\r\n                                type='text'\r\n                                value={this.state.pc.languages}\r\n                                onChange={event => this.changeValue(this.state.pc, 'languages', event.target.value)}\r\n                            />\r\n                            <div className='subheading'>d&d beyond link:</div>\r\n                            <input\r\n                                type='text'\r\n                                value={this.state.pc.url}\r\n                                placeholder='https://ddb.ac/characters/...'\r\n                                onChange={event => this.changeValue(this.state.pc, 'url', event.target.value)}\r\n                            />\r\n                            <div className='subheading'>passive skills</div>\r\n                            <Spin\r\n                                source={this.state.pc}\r\n                                name='passiveInsight'\r\n                                label='insight'\r\n                                nudgeValue={delta => this.nudgeValue(this.state.pc, 'passiveInsight', delta)}\r\n                            />\r\n                            <Spin\r\n                                source={this.state.pc}\r\n                                name='passiveInvestigation'\r\n                                label='investigation'\r\n                                nudgeValue={delta => this.nudgeValue(this.state.pc, 'passiveInvestigation', delta)}\r\n                            />\r\n                            <Spin\r\n                                source={this.state.pc}\r\n                                name='passivePerception'\r\n                                label='perception'\r\n                                nudgeValue={delta => this.nudgeValue(this.state.pc, 'passivePerception', delta)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Frankenstein from '../../utils/frankenstein';\r\nimport Utils from '../../utils/utils';\r\n\r\nimport { Monster, MonsterGroup } from '../../models/monster-group';\r\n\r\nimport FilterCard from '../cards/filter-card';\r\nimport MonsterCard from '../cards/monster-card';\r\nimport Note from '../panels/note';\r\n\r\ninterface Props {\r\n    monster: Monster;\r\n    library: MonsterGroup[];\r\n}\r\n\r\ninterface State {\r\n    monster: Monster;\r\n    filter: {\r\n        name: string,\r\n        challengeMin: number;\r\n        challengeMax: number;\r\n        category: string;\r\n        size: string;\r\n    };\r\n    selectedMonsters: Monster[];\r\n}\r\n\r\nexport default class RandomMonsterModal extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            monster: this.props.monster,\r\n            filter: {\r\n                name: '',\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: 'all types',\r\n                size: 'all sizes'\r\n            },\r\n            selectedMonsters: []\r\n        };\r\n    }\r\n\r\n    private generateMonster() {\r\n        Frankenstein.spliceMonsters(this.state.monster, this.state.selectedMonsters);\r\n        this.setState({\r\n            monster: this.state.monster\r\n        });\r\n    }\r\n\r\n    private changeFilterValue(type: 'name' | 'challengeMin' | 'challengeMax' | 'category' | 'size', value: any) {\r\n        // eslint-disable-next-line\r\n        this.state.filter[type] = value;\r\n        this.setState({\r\n            filter: this.state.filter\r\n        });\r\n    }\r\n\r\n    private nudgeFilterValue(type: 'challengeMin' | 'challengeMax', delta: number) {\r\n        const value = Utils.nudgeChallenge(this.state.filter[type], delta);\r\n        this.changeFilterValue(type, value);\r\n    }\r\n\r\n    private resetFilter() {\r\n        this.setState({\r\n            filter: {\r\n                name: '',\r\n                challengeMin: 0,\r\n                challengeMax: 5,\r\n                category: 'all types',\r\n                size: 'all sizes'\r\n            }\r\n        });\r\n    }\r\n\r\n    private matchMonster(monster: Monster) {\r\n        if (monster.challenge < this.state.filter.challengeMin) {\r\n            return false;\r\n        }\r\n\r\n        if (monster.challenge > this.state.filter.challengeMax) {\r\n            return false;\r\n        }\r\n\r\n        if (this.state.filter.name !== '') {\r\n            if (!Utils.match(this.state.filter.name, monster.name)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.filter.category !== 'all types') {\r\n            if (monster.category !== this.state.filter.category) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.state.filter.size !== 'all sizes') {\r\n            if (monster.size !== this.state.filter.size) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private selectMonster(monster: Monster) {\r\n        this.state.selectedMonsters.push(monster);\r\n        this.state.selectedMonsters.sort((a, b) => {\r\n            if (a.name < b.name) { return -1; }\r\n            if (a.name > b.name) { return 1; }\r\n            return 0;\r\n        });\r\n        this.setState({\r\n            selectedMonsters: this.state.selectedMonsters\r\n        });\r\n    }\r\n\r\n    private deselectMonster(monster: Monster) {\r\n        const index = this.state.selectedMonsters.indexOf(monster);\r\n        this.state.selectedMonsters.splice(index, 1);\r\n        this.setState({\r\n            selectedMonsters: this.state.selectedMonsters\r\n        });\r\n    }\r\n\r\n    private selectAll() {\r\n        this.props.library.forEach(group => {\r\n            group.monsters.forEach(monster => {\r\n                if (this.matchMonster(monster)) {\r\n                    this.state.selectedMonsters.push(monster);\r\n                }\r\n            });\r\n        });\r\n        this.state.selectedMonsters.sort((a, b) => {\r\n            if (a.name < b.name) { return -1; }\r\n            if (a.name > b.name) { return 1; }\r\n            return 0;\r\n        });\r\n        this.setState({\r\n            selectedMonsters: this.state.selectedMonsters\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const monsters: Monster[] = [];\r\n            this.props.library.forEach(group => {\r\n                group.monsters.forEach(monster => {\r\n                    if (this.matchMonster(monster)) {\r\n                        monsters.push(monster);\r\n                    }\r\n                });\r\n            });\r\n            monsters.sort((a, b) => {\r\n                if (a.name < b.name) { return -1; }\r\n                if (a.name > b.name) { return 1; }\r\n                return 0;\r\n            });\r\n            let allMonsters: JSX.Element | JSX.Element[] = monsters.filter(m => !this.state.selectedMonsters.includes(m)).map(m => {\r\n                return (\r\n                    <MonsterCard key={m.id} combatant={m} mode='view candidate' selectMonster={monster => this.selectMonster(monster)} />\r\n                );\r\n            });\r\n            if (allMonsters.length === 0) {\r\n                allMonsters = (\r\n                    <Note\r\n                        content={(\r\n                            <div className='section'>\r\n                                there are no monsters that match the above criteria (or you have already selected them all)\r\n                            </div>\r\n                        )}\r\n                    />\r\n                );\r\n            }\r\n\r\n            const selectedMonsters: JSX.Element | JSX.Element[] = this.state.selectedMonsters.map(m => {\r\n                return (\r\n                    <MonsterCard key={m.id} combatant={m} mode='view candidate selected' deselectMonster={monster => this.deselectMonster(monster)} />\r\n                );\r\n            });\r\n            let selectedMonstersInfo = null;\r\n            if (selectedMonsters.length < 2) {\r\n                selectedMonstersInfo = (\r\n                    <Note\r\n                        content={(\r\n                            <div>\r\n                                <div className='section'>\r\n                                    in order to generate a random monster, select at least two source monsters from the list on the left\r\n                                </div>\r\n                                <button onClick={() => this.selectAll()}>select all monsters</button>\r\n                            </div>\r\n                        )}\r\n                    />\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className='random-monster-modal'>\r\n                    <div className='row' style={{ height: '100%' }}>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable'>\r\n                            <div className='heading'>all monsters</div>\r\n                            <FilterCard\r\n                                filter={this.state.filter}\r\n                                changeValue={(type, value) => this.changeFilterValue(type, value)}\r\n                                nudgeValue={(type, delta) => this.nudgeFilterValue(type, delta)}\r\n                                resetFilter={() => this.resetFilter()}\r\n                            />\r\n                            <div className='divider' />\r\n                            {allMonsters}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable'>\r\n                            <div className='heading'>selected monsters</div>\r\n                            <button\r\n                                className={this.state.selectedMonsters.length < 2 ? 'disabled' : ''}\r\n                                onClick={() => this.generateMonster()}\r\n                            >\r\n                                randomly generate monster\r\n                            </button>\r\n                            <div className='divider' />\r\n                            {selectedMonstersInfo}\r\n                            {selectedMonsters}\r\n                        </div>\r\n                        <div className='columns small-4 medium-4 large-4 scrollable'>\r\n                            <div className='heading'>output</div>\r\n                            <MonsterCard\r\n                                combatant={this.state.monster}\r\n                                mode='view generated'\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Encounter } from '../../models/encounter';\r\nimport { MonsterGroup } from '../../models/monster-group';\r\nimport { Party } from '../../models/party';\r\n\r\ninterface Props {\r\n    view: string;\r\n    blur: boolean;\r\n    library: MonsterGroup[];\r\n    parties: Party[];\r\n    encounters: Encounter[];\r\n    setView: (view: string) => void;\r\n}\r\n\r\nexport default class Navbar extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            const partiesStyle = this.props.view === 'parties' ? 'navigator-item selected' : 'navigator-item';\r\n            const libraryStyle = this.props.view === 'library' ? 'navigator-item selected' : 'navigator-item';\r\n            let encounterStyle = this.props.view === 'encounter' ? 'navigator-item selected' : 'navigator-item';\r\n            const mapStyle = this.props.view === 'maps' ? 'navigator-item selected' : 'navigator-item';\r\n            let combatStyle = this.props.view === 'combat' ? 'navigator-item selected' : 'navigator-item';\r\n\r\n            const encountersEnabled = this.props.library.length !== 0;\r\n            const combatEnabled = (this.props.parties.length !== 0) && (this.props.encounters.length !== 0);\r\n            if (!encountersEnabled) {\r\n                encounterStyle += ' disabled';\r\n            }\r\n            if (!combatEnabled) {\r\n                combatStyle += ' disabled';\r\n            }\r\n\r\n            return (\r\n                <div className={this.props.blur ? 'navbar blur' : 'navbar'}>\r\n                    <div className={partiesStyle} onClick={() => this.props.setView('parties')}>player characters</div>\r\n                    <div className={libraryStyle} onClick={() => this.props.setView('library')}>monster library</div>\r\n                    <div className={encounterStyle} onClick={() => encountersEnabled ? this.props.setView('encounter') : null}>encounter builder</div>\r\n                    <div className={mapStyle} onClick={() => this.props.setView('maps')}>map folios</div>\r\n                    <div className={combatStyle} onClick={() => combatEnabled ? this.props.setView('combat') : null}>combat manager</div>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport cog from '../../resources/images/settings.svg';\r\n\r\ninterface Props {\r\n    actions: JSX.Element | null;\r\n    blur: boolean;\r\n    openHome: () => void;\r\n    openAbout: () => void;\r\n}\r\n\r\nexport default class Titlebar extends React.Component<Props> {\r\n    public render() {\r\n        try {\r\n            return (\r\n                <div className={this.props.blur ? 'titlebar blur' : 'titlebar'}>\r\n                    <div className='app-name' onClick={() => this.props.openHome()}>dojo</div>\r\n                    {this.props.actions}\r\n                    <img className='settings-icon' src={cog} title='about' alt='about' onClick={() => this.props.openAbout()} />\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport Factory from '../utils/factory';\r\nimport Frankenstein from '../utils/frankenstein';\r\nimport Utils from '../utils/utils';\r\n\r\nimport { Combat, Combatant, CombatSetup, Notification } from '../models/combat';\r\nimport { Condition } from '../models/condition';\r\nimport { Encounter, EncounterSlot, EncounterWave } from '../models/encounter';\r\nimport { Map, MapFolio } from '../models/map-folio';\r\nimport { Monster, MonsterGroup, Trait } from '../models/monster-group';\r\nimport { Party, PC } from '../models/party';\r\n\r\nimport CombatManagerScreen from './screens/combat-manager-screen';\r\nimport EncounterBuilderScreen from './screens/encounter-builder-screen';\r\nimport HomeScreen from './screens/home-screen';\r\nimport MapFoliosScreen from './screens/map-folios-screen';\r\nimport MonsterLibraryScreen from './screens/monster-library-screen';\r\nimport PartiesScreen from './screens/parties-screen';\r\n\r\nimport AboutModal from './modals/about-modal';\r\nimport AddCombatantsModal from './modals/add-combatants-modal';\r\nimport CombatStartModal from './modals/combat-start-modal';\r\nimport ConditionModal from './modals/condition-modal';\r\nimport DemographicsModal from './modals/demographics-modal';\r\nimport MapEditorModal from './modals/map-editor-modal';\r\nimport MonsterEditorModal from './modals/monster-editor-modal';\r\nimport PCEditorModal from './modals/pc-editor-modal';\r\nimport RandomMonsterModal from './modals/random-monster-modal';\r\n\r\nimport Navbar from './panels/navbar';\r\nimport Titlebar from './panels/titlebar';\r\n\r\nimport Checkbox from './controls/checkbox';\r\n\r\nimport close from '../resources/images/close-black.svg';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\ninterface Props {\r\n    // No props; this is the root component\r\n}\r\n\r\ninterface State {\r\n    view: string;\r\n    modal: any;\r\n    filter: string;\r\n\r\n    parties: Party[];\r\n    library: MonsterGroup[];\r\n    encounters: Encounter[];\r\n    mapFolios: MapFolio[];\r\n    combats: Combat[];\r\n\r\n    selectedPartyID: string | null;\r\n    selectedMonsterGroupID: string | null;\r\n    selectedEncounterID: string | null;\r\n    selectedMapFolioID: string | null;\r\n    selectedCombatID: string | null;\r\n}\r\n\r\nexport default class Dojo extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            view: 'home',\r\n            modal: null,\r\n            filter: '',\r\n            parties: [],\r\n            library: [],\r\n            encounters: [],\r\n            mapFolios: [],\r\n            combats: [],\r\n            selectedPartyID: null,\r\n            selectedMonsterGroupID: null,\r\n            selectedEncounterID: null,\r\n            selectedMapFolioID: null,\r\n            selectedCombatID: null\r\n        };\r\n\r\n        try {\r\n            let data: State | null = null;\r\n\r\n            try {\r\n                const json = window.localStorage.getItem('data');\r\n                if (json) {\r\n                    data = JSON.parse(json);\r\n                }\r\n            } catch (ex) {\r\n                console.error('Could not parse JSON: ', ex);\r\n                data = null;\r\n            }\r\n\r\n            if (data !== null) {\r\n                data.library.forEach(g => {\r\n                    g.monsters.forEach(m => {\r\n                        m.traits.forEach(t => {\r\n                            t.uses = 0;\r\n                        });\r\n                    });\r\n                });\r\n\r\n                data.encounters.forEach(enc => {\r\n                    if (!enc.waves) {\r\n                        enc.waves = [];\r\n                    }\r\n                });\r\n\r\n                if (!data.mapFolios) {\r\n                    data.mapFolios = [];\r\n                    data.selectedMapFolioID = null;\r\n                }\r\n\r\n                data.combats.forEach(combat => {\r\n                    if (!combat.notifications) {\r\n                        combat.notifications = [];\r\n                    }\r\n                    combat.combatants.forEach(c => {\r\n                        if (c.altitude === undefined) {\r\n                            c.altitude = 0;\r\n                        }\r\n\r\n                        if (c.concentrating === undefined) {\r\n                            c.concentrating = false;\r\n                        }\r\n\r\n                        if (c.type === 'monster') {\r\n                            const m = c as Combatant & Monster;\r\n                            m.traits.forEach(t => {\r\n                                if (t.uses === undefined) {\r\n                                    t.uses = 0;\r\n                                }\r\n                            });\r\n                        }\r\n                    });\r\n                });\r\n\r\n                data.view = 'home';\r\n                data.modal = null;\r\n                data.filter = '';\r\n\r\n                this.state = data;\r\n            }\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n\r\n    public componentDidUpdate() {\r\n        let json = null;\r\n        try {\r\n            json = JSON.stringify(this.state);\r\n        } catch (ex) {\r\n            console.error('Could not stringify data: ', ex);\r\n            json = null;\r\n        }\r\n\r\n        if (json !== null) {\r\n            window.localStorage.setItem('data', json);\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Party screen\r\n\r\n    private addParty() {\r\n        const party = Factory.createParty();\r\n        party.name = 'new party';\r\n        const parties: Party[] = ([] as Party[]).concat(this.state.parties, [party]);\r\n        Utils.sort(parties);\r\n        this.setState({\r\n            parties: parties,\r\n            selectedPartyID: party.id\r\n        });\r\n    }\r\n\r\n    private removeParty() {\r\n        const party = this.state.parties.find(p => p.id === this.state.selectedPartyID);\r\n        if (party) {\r\n            const index = this.state.parties.indexOf(party);\r\n            this.state.parties.splice(index, 1);\r\n            this.setState({\r\n                parties: this.state.parties,\r\n                selectedPartyID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private addPC() {\r\n        const party = this.state.parties.find(p => p.id === this.state.selectedPartyID);\r\n        if (party) {\r\n            const pc = Factory.createPC();\r\n            pc.name = 'new pc';\r\n            party.pcs.push(pc);\r\n            this.setState({\r\n                parties: this.state.parties\r\n            });\r\n        }\r\n    }\r\n\r\n    private removePC(pc: PC) {\r\n        const party = this.state.parties.find(p => p.id === this.state.selectedPartyID);\r\n        if (party) {\r\n            const index = party.pcs.indexOf(pc);\r\n            party.pcs.splice(index, 1);\r\n            this.setState({\r\n                parties: this.state.parties\r\n            });\r\n        }\r\n    }\r\n\r\n    private sortPCs() {\r\n        const party = this.state.parties.find(p => p.id === this.state.selectedPartyID);\r\n        if (party) {\r\n            Utils.sort(party.pcs);\r\n            this.setState({\r\n                parties: this.state.parties\r\n            });\r\n        }\r\n    }\r\n\r\n    private editPC(pc: PC) {\r\n        const copy = JSON.parse(JSON.stringify(pc));\r\n        this.setState({\r\n            modal: {\r\n                type: 'pc',\r\n                pc: copy\r\n            }\r\n        });\r\n    }\r\n\r\n    private savePC() {\r\n        const party = this.state.parties.find(p => p.id === this.state.selectedPartyID);\r\n        if (party) {\r\n            const original = party.pcs.find(pc => pc.id === this.state.modal.pc.id);\r\n            if (original) {\r\n                const index = party.pcs.indexOf(original);\r\n                party.pcs[index] = this.state.modal.pc;\r\n                this.setState({\r\n                    library: this.state.library,\r\n                    modal: null\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Library screen\r\n\r\n    private addMonsterGroup() {\r\n        const group = Factory.createMonsterGroup();\r\n        group.name = 'new group';\r\n        const library = ([] as MonsterGroup[]).concat(this.state.library, [group]);\r\n        Utils.sort(library);\r\n        this.setState({\r\n            library: library,\r\n            selectedMonsterGroupID: group.id\r\n        });\r\n    }\r\n\r\n    private removeMonsterGroup() {\r\n        const group = this.state.library.find(g => g.id === this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            const index = this.state.library.indexOf(group);\r\n            this.state.library.splice(index, 1);\r\n            this.setState({\r\n                library: this.state.library,\r\n                selectedMonsterGroupID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private addMonster() {\r\n        const monster = Factory.createMonster();\r\n        monster.name = 'new monster';\r\n        const group = this.state.library.find(g => g.id === this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            group.monsters.push(monster);\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    private generateMonster() {\r\n        const monster = Factory.createMonster();\r\n        monster.name = 'generated monster';\r\n        this.setState({\r\n            modal: {\r\n                type: 'random-monster',\r\n                monster: monster\r\n            }\r\n        });\r\n    }\r\n\r\n    private removeMonster(monster: Monster) {\r\n        const group = this.state.library.find(g => g.id === this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            const index = group.monsters.indexOf(monster);\r\n            group.monsters.splice(index, 1);\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    private sortMonsters() {\r\n        const group = this.state.library.find(g => g.id === this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            Utils.sort(group.monsters);\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    private moveToGroup(monster: Monster, groupID: string) {\r\n        const sourceGroup = this.state.library.find(group => group.monsters.includes(monster));\r\n        if (sourceGroup) {\r\n            const index = sourceGroup.monsters.indexOf(monster);\r\n            sourceGroup.monsters.splice(index, 1);\r\n\r\n            const group = this.state.library.find(g => g.id === groupID);\r\n            if (group) {\r\n                group.monsters.push(monster);\r\n                Utils.sort(group.monsters);\r\n\r\n                this.setState({\r\n                    library: this.state.library\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private editMonster(monster: Monster) {\r\n        const copy = JSON.parse(JSON.stringify(monster));\r\n        this.setState({\r\n            modal: {\r\n                type: 'monster',\r\n                monster: copy,\r\n                showMonsters: false\r\n            }\r\n        });\r\n    }\r\n\r\n    private saveMonster() {\r\n        const group = this.state.library.find(g => g.id === this.state.selectedMonsterGroupID);\r\n        if (group) {\r\n            const original = group.monsters.find(m => m.id === this.state.modal.monster.id);\r\n            if (original) {\r\n                // We are editing a monster\r\n                const index = group.monsters.indexOf(original);\r\n                group.monsters[index] = this.state.modal.monster;\r\n                this.setState({\r\n                    library: this.state.library,\r\n                    modal: null\r\n                });\r\n            } else {\r\n                // We are adding a new monster\r\n                group.monsters.push(this.state.modal.monster);\r\n                this.setState({\r\n                    library: this.state.library,\r\n                    modal: null\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private toggleShowSimilarMonsters() {\r\n        // eslint-disable-next-line\r\n        this.state.modal.showMonsters = !this.state.modal.showMonsters;\r\n        this.setState({\r\n            modal: this.state.modal\r\n        });\r\n    }\r\n\r\n    private openDemographics() {\r\n        this.setState({\r\n            modal: {\r\n                type: 'demographics'\r\n            }\r\n        });\r\n    }\r\n\r\n    private cloneMonster(monster: Monster, name: string) {\r\n        const group = this.state.library.find(g => g.monsters.includes(monster));\r\n        if (group) {\r\n            const clone = Frankenstein.clone(monster, name);\r\n            group.monsters.push(clone);\r\n            Utils.sort(group.monsters);\r\n\r\n            this.setState({\r\n                library: this.state.library\r\n            });\r\n        }\r\n    }\r\n\r\n    private addOpenGameContent() {\r\n        fetch('./data/monsters.json')\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                json.forEach((data: any) => {\r\n                    try {\r\n                        if (data.name) {\r\n                            const monster = Frankenstein.createFromJSON(data);\r\n\r\n                            let groupName = monster.tag || monster.category;\r\n                            if (groupName.indexOf('swarm') === 0) {\r\n                                groupName = 'swarm';\r\n                            }\r\n                            if (groupName === 'any race') {\r\n                                groupName = 'npc';\r\n                            }\r\n\r\n                            let group = this.state.library.find(p => p.name === groupName);\r\n                            if (!group) {\r\n                                group = {\r\n                                    id: Utils.guid(),\r\n                                    name: groupName,\r\n                                    monsters: []\r\n                                };\r\n                                this.state.library.push(group);\r\n                            }\r\n                            group.monsters.push(monster);\r\n                        }\r\n                    } catch (e) {\r\n                        console.error(e);\r\n                    }\r\n                });\r\n\r\n                Utils.sort(this.state.library);\r\n\r\n                this.setState({\r\n                    view: 'library',\r\n                    library: this.state.library\r\n                });\r\n            });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Encounter screen\r\n\r\n    private addEncounter() {\r\n        const encounter = Factory.createEncounter();\r\n        encounter.name = 'new encounter';\r\n        const encounters = ([] as Encounter[]).concat(this.state.encounters, [encounter]);\r\n        Utils.sort(encounters);\r\n\r\n        this.setState({\r\n            encounters: encounters,\r\n            selectedEncounterID: encounter.id\r\n        });\r\n    }\r\n\r\n    private removeEncounter() {\r\n        const encounter = this.state.encounters.find(e => e.id === this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            const index = this.state.encounters.indexOf(encounter);\r\n            this.state.encounters.splice(index, 1);\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters,\r\n                selectedEncounterID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private addEncounterSlot(monster: Monster, waveID: string | null) {\r\n        const group = this.state.library.find(g => g.monsters.includes(monster));\r\n        if (group) {\r\n            const slot = Factory.createEncounterSlot();\r\n            slot.monsterGroupName = group.name;\r\n            slot.monsterName = monster.name;\r\n            const encounter = this.state.encounters.find(e => e.id === this.state.selectedEncounterID);\r\n            if (encounter) {\r\n                if (waveID !== null) {\r\n                    const wave = encounter.waves.find(w => w.id === waveID);\r\n                    if (wave) {\r\n                        wave.slots.push(slot);\r\n                        this.sortEncounterSlots(wave);\r\n                    }\r\n                } else {\r\n                    encounter.slots.push(slot);\r\n                    this.sortEncounterSlots(encounter);\r\n                }\r\n\r\n                this.setState({\r\n                    encounters: this.state.encounters\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeEncounterSlot(slot: EncounterSlot, waveID: string | null) {\r\n        const encounter = this.state.encounters.find(e => e.id === this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            if (waveID) {\r\n                const wave = encounter.waves.find(w => w.id === waveID);\r\n                if (wave) {\r\n                    const index = wave.slots.indexOf(slot);\r\n                    wave.slots.splice(index, 1);\r\n                }\r\n            } else {\r\n                const n = encounter.slots.indexOf(slot);\r\n                encounter.slots.splice(n, 1);\r\n            }\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters\r\n            });\r\n        }\r\n    }\r\n\r\n    private sortEncounterSlots(slotContainer: { slots: EncounterSlot[] }) {\r\n        slotContainer.slots.sort((a, b) => {\r\n            const aName = a.monsterName.toLowerCase();\r\n            const bName = b.monsterName.toLowerCase();\r\n            if (aName < bName) { return -1; }\r\n            if (aName > bName) { return 1; }\r\n            return 0;\r\n        });\r\n    }\r\n\r\n    private addWaveToEncounter() {\r\n        const encounter = this.state.encounters.find(e => e.id === this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            const wave = Factory.createEncounterWave();\r\n            wave.name = 'wave ' + (encounter.waves.length + 2);\r\n            encounter.waves.push(wave);\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters\r\n            });\r\n        }\r\n    }\r\n\r\n    private removeWave(wave: EncounterWave) {\r\n        const encounter = this.state.encounters.find(e => e.id === this.state.selectedEncounterID);\r\n        if (encounter) {\r\n            const index = encounter.waves.indexOf(wave);\r\n            encounter.waves.splice(index, 1);\r\n\r\n            this.setState({\r\n                encounters: this.state.encounters\r\n            });\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Map screen\r\n\r\n    private addMapFolio() {\r\n        const folio = Factory.createMapFolio();\r\n        folio.name = 'new folio';\r\n        const folios = ([] as MapFolio[]).concat(this.state.mapFolios, [folio]);\r\n        Utils.sort(folios);\r\n\r\n        this.setState({\r\n            mapFolios: folios,\r\n            selectedMapFolioID: folio.id\r\n        });\r\n    }\r\n\r\n    private removeMapFolio() {\r\n        const folio = this.state.mapFolios.find(f => f.id === this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            const index = this.state.mapFolios.indexOf(folio);\r\n            this.state.mapFolios.splice(index, 1);\r\n\r\n            this.setState({\r\n                mapFolios: this.state.mapFolios,\r\n                selectedMapFolioID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private addMap() {\r\n        const folio = this.state.mapFolios.find(f => f.id === this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            const map = Factory.createMap();\r\n            map.name = 'new map';\r\n            folio.maps.push(map);\r\n\r\n            this.setState({\r\n                mapFolios: this.state.mapFolios\r\n            });\r\n        }\r\n    }\r\n\r\n    private editMap(map: Map) {\r\n        const copy = JSON.parse(JSON.stringify(map));\r\n        this.setState({\r\n            modal: {\r\n                type: 'map',\r\n                map: copy\r\n            }\r\n        });\r\n    }\r\n\r\n    private saveMap() {\r\n        const folio = this.state.mapFolios.find(f => f.id === this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            const original = folio.maps.find(m => m.id === this.state.modal.map.id);\r\n            if (original) {\r\n                const index = folio.maps.indexOf(original);\r\n                folio.maps[index] = this.state.modal.map;\r\n                this.setState({\r\n                    mapFolios: this.state.mapFolios,\r\n                    modal: null\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeMap(map: Map) {\r\n        const folio = this.state.mapFolios.find(f => f.id === this.state.selectedMapFolioID);\r\n        if (folio) {\r\n            const index = folio.maps.indexOf(map);\r\n            folio.maps.splice(index, 1);\r\n            this.setState({\r\n                mapFolios: this.state.mapFolios\r\n            });\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Combat screen\r\n\r\n    private createCombat() {\r\n        const party = this.state.parties.length === 1 ? this.state.parties[0] : null;\r\n        const encounter = this.state.encounters.length === 1 ? this.state.encounters[0] : null;\r\n\r\n        const setup = Factory.createCombatSetup();\r\n        setup.partyID = party ? party.id : null;\r\n        setup.encounterID = encounter ? encounter.id : null;\r\n        if (encounter) {\r\n            setup.monsterNames = Utils.getMonsterNames(encounter);\r\n        }\r\n\r\n        this.setState({\r\n            modal: {\r\n                type: 'combat-start',\r\n                combatSetup: setup\r\n            }\r\n        });\r\n    }\r\n\r\n    private startCombat() {\r\n        const combatSetup: CombatSetup = this.state.modal.combatSetup;\r\n        const party = this.state.parties.find(p => p.id === combatSetup.partyID);\r\n        const encounter = this.state.encounters.find(e => e.id === combatSetup.encounterID);\r\n        if (party && encounter) {\r\n            const partyName = party.name || 'unnamed party';\r\n            const encounterName = encounter.name || 'unnamed encounter';\r\n\r\n            const combat = Factory.createCombat();\r\n            combat.name = partyName + ' vs ' + encounterName;\r\n            combat.encounterID = encounter.id;\r\n\r\n            // Add a copy of each PC to the encounter\r\n            party.pcs.filter(pc => pc.active).forEach(pc => {\r\n                this.addPCToCombat(pc, combat);\r\n            });\r\n\r\n            encounter.slots.forEach(slot => {\r\n                const monster = this.getMonster(slot.monsterName, slot.monsterGroupName);\r\n                if (monster) {\r\n                    const groupInitRoll = Utils.dieRoll();\r\n\r\n                    for (let n = 0; n !== slot.count; ++n) {\r\n                        let displayName = null;\r\n                        if (combatSetup.monsterNames) {\r\n                            const slotNames = combatSetup.monsterNames.find(names => names.id === slot.id);\r\n                            if (slotNames) {\r\n                                displayName = slotNames.names[n];\r\n                            }\r\n                        }\r\n\r\n                        this.addMonsterToCombat(monster, combat, displayName, combatSetup.encounterInitMode, groupInitRoll);\r\n                    }\r\n                } else {\r\n                    combat.issues.push('unknown monster: ' + slot.monsterName + ' in group ' + slot.monsterGroupName);\r\n                }\r\n            });\r\n\r\n            this.sortCombatants(combat);\r\n\r\n            if (combatSetup.folioID && combatSetup.mapID) {\r\n                const folio = this.state.mapFolios.find(f => f.id === combatSetup.folioID);\r\n                if (folio) {\r\n                    const map = folio.maps.find(m => m.id === combatSetup.mapID);\r\n                    if (map) {\r\n                        combat.map = JSON.parse(JSON.stringify(map));\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.setState({\r\n                combats: ([] as Combat[]).concat(this.state.combats, [combat]),\r\n                selectedCombatID: combat.id,\r\n                modal: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private addPCToCombat(pc: PC, combat: Combat) {\r\n        const combatant = JSON.parse(JSON.stringify(pc));\r\n\r\n        combatant.current = false;\r\n        combatant.pending = true;\r\n        combatant.active = false;\r\n        combatant.defeated = false;\r\n\r\n        combatant.displayName = pc.name;\r\n        combatant.initiative = 10;\r\n        combatant.hp = null;\r\n        combatant.conditions = [];\r\n        combatant.altitude = 0;\r\n\r\n        combat.combatants.push(combatant);\r\n    }\r\n\r\n    private addMonsterToCombat(\r\n        monster: Monster,\r\n        combat: Combat, displayName: string | null = null,\r\n        initMode: 'manual' | 'individual' | 'group' = 'individual',\r\n        groupInitRoll: number = 0) {\r\n\r\n        const combatant = JSON.parse(JSON.stringify(monster));\r\n        combatant.id = Utils.guid();\r\n\r\n        switch (initMode) {\r\n            case 'group':\r\n                combatant.initiative = Utils.modifierValue(monster.abilityScores.dex) + groupInitRoll;\r\n                break;\r\n            case 'individual':\r\n                combatant.initiative = Utils.modifierValue(monster.abilityScores.dex) + Utils.dieRoll();\r\n                break;\r\n            default:\r\n                combatant.initiative = 10;\r\n                break;\r\n        }\r\n\r\n        combatant.current = false;\r\n        combatant.pending = (initMode === 'manual');\r\n        combatant.active = (initMode !== 'manual');\r\n        combatant.defeated = false;\r\n\r\n        combatant.displayName = displayName;\r\n        combatant.hp = combatant.hpMax;\r\n        combatant.conditions = [];\r\n        combatant.altitude = 0;\r\n\r\n        combat.combatants.push(combatant);\r\n    }\r\n\r\n    private openWaveModal() {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            const encounter = this.state.encounters.find(e => e.id === combat.encounterID);\r\n            if (encounter) {\r\n                const setup = Factory.createCombatSetup();\r\n                setup.encounterID = combat.encounterID;\r\n                setup.monsterNames = Utils.getMonsterNames(encounter);\r\n\r\n                this.setState({\r\n                    modal: {\r\n                        type: 'combat-wave',\r\n                        combatSetup: setup\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private addToEncounter() {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            this.setState({\r\n                modal: {\r\n                    type: 'combat-add-combatants',\r\n                    combatants: [],\r\n                    combat: combat\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private addCombatantsFromModal() {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            this.state.modal.combatants.forEach((m: Monster) => {\r\n                this.addMonsterToCombat(m, combat);\r\n            });\r\n\r\n            this.setState({\r\n                combats: this.state.combats,\r\n                modal: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private pauseCombat() {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            combat.timestamp = new Date().toLocaleString();\r\n            this.setState({\r\n                combats: this.state.combats,\r\n                selectedCombatID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private resumeCombat(combat: Combat) {\r\n        this.setState({\r\n            selectedCombatID: combat.id\r\n        });\r\n    }\r\n\r\n    private endCombat() {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            const index = this.state.combats.indexOf(combat);\r\n            this.state.combats.splice(index, 1);\r\n            this.setState({\r\n                combats: this.state.combats,\r\n                selectedCombatID: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private makeCurrent(combatant: (Combatant & PC) | (Combatant & Monster) | null, newRound: boolean) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            // Handle start-of-turn conditions\r\n            combat.combatants.filter(actor => actor.conditions).forEach(actor => {\r\n                actor.conditions.forEach(c => {\r\n                    if (c.duration) {\r\n                        switch (c.duration.type) {\r\n                            case 'saves':\r\n                                // If it's my condition, and point is START, notify the user\r\n                                if (combat && combatant && (actor.id === combatant.id) && (c.duration.point === 'start')) {\r\n                                    combat.notifications.push({\r\n                                        id: Utils.guid(),\r\n                                        type: 'condition-save',\r\n                                        data: c,\r\n                                        combatant: combatant as Combatant & Monster\r\n                                    });\r\n                                }\r\n                                break;\r\n                            case 'combatant':\r\n                                // If this refers to me, and point is START, remove it\r\n                                if (combat && combatant && (c.duration.combatantID === combatant.id) && (c.duration.point === 'start')) {\r\n                                    const index = actor.conditions.indexOf(c);\r\n                                    actor.conditions.splice(index, 1);\r\n                                    // Notify the user\r\n                                    combat.notifications.push({\r\n                                        id: Utils.guid(),\r\n                                        type: 'condition-end',\r\n                                        data: c,\r\n                                        combatant: combatant as Combatant & Monster\r\n                                    });\r\n                                }\r\n                                break;\r\n                            case 'rounds':\r\n                                // If it's my condition, decrement the condition\r\n                                if (combatant && (actor.id === combatant.id)) {\r\n                                    c.duration.count -= 1;\r\n                                }\r\n                                // If it's now at 0, remove it\r\n                                if (c.duration.count === 0) {\r\n                                    const n = actor.conditions.indexOf(c);\r\n                                    actor.conditions.splice(n, 1);\r\n                                    if (combat) {\r\n                                        // Notify the user\r\n                                        combat.notifications.push({\r\n                                            id: Utils.guid(),\r\n                                            type: 'condition-end',\r\n                                            data: c,\r\n                                            combatant: combatant as Combatant & Monster\r\n                                        });\r\n                                    }\r\n                                }\r\n                                break;\r\n                            default:\r\n                                // Do nothing\r\n                                break;\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n\r\n            // Handle recharging traits\r\n            if (combatant && (combatant.type === 'monster')) {\r\n                (combatant as Monster).traits\r\n                    .filter(t => (t.uses > 0) && t.usage.toLowerCase().startsWith('recharge '))\r\n                    .forEach(t => {\r\n                        combat.notifications.push({\r\n                            id: Utils.guid(),\r\n                            type: 'trait-recharge',\r\n                            data: t,\r\n                            combatant: combatant as Combatant & Monster\r\n                        });\r\n                    });\r\n                (combatant as Monster).traits\r\n                    .filter(t => t.type === 'legendary')\r\n                    .forEach(t => {\r\n                        t.uses = 0;\r\n                    });\r\n            }\r\n\r\n            combat.combatants.forEach(c => {\r\n                c.current = false;\r\n            });\r\n            if (combatant) {\r\n                combatant.current = true;\r\n            }\r\n\r\n            if (newRound) {\r\n                combat.round += 1;\r\n            }\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private makeActive(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            combatant.pending = false;\r\n            combatant.active = true;\r\n            combatant.defeated = false;\r\n\r\n            this.sortCombatants(combat);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private makeDefeated(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        combatant.pending = false;\r\n        combatant.active = false;\r\n        combatant.defeated = true;\r\n\r\n        if (combatant.current) {\r\n            this.endTurn(combatant);\r\n        } else {\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private addWaveToCombat() {\r\n        const combatSetup: CombatSetup = this.state.modal.combatSetup;\r\n        const encounter = this.state.encounters.find(e => e.id === combatSetup.encounterID);\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combatSetup && encounter && combat) {\r\n            const wave = encounter.waves.find(w => w.id === combatSetup.waveID);\r\n            if (wave) {\r\n                wave.slots.forEach(slot => {\r\n                    const monster = this.getMonster(slot.monsterName, slot.monsterGroupName);\r\n                    if (monster) {\r\n                        const init = parseInt(Utils.modifier(monster.abilityScores.dex), 10);\r\n                        const groupRoll = Utils.dieRoll();\r\n\r\n                        for (let n = 0; n !== slot.count; ++n) {\r\n                            const singleRoll = Utils.dieRoll();\r\n\r\n                            const combatant = JSON.parse(JSON.stringify(monster));\r\n                            combatant.id = Utils.guid();\r\n\r\n                            combatant.displayName = null;\r\n                            if (combatSetup.monsterNames) {\r\n                                const slotNames = combatSetup.monsterNames.find(names => names.id === slot.id);\r\n                                if (slotNames) {\r\n                                    combatant.displayName = slotNames.names[n];\r\n                                }\r\n                            }\r\n\r\n                            switch (combatSetup.encounterInitMode) {\r\n                                case 'manual':\r\n                                    combatant.initiative = 10;\r\n                                    break;\r\n                                case 'group':\r\n                                    combatant.initiative = init + groupRoll;\r\n                                    break;\r\n                                case 'individual':\r\n                                    combatant.initiative = init + singleRoll;\r\n                                    break;\r\n                                default:\r\n                                    // Do nothing\r\n                                    break;\r\n                            }\r\n\r\n                            combatant.current = false;\r\n                            combatant.pending = (this.state.modal.combatSetup.encounterInitMode === 'manual');\r\n                            combatant.active = (this.state.modal.combatSetup.encounterInitMode !== 'manual');\r\n                            combatant.defeated = false;\r\n\r\n                            combatant.hp = combatant.hpMax;\r\n                            combatant.conditions = [];\r\n\r\n                            if (combat) {\r\n                                combat.combatants.push(combatant);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (combat) {\r\n                            const issue = 'unknown monster: ' + slot.monsterName + ' in group ' + slot.monsterGroupName;\r\n                            combat.issues.push(issue);\r\n                        }\r\n                    }\r\n                });\r\n\r\n                this.sortCombatants(combat);\r\n\r\n                this.setState({\r\n                    combats: this.state.combats,\r\n                    modal: null\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeCombatant(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            const index = combat.combatants.indexOf(combatant);\r\n            combat.combatants.splice(index, 1);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private mapAdd(combatant: ((Combatant & PC) | (Combatant & Monster)), x: number, y: number) {\r\n        const item = Factory.createMapItem();\r\n        item.id = combatant.id;\r\n        item.type = combatant.type as 'pc' | 'monster';\r\n        item.x = x;\r\n        item.y = y;\r\n        let size = 1;\r\n        if (combatant.type === 'monster') {\r\n            size = Utils.miniSize((combatant as Monster).size);\r\n        }\r\n        item.height = size;\r\n        item.width = size;\r\n\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat && combat.map) {\r\n            combat.map.items.push(item);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private mapMove(combatant: (Combatant & PC) | (Combatant & Monster), dir: string) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat && combat.map) {\r\n            const item = combat.map.items.find(i => i.id === combatant.id);\r\n            if (item) {\r\n                switch (dir) {\r\n                    case 'N':\r\n                        item.y -= 1;\r\n                        break;\r\n                    case 'NE':\r\n                        item.x += 1;\r\n                        item.y -= 1;\r\n                        break;\r\n                    case 'E':\r\n                        item.x += 1;\r\n                        break;\r\n                    case 'SE':\r\n                        item.x += 1;\r\n                        item.y += 1;\r\n                        break;\r\n                    case 'S':\r\n                        item.y += 1;\r\n                        break;\r\n                    case 'SW':\r\n                        item.x -= 1;\r\n                        item.y += 1;\r\n                        break;\r\n                    case 'W':\r\n                        item.x -= 1;\r\n                        break;\r\n                    case 'NW':\r\n                        item.x -= 1;\r\n                        item.y -= 1;\r\n                        break;\r\n                    default:\r\n                        // Do nothing\r\n                        break;\r\n                }\r\n\r\n                this.setState({\r\n                    combats: this.state.combats\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private mapRemove(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat && combat.map) {\r\n            const item = combat.map.items.find(i => i.id === combatant.id);\r\n            if (item) {\r\n                const index = combat.map.items.indexOf(item);\r\n                combat.map.items.splice(index, 1);\r\n\r\n                this.setState({\r\n                    combats: this.state.combats\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private endTurn(combatant: (Combatant & PC) | (Combatant & Monster)) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            // Handle end-of-turn conditions\r\n            combat.combatants.filter(actor => actor.conditions).forEach(actor => {\r\n                actor.conditions.forEach(c => {\r\n                    if (c.duration) {\r\n                        switch (c.duration.type) {\r\n                            case 'saves':\r\n                                // If it's my condition, and point is END, notify the user\r\n                                if (combat && (actor.id === combatant.id) && (c.duration.point === 'end')) {\r\n                                    const saveNotification = Factory.createNotification();\r\n                                    saveNotification.type = 'condition-save';\r\n                                    saveNotification.data = c;\r\n                                    saveNotification.combatant = combatant as Combatant & Monster;\r\n                                    combat.notifications.push(saveNotification);\r\n                                }\r\n                                break;\r\n                            case 'combatant':\r\n                                // If this refers to me, and point is END, remove it\r\n                                if (combat && (c.duration.combatantID === combatant.id) && (c.duration.point === 'end')) {\r\n                                    const n = actor.conditions.indexOf(c);\r\n                                    actor.conditions.splice(n, 1);\r\n                                    // Notify the user\r\n                                    const endNotification = Factory.createNotification();\r\n                                    endNotification.type = 'condition-end';\r\n                                    endNotification.data = c;\r\n                                    endNotification.combatant = combatant as Combatant & Monster;\r\n                                    combat.notifications.push(endNotification);\r\n                                }\r\n                                break;\r\n                            case 'rounds':\r\n                                // We check this at the beginning of each turn, not at the end\r\n                                break;\r\n                            default:\r\n                                // Do nothing\r\n                                break;\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n\r\n            const active = combat.combatants.filter(c => {\r\n                return c.current || (!c.pending && c.active && !c.defeated);\r\n            });\r\n            if (active.length === 0) {\r\n                // There's no-one left in the fight\r\n                this.makeCurrent(null, false);\r\n            } else if ((active.length === 1) && (active[0].defeated)) {\r\n                // The only person in the fight is me, and I'm defeated\r\n                this.makeCurrent(null, false);\r\n            } else {\r\n                let index = active.indexOf(combatant) + 1;\r\n                let newRound = false;\r\n                if (index >= active.length) {\r\n                    index = 0;\r\n                    newRound = true;\r\n                }\r\n                this.makeCurrent(active[index], newRound);\r\n            }\r\n        }\r\n    }\r\n\r\n    private changeHP(combatant: Combatant & Monster, hp: number, temp: number) {\r\n        combatant.hp = hp;\r\n        combatant.hpTemp = temp;\r\n\r\n        this.setState({\r\n            combats: this.state.combats\r\n        });\r\n    }\r\n\r\n    private addCondition(combatant: Combatant & Monster) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            const condition = Factory.createCondition();\r\n            condition.name = 'blinded';\r\n\r\n            this.setState({\r\n                modal: {\r\n                    type: 'condition-add',\r\n                    condition: condition,\r\n                    combatant: combatant,\r\n                    combat: combat\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private addConditionFromModal() {\r\n        this.state.modal.combatant.conditions.push(this.state.modal.condition);\r\n\r\n        this.setState({\r\n            combats: this.state.combats,\r\n            modal: null\r\n        });\r\n    }\r\n\r\n    private editCondition(combatant: Combatant & Monster, condition: Condition) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            this.setState({\r\n                modal: {\r\n                    type: 'condition-edit',\r\n                    condition: condition,\r\n                    combatant: combatant,\r\n                    combat: combat\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private editConditionFromModal() {\r\n        const conditions: Condition[] = this.state.modal.combatant.conditions;\r\n        const original = conditions.find(c => c.id === this.state.modal.condition.id);\r\n        if (original) {\r\n            const index = conditions.indexOf(original);\r\n            // eslint-disable-next-line\r\n            conditions[index] = this.state.modal.condition;\r\n\r\n            this.setState({\r\n                combats: this.state.combats,\r\n                modal: null\r\n            });\r\n        }\r\n    }\r\n\r\n    private removeCondition(combatant: Combatant & Monster, conditionID: string) {\r\n        const condition = combatant.conditions.find(c => c.id === conditionID);\r\n        if (condition) {\r\n            const index = combatant.conditions.indexOf(condition);\r\n            combatant.conditions.splice(index, 1);\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    private sortCombatants(combat: Combat) {\r\n        combat.combatants.sort((a, b) => {\r\n            // First sort by initiative, descending\r\n            if (a.initiative && b.initiative && (a.initiative < b.initiative)) { return 1; }\r\n            if (a.initiative && b.initiative && (a.initiative > b.initiative)) { return -1; }\r\n            // Then sort by name, ascending\r\n            if (a.name < b.name) { return -1; }\r\n            if (a.name > b.name) { return 1; }\r\n            return 0;\r\n        });\r\n    }\r\n\r\n    private closeNotification(notification: Notification, removeCondition: boolean) {\r\n        const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n        if (combat) {\r\n            const index = combat.notifications.indexOf(notification);\r\n            combat.notifications.splice(index, 1);\r\n\r\n            if (removeCondition && notification.combatant && notification.data) {\r\n                const conditionIndex = notification.combatant.conditions.indexOf(notification.data as Condition);\r\n                notification.combatant.conditions.splice(conditionIndex, 1);\r\n            }\r\n\r\n            this.setState({\r\n                combats: this.state.combats\r\n            });\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    private setView(view: string) {\r\n        this.setState({\r\n            view: view\r\n        });\r\n    }\r\n\r\n    private openAbout() {\r\n        this.setState({\r\n            modal: {\r\n                type: 'about'\r\n            }\r\n        });\r\n    }\r\n\r\n    private closeModal() {\r\n        this.setState({\r\n            modal: null\r\n        });\r\n    }\r\n\r\n    private selectParty(party: Party | null) {\r\n        this.setState({\r\n            selectedPartyID: party ? party.id : null\r\n        });\r\n    }\r\n\r\n    private selectMonsterGroup(group: MonsterGroup | null) {\r\n        this.setState({\r\n            selectedMonsterGroupID: group ? group.id : null\r\n        });\r\n    }\r\n\r\n    private selectEncounter(encounter: Encounter | null) {\r\n        this.setState({\r\n            selectedEncounterID: encounter ? encounter.id : null\r\n        });\r\n    }\r\n\r\n    private selectMapFolio(mapFolio: MapFolio | null) {\r\n        this.setState({\r\n            selectedMapFolioID: mapFolio ? mapFolio.id : null\r\n        });\r\n    }\r\n\r\n    private resetAll() {\r\n        this.setState({\r\n            parties: [],\r\n            selectedPartyID: null,\r\n            library: [],\r\n            selectedMonsterGroupID: null,\r\n            encounters: [],\r\n            selectedEncounterID: null,\r\n            mapFolios: [],\r\n            selectedMapFolioID: null,\r\n            combats: [],\r\n            selectedCombatID: null\r\n        });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    private getMonster(monsterName: string, groupName: string) {\r\n        const group = this.state.library.find(p => p.name === groupName);\r\n        if (group) {\r\n            return group.monsters.find(monster => monster.name === monsterName);\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    private changeValue(combatant: any, type: string, value: any) {\r\n        switch (type) {\r\n            case 'hp':\r\n                value = Math.min(value, combatant.hpMax);\r\n                value = Math.max(value, 0);\r\n                break;\r\n            case 'hpTemp':\r\n                value = Math.max(value, 0);\r\n                break;\r\n            case 'level':\r\n                value = Math.max(value, 1);\r\n                value = (combatant.player !== undefined) ? Math.min(value, 20) : Math.min(value, 6);\r\n                break;\r\n            case 'count':\r\n                value = Math.max(value, 1);\r\n                break;\r\n            case 'hitDice':\r\n                value = Math.max(value, 1);\r\n                break;\r\n            default:\r\n                // Do nothing\r\n                break;\r\n        }\r\n\r\n        const tokens = type.split('.');\r\n        let obj = combatant;\r\n        for (let n = 0; n !== tokens.length; ++n) {\r\n            const token = tokens[n];\r\n            if (n === tokens.length - 1) {\r\n                obj[token] = value;\r\n            } else {\r\n                obj = obj[token];\r\n            }\r\n        }\r\n\r\n        Utils.sort(this.state.parties);\r\n        Utils.sort(this.state.library);\r\n        Utils.sort(this.state.encounters);\r\n\r\n        if (type === 'initiative') {\r\n            if (!(combatant as Combatant).pending) {\r\n                const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n                this.sortCombatants(combat as Combat);\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            parties: this.state.parties,\r\n            library: this.state.library,\r\n            encounters: this.state.encounters,\r\n            combats: this.state.combats,\r\n            selectedPartyID: this.state.selectedPartyID,\r\n            selectedMonsterGroupID: this.state.selectedMonsterGroupID,\r\n            selectedEncounterID: this.state.selectedEncounterID,\r\n            selectedCombatID: this.state.selectedCombatID,\r\n            modal: this.state.modal\r\n        });\r\n    }\r\n\r\n    private nudgeValue(combatant: any, type: string, delta: number) {\r\n        const tokens = type.split('.');\r\n        let obj = combatant;\r\n        for (let n = 0; n !== tokens.length; ++n) {\r\n            const token = tokens[n];\r\n            if (n === tokens.length - 1) {\r\n                let value = null;\r\n                value = (token === 'challenge') ? Utils.nudgeChallenge(obj.challenge, delta) : obj[token] + delta;\r\n                this.changeValue(combatant, type, value);\r\n            } else {\r\n                obj = obj[token];\r\n            }\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    private getActions() {\r\n        switch (this.state.view) {\r\n            case 'parties':\r\n            case 'encounter':\r\n            case 'maps':\r\n                return (\r\n                    <div className='actions'>\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='search'\r\n                                value={this.state.filter}\r\n                                onChange={event => this.changeValue(this.state, 'filter', event.target.value)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                );\r\n            case 'library':\r\n                return (\r\n                    <div className='actions'>\r\n                        <div className='section'>\r\n                            <button onClick={() => this.openDemographics()}>demographics</button>\r\n                        </div>\r\n                        <div className='section'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='search'\r\n                                value={this.state.filter}\r\n                                onChange={event => this.changeValue(this.state, 'filter', event.target.value)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                );\r\n            case 'combat':\r\n                const combat = this.state.combats.find(c => c.id === this.state.selectedCombatID);\r\n                if (combat) {\r\n                    const encounter = this.state.encounters.find(e => e.id === combat.encounterID);\r\n                    if (encounter) {\r\n                        let xp = 0;\r\n                        combat.combatants.filter(c => c.type === 'monster')\r\n                            .forEach(combatant => {\r\n                                xp += Utils.experience((combatant as Combatant & Monster).challenge);\r\n                            });\r\n                        return (\r\n                            <div className='actions'>\r\n                                <div className='section'>\r\n                                    <div className='text'>round: {combat.round}</div>\r\n                                </div>\r\n                                <div className='section'>\r\n                                    <div className='text'>xp: {xp}</div>\r\n                                </div>\r\n                                <div className='section' style={{ display: encounter.waves.length === 0 ? 'none' : ''}}>\r\n                                    <button onClick={() => this.openWaveModal()}>add wave</button>\r\n                                </div>\r\n                                <div className='section'>\r\n                                    <button onClick={() => this.addToEncounter()}>add combatants</button>\r\n                                </div>\r\n                                <div className='section'>\r\n                                    <button onClick={() => this.pauseCombat()}>pause encounter</button>\r\n                                </div>\r\n                                <div className='section'>\r\n                                    <button onClick={() => this.endCombat()}>end encounter</button>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    }\r\n                } else {\r\n                    return (\r\n                        <div className='actions'>\r\n                            <div className='section'>\r\n                                <input\r\n                                    type='text'\r\n                                    placeholder='search'\r\n                                    value={this.state.filter}\r\n                                    onChange={event => this.changeValue(this.state, 'filter', event.target.value)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private getContent() {\r\n        switch (this.state.view) {\r\n            case 'home':\r\n                return (\r\n                    <HomeScreen\r\n                        library={this.state.library}\r\n                        addOpenGameContent={() => this.addOpenGameContent()}\r\n                    />\r\n                );\r\n            case 'parties':\r\n                return (\r\n                    <PartiesScreen\r\n                        parties={this.state.parties}\r\n                        selection={this.state.parties.find(p => p.id === this.state.selectedPartyID) || null}\r\n                        filter={this.state.filter}\r\n                        selectParty={party => this.selectParty(party)}\r\n                        addParty={() => this.addParty()}\r\n                        removeParty={() => this.removeParty()}\r\n                        addPC={() => this.addPC()}\r\n                        editPC={pc => this.editPC(pc)}\r\n                        removePC={pc => this.removePC(pc)}\r\n                        sortPCs={() => this.sortPCs()}\r\n                        changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                        nudgeValue={(combatant, type, delta) => this.nudgeValue(combatant, type, delta)}\r\n                    />\r\n                );\r\n            case 'library':\r\n                return (\r\n                    <MonsterLibraryScreen\r\n                        library={this.state.library}\r\n                        selection={this.state.library.find(g => g.id === this.state.selectedMonsterGroupID) || null}\r\n                        filter={this.state.filter}\r\n                        selectMonsterGroup={group => this.selectMonsterGroup(group)}\r\n                        addMonsterGroup={() => this.addMonsterGroup()}\r\n                        removeMonsterGroup={() => this.removeMonsterGroup()}\r\n                        addMonster={() => this.addMonster()}\r\n                        generateMonster={() => this.generateMonster()}\r\n                        removeMonster={monster => this.removeMonster(monster)}\r\n                        sortMonsters={() => this.sortMonsters()}\r\n                        changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                        nudgeValue={(combatant, type, delta) => this.nudgeValue(combatant, type, delta)}\r\n                        editMonster={combatant => this.editMonster(combatant)}\r\n                        cloneMonster={(combatant, name) => this.cloneMonster(combatant, name)}\r\n                        moveToGroup={(combatant, groupID) => this.moveToGroup(combatant, groupID)}\r\n                    />\r\n                );\r\n            case 'encounter':\r\n                return (\r\n                    <EncounterBuilderScreen\r\n                        encounters={this.state.encounters}\r\n                        selection={this.state.encounters.find(e => e.id === this.state.selectedEncounterID) || null}\r\n                        filter={this.state.filter}\r\n                        parties={this.state.parties}\r\n                        library={this.state.library}\r\n                        selectEncounter={encounter => this.selectEncounter(encounter)}\r\n                        addEncounter={() => this.addEncounter()}\r\n                        removeEncounter={() => this.removeEncounter()}\r\n                        addWave={() => this.addWaveToEncounter()}\r\n                        removeWave={wave => this.removeWave(wave)}\r\n                        getMonster={(monsterName, groupName) => this.getMonster(monsterName, groupName) || null}\r\n                        addEncounterSlot={(monster, waveID) => this.addEncounterSlot(monster, waveID)}\r\n                        removeEncounterSlot={(slot, waveID) => this.removeEncounterSlot(slot, waveID)}\r\n                        nudgeValue={(slot, type, delta) => this.nudgeValue(slot, type, delta)}\r\n                        changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                    />\r\n                );\r\n            case 'maps':\r\n                return (\r\n                    <MapFoliosScreen\r\n                        mapFolios={this.state.mapFolios}\r\n                        selection={this.state.mapFolios.find(f => f.id === this.state.selectedMapFolioID) || null}\r\n                        filter={this.state.filter}\r\n                        selectMapFolio={folio => this.selectMapFolio(folio)}\r\n                        addMapFolio={() => this.addMapFolio()}\r\n                        removeMapFolio={() => this.removeMapFolio()}\r\n                        addMap={() => this.addMap()}\r\n                        editMap={map => this.editMap(map)}\r\n                        removeMap={map => this.removeMap(map)}\r\n                        changeValue={(source, type, value) => this.changeValue(source, type, value)}\r\n                    />\r\n                );\r\n            case 'combat':\r\n                return (\r\n                    <CombatManagerScreen\r\n                        combats={this.state.combats}\r\n                        combat={this.state.combats.find(c => c.id === this.state.selectedCombatID) || null}\r\n                        filter={this.state.filter}\r\n                        createCombat={() => this.createCombat()}\r\n                        resumeEncounter={pausedCombat => this.resumeCombat(pausedCombat)}\r\n                        nudgeValue={(combatant, type, delta) => this.nudgeValue(combatant, type, delta)}\r\n                        changeValue={(combatant, type, value) => this.changeValue(combatant, type, value)}\r\n                        makeCurrent={(combatant) => this.makeCurrent(combatant, false)}\r\n                        makeActive={(combatant) => this.makeActive(combatant)}\r\n                        makeDefeated={(combatant) => this.makeDefeated(combatant)}\r\n                        removeCombatant={(combatant) => this.removeCombatant(combatant)}\r\n                        addCondition={(combatant) => this.addCondition(combatant)}\r\n                        editCondition={(combatant, condition) => this.editCondition(combatant, condition)}\r\n                        removeCondition={(combatant, conditionID) => this.removeCondition(combatant, conditionID)}\r\n                        mapAdd={(combatant, x, y) => this.mapAdd(combatant, x, y)}\r\n                        mapMove={(combatant, dir) => this.mapMove(combatant, dir)}\r\n                        mapRemove={combatant => this.mapRemove(combatant)}\r\n                        endTurn={(combatant) => this.endTurn(combatant)}\r\n                        changeHP={(combatant, hp, temp) => this.changeHP(combatant, hp, temp)}\r\n                        close={(notification, removeCondition) => this.closeNotification(notification, removeCondition)}\r\n                    />\r\n                );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private getModal() {\r\n        if (this.state.modal) {\r\n            let modalSidebar = false;\r\n            let modalTitle = null;\r\n            let modalContent = null;\r\n            let modalAllowScroll = true;\r\n\r\n            const modalButtons = {\r\n                left: [] as JSX.Element[],\r\n                right: [\r\n                    <button key='close' onClick={() => this.closeModal()}>close</button>\r\n                ] as JSX.Element[]\r\n            };\r\n\r\n            switch (this.state.modal.type) {\r\n                case 'about':\r\n                    modalSidebar = true;\r\n                    modalContent = (\r\n                        <AboutModal\r\n                            resetAll={() => this.resetAll()}\r\n                            changeValue={(source, type, value) => this.changeValue(source, type, value)}\r\n                        />\r\n                    );\r\n                    modalButtons.right = [];\r\n                    break;\r\n                case 'demographics':\r\n                    modalSidebar = true;\r\n                    modalContent = (\r\n                        <DemographicsModal\r\n                            library={this.state.library}\r\n                        />\r\n                    );\r\n                    modalButtons.right = [];\r\n                    break;\r\n                case 'pc':\r\n                        modalTitle = 'pc editor';\r\n                        modalContent = (\r\n                            <PCEditorModal\r\n                                pc={this.state.modal.pc}\r\n                            />\r\n                        );\r\n                        modalButtons.right = [\r\n                            <button key='save' onClick={() => this.savePC()}>save</button>,\r\n                            <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                        ];\r\n                        break;\r\n                case 'monster':\r\n                    modalTitle = 'monster editor';\r\n                    modalContent = (\r\n                        <MonsterEditorModal\r\n                            monster={this.state.modal.monster}\r\n                            library={this.state.library}\r\n                            showMonsters={this.state.modal.showMonsters}\r\n                        />\r\n                    );\r\n                    modalAllowScroll = false;\r\n                    modalButtons.left = [\r\n                        (\r\n                            <Checkbox\r\n                                key='similar'\r\n                                label='similar monsters'\r\n                                checked={this.state.modal.showMonsters}\r\n                                changeValue={() => this.toggleShowSimilarMonsters()}\r\n                            />\r\n                        )\r\n                    ];\r\n                    modalButtons.right = [\r\n                        <button key='save' onClick={() => this.saveMonster()}>save</button>,\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                case 'random-monster':\r\n                    modalTitle = 'random monster generator';\r\n                    modalContent = (\r\n                        <RandomMonsterModal\r\n                            monster={this.state.modal.monster}\r\n                            library={this.state.library}\r\n                        />\r\n                    );\r\n                    modalAllowScroll = false;\r\n                    modalButtons.right = [\r\n                        <button key='save' onClick={() => this.saveMonster()}>save</button>,\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                case 'map':\r\n                    modalTitle = 'map editor';\r\n                    modalContent = (\r\n                        <MapEditorModal\r\n                            map={this.state.modal.map}\r\n                        />\r\n                    );\r\n                    modalAllowScroll = false;\r\n                    modalButtons.right = [\r\n                        <button key='save' onClick={() => this.saveMap()}>save</button>,\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                case 'combat-start':\r\n                    modalTitle = 'start a new encounter';\r\n                    modalContent = (\r\n                        <CombatStartModal\r\n                            combatSetup={this.state.modal.combatSetup}\r\n                            parties={this.state.parties}\r\n                            encounters={this.state.encounters}\r\n                            mapFolios={this.state.mapFolios}\r\n                            getMonster={(monsterName, groupName) => this.getMonster(monsterName, groupName) || null}\r\n                            notify={() => this.setState({modal: this.state.modal})}\r\n                        />\r\n                    );\r\n                    modalAllowScroll = false;\r\n                    modalButtons.right = [\r\n                        (\r\n                            <button\r\n                                key='start encounter'\r\n                                className={this.state.modal.combatSetup.partyID && this.state.modal.combatSetup.encounterID ? '' : 'disabled'}\r\n                                onClick={() => this.startCombat()}\r\n                            >\r\n                                start encounter\r\n                            </button>\r\n                        ),\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                case 'combat-wave':\r\n                    modalTitle = 'encounter waves';\r\n                    modalContent = (\r\n                        <CombatStartModal\r\n                            combatSetup={this.state.modal.combatSetup}\r\n                            encounters={this.state.encounters}\r\n                            getMonster={(monsterName, groupName) => this.getMonster(monsterName, groupName) || null}\r\n                            notify={() => this.setState({modal: this.state.modal})}\r\n                        />\r\n                    );\r\n                    modalAllowScroll = false;\r\n                    modalButtons.right = [\r\n                        (\r\n                            <button\r\n                                key='add wave'\r\n                                className={this.state.modal.combatSetup.waveID !== null ? '' : 'disabled'}\r\n                                onClick={() => this.addWaveToCombat()}\r\n                            >\r\n                                add wave\r\n                            </button>\r\n                        ),\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                case 'combat-add-combatants':\r\n                        modalTitle = 'add combatants';\r\n                        modalContent = (\r\n                            <AddCombatantsModal\r\n                                combatants={this.state.modal.combatants}\r\n                                library={this.state.library}\r\n                            />\r\n                        );\r\n                        modalAllowScroll = false;\r\n                        modalButtons.right = [\r\n                            (\r\n                                <button\r\n                                    key='add combatants'\r\n                                    onClick={() => this.addCombatantsFromModal()}\r\n                                >\r\n                                    add combatants\r\n                                </button>\r\n                            ),\r\n                            <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                        ];\r\n                        break;\r\n                case 'condition-add':\r\n                    modalTitle = 'add a condition';\r\n                    modalContent = (\r\n                        <ConditionModal\r\n                            condition={this.state.modal.condition}\r\n                            combatant={this.state.modal.combatant}\r\n                            combat={this.state.modal.combat}\r\n                        />\r\n                    );\r\n                    modalAllowScroll = false;\r\n                    modalButtons.right = [\r\n                        <button key='add' onClick={() => this.addConditionFromModal()}>add</button>,\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                case 'condition-edit':\r\n                    modalTitle = 'edit condition';\r\n                    modalContent = (\r\n                        <ConditionModal\r\n                            condition={this.state.modal.condition}\r\n                            combatant={this.state.modal.combatant}\r\n                            combat={this.state.modal.combat}\r\n                        />\r\n                    );\r\n                    modalButtons.right = [\r\n                        <button key='save' onClick={() => this.editConditionFromModal()}>save</button>,\r\n                        <button key='cancel' onClick={() => this.closeModal()}>cancel</button>\r\n                    ];\r\n                    break;\r\n                default:\r\n                    // Do nothing\r\n                    break;\r\n            }\r\n\r\n            return (\r\n                <div className='overlay' onClick={() => modalSidebar ? this.closeModal() : null}>\r\n                    <div className={modalSidebar ? 'modal sidebar' : 'modal'} onClick={e => e.stopPropagation()}>\r\n                        <div className='modal-header'>\r\n                            <div className='title'>{modalTitle}</div>\r\n                            {modalSidebar ? <img className='image' src={close} alt='close' onClick={() => this.closeModal()} /> : null}\r\n                        </div>\r\n                        <div className={modalAllowScroll ? 'modal-content scrollable' : 'modal-content'}>\r\n                            {modalContent}\r\n                        </div>\r\n                        <div className='modal-footer'>\r\n                            <div className='left'>{modalButtons.left}</div>\r\n                            <div className='right'>{modalButtons.right}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const content = this.getContent();\r\n            const actions = this.getActions();\r\n            const modal = this.getModal();\r\n\r\n            return (\r\n                <div className='dojo'>\r\n                    <Titlebar\r\n                        actions={actions}\r\n                        blur={modal !== null}\r\n                        openHome={() => this.setView('home')}\r\n                        openAbout={() => this.openAbout()}\r\n                    />\r\n                    <div className={(modal === null) ? 'page-content' : 'page-content blur'}>\r\n                        {content}\r\n                    </div>\r\n                    <Navbar\r\n                        view={this.state.view}\r\n                        parties={this.state.parties}\r\n                        library={this.state.library}\r\n                        encounters={this.state.encounters}\r\n                        blur={modal !== null}\r\n                        setView={view => this.setView(view)}\r\n                    />\r\n                    {modal}\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './style/css/foundation.css';\r\nimport './style/scss/app.scss';\r\nimport './style/scss/controls.scss';\r\n\r\nimport Dojo from './components/dojo';\r\n\r\nReactDOM.render(<Dojo />, document.getElementById('root'));\r\n"],"sourceRoot":""}